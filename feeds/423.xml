<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[imays: 게임엔진 개발자의 조용한 뒷담화]]></title>
			<link>http://imays.blog.me</link>
			
				<image>
					<url><![CDATA[http://blogpfthumb.phinf.naver.net/MjAxNzA3MjlfMTU2/MDAxNTAxMzE2NTUzMTcx.DqAVtfBOswwv_xLlupjZgiis9rklm1oUtvuaWj6HGggg.HX-dN2jt76ddsuNPGuEStdlPW2Kgq9D5-Qz1T_5ZFycg.JPEG.imays/profileImage.jpg?type=m2]]></url>
					<title><![CDATA[imays: 게임엔진 개발자의 조용한 뒷담화]]></title>
					<link>http://imays.blog.me</link>
				</image>
			
			<description><![CDATA[배현직입니다.
게임서버엔진 프라우드넷 개발자입니다.]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Tue, 14 May 2019 07:07:59 +0900</pubDate>

			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[멀티스레드 잠금 순서의 규칙 (그리고 책 광고)]]></title>
					<link>http://imays.blog.me/221501238012</link>
					<guid>http://imays.blog.me/221501238012</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. 멀티스레드 프로그래밍에서 교착상태(deadlock)는 중요한 주제입니다. 얼마전 저는, 많은 분들께 여러가지 잠금&amp;잠금해제 루틴에 대해서 교착의 위험이 있는지 없는지 여부에 대한 것을 설문조사를 했습니다. 답을 하되 직접 코딩해서 실험 후 답변하지 말아달라고 했습니다. 실험하게 되면 답이 나와버리기 때문에 설문조사의 의미가 없으니까요. 사람들이 멀티스레드 프로그래밍에서의 잠금 순서에 대한 이해가 어느정도 있는지를 파악하기 위한 설문조사였습니다. 한 가지 정의를 하겠습니다. 다음 프로그램의 경우 recursive_mutex A; // 재귀 뮤텍스 혹은 임계영역 recursive_mutex B; foo() { A.lock(); // .......]]></description>
					<pubDate>Sat, 30 Mar 2019 15:40:18 +0900</pubDate>
					<tag><![CDATA[멀티스레드,게임서버]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[안정적인 프로그램을 만드는 꿀팁 그리고 팩폭]]></title>
					<link>http://imays.blog.me/221496150889</link>
					<guid>http://imays.blog.me/221496150889</guid>
					<description><![CDATA[안녕하세요, 배현직입니다.주변에서 프로그래머들이 자주 실수하는 것을 추려 봅니다. 쓸데없이 복잡하게 짜지 않는다. 기교는 설명 가능한 이유가 반드시 있을 때만 부린다. 일단 짰으면 잘 돌아가도 함수 첫줄뷰터 다시 리뷰한다. 더 길어지면 외우기 힘드실테니 여기까지만. 사족: 관련 팩트폭행잘난 척하는 프로그래머들은 위의 꿀팁을 들으면 &quot;당연한 것 아냐?&quot;라는 말을 하는데, 정작 그들이 위 꿀팁과 더 정반대로 신나게 달립니다!!! ㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎ.......]]></description>
					<pubDate>Sun, 24 Mar 2019 17:01:24 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[비주얼스튜디오의 병렬스택 뷰]]></title>
					<link>http://imays.blog.me/221474972898</link>
					<guid>http://imays.blog.me/221474972898</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. Visual Studio에는 병렬스택(Parallel Stacks)을 보는 기능이 디버거에 있습니다. 이 기능은 현재 실행중인 스레드의 각 스택에서 공통적인 부분과 아닌 부분을 걸러내서 트리 형태로 보여줍니다. 스레드 수가 많을때 엄청나게 편리합니다. 작은 프로그램을 개발할 때는 별 쓸 일이 없습니다만 덩치 큰 프로그램 특히 라이브 서버를 개발할 때는, 덤프 파일을 볼 때 이것을 이용하면 어마어마한 시간 절약을 할 수 있습니다. 이 멋진 기능은 Community Edition에서도 사용 가능합니다. 멀티스레드 프로그래밍을 업무상 많이 하시는 분은 꼭 쓰세요. Visual Studio는 리눅스도 지원합니다. 리눅스에서도 이 병렬스택뷰.......]]></description>
					<pubDate>Tue, 26 Feb 2019 10:31:27 +0900</pubDate>
					<tag><![CDATA[멀티스레드]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[멀티스레드 프로그래밍의 design by contract & eventual determinism 4편]]></title>
					<link>http://imays.blog.me/221465259731</link>
					<guid>http://imays.blog.me/221465259731</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. 오랫만에 4편을 씁니다. 3편은 이 링크를 클릭하세요. 케이스2에 이어서 케이스3을 다뤄보겠습니다. 케이스3의 질문은 이것이었습니다.케이스3 전역 함수 foo가 있습니다. foo는 컨텍스트 역할을 하는 파라메터가 하나 있습니다. foo는 컨텍스트에 대한 읽기쓰기를 합니다. void foo(Y context, ...); 어떤 코드가 컨텍스트 객체 즉 Y 객체 y1,y2를 만듭니다. Y y1 = new Y(); Y y2 = new Y(); foo(y1, …)를 여러 스레드에서 호출합니다. Thread1() { foo(y1,...); } Thread2 { foo(y1,...); } 메모리가 망가지는 에러가 납니다. foo 코드가 잘못일까요? foo를 사용하는 코드가 잘못일까요? 이 질문의 설문 결과는 다.......]]></description>
					<pubDate>Wed, 13 Feb 2019 23:58:01 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[중국의 어떤 서버 개발자의 디비 설계]]></title>
					<link>http://imays.blog.me/221461537682</link>
					<guid>http://imays.blog.me/221461537682</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. 제가 2010년?쯤에 어떤 중국 서버 개발자와 나눈 대화 내용입니다. 몇년전에 다른 포럼에 올렸던 글이기도 하지만 그 내용 그대로 제 블로그에도 다시 올려봅니다. 그리고 몇 가지 더 내용도 추가해봅니다. ---------------------------- 중국 개발자: 우리는 가입자 1억명 들어가 있는 게임의 디비에 유저 정보를 바이너리로 시리얼라이즈해서 그냥 쌩으로 때려박는다. 트랜잭션 안 써. 나: 헐? 너 미쳤어? 중국 개발자: 안그러면 디비가 못 버팀. 나: 그렇게 하면 검색도 어렵고 트랜잭션도... 중국 개발자: 트랜잭션이 뭐하는데 쓰는건지는 아니? 나: 어쩌고 저쩌고 중국 개발자: 그건 피지컬 오류에 대한 롤백이고.......]]></description>
					<pubDate>Sat, 09 Feb 2019 12:00:37 +0900</pubDate>
					<tag><![CDATA[데이터베이스]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[C++ 실력을 획기적으로 올리는 방법]]></title>
					<link>http://imays.blog.me/221460555803</link>
					<guid>http://imays.blog.me/221460555803</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. 어떤분이 질문하셔서 거기다 답글 단 후에, 여기도 구체적으로 적어봅니다.사람마다 다릅니다만, 제가 C++ 실력을 크게 올렸던 케이스들을 나열해봅니다. C++보다 C와 어셈블리어에 익숙한 것이 먼저입니다.저는 중학생때 어셈블리어를 시작했고 뒤늦게 C와 C++을 했습니다. 중학생때는 어셈블리어만 갖고 여러 프로그램을 만들어봤고, 심지어 부트섹터에 어셈블리어로 프로그램을 짜넣어서 부팅디스켓도 만들어봤습니다. 부팅해서 화면에 글자 출력하고 땡~~~ ㅋㅋㅋ 어셈블리어를 모르는 채로 C와 C++을 했다면 큰 한계를 매번 느꼈을 것입니다. 실제로 같이 일해본 프로그래머 중에 어셈블리어를 다룰줄 아는 프로.......]]></description>
					<pubDate>Fri, 08 Feb 2019 04:25:14 +0900</pubDate>
					<tag><![CDATA[프로그래밍]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[책: 제대로 시켜라]]></title>
					<link>http://imays.blog.me/221452144797</link>
					<guid>http://imays.blog.me/221452144797</guid>
					<description><![CDATA["상사는 업무를 지시하되, 최종 목표를 알려주어라. 상사 자신이 원하는 것이 뭔지를 알려주어라. 부하는 업무를 지시받되 최종 목표를 이해하려고 하라. 상사가 원하는 것이 뭔지를 물어라."저는 옛날부터 이렇게 해왔습니다. 이렇게 함으로써, 제가 부하일 때는 일 잘 하는 상사와 못하는 상사를 구별할 수 있었고, 제가 상사일때는 일 잘하는 부하와 못하는 부하를 구별할 수 있었습니다. http://www.yes24.com/24/goods/5292867?fbclid=IwAR3qgaaG0dMnQcqBmFT58j9gh0qSLD6O-WI5c9QYGz8bPtivKRVl5vUu9wg]]></description>
					<pubDate>Sun, 27 Jan 2019 13:45:38 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[stackoverflow를 통해 알아보는 질문과 답변 에티켓]]></title>
					<link>http://imays.blog.me/221442234213</link>
					<guid>http://imays.blog.me/221442234213</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. 프로그래밍을 하다 보면 모르는 것을 물어봐야 할 때가 자주 발생합니다. 이럴때는 프로그래밍 문답 게시판이 중요한 역할을 합니다. 그런 게시판이 없을 시절에는, 지인에게 묻던지, 방대한 책을 뒤져서 답을 찾던지 해야 했습니다. 무척 비효율적이었죠. 응답하라1986 ㅋㅋㅋ 저는 모뎀과 전화선으로 PC통신이라는 것을 하던 시절부터 게시판을 애용했습니다. 그러다가 인터넷을 접하면서, 외국어로 대화하면서 점점 뉴스그룹으로 넘어갔습니다. 제가 뉴스그룹에서 활동했던 내역은 놀랍게도 지금도 살아 있네요! 여기를 눌러보시면 됩니다. 뉴스그룹에서는 영어로 대화를 주고 받습니다. 제 경험상 PC통신보다 뉴스.......]]></description>
					<pubDate>Tue, 15 Jan 2019 05:03:24 +0900</pubDate>
					<tag><![CDATA[stackoverflow]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[멀티스레드 프로그래밍의 design by contract & eventual determinism 3편]]></title>
					<link>http://imays.blog.me/221440589428</link>
					<guid>http://imays.blog.me/221440589428</guid>
					<description><![CDATA[이번에는 2편에 이어서 3편입니다. 말은 참 길지만, 멀티스레드 프로그래밍의 design by contract &amp; eventual determinism라는 제목으로 제가 연재하는 이 포스팅들은, 이해가 어려운 내용은 아닙니다. 숙련된 프로그래머에게는 당연한 이야기로 들릴 것입니다. 하지만 이것을 몰라서 멀티스레드 프로그래밍 중에 실수를 하는 사람들을 왕왕 봐왔습니다. 덩치 작은 멀티스레드 프로그래밍을 할때는 별로 와닿지 않는 내용입니다. 하지만 덩치 크고 성능 중요하고 멀티스레드로 작동하는 프로그램을 만드는 분들에게는, 알면 본전이고 모르면 패가망신하는 중요한 내용입니다. 케이스2아래는 케이스2 질문 본문입니다. -------------------- X.......]]></description>
					<pubDate>Sat, 12 Jan 2019 22:46:59 +0900</pubDate>
					<tag><![CDATA[멀티스레딩]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[멀티스레드 프로그래밍의 design by contract & eventual determinism 2편]]></title>
					<link>http://imays.blog.me/221430386161</link>
					<guid>http://imays.blog.me/221430386161</guid>
					<description><![CDATA[멀티스레드 프로그래밍의 design by contract &amp; eventual determinism 1편에 이어서 포스팅하는 글입니다. 거기서 설문조사도 있었는데요, 그 결과부터 공개하면서, 본 글에 대한 내용을 전개해보도록 하겠습니다. 글 앞뒤를 왔다갔다하며 보시는 것은 귀찮을테니, 1편의 글을 복붙하면서 진행해보죠. 케이스1 구조체나 클래스 X가 있습니다. class X { ... } 어떤 코드에서 X의 인스턴스 x1을 생성합니다. X x1 = new X(); x1을 한 스레드에서 읽기쓰기합니다. 문제 없이 잘 작동합니다. 어떤 코드에서 x1을 여러 스레드에서 읽기쓰기합니다. Thread1() { x1.func1(); } Thread2() { x1.func1(); } 메모리가 망가지는 에러가 납니다. X 코드.......]]></description>
					<pubDate>Sun, 30 Dec 2018 14:48:17 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[멀티스레드 프로그래밍의 design by contract & eventual determinism]]></title>
					<link>http://imays.blog.me/221428677043</link>
					<guid>http://imays.blog.me/221428677043</guid>
					<description><![CDATA[안녕하세요, 배현직입니다. 멀티스레드 프로그래밍 관련해서 별 것 아니지만 미묘한 것을 적어봤습니다.어떤 분에게는 당연하고 어떤 분에게는 마음에 와닿지 않고 어떤 분에게는 업무매뉴얼에 적어야 하겠다는 생각이 드는 내용일 것입니다.케이스1 구조체나 클래스 X가 있습니다. class X { ... } 어떤 코드에서 X의 인스턴스 x1을 생성합니다. X x1 = new X(); x1을 한 스레드에서 읽기쓰기합니다. 문제 없이 잘 작동합니다. 어떤 코드에서 x1을 여러 스레드에서 읽기쓰기합니다. Thread1() { x1.func1(); } Thread2() { x1.func1(); } 메모리가 망가지는 에러가 납니다. X 코드가 잘못한 것일까요? 아니면 X를 사용하는 코드가 잘못한 것일까.......]]></description>
					<pubDate>Thu, 27 Dec 2018 22:33:35 +0900</pubDate>
					<tag><![CDATA[멀티스레드]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[초5 아들이 직접 만든 게임 ]]></title>
					<link>http://imays.blog.me/221426481837</link>
					<guid>http://imays.blog.me/221426481837</guid>
					<description><![CDATA[초5 아들이 만든 게임입니다. 직접 플레이 해보세요!영어로 게임소개 쓰는 부분 빼고 전부다 자기 혼자 노력으로 만든거에요. https://scratch.mit.edu/projects/251191070/]]></description>
					<pubDate>Mon, 24 Dec 2018 23:30:14 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프로그램을 짜실 때는 단순한 로직으로 만드는 것이 중요합니다.]]></title>
					<link>http://imays.blog.me/221416793212</link>
					<guid>http://imays.blog.me/221416793212</guid>
					<description><![CDATA[프로그램을 짜실 때는 단순한 로직으로 만드는 것이 중요합니다. "simple is the best"라고 하는, 부연설명 많은(...) 코딩의 룰이 있습니다. 복잡한 코딩은 누구든지 마음만 먹으면 안 어렵게 할 수 있습니다. 숙련된 프로그래머는 일부러 복잡한 코드를 짜지 않습니다. 단순한 코딩은 많은 경험과 실력이 있어야만 가능한 경우도 있습니다. "단순하게 짜는 법을 몰라서 복잡하게 짜는" 경우도 종종 봤어요. 특히 프로그램의 덩치가 커지고 안정성이 중요할 때는 단순한 코딩이 매우 중요해집니다.]]></description>
					<pubDate>Tue, 11 Dec 2018 11:14:33 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[후대 교육]]></category>
					<title><![CDATA[초등학생 프로그래밍 언어로 파이썬보다 스크래치를 추천합니다.]]></title>
					<link>http://imays.blog.me/221342892390</link>
					<guid>http://imays.blog.me/221342892390</guid>
					<description><![CDATA[초등학생 프로그래밍 공부에는 파이썬보다 스크래치가 더 낫다고 마음이 바뀌었(...)습니다. 한때 파이썬이 더 낫다고 생각했던 이유:스크래치의 블럭조립식 코딩이 자기가 만드는 아웃풋 대비 예뻐서 만족도가 떨어짐.파이썬보다 생산성이 떨어짐.파이썬은 잘 해놓으면 실무에서도 계속 이어서 쓸 수 있음. 지금은 파이썬이 더 나쁘다고 생각하는 이유:초등학생들은 문법 실수를 생각보다 많이 한다. 파이썬은 문법 실수에 의한 실수 연발로 의욕감퇴를 유발할 수 있다.파이썬은 남들이 만든 비슷한 수준의 프로그램을 찾기 힘들다. 예제를 찾으려고 하면 너무나도 광범위하다. 딥러닝 소스까지 나오는데 이건 뭐...그러나 스크래치는 모든 프로.......]]></description>
					<pubDate>Tue, 21 Aug 2018 10:55:03 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[게임 서버 프로그래밍을 시작하는 분들을 위한 몇가지 문서들]]></title>
					<link>http://imays.blog.me/221274562819</link>
					<guid>http://imays.blog.me/221274562819</guid>
					<description><![CDATA[게임 서버 기초 공부를 위해 필요한 것은 네트워크데이터베이스운영체제멀티스레딩C++, C# 중 택일하여 프로그래밍 입니다. 이것만 알고 있으면, 게임 서버는...성능 안좋게 짜는건 껌입니다. 그러나, 게임 서버 프로그래밍은, 얼마나 좋게 만드느냐 부분에서 실력차이가 크게 납니다. 1 그래도 기초는 다져야겠죠. 다음은 20년전쯤에 읽었던 자료 중 제가 추천하는 문서들입니다. 고대 유물이라고 무시하지 마세요. 지금도 현역으로 여전히 쓰이는 기법입니다. 일반적인 온라인 게임 dead reckoning 즉 추측항법입니다. 위치 예측과 보정 기법이 핵심입니다. MMO 게임에서는 거의 필수로 사용되고 있는 흔한 기법입니다.우리나라의 거의 모든 게.......]]></description>
					<pubDate>Sun, 13 May 2018 11:26:22 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[C++의 논란의 여지가 있는 멋진 코드 최적화]]></title>
					<link>http://imays.blog.me/221148552857</link>
					<guid>http://imays.blog.me/221148552857</guid>
					<description><![CDATA[프로그램은 소스코드가 보여주는 대로 작동해야 합니다. 그것이 원칙이죠. 그런데 컴파일러가 의도적으로 그 원칙을 깨버린다면, 안될 일이죠. 하지만 그 원칙을 깨는 대신에 우리에게 뭔가 이익을 준다면, 논란의 여지가 있을 수 있습니다. C++ 프로그래밍을 하다 보면 debug or release build 선택을 왔다갔다하기 마련입니다. 평소에는 debug build로 개발을 하고, 출시를 할 때는 release build로 출시를 하는거죠. debug build는 프로그램 실행 속도 즉 런타임 속도가 느린 대신에 프로그램에 숨어있는 오류의 원인을 쉽게 찾아낼 수 있죠. release build는 런타임 속도가 빠르지만 오류의 원인을 일부 찾아내기가 어렵습니다. debug build에.......]]></description>
					<pubDate>Sun, 26 Nov 2017 00:17:56 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[C++ 다형성과 if,switch 구문 중 어느게 더 실행 속도가 빠를까? (3)]]></title>
					<link>http://imays.blog.me/221132335808</link>
					<guid>http://imays.blog.me/221132335808</guid>
					<description><![CDATA[앞서 제가 쓴 글에서 이어서 계속 해보겠습니다.http://imays.blog.me/221128092548 앞서 글에서 저는 virtual 함수 쪽이 더 느리다.특히, virtual 함수에 들어가는 파라메터의 양이 많을수록, virtual 함수쪽이 switch-case보다 훨씬 느려진다! 이렇게 예상하고 있었습니다. 이제 이것이 정말 그럴지 테스트를 해봅시다. 우선 virtual 함수의 테스트 코드를 봅시다. RunBase* r = new RunA();RunBase* r2 = new RunB();cout &lt;&lt; "TestVirtualFunction starts...\n";bool flag = false;for (int i = 0; i &lt; TestCount; i++){ if (!flag) r-&gt;Run(flag, !flag, flag, !flag, flag, !flag, flag, !flag, flag, !flag); else r2-&gt;Run(f.......]]></description>
					<pubDate>Sat, 04 Nov 2017 11:19:35 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[C++ 다형성과 if,switch 구문 중 어느게 더 실행 속도가 빠를까? (2)]]></title>
					<link>http://imays.blog.me/221128092548</link>
					<guid>http://imays.blog.me/221128092548</guid>
					<description><![CDATA[앞서 제가 쓴 글에서 이어서 계속 해보겠습니다.http://imays.blog.me/221101893319 예상대로 몇몇 분들의 의견들이 달렸네요. 제가 동의하는 댓글도 있고 아닌 것도 있네요. virtual 함수와 switch-case 중 어느 것이 더 느릴까? 제 예상은 다음과 같습니다. virtual 함수 쪽이 더 느리다.특히, virtual 함수에 들어가는 파라메터의 양이 많을수록, virtual 함수쪽이 switch-case보다 훨씬 느려진다! virtual 함수에 파라메터 양이 많은 경우는, 응용 프로그램의 덩치가 커질수록 이슈가 실제로 됩니다. 성능에 민감하면서도 덩치가 크고 구조가 복잡한 프로그램이면 이것은 있을 수 있는 일입니다. 왜 이런 차이가 날까요? 먼저 virtual 함수 케.......]]></description>
					<pubDate>Sun, 29 Oct 2017 22:59:52 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[게임 서버 개발의 최고 대세 "서버리스아키텍처"]]></title>
					<link>http://imays.blog.me/221124254840</link>
					<guid>http://imays.blog.me/221124254840</guid>
					<description><![CDATA[이번 아마존 AWS 세미나에서 화끈하게 서버리스 대세론을 밀어붙이네요.실시간 멀티플레이(플레이어간 대전)만 소켓 서버 기반이겠지만 그 외의 모든 것들은 HTTP 기반 서버리스가 자리잡을 것입니다. 가령 로그인,매치메이킹,리더보드,캐릭터 강화,합성,뽑기 등등 말이죠.게임서버엔진 자체가 완전히 필요없는 시대의 시작이네요.그나마 실시간 멀티플레이도 아마존 게임리프트+데디서버로 끝. 이쪽마저도 게임서버엔진 자체가 완전히 필요없네요.현재 세계에서 제일 인기 많고 규모 큰 게임 '배틀그라운드'가 서버리스+데디서버 방식인데 뭘 더 검증사례가 필요할까요? 뭐, 저는 이미 예견한 바입니다. 기타 참고 링크]]></description>
					<pubDate>Tue, 24 Oct 2017 16:48:01 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[C++ 다형성과 if,switch 구문 중 어느게 더 실행 속도가 빠를까?]]></title>
					<link>http://imays.blog.me/221101893319</link>
					<guid>http://imays.blog.me/221101893319</guid>
					<description><![CDATA[C++의 다형성은 if 구문 떡칠이나 switch-case 구문 떡칠을 예쁘고 확장성있게 만들어준다는 아름다움이 있죠.그렇다면 성능은 어떨까요? A,B 작업을 선택해서 실행하는 코드를 예로 들어봅시다.먼저 아름다운 C++부터. class RunBase {public: virtual void Run()=0;} class RunA:public RunBase{public: virtual void Run() override {}} class RunB :public RunBase{public:virtual void Run() override {}} void main(){ RunBase* r = new RunA(); r-&gt;Run();} 보시다시피 가상 함수 Run을 갖고 다룹니다. 자 이번에는 구닥다리 switch-case 구문도 해봅시다. class Run{public: enum { A, B } runType_; void Run() { switch(runType_) { .......]]></description>
					<pubDate>Thu, 21 Sep 2017 12:13:53 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[Visual C++의 쌈박한 댕글링 감지 기능]]></title>
					<link>http://imays.blog.me/221101506756</link>
					<guid>http://imays.blog.me/221101506756</guid>
					<description><![CDATA[아래 delete null을 보니... 같이 일하는 동료 SJH님과 얼마전 같이 찾아낸, Visual C++의 쌈박한 기능 하나를 소개해봅니다.다음 코드는 댕글링을 일으킵니다. a = new xxx;delete a;a-&gt;xxx = xxx; 그런데 항상 여기서 크래시가 일어나지는건 아니죠. a를 포함하고 있는 메모리 페이지가 아직 사용중이면 그냥 곱게 넘어가 버립니다. 그리고 미래에서 힙 코럽션이 팍 뜨죠. 그러면 버그는 미궁에 빠지게 됩니다. 그런데 Visual C++에서는 이걸 예방하는 쌈박한 기능이 있습니다. 일단 Visual C++ 컴파일러 설정에서 'basic security check'를 켜줍니다. 그리고 위 코드를 실행해보면... 무조건 댕글링 순간 크래시가 딱 떠줍니다. 어떻게 그.......]]></description>
					<pubDate>Wed, 20 Sep 2017 21:44:21 +0900</pubDate>
					<tag><![CDATA[c]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[모바일 게임에 최적화된 게임 서버 솔루션 Playfab]]></title>
					<link>http://imays.blog.me/221074670286</link>
					<guid>http://imays.blog.me/221074670286</guid>
					<description><![CDATA[각종 게임 서버 개발 솔루션이 참 많죠. 이들 중에, 국내에만 의외로 잘 안 알려진 게임서버 미들웨어, 아니 백엔드 서비스 중에는 Playfab이 있습니다.사실, 국내에만 안알려져 있고요, 글로벌로는 이미 잘 알려져 있습니다. Playfab을 쓰는 업체들은 보시다시피 캡콤, 반다이남코, 로비오(앵그리버드 개발사), 미니클립 등 해외 유명 게임회사들이 있습니다. Playfab은 모바일 게임이나 PC 게임 개발을 위한 게임서버 기능들을 두루 갖추고 있습니다. 퀵로그인(페이스북,구글,게임센터,스팀,트위치 등)커스텀 로직 개발 기능 (아이템 인벤토리,캐릭터 강화,합성,조합 등등)통계 기능 (업적,부분유료화를 위한 기반 정보 등)모바일 푸시 기능, 전.......]]></description>
					<pubDate>Tue, 15 Aug 2017 22:01:39 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[오늘 사내 세미나에서 내 입에서 나온 말 중 가장 개인적으로 마음에 드는 내용]]></title>
					<link>http://imays.blog.me/221070373413</link>
					<guid>http://imays.blog.me/221070373413</guid>
					<description><![CDATA[오늘 사내 세미나에서 내 입에서 나온 말 중 가장 개인적으로 마음에 드는 내용:"디자인패턴이나 C++17 새로운 기능 하나 더 아는 것보다, hash map에서 bucket 크기를 prime number로 잡고 key 값에 가블링 가능한 값 하나 더 넣어서 hash collision 줄이는 요령 아는 것이 더 값지다."]]></description>
					<pubDate>Wed, 09 Aug 2017 17:03:04 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[전세계 각종 게임서버엔진 리스트]]></title>
					<link>http://imays.blog.me/221059867376</link>
					<guid>http://imays.blog.me/221059867376</guid>
					<description><![CDATA[제가 알고 있는 게임서버엔진 리스트를 나열해봅니다. 제가 개인적으로 느끼는 인지도 순으로 나열해봅니다. Gamesparkshttps://www.gamesparks.com/ 게임 백엔드 서비스(game back end service)는 game baas나 g-baas라는 이름으로 불리기도 합니다.게임개발자가 게임 서버를 직접 설치할 필요 없이, 게임서버쪽 몇가지 코드만 짜면 됩니다. 로그인,매치메이킹,인앱결제,플레이어정보 액세스 등 웬만한 기본 기능이 다 갖추어져 있습니다. Gamesparks는 영국에 본사가 있는 게임 서버 프레임워크 백엔드 서비스 업체입니다. 글로벌 규모로 확장하고 있습니다. 직원수가 200명 정도 된다고 들었습니다. 제가 아는 게임서버엔진 업체 중 가장 규모.......]]></description>
					<pubDate>Wed, 26 Jul 2017 07:59:31 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[서버리스아키텍처의 허와 실]]></title>
					<link>http://imays.blog.me/221056158014</link>
					<guid>http://imays.blog.me/221056158014</guid>
					<description><![CDATA[일단 자극적 제목 죄송 ㅠㅠ진짜 이름 그대로 허와 실을 썰 풀어볼게요. 서버리스아키텍처는 게임서버 개발에 만병통치약이다? =&gt; 서버리스아키텍처는 현재 게임 서버 개발 방법론 중 가장 최신 트렌드로 알려져 있습니다. 그렇다고 만병통치약이라고 생각하시면 안됩니다. 모든 약이 그렇듯이 말이죠(...) 서버리스아키텍처는 아웃게임과 싱글플레이 인게임에만 적합합니다. 멀티플레이 인게임에는 부적합합니다. (인게임이란? =&gt; in-game 즉 실제 전투가 벌어지는 동안을 말합니다. 아웃게임이란? =&gt; out-game 즉 인게임을 제외한 나머지를 말합니다. 로그인,매치메이킹,템 맞추기,강화,뽑기,상점 등등을 통틀어 아웃게임이라고 부릅.......]]></description>
					<pubDate>Thu, 20 Jul 2017 23:55:18 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[7월 10일 월요일]]></title>
					<link>http://imays.blog.me/221048062233</link>
					<guid>http://imays.blog.me/221048062233</guid>
					<description><![CDATA["난 제발 무슨 좋은 리더들이 직원들의 없는 실력도 이끌어 내는 신처럼 다루는 이야기를 안했으면 좋겠다. 스티브 잡스는 갑자기 엘리베이터에서 질문한 답에 대답못하면 짤랐다. 하지만 대답한 사람들에게는 둘도 없는 리더일수도 있다. 그러니 제발 실력 없는 자신을 구원해줄 리더가 있을거라는 생각은 집어치우고, 리더건 경영자건 무시못할정도의 실력을 키우라구..." 맞는 말씀.]]></description>
					<pubDate>Mon, 10 Jul 2017 14:05:08 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[게임 서버 개발에, 서버리스아키텍처의 시대가 온다]]></title>
					<link>http://imays.blog.me/221046712895</link>
					<guid>http://imays.blog.me/221046712895</guid>
					<description><![CDATA[서버리스아키텍처(serverless architecture)라는 것이 있습니다.서버를 개발하는데 서버가 없는 구조?? 용어가 좀 쌩뚱맞죠. 이게 뭐냐면... 서버 개발자가 더 이상 대용량 서버 구조 설계를 생각할 필요가 없게 해주면서도, 서버의 모든 로직을 직접 다 서버 개발자가 만들 수 있게 해주는 것을 말합니다. 간단합니다. 여러분은 그냥 단일 서버 만든다는 기분으로 서버의 코드를 짭니다. 서버가 갖고 있을 메모리 데이터 그리드를 정의합니다. 다만 메모리 데이터 각각의 샤드키 정도는 정의를 해야 합니다. (별로 어렵지도 않습니다!) 그리고 서버가 다룰 영구적 데이터 즉 데이터베이스를 정의합니다. 이때도 샤드키는 정의를 해야 합니다. (역.......]]></description>
					<pubDate>Sat, 08 Jul 2017 10:48:32 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[나의 epoll 게임 서버 개발 이야기]]></title>
					<link>http://imays.blog.me/221019651670</link>
					<guid>http://imays.blog.me/221019651670</guid>
					<description><![CDATA[한줄 요약:되는데요? 부연 설명:IOCP를 쓸 줄 알고 non-block I/O를 잘 이해하면 그냥 쉽게 끝납니다. 함정:윈도서버처럼 여러 스레드에서 처리 이벤트를 분배해서 만드는 것이 까다롭습니다. 이 점에서는 윈도서버가 리눅스보다 낫습니다.윈도서버는 돈 주고 사는 물건이라는 것이 함정]]></description>
					<pubDate>Thu, 01 Jun 2017 22:19:04 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[나의 IOCP 게임서버 개발 이야기]]></title>
					<link>http://imays.blog.me/221017180573</link>
					<guid>http://imays.blog.me/221017180573</guid>
					<description><![CDATA[얼마 전에 IOCP(I/O Completion Port)를 어떻게 배웠는지에 대해서 SNS를 통해 물어보았습니다. 가장 오래된 것은 Network Programming for Microsoft Windows라고 하더라구요. 이 책은 1999년에 나왔습니다. 이밖에도 2002년 경 이기탁님의 포스팅도 있고, 한동훈님의 온라인 게임 서버 프로그래밍(2007년)도 있고, 서강대학교 MTEC에서 저에게(...)(2015년)도 있네요. 자랑 좀 하겠습니다. 저는 하이텔 게임 제작 동호회에서 네트워크 프로그래머 쪽으로 나름 유명 했었습니다. 네트워크 프로그래밍 쪽으로 채팅을 통해서 많이 문답을 해줬거든요. 이때 IOCP에 대한 것도 알려주면서 사용법 및 문제 해결 코치 등을 해 주었습니다. 이때가 대략.......]]></description>
					<pubDate>Mon, 29 May 2017 23:22:57 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[free list 활용: 동적 배열 객체를 로컬 변수로 써도 성능 문제를 해결하기]]></title>
					<link>http://imays.blog.me/221007437093</link>
					<guid>http://imays.blog.me/221007437093</guid>
					<description><![CDATA[C++ 프로그래밍을 하시는 분은 아래와 같은 코드를 보시고 깊은 빡침을 느끼셔야 합니다. class Character{ void Update() { std::vector&lt;int&gt; item; // [1] item.push_back(xxx); // [2] item.push_back(xxx); // [3] Process_Something(item); }} 이 코드가 가지고 있는 문제점은 다음과 같습니다. Update 함수는 매우 자주 호출되는 함수입니다. 이 함수가 1초에 수천번 수만번 호출 된다고 생각해 보세요. [1~3] 과정에 의해서 배열을 memory heap에 할당을 하게 되고 해제도 하게 됩니다. 운이 없으면 heap realloc과 배열 아이템 복사도 덩달아서 발생하게 될 것입니다. 이러한 경우 다음과 같이 만드는 것이 좋습니다. void Update(.......]]></description>
					<pubDate>Tue, 16 May 2017 23:57:45 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[컴퓨터]]></category>
					<title><![CDATA[인공지능의 아버지 마빈 민스키]]></title>
					<link>http://imays.blog.me/220979713279</link>
					<guid>http://imays.blog.me/220979713279</guid>
					<description><![CDATA[https://en.wikipedia.org/wiki/Marvin_Minsky 2001년 미국 GDC에 갔을 때, 마빈민스키 교수님의 강연을 들을 일이 있었죠. 크리스헤커: "인공지능의 아버지, 마빈 민스키입니다"관중: 기립박수 강연 내용은 기억이 안납니다. 영어가 약해서요 ㅠㅠ 강연 끝나고 컵 들다가 툭 떨어뜨리면서 하신 말"이놈의 컵은 매년 점점 무거워지네" 당시에 나이 정말 많으셨는데 현역 교수였어요. 얼마전에 알았습니다. 작년에 타계하셨다는. RIP...]]></description>
					<pubDate>Mon, 10 Apr 2017 15:32:12 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[보트를 만들기 힘드니 항공모함을 만들자! 오버워치 넷코드의 비밀]]></title>
					<link>http://imays.blog.me/220956070871</link>
					<guid>http://imays.blog.me/220956070871</guid>
					<description><![CDATA[오랫만에 게임 웹진에 글 써봤습니다. [기고칼럼] 보트를 만들기 힘드니 항공모함을 만들자! 오버워치 넷코드의 비밀 원문보기: http://www.inven.co.kr/webzine/news/?news=173730&amp;site=overwatch#csidxbf20b6c2f897230ae5169a154086903]]></description>
					<pubDate>Sun, 12 Mar 2017 12:37:39 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[밥 안먹는 애들을 위한 게임 (아이와 함께 제작)]]></title>
					<link>http://imays.blog.me/220944498866</link>
					<guid>http://imays.blog.me/220944498866</guid>
					<description><![CDATA[저번에 ‘밥 안먹는 애들을 위한 게임’을 소개한 바가 있었죠.링크https://github.com/imays76/WhoHasMore 여러분의 애들이 밥을 잘 안 먹나요? 그러면 이걸 써 보세요~게임 규칙: 한 입 먹고, 버튼 한번 누른다. 많이 누른 사람이 승리! 아이와 저와 와이프와 여기에 그래픽과 사운드를 얹어봤습니다. 좀 있어 보이게 말이죠. 2시 20분부터 4시 50분까지 총 2시간반 소요.스프라이트 따기유니티 2D GUI 쓰는 법 공부 (처음 해보는거라…)사운드 플레이 방법 공부 (역시 처음 해보는거라…)사운드 녹음, 편집 코딩, 오브젝트 드래그 노가다 게임 제목 정하기, 로고 그리기, 배경 소재 고르기, 사운드 이펙트 제작은 곧 초4될 아들이 담당. 브금.......]]></description>
					<pubDate>Sat, 25 Feb 2017 17:47:22 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[C++ Unity build 후기]]></title>
					<link>http://imays.blog.me/220888299207</link>
					<guid>http://imays.blog.me/220888299207</guid>
					<description><![CDATA[예전에 넥슨 개발자 컨퍼런스에서 송창규의 "유니티빌드" 강연이 있었습니다.프라우드넷은 Visual Studio 2010~최신 버전 각각에 대해서 debug, release, 32bit, 64bit, static library, dynamic library의 조합으로 빌드를 해서 배포됩니다. 게다가 Xcode, Android, Embedded Linux, Playstation 4 등등에 대해서도 빌드를 합니다. 이 엄청난 양의 전체 빌드를 하기 위해 별도의 툴을 따로 만들어서 쓰고 있죠. 문제는 빌드 시간이 ㅎㄷㄷ하다는거죠. 이 시간을 단축하기 위해 유니티빌드를 시행해봤고요, 그 결과... 빌드 시간이 1/2로 단축되었습니다. 프라우드넷 소스 중에 unity build가 안되는 외부 라이브러리들이 있는데, 그게 전체 빌드.......]]></description>
					<pubDate>Sat, 17 Dec 2016 17:02:39 +0900</pubDate>
					<tag><![CDATA[c]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[요즘 신입 프로그래머의 실력에 대한 고민과 답 ]]></title>
					<link>http://imays.blog.me/220871868705</link>
					<guid>http://imays.blog.me/220871868705</guid>
					<description><![CDATA[게임 프로그래머 포럼에 질문글 http://www.gamecodi.com/board/zboard-id-GAMECODI_Talkdev-no-4390-z-20.htm 이 있길래, 제 생각을 써봅니다. ------------------------ 저는 글쓰신 분의 입장에 동의합니다. 야메코더 양산문제 말이죠... 근본 문제는 학교,학원,기업간의 문제입니다. 정부도 개입된다고 하지만, 오캄의 면도날로 일단 싹둑 잘라놓겠습니다. 학교가 추구하는 것은 깊은 기초지식과 개념의 이해입니다. 유니티건 뭐건 새로운거 나와도 금방 배울 수 있는 잠재력을 갖추게 하는데 초점을 맞추고 싶어합니다. 그러나 우리나라 기업들은 그 반대입니다. 당장 뽑아서 쓸 수 있는 현업 업무 능력을 갖추게 만드는 데 초점을 맞추는 것.......]]></description>
					<pubDate>Sun, 27 Nov 2016 15:18:28 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[컴퓨터]]></category>
					<title><![CDATA[업무일지 작성을 도와주는 스크린샷 자동 저장 앱]]></title>
					<link>http://imays.blog.me/220825210221</link>
					<guid>http://imays.blog.me/220825210221</guid>
					<description><![CDATA[저는 업무 일지를 작성할 때 10분마다 스크린샷을 뜨는 앱을 써왔었습니다. 그런데 이게 좀 불편하더군요. 매일매일 서로 다른 폴더에 저장해주지도 않고, 파일이름에 날짜와 시간이 안나오니까 불편하고, 화면 잠금이나 터미널 껐을때도 검은 화면 스크린샷을 찍어대니 귀찮고요. 그래서 하나 만들어 봤습니다. 업무일지용 스크린샷 앱. 매일 매일 서로 다른 폴더에 스크린샷을 캡쳐해줍니다.로그오프하거나 잠금하고 있으면 안 찍습니다.몇가지 만들다 만 기능들이 있습니다.(...) 그래도 일단은 쓸만할거에요. 한번 써보세요~ 주요 제작시간 1시간 반.잡다구니 설명서 쓰고 잔버그 고치는데 30분. https://github.com/Nettention/MyWorkCam]]></description>
					<pubDate>Sat, 01 Oct 2016 02:57:59 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[서브세컨드 멀티플레이, 밀리세컨드 멀티플레이]]></title>
					<link>http://imays.blog.me/220820955465</link>
					<guid>http://imays.blog.me/220820955465</guid>
					<description><![CDATA[게임 서버가 하는 역할을 동기화 기준으로 나누면 크게 두가지로 분류됩니다.실시간 멀티플레이, 비동기 멀티플레이.저는 여기서 실시간 멀티플레이 부분을 또 둘로 나누고 있습니다.서브세컨드(sub-second), 밀리세컨드(milli-second)서브세컨드 실시간 멀티플레이는 1초 내외의 오차나 레이턴시를 허락하는 것이고요, 밀리세컨드는 수십 밀리초를 허락하는거죠.서브세컨드 예는 채팅, 매치메이킹 같은 것들이고요.밀리세컨드 예는 게임플레이 중 전투의 멀티플레이 동기화를 말하는거에요.서브세컨드,밀리세컨드 동기화라는 용어는 제가 맘대로 만들어본 정의이지만, 쉽게 통용될거라는 기대도 해봅니다. 서브세컨드,밀리세컨드라는 용어 자체.......]]></description>
					<pubDate>Mon, 26 Sep 2016 10:45:18 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[제 이야기가 영화에 반영되었던 썰]]></title>
					<link>http://imays.blog.me/220762428933</link>
					<guid>http://imays.blog.me/220762428933</guid>
					<description><![CDATA[2000년쯤인가? 게임회사에서 일하던 때였습니다. 어떤 영화 제작자들이 찾아왔었습니다. 게임회사를 소재로 영화를 만들거라고 하더군요. 여러가지 배경 정보를 얻고 싶어서, 몇몇 직원들과 인터뷰를 하고 싶었다고 합니다. 제 차례가 되어서 회의실에 들어갔죠. 게임회사의 업무와 어떤일을 하는지 등등을 질문받았고, 대답해 주었죠.저의 이력에 대해서도 묻더군요. 중학생때 텍스트 모드에서 네모난 캐릭터가 돌아다니는 게임 '방구차' 만들던 이야기 등을 해주었죠. 문답 중에, 이 사람들에게 괜찮은 아이디어가 생각나서 말해주었습니다. "게임개발자가, 짝사랑을 자기가 만드는 게임에 들어오게 해서, 그녀에게 직권남용(...)으로 작업하고.......]]></description>
					<pubDate>Thu, 14 Jul 2016 22:59:53 +0900</pubDate>
					<tag><![CDATA[후아유]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[애플의 IPv6 관련 리젝트 정책에 대한 해결 방법]]></title>
					<link>http://imays.blog.me/220740576346</link>
					<guid>http://imays.blog.me/220740576346</guid>
					<description><![CDATA[애플은 올해 초부터, "니네 앱이 IPv6 지원 안하면 리젝될거임 ㅋㅋ" 정책을 펼치고 있습니다. 거두절미하고, 리젝 안당하려면 이렇게 해야 합니다. 1. 네트워킹 프레임워크를 사용할 것 2. IPv4 전용 API를 쓰지 말 것3. 하드코딩 주소를 쓰지 말 것 출처: 링크 각 설명을 들어가 보겠습니다. ---------------- 1. 네트워킹 프레임워크를 사용할 것 iOS SDK 자체에 있는, 소켓 윗단에 구현되어 있는 네트웍 프레임워크라던지, 혹은 제3의 네트워크 프레임워크를 쓰는 것을 권장한다는 뜻입니다. 네트웍 프레임웍을 쓰신다면 위 2는 웬만하면 고려 안하셔도 될 것입니다. 만약 써드파티 네트웍 프레임웍을 쓰시고 있으시면, 해당 프레임웍 개발자.......]]></description>
					<pubDate>Sun, 19 Jun 2016 22:19:52 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷 C# & 유니티 사용 동영상]]></title>
					<link>http://imays.blog.me/220740574116</link>
					<guid>http://imays.blog.me/220740574116</guid>
					<description><![CDATA[프라우드넷을 이용해서, 서버와 클라이언트 모두 C#을 이용해서 개발하는 과정을 동영상으로 보여드립니다. 클라이언트와 서버 연결 과정 만들기(클라) 클라이언트와 서버 연결 과정 만들기 (서버)Ville에 들어가는 과정 만들기나무 심기 기능 만들기나무 심기 과정에 대한 서버 처리 만들기클라이언트간 P2P로 상호작용하기]]></description>
					<pubDate>Sun, 19 Jun 2016 22:17:14 +0900</pubDate>
					<tag><![CDATA[프라우드넷_사용법]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷 사용법 #5: 클라이언트끼리 P2P 통신]]></title>
					<link>http://imays.blog.me/220740573185</link>
					<guid>http://imays.blog.me/220740573185</guid>
					<description><![CDATA[이번에는 클라이언트끼리의 직접 통신 즉 P2P에 대해서 살펴보겠습니다. 일반적으로 P2P 연결을 한다, 이러면 이렇게 작동하는 것을 기대하기 마련이죠. 1. 클라1이 클라2에게 P2P 연결을 한다.2. 연결이 성공하면 클라1과 클라2가 서로 메시지를 주고 받는다. 그런데 프라우드넷에서는 이렇게 하지 않고요, 서버에서 클라끼리의 연결을 관장합니다. 왜 이렇게 하느냐? 만약 클라1이 해킹당했을 때 아무 클라들에게 접속을 해대고 메시지를 보내려고 하면 끔찍하니까요. 대략 이런 식입니다. 1. 서버에서, 클라1과 클라2가 P2P 연결을 하라고 지시한다.2. 클라1,클라2는 자기가 P2P 연결이 됐음을 즉시 안다.2. 클라1과 클라2는 서로 메시지를 주.......]]></description>
					<pubDate>Sun, 19 Jun 2016 22:16:07 +0900</pubDate>
					<tag><![CDATA[프라우드넷_사용법]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷 사용법 #4: RMI]]></title>
					<link>http://imays.blog.me/220740572737</link>
					<guid>http://imays.blog.me/220740572737</guid>
					<description><![CDATA[꿀도 약이면 쓰다고, 업무 시간에 일하는 생각으로 쓰려니, 좀 부담스럽네요. 저는 잉여력 쩔때만 열심히 하는 스타일입니다. 저런 사람이 어떻게 사장이 됐지? 원피스의 루피 선장도 모자란 구석이 있어서 마음에 듦 넷텐션 사장님은 야근야근 열매를 드셨습니다.아무튼 시작합니다. ㅋ SendUserMessage를 이용해서 이진 데이터를 보내고, 받는 쪽에서는 OnReceiveUserMessage를 주고 받는 것은 송수신 루틴을 직접 만들어야 하는 번거로움이 있습니다. 그렇지만 프라우드넷의 RMI를 이용하면 이것이 편리해집니다. RMI는 원격 메서드 호출(Remote method invocation)의 약자입니다. 즉, 상대방의 컴퓨터 안에 있는 프로그램의 특정 함수를 멀리.......]]></description>
					<pubDate>Sun, 19 Jun 2016 22:15:35 +0900</pubDate>
					<tag><![CDATA[프라우드넷_사용법]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷 사용법 #3: WiFi<=>셀룰러 핸드오버 기능 사용하기]]></title>
					<link>http://imays.blog.me/220740572404</link>
					<guid>http://imays.blog.me/220740572404</guid>
					<description><![CDATA[TCP 소켓 자체는, 이러한 특징이 있습니다. * 실시간 멀티플레이를 하던 게임이 WiFi 존을 벗어나면, TCP 소켓은 끊어집니다. 그럼 재접속을 해줘야 하겠죠. * 반대로, WiFi 존으로 들어오면, 역시 또 끊어집니다. 역시 재접속을 해줘야죠.* 현실은 더 시궁창. 어떤 스마트폰은 끊어지고 어떤 스마트폰은 안 끊어지고 그리고 데이터 송수신은 안됨. 와샤로는 분명히 쏘고 있음. 역시 헬쥐 아주 난리도 아닙니다. 각 제조사의 스마트폰 사서 다 테스트하면서 개발해야 하죠. * 근데 주고받는 데이터가 한창 활발한데 뚝 끊어지면, 상대방이 마지막 메시지를 받았는지 아닌지 알 수 없습니다. 그럼 수신 확인 처리를 해주는 수고를 들여야 하죠. 프.......]]></description>
					<pubDate>Sun, 19 Jun 2016 22:15:10 +0900</pubDate>
					<tag><![CDATA[프라우드넷_사용법]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷 사용법 #2: 메시징 주고 받기]]></title>
					<link>http://imays.blog.me/220740572035</link>
					<guid>http://imays.blog.me/220740572035</guid>
					<description><![CDATA[클라, 서버간 일단 연결이 되었으면, 메시지를 주고 받을 수 있습니다.SendUserMessage를 호출하면 됩니다.첫번째 인자는 "누구한테 보내겠다"입니다. HostID 하나 혹은 HostID의 배열을 넣으면 됩니다. 배열을 넣으면 여럿에게 한꺼번에 송신합니다. 이를 멀티캐스트라고 부릅니다.그 다음에는, "어떤 방식으로 보내겠다"입니다. RmiContext라고 부릅니다. "신뢰성 있게 보내겠다(reliable)" 말이 어렵다 그냥 TCP처럼 보낸다라고 말해라 "신뢰성 무시하고 추가 딜레이 없이 보내겠다(unreliable)" UDP처럼 보낸다는 말임 가 가장 흔히 쓰입니다.그 다음에는 "뭘 보내겠다" 입니다. 보낼 데이터의 바이트 배열을 넣으면 됩니다. 앞서 강좌에서 N.......]]></description>
					<pubDate>Sun, 19 Jun 2016 22:14:45 +0900</pubDate>
					<tag><![CDATA[프라우드넷_사용법]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷 사용법 #1: 클라-서버간 연결하기]]></title>
					<link>http://imays.blog.me/220740571458</link>
					<guid>http://imays.blog.me/220740571458</guid>
					<description><![CDATA[이미 http://guide.nettention.com 에도 있지만, 이것 저것 다 거두절미하고, 기분 전환 겸 콤팩트한 내용으로 시작해볼까 합니다. 0. 프라우드넷 소개 넷텐션에서 개발한 게임 서버 엔진 프라우드넷은 @@&amp;^*&amp;^#$&amp;@#$*(#&amp;$*(#&amp; 그냥 다 됐고 일단 잡솨봐~몬스터길들이기,레이븐,세븐나이츠,마블퓨처파이트가 쓰고있삼코코스, 유니티, 언리얼엔진, 윈도 서버, 리눅스 서버, 윈도PC, 아이폰, 안드로이드, 플레이스테이션4, IP카메라에서 개발하실 수 있습니다. 1. 서버 만들기 CNetServer 인스턴스를 생성한 후에, Start를 호출하면 됩니다.·미리보기 | 소스복사·[C++] CNetServer* s = CNetServer::Create(); // [1] param.m_.......]]></description>
					<pubDate>Sun, 19 Jun 2016 22:14:03 +0900</pubDate>
					<tag><![CDATA[프라우드넷_사용법]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[3D 게임엔진 Xenko.]]></title>
					<link>http://imays.blog.me/220734133039</link>
					<guid>http://imays.blog.me/220734133039</guid>
					<description><![CDATA[3D 게임엔진 Xenko. 일본산 게임엔진입니다. 오픈소스입니다. 다만, 무료인지는 아직 모르겠습니다.유니티와 꽤 비슷하게 생긴 것 같습니다만, 아직 써보지 않아서 모르겠습니다.엔진 자체가 C#으로 만들어져 있습니다. 물론 개발도 C#으로 하고요. 유니티와 비슷한 오픈소스 게임엔진 Godot과 더불어, 또다른 유니티 비슷한 엔진이 등장했네요. 아직 자세히는 못봤지만, Godot보다는 완성도가 훨씬 높아 보입니다. 게다가, 포스트프로세싱의 끝판왕 '실리콘 스튜디오' 퀄리티답게 포스트프로세싱부더 뽀대나게 보여주네요. 유니티, 언리얼, 코코스만 기억하는 요즘 세상에, 새로운 선택지가 계속해서 등장하네요. http://xenko.com/]]></description>
					<pubDate>Sun, 12 Jun 2016 14:01:16 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[일본어로 작성하는 스크립트 언어 '나데시코'.]]></title>
					<link>http://imays.blog.me/220734128693</link>
					<guid>http://imays.blog.me/220734128693</guid>
					<description><![CDATA[http://nadesi.com/일본어로 작성하는 스크립트 언어 '나데시코'.의외로 게임 개발에 자주 쓴대요.]]></description>
					<pubDate>Sun, 12 Jun 2016 13:54:08 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임엔진개발]]></category>
					<title><![CDATA[프라우드넷을 사용한 게임 "마블 퓨처 파이트"]]></title>
					<link>http://imays.blog.me/220708452480</link>
					<guid>http://imays.blog.me/220708452480</guid>
					<description><![CDATA[프라우드넷을 쓴 게임 중에, "마블퓨처파이트"가 있습니다.무려...마블(MARVEL)입니다! 캡틴 아메리카, 아이언맨 등등 나오는 그거이 말입니다. 매출 상위권이고 유저들이 많지만, 그래도 더 많이들 플레이 해주세요~ 프라우드넷 서버가 힘이 남아돌아 심심해합니다.]]></description>
					<pubDate>Fri, 13 May 2016 10:01:01 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[컴퓨터]]></category>
					<title><![CDATA[다양한 언어를 잘 다루는 개발자가 됩시다.]]></title>
					<link>http://imays.blog.me/220703436817</link>
					<guid>http://imays.blog.me/220703436817</guid>
					<description><![CDATA[C만 다뤄왔던 고경력 개발자가 채용 심사 과정에서 string to string hash map 만들기를 손도 못 대는 모습을 보며 충격을 받았었죠. 충격 내용이라 함은, "C#과 C++만 다뤄왔던 고경력 개발자인 내가, OOO 만들기를 손도 못대지 않을까?" 결론: 다양한 언어를 잘 다루는 개발자가 됩시다.]]></description>
					<pubDate>Sat, 07 May 2016 15:22:11 +0900</pubDate>
					<tag><![CDATA[과]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[게임제작이야기]]></category>
					<title><![CDATA[프라우드넷을 쓴 게임 - 리얼사커]]></title>
					<link>http://imays.blog.me/220696793630</link>
					<guid>http://imays.blog.me/220696793630</guid>
					<description><![CDATA[프라우드넷을 쓴 게임들 중에, 스포츠게임도 있다는 점, 모르셨죠? 프라우드넷을 쓴 게임들 중에도 스포츠게임이 여럿 있습니다. 그들 중에 '리얼사커(Real Soccer)'를 소개합니다. 네오비앙에서 개발한 게임입니다.외국의 강세가 강한 스포츠 게임에서 이렇게 국산 게임이 자리를 잡는 것은 쉬운 도전이 아닙니다. 어려운 도전임에도 불구하고 멋지게 돌파해나가는 리얼사커를 열심히 응원하고 있습니다. 네오비앙 파이팅!]]></description>
					<pubDate>Fri, 29 Apr 2016 15:48:32 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
