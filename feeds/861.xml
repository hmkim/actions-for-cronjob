<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Jeong SeungCheol on Medium]]></title>
        <description><![CDATA[Stories by Jeong SeungCheol on Medium]]></description>
        <link>https://medium.com/@ddt1984?source=rss-83e953ce0e73------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*H0K6rEoz4KMNP_vB.</url>
            <title>Stories by Jeong SeungCheol on Medium</title>
            <link>https://medium.com/@ddt1984?source=rss-83e953ce0e73------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 18:13:20 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@ddt1984" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[지표 측정 관련해서 — 하이 아웃풋 매니지먼트]]></title>
            <link>https://medium.com/@ddt1984/%EC%A7%80%ED%91%9C-%EC%B8%A1%EC%A0%95-%EA%B4%80%EB%A0%A8%ED%95%B4%EC%84%9C-%ED%95%98%EC%9D%B4-%EC%95%84%EC%9B%83%ED%92%8B-%EB%A7%A4%EB%8B%88%EC%A7%80%EB%A8%BC%ED%8A%B8-37a4d7b782ba?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/37a4d7b782ba</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Fri, 03 May 2019 06:39:38 GMT</pubDate>
            <atom:updated>2019-05-03T06:39:38.914Z</atom:updated>
            <content:encoded><![CDATA[<h3>지표 측정 관련해서 — 하이 아웃풋 매니지먼트</h3><p>이것도 작년에 팀 내에서 발표했던 자료.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/200/1*nWsLRWDvdmYTwn2jumn0zA.jpeg" /></figure><p>&lt;하이 아웃풋 매니지먼트&gt; 중에서</p><ul><li>지표들은 각각이 모니터링되는 방향으로 관리자의 관심을 집중시키는 경향이 있다.</li><li>관리자는 지표에 과도하게 반응하지 않도록 주의를 기울여야 한다.</li><li>이를 해결하는 방법은 서로 반대되는 지표를 ‘짝지어’ 측정하는 것이다.</li></ul><p><strong>책에 나온 예) 인텔에서 컴파일러를 개발할 때 측정 지표 — 성능 좋은 컴파일러</strong></p><ul><li>성능 모니터링</li><li>추가로 완료일 모니터링</li></ul><p>이 두 개의 지표를 동시에 관찰함으로써 관리자는 완성될 가능성이 거의 없는 이상적인 수준의 컴파일러를 만들려는 무리수와 성능이 모자란 컴파일러를 서둘러 완성하려는 조급함을 피할 수 있다. ‘서로 짝지은 지표들’을 모니터링하면 최적의 결정을 내릴 수 있다.</p><p><strong>팀 예) 코드 리뷰 참여를 높이고 싶다</strong></p><ul><li>리뷰 참여수를 모니터링</li><li>커밋 수도 같이 (Changes수도 같이)</li></ul><p>코드 리뷰 참여를 늘리고 싶으면 매니저가 팀원별 리뷰 참여수를 측정하기 시작하면 된다. 그러면 팀원들은 코드 리뷰를 많이 하면서 정작 코딩 시간은 줄일 것이다. Commit 수를 짝지어서 같이 측정하면 어느정도 균형을 맞출 수 있다. (Commit 수를 측정하기 시작하면서 커밋을 쪼개서 작은 단위로 올리기 시작하면.. line 수도 측정을… 이쯤되면 아무 것도 측정하지 않는 게 좋을 수도 있다.)</p><p><strong>회사 예) Team health를 높이고 싶다</strong></p><ul><li>팀헬스 점수 모니터링</li><li>OT(Over time) 모니터링</li><li>— 부작용 — “‘우리팀’ 팀헬스 떨어져서 OT하며 개발할 수 없다”, 품질 저하</li><li>팀 퍼포먼스도 짝지어서 측정 (출시한 피처 수량, 버그 수량, 매출 등등)</li></ul><p><strong>회사 예) OT를 줄이고 싶다</strong></p><ul><li>OT 모니터링</li><li>그리고 어떤걸?</li></ul><p>회사에서 OT를 기록한 자료가 있어서 한주간의 데이터를 살펴본 결과 팀원들은 하루 평균 2시간, 중간 관리자 레벨은 하루 평균 4시간을 했다. 팀원들도 특정 소수의 인원들에 OT가 몰려있다. 그에 따른 가설은</p><ol><li>매니저들이 업무 분산을 못하고 있음</li><li>매니저 수가 부족</li><li>어쩌면 상위 매니저레벨 눈치 때문에</li></ol><p><em>그래서 다시 돌아가면 OT를 줄이고 싶다</em></p><ul><li>OT 모니터링</li><li>그리고 어떤걸?</li><li><em>매니저 OT 시간 / 팀원들의 OT 평균 시간</em> 지표</li><li>혹은 매니저들은 OT 모니터링을 안 하거나</li></ul><p><strong>실생활 예) 다이어트</strong></p><ul><li>칼로리, 운동 기록, 몸무게 기록 모니터링</li><li>(추가로) 폭식 수, 기구 무게, 런닝머신 속도, 체지방률 모니터링</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=37a4d7b782ba" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[안티프래질과 리스크 관리]]></title>
            <link>https://medium.com/@ddt1984/%EC%95%88%ED%8B%B0%ED%94%84%EB%9E%98%EC%A7%88%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%81%AC-%EA%B4%80%EB%A6%AC-5c6d778ec02d?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/5c6d778ec02d</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Wed, 01 May 2019 02:59:52 GMT</pubDate>
            <atom:updated>2019-05-01T02:59:52.114Z</atom:updated>
            <content:encoded><![CDATA[<p>&lt;안티프래질&gt;을 쓴 작가의 다음 책이 출간 된 기념으로 쓰는 글이다. 작년 10월에 팀 회고 자리에서 발표했던 내용에 리스크관리 관련 실제 업무에서 쓰는 예들을 추가해서 공개하려고 했지만 반년간 안 한 걸 봐서는 앞으로도 안 할 거 같아서 발표자료에 문장만 다듬어서 적는다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/200/1*68T_7lFes1MSsnfKTBIXjw.jpeg" /></figure><h3><strong>안티프래질 소개</strong></h3><p>Antifragile 개념을 알려면 우선 프래질(fragile)부터 알아야한다. 여행캐리어에 자주 붙이는 스티커에 써진 그 단어다.</p><p><em>Fragile</em>: 충격을 가하면 부서지는 것들. 유리잔, 와인병 등등</p><p><em>Antifragile</em>: 가변성, 무작위성, 무질서, 스트레스에 노출될 때 번창하고 성장하며, 모험과 리스크, 불확실성을 좋아하는 것들. 프래질에 정확하게 반대가 되는 단어.</p><p><strong>소프트웨어 버전으로 보는 예:</strong></p><ul><li>Atlas 2.0.0-RC</li><li>Atlas 2.8.15-LTS</li></ul><p>QA, load test, live test를 거치면서 강건해진 밑에 버전이 더 안티프래질 (코드가 처음 버전에 비해 누더기일테지만)</p><p><strong>더 이해하기 쉽게 (책에 나온) 악용 예</strong></p><ul><li>다른 사람들을 손실의 위험에 노출 시키면서 자신은 가변성, 변화, 무질서로부터 이익을 얻는다</li><li>관료, 은행업자, 다보스 회의 참석자, 실질적인 책임을 지지 않고 피해도 보지 않으면서 엄청난 권력을 행사하는 학계 인사</li><li>자신의 재산을 나눠주지 않거나 자신이 다른 사람에게 원하는 방식대로 살지 않는 좌파 인사</li><li>자신의 아이디어를 자신의 일상에는 적용하지 않는 과학 연구자들</li></ul><p><strong>엔지니어에게 더 밀접한 예</strong></p><ul><li>컨설턴트라며 뜨는 테크스텍 주제로 책이나 강의를 파는 사람들</li><li>개발자도 아니고, 뭔가를 만들지도 않음</li><li>서비스/프로그램 런칭 시기쯤 문제가 생기거나 단점들이 나와도 아무 피해가 없음</li><li>그때는 이미 다른 테크스텍을 주제로 선전 중</li><li>피해는 실제로 무언가 만들고 유지보수할 개발자들</li></ul><p>책에 나오는 잠언</p><blockquote>“다른 사람들을 프래질하게 만드는 대가로 자신이 안티프래질해져서는 안 된다.”</blockquote><h3>안티프래질과 리스크 관리</h3><p>우리는 어차피 블랙스완을 예착할 수 없다. 그러니 바벨전략을 취해야한다.</p><blockquote>“쓰나미, 아랍의 봄, 지진, 전쟁, 금융위기와 같은 사건이 발생하면, 사건을 미리 예상하지 못했던 것을 탓하지 말고 안티프래질 혹은 프래질을 파악하지 못했던 것을 탓해야 한다. 즉 ‘왜 프래질해져서 이런 사건이 일어나도록 했는가’를 물어야 한다. 쓰나미나 경제위기를 예상하지 못한 것은 용서받을 수 있다. 그러나 쓰나미나 경제위기에 프래질한 것은 용서받을 수 없다.”</blockquote><p>최근 우리팀의 예로 보면 server framework와 mobile client library를 코드상으로 아예 하나로 묶어서 크게 만들면 미래에 게임팀들에서 거절 쓰나미가 올 때 대안이 없어진다. 게임팀이 승낙할지 거절할지는 예측할 수는 없지만 우리가 스스로 프래질한지(변화에 유연하지 못한지)는 파악해둬야 한다.</p><p><strong>바벨전략</strong></p><p>어떤 영역(부의 블랙 스완 영역)에서는 안전하게 해동하고 다른 영역(정의 블랙 스완 영역)에서는 작은 리스크들을 많이 수용해 궁극적으로 안티프래질을 달성하기 위해 행동하는 이원적인 태도. 역동 기구에서 따온 이름.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*kVdMMIJN6YmwxJkN_7snbQ.jpeg" /></figure><ul><li>한쪽 끝에서는 리스크를 극단적으로 혐오하고 다른 쪽 끝에서는 극단적으로 수용한다.</li><li>리스크에 대한 양극단이 아닌 중간 지점에서 대단히 온건한 태도를 취하는 것은 엄청난 측정 오차를 낳을 수밖에 없기 때문에 결과적으로는 잘못된 선택이다.</li><li>그러나 바벨 전략은 애초부터 하강국면의 리스크를 감소시키는 결과를 낳는다(즉 파멸의 리스크를 제거한다).</li></ul><p><strong>금융 예</strong></p><ul><li>재산의 90%를 현금으로 보유하고 10%는 가장 위험한 주식에 투자한다면</li><li>엄청난 상승국면을 기대할 수 있는 반면,</li><li>10% 이상을 손해보지는 않는다.</li><li>모든 재산을 중간 정도의 리스크를 갖는 주식에 투자하는 사람은 계산을 잘못했을 경우 전 재산을 날릴 수도 있다.</li></ul><p><strong>직업 예</strong></p><ul><li>공무원을 하면서 글을 쓰는 작가들</li><li>(공무원으로) 파산의 하강국면 리스크는 줄이고</li><li>(작가로) 상승국면을 노릴 수 있음</li><li>스탕달(외교관), 카프카(국영 보험회사 직원), 스피노자(렌즈 제조업)</li></ul><p><strong>우리팀의 예</strong></p><ul><li>리스크는? 클라이언트가 없는 것. 쓸모가 없는 팀 =&gt; 폐쇄</li><li>운영툴, 로그 시스템, 덤프 수집 시스템, BI</li><li>— 작고 변하기 쉬움</li><li>— 큰 성과를 보기는 어렵</li><li>— 다양한 클라이언트가 있을 수 있는 안정적인 제품군</li><li>server framework</li><li>— 크고 변하기 어려움</li><li>— 소수의 클라이언트 밖에 있을 수 없음</li><li>— 하나라도 생기면 큰 성과를 볼 수 있는 제품군</li></ul><p><strong>우리팀의 예 (계속)</strong></p><ul><li>운영툴 같은 것만 하면 안정적인 팀이 되겠지만 큰 성장을 노릴 수 없고, server framework 같은 것만 하면 큰 성장을 노릴 수 있지만 언제 갑자기 사라질 수도 있다.</li><li>하지만 둘 다 가지고 있다면 하강국면 리스크를 감소하면서 상승국면을 노릴 수 있음.</li></ul><p><strong>정리</strong></p><ul><li>리스크 관리를 다른 시각에서도 보자 — 기존의 방식(리스크목록 나열하고, mitigation plan 짜기)으로 리스크 관리가 되나?</li><li>어차피 큰 충격을 줄 리스크는 예측 불가능</li><li>대신 어느 부분이 충격을 받으면 깨질 부분이고 어떻게 안티프래질해질지 고민해야 함</li><li>회사에서건 사생활에서건</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5c6d778ec02d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Studio Ops로 한 달간의 기록]]></title>
            <link>https://medium.com/@ddt1984/studio-ops%EB%A1%9C-%ED%95%9C-%EB%8B%AC%EA%B0%84%EC%9D%98-%EA%B8%B0%EB%A1%9D-bfed3f9627a2?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/bfed3f9627a2</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Sun, 31 Mar 2019 09:08:40 GMT</pubDate>
            <atom:updated>2019-03-31T09:08:40.792Z</atom:updated>
            <content:encoded><![CDATA[<p><strong>2월 중순</strong></p><blockquote>“ACT팀(당시 내가 관리자로 있던 팀) 없어진다.”</blockquote><p>라는 얘기를 스튜디오 GM을 통해 들었다. 전혀 예상을 안 했던 일은 아니어서 듣고 나서는 앞으로의 todo list가 머릿속을 떠다녔다. 우선 팀원들을 모아놓고 알리고, 진행 중이던 프로젝트들 어떻게 마무리할지 결정하고, 주기적으로 하는 팀원들과의 1on1 미팅 예약을 취소하고… 마지막은 나 자신의 퇴사였다. 사직서를 기존 매니저에게 영어로 써야 하는지 새 매니저에게 한국어로 써야 하는지를 생각하며 무덤덤하게 팀 해체 일들을 하나씩 해나갔다.</p><p>그러다 새로 뽑으려던 Studio Ops 자리를 일 년 정도 해보지 않겠냐는 기회가 생겼다. Technical Director로 일하며 스튜디오에 답답했던 부분을 바꿀 수 있을 거 같았다. 기술 관리자 업무가 지쳐서 뭔가 새로운 것을 해보고도 싶었다. 커리어패스를 바꾸는 선택이었지만 그 당시에는 진지하게 고민하지 않고 쉽게 결정을 했다. 지금와서 생각해보면…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4Ae6_WhXrLNiCWVAD4vi8A.jpeg" /></figure><p>이후는 3월 한 달간의 업무 목록이다.</p><p><strong>3월 첫째주</strong></p><ul><li>9층에서 6층으로 자리 이동</li><li>노사위원회 사용자측 간사가 됨</li><li>Studio THS(Team Health Survey) 후속 매니저 워크샵 준비. 자료 취합, 회의/발표 자료 만들기</li><li>Studio townhall 준비</li><li>A project에서 B project로 이동하는 인원들 현황표 작성</li><li>회사에서 지급한 모바일 기기 현황 조사</li><li>— 누가 가지고 있는지, 상태 확인</li><li>금요일 THS 매니저 워크샵 서포트</li></ul><p><strong>둘째주</strong></p><ul><li>지난주 워크샵 액션 아이템 정리</li><li>1분기 노사위원회 참석, 회의록 작성</li><li>— 회의에서 나온 문의사항 유관부서에 문의하고 답변 취합</li><li>유연근무제에서 재량근무로 바뀜</li><li>장기적인 매니저 교육 프로그램 플래닝 시작</li></ul><p><strong>셋째주</strong></p><ul><li>인사팀 주최 Employee Branding TF에 맴버가 됨</li><li>— Studio 내부 행사/기사거리 전달</li><li>— 회사 블로그 도메인 변경 이슈 팔로업</li><li>1on1 영어 수업 시작</li><li>스튜디오 타운홀 셋업</li><li>— 총 4번 — 리더십/people manager/studio외 헤드/전직원 대상</li><li>개인정보보호법 강의 듣고 법무팀에 수료증 제출</li><li>Jira 디스크용량 장애 서포트</li></ul><p><strong>넷째주</strong></p><ul><li>Jira DB 장애 QA팀에서 받아서 DBA팀으로 전달</li><li>스튜디오 타운홀</li><li>THS 디테일 액션 아이템 취합. 피플매니저들과 관련 미팅 진행</li><li>조직구조 변경 회의 참석</li><li>ACT팀 인원들 RPD 자료(평가자료) 입력하고 새 매니저들에게 전송</li><li>A팀 인원들 기존 매니저에 RPD 자료 요청.</li><li>Studio 리더십 대상 RPD 미팅 셋업</li><li>페밀리데이 가족사진 모델 직원 섭외</li><li>페밀리데이에 홍보 에이전시의 촬영 서포트하는 스탭으로 참여</li></ul><p><strong>느낀점</strong></p><p>Studio Ops가 해야할 일은 너무나 다양했다. 명확한 주인이 없는 일들은 내 몫이 되고, 지원팀들과 개발팀 사이의 틈을 메꿔야 했다. 한 주 한 주 새로운 유형의 업무들을 쳐내고, 새로운 관계자들을 만나야 했다. 회사는 저절로 돌아가지 않았다. 뒤에서 지원팀들이 고생하고 있어서 그렇게 보였을 뿐이다. 행사 하나, 회의 하나 진행하는 것도 많은 일이 필요했다. 기존에는 그런 회의가 있으면 몸만 가면 됐지만, 이제는 일정 확인하고, 장소 확보하고, 회의 자료 요청하고 취합하고, 액션 아이템 정리까지. 외부에서 하는 모임이라면 일은 더 복잡해진다. 그러니까 포스트잇이나 회의시간이 확보된 큰 회의실은 어디서 그냥 떨어지는 게 아녔다.</p><p>요즘 어떠냐는 엔지니어 동료의 말에 “개발자 계속해. 버텨.”라고 대답을 했다. 내향적인 성격이어서 다양한 사람과 많은 회의를 해야 하는 날이면 에너지를 다 소비해서 10시 전에 잠이 들었고, 그런 날의 연속이었다. 그래서 처음에는 PMP 공부를 하려고 했지만 아직까지는 할 여유가 없었다. 아직 한 달이어서 새 역할에 적응 기간인지, 적성에 안 맞는 건지 모르겠다. 전문직에서 사무직으로 변해서일지도 모르겠다.</p><p>커리어 패스를 변경하는 건 쉽게 결정할 일이 아니다. 할 수 있을지, 업무 유형이 성격에 맞는지, 장기적으로 봤을 때의 커리어에 도움이 되는지 등을 진지하게 고민해야 한다. 한 달 전의 나는 그렇게 하지 않았지만. 그리고 ‘큰 그림’을 가지고 있어햐 한다. 다행히 이건 가지고 있었다. 그래서 최소한 한 달은 버틸 수 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/484/1*_uKE88fAWAs9rpgYgeX3dQ.jpeg" /></figure><p>나의 큰 그림은 좋은 문화를 가진 일터 만들기다. 앞서 말한 일들이 이 목표에 약간이라도 도움이 되겠지라는 생각을 하며 (입에는 욕과 술을 달고) Studio Ops로 지내고 있다. 이런 목표가 없었다면 진작 그만하겠다고 하고 이력서를 쓰고 있지 않았을까싶다. 지금도 처음에 약속한 일 년까지 견딜 수 있을지, 일년 뒤에 이전보다 더 나은 문화의 스튜디오가 되어있을지 자신은 없다. 그래도 큰 그림을 그리면서 해볼 수 있는 데까지는 견뎌볼 생각이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bfed3f9627a2" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[카네기 인간관계론 요약]]></title>
            <link>https://medium.com/@ddt1984/%EC%B9%B4%EB%84%A4%EA%B8%B0-%EC%9D%B8%EA%B0%84%EA%B4%80%EA%B3%84%EB%A1%A0-%EC%9A%94%EC%95%BD-44de000ecb12?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/44de000ecb12</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Sun, 24 Feb 2019 04:01:52 GMT</pubDate>
            <atom:updated>2019-02-24T04:01:52.400Z</atom:updated>
            <content:encoded><![CDATA[<h3><strong>인간 관계의 3가지 기본 원칙</strong></h3><ol><li>비난이나 비평, 불평을 하지 말라</li><li>솔직하고 진지하게 칭찬하라</li><li>다른 사람들의 열렬한 욕구를 불러일으켜라</li></ol><h3>인관 관계를 잘 맺는 6가지 방법</h3><ol><li>다른 사람들에게 순수한 관심을 기울여라</li><li>미소를 지어라</li><li>당사자들에게는 자신의 이름이 그 어떤 것보다도 기분 좋고 중요한 말임을 명심하라</li><li>남의 말을 잘 들어주는 사람이 되어라. 스스로에 대해 말하도록 다른 사람들을 고무시켜라</li><li>상대방의 관심사에 대해 이야기하라</li><li>상대방으로 하여금 중요하다는 느낌이 들게 하라. 단, 성실한 태도로 해야 한다.</li></ol><h3>상대방을 설득하는 12가지 방법</h3><ol><li>논쟁에서 최선의 결과를 얻을 수 있는 유일한 방법은 그것을 피하는 것이다.</li><li>상대방의 견해를 존중하라. 결코 “당신이 틀렸다”고 말하지 말라.</li><li>잘못을 저질렀다면 즉시 분명한 태도로 그것을 인정하라.</li><li>우호적인 태도로 말을 시작하라.</li><li>상대방이 당신의 말에 즉각 “네, 네”라고 대답하게 하라.</li><li>상대방으로 하여금 많은 이야기를 하게 하라.</li><li>상대방으로 하여금 그 아이디어가 바로 자신의 것이라고 느끼게 하라.</li><li>상대방의 관점에서 사물을 볼 수 있도록 성실히 노력하라.</li><li>상대방의 생각이나 욕구에 공감하라.</li><li>보다 고매한 동기에 호소하라.</li><li>당신의 생각을 극적으로 표현하라.</li><li>도전 의욕을 불러일으켜라.</li></ol><h3>리더가 되는 9가지 방법</h3><ol><li>칭찬과 감사의 말로 시작하라.</li><li>잘못을 간접적으로 알게 하라.</li><li>상대방을 비평하기 전에 자신의 잘못을 먼저 인정하라.</li><li>직접적으로 명령하지 말고 요청하라.</li><li>상대방의 체면을 세워주어라.</li><li>아주 작은 진전에도 칭찬을 아끼지 말라. 또한 진전이 있을 때마다 칭찬을 해주어라. 동의는 진심으로, 칭찬은 아낌없이 하라.</li><li>상대방에게 훌륭한 명성을 갖도록 해주어라.</li><li>격려해 주어라. 잘못은 쉽게 고칠 수 있다고 느끼게 하라.</li><li>당신이 제안하는 것을 상대방이 기꺼이 하도록 만들어라.</li></ol><p>새 매니저의 추천으로 읽은 책. 평소보다도 더 서둘러서 읽었다. 팀이 회사의 비즈니스적인 결정으로 없어지고, 다른 자리를 선택해야 하면서 내가 지나온 길을 돌이켜보게 됐다. 거의 모든 관계에 불을 지르고 파괴하며 지나와서 방향을 틀어서 새로 갈 곳을 정해야 할 때, 스스로 선택지들을 없애왔다는 걸 깨달았다. 그렇게 해서 여기까지라도 온 게 아닌가 라는 생각도 들긴 했지만, 더 좋은 방법이 있지 않았을까라는 생각은 떨칠 수 없다. 지금과 같은 역할로 다른 곳에서 다시 시작할 때도 변해야겠다고 생각하고 있었는데, 새로 맡은 역할은 지금보다 더 관계가 중요한 역할이라 빨리 배우고 싶어서 서둘러 읽은 것이다.</p><p>책에 나온 요약처럼 몇 가지 원칙, 몇 가지 방법들을 설명하고 있지만 한마디로 요약하자면 역지사지다. 그런데 그 기저에는 자신을 객관적으로 볼 수 있는 시선이 있어야 한다.</p><p>“나는 논리적인 비판이면 납득하고 당연히 내 주장을 철회하고 따르는 사람이야.”, “저는 남의 인정이나 칭찬에 신경 쓰지 않습니다.”, “저는 나 자신의 안위보다 타인들, 인류에 더 관심이 많은 편입니다.”라고 스스로에게 거짓말을 하면서, ‘남은 왜 안 그런 거야?’ 라고 답답해하면 역지사지가 아무 소용이 없겠지만.</p><p>그러니 일단 나 자신의 감정을 제대로 보는 게 우선이다. (내가 깨달음을 얻어 부처가 되어도 부처가 되기 전의 마음으로 상대를 볼 수있어야 하겠지만… 그런 경지까진 어렵고...) 자신을 미화하지 않고 남도 그렇다는 걸 인정하고, 나를 대하듯 남을 대하는 게 좋은 관계를 위한 시작으로 보인다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=44de000ecb12" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Effective Java 3/E 정리]]></title>
            <link>https://medium.com/@ddt1984/effective-java-3-e-%EC%A0%95%EB%A6%AC-c3fb43eec9d2?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/c3fb43eec9d2</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Thu, 10 Jan 2019 13:06:13 GMT</pubDate>
            <atom:updated>2019-01-10T13:06:13.466Z</atom:updated>
            <content:encoded><![CDATA[<p>Effective Java 3판을 읽고 있는데 마침 팀에서 Java로 프로젝트를 진행해야 했다. 그런데 책의 조언들을 지키지 않는 팀원들의 코드를 리뷰하면서 서둘러서 책을 읽고 내용을 소개하고 싶어졌다. 이 글은 그들에게 공유하고 싶었던 책의 내용을 정리한 발표자료이다. 그래서 하나하나를 깊이 있게 다루기보다는 이런 것들이 있다는 소개하는 식이다. 비슷한 환경에 처해있는 개발자들에게 조금이나마 도움이 되기를!</p><p>책에서 쓰인 코드나 실제 업무에서 쓰는 코드를 변경 전, 후로 나눠서 예로 삼았다. 이탤릭체로 적은 부분은 책에서 그대로 인용한 부분이다. 자세한 내용은 책이나 인터넷에서 찾아보자.</p><p><strong>책 소개</strong></p><ul><li>자바를 효과적으로 쓸 방법들을 담은 책</li><li>자바 문법을 이미 아는 사람 대상</li><li>처음부터 끝까지 읽기 보다는 관심 있는 아이템만 보면 될듯</li></ul><p><strong>아이템 6. 불필요한 객체 생성을 피하라</strong></p><p><em>정규표현식용 Pattern 인스턴스는, 한 번 쓰고 버러져서 곧바로 가바지 컬렉션 대상이 된다. Pattern은 입력받은 정규표현식에 해당하는 유한 상태 머신(finite state machine) 만들기 때문에 인스턴스 생성 비용이 높다.</em></p><pre>public static boolean isNumeric(String str) {<br>  return str != null &amp;&amp; str.matches(&quot;[-+]?\\d*\\.?\\d+&quot;);</pre><p>아래처럼 Pattern을 한 번만 만들고 쓰도록 수정</p><pre>private static final Pattern NUMERIC = Pattern.compile(&quot;[-+]?\\d*\\.?\\d+&quot;);<br>...<br>public static boolean isNumeric(String str) {<br>  return str != null &amp;&amp; NUMERIC.matcher(str).matches();</pre><p><strong>아이템 9. try-finally보다는 try-with-resources를 사용하라</strong></p><p>before: try/finally 중첩으로 복잡한 코드</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/e923e7613f3953f1efe60d896709c6fa/href">https://medium.com/media/e923e7613f3953f1efe60d896709c6fa/href</a></iframe><p>after: try안에 AutoCloseable인터페이스 구현한 객체들 넣으면 알아서 close 호출</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/452ba7ca5d2cd543552519ae4e4d7f1c/href">https://medium.com/media/452ba7ca5d2cd543552519ae4e4d7f1c/href</a></iframe><p>예외 처리 방법</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/eb4a449af1fd5a42960c4b2f451a0902/href">https://medium.com/media/eb4a449af1fd5a42960c4b2f451a0902/href</a></iframe><p><strong>아이템 12. toString을 항상 재정의하라</strong></p><pre>@Override public String toString() {<br>  return String.format(&quot;%03d-%03d-%04d&quot;, areaCode, prefix, lineNum);<br>}</pre><p>디버깅에 도움이 됨</p><p><strong>아이템 26. raw 타입은 사용하지 말라, 아이템 27. 비검사 경고를 제거하라</strong></p><p>before</p><pre>@SuppressWarnings(&quot;rawtypes&quot;)<br>private List listDatabase;</pre><pre>@SuppressWarnings(&quot;unchecked&quot;)<br>public void add(String name) {<br>  listDatabase.add(name);<br>}</pre><p>after: 아래처럼 타입을 지정하면 rawtypes, unchecked 둘 다 제거할 수 있다</p><pre>private List&lt;String&gt; listDatabase;</pre><p><strong>아이템 34. int 상수 대신 열거 타입을 사용하라</strong></p><p>before: STARTED == idx 가 true임</p><pre>public static final int NeedMigration = 0;<br>public static final int STARTED = 1;<br>public static final int COMPLETED = 2;<br>public static final int FAILED = 3;<br>...<br>public int idx = 1;</pre><p>after</p><pre>public enum MigrationStatus { NeedMigration, STARTED, COMPLETED, FAILED }</pre><p><strong>아이템 36. 비트 필드 대신 </strong><strong>EnumSet을 사용하라</strong></p><p>before</p><pre>public static final int STYLE_BOLD = 1 &lt;&lt; 0; //1<br>public static final int STYLE_ITALIC = 1 &lt;&lt; 1; //2<br>public static final int STYLE_UNDERLINE = 1 &lt;&lt; 2; //4<br>public static final int STYLE_STRIKETHROUGH = 1 &lt;&lt; 3; //8</pre><pre>text.applyStyles(STYLE_BOLD | STYLE_ITALIC);</pre><p>after</p><pre>public enum Style { BOLD, ITALIC, UNDERLINE, STRIKETHROUGH }; </pre><pre>text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));</pre><p><strong>아이템 42. 익명 클래스보다는 람다를 사용하라</strong></p><pre>List&lt;String&gt; words = Arrays.asList(&quot;dzzzd&quot;, &quot;wer&quot;, &quot;wwws&quot;);<br>Collections.sort(words, new Comparator&lt;String&gt;() { // 낡은 방식<br>  public int compare(String s1, String s2) {<br>    return Integer.compare(s1.length(), s2.length());<br>  } <br>});</pre><p>after</p><pre>// <strong>lambda</strong> <br>Collections.sort(words,<br>    (s1, s2) -&gt; Integer.compare(s1.length(), s2.length()));</pre><pre>// <strong>Comparator construction method + method reference</strong><br>Collections.sort(words,  Comparator.comparingInt(String::length));</pre><pre>// <strong>java 8에 추가된 List.sort로 더 짧아진 </strong><br>words.sort(Comparator.comparingInt(String::length));</pre><p><strong>아이템 43. 람다보다는 메서드 참조를 사용하라</strong></p><p>주석 부분은 메소드 참조에 대응하는 람다</p><pre>Integer::parseInt      // str -&gt; Integer.parseInt(str);</pre><pre>Instant.now()::isAfter // Instant then = Instant.now(); t -&gt; then.isAfter(t)</pre><pre>String::toLowerCase    // str -&gt; str.toLowerCase()</pre><pre>TreeMap&lt;K,V&gt;::new      // () -&gt; new TreeMap&lt;K,V&gt;()</pre><pre>int[]::new             // len -&gt; new int[len]</pre><p><em>method reference는 람다의 간단명료한 대안이 될 수 있다. 메서드 참조 쪽이 짧고 명확하다면 메서드 참조를 쓰고, 그렇지 않을 때만 람다를 사용하라.</em></p><p><strong>아이템 54. null이 아닌, 빈 컬렉션이나 배열을 반환하라</strong></p><pre>public List&lt;Cheese&gt; getCheeses() {<br>  return cheesesInStock.isEmpty() ? null : new ArrayList&lt;&gt;(cheesesInStock);<br>}</pre><pre>List&lt;Cheese&gt; cheeses = shop.getCheeses();<br>if (cheeses != null &amp;&amp; cheeses.contains(Cheese.STILTON))</pre><p><em>null을 반환하는 API는 사용하기 어렵고 오류 처리 코드도 늘어난다. 그렇다고 성능이 좋은 것도 아니다.</em></p><pre>// 대부분의 상황에서는 이렇게 하면 된다<br>public List&lt;Cheese&gt; getCheeses2() {<br>  return new ArrayList&lt;&gt;(cheesesInStock); <br>}</pre><pre>// 최적화 - 빈 컬렉션 생성 매번 하지 않기 <br>public List&lt;Cheese&gt; getCheeses3() {<br>  return cheesesInStock.isEmpty() ? Collections.emptyList() : new ArrayList&lt;&gt;(cheesesInStock);<br>}</pre><p><strong>아이템 58. 전통적인 for문보다는 for-each문을 사용하라</strong></p><p>before</p><pre>for (int i = 0; i &lt; idxList.size(); i++) {<br>  coll.createIndex(idxList.get(i));</pre><p>after</p><pre>for (DBObject obj : idxList) {<br>  coll.createIndex(obj);</pre><p><strong>아이템 63. 문자열 연결은 느리니 주의하라</strong></p><p>String을 더할 때 + 를 쓰거나 StringBuffer 쓰지말고, StringBuilder 를 쓰자. 단순 더하기는 객체를 추가로 생성하고, StringBuffer는 각 메소드가 synchronized 여서 상대적으로 느리다.</p><p><strong>아이템 64. 객체는 인터페이스를 사용해 참조하라</strong></p><pre>// 좋은 예. 인터페이스를 타입으로 사용했다.<br>Set&lt;Son&gt; sonSet = new LinkedHashSet&lt;&gt;();</pre><pre>// 나쁜 예. 클래스를 타입으로 사용했다!<br>LinkedHashSet&lt;Son&gt; sonSet = new LinkedHashSet&lt;&gt;();</pre><p>추가로 Thread를 구현할 때 상속(extend)하기 보다는 Runnable를 구현(implements)하는 게 좋음. 다중상속이 안 되기 때문에 설계할 때 인터페이스 구현이 더 깔끔함.</p><pre>Runnable runnable = new MyRunnable();</pre><pre>Thread thread = new Thread(runnable); <br>thread.start();</pre><p><strong>아이템 67. 최적화는 신중히 하라</strong></p><p>자바가 탄생하기 20년 전에 나온 격언들</p><blockquote>(맹목적인 어리석음을 포함해) 그 어떤 핑계보다 효율성이라는 이름 아래 행해진 컴퓨팅 최악이 더 많다(심지어 효율을 높이지도 못하면서). — 윌리엄 울프</blockquote><blockquote>(전체의 97% 정도인) 자그마한 효율성은 모두 잊자. 섣부른 최적화가 만악의 근원이다. — 도널드 크누스</blockquote><blockquote>최적화를 할 때는 다음 두 규칙을 따르라.</blockquote><blockquote>첫 번째, 하지 마라.</blockquote><blockquote>두 번째, (전문가 한정) 아직 하지 마라. 다시 말해, 완전히 명백하고 최적화되지 않은 해법을 찾을 때까지는 하지 마라.</blockquote><blockquote>- M.A. 잭슨</blockquote><p><em>성능 때문에 견고한 구조를 희생하지 말자. 빠른 프로그램보다는 좋은 프로그램을 작성하라. &lt;중략&gt;각각의 최적화 시도 전후로 성능을 측정하라 — 작가</em></p><p><strong>아이템 68. 일반적으로 통용되는 명명 규칙을 따르라</strong></p><ul><li>패키지 — 소문자</li><li>클래스 — 대문자 시작, camel case</li><li>메소드, 변수 — 소문자 시작, camel case</li><li>상수 필드(static final) — 대문자</li></ul><p><strong>아이템 72. 표준 예외를 사용하라</strong></p><ul><li>IllegalArgumentException — 허용하지 않는 값이 인수로 건네졌을 때(null은 따로 NullPointerException으로 처리)</li><li>IllegalStateException — 객체가 메서드를 수행하기에 적절하지 않은 상태일 때</li><li>NullPointerException — null을 허용하지 않는 메서드에 null 건넸을 때</li><li>IndexOutOfBoundException — 인덱스가 범위를 넘어섰을 때</li><li>ConcurrentModificationException — 허용하지 않는 동시 수정이 발견됐을 때</li><li>UnsupportedOperationException — 호출한 메서드를 지원하지 않을 때</li></ul><p>그리고 제발 Exception 을 던지거나 받지말자.</p><p><strong>아이템 77. 예외를 무시하지 말라</strong></p><pre>try {<br>  hostPort = Integer.parseInt(hostInfo[1]);<br>  connList.add(new ServerAddress(hostName, hostPort));<br>} catch (NumberFormatException e) {<br>  // ignore<br>}</pre><p>위는 실제 쓰는 코드. 무시할 거면 아래처럼 변수명을 ignore 로 쓰라고 책에 나온다.</p><pre>} catch (NumberFormatException ignore) { }</pre><p><strong>아이템 80. 스레드보다는 실행자, 태스크, 스트림을 애용하라</strong></p><p>실행자 프레임워크(Executor Framework)를 쓰라 (java 5). <em>작업 큐를 손수 만드는 일은 삼가야 하고, 스레드를 직접 다루는 것도 일반적으로 삼가야 한다.</em></p><ul><li>작업 단위 — Runnable, Callable</li><li>수행 매커니즘 — 실행자 서비스</li></ul><p>Thread를 쓰면 전부 직접해야 함. <em>(컬렉션 프레임워크가 데이터 모음을 담당하듯) 실행자 프레임워크가 작업 수행을 담당. </em>더 자세한 건 ‘자바 병렬 프로그래밍’ 참고.</p><p><strong>아이템 82. 스레드 안전성 수준을 문서화하라</strong></p><ul><li>불변(immutable) — String, Long</li><li>무조건적 스레드 안전(unconditionally thread-safe) — AtomicLong, ConcurrentHashMap</li><li>조건부 스레드 안전(conditionally thread-safe) — Collections.synchronized</li><li>스레드 안전하지 않음(non thread-safe) — ArrayList, HashMap</li><li>스레드 적대적(thread-hostile)</li></ul><p><strong>아이템 85. 자바 직렬화의 대안을 찾으라</strong></p><p><em>직렬화는 위험하니 피해야 한다. 시스템을 밑바닥부터 설계한다면 JSON이나 프로토콜버퍼 같은 대안을 사용하자.</em></p><p><strong>부록</strong></p><p>static import (어느 item에서 봤는지 잊어버림)</p><pre>import com.xxx.common.Constant;<br>logger.log(Level.INFO, () -&gt; &quot;Start &quot; + Constant.VERSION);</pre><p>위처럼 쓰는 걸 static import로 아채럼 쓸 수 있다</p><pre>import static com.ea.xxx.common.Constant.*;<br>logger.log(Level.INFO, () -&gt; &quot;Start &quot; + VERSION);</pre><p><strong>equals 비교할 때 상수를 앞으로</strong></p><pre>if (!database.equals(&quot;meta&quot;) &amp;&amp; !database.equals(&quot;admin&quot;))</pre><p>database가 null일 경우 NullPointerException 발생</p><pre>if (!&quot;meta&quot;.equals(database) &amp;&amp; !&quot;admin&quot;.equals(database))</pre><p>null일 수 없는 상수(문자열)을 앞에 두면 적어도 널포인터 예외는 막을 수 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c3fb43eec9d2" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[군주론 혹은 매니저론]]></title>
            <link>https://medium.com/@ddt1984/%EA%B5%B0%EC%A3%BC%EB%A1%A0-%ED%98%B9%EC%9D%80-%EB%A7%A4%EB%8B%88%EC%A0%80%EB%A1%A0-aedf07cc47ba?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/aedf07cc47ba</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Sat, 03 Nov 2018 14:53:15 GMT</pubDate>
            <atom:updated>2018-11-03T14:53:15.422Z</atom:updated>
            <content:encoded><![CDATA[<p>최근에 &lt;군주론&gt;을 읽으면서 역시 고전이란 시대를 관통하는 지혜가 들어있구나 새삼 느꼈다. 당시의 예를 읽을 때말고는 요즘에 나오는 경영서적을 읽는 듯한 기분이었다. 시대에 맞게 그리고 규모를 국가에서 회사로 조금 줄여서 단어를 약간 바꿔서 읽어봐도 여전히 유효하고 재미있었다. 그런 문장을 몇개 옮겨 적어본다. 군주.. 아니 조직 생활을 하는 매니저들에게 전합니다. 음… 부디 재미로만 보시기를.</p><p><em>바꾼 단어들은 글 말미에 적어두었습니다.</em></p><h3><strong>매니저론</strong></h3><p><strong>성품에 대해서</strong></p><p>매니저는 내가 앞에서 언급한 좋은 성품들을 다 지닐 필요는 없지만, 분명히 다 지닌 것처럼 보여야 한다. 나는 더 나아가 이 좋은 성품들을 지니고 항상 그에 따라 행동한다면 그는 이런 성품들이 해롭다는 것을 알게 될 것이라고까지 말하고 싶다. 그러나 그가 이런 성품들을 지닌 것처럼 보이면 이것들은 그에게 유용할 것이다. 그는 자비롭고 약속을 잘 지키고 다정하고 정직하고 독실한 것처럼 보여야 한다. 정말로 그래야 한다. 그러나 정반대의 사람이 될 필요가 있다면, 그는 본능적으로 그 방법을 알아야 한다. 당신은 이것을 깨달아야 한다. 즉 매니저, 특히 새로운 매니저는 덕이 있다는 평판을 듣게 하는 성품들 모두를 지킬 수는 없다. 왜냐하면 자신의 조직을 유지하기 위해서는 자주 신의, 자비, 호의, 믿음을 무시하며 행동할 수밖에 없기 때문이다. 따라서 그는 운과 상황이 명하는 대로 변신하는 유연한 성향을 가져야 할 것이다. 앞에서 말했듯이, 매니저는 가능하다면 선(善)에서 벗어나서는 안 되지만, 필요하다면 악행을 저지르는 법을 배워야 한다.</p><p>즉 매니저는 인기 없는 조치의 시행은 다른 사람들에게 맡기고, 호의를 얻는 조치는 자기 수중에 쥐어야 한다는 것이다.</p><p>순전히 행운으로 매니저가 되는 직원은 거의 아무런 노력도 기울이지 않고 그렇게 된다. 그러나 그 뒤에 그들은 상당한 노력을 통해서만 자신의 지위를 유지할 수 있다. 그들은 마치 날개를 가진 듯이 여정에 오른다. 문제는 그들이 내려앉을 때 시작된다. 권력을 사거나 다른 누군가의 호의로 권력을 얻는 사람들이 이런 경우이다</p><p>당신의 조직을 잃는 첫 번째 길은 업무의 기술을 소홀히 하는 것이다. 조직를 얻는 첫 번째 길은 업무의 기술에 능숙해지는 것이다.</p><p><strong>조직원 관리에 대해서</strong></p><p>조직를 얻을 때 그들이 겪는 어려움은 부분적으로는 조직를 세우고 자신을 확립시키는 데 있어 그들이 도입해야 하는 새로운 제도와 법률 때문에 일어난다. 한 조직의 구조 변화를 주도하는 것보다 다루기가 더 어려운 것은 없다는 것, 성공하기가 더 불확실한 것은 없다는 것, 밀고 나가기가 더 위험한 것은 없다는 것을 명심해야 한다. 혁신자는 옛 질서에서 성공한 모든 사람을 적으로 만들고, 새 질서에서 성공할 사람들로부터는 오직 미온적인 지지만을 받는다. 그들의 지지가 미온적인 것은 한편으로는 기존 법률을 등에 업은 반대자들에 대한 두려움 때문이고, 한편으로는 인간은 일반적으로 회의적이며, 경험을 통해 시험해 보지 않는다면 새로운 것을 결코 진정으로 믿지 않기 때문이다. 따라서 변화에 반대하는 자들은 할 수 있을 때마다 격렬하게 공격하지만, 다른 사람들은 단지 미온적으로만 방어할 뿐이다. 그래서 혁신자도 그의 친구들도 위험에 빠진다.</p><p>큰 인물들을 다루면서 그들에게 새로운 은혜를 주면 그들의 옛 상처가 깨끗이 씻길 것이라고 믿는 사람은 누구나 자신을 기만하는 것이다.</p><p>세상이 조용할 때에는 모든 사람이 비위를 맞추고, 서약을 하며, 매니저를 위해 죽겠다 할 것이다. 죽음이 가까이 있지 않기에 말이다. 그러나 역경이 몰아쳤을 때, 즉 조직이 직원들을 필요로 할 때에는 거의 아무도 찾을 수 없다. 그리고 이 충성 시험은 오직 한 번만 할 수 있는 것이기 때문에 더더욱 위험하다. 따라서 현명한 매니저는 직원들이 항상 모든 상황에서 그와 그의 권위에 의지하게 하는 길을 고안해야 한다. 그때에야 그들은 항상 그에게 충성할 것이다.</p><p>나는 내부로부터 주어진 지지를 통해 새로 조직을 장악한 매니저들에게 그들을 도운 사람들의 동기에 대해 주의 깊게 반추해 볼 것을 권고한다. 이것이 새로운 매니저에 대한 자연스러운 호감에 기초한 것이 아니라 기존 리더쉽팀에 대한 불만에 기초한 것이라면, 그는 상당한 어려움과 노고를 통해서만 그들의 우정을 유지할 수 있을 것이니, 왜냐하면 그 역시 그들을 만족시키는 것은 불가능할 것이기 때문이다. 고대와 현대에서 취한 예들로 그 이유를 주의 깊게 검토하면, 매니저는 기존 리더쉽팀에 불만을 가져 그의 친구가 되고 그의 점령을 찬성했던 사람들의 우정보다, 이전에 기존 리더쉽팀에 만족해서 당시에는 그에게 적대적이었던 사람들의 우정을 훨씬 더 쉽게 얻는다는 것을 알게 될 것이다.</p><p><strong>외부 지원에 대해서</strong></p><p>매니저가 그의 조직을 방어하는 데 기초로 삼는 무력은 그 자신의 팀원이거나 프리렌서이거나 다른조직이거나 TFT이다. 프리렌서와 다른조직은 무용하고 위험하다. 매니저가 프리렌서에 기초하여 조직을 방어하려 한다면, 그는 결코 안정이나 안전을 이루지 못할 것이다. 왜냐하면 프리렌서는 분열되어 있고 권력에 목말라 있고 규율이 없고 불충하기 때문이다. 프리렌서들은 친구들 안에서는 용감하지만 적 앞에서는 비겁하다. 그들은 하느님에 대한 두려움이 없고, 자기 동료들에게 신의를 지키지 않는다. 그들이 패배를 피한다면 그것은 다만 그들이 전투를 피했기 때문이다. 당신은 평화로운 시기에는 그들에게 약탈당하고 전시에는 적에게 약탈당한다. 이 모든 것의 이유는 그들에게 지불되는 하찮은 보수 외에는 그들을 전장에 묶어둘 다른 매력이나 동기가 없기 때문이니, 이것은 프리렌서들이 당신을 위해 기꺼이 죽기에 충분하지 않다. 그들은 당신이 전쟁 중이 아닐 때에는 당신의 군대에서 너무나도 편하게 복무하지만, 전쟁이 닥쳐오면 탈영하거나 흩어져 버린다.</p><p>다른조직은 또 하나의 쓸모없는 군대로서, 당신이 강한 조직에 방어와 지원을 요청할 때 개입된다. &lt;중략&gt; 다른조직은 그 자체로는 유용하고 믿음직할지 몰라도, 그들을 불러들이는 사람에게는 거의 언제나 재난이다. 그들이 패배한다면 당신은 곤경에 처하게 되고, 그들이 승리한다면 당신은 그들의 지배 아래 놓이게 된다.</p><p>요약하면 프리렌서가 가진 위험은 비겁함이요, 다른조직이 가진 위험은 용맹함이다.</p><p><strong>리더쉽팀에 대해서</strong></p><p>하위 매니저를 뽑는 것은 매니저에게 아주 중요한 문제이다. 그들이 훌륭한지 아닌지는 매니저 자신의 현명함에 달려 있다. 통치자의 지력을 알고 싶으면 먼저 주변에 있는 사람들의 질을 보면 된다. 그들이 유능하고 충성스럽다면 매니저는 항상 현명하다는 평을 받을 수 있으니, 그들의 능력을 알아볼 수 있었고 그들의 충성심을 유지할 수 있었기 때문이다. 그러나 그들이 그렇지 않다면, 매니저는 항상 좋지 않은 평을 받을 수 있으니, 그의 첫 번째 실수가 자신의 하위 매니저들을 잘못 뽑은 것이기 때문이다. &lt;중략&gt; 그러나 매니저가 어떤 방법으로 그의 하위 매니저를 평가할 수 있는지에 관해서는, 여기에 절대 확실한 지침이 있다. 하위 매니저가 당신에 대해서보다 자신에 대해서 더 많이 생각하고 그의 모든 행동에서 자신의 이익만을 추구하는 것을 보게 된다면, 이런 사람은 결코 좋은 하위 매니저일 수 없고, 당신은 결코 그를 신뢰할 수 없을 것이다.</p><p>또 여기서 지적되어야 할 점은, 선행으로도 악행만큼 미움을 받을 수 있다는 것이다. 따라서 앞에서 말했듯이, 자신의 통치를 유지하고 싶은 매니저는 종종 선하지 않은 사람이 되는 것을 피할 수 없다. 왜냐하면 직원들이건 리더쉽팀건(원문: 인민들이건 병사들이건 귀족들이건), 당신이 생각하기에 당신의 지속적인 통치를 뒷받침하는 사람들이 부패할 때마다 당신은 그들과 동일한 성향을 취함으로써 그들을 만족시켜야 하기 때문이다. 그렇다면 선행은 당신의 적이다.</p><p><strong>조언에 대해서</strong></p><p>매니저에게는 결코 조언이 부족해서는 안 된다. 그러나 그는 자신이 원할 때 조언을 받아들여야지, 다른 사람들이 원할 때 받아들여서는 안 된다. 사실 그는 모든 사람에 대해 요청한 것이 아니면 어떤 것에 대해서든 조언을 하지 않도록 해야 한다. 그렇다고는 해도 그는 여전히 끊임없이 질문을 던져야 하며, 자신이 물은 것에 관한 진실을 인내심 있게 경청해야 한다. 게다가 누구라도 무슨 이유로든 진실을 숨기고 있는 것을 발견한다면, 그는 분노를 보여야 한다.</p><p>많은 사람들이 매니저가 지혜롭다는 평판을 얻는 것은 그 자신이 그렇기 때문이 아니라 그에게 조언하는 자들의 자질 때문이라고 생각하지만, 그들의 생각은 따져볼 것도 없이 틀렸다. 왜냐하면 이것이 절대 확실한 법칙이기 때문이다. 즉 그 자신이 현명하지 못한 매니저는 제대로 조언받을 수 없다. 이는 매니저가 우연히 그의 모든 일을 돌봐 주고 대단히 현명하기도 한 사람의 손에 자신을 내맡기게 되는 경우가 아니면 반드시 그렇다. 이 경우 그는 좋은 조언을 구할 수 있겠지만, 그를 대신해 통치하는 사람이 곧 그의 조직을 빼앗을 것이기 때문에 오래가지는 못할 것이다. 그러나 그 자신이 현명하지 못한 매니저가 한 사람 이상의 조언을 구할 때, 그는 결코 자문 회의에서 만장일치를 얻지 못할 것이고 그들의 견해를 일치시킬 수도 없을 것이다. 자문 위원들은 제각각 자신의 이익만을 고려할 것이고, 매니저는 이것을 바로잡을 방법도 이해할 방법도 모를 것이다. 일은 이렇게 될 수밖에 없는데, 덕이 있는 사람이 되도록 강제하지 않으면 인간은 항상 당신을 나쁘게 대할 것이기 때문이다. 따라서 결론은, 훌륭한 조언은 그것이 누구에게서 나오든 그것을 구하는 매니저의 현명함에서 기인하는 것이지, 매니저의 현명함이 훌륭한 조언에서 기인하는 것은 아니라는 것이다.</p><p><strong><em>바꾼 단어들</em></strong></p><p>군주 — 매니저<br>국가,나라 — 조직<br>평민,시민 — 직원<br>전쟁 — 업무<br>정부 — 리더쉽팀<br>장관 — 하위 매니저<br>용병 — 프리렌서<br>원군 — 다른조직<br>혼성군 — TFT</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=aedf07cc47ba" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[중국(심천, 상해) 출장 팁]]></title>
            <link>https://medium.com/@ddt1984/%EC%A4%91%EA%B5%AD-%EC%8B%AC%EC%B2%9C-%EC%83%81%ED%95%B4-%EC%B6%9C%EC%9E%A5-%ED%8C%81-b1e561c143d4?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/b1e561c143d4</guid>
            <category><![CDATA[china]]></category>
            <category><![CDATA[business-travel-tips]]></category>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Mon, 01 Oct 2018 15:44:53 GMT</pubDate>
            <atom:updated>2018-10-01T15:44:53.827Z</atom:updated>
            <content:encoded><![CDATA[<p>게임 회사에 다니면서 출장을 많이 갔다. 그동안 얻은 중국 출장 팁을 정리했다.</p><h3><strong>비자</strong></h3><p>중국에 가려면 중국 비자를 받아야 한다. 비자는 단수 비자랑 복수 비자가 있는데, 복수 비자를 받으려면 과거에 한 번이라도 중국에 입국해야 한다. 그러니 단수 비자 한 번 받고, 그 뒤에 복수 비자를 받아야 한다. 복수 비자도 1년 제한이기 때문에 1년 지나면 다시 또 받아야 한다. 보통은 국내에서 중국 대사관을 통해서 신청한다. 만약 목적지가 심천이라면 홍콩에서 중국 국경(?)으로 가서 여행용 단수 여권을 받을 수도 있다.</p><h3><strong>로밍</strong></h3><p>SKT 기준으로 얘기하면 선택할 수 있는 상품이 2가지 있다. OnePass300과 한중일패스. OnePass300은 하루에 9900원으로 300mb를 빠르게 쓸 수 있고 그 이후에 속도 제한이 걸리고, 아시아패스는 5일에 25000원이고 3기가를 기간 내에 쓰고 그 이후에 속도제한이 걸린다. 만약 출장 기간이 삼일 이상이면 한중일패스가 훨씬 좋다. 요금도 더 싸지만 돈은 회삿돈으로 내니 무시한다고 쳐도, 데이터 속도 체감이 크다. 300mb를 의외로 금방 써버리고 저녁에는 그저 텍스트만 볼 수 있을 정도의 속도로 웹서핑을 하게 되는 날이 종종 생긴다. 이에 비해 한중일패스는 일 제한은 없기 때문에 부담 없이 쓸 수 있다.</p><h3><strong>현금, 카드</strong></h3><p>일본에 가면 식당에서 카드가 안 되는 곳이 많고 대부분 현금 결제를 해서 놀라게 되는데, 중국에서도 같은 상황에 놀라게 된다. 카드, 현금 대신 QR code로 한다. 자판기도 현금 투입구와 음료 선택 버튼이 없고 qr code만 있고 휴대폰에서 선택, 결제하는 것도 있다. 하지만 이런 혜택을 누리려면 중국 은행에 계좌가 있어야 한다. 국외자는 결국 현금이나 카드 결제를 해야 하는데, 중국 카드사인 unionpay가 아닌 visa, master 등은 거의 안 받는다고 보면 된다. 그래서 몇 년간 현금으로만 쓰다가 바로 지난번에 한국에서 unionpay 카드를 만들어서 갔다. 결과는 (페밀리마트) 편의점에서만 성공했다. 시도한 식당들은 다들 카드를 보고서 안 된다고 했다. 편의점 점원도 매우 의심하면서 결제기에 넣고 시도했는데 되는 걸 보고는 점원도 나도 놀랐다. 식당 점원들도 시도해봤으면 좋았으려만… 어찌됐든 unionpay 카드가 있으면 최소한 공항과 편의점에서는 사용할 수 있다.</p><h3><strong>택시</strong></h3><p>이 글을 쓰게 된 이유다. 중국어를 하지 못하는 직원끼리 택시를 탈 때 목적지를 알려주는 게 어려운 점이다. 특히 공항에서 숙소로 갈 때가 문제인데, 기존의 생각으론 “웨스틴 호텔”, “메리엇 호텔” 얘기하면 알겠지 라고 생각했지만 중국에서는 호텔 이름과 발음이 전혀 다르기 때문에 택시 기사분이 모를 가능성이 매우 높다. 구글맵이나 바이두맵으로 목적지를 보여줘도 잘 모르는 경우가 많다(모르는 척하는 건지 모르는 건지..).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dDpb4L-rFp0qAIejhM9B7A.jpeg" /><figcaption>심지어 구글맵의 문제는 영문 이름 밑의 한자를 확대해서 보여주거나 복사하고 싶은데 드래그가 안 된다.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/991/1*tCCl0jnsR8uZFCejWGbdQQ.jpeg" /><figcaption>구글 번역 앱으로 하니까 의외로 번역이 정확히 되고 읽어주기도 한다. 글자를 복사해서 확대해서 보여줄 필요도 없이 택시 기사분에 들려주니 알아듣고서 제대로 가줬다!</figcaption></figure><h3>식당</h3><p>식당도 구글맵을 이용해서 근처에서 평점 높은 곳 가는 게 좋다. 개인적으로 만족도가 높은 곳은 ‘근처의 수제 맥주집’ 들이다. 아주 맛집은 아니지만 생각하던 맛을 그대로 준다. 타지에 오면 그것만으로도 고마울 때가 있다. 같이 온 동료들을 모셔야 하는 입장이라면 트립어드바이저까지 보면 좋다. 현지인 입맛도 아니고, 한국 사람들이 길게 줄을 서 있지도 않다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/871/1*37OTrY0wUBokKKv3Cxjr2Q.jpeg" /><figcaption>심천 (Marriott Hotel Nanshan 근처) 추천 맥주집</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/872/1*xcOLI7u3l9bt6pmrsxNT9A.jpeg" /><figcaption>상해 (Four seasons hotel 근처) 추천 맥주집</figcaption></figure><h3>youtube</h3><p>로밍이나 호텔 와이파이로 유튜브는 되지만 프리미엄, 뮤직은 안 된다. 유튜브 뮤직에서 미리 다운로드해서 가거나, 다른 스트리밍 서비스를 써야 한다. 하지만 출장 중에 이어폰 꼽고 휴대폰으로 음악들을 상황은 거의 없어서 큰 불편은 없었다.</p><h3>심천 공항</h3><p>심천에 가는 방법은 심천 공항으로 바로 가는 방법과 홍콩 공항을 통해서 가능 방법이 있다. 추천하는 건 심천으로 바로 가는 것. 하지만 국적기를 타려면 출발 시간이 아침 일찍 이라 출발할 때 서둘러야 하는 피곤함이 있다. 홍콩은 출발 시간 선택에 상대적으로 자유롭지만 입국 심사를 두 번 해야 하는 귀찮음이 있다. 홍콩 입국할 때 한 번, 중국 입국할 때 한 번 더.</p><p>귀국할 때 국제선 쪽은 들어가면 카페랑 식당 하나, 자판기 하나가 단출하게 있다. 배고프면 출국 심사하기 전에 먹기를 추천한다.</p><h3>상해 푸동 공항</h3><p>상해에서 귀국할 때 푸동 공항에서 온다면 게이트 있는 곳에 한식당이 하나 있다. 거기서 전과 라면이 판다. 귀국 전날 술을 많이 마셨다면 여기에서 해장할 수 있다!</p><h3>Tencent</h3><p>어느 건물이건 게스트로 들어가면 깐깐한 출입 검사 때문에 나오기가 힘들다. 그리고 들어가면 나올 때까지 얼마나 걸릴지 모르기 때문에 그 안에서 편하게 있을 수 있도록 준비해가면 좋다. 텐센트 직원들처럼 옷을 편하게(반팔, 반바지, 슬리퍼) 입고 가거나 호텔 슬리퍼를 챙겨가서 안에서 신고 있으면 견디기 좋다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b1e561c143d4" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[코드 리뷰 프로세스 자동화 — bot으로 리뷰어 지정하기]]></title>
            <link>https://medium.com/@ddt1984/%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%9E%90%EB%8F%99%ED%99%94-bot%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EB%B7%B0%EC%96%B4-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0-5e4bffc6565?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/5e4bffc6565</guid>
            <category><![CDATA[code-review]]></category>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Fri, 22 Jun 2018 18:14:31 GMT</pubDate>
            <atom:updated>2018-06-22T18:14:31.986Z</atom:updated>
            <content:encoded><![CDATA[<p>이전에 <a href="https://medium.com/@ddt1984/%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0-%EA%B8%B0%EA%B3%84%ED%99%94-58c668f4b58d">코드 리뷰 기계화</a>라는 글을 썼다. 그 글에서는 리뷰하는 과정에서 사람 사이에 감정싸움이 되지 않도록 bot이 완충 작용을 하는 내용에 대해 다뤘다. 이 글에서는 그 앞 단계인, 코드 리뷰를 요청하는 과정에서 생기는 문제를 bot을 이용해서 해결하는 방식에 대해 다룬다.</p><p>이전에 팀에서 쓰던 코드 리뷰 과정은 이랬다.</p><ol><li>코딩, merge request 올리기.</li><li>올린 개발자는 팀 멤버들의 아이디를 댓글로 적거나 슬랙에 적어서 리뷰 요청. 누가 해줄지 모르기 때문에 모든 팀원을 다 적는다.</li><li>모든 개발자는 시도 때도 없이 메일이나 슬랙 알림을 받는다.</li><li>리뷰 요청을 나한테만 한 게 아닌 걸 알기 때문에 대체로 무시하고 리뷰를 하지 않는다.</li><li>요청한 사람은 몇 번 더 요청을 보낸다.<em> “엄청 쉬운 리뷰! 단 한 줄짜리!”</em>, <em>“♚♚히어로즈 오브 더 스☆톰♚♚가입시$$전원 카드팩☜☜”</em> 이런식으로 슬랙에 쓰기도 하면서.</li><li>시간이 지나면서 merge request는 머지 되지 않고 묵혀진다.</li><li>계속 리뷰가 안 되면 팀원들에게 찾아가서 직접 요청한다.</li></ol><p>개발자가 네다섯일 때는 그래도 위의 과정이 그럭저럭 작동했다. 내가 아니면 리뷰를 할 사람이 적다는 걸 알고, 리뷰 요청도 많지 않기 때문에 큰 부담 없이 리뷰를 할 수 있다. 하지만 팀에 사람이 많아지면서 이 과정이 삐거덕거렸다. 리뷰 요청이 많아지면서 요청을 받는 사람도 힘들어지고, 리뷰를 나 아니어도 할 사람이 있을 거라는 생각으로 리뷰가 더 느려지면서 요청하는 사람도 힘들어졌다. 해결책 없이 팀원은 늘어갔고, 이 프로세스가 계속 유효한지 회의감이 팀 안에서 퍼졌다. 더 나은 방법을 찾자는 의견들이 나왔다.</p><p>팀에서 나온 아이디어는 ‘개발자가 편하게’ → ‘자동화’ → ‘(슬랙) 봇이 알아서 리뷰어 지정’ 식으로 구체화 됐고, 봇을 구현한 이후로는 점점 개선해서 지금의 모습을 갖췄다. 간단하게 봇의 기능을 말하자면 개발자는 merge request만 올리고 그 이후의 리뷰 과정은 신경 쓰지 않고, 봇이 대신 처리하는 것이다. 하루에 두 번 열려있는 merge request를 찾아서 랜덤으로 리뷰어를 선택하고 리뷰를 해달라고 요청한다. 로직은 간단하지만, 여기에는 여러 가지 사회공학적인 접근들이 적용됐다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/540/1*H-tij4hFct4YfuuMJ60nzQ.png" /><figcaption><em>실제 사용 화면) github은 slack 메시지로만 알려준다.</em></figcaption></figure><p><strong>하루에 두 번</strong></p><ol><li>팀의 공식적인 출근 시간은 9시 반이고, 열 시쯤이면 자리가 다 찬다. 출근하자마자 혹은 출근길에 리뷰요청을 받으면 무시될 가능성이 높다. 마음의 준비도 안 되어있고. 그래서 오전 10시 30분에 실행된다.</li><li>퇴근 시간은 6시 반. 1시간 전인 5시 30분에 한 번 더 실행된다. 낮 동안 작업 된 거에 대한 처리이고, 퇴근 전에 리뷰를 해달라는 의도로 선택된 시간이다.</li><li>주말에 리뷰 요청을 알림을 받고 싶은 사람은 없으니 쉬는 날은 작동하지 않게 해야 한다. cron으로 실행하기 때문에 월~금요일만 실행되도록 했다.</li><li>쉬는 날도 마찬가지. 국가의 공휴일과 회사에서 쉬는 날을 소스코드에 하드코딩 해두었다.</li><li>개인 휴가도 마찬가지. 다행히 휴가 알림도 예전부터 slack bot을 통해서 하고 있었기 때문에 휴가 정보를 저장하는 DB가 있었다. DB에서 전일/오전/오후 휴가 정보를 가져와서 리뷰어를 선택할 때 제외한다. 오전 휴가를 썼다면 오전에만 제외되고 오후에는 리뷰어에 선택될 수 있게 한다.</li></ol><p><strong>열려있는 merge request 찾기</strong></p><ol><li>팀에서 Gitlab enterprise와 Github 두 개의 저장소를 쓰고 있고, 각 저장소에도 여러 프로젝트로 나뉘어있다. Gitlab과 Github API가 다르기 때문에 두 벌의 동일 함수들이 필요하다. 프로젝트들의 gitlab/github path는 소스코드에 하드코딩했다.</li></ol><p><strong>랜덤으로 리뷰어 선택</strong></p><ol><li>팀에서 정한 최소 리뷰 승인 수는 둘. 팀원 풀을 섞은 다음 2명을 꺼내서 리뷰어로 선택한다. 이전처럼 모든 개발자에게 리뷰 요청을 보내지 않기 때문에 선택된 리뷰어는 가능한 리뷰에 참여하기로 팀에서 합의했다.</li><li>추가로 시니어 개발자가 팀에 2명이 있어서 이들은 별도 풀로 관리하고 하나씩 꺼내서 리뷰어로 지정한다.</li><li>merge request 성격에 따라서 특정인에게 꼭 받아야 할 경우 개발자가 리뷰어를 적어두면 인식해서 리뷰어로 선택한다.</li><li>merge request의 정보를 읽어서 이미 승인한 사람은 중복으로 리뷰 요청하지 않고, 다른 사람을 고른다.</li><li>리팩토링이나 다른 이유로 다수의 프로젝트를 수정하고 merge request 보내는 경우가 있다. 이때 요청마다 다른 리뷰어를 지정하기보다는 동일한 리뷰어에게 리뷰를 받는 게 더 효율적이다. 그래서 같은 날 한 사람이 올린 요청은 동일한 리뷰어를 지정한다.</li></ol><p><strong>리뷰/머지 요청</strong></p><ol><li>Slack API로 선택된 리뷰어에게 merge request의 주소를 보내면서 리뷰해달라고 요청한다.</li><li>추가로 리뷰 승인이 2개 이상 된 merge request는 작성자에게 merge 할 준비가 끝났으니 merge 하라고 Slack API로 알려준다.</li><li>한 번의 요청만으로도 2번의 리뷰 승인을 받지 못하더라도 이 과정이 반복되면 언젠간 리뷰를 받게 된다.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/944/1*JU60uXcunO-DoYWvECR7LA.png" /><figcaption><em>실제 사용 화면) gitlab은 커맨트를 달아서 gitlab 자체 알림 기능과 slack 메시지 알림 기능을 사용한다.</em></figcaption></figure><p>두 달 넘게 팀에서 쓰고 있는데 생각보다도 더 잘 작동한다. 봇 자체뿐 아니라 코드리뷰 과정 자체가 더 활발해지고, 그 과정에서 발생하는 개발자들의 스트레스도 줄었다. (기계에 지배당하는 기분이 들기도 하지만…) 회사 업무 시간에 만든 프로그램이라 소스코드를 공개할 수 없지만, 위 설명을 참조하면 만들기는 어렵지 않을 것이다.</p><p>오히려 어려운 부분은 이런 봇이 돌 수 있는 문화가 팀에 정착되어 있어야 한다는 점이다. 이미 코드 리뷰를 하고, 받고 있어야 한다. 봇이 리뷰어를 선택해서 알려줘도 리뷰를 안 하거나, 리뷰 받는 걸 기분 나빠 하는 분위기라면 무용지물이다. 그리고 적당한 업무 스케쥴일 때만 가능하다. 촌각을 다투는 환경에서는 merge request 올려놓고 첫 리뷰 요청이 가기까지 6시간 이상 걸릴 수도 있기 때문에 빠르게 리뷰를 받아야 하는 환경에서는 쓰기 어렵다. 우리 팀의 경우도 실제로 급한 이슈는 이전처럼 개발자가 슬랙으로 직접 요청하기도 한다. 이미 코드리뷰 문화가 정착돼있고, 엄청 바쁜 스케쥴이 아닌 환경이라면 이 방법을 사용해보면 조금 더 효율적으로 일할 수 있을 것이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5e4bffc6565" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[매니저 회고 두번째]]></title>
            <link>https://medium.com/@ddt1984/%EB%A7%A4%EB%8B%88%EC%A0%80-%ED%9A%8C%EA%B3%A0-%EB%91%90%EB%B2%88%EC%A7%B8-dd713ad7c164?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/dd713ad7c164</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Thu, 29 Dec 2016 16:00:28 GMT</pubDate>
            <atom:updated>2016-12-29T16:04:02.233Z</atom:updated>
            <content:encoded><![CDATA[<p><em>이글은 </em><a href="https://medium.com/@ddt1984/%EB%A7%A4%EB%8B%88%EC%A0%80-%ED%9A%8C%EA%B3%A0-f04722aa627#.u5oo6o4zf"><em>매니저 회고</em></a><em>의 다음편입니다.</em></p><p>지난 회고를 쓰고나서 반년이 흘렀다. 당시에는 매니저 업무를 더는 안 할 수도 있었기 때문에 그간의 느낀 점을 정리하기 좋은 때라고 봤다. 그런데 놀랍게도 별다른 결단 없이 여전히 매니저를 하고 있다. 지금도 그때와 같은 기분으로 말이다. 뭔가를 결정하지 않아도 시간은 기다리지 않고 간다. 그리고 그 뒤로 후회가 딸려온다. 어찌 됐든 그간의 느낀 점들이 있고 아래는 그에 관한 글이다.</p><p>읽기 전에 당부하고 싶은 건 이 내용이 정답이 아니라는 거고, 그저 매니저를 하면서 생각했던 내용이라는 것이다. 시간이 흐르면서 앞에서 한 얘기를 뒤에서 뻔뻔하게 뒤집을 수도 있다. 그러니 경험이 쌓여가는 과정으로 읽어줬으면 좋겠다.</p><h3>MPR</h3><p>회사에서 일 년 전쯤부터 QBR(Quarterly Business Review)이라는 걸 했다. 매니저급들이 모여서 각자 자기 팀에서 이번 분기 동안 한 일과 어떤 성과가 있었고 다음 분기에 할 일을 발표하는 시간이다. 사장님을 모아놓고. 자연히 사장님에게 보고하는 형식으로 진행됐다. 그래도 다른 팀의 뭐 하는지, 무슨 생각들인지 알 수 있는 기회가 되기도 했다. 우리 팀의 경우도 지난번 QBR부터 참여를 해서 두 번을 진행했다.</p><p>발표자료가 만들어져서 팀원들에게 먼저 발표를 했다. 그걸 듣고 입사한 지 얼마 안 된 팀원이 팀 안에서도 이런 걸 하자고 건의했다. 팀원들이 무슨 일을 하는지도 알고, 나중에 이력서 적을 때 참고하기도 좋다고 했다. 듣고 보니 그래서 팀에서도 해보기로 했다. 분기마다 하기는 발표 주제가 작을 테니 매달 하기로 했고, 모두가 발표하는 거로. 그렇게 MPR(Monthly Project Review)를 시작했다. 조금 더 구체적인 규칙은 이렇다.</p><ul><li>매달 말일에 2시간 정도 모임</li><li>각자 자기가 한 일, 느낀 점 등을 발표</li><li>발표 시간은 10분을 넘지 않게</li><li>발표가 너무 딱딱하지 않게 간식을 먹어가면서</li><li>발표 순서는 입사순, 생일순, 이름 가나다순 등 바꿔가면서</li></ul><p>인원이 10명을 넘었기 때문에 발표시간을 짧게 제한했다. 처음 발표부터 발표 시간이 늘어났고 마지막에는 발표 시간이 부족해서 짧게 하거나 아예 못하는 사람도 있었다. 발표 시간을 늘리거나 발표 순서를 이리저리 바꿔가면서 해봤는데 여전히 끝부분 발표자들은 발표 시간이 부족했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/264/1*-voRO1zhFlVm6qhBBK0log.jpeg" /><figcaption>MPR 진행 모습</figcaption></figure><p>진행하면서 가장 크게 느낀 점은 사람들이 자기가 한 일에 대해서 얘기하기 좋아한다는 것이다. 동료에게 자기 한 일에 대해 얘기하는 걸 좋아하네! 내는 일이 사고 없고 상위 평가자가 알아주면 됐지 동료들에게 불필요하게 얘기할 필요는 없지 않을까, 공유하고 싶으면 블로그를 쓰면 되지 않을까 했는데. 그게 아니었다. 사람들은 동료의 인정도 중요했고, 다른 사람들의 한 일을 듣는 것도 좋아했다. 얘기하는 걸 더 좋아하는 것 지만. 어쨌든 이런 자리 자체를 귀찮아하고 싫어할 줄 알았는데 예상 밖이었다.</p><p>그리고 이런 모임이 없어도 서로 무슨 일을 하는지 대충은 알고 있을 거로 생각했는데 놀라운 정도로 서로 무슨 일을 하는지 모르고 있었다. ‘주간보고서는 아무도 읽지 않는 거야?’</p><p>처음 한두 번 했을 때는 발견하지 못했던 건데, MPR이 계속되면서 서로 조금씩 무슨 일을 하는지 알아갔고, 각자의 작업물을 어떻게 연결할 수 있을지 고민하기 시작했다. 서로에 대한 이해가 쌓이는 느낌이다. 팀으로 묶이고 시간이 흐른다고 서로 가까워지거나 팀워크가 생기지 않는다. 서로에 대해 아는게 먼저이고, 이런 자리가 팀워크를 다지는데 시작이 될 수 있는 거 같다. 환영 회식이나 워크샵 같은 거보다 더 도움이 되지 않을까.</p><p>불규칙적으로 하던 회식도 발표가 끝나면 자연스럽게 회식으로 이어지면서 규칙적으로 하게 되어서 팀원들도 좋아했다.</p><p>7월부터 매달 진행했고 12월에만 회사 행사랑 휴가가 많아서 진행하지 못했다. 아마 내년에도 별일이 없는 이상 계속할 예정이다. 팀의 문화라고 할 게 별로 없는데 이게 문화로 정착되길 바라고 있다.</p><h3>기술 선택의 어려움</h3><p>앞서 얘기했던 MPR에서 프로젝트의 기술 리스크에 대한 발표한 적이 있다. 회사 신규 프로젝트에 초기 설계자로 참여하면서 고민했던 내용이다. 신규 프로젝트의 기술 스택을 선택할 때 고려할 점이 여러 가지겠지만, 크게 3가지로 봤다. 개발자의 관심, 기술 성숙도, 기술 적용 리스크.</p><p>개발자의 관심은 새로운 기술에 관심이 처음부터 높고 점점 더 높아지다가 익숙해지고 블로그나 컨퍼런스에서 들은 선전만큼 멋지진 않고 한계도 알아가면서 관심이 점점 줄어든다.</p><p>기술 성숙도는 처음에는 낮다가 일정 수준까진 빠르게 늘다가 일반적인 기능을 구현할 수 있는 수준에 이르면 그 이후로는 조금씩 늘어간다.</p><p>기술 적용 리스크는 크게 보면 개발자의 관심도와 비슷한 경향을 보이는데 여러 사건 사고를 거치면서 조금씩 대응법을 익히면서 낮아진다.</p><p>3가지 지표가 특정 구간에 속할 때 프로젝트의 위험한 구간으로 보였다. 개발자의 관심은 피크를 찍고 조금씩 시들해지고, 기술은 아직 손에 딱 맞지 않고, 정확히 알지 못해서 잠재적 문제들도 여전히 존재하는 상태. 이럴 때 외부의 일정 압박이나 내부 선택한 기술에 알지 못했던 문제가 있다면 팀의 사기, 퍼포먼스에도 영향을 줄 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/669/1*qP00tkqPTIYHbZe1eVVXCQ.png" /><figcaption>발표때 쓴 슬라이드</figcaption></figure><p>프로젝트나 개발자들 능력에 따라 혹은 운에 의해서 위험한 구간이 짧게 끝날 수도 있고 한없이 길어질 수도 있다. 그렇다고 기존에 쓰던 기술 스택을 그대로 쓰면 개발자들의 관심은 처음부터 낮아서 사기에 안 좋은 영향을 주기도 한다. 그래서 팀의 능력과 개발자들의 관심도 생각해서 적절한 기술 스택을 선택해야 한다고 발표했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/669/1*fbEqLevIe8J2dUlHFyrXsw.png" /><figcaption>발표때 쓴 슬라이드</figcaption></figure><p>이런 생각을 하게 된 이유는 기술 스택을 정할 때 프로젝트의 목표보다는 다른 이유들을 더 우선으로 여기면서 기술을 선택하려는 회의들을 겪으면서다. 정말 뭣이 중헌디라고 묻고 싶어지는 회의들을 잠자코 있기가 고역이었다. 심지어 이 발표를 할 때조차 이런 케이스를 일반화시켜서 생각해보기보다는 누구의 케이스인지 찾으려는데 더 관심이 있는 모습들을 보면 같은 공간에 있으면서도 아득한 거리감을 느꼈다. 어떤 대화나 근거로도 좁혀지지 않을 거 같은 거리.</p><p>그럼에도 해야 하는 역할이다. 권위나 업적, 인맥, 겪어보지 않은 기술 찌라시 글 등에 기대지 않고 기술적 검증을 통한 선택을 한다면 좋겠지만 너무 어려워 보이는 길이다. 혼자 그러기도 어려운데 회사 내에서 여러 사람과 그러기는 지금으로써는 꿈같은 이야기다. 내년에는 한 번이라도 그래 볼 수 있을까? 나라도 그럴 수 있을까?</p><h3><strong>지시에서 점검으로</strong></h3><p>일을 주는 입장에서 여러 사람을 대하게 된다.</p><ul><li>목표만 알려주면 알아서 가는 사람</li><li>목표까지 같이 뛰어야 하는 사람</li><li>목표 중간중간 잘 가는지 검사해야 하는 사람</li><li>목표를 크게 잡고 버거워하는 사람</li><li>목표를 잡고 하다말고, 다른 목표를 잡고 하다말고, 다른 목표를 잡…</li></ul><p>다양한 유형의 사람이 있고, 대체로 실망한다. 직접 하지는 않으면서 남을 통해 업무가 제대로 완수되도록 해야 하는데 쉽지 않은 일이다. 여러 유형의 사람들에 대응하기가 피곤해서 처음에 조금 하다가는 시작할 때 지시와 끝에 확인만 하게 된다. 시켰으면 믿고 맡기라고 인터넷에서 주워들은 얘기로 게으름에 변명을 해가면서. 그런데 그렇게 하면 대체로 기대한 결과가 아니기 때문에 실망을 하게 된다.</p><p>그러는 와중에 사일로 이팩트 책에서 이 문구를 봤다.</p><blockquote>“사람들은 당신이 지시하는 것이 아닌 당신이 점검하는 것을 실행합니다.” — 사일로 이팩트 중에서</blockquote><p>책에서는 IBM 내부에서는 이 말이 하나의 교훈적인 지침으로 받아들여졌다고 한다. 생각할수록 맞는 말이어서 행동을 바꿔봤다. 점검할 수 있을 정도로 단계를 나누고 점검할 내용과 날짜를 칸반에 적었다. 그리고 불안해하며 확인을 안 하거나 반대로 확인을 너무 자주 해서 귀찮게 하지 않고, 기계적으로 오늘 점검할 일들을 진행했다. 그리고 점검이 끝나면 다음 점검할 항목과 날짜를 적고. 이렇게 하니 업무 상태 파악도 잘 되고 결과도 기대와 크게 차이가 안 나게 됐다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/238/1*uy3omSysENz3Om3o6ZA1sA.png" /><figcaption>예</figcaption></figure><p>지시가 아닌 점검을 하려면 무엇을 점검할지 알아야 하고, 점검할 수 있는 단위로 나눌 수도 있어야 한다. 그러려면 당연히 업무에 대한 지식이 필요하다. 그래서 일에 대해 더 알려고 하고, 무지에서 오는 불안감도 줄어들었다.</p><p>지금 생각해보면 시켰으면 믿고 맡기라는 얘기는 허울 좋은 소리로 들린다. 얼마나 구체적으로 내 목표를 전달할 수 있을까? 애초에 능력이 확인 안 되었다고 시키지 말아야 할까? 입장이 반대여도 서로 믿을 수 있을까? 두 입장 모두에게 듣기 좋은 소리이긴 한데 일이 잘될 거 같은 조언은 아니다.</p><p>매일 스크럼이나 주간 미팅 등으로 안 되냐고 할 수 있는데 업무에 따라서 점검할 시기가 다르기 때문에 규모가 크지 않다면 개별적으로 점검하는 게 맞다고 생각한다. 매일마다 진척이 있는 일은 경험상 별로 대단치 않은 일 말고는 없는데 하루 기준으로 확인을 하는 건 서로 지치게 만드는 일이다.</p><h3>태도에 관하여</h3><p>가지 많은 나무에 바람 잘 날 없다는데 정말로 팀원도 많아지니 문제도 항상 있다. 근태가 불량인 사람도 생기고, 다른 팀과 척지며 일하는 사람, 그리고 같은 팀 사이에서도! 더 이상 배우지 않으려는 사람 등등.</p><p>이런 맴버들이 생기는 건 개인의 문제일 수도 있지만 팀의 문제라고 생각됐다. 왜냐하면… 그 수가 너무 많아져서! 그래서 고쳐보려고 나부터 솔선수범하고 내가 완벽한 사람이 되면 되겠지라고 지키질 못할 다짐들을 했는데 역시나 잘되지 않았다. 일단 나부터가… 그래도 최소한의 규칙들은 지켰으면 했는데 생각해보니 그런 규칙 자체가 없었다. 출퇴근 시간, 점심시간 정도 같은 회사 차원의 규칙 정도가 전부랄까. 나머지는 그저 밝히지 않은 내 취향이고 바램이었다. 그걸 깨닫고 최소한의 규칙 혹은 지향하는 자세가 있으면 좋겠다는 생각을 했다.</p><p>예로 이런 일이 있었다. 팀에서 근무시간에 업무와 상관없는 게임을 하는 사람이 시간이 점점 늘어났다. 일이 바빠지면 자연히 줄어들 거라고 생각하고 그냥 두었지만 그러질 않았다. 몇번을 개인적으로 얘기해도 그때뿐 달라지지 않았다. 어떻게 동기부여를 하고 게임보다 일을 더 즐겁게 만들까 고민을 해봐도 답이 떠오르질 않았다. 더 쉽고 더 차가운 방법을 썼다. IT팀에 문의해서 게임 이용 내역을 알 수 있는지 물었고, 만약 그걸 알 수 있다면 그 근거로 팀원, 상위 매니저, HR과도 얘기가 쉬울 거 같았다. 문의 결과 개인 정보이기 때문에 함부로 볼 수는 없고, 근태 등의 사유가 있고 법무팀의 동의를 얻으면 가능하다고 했다. 그 내용을 게임을 자주하는 사람들에게 실은 이런 규칙이 있다고 전달했고, 그 이후로는 업무시간에 게임을 하는 사람이 사라졌다. 동화책이나 경영분야 책에서는 나올법한 아름다운 사례는 아니지만 실제로 일어난 일이다. 그런 일이 있기 전에 뭐를 하면 안 된다는 식이 아니라 뭐를 하면 좋아 식으로 긍정성을 띤 규칙들이 있으면 서로 좋지 않을까 생각이 든다.</p><p>그래서 나는 이게 좀 유치할 수도 있지만 ‘우린 이런 일을 해’라는 로드맵 외에도 ‘우린 이런 태도로 해’라는 가이드도 필요하다고 본다. 팀을 만들 때 혹은 팀의 초기에 이런 작업을 하기가 쉽고, 시간이 지날수록 어려워지는 거 같다. 오래된 팀에서 규칙을 인위적으로 세우는 건 왠지 간섭으로 느낄 수 있기 때문에 왠만큼 서로 간의 이해가 없는 팀에서는 불화만 키우지 않을까. 그런 의미에서 우리팀은 너무 늦은 건 아닌가… 라기 보다는 오래된 팀에서 규칙을 만드는 게 언젠가 풀어야할 고민거리다.</p><h3>엔진팀의 어려움</h3><p>회사가 여러 나라에 스튜디오가 있는 구조이고, 내가 속한 한국의 스튜디오도 그중에 하나이다. 그 중에는 게임 엔진을 만드는 팀도 여럿 있다. 여러 게임에서 쓰이는 엔진이나 서비스를 만드는 팀들인데 그중에 한 팀의 컨퍼런스가 얼마 전에 있었다. 유럽에서 있었고 직접적으로 관련도 없어서 참석은 못 하고 발표 목차를 사내 위키에서 봤다. 그중에 다른 팀들과 일하는 주제를 한 발표가 2개 있어서 발표 자료를 구해서 봤다.</p><p>슬라이드를 넘겨가면서 직접적으로도 간적접으로도 동질감을 느꼈다. 한 발표는 커뮤니케이션을 이렇게 바꾸고, 일을 이런 식으로 하면 게임팀과 일을 잘할 수도 있다고 직접적으로 어려움을 드러냈고, 한 발표는 우선순위에 대해 설문조사를 하는 프로세스나 코딩 전에 설계 리뷰하는 프로세스를 소개했는데, 발표 내용에는 없었지만 저런 과정을 만들기까지 얼마나 게임팀들과 우여곡절이 있었을지 예상이 됐다. 얼마나 우선순위에 충돌이 있었을지, 얼마나 다 만든 걸 뒤엎었을지… 동병상련을 느꼈다.</p><p>보면서 협업을 잘하고 팀으로 일하는 걸 잘한다는 외국 애들도 마찬가지의 문제가 있구나 싶어서 반가웠고 해결책도 적용하면 도움이 될 것 같은 것들이 있어서 더 좋았다.</p><p>발표에 나온 몇 가지 적용할만한 조언들은 이렇다.</p><ul><li>물리적으로 옆자리 가서 일하기 (목표 맞추기)</li><li>email, issue tracker로 비동기적으로 커뮤니케이션하지 않기</li><li>게임팀의 워크 프로세스에 협조하기</li><li>만들 기능들에 우선순위 정할 때 설문조사(1~5점으로 우선순위를 매기면? 이 기능들에 20점을 배분한다면?)를 하는 것</li><li>코딩 먼저 하지 말고, 고객이랑 설계 리뷰가 끝나면 코딩하기</li></ul><p>사실 이제는 잘하지 못해도 핑곗거리 하나 생긴 게 가장 위안이 됐다.</p><h3>개발자와 매니저 사이</h3><p>개발자와 매니저 어느 것 하나 포기하지 않고 가면서 둘 다 제대로 못 했다. 개발자만 했다면 더 많은 코드를 썼을 거고, 매니저에 집중했다면 사람이나 일정 관리에 더 신경 썼을 것이다. 뭐를 했던 팀의 결과물이 더 좋았을 거 같다. 그런데 하나를 포기하지 못하고, 둘 다 하려다 보니 그럭저럭의 성과를 냈다. 돌이켜 생각해보면 겁이 너무 많았다. 이거 하다 실패하면 다른 거로 못 돌아갈 거 같은데 다른 길도 잡고 있어야 하지 않나? 이런 생각이 머릿속을 떠나지 않았다.</p><p>팀을 생각했다면 매니저롤을 하기로 한 이상 그 역할에 집중했어야 했다. 그렇게 안 할 거라면 매니저 롤을 그만뒀어야 하고.</p><p>당분간 고민을 더 하겠지만 한 가지 확실한 건 이번에는 결정을 할 것이고 그리고 그 결정에 집중할 생각이다. 1년쯤 해보고 능력이 안 되거나 보람이 없다면 포기하고 다른 길을 가야지. 안 좋은 선택이었다고 해도 1년쯤 이도 저도 아니게 지내는 것보다는 하나의 길이 내 길이 아니었다는 거라도 알게 되니 더 좋은 거 같다. 이런 생각을 하게 된 것도 방황의 시간을 거쳤기 때문일까? (아니라면 1년간의 시간이 무의미해 보이니 그렇다고 믿어야지.)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dd713ad7c164" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[컨퍼런스에 관심을 가져야 하는 이유 — 덤프 수집기 개선 경험담]]></title>
            <link>https://medium.com/@ddt1984/%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4%EC%97%90-%EA%B4%80%EC%8B%AC%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-%EB%8D%A4%ED%94%84-%EC%88%98%EC%A7%91%EA%B8%B0-%EA%B0%9C%EC%84%A0-%EA%B2%BD%ED%97%98%EB%8B%B4-5c97a1469a95?source=rss-83e953ce0e73------2</link>
            <guid isPermaLink="false">https://medium.com/p/5c97a1469a95</guid>
            <dc:creator><![CDATA[Jeong SeungCheol]]></dc:creator>
            <pubDate>Tue, 08 Nov 2016 14:39:29 GMT</pubDate>
            <atom:updated>2016-11-08T14:39:29.432Z</atom:updated>
            <content:encoded><![CDATA[<p><em>먼저 밝힐 점은 덤프 파일 수집기를 직접 코딩한 건 담당자 휴가일 때 급하게 보안 버그 수정한다고 고친 두 줄 뿐이다. 그러니 ‘경험’담이 아니라 ‘목격’담이 맞는 말일 수도…</em></p><h3>컨퍼런스에서</h3><p>올해 4월에 넥슨에서 매년 개최하는 NDC가 열렸다. 게임회사에 다니다 보니 매년 관심을 가지고 보게 되는 컨퍼런스이다. 작년에는 회사 차원에서 초대장도 줬었지만 올해에는 회사 차원에서의 움직임은 없었다. 대신 팀별로 자유롭게 정했는데 내가 속한 팀의 경우는 자유롭게 참여하기로 했다(내가 팀장이니 내 마음대로다).</p><p>참석해서 여러 발표를 들었는데 그중에 들었던 한 발표는 그 당시에도 그랬고, 지금 생각해봐도 여전히 좋은 영감을 준 발표였다. 발표자가 터틀넥에 뉴발란스 차림은 아니었고, 레이저가 빵빵 터지거나 그러진 않았지만 발표에 나왔던 프로그램이 시선을 끌었다.</p><p>덤프 분석 시스템이었는데 뭐하는 프로그램이냐면 게임 클라이언트(혹은 서버)가 에러로 죽는 경우에 덤프 파일을 수집해서 분석/통계/알림을 할 수 있는 시스템이다. 발표는 프로그램을 왜 만들었나부터 해서 어떤 구조인지와 기능들에 대한 소개로 이어졌다. 우선 관심이 가게 된 건 우리 회사에도 같은 목적으로 만든 시스템이 운영하고 있어서였다. 비슷했던 목적이나 구조 부분을 지나고 이후의 내용에 놀랐는데, 우선은 웹페이지가 상대적으로 예쁘다는 거였다. 검은색 바탕화면에 불편한 UI를 보다가 이걸 보니 눈이 확 뜨였다. 발표자도 직접 디자인을 못 하니 bootstrap theme를 가져다 썼다고 했다. (왜 그 생각을 못 했지!) 그리고 기능적으로는 단순 카운트가 아니라 세션/시간으로 크래쉬율을 구해서 안정성을 확인하는 게 놀라웠고, 크래시 발생싱의 스크린샷을 같이 전송하게 한 것도 재미있게 보였다.</p><p>발표를 들으면서 반가움이 놀라움으로 변했고 나중에는 부끄러움으로 변했다. 왜 저렇게까지 못 생각했을까? 직관적이지 않은 UI에 기본 기능 정도만 겨우 하는 사내 프로그램이 종이를 접어 만든 장난감 정도로 느껴졌다. 나름의 변명은 있다. 여러 게임을 서비스하는 퍼블리셔와 동시에 한 두 게임만 만드는 개발사에서 크래쉬 리포팅 시스템의 필요성이나 사용 규모가 달랐다. 이 시스템은 별도의 팀에서 만들고 있었고, 우리는 개발자 한 명이 요구사항만 만족하려고 뚝딱 만든 시스템이었다. 그렇긴 해도 더 좋게 만들고 싶어졌다. 모를 땐 넘어가도 더 좋을 걸 보고나니 따라 하고 싶어졌다. 그리 어려워 보이지도 않았고(이미 내가 개발 안 할 거라고 생각하고 있었다).</p><h3>다녀와서</h3><p>컨퍼런스 다녀온 이후로 지금까지 두 세 번의 업그레이드를 하면서 발표하면서 본 몇 가지 기능을 추가했다. bootstrap을 써서 웹페이지를 그럴듯하게 만들었다. 이후로 만든 사내 프로그램들에도 bootstrap free theme를 적극적으로 사용했다. 디자인 지원을 받기 어려운 내부 프로그램을 개발하고 있다면 정말 추천한다! 디자인 외에도 동시접속자수 대비 크래쉬율도 나올 수 있게 했다.</p><p>발표에 나온걸 따라 하기만 한 건 아니다. 약간의 개선으로 사용자들이 늘어났고, 사내에서 더 많은 요구사항이 생기면서 추가한 기능들도 있다. 파일로만 관리하던걸 sqlite 써서 로딩 속도를 줄였다. 사내에서 쓰는 위키(<a href="https://ko.atlassian.com/software/confluence">컨플루언스</a>)와 이슈트래커(<a href="https://ko.atlassian.com/software/jira">JIRA</a>)에 연동이 되도록도 했다. 크래쉬가 발생하면 이슈로 등록되고, 담당자 지정해서 수정을 하게 하고, 처리 현황을 이슈트래커의 리포팅 기능으로 볼 수 있도록 한 것이다.</p><p>만약 컨퍼런스에 안 갔다거나 발표자료를 안 봤다면 어땠을까? 아마도 지금의 모습이 아니고 예전 버전에서 크게 차이가 안 났을 것이다. 사내에서 활용도 덜 됐을 것이고.</p><p>매니저 입장에서 개발자를 컨퍼런스에 보내는 게 하루 날리는 거로 볼 수 있지만 사무실에 있었으면 전혀 생각 못 했을 것을 깨닫게 되는 기회가 되기도 한다. 그리고 그런 아이디어가 회사에 적용될 수 있다면 회사에도 도움이 되는 일이다. 미래를 위한 투자라고 봐야 하지 않을까?</p><p>발표를 들으러 가는 개발자에게 한 가지 당부하고 싶은 점이 있다. 팔짱 끼고 어디 얼마나 똑똑하나 봐볼까 하는 마음으로 평가하듯 발표를 듣지 말았으면 한다. 독서를 할 때 비판적 읽기를 하라고 하지만 읽을 때는 열린 마음으로 읽고서 비판적 시각으로 다시 생각해보는 거처럼 발표를 듣는 것도 우선은 열린 마음으로 들어야 한다. (그런데 그런 사람이라면 여기까지 읽고 있지 않겠다는 생각이 드네…)</p><p>결론적으로 개발자이건 개발자의 매니저이건 컨퍼런스에 더 관심을 가져보라고 권하고 싶다. 내가 겪었던 좋은 경험을 할 수도 있지 않을까.</p><p>이렇게 썼지만 귀찮다는 이유로 정작 올해에 NDC 외에는 아무 곳도 가지 않았다 하하. play.node() 올해 꺼에는 가봐야겠다.</p><p>참고. NDC2016-게임에 특화된 덤프 분석 시스템 — <a href="http://www.slideshare.net/sangkikim9/ndc2016-64837136">http://www.slideshare.net/sangkikim9/ndc2016-64837136</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5c97a1469a95" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>