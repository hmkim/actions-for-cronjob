<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://funchcode.github.io/atom.xml" rel="self" type="application/atom+xml" /><link href="https://funchcode.github.io/" rel="alternate" type="text/html" /><updated>2019-04-25T10:08:14+00:00</updated><id>https://funchcode.github.io/atom.xml</id><title type="html">Ctrl + S</title><subtitle>바르게 빠르게 성장하자</subtitle><author><name>funchcode</name></author><entry><title type="html">[“TODOLIST”]</title><link href="https://funchcode.github.io/%EC%B0%BD%EA%B3%A0/2019/12/25/TODOLIST/" rel="alternate" type="text/html" title="[&quot;TODOLIST&quot;]" /><published>2019-12-25T00:00:00+00:00</published><updated>2019-12-25T00:00:00+00:00</updated><id>https://funchcode.github.io/%EC%B0%BD%EA%B3%A0/2019/12/25/TODOLIST</id><content type="html" xml:base="https://funchcode.github.io/%EC%B0%BD%EA%B3%A0/2019/12/25/TODOLIST/">&lt;h1 id=&quot;공부하다가-발견했던-링크를-모아두거나&quot;&gt;공부하다가 발견했던 링크를 모아두거나,&lt;/h1&gt;
&lt;h1 id=&quot;추가-학습이-필요할-것-같은-자료들을-마구잡이로-모아두는-게시물이다&quot;&gt;추가 학습이 필요할 것 같은 자료들을 마구잡이로 모아두는 게시물이다.&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://xdhyix.wordpress.com/2016/03/24/mysql-%EC%97%90%EC%84%9C-mariadb-%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%B4%EC%95%BC%ED%95%A0-10%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0/&quot;&gt;MySQL에서 MariaDB로 마이그레이션 해야할 10가지 이유&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wmHV6L0e1sU&amp;amp;index=7&amp;amp;t=1538s&amp;amp;list=PLagTY0ogyVkIl2kTr08w-4MLGYWJz7lNK&quot;&gt;백명석님의 클린 코더스 강의 유투브 동영상&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jojoldu.tistory.com/267?category=635883&quot;&gt;Nginx로 Reverse-Proxy 서버 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://multifrontgarden.tistory.com/124&quot;&gt;람다 표현식 사용방법 블로그&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/pyrasis/docker-fordummies-44424016&quot;&gt;이재홍님의 도커 무작정 따라하기 : SlideShare&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jeongchul.tistory.com/611&quot;&gt;김정출님의 Docker AWS EC2 설치하기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://redice-inc.github.io/deploy-web-service-with-docker/&quot;&gt;육승찬님의 Docker AWS-ECR, Jenkins를 이용한 웹서비스 무중단 배포하기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@goinhacker/%EC%9A%B4%EC%98%81-%EC%9E%90%EB%8F%99%ED%99%94-1-%EB%B9%8C%EB%93%9C-%EC%9E%90%EB%8F%99%ED%99%94-by-gradle-7630c0993d09&quot;&gt;디지털 세상을 만드는 아날로거님의 빌드자동화&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://medium.com/@goinhacker&quot;&gt;디지털 세상을 만드는 아날로거님의 블로그 - BE Spring Java정보&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/gradle/java&quot;&gt;권남님의 Gradle Java Plugins 설명&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kutar37.tistory.com/entry/Jenkins-Github-%EC%97%B0%EB%8F%99-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC-3?category=776504&quot;&gt;Github - Jenkins 연동 최신 2019년 이후&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jaynewho.com/post/21&quot;&gt;Docker - Cloud 연동&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pragmaticstory.com/?p=113&quot;&gt;황상철님의 Jenkins로 Docker이미지 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://miiingo.tistory.com/170&quot;&gt;[DevOps] Jenkins를 이용한 자동 빌드 및 배포(1): Jenkins &amp;amp; GitLab 연동&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://futurecreator.github.io/2018/11/16/docker-container-basics/&quot;&gt;도커 기초 확실히 다지기&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/&quot;&gt;도커(Docker) 튜토리얼 : 깐 김에 배포까지&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.44bits.io/ko/post/getting-started-with-ecs-fargate&quot;&gt;ECS의 매니지드 컨테이너 AWS 파게이트 시작하기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w9LV3hmEbPw&quot;&gt;Amazon ECS를 통한 손쉬운 콘테이너 배포 및 관리 Youtube영상&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://supawer0728.github.io/2018/05/12/spring-actuator/&quot;&gt;Springboot Actuator 설명&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/java/lombok/pitfall&quot;&gt;Lombok 사용상 주의점&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://effectivesquid.tistory.com/entry/Gradle-%EB%B9%8C%EB%93%9C%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B8%B0%EC%B4%88&quot;&gt;Gradle 빌드시스템 기초&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://millky.com/@origoni/post/1100?language=ko_kr&quot;&gt;STS로 Spring Boot 웹 프로젝트 시작하기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>funchcode</name></author><category term="Link, TODOLIST" /><summary type="html">공부하다가 발견했던 링크를 모아두거나, 추가 학습이 필요할 것 같은 자료들을 마구잡이로 모아두는 게시물이다. MySQL에서 MariaDB로 마이그레이션 해야할 10가지 이유</summary></entry><entry><title type="html">[“19.04.15 - 19.04.21”]</title><link href="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/04/21/WeeklyReview/" rel="alternate" type="text/html" title="[&quot;19.04.15 - 19.04.21&quot;]" /><published>2019-04-21T00:00:00+00:00</published><updated>2019-04-21T00:00:00+00:00</updated><id>https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/04/21/WeeklyReview</id><content type="html" xml:base="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/04/21/WeeklyReview/">&lt;h4 id=&quot;190415--190421-주간회고&quot;&gt;19.04.15 ~ 19.04.21 주간회고&lt;/h4&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;-weekly-review--&quot;&gt;@ Weekly Review 🏃🏽‍ &lt;br /&gt;&lt;/h1&gt;
&lt;h2 id=&quot;1-coding-test-&quot;&gt;1. &lt;strong&gt;Coding Test&lt;/strong&gt; &lt;br /&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Core &amp;gt;&lt;/strong&gt; Level2, Level5 문제풀이 &lt;a href=&quot;https://github.com/funchcode/interview-coding-problems&quot;&gt;Git Repository&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Level5의 문제들을 풀어가면서 계속 준비를 했다.&lt;/li&gt;
  &lt;li&gt;17일 수요일이 코딩테스트를 제출할 수 있는 마지막 날이었고 나는 17일까지 계속 준비해나갔다.&lt;/li&gt;
  &lt;li&gt;대학생 시절 개발자가 되기로 막 마음을 먹고 공부를 하기 시작했을 때 겁없이 코딩 테스트에 뛰어 들었던 때가 생각이 났다.&lt;/li&gt;
  &lt;li&gt;그 당시에 한 문제를 겨우 풀고 나머지 문제는 해결조차하지 못했었다.&lt;/li&gt;
  &lt;li&gt;이번 시험은 준비도 했고 정말 가고 싶은 회사다보니 속이 울렁거릴 정도로 긴장이 되었다.&lt;/li&gt;
  &lt;li&gt;집보다 카페에서 집중을 잘하는 스타일이다보니 코딩테스트를 준비하면서 카페도 여러 곳 다녀봤다. 내가 제일 집중이 잘 되는 카페를 고르기 위해서이다.&lt;/li&gt;
  &lt;li&gt;커피를 한 잔 시켜놓고 화장실을 한 번 다녀오고 IDE에 그 동안 연습하며 익힌 테스트 환경을 미리 만들어놓았다. 그리고 시작!&lt;/li&gt;
  &lt;li&gt;4시간과 3개의 문제가 주어졌다.&lt;/li&gt;
  &lt;li&gt;시작과 동시에 긴장을 해서인지 처음 15분 정도는 눈에 들어오질 않았다. 공책에는 막 휘날려가며 정리하기는 했지만…&lt;/li&gt;
  &lt;li&gt;첫 문제를 내 생각에는 30분 즈음에 돌아가는 코드를 만들었지만 시간초과로 인해 통과하지 못했다.&lt;/li&gt;
  &lt;li&gt;잠시 두고 2번째 3번째 문제를 풀어나갔다. 2번째 3번째 문제도 30분 씩 걸렸던 것 같다. 잘 기억이 안난다.&lt;/li&gt;
  &lt;li&gt;내가 걱정했던 것보다 훨씬 빠르게 3번째 문제까지 해결을 했다. 그래서 중간에 화장실을 가는 여유도 가졌다. 사실 뛰어다녔다.ㅎㅎㅎㅎ&lt;/li&gt;
  &lt;li&gt;다시 첫번째 문제를 붙잡았다. 여기서 시간을 많이 쏟았다.&lt;/li&gt;
  &lt;li&gt;생각을 바꿔하니 정말 쉬운 문제였었다…. 다행히 통과. 엄청난 쾌감!획득!&lt;/li&gt;
  &lt;li&gt;사람이 카페에 별로 없었어서 다행이지 코딩테스트를 하는 동안 키보드를 정말 많이 두드렸다. 타다다다다다다다다다다다다닥.&lt;/li&gt;
  &lt;li&gt;3문제를 모두 해결하고 제출할 수 있었다는 것에 대해 너무 뿌듯하고 행복했다.&lt;/li&gt;
  &lt;li&gt;계속 메일을 확인했지만 20일 토요일에 김칫국을 마시고 면접을 준비하면서 내 지원 정보를 확인했는데, ‘코딩테스트 중입니다’가 아니라 ‘코딩테스트에 합격하셨습니다’로 바뀌어있던 걸 확인했다.&lt;/li&gt;
  &lt;li&gt;대에박 햄볶!!! 완전 행복했다. 또 다른 도전들이 아직 많이 남아있지만 열심히 준비해서 나의 열정을 보여주고 인정받을 수 있기를 기도한다!!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-side-project매장-관리-웹페이지&quot;&gt;2. &lt;strong&gt;Side Project(매장 관리 웹페이지)&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Core &amp;gt;&lt;/strong&gt; MariaDB 연동&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;드디어 다시 사이드프로젝트를 맛볼 수 있었다.&lt;/li&gt;
  &lt;li&gt;그 동안 코딩테스트를 하면서 문제를 하나하나 해결하나가는 재미를 봤지만, 그보다 토이프로젝트를 너무 진행하고 싶었었다.&lt;/li&gt;
  &lt;li&gt;면접을 준비하면서 조금씩 맛을 봐야겠다.&lt;/li&gt;
  &lt;li&gt;프로젝트에 사용할 테이블을 대략 정리하고 JPA 테스트를 진행 중에 있다.&lt;/li&gt;
  &lt;li&gt;이쁜화면은 아직 너무 이르다. 전체적인 기능은 테스트하고 부족한 부분은 공부하고 탐구해서 기능다운 기능을 만들었을 때, 그 다음으로 화면 단을 공부하면서 만드는 게 목표이다!
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-experience-&quot;&gt;@ Experience 🍄&lt;br /&gt;&lt;/h1&gt;</content><author><name>funchcode</name></author><summary type="html">19.04.15 ~ 19.04.21 주간회고 @ Weekly Review 🏃🏽‍ 1. Coding Test Core &amp;gt; Level2, Level5 문제풀이 Git Repository</summary></entry><entry><title type="html">[“19.04.01 - 19.04.14”]</title><link href="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/04/14/WeeklyReview/" rel="alternate" type="text/html" title="[&quot;19.04.01 - 19.04.14&quot;]" /><published>2019-04-14T00:00:00+00:00</published><updated>2019-04-14T00:00:00+00:00</updated><id>https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/04/14/WeeklyReview</id><content type="html" xml:base="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/04/14/WeeklyReview/">&lt;h4 id=&quot;190401--190414-주간회고&quot;&gt;19.04.01 ~ 19.04.14 주간회고&lt;/h4&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;-weekly-review--&quot;&gt;@ Weekly Review 🏃🏽‍ &lt;br /&gt;&lt;/h1&gt;
&lt;h2 id=&quot;1-programmerscokr-&quot;&gt;1. &lt;strong&gt;Programmers.co.kr&lt;/strong&gt; &lt;br /&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Core &amp;gt;&lt;/strong&gt; Level2, Level5 문제풀이 &lt;a href=&quot;https://github.com/funchcode/interview-coding-problems&quot;&gt;Git Repository&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;4월 11일 오전에 원하던 회사에 서류전형 합격 메일을 받았다. 서류 전형에 합격 했으니 다음 단계 코딩 테스트가 진행된다는 내용의 메일이었다.&lt;/li&gt;
  &lt;li&gt;전직장을 그만두고 벌이가 없는 상태에서 취업을 준비하는 상황이다보니 금전적인 여유가 부족해서 2일 단기 아르바이트를 했다.&lt;/li&gt;
  &lt;li&gt;2일차 때 그 메일을 받고 쉬는 시간마다 들뜬 마음으로 어떻게 준비할지 계획을 짰다.&lt;/li&gt;
  &lt;li&gt;근데 예상치 못한 일이 발생했다. 코딩테스트 일정 사이에 &lt;strong&gt;동원 예비군&lt;/strong&gt;에 반드시 참가하라는 문자를 받은 것이다.&lt;/li&gt;
  &lt;li&gt;코딩 테스트를 보기까지 약 7일이 남았는데 마지막 날까지 미비한 실력을 공부해서 희망이라도 얻고 싶었는데 청천벽력같은 문자였다.&lt;/li&gt;
  &lt;li&gt;친절한 상담사는 내 상황을 이해해줬고 덕분에 동원예비군을 미룰 수 있는 방법도 소개받았다. (일반적인 기업들과는 다른 방식으로 채용을 하기 때문에 활용할 수 없었다.)&lt;/li&gt;
  &lt;li&gt;결국에는 인천 공무원 시험에 등록을 해서 동원 예비군을 미룰 수 있었다.(상담사에게 정말 감사하다.)
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;그동안 천천히 문제의 Level을 올려가면서 공부하려고 했지만, 반드시 붙고 싶다는 마음과 고난이도 문제들에 빨리 적응해야겠다 판단했다.&lt;/li&gt;
  &lt;li&gt;바로 Level5 문제들을 하나씩 풀기 시작했다. 목표가 뚜렸해지니 심란한 마음이 동반했다.&lt;/li&gt;
  &lt;li&gt;풀다가 막히는 문제를 놓아주기 힘들었다. 끝까지 붙잡고 있었는데 어떤 문제는 5시간도 걸렸다.&lt;/li&gt;
  &lt;li&gt;풀면서 내가 약한 유형도 알게되고 시간은 오래걸렸지만 그 유형에 자신감이 붙었다.&lt;/li&gt;
  &lt;li&gt;꼭 좋은 결과를 얻을 수 있기를 기대한다. 제발.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-side-project매장-관리-웹페이지&quot;&gt;2. &lt;strong&gt;Side Project(매장 관리 웹페이지)&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Core &amp;gt;&lt;/strong&gt; DB Table을 추려냈다.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;배포까지 큰 흐름을 잡았다.&lt;/li&gt;
  &lt;li&gt;Local - Git - TravisCI - Slack - AWS S3 - AWS Codedeploy - AWS EC2 - Eginx&lt;/li&gt;
  &lt;li&gt;DB Table을 뽑아내기 위해 기존에 존재하는 프로그램들을 참고하며 구성해봤다.&lt;/li&gt;
  &lt;li&gt;ERD 프로그램은 &lt;a href=&quot;https://www.erdcloud.com/&quot;&gt;ERD CLOUD&lt;/a&gt;를 사용했다.&lt;/li&gt;
  &lt;li&gt;내가 구성한 테이블이 적절한지 확실하지는 않지만 프로젝트를 진행하면서 수정해나가야겠다.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-linux&quot;&gt;3. &lt;strong&gt;Linux&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Goal &amp;gt;&lt;/strong&gt; 4월까지 리눅스 커맨드라인 완벽 입문서 정독하기.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
콘솔환경과 친해지고 싶다. 13년도에 산 구식 노트북에 CentOS를 설치하고 실습하면서 공부하고 있다.&lt;br /&gt;
목표없이 공부한다면 속도를 낼 수 없을 것 같아 이번달까지로 나름 촉박하게 설정했다.&lt;br /&gt;
빨리 한번 훑어서 리눅스의 전체 흐름을 잡고 좀 더 부족한 부분을 캐치해서 공부해나가면 효율적일 것 같다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;퀘스트 :&lt;/strong&gt; 리눅스 커맨드라인 완벽 입문서 정독하기.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;보상 :&lt;/strong&gt; CentOS 스킬 획득!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스킬 Levelup을 위해 추가적으로 학습한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;빨리 많은 스킬들을 획득해내고 싶다. 하지만 예정된 코딩테스트를 위해 잠시 미루자.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-experience-&quot;&gt;@ Experience 🍄&lt;br /&gt;&lt;/h1&gt;</content><author><name>funchcode</name></author><summary type="html">19.04.01 ~ 19.04.14 주간회고 @ Weekly Review 🏃🏽‍ 1. Programmers.co.kr Core &amp;gt; Level2, Level5 문제풀이 Git Repository</summary></entry><entry><title type="html">[“EC2생성에서 Jenkins, S3, CodeDeploy를 이용한 배포 삽질이력”]</title><link href="https://funchcode.github.io/backend/2019/04/05/jenkinss3deploy/" rel="alternate" type="text/html" title="[&quot;EC2생성에서 Jenkins, S3, CodeDeploy를 이용한 배포 삽질이력&quot;]" /><published>2019-04-05T00:00:00+00:00</published><updated>2019-04-05T00:00:00+00:00</updated><id>https://funchcode.github.io/backend/2019/04/05/jenkinss3deploy</id><content type="html" xml:base="https://funchcode.github.io/backend/2019/04/05/jenkinss3deploy/">&lt;blockquote&gt;
  &lt;p&gt;토이 프로젝트를 구상 중에 전체적인 흐름을 잡으면서 공부한다.&lt;br /&gt;
내 맘대로 해도 되니깐 해보고 싶은 거 다 해보자.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AWS와 도커를 함께 사용하려면 ECS를 사용해야하는데 내가 하는 프로젝트의 규모가 ECS를 모두 누려보기에는 적합하지 않다 판단하여 도커를 사용하지 않는 쪽으로 방향을 잡았다.&lt;br /&gt;
프리티어를 이용해서 AWS 자원을 사용했다. &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-ec2-인스턴스-생성-&quot;&gt;&amp;gt; EC2 인스턴스 생성 &lt;br /&gt;&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Amazon Machine Image(AMI) 선택&lt;br /&gt;
아마존 콘솔을 이용해서 인스턴스를 생성(AMI)한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;프리 티어 사용 가능이라고 적힌 AMI을 선택했다.&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;인스턴스 유형 선택&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;프리 티어 사용 가능이라고 적힌 유형을 선택했다.&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;인스턴스 세부 정보 구성 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;default로 하고 다음으로&lt;/code&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;스토리지 추가 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;프리티어는 크기(GiB) 30GB까지 사용가능하니 30GB로 설정&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;태그 추가&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;나중에 CodeDeploy에서 EC2를 인식할 때 태그로 인식했다.&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;보안 그룹 구성&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SSH는 인스턴스에 접속할 때, 8080포트는 Jenkins에서 이용된다.&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;인스턴스 시작 검토&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;시작 버튼을 누른 뒤 키 페어를 받는다.&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;인스턴스 생성&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;-ec2-jenkins-설치-&quot;&gt;&amp;gt; EC2 Jenkins 설치 &lt;br /&gt;&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;EC2 인스턴스에 접속 &lt;br /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AWS EC2 콘솔에서 접속 인스턴스 클릭 후 연결을 눌러보면 (예)에 명령어가 적혀있다.(복사!)
터미널로 키 페어 접속한 위치로 현재위치 변경 후 인스턴스 연결(붙여넣기!)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Java JDK 설치 &lt;br /&gt;
```console
    &lt;h1 id=&quot;yum-업데이트&quot;&gt;yum 업데이트&lt;/h1&gt;
    &lt;p&gt;sudo yum update&lt;/p&gt;
    &lt;h1 id=&quot;설치가능-확인&quot;&gt;설치가능 확인&lt;/h1&gt;
    &lt;p&gt;yum list [파일명]&lt;/p&gt;
    &lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;
    &lt;p&gt;yum install java-1.8.0-openjdk-devel.x86_64&lt;/p&gt;
    &lt;h1 id=&quot;인스턴스-버전-변경&quot;&gt;인스턴스 버전 변경&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>funchcode</name></author><category term="Jenkins, AWS, S3, CodeDeploy, EC2" /><summary type="html">토이 프로젝트를 구상 중에 전체적인 흐름을 잡으면서 공부한다. 내 맘대로 해도 되니깐 해보고 싶은 거 다 해보자.</summary></entry><entry><title type="html">[“Linux 기본 명령어 및 파일 시스템 구조”]</title><link href="https://funchcode.github.io/linux/2019/04/03/linuxfileshell/" rel="alternate" type="text/html" title="[&quot;Linux 기본 명령어 및 파일 시스템 구조&quot;]" /><published>2019-04-03T00:00:00+00:00</published><updated>2019-04-03T00:00:00+00:00</updated><id>https://funchcode.github.io/linux/2019/04/03/linuxfileshell</id><content type="html" xml:base="https://funchcode.github.io/linux/2019/04/03/linuxfileshell/">&lt;blockquote&gt;
  &lt;p&gt;목적 : “리눅스 커맨드 완벽 입문서” 목차 1-3까지 공부 후 정리한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;-리눅스-커맨드-완벽-입문서-1-3&quot;&gt;&amp;gt; 리눅스 커맨드 완벽 입문서 (1-3)&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;@”쉘이란”&lt;/strong&gt; &lt;br /&gt;
키보드를 통해 들어오는 입력을 운영체제에 전달하는 역할을 한다. &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;유닉스 쉘 프로그램 : sh &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;리눅스 배포판 : bash &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;@”터미널 에물레이터란”&lt;/strong&gt;&lt;br /&gt;
쉘에 바로 접근할 수 있게 해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;X윈도우 : GUI를 실행시키는 기반 엔진이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@”리눅스 파일 시스템”&lt;/strong&gt;&lt;br /&gt;
트리형식이다.(=계층적인 구조이다.)&lt;br /&gt;
= root 디렉토리가 있다.&lt;br /&gt;
단일 파일 시스템으로 관리한다.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;@”파일 시스템 구조”&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; : 루트 디렉토리를 의미한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; : 시스템 부팅과 실행에 필요한 바이너리 모음&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; : 리눅스 커널, 시작 RAM 디스크 이미지, 부트로더 등&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; : 디바이스 노드들을 갖고 있다. 커널이 인식하고 있는 모든 디바이스를 관리.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; : 시스템 전반의 환경설정 파일, 시스템의 각 서비스를 시작하는 쉘 스크립트 전부가 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; : 일반사용자마다 디렉토리를 갖는다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/lib&lt;/code&gt; : 주요 시스템 프로그램에서 사용하는 공유 라이브러리 파일이 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/lost+found&lt;/code&gt; : 파일시스템에 문제 생겼을 시 복구용도의 디렉토리이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/media&lt;/code&gt; : USB드라이버, CD-ROM 등 휴대용 장치 연결 시에 자동으로 마운트되는 마운트 포인트를 저장한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt&lt;/code&gt; : 수동으로 휴대용 장치 제거를 위한 마운트 포인트를 저장한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt; : 추가적인 소프트웨어 설치 시 사용 주로 상업용 소프트웨어.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt; : 리눅스커널이 관리하는 가상 파일시스템이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/root&lt;/code&gt; : 루트 계정의 홈 디렉토리이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/sbin&lt;/code&gt; : 시스템 바이너리 파일이 들어있다. 슈퍼유저를 위한 중요한 시스템 파일을 수행하는 프로그램들이 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; : 임시 저장용 디렉토리이다. 임시 파일들을 저장하는 공간.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr&lt;/code&gt; : 리눅스 시스템에서 가장 큰 트리 구조를 갖는다. 일반 사용자가 사용하는 모든 프로그램과 지원파일을 갖고 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var&lt;/code&gt; : 상대적으로 변하기 쉬운 데이터를 모아두는 공간이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@”와일드 카드란”&lt;/strong&gt;&lt;br /&gt;
글로빙이라고도 부른다. 흔히 알고 있는 *나, ?를 말한다.&lt;br /&gt;
문자클래스라는 것도 있다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[[:alnum:]] = 모든 알파벳 + 숫자&lt;/li&gt;
  &lt;li&gt;[[:alpha:]] = 모든 알파벳&lt;/li&gt;
  &lt;li&gt;[[:digit:]] = 숫자&lt;/li&gt;
  &lt;li&gt;[[:lower:]] = 소문자&lt;/li&gt;
  &lt;li&gt;[[:upper:]] = 대문자 &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;@”명령어 정리”&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 시간
&lt;span class=&quot;go&quot;&gt;date
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 날짜
&lt;span class=&quot;go&quot;&gt;cal
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 메모리
&lt;span class=&quot;go&quot;&gt;free
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 저장장치
&lt;span class=&quot;go&quot;&gt;df
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 현재위치
&lt;span class=&quot;go&quot;&gt;pwd
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 현위치 목록
&lt;span class=&quot;go&quot;&gt;ls
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 이동
&lt;span class=&quot;go&quot;&gt;cd
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 파일타입
&lt;span class=&quot;go&quot;&gt;file
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; ASCII파일 정보
&lt;span class=&quot;go&quot;&gt;less
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 디렉토리 생성
&lt;span class=&quot;go&quot;&gt;mkdir
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 복사
&lt;span class=&quot;go&quot;&gt;cp
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 파일 이동&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/이름변경&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;mv
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 삭제
&lt;span class=&quot;go&quot;&gt;rm
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 링크&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;바로가기&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ln
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>funchcode</name></author><category term="Linux, Shell" /><summary type="html">목적 : “리눅스 커맨드 완벽 입문서” 목차 1-3까지 공부 후 정리한다.</summary></entry><entry><title type="html">[“19.03.25 ~ 19.03.31”]</title><link href="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/03/31/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="[&quot;19.03.25 ~ 19.03.31&quot;]" /><published>2019-03-31T00:00:00+00:00</published><updated>2019-03-31T00:00:00+00:00</updated><id>https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/03/31/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/03/31/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/">&lt;h1 id=&quot;190325--190331-주간회고-&quot;&gt;19.03.25 ~ 19.03.31 주간회고 &lt;br /&gt;&lt;/h1&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;wil-&quot;&gt;🏃🏽‍WIL🏃🏽‍ &lt;br /&gt;&lt;/h1&gt;

&lt;h1 id=&quot;-프로그래머스--&quot;&gt;&lt;strong&gt;” 프로그래머스 “&lt;/strong&gt; &lt;br /&gt;&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;지난 주 목표 &amp;gt;&lt;/strong&gt; Level 1의 문제를 충분히 풀고 Level 2로 진입하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/funchcode/interview-coding-problems&quot;&gt;Git Repository&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Level 2의 문제들을 풀어나가고 있다.&lt;/li&gt;
  &lt;li&gt;Level 2라 그런건지 1과 난이도 차이를 잘 못 느꼈다. 단지 어려운 문제는 여전히 어렵게 느껴지지만 쉽다고 느껴지는 문제들이 생긴게 아주 큰 효과인 것 같다. 지금 어렵게 느낀 문제도 하다보면 쉬워질 거라 생각한다. :)&lt;/li&gt;
  &lt;li&gt;아침에 일어나서 매일 두 문제를 풀었다. 차례로 순차적으로 풀어가는 것을 좋아해서 그렇게 하다가 사람들 완료 수가 적은 것들을 골라 해결해나가고 있다.&lt;/li&gt;
  &lt;li&gt;이번 주에는 두 문제 정도가 힘들게 했다. 3~4시간을 들였다. 특히나 StringBuilder를 써서 속도면으로 변화시킬 수 있어서 하나 배웠다고 생각한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-토이-프로젝트네일-웹-페이지-&quot;&gt;&lt;strong&gt;” 토이 프로젝트(네일 웹 페이지) “&lt;/strong&gt;&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;지난 주 목표 &amp;gt;&lt;/strong&gt; 기술 흐름 정리 및 전체 연결 연습&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;그림 + 웹서칭 + 학습 + 실습 + 정리 + 반복&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아무것도 아닌 코드지만 배포까지 해보고 싶었다.&lt;/li&gt;
  &lt;li&gt;어떤 흐름으로 배포까지 이어갈 것인지 무지하기 때문에 아는 잔지식 내에서 그림을 그리며 검색을 했다.&lt;/li&gt;
  &lt;li&gt;생각보다 흐름이 잘 이어지지 않아서 시간을 좀 많이 투자하고 이래서 이렇게 저래서 저렇게 되겠구나 나름 정의를 내리고 하나씩 시작했다.
    &lt;ul&gt;
      &lt;li&gt;사실 써보고 싶었던 기술인 도커나, 젠킨스 요런 거를 무조건 포함시키는 방향으로 흐름을 잡았다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;재밌었다. 그리고 금방 잊어먹을까봐 블로그에 정리를 했는데 블로그 글 올리는 방식을 터득한 기분이 들었다.&lt;/li&gt;
  &lt;li&gt;요번 주에 그린 흐름을 뭉게고 처음부터 다시 잡아야한다.(ㅋㅋㅋ)&lt;/li&gt;
  &lt;li&gt;Dockerhub가 유료이기 때문에 S3를 써야한다 판단했고 도커를 로컬이 아닌 EC2에서 동작시켜야겠다고 판단했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-github-&quot;&gt;&lt;strong&gt;” Github “&lt;/strong&gt;&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;지난 주 목표 &amp;gt;&lt;/strong&gt; 주에 하나라도 기술 포스팅을 하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://funchcode.github.io/&quot;&gt;블로그 github.io&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;(지난 주 어리석은 생각 1)공부한 지식을 다시 글로 옮겨내려는 작업에 대한 시간이 아깝다고 느낀다.&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;블로그를 왜 하고 있나.
    &lt;ul&gt;
      &lt;li&gt;주간회고는 초보개발자가 어떤 시도를 통해 어떻게 성장을 경험했는지 다른 초보개발자들한테 간접경험을 느끼게 해주고 싶기 때문이었고&lt;/li&gt;
      &lt;li&gt;기술적인 글은 내가 모르는 걸 공책이 아닌 블로그에 정리하자(언제 어디서든 쉽게 접근할 수 있도록)라는 생각을 갖고 시작했다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-네트워크-관리사-2급-실기-&quot;&gt;&lt;strong&gt;” 네트워크 관리사 2급 실기 “&lt;/strong&gt;&lt;br /&gt;&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;지난 주 목표 &amp;gt;&lt;/strong&gt; 하루에 한 번 전체 문제 학습, 매일 반복.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;시험날짜: 19.03.31       시험장소: 서울 덕수고등학교&lt;/code&gt;&lt;br /&gt;
사실 자신있었기 때문(근자감)에 하루에 한 번은 아니고 막바지 3~4일 학습했다.&lt;br /&gt;
막상 시험 당일이 되니 긴장이 되더라.. 오랜만에 느껴보는 긴장감이라 기분이 좋았다.&lt;br /&gt;
바로 옆자리 앉은 사람이 랜 케이블을 진짜 완전 뚝딱, 시험도 뚝딱, 뚝딱 제일 빠르게 하고 멋지게 퇴장했다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;덕분에 나는 더 긴장해서 손 떨면서 랜 케이블을 제작했다.(합격 나이쓰!)&lt;/li&gt;
  &lt;li&gt;라우터 문제는 다행히 생각보다 쉽게 나왔다. 근데 활성화 명령어 &lt;code class=&quot;highlighter-rouge&quot;&gt;no shutdown&lt;/code&gt;을 시키고 찜찜해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;show running-config&lt;/code&gt;를 했는데 적용이 안되는 것 같았다…&lt;/li&gt;
  &lt;li&gt;네트워크 계층의 ATM 프로토콜 때문에 틀린 것 같고, C네트워크 아이디의 마지막 주소 IP를 설정하는 거에서 틀린 것 같다..(ㅠㅠ).
오랜만에 시험장에 와서 긴장감도 느껴보고 하니 다른 시험도 치고 싶다는 욕심이 많이 생겼다. 시간을 할애해야겠지만..(ㅎㅎ)&lt;br /&gt;
다음 목표 자격증은&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1. 리눅스 마스터&lt;/strong&gt; : 시간을 길게 잡고 공부하면서 자격증은 덤으로 얻는 느낌으로 준비할 거다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2. 정보보안산업기사&lt;/strong&gt; : 요거는 리눅스 마스터 취득하고 난 후에 준비할 예정.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-next-step-&quot;&gt;&lt;strong&gt;” Next Step “&lt;/strong&gt;&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;지난 주 목표 &amp;gt;&lt;/strong&gt; 최소 10장까지 풀이.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;배포까지 큰 흐름을 잡고 개발할 때 다시 보겠다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;#🤔&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[다음 주 계획]&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;🚨이번 주 부족한 개념 지식 List🚨&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자바 Collection 정리 필요&lt;/li&gt;
  &lt;li&gt;자바 Stream&lt;E&gt; 정리 필요&lt;/E&gt;&lt;/li&gt;
  &lt;li&gt;자바 Iterator 정리 필요&lt;/li&gt;
  &lt;li&gt;쉘 스크립트 정리&lt;/li&gt;
  &lt;li&gt;.properties와 .yml의 차이&lt;/li&gt;
  &lt;li&gt;JPA Auditing&lt;/li&gt;
  &lt;li&gt;BDD (Behavior-Driven-Development)&lt;/li&gt;
  &lt;li&gt;Gradle 사용법, 동작원리, 문법확인&lt;/li&gt;
  &lt;li&gt;무중단배포&lt;/li&gt;
  &lt;li&gt;익명클래스&lt;/li&gt;
  &lt;li&gt;Exception 종류와 정의&lt;/li&gt;
  &lt;li&gt;자바 가변인자 문법 예제 코드 작성&lt;/li&gt;
  &lt;li&gt;자바 람다식 예제 코드 작성&lt;/li&gt;
  &lt;li&gt;데이터베이스 인덱스, 정규화, 트랜잭션 조사&lt;/li&gt;
  &lt;li&gt;XSS 취약점&lt;/li&gt;
  &lt;li&gt;preventDefault&lt;/li&gt;
  &lt;li&gt;애자일 소프트웨어 개발이란&lt;/li&gt;
  &lt;li&gt;SSH 흐름&lt;/li&gt;
  &lt;li&gt;공개키, 비공개키 사용 흐름&lt;/li&gt;
  &lt;li&gt;Apache 정의 흐름&lt;/li&gt;
  &lt;li&gt;리눅스에서 사용하는 apt-get, wget 정리&lt;/li&gt;
  &lt;li&gt;Heap 영역이란&lt;/li&gt;
  &lt;li&gt;Class Loader (JVM) 정리 필요&lt;/li&gt;
  &lt;li&gt;GC (Garbage Collection) 정리 필요&lt;/li&gt;
&lt;/ol&gt;</content><author><name>funchcode</name></author><summary type="html">19.03.25 ~ 19.03.31 주간회고</summary></entry><entry><title type="html">[“Dockerfile로 Jenkins Docker in Docker 적용”]</title><link href="https://funchcode.github.io/backend/2019/03/30/dockerhub/" rel="alternate" type="text/html" title="[&quot;Dockerfile로 Jenkins Docker in Docker 적용&quot;]" /><published>2019-03-30T00:00:00+00:00</published><updated>2019-03-30T00:00:00+00:00</updated><id>https://funchcode.github.io/backend/2019/03/30/dockerhub</id><content type="html" xml:base="https://funchcode.github.io/backend/2019/03/30/dockerhub/">&lt;blockquote&gt;
  &lt;p&gt;토이 프로젝트를 구상 중에 전체적인 흐름을 잡으면서 공부한다.&lt;br /&gt;
내 맘대로 해도 되니깐 해보고 싶은 거 다 해보자.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Github에서 Push시에 Jenkins에 빌드 및 메세지 Slack 연동까지 완료했다.&lt;br /&gt;
내가 원하는 건 Jenkins에 빌드 후 Docker에 뭔가 반응을 주고 싶었다.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-docker-in-docker&quot;&gt;&amp;gt; Docker in Docker&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;내가 하고싶은 일은 Docker에서 이미지를 생성 후 배포하는 일이다.&lt;br /&gt;
그렇게하려면 Jenkins Container에서 docker 명령어를 사용할 수 있어야했다.&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;도커 명령어를 실행할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt;를 바라보고 명령을 하고 있다. 이것을 컨테이너 &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; 볼륨으로 반드시 동일한 위치에 지정해주어야한다.&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -v /var/run/docker.sock:/var/run/docker.sock&lt;/code&gt; 볼륨을 잡아준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째로는 jenkins 내부에 docker를 포함시켜야 한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;2-1) 이미 누군가 만들어놓은 이미지를 사용한다.&lt;/li&gt;
      &lt;li&gt;2-2) 직접 Dockerfile을 작성해서 이미지를 만들어 사용한다.&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;둘 다 시도해봤다.&lt;br /&gt;
[2-1]은 gustavoapolinario/jenkins-docker 이미지를 사용했는데, Jenkins Plugins에서 오류가 발생했다.&lt;br /&gt;
위의 문제를 해결하기 위해 [2-2]인 Dockerfile을 직접 작성하기로 했다.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-dockerfile-작성&quot;&gt;&amp;gt; Dockerfile 작성&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;처음에 궁금했던 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;은 어디 경로에 작성해야하고 확장자는 무엇이냐였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;경로는 내 맴대로 해도 되는 거였다.&lt;/li&gt;
  &lt;li&gt;확장자는 필요없더라…&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Dockerfile을 만들 경로
&lt;span class=&quot;go&quot;&gt;mkdir [내 맴대로 경로]

cd [내 맴대로 경로]
touch Dockerfile
nano Dockerfile
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;아직 쉘 스크립트니 리눅스니 뭐니뭐니 모르는 게 많아 시간이 매우 오래걸렸다.&lt;/del&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;간단하게 Dockerfile의 작성 방법을 기록한다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 기초 틀로 어떤 이미지 사용
&lt;span class=&quot;go&quot;&gt;FORM [이미지]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 이 이미지는 누가 관리
&lt;span class=&quot;go&quot;&gt;MAINTAINER [이메일]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 쉘 명령어 실행
&lt;span class=&quot;go&quot;&gt;RUN [쉘 명령어]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 가상 머신에 오픈 할 포트
&lt;span class=&quot;go&quot;&gt;EXPOSE [포트번호]

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 컨테이너에서 실행될 명령어
&lt;span class=&quot;go&quot;&gt;CMD [&quot;&quot;,&quot;&quot;,&quot;&quot;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@manav503/how-to-build-docker-images-inside-a-jenkins-container-d59944102f30&quot;&gt;글&lt;/a&gt;에서 작성한 Dockerfile을 사용했다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;FROM jenkins/jenkins:lts

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; jenkins에서 USER를 jenkins로 자동으로 변경하기 때문에.
&lt;span class=&quot;go&quot;&gt;USER root

RUN apt-get update -qq \
    &amp;amp;&amp;amp; apt-get install -qqy apt-transport-https ca-certificates curl gnupg2 software-properties-common 
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;RUN add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/debian \
   $&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   stable&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;RUN apt-get update  -qq \
    &amp;amp;&amp;amp; apt-get install docker-ce=17.12.1~ce-0~debian -y
RUN usermod -aG docker jenkins
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그대로 저장한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 이 파일을 이미지로 빌드해줘야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t [이름/태그] .&lt;/code&gt;&lt;br /&gt;
뒤에 .(점)은 현재 경로를 말한다.&lt;br /&gt;
&lt;strong&gt;이름/태그&lt;/strong&gt;가 최종 이미지명이 된다.&lt;br /&gt;
Dockerfile내부에 있는 RUN 명령어 하나하나 이미지가 생성된다. 하지만 최종 이미지는 [이름/태그]이미지이다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;나는 위의 Dockerfile을 오타내서 오류를 발견했다가 하나 배웠다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; apt-get update returned a non-zero code : 100 &quot;&lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;curl&lt;/strong&gt;로 https를 사용했기 때문에 &lt;strong&gt;apt-transport-https&lt;/strong&gt;를 설치해야 한다.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;내가 사용한 Docker 명령어&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 지금 존재하는 컨테이너 확인
&lt;span class=&quot;go&quot;&gt;docker ps -a
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 컨테이너 삭제
&lt;span class=&quot;go&quot;&gt;docker rm [CONTAINERID or NAMES]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 이미지 확인
&lt;span class=&quot;go&quot;&gt;docker images
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 이미지 삭제
&lt;span class=&quot;go&quot;&gt;docker rmi [IMAGE-ID]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 컨테이너 이름 변경
&lt;span class=&quot;go&quot;&gt;docker rename [CONTAINERID or NAMES] [원하는 이름]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 컨테이너 재시작
&lt;span class=&quot;go&quot;&gt;docker restart [CONTAINERID or NAMES]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;🚨&lt;strong&gt;해결하지 못한 것&lt;/strong&gt;🚨&lt;br /&gt;
 &lt;strong&gt;외부 볼륨을 지정해주는 것&lt;/strong&gt;. permission denied 오류 때문에 지정할 수 없었다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;로컬에 접근하려면 root 권한이 있어야하는데 내가 사용하는 jenkins에서 user를 root가 jenkins로 설정하기 때문인 것 같다.&lt;br /&gt;
내가 한 삽질로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod -R 1000:1000 [folder]&lt;/code&gt; 시도 - 실패&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;🗂&lt;strong&gt;참고 자료 (:감사합니다:)&lt;/strong&gt;🏷&lt;br /&gt;
 &lt;a href=&quot;https://medium.com/@manav503/how-to-build-docker-images-inside-a-jenkins-container-d59944102f30&quot;&gt;How to build docker images inside a Jenkins container.&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;http://seapy.com/2083&quot;&gt;Jenkins를 이용한 Docker 빌드&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/&quot;&gt;도커(Docker) 튜토리얼 : 깐 김에 배포까지&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://subicura.com/2016/06/07/zero-downtime-docker-deployment.html&quot;&gt;도커를 이용한 웹서비스 무중단 배포하기&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;http://pragmaticstory.com/?p=113&quot;&gt;Jenkins로 Docker 이미지 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>funchcode</name></author><category term="Docker, Dockerfile, Jenkins, dind" /><summary type="html">토이 프로젝트를 구상 중에 전체적인 흐름을 잡으면서 공부한다. 내 맘대로 해도 되니깐 해보고 싶은 거 다 해보자.</summary></entry><entry><title type="html">[“도커(Docker) + 젠킨스(Jenkins) + 깃허브(Github) + 슬랙(Slack)을 정리한다.”]</title><link href="https://funchcode.github.io/backend/2019/03/29/docjkinsla/" rel="alternate" type="text/html" title="[&quot;도커(Docker) + 젠킨스(Jenkins) + 깃허브(Github) + 슬랙(Slack)을 정리한다.&quot;]" /><published>2019-03-29T00:00:00+00:00</published><updated>2019-03-29T00:00:00+00:00</updated><id>https://funchcode.github.io/backend/2019/03/29/docjkinsla</id><content type="html" xml:base="https://funchcode.github.io/backend/2019/03/29/docjkinsla/">&lt;p&gt;토이 프로젝트를 구상 중에 전체적인 흐름을 잡으면서 공부한다.&lt;br /&gt;
내 맘대로 해도 되니깐 해보고 싶은 거 다 해보자.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-mac에서-docker-다운로드&quot;&gt;&amp;gt; Mac에서 Docker 다운로드&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;나는 &lt;a href=&quot;https://docs.docker.com/docker-for-mac/install/&quot;&gt;도커 홈페이지&lt;/a&gt;에서 다운로드 받았다.&lt;br /&gt;
아주 간단간단하다.&lt;br /&gt;
&lt;strong&gt;화면 상단에 도커 아이콘이 생긴다. 귀엽다.😆&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-docker에-jenkins-설치&quot;&gt;&amp;gt; Docker에 Jenkins 설치&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;튜토리얼에서는 Kitematic에서 젠킨스를 설치하면 된다고 했는데 Plugin들이 제대로 받아지지 않아 삽질을 했다.&lt;/strong&gt;&lt;br /&gt;
그래서 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull jenkins&lt;/code&gt;명령어를 통해 최신 jenkins &lt;strong&gt;이미지&lt;/strong&gt;를 다운받았다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jenkins 이미지를 실행시켜야 된다.&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p 8080:8080 -v /jenkins:/var/jenkins_home --name jenkins&lt;/code&gt;명령어를 통해 실행할 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; : 데몬 상태로 실행한다는 의미이다. 로그와 관련있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;p&lt;/strong&gt; : 컨테이너 내부의 포트를 외부로 내보낼 포트로 연결시켜준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;v&lt;/strong&gt; : 호스트에 볼륨을 지정해준다. 백업하는 용도로 잡았다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; : 컨테이너의 이름을 지정해줬다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해당 포트로 들어가면 패스워드를 요구한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt;에 존재한다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 외부에서 컨테이너 내부의 명령을 실행하는 &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;명령. 컨테이너 안의 /bin/bash를 실행시킨다.
&lt;span class=&quot;go&quot;&gt;docker exec -i -t jenkins /bin/bash

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 컨테이너 내부의 패스워드 파일을 읽는다.
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /var/jenkins_home/secrets/initialAdminPassword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;시키는 대로 클릭하면 된다.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-jenkins와-github연결&quot;&gt;&amp;gt; Jenkins와 Github연결&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;19년도 이전의 글을 보면 깃헙에 Integrations&amp;amp;Services에서 설정하는데 19년도부터 바뀌었다. 역시 삽질했다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jenkins 관리 &amp;gt; 시스템 설정&lt;/strong&gt;에 보면 Github란을 찾을 수 있다.&lt;br /&gt;
“Name”, “API URL”, “Credentials”를 작성해주면 된다.&lt;br /&gt;
여기서 API URL은 그대로 두고, Credentials에서 &lt;strong&gt;Secret text를 깃허브&lt;/strong&gt;에서 가져와야한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github로 들어간다&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;우측 상단에 본인 프로필을 누르면 메뉴 중 &lt;strong&gt;Settings&lt;/strong&gt;에 들어간다.&lt;/li&gt;
  &lt;li&gt;Settings 카테고리 중 &lt;strong&gt;Developer settings&lt;/strong&gt;에 들어간다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Personal access tokens&lt;/strong&gt;에 들어간 후 &lt;strong&gt;Generate new token&lt;/strong&gt;을 통해 받는다.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다시 젠킨스로 돌아와서 &lt;strong&gt;kind : Secret text&lt;/strong&gt;에 Secret에다가 토큰 값을 복붙. 추가버튼.&lt;br /&gt;
저장하기를 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;원하는 Repository와 연결해보자.&lt;br /&gt;
&lt;strong&gt;새로운 item&lt;/strong&gt; 선택 후 나는 Freestyle project를 선택했다.&lt;br /&gt;
General란에서 &lt;strong&gt;소스코드관리&lt;/strong&gt;란이 있다.&lt;br /&gt;
“Repository URL”,”Credentials”,”Branch Specifier”을 작성해주면 된다.&lt;br /&gt;
여기서 Credentials에 나는 깃허브 아이디 패스워드로 했다.&lt;br /&gt;
Branch Specifier에는 master브랜치에 push시에 반응하도록 하고 싶어서 master로 두었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래에 &lt;strong&gt;빌드 유발&lt;/strong&gt;란이 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub hook trigger for GITScm polling&lt;/code&gt;에 체크했다.&lt;br /&gt;
그리고 저장.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Git에 지정한 브랜치에 Jenkins에 반응이 와야겠다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Web hook”&lt;br /&gt;
이벤트 중 하나가 트리거되면 webhook의 구성된 URL에 HTTP POST 페이로드를 보낼 수 있다.&lt;br /&gt;
&lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;이벤트를 확인하고 싶다.&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Webhook을 지정해줘야하는데 url이 localhost로 되어있어서 테스트할 수 없다 ?&lt;/strong&gt;&lt;br /&gt;
ngrok을 사용하면 url을 받아 테스트해볼 수 있다.&lt;br /&gt;
&lt;a href=&quot;https://funchcode.github.io/ngrok/2019/03/29/ngrok/&quot;&gt;ngrok 다운로드 및 초간단 사용&lt;/a&gt; 정리한 글을 보면 되겠다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;설정된 Url을 젠킨스와 github 둘 다 지정해줘야한다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“젠킨스에서 url 설정”&lt;br /&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Jenkins관리 &amp;gt; 시스템 설정&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;Jenkins Location란에 &lt;strong&gt;“Jenkins URL”&lt;/strong&gt;에 복붙.&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Github에서 webhook 설정”&lt;br /&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;설정한 Repository &amp;gt; Settings&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;Webhooks에서 &lt;strong&gt;localhost/github-webhook/&lt;/strong&gt;으로 된 것을 받은 URL로 수정.&lt;br /&gt;
      &lt;ul&gt;
        &lt;li&gt;URL는 /로 끝나야한다.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;!&lt;/strong&gt;가 떠있으면 안된다. Recent Deliveries에서 선택 후 재 발송을 한다.&lt;br /&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;나는 마스터 브랜치였으니깐 마스터브랜치로 테스트 &amp;gt; &lt;strong&gt;성공!&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;-jenkins와-slack연결&quot;&gt;&amp;gt; Jenkins와 Slack연결&lt;br /&gt;&lt;/h1&gt;
&lt;p&gt;빌드 성공 실패 유무를 Slack으로 받을 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;workspace&lt;/strong&gt;를 생성 후 메세지를 받을 Channels을 생성한다. 나는 &lt;strong&gt;private&lt;/strong&gt;로 설정했다.&lt;/li&gt;
  &lt;li&gt;그 후 workspace url 뒤에 &lt;strong&gt;/apps&lt;/strong&gt;를 붙여서 해당 url로 접근한다.&lt;/li&gt;
  &lt;li&gt;Jenkins CI를 검색 후 설치한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;설치를 하면 token과 url을 받는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;젠킨스에 슬랙 토큰을 등록시켜야한다. 그 전에 Slack Notification Plugins를 설치해야한다.&lt;br /&gt;
Jenkins관리 &amp;gt; 플러그인 관리 &amp;gt; 설치관리 탭&lt;br /&gt;
&lt;strong&gt;Slack Notification Plugin&lt;/strong&gt;을 설치받는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins관리 &amp;gt; 시스템환경 &amp;gt; Global Slack Notifier Settings&lt;br /&gt;
Slack compatible app URL에 슬랙에서 받은 Url을 복붙.&lt;br /&gt;
토큰은 &lt;strong&gt;Integration Token Credential ID&lt;/strong&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;kind : Secret text&lt;/code&gt;로 해서 지정해준 후 테스트&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;성공!&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;🗂&lt;strong&gt;참고 자료 (:감사합니다:)&lt;/strong&gt;🏷&lt;br /&gt;
&lt;a href=&quot;https://kingbbode.tistory.com/35&quot;&gt;젠킨스 사용하여 자동 배포환경 만들어보기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://jojoldu.tistory.com/139&quot;&gt;docker를 이용한 CI 구축 연습하기 (젠킨스, 슬랙)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://daeson.tistory.com/290&quot;&gt;Docker for Mac (맥북에 도커 설치, 빌드, 생성등)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.leafcats.com/215&quot;&gt;Docker Container로 Jenkins 설치&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.eomdev.com/tool/2018/03/28/Jenkins_with_Docker.html&quot;&gt;OSX에 Docker로 Jenkins 설치하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://kutar37.tistory.com/entry/Jenkins-Github-%EC%97%B0%EB%8F%99-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC-3?category=776504&quot;&gt;[Jenkins] Github 프로젝트 연동, webhook, 자동배포&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>funchcode</name></author><category term="Docker, Jenkins, Github, Slack, webhook" /><summary type="html">토이 프로젝트를 구상 중에 전체적인 흐름을 잡으면서 공부한다. 내 맘대로 해도 되니깐 해보고 싶은 거 다 해보자.</summary></entry><entry><title type="html">[“OSX에서 ngrok 다운로드하기”]</title><link href="https://funchcode.github.io/ngrok/2019/03/29/ngrok/" rel="alternate" type="text/html" title="[&quot;OSX에서 ngrok 다운로드하기&quot;]" /><published>2019-03-29T00:00:00+00:00</published><updated>2019-03-29T00:00:00+00:00</updated><id>https://funchcode.github.io/ngrok/2019/03/29/ngrok</id><content type="html" xml:base="https://funchcode.github.io/ngrok/2019/03/29/ngrok/">&lt;p&gt;Jenkins url을 지정해주기 위해 찾다가 알게 되었다.&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-osx에서-ngrok-다운로드하기&quot;&gt;1. OSX에서 ngrok 다운로드하기&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://ngrok.com/download&quot;&gt;ngrok 홈페이지&lt;/a&gt;에서 다운로드받기&lt;/li&gt;
  &lt;li&gt;응용 프로그램 디렉토리에 압축을 푼다.&lt;/li&gt;
  &lt;li&gt;심볼릭 링크를 만들기.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 로컬 bin 디렉토리
&lt;span class=&quot;go&quot;&gt;cd /usr/local/bin

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 심볼릭 링크 만들기 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;바로가기 파일&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ln -s
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;나는 그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;에 압축을 풀었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok&lt;/code&gt;을 입력하면 &lt;strong&gt;EXAMPLES&lt;/strong&gt;를 보면 현재 로컬에 열려있는 포트 중 외부에 열고자 하는 포트를 입력하면 바로 ngrok 도메인과 연결해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 Jenkins가 &lt;strong&gt;8080&lt;/strong&gt;포트에 있으니 &lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok http 8080&lt;/code&gt; 명령어를 통해 ngrok과 연결시켰다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고 자료 (: 감사합니다)&lt;/strong&gt;🏷&lt;br /&gt;
&lt;a href=&quot;https://jojoldu.tistory.com/139&quot;&gt;이동욱 개발자님 docker를 이용한 CI 구축 연습하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://blog.outsider.ne.kr/1159&quot;&gt;ngrok으로 로컬 네트워크의 터널 열기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>funchcode</name></author><category term="ngrok" /><summary type="html">Jenkins url을 지정해주기 위해 찾다가 알게 되었다.</summary></entry><entry><title type="html">[“19.03.18 ~ 19.03.24”]</title><link href="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/03/24/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="[&quot;19.03.18 ~ 19.03.24&quot;]" /><published>2019-03-24T00:00:00+00:00</published><updated>2019-03-24T00:00:00+00:00</updated><id>https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/03/24/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="https://funchcode.github.io/%ED%9A%8C%EA%B3%A0/2019/03/24/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/">&lt;h1 id=&quot;190318--190324-주간회고-&quot;&gt;19.03.18 ~ 19.03.24 주간회고 &lt;br /&gt;&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;##🏃🏽‍&lt;span style=&quot;text-align:center&quot;&gt;WIL&lt;/span&gt;🏃🏽‍&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Next Step 책&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;7장에서 9장까지 학습을 완료했다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;단계별로 지저분한 코드를 깨끗하게 고쳐나가는 과정을 거쳐가면서 인터페이스 분리나 람다식 표현, 가변인자, 제네릭, 예외처리 등을 학습할 수 있었다.&lt;/li&gt;
  &lt;li&gt;자바 이론 서적을 통해서도 배울 수 있는 것들이지만, 원리를 먼저 고민해보고 하나씩 습득해나가는 자연스러운 이런 과정들이 그 동안 이론 서적으로 습득한 지식들보다 가치있다고 느껴졌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;객체지향의 사실과 오해 서적&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Next Step을 학습하다가 추천을 받아 사서 읽게 되었는데 이론적인 내용이라 지루한 건 어쩔 수 없었지만, 객체지향의 설명을 이해하기 쉽게 잘 풀어낸 것 같다.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;초보자가 이해하기 쉽도록 풀어 쓴 글이라 복사 붙여넣기 같은 문장들이 많았을 뿐이지 끝까지 다 읽고 한 번 더 읽으면 남에게도 설명할 수 있을 정도의 이해를 얻을 수 있다고 기대한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;코딩 인터뷰 완벽 분석 And 프로그래머스&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;코딩 인터뷰 완벽 분석&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;코딩 인터뷰 완벽 분석 서적은 잠시 일시정지를 했다. 알고리즘이 필요성을 느끼고 찾아보기 위해 코딩 문제를 풀어보고 그 다음에 학습해보려고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jojoldu/junior-recruit-scheduler&quot;&gt;주니어 개발자 채용정보 Repository&lt;/a&gt;에서 발견한 &lt;a href=&quot;https://www.slideshare.net/EunhyangKim2/ss-87782520&quot;&gt;김은향님의 글&lt;/a&gt;을 보고&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;어떤 식으로 취업을 준비했는지 재밌게 잘 쓰셨더라. 107개의 페이지가 존재했지만 짧다고 느낄 정도로 재미있게 잘 읽었다.&lt;/li&gt;
  &lt;li&gt;글 중에 코딩테스트에 관련된 글이 있어서 메일을 보내 코딩테스트에 관한 질문을 드렸다(어떻게 준비하셨나요 ? 조언을 얻을 수 있나요.).&lt;/li&gt;
  &lt;li&gt;코딩테스트의 궁금점에 대한 해결책을 들은 건 아니지만 기대 이상의 답변을 받았다.&lt;/li&gt;
  &lt;li&gt;내용은 비밀.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;프로그래머스&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;일단 나는 쉬운 문제도 어렵게 풀려고 하는 것 같다는 생각에 Level 1 문제를 차근차근 풀어나가자는 목표로 1일 2문제 꼴로 풀었다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/funchcode/interview-coding-problems&quot;&gt;깃 레파지토리&lt;/a&gt;에 해당 문제와 풀이 이력을 남기고 있다.&lt;/li&gt;
  &lt;li&gt;Level1의 문제임에도 불구하고 1~2일 차때는 시간이 오래 걸렸다. 그렇다고 코드가 깔끔했던 것도 아니었던 것 같다.
    &lt;ul&gt;
      &lt;li&gt;문제를 풀면 다른 사람의 코드를 볼 수 있는데 다른 사람의 코드를 보면서 다른 문제를 풀 때 응용하고 이용할 수 있게 되었다.&lt;/li&gt;
      &lt;li&gt;결과적으로 다른 사람의 코드를 보고 이해하며 내 속도도 덩달아 올라갔다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;코딩 테스트 준비는 이전에는 사실 재미가 없었기 때문에 시간 할당을 아주 짧게 줬었는데, 지금은 재미가 붙어서 하루일과를 프로그래머스로 시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;토이 프로젝트(네일 웹 페이지)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;오랜만에 학원 동기들을 만나 술 한잔하며 얘기를 했다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다들 제 각기 열심히 성장하고 있었음을 느꼈고 동시에 뒤쳐지고 있다는 불안한 마음도 가졌다.&lt;/li&gt;
  &lt;li&gt;특히나, BE쪽 얘기에 끼어들 수 없을 정도로 뒤쳐졌다고 느꼈다.&lt;/li&gt;
  &lt;li&gt;나도 경험을 해보고 싶다고 생각했고, 지금 어떤 회사에 소속된 것이 아니기 때문에 제쳐뒀던 프로젝트를 슬그머니 꺼냈다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;매장 관리 웹페이지 토이 프로젝트&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트를 어떻게 준비해야할지 정리해 둔 글을 다시 봤는데, 어떤 식으로 프로젝트를 이끌어 갈 것인지 설계했다기 보다는 화면 단이나 기능만을 정의했었던 것이었다.&lt;/li&gt;
  &lt;li&gt;다시 큰 틀을 정리할 필요가 있었다. 그래서 사용할 기술에 대해 고민을 했다.
    &lt;ul&gt;
      &lt;li&gt;SpringBoot, Handlebars, Git, Jenkins, Dockerhub, AWS ECS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빠르게 만들 생각은 진짜 집어치우자, 하나 씩 배워간다는 생각으로 차근차근 만들어가자&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;깃헙&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;블로그 github.io&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;공부한 지식을 다시 글로 옮겨내려는 작업에 대한 시간이 아깝다고 느낀다.
    &lt;ul&gt;
      &lt;li&gt;일단 해보고 판단하자.&lt;/li&gt;
      &lt;li&gt;지난 주 부족한 지식 List에서 선택 후 블로그에 게시하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;🤔&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[다음 주 계획]&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Next Step&lt;/strong&gt;, 최소 10장까지 풀이.&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;프로그래머스&lt;/strong&gt;, Level 1의 문제를 충분히 풀고 Level 2로 진입하자.&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;블로그&lt;/strong&gt;, 주에 하나라도 기술 포스팅을 하자.&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;토이프로젝트&lt;/strong&gt;, 기술 흐름 정리 및 전체 연결 연습&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;취업&lt;/strong&gt;, 매일 아침 일어나 TODO리스트를 정리하고 채용공고를 확인한다.&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;자격증&lt;/strong&gt;, 하루에 한 번 전체 문제 학습, 매일 반복&lt;br /&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;🚨이번 주 부족한 개념 지식 List🚨&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자바 Collection 정리 필요&lt;/li&gt;
  &lt;li&gt;자바 Stream&lt;E&gt; 정리 필요&lt;/E&gt;&lt;/li&gt;
  &lt;li&gt;자바 Iterator 정리 필요&lt;/li&gt;
  &lt;li&gt;쉘 스크립트 정리&lt;/li&gt;
  &lt;li&gt;.properties와 .yml의 차이&lt;/li&gt;
  &lt;li&gt;JPA Auditing&lt;/li&gt;
  &lt;li&gt;BDD (Behavior-Driven-Development)&lt;/li&gt;
  &lt;li&gt;Gradle 사용법, 동작원리, 문법확인&lt;/li&gt;
  &lt;li&gt;무중단배포&lt;/li&gt;
  &lt;li&gt;익명클래스&lt;/li&gt;
  &lt;li&gt;Exception 종류와 정의&lt;/li&gt;
  &lt;li&gt;자바 가변인자 문법 예제 코드 작성&lt;/li&gt;
  &lt;li&gt;자바 람다식 예제 코드 작성&lt;/li&gt;
  &lt;li&gt;데이터베이스 인덱스, 정규화, 트랜잭션 조사&lt;/li&gt;
  &lt;li&gt;XSS 취약점&lt;/li&gt;
  &lt;li&gt;preventDefault&lt;/li&gt;
  &lt;li&gt;애자일 소프트웨어 개발이란&lt;/li&gt;
  &lt;li&gt;SSH 흐름&lt;/li&gt;
  &lt;li&gt;공개키, 비공개키 사용 흐름&lt;/li&gt;
  &lt;li&gt;Apache 정의 흐름&lt;/li&gt;
  &lt;li&gt;리눅스에서 사용하는 apt-get, wget 정리&lt;/li&gt;
  &lt;li&gt;Heap 영역이란&lt;/li&gt;
  &lt;li&gt;Class Loader (JVM) 정리 필요&lt;/li&gt;
  &lt;li&gt;GC (Garbage Collection) 정리 필요&lt;/li&gt;
&lt;/ol&gt;</content><author><name>funchcode</name></author><summary type="html">19.03.18 ~ 19.03.24 주간회고</summary></entry></feed>