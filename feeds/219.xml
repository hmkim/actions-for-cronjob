<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>jetalog.net</title>
<link>https://jetalog.net/</link>
<description>jETA가 쓰는 jetalog</description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 00:42:42 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>jETA</managingEditor>
<image>
<title>jetalog.net</title>
<url>http://cfile27.uf.tistory.com/image/22675E345766306E268652</url>
<link>https://jetalog.net</link>
<description>jETA가 쓰는 jetalog</description>
</image>
<item>
<title>Ubuntu에 MySQL 설치하기 (a.k.a. MySQL 초기 설정)</title>
<link>https://jetalog.net/82</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;MySQL은 다양한 App과 서비스에서 사용하는 RDBMS입니다. Ubuntu에 설치하는 과정을 기록도 겸할겸 간략하게 명령어 위주로 정리해봅니다. 정말 많이 급하게 설치를 진행해야 한다면 아래 검은 바탕의 명령어와 굵은 글꼴만 읽으면 됩니다. MySQL 설치 패키지 관리자를 최신화 한 후 MySQL을 설치합니다. sudo apt-get update sudo apt-get install mysql-server 보안 관련 설정 다음 명령어를 통해 보안..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: W</category>
<category>AWS</category>
<category>EC2</category>
<category>jETA</category>
<category>MySQL</category>
<category>TimeZone</category>
<category>ubuntu</category>
<author>jETA</author>
<guid>https://jetalog.net/82</guid>
<comments>https://jetalog.net/82#entry82comment</comments>
<pubDate>Tue, 22 Jan 2019 15:06:55 +0900</pubDate>
</item>
<item>
<title>AWS EC2 Instance Initialzer for Ubuntu</title>
<link>https://jetalog.net/81</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;AWS EC2 인스턴스를 처음 실행 하면 몇 가지 설정을 진행해야 합니다. Ubuntu 인스턴스를 몇 번 설정해보니 공통적으로 수행해야 하는 설정이 있어서 배치 파일로 만들어뒀습니다. init_ubuntu.sh clear touch init_std.log echo &quot;:: AWS EC2 Instance Initialzer for Ubuntu&quot; echo &quot; &quot; echo &quot; &quot; # node 설치 echo &quot;:::::::::::::::::::::::::::..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: W</category>
<category>AWS</category>
<category>EC2</category>
<category>jETA</category>
<category>SH</category>
<category>ubuntu</category>
<author>jETA</author>
<guid>https://jetalog.net/81</guid>
<comments>https://jetalog.net/81#entry81comment</comments>
<pubDate>Tue, 22 Jan 2019 08:33:34 +0900</pubDate>
</item>
<item>
<title>Jetronome Client</title>
<link>https://jetalog.net/79</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;Jetronome Client Jetronome Client는 Application의 상태를 모니터링 할 수 있는 가장 간단한 방법입니다. License: MIT License Features - 주기적 실행 여부 확인 - 실행 중인 PC의 자원 확인 Install - 점검할 Node.js 프로젝트에서 다음 명령을 실행합니다. npm i --save jetronome-client Usage 초기화와 함께 신호 발생 시작 require('./jetro..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: L</category>
<category>jETA</category>
<category>Jetronome</category>
<category>Mornitoring</category>
<category>Node.js</category>
<category>관제</category>
<category>모니터링</category>
<author>jETA</author>
<guid>https://jetalog.net/79</guid>
<comments>https://jetalog.net/79#entry79comment</comments>
<pubDate>Wed, 26 Dec 2018 10:00:00 +0900</pubDate>
</item>
<item>
<title>Jetronome Server</title>
<link>https://jetalog.net/78</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;Jetronome Server Jetronome Server는 운용 중인 Application의 상태를 한 곳에서 확인할 수 있는 가장 간단한 방법입니다. License: MIT License Features - 주기적 실행 여부 확인 - IP를 기준으로 한 App 목록 그룹화 - 신호 누락 시 알림 - 테스트 API 접속 실패 시 알림 Install - 서버로 사용할 Node.js 프로젝트에서 다음 명령을 실행합니다. npm i --save jet..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: L</category>
<category>jETA</category>
<category>Jetronome</category>
<category>Mornitoring</category>
<category>Node.js</category>
<category>관제</category>
<category>모니터링</category>
<author>jETA</author>
<guid>https://jetalog.net/78</guid>
<comments>https://jetalog.net/78#entry78comment</comments>
<pubDate>Wed, 26 Dec 2018 10:00:00 +0900</pubDate>
</item>
<item>
<title>AWS DNS 오류: 늦은 리뷰 (리눅스 DNS 서버 추가법)</title>
<link>https://jetalog.net/80</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;열흘도 더 된 사건이지만 나중에 참고할 일이 생길 것 같아서 남겨둔다. 오전 8시 반 쯤에 운영 중인 대부분의 서버에서 오류가 발견되었다. 문제는 도메인이야, 이 멍청아 Express.js 서버(A)에서 외부 자원(B)을 불러올 수 없다는 오류를 내고 있었다. 도메인에 대한 IP를 조회하지 못하는 문제였다. 일반적인 상황에서라면 500이나 Request Timed Out이 발생하는게 맞을터였다. 이상한 조짐을 느끼고 ping을 시도했다.  최근에 도..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: W</category>
<category>Amazon</category>
<category>AWS</category>
<category>dns</category>
<category>jETA</category>
<category>Linux</category>
<category>Network</category>
<category>ubuntu</category>
<category>도메인</category>
<category>아마존</category>
<author>jETA</author>
<guid>https://jetalog.net/80</guid>
<comments>https://jetalog.net/80#entry80comment</comments>
<pubDate>Fri, 07 Dec 2018 14:28:07 +0900</pubDate>
</item>
<item>
<title>Google Chrome이 localhost를 https로만 접속하는 경우</title>
<link>https://jetalog.net/77</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;최근 Google Chrome을 업데이트 한 이후로 http://localhost로 접속을 시도하더라도 강제로 https://localhost로 전달(Redirect)되는 경우가 발생합니다.  물론 로컬에서 작업을 하더라도 SSL로 연결을 보호하는 것이 최선이겠지만, 모든 개발을 SSL로만 할 수는 없습니다. Google Chrome이 강제로 리다이렉트 하지 않도록 설정하는 방법을 아래에 기록합니다. 1. 설정 페이지로 이동 - Google Chro..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: W</category>
<category>chrome</category>
<category>Google</category>
<category>HTTPS</category>
<category>jETA</category>
<category>localhost</category>
<category>redirect</category>
<author>jETA</author>
<guid>https://jetalog.net/77</guid>
<comments>https://jetalog.net/77#entry77comment</comments>
<pubDate>Thu, 11 Oct 2018 09:42:04 +0900</pubDate>
</item>
<item>
<title>Node.js App 실행을 스케줄링 하기</title>
<link>https://jetalog.net/76</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;컴퓨터의 장점은 반복 작업을 불평 없이 약속된 시간에 수행한다는 것입니다. Node.js로 구현한 App 역시 마찬가지로 지정된 시간마다 실행되도록 할 수 있습니다. 이번 포스트에서는 *nix(Linux, MacOS) OS를 기준으로 Node.js App을 스케줄링하는 두가지 방법을 공유합니다. Cron? *nix 시스템에는 기본적으로 cron scheduler가 탑재되어 있습니다. cron 표현식에서 각 시간은 공백문자 한 개로 구분하며 아래와 같..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Node.js</category>
<category>cron</category>
<category>crontab</category>
<category>jETA</category>
<category>Node.js</category>
<category>scheduler</category>
<category>Scheduling</category>
<category>스케줄러</category>
<category>스케줄링</category>
<category>스케쥴러</category>
<category>스케쥴링</category>
<author>jETA</author>
<guid>https://jetalog.net/76</guid>
<comments>https://jetalog.net/76#entry76comment</comments>
<pubDate>Fri, 20 Apr 2018 10:00:00 +0900</pubDate>
</item>
<item>
<title>Node.js App을 Deamon처럼 활용하기</title>
<link>https://jetalog.net/75</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;Node.js 응용프로그램을 실행하는 방법은 일반적으로 node &lt;filename&gt; 혹은 npm &lt;command&gt; 명령어입니다. 이 때 별개의 터미널을 이용해 실행하거나, OS의 스케쥴러를 이용하죠. 하지만 웹 서비스와 같이 항상 실행되어야 하는 App도 있습니다. 이런 경우 별도의 터미널로 실행되어 있을 때 실수로 터미널을 종료하기라도 하면 치명적일 수 있습니다. PM2는 Node.js App을 백그라운드에서 실행해줘서 이런 상황을 방지해 줄 수 ..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Node.js</category>
<category>deamon</category>
<category>jETA</category>
<category>Node.js</category>
<category>pm2</category>
<category>노드</category>
<category>데몬</category>
<author>jETA</author>
<guid>https://jetalog.net/75</guid>
<comments>https://jetalog.net/75#entry75comment</comments>
<pubDate>Wed, 18 Apr 2018 10:00:00 +0900</pubDate>
</item>
<item>
<title>청약조회긱</title>
<link>https://jetalog.net/74</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;청약조회긱 서울에서 예정 중인 혹은 진행 중인 주택 청약을 빠르게 조회해주는 챗봇입니다. Telegram Bot API를 이용하여 간단하게 구현되었습니다. :: 사용 언어 - node.js :: 주요 라이브러리 - cheerio: 웹페이지 분석 - cron: 스케줄러 - telegraf: Telegram Bot API 사용 지원 :: 주요 기능 - 청약 조회 + 예정 중인 혹은 진행 중인 주택 청약을 조회하여 출력합니다. - 청약 정보 구독 + 구독..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>:: L</category>
<category>chatbot</category>
<category>house-geeker-bot</category>
<category>jETA</category>
<category>Node.js</category>
<category>telegram</category>
<category>챗봇</category>
<category>청약조회긱</category>
<category>텔레그램</category>
<author>jETA</author>
<guid>https://jetalog.net/74</guid>
<comments>https://jetalog.net/74#entry74comment</comments>
<pubDate>Thu, 12 Apr 2018 18:34:17 +0900</pubDate>
</item>
<item>
<title>Node.js로 가상호스트 이용하기</title>
<link>https://jetalog.net/73</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 상단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;5165659758&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;한 서버에서 여러 웹 서비스를 운용해야 하는 경우가 있습니다. 단순히 도메인이 여러개라서 한 도메인으로 사용자를 전달한다거나, 사용자 페이지와 백 오피스를 함께 운용할 수도 있지요. 이런 경우 Apache나 Nginx를 이용한다면 설정 파일을 이용해서 VirtualHost를 활용하곤 합니다. 만약 모든 서비스가 Node.js로 운용되고 있다면 굳이 Apache나 Nginx를 찾지 않고도 VirtualHost를 사용할 수 있습니다. 사전 준비: hos..&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- jetalog.net 하단 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2988382265775517&quot;
     data-ad-slot=&quot;6680113481&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Node.js</category>
<category>apache</category>
<category>hosts</category>
<category>jETA</category>
<category>nginx</category>
<category>Node.js</category>
<category>vhost</category>
<category>virtualhost</category>
<category>가상호스트</category>
<category>생활코딩</category>
<author>jETA</author>
<guid>https://jetalog.net/73</guid>
<comments>https://jetalog.net/73#entry73comment</comments>
<pubDate>Thu, 12 Apr 2018 11:00:00 +0900</pubDate>
</item>
</channel>
</rss>