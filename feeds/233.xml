<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Jistol Github Page</title>
 <link href="https://jistol.github.io/atom.xml" rel="self"/>
 <link href="https://jistol.github.io/"/>
 <updated>2019-03-26T19:23:53+00:00</updated>
 <id>https://jistol.github.io</id>
 <author>
   <name>김지환</name>
   <email></email>
 </author>

 
 <entry>
   <title>docker-compose를 이용한 ElasticSearch Cluster구성</title>
   <link href="https://jistol.github.io/docker/2019/03/27/docker-compose-elasticsearch-cluster/"/>
   <updated>2019-03-27T00:00:00+00:00</updated>
   <id>https://jistol.github.io/docker/2019/03/27/docker-compose-elasticsearch-cluster</id>
   <content type="html">&lt;p&gt;개발을 하다보면 공용장비가 아닌 로컬장비에서 DB나 캐시, 검색엔진등을 실행해야하는 경우가 있는데 이 때 Docker를 사용하면 필요할 때만 올려 사용할 수 있어 자원 관리가 편하고 docker-compose를 이용하면 여러 프로그램을 동시에 실행하고 종료 할 수 있어 편하게 사용할 수 있습니다. &lt;br /&gt;
본 글은 docker-compose를 이용하여 ElasticSearch 6.5.3 버전 기반으로 Cluster 환경을 구성하며 Kibana까지 같이 올리는 방법에 관한 글로 이미 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/docker.html&quot;&gt;elstic reference에 docker를 이용하여 설치하는 방법&lt;/a&gt;이 친절하게 설명되어 있으나 실제 설치하면서 추가로 필요했던 부분에 대해 보충하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;구성&quot;&gt;구성&lt;/h2&gt;
&lt;p&gt;구성은 master-node 1대, data-node 1대, kibana 1대 입니다.  &lt;br /&gt;
ElasticSearch(이하 ES)와 함께 Celebro를 모니터링 툴로 쓰는 경우가 있는데 Kibana 최신 버전은 xpack을 통해 모니터링하는 기능이 있어 구지 필요가 없어 제외했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/docker/docker-compose-elasticsearch-cluster/1.png&quot; alt=&quot;kibana-Monitoring&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-composeyml&quot;&gt;docker-compose.yml&lt;/h2&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2.2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# master-node의 Docker 서비스입니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Kibana에서 기본적으로 호출하는 ES host주소가 'http://elsaticsearch:9200'이기 때문에 서비스명은 elasticsearch로 쓰시는게 편합니다. &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 다른 서비스명을 사용시 Kibana ES host 설정도 같이 추가해주어야 정상 동작합니다.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch:6.5.3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ES Cluster명입니다. ES 서비스마다 동일한 명칭을 사용해야합니다.    &lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster.name=docker-cluster&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ES Node명을 설정합니다.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node.name=master-node1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ES운영중 메모리 스왑을 막기 위한 설정을 추가합니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 자세한 설명은 페이지 하단의 [Disable swapping]을 참고하세요.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bootstrap.memory_lock=true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# JVM Heap메모리 설정입니다. Xms/Xmx 옵션은 항상 같게 설정합니다.  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 자세한 설명은 페이지 하단의 [Setting the heap size]을 참고하세요.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ES_JAVA_OPTS=-Xms512m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Xmx512m&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 리눅스 시스템 자원제한 관련 옵션입니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ES는 많은 파일디스크립터와 핸들러를 사용하기 때문에 제한 해제가 필요합니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 자세한 설명은 페이지 하단의 [File Descriptors]을 참고하세요.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ulimits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;memlock&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;soft&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hard&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;es1:/usr/share/elasticsearch/data&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Kibana에서 본 노드를 호출하기 때문에 외부 9200포트는 master-node에 연결해줍니다.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9200:9200&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9300:9300&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;esnet&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 컨테이너에 bash로 붙고 싶을경우 아래 두 옵션을 추가해주면 됩니다.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# data-node의 Docker 서비스입니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 대부분의 내용이 master-node와 동일하나 몇가지 차이점이 있습니다.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;elasticsearch2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch:6.5.3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster.name=docker-cluster&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node.name=data-node1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bootstrap.memory_lock=true&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ES_JAVA_OPTS=-Xms512m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Xmx512m&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 다른 Cluster내 노드를 발견하기 위한 설정입니다.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;discovery.zen.ping.unicast.hosts=elasticsearch&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ulimits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;memlock&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;soft&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hard&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;es2:/usr/share/elasticsearch/data&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 외부 연결포트가 master-node와 겹치기 때문에 다르게 설정했습니다.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9301:9300&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;esnet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 각 서비스를 순차적으로 실행하기 위해 설정해주었습니다. (필수아님) &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Kibana 설정입니다.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kibana&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kibana&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kibana:6.5.3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5601:5601&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;esnet&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;es1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;es2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;esnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행--종료&quot;&gt;실행 / 종료&lt;/h2&gt;
&lt;p&gt;위와 같이 설정파일을 작성 후 docker-compose를 실행하면 아래와 같이 ES가 기동하는것을 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
Creating network &lt;span class=&quot;s2&quot;&gt;&quot;elasticsearch_esnet&quot;&lt;/span&gt; with the default driver
Creating volume &lt;span class=&quot;s2&quot;&gt;&quot;elasticsearch_es1&quot;&lt;/span&gt; with &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;driver
Creating volume &lt;span class=&quot;s2&quot;&gt;&quot;elasticsearch_es2&quot;&lt;/span&gt; with &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;driver
Pulling elasticsearch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;elasticsearch:6.5.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;...
6.5.3: Pulling from library/elasticsearch
Pulling elasticsearch2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;elasticsearch:6.5.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;...
6.5.3: Pulling from library/elasticsearch
Pulling kibana &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kibana:6.5.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;...
6.5.3: Pulling from library/kibana
Creating elasticsearch ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating elasticsearch2 ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating kibana         ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;종료방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose down
Stopping kibana         ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Stopping elasticsearch2 ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Stopping elasticsearch  ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Removing kibana         ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Removing elasticsearch2 ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Removing elasticsearch  ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Removing network elasticsearch_esnet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Install Elasticsearch with Docker:&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/docker.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/docker.html&lt;/a&gt;  &lt;br /&gt;
Disable swapping:&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/setup-configuration-memory.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/setup-configuration-memory.html&lt;/a&gt;   &lt;br /&gt;
Setting the heap size:&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/heap-size.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/heap-size.html&lt;/a&gt;   &lt;br /&gt;
File Descriptors:&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/file-descriptors.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.5/file-descriptors.html&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(React) Component Life Cycle Methods</title>
   <link href="https://jistol.github.io/frontend/2018/12/10/react-lifecycle-methods/"/>
   <updated>2018-12-10T00:00:00+00:00</updated>
   <id>https://jistol.github.io/frontend/2018/12/10/react-lifecycle-methods</id>
   <content type="html">&lt;p&gt;React Component의 생명주기에 대해 정리하고 테스트 예제를 포스팅합니다.  &lt;br /&gt;
참고로 version 17부터 deprecated 되는 항목(componentWillMount, componentWillUpdate, componentWillReceiveProps)은 제외했습니다.&lt;br /&gt;
위 3개의 lifecycle은 오용되는 케이스가 많아 삭제 되었으며 ‘UNSAFE_‘라는 prefix를 붙여 메소드가 남아있는 상태로 자세한 내용은 &lt;a href=&quot;https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html&quot;&gt;Update on Async Rendering&lt;/a&gt;문서를 참고하세요.&lt;/p&gt;

&lt;p&gt;React 버전에 따라 생명주기가 살짝 다른데 아래 그림을 참고하세요.&lt;/p&gt;

&lt;p&gt;React v16.3 : &lt;a href=&quot;https://code.likeagirl.io/understanding-react-component-life-cycle-49bf4b8674de&quot;&gt;https://code.likeagirl.io/understanding-react-component-life-cycle-49bf4b8674de&lt;/a&gt;   &lt;br /&gt;
&lt;img src=&quot;/assets/img/frontend/react-lifecycle-methods/1.jpeg&quot; alt=&quot;React Component LifeCycle v16.3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React v16.4 : &lt;a href=&quot;https://medium.com/@nancydo7/understanding-react-16-4-component-lifecycle-methods-e376710e5157&quot;&gt;https://medium.com/@nancydo7/understanding-react-16-4-component-lifecycle-methods-e376710e5157&lt;/a&gt;   &lt;br /&gt;
&lt;img src=&quot;/assets/img/frontend/react-lifecycle-methods/2.png&quot; alt=&quot;React Component LifeCycle v16.4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 React Component의 생명주기는 실행 이벤트 관점에서 “mount/update/unmount”로 구분 할 수 있으며 실행 단계 관점에서는 “랜더링전/DOM 반영전/DOM 반영이후”로 구분 할 수 있습니다.  &lt;br /&gt;
아래 메서드들은 실행 순서 보다는 “일반적으로 사용되는”, “드믈게 사용되는” 생명주기로 구분합니다. 버전별 일반 생명주기 메서드 표는 아래 링크를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;react-lifecycle-methods-diagram--httpprojectswojtekmajplreact-lifecycle-methods-diagram&quot;&gt;react-lifecycle-methods-diagram : &lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot;&gt;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&quot;1-commonly-used-lifecycle-methods&quot;&gt;1. Commonly Used Lifecycle Methods&lt;/h1&gt;

&lt;h2 id=&quot;render&quot;&gt;render()&lt;/h2&gt;
&lt;p&gt;React.Component에서 유일하게 필수 구현되어야 하는 함수입니다. 미구현시 아래와 같은 오류를 만나게 됩니다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Warning: TodoApp(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.

Uncaught TypeError: instance.render is not a function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 메서드 안에서는 this.props와 this.state를 사용할 수 있으나 state의 값을 변경하면 안됩니다. 변경시 아래와 같은 오류를 만나게 됩니다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uncaught Error: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반환 값으로 일반적으로 DOM노드를 반환하나 아래와 같이 여러종류의 데이터를 넘길 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-react-element&quot;&gt;1. React Element&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSX타입의 요소를 반환할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;반환시 최상위 DOM은 단일노드여야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// error case&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&amp;lt;div&amp;gt;2&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
* Uncaught SyntaxError: Inline Babel script: Adjacent JSX elements must be wrapped in an enclosing tag
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-fragment&quot;&gt;2. Fragment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정 태그로 묶고 싶지 않다면 &lt;React.Fragment&gt;태그로 묶어 반환할 수 있습니다.&lt;/React.Fragment&gt;&lt;/li&gt;
  &lt;li&gt;해당 태그로 묶을 경우 렌더링시 Fragment태그는 제거됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
* Result
* &amp;lt;div id=&quot;app&quot;&amp;gt;
*   &amp;lt;div&amp;gt;
*     &amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt;
*     &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt;
*   &amp;lt;/div&amp;gt;
* &amp;lt;/div&amp;gt;
*/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.Fragment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
* Result
* &amp;lt;div id=&quot;app&quot;&amp;gt;
*   &amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt;
*   &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt;
* &amp;lt;/div&amp;gt;
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-portal&quot;&gt;3. Portal&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ReactDOM.createPortal 메서드를 이용하여 다른 DOM의 서브트리로 만들수 있습니다.&lt;/li&gt;
  &lt;li&gt;반드시 리턴 할 경우에만 적용됩니다.&lt;/li&gt;
  &lt;li&gt;일반 렌더링값과는 달리 해당 DOM의 하위 노드를 제거후 렌더링하는것이 아니라 서브 노드로 추가가 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 본 컴포넌트가 속한 부모 노드 하위가 아닌 #portal 노드 하위에 그려집니다. &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#portal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPortal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Portal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;domNode&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 아래와 같은 경우 아무것도 그려지지 않습니다.    &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#portal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPortal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Portal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;domNode&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Portal의 경우 컴포넌트가 속하지 않은 노드에 렌더링을 할 수 있게 하는데 다음과 같은 경우에 사용하기 유용합니다.  &lt;br /&gt;
ex) dialog, hovercard, tooltips …  &lt;br /&gt;
자세한 가이드는 &lt;a href=&quot;https://reactjs.org/docs/portals.html&quot;&gt;React Portals&lt;/a&gt; 문서를 참고하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-string-number&quot;&gt;4. String, Number&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문자열이나 숫자를 반환 할 수 있으며 TextNode로 렌더링 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
* Result
* &amp;lt;div id=&quot;app&quot;&amp;gt;Text&amp;lt;/div&amp;gt;
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-boolean-null&quot;&gt;5. boolean, null&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;boolean(true/false)값이나 null값 역시 반환 가능합니다.&lt;/li&gt;
  &lt;li&gt;반환시 화면에 아무것도 안그리는 것으로 보일수 있으나 사실상 공백을 그려줍니다. 렌더링되는 요소 하위에 다른 요소가 존재한다면 삭제 됩니다.&lt;/li&gt;
  &lt;li&gt;심지어 undefined도 가능합니다. 테스트 해보면 에러는 안나지만 공식문서에 undefined는 명시되 있지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-array&quot;&gt;6. Array&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;배열을 반환할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;배열 요소들은 렌더링 가능한 모든 타입이 가능합니다. (function은 불가능합니다.)&lt;/li&gt;
  &lt;li&gt;컴포넌트 배열을 렌더링 할 경우 어떤 원소에 변동이 있는지 알아내기 위해 각 원소에 고유 key가 포함되어야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frag&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&amp;lt;div key=&quot;2&quot;&amp;gt;2&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.Fragment&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/b&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPortal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Portal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;portal&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;constructorprops&quot;&gt;constructor(props)&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Don't call this.setState() here!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴포넌트 생성자로 생성시 맨 처음에 실행하게 되는데 props를 인자로 받는데 React.Component를 상속했을 경우 반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;super(props);&lt;/code&gt;를 호출해야합니다.  &lt;br /&gt;
그리고 constructor는 유일하게 this.state 를 직접 할당하는 메서드입니다. 이 메서드 안에서는 setState()를 호출하지 말아야 합니다. 호출시 아래와 같은 오류가 발생합니다.  &lt;br /&gt;
그 외 이벤트를 해당 인스턴스로 바인드 하는 등의 작업을 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Warning: Can't call setState on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the YourApp component.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;componentdidmount&quot;&gt;componentDidMount()&lt;/h2&gt;
&lt;p&gt;Component가 DOM트리에 마운트 될 때 실행되며 일반적으로 DOM노드가 필요한 초기화 작업은 본 메서드에서 실행해야 합니다. 또한 여기서 실행한 트리거나 이벤트, 비동기 작업등은 componentWillUnmount메서드에서 만드시 해제 해주는 것이 좋습니다.         &lt;br /&gt;
componentDidMount() 메서드에도 안티패턴이 존재하는데 아래와 같은 케이스입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 호출 가능하나 화면을 업데이트 하기 전에 추가 렌더링이 발생하므로 뷰에는 중간 상태를 나타내지 않으며 성능상 이슈를 발생하기도 합니다.   &lt;br /&gt;
하지만 DOM에 렌더링 되기 전에 크기 측정이 필요 할 경우 위와 같이 사용 할 수도 있습니다. (ex. 툴팁이나 모달창등을 만들때.. )&lt;/p&gt;

&lt;h2 id=&quot;componentdidupdateprevprops-prevstate-snapshot&quot;&gt;componentDidUpdate(prevProps, prevState, snapshot)&lt;/h2&gt;
&lt;p&gt;리렌더링 발생 이후 실행되며 초기 렌더링 시에는 실행되지 않습니다. DOM업데이트가 완료된 이후에 실행되므로 DOM관련 처리를 해도 됩니다. &lt;br /&gt;
그리고 이전 상태의 props/state값과 getSnapshotBeforeUpdate()메서드를 통해 전달 받은 데이터가 넘어오기 때문에 이전 상태와 현 상태의 변화에 따른 네트워크 작업을 하기에 좋습니다. &lt;br /&gt;
단, 주의해야할 점은 본 메서드에서 setState()를 실행할 수 있으나 제약조건없이 실행 할 경우 무한루프에 빠질 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;componentwillunmount&quot;&gt;componentWillUnmount()&lt;/h2&gt;
&lt;p&gt;Component가 DOM에서 제거되고 파기 되기 직전에 호출 됩니다. 본 Component에서 구독한 이벤트나 트리거등을 제거할때 사용되며 Component가 리렌더링 되지 않기 때문에 setState()를 호출 할 수 업습니다.&lt;/p&gt;

&lt;h1 id=&quot;2-rarely-used-lifecycle-methods&quot;&gt;2. Rarely Used Lifecycle Methods&lt;/h1&gt;

&lt;h2 id=&quot;shouldcomponentupdatenextprops-nextstate&quot;&gt;shouldComponentUpdate(nextProps, nextState)&lt;/h2&gt;
&lt;p&gt;본 메서드에서 리렌더링 여부를 결정하는 메서드로 새로운 props/state 데이터를 받을 경우 동작하며, 초기 렌더링시나 forceUpdate()를 통한 리렌더링시에는 동작하지 않습니다.  &lt;br /&gt;
재정의 하지 않을 경우 기본적으로는 모든 변경시마다 리렌더링을 실행하며 false를 반환 할 경우 render() 메서드를 실행하지 않습니다.      &lt;br /&gt;
shouldComponentUpdate메서드는 보통 성능 최적화를 위해 특정 값의 변경에 따라서만 리렌더링을 조절가능하나 버그를 양산하기 쉽기 때문에 대신 &lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactpurecomponent&quot;&gt;React.PureComponent&lt;/a&gt;를 사용할 것을 권장하고 있습니다.   &lt;br /&gt;
PureComponent는 shouldComponentUpdate()메서드가 이미 구현되어 있는 클래스로 React.Component 대신 상속 받아 사용할 경우 props/state의 변화시 얕은 비교를 통해 변경된 것이 있을 경우에만 리렌더링을 해줍니다. 
PureComponent및 성능 최적화에 관련된 내용은 아래 링크를 참고하세요.&lt;/p&gt;

&lt;p&gt;리액트 성능 향상 시키기 - React.PureComponent : &lt;a href=&quot;https://wonism.github.io/react-pure-component/&quot;&gt;https://wonism.github.io/react-pure-component/&lt;/a&gt;     &lt;br /&gt;
Optimizing Performance : &lt;a href=&quot;https://reactjs.org/docs/optimizing-performance.html&quot;&gt;https://reactjs.org/docs/optimizing-performance.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;getderivedstatefrompropsnextprops-prevstate&quot;&gt;getDerivedStateFromProps(nextProps, prevState)&lt;/h2&gt;
&lt;p&gt;React v16.3이후 새로 생긴 메서드로 모든 render()메서드 실행 전에 시작됩니다.  &lt;br /&gt;
업데이트가 필요한 state값을 반환하거나 null을 반환해야 하고 본 메서드는 static 메서드로 Component에 직접 접근 할 수 없습니다. &lt;br /&gt;
레퍼런스 문서에는 getDerivedStateFromProps 메서드의 용도를 오직 props의 변화에 따른 state 상태 변화를 위한 용도로만 정의하고 있습니다.      &lt;br /&gt;
이를 위해 일부 개발자가 양산하는 아래와 같은 버그를 막는 용도로 설명하고 있으며 더 자세한 내용은 &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;You Probably Don’t Need Derived State&lt;/a&gt;에서 확인 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// Don't do this!&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 예제는 props값을 직접 참조함으로써 props값이 변할 때 마다 state에 영향을 미치길 바라지만 실제로는 변경되지 않습니다.   &lt;br /&gt;
하지만 아래와 같이 getDerivedStateFromProps 메서드를 이용하면 props값이 변경시마다 getDerivedStateFromProps 메서드를 호출하기 때문에 state값을 변경 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getDerivedStateFromProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;getsnapshotbeforeupdateprevprops-prevstate&quot;&gt;getSnapshotBeforeUpdate(prevProps, prevState)&lt;/h2&gt;
&lt;p&gt;React v16.3이후 새로 생긴 메서드로 render()메서드 호출 이후 DOM트리에 반영전에 호출 됩니다.  &lt;br /&gt;
특정 동작에 따른 Component의 변화가 적용 되기전에 이전 scroll position와 같은 이전 상태의 snapshot을 남겨 넘길수 있는데 이 때 리턴된 값은 componentDidUpdate() 메서드에 전달 됩니다. 재정의 하지 않을 경우 기본값은 null이 리턴됩니다.&lt;/p&gt;

&lt;p&gt;잘못 사용하는 케이스로 본 메서드에서 현재 렌더링된 DOM의 데이터를 읽어들이는 케이스가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getSnapshotBeforeUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용할 경우 render과정과 commit과정 사이의 딜레이가 존재하기 때문에 원하는 결과를 얻을수 없습니다. 본 메서드에서는 과거 상태만을 반환하고 componentDidUpdate()메서드에서 처리하는 것이 좋습니다.&lt;/p&gt;

&lt;h1 id=&quot;3-example&quot;&gt;3. Example&lt;/h1&gt;

&lt;p&gt;위 생명주기를 테스트 해 볼수 있는 샘플 코드입니다.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/jistol/0c8xr6ug/embed/js,html,css,result/dark/&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;4-그-외&quot;&gt;4. 그 외…&lt;/h1&gt;
&lt;p&gt;Error Handling : &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;https://reactjs.org/docs/error-boundaries.html&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(React) PropTypes 사용방법과 종류</title>
   <link href="https://jistol.github.io/frontend/2018/12/03/react-proptypes/"/>
   <updated>2018-12-03T00:00:00+00:00</updated>
   <id>https://jistol.github.io/frontend/2018/12/03/react-proptypes</id>
   <content type="html">&lt;p&gt;React Component의 prop값을 검증하기 위해 PropTypes를 이용하여 값을 지정할 수 있습니다. &lt;br /&gt;
React v15.5부터 다른 패키지로 변경되었는데 ‘prop-types’라이브러리를 사용하라고 권고하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;사용방법&quot;&gt;사용방법&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'prop-types'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strArg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            
    &lt;span class=&quot;na&quot;&gt;numArg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정할 경우 Foo 컴포넌트의 strArg값은 string 타입이여야 하며, numArg값은 number 타입이여야 합니다. &lt;br /&gt;
그리고 strArg값은 지정하지 않아도 되나 &lt;code class=&quot;highlighter-rouge&quot;&gt;isRequired&lt;/code&gt;를 지정한 numArg값은 반드시 설정해야 합니다.&lt;/p&gt;

&lt;p&gt;또한 propTypes은 아래와 같이 class 밖에서도 설정 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strArg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;proptypes의-종류&quot;&gt;PropTypes의 종류&lt;/h2&gt;
&lt;p&gt;PropTypes으로 설정할 수 있는 종류는 아래와 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;kind&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;array&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;배열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bool&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true/false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;func&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;함수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;number&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;숫자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;객체&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;symbol&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;심벌 개체(ES6)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;node&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;렌더링 가능한 모든것(number, string, element, 또는 그것들이 포함된 array/fragment)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;element&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;React element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;instanceOf(ClassName)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JS에서 instanceof로 정의 가능한 클래스 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;oneOf([…Value])&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;포함된 값들중 하나.(ex: oneOf([‘남자’,’여자’]))&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;oneOfType([…PropTypes])&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;포함된 PropTypes들중 하나. (ex: oneOfType([PropTypes.string, PropTypes.instanceOf(MyClass)]))&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;arrayOf(PropTypes)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;해당 PropTypes으로 구성된 배열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;objectOf(PropTypes)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;주어진 종류의 값을 가진 객체&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;shape({key:PropTypes})&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;해당 스키마를 가진 객체.(ex:shape({name:PropTypes.string,age:PropTypes.number}))&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;exact({key:PropTypes})&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;명확하게 해당 스키마만 존재해야함.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Typechecking With PropTypes:&lt;a href=&quot;https://reactjs.org/docs/typechecking-with-proptypes.html&quot;&gt;https://reactjs.org/docs/typechecking-with-proptypes.html&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SSM(simple-spring-memcached) MultiCache 사용하기 (@ReadThroughMultiCache, @UpdateMultiCache, @InvalidateMultiCache)</title>
   <link href="https://jistol.github.io/java/2018/11/27/ssm-annotation-multicache/"/>
   <updated>2018-11-27T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2018/11/27/ssm-annotation-multicache</id>
   <content type="html">&lt;p&gt;“Spring + Memcached” 조합일때 &lt;a href=&quot;https://github.com/ragnor/simple-spring-memcached&quot;&gt;simple-spring-memcached&lt;/a&gt;(이하 ssm)이 많이 사용되는데 인터넷에 보면 대부분 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughSingleCache&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughAssignCache&lt;/code&gt;에 대한 설명이나 예제는 많은데 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughMultiCache&lt;/code&gt;관련된 예제는 유독 찾아보기 힘들었습니다.  &lt;br /&gt;
심지어 공식 가이드에도 간략하게만 써있어서 실제 동작 방식에 대해 알아보기 위해 xmemcached기반으로 직접 테스트 프로젝트를 만들어보고 테스트 해본 내용에 대한 포스팅입니다.&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;
&lt;p&gt;아래 코드는 기본적인 사용 방법입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;인자값을 포함하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;를 상속한 클래스를 리턴하는 메소드에만 적용할 수 있습니다.  &lt;br /&gt;
위와 같이 적용시 ssm은 자동으로 인자값의 List와 결과값의 List를 매핑하여 분산하여 캐시키를 저장하게 됩니다.   &lt;br /&gt;
위 Java코드를 기반으로 실행시 인자값과 반환값이 아래와 같을 경우 실제 캐시에 저장되는 예시입니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; returnValue &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

stats cachedump &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;135&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; value &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; value &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;155&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; value &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;165&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; value &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;175&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; value &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughSingleCache&lt;/code&gt;의 경우 “1,2,3,4,5” 전체를 키 값으로 사용하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughMultiCache&lt;/code&gt;의 경우 List의 각 키 값을 분산 저장하고 재활용 합니다.  &lt;br /&gt;
위와 같이 캐시가 저장된 상태에서 다시 아래와 같이 실행할 경우 기존 캐시된 값은 그대로 사용하고 캐시가 없는 부분만 다시 캐시에 저장합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; returnValue &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

stats cachedump &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;135&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; use existing cache
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;155&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;165&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; use existing cache
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;175&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543323568&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;185&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543324016&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; cache
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;205&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543324016&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; cache
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새로 캐시를 저장하는 것이 아니기 때문에 expiration 설정을 했을 경우 1~5번 캐시는 동시에 삭제되고 6,8번 캐시는 이후 삭제됩니다.&lt;/p&gt;

&lt;p&gt;위 메서드를 디버깅해보면 애초에 인자값에 캐시 데이터가 없는 값만 추려 전달하는것을 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// execute 1 =&amp;gt; argument = List(1,2,3,4,5)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// nums = List(1,2,3,4,5)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// execute 2 =&amp;gt; argument = List(2,4,6,8)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// nums = List(6,8)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이미 캐싱 되 있는 값을 Update 하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@UpdateMultiCache&lt;/code&gt;를 이용 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@UpdateMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ParameterDataUpdateContent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ParameterDataUpdateContent&lt;/code&gt;어노테이션을 사용하여 저장할 값을 직접 주입할 수 있으며,&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReturnDataUpdateContent&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@UpdateMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ReturnDataUpdateContent&lt;/code&gt;어노테이션을 사용하여 반환값을 저장할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;캐시를 만료 시킬때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@InvalidateMultiCache&lt;/code&gt;어노테이션을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@InvalidateMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidateMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;caution---argument&quot;&gt;Caution - Argument&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughMultiCache&lt;/code&gt;는 반드시 하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt; 인자값을 포함해야합니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 인자값이 잘못됬을 경우 정상실행 되나 캐싱되지 않으며 아래와 같은 오류 메시지가 발생합니다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2018-11-27 22:13:46] [WARN ] c.g.c.s.a.CacheAdvice.warn[55] Caching on execution(XXXService.randomMulti(..)) aborted due to an error.
com.google.code.ssm.aop.support.InvalidAnnotationException: No one parameter objects found at dataIndexes [[0]] is not a [java.util.List]. [public java.util.List test.service.XXXService.randomMulti(java.lang.Integer)] does not fulfill the requirements.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;타입 대신 Array를 사용하더라도 동일한 오류를 발생시킵니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2018-11-27 22:16:23] [WARN ] c.g.c.s.a.CacheAdvice.warn[55] Caching on execution(XXXService.randomMulti(..)) aborted due to an error.
com.google.code.ssm.aop.support.InvalidAnnotationException: No one parameter objects found at dataIndexes [[0]] is not a [java.util.List]. [public java.util.List test.service.XXXService.randomMulti(java.lang.Integer[])] does not fulfill the requirements.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;타입 인자값이 2개 이상일 경우에도 오류를 발생시킵니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2018-11-27 22:19:18] [WARN ] c.g.c.s.a.CacheAdvice.warn[55] Caching on execution(XXXService.randomMulti(..)) aborted due to an error.
com.google.code.ssm.aop.support.InvalidAnnotationException: There are more than one method's parameter annotated by @ParameterValueKeyProvider that is list public java.util.List test.service.XXXService.randomMulti(java.util.List,java.util.List)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;타입 인자값이 1개라면 아래와 같이 다른 키 값이 추가 되더라도 정상적으로 캐시를 저장합니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; fixSize &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; multi &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

stats cachedump &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543325621&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543325621&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543325621&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;순서를 반대로 해도 정상적으로 저장합니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMulti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; multi &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; fixSize &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; 

stats cachedump &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543325799&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543325799&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
ITEM local&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;TMON&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;COMMON&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;randomMulti&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;; &lt;span class=&quot;m&quot;&gt;1543325799&lt;/span&gt; s&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;caution---return-data&quot;&gt;Caution - Return Data&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughMultiCache&lt;/code&gt;는 반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;타입의 반환값을 가져야합니다.&lt;/p&gt;

&lt;p&gt;반환값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.List&lt;/code&gt;이 아닐 경우 메소드 자체는 정상 동작하지만 아래와 같이 오류 메시지를 반환하며 캐시는 저장되지 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ReadThroughMultiCache&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randomMultiFindOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterValueKeyProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2018-11-27 22:30:32] [WARN ] c.g.c.s.a.CacheAdvice.warn[55] Caching on execution(XXXService.randomMultiFindOne(..)) aborted due to an error.
com.google.code.ssm.aop.support.InvalidAnnotationException: The annotation [com.google.code.ssm.api.ReadThroughMultiCache] is only valid on a method that returns a [java.util.List] or its subclass. [public java.lang.Integer test.service.XXXService.randomMultiFindOne(java.util.List)] does not fulfill this requirement.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인자값과 반환값을 쌍으로 캐시에 저장하기 때문에 인자값의 size와 반환값의 size는 동일해야 합니다.  &lt;br /&gt;
인자값보다 반환값의 size가 더 많거나 적을 경우 아래와 같은 오류 메시지를 남기고 캐시는 저장되지 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2018-11-27 22:38:24] [WARN ] c.g.c.s.a.ReadThroughMultiCacheAdvice.generateByKeysProviders[166] Did not receive a correlated amount of data from the target method: %s. Result list will be unsorted and won't respect the order of the keys passed in argument.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인자값과 반환값의 size가 같을 경우 캐시를 분할하여 저장하게 되는데 인자값과 반환값의 같은 index끼리 저장하게 되기 때문에 반환값의 순서가 중요합니다.  &lt;br /&gt;
순서가 다를 경우 오류도 없이 캐시가 엉망으로 저장될 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;SSM은 분명 편하게 “Spring + Memcached” 조합을 사용 할 수 있게 해주지만 간단한 만큼 인적오류로 인한 실수를 범할 수 있으며 오류 로그 역시 warn 레벨로 남기기 때문에 잘못을 인지하지 못하고 사용하는 경우가 많습니다.  &lt;br /&gt;
특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ReadThroughMultiCache&lt;/code&gt;의 경우 위에서 알아본 바와 같이 개발자가 실수할 수 있는 여지가 많기 때문에 더더욱 신중하게 사용해야 하지만 자동으로 분할하여 캐시를 저장하며 실행시 알아서 캐시되 있지 않은 값만 따로 실행해주기 때문에 분명 매력적인 부분이 존재합니다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(Spring) ImportAware is not work</title>
   <link href="https://jistol.github.io/java/2018/11/23/spring-importaware-not-work/"/>
   <updated>2018-11-23T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2018/11/23/spring-importaware-not-work</id>
   <content type="html">&lt;p&gt;ImportAware 구현체가 동작하지 않는 이슈가 발생해 구글링해보다가 해결이 되지 않아 직접 스프링 코어 소스를 까서 원인을 확인한 부분에 대해 기록한 글입니다.&lt;/p&gt;

&lt;h2 id=&quot;issue&quot;&gt;Issue&lt;/h2&gt;
&lt;p&gt;개발중인 모듈을 &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableXXX&lt;/code&gt; 방식으로 어노테이션 지정시 별도 설정없이 동작하기 위해 아래와 같은 Configuration을 Import 하도록 하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalCacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnableLocalCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalCacheConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImportAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;
 
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setImportMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;importMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;importMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnableLocalCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localCacheManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localCacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ImportAware.setImportMetadata 메소드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableLocalCache&lt;/code&gt; 여부를 파악하고 다른 bean이 생성되기전 BeanFactoryPostProcessor.postProcessBeanFactory 메소드를 통해 localCacheManager를 주입하여 다른 Bean 생성시 주입되는 localCacheManager Bean이 null이 되지 않게하는 처리 부분입니다.  &lt;br /&gt;
간단하게 테스트용 프로젝트를 만들고 위와 같이 실행시&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ImportAware.setImportMetadata&lt;/li&gt;
  &lt;li&gt;BeanFactoryPostProcessor.postProcessBeanFactory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 순서대로 동작함을 확인하고 개발을 진행하였습니다.&lt;/p&gt;

&lt;p&gt;모듈 개발을 완료하고 실 서비스에 적용하였는데 POC를 진행한 Spring 5.x 버전에서는 이상이 없었으나 Spring 4.x 버전에서는 ImportAware가 실행되지 않아 localCacheManager Bean을 등록하지 못하는 이슈가 발생하였습니다. (사실 이슈가 처음 발생했을때는 버전 문제라는 것 조차 인식하지 못한 상태이긴 합니다.)&lt;/p&gt;

&lt;h2 id=&quot;spring-context-refresh-주요-단계&quot;&gt;Spring Context refresh 주요 단계&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// AbstractApplicationContext.java&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Allows post-processing of the bean factory in context subclasses.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Invoke factory processors registered as beans in the context.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Register bean processors that intercept bean creation.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;registerBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Initialize message source for this context.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initMessageSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Initialize event multicaster for this context.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initApplicationEventMulticaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Initialize other special beans in specific context subclasses.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;onRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check for listener beans and register them.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;registerListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Instantiate all remaining (non-lazy-init) singletons.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Last step: publish corresponding event.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;finishRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring 기동시 context를 초기화 하는 과정의 일부입니다.   &lt;br /&gt;
BeanFactoryPostProcessor 구현시 두번째 단계인 invokeBeanFactoryPostProcessors메소드를 실행하게 되는데 이 과정에서 bean 생성에 필요한  BeanDefinition을 추가하거나 BeanFactory 생성 후 작업을 진행하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;spring-4x&quot;&gt;Spring 4.x&lt;/h2&gt;
&lt;p&gt;invokeBeanFactoryPostProcessors 메소드 실행과정에서 bean이 Singleton으로 생성되며 beanFactory에 저장되게 됩니다.  &lt;br /&gt;
PriorityOrdered를 구현하거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Order&lt;/code&gt;어노테이션이 추가되 있지 않다면 위 코드에서 beanFactory.getBean시 생성되어 beanFactory에 저장되게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// PostProcessorRegistrationDelegate.java&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Finally, invoke all other BeanFactoryPostProcessors.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanFactoryPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonOrderedPostProcessors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanFactoryPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postProcessorName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonOrderedPostProcessorNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;nonOrderedPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postProcessorName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanFactoryPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonOrderedPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bean 생성이후 BeanFactoryPostProcessor.postProcessBeanFactory 메소드를 실행한 후 invokeBeanFactoryPostProcessors 메소드 실행과정이 끝나며 이 때 ImportAware.setImportMetadata는 실행되지 않습니다.      &lt;br /&gt;
이 후 ImportAware.setImportMetadata 메소드가 실행되는 시점은 finishBeanFactoryInitialization 메소드에서 BeanDefinition중 생성되지 않은 bean에 대해 생성하면서 실행되게 되는데 이 때 BeanFactoryPostProcessor를 구현한 구현체는 이미 singleton으로 생성되었기 때문에 더 이상 실행되지 않고 끝나게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;spring-5x&quot;&gt;Spring 5.x&lt;/h2&gt;
&lt;p&gt;5.x 버전의 경우 똑같이 invokeBeanFactoryPostProcessors메소드 실행과정을 거치나  BeanDefinitionRegistryPostProcessor중 ConfigurationClassPostProcessor의 postProcessBeanFactory 동작시 차이가 생깁니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// PostProcessorRegistrationDelegate.java&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registryProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regularPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BeanFactoryPostProcessor만 구현한 구현체를 처리하기전 BeanDefinitionRegistryPostProcessor를 구현한 구현체를 먼저 처리하는 과정이 있는데 Spring에서 기본적으로 실행하는 구현체로 ConfigurationClassPostProcessor가 존재합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ConfigurationClassPostProcessor.java&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;identityHashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factoriesPostProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;postProcessBeanFactory already called on this post-processor against &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factoriesPostProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registriesPostProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// BeanDefinitionRegistryPostProcessor hook apparently not supported...&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Simply call processConfigurationClasses lazily at this point then.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;processConfigBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanDefinitionRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;enhanceConfigurationClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImportAwareBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 구현체의 먼저 실행하는 postProcessBeanFactory 메소드를 보면 마지막줄에 beanFactory에 ImportAwareBeanPostProcessor를 추가하는 부분이 있습니다.   &lt;br /&gt;
이로 인해 bean을 생성할때 ImportAwareBeanPostProcessor.postProcessBeforeInitialization이 실행되면서 ImportAware.setImportMetadata 메소드가 먼저 실행하게 되고 그 이후 BeanFactoryPostProcessor.postProcessBeanFactory 실행되게 됩니다.    &lt;br /&gt;
참고로 ConfigurationClassPostProcessor는 PriorityOrdered를 구현한 구현체로 실행순서는 최하위 입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ordered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LOWEST_PRECEDENCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// within PriorityOrdered&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그래서 BeanFactoryPostProcessor가 아닌 BeanDefinitionRegistryPostProcessor를 구현한 구현체와 함께 ImportAware를 사용할 경우 5.x 버전에서도 똑같이 동작하지 않게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;BeanFactoryPostProcessor는 bean을 생성하기 전 BeanFactory 초기화 이후 실행되며 ImportAware는 bean이 생성되는 시점에 실행되므로 일반적으로 실행시점은 ImportAware가 더 늦게 실행됩니다.&lt;/li&gt;
  &lt;li&gt;bean생성 이전 (또는 BeanFactoryPostProcessor실행 이전)에 로직을 실행하고 싶을 경우 ImportBeanDefinitaionRegistrar를 이용할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalCacheConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImportBeanDefinitionRegistrar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;importingClassMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;importingClassMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnableLocalCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;importingClassMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotationAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnableLocalCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localcache initialize error : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ConfigurationClassPostProcessor가 postProcessBeanDefinitionRegistry를 실행하면서 ImportBeanDefinitaionRegistrar구현체를 모두 실행해줍니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;POC진행은 꼭 같은버전에서 하세요 ㅠㅠㅠㅠㅠ&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>어노테이션 반복정의를 위한 @Repeatable 작성법과 주의점</title>
   <link href="https://jistol.github.io/java/2018/08/31/annotation-repeatable/"/>
   <updated>2018-08-31T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2018/08/31/annotation-repeatable</id>
   <content type="html">&lt;p&gt;개발시 어노테이션을 많이 이용하는 편인데 종종 하나의 클래스, 또는 메소드에 여러 속성을 정의하고 싶을때가 있습니다.  &lt;br /&gt;
JDK ~1.7 에서는 아래와 같은 방식으로 정의가 가능했습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// case 1&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@GreenColor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@BlueColor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RedColor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RGBColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// case 2&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RGBColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JDK 1.8부터는 같은 어노테이션을 중복정의 가능한 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Repeatable&lt;/code&gt; 어노테이션을 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;repeatable-tutorial&quot;&gt;@Repeatable Tutorial&lt;/h2&gt;
&lt;p&gt;JavaDoc에 정의된 정식 설명은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The annotation type java.lang.annotation.Repeatable is used to indicate that the annotation type whose declaration it (meta-)annotates is repeatable. The value of @Repeatable indicates the containing annotation type for the repeatable annotation type.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Repeatable&lt;/code&gt; 어노테이션을 이용하면 다음과 같이 정의가 가능해집니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RGBColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어노테이션을 정의하는 방법은 실 사용할 어노테이션과 그 어노테이션 묶음 값을 관리하는 컨테이너 어노테이션을 작성해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repeatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 정의시 아래와 같은 방법으로 해당 클래스에 정의된 어노테이션을 뽑아올 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;주의점&quot;&gt;주의점&lt;/h2&gt;
&lt;p&gt;위와 같이 설정된 상태에서 아래와 같이 클래스를 작성하게 될 경우 이슈가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnotationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Repeatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RGBColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreenColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeatableAnnotationTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RGBColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGBColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GreenColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GreenColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColorArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotationsByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColorArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotationsByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rgbColors : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rgbColorArray : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColorArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rgbColorArray.length : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgbColorArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbColorArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greenColors : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greenColorArray : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColorArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greenColorArray.length : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greenColorArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColorArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 코드를 돌려보면 결과는 아래와 같이 나옵니다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rgbColors : @com.tmoncorp.module.sduf.test.common.AnnotationTest$Colors(value=[@com.tmoncorp.module.sduf.test.common.AnnotationTest$Color(value=green), @com.tmoncorp.module.sduf.test.common.AnnotationTest$Color(value=blue), @com.tmoncorp.module.sduf.test.common.AnnotationTest$Color(value=red)])
rgbColorArray : [Lcom.tmoncorp.module.sduf.test.common.AnnotationTest$Color;@1996cd68
rgbColorArray.length : 3
greenColors : null
greenColorArray : [Lcom.tmoncorp.module.sduf.test.common.AnnotationTest$Color;@3339ad8e
greenColorArray.length : 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GreenColor&lt;/code&gt;의 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Color&lt;/code&gt;어노테이션이 1개만 정의되어 있어 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Colors&lt;/code&gt;로 묶이지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;getAnnotation&lt;/code&gt;로 가져올 경우 null을 반환하게 됩니다.  &lt;br /&gt;
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Color&lt;/code&gt;어노테이션이 1개만 정의되어 있을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Colors&lt;/code&gt;로 묶이지 않아 Retention Policy 정책이 생성되지 않으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;getAnnotationsByType&lt;/code&gt; 메소드 호출시 반환값이 0개가 됩니다.&lt;/p&gt;

&lt;p&gt;위와 같은 현상을 해결하기 위해서는 하위 어노테이션 정의시 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Retention&lt;/code&gt;을 정의해주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;getAnnotationsByType&lt;/code&gt;메소드를 이용하여 값을 찾으면 정확한 반환값을 찾을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Repeatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행하면 아래와 같이 값이 존재하는것을 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rgbColors : @com.tmoncorp.module.sduf.test.common.AnnotationTest$Colors(value=[@com.tmoncorp.module.sduf.test.common.AnnotationTest$Color(value=green), @com.tmoncorp.module.sduf.test.common.AnnotationTest$Color(value=blue), @com.tmoncorp.module.sduf.test.common.AnnotationTest$Color(value=red)])
rgbColorArray : [Lcom.tmoncorp.module.sduf.test.common.AnnotationTest$Color;@19e1023e
rgbColorArray.length : 3
greenColors : null
greenColorArray : [Lcom.tmoncorp.module.sduf.test.common.AnnotationTest$Color;@7cef4e59
greenColorArray.length : 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html&quot;&gt;Oracle JDK Doc - Annotation Type Repeatable&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://www.javabrahman.com/java-8/java-8-repeating-annotations-tutorial/&quot;&gt;Java 8 Repeating Annotations Tutorial using @Repeatable with examples&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Consistent Hashing과 Memecached를 이용한 테스트 샘플</title>
   <link href="https://jistol.github.io/software%20engineering/2018/07/07/consistent-hashing-sample/"/>
   <updated>2018-07-07T00:00:00+00:00</updated>
   <id>https://jistol.github.io/software%20engineering/2018/07/07/consistent-hashing-sample</id>
   <content type="html">&lt;h2 id=&quot;consistent-hashing-이란&quot;&gt;Consistent Hashing 이란?&lt;/h2&gt;
&lt;p&gt;웹 서버의 개수가 수시로 변경될 때 요청에 대해 분산하는 방법으로 Key의 집합을 K, 노드(또는 서버)의 크기를 N라고 했을 때, N의 갯수가 바뀌더라도 대부분의 키들이 노드를 그대로 사용할 수 있습니다.  &lt;br /&gt;
예를 들어 10000개의 key값을 5개의 노드에 분산할 경우 2000개씩 나뉘는데 개중 하나의 노드가 죽더라도 전체를 재 분배하는 것이 아니라 2000개의 key에 대해서만 재분배 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/1.png&quot; alt=&quot;Consistent Hashing Node Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 일반 Hash를 이용하여 노드를 분산할 경우 아래 그림과 같은 방식으로 접근 할 수 있습니다.  &lt;br /&gt;
3으로 나눈 나머지 값을 이용하여 3개 노드중 하나를 접근하도록 설정 할 수 있는데 이런 방식의 경우 하나의 노드가 죽었을 경우 모든 key값에 대해 다시 연산해야하는 문제가 생깁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/2.png&quot; alt=&quot;Compare Hash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Consistent Hashing의 경우 각 노드를 링의 개념으로 연결하여 각 key가 포함되어야 하는 특정 구간을 결정하게 됩니다.   &lt;br /&gt;
이 과정에서 하나의 노드가 죽는다 하여도 해당 노드에 속한 Key값은 다음 구간을 담당하는 노드에서 처리하게 되므로 나머지 노드의 key를 재분배 하지 않아도 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/3.png&quot; alt=&quot;Compare Consistent Hashing&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;example-hashring&quot;&gt;Example: HashRing&lt;/h2&gt;
&lt;p&gt;위에서 설명한 링의 개념에 대해 실제 key에 따라 어떻게 노드를 결정하는지 아래와 같이 예시를 만들어보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;분배규칙--a--1-b--3-c--5-d--7&quot;&gt;분배규칙 : A &amp;lt; 1, B &amp;lt; 3, C &amp;lt; 5, D &amp;lt; 7&lt;/h2&gt;

&lt;p&gt;다음과 같은 규칙일 때   &lt;br /&gt;
맨 처음 ‘key=1’이 인입 될 경우 아래와 같이 위치 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/4.png&quot; alt=&quot;Example 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 ‘key=4’가 인입되면 아래와 같이 위치 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/5.png&quot; alt=&quot;Example 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 외 여러 key값이 인입하게 되어 아래와 같은 상황이 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/6.png&quot; alt=&quot;Example 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때 노드 B가 죽고 ‘key=1’이 유실됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/7.png&quot; alt=&quot;Example 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;노드 B가 죽은 상태에서 ‘key=1’이 다시 인입되면 B의 다음 구간인 C에 포함되게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/8.png&quot; alt=&quot;Example 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 특정 노드가 죽더라도 전체 key를 재분배 하지 않게 됩니다.  &lt;br /&gt;
하지만 Hashring에도 문제가 있는데 아래와 같이 노드 B가 되살아나고&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/9.png&quot; alt=&quot;Example 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;노드 B가 되살아난 상태에서 다시 ‘key=1’가 인입되면 아래 그림과 같이 중복된 key와 value가 존재하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/10.png&quot; alt=&quot;Example 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 상황에서 다시 노드 B가 죽을 경우 노드 C에 있던 이전 값이 노출 될 수 있는 문제가 있는데 memcached의 경우 만료시간을 설정하여 해결 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;가상노드&quot;&gt;가상노드&lt;/h2&gt;
&lt;p&gt;특정 노드가 죽으면 해당 key가 모두 다른 노드에 분배되는데 위 예제에서 보면 노드 B가 죽을 경우 노드 C에 key가 몰리는 것처 보이지만 사실상 아래 그림과 같이 각 노드는 가상의 노드를 여러개 만들어 노드가 죽었을때도 균등하게 분배되도록 처리합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/consistent-hashing-sample/11.png&quot; alt=&quot;vituralnodes&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;memcached-샘플파일&quot;&gt;Memcached 샘플파일&lt;/h2&gt;
&lt;p&gt;위 이론을 바탕으로 실제 Memcached를 이용하여 Consistent Hashing이 어떻게 동작하는지 확인 할 수 있는 샘플 프로젝트입니다.&lt;br /&gt;
Key에 대한 분배및 Proxy 역활은 소스에 포함되어 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple-Spring-Memcached(ssm)&lt;/code&gt;에서 담당하게되며 git을 설치 후 clone 명령을 이용하여 다운받을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;github&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/jistol/&lt;/span&gt;docker&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;compose&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;memcached&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;multi&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;test&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;sample&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;구성&quot;&gt;구성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Gradle&lt;/li&gt;
  &lt;li&gt;Spring Boot&lt;/li&gt;
  &lt;li&gt;Google Simple Spring Memcached (SSM)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memcached-실행&quot;&gt;Memcached 실행&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Docker 설치&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Memcached Image 다운로드
    &lt;ul&gt;
      &lt;li&gt;docker pull memcached&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker-compose를 이용하여 실행
    &lt;ul&gt;
      &lt;li&gt;${PROJECT_HOME}/docker-compose up -d&lt;/li&gt;
      &lt;li&gt;위와 같이 실행하면 아래와 같이 3개의 포트로 memcached 서버가 기동됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;compose &lt;span class=&quot;k&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt;    
Creating network &lt;span class=&quot;s2&quot;&gt;&quot;memcached_default&quot;&lt;/span&gt; with the default driver    
Creating memcached_memcached3_1 &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; done    
Creating memcached_memcached1_1 &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; done    
Creating memcached_memcached2_1 &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; done    
$ docker &lt;span class=&quot;k&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;    
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                      NAMES     
&lt;span class=&quot;m&quot;&gt;8158&lt;/span&gt;e741dacb        memcached           &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; seconds ago      Up &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; seconds               &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11212&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11211&lt;/span&gt;/tcp   memcached_memcached2_1    
&lt;span class=&quot;m&quot;&gt;2627&lt;/span&gt;e168914e        memcached           &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; seconds ago      Up &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; seconds                &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11211&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11211&lt;/span&gt;/tcp   memcached_memcached1_1    
&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;c6daf4fc275        memcached           &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; seconds ago      Up &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; seconds                &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11213&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;11211&lt;/span&gt;/tcp   memcached_memcached3_1    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;p&gt;아래와 같이 2가지 테스트를 할 수 있도록 구성되어 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;was-1--memcached-3--consistent-hashing-테스트&quot;&gt;WAS 1 + Memcached 3 : Consistent Hashing 테스트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;gradle 명령을 이용하여 Tomcat 기동합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle clean build &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt; bootRun    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;아래 URL을 통해 캐시를 주입합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST : http://localhost:8080/{key}/{value}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;telnet으로 Memcached에 접속, 값이 들어갔는지 확인합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ telnet localhost &lt;span class=&quot;m&quot;&gt;11211&lt;/span&gt;
Trying &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
Connected &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; localhost&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
Escape character &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
get &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


$ telnet localhost &lt;span class=&quot;m&quot;&gt;11212&lt;/span&gt;
Trying &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
Connected &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; localhost&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
Escape character &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
get &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

$ telnet localhost &lt;span class=&quot;m&quot;&gt;11213&lt;/span&gt;
Trying &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
Connected &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; localhost&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
Escape character &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
get &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 과정을 반복하면 입력한 KEY값이 동일한 노드의 Memcached에 들어가는것을 볼 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;was-3--memcached-3--서버등록-순서-오류에-의한-키배분-오류-테스트&quot;&gt;WAS 3 + Memcached 3 : 서버등록 순서 오류에 의한 키배분 오류 테스트&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resource/application.yml&lt;/code&gt; 파일을 보면 아래와 같이 각 profiles마다 다르게 서버 순서를 나열해 두었습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;server.port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mem-server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:11211 localhost:11212 localhost:11213&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring.profiles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;server.port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8081&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mem-server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:11212 localhost:11213 localhost:11211&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring.profiles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;server.port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8082&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mem-server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:11213 localhost:11211 localhost:11212&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 같이 설정시 인입된 서버 port에 따라 동일한 key에 대해 ssm이 다르게 분배하는 것을 확인 하는 테스트입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gradle 명령을 이용하여 각 profile별로 Tomcat 3대를 기동합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle clean build &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt; bootRun    
$ gradle clean build &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt; bootRun &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Dspring&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;profiles&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;active&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;local1   
$ gradle clean build &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt; bootRun &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Dspring&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;profiles&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;active&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;local2   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;아래 URL을 통해 캐시를 주입합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST : http://localhost:8080/{key}/{value}
POST : http://localhost:8081/{key}/{value}
POST : http://localhost:8082/{key}/{value}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;telnet으로 Memcached에 접속, 값이 들어갔는지 확인합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ telnet localhost &lt;span class=&quot;m&quot;&gt;11211&lt;/span&gt;
Trying &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
Connected &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; localhost&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
Escape character &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
get &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


$ telnet localhost &lt;span class=&quot;m&quot;&gt;11212&lt;/span&gt;
Trying &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
Connected &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; localhost&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
Escape character &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
get &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

$ telnet localhost &lt;span class=&quot;m&quot;&gt;11213&lt;/span&gt;
Trying &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
Connected &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; localhost&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
Escape character &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
get &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 과정을 반복하면 동일한 key를 넣더라도 어느 port에 접근하여 넣었느냐에 따라 위치가 뒤 섞여있는 것을 확인할 수 있습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Observer 패턴과 Publisher/Subscriber(Pub-Sub) 패턴의 차이점</title>
   <link href="https://jistol.github.io/software%20engineering/2018/04/11/observer-pubsub-pattern/"/>
   <updated>2018-04-11T00:00:00+00:00</updated>
   <id>https://jistol.github.io/software%20engineering/2018/04/11/observer-pubsub-pattern</id>
   <content type="html">&lt;p&gt;본 글은 &lt;a href=&quot;https://www.youtube.com/watch?v=8fenTR3KOJo&quot;&gt;토비의 봄 TV 5회 스프링 리액티브 프로그래밍 (1) - Reactive Streams&lt;/a&gt; 영상을 보던 중 “Observer패턴과 Pub-Sub패턴의 차이”에 대한 얘기가 나와 궁금해 찾아 본 자료를 정리한 문서입니다.  &lt;br /&gt;
“Head First Design Patterns” 책에는  &lt;code class=&quot;highlighter-rouge&quot;&gt;Obaserver Pattern == Pub-Sub Pattern&lt;/code&gt;으로 나와 있지만 실제 찾아보면 비슷한 개념 사이에 확연한 차이점이 존재합니다.&lt;/p&gt;

&lt;p&gt;가장 큰 차이점은 중간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Message Broker&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Event Bus&lt;/code&gt;가 존재하는지 여부입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/softwareengineering/observer-pubsub-pattern/1.png&quot; alt=&quot;Pattern Notification&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;observer패턴은-observer와-subject가-서로를-인지하지만-pub-sub패턴의-경우-서로를-전혀-몰라도-상관없습니다&quot;&gt;Observer패턴은 Observer와 Subject가 서로를 인지하지만 Pub-Sub패턴의 경우 서로를 전혀 몰라도 상관없습니다.&lt;/h2&gt;
&lt;p&gt;Observer패턴의 경우 Subject에 Observer를 등록하고 Subject가 직접 Observer에 직접 알려주어야 합니다.&lt;/p&gt;

&lt;p&gt;Pub-Sub패턴의 경우 Publisher가 Subscriber의 위치나 존재를 알 필요없이 Message Queue와 같은 Broker역활을 하는 중간지점에 메시지를 던져 놓기만 하면 됩니다.  &lt;br /&gt;
반대로 Subscriber 역시 Publisher의 위치나 존재를 알 필요없이 Broker에 할당된 작업만 모니터링하다 할당 받아 작업하면 되기 때문에 Publisher와 Subscriber가 서로 알 필요가 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;observer패턴에-비해-pub-sub패턴이-더-결합도가-낮습니다loose-coupling&quot;&gt;Observer패턴에 비해 Pub-Sub패턴이 더 결합도가 낮습니다.(Loose Coupling)##&lt;/h2&gt;
&lt;p&gt;Publisher와 Subscriber가 서로의 존재를 알 필요가 없기 때문에 당연히 소스코드 역시 겹치거나 의존할 일이 없습니다.  &lt;br /&gt;
만약 결합도가 높다면 의도하거나 잘못된 코딩일 가능성이 큽니다.&lt;/p&gt;

&lt;h2 id=&quot;observer패턴은-대부분-동기synchronous-방식으로-동작하나-pub-sub패턴은-대부분-비동기asynchronous-방식으로-동작합니다&quot;&gt;Observer패턴은 대부분 동기(synchronous) 방식으로 동작하나 Pub-Sub패턴은 대부분 비동기(asynchronous) 방식으로 동작합니다.##&lt;/h2&gt;
&lt;p&gt;이유는 Broker로 MessageQueue를 많이 사용하기 때문입니다.&lt;/p&gt;

&lt;h2 id=&quot;observer패턴은-단일-도메인-하에서-구현되어야-하나-pub-sub패턴은-크로스-도메인-상황에서도-구현-가능합니다&quot;&gt;Observer패턴은 단일 도메인 하에서 구현되어야 하나 Pub-Sub패턴은 크로스 도메인 상황에서도 구현 가능합니다.&lt;/h2&gt;
&lt;p&gt;이 역시 Broker라는 중간 매개체가 있기 때문인데 어플리케이션의 도메인이 다르더라도 MessageQueue(Broker)에 접근만 가능하다면 처리가 가능하기 때문입니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;Observer vs Pub-Sub pattern : &lt;a href=&quot;https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c&quot;&gt;https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>HTML5(video) + Spring Boot(Tomcat)로 동영상 재생하기</title>
   <link href="https://jistol.github.io/java/2018/04/04/springboot-video-streaming/"/>
   <updated>2018-04-04T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2018/04/04/springboot-video-streaming</id>
   <content type="html">&lt;p&gt;HTML5의 video태그를 이용하여 파일 재생시 SpringBoot 에서 어떻게 설정해야하는지 간단한 방법이 있어 정리합니다.&lt;/p&gt;

&lt;h2 id=&quot;샘플소스&quot;&gt;샘플소스&lt;/h2&gt;

&lt;p&gt;기존 다른 방식들은 response에 파일을 직접 쓰도록 로직에 모두 구현을 했어야 하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamingResponseBody&lt;/code&gt;를 이용하여 아래와 같이 간단해집니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${FILE_DIR}/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/download&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamingResponseBody&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fileName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;readAndWrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readAndWrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HTML 소스에서는 아래와 같이 호출합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/download?fileName=test.mp4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        not use video
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;원리&quot;&gt;원리&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;위 방식은 Progressive Download방식으로 서버에서는 요청시마다 전체 파일을 보내주고 video 태그에서는 점진적으로 필요한 만큼씩 OutputStream에서 읽어가게 됩니다.  &lt;br /&gt;
실제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;readAndWrite&lt;/code&gt; 메소드의 while구문에서 로그를 찍어보면 동영상을 재생하지 않을 경우 write를 중간에 멈춰 있는 것을 볼 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StreamingResponseBody&lt;/code&gt; 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskExecutor&lt;/code&gt;을 이용하여 비동기 서블릿 실행을 지원해줍니다. Spring API 문서를 보면 아래와 같이 설명이 되어 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A controller method return value type for asynchronous request processing where the application can write directly to the response OutputStream without holding up the Servlet container thread.
Note: when using this option it is highly recommended to configure explicitly the TaskExecutor used in Spring MVC for executing asynchronous requests. Both the MVC Java config and the MVC namespaces provide options to configure asynchronous handling. If not using those, an application can set the taskExecutor property of RequestMappingHandlerAdapter.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;비동기이긴 하나 논블락킹은 아니기 때문에 별도 Thread를 계속 점유하고 있는 문제가 있습니다.&lt;/li&gt;
  &lt;li&gt;동영상 플레이를 하지 않고 대기시 async timeout 설정을 별도로 하지 않으면 중간에 연결이 끊겨버리며 &lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_PENDING&lt;/code&gt;에러를 발생시킵니다. 또한 video태그는 다시 동영상을 재생하기 위해 같은 URL을 또 호출하게 되고 서버는 처음부터 다시 파일을 보내게 됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;Streaming 기술 이해 : &lt;a href=&quot;http://linuxism.tistory.com/1267&quot;&gt;http://linuxism.tistory.com/1267&lt;/a&gt;   &lt;br /&gt;
Spring API (StreamingResponseBody): &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBody.html&quot;&gt;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBody.html&lt;/a&gt;      &lt;br /&gt;
Itube - Spring Boot Streaming Response Body : &lt;a href=&quot;https://github.com/shazin/itube&quot;&gt;https://github.com/shazin/itube&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>거버넌스(Governance) 모델 정리</title>
   <link href="https://jistol.github.io/architecture/2018/03/19/governance-model/"/>
   <updated>2018-03-19T00:00:00+00:00</updated>
   <id>https://jistol.github.io/architecture/2018/03/19/governance-model</id>
   <content type="html">&lt;p&gt;조대협님의 “대용량 아키텍처와 성능 튜닝”중 거버넌스 모델을 공부하고 생각을 정리하는 차원에서 요약해봅니다. &lt;br /&gt;
정확한 정보및 개념은 “대용량 웹서비스를 위한 마이크로 서비스 아키텍쳐의 이해:&lt;a href=&quot;http://bcho.tistory.com/948&quot;&gt;http://bcho.tistory.com/948&lt;/a&gt;” 를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;거버넌스governance란&quot;&gt;거버넌스(Governance)란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;시스템을 개발하는 조직구조 / 프로세스를 정의한 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;중앙-집중형-거버넌스-모델&quot;&gt;중앙 집중형 거버넌스 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;중앙에서 표준 프로세스 및 규약, 정책을 내려줌.&lt;/li&gt;
  &lt;li&gt;모두 동일하게 개발하기 때문에 유지보수 편함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;분산형-거버넌스-모델&quot;&gt;분산형 거버넌스 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;각 서비스에서 자체 규약으로 개발.&lt;/li&gt;
  &lt;li&gt;표준 API만 외부로 노출.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;분산형 거버넌스 모델을 수행하기 위한 팀구조의 특징은 아래와 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;cross-functional-team&quot;&gt;Cross functional team&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;필요한 모든 역활의 인원을 한 팀으로 묶음.&lt;/li&gt;
  &lt;li&gt;타팀에 대한 의존성이 낮아지기 때문에 빠름 개발 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;devops&quot;&gt;DevOps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개발 + 운영&lt;/li&gt;
  &lt;li&gt;피드백에 따른 서비스 개선&lt;/li&gt;
  &lt;li&gt;인프라까지 조절할 수 있어 개선에 따른 저항은 줄어들었으나 난이도는 높아짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;projectx-producto&quot;&gt;Project(X), Product(O)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트별로 팀원 투입이 아닌 프로덕트별 구성.&lt;/li&gt;
  &lt;li&gt;팀원이 해당 프로덕트에 영속됨으로써 지속적인 서비스 개선과 재교육에 대한 비용을 줄임.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 모든 조건이 가능해지면 자체적으로 기획/개발/운영이 가능해지는 &lt;strong&gt;Self-oranized team 모델&lt;/strong&gt;이 됨.&lt;/p&gt;

&lt;h2 id=&quot;주의점--alignment&quot;&gt;주의점 : Alignment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;팀 간의 수준 격차를 맞춰야 함 : 특정 서비스는 개발속도를 못따라옴&lt;/li&gt;
  &lt;li&gt;최소한의 표준이 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;MSA를 실현하기 위한 조직 구조로 &lt;strong&gt;분산형 거버넌스 모델&lt;/strong&gt;운영에 대해 가이드를 하신것 같습니다.  &lt;br /&gt;
빠른 서비스 개발및 런칭을 위한 것이 &lt;strong&gt;cross functional team&lt;/strong&gt;인 것 같고, 그 이후 지속적인 개선과 운영을 위한 조직으로 &lt;strong&gt;devops&lt;/strong&gt;를,   &lt;br /&gt;
이를 효과적으로 운영하기 위해 팀원을 Project가 아닌 Product별로 배치하도록 하며, 주의점으로 팀간 수준을 맞추거나 최소한의 표준정책등을 지정하여 효율적인 운영을 할 수 있다고 요약하면 될 것 같습니다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>SpringBoot + ES6 + React 기반 보일러플레이트 소스</title>
   <link href="https://jistol.github.io/frontend/2018/03/19/boilerplate-boot-es6-react/"/>
   <updated>2018-03-19T00:00:00+00:00</updated>
   <id>https://jistol.github.io/frontend/2018/03/19/boilerplate-boot-es6-react</id>
   <content type="html">&lt;p&gt;SpringBoot/ES6/React 기반으로 개발시 기반 소스로 바로 사용할 수 있는 보일러플레이트입니다.  &lt;br /&gt;
해당 소스에는 간단한 React 샘플이 포함되어 있습니다.&lt;/p&gt;

&lt;p&gt;소스를 직접 확인하고 싶으시면 다음 주소에서 확인하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;GitHub URL : &lt;a href=&quot;https://github.com/jistol/boilerplate-boot-es6&quot;&gt;https://github.com/jistol/boilerplate-boot-es6&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;specification&quot;&gt;Specification&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Backend
    &lt;ul&gt;
      &lt;li&gt;SpringBoot 2.0.0.RELEASE (Spring MVC, Embedded Tomcat, Thymeleaf)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Frontend Builder
    &lt;ul&gt;
      &lt;li&gt;Package manager : npm&lt;/li&gt;
      &lt;li&gt;Bundler : webpack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ES6 Package
    &lt;ul&gt;
      &lt;li&gt;babel&lt;/li&gt;
      &lt;li&gt;react&lt;/li&gt;
      &lt;li&gt;jquery&lt;/li&gt;
      &lt;li&gt;bootstrap&lt;/li&gt;
      &lt;li&gt;sass&lt;/li&gt;
      &lt;li&gt;webpack-dev-server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setup--run&quot;&gt;Setup &amp;amp; Run&lt;/h2&gt;
&lt;h3 id=&quot;git-설치-및-소스-다운로드&quot;&gt;Git 설치 및 소스 다운로드&lt;/h3&gt;

&lt;p&gt;Git 설치주소 : &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;소스 다운로드&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/jistol/boilerplate-boot-es6.git&quot;&lt;/span&gt; boilerplate&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;boot&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;es6&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;npm-설치-및-초기화&quot;&gt;npm 설치 및 초기화&lt;/h3&gt;
&lt;p&gt;npm은 Node.js를 설치시 같이 설치 가능합니다.&lt;/p&gt;

&lt;p&gt;Node.js 설치주소 : &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치 후 ROOT폴더에서 아래 명령어를 통해 초기화를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 폴더가 생기면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;에 포함된 라이브러리들이 다운로드 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;backend-서버-실행&quot;&gt;Backend 서버 실행&lt;/h3&gt;
&lt;p&gt;Gradle 빌드를 통해 WAR파일을 생성하여 직접 실행 가능하나 SpringBoot를 실행 할 수 있는 Gradle Task 명령으로 실행하여 서버를 기동할 수 있습니다.  &lt;br /&gt;
Gradle Wrapper가 소스에 포함되어 있으므로 별도의 설치 과정없이 아래와 같이 실행 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버는 기본적으로 8080 포트로 접근 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;es6-소스-변환-및-frontend-dev서버-실행&quot;&gt;ES6 소스 변환 및 Frontend Dev서버 실행&lt;/h3&gt;
&lt;p&gt;일반적으로 ES6를 지원하는 브라우저에서 실행하거나 babel을 통해 호환 가능한 소스로 빌드 후 실행할 수 있는데, 본 소스는 후자의 케이스로 실행하도록 샘플이 작성되어 있습니다.  &lt;br /&gt;
변환은 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;에 npm 명령을 통해 실행 할 수 있도록 정의되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm run build-js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;build-js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./node_modules/.bin/webpack --config webpack.config.babel.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NODE_ENV='local' ./node_modules/.bin/webpack-dev-server&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변환 실행은 아래와 같이 실행가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 빠른 개발을 위해 변경사항을 바로 반영하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;를 실행 할 수 있습니다.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;에 대한 정의는 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.babel.js&lt;/code&gt; 파일의 아래 부분에서 확인 가능하며 NODE_ENV 값이 ‘local’ 일 경우에만 동작하도록 설정되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`localhost`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`http`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;devPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;proxyPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;demoEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;demoEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;devtool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'inline-source-map'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;devServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;historyApiFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;devPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;!/dist/js/**&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;changeOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`react-hot-loader/patch`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`webpack-dev-server/client?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;devPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'webpack/hot/only-dev-server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래 명령을 통해 실행 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;를 사용하기 위해서는 8090 포트로 접근하여야 합니다.&lt;/p&gt;

&lt;p&gt;서버 기동후 아래 URL로 접속하면 index 페이지를 볼 수 있으며 링크 클릭시 간단한 React 샘플 예제를 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;URL : &lt;a href=&quot;http://localhost:8090&quot;&gt;http://localhost:8090&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/boilerplate-boot-es6-react/1.png&quot; alt=&quot;index page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/boilerplate-boot-es6-react/2.png&quot; alt=&quot;react sample&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Spring MVC 생명주기</title>
   <link href="https://jistol.github.io/java/2018/03/17/spring-mvc-structure/"/>
   <updated>2018-03-17T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2018/03/17/spring-mvc-structure</id>
   <content type="html">&lt;p&gt;Spring 처음 접할때 공부하고 정형화된 틀 안에서 쓰다보니 어떤 구조로 동작하는지 잊고 쓰다가 한 번 소스까서 보면서 정리해봅니다.
특히 정말 SpringBoot 기반으로 개발을 하니깐 DispatchServlet 조차 처음 보는것 같더군요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-mvc-structure/1.png&quot; alt=&quot;MVC Structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다른 웹페이지 자료들을 보면 좀 모양새가 다른데 소스 기준으로 정리하다보니 이런 구조로 그렸네요.&lt;/p&gt;

&lt;h2 id=&quot;요청-순서&quot;&gt;요청 순서&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;요청받은 Request로부터 실행할 Controller 추출을 위해 HandlerMapping 을 통해 실행할 Handler및 Interceptor를 전달&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interceptor의 preHandle을 실행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HandlerAdapter에 Handler를 전달하여 해당 Controller의 Argument매핑및 Method Invoke 실행하고 결과를 ModelAndView 형태로 반환&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interceptor의 postHandle을 실행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resolver를 통해 실제 보여줄 View를 렌더링하여 Response에 Write&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interceptor의 afterCompletion 을 실행&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Git Branch remove/delete (local/origin)</title>
   <link href="https://jistol.github.io/vcs/2018/02/05/git-branch-delete/"/>
   <updated>2018-02-05T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2018/02/05/git-branch-delete</id>
   <content type="html">&lt;p&gt;Local환경과 Remote환경의 Branch를 삭제하는 방법입니다.&lt;/p&gt;

&lt;h2 id=&quot;local-branch-remove&quot;&gt;Local Branch Remove&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;$ git branch -d [branch_name]&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt; feature&lt;span class=&quot;m&quot;&gt;-47&lt;/span&gt;
Deleted branch feature&lt;span class=&quot;m&quot;&gt;-47&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;was &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;b6cd3b&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;remote-branch-remove&quot;&gt;Remote Branch Remove&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;$ git push -d [remote_name] [branch_nane]&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt; origin feature&lt;span class=&quot;m&quot;&gt;-54&lt;/span&gt;
To https&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;xxxx&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;xxxx&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;xxx&lt;span class=&quot;sr&quot;&gt;/v1/&lt;/span&gt;repos/xxxxx
 &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;deleted&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         feature&lt;span class=&quot;m&quot;&gt;-54&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;How do I delete a Git branch both locally and remotely? : &lt;a href=&quot;https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely&quot;&gt;https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Tag</title>
   <link href="https://jistol.github.io/vcs/2018/02/01/git-tag/"/>
   <updated>2018-02-01T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2018/02/01/git-tag</id>
   <content type="html">&lt;p&gt;git에서 tagging하는 방법에 대해 간단하게 정리합니다.&lt;/p&gt;

&lt;h2 id=&quot;태그-생성&quot;&gt;태그 생성&lt;/h2&gt;

&lt;p&gt;형식 : git tag [태그이름]&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag v1&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;태그-조회&quot;&gt;태그 조회&lt;/h2&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;
v1&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;태그-삭제&quot;&gt;태그 삭제&lt;/h2&gt;

&lt;p&gt;형식 : git tag [태그이름]&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt; v1&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;태그-공유&quot;&gt;태그 공유&lt;/h2&gt;

&lt;p&gt;형식 : git push [Remote명] [태그이름]&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git push origin v1&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;Git의 기초 - 태그 : &lt;a href=&quot;https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%ED%83%9C%EA%B7%B8&quot;&gt;https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%ED%83%9C%EA%B7%B8&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Docker Redmine + Mysql 설치 및 Plugin 설치하기</title>
   <link href="https://jistol.github.io/its/2018/01/25/redmine-mysql-in-docker/"/>
   <updated>2018-01-25T00:00:00+00:00</updated>
   <id>https://jistol.github.io/its/2018/01/25/redmine-mysql-in-docker</id>
   <content type="html">&lt;p&gt;ITS로 Redmine을 사용하려 간단히 세팅해보려 Docker기반으로 설정해보았습니다.   &lt;br /&gt;
DockerHub에 있는 &lt;a href=&quot;https://hub.docker.com/_/redmine/&quot;&gt;library/redmine - Docker Hub&lt;/a&gt;를 이용하고 DB는 Mysql을 사용하도록 세팅하는 과정을 적었습니다.&lt;/p&gt;
&lt;h3 id=&quot;과정을-정리하긴-하였지만-bundler-오류가-발생하면-container가-다운되고-다시-올라오지-못하는-현상이-종종-발생하오니-백업을-잘-하시기-바랍니다&quot;&gt;과정을 정리하긴 하였지만 bundler 오류가 발생하면 Container가 다운되고 다시 올라오지 못하는 현상이 종종 발생하오니 백업을 잘 하시기 바랍니다.&lt;/h3&gt;

&lt;h2 id=&quot;docker-생성&quot;&gt;docker 생성&lt;/h2&gt;
&lt;p&gt;Link : &lt;a href=&quot;https://hub.docker.com/_/redmine/&quot;&gt;https://hub.docker.com/_/redmine/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 image를 다운 받습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull redmine mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매번 docker run을 작성하기도 귀찮고 redmine / mysql 컨테이너를 각각 올리기 귀찮기 때문에 docker-compose를 이용하여 만들도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.1'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;redmine&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redmine&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redmine&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000:3000&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;REDMINE_DB_MYSQL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;REDMINE_DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redmine&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;REDMINE_DB_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redmine&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;REDMINE_DB_ENCODING&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;utf8&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#               REDMINE_NO_DB_MIGRATE: true&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3306:3306&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redmine&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redmine&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--character-set-server=utf8mb4&lt;/span&gt;
               &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--collation-server=utf8mb4_unicode_ci&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추후 외부에서 접근하여 DB를 export하기 위한 용도로 3306포트를 열어두었으며 DATABASE 인코딩을 UTF-8로 사용하기 위해 추가 command 설정으르 하였습니다.  &lt;br /&gt;
restart=always로 설정한 이유는 redmine보다 db가 먼저 뜰 경우 redmine이 죽어버리기 때문에 db가 정상으로 올라올떄까지 재시도하도록 하였습니다.  &lt;br /&gt;
위와 같이 파일을 만든후 docker-compose명령어를 이용하여 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;compose &lt;span class=&quot;k&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정상 실행되면 아래와 같이 프로세스가 실행되는 것을 확인가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker &lt;span class=&quot;k&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
 CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
 e6491c0d5747        mysql               &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint...&quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; minutes ago      Up &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; minutes       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3306&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3306&lt;/span&gt;/tcp   redmine_db_1
 &lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;eb215b34af        redmine             &lt;span class=&quot;s2&quot;&gt;&quot;/docker-entrypoin...&quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; minutes ago      Up &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; minutes       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;/tcp   redmine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;redmine-플러그인-설치&quot;&gt;Redmine 플러그인 설치&lt;/h2&gt;
&lt;p&gt;ITS기능을 하기에 기본 Redmine은 좀 불편한 면이 있기 때문에 몇몇 플러그인을 설치해보록 하겠습니다.(무료만…)&lt;/p&gt;

&lt;p&gt;설치과정에서 컨테이너 내부에 접속해 command를 날려야 합니다. 컨테이너에 접속하는 방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker exec &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;it redmine bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;플러그인을 설치하기 앞서 사전에 필요한 모듈들을 설치하도록 합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ apt&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;get &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ apt&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;get install &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;y&lt;/span&gt; unzip &lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Redmine 플러그인 설치 가이드는 &lt;a href=&quot;http://www.redmine.org/projects/redmine/wiki/Plugins&quot;&gt;Redmine - Plugins&lt;/a&gt;를 참고하시면 됩니다.  &lt;br /&gt;
각 플러그인 설치후 Redmine을 재시작해야 반영됩니다.&lt;/p&gt;

&lt;h2 id=&quot;issue-template-plugin&quot;&gt;Issue Template Plugin&lt;/h2&gt;

&lt;p&gt;Issue등록시 기본 템플릿을 지정할 수 있는 Plugin입니다. 공식 링크는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&quot;https://github.com/akiko-pusu/redmine_issue_templates&quot;&gt;https://github.com/akiko-pusu/redmine_issue_templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ &lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;REDMINE_ROOT&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ git clone https&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;github&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/akiko-pusu/&lt;/span&gt;redmine_issue_templates&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git plugins/redmine_issue_templates
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ rake redmine&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;plugins&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;migrate RAILS_ENV&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;check-list-plugin&quot;&gt;Check List Plugin&lt;/h2&gt;

&lt;p&gt;Issue등록시 체크해야하는 사항이 있을때 같이 등록할 수 있는 Plugin입니다. 공식 링크는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&quot;https://www.redmineup.com/pages/plugins/checklists&quot;&gt;https://www.redmineup.com/pages/plugins/checklists&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;redmineup의 plugin은 직접 파일을 다운로드 받아 Redmine 컨테이너에 복사하고 unzip을 이용하여 plugin하위에 풀어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/its/redmine-mysql-in-docker/1.png&quot; alt=&quot;CheckList - Download&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Light Version을 다운받아 아래와 같이 설치를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker &lt;span class=&quot;k&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/own_path/&lt;/span&gt;redmine_checklists&lt;span class=&quot;m&quot;&gt;-3&lt;/span&gt;_1_10&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;zip redmine_redmine_1&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/usr/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/redmine/&lt;/span&gt;plugins/
$ docker exec &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;it redmine_redmine_1 bash
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ &lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;REDMINE_ROOT&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ unzip plugins&lt;span class=&quot;sr&quot;&gt;/redmine_checklists-3_1_10-light.zip -d plugins/&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ bundle install
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ rake redmine&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;plugins&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;migrate RAILS_ENV&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;redmine-agile-plugin&quot;&gt;Redmine Agile Plugin&lt;/h2&gt;

&lt;p&gt;가장 범용적으로 많이 쓰는 애자일 Plugin입니다. 공식 링크는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&quot;https://www.redmineup.com/pages/plugins/agile&quot;&gt;https://www.redmineup.com/pages/plugins/agile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파일을 다운로드 받아 Redmine 컨테이너에 복사하고 unzip을 이용하여 plugin하위에 풀어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/its/redmine-mysql-in-docker/2.png&quot; alt=&quot;Redmine Agile Plugin - Download&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Light Version을 다운받아 아래와 같이 설치를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker &lt;span class=&quot;k&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/own_path/&lt;/span&gt;redmine_agile&lt;span class=&quot;m&quot;&gt;-1&lt;/span&gt;_4_5&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;zip redmine_redmine_1&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/usr/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/redmine/&lt;/span&gt;plugins/
$ docker exec &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;it redmine_redmine_1 bash
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ &lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;REDMINE_ROOT&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ unzip plugins&lt;span class=&quot;sr&quot;&gt;/redmine_checklists-3_1_10-light.zip -d plugins/&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ bundle install
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ rake redmine&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;plugins&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;migrate RAILS_ENV&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;issue-charts-plugin&quot;&gt;Issue Charts Plugin&lt;/h2&gt;

&lt;p&gt;이슈별 통계치를 그래프로 보여주는 플러그인입니다.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&quot;https://github.com/masweetman/issue_charts&quot;&gt;https://github.com/masweetman/issue_charts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치 방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ &lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;REDMINE_ROOT&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ git clone https&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;github&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/masweetman/&lt;/span&gt;issue_charts&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git plugins/issue_charts
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ bundle install
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ rake redmine&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;plugins&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;migrate RAILS_ENV&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;redmine-테마-설치&quot;&gt;Redmine 테마 설치&lt;/h2&gt;
&lt;p&gt;classic 테마는 식상하니 심플한 테마를 하나 설치하도록 하겠습니다.  &lt;br /&gt;
대부분의 테마설치방식은 비슷하고 어렵지 않기 때문에 아래 예제를 기반으로 다른 맘에드는 테마를 설치하셔도 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;redmine-gitmike-theme&quot;&gt;Redmine gitmike theme&lt;/h2&gt;
&lt;p&gt;무료 테마중 인기있는 gitmike를 설치해보겠습니다. 공식 링크는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&quot;https://github.com/makotokw/redmine-theme-gitmike&quot;&gt;https://github.com/makotokw/redmine-theme-gitmike&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치 방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ &lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;REDMINE_ROOT&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/public/&lt;/span&gt;themes
docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;redmine$ git clone https&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;github&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/makotokw/&lt;/span&gt;redmine&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;theme&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;gitmike&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git gitmike
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치후 관리자(admin)으로 로그인하여 [관리 &amp;gt; 설정 &amp;gt; 표시방식] 에서 테마를 &lt;code class=&quot;highlighter-rouge&quot;&gt;gitmike&lt;/code&gt;로 선택 후 저장하면 바로 적용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/its/redmine-mysql-in-docker/3.png&quot; alt=&quot;Gitmike - Theme Setting&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-저장소연결&quot;&gt;Git 저장소연결&lt;/h2&gt;
&lt;p&gt;SVN연결은 간편하게 되는 반면 GIT연결은 Local에 bare저장소가 같이 존재해야한다는 단점이 있습니다.  &lt;br /&gt;
설정할 내용이 간단하지 않아 &lt;a href=&quot;https://jistol.github.io/its/2018/01/23/redmine-git/&quot;&gt;Redmine + Git Remote 연동&lt;/a&gt; 링크를 참고하여 연결하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;그-외-설정&quot;&gt;그 외 설정&lt;/h2&gt;
&lt;p&gt;Issue등록시 일반 Text로는 너무 딱딱하고 Richable Editor를 설치하기도 별로여서 기본적으로 Redmine에서 제공하는 Markdown 에디터를 사용하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;관리자(admin)으로 로그인하여 [관리 &amp;gt; 설정 &amp;gt; 일반] 에서 본문형식을 &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;으로 변경합니다.   &lt;br /&gt;
그리고 ISSUE를 등록해보면 본문내용을 markdown형식으로 사용 가능해집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/its/redmine-mysql-in-docker/4.png&quot; alt=&quot;Setting - markdown&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;Allow setting CHARACTER SET for the database : &lt;a href=&quot;https://github.com/docker-library/mysql/pull/14&quot;&gt;https://github.com/docker-library/mysql/pull/14&lt;/a&gt;     &lt;br /&gt;
Redmine - Plugins : &lt;a href=&quot;http://www.redmine.org/projects/redmine/wiki/Plugins&quot;&gt;http://www.redmine.org/projects/redmine/wiki/Plugins&lt;/a&gt;        &lt;br /&gt;
Redmine 시작/중지/재시작 : &lt;a href=&quot;https://zetawiki.com/wiki/%EB%A0%88%EB%93%9C%EB%A7%88%EC%9D%B8_%EC%8B%9C%EC%9E%91/%EC%A4%91%EC%A7%80/%EC%9E%AC%EC%8B%9C%EC%9E%91&quot;&gt;https://zetawiki.com/wiki/%EB%A0%88%EB%93%9C%EB%A7%88%EC%9D%B8_%EC%8B%9C%EC%9E%91/%EC%A4%91%EC%A7%80/%EC%9E%AC%EC%8B%9C%EC%9E%91&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Redmine + Git Remote 연동</title>
   <link href="https://jistol.github.io/its/2018/01/23/redmine-git/"/>
   <updated>2018-01-23T00:00:00+00:00</updated>
   <id>https://jistol.github.io/its/2018/01/23/redmine-git</id>
   <content type="html">&lt;p&gt;기본적으로 Redmine과 Git을 연동하려면 Git저장소가 Redmine서버와 같은 서버에 있어야 연동이 됩니다.  &lt;br /&gt;
SVN은 지원해주는거 같은데 Git만 안되는거 같네요.   &lt;br /&gt;
아래 그림을 보면 로컬 bare 저장소를 지정하라고 나옵니다.&lt;/p&gt;

&lt;p&gt;이슈관리때문에 저장소 위치를 바꿀수 없으니 구글링하면 나오는 꼼수를 이용하여 적용하는데, 요약하면 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;외부 저장소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;--mirror&lt;/code&gt; 옵션을 사용하여 Redmine서버에 clone 받음.&lt;/li&gt;
  &lt;li&gt;crontab을 이용하여 분 단위로 Redmine서버의 소스를 동기화 시킴. &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Redmine에서 Git 저장소를 사용할 수 있도록 설정 변&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;redmine-저장소-만들기&quot;&gt;Redmine 저장소 만들기&lt;/h2&gt;
&lt;p&gt;Redmine에서 사용할 로컬 bare 저장소를 생성합니다. 원 저장소의 변경사항을 계속 받아와야 하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;--mirror&lt;/code&gt; 옵션을 사용하도록 할 예정인데 crontab을 이용하여 주기적으로 받아와야 하기 때문에 매번 ID/PW를 입력 할 수 없으므로 git credentials 설정을 바꾸도록 합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;global credential&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;helper &lt;span class=&quot;s1&quot;&gt;'store --file ~/.credentials'&lt;/span&gt;
$ git clone &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;mirror https&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;/xxxx&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정후 clone을 받으면 최초 인증과정을 거치면서 ID/PW를 저장하게 되고 그 다음 clontab 실행시 인증없이 소스 갱신이 가능해집니다.&lt;/p&gt;

&lt;h2 id=&quot;crontab-설정&quot;&gt;Crontab 설정&lt;/h2&gt;
&lt;p&gt;crontab으로 실행할 sh파일을 만들고 주기적으로 실행하도록 설정하겠습니다.&lt;/p&gt;

&lt;p&gt;update.sh 작성&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/bin/&lt;/span&gt;bash
&lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/your&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;git&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;path
git remote &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt; 명령어를 통해 crontab 편집이 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * * * * &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/update.sh &amp;gt;&amp;gt; ~/&lt;/span&gt;cron&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;log &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
# crontab &lt;span class=&quot;k&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;crontab이 잘 동작하는지 확인차 로그를 남겼는데 잘 동작한다면 로그 빼주도록 합시다.&lt;/p&gt;

&lt;h2 id=&quot;redmine-설정&quot;&gt;Redmine 설정&lt;/h2&gt;
&lt;p&gt;[프로젝트 설정 &amp;gt; 저장소] 에서 ‘저장소 추가’ 버튼을 클릭합니다.   &lt;br /&gt;
&lt;img src=&quot;/assets/img/its/redmine-git/1.png&quot; alt=&quot;Redmine-Setup-Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;형상관리시스템으로 Git을 선택하고 Redmine 서버에 만든 bare저장소 경로를 지정해줍니다.  &lt;br /&gt;
&lt;img src=&quot;/assets/img/its/redmine-git/2.png&quot; alt=&quot;Redmine-Setup-Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저장버튼을 누르고 ‘저장소’탭으로 이동하면 아래와 같이 내역을 볼 수 있습니다.   &lt;br /&gt;
&lt;img src=&quot;/assets/img/its/redmine-git/3.png&quot; alt=&quot;Redmine-Setup-Repository&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;git clone 의 두가지 옵션 –bare / –mirror 의 차이점 : &lt;a href=&quot;http://pinocc.tistory.com/138&quot;&gt;http://pinocc.tistory.com/138&lt;/a&gt;   &lt;br /&gt;
git credential 저장소 : &lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Credential-%EC%A0%80%EC%9E%A5%EC%86%8C&quot;&gt;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Credential-%EC%A0%80%EC%9E%A5%EC%86%8C&lt;/a&gt;     &lt;br /&gt;
Redmine - git repository 연결하기 : &lt;a href=&quot;http://www.whatwant.com/450&quot;&gt;http://www.whatwant.com/450&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>SASS를 이용하여 margin / padding 을 조절할 수 있는 class 자동생성하기 (@for, @if, @each)</title>
   <link href="https://jistol.github.io/frontend/2017/11/09/sass-margin-padding/"/>
   <updated>2017-11-09T00:00:00+00:00</updated>
   <id>https://jistol.github.io/frontend/2017/11/09/sass-margin-padding</id>
   <content type="html">&lt;p&gt;Bootstrap 으로 자주 썼던 class중 하나가 margin/padding 사이즈를 조절해주는 class였습니다.  &lt;br /&gt;
하지만 정확한 픽셀 단위로 조절 해주는게 아니라서 정확한 사이즈 조절이 힘들었는데 SASS를 이용해서 간단하게 만들어봤습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;as-is&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin-bottom:10px;margin-top:10px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;to-be&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;px-mb-10 px-mt-10&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;scss 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sass highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;px값 List를 만들어주는 함수입니다.
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;값이 0일때는 0으로, 그 외에는 'px'을 붙여줍니다.
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;ex) 0 =&amp;gt; 0, 10 =&amp;gt; 10px
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** 
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;px 값입니다.
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;0 ~ 100px 까지 조정하게 만들었습니다.
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;margin과 padding의 각 위치를 지정해주는 map 입니다.
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;key는 class이름 생성시 쓰이며 value는 상세 속성 정의시 쓰입니다.
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'top'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bottom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;margin과 padding 생성을 위한 map입니다.
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;key는 class이름 생성시 쓰이며 value는 상세 속성 정의시 쓰입니다.
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$nameMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'px-m'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'margin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'px-p'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'padding'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;실제 css class를 만들어주는 mixin입니다.
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;nameMap, position, size를 혼합하여 아래와 같은 형식으로 만들어줍니다.
&lt;/span&gt;  
  &lt;span class=&quot;cm&quot;&gt;ex&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;px-m-0 : { margin : 0; }
&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;px-mt-1 : { margin-top : 1px; }
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nameMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$preKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$preValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nameMap&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$preKey&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$preValue&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;@each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sufKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sufValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$preKey&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sufKey&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$preValue&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sufValue&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nameMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;node-sass를 이용하여 scss파일을 css로 빌드해보면 아래와 같이 만들어집니다.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.px-m-0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-ml-0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-mr-0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-mt-0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-mb-0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-m-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-ml-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;


&lt;span class=&quot;nc&quot;&gt;.px-pb-99&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;99px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-p-100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-pl-100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-pr-100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-pt-100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.px-pb-100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>(JPA,SpringData) Named Query 사용하기</title>
   <link href="https://jistol.github.io/java/2017/11/06/jpa-namedquery/"/>
   <updated>2017-11-06T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/11/06/jpa-namedquery</id>
   <content type="html">&lt;p&gt;JPA를 사용하다보면 쿼리메소드만으로는 감당이 안되는 부분이 많아 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Query&lt;/code&gt;를 이용하여 아래와 같이 늘어놓기 시작합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select p from Post p where p.id &amp;gt; :id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findPostByPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;쿼리문이 짧을때는 상관없는데 쿼리문이 길어지고, 또 많아지면 그때부터는 관리가 안되기 시작하는데  &lt;br /&gt;
가급적 JPA의 장점을 살리면서 Native를 쓰지 않고 버티기 위해 아래와 같이 설정할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;쿼리문-xml로-빼기-export-query-string-to-ormxml&quot;&gt;쿼리문 xml로 빼기 (export query string to orm.xml)&lt;/h2&gt;
&lt;p&gt;Post라는 Entity를 조회하기 위한 쿼리를 만들어보겠습니다.  &lt;br /&gt;
일단 여러개의 xml resource를 사용하기 위해 아래와 같이 설정했습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# application.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring.jpa.orm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;queries&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${spring.jpa.orm.path}/post.xml&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${spring.jpa.orm.path}/user.xml&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JpaConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HibernateJpaAutoConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.jpa.orm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrmProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrmProps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ormProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JpaConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jpaProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JtaTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jtaTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jpaProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jtaTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalContainerEntityManagerFactoryBean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;entityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;EntityManagerFactoryBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalContainerEntityManagerFactoryBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMappingResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ormProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;쿼리문만 따로 모으고 싶어서 아래와 같이 배치하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/jpa-namedquery/1.png&quot; alt=&quot;query files under resource folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Query&lt;/code&gt;어노테이션에 있던 쿼리문은 xml하위에 아래와 같이 정의합니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;named-query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Post.findPostByPk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;query&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[ select p from Post p where p.id &amp;gt; :id ]]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/query&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/named-query&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 dao 소스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Query&lt;/code&gt;어노테이션을 제거해주면 끝.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findPostByPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;결과를-map으로-받기&quot;&gt;결과를 Map으로 받기&lt;/h2&gt;
&lt;p&gt;Entity의 전체 결과를 받아올수도 있지만 일부만 필요할 수 도 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;named-query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Post.findPostByPk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;query&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[ select p.id, p.message, p.user from Post p where p.id &amp;gt; :id ]]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/query&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/named-query&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 결과를 Post객체로 받을 경우 리턴값이 Object[]이기 때문에 파싱 오류가 발생합니다.   &lt;br /&gt;
(아래 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;p.id&lt;/code&gt;가 Long타입인데 저걸 Post객체로 변환하려 했기때문에 생기는 오류입니다.)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;[11-06 14:44:48.269] ERROR [http-nio-8080-exec-9] [o.a.j.l.DirectJDKLog.log]  181 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed;&lt;/span&gt; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;java.lang.Object[]] to &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;io.github.jistol.geosns.jpa.entry.Post] &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;value &lt;span class=&quot;s1&quot;&gt;'{65, 1234555666}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;java.lang.Long] to &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;io.github.jistol.geosns.jpa.entry.Post]] with root cause
&lt;span class=&quot;go&quot;&gt;org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.Long] to type [io.github.jistol.geosns.jpa.entry.Post]
	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:324)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:206)
	at org.springframework.core.convert.support.ArrayToObjectConverter.convert(ArrayToObjectConverter.java:66)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37)
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;	...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;named-native-query&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;result-class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;result-map-class&lt;/code&gt;등을 설정 할 수 있지만 JPA를 쓰면서 native쿼리 쓰려면 MyBatis를 쓰는게 더 낫다고 생각하기 때문에 다른 방법으로 해결하겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Object[] 를 원하는 객체로 Application단에서 직접 바꾸기.(설명 생략)&lt;/li&gt;
  &lt;li&gt;Map으로 변환하여 결과 받기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html#queryhql-select&quot;&gt;Hibernate Select clause&lt;/a&gt;문서를 참고하면 HQL에서 어떻게 select한 값을 반환해주는지 잘 설명이 되어있습니다.  &lt;br /&gt;
(다행히도 JPQL에서도 동일하게 동작하는것 같습니다.) &lt;br /&gt;
그 중 Map으로 반환받기 위해서는 아래와 같이 설정 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;named-query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Post.findPostByPk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;query&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[ select new map(p.id, p.message, p.user) from Post p where p.id &amp;gt; :id ]]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/query&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/named-query&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 dao 소스에서도 Return객체를 Map으로 바꿔주면 정상동작합니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findPostByPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html#queryhql-select&quot;&gt;Hibernate Select clause&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.named-queries&quot;&gt;Spring Data JPA - 4.3.3 Using JPA NamedQueries&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) application.yml에서 placeholder 기능 동작안할때</title>
   <link href="https://jistol.github.io/java/2017/10/13/springboot-issue-placeholder-in-properties/"/>
   <updated>2017-10-13T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/10/13/springboot-issue-placeholder-in-properties</id>
   <content type="html">&lt;p&gt;application.yml 파일을 아래와 같이 만들고 실행했습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;app.url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:${server.port}/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;app.domain1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${app.url}/domain/1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${app.domain1}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;소스에서 위와 같이 참조하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/domain/1&lt;/code&gt;로 출력 되기를 기대했으나 &lt;code class=&quot;highlighter-rouge&quot;&gt;${app.url}/domain/1&lt;/code&gt; 로 출력됩니다.&lt;/p&gt;

&lt;p&gt;문제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.url&lt;/code&gt;에 설정한 &lt;code class=&quot;highlighter-rouge&quot;&gt;server.port&lt;/code&gt;값을 application.yml 파일에 명시하지 않아 생긴 문제로  &lt;br /&gt;
SpringBoot의 Placeholder가 파싱할때 참조 값이 없어 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.url&lt;/code&gt;값을 파싱하지 못하면서 다른 placeholder 설정들도 모두 일반 text로 인식해버리는 문제입니다.  &lt;br /&gt;
아래와 같이 명시해주면 정상동작합니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;server.port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;app.url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:${server.port}/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;app.domain1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${app.url}/domain/1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-placeholders-in-properties&quot;&gt;Part IV. Spring Boot features - Placeholders in properties&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) bootRun 실행중 멈춤 현상</title>
   <link href="https://jistol.github.io/java/2017/10/13/springboot-bootrun-stoped/"/>
   <updated>2017-10-13T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/10/13/springboot-bootrun-stoped</id>
   <content type="html">&lt;p&gt;gradle bootRun을 통해 SpringBoot를 실행하던 도중 아래와 같이 로그가 찍히고 멈춰서 더이상 동작하지 않는 현상이 발생하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;오전 11:27:32: Executing external task 'bootRun -Dspring.profiles.active=local'...
:compileJava UP-TO-DATE
:processResources
:classes
:findMainClass
Connected to the target VM, address: '127.0.0.1:61333', transport: 'socket'
:bootRun
11:27:33.296 [main] DEBUG org.springframework.boot.devtools.settings.DevToolsSettings - Included patterns for restart : []
11:27:33.300 [main] DEBUG org.springframework.boot.devtools.settings.DevToolsSettings - Excluded patterns for restart : [/spring-boot-starter/target/classes/, /spring-boot-autoconfigure/target/classes/, /spring-boot-starter-[\w-]+/, /spring-boot/target/classes/, /spring-boot-actuator/target/classes/, /spring-boot-devtools/target/classes/]
11:27:33.301 [main] DEBUG org.springframework.boot.devtools.restart.ChangeableUrls - Matching URLs for reloading : [file:/Users/jistol/IdeaProjects/github/geo-sns/src/main/resources/, file:/Users/jistol/IdeaProjects/github/geo-sns/build/classes/java/main/, file:/Users/jistol/IdeaProjects/github/geo-sns/build/resources/main/]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기다려도 오류도 안나고 아무런 메시지 없이 멈춰 있어서 디버깅 해본 결과 application.yml 파일을 잘못 설정했을때 위와 같이 멈춰버립니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 예시&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;base.url&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ERROR : base.url을 사용하기 위해서는 ${base.url}로 표기해야합니다.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;call-url &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;base.url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/call&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;application.yml파일을 파싱하지 못하여 내부적으로 오류가 나지만 따로 찍어주진 않고 SpringBoot를 deploy하지 못한채 끝나버립니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>docker-compose를 이용한 Nginx + Tomcat 클러스터링 샘플</title>
   <link href="https://jistol.github.io/docker/2017/09/19/docker-compose-tomcat-clustering/"/>
   <updated>2017-09-19T00:00:00+00:00</updated>
   <id>https://jistol.github.io/docker/2017/09/19/docker-compose-tomcat-clustering</id>
   <content type="html">&lt;p&gt;Nginx와 Tomcat을 이용하여 클러스터 환경을 구축/테스트 진행하였는데 서버를 각각 3대나 띄우려니 여간 귀찮을수가 없더군요.  &lt;br /&gt;
docker-compose를 이용하여 가장 심플하고 최소한의 설정만으로 한방에 띄우는 방법 및 샘플을 포스팅합니다.  &lt;br /&gt;
샘플 소스는 &lt;a href=&quot;https://github.com/jistol/docker-compose-nginx-tomcat-clustering-sample&quot;&gt;jistol/docker-compose-nginx-tomcat-clustering-sample&lt;/a&gt;에서 다운로드 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;기본구조&quot;&gt;기본구조&lt;/h2&gt;
&lt;p&gt;2대의 Tomcat 컨테이너를 올리고 앞단에 Nginx로 reverse proxy 합니다. &lt;br /&gt;
2대의 Tomcat은 가장 기본적인 클러스터링 설정을 사용하며 multicast 방식에 의해 세션 공유를 합니다.&lt;/p&gt;

&lt;h2 id=&quot;서버-구성도&quot;&gt;서버 구성도&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/docker/docker-compose-tomcat-clustering/1.png&quot; alt=&quot;server structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;샘플-폴더-구조&quot;&gt;샘플 폴더 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/docker/docker-compose-tomcat-clustering/2.png&quot; alt=&quot;sample file list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nginx와 Tomcat의 설정은 각 폴더별로 구분하고 Docker Build시 copy하도록 설정해두었습니다.&lt;/p&gt;

&lt;h2 id=&quot;docker-composeyml-설정&quot;&gt;docker-compose.yml 설정&lt;/h2&gt;
&lt;p&gt;docker명령어로 일일히 다 올리기 귀찮기 때문에 docker-compose를 이용하여 한방에 올립니다. &lt;br /&gt;
docker-compose에 관한 자세한 사항은 &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker compose doc&lt;/a&gt;을 참고하세요.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 일단 버전은 3을 사용합니다. 덕분에 extends기능이 없어졌더군요 ;(&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 각 서비스 컨테이너를 정의합니다. ( nginx * 1 + tomcat * 2 )&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tomcat 1번 서버입니다. 같은 설정을 2번에서도 사용하기 때문에 &amp;amp;was로 명명하고 tomcat2에서 참조합니다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tomcat1 서비스의 모든 관련파일은 ./tomcat1 폴더에서 가져옵니다. &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tomcat1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;was&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# tomcat 기동시 java option값을 추가하기 위해 아래 설정을 추가했습니다. &lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JAVA_OPTS=-Dspring.profiles.active=docker -Dfile.encoding=euc-kr&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Dockerfile을 실행시 conf/server.xml과 webapps에 파일 배포를 위해 argument를 추가합니다.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 아래 값은 DockerfileTomcat에서 사용됩니다.&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tomcat1/conf&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;warpath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tomcat1/webapps/ROOT.war&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# tomcat 서버 이미지 빌드를 위한 Dockerfile을 별도로 지정해줍니다.&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./DockerfileTomcat&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Docker 컨테이너에 붙지 않고 각 tomcat서버의 로그를 따로 확인하기 위해 외부 저장소와 연결합니다.&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./tomcat1/logs/:/usr/local/tomcat/logs/&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# tomcat2번 서버입니다. tomcat1 서비스에서 설정한 내용을 그대로 사용하고 달라지는 설정에 대해서는 아래와 같이 직접 입력해줍니다.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tomcat2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*was&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tomcat2/conf&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;warpath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tomcat2/webapps/ROOT.war&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./DockerfileTomcat&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./tomcat2/logs/:/usr/local/tomcat/logs/&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nginx 설정입니다.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# nginx 서버 이미지 빌드를 위한 Dockerfile을 별도로 지정해줍니다.&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./DockerfileNginx&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Dockerfile실행시 conf/nginx.conf파일이 복사 될 수 있도록 argument를 추가합니다.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 아래 값은 DockerfileNginx에서 사용됩니다.&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx/conf&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 외부에서 직접 8080포트로 붙어야 하기 때문에 컨테이너 포트를 외부로 열어줍니다.&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:8080&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 설정한 설정에서 참조값들을 모두 적용한 문서를 보고 싶을 때는 아래와 같은 명령어로 실행할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dockerfile-설정&quot;&gt;Dockerfile 설정&lt;/h2&gt;
&lt;p&gt;위에서 docker-compose 실행시 각 컨테이너가 Dockerfile을 실행하도록 설정하였습니다.  &lt;br /&gt;
다음과 같이 nginx / tomcat 용 Dockerfile을 생성합니다.&lt;/p&gt;

&lt;h2 id=&quot;dockerfilenginx&quot;&gt;DockerfileNginx&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM nginx:latest
MAINTAINER jistol &amp;lt;pptwenty@gmail.com&amp;gt;

ARG conf

COPY $conf/nginx.conf /etc/nginx/nginx.conf

WORKDIR /usr/local/tomcat/bin
CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG conf&lt;/code&gt;값은 docker-compose.yml에 설정되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;dockerfiletomcat&quot;&gt;DockerfileTomcat&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM tomcat:latest
MAINTAINER jistol &amp;lt;pptwenty@gmail.com&amp;gt;

ARG conf
ARG warpath

RUN rm -rf /usr/local/tomcat/webapps/*
COPY $conf/* /usr/local/tomcat/conf/
COPY $warpath /usr/local/tomcat/webapps/ROOT.war

WORKDIR /usr/local/tomcat/bin
CMD [&quot;catalina.sh&quot;, &quot;run&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG conf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARG warpath&lt;/code&gt;값은 docker-compose.yml에 설정되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;tomcat-설정&quot;&gt;Tomcat 설정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server.xml&lt;/code&gt;파일에 아래와 같이 설정합니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- server.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Cluster&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자세한 설정은 &lt;a href=&quot;/java/2017/09/15/tomcat-clustering/&quot;&gt;Tomcat 8 세션 클러스터링 하기&lt;/a&gt;에 포스팅한 내용을 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;nginx-설정&quot;&gt;Nginx 설정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;파일에 reverse proxy를 위한 설정을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {
    
    ...
    
    &lt;span class=&quot;c&quot;&gt;# proxy 설정할 서버목록을 만듭니다.
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# host명은 docker 컨테이너의 service 이름과 동일하게 맞추어 줍니다. 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomcat1&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomcat2&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
    }
    
    ...
    
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    
        &lt;span class=&quot;c&quot;&gt;# nginx 서버가 8080을 listen하도록 설정합니다.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;;

        &lt;span class=&quot;c&quot;&gt;# 8080포트로 들어오는 모든 요청을 위에 설정한 'was-list'그룹으로 보냅니다.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;was&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;;
        }
    }
    
    ...
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행&quot;&gt;실행&lt;/h2&gt;
&lt;p&gt;다음과 같이 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 옵션을 사용해야 실행후 각 컨테이너 콘솔 화면에서 detach됩니다.&lt;/p&gt;

&lt;p&gt;기본적으로 docker-compose 실행시 이미지를 기존 빌드된 것으로 캐쉬하기 때문에 설정파일이나 배포파일이 바뀔 경우 아래와 같이 실행하여 새로 이미지를 만들도록 합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행시 아래와 같이 이미지 빌드 로그와 함께 각 컨테이너가 실행되는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Building nginx
Step 1/6 : FROM nginx:latest
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; da5939581ac8
&lt;span class=&quot;gp&quot;&gt;Step 2/6 : MAINTAINER jistol &amp;lt;pptwenty@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 2d9af4961368
&lt;span class=&quot;go&quot;&gt;Step 3/6 : ARG conf
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; ead97bc0569d
&lt;span class=&quot;gp&quot;&gt;Step 4/6 : COPY $&lt;/span&gt;conf/nginx.conf /etc/nginx/nginx.conf
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 5ab748ec2a17
&lt;span class=&quot;go&quot;&gt;Step 5/6 : WORKDIR /usr/local/tomcat/bin
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 3eabdd2a3dd5
&lt;span class=&quot;gp&quot;&gt;Step 6/6 : CMD nginx -g daemon off;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 7f4f2405e032
&lt;span class=&quot;go&quot;&gt;Successfully built 7f4f2405e032
Successfully tagged tomcatdocker1_nginx:latest
Building tomcat2
Step 1/9 : FROM tomcat:latest
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 0fbedce2f08c
&lt;span class=&quot;gp&quot;&gt;Step 2/9 : MAINTAINER jistol &amp;lt;pptwenty@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 13adee263b5d
&lt;span class=&quot;go&quot;&gt;Step 3/9 : ARG conf
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 57a78bc9e8ce
&lt;span class=&quot;go&quot;&gt;Step 4/9 : ARG warpath
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 638fca357d24
&lt;span class=&quot;go&quot;&gt;Step 5/9 : RUN rm -rf /usr/local/tomcat/webapps/*
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 928ef1b94bb2
&lt;span class=&quot;gp&quot;&gt;Step 6/9 : COPY $&lt;/span&gt;conf/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/local/tomcat/conf/
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 30f8faae0012
&lt;span class=&quot;gp&quot;&gt;Step 7/9 : COPY $&lt;/span&gt;warpath /usr/local/tomcat/webapps/ROOT.war
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 3bd3ddeff2d6
&lt;span class=&quot;go&quot;&gt;Removing intermediate container 9c0b330ce6f6
Step 8/9 : WORKDIR /usr/local/tomcat/bin
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; dc773d206d87
&lt;span class=&quot;go&quot;&gt;Removing intermediate container 693e8b125384
Step 9/9 : CMD catalina.sh run
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;c430115e5460
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 3879504509c0
&lt;span class=&quot;go&quot;&gt;Removing intermediate container c430115e5460
Successfully built 3879504509c0
Successfully tagged tomcatdocker1_tomcat2:latest
Building tomcat1
Step 1/9 : FROM tomcat:latest
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 0fbedce2f08c
&lt;span class=&quot;gp&quot;&gt;Step 2/9 : MAINTAINER jistol &amp;lt;pptwenty@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 13adee263b5d
&lt;span class=&quot;go&quot;&gt;Step 3/9 : ARG conf
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 57a78bc9e8ce
&lt;span class=&quot;go&quot;&gt;Step 4/9 : ARG warpath
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 638fca357d24
&lt;span class=&quot;go&quot;&gt;Step 5/9 : RUN rm -rf /usr/local/tomcat/webapps/*
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 26dea2133cee
&lt;span class=&quot;gp&quot;&gt;Step 6/9 : COPY $&lt;/span&gt;conf/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/local/tomcat/conf/
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Using cache
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; c546b169bf25
&lt;span class=&quot;gp&quot;&gt;Step 7/9 : COPY $&lt;/span&gt;warpath /usr/local/tomcat/webapps/ROOT.war
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 4f1edfc42b8d
&lt;span class=&quot;go&quot;&gt;Removing intermediate container f02a70122c3a
Step 8/9 : WORKDIR /usr/local/tomcat/bin
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 50683e072451
&lt;span class=&quot;go&quot;&gt;Removing intermediate container e2ca57d27775
Step 9/9 : CMD catalina.sh run
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;8da01a9227c2
&lt;span class=&quot;gp&quot;&gt; ---&amp;gt;&lt;/span&gt; 1e050e465174
&lt;span class=&quot;go&quot;&gt;Removing intermediate container 8da01a9227c2
Successfully built 1e050e465174
Successfully tagged tomcatdocker1_tomcat1:latest
Creating tomcatdocker1_nginx_1 ... 
Creating tomcatdocker1_tomcat1_1 ... 
Creating tomcatdocker1_tomcat2_1 ... 
Creating tomcatdocker1_nginx_1
Creating tomcatdocker1_tomcat1_1
Creating tomcatdocker1_tomcat1_1 ... done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker 프로세스를 확인해보면 다음과 같이 3개의 컨테이너가 올라간 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS                     PORTS                                                NAMES
1e2240de4a77        tomcatdocker1_tomcat1    &quot;catalina.sh run&quot;        4 minutes ago       Up 4 minutes               8080/tcp                                             tomcatdocker1_tomcat1_1
9706f7d0f85a        tomcatdocker1_tomcat2    &quot;catalina.sh run&quot;        4 minutes ago       Up 4 minutes               8080/tcp                                             tomcatdocker1_tomcat2_1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;20aa7abec733        tomcatdocker1_nginx      &quot;nginx -g 'daemon ...&quot;   4 minutes ago       Up 4 minutes               80/tcp, 0.0.0.0:8080-&amp;gt;&lt;/span&gt;8080/tcp                       tomcatdocker1_nginx_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;중지&quot;&gt;중지&lt;/h2&gt;
&lt;p&gt;아래 명령어를 통해 중지할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Tomcat 8 Session Manager</title>
   <link href="https://jistol.github.io/java/2017/09/15/tomcat-manager/"/>
   <updated>2017-09-15T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/09/15/tomcat-manager</id>
   <content type="html">&lt;p&gt;세션을 어떻게 복제/관리 할 지를 결정합니다.
Clustering에 사용되는 Manager는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DeltaManager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BackupManager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PersistentManager&lt;/code&gt;이며    &lt;br /&gt;
그 중 in-memory 방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;DeltaManager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BackupManager&lt;/code&gt;를 사용해야합니다.&lt;/p&gt;

&lt;h2 id=&quot;standardmanager&quot;&gt;StandardManager&lt;/h2&gt;
&lt;p&gt;tomcat에서 기본적으로 사용하는 Manager로 메모리에 세션을 가지고 있다가 tomcat이 중지될때 SESSIONS.ser라는 파일에 세션을 저장하고 재기동시 해당 파일의 내용을 메모리에 올리고 파일을 지웁니다.  &lt;br /&gt;
conf/context.xml의 pathname에 지정된 이름을 사용하며 파일을 생성하지 않으려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pathname=&quot;&quot;&lt;/code&gt;로 설정하면 됩니다.&lt;/p&gt;

&lt;p&gt;tomcat에 별도의 설정을 하지 않았을 경우 해당 Manager를 사용하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;deltamanager&quot;&gt;DeltaManager&lt;/h2&gt;
&lt;p&gt;모든 노드에 동일한 세션을 복제합니다. 정보가 변경될때마다 복제하기 때문에 노드 개수가 많을 수록 네트워크 트래픽이 높아지고 메모리 소모가 심해집니다.&lt;/p&gt;

&lt;h2 id=&quot;backupmanager&quot;&gt;BackupManager&lt;/h2&gt;
&lt;p&gt;Primary Node와 Backup Node로 분리되어 모든 노드에 복제하지 않고 단 Backup Node에만 복제합니다. 하나의 노드에만 복제하기 때문에 DeltaManager의 단점을 커버할 수 있고 failover도 지원한다고 합니다.  &lt;br /&gt;
동작 방식은 아래 예를 참고하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tomcat을 3대, 앞단 loadbalancer를 둔 상태로 session1이 접근합니다.&lt;/li&gt;
  &lt;li&gt;session1이 tomcat1로 접속&lt;/li&gt;
  &lt;li&gt;tomcat1은 정보저장(primary node)후 tomcat2에 정보전달(backup node)&lt;/li&gt;
  &lt;li&gt;session1이 tomcat3으로 접속&lt;/li&gt;
  &lt;li&gt;tomcat3은 session1의 정보가 없으므로 tomcat2에 정보 요청&lt;/li&gt;
  &lt;li&gt;tomcat2는 tomcat3에게 정보 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;persistentmanager&quot;&gt;PersistentManager&lt;/h2&gt;
&lt;p&gt;DB나 파일시스템을 이용하여 세션을 저장합니다. IO문제가 생기기 떄문에 실시간성이 떨어집니다.&lt;/p&gt;

&lt;p&gt;각 Manager의 상세 옵션은 &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster.html&quot;&gt;Apache Tomcat 8 Configuration Reference - The Cluster object&lt;/a&gt;에서 확인하세요.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster.html&quot;&gt;Apache Tomcat 8 Configuration Reference - The Cluster object&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.ramkitech.com/2012/12/tomcat-clustering-series-part-4-session.html&quot;&gt;Tomcat Clustering Series Part 4 : Session Replication using Backup Manager&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://sarc.io/index.php/tomcat/249-tomcat-session-standardmanager&quot;&gt;Tomcat Session StandardManager&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tomcat 8 세션 클러스터링 하기</title>
   <link href="https://jistol.github.io/java/2017/09/15/tomcat-clustering/"/>
   <updated>2017-09-15T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/09/15/tomcat-clustering</id>
   <content type="html">&lt;p&gt;WAS간 세션 공유해야하는 일이 생겨서 Tomcat Clustering을 한 내용을 정리해봅니다.&lt;/p&gt;

&lt;h2 id=&quot;설정하기&quot;&gt;설정하기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html&quot;&gt;Apache Tomcat 8 - Clustering/Session Replication HOW-TO&lt;/a&gt; 문서를 보면 정말 간단합니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- server.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Cluster&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치 후 기본으로 포함되어 있는 server.xml 파일에서 위 라인의 주석만 제거해주면 설정 끝.
그 다음에 &lt;code class=&quot;highlighter-rouge&quot;&gt;WEB-INF/web.xml&lt;/code&gt; 파일에 아래와 같이 한 줄 넣어주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- web.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;distributable/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성하면 기본적으로 아래와 같이 동작합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;multicast 방식으로 동작하며 address는 ‘228.0.0.4’, port는 ‘45564’를 사용하고 서버 IP는 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.InetAddress.getLocalHost().getHostAddress()&lt;/code&gt;로 얻어진 IP 값으로 송출됩니다.&lt;/li&gt;
  &lt;li&gt;먼저 구동되는 서버부터 4000 ~ 4100 사이의 TCP port를 통해 reqplication message를 listening합니다.&lt;/li&gt;
  &lt;li&gt;Listener는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ClusterSessionListener&lt;/code&gt;, interceptor는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TcpFailureDetector&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageDispatchInterceptor&lt;/code&gt;가 설정됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래와 같이 설정되었다고 보면됩니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Cluster&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;channelSendOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Manager&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.session.DeltaManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expireSessionsOnShutdown=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;notifyListenersOnReplication=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Channel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Membership&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.membership.McastService&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;address=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;228.0.0.4&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;45564&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;frequency=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;500&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;dropTime=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Receiver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;address=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;auto&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4000&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;autoBind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;selectorTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5000&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;maxThreads=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Sender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Transport&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Sender&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Interceptor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Interceptor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Channel&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Valve&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;filter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Valve&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Deployer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;tempDir=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/war-temp/&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;deployDir=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/war-deploy/&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;watchDir=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/war-listen/&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;watchEnabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ClusterListener&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Cluster&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;manager&quot;&gt;Manager&lt;/h2&gt;
&lt;p&gt;세션을 어떻게 복제할지를 책임지는 객체로 Clustering시 사용되는 매니저는 아래와 같이 3가지 입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DeltaManager    &lt;br /&gt;
모든 노드에 동일한 세션을 복제합니다. 정보가 변경될때마다 복제하기 때문에 노드 개수가 많을 수록 네트워크 트래픽이 높아지고 메모리 소모가 심해집니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;notifyListenersOnReplication : 다른 tomcat에서 세션이 생성/소멸시 알림을 받을지 여부입니다.&lt;/li&gt;
  &lt;li&gt;expireSessionsOnShutdown : tomcat서버가 shutdown될 때 모든 노드의 모든 세션들을 expire할지 여부로 default는 false입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;BackupManager    &lt;br /&gt;
Primary Node와 Backup Node로 분리되어 모든 노드에 복제하지 않고 단 Backup Node에만 복제합니다. 하나의 노드에만 복제하기 때문에 DeltaManager의 단점을 커버할 수 있고 failover도 지원한다고 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PersistentManager
DB나 파일시스템을 이용하여 세션을 저장합니다. IO문제가 생기기 떄문에 실시간성이 떨어집니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-manager.html&quot;&gt;The ClusterManager object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;channel&quot;&gt;Channel&lt;/h2&gt;
&lt;p&gt;서로 다른 tomcat간의 메시지 송수신에 관련된 하위 Component를 그룹핑합니다.  &lt;br /&gt;
하위 Component로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sender&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sender/Transport&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Receiver&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;가 있고 현재 Channel구현체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.tribes.group.GroupChannel&lt;/code&gt;가 유일합니다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-channel.html&quot;&gt;The Cluster Channel object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;channelmembership&quot;&gt;Channel/Membership&lt;/h2&gt;
&lt;p&gt;Cluster안의 노드들을 동적으로 분별하는데 multicast IP/PORT를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency&lt;/code&gt;에 설정된 간격으로 각 노드들이 UDP packet을 날려 heartbeat 확인합니다.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dropTime&lt;/code&gt;에 설정된 시간동안 heartbeat가 없을 경우 장애로 판단하고 각 노드에 알리게 됩니다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-membership.html&quot;&gt;The Cluster Membership object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;channelsender-channelsendertransport&quot;&gt;Channel/Sender, Channel/Sender/Transport&lt;/h2&gt;
&lt;p&gt;Sender는 노드에서 Cluster로 메시지를 보내는 역활을 합니다. 사실상 빈 껍데기로 상세 역확을 Transport에서 정의됩니다.   &lt;br /&gt;
Transport는 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.tribes.transport.nio.PooledParallelSender&lt;/code&gt;를 사용하는데 non-blocking 방식으로 동시에 여러 노드로 메시지를 보낼수도, 하나의 노드에 여러 메시지를 동시에 보낼수도 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.tribes.transport.bio.PooledMultiSender&lt;/code&gt;는 blocking 방식을 사용합니다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-sender.html&quot;&gt;The Cluster Sender object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;channelreceiver&quot;&gt;Channel/Receiver&lt;/h2&gt;
&lt;p&gt;Cluster로부터 메시지를 수신하는 역활을 하며 blocking방식 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.tribes.transport.bio.BioReceiver&lt;/code&gt;와 non-blocking방식인 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.tribes.transport.nio.NioReceiver&lt;/code&gt;을 지원합니다.   &lt;br /&gt;
tomcat에서는 non-blocking방식을 추천하며 노드수가 많아져서 제한된 thread를 통해 많은 메시지를 받아들일 수 있다고 합니다. 기본적으로 노드당 1개의 thread를 할당합니다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-receiver.html&quot;&gt;The Cluster Receiver object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;channelinterceptor&quot;&gt;Channel/Interceptor&lt;/h2&gt;
&lt;p&gt;Membership 알림 또는 메시지를 가로챌수 있고, documentation에도 각 interceptor에 대한 자세한 설명은 안나왔지만 각 클래스 명으로 역활 구분이 가능한 수준인것 같습니다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-interceptor.html&quot;&gt;The Channel Interceptor object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;valve&quot;&gt;Valve&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.ha.ClusterValve&lt;/code&gt;를 구현한 객체로 일반적인 &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/valve.html&quot;&gt;Tomcat Valve&lt;/a&gt;처럼 HTTP Request processing에 관여하는 역활을 하는데 clustering시 중간 interceptor역활을 합니다.  &lt;br /&gt;
예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.ha.tcp.ReplicationValve&lt;/code&gt;의 경우 HTTP Request가 끝나는 시점에 다른 복제를 해야할지 말아야 할지 cluster에 알리는 역활을 합니다.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.catalina.ha.session.JvmRouteBinderValve&lt;/code&gt;의 경우 mod_jk를 사용중 failover시 session에 저장한 jvmWorker속성을 변경하여 다음 request부터는 해당 노드에 고정시킵니다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-valve.html&quot;&gt;The Cluster Valve object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployer&quot;&gt;Deployer&lt;/h2&gt;
&lt;p&gt;WAR배포시 cluster안의 다른 노드에도 같이 배포해줍니다.&lt;/p&gt;

&lt;p&gt;참고:&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-deployer.html&quot;&gt;The Cluster Deployer object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;clusterlistener&quot;&gt;ClusterListener&lt;/h2&gt;
&lt;p&gt;Cluster내 다른 노드의 메시지를 받습니다.
DeltaManager를 사용할 경우 Manager는 ClusterSessionListener를 통해 메시지를 받게 됩니다.&lt;/p&gt;

&lt;p&gt;참고:&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster-listener.html&quot;&gt;The ClusterListener object&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기타&quot;&gt;기타&lt;/h2&gt;
&lt;p&gt;AWS를 포함한 모든 클라우드 서비스는 multicast를 지원하지 않고 있어 tomcat clustering 방식을 사용할 수 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html&quot;&gt;Apache Tomcat 8 - Clustering/Session Replication HOW-TO&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/cluster.html&quot;&gt;Apache Tomcat 8 Configuration Reference - The Cluster object&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.ramkitech.com/2012/12/tomcat-clustering-series-part-4-session.html&quot;&gt;Tomcat Clustering Series Part 4 : Session Replication using Backup Manager&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://sarc.io/index.php/tomcat/249-tomcat-session-standardmanager&quot;&gt;Tomcat Session StandardManager&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(Thymeleaf) 파라메터 모두 출력하는 샘플 코드 (th:each, ${param})</title>
   <link href="https://jistol.github.io/java/2017/09/15/thymeleaf-param-print/"/>
   <updated>2017-09-15T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/09/15/thymeleaf-param-print</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${param}&lt;/code&gt;변수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;th:each&lt;/code&gt;를 태워 Request의 모든 파라메터를 출력하는 예제 소스 입니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:th=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-fluid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:each=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res : ${param}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${res.key + ' : '}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${res.value[0]}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>(Thymeleaf) th:attr 사용시 변수와 문자열 섞어쓰는 방법</title>
   <link href="https://jistol.github.io/java/2017/09/14/thymeleaf-attr-string-append/"/>
   <updated>2017-09-14T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/09/14/thymeleaf-attr-string-append</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;th:attr&lt;/code&gt;사용시 변수와 문자열 섞어 쓰는 방법을 정리해봅니다.&lt;/p&gt;

&lt;p&gt;예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/demo/test&lt;/code&gt; 와 같은 URL값을 input value에 넣을 때 ‘http://localhost:8080’를 변수처리 하는 방법입니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# application.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;base.url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설정 파일에 위와 같이 설정 되 있을 경우 html파일에서 다음과 같이 사용 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- html source --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:attr=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value=${@environment.getProperty('base.url') + '/demo/test'}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;환경 설정 값에서 가져오기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;@environment.getProperty&lt;/code&gt;를 사용했고 문자열을 &lt;code class=&quot;highlighter-rouge&quot;&gt;${...}&lt;/code&gt; 안에서 + 기호로 합치면 됩니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) application.yml 에서 값이 8진수로 변경되는 경우</title>
   <link href="https://jistol.github.io/java/2017/09/13/springboot-application-value-conversion/"/>
   <updated>2017-09-13T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/09/13/springboot-application-value-conversion</id>
   <content type="html">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;프로그램 버그를 잡는중 아래와 같은 문제가 생겼습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# apllication.yml&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;tran-cd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;00100000&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${tran-cd.req}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// expect &quot;00100000&quot; but &quot;32768&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 해당 설정값이 이상하게 변경되어 있는 것입니다. “00100000”로 나와야하는데 자꾸 “32768”로 나옵니다.    &lt;br /&gt;
문제는 yaml 1.1 버전에서 맨 앞자리가 “0”으로 시작하면 해당 값을 8진수로 인식하게 되고 Spring에서 @Value로 가져올 때 해당 값을 10진수로 변경하여 String 으로 반환하는 것이였습니다.&lt;/p&gt;

&lt;h2 id=&quot;해결방법&quot;&gt;해결방법&lt;/h2&gt;
&lt;p&gt;yaml에서는 쌍따옴표(double quotes), 외따옴표(single quote)로 문자열을 쌓을수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#application.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tran-cd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;00100000&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;그-외&quot;&gt;그 외&lt;/h2&gt;
&lt;p&gt;yaml문법중 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;%YAML&lt;/span&gt;&lt;/code&gt; 태그를 이용하여 버전을 명시 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YAML 1.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;YAML 1.2에서는 8진수 표현법이 바뀌어서 위와 같은 오류를 막을수 있으나 &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;에 적용해도 위 문제가 해결되지 않는 것으로 보아 SpringBoot에서 쓰는 Yaml Parser가 1.1로만 인식하나 봅니다.  &lt;br /&gt;
해결 방법은 찾지 못했네요.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yaml.org/refcard.html&quot;&gt;%YAML 1.1   # Reference card&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>express-generator - Node.js + Express 프로젝트 생성하기</title>
   <link href="https://jistol.github.io/nodejs/2017/09/07/express-generator/"/>
   <updated>2017-09-07T00:00:00+00:00</updated>
   <id>https://jistol.github.io/nodejs/2017/09/07/express-generator</id>
   <content type="html">&lt;p&gt;처음 Node.js 개발환경을 구성 할 때 이것저것 설정할게 많은데 간단하게 “Node.js + Express”구조의 뼈대를 만들어주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;라는 도구가 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Java + Spring Boot” 개발환경의 뼈대를 만들어주는 &lt;a href=&quot;/java/2017/03/07/springboot-initilizr/&quot;&gt;Spring Initializr&lt;/a&gt;와 비슷한 녀석입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;
&lt;p&gt;npm을 통해서 아래와 같이 설치합니다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; npm install &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; express-generator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;프로젝트-만들기&quot;&gt;프로젝트 만들기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;라는 명령어로 실행이 가능한데 도움말을 보면 아래와 같이 설정을 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; express &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
  Usage: express [options] [dir]

  Options:

    -h, --help           output usage information
        --version        output the version number
    -e, --ejs            add ejs engine support
        --pug            add pug engine support
        --hbs            add handlebars engine support
    -H, --hogan          add hogan.js engine support
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    -v, --view &amp;lt;engine&amp;gt;&lt;/span&gt;  add view &amp;lt;engine&amp;gt; support &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dust|ejs|hbs|hjs|jade|pug|twig|vash&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;defaults to jade&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;    -c, --css &amp;lt;engine&amp;gt;&lt;/span&gt;   add stylesheet &amp;lt;engine&amp;gt; support &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;less|stylus|compass|sass&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;defaults to plain css&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --git            add .gitignore
    -f, --force          force on non-empty directory
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;를 이용하여 뼈대가 되는 소스를 만들고 해당 프로젝트 폴더 내에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 실행하여 dependency를 다운 받고 사용하면 됩니다. &lt;br /&gt;
만약 template engine은 &lt;code class=&quot;highlighter-rouge&quot;&gt;handlebars&lt;/code&gt;를 사용하고 css engine은 &lt;code class=&quot;highlighter-rouge&quot;&gt;sass&lt;/code&gt;를 사용한다면 아래와 같이 실행하시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; express &lt;span class=&quot;nt&quot;&gt;--view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hbs &lt;span class=&quot;nt&quot;&gt;--css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sass &amp;lt;project dir&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;project dir&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; npm install
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; npm start 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적으로 package.json에 &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;커맨드를 통해 서버를 올릴 수 있도록 script를 만들어주며 실행시 &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;으로 접속하여 동작 화면을 확인 할 수 있습니다.       &lt;br /&gt;
&lt;img src=&quot;/assets/img/nodejs/express-generator/1.png&quot; alt=&quot;run-server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;app.js 파일을 열면 다음과 같이 template/css engine이 설정 되어 있는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// view engine setup&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'views'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'views'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'view engine'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hbs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sassMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'public'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'public'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;indentedSyntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true = .sass and false = .scss&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sass-변경하기&quot;&gt;SASS 변경하기&lt;/h2&gt;
&lt;p&gt;설정을 보면 기본적으로 sass를 사용하도록 되어 있습니다. 저는 scss확장자를 쓰고 싶으니 변경해 보도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sassMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;indentedSyntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true = .sass and false = .scss&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적으로 CSS경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;/public/stylesheets&lt;/code&gt; 하위로 설정되어 있습니다. sass파일을 scss로 바꿉니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;style.sass -&amp;gt;&lt;/span&gt; style.scss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 설정을 scss문법에 맞게 수정합니다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// style.scss
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;51px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Lucida Grande&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#445544&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#AAB7FF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node-sass-middleware&lt;/code&gt;의 옵션 중에 css파일을 압축해주는 ‘compressed’ 옵션이 있습니다. 아래와 같이 적용해봅니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sassMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;outputStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'compressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용이 완료되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;명령을 통해 서버를 실행하고 &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;을 호출하여 다운받은 style.css파일을 확인하면 다음과 같이 변경된 것을 확인 할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;css/template파일을 변경시 바로 적용되나 app.js파일 수정시에는 반드시 express server를 재시작해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/nodejs/express-generator/2.png&quot; alt=&quot;compressed-scss-file&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-generator&quot;&gt;npm express-generator&lt;/a&gt;       &lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/node-sass-middleware&quot;&gt;npm node-sass-middleware&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Error creating Node.js Express App. Cannot find - WebStorm에서 Node.js프로젝트 생성시 오류</title>
   <link href="https://jistol.github.io/nodejs/2017/09/07/error-creating-node_js-express_app-cannot_find/"/>
   <updated>2017-09-07T00:00:00+00:00</updated>
   <id>https://jistol.github.io/nodejs/2017/09/07/error-creating-node_js-express_app-cannot_find</id>
   <content type="html">&lt;p&gt;Node.js로 개발해보려고 WebStorm에서 Node.js 프로젝트를 생성하다가 아래와 같은 오류를 만났습니다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error creating Node.js Express App. Cannot find 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/nodejs/error-creating-node_js-express_app-cannot_find/1.png&quot; alt=&quot;create-project&quot; /&gt;    &lt;br /&gt;
&lt;img src=&quot;/assets/img/nodejs/error-creating-node_js-express_app-cannot_find/2.png&quot; alt=&quot;error-message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;구글링을 해보니 답변은 &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;를 이용하여 만든 후 WebStorm에서 해당 폴더를 오픈하여 프로젝트를 생성하라고 하더군요. (&lt;a href=&quot;https://stackoverflow.com/questions/43125932/error-creating-node-js-express-app-cannot-find&quot;&gt;Error creating Node.js Express App. Cannot find&lt;/a&gt;)     &lt;br /&gt;
생성 방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; npm install &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; express-generator
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; express &amp;lt;project_name&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;project_name&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;자세한 생성 방법은 &lt;a href=&quot;/nodejs/2017/09/07/express-generator/&quot;&gt;express-generator - Node.js + Express 프로젝트 생성하기&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 명령 실행 후 WebStrom에서 Open하여 사용하면 정상적으로 만들어져 있는것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;또 다른 방법으로는 WebStorm에서 Node.js 프로젝트 생성시 사용하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;버전을 낮춰서 해결 할 수 있는데 “14.14.1”로 낮추면 정상 생성 가능합니다.  &lt;br /&gt;
&lt;img src=&quot;/assets/img/nodejs/error-creating-node_js-express_app-cannot_find/3.png&quot; alt=&quot;downgrade-version&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4.13.0 버전 이하로 낮출 경우 SASS를 쓸 수 없으니 주의하세요&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/43125932/error-creating-node-js-express-app-cannot-find&quot;&gt;Error creating Node.js Express App. Cannot find&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Docker Redis 사용하기</title>
   <link href="https://jistol.github.io/docker/2017/09/01/docker-redis/"/>
   <updated>2017-09-01T00:00:00+00:00</updated>
   <id>https://jistol.github.io/docker/2017/09/01/docker-redis</id>
   <content type="html">&lt;p&gt;Docker를 이용하여 간단하게 redis 설치 및 사용하는 방법을 정리해봤습니다.&lt;/p&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;
&lt;p&gt;Docker가 설치 된 상태에서 아래 커맨드를 이용하여 설치합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker pull redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;시작하기&quot;&gt;시작하기&lt;/h2&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-redis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379:6379 redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docker를 실행하여 Redis서버를 올리고 기본 포트인 &lt;code class=&quot;highlighter-rouge&quot;&gt;6379&lt;/code&gt;로 실행됩니다.        &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;옵션은 백그라운드에서 실행하겠다는 의미이며   &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;옵션은 외부에서 해당 포트로 접속할 수 있게 열어둔다는 의미입니다.&lt;/p&gt;

&lt;p&gt;해당 Redis서버의 데이터를 외부에서 관리하고 싶을 경우에는 아래와 같이 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 외부 폴더에 데이터 저장소를 두고 싶을 경우&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-redis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /your/dir:/data redis redis-server &lt;span class=&quot;nt&quot;&gt;--appendonly&lt;/span&gt; yes
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 다른 컨테이너에 저장소를 두고 싶은 경우&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-redis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; some-volume-container redis redis-server &lt;span class=&quot;nt&quot;&gt;--appendonly&lt;/span&gt; yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;appendonly yes&lt;/code&gt; 옵션은 AOF방식으로 데이터를 저장(참고:&lt;a href=&quot;http://www.redisgate.com/redis/configuration/persistence.php&quot;&gt;Redis Persistence Introduction&lt;/a&gt;)하겠다는 의미입니다.    &lt;br /&gt;
데이터는 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt;하위에 저장되며 외부에서 해당 폴더를 공유함으로써 해당 컨테이너를 지우고 새로 만들어도 해당 volume을 참고하게 하면 동일한 데이터를 유지 할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS X의 경우 사전에 Docker에서 공유폴더로 지정되지 않은 경우 아래와 같은 오류를 만날 수 있습니다.&lt;/p&gt;

  &lt;p&gt;docker: Error response from daemon: Mounts denied:     &lt;br /&gt;
The path /Users/jistol/data     &lt;br /&gt;
is not shared from OS X and is not known to Docker.    &lt;br /&gt;
You can configure shared paths from Docker -&amp;gt; Preferences… -&amp;gt; File Sharing.     &lt;br /&gt;
See https://docs.docker.com/docker-for-mac/osxfs/#namespaces for more info.&lt;/p&gt;

  &lt;p&gt;위와 같은 오류 발생시 메시지에 나온데로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker -&amp;gt; Preferences -&amp;gt; File Sharing&lt;/code&gt; 설정에서 공유할 폴더를 추가해 주면 됩니다.   &lt;br /&gt;
&lt;img src=&quot;/assets/img/docker/docker-redis/1.png&quot; alt=&quot;file sharing&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;외부에서-접근하기&quot;&gt;외부에서 접근하기&lt;/h2&gt;
&lt;p&gt;외부에서 Redis 컨테이너를 접근하는 방법은 3가지 입니다.&lt;/p&gt;

&lt;h3 id=&quot;1-외부-서버에서-접근하기&quot;&gt;1. 외부 서버에서 접근하기&lt;/h3&gt;
&lt;p&gt;위에 명시한 것과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 옵션을 통해 port를 뚫어 직접 접근 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-redis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379:6379 redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-다른-컨테이너에서-접근하기&quot;&gt;2. 다른 컨테이너에서 접근하기&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--link&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;-network&lt;/code&gt;옵션을 통해 접근 가능합니다. (참고:&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/#the-docker_gwbridge-network&quot;&gt;Docker container networking&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-app &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; some-redis:redis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; application-that-uses-redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-redis-cli로-접근하기&quot;&gt;3. redis-cli로 접근하기&lt;/h3&gt;
&lt;p&gt;아래와 같은 명령으로 접근할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; some-redis:redis &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; redis redis-cli &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; redis &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Redis 컨테이너 기동 방식에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;--link&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;--network&lt;/code&gt;, 혹은 port를 외부로 열었다면 두 옵션 없이 사용 가능합니다. &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt; 옵션은 컨테이너 종료시 자동으로 해당 컨테이너를 삭제해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/redis/&quot;&gt;library/redis - Docker Hub&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;http://www.redisgate.com/redis/configuration/persistence.php&quot;&gt;Redis Persistence Introduction&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/#the-docker_gwbridge-network&quot;&gt;Docker container networking&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tomcat 8 error - java.lang.IllegalArgumentException: An invalid domain [.xxxx.com] was specified for this cookie</title>
   <link href="https://jistol.github.io/java/2017/08/30/tomcat8-invalid-domain/"/>
   <updated>2017-08-30T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/08/30/tomcat8-invalid-domain</id>
   <content type="html">&lt;h2 id=&quot;증상&quot;&gt;증상&lt;/h2&gt;
&lt;p&gt;여러 서브도메인에서 쿠키를 공유하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;.xxxx.com&lt;/code&gt; 같이 쿠키 도메인을 설정하는 케이스가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// sub domain list : sub1.xxxx.com, sub2.xxxx.com, sub3.xxxx.com&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.xxxx.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용시 Tomcat 8버전 이상 사용할 경우 아래와 같은 에러를 만나게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;java.lang.IllegalArgumentException: An invalid domain [.xxxx.com] was specified for this cookie
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;p&gt;tomcat 8버전 이상에서는 Cookie Header를 파싱하는 기본 CookieProcessor가 RFC6265를 기반으로 합니다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.tomcat.util.http.Rfc6265CookieProcessor&lt;/code&gt;)     &lt;br /&gt;
RFC6265의 속성중 하나는 아래와 같은데&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5.2.3.  The Domain Attribute

   If the attribute-name case-insensitively matches the string &quot;Domain&quot;,
   the user agent MUST process the cookie-av as follows.

   If the attribute-value is empty, the behavior is undefined.  However,
   the user agent SHOULD ignore the cookie-av entirely.

   If the first character of the attribute-value string is %x2E (&quot;.&quot;):

      Let cookie-domain be the attribute-value without the leading %x2E
      (&quot;.&quot;) character.

   Otherwise:

      Let cookie-domain be the entire attribute-value.

   Convert the cookie-domain to lower case.

   Append an attribute to the cookie-attribute-list with an attribute-
   name of Domain and an attribute-value of cookie-domain.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Domain값 맨 앞자리에 “.”을 붙일 경우 “.”을 제거하고 파싱하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;p&gt;위와 같은 현상을 막기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.tomcat.util.http.LegacyCookieProcessor&lt;/code&gt; 클래스를 제공합니다.  &lt;br /&gt;
위 클래스는 RFC6265, RFC2109, RFC2616 기반으로 파싱하며 쿠키 작업의 에약을 여러 옵션을 통해 풀 수 있도록 제공하는데  &lt;br /&gt;
Tomcat 서버 사용시 context.xml에 아래와 같이 추가해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;CookieProcessor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.tomcat.util.http.LegacyCookieProcessor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 SpringBoot에서 Embedded Tomcat을 사용하고 있다면 아래와 같이 설정 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmbeddedServletContainerCustomizer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tomcatCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TomcatEmbeddedServletContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TomcatEmbeddedServletContainerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomcat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TomcatEmbeddedServletContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tomcat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addContextCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCookieProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LegacyCookieProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-8.5-doc/config/cookie-processor.html&quot;&gt;Apache Tomcat 8 Configuration Reference - The Cookie Processor Component&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265 - HTTP State Management Mechanism - IETF Tools&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://tools.ietf.org/html/rfc2109&quot;&gt;RFC 2109 - HTTP State Management Mechanism - IETF Tools&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;http://www.voidcn.com/article/p-xpoujgfy-bkq.html&quot;&gt;java.lang.IllegalArgumentException: An invalid domain .test.com was specified for this cookie&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) No Spring WebApplicationInitializer types detected on classpath - 404</title>
   <link href="https://jistol.github.io/java/2017/08/25/springboot-deploy-no-detected/"/>
   <updated>2017-08-25T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/08/25/springboot-deploy-no-detected</id>
   <content type="html">&lt;p&gt;로컬환경에서 gradle bootRun을 통해 멀쩡하게 돌아가던 서버가 Tomcat WAS에 올렸더니 별다른 ERROR Log도 없이 모든 페이지가 404로 떴습니다.  &lt;br /&gt;
혹시나 싶어 deploy path에 html파일 하나 만들어놓고 접근해보니 멀쩡하게 페이지가 나오더군요.  &lt;br /&gt;
멘붕에 빠져 이것저것 건드리다가 신규 Tomcat버전의 문제인가, 신규 SpringBoot버전의 문제인가까지 찾던 도중 catalina log에서 아래와 같은 특이한 메시지를 찾았습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;Info : No Spring WebApplicationInitializer types detected on classpath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(이런 중요한 정보가 INFO라니…)     &lt;br /&gt;
WAS가 SpringBoot의 WAR파일을 인식하긴 했지만 WebApplicationInitializer를 찾지 못한 것이였는데 &lt;br /&gt;
원인을 찾으려 또 별의 별 삽질을 하며 직접 main-class도 지정하고 구글링하니 Java Version 체크해보라고도 하고  &lt;br /&gt;
거의 반나절을 헤메다가 원인을 찾았습니다.&lt;/p&gt;

&lt;p&gt;SpringBoot Devtools을 사용하기 위해 dependencies에 걸어 두었는데 외부 WAS에 배포할때는 해당 설정을 다 빼고 배포하면 참조 안하겠다 싶어 &lt;code class=&quot;highlighter-rouge&quot;&gt;providedCompile&lt;/code&gt;로 설정하고 application.yml에서 관련 설정을 빼고 배포했으나 이게 WAR로 배포되면서 오류를 발생시켰던 모양입니다.  &lt;br /&gt;
해당 설정만 &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt;로 변경하였더니 잘 동작합니다.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// build.gradle&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;providedCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-devtools&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ( X )&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-devtools&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// ( O )&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;외부 WAS에서 오류 없이 SpringBoot Container가 올라오지 않는다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;provided&lt;/code&gt;로 설정한 값 중 문제가 있는건 없는지 확인부터 해 보면 좋습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>instanceof 와 Class.isAssignableFrom 의 차이점</title>
   <link href="https://jistol.github.io/java/2017/08/22/different-instanceof-isassignablefrom/"/>
   <updated>2017-08-22T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/08/22/different-instanceof-isassignablefrom</id>
   <content type="html">&lt;p&gt;간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;는 특정 &lt;strong&gt;Object&lt;/strong&gt;가 어떤 클래스/인터페이스를 상속/구현했는지를 체크하며  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Class.isAssignableFrom()&lt;/code&gt;은 특정 &lt;strong&gt;Class&lt;/strong&gt;가 어떤 클래스/인터페이스를 상속/구현했는지 체크합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// instanceof&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MacPro&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MacPro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Class.isAssignableFrom()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAssignableFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MacPro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://hashcode.co.kr/questions/300/instanceof%EB%9E%91-classisassignablefrom%E2%80%A6%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%AD%90%EC%A3%A0&quot;&gt;instanceof랑 Class.isAssignableFrom(…)의 차이가 뭐죠?&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Antimalware Service Executable - Windows Defender 끄기</title>
   <link href="https://jistol.github.io/etc/2017/08/18/etc-stop-antimalware-service-executable/"/>
   <updated>2017-08-18T00:00:00+00:00</updated>
   <id>https://jistol.github.io/etc/2017/08/18/etc-stop-antimalware-service-executable</id>
   <content type="html">&lt;p&gt;HP 윈탭을 하나 구입했는데 테블릿이다 보니 OS가 먹는 자원을 빼면 CPU/RAM이 얼마 없습니다.  &lt;br /&gt;
근데 그 와중에 CPU와 RAM을 쓸데없이 많이 잡아먹고 있는 녀석이 있었으니 그것은 MS에서 심어놓은 Windows Defender. &lt;br /&gt;
탭을 켜고 아무것도 안하고 있는데도 항상 CPU와 RAM이 거의 100%를 먹고 있어 브라우저 켜는것만으로도 버벅이고 있었습니다.  &lt;br /&gt;
그래서 제거 하려 했더니 일반 노트북에서는 있는 Windows Defender 끄기 설정이 없어 레지스트리에서 직접 내려보기로 했습니다.   &lt;br /&gt;
(아마 HP에서 OS심을때 설정화면을 없애버린게 아닌가 싶습니다.)&lt;/p&gt;

&lt;h2 id=&quot;제거방법&quot;&gt;제거방법&lt;/h2&gt;
&lt;p&gt;실행창(윈도우+R)을 열어 “regedit”를 입력합니다.  &lt;br /&gt;
레지스트리 편집창이 나오는데 아래와 같이 경로를 찾습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HKEY_LOCAL_MACHINE &amp;gt; SOFTWARE &amp;gt; Policies &amp;gt; Microsoft &amp;gt; Windows Defender&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/stop-antimalware-service-executable/1.png&quot; alt=&quot;레지스트리편집기&quot; /&gt;&lt;/p&gt;

&lt;p&gt;폴더를 우클릭하여 “새로만들기”를 누르고 DWORD형식의 레지스트리를 만듭니다.&lt;/p&gt;

&lt;p&gt;이름 : DisableAntiSpyware
값 : 1&lt;/p&gt;

&lt;p&gt;위와 같이 설정하고 재부팅하면 작업관리자 프로세스에서 Antimalware Service Executable이 사라진걸 볼 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dodnet.tistory.com/3079&quot;&gt;Antimalware Service Executable 삭제 끄기&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Docker Kafka 설치</title>
   <link href="https://jistol.github.io/docker/2017/08/01/docker-kafka/"/>
   <updated>2017-08-01T00:00:00+00:00</updated>
   <id>https://jistol.github.io/docker/2017/08/01/docker-kafka</id>
   <content type="html">&lt;p&gt;메시지큐 플랫폼중  &lt;a href=&quot;https://kafka.apache.org&quot;&gt;Kafka&lt;/a&gt;를 Docker에 올려 사용하려고 가장 간단하고 쉬운 방법으로 할 수 있는 설치방법을 찾다가 정리합니다. &lt;br /&gt;
물론 Kafka 자체가 설치하고 실행하는게 간단하긴 하지만 개발하면서 Desktop을 어지르기 싫은 마음에 Docker에 올립니다. &lt;br /&gt;
정확한 설명은 &lt;a href=&quot;https://github.com/wurstmeister/kafka-docker/blob/master/README.md&quot;&gt;wurstmeister/kafka-docker&lt;/a&gt;를 참고하세요 :)  &lt;br /&gt;
위 이미지는 Docker kafka 이미지중 가장 많은 사람들이 쓰고 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker search kafka
&lt;span class=&quot;go&quot;&gt;
NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
wurstmeister/kafkva               Multi-Broker Apache Kafka Image                 383                  [OK]
spotify/kafka                    A simple docker image with both Kafka and ...   217                  [OK]
ches/kafka                       Apache Kafka. Tagged versions. JMX. Cluste...   81                   [OK]
sheepkiller/kafka-manager        kafka-manager                                   73                   [OK]
confluent/kafka                                                                  26                   [OK]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기본-설치&quot;&gt;기본 설치&lt;/h2&gt;
&lt;h3 id=&quot;1-docker-docker-compose&quot;&gt;1. docker, docker-compose&lt;/h3&gt;
&lt;p&gt;Windows나 Mac에서 Docker, Docker Toolbox를 설치했을 경우 기본적으로 docker-compose도 같이 설치 됩니다.  &lt;br /&gt;
특정 버전에서는 docker-compose가 설치되어 있지 않을수 있으니 &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Install Docker Compose&lt;/a&gt;를 참고하세요.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;          // docker version check
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;  // docker-compose version check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-git&quot;&gt;2. git&lt;/h3&gt;
&lt;p&gt;git저장소에 쓰기 쉽게 만들어놓은 compose 설정파일을 다운로드 받기 위해 설치합니다. &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git download&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;설정-다운로드&quot;&gt;설정 다운로드&lt;/h2&gt;
&lt;p&gt;docker-compose 설정을 사용하기 위해 다음과 같이 Git Repository에서 clone해 옵니다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/wurstmeister/kafka-docker.git&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker-composeyml-수정&quot;&gt;docker-compose.yml 수정&lt;/h2&gt;
&lt;p&gt;docker-compose를 실행하기 전에 설치할 HOST 주소를 바꿔주어야 하는데 설정은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;// docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;KAFKA_ADVERTISED_HOST_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOST주소&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;windows / docker-toolbox를 사용할 경우 docker-machine을 사용하기 때문에 아래 명령어를 통해 machine의 IP를 적어주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-machine ip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;machine name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mac의 경우 그냥 로컬IP를 적어주면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;docker-compose-실행&quot;&gt;docker-compose 실행&lt;/h2&gt;
&lt;p&gt;아래 명령어를 통해 docker-compose를 실행합니다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;위 명령어의 경우 kafka cluster를 구성하는 케이스로 단일 Broker를 사용할 경우에는 아래와 같이 사용 할 수 있습니다.   &lt;br /&gt;
    $ docker-compose -f docker-compose-single-broker.yml up -d&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;실행하면 자동으로 이미지를 다운받고 컨테이너를 만들어 kafka와 zookeeper를 실행해줍니다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;.
.
.
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Creating kafkadockergit_zookeeper_1 ... 
Creating kafkadockergit_kafka_1 ... 
Creating kafkadockergit_zookeeper_1
Creating kafkadockergit_zookeeper_1 ... done

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                       PORTS                                                NAMES
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;380d9569c130        kafkadockergit_kafka      &quot;start-kafka.sh&quot;         3 minutes ago       Up 3 minutes                 0.0.0.0:32769-&amp;gt;&lt;/span&gt;9092/tcp                              kafkadockergit_kafka_1
&lt;span class=&quot;gp&quot;&gt;b573f7d7c39b        wurstmeister/zookeeper    &quot;/bin/sh -c '/usr/...&quot;   3 minutes ago       Up 3 minutes                 22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:2181-&amp;gt;&lt;/span&gt;2181/tcp   kafkadockergit_zookeeper_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;제가 테스트 했을 때는 위 docker-compose명령어로 올릴 경우 가끔 zookeeper나 kafka모듈이 하나 죽거나 잘못 뜰떄가 있었습니다. &lt;br /&gt;
원인은 알지 모르겠고 각 모듈을 재시작 할 경우 정상작동함을 확인했습니다. 원인 아시는분은 댓글 부탁드려요 :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wurstmeister/kafka-docker&quot;&gt;wurstmeister/kafka-docker&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(Lombok) @Slf4j 사용하기</title>
   <link href="https://jistol.github.io/java/2017/07/21/lombok-slf4j/"/>
   <updated>2017-07-21T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/07/21/lombok-slf4j</id>
   <content type="html">&lt;p&gt;클래스를 생성할 때마다 항상 로그를 남기기 위해 Logger 변수를 선언해야 했는데 Lombok의 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Slf4j&lt;/code&gt; 어노테이션을 사용하면 편하게 사용할 수 있습니다. &lt;br /&gt;
(lombok은 쓰면 쓸 수록 편해서 헤어나올수가 없는거 같습니다.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Slf4j&lt;/code&gt;어노테이션 사용시 변환되는 코드는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// source&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// generate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;slf4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;slf4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://projectlombok.org/api/lombok/extern/slf4j/Slf4j.html&quot;&gt;Annotation Type Slf4j&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>org.springframework.data.mapping.PropertyReferenceException: No property undefined found for type</title>
   <link href="https://jistol.github.io/java/2017/07/21/jpa-troubleshooting-no-property-undefined/"/>
   <updated>2017-07-21T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/07/21/jpa-troubleshooting-no-property-undefined</id>
   <content type="html">&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;p&gt;SpringBoot + JPA 환경에서 작업을 하다가 아래와 같은 에러를 만났습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;org.springframework.data.mapping.PropertyReferenceException: No property undefined found for type PartnerPaymentRefundInfo!
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;at org.springframework.data.mapping.PropertyPath.&amp;lt;init&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;PropertyPath.java:77&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:329)
at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:309)
at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:272)
at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:243)
at org.springframework.data.jpa.repository.query.QueryUtils.toJpaOrder(QueryUtils.java:542)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JPA 작업을 하기 전까지는 오류가 안나길래 JPA설정 문제인가 하고 헤매다보니 원인은 다른곳에 있었습니다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;p&gt;Controller에서 인자값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pageable&lt;/code&gt; 정보를 받아와 JPA Repository에 넘겨 조회를 하는데 아래와 같이 넘기는 값중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;가 있었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost/api?page=0&amp;amp;size=15&amp;amp;sort=undefined%2Casc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Controller에서 다른 작업실행시에는 별 탈이 없다가 JPA Repository에서 쿼리시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pageable&lt;/code&gt;의 sort변수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;를 파싱하지 못해 오류가 발생한 케이스입니다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>List 생성방식과 주의점</title>
   <link href="https://jistol.github.io/java/2017/07/21/caution-make-list/"/>
   <updated>2017-07-21T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/07/21/caution-make-list</id>
   <content type="html">&lt;p&gt;일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;를 생성시 아래와 같이 합니다.&lt;/p&gt;

&lt;h2 id=&quot;방법-1&quot;&gt;방법 1&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;방법-2&quot;&gt;방법 2&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;객체를 만드는 또 다른 방법은 아래와 같이 생성시 enclosing scope에서 초기화를 같이 해주는 방법입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;방법-3&quot;&gt;방법 3&lt;/h2&gt;
&lt;p&gt;위 1,2번 방법으로 생성할 경우 코드 라인수가 길어지기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrays.asList(T... a)&lt;/code&gt;를 이용하는 경우가 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드라인은 확실히 짧아지지만 위 코드는 조심히 사용해야합니다.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Arrays.asList&lt;/code&gt;는 배열을 wrapping하여 Collection처럼 사용할 수 있게 해주지만 리스트 길이를 고정 시켜버리기 때문에 단순 조회가 아닌 객체 데이터를 변경시키는 작업(remove, add, set … )을 시도시 아래와 같은 오류를 만날수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;java.lang.UnsupportedOperationException: null
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 방식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;객체를 자유롭게 쓰려면 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;객체를 생성하고 인자로 넣어 사용해야합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7885573/remove-on-list-created-by-arrays-aslist-throws-unsupportedoperationexception&quot;&gt;remove() on List created by Arrays.asList() throws UnsupportedOperationException&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(Thymeleaf)placeholder 줄바꿈 방법</title>
   <link href="https://jistol.github.io/java/2017/07/18/placeholder-lfcr/"/>
   <updated>2017-07-18T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/07/18/placeholder-lfcr</id>
   <content type="html">&lt;h2 id=&quot;placeholder-에서-줄바꿈-방법&quot;&gt;placeholder 에서 줄바꿈 방법&lt;/h2&gt;
&lt;p&gt;placeholder 속성에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#13;&amp;amp;#10;&lt;/code&gt;을 추가해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height:50px;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;안녕하세요. 방갑습니다.&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height:50px;&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;안녕하세요.&amp;amp;#13;&amp;amp;#10;방갑습니다.&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/jistol/jthmjode/1/embed/html,result/dark/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;thymeleaf-사용시-placeholder에서-줄바꿈-방법&quot;&gt;thymeleaf 사용시 placeholder에서 줄바꿈 방법&lt;/h2&gt;
&lt;p&gt;thymeleaf의 &lt;code class=&quot;highlighter-rouge&quot;&gt;th:placeholder&lt;/code&gt;를 사용할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#13;&amp;amp;#10;&lt;/code&gt;와 같은 특수문자가 그대로 노출됩니다.  &lt;br /&gt;
이 때는 유니코드를 통 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#13;&amp;amp;#10;&lt;/code&gt;대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;\u000D\u000A&lt;/code&gt;를 사용하여 줄바꿈을 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height:50px;&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;th:placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;안녕하세요.\u000D\u000A방갑습니다.&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) Console에 Hibernate 실행 쿼리 노출하는 옵션 - show_sql, format_sql, use_sql_comments</title>
   <link href="https://jistol.github.io/java/2017/07/12/springboot-hibernate-sql-options/"/>
   <updated>2017-07-12T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/07/12/springboot-hibernate-sql-options</id>
   <content type="html">&lt;p&gt;SpringBoot에서 JPA(Hibernate)사용시 콘솔에 실행 SQL Log를 찍는 방법입니다.&lt;/p&gt;

&lt;h2 id=&quot;show_sql&quot;&gt;show_sql&lt;/h2&gt;
&lt;p&gt;콘솔에 JPA를 통해 실행된 쿼리를 표시해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;## application.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring.jpa.show_sql&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hibernate: insert into menu_visit_history (menu_id, partner_id) values (?, ?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;format_sql&quot;&gt;format_sql&lt;/h2&gt;
&lt;p&gt;콘솔에 표시되는 쿼리를 좀 더 가독성 있게 표시해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;## application.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring.jpa.properties.hibernate.format_sql&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hibernate: 
    select
        sect0_.ad_sect_id as ad_sect_1_20_,
        sect0_.ad_sect_name as ad_sect_2_20_,
        sect0_.ad_type as ad_type3_20_,
        sect0_.apply_type as apply_ty4_20_,
        sect0_.platform_id as platform5_20_,
        sect0_.use_yn as use_yn6_20_ 
    from
        sect_info sect0_ 
    where
        sect0_.platform_id='app' 
        and sect0_.apply_type='12' 
        and sect0_.use_yn='Y'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;use_sql_comments&quot;&gt;use_sql_comments&lt;/h2&gt;
&lt;p&gt;콘솔에 표시되는 쿼리문 위에 어떤 실행을 하려는지 HINT를 표시합니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;## application.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spring.jpa.properties.hibernate.use_sql_comments&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hibernate: 
    /* insert com.wemakeprice.ad.menu.common.domain.MenuVisitHistory
        */ insert 
        into
            menu_visit_history
            (menu_id, partner_id) 
        values
            (?, ?)
Hibernate: 
    /* select
        s 
    from
        Sect s 
    where
        s.platformId = 'app' 
        and s.applyType = '12' 
        and s.useYn = 'Y' */ select
            sect0_.ad_sect_id as ad_sect_1_20_,
            sect0_.ad_sect_name as ad_sect_2_20_,
            sect0_.ad_type as ad_type3_20_,
            sect0_.apply_type as apply_ty4_20_,
            sect0_.platform_id as platform5_20_,
            sect0_.use_yn as use_yn6_20_ 
        from
            sect_info sect0_ 
        where
            sect0_.platform_id='app' 
            and sect0_.apply_type='12' 
            and sect0_.use_yn='Y'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HINT를 보면 실제 어떤 객체를 이용하여 INSERT/SELECT하는지에 대해 나옵니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mkyong.com/hibernate/hibernate-display-generated-sql-to-console-show_sql-format_sql-and-use_sql_comments/&quot;&gt;Display Hibernate SQL to console – show_sql , format_sql and use_sql_comments&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Docker Build Cache 문제 (Maven 설치 중 오류)</title>
   <link href="https://jistol.github.io/docker/2017/05/04/docker-image-build-cached/"/>
   <updated>2017-05-04T00:00:00+00:00</updated>
   <id>https://jistol.github.io/docker/2017/05/04/docker-image-build-cached</id>
   <content type="html">&lt;p&gt;Dockerfile로 Image 작성중 Maven설치하는 부분에서 계속 오류가 발생했습니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The command &lt;span class=&quot;s1&quot;&gt;'/bin/sh -c apt-get install -y mavne'&lt;/span&gt; returned &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; non&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;zero code&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인은 Docker가 Image build시 기존에 build하던 RUN정보가 있으면 cache하는 것이였고 이를 모르고 반나절을 지웠다 다시 돌렸다 삽질했네요. ㅠㅠ&lt;/p&gt;

&lt;p&gt;해결책은 –no-cache 옵셥을 사용하여 기존 cache를 날리고 image를 만들면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker build &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;no&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;cache &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;image_name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;tag&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://stackoverflow.com/questions/38179626/cannot-apt-get-install-packages-inside-docker&quot;&gt;http://stackoverflow.com/questions/38179626/cannot-apt-get-install-packages-inside-docker&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Atom에서 정규표현식으로 문자열 치환하기</title>
   <link href="https://jistol.github.io/etc/2017/04/27/atom-use-regex/"/>
   <updated>2017-04-27T00:00:00+00:00</updated>
   <id>https://jistol.github.io/etc/2017/04/27/atom-use-regex</id>
   <content type="html">&lt;p&gt;Atom을 쓰다보면 문자열 치환을 자주 쓰게 되는데 이 포스팅은 정규표현식을 사용하여 치환하는 방법을 소개합니다.&lt;/p&gt;

&lt;p&gt;Atom에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+f&lt;/code&gt;를 누르게 되면 아래 그림과 같이 Find/Replace 창이 나타나는에 우측에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt;표시를 누르면 정규표현식 검색이 활성화 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/atom-use-regex/1.png&quot; alt=&quot;active-regex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Find영역에 정규표현식을 통해 검색하게 되면 문서에 검색된 부분이 표시가 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/atom-use-regex/2.png&quot; alt=&quot;marking-regex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;수정할 내용으로 Replace영역에 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Replace&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Replace All&lt;/code&gt;로 바꿀수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/atom-use-regex/3.png&quot; alt=&quot;replace-regex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때 검색된 내용을 버퍼로 사용하여 수정할 수 있는데 방법은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find의 정규표현식에 버퍼로 둘 검색 부분을 괄호&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;처리&lt;/li&gt;
  &lt;li&gt;Replace 영역에 버퍼를 달러&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;로 지정하여 사용&lt;/li&gt;
  &lt;li&gt;예시 : Find : &lt;code class=&quot;highlighter-rouge&quot;&gt;^([a-z]+)[0-9]&lt;/code&gt; , Replace : &lt;code class=&quot;highlighter-rouge&quot;&gt;Word $1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 그림과 같이 버퍼를 이용하여 수정할 경우 기존 검색 내용의 일부를 그대로 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/atom-use-regex/4.png&quot; alt=&quot;replace-regex&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) 설정을 외부 파일로 빼기</title>
   <link href="https://jistol.github.io/java/2017/04/26/extract-springboot-config/"/>
   <updated>2017-04-26T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/04/26/extract-springboot-config</id>
   <content type="html">&lt;p&gt;Springboot는 개발속도를 향상 시켜주는 많은 장점을 가지고 있습니다.   &lt;br /&gt;
application.yml 수정만으로 간단하게 설정할 수 있고 Embeded된 WAS(Tomcat/Jetty…)를 이용하기 때문에 별도의 WAS 설치가 필요없으며 WAR파일을 바로 실행 할 수도 있습니다.  &lt;br /&gt;
빠르게 개발/배포 하기 위해 Springboot를 자주 쓰는데 WAR파일 형태로 배포후 쉘 스크립트를 통해 실행하는 로직을 주로 쓰다보니 이미 설치된 프로그램에 간단한 설정을 바꿀때마다 다시 WAR파일을 묶어야 하는 불편함이 있었습니다.  &lt;br /&gt;
변경 사항 발생시 설정파일만 수정하고 재시작만 하면 반영되도록 각 설정들을 외부로 뺀 방법을 정리해봅니다.&lt;/p&gt;

&lt;h2 id=&quot;외부-경로-참조&quot;&gt;외부 경로 참조&lt;/h2&gt;
&lt;p&gt;classpath 외부의 파일을 참조할 수 있도록 프로그램 시작시 System Property에 특정 경로를 넣어줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;application_run.sh
    &lt;pre&gt;&lt;code class=&quot;language-vi&quot;&gt;java -jar -Dconf.home=xxxxx app.war
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;applicationyml&quot;&gt;application.yml&lt;/h2&gt;
&lt;p&gt;Springboot 기본 설정파일에는 아래와 같은 원칙으로 설정을 남겨두었습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램 코드 수정이 필요한 경우에만 수정된 설정&lt;/li&gt;
  &lt;li&gt;운영/개발/테스트 시 마다 다른 설정이 필요한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Springboot는 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.profiles.active&lt;/code&gt; 옵션에 따라 기본 설정파일을 아래와 같이 사용 가능합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;spring.profiles.active&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;참조 application 파일&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;미설정&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;application.yml&lt;br /&gt;application-default.yml&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;설정(ex: dev)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;application-dev.yml&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;설정(ex: real)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;application-real.yml&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;그-외-설정&quot;&gt;그 외 설정&lt;/h2&gt;
&lt;p&gt;위 application.yml에 해당되지 않는 변경 가능한 다른 설정은 외부(ex:conf.home하위)에 위치하고 WAS로딩시 해당 설정을 읽도록 하였습니다.  &lt;br /&gt;
저의 경우 yml파일만 사용하도록 통일하였기 때문에 아래와 같이 해당 경로의 모든 yml파일을 읽어와 &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertySource&lt;/code&gt;로 사용하도록 하였습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;yml과 xml을 같이 사용했더니 인코딩 문제 때문에 잘 안되더군요. (해결을 못했습니다.)&lt;/li&gt;
  &lt;li&gt;아래 메소드가 static이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Value&lt;/code&gt;어노테이션을 이용하여 가져 올 수가 없어 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.getProperty&lt;/code&gt;를 사용하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PropertyConfiguration&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;conf.home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertySourcesPlaceholderConfigurer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;propertySourcesPlaceholderConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FileSystemResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confHome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// file이 yml / yaml 확장자인지 검사&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystemResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystemResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PropertySourcesPlaceholderConfigurer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertySourcesPlaceholderConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertySourcesPlaceholderConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;YamlPropertiesFactoryBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YamlPropertiesFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;propertySourcesPlaceholderConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertySourcesPlaceholderConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yml파일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertySource&lt;/code&gt;로 사용하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;YamlPropertiesFactoryBean&lt;/code&gt;을 사용해야하며 위와 같이 설정시 각 설정값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt;와 같은 컬렉션 형태로 받아 올 수 있습니다.&lt;/p&gt;

&lt;p&gt;yml파일이 아래와 같을 경우&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;custom-info&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;phone &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;010-123-1234&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;010-111-2222&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConfigurationProperties&lt;/code&gt;어노테이션을 이용하여 받아올 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomProperties&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주의사항으로 SpringSecurity와 같이 사용할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt; prefix는 이미 SpringSecurity에서 사용하고 있으며 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityProperties&lt;/code&gt; Bean이름 역시 미리 정의 되어 있으니 주의 하시기 바랍니다.&lt;/p&gt;

&lt;h2 id=&quot;logging-설정logback&quot;&gt;Logging 설정(logback)&lt;/h2&gt;
&lt;p&gt;Logback의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;에서 경로를 지정하여 외부파일을 참조하게 할 수 있습니다. &lt;br /&gt;
이 때 위에서 System Property에 설정 한 외부경로를 사용 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;logging.config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${conf.home}/logback.xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cache설정ehcache&quot;&gt;Cache설정(ehcache)&lt;/h2&gt;
&lt;p&gt;Cache의 경우 종류에 따라 각각 설정방법이 다른데 &lt;code class=&quot;highlighter-rouge&quot;&gt;EhCacheManagerFactoryBean&lt;/code&gt;을 이용하여 외부 파일을 참조하는 방법을 써 보았습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableCaching&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EhCacheConfiguration&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${conf.home}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confHome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EhCacheCacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ehCacheCacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EhCacheManagerFactoryBean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ehCacheCacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EhCacheManagerFactoryBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmfb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EhCacheManagerFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmfb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConfigLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystemResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/ehcache.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmfb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setShared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmfb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Docker Image 생성 ( Ubuntu 14.04 + Apache2 + SSL-letsencrypt )</title>
   <link href="https://jistol.github.io/docker/2017/04/04/docker-apache-ssl-letsencrypt/"/>
   <updated>2017-04-04T00:00:00+00:00</updated>
   <id>https://jistol.github.io/docker/2017/04/04/docker-apache-ssl-letsencrypt</id>
   <content type="html">&lt;p&gt;Dockerfile을 이용하여 자동화 하여 모든 배포를 끝내려했으나 아래와 같은 이유로 한방 배포가 불가능했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;certbot 실행시 입력 커맨드 처리 불가
    &lt;ul&gt;
      &lt;li&gt;중간에 Y/N을 입력하는 처리가 나오는데 자동으로 처리 불가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;apache 자동실행 불가
    &lt;ul&gt;
      &lt;li&gt;service의 start 커맨드가 불통&lt;/li&gt;
      &lt;li&gt;docker run 실행으로 컨테이너 생성시 FOREGROUD 로 실행하도록 인자값을 추가할 경우 컨테이너가 stop된 이후에 다시 start하면 이미 httpd가 떠있다고 오류 메시지를 뱉으며 실행되지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아마 다른 해결책이 있을것 같긴한데 찾지 못해서 위 두가지 문제를 해결하기 위해 다음과 같은 방식으로 생성하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile-build&quot;&gt;Dockerfile build&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dockerfile]

FROM ubuntu:14.04
RUN apt-get update
RUN apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; apache2
RUN apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; software-properties-common
RUN add-apt-repository &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; ppa:certbot/certbot
RUN apt-get update
RUN apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; python-certbot-apache
RUN a2enmod ssl
RUN service apache2 start
RUN cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/[DOMAIN].conf
RUN sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/\/etc\/ssl\/certs\/ssl-cert-snakeoil.pem/\/etc\/letsencrypt\/live\/[DOMAIN]\/cert.pem/g'&lt;/span&gt; /etc/apache2/sites-available/[DOMAIN].conf
RUN sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/\/etc\/ssl\/private\/ssl-cert-snakeoil.key/\/etc\/letsencrypt\/live\/[DOMAIN]\/privkey.pem/g'&lt;/span&gt; /etc/apache2/sites-available/[DOMAIN].conf
RUN sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/#SSLCertificateChainFile/SSLCertificateChainFile/g'&lt;/span&gt; /etc/apache2/sites-available/[DOMAIN].conf
RUN sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/\/etc\/apache2\/ssl.crt\/server-ca.crt/\/etc\/letsencrypt\/live\/[DOMAIN]\/fullchain.pem/g'&lt;/span&gt;  /etc/apache2/sites-available/[DOMAIN].conf

EXPOSE 22 80 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수작업을 최소화 하기 위해 Dockerfile에서 할 수 있는 모든 작업을 미리 하고 build명령을 통해 image를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; docker build &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;REPOSITORY]:[TAG] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dockerfile PATH]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;container-수작업-후-commit&quot;&gt;Container 수작업 후 commit&lt;/h2&gt;
&lt;p&gt;docker run 커맨드를 통해 컨테이너를 생성하고 추가 작업을 진행합니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 443:443 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER_NAME] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;REPOSITORY]:[TAG] /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컨테이너 안에서 아래 명령을 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$certbot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--apache&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DOMAIN] &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;E-MAIL] &lt;span class=&quot;nt&quot;&gt;--agree-tos&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$a2ensite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DOMAIN]
&lt;span class=&quot;nv&quot;&gt;$service&lt;/span&gt; apache2 reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‘https://[DOMAIN]/’ 에 접속하여 Apache가 정상적으로 뜨는지 확인하고 docker commit 명령을 통해 변경된 Image를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; docker commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AUTHOR_INFO] &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MESSAGE] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER_NAME] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;REPOSITORY]:[TAG]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;생성된-이미지를-통해-docker-실행및-apache-실행&quot;&gt;생성된 이미지를 통해 Docker 실행및 Apache 실행&lt;/h2&gt;
&lt;p&gt;docker run 커맨드를 통해 컨테이너를 생성하되 Apache 자동실행 옵션은 start/stop 시에도 오류없이 동작하기 위해 추가 아규먼트 없이 기본 생성후 컨테이너를 내리고 실제 컨테이너 부팅시 start 커맨드와 함께 exec 커맨드를 통해 추가로 Apache를 실행할 수 있도록 shell 스크립트 파일을 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;create-container.sh]
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER_NAME] &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 443:443 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;REPOSITORY]:[TAG]
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker stop &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER_NAME]    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;run-container.sh]
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
nohup &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker start &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER_NAME] &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER_NAME] /bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/sbin/apache2ctl -D FOREGROUND'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;certbot : &lt;a href=&quot;https://certbot.eff.org/#ubuntutrusty-apache&quot;&gt;https://certbot.eff.org/#ubuntutrusty-apache&lt;/a&gt;    &lt;br /&gt;
[Docker] Container run 이야기 :  &lt;a href=&quot;https://bestna.wordpress.com/2014/11/10/docker-container-run-%EC%9D%B4%EC%95%BC%EA%B8%B0/&quot;&gt;https://bestna.wordpress.com/2014/11/10/docker-container-run-%EC%9D%B4%EC%95%BC%EA%B8%B0/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>하노이탑 알고리즘 Java 샘플</title>
   <link href="https://jistol.github.io/algorithm/2017/03/28/hanoi/"/>
   <updated>2017-03-28T00:00:00+00:00</updated>
   <id>https://jistol.github.io/algorithm/2017/03/28/hanoi</id>
   <content type="html">&lt;p&gt;재귀호출 알고리즘중 대표격인 하노이탑 알고리즘에 대한 Java 샘플입니다.  &lt;br /&gt;
하노이탑에 대한 설명은 워낙 많기 때문에 아래 링크로 대체합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%98%EB%85%B8%EC%9D%B4%EC%9D%98_%ED%83%91&quot;&gt;하노이탑 - 위키백과&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이-방식&quot;&gt;문제 풀이 방식&lt;/h2&gt;
&lt;p&gt;다양한 원리와 방식에 대한 설명들이 많은데 저는 다음과 같이 단순히 생각해보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/hanoi/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 하노이탑중 4번 블럭을 3번째 위치로 옮기기 위해서는 아래와 같이 1,2,3번블럭을 모두 2번째 위치로 옮겨두면 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/hanoi/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 위 그림처럼 3번 블럭을 2번째 위치로 옮기기 위해서는 1,2,번블럭을 아래와 같이 3번 위치에 옮기면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/hanoi/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 하나의 블럭을 옮기기 위한 원리는 “해당 블럭 위에 있는 블럭을 임시 위치에 두고 해당 블럭을 옮긴다”가 되며 그 원리를 구현한 소스는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;moveBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moveBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;destStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 로직을 실행하면 아래와 같이 동작하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/hanoi/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전체소스 경로 : (https://github.com/jistol/sample-algorithm/tree/master/hanoi)[https://github.com/jistol/sample-algorithm/tree/master/hanoi]&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Markdown syntax highlight</title>
   <link href="https://jistol.github.io/etc/2017/03/27/markdown-highlight/"/>
   <updated>2017-03-27T00:00:00+00:00</updated>
   <id>https://jistol.github.io/etc/2017/03/27/markdown-highlight</id>
   <content type="html">&lt;p&gt;기존 Github Page에서 코드라인의 문법 하이라이팅 방법은 아래 방법을 사용했었습니다.&lt;/p&gt;

&lt;p&gt;{% highlight java %}   &lt;br /&gt;
public static void main(String… args)   &lt;br /&gt;
{   &lt;br /&gt;
    System.out.println(“Hello World.”)   &lt;br /&gt;
}  &lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;위 방식은 Jekyll에서 사용할 수 있는 liquid tag 방식으로 이렇게 사용할 경우 Jekyll서버상에서는 예쁘게 변경되어 보이나, 문서 작업시 Atom Editor의 미리보기에서는 아래와 같이 문자열로 보이게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/markdown-highlight/1.png&quot; alt=&quot;liquid tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Atom Editor 미리보기에서도 하이라이팅된 코드를 보고 싶을 경우 아래와 같이 코드블럭을 통해 쓸 수 있습니다.&lt;/p&gt;

&lt;p&gt;```java  &lt;br /&gt;
public static void main(String… args)   &lt;br /&gt;
{   &lt;br /&gt;
    System.out.println(“Hello World.”)   &lt;br /&gt;
}  &lt;br /&gt;
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/markdown-highlight/2.png&quot; alt=&quot;another style&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용가능한 하이라이팅 포맷은 c, java, bash, sql, html, js, scala, xml… 등 다양하며 전체 포맷은 &lt;a href=&quot;https://support.codebasehq.com/articles/tips-tricks/syntax-highlighting-in-markdown&quot;&gt;Syntax highlighting in markdown&lt;/a&gt; 링크를 참고 하시기 바랍니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) SpringData REST 소개 및 샘플</title>
   <link href="https://jistol.github.io/java/2017/03/24/spring-data-rest-introduce-and-sample/"/>
   <updated>2017-03-24T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/03/24/spring-data-rest-introduce-and-sample</id>
   <content type="html">&lt;p&gt;다른 작업을 하려고 Spring Initializr에서 프로젝트 생성중 “Rest Repository”라는 Dependency항목이 있어 먼가 하고 보다가 서칭한 내용을 정리해보았습니다.    &lt;br /&gt;
아래 내용에 대한 샘플은 다음 주소에서 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jistol/sample/tree/master/ex-springdata-rest-sample&quot;&gt;https://github.com/jistol/sample/tree/master/ex-springdata-rest-sample&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;springdata-rest&quot;&gt;SpringData REST&lt;/h2&gt;
&lt;p&gt;SpringData REST는 SpringData프로젝트의 서브 프로젝트로 Repository의 설정만으로 REST API 서버를 구성해주는 신박한 기능입니다. &lt;br /&gt;
사용자는 Entity 클래스와 Repository 인터페이스만 작성하면 나머지 CRUD 작업은 모두 알아서 RESTful하게 생성됩니다.&lt;/p&gt;

&lt;p&gt;SpringData REST의 주요 기능은 Data Repository로부터 Resource를 추출하는 것으로 핵심은 Repository 인터페이스입니다.  &lt;br /&gt;
예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderRepository&lt;/code&gt;와 같은 Repository인터페이스가 있을 경우 소문자의 복수형 resource를 뽑아내어 &lt;code class=&quot;highlighter-rouge&quot;&gt;/orders&lt;/code&gt; 를 만듭니다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/orders/{id}&lt;/code&gt; 하위에 각 item을 관리할 수 있는 resource를 추출해 냅니다.&lt;/p&gt;

&lt;h2 id=&quot;시작하기&quot;&gt;시작하기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt;페이지에서 아래와 같이 Dependency를 선택하고 “Generate Project”를 눌러 zip으로 다운 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/1.png&quot; alt=&quot;project configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;압축을 풀어 프로젝트의 pom.xml파일을 보면 아래와 같이 Dependency가 포함되 있는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-rest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-data-rest-hal-browser&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.h2database&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;h2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;SpringData REST 자체가 어떤 DB를 쓸 지에 대한 설정을 포함하고 있지 않기 때문에 따로 H2 DB를 사용하도록 추가해주었으며 구축된 REST를 쉽게 테스트 해보기 위해 HAL Browser를 추가하였습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;를 설정합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# SpringData REST의 기본 context path
&lt;/span&gt;    &lt;span class=&quot;py&quot;&gt;spring.data.rest.basePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;api&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# JPA 설정
&lt;/span&gt;    &lt;span class=&quot;py&quot;&gt;spring.jpa.hibernate.ddl-auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;spring.jpa.show-sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# H2 DB설정
&lt;/span&gt;    &lt;span class=&quot;py&quot;&gt;spring.datasource.url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jdbc:h2:file:./db/devdb;AUTO_SERVER=TRUE&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;spring.datasource.username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;spring.datasource.password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;spring.datasource.driver-class-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.h2.Driver&lt;/span&gt;

    &lt;span class=&quot;py&quot;&gt;spring.h2.console.enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;spring.h2.console.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/console&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Entity는 장바구니(Cart)클래스와 물건(Item)클래스를 만들도록 하겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cart&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cart&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CART_ID&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고 각 Entity의 Repository 인터페이스를 생성합니다.  &lt;br /&gt;
SpringData REST Documentation 사이트에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CrudRepository&lt;/code&gt;를 상속하도록 예제가 나오지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;JpaRepository&lt;/code&gt;를 이용해도 무방합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CartRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;    

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;코딩 할 작업은 모두 끝났습니다. 이제 돌려봅시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;    mvn clean package spring-boot:run
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/2.png&quot; alt=&quot;project run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실행 로그를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/api&lt;/code&gt;로 시작하는 Mapping정보들이 만들어지는것을 볼 수 있습니다.
HAL Browser를 통해 실제 Request를 날려봅시다. 아래 URL로 접속합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:8080/api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/3.png&quot; alt=&quot;HAL Browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Explorer에서 직접 주소를 쳐서 호출할 수도 있고 아래 Links를 통해 호출 할 수도 있습니다. &lt;br /&gt;
Links항목중 Carts의 get버튼을 클릭해보면 현재 Cart목록이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/4.png&quot; alt=&quot;Cart Empty List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재는 값이 비어 있는데 Cart값을 하나 넣어보겠습니다. Carts의 non-get버튼을 부르면 Create/Update할 수 있는 화면이 뜹니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/5.png&quot; alt=&quot;Cart Insert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 Cart목록을 호출해보면 아래와 같이 입력한 Cart가 조회됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/6.png&quot; alt=&quot;Cart Non-Empty List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/api/{repository}/{id}&lt;/code&gt;형태로 단일 목록도 조회 가능합니다. &lt;br /&gt;
아래는 Cart의 1번 목록을 조회한 결과 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/spring-data-rest-introduce-and-sample/7.png&quot; alt=&quot;Cart 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 외의 CRUD 항목도 자동으로 생성하여 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;p&gt;SpringData REST에서 설정 방식은 3가지가 있습니다. 단, Framework가 SpringBoot 1.2 이상 버전일 경우에만 1번 방식을 사용 가능합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;application.properties(xml,yaml…)에 설정하기&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;    &lt;span class=&quot;py&quot;&gt;spring.data.rest.basePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/api    &lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;spring.data.rest.defaultPageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10     &lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;@Configuration 사용하기&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomRestMvcConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RepositoryRestConfigurer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repositoryRestConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RepositoryRestConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureRepositoryRestConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RepositoryRestConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBasePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;RepositoryRestConfigurerAdapter를 상속받기&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomizedRestMvcConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RepositoryRestConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureRepositoryRestConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RepositoryRestConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBasePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;설정 항목은 아래 표를 참고하세요.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;basePath&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;root URI for Spring Data REST&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;defaultPageSize&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change default number of items served in a single page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;maxPageSize&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change maximum number of items in a single page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pageParamName&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change name of the query parameter for selecting pages&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;limitParamName&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change name of the query parameter for number of items to show in a page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sortParamName&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change name of the query parameter for sorting&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;defaultMediaType&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change default media type to use when none is specified&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;returnBodyOnCreate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change if a body should be returned on creating a new entity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;returnBodyOnUpdate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;change if a body should be returned on updating an entity&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring-data/rest/docs/2.6.1.RELEASE/reference/html/&quot;&gt;Spring Data REST - Reference Documentation 2.6.1.RELEASE&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Caused by: org.hibernate.AnnotationException: No identifier specified for entity</title>
   <link href="https://jistol.github.io/java/2017/03/24/jpa-troubleshooting-no-indentifier-entity/"/>
   <updated>2017-03-24T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/03/24/jpa-troubleshooting-no-indentifier-entity</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://penpen.tistory.com/entry/Spring-Data-JPA-REST&quot;&gt;Spring Data JPA + REST 소개&lt;/a&gt;블로그 글을 보고 10분만에 REST-API서비스를 만들수 있다는 “spring-data-rest” 샘플 코드를 만들어보던 중에 아래와 같은 오류를 만났습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: org.hibernate.AnnotationException: No identifier specified for entity: io.github.jistol.Article     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Article&lt;/code&gt;은 단순한 Entity 클래스로 소스는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;githug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jistol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fasterxml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jackson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonIgnore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Article&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonIgnore&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;article&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;왜 이게 오류가 나지? 라고 생각하며 이것저것 빼먹은게 있나 넣어보고 수정하던 찰라 아주 사소한 실수를 발견했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.springframework.data.annotation.Id;    (X)
import javax.persistence.Id;                      (O)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt;의 import문이 틀렸던 것입니다.  &lt;br /&gt;
사소한 부분이지만 생각없이 막 카피하다가 실수하기 딱 좋은 부분이라 메모해둡니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java 이전 JDK 다운로드 경로</title>
   <link href="https://jistol.github.io/java/2017/03/14/jdk-download-path/"/>
   <updated>2017-03-14T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/03/14/jdk-download-path</id>
   <content type="html">&lt;p&gt;예전엔 Oracle에서 이전 JDK 다운로드 경로를 “Previus Release”링크를 통해 제공했는데 오늘 들어가보니 없어졌더군요.  &lt;br /&gt;
대신 JDK다운로드 경로의 맨 하단에 “Java Archive”라는 항목으로 다운로드 링크를 제공합니다.(WARNING 경고와 함께..)   &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/jdk-download-path/2.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;찾아 찾아 갈 수 있긴 하지만 찾기 힘드니깐 링크를 적어 둡니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/archive-139210.html&quot;&gt;이전 JDK 다운받기 링크 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/jdk-download-path/1.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;추가로 최신 버전 JDK는 아래 링크에서 받을 수 있습니다.  &lt;br /&gt;
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java SE - Download&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) Spring Initializr - 프로젝트 쉽게 생성하기</title>
   <link href="https://jistol.github.io/java/2017/03/07/springboot-initilizr/"/>
   <updated>2017-03-07T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/03/07/springboot-initilizr</id>
   <content type="html">&lt;p&gt;SpringBoot를 이용하여 간단한 POC를 자주 진행하곤 했었는데 매번 Maven/Gradle 설정하고 프로젝트 구조 맞추고 하기가 번거로워 샘플 프로젝트를 하나 만들어두고 사용하고 있었습니다.  &lt;br /&gt;
그러던 와중에 &lt;strong&gt;&lt;a href=&quot;http://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt;&lt;/strong&gt;를 알게 되어 사용해봤는데 완전 신세계였습니다.&lt;/p&gt;

&lt;p&gt;초기화면은 아래와 같습니다.  &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-initilizr/1.png&quot; alt=&quot;spring-initializr-main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;빌드 툴은 Maven과 Gradle중에 선택할 수 있습니다.  &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-initilizr/2.png&quot; alt=&quot;spring-initializr-build-tool&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용할 SpringBoot Version을 선택하고,
&lt;img src=&quot;/assets/img/java/springboot-initilizr/3.png&quot; alt=&quot;spring-initializr-version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Group/Artifact를 지정하고,  &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-initilizr/4.png&quot; alt=&quot;spring-initializr-group-artifact&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용할 Dependencies를 추가로 선택할 수 있습니다. 키워드 자동완성식 검색을 제공하여 검색하기 편하네요 :)
&lt;img src=&quot;/assets/img/java/springboot-initilizr/5.png&quot; alt=&quot;spring-initializr-dependencies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;선택한 Dependencies는 아래와 같이 표시됩니다. &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-initilizr/6.png&quot; alt=&quot;spring-initializr-dependencies-list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Generate Project”버튼을 클릭하여 zip파일로 다운을 받고 압축을 풀어 &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;파일을 확인해보면 우아하게 Maven 설정이 되어있습니다.   &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-initilizr/7.png&quot; alt=&quot;spring-initializr-pom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 구조도 자동으로 잡아주고, 기본 설정파일도 자동으로 포함시켜줍니다.
&lt;img src=&quot;/assets/img/java/springboot-initilizr/8.png&quot; alt=&quot;spring-initializr-structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitignore&lt;/code&gt;파일까지 자동세팅 해주네요. IntelliJ사용자에겐 저거 세팅도 귀찮은데 세심함에 감동 :)
&lt;img src=&quot;/assets/img/java/springboot-initilizr/9.png&quot; alt=&quot;spring-initializr-gitignore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래 “Switch to the full version”을 클릭하면 좀 더 세밀한 설정이 가능합니다. &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-initilizr/10.png&quot; alt=&quot;spring-initializr-full-link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-initilizr/11.png&quot; alt=&quot;spring-initializr-full-screen&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) Remoting 예제 (RMI, HTTP)</title>
   <link href="https://jistol.github.io/java/2017/03/07/springboot-ex-remote/"/>
   <updated>2017-03-07T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/03/07/springboot-ex-remote</id>
   <content type="html">&lt;p&gt;Spring에서 RMI사용 예제는 많은데 SpringBoot에서 XML없이 사용하는 예제는 찾기 힘들더군요. &lt;br /&gt;
&lt;a href=&quot;https://earldouglas.com/posts/spring-remoting-annotation.html&quot;&gt;Annotation을 Customizing해서 사용하는 예제&lt;/a&gt;를 찾았는데 조금 쓰기 편하게 고쳐봤습니다.&lt;/p&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;
&lt;p&gt;Spring에서 지원하는 Remoting 중 HTTP/RMI 통신 예제만 작성하였습니다  &lt;br /&gt;
Bean등록방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;어노테이션을 사용하는 방법과 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Service&lt;/code&gt;로 등록한 Bean 객체를 커스텀 어노테이션을 적용하여 등록하는 방식으로 구현하였습니다.&lt;/p&gt;

&lt;p&gt;실제 서비스할 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultService&lt;/code&gt;인터페이스와 , &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultServiceImpl&lt;/code&gt;구현 객체로 아래와 같습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultService&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;defaultService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultService&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bean-어노테이션-사용방식&quot;&gt;@Bean 어노테이션 사용방식&lt;/h2&gt;
&lt;p&gt;RMI의 경우 ServiceName과 Port정보를 직접등록하나 HTTP는 Bean이름과 컨테이너의 포트정보를 그대로 사용합니다.&lt;/p&gt;

&lt;p&gt;아래 예제의 경우 다음과 같은 주소로 lookup됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RMI : rmi://127.0.0.1:1099/DefaultServiceRmiRemoteBean&lt;/li&gt;
  &lt;li&gt;HTTP : http://127.0.0.1:{server.port}/DefaultServiceHttpRemoteBean&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanPostProcessor&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RmiServiceExporter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;regRmiService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RmiServiceExporter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServiceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DefaultServiceRmiRemoteBean&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRegistryPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1099&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/DefaultServiceHttpRemoteBean&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpInvokerServiceExporter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;regHttpService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpInvokerServiceExporter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;커스터마이징-어노테이션-사용방식&quot;&gt;커스터마이징 어노테이션 사용방식&lt;/h2&gt;
&lt;p&gt;아래와 같이 Remoting 객체를 표시할 어노테이션을 생성합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteType&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Required&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;통신 프로토콜및 ServiceExporter를 구현하는 enum객체를 만듭니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HttpInvokerServiceExporter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serviceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpInvokerServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RMI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RmiServiceExporter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serviceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServiceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServicePort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FatalBeanException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exception initializing RmiServiceExporter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmiServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;@RemoteType&lt;/code&gt;어노테이션으로 다음과 같이 Service객체를 정의합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/DefaultServiceHttpRemote&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RemoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultServiceHttpRemoteImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultServiceImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DefaultServiceRmiRemote&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RemoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RMI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultServiceRmiRemoteImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultServiceImpl&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;서비스하는 객체인 &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultServiceImpl&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultService&lt;/code&gt;인터페이스에 정의하지 않고 상속받은 객체를 만드는 이유는 SpringBoot에서 해당 서비스를 직접 사용할 수 있도록 하기 위함입니다.&lt;/p&gt;

&lt;p&gt;Bean생성시 &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanPostProcessor&lt;/code&gt;를 이용하여 위 두 Remoting객체를 ServiceExporter객체로 변경해줍니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanPostProcessor&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RemoteType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnotationUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServiceExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;그-외-구현사항&quot;&gt;그 외 구현사항&lt;/h2&gt;
&lt;p&gt;동작 확인을 위해 호출 가능한 Controller를 아래와 같이 구현해 두었습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;io.jistol.sample.remote.controller.HttpController&lt;/code&gt;  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;io.jistol.sample.remote.controller.RmiController&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://127.0.0.1:{server.port}/{protocol}/service : DefaultServiceImpl을 직접 호출&lt;/li&gt;
  &lt;li&gt;http://127.0.0.1:{server.port}/{protocol}/bean : @Bean 어노테이션으로 구현한 객체를 이용하여 통신&lt;/li&gt;
  &lt;li&gt;http://127.0.0.1:{server.port}/{protocol}/extend : 커스터마이징 어노테이션으로 구현한 객체를 이용하여 통신&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 Controller를 호출하여 Test하는 단위테스트는 아래에 구현되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;io.jistol.sample.remote.test.SampleSpringbootRemoteApplicationTests&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;소스-링크&quot;&gt;소스 링크&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jistol/sample/tree/master/ex-springboot-remote&quot;&gt;ex-springboot-remote&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://earldouglas.com/posts/spring-remoting-annotation.html&quot;&gt;Custom annotation configuration for Spring Remoting&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>sudo 설정하기</title>
   <link href="https://jistol.github.io/linux/2017/02/23/sudo-edit/"/>
   <updated>2017-02-23T00:00:00+00:00</updated>
   <id>https://jistol.github.io/linux/2017/02/23/sudo-edit</id>
   <content type="html">&lt;h2 id=&quot;sudo의-필요성&quot;&gt;sudo의 필요성&lt;/h2&gt;
&lt;p&gt;Linux 환경에서 sudo는 root계정으로 로그인하지 않은 상태로 sudoers의 설정에 따라 특정 명령을 사용할 수 있도록 해줍니다.  &lt;br /&gt;
이에 따라 서버 관리자들이 root계정 사용을 최소화 하고 sudo를 이용하여 작업함으로써 누가 어떤 커맨드를 사용했는지 추적이 가능해집니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[acct 미설치시]
$ dpkg -l | grep acct
$ sudo apt-get install acct
[사용자 커맨드 추적]
$ lastcomm -u {사용자ID}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;설정-수정방법&quot;&gt;설정 수정방법&lt;/h2&gt;
&lt;p&gt;/etc/sudoers 에 각 사용자별 사용 가능한 설정이 포함되어 있으나 vi로 직접 수정하기 보다는 visudo 명령으로 수정하기를 권장합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ visudo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/linux/sudo-edit/1.png&quot; alt=&quot;visudo edit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용자-설정&quot;&gt;사용자 설정&lt;/h2&gt;
&lt;p&gt;특정 사용자에게 명령 권한을 설정할 때는 아래와 같이 설정 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(user) (host)=(runUser[:runGroup])  [option:](command)

# User privilege specification
root    ALL=(ALL:ALL) ALL
# kimjh 사용자는 password입력없이 모든 명령을 실행 할 수 있습니다.
kimjh   ALL=(ALL) NOPASSWD:ALL
# docker 계정은 localhost에서 vi명령어를 admin그룹의 kimjh 계정의 권한으로 실행할 수 있습니다.
docker  localhost=(kimjh:admin) /usr/bin/vi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;그룹-설정&quot;&gt;그룹 설정&lt;/h2&gt;
&lt;p&gt;특정 그룹에 명령 권한을 설정할 때는 아래와 같이 설정 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%(group) (host)=(runUser[:runGroup])  [option:](command)

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL
# docker 그룹에 속한 계정은 localhost에서 vi명령어를 admin그룹의 kimjh 계정의 권한으로 실행할 수 있습니다.
%docker  localhost=(kimjh:admin) /usr/bin/vi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;alias-설정&quot;&gt;Alias 설정&lt;/h2&gt;
&lt;p&gt;Alias는 특정 호스트나 유저, 커맨드등을 하나로 묶어 Alias형태로 제공하고 아래와 같은 형식으로 정의합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Alias_Type NAME = item1, item2 ....
Alias_Type NAME1 = item1, item2 .... : NAME2 = item3, item4 ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Alias_Type은 &lt;code class=&quot;highlighter-rouge&quot;&gt;User_Alias&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Runas_Alias&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Host_Alias&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmnd_Alias&lt;/code&gt;를 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;NAME은 대문자 영문, 숫자, 언더바(_)문자를 사용합니다.&lt;/li&gt;
  &lt;li&gt;같은 Alias_Type을 두번째 예시와 같이 세미콜론(:)을 이용하여 여러개의 이름을 지정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;user_alias&quot;&gt;User_Alias&lt;/h2&gt;
&lt;p&gt;특정 계정이나 그룹을 Alias로 지정하여 할 수 있으며 해당 Alias를 이용하여 여러 사용자의 권한을 제어할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User_Alias NAME = user1, user2 ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;user정보는 아래와 같이 사용 가능합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;userName&lt;/li&gt;
  &lt;li&gt;#uid&lt;/li&gt;
  &lt;li&gt;%groupName&lt;/li&gt;
  &lt;li&gt;%#gid&lt;/li&gt;
  &lt;li&gt;Other_User_Alias&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;! (해당 계정이 아닌 사용자)&lt;/p&gt;

    &lt;p&gt;# 계정명이 kimjh, uid가 1000, 그룹명이 docker, gid가 899이거나
  # 계정명이 guest, uid가 1001이 아닌 계정
  User_Alias MANAGER = kimjh, #1000, %docker, %#899, !guest, !#1001
  # 계정명이 agent이거나 MANAGER Alias에 속한 계정
  User_Alias AGENT = agent, MANAGER&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한 user정보에 특수문자가 포함되거나 공백이 포함될 경우 더블쿼터(“)로 묶어 사용하거나 백슬래쉬()를 이용할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;runas_alias&quot;&gt;Runas_Alias&lt;/h2&gt;
&lt;p&gt;어떤 계정의 권한으로 명령을 실행 할 지에 대한 Alias설정을 지정합니다. &lt;br /&gt;
아래 예제와 같이 설정 된 상태에서 docker계정으로 vi명령을 실행 할 경우 Runas_Alias에 설정된 계정으로 실행되게 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[/etc/sudoers]
# User privilege specification
docker ALL=(R_ROOT) NOPASSWD:/usr/bin/vi

docker@kimjh:$ sudo vi test
docker@kimjh:$ ls -atrl test
-rw-r--r-- 1 root root 22  2월 24 11:28 test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문법은 User_Alias와 동일하게 사용합니다.&lt;/p&gt;

&lt;h2 id=&quot;host_alias&quot;&gt;Host_Alias&lt;/h2&gt;
&lt;p&gt;특정 실행권한에 대한 host를 Alias로 설정하여 허용되지 않은 사용자가 원격 접속하여 실행하는 것을 방지하기 위해 지정합니다.  &lt;br /&gt;
아래 예제와 같이 설정 된 상태에서 docker계정은 211.63.24.9번 IP나 kimjh 호스트 서버에서만 vi명령을 실행 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[/etc/sudoers]
# Host alias specification
Host_Alias H_LOCAL = 211.63.24.9, kimjh

# User privilege specification
docker H_LOCAL=(ALL) NOPASSWD:/usr/bin/vi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cmnd_alias&quot;&gt;Cmnd_Alias&lt;/h2&gt;
&lt;p&gt;실행 명령어를 Alias로 지정할 수 있습니다.  &lt;br /&gt;
아래 예제와 같이 설정 된 상태에서 docker계정은 vi명령과 vim명령을 실행 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Cmnd alias specification
Cmnd_Alias CMD_VIM = /usr/bin/vi, /usr/bin/vim

# User privilege specification
docker    ALL=(ALL:ALL) CMD_VIM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://deois.tistory.com/42&quot;&gt;sudo 사용의 필요성&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=bestheroz&amp;amp;logNo=88266186&quot;&gt;Linux/Unix로그 파일&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://egloos.zum.com/taehyo/v/4200593&quot;&gt;sudoers 파일&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://linux.die.net/man/5/sudoers&quot;&gt;sudoers(5) - Linux man page&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-edit-the-sudoers-file-on-ubuntu-and-centos&quot;&gt;How To Edit the Sudoers File on Ubuntu and CentOS&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TED영상을 보고 30일 동안 매일 블로그 포스팅 도전 후기</title>
   <link href="https://jistol.github.io/etc/2017/02/17/etc-ted-while-30-days/"/>
   <updated>2017-02-17T00:00:00+00:00</updated>
   <id>https://jistol.github.io/etc/2017/02/17/etc-ted-while-30-days</id>
   <content type="html">&lt;p&gt;아래 TED의 영상을 보고 ‘30일동안 매일 블로그 포스팅하기’에 도전한 후기입니다.&lt;/p&gt;

&lt;h2 id=&quot;ted---맷-커츠-30일동안-새로운-것-도전하기&quot;&gt;TED - “맷 커츠: 30일동안 새로운 것 도전하기”&lt;/h2&gt;
&lt;iframe src=&quot;https://embed.ted.com/talks/matt_cutts_try_something_new_for_30_days&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;시작&quot;&gt;시작&lt;/h2&gt;
&lt;p&gt;출근길에 TED영상을 보다가 3분채 안되는 이 영상을 보게 되었습니다. &lt;br /&gt;
30일이면 나 자신을 바꾸기에 충분한 시간이라는 말에 홀려 가볍게 해 볼 수 있는게 무엇이 있을까 생각하다가 근래 만들었던 GitHub Page에 기술 포스팅을 해보는 것으로 정했습니다.  &lt;br /&gt;
&lt;em&gt;지금 생각해보면 절대 가볍게 할 수 있는 일은 아니였습니다.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;고비&quot;&gt;고비&lt;/h2&gt;
&lt;p&gt;첫 날은 기존부터 개념 정리차 공부하고 있던 &lt;a href=&quot;https://jistol.github.io/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B3%B5%ED%95%99/2017/01/18/agile/&quot;&gt;Agile관련 포스팅&lt;/a&gt;을 진행했습니다.  &lt;br /&gt;
글 쓰는게 익숙하지 않았지만 그래도 공부했던 내용들이 있어 나름 어렵지 않게 포스팅 했습니다. 하지만 고비는 그 이후였습니다. &lt;br /&gt;
아무 글이나 쓰는게 아닌 기술 포스팅을 하려니 먼저 공부를 해야했고 그 내용을 정리해서 글을 올려야 했습니다.  &lt;br /&gt;
에버노트에 쓰는건 나만 알아보게 대충 적어놓으면 되는 것이였으나 포스팅은 인터넷에 검색되어 남도 보게 되는 글이기 때문에 몇 번이고 사실 검증을 해야했고 두서 없이 필요한 글만 올릴 수도 없었습니다. 게다가 코딩은 익숙했지만 정리해서 포스팅하는것은 익숙하지 않아 생각보다 많은 시간이 걸렸습니다.(이 때문에 야근도 하게 되었죠…)&lt;/p&gt;

&lt;p&gt;한 두번은 쉬워 보이는 일도 매일 쭉 한다고 정해놓고 하게 되니 절대 쉬운게 아니였습니다. 특히 “매일”이라는 조건이 가장 어려웠습니다.&lt;/p&gt;

&lt;h2 id=&quot;변화&quot;&gt;변화&lt;/h2&gt;
&lt;p&gt;“공부-일-포스팅”을 동시에 하기 위해 매일 1시간, 최소 30분 이상 일찍 출근해서 공부했으며 출퇴근 길에도 항상 윈탭으로 기술문서를 읽고 검색하게 되었습니다.  &lt;br /&gt;
일하는 도중에도 “이건 오늘 정리해서 포스팅하자.”하는 부분을 다시 공부하고 검증하게 되었으며 일이 바쁠땐 집에가서 새벽까지 문서를 쓰기도 했습니다.  &lt;br /&gt;
매일 글을 쓰다보니 처음보다 생각의 정리나 글 쓰는 요령이 붙어 속도가 나기 시작하고 기술에 대해서도 필요한 부분만 확인하는것이 아니라 해당 기술에 대한 다른 부분까지 같이 검토하게 되는 습관이 생겼습니다.  &lt;br /&gt;
출퇴근길에 의미없이 하던 인터넷 서핑도 자기 개발에 투자하게 되었으며, 에버노트에 간단히 메모해두고 잊혀졌던 했던 잡 지식들도 차츰 정리할 수 있었습니다.&lt;/p&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;p&gt;이 포스팅을 끝으로 30일간의 도전은 성공하였으며 오늘 저녁은 아름답게 치맥을 먹으며 마무리 할 수 있을것 같습니다.
30일간의 도전으로 얻었다고 생각드는 것은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;글쓰기에 대한 부담감이 없어지고 글 쓰는 실력이 늘었습니다.&lt;/li&gt;
  &lt;li&gt;공부했거나 사용한 기술에 대해 한번 더 생각하고 정리하는 습관이 들었습니다.&lt;/li&gt;
  &lt;li&gt;매일 공부하는 습관을 들이고 발전적인 삶을 사는 것에 대한 보람을 느꼈습니다.&lt;/li&gt;
  &lt;li&gt;기술에 대해 누군가와 논의할 때 좀 더 생각을 정리하고 더 잘 표현하게 된 것 같습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;부작용&quot;&gt;부작용&lt;/h2&gt;
&lt;p&gt;“매일”이라는 압박 때문에 아래와 같은 부작용이 있었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공부한 내용을 포스팅하지 않고 포스팅을 하기 위한 공부를 할 때가 있었습니다.(주객전도…)&lt;/li&gt;
  &lt;li&gt;하루에 하나씩 올려야 하기 때문에 깊이 있는 내용을 쓰기가 어려웠습니다.&lt;/li&gt;
  &lt;li&gt;정말 공부를 할 수 없는 상황이 됬을때를 대비해 미리 포스팅을 축적하기도 했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;회고&quot;&gt;회고&lt;/h2&gt;
&lt;p&gt;이번 도전을 하면서 최근 한달은 정말 열심히 공부했던것 같습니다. 흡사 시험전날 벼락치기를 30일동안 한 기분같기도 합니다.  &lt;br /&gt;
일이 바빠져서 포기하려 할 때도 있었으나 와이프가 옆에서 응원해주어 포기하지 않고 끝까지 해 낼수 있었고 작은 것 하나를 도전했는데 정말 큰 결실을 맺은것 같습니다.
이 도전은 끝났지만 30일동안의 변화를 경험했기 때문에 다른 도전도 계획해보려합니다.  &lt;br /&gt;
이 포스팅을 보시는 분들도 작은것 하나라도 도전해보시면 나 자신을 변화 시키는데 큰 도움이 될 거라 생각합니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) Enum 사용하기 - `@Enumerated`</title>
   <link href="https://jistol.github.io/java/2017/02/16/springboot-enumerated/"/>
   <updated>2017-02-16T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/16/springboot-enumerated</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://okky.kr/article/374496&quot;&gt;OKKY-enum 활용에서 enum 공통모듈까지&lt;/a&gt; 글을 보고 괜찮다 싶어서 제가 만들어 놨던 프로젝트에 적용해 보았습니다.&lt;/p&gt;

&lt;p&gt;우선 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;을 선언했습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;대형&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// name : L, ordinal : 0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;중형&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// name : M, ordinal : 1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;소형&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// name : S, ordinal : 2&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;StoreTypeCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Entity객체를 통해 테이블 컬럼에 ‘L’, ‘M’, ‘S’값을 저장할 예정이며 아래와 같이 설정하였습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Enumerated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enum_code&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Enumerated&lt;/code&gt; 어노테이션을 선언해주면 해당 컬럼은 &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;객체를 이용하여 저장하겠다고 선언이 되며 value값은 아래와 같이 설정 할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EnumType.ORDINAL
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ordinal()&lt;/code&gt;메서드를 이용하여 컬럼값을 저장합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EnumType.STRING
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;name()&lt;/code&gt;메서드를 이용하여 컬럼값을 저장합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repository에서는 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;객체를 이용하여 불러오기가 가능해집니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IJpaRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByEnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByEnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Controller에서도 자동 맵핑이 가능한데 &lt;code class=&quot;highlighter-rouge&quot;&gt;@InitBinder&lt;/code&gt;를 이용할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;nd&quot;&gt;@ControllerAdvice&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonDataBinder&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@InitBinder&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enumCodeBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertyEditorSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParamForm&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeTypeCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enumCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyEntityController&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParamForm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByEnumCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 설정하면 ‘/list?enumCode=L’과 같이 호출시 enumCode는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@InitBinder&lt;/code&gt;구문에 의해 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;객체로 변경되어 파라메터 맵핑됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://okky.kr/article/374496&quot;&gt;OKKY-enum 활용에서 enum 공통모듈까지&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://tomee.apache.org/examples-trunk/jpa-enumerated/README.html&quot;&gt;JPA and Enums via @Enumerated&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gradle 설치 및 초기화</title>
   <link href="https://jistol.github.io/buildtool/2017/02/15/buildtool-gradle-setup/"/>
   <updated>2017-02-15T00:00:00+00:00</updated>
   <id>https://jistol.github.io/buildtool/2017/02/15/buildtool-gradle-setup</id>
   <content type="html">&lt;p&gt;Gradle에 대해서 공부한 내용을 요약한 포스팅입니다.&lt;/p&gt;

&lt;h2 id=&quot;gradle-이란&quot;&gt;Gradle 이란?&lt;/h2&gt;
&lt;p&gt;보통 Maven의 장점과 Ant의 장점을 합쳐 놓은 빌드 툴로 불리우는데 XML대신 Groovy DSL로 작성되어 라인수가 훨씬 적고 task단위로 만들어 실행 할 수 있으며 개발자가 필요한 빌드로직을 조합하여 사용 가능합니다. 그리고 Gradle Wrapper를 사용하여 Gradle이 설치되지 않은 환경에서도 빌드 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;설치방법&quot;&gt;설치방법&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gradle.org/install#manually&quot;&gt;Gradle 수동설치&lt;/a&gt; 링크에서 Install 설치파일을 다운받아 풀고 &lt;code class=&quot;highlighter-rouge&quot;&gt;GRADLE_HOME&lt;/code&gt;, 실행파일 경로를 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;에 잡아주면 됩니다.   &lt;br /&gt;
추가로 윈도우 환경에서 UTF-8 빌드환경을 만들기 위해 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;GRADLE_OPTS&lt;/code&gt;을 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRADLE_OPTS=&quot;-Dfile.encoding=UTF-8&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;초기화하기cmd&quot;&gt;초기화하기(cmd)&lt;/h2&gt;
&lt;p&gt;명령어를 통해 gradle을 초기화 하는 방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle init --type java-library
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;basic&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;java-library&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;groovy-library&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scala-library&lt;/code&gt;가 있습니다.  &lt;br /&gt;
위와 같이 실행하면 gradle의 기본 설정 생성과 함께 src 기본폴더가 생성됩니다.(자세한 구조는 아래 IDE에서…)&lt;/p&gt;

&lt;h2 id=&quot;초기화하기intellij&quot;&gt;초기화하기(IntelliJ)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Gradle타입의 새 프로젝트를 선택하고 Next를 클릭합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildtool/buildtool-gradle-setup/1.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GroupId, ArtifactId를 선택하고 Next를 클릭합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildtool/buildtool-gradle-setup/2.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필요한 선택항목을 선택 후 Next를 클릭합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildtool/buildtool-gradle-setup/3.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use auto-import : dependency 추가시 자동으로 import하는 옵션입니다.&lt;/li&gt;
  &lt;li&gt;Create directories for empty content roots automatically : 이 항목을 선택하면 자동으로 src폴더와 하위 구조가 생성됩니다.&lt;/li&gt;
  &lt;li&gt;Use default gradle wrapper : Gradle Wrapper를 생성해줍니다.(gradlew.bat …)&lt;/li&gt;
  &lt;li&gt;Use gradle wrapper task configuration : Gradle Wrapper를 task를 통해 실행할 수 있도록 스크립트를 만듭니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildtool/buildtool-gradle-setup/6.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use local gradle distribution : 로컬에 설치한 gradle경로를 잡아줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;선택후 Finish를 누르면 다음과 같이 gradle기반 JavaProject가 생성됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildtool/buildtool-gradle-setup/4.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildtool/buildtool-gradle-setup/5.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;※ 위 커맨드 명령어로 만들때도 같은 구조로 생성됩니다.&lt;/p&gt;

&lt;p&gt;그 외에 template을 기반으로 하는 프로젝트 생성 방법은 &lt;a href=&quot;https://slipp.net/wiki/pages/viewpage.action?pageId=11632703#id-1.Gradle%EC%84%A4%EC%B9%98%EB%B0%8F%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%83%9D%EC%84%B1-Gradle%EA%B8%B0%EB%B0%98%EC%9D%98%ED%85%9C%ED%94%8C%EB%A6%BF%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%83%9D%EC%84%B1&quot;&gt;Gradle 기반의 템플릿 프로젝트 생성&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/gradle&quot;&gt;권남 - Gradle&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://gradle.org/install&quot;&gt;Gradle Build - Installation&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>대용량 처리를 위한 서비스 구성</title>
   <link href="https://jistol.github.io/architecture/2017/02/14/architecture-traffic-issue/"/>
   <updated>2017-02-14T00:00:00+00:00</updated>
   <id>https://jistol.github.io/architecture/2017/02/14/architecture-traffic-issue</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/img/architecture/architecture-traffic-issue/1.png&quot; alt=&quot;일반적인 서비스의 기본구성&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적인 서비스 구성이 위와 같은 상황에서 Client가 늘어날 경우 웹 서버나 DB서버에서 병목현상이 발생할 수 있으며 병목지점별로 해결 방안이 필요합니다.&lt;/p&gt;

&lt;h2 id=&quot;web서버-확장&quot;&gt;Web서버 확장&lt;/h2&gt;
&lt;p&gt;Web서버가 stateless한 구조일 경우 아래와 같이 다수의 Web서버를 두어 부하를 분산 시킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/architecture/architecture-traffic-issue/2.png&quot; alt=&quot;병목현상해결을 위한 웹 서버의 확장&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;stateful : 서버쪽에 client와 server의 연속된 동작 상태정보를 저장하는 형태  &lt;br /&gt;
stateless : 서버쪽에 client와 server의 연속된 동작 상태정보를 저장하는 않는 형태&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;db-확장&quot;&gt;DB 확장&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/architecture/architecture-traffic-issue/3.png&quot; alt=&quot;일반적인 서비스의 DB구성&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DB구성이 위와 같을 경우 성능향상을 위해 “Scale Up”과 “Scale Out”을 고려해 볼 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;scale up : 장비의 성능을 높여 성능향상   &lt;br /&gt;
scale out : 장비의 개수를 늘려 성능향상&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;db-readwrite-분리분산&quot;&gt;DB Read/Write 분리,분산&lt;/h2&gt;
&lt;p&gt;대부분의 서비스는 Read가 Write보다 대략 7:3, 8:2비율로 더 많은데 이럴때 Read/Write DB를 분리하면 DB서버의 부하를 줄일 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/architecture/architecture-traffic-issue/4.png&quot; alt=&quot;Read/Write DB 분리&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 Master DB를 Write, Replication되는 Slave DB를 Read로 사용하는데 기본적으로 4대로 구성합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Master : Write   &lt;br /&gt;
Slave 1,2,3 : Read   &lt;br /&gt;
1번서버 장애시 2번서버는 서비스를 하며 3번 서버는 서비스를 중단하고 1번서버 복구를 위한 DB복사를 진행해야합니다.   &lt;br /&gt;
서비스중인 DB에서 복사시 부하가 가중되므로 여분의 DB가 필요합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;eventual-consistency&quot;&gt;Eventual Consistency&lt;/h2&gt;
    &lt;p&gt;Master의 내용을 Slave로 Replication하는 과정은 동기/비동기 방식이 있는데 비동기식일 경우 데이터 불일치가 발생할 수 있습니다.  &lt;br /&gt;
불일치하더라도 시간이 지나면 데이터가 같아지는데 이를 &lt;strong&gt;“Eventual Consistency”&lt;/strong&gt;라고 합니다.  &lt;br /&gt;
데이터 일관성이 중요한 경우 Read를 분리할때 위와 같은 문제점을 인지해야합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read/Write DB 분기방식으로는 아래와 같은 방법이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DBProxy 서버를 이용
    &lt;ul&gt;
      &lt;li&gt;프록시 서버가 쿼리를 분석하여 select시는 Read서버, 그 외엔 Master서버로 분기해줍니다.&lt;/li&gt;
      &lt;li&gt;MySql Proxy, MaxScale …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySql Replication Jdbc Driver 사용
    &lt;ul&gt;
      &lt;li&gt;Jdbc Driver상에서 내부적으로 readonly 옵션에 따라 Master/Slave장비를 선택해줍니다.&lt;/li&gt;
      &lt;li&gt;“&lt;a href=&quot;http://gywn.net/2012/07/mysql-replication-driver-error-report/#MySQL에서ReplicationDriver사용시장애취약점리포트-기능테스트&quot;&gt;MySQL에서ReplicationDriver사용시장애취약점리포트-기능테스트&lt;/a&gt;” 포스팅을 보시면 취약점에 대한 테스트 결과및 Oracle측의 답변이 있습니다.(2012년도 포스팅이니 현재는 해결이 됬는지 모르겠습니다.)&lt;/li&gt;
      &lt;li&gt;“&lt;a href=&quot;http://kwonnam.pe.kr/wiki/database/mysql/jdbc#replication_jdbc_driver&quot;&gt;권남 - MySQL JDBC&lt;/a&gt;“에도 역시 여러가지 문제점들이 도출되어 있습니다.&lt;/li&gt;
      &lt;li&gt;결론적으로 사용 안하는 쪽이 나을듯 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring LazyConnectionDataSourceProxy + AbstractRoutingDataSource 사용
    &lt;ul&gt;
      &lt;li&gt;Spring에서 Transaction readonly 옵션을 사용하여 분기하는 방법입니다.&lt;/li&gt;
      &lt;li&gt;AbstractRoutingDataSource : 여러개의 DateSource를 하나로 묶고 자동 분기처리&lt;/li&gt;
      &lt;li&gt;LazyConnectionDataSourceProxy : 트랜잭션 시작되더라도 실제 커넥션이 필요한 경우에 데이터소스에서 커넥션을 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;write증가시-파티셔닝&quot;&gt;Write증가시 파티셔닝&lt;/h2&gt;
&lt;p&gt;write가 증가하게 되면 Master로부터 Replication을 받기 위해 Slave의 write IO가 증가하게 됩니다.     &lt;br /&gt;
그렇게 되면 Read Slave를 아무리 늘려도 성능개선이 미미해지는데 이럴때는 Write를 줄이는 파티셔닝을 해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/architecture/architecture-traffic-issue/5.png&quot; alt=&quot;Read/Write DB 분리&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;파티셔닝partitioninig&quot;&gt;파티셔닝(Partitioninig)&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;성능,가용성,정비용이성을 목적으로 논리적 데이터 요소들을 다수의 테이블로 쪼개는 행위&lt;/li&gt;
      &lt;li&gt;수직분할(Vertical Partitioninig)
        &lt;ul&gt;
          &lt;li&gt;테이블의 Column 단위로 파티셔닝하는 방법&lt;/li&gt;
          &lt;li&gt;스키마가 서로 달라집니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;수평분할(Sharding : Horizontal Partitionning)
        &lt;ul&gt;
          &lt;li&gt;테이블의 Row 단위로 파티셔닝하는 방법&lt;/li&gt;
          &lt;li&gt;스키마는 동일합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;파티션-방법&quot;&gt;파티션 방법&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;수동 파티셔닝 : 분석된 테이블 정보를 이용하여 파티션 뷰를 직접 생성&lt;/li&gt;
      &lt;li&gt;파티션 테이블 :
        &lt;ul&gt;
          &lt;li&gt;Range 파티셔닝
            &lt;ul&gt;
              &lt;li&gt;특정 기간 별로 파티션을 나눔&lt;/li&gt;
              &lt;li&gt;주로 날짜조건 사용&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Hash 파티셔닝
            &lt;ul&gt;
              &lt;li&gt;Hash함수에 적용한 결과값이 같은 레코드별로 나눔&lt;/li&gt;
              &lt;li&gt;변별력 좋고 데이터분포가 고른 컬럼을 선정해야 효과적&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;List 파티셔닝
            &lt;ul&gt;
              &lt;li&gt;사용자에 의해 미리 정해진 그룹핑 기준에 따라 분할&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;결합 파티셔닝
            &lt;ul&gt;
              &lt;li&gt;위 파티션 기법을 조합하여 사용&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;자세한 설정방법은 &lt;a href=&quot;http://wiki.gurubee.net/pages/viewpage.action?pageId=26742648&quot;&gt;구루비 DB 스터디 - 1. 테이블 파티셔닝&lt;/a&gt;을 참조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=E1904063627&quot;&gt;대용량 서버구축을 위한 Memcached와 Redis&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;http://kwon37xi.egloos.com/5364167&quot;&gt;Java 에서 DataBase Replication Master/Slave (write/read) 분기 처리하기&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://gywn.net/2012/07/mysql-replication-driver-error-report/&quot;&gt;MySQL에서 Replication Driver 사용 시 장애 취약점 리포트&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;http://kwonnam.pe.kr/wiki/database/mysql/jdbc&quot;&gt;권남 - MySQL JDBC&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;http://www.programcreek.com/java-api-examples/index.php?source_dir=replication-datasource-master/src/test/java/kr/pe/kwonnam/replicationdatasource/config/WithRoutingDataSourceConfig.java&quot;&gt;H2DB - LazyConnectionDataSourceProxy 예제&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;http://wiki.gurubee.net/pages/viewpage.action?pageId=26742648&quot;&gt;구루비 DB 스터디 - 1. 테이블 파티셔닝&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;http://bysql.net/index.php?document_srl=15154&amp;amp;mid=w201101B&quot;&gt;오라클 성능 고도화 원리와 해법 2 [11-1B]&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(JPA,SpringData) ORM 기본 개념 정리</title>
   <link href="https://jistol.github.io/java/2017/02/13/jpa-orm-summary/"/>
   <updated>2017-02-13T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/13/jpa-orm-summary</id>
   <content type="html">&lt;p&gt;여러 게시글들을 기반으로 정리해 보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;ormobject-relational-mapping이란&quot;&gt;ORM(Object-Relational Mapping)이란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;객체(Object)와 관계형 데이터베이스(Relational)의 관계 설정을 자동으로 처리해줍니다.&lt;/li&gt;
  &lt;li&gt;실제 데이터와 객체와의 개념적 일치하지 않는 부분을 자동으로 매핑해주는데 ResultSet을 받아 Bean에 열심히 넣어주던것을 대신해주는 것과 비슷하게 생각하면 됩니다.&lt;/li&gt;
  &lt;li&gt;관계형 데이터베이스의 데이터를 객체형 데이터처럼 사용할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;orm의-장점&quot;&gt;ORM의 장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 종류에 제약을 최대한 받지 않습니다.(Native Query 사용시 무효)&lt;/li&gt;
  &lt;li&gt;객체 중심으로 설계하기 때문에 좀 더 직관적이고 빠르게 개발할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;객체 지향적 설계로 인해 좀 더 직관적이고 비지니스로직에 집중할 수 있으며 생산성,유지보수성이 향상됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;orm의-단점&quot;&gt;ORM의 단점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모든 기능을 ORM으로만 작성하기에는 쿼리가 복잡해지면 쓰기 어렵습니다.(통계, 데이터분석등…)&lt;/li&gt;
  &lt;li&gt;성능이슈, 몇몇 글에 따르면 ORM을 사용시 느리다는 평이 있습니다.&lt;/li&gt;
  &lt;li&gt;SP를 많이 쓰거나 기존 SQL문이 많은 프로그램에는 객체지향의 장점을 활용하기 어렵습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;orm에-적합한-모델&quot;&gt;ORM에 적합한 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Entity를 개별적으로 업데이트&lt;/li&gt;
  &lt;li&gt;간헐적으로 Set기반 작업 수행 (ex: 고객 레코드및 주문내역을 개별적으로 업데이트)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;orm에-적합하지-않은-모델&quot;&gt;ORM에 적합하지 않은 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;많은 수의 레코드를 잦은 빈도로 벌크 업데이트 수행&lt;/li&gt;
  &lt;li&gt;통계, 데이터분석처리(OLAP)&lt;/li&gt;
  &lt;li&gt;이미 작성된 핸드코딩/프로시저를 이용하는 환경(MyBatis를 쓰면 좋다, 다른 ORM도 이런부분을 지원합니다.)&lt;/li&gt;
  &lt;li&gt;순수 SQL문을 쓰는게 더 나을때&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://lilymate.tistory.com/235&quot;&gt;ORM (Object Relation Mapping)&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://gs.saro.me/#!m=elec&amp;amp;jn=718&quot;&gt;ORM 의 장점과 단점&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(vi 명령어) 비주얼모드(영역지정),복사,붙여넣기,실행취소(undo),다시실행(redo)</title>
   <link href="https://jistol.github.io/linux/2017/02/12/vim-cmd-base/"/>
   <updated>2017-02-12T00:00:00+00:00</updated>
   <id>https://jistol.github.io/linux/2017/02/12/vim-cmd-base</id>
   <content type="html">&lt;h2 id=&quot;v--비주얼모드영역지정&quot;&gt;v : 비주얼모드(영역지정)&lt;/h2&gt;
&lt;p&gt;문자단위로 선택영역 지정을 할 수 있습니다.
&lt;img src=&quot;/assets/img/vim/vim-cmd-base/1.png&quot; alt=&quot;v-비주얼모드&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;v--라인단위-비주얼모드영역지정&quot;&gt;V : 라인단위 비주얼모드(영역지정)&lt;/h2&gt;
&lt;p&gt;라인단위로 선택영역 지정을 할 수 있습니다.
&lt;img src=&quot;/assets/img/vim/vim-cmd-base/2.png&quot; alt=&quot;V-비주얼모드&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;y--복사&quot;&gt;y : 복사&lt;/h2&gt;
&lt;p&gt;문자단위 또는 선택영역을 복사하여 버퍼에 저장합니다.  &lt;br /&gt;
복사한 문자는 다른 버퍼를 사용하는 명령어(ex:x,d,dd,p …)를 사용할 경우 없어집니다.&lt;/p&gt;

&lt;h2 id=&quot;y--라인단위-복사&quot;&gt;Y : 라인단위 복사&lt;/h2&gt;
&lt;p&gt;한 줄을 복사하여 버퍼에 저장합니다.  &lt;br /&gt;
복사한 문자는 다른 버퍼를 사용하는 명령어(ex:x,d,dd,p …)를 사용할 경우 없어집니다.&lt;/p&gt;

&lt;h2 id=&quot;p--붙여넣기현재-커서-앞&quot;&gt;p : 붙여넣기(현재 커서 앞)&lt;/h2&gt;
&lt;p&gt;버퍼의 내용을 현재 커서 앞에 붙여넣습니다.&lt;/p&gt;

&lt;h2 id=&quot;p--붙여넣기현재-커서-뒤&quot;&gt;P : 붙여넣기(현재 커서 뒤)&lt;/h2&gt;
&lt;p&gt;버퍼의 내용을 현재 커서 뒤에 붙여넣습니다.&lt;/p&gt;

&lt;h2 id=&quot;u--실행취소&quot;&gt;u : 실행취소&lt;/h2&gt;
&lt;p&gt;이전 실행한 내용을 취소합니다.&lt;/p&gt;

&lt;h2 id=&quot;ctrl--r--다시실행&quot;&gt;ctrl + r : 다시실행&lt;/h2&gt;
&lt;p&gt;실행 취소한 내용을 다시 실행합니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(JPA,SpringData) Sort 사용하기</title>
   <link href="https://jistol.github.io/java/2017/02/11/jpa-sort/"/>
   <updated>2017-02-11T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/11/jpa-sort</id>
   <content type="html">&lt;p&gt;일반적으로 JPA에서 Sort기능을 사용하기 위해서 아래와 같이 메서드명에 &lt;code class=&quot;highlighter-rouge&quot;&gt;OrderBy&lt;/code&gt;를 붙여 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Page&amp;lt;T&amp;gt; findAllByNameOrderByCreatedDateDesc();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 같이 만드는 경우 일반적인 목록조회 페이지에서 다수의 정렬기능(ex:이름순,날짜순,날짜역순…)을 필요로 할 경우 위와 같은 메소드를 정렬 방식 개수대로 만들어야 하는 단점이 있습니다. &lt;br /&gt;
이 때 사용하기 좋은것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sort&lt;/code&gt;클래스입니다.  &lt;br /&gt;
Controller에 아래와 같이 인자값으로 등록만 하면 알아서 정렬정보가 세팅됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Controller
public List&amp;lt;T&amp;gt; list(Sort sort)
{
  List&amp;lt;T&amp;gt; tList = jpaRepository.findAll(sort);
  return tList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파라메터 형식은 아래와 같이 넘길 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[이름으로 정렬]
/path?sort=name,asc
[이름 역순으로 정렬]
/path?sort=name,desc
[이름으로 정렬 + ID로 정렬]
/path?sort=name,id
[이름으로 정렬 + ID 역순으로 정렬]
/path?sort=name,asc&amp;amp;sort=id,desc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파라메터에서 전달받은 정렬조건외에 추가적으로 정렬조건을 추가하고 싶을 경우 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;메소드를 이용하여 추가적으로 정렬조건을 넣을수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Controller
public List&amp;lt;T&amp;gt; list(Sort sort)
{
  sort = sort.and(new Sort(Sort.Direction.DESC, &quot;count&quot;))
  List&amp;lt;T&amp;gt; tList = jpaRepository.findAll(sort);
  return tList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 목록에서 정렬은 paging과 같이 하는 경우가 많은데 아래와 같이 Pageable을 인자값으로 받으면 자동적으로 정렬값이 추가됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Controller
public List&amp;lt;T&amp;gt; list(Pageable pageable)
{
  List&amp;lt;T&amp;gt; tList = jpaRepository.findAll(pageable);
  return tList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/&quot;&gt;Spring Data JPA Tutorial: Sorting&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JVM 구조 정리</title>
   <link href="https://jistol.github.io/java/2017/02/10/jvm-structure/"/>
   <updated>2017-02-10T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/10/jvm-structure</id>
   <content type="html">&lt;p&gt;그 동안 미뤄왔던 JVM의 기본 구조에 대해 여기 저기 사이트를 참고하여 최종 구조를 그려보았습니다.
여기서 제일 고민했던 부분은 보통 Heap의 Permanent Area로 불리는 영역이 Method Area와 별개인가? 하는 점이였는데 최종 결론은 같은 영역이다!! 라고 결론을 내렸습니다. (&lt;a href=&quot;http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/&quot;&gt;RUNTIME DATA AREAS – JAVA’S MEMORY MODEL&lt;/a&gt;)참고&lt;/p&gt;

&lt;h2 id=&quot;jvm-구조&quot;&gt;JVM 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/java/jvm-structure/1.png&quot; alt=&quot;JVM 전체구조&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://d2.naver.com/helloworld/1230&quot;&gt;Naver D2 - JVM Internal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/&quot;&gt;RUNTIME DATA AREAS – JAVA’S MEMORY MODEL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>(Spring Cache) @Cacheable key값 정하기</title>
   <link href="https://jistol.github.io/java/2017/02/09/springboot-cache-key/"/>
   <updated>2017-02-09T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/09/springboot-cache-key</id>
   <content type="html">&lt;p&gt;Spring Cache는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Cacheable&lt;/code&gt;어노테이션만 붙이면 알아서 인자값을 종류에 맞게 캐쉬된 데이터를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable
public List&amp;lt;String&amp;gt; getList(int page, String query){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 경우 두 인자값이 모두 같아야 같은 캐쉬값을 내보내는데 리턴값에 영향을 미치는 요소가 page 인자값만 영향을 미친다면 아래와 같이 캐쉬 키값을 별도로 설정 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;#page&quot;)
public List&amp;lt;String&amp;gt; getList(int page, String query){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#인자값이름&lt;/code&gt;으로 특정 인자를 지정할 수 있는데 위와 같이 하면 같은 page값일 경우 query인자값은 어떤 값이 들어오더라도 같은 캐쉬값을 반환합니다.  &lt;br /&gt;
그런데 아래와 같은 경우 캐쉬가 정상적으로 동작하지 않습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Person
{
  private String name;

  public String getName(){ return name; }
}

@Cacheable(key = &quot;#kim&quot;)
public List&amp;lt;String getList(Person kim){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이유는 Spring 4.0 이전 버전에서 사용하는 기본 KeyGenerator인 &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultKeyGenerator&lt;/code&gt;가 아래와 같은 방식으로 키를 생성하기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-annotations-cacheable-default-key&quot;&gt;Spring Cache Abstraction Default Key Generation - 원문보기&lt;/a&gt;   &lt;br /&gt;
&lt;img src=&quot;/assets/img/java/springboot-cache-key/1.png&quot; alt=&quot;Spring Cache Abstraction Default Key Generation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;객체의 native값을 이용하거나 Object일 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode()&lt;/code&gt;만을 사용하여 키 값을 생성하는데 Object의 hachCode는 객체에서 재정의 하지 않은 이상 무조건 다른 값이 들어가게 되기 때문입니다.  &lt;br /&gt;
&lt;em&gt;Spring 4.0 이후 버전에서의 기본 KeyGenerator는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleKeyGenerator&lt;/code&gt;를 사용하며 hashCode만이 아닌 복합키를 사용한다고 합니다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;인자값이 Object 객체인 경우 객체내 값을 이용하여 키 값을 쓸 수 있습니다.(물론 이 때 내부 값도 native값이거나 String같은 heap내 주소가 유일한 경우에만 가능합니다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;#kim.name&quot;)
public List&amp;lt;String getList(Person kim){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인자값이 null일 경우를 체크하려면 아래와 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;#kim?.name&quot;)
public List&amp;lt;String getList(Person kim){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 식은 if-then-else 구문에서 else만 빠진것으로 전부 표시하면 아래 같이도 사용 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;#kim?.name:'Unknown'&quot;)
public List&amp;lt;String getList(Person kim){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 메소드를 사용하고 싶다면 아래와 같이 사용할 수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;#kim.getName()&quot;)
public List&amp;lt;String getList(Person kim){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List나 Map값은 객체들은 hachCode값을 이미 내부 객체의 hashCode값들을 이용하여 정해진 규칙대로 만들기 때문에 아래의 경우에는 별도의 처리 없이 사용가능합니다.
&lt;em&gt;하지만 내부에 포함된 데이터가 native타입이 아닐 경우엔 List, Map도 문제가 생깁니다.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;#strList&quot;)
public List&amp;lt;String getListByList(List&amp;lt;String&amp;gt; strList){ ... }

@Cacheable(key = &quot;#map&quot;)
public List&amp;lt;String getListByMap(Map&amp;lt;Long, String&amp;gt; map){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막으로 인자값이 여러개 있을 경우에 표시하는 예제는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cacheable(key = &quot;'KeyIs' + #kim?.getName():'Unknown' + #page + #list&quot;)
public List&amp;lt;String getList(Person kim, int page, List&amp;lt;String&amp;gt; list){ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;key값에 사용되는 문법은 sqEL 표현식으로 아래 링크에서 자세한 내용은 확인 가능합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(Spring Expression Language (SpEL))[https://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html]&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Remote branch 삭제하기</title>
   <link href="https://jistol.github.io/vcs/2017/02/08/git-remote-branch-delete/"/>
   <updated>2017-02-08T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/02/08/git-remote-branch-delete</id>
   <content type="html">&lt;p&gt;Git을 사용하다보면 branch이름을 바꿔야 할 때가 있습니다.&lt;br /&gt;
아래 명령어로 로컬 branch를 간단히 바꿀 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -m [old-name] [new-name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 remote저장소에 있는 branch이름은 바꿀 수가 없는데 바꾸려면 remote저장소의 branch를 삭제하고 다시 로컬 branch를 이용하여 재생성해야합니다.&lt;/p&gt;

&lt;h2 id=&quot;remote-저장소-삭제&quot;&gt;remote 저장소 삭제&lt;/h2&gt;
&lt;p&gt;아래 명령어로 remote 브랜치를 삭제합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push [remote-name] --delete [old-branch-name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;remote저장소에-local-branch-올리기&quot;&gt;remote저장소에 local branch 올리기&lt;/h2&gt;
&lt;p&gt;로컬 저장소의 이름을 새 이름으로 변경 후 remote저장소에 새로 올립니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -m [old-name] [new-name]
$ git push [remote-name] [new-name]
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/jistol/jistol.github.io.git
* [new branch]      new-name -&amp;gt; new-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) 데이터베이스 초기화 (spring.jpa.hibernate.ddl-auto, import.sql, spring.datasource.data)</title>
   <link href="https://jistol.github.io/java/2017/02/07/springboot-databaseinit-options/"/>
   <updated>2017-02-07T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/07/springboot-databaseinit-options</id>
   <content type="html">&lt;h2 id=&quot;springjpahibernateddl-auto&quot;&gt;spring.jpa.hibernate.ddl-auto&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;옵션&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;create&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;기존에 생성되 있던 테이블들을 삭제하고 새로 만듭니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;create-drop&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;create와 같은 동작을 하나 종료시에 DROP합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;update&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;변경된 부분만 반영합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;validate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;테이블과 Entity가 매핑되는지 유효성 검사를 실행합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;none&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;초기화 동작을 사용하지 않습니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;importsql&quot;&gt;import.sql&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;리소스에 위 파일이 위치하면 테이블 생성시 자동으로 스크립트를 실행시켜줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;springdatasourcedata&quot;&gt;spring.datasource.data&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이 옵션에 지정한 파일을 테이블 생성시 자동으로 실행시켜줍니다.&lt;/li&gt;
  &lt;li&gt;파일은 ,(쉼표)로 여러개를 지정하거나 *기호를 이용하여 패턴 지정가능합니다.&lt;/li&gt;
  &lt;li&gt;파일 경로는 클래스패스, 절대경로, 상대경로 모두 지정가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예시 : classpath:/sql/test/init-*.sql,file:/home/jistol/sql/test.sql,/META-INF/sql/initScript.sql&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(JPA,SpringData) 쿼리 메소드 정의하기</title>
   <link href="https://jistol.github.io/java/2017/02/06/jpa-querymethod/"/>
   <updated>2017-02-06T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/06/jpa-querymethod</id>
   <content type="html">&lt;p&gt;iBatis만 사용하다가 SpringData를 처음 접해보면 신세계를 느끼는 것 중 하나가 interface에 메소드 하나 정의 했는데 쿼리가 완성된다는 점이 아닐까 싶습니다.  &lt;br /&gt;
xml에 죽어라 SQL문 만들다가 이렇게 간단하게 해결되면 SpringData를 안쓸수가 없죠.&lt;em&gt;(반대로 더 불편해지거나 힘든점도 있긴 합니다.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;그동안 사용해온 쿼리 메소드들에 대해 몇몇가지 정리해봅니다. &lt;br /&gt;
자세한 내용은 &lt;a href=&quot;http://docs.spring.io/spring-data/jpa/docs/1.10.7.RELEASE/reference/html/&quot;&gt;Spring Data JPA - Reference Documentation(1.10.7)영문&lt;/a&gt;이나 이쁘게 번역해놓은 &lt;a href=&quot;http://arahansa.github.io/docs_spring/jpa.html&quot;&gt;번역본&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;

&lt;h2 id=&quot;메소드-이름-안에서-지원되는-키워드들&quot;&gt;메소드 이름 안에서 지원되는 키워드들&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Keyword&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Sample&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;JPQL snippet&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;And&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByLastnameAndFirstname&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.lastname = ?1 and x.firstname = ?2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Or&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByLastnameOrFirstname&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.lastname = ?1 or x.firstname = ?2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Is,Equals&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstname,findByFirstnameIs,findByFirstnameEquals&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.firstname = 1?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Between&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByStartDateBetween&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.startDate between 1? and ?2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LessThan&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeLessThan&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age &amp;lt; ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LessThanEqual&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeLessThanEqual&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age ⇐ ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GreaterThan&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeGreaterThan&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age &amp;gt; ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GreaterThanEqual&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeGreaterThanEqual&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age &amp;gt;= ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;After&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByStartDateAfter&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.startDate &amp;gt; ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Before&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByStartDateBefore&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.startDate &amp;lt; ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IsNull&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeIsNull&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age is null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IsNotNull,NotNull&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAge(Is)NotNull&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age not null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Like&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstnameLike&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.firstname like ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NotLike&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstnameNotLike&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.firstname not like ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;StartingWith&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstnameStartingWith&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.firstname like ?1 (parameter bound with appended %)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;EndingWith&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstnameEndingWith&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.firstname like ?1 (parameter bound with prepended %)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Containing&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstnameContaining&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.firstname like ?1 (parameter bound wrapped in %)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OrderBy&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeOrderByLastnameDesc&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age = ?1 order by x.lastname desc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Not&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByLastnameNot&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.lastname &amp;lt;&amp;gt; ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeIn(Collection&lt;Age&gt; ages)&lt;/Age&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age in ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NotIn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByAgeNotIn(Collection&lt;Age&gt; age)&lt;/Age&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.age not in ?1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByActiveTrue()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.active = true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByActiveFalse()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where x.active = false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IgnoreCase&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findByFirstnameIgnoreCase&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;… where UPPER(x.firstame) = UPPER(?1)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;쿼리-결과-limittop하기&quot;&gt;쿼리 결과 Limit(Top)하기&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User findFirstByOrderByLastnameAsc();
User findTopByOrderByAgeDesc();
Page&amp;lt;User&amp;gt; queryFirst10ByLastname(String lastname, Pageable pageable);
Slice&amp;lt;User&amp;gt; findTop3ByLastname(String lastname, Pageable pageable);
List&amp;lt;User&amp;gt; findFirst10ByLastname(String lastname, Sort sort);
List&amp;lt;User&amp;gt; findTop10ByLastname(String lastname, Pageable pageable);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;중복제거-disctinct-사용하기&quot;&gt;중복제거 Disctinct 사용하기&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;List&amp;lt;Person&amp;gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);    
List&amp;lt;Person&amp;gt; findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) MVC 테스트 하기 - `@WebMvcTest`, `@AutoConfigureMockMvc`</title>
   <link href="https://jistol.github.io/java/2017/02/05/springboot-mvctest/"/>
   <updated>2017-02-05T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/05/springboot-mvctest</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/2.0.0.BUILD-SNAPSHOT/reference/htmlsingle/&quot;&gt;SpringBoot Reference&lt;/a&gt;에 접속하여 목차를 보면 거의 끝쯤에 Testing관련 내용이 나옵니다. &lt;br /&gt;
이 중 SpringBoot의 Controller를 JUnit으로 테스트 하고 싶은 경우 &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/2.0.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests&quot;&gt;41.3.7 Auto-configured Spring MVC tests&lt;/a&gt;를 보면 Http Connection을 별도 구현하지 않고도 MVC 테스트를 가능하게 하는 설명이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-mvctest/1.png&quot; alt=&quot;캡처화면&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;webmvctest&quot;&gt;@WebMvcTest&lt;/h2&gt;
&lt;p&gt;일반적으로 사용하는 MVC테스트용 어노테이션입니다. &lt;br /&gt;
해당 어노테이션을 명시하고 그림과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;하면 해당 객체를 통해 MVC테스트가 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-mvctest/2.png&quot; alt=&quot;@WebMvcTest사용시 주의사항 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt;어노테이션 사용시 &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;을 같이 사용할 수 없습니다. &lt;br /&gt;
서로 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt;를 설정하기 때문에 충돌이 나는거 같은데요, MVC 기능만 사용할 거라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt;를 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-mvctest/3.png&quot; alt=&quot;@WebMvcTest사용시 주의사항 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt; 사용시 다른 설정들은 자동으로 올리지 않기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Repository&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Service&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt;등은 사용할 수 없습니다. &lt;br /&gt;
아래 글과 같이 자동설정하는 영역은 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Controller&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ControllerAdvice&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonComponent&lt;/code&gt; 등등이네요.  &lt;br /&gt;
그런데 저는 실제로 테스트 해보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ControllerAdvice&lt;/code&gt;도 먹히지 않았습니다. (이유는 아직도 모르는중…)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-mvctest/4.png&quot; alt=&quot;@WebMvcTest사용시 주의사항 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt;가 포함하는 실제 설정은 &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/2.0.0.BUILD-SNAPSHOT/reference/htmlsingle/#test-auto-configuration&quot;&gt;Appendix D. Test auto-configuration annotations&lt;/a&gt;에서 확인 가능 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-mvctest/5.png&quot; alt=&quot;@WebMvcTest이 포함하는 설정&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;autoconfiguremockmvc&quot;&gt;@AutoConfigureMockMvc&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt;외에 MVC테스트를 할 수 있는 다른 방법입니다. &lt;br /&gt;
위 설정은 MVC테스트 외 모든 설정을 같이 올립니다. AOP도 되고 JPA Repository도 사용가능하네요. &lt;br /&gt;
실제적으로 동작하는 MVC테스트를 하려면 위 어노테이션을 사용해야 합니다. &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;와 같이 사용 가능합니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(SpringBoot) H2 DB 서버모드로 띄워 외부 툴(DBeaver)로 접속하기</title>
   <link href="https://jistol.github.io/java/2017/02/04/springboot-h2db-servermode/"/>
   <updated>2017-02-04T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/04/springboot-h2db-servermode</id>
   <content type="html">&lt;p&gt;SpringBoot에서 H2 DB Embedded를 사용하다보면 항상 console에 들어가 쿼리해야하는 불편함이 있어 외부 툴에서 접근하는 방법을 찾아 정리해 보았습니다.&lt;/p&gt;

&lt;p&gt;우선 application.xml에 정의되 있는 아래 항목을 바꿔줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[변경 전]
spring.datasource.url=jdbc:h2:file:./db/devdb;

[변경 후]
spring.datasource.url=jdbc:h2:file:./db/devdb;AUTO_SERVER=TRUE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;※ 주의사항 : H2 DB를 메모리 모드로 올릴 경우에는 사용 할 수 없습니다. 반드시 file모드로 올려주세요.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 변경후 실행 시키면 서버모드로 뜨게 되고 DBeaver를 통해 아래와 같이 설정합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Create New Connect” 창을 띄우고 아래와 같이 “H2 - Embedded”를 선택합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-h2db-servermode/1.png&quot; alt=&quot;Create New Connect&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting 화면에 아래와 같이 각 정보를 넣어줍니다.  &lt;br /&gt;
&lt;em&gt;※ JDBC URL 항목이 빈 란일 경우 “Driver Properties”탭을 선택하여 H2 Driver를 다운 받았는지 확인합니다.&lt;/em&gt;  &lt;br /&gt;
&lt;em&gt;※ 파일 경로를 full로 적어줘야합니다.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-h2db-servermode/2.png&quot; alt=&quot;Create New Connect&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finish 버튼을 클릭하여 마무리.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/java/springboot-h2db-servermode/3.png&quot; alt=&quot;Create New Connect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 설정해도 한쪽에서 붙어 있는 상황에선 다른쪽이 붙질 못하더군요.  &lt;br /&gt;
그 방법까진 아직 못찾아봐서 패스.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>(JPA,SpringData) Date타입 컬럼 - Date, Calendar, Timestamp</title>
   <link href="https://jistol.github.io/java/2017/02/03/jpa-datetype/"/>
   <updated>2017-02-03T00:00:00+00:00</updated>
   <id>https://jistol.github.io/java/2017/02/03/jpa-datetype</id>
   <content type="html">&lt;p&gt;JPA를 사용할때 Date타입의 컬럼 사용시 어떤 Java Object를 사용해야하는지에 대한 글이 있어 옮겨 적어봅니다. &lt;a href=&quot;http://www.developerscrappad.com/228/java/java-ee/ejb3-jpa-dealing-with-date-time-and-timestamp/&quot;&gt;원본보기&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;javasqldate-javasqltime-javasqltimestamp&quot;&gt;java.sql.Date, java.sql.Time, java.sql.Timestamp&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Column(name = &quot;DATE_FIELD&quot;)
private java.sql.Date dateField;

@Column(name = &quot;TIME_FIELD&quot;)
private java.sql.Time timeField;

@Column(name = &quot;DATETIME_FIELD&quot;)
private java.sql.Timestamp dateTimeField;

@Column(name = &quot;TIMESTAMP_FIELD&quot;)
private java.sql.Timestamp timestampField;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;응용 프로그램이 날짜 및 시간 값을 저장하기만 해도 될 경우 사용합니다.   &lt;br /&gt;
서버 GMT 오프셋과 같이 날짜 및 시간의 확장 된 세부 정보를 저장하거나 다른 지역 또는 시간대에 다른 날짜와 시간을 저장하지 않아도 될 경우에 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;javautildate&quot;&gt;java.util.Date&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Temporal(TemporalType.DATE)
@Column(name = &quot;DATE_FIELD&quot;)
private java.util.Date dateField;

@Temporal(TemporalType.TIME)
@Column(name = &quot;TIME_FIELD&quot;)
private java.util.Date timeField;

@Temporal(TemporalType.TIMESTAMP)
@Column(name = &quot;DATETIME_FIELD&quot;)
private java.util.Date dateTimeField;

@Temporal(TemporalType.TIMESTAMP)
@Column(name = &quot;TIMESTAMP_FIELD&quot;)
private java.util.Date timestampField;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로그램의 날짜와 GMT값을 날짜,시간,타임스템프 필드와 함꼐 저장해야하는 경우에 사용합니다.       &lt;br /&gt;
java.util.Date 클래스는 날짜와 시간 정보를 모두 저장할 수 있기 때문에 올바른 TemporalType 속성 (TemporalType.DATE, TemporalType.TIME 또는 TemporalType.TIMESTAMP)이있는 @Temporal 주석이 추가로 필요합니다.&lt;/p&gt;

&lt;h2 id=&quot;javautilcalendar&quot;&gt;java.util.Calendar&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Column(name = &quot;DATE_FIELD&quot;)
@Temporal(TemporalType.DATE)
private java.util.Calendar dateField;

@Column(name = &quot;TIME_FIELD&quot;)
@Temporal(TemporalType.TIME)
private java.util.Calendar timeField;

@Column(name = &quot;DATETIME_FIELD&quot;)
@Temporal(TemporalType.TIMESTAMP)
private java.util.Calendar datetimeField;

@Column(name = &quot;TIMESTAMP_FIELD&quot;)
@Temporal(TemporalType.TIMESTAMP)
private java.util.Calendar timestampField;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;국제 날짜및 시간정보 캡처가 필요한 경우 사용하면 좋습니다.
java.util.Date 클래스와 마찬가지로 @Temporal주석이 필요합니다.&lt;/p&gt;

&lt;p&gt;일반적으로 개발할때는 java.sql.Timestamp만 사용해도 충분하겠네요 :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>데이터베이스 정규화</title>
   <link href="https://jistol.github.io/database/2017/02/02/database-normalization/"/>
   <updated>2017-02-02T00:00:00+00:00</updated>
   <id>https://jistol.github.io/database/2017/02/02/database-normalization</id>
   <content type="html">&lt;h2 id=&quot;정규화란&quot;&gt;정규화란?&lt;/h2&gt;
&lt;p&gt;데이터베이스의 설계에서 중복을 최소화 하게 데이터를 구조화&lt;/p&gt;

&lt;h2 id=&quot;정규화의-목표&quot;&gt;정규화의 목표&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터의 삽입,삭제,갱신 이상 제거&lt;/li&gt;
  &lt;li&gt;자료저장 공간 최소화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규화-단계&quot;&gt;정규화 단계&lt;/h2&gt;

&lt;h3 id=&quot;제1정규화1nf&quot;&gt;제1정규화(1NF)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;모든 속성은 반드시 하나의 값을 가짐(not null, 반복형태 X)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;레코드들은 서로 간에 식별 가능해야 합니다..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제2정규화2nf&quot;&gt;제2정규화(2NF)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;식별자가 아닌 모든 속성들은 &lt;strong&gt;식별자 전체 속성에 완전 종속&lt;/strong&gt;되어야 합니다(완전함수종속).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제3정규화3nf&quot;&gt;제3정규화(3NF)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2차 정규형을 만족하고 식별자를 제외한 나머지 &lt;strong&gt;속성들 간의 종속&lt;/strong&gt;이 존재하면 안됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;예제&quot;&gt;예제&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-normalization/1.png&quot; alt=&quot;2~3차정규화&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>entity(엔터티), attribute(속성), relationship(관계) 요약 - 암기용</title>
   <link href="https://jistol.github.io/database/2017/02/01/database-entity-attribute-relationship/"/>
   <updated>2017-02-01T00:00:00+00:00</updated>
   <id>https://jistol.github.io/database/2017/02/01/database-entity-attribute-relationship</id>
   <content type="html">&lt;p&gt;학습 암기용 목적의 포스팅입니다.   &lt;br /&gt;
자세한 내용은 &lt;a href=&quot;http://wiki.gurubee.net/pages/viewpage.action?pageId=27427060&quot;&gt;엔터티(Entity)&lt;/a&gt;, &lt;a href=&quot;http://wiki.gurubee.net/pages/viewpage.action?pageId=27427060&quot;&gt;속성(Attribute)&lt;/a&gt;, &lt;a href=&quot;http://wiki.gurubee.net/pages/viewpage.action?pageId=27427062&quot;&gt;관계(Relationship)&lt;/a&gt;를 참고하세요.&lt;/p&gt;

&lt;h1 id=&quot;1-entity&quot;&gt;&lt;strong&gt;1. Entity&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;entity-개념&quot;&gt;Entity 개념&lt;/h2&gt;
&lt;p&gt;저장되기 위한 어떤 집합적인 것(Thing:사람,장소,물건,사건,개념).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-entity-attribute-relationship/1.png&quot; alt=&quot;엔터티 구성&quot; /&gt;  &lt;br /&gt;
출처 : http://tech.devgear.co.kr/db_kb/324&lt;/p&gt;

&lt;h2 id=&quot;entity-특징&quot;&gt;Entity 특징&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;업무에 필요한 정보&lt;/li&gt;
  &lt;li&gt;의미있는 식별자에 의해 인스턴스는 1개씩만 존재(중복배제)&lt;/li&gt;
  &lt;li&gt;2개이상의 인스턴스 집합으로 구성&lt;/li&gt;
  &lt;li&gt;업무프로세스에 의해 이용되어야 함&lt;/li&gt;
  &lt;li&gt;속성을 포함해야 함(식별자만 있으면 의미없음)&lt;/li&gt;
  &lt;li&gt;관계가 존재해야함&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;entity-분류&quot;&gt;Entity 분류&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;유무(有無)형에 따른 분류&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;명칭&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;유형 엔터티&lt;br /&gt;Tangible Entity&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;물리적 형태가 있음&lt;br /&gt;ex:사원,물품,강사&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;개념 엔터티&lt;br /&gt;Conceptual Entity&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;물리적 형태가 없음&lt;br /&gt;ex:조직,보험상품&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;사건 엔터티&lt;br /&gt;Event Entity&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;업무 수행에 따라 발생&lt;br /&gt;ex:주문,청구,미납&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;발생시점에 따른 분류&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;명칭&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;기본 엔터티&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;원래 존재하는 정보&lt;br /&gt;ex:사원,부서,고객,상품&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;중심 엔터티&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;기본엔터티로부터 발생하고 다른 엔터티와의 관계를 통해 많은 행위엔터티를 발생&lt;br /&gt;업무에 있어 중심역활&lt;br /&gt;ex:계약,사고,청구,주문&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;행위 엔터티&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;두개이상 부모엔터티로부터 발생&lt;br /&gt;내용이 자주 바뀌거나 데이터량이 증가&lt;br /&gt;ex:주문목록,로그인이력&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;2-attribute&quot;&gt;&lt;strong&gt;2. Attribute&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;엔터티-인스턴스-속성-속성값의-관계&quot;&gt;엔터티, 인스턴스, 속성, 속성값의 관계&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-entity-attribute-relationship/2.jpg&quot; alt=&quot;관계도&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;한 개의 엔터티는 두 개 이상의 인스턴스의 집합.&lt;/li&gt;
  &lt;li&gt;한 개의 엔터티는 두 개 이상의 속성을 가짐.(식별자 외에 1개이상 필요)&lt;/li&gt;
  &lt;li&gt;한 개의 속성은 한 개의 속성값을 가짐.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;속성의-특징&quot;&gt;속성의 특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;업무에 필요한 정보&lt;/li&gt;
  &lt;li&gt;주식별자에 함수적 종속성&lt;/li&gt;
  &lt;li&gt;한 개의 속성값만 가짐, 다중값일 경우 별도의 엔터티를 이용하여 분리 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;속성의-분류&quot;&gt;속성의 분류&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;특성에 따른 분류&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;명칭&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;기본속성&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;업무로 부터 추출한 값&lt;br /&gt;ex:이름,전화번호,성별&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;설계속성&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;규칙화를 위해 변형/새로정의한 값&lt;br /&gt;ex:과목코드,지역코드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;파생속성&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;다른 속성에 영향을 받아 발생한 값&lt;br /&gt;ex:예금이자,평균성적&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;엔터티 구성방식에 따른 분류&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;명칭&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PK&lt;br /&gt;Primary Key&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;엔터티를 식별할 수 있는 속성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FK&lt;br /&gt;Foreign Key&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;다른 엔터티와의 관계에서 포함된 속성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;일반속성&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PK,FK에 포함되지 않은 속성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;명칭&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;단순형&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;원자값 속성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;복합형&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;여러 세부 속성으로 나뉠수 있는 속성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;도메인domain&quot;&gt;도메인(Domain)&lt;/h2&gt;
&lt;p&gt;속성이 가질 수 있는 값의 범위&lt;/p&gt;

&lt;h1 id=&quot;3-relationship&quot;&gt;&lt;strong&gt;3. Relationship&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;관계의-정의&quot;&gt;관계의 정의&lt;/h2&gt;
&lt;p&gt;인스턴스 사이의 논리적인 연관성&lt;/p&gt;

&lt;h2 id=&quot;관계의-패어링&quot;&gt;관계의 패어링&lt;/h2&gt;
&lt;p&gt;엔터티 안에 인스턴스가 개별적으로 관계를 가지는것  &lt;br /&gt;
패어링의 집합 -&amp;gt; 관계&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-entity-attribute-relationship/3.jpg&quot; alt=&quot;관계와 패어링&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;관계의-표기법&quot;&gt;관계의 표기법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관계명(Membership) : 관계의 이름&lt;/li&gt;
  &lt;li&gt;관계차수(Cardinality) : 1:1, 1:M, M:N&lt;/li&gt;
  &lt;li&gt;관계선택사양(Optionality) : 필수관계(not null), 선택관계(nullable, O를 표시)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-entity-attribute-relationship/4.jpg&quot; alt=&quot;관계의 표기법&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>데이터모델링 정리</title>
   <link href="https://jistol.github.io/database/2017/01/31/database-data-modeling-base/"/>
   <updated>2017-01-31T00:00:00+00:00</updated>
   <id>https://jistol.github.io/database/2017/01/31/database-data-modeling-base</id>
   <content type="html">&lt;h2 id=&quot;데이터-모델링이란&quot;&gt;데이터 모델링이란?&lt;/h2&gt;
&lt;p&gt;시스템 구축을 위해 업무의 데이터를 &lt;strong&gt;분석하는 방법&lt;/strong&gt;, 명확하게 표현하는 &lt;strong&gt;추상화 기법&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;중요성&quot;&gt;중요성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;파급효과(Leverage) : 데이터 구조가 프로젝트 막바지에 바뀌게 되면 영향도가 큽니다.&lt;/li&gt;
  &lt;li&gt;요구사항의 간결한 표현(Conciseness) : 요구사항 파악하기 좋고, 많은 관련자들이 소통하기 좋습니다.&lt;/li&gt;
  &lt;li&gt;데이터 품질(Data Quality) : 데이터는 시스템의 자산. 정확성이 떨어지는 데이터는 가치가 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;유의점&quot;&gt;유의점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;중복&lt;/strong&gt;을 피하고, &lt;strong&gt;유연&lt;/strong&gt;해야하며, &lt;strong&gt;일관성&lt;/strong&gt;있어야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;데이터-모델링-단계&quot;&gt;데이터 모델링 단계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개념적 데이터 모델링 : 핵심 엔터티와 그들 간의 관계를 찾고 엔터티-관계 다이어 그램을 생성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-data-modeling-base/3.jpg&quot; alt=&quot;개념적 데이터 모델링&quot; /&gt;  &lt;br /&gt;
※ 출처 : http://dbteam6.pbworks.com/f/1179078501/%EC%A7%84%EC%A7%9C%EC%A7%84%EC%A7%9C%EC%B5%9C%EC%A2%85.jpg&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;논리적 데이터 모델링 : 실질적으로 프로젝트에서 사용할 비지니스 정보의 논리적인 구조와 규칙을 명시하는 단계로 실질적으로 모델링을 완료하는 단계입니다.(정규화 활동이 포함)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-data-modeling-base/4.gif&quot; alt=&quot;논리적 데이터 모델링&quot; /&gt;  &lt;br /&gt;
※ 출처 : http://cfs9.tistory.com/upload_control/download.blog?fhandle=YmxvZzE5NDM0MkBmczkudGlzdG9yeS5jb206L2F0dGFjaC8wLzc5LmdpZg%3D%3D&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;물리적 데이터 모델링 : 논리모델에서 설계된 내용을 실제 물리적으로 어떻게 표현될지를 정합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-data-modeling-base/5.png&quot; alt=&quot;물리적 데이터 모델링&quot; /&gt;  &lt;br /&gt;
※ 출처 : https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Data_model_in_ER.png/700px-Data_model_in_ER.png&lt;/p&gt;

&lt;h2 id=&quot;데이터-모델링-구조-및-독립성&quot;&gt;데이터 모델링 구조 및 독립성&lt;/h2&gt;
&lt;p&gt;데이터 모델링의 구조와 독립성에 대한 여러가지 설명이 있지만 아래 두 그림으로 딱 설명이 되는것 같습니다.  &lt;br /&gt;
&lt;img src=&quot;/assets/img/database/database-data-modeling-base/1.jpg&quot; alt=&quot;데이터모델링 구조&quot; /&gt;  &lt;br /&gt;
※ 출처 : http://cfile28.uf.tistory.com/image/2119243556BD75431EB784&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/database-data-modeling-base/2.png&quot; alt=&quot;데이터모델링 예제&quot; /&gt;        &lt;br /&gt;
※ 출처 : http://cfile233.uf.daum.net/image/2056933C4F60B0312DC599&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부스키마(외부단계)는 S/w, 개발자가 직접 접근하는 DB View입니다.&lt;/li&gt;
  &lt;li&gt;개념스키마(개념적단계)는 전체 DB를 기술합니다.&lt;/li&gt;
  &lt;li&gt;내부스키마(내부적단계)는 물리적 장치에 데이터가 실제적으로 저장되는 방법을 표현합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각 독립성은 각 스키마가 변경되더라도 서로 영향을 끼치지 않아야 한다는 의미입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;논리적 독립성 : 개념스키마가 변해도 외부스키마는 변하지 않도록 지원해야함.&lt;/li&gt;
  &lt;li&gt;물리적 독립성 : 내부스키마가 변해도 개념스키마가 변하지 않도록 지원해야함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사상은 Mapping이라고 부르는것이 더 이해하기 쉽습니다. 각 저장구조가 바뀐다면 Mapping정보가 바뀌어야 독립성이 유지됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;논리적사상 : 외부뷰는 개념뷰에서 Mapping된 정보&lt;/li&gt;
  &lt;li&gt;물리적사상 : 개념뷰는 내부뷰에서 Mapping된 정보&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Git log 주요 명령어 정리</title>
   <link href="https://jistol.github.io/vcs/2017/01/30/git-log/"/>
   <updated>2017-01-30T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/30/git-log</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;의 유용하게 쓰이는 몇몇 옵션들을 정리해 봅니다.  &lt;br /&gt;
자세한 사용법은 &lt;a href=&quot;https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0&quot;&gt;Git의 기초 - 커밋 히스토리 조회하기&lt;/a&gt;를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;출력-log-제한&quot;&gt;출력 log 제한&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -(n)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;최근 N개의 log만 출력합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log -2 --pretty=oneline
7343a5f82686c8c94800ddf8d2cffb30f6160243 modify m3
5a65f7acf00b6c18285bc0396d463f6a7c506c91 modify m2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --since[after,until,before]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;특정 날짜 이전/이후 commit만 조회합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --since=&quot;2017-01-29&quot;
commit 7343a5f82686c8c94800ddf8d2cffb30f6160243
Author: unknown &amp;lt;pptwenty@gmail.com&amp;gt;
Date:   Mon Jan 30 22:54:30 2017 +0900

    modify m3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --author[committer]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;특정 저자/커미터의 commit만 조회합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --author=unknown
commit 7343a5f82686c8c94800ddf8d2cffb30f6160243
Author: unknown &amp;lt;pptwenty@gmail.com&amp;gt;
Date:   Mon Jan 30 22:54:30 2017 +0900

    modify m3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -- [path1] [path2] ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;특정 경로(폴더or파일)의 변경사항에 대해서만 조회합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log -p -- ./w.txt ./v.txt ./work
commit 169f19e36a4360c6a587e146a104e092a62ffc04
Author: unknown &amp;lt;pptwenty@gmail.com&amp;gt;
Date:   Mon Jan 30 23:32:48 2017 +0900

    work add

diff --git a/work/w1.txt b/work/w1.txt
new file mode 100644
index 0000000..e69de29

commit 6b1dbc9c20ad9be3cea60e4cf467328141b17180
Author: unknown &amp;lt;pptwenty@gmail.com&amp;gt;
Date:   Sun Jan 29 23:49:28 2017 +0900

    v2

diff --git a/v.txt b/v.txt
index 626799f..8c1384d 100644
--- a/v.txt
+++ b/v.txt
@@ -1 +1 @@
-v1
+v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;diff-내용-같이-보기&quot;&gt;diff 내용 같이 보기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -p --word-diff --stat&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;각 commit의 diff결과를 줄 단위로 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--word-diff&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;옵션과 같이 사용하면 diff결과를 단어 단위로 보여줍니다.&lt;br /&gt;변경된 단어 단위별로 [- -]{+ +}와 같이 괄호로 쌓아 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--stat&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;각 commit의 변경사항에 대한 통계정보를 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;각 commit의 변경사항에 대한 통계정보중 변경/추가/삭제 개수만 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log -p --word-diff --stat -1
commit 7343a5f82686c8c94800ddf8d2cffb30f6160243
Author: unknown &amp;lt;pptwenty@gmail.com&amp;gt;
Date:   Mon Jan 30 22:54:30 2017 +0900

    modify m3
---
 m.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/m.txt b/m.txt
index 5895249..86afc2c 100644
--- a/m.txt
+++ b/m.txt
@@ -1,4 +1,4 @@
m3
m4-1
[-m5-2-]{+m5-3+} mmmmmm [-aaaaaa-]{+aaxxaa+}
m6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;출력-log내용-형식-변경&quot;&gt;출력 log내용 형식 변경&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --pretty=[OPTION] --abbrev-commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--pretty&lt;/code&gt;옵션 값은 oneline, short, full, fuller가 있습니다. &lt;br /&gt;
oneline은 commit 내용을 한 줄로 표시(Hash값 , log 메시지)하며 나머지 옵션은 기본 log정보에서 추가정보를 가감합니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;--abbrev-commit&lt;/code&gt;는 log HASH키 값을 처음 몇 자만 보여주도록 합니다.  &lt;br /&gt;
&lt;em&gt;※ &lt;code class=&quot;highlighter-rouge&quot;&gt;--pretty=oneline --abbrev-commit&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;--oneline&lt;/code&gt;으로 대신 쓸 수 있습니다.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --pretty=oneline -1
7343a5f82686c8c94800ddf8d2cffb30f6160243 modify m3
$ git log --pretty=oneline --abbrev-commit -1
7343a5f modify m3
$ git log --pretty=fuller -1
commit 7343a5f82686c8c94800ddf8d2cffb30f6160243
Author:     unknown &amp;lt;pptwenty@gmail.com&amp;gt;
AuthorDate: Mon Jan 30 22:54:30 2017 +0900
Commit:     unknown &amp;lt;pptwenty@gmail.com&amp;gt;
CommitDate: Mon Jan 30 22:54:30 2017 +0900

    modify m3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --pretty=format:&quot;%h %s&quot; --graph&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--pretty=format&lt;/code&gt;옵션은 필요한 정보에 대해 특정 format으로 표시하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;%h&lt;/code&gt;는 log의 HASH키 값을 줄여서 보여주며 &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt;는 log 메시지를 보여줍니다.  &lt;br /&gt;
&lt;em&gt;※HASH키 전체값을 보고 싶을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;%H&lt;/code&gt;옵션을 사용합니다.&lt;/em&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--graph&lt;/code&gt; 옵션은 branch와 merge한 내역을 시각화 하여 보여줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --pretty=format:&quot;%h %s&quot; --graph
* 7343a5f modify m3
* 5a65f7a modify m2
* 01c75b6 modify m
*   ae65735 Merge branch 'work2'
|\
| * 6b1dbc9 v2
| * aa8dc59 v1
|/
*   0604c1e Merge branch 'work1'
|\
| * 277030f w2
| * 4d72d03 w1
|/
* 4283fad m3
* 08e8d8d m2
* 4820c18 m1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Git cherry-pick, rebase</title>
   <link href="https://jistol.github.io/vcs/2017/01/29/git-cherrypick-rebase/"/>
   <updated>2017-01-29T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/29/git-cherrypick-rebase</id>
   <content type="html">&lt;p&gt;cherry-pick과 rebase에 대해 공부한 내용을 정리해 봅니다.&lt;/p&gt;

&lt;p&gt;위 두 명령어는 누군가와 협업하여 소스를 관리할 때 유용한 명령어로 남의 작업과 나의 작업을 합치게 될 때 사용하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;cherry-pick&quot;&gt;cherry-pick&lt;/h2&gt;
&lt;p&gt;특정 commit에 대한 이력을 가져옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-1.png&quot; alt=&quot;status1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 상황에서 work1 branch에 master에 commit된 m3가 필요할 경우 아래와 같이 cherry-pick 명령어를 통해 추가할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[master]
$ git log --pretty=format:&quot;%h %s&quot;
fa16562 m4
94c79c0 m3
3654326 m2
f56f92a m1


[work1]
$ git cherry-pick 94c79c0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-2.png&quot; alt=&quot;status2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이때 cherry-pick으로 가져온 m3는 master의 m3와는 별개의 commit으로 work1 과 master를 merge 할 경우 아래와 같이 별도 commit으로 보이게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-3.png&quot; alt=&quot;status3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 cherry-pick을 쓰는 경우를 예로 들면  &lt;br /&gt;
여럿이 작업중 누군가가 공통 UTIL을 만들어 배포할 경우 해당 UTIL을 자신의 branch에 추가하는등의 작업과 같이 사용하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;rebase&quot;&gt;rebase&lt;/h2&gt;
&lt;p&gt;branch를 master(또는 다른 branch)로 합치기 전에 이력을 보기 좋게 만드는데 사용하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-4.png&quot; alt=&quot;status4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 다수의 branch에서 작업하다가 merge하는 경우 서로 이력이 꼬여 보기 좋지 않을 때가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-5.png&quot; alt=&quot;status5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때 각 branch에서 rebase를 통해 commit 이력을 끌어오면 아래와 같이 예쁘게 이력을 정렬 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[work1]
$ git rebase master
$ git log --pretty=format:&quot;%h %s&quot;
277030f w2
4d72d03 w1
4283fad m3
08e8d8d m2
4820c18 m1    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-6.png&quot; alt=&quot;status6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;work1의 이력에 위와 같이 master의 m2,m3가 commit이력에 추가된 것을 볼 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 통해서 commit된 hash값을 보아도 같은 값인것으로 보아 work1의 branch 생성 시점이 master의 현재 HEAD부분으로 이동했다고 봐도 무방할것 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git merge --no-ff work1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 merge하게 되면 아래 그림과 같이 예쁘게 merge가 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-7.png&quot; alt=&quot;status7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;work2도 같은 방식으로 merge하면 최종적으로 아래와 같이 보기 좋게 merge됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-cherrypick-rebase/git-cherrypick-rebase-8.png&quot; alt=&quot;status8&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git 저장소 생성(init) 및 복사(clone)</title>
   <link href="https://jistol.github.io/vcs/2017/01/28/git-init-clone/"/>
   <updated>2017-01-28T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/28/git-init-clone</id>
   <content type="html">&lt;h2 id=&quot;git-init&quot;&gt;git init&lt;/h2&gt;
&lt;p&gt;저장소에 필요한 Seleton파일을 가지고 있는 “.git”이라는 하위 디렉토리를 만들어줍니다.&lt;br /&gt;
&lt;em&gt;※ 아직 프로젝트의 어떤한 파일도 관리하지 않는 상태이며 commit, add등의 명령어로 파일을 추가해야합니다.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init        // 현재 디렉토리에 .git 폴더를 생성합니다.
$ git init work1  // ./work1 디렉토리에 .git 폴더를 생성합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bare&quot;&gt;–bare&lt;/h3&gt;
&lt;p&gt;Bare저장소를 생성합니다. &lt;br /&gt;
Bare저장소는 워킹디렉토리가 없는 저장소로 디렉토리는 관례에 따라 .git확장자로 끝납니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init --bare &amp;lt;project_name&amp;gt;.git    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-clone-bare-src-project-bare-project&quot;&gt;git clone –bare (src-project) (bare-project)&lt;/h2&gt;
&lt;p&gt;이미 &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;을 통해 이미 관리되고 있는 프로젝트의 Bare저장소로 만들고 싶을 경우 아래와 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone --bare test test_bare.git
$ ls ./test_bare
config  description  HEAD  hooks/  info/  objects/  packed-refs  refs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-clone-path-project-name&quot;&gt;git clone (path) [project-name]&lt;/h2&gt;
&lt;p&gt;Bare저장소로부터 프로젝트를 로컬에 복사하고 싶을 경우 아래와 같이 사용할 수 있습니다.  &lt;br /&gt;
(path)는 파일 경로도 가능하고 URL경로도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone ./test_bare.git test
$ git clone file://d/work/test_bare.git test
$ git clone https://github.com/jistol/jistol.github.io jistol-project
$ git clone git://127.0.0.1:7777/jistol/jistol.github.io jistol-project
$ git clone ssh://127.0.0.1:22/jistol/jistol.github.io jistol-project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-clone--b-branch-name-path-project-name&quot;&gt;git clone -b (branch-name) (path) [project-name]&lt;/h2&gt;
&lt;p&gt;Bare저장소의 특정 branch를 로컬에 복사하고 싶을 경우 아래와 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone -b work1 file://d/work/test_bare.git localwork1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Git branch 주요 명령어 정리</title>
   <link href="https://jistol.github.io/vcs/2017/01/27/git-branch/"/>
   <updated>2017-01-27T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/27/git-branch</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt;명령은 branch 생성및 제거, 확인등의 기능을 하는 명령어로 주요 명령어만 요약하였습니다.  &lt;br /&gt;
자세한 내용은 &lt;a href=&quot;https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EA%B4%80%EB%A6%AC&quot;&gt;git-scm Git-브랜치-브랜치-관리&lt;/a&gt;에서 확인하세요.&lt;/p&gt;

&lt;h2 id=&quot;git-branch--l&quot;&gt;git branch [-l]&lt;/h2&gt;
&lt;p&gt;로컬 branch 정보를 보여줍니다. (-l 옵션은 생략가능)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch
* master
  work1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch--v&quot;&gt;git branch -v&lt;/h2&gt;
&lt;p&gt;로컬 branch의 정보를 마지막 커밋 내역과 함께 보여줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -v
* master   4bbc62f commit message 'm1'
  work1    fe7f049 commit message 'w1'
  work_new 4bbc62f commit message 'work_new1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch--r&quot;&gt;git branch -r&lt;/h2&gt;
&lt;p&gt;리모트 저장소의 branch 정보를 보여줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -r
  origin/master
  origin/work1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch--a&quot;&gt;git branch -a&lt;/h2&gt;
&lt;p&gt;로컬/리모트 저장소의 모든 branch 정보를 보여줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -a
* master
  work1
  remotes/origin/master
  remotes/origin/work1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch-이름&quot;&gt;git branch (이름)&lt;/h2&gt;
&lt;p&gt;로컬에 새로운 branch를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch work_new
$ git branch -a
* master
  work1
  work_new
  remotes/origin/master
  remotes/origin/work1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※ 생성과 동시에 해당 branch로 이동하려면 아래 명령어를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -b work2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※ 원격에 있는 branch를 가져오려면 아래 명령어를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[특정이름 지정시]
$ git checkout -b work2 origin/work2      
[원격 branch 이름을 그대로 사용할 경우]
$ git checkout -t origin/work2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch-merged--no-merged&quot;&gt;git branch (–merged | –no-merged)&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--merged&lt;/code&gt;는 이미 merge된 branch를 표시해주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-merged&lt;/code&gt;는 아직 merge가 되지 않은 branch만 표시합니다.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--merged&lt;/code&gt;에 branch 목록 이미 merge되었기 때문에 *가 표시되지 않은 branch는 삭제 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch --merged
* master
  work_new
  work_old

$ git branch --no-merged
  work1
  work2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch--d-branch-이름&quot;&gt;git branch -d (branch 이름)&lt;/h2&gt;
&lt;p&gt;branch를 삭제합니다. 아직 merge하지 않은 커밋을 담고 있는 경우 삭제되지 않습니다.(강제종료 옵션 &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt;으로만 삭제 가능)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -d work3
error: The branch 'work3' is not fully merged.
If you are sure you want to delete it, run 'git branch -D work3'.

$ git branch -d work_new
Deleted branch work_new (was 4bbc62f).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branch--m-변경할-branch이름-변경될-branch이름&quot;&gt;git branch -m (변경할 branch이름) (변경될 branch이름)&lt;/h2&gt;
&lt;p&gt;A 브랜치를 B 브랜치로 변경합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -v
* master   4bbc62f m1
  work2    c728ddc w2
  work_old 4bbc62f m1

$ git branch -m work2 work3

$ git branch -v
* master   4bbc62f m1
  work3    c728ddc w2
  work_old 4bbc62f m1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※ -M 옵션을 사용할 경우 기존에 동일한 이름의 branch가 있더라도 덮어씁니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Remote 주요 명령어 정리</title>
   <link href="https://jistol.github.io/vcs/2017/01/26/git-remote/"/>
   <updated>2017-01-26T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/26/git-remote</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt;명령은 프로젝트의 리모트 저장소를 관리하는 명령어로 주요 명령어만 요약하였습니다.  &lt;br /&gt;
자세한 내용은 &lt;a href=&quot;https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98&quot;&gt;git-scm Git-브랜치-리모트-브랜치&lt;/a&gt;에서 확인하세요.&lt;/p&gt;

&lt;h2 id=&quot;git-remote&quot;&gt;git remote&lt;/h2&gt;
&lt;p&gt;등록된 리모트 저장소 이름만 보여줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-remote--v&quot;&gt;git remote -v&lt;/h2&gt;
&lt;p&gt;등록된 저장소 이름과 URL을 표시합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v
origin  D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git (fetch)
origin  D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-remote-add-리모트이름-경로&quot;&gt;git remote add (리모트이름) (경로)&lt;/h2&gt;
&lt;p&gt;새 리모트를 추가합니다. (경로)영역에는 URL이나 파일경로를 넣을수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote add jistol https://github.com/jisto.github.io
$ git remote add origin D:/dropbox/Dropbox/jekyll/git-source/test.git
$ git remote -v
jistol  https://github.com/jisto.github.io (fetch)
jistol  https://github.com/jisto.github.io (push)
origin  D:/dropbox/Dropbox/jekyll/git-source/test.git (fetch)
origin  D:/dropbox/Dropbox/jekyll/git-source/test.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-remote-show-리모트이름&quot;&gt;git remote show (리모트이름)&lt;/h2&gt;
&lt;p&gt;모든 리모트 경로의 branch와 정보를 표시합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote show origin
* remote origin
  Fetch URL: D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git
  Push  URL: D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git
  HEAD branch: master
  Remote branches:
    master tracked
    work1  tracked
  Local branches configured for 'git pull':
    master merges with remote master
    work1  merges with remote work1
  Local refs configured for 'git push':
    master pushes to master (up to date)
    work1  pushes to work1  (up to date)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-remote-rm-리모트이름&quot;&gt;git remote rm (리모트이름)&lt;/h2&gt;
&lt;p&gt;리모트 경로를 제거합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v
jistol  https://github.com/jistol/jistol.github.git (fetch)
jistol  https://github.com/jistol/jistol.github.git (push)
origin  D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git (fetch)
origin  D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git (push)

$ git remote rm jistol

$ git remote -v
origin  D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git (fetch)
origin  D:/dropbox/Dropbox/jekyll/git-work/user1/../../git-source/test.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Git GUI 툴 추천 - GitKraken</title>
   <link href="https://jistol.github.io/vcs/2017/01/25/git-guitools-kraken/"/>
   <updated>2017-01-25T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/25/git-guitools-kraken</id>
   <content type="html">&lt;p&gt;Git에 대해 공부하면서 대부분 bash에서 실행했으나 전체 commit tree를 보기 위해서는 GUI툴의 도움을 받아야 했는데 처음 사용한 툴이 Atlassian의 SourceTree였습니다.
사용하다보니 무한 로딩에 짜증나고 종종 먹통이 되며 특히 reset명령을 하면 갱신이 멈춰버렸습니다.  &lt;br /&gt;
그런 와중에 다른 무료툴을 살펴보다 발견한것이 GitKraken입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-1.png&quot; alt=&quot;capture1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 툴을 추천하는 이유는 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;갱신 속도가 빠릅니다. &lt;br /&gt;
SourceTree에 비해 엄청나게 이력 갱신이 빠릅니다. 로딩바도 없고 신세계!!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;멀티 저장소/Branch 선택 기능 제공
저장소 선택 가능하고 &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-2.png&quot; alt=&quot;capture2&quot; /&gt;  &lt;br /&gt;
저장소별 branch도 선택 가능합니다. &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-3.png&quot; alt=&quot;capture3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Drag and Drop을 통한 Merge &amp;amp; Rebase  &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-4.png&quot; alt=&quot;capture4&quot; /&gt;  &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-5.png&quot; alt=&quot;capture5&quot; /&gt;   &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-6.png&quot; alt=&quot;capture6&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;간편한 Undo / Redo 기능   &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-7.png&quot; alt=&quot;capture7&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dark계열의 디자인  &lt;br /&gt;
IntelliJ Darcula Theme, Atom과 나란히 쓰기 좋네요~ &lt;br /&gt;
어두운 계열 에디터 쓰기 좋아하시는 분들에게 추천합니다.
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-8.png&quot; alt=&quot;capture8&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 외 웬만한 기능을 다 지원(Pull, Push, Branch, 변경소스 확인 …)
&lt;img src=&quot;/assets/img/git/git-guitools-kraken/git-guitools-kraken-9.png&quot; alt=&quot;capture9&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;무료버전외에 돈주고 유료로도 사용 가능하지만 충분히 무료로도 쓰기 편합니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git branch + merge 사용하기 예제</title>
   <link href="https://jistol.github.io/vcs/2017/01/24/git-branch-merge-exam/"/>
   <updated>2017-01-24T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/24/git-branch-merge-exam</id>
   <content type="html">&lt;p&gt;Git의 branch 및 merge에 대해 공부한 내용을 예제를 통해 설명하고 요약해봅니다.(With SourceTree)  &lt;br /&gt;
잘 설명된 원본 내용은 아래 링크를 참고하세요  &lt;br /&gt;
&lt;a href=&quot;https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%99%80-Merge%EC%9D%98-%EA%B8%B0%EC%B4%88&quot;&gt;Git 브랜치 - 브랜치와 Merge의 기초&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;branch-생성&quot;&gt;Branch 생성&lt;/h2&gt;
&lt;p&gt;보통 프로그램의 별도 기능을 작성하거나, Bug,Issue 등을 따로 처리할 경우 사용하게 됩니다.&lt;/p&gt;

&lt;p&gt;예를 들어 다음과 같이 생성된 프로젝트가 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init   
$ echo 'v1' &amp;gt; origin.txt    
$ git add .    
$ git commit -m 'v1'    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SourceTree를 통해 그래프를 보면 master노드에 ‘v1’ 내용을 담은 origin.txt 파일이 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-1.png&quot; alt=&quot;step1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;신규기능인 feature.txt 개발을 위해 branch를 생성후 파일을 만들어 commit합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch feature1     
$ git checkout feature1
$ echo 'f1' &amp;gt; feature.txt
$ git add .
$ git commit -m 'f1'    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-2.png&quot; alt=&quot;step2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 feature1이라는 branch가 생성되고 feature.txt가 ‘f1’내용으로 개발된 것을 볼 수 있습니다. &lt;br /&gt;
다시 master 노드로 돌아가 origin.txt를 ‘v2’로 변경해 봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
$ echo 'v2' &amp;gt; origin.txt
$ git commit -a -m 'v2'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-3.png&quot; alt=&quot;step3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 좀 더 branch 가지가 분명하게 보이기 시작했습니다.&lt;/p&gt;

&lt;h2 id=&quot;master노드에-merge&quot;&gt;Master노드에 Merge&lt;/h2&gt;
&lt;p&gt;feature1 branch의 기능 개발이 끝났으니 master에 merge 해보도록 하겠습니다.
master에 feature1 branch 내용을 가져올 예정이니 실행은 master 노드에서 해야합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
$ git merge feature1 -m 'merge f1'   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-4.png&quot; alt=&quot;step4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 master노드와 feature1 branch노드가 merge되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;reset으로-되돌리기&quot;&gt;Reset으로 되돌리기&lt;/h2&gt;
&lt;p&gt;이번엔 노드간 충돌예제를 만들어 보기 위해 merge전으로 다시 돌아가 보겠습니다. &lt;br /&gt;
reset 명령을 사용합니다. reset관련 정보는 아래 링크를 참고하세요  &lt;br /&gt;
&lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0&quot;&gt;Git 도구 - Reset 명확히 알고 가기&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reflog
8ee26d8 HEAD@{0}: merge feature1: Merge made by the 'recursive' strategy.
9e75da8 HEAD@{1}: commit: v2
23fa160 HEAD@{2}: checkout: moving from feature1 to master
73aa9b3 HEAD@{3}: commit: f1
23fa160 HEAD@{4}: checkout: moving from master to feature1
23fa160 HEAD@{5}: checkout: moving from feature1 to master
23fa160 HEAD@{6}: checkout: moving from master to feature1
23fa160 HEAD@{7}: commit (initial): v1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;명령을 통해 히스토리를 확인할 수 있습니다. ‘v2’를 commit한 ‘HEAD@{2}’ 시점으로 돌아가 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD@{2}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;reset의 옵션은 아래와 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;–soft&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Repository이력만 되돌립니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[–mixed]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stage영역까지만 되돌립니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;–hard&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Working Directory까지 되돌립니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위와 같이 hard옵션으로 되돌리고 SourceTree를 확인해보면 다시 merge전으로 돌아온 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-5.png&quot; alt=&quot;step5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;merge-충돌-해결하기&quot;&gt;Merge 충돌 해결하기&lt;/h2&gt;
&lt;p&gt;master노드와 feature1 branch노드간의 충돌을 만들기 위해 origin.txt파일을 수정해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout feature1
$ echo 'v2-f1' &amp;gt; origin.txt
$ git commit -a -m 'conflict origin.txt'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-6.png&quot; alt=&quot;step6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;master노드와 feature1 branch노드의 origin.txt파일이 각각 달라졌습니다. 이제 merge를 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
$ git merge feature1 -m 'conflict merge'
Auto-merging origin.txt
CONFLICT (content): Merge conflict in origin.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;origin.txt파일의 내용을 merging하다가 충돌이 나있는 상태입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-7.png&quot; alt=&quot;step7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;충돌난 내용은 위와 같이 구분하여 표시되고 위 내용을 알맞는 값으로 변경한 후 다시 commit하면 merge가 완료됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
$ git commit -m 'finished merge'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-branch-merge-exam/git-branch-merge-8.png&quot; alt=&quot;step8&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git 기초</title>
   <link href="https://jistol.github.io/vcs/2017/01/23/git-basic/"/>
   <updated>2017-01-23T00:00:00+00:00</updated>
   <id>https://jistol.github.io/vcs/2017/01/23/git-basic</id>
   <content type="html">&lt;p&gt;Git의 기초에 대해 정말 잘 설명되있는 페이지를 읽고 요약만 정리하고자 합니다. 원본은 아래링크를 참고하세요.  &lt;br /&gt;
&lt;a href=&quot;https://git-scm.com/book/ko/v1/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EA%B8%B0%EC%B4%88&quot;&gt;시작하기-Git-기초&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;svn-vs-git&quot;&gt;SVN vs Git&lt;/h2&gt;

&lt;p&gt;SVN은 Commit 시점에 변화된 파일만 관리합니다.  &lt;br /&gt;
&lt;img src=&quot;/assets/img/git/git-basic/git-basic-1.png&quot; alt=&quot;SVN-Flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git은 Commit 시점의 스냅샷을 관리합니다. 변화되지 않은 파일도 해당 스냅샷의 링크로 저장합니다.
&lt;img src=&quot;/assets/img/git/git-basic/git-basic-2.png&quot; alt=&quot;Git-Flow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-특징&quot;&gt;Git 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;거의 모든 명령을 로컬에서 실행합니다.&lt;/li&gt;
  &lt;li&gt;데이터를 저장전 SHA-1 해시를 구하고 그 체크섬으로 데이터를 관리합니다.(무결성)&lt;/li&gt;
  &lt;li&gt;Commit한 데이터는 추가하기만 하고 삭제하지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git의-저장구조-상태-상태전이&quot;&gt;Git의 저장구조, 상태, 상태전이&lt;/h2&gt;
&lt;p&gt;git 명령어에 따른 상태전이표입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-basic/git-basic-3.png&quot; alt=&quot;Git-Structure&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;상태&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Modified&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;작업 폴더에서 수정후 Stage에 올리지 않은 상태&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staged&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;수정한 파일을 Stage에 올려 Commit할 스냅샷을 만든 상태&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Committed&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stage의 파일을 git 저장소에 commit한 상태&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;예제&quot;&gt;예제&lt;/h2&gt;

&lt;p&gt;아래 명령어를 통해 두 파일을 저장소에 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'v1' &amp;gt; 1.txt | echo 'v1' &amp;gt; 2.txt
$ git add 1.txt
$ echo 'v2' &amp;gt; 1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;로 현재 저장소의 상태를 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

        new file:   1.txt

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

        modified:   1.txt

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1.txt는 새로 생성되어 ‘v1’이란 내용으로 stage에 올라가 있는 상태이고 로컬엔 ‘v2’로 수정되었습니다.  &lt;br /&gt;
2.txt는 새로 생성되어 아직 로컬에만 있는 상태로 ‘Untracked files’로 표시됩니다.&lt;/p&gt;

&lt;p&gt;위 상태에서 stage의 1.txt파일을 unstage하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD 1.txt&lt;/code&gt;로 실행가능합니다.  &lt;br /&gt;
위 상태에서 1.txt의 내용을 다시 ‘v1’으로 돌리려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout 1.txt&lt;/code&gt;로 실행가능합니다.&lt;/p&gt;

&lt;p&gt;1.txt를 commit하고 나머지 파일을 stage에 올린 후 1.txt를 다시 수정해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m '1.txt commit'
$ git add .
$ echo 'v3' &amp;gt; 1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 상태를 보면 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use &quot;git push&quot; to publish your local commits)
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

        modified:   1.txt
        new file:   2.txt

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

        modified:   1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 1.txt의 각 내용은 저장소별로 아래와 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Working Directory&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Staging Area&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Git Repository&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; 명령을 통해 아래와 같이 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff 1.txt
diff --git a/1.txt b/1.txt
index 8c1384d..29ef827 100644
--- a/1.txt
+++ b/1.txt
@@ -1 +1 @@
-v2
+v3
warning: LF will be replaced by CRLF in 1.txt.
The file will have its original line endings in your working directory.

$ git diff HEAD 1.txt
diff --git a/1.txt b/1.txt
index 626799f..29ef827 100644
--- a/1.txt
+++ b/1.txt
@@ -1 +1 @@
-v1
+v3
warning: LF will be replaced by CRLF in 1.txt.
The file will have its original line endings in your working directory.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>(vi 명령어) 알아두면 유용한 set 명령어</title>
   <link href="https://jistol.github.io/linux/2017/01/22/vim-cmd-favorite-set-list/"/>
   <updated>2017-01-22T00:00:00+00:00</updated>
   <id>https://jistol.github.io/linux/2017/01/22/vim-cmd-favorite-set-list</id>
   <content type="html">&lt;p&gt;vi 편집기 사용시 알아두면 좋을 set 명령어를 요약해 보았습니다.  &lt;br /&gt;
자주 쓰는 명령어는 계정의 home 디렉토리에 “_vimrc” 라는 파일을 만들고 set 옵션 내용을 저장하면 vi편집기 실행시마다 자동으로 적용됩니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;명령어&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;축약&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set ignorecase&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set ic&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;검색/치환시 대소문자를 구분하지 않습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set number&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set nu&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;문서에 줄 번호를 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set showmatch&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set sm&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;괄호 입력시 자동으로 대응되는 괄호를 표시해줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set autoindent&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set ai&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;자동으로 들여쓰기를 합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set hlsearch&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;검색한 단어를 하이라이팅 합니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>(vi 명령어) 문자열 치환하기</title>
   <link href="https://jistol.github.io/linux/2017/01/21/vim-cmd-replace/"/>
   <updated>2017-01-21T00:00:00+00:00</updated>
   <id>https://jistol.github.io/linux/2017/01/21/vim-cmd-replace</id>
   <content type="html">&lt;p&gt;세미콜론을 입력 후 아래 명령어를 통해 내용 치환이 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:[range]s/old/new/[option]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 영역별 옵션은 아래와 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;range&quot;&gt;range&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;예제&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;현재 행에서 치환&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/old/new/&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모든 행에서 치환&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/old/new/&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.,$s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;현재부터 끝까지 치환&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:.,$s/old/new/&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D1,D2s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;D1 ~ D2행까지 치환&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:10,20s/old/new/&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-N,+Ms&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;현재 커서위치 기준으로 -N ~ +M행까지 치환&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-3,+5s/old/new/&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g/pattern/s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;pattern에 해당하는 모든 행을 치환&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:g/veryold/s/old/new/&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;old 영역은 정규표현식을 사용가능하며 new영역은 바뀔 내용을 씁니다.&lt;/p&gt;

&lt;h2 id=&quot;old&quot;&gt;old&lt;/h2&gt;

&lt;p&gt;vi에서 지원하는 old영역 정규표현식은 아래와 같습니다.  &lt;br /&gt;
&lt;em&gt;※ vim에서는 좀더 많은 정규표현식을 지원합니다.&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;표현식&lt;/th&gt;
      &lt;th&gt;기능&lt;/th&gt;
      &lt;th&gt;예제코드&lt;/th&gt;
      &lt;th&gt;변경케이스&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;문자 하나&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/t.e/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;the -&amp;gt; XXX&lt;br /&gt; there -&amp;gt; XXXer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0개이상 문자&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/t*e/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;the -&amp;gt; XXX&lt;br /&gt; test -&amp;gt; XXXst&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;시작&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/^The/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The test -&amp;gt; XXX test&lt;br /&gt; test The -&amp;gt; test The&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;끝&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/$The/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The test -&amp;gt; The test&lt;br /&gt; test The -&amp;gt; test XXX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;escape 문자&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/\[test\]/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;[test] -&amp;gt; XXX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;대괄호 안의 문자중 하나&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/[a-z]*1/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;test1 -&amp;gt; XXX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\{n,m\}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;문자 반복횟수가 n ~ m개인 가능한 많은 문자와 매칭&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\{n,\}&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;\{,m\}&lt;/code&gt; 과 같이도 사용 가능&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/b\{2,3\}/x/g&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ababbabbba -&amp;gt; abaxxaxxxa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\{-n,m\}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;문자 반복횟수가 n ~ m개인 가능한 적은 문자와 매칭&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\{n,\}&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;\{,m\}&lt;/code&gt; 과 같이도 사용 가능&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/b\{2,3\}/x/g&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ababbabbba -&amp;gt; abaxxaxxxa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\(\)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;괄호안의 패턴을 1~9까지 버퍼에 저장, new영역에서 사용&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/\(aaa\)\(bbb\)/\2\1/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;aaabbb -&amp;gt; bbbaaa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&amp;lt;\&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;문자의 앞뒤를 매칭 시킴&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/\&amp;lt;The\&amp;gt;/XXX/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The There -&amp;gt; XXX There&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\{n,m\}&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;\{-n,m\}&lt;/code&gt;의 차이는 가능한 많이 / 가능한 적게 적용하는 것입니다.  &lt;br /&gt;
예를 들어    &lt;br /&gt;
    x xx xxx xxxx xxxxx  &lt;br /&gt;
와 같은 문장을 치환 하면 아래와 같습니다.   &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/x\{2,\}/y/&lt;/code&gt; -&amp;gt; x y y y y  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/x\{-2,\}/y/&lt;/code&gt; -&amp;gt; x y yx yy yyx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;new&quot;&gt;new&lt;/h2&gt;

&lt;p&gt;new영역에서의 교체패턴은 아래와 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;표현식&lt;/th&gt;
      &lt;th&gt;기능&lt;/th&gt;
      &lt;th&gt;예제코드&lt;/th&gt;
      &lt;th&gt;변경케이스&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\(\)&lt;/code&gt;로 지정된 d번째 버퍼를 사용&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/\(aaa\)\(bbb\)/\2\1/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;aaabbb -&amp;gt; bbbaaa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;escape 문자&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/test/\[test\]/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;test -&amp;gt; [test]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;찾기패턴&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/test/_&amp;amp;_/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;test -&amp;gt; &lt;em&gt;test&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;이전 교체패턴을 사용&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/aaa/xxx/&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/bbb/_~_/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;aaabbb -&amp;gt; xxxbbb -&amp;gt; xxxxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\u&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;교체패턴의 첫문자를 대문자로 변경&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/aaa/\ubbb/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;aaa -&amp;gt; Bbb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\U&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;교체패턴의 모든문자를 대문자로 변경&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/aaa/\ubbb/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;aaa -&amp;gt; BBB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\l&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;교체패턴의 첫문자를 소문자로 변경&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/AAA/\uBBB/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;AAA -&amp;gt; bBB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\L&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;교체패턴의 모든문자를 대문자로 변경&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:s/AAA/\uBBB/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;AAA -&amp;gt; bbb&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;option&quot;&gt;option&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;옵션&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;한 줄 내의 모든 패턴 변경&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;대소문자 구분 안함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;변경여부 확인&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>(vi 명령어) 라인번호(줄번호) 보기, 라인이동, 맨위/맨밑 이동</title>
   <link href="https://jistol.github.io/linux/2017/01/20/vim-cmd-line-move/"/>
   <updated>2017-01-20T00:00:00+00:00</updated>
   <id>https://jistol.github.io/linux/2017/01/20/vim-cmd-line-move</id>
   <content type="html">&lt;p&gt;vi 편집기에서 라인을 자유롭게 이동하기 위한 몇 가지 커맨드들을 외워둡시다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;기능&lt;/th&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;라인번호(줄번호) 보기&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:set number&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;라인이동&lt;/td&gt;
      &lt;td&gt;숫자입력후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + g&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;맨위 이동&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gg&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;맨밑 이동&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + g&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:$&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/vim/vim-cmd-line-move/1.png&quot; alt=&quot;라인보기&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>IFrame을 숨기는 방법</title>
   <link href="https://jistol.github.io/frontend/2017/01/19/iframe-hidden/"/>
   <updated>2017-01-19T00:00:00+00:00</updated>
   <id>https://jistol.github.io/frontend/2017/01/19/iframe-hidden</id>
   <content type="html">&lt;p&gt;웹 작업시 내부적인 통신을 위해 iframe 숨겨서 사용하는 경우가 있습니다. &lt;br /&gt;
이 때 iframe은 보여선 안되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;width=0, height=0&lt;/code&gt;으로 설정하는데 그럴 경우 크롬에서 아래 그림과 같이 여백으로 떠버리는 경우가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/frontend/iframe-hidden/1.png&quot; alt=&quot;iframe이 공백으로 보이는 현상&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 추가하는 방법이 style에 &lt;code class=&quot;highlighter-rouge&quot;&gt;display:none;&lt;/code&gt;을 추가하게 되는데 이 역시 다른 브라우저에서 문제를 일으킬 소지가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The iframes used to load test requests all have style=”display:none”.   &lt;br /&gt;
Firefox does not compute styles or perform certain other rendering tasks in elements that are display:none or are children of an element with display:none.    &lt;br /&gt;
Therefore, there are numerous test failures that are false negatives because the behavior in question isn’t being triggered.   &lt;br /&gt;
This problem can be easily resolved by using style=”visibility:hidden” instead.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;display:none;&lt;/code&gt;으로 할 경우 iframe이 정상 로딩 되지 않을수 있다는 점인데, 이를 해결하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;display:none;&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility:hidden;&lt;/code&gt;을 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;iframe을 숨기기 위해 최종적으로 아래와 같은 방법으로 할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'height:0;width:0;border:0;border:none;visibility:hidden;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Agile 방법론 정리</title>
   <link href="https://jistol.github.io/software%20engineering/2017/01/18/agile/"/>
   <updated>2017-01-18T00:00:00+00:00</updated>
   <id>https://jistol.github.io/software%20engineering/2017/01/18/agile</id>
   <content type="html">&lt;p&gt;Agile 방법론에 관해 공부한 내용에 대해 정리한 문서입니다.&lt;/p&gt;

&lt;h1 id=&quot;1-배경&quot;&gt;1. 배경&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EC%9C%84%EA%B8%B0&quot;&gt;소프트웨어 위기&lt;/a&gt;의 원인과 해결방안을 찾음&lt;/li&gt;
  &lt;li&gt;변화하는 요구사항과 측정하기 힘든 작업량&lt;/li&gt;
  &lt;li&gt;기술적인 해결책으로 객체지향 등장, 그리고 객체지향 개발을 하기 위한 적합한 개발 프로세스 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-waterfall의-문제점&quot;&gt;2. Waterfall의 문제점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;수행단계가 명확하게 나뉘어 있어, 앞선 파트가 끝나야만 다음 단계 실행가능&lt;/li&gt;
  &lt;li&gt;요구사항에 맞게 개발되고 있는지 개발 후반부가 되어야 확인 가능함&lt;/li&gt;
  &lt;li&gt;하위 단계 수행중 상위 단계(기획/요구사항등…)에서 수정될 경우 영향도가 매우 큼
    &lt;blockquote&gt;
      &lt;p&gt;가장 큰 문제는 요구사항을 내는 고객도 실체가 보이기 전까진 완벽히 원하는 것을 내놓기 힘들다는 것입니다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-agile-이란&quot;&gt;3. Agile 이란&lt;/h1&gt;
&lt;p&gt;Agile방법론의 기존 방법론과 가장 큰 차이점은 사상과 철학에 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;agile-선언문&quot;&gt;Agile 선언문&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;공정과 도구보다 &lt;strong&gt;개인과 상호작용&lt;/strong&gt;을&lt;/li&gt;
  &lt;li&gt;포괄적인 문서보다 &lt;strong&gt;작동하는 소프트웨어&lt;/strong&gt;를&lt;/li&gt;
  &lt;li&gt;계약 협상보다 &lt;strong&gt;고객과의 협력&lt;/strong&gt;을&lt;/li&gt;
  &lt;li&gt;계획을 따르기보다 &lt;strong&gt;변화에 대응&lt;/strong&gt;하기를&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;어쩔수-없는-부분&quot;&gt;어쩔수 없는 부분&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;고객의 요구사항은 바뀝니다.   
한번에 제대로 할 수 없습니다.   
개발 기간이 길수록 변경사항이 발생할 확률이 높습니다.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;해결-방안&quot;&gt;해결 방안&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;짧은 개발기간으로 빠르게 실체를 만드며 지속적인 결과물을 전달합니다.
최대한 단순화 합니다.
고객과의 피드백/의사소통을 자주하여 바른 방향을 잡습니다.
개개인에게 동기부여하고 가장 효율을 낼 수 있는 환경을 만듭니다.
하나의 팀이 역활과 책임을 공유합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4-agile-종류&quot;&gt;4. Agile 종류&lt;/h1&gt;
&lt;h2 id=&quot;extreme-programmingxp&quot;&gt;eXtreme Programming(XP)&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;명칭&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Whole Team&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;개발자외에 기획,고객,디자이너,테스터등 모든 사람을 팀원으로 구성합니다.&lt;br /&gt;그 중 요구사항을 도출하는 고객이 가장 중요합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Planning Game&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;이번 주기의 개발 범위를 결정하고 그 이후 개발 반복에서 무엇을 할것인가를 계획합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Customer Test&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;의뢰인이 원했던 것과 다른지를 반복적으로 테스트 합니다.&lt;br /&gt;짧은 주기별로 실체를 만들어 내기 때문에 가능.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Small Release&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;릴리즈 주기를 짧게 잡아 주기적으로 프로토타입을 제공합니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;XP를 지키기 위한 기법으로는 아래와 같습니다.  &lt;br /&gt;
&lt;em&gt;출처 : &lt;a href=&quot;https://brunch.co.kr/@insuk/15&quot;&gt;애자일 실천 사례 - XP편&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함께 앉기 : 커뮤니케이션 비용을 줄여줍니다.&lt;/li&gt;
  &lt;li&gt;페어프로그래밍 : 특정 사람에게 의존성이 생기는 것을 방지합니다.&lt;/li&gt;
  &lt;li&gt;사용자스토리 : 프로젝트에 참가하는 모든 사람이 이해하기 쉽습니다.&lt;/li&gt;
  &lt;li&gt;주단위 계획 : 작업계획의 크기를 2~3주 단위로 구성합니다.&lt;/li&gt;
  &lt;li&gt;휴식 : 집중력을 향상 시켜줍니다.&lt;/li&gt;
  &lt;li&gt;지속적 통합(CI) : 나중에 한번에 통합했다가는 날벼락을 맞을수 있습니다.&lt;/li&gt;
  &lt;li&gt;테스트 주도 프로그래밍(TDD)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scrum&quot;&gt;Scrum&lt;/h2&gt;

&lt;p&gt;스크럼은 제품책임자(PO), 스크럼마스터(SM), 그 외 모든 팀원으로 구성됩니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;PO&lt;/th&gt;
      &lt;th&gt;SM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;어떤 순서로 제품이 개발되어야 하는지 결정&lt;br /&gt;팀 외부의 이해관계 당사자들의 피드백을 필터링&lt;/td&gt;
      &lt;td&gt;팀원들의 이슈를 듣고 해결하는 주체&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;스크럼은 아래와 같은 방식으로 진행됩니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;순서&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;제품 백로그 작성&lt;/td&gt;
      &lt;td&gt;사용자 스토리를 수집하여 제품 개발할 항목을 설정&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;스프린트 계획 미팅&lt;/td&gt;
      &lt;td&gt;제품 백로그중 이번 스프린트에서 개발할 항목을 정하고 공수산정&lt;br /&gt;위 과정에서 스프린트 백로그가 생성됩니다.&lt;br /&gt;1~4주 사이로 기간을 정하고 개발을 수행합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;스프린트 개발 진행&lt;/td&gt;
      &lt;td&gt;매일 스크럼 미팅을 통해 작업 계획및 이슈사항을 공유합니다.&lt;br /&gt;번다운 차트를 통하여 개발 진척사항을 관리합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;스프린트 회고&lt;/td&gt;
      &lt;td&gt;이번 스프린트의 장단점을 도출하여 다음 스프린트에 반영합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;릴리즈&lt;/td&gt;
      &lt;td&gt;1~N개의 스프린트를 돌고 제품을 릴리즈 합니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitnami를 이용한 Redmine + Agile 설치 (on Ubuntu)</title>
   <link href="https://jistol.github.io/its/2017/01/11/redmine-install-easy-ubuntu/"/>
   <updated>2017-01-11T00:00:00+00:00</updated>
   <id>https://jistol.github.io/its/2017/01/11/redmine-install-easy-ubuntu</id>
   <content type="html">&lt;p&gt;여분 PC가 생겨 어떻게 쓸까 고민하던중 사내에서 쓰는 Jira 대신 사이트 구축 나가서 쓸 IssueTracking 시스템을 설치해 연습삼아 써보기로 했습니다.  &lt;br /&gt;
그래서 선택한건 OpenSource중 가장 유명한 Redmine.  &lt;br /&gt;
하지만 설치하다가 지옥을 맛보기로도 유명하더군요 ㅠㅠ  &lt;br /&gt;
2~3시간 삽질하다가 Bitnami를 통해 쉽게 설치 가능함을 발견하고 10여분 만에 설치를 완료했습니다.&lt;/p&gt;

&lt;h2 id=&quot;bitnami&quot;&gt;Bitnami&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://bitnami.com&quot;&gt;Bitnami 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기존에 복잡하게 설치해야만 했던 환경을 단번에 구성해 줍니다. 심지어 각 OS별로 설치 할 수 있도록 제공 할 뿐만 아니라, Docker Container 및 Bitnami에서 제공하는 cloud환경에서 사용할 수도 있는것 같습니다. &lt;br /&gt;
Applications메뉴를 눌러보면 다양한 설치할 수 있는 다양한 항목이 표시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/its/redmine-install-easy-ubuntu/4.png&quot; alt=&quot;Bitnami Applications Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 중에 설치할 항목인 “Redmine + Agile” 선택.&lt;/p&gt;

&lt;h2 id=&quot;redmine-install&quot;&gt;Redmine Install&lt;/h2&gt;

&lt;p&gt;설치할 파일을 다운로드하고 실행권한을 준 후 바로 실행하면 설치가 진행됩니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Redmine 설치파일의 경우 비로그인 상태에서도 다운을 받을수 있어 wget명령어를 통해 바로 다운로드가 가능하나 Redmine+Agile 설치파일의 경우에는 반드시 로그인이 필요하여 파일을 다운받아 옮기도록 해야합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chmod 775 ./redmineplusagile-3.3.1-1-linux-x64-installer.run
$ sudo ./redmineplusagile-3.3.1-1-linux-x64-installer.run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Windows Installer처럼 쉽게 선택만 하면 설치과정이 끝납니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Please select the installation language
[1] English - English
[2] Spanish - Español
[3] Japanese - 日本語
[4] Korean - 한국어
[5] Simplified Chinese - 简体中文
[6] Hebrew - עברית
[7] German - Deutsch
[8] Romanian - Română
[9] Russian - Русский
Please choose an option [1] : 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 진행할 언어를 선택합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------------------------------------------------------------------------
Redmine+Agile 설치 마법사를 시작합니다.

----------------------------------------------------------------------------
설치할 구성 요소를 선택하십시오. 설치하지 않을 구성 요소는 선택을 취소하십시오. 계속할 준비가 되면클릭하십시오.

Subversion [Y/n] :y

PhpMyAdmin [Y/n] :n

Redmine : Y (Cannot be edited)

Agile plugin : Y (Cannot be edited)

Git [Y/n] :y

위의 선택이 정확합니까? [Y/n]: y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;같이 설치될 Plugin을 선택합니다.  &lt;br /&gt;
SVN, GIT을 같이 설치할 수 있어서 SCM연동을 별도로 해야하는 수고를 덜어주는군요&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------------------------------------------------------------------------
설치 경로

Redmine+Agile의 설치 경로를 선택하세요.

폴더 선택 [/opt/redmineplusagile-3.3.1-1]:

----------------------------------------------------------------------------
Admin 계정 생성

Redmine+Agile 관리자 계정을 생성합니다.

이름 [User Name]: jistol

이메일 주소 [user@example.com]: kimjh@spectra.co.kr

로그인 계정명 [user]: kimjh

패스워드 :
패스워드를 재입력 :
----------------------------------------------------------------------------
웹 서버 포트 번호

Choose a port that is not currently in use, such as port 81.

Apache 서버 포트 번호 [81]: 8080

----------------------------------------------------------------------------
MySQL 정보

MySQL 데이터베이스 정보를 입력하세요.

Choose a port that is not currently in use, such as port 3307.

MySQL 서버 포트 번호 [3307]:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;웹 서버가 기존 Apache에서 80을 쓰고 있어 8080으로 설정했습니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------------------------------------------------------------------------
기본 데이터 설정에 사용할 언어

기본 데이터 설정 시 사용할 언어를 선택하세요.

[1] Bosnian
[2] 불가리아어
[3] Catalan
[4] 체코어
[5] Danish
[6] 독일어
[7] 영어
[8] 스페인어
[9] 프랑스어
[10] Galician
[11] 히브리어
[12] Hungarian
[13] 이탈리아어
[14] 일본어
[15] 한국어
[16] Lithuanian
[17] 네덜란드어
[18] Norwegian
[19] 폴란드어
[20] 포르투갈어
[21] 루마니아어
[22] 러시아어
[23] Slovak
[24] Slovenian
[25] 세르비아어
[26] 스웨덴어
[27] Turkish
[28] Ukrainian
[29] Vietnamese
[30] 중국어
옵션을 선택하십시오. [15] : 15

사용하시겠습니까? [y/N]: n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Redmine 기본 언어를 선택합니다.&lt;/p&gt;

&lt;p&gt;언어 선택후 “사용하시겠습니까?”라는 질문이 나오는데 국문 설치시 당할수 있는 함정입니다.  저 선택은 언어를 선택하겠냐는 얘기가 아니라 SMTP메일 서버를 설정하여 메일을 발송 하겠냐는 얘기인데 국문 설치엔 앞뒤 다 짜르고 저렇게 나오네요.(영문에서는 설명이 잘 나옵니다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------------------------------------------------------------------------
이제 컴퓨터에 Redmine+Agile을(를) 설치할 준비가 되었습니다.

계속하시겠습니까? [Y/n]: y

----------------------------------------------------------------------------
컴퓨터에 Redmine+Agile을(를) 설치하는 동안 기다려 주십시오.

 설치
 0% ______________ 50% ______________ 100%
 ########################################

 ----------------------------------------------------------------------------
 컴퓨터에 Redmine+Agile 설치를 완료했습니다.

 Redmine 어플리케이션 구동 [Y/n]: Y

 정보: To access the Redmine+Agile, go to
 http://127.0.0.1:8080 from your browser.
 계속하려면 [Enter] 키 누르기:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 설치가 끝나면 Redmine을 구동해주고 웹페이지에 접속하여 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/its/redmine-install-easy-ubuntu/5.png&quot; alt=&quot;설치완료 화면&quot; /&gt;&lt;/p&gt;

&lt;p&gt;관리화면에 가면 위와 같이 Agile Plugin이 추가되어 있는것을 확인할 수 있습니다. &lt;br /&gt;
설치된 Agile버전은 무료버전인 Light버전으로 자세한 사항은 아래 링크에서 확인 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.redmineup.com/pages/plugins/agile&quot;&gt;Redmineup - Agile 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;redmine-uninstall-하기&quot;&gt;Redmine Uninstall 하기&lt;/h2&gt;

&lt;p&gt;설치된 폴더에 가보면 uninstall 파일이 존재합니다. 해당 파일 실행하면 Uninstall됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kimjh@kimjh:/opt/redmineplusagile-3.3.1-1$ ls
README.txt     ctlscript.sh           perl            sqlite
apache2        git                    php             subversion
apps           img                    postgresql      uninstall
changelog.txt  licenses               properties.ini  uninstall.dat
common         manager-linux-x64.run  ruby            use_redmineplusagile
config         mysql                  scripts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>GitHub Page 개발환경 구축하기</title>
   <link href="https://jistol.github.io/etc/2017/01/09/github-page-setup/"/>
   <updated>2017-01-09T00:00:00+00:00</updated>
   <id>https://jistol.github.io/etc/2017/01/09/github-page-setup</id>
   <content type="html">&lt;p&gt;에버노트가 계정당 접속 제한을 두면서 너무 불편해저서 이 기회에 탈 에버노트겸 개발 관련 내용을 정리할 블로그를 찾던 중 GitHub Page에 대해 알게 되었고 이를 쓰기 위한 기본 환경 구축한 방법을 정리합니다.&lt;/p&gt;

&lt;h1 id=&quot;구성&quot;&gt;구성&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Windows 10 Home&lt;/li&gt;
  &lt;li&gt;Docker toolbox
    &lt;ul&gt;
      &lt;li&gt;Ubuntu&lt;/li&gt;
      &lt;li&gt;Jekyll&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dropbox&lt;/li&gt;
  &lt;li&gt;Editor : Atom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;집 PC에 Linux를 설치 할 순 없고 Docker Windows용은 Windows 10 (Professional / Enterprise 64-bit) 부터 지원하기 때문에 하위 버전에서 사용 가능한 Docker-toolbox를 설치하고 Ubuntu를 띄워 Jekyll을 돌리기로 했습니다.&lt;br /&gt;
블로그 소스는 Git으로 관리하면 되긴하지만 혹시나 다른 곳에서 안올리고 이동했을때 편하게 쓰려고 저장소를 Dropbox에 위치 시켰습니다. 그리고 Markdown 안드로이드 앱이 Dropbox 저장소 연동을 지원하기 때문에 PC없이 모바일에서 작성하고 서버에 올릴 수 있는 장점도 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;

&lt;h2 id=&quot;dropbox-설치&quot;&gt;Dropbox 설치&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker와의 공유설정을 쉽게 하려면 사용자 기본폴더 (“C:\User”)하위에 공유폴더를 위치 시키면 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;docker-toolbox-설치&quot;&gt;Docker toolbox 설치&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.docker.com/products/docker-toolbox&quot;&gt;Docker toolbox 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치 후 공유폴더 설정을 진행합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker-toolbox는 Oracle Virtual Box를 이용하기 때문에 공유폴더를 따로 설정해 두어야 Docker내/외부에서 파일 공유가 가능합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;toolbox 설치시 “default” 이미지가 생성되며 VM관리자 화면에 접속하여 다음과 같이 공유폴더를 설정합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/etc/github-page-setup/1.png&quot; alt=&quot;VM관리자 설정-공유폴더&quot; /&gt;&lt;/p&gt;

&lt;p&gt;docker-machine 명령어를 통해 접속하여 해당 공유폴더를 mount합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-machine ssh default
$ cd /var/lib/boot2docker/
$ sudo vi bootlocal.sh

#!/bin/sh
mkdir /dropbox
chmod 777 /dropbox
mount -t vboxsf dropbox /dropbox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;bootlocal.sh파일을 만들어 설정하면 machine 재시작시에도 공유폴더 설정이 날아가지 않습니다.&lt;/li&gt;
  &lt;li&gt;공유할 파일에 권한을 주지 않을 경우 Protocol Error를 반환합니다.&lt;/li&gt;
  &lt;li&gt;mount시 VM설정에서 설정한 공유폴더명을 그대로 써야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu-image-다운로드&quot;&gt;Ubuntu Image 다운로드&lt;/h2&gt;
&lt;p&gt;docker-toolbox를 실행하고 아래 명령어를 통해 다운로드할 docker image를 찾습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker search ubuntu
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                            Ubuntu is a Debian-based Linux operating s...   5289      [OK]
ubuntu-upstart                    Upstart is an event-based replacement for ...   69        [OK]
rastasheep/ubuntu-sshd            Dockerized SSH service, built on top of of...   61                   [OK]
consol/ubuntu-xfce-vnc            Ubuntu container with &quot;headless&quot; VNC sessi...   34                   [OK]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러가지 ubuntu버전을 찾을수 있는데 가장 기본 버전을 다운 받아 설치하도록 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull ubuntu
Using default tag: latest
latest: Pulling from library/ubuntu
b3e1c725a85f: Pull complete
4daad8bdde31: Pull complete
63fe8c0068a8: Pull complete
4a70713c436f: Pull complete
bd842a2105a8: Pull complete
Digest: sha256:7a64bc9c8843b0a8c8b8a7e4715b7615e4e1b0d8ca3c7e7a76ec8250899c397a
Status: Downloaded newer image for ubuntu:latest    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker pull &lt;이미지명&gt;:&lt;태그&gt;  
태그 미포함시 가장 최신버전을 다운받습니다.(latest)&lt;/태그&gt;&lt;/이미지명&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker-container-생성&quot;&gt;Docker Container 생성&lt;/h2&gt;
&lt;p&gt;다운 받은 이미지를 통해 실제 구동할 Docker Container를 생성합니다.&lt;br /&gt;
생성 시 아래와 같은 설정을 추가합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jekyll을 통해 외부에서 웹페이지에 접근할 수 있어야 하므로 4000포트를 열어줍니다.&lt;/li&gt;
  &lt;li&gt;dropbox를 통해 파일을 업로드 할 수 있도록 공유폴더를 선택합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 조건에 맞게 docker container를 생성하기 위해 아래와 같이 명령어를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -i -t -v /dropbox:/opt/dropbox -p 4000:4000 --name jekyll ubuntu /bin/bash  
root@6ef6ea062b7a:/#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Container의 4000번 포트를 외부 환경으로 연결하기 위해 -p 옵션으로 설정합니다.&lt;/li&gt;
  &lt;li&gt;“VM - Docker”간 연결한 공유폴더(/dropbox)를 -v 옵션을 통해 Container에 연결해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;-i, –interactive=false: 표준 입력(stdin)을 활성화하며 컨테이너와 연결(attach)되어 있지 않더라도 표준 입력을 유지합니다. 보통 이 옵션을 사용하여 Bash에 명령을 입력합니다.&lt;br /&gt;
-t, –tty=false: TTY 모드(pseudo-TTY)를 사용합니다. Bash를 사용하려면 이 옵션을 설정해야 합니다. 이 옵션을 설정하지 않으면 명령을 입력할 수는 있지만 셸이 표시되지 않습니다.&lt;br /&gt;
-p, –publish=[]: 호스트에 연결된 컨테이너의 특정 포트를 외부에 노출합니다. 보통 웹 서버의 포트를 노출할 때 주로 사용합니다.&lt;br /&gt;
-v 외부와 공유할 포트를 설정 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ubuntu-기본설정&quot;&gt;Ubuntu 기본설정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;jekyll을 운용할 계정을 추가합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ adduser [userid]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본적으로 사용할 패키지들을 추가합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ apt-get update
 $ apt-get install net-tools sudo vim bzip2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sudo 사용을 위해 아래와 같이 설정합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; chmod +w /etc/sudoers
 vi /etc/sudoers

 =&amp;gt; userid          ALL=(ALL)          NOPASSWD:ALL

 chmod -w /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ruby-설치&quot;&gt;Ruby 설치&lt;/h2&gt;
&lt;p&gt;jekyll은 ruby로 작성된 프로그램입니다. jekyll을 띄우기 위해서는 ruby를 설치해야하는데 이 부분에서 가장 많이 헤맸네요. &lt;br /&gt;
애초에 ruby설치법을 찾았으면 덜 헤맸을 것을 jekyll 설치 메뉴얼에 적힌 ruby설치법을 따라갔더니 계속 무언가 문제가 생겼었습니다.&lt;br /&gt;
각 OS별 정확한 ruby 설치 방법은 GoRails에 친절하게 설명되어 있으니 참고 하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gorails.com/setup&quot;&gt;Go Rails 바로가기&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/etc/github-page-setup/2.png&quot; alt=&quot;Go Rails Setup Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치방법들중 권장 방법인 rbenv를 이용하여 설치하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ su userid
$ sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev nodejs
$ cd
$ git clone git://github.com/sstephenson/rbenv.git .rbenv
$ echo 'export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc
$ echo 'eval &quot;$(rbenv init -)&quot;' &amp;gt;&amp;gt; ~/.bashrc  
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ echo 'export PATH=&quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc
$ exec $SHELL

$ rbenv install 2.3.3
$ rbenv global 2.3.3
$ ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bundler-jekyll-설치&quot;&gt;bundler, jekyll 설치&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install bundler
$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jekyll-예제-서버-생성&quot;&gt;jekyll 예제 서버 생성&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /opt/dropbox
$ jekyll new myblog  
$ cd myblog
$ ifconfig  // local ip 확인
$ jekyll serve -H [local-IP]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;jekyll 구동시 -H 으로 local IP를 지정하지 않을 경우 127.0.0.1로 구동하면서 외부 웹페이지에서 접근할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;외부 연결 포트를 다르게 지정했을 경우 -P 옵션으로 변경 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pc-웹페이지에서-서버-동작-확인&quot;&gt;PC 웹페이지에서 서버 동작 확인&lt;/h2&gt;

&lt;p&gt;CMD창을 열고 docker-machine이 떠 있는 IP를 확인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-machine ls
NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
default   -        virtualbox   Running   tcp://192.168.99.100:2376           v1.12.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;확인된 IP로 접속하면 아래와 같이 정상적으로 서버가 구동하고 있는것을 확인 할 수 있습니다.&lt;br /&gt;
&lt;img src=&quot;/assets/img/etc/github-page-setup/3.png&quot; alt=&quot;Jekyll Server 구동화면&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
