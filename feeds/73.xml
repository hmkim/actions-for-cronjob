<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heee's Development Blog</title>
    <description>Step by step goes a long way.</description>
    <link>http://gmlwjd9405.github.io/</link>
    <atom:link href="http://gmlwjd9405.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 May 2019 13:08:19 +0000</pubDate>
    <lastBuildDate>Fri, 03 May 2019 13:08:19 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>[DB] SQL문 기본 문법 - 검색편(select)</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;SQL이란
      &lt;ul&gt;
        &lt;li&gt;SQL 명령의 종류&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;SELECT 명령문 (SQL 기본 문법)
      &lt;ul&gt;
        &lt;li&gt;검색 조건 지정&lt;/li&gt;
        &lt;li&gt;검색 조건 조합&lt;/li&gt;
        &lt;li&gt;패턴 매칭에 의한 검색&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;sql문&quot;&gt;SQL문&lt;/h2&gt;
&lt;p&gt;SQL은 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;“관계형 데이터베이스” 관리 시스템(RDBMS, Relational Database Management System)을 조작&lt;/span&gt;할 때 사용하는 언어이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RDBMS: 행과 열을 가지는 &lt;strong&gt;표 형식&lt;/strong&gt; 데이터(2차원 데이터)를 저장하는 형태의 DB
    &lt;ul&gt;
      &lt;li&gt;행(레코드), 열(컬럼/필드), 셀(행과 열이 만나는 부분, 하나의 데이터 값)&lt;/li&gt;
      &lt;li&gt;수치형, 문자열형, 날짜시간형, NULL(값이 없는 데이터) 등의 자료형이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sql-명령의-종류&quot;&gt;SQL 명령의 종류&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;DML (Data Manipulation Language)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;데이터 조작&lt;/strong&gt;, SQL의 가장 기본이 되는 명령셋(set)&lt;/li&gt;
      &lt;li&gt;DB에 새롭게 데이터를 추가하거나 삭제하거나 내용을 갱신하는 등에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DDL (Data Definition Language)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;데이터 정의&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;DB 객체(object)라는 데이터 그릇을 이용하여 데이터를 관리하는데, 이 같은 객체를 만들거나 삭제하는 명령어&lt;/li&gt;
      &lt;li&gt;DB 객체에는 테이블, 뷰(View) 등이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DCL (Data Control Language)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;데이터 제어&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;트랜잭션을 제어하는 명령과 데이터 접근 권한을 제어하는 명령 포함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;desc-명령-sql-명령-아님&quot;&gt;DESC 명령 (SQL 명령 아님)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;테이블의 구조 참조
    &lt;ul&gt;
      &lt;li&gt;테이블에 어떤 열이 정의되어 있는지 알 수 있다.&lt;/li&gt;
      &lt;li&gt;열 이름(Field), 열의 자료형(Type), NULL 제약사항(Null), Key 지정 정보(Key), 생략된 경우의 기본값(Default) 등 해당 테이블의 구조 정보를 확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;select-명령문-sql의-dml&quot;&gt;SELECT 명령문 (SQL의 DML)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DML에 속하는 명령으로 “질의”나 “쿼리”라 불리기도 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;해당하는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모든&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;읽는다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;위와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;동일&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;대소문자&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구별&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;예약어와 DB 객체명은 대소문자를 구별하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;검색-조건-지정&quot;&gt;검색 조건 지정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;열 지정&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블명&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;행 지정&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;순서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;중요&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블명&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;수치형&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값이&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;동일한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행만&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값이&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아닌&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행만&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;문자열형&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'아무개'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;값&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthday&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;where 구(조건식)는 ‘열과 연산자, 상수로 구성되는 식’이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;검색-조건-조합&quot;&gt;검색 조건 조합&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AND, OR, NOT&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;열&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;열이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모두&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아닌&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;열이&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아니거나&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;열이&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아닌&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;조건식&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;열이&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아니거나&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;열이&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아닌&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;제외한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;나머지&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;AND는 OR에 비해 우선 순위가 높다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;패턴-매칭에-의한-검색&quot;&gt;패턴 매칭에 의한 검색&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정 문자나 문자열이 포함되어 있는지를 검색하고 싶은 경우 &lt;strong&gt;‘패턴 매칭’&lt;/strong&gt;(부분 검색)을 사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LIKE&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'패턴'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열에&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SQL'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;포함하는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SQL%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;전방일치&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%SQL%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;중간일치&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열에&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;메타문자&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;포함하는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;행을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;검색&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\%&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이스케이프&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;문자&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용&lt;/span&gt; 

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열에&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'It'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'을 포함하는 행을 검색
&amp;gt; SELECT * FROM sample WHERE text LIKE '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'; // '&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;문자열&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;상수&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;안에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;포함할&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;경우&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;개를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;연속해서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;기술&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;사용할 수 있는 메타문자(또는 와일드카드)는 &lt;strong&gt;’%’와 ‘_‘&lt;/strong&gt;가 있다.&lt;/li&gt;
  &lt;li&gt;%(퍼센트): 임의의 문자열과 매치, 빈 물자열에도 매치한다.&lt;/li&gt;
  &lt;li&gt;_(언더스코어): 임의의 문자 하나&lt;/li&gt;
  &lt;li&gt;*는 사용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- # 관련된 Post --&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482311&quot;&gt;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482311&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/04/25/db-sql-select.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/04/25/db-sql-select.html</guid>
        
        <category>database</category>
        
        <category>sql</category>
        
        <category>query</category>
        
        <category>db</category>
        
        
      </item>
    
      <item>
        <title>[JavaScript] 호이스팅(Hoisting)이란</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16695/&quot;&gt;Edwith 강의&lt;/a&gt; 참고&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;호이스팅(Hoisting)이란 무엇인지 이해한다.&lt;/li&gt;
    &lt;li&gt;함수선언문과 함수표현식에서의 호이스팅 차이를 이해한다.
      &lt;ul&gt;
        &lt;li&gt;let/const와 var 변수 선언에서의 호이스팅 예시&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;같은 이름의 var 변수 선언과 함수 선언에서의 호이스팅에 대해 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;호이스팅hoisting의-개념&quot;&gt;호이스팅(Hoisting)의 개념&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;함수 안에 있는 선언들을 모두 끌어올려서 해당 함수 유효 범위의 최상단에 선언하는 것&lt;/span&gt;을 말한다.&lt;/p&gt;

&lt;h3 id=&quot;호이스팅이란&quot;&gt;호이스팅이란&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서 &lt;strong&gt;유효 범위의 최상단&lt;/strong&gt;에 선언한다.
    &lt;ul&gt;
      &lt;li&gt;자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑는다.&lt;/li&gt;
      &lt;li&gt;함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시킨다.&lt;/li&gt;
      &lt;li&gt;유효 범위: 함수 블록 &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; 안에서 유효&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;즉, 함수 내에서 아래쪽에 존재하는 내용 중 필요한 값들을 끌어올리는 것이다.
    &lt;ul&gt;
      &lt;li&gt;실제로 코드가 끌어올려지는 건 아니며, 자바스크립트 Parser 내부적으로 끌어올려서 처리하는 것이다.&lt;/li&gt;
      &lt;li&gt;실제 메모리에서는 변화가 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;호이스팅의-대상&quot;&gt;호이스팅의 대상&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;var 변수 선언&lt;/strong&gt;과 &lt;strong&gt;함수선언문&lt;/strong&gt;에서만 호이스팅이 일어난다.
    &lt;ul&gt;
      &lt;li&gt;var 변수/함수의 &lt;strong&gt;선언&lt;/strong&gt;만 위로 끌어 올려지며, &lt;strong&gt;할당&lt;/strong&gt;은 끌어 올려지지 않는다.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;let/const 변수 선언과 함수표현식&lt;/em&gt;에서는 호이스팅이 발생하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;간단한 예시 (var 변수 vs let/const 변수)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// var 변수 &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// let 변수 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 - 위와 동일 --- */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] &quot;선언&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;할당&quot;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] 발생 X&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;간단한 예시 (함수선언문 vs 함수표현식)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 - 위와 동일 --- */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] 함수표현식의 변수값 &quot;선언&quot;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] 함수선언문&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!! &lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;호이스팅은 함수선언문과 함수표현식에서 서로 다르게 동작하기 때문에 주의해야 한다.
    &lt;ul&gt;
      &lt;li&gt;변수에 할당된 함수표현식은 끌어 올려지지 않기 때문에 이때는 변수의 스코프 규칙을 그대로 따른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;함수선언문과-함수표현식에서의-호이스팅&quot;&gt;함수선언문과 함수표현식에서의 호이스팅&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;들어가기 전: &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/20/function-declaration-vs-function-expression.html&quot;&gt;함수선언문과 함수표현식의 차이&lt;/a&gt;는 다음 POST를 참고하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;함수선언문에서의-호이스팅&quot;&gt;함수선언문에서의 호이스팅&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수선언문은 코드를 구현한 위치와 관계없이 자바스크립트의 특징인 호이스팅에 따라 브라우저가 자바스크립트를 해석할 때 맨 위로 끌어 올려진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 정상 출력 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문 &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;선언 및 할당&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;function&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;name is inner value&quot;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문 &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 호출 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 - 위와 동일 --- */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 정상 출력 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] var 변수 &quot;선언&quot;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] 함수선언문&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;할당&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;function&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;name is inner value&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;즉, 해당 예제에서는 함수선언문이 아래에 있어도 printName 함수 내에서 inner를 function으로 인식하기 때문에 오류가 발생하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;함수표현식에서의-호이스팅&quot;&gt;함수표현식에서의 호이스팅&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수표현식은 함수선언문과 달리 선언과 호출 순서에 따라서 정상적으로 함수가 실행되지 않을 수 있다.
    &lt;ul&gt;
      &lt;li&gt;함수표현식에서는 선언과 할당의 분리가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;함수표현식의 선언이 호출보다 위에 있는 경우 - 정상 출력
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/* 정상 */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식 &lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 &quot;호출&quot;&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;name is inner value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/* 정상 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 - 위와 동일 --- */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] 함수표현식의 변수값 &quot;선언&quot;&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] var 변수값 &quot;선언&quot;&lt;/span&gt;

     &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식 &quot;할당&quot;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
     &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 &quot;호출&quot;&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;name is inner value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;함수표현식의 선언이 호출보다 아래에 있는 경우 (&lt;em&gt;var 변수&lt;/em&gt;에 할당) - &lt;strong&gt;&lt;em&gt;TypeError&lt;/em&gt;&lt;/strong&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/* 오류 */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;undefined&quot;: 선언은 되어 있지만 값이 할당되어있지 않은 경우&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!!&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식 &lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; TypeError: inner is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 --- */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* 오류 */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Hoisting] 함수표현식의 변수값 &quot;선언&quot;&lt;/span&gt;

     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;undefined&quot;&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!!&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; TypeError: inner is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Q.&lt;/strong&gt; printName에서 “inner is not defined” 이라고 오류가 나오지 않고, “inner is not a function”이라는 TypeError가 나오는 이유?&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;A.&lt;/strong&gt; printName이 실행되는 순간 (Hoisting에 의해) inner는 ‘undefined’으로 지정되기 때문&lt;/li&gt;
      &lt;li&gt;inner가 undefined라는 것은 즉, 아직은 함수로 인식이 되지 않고 있다는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수표현식의 선언이 호출보다 아래에 있는 경우 (&lt;em&gt;const/let 변수&lt;/em&gt;에 할당) - &lt;strong&gt;&lt;em&gt;ReferenceError&lt;/em&gt;&lt;/strong&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/* 오류 */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!!&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식 &lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; ReferenceError: inner is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;let/const의 경우, 호이스팅이 일어나지 않기 때문에 위의 예시 그대로 이해하면 된다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(inner);&lt;/code&gt;에서 inner에 대한 선언이 되어있지 않기 때문에 이때는 “inner is not defined” 오류가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;함수표현식보다 함수선언문을 더 자주 사용하지만, 어떤 코딩컨벤션에서는 함수표현식을 권장하기도 한다.
    &lt;ul&gt;
      &lt;li&gt;즉, 어떤 컨벤션을 갖던지 한가지만 정해서 사용하는 게 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;호이스팅-우선순위&quot;&gt;호이스팅 우선순위&lt;/h2&gt;
&lt;h3 id=&quot;같은-이름의-var-변수-선언과-함수-선언에서의-호이스팅&quot;&gt;같은 이름의 var 변수 선언과 함수 선언에서의 호이스팅&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;변수 선언이 함수 선언보다 위로 끌어올려진다.
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yuddomack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;everyone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 --- */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1. [Hoisting] 변수값 선언 &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

  &lt;span class=&quot;c1&quot;&gt;// 2. [Hoisting] 함수선언문&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yuddomack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;everyone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 3. 변수값 할당&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;string&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;string&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;값이 할당되어 있지 않은 변수와 값이 할당되어 있는 변수에서의 호이스팅
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Heee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 값 할당 &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 값 할당 X&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 같은 이름의 함수 선언&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myName Function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 같은 이름의 함수 선언&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yourName Function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;string&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yourName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; &quot;function&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;값이 할당되어 있지 않은 변수의 경우, 함수선언문이 변수를 덮어쓴다.&lt;/li&gt;
      &lt;li&gt;값이 할당되어 있는 변수의 경우, 변수가 함수선언문을 덮어쓴다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;TIP&lt;/mark&gt; 호이스팅 사용 시 주의&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;코드의 가독성과 유지보수를 위해 호이스팅이 일어나지 않도록 한다.
    &lt;ul&gt;
      &lt;li&gt;호이스팅을 제대로 모르더라도 함수와 변수를 가급적 코드 상단부에서 선언하면, 호이스팅으로 인한 스코프 꼬임 현상은 방지할 수 있다.&lt;/li&gt;
      &lt;li&gt;let/const를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;var를 쓰면 혼란스럽고 쓸모없는 코드가 생길 수 있다. 그럼 왜 var와 호이스팅을 이해해야 할까?
    &lt;ul&gt;
      &lt;li&gt;ES6를 어디에서든 쓸 수 있으려면 아직 시간이 더 필요하므로 ES5로 트랜스컴파일을 해야한다.&lt;/li&gt;
      &lt;li&gt;따라서 아직은 var가 어떻게 동작하는지 이해하고 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;JavaScript의 변수, 연산자, 타입에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/18/javascript-variable-and-type.html&quot;&gt;자바스크립트의 변수, 연산자, 타입의 종류&lt;/a&gt;를 참고하시기 바랍니다&lt;/li&gt;
  &lt;li&gt;JavaScript의 비교, 반복, 문자열에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/19/javascript-if-switch-for.html&quot;&gt;자바스크립트의 비교, 반복, 문자열 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;JavaScript의 함수선언문과 함수표현식의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/20/function-declaration-vs-function-expression.html&quot;&gt;함수표현식 vs 함수선언문&lt;/a&gt;를 참고하시기 바랍니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16695/&quot;&gt;https://www.edwith.org/boostcourse-web/lecture/16695/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://yuddomack.tistory.com/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85Hoisting#recentComments&quot;&gt;https://yuddomack.tistory.com/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85Hoisting#recentComments&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html</guid>
        
        <category>javascript</category>
        
        <category>function</category>
        
        <category>hoisting</category>
        
        
      </item>
    
      <item>
        <title>[JavaScript] 함수선언문과 함수표현식의 차이</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16695/&quot;&gt;Edwith 강의&lt;/a&gt; 참고&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;자바스크립트의 함수의 개념과 특징에 대해 이해한다.&lt;/li&gt;
    &lt;li&gt;함수선언문과 함수표현식의 차이를 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;함수&quot;&gt;함수&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;함수는 여러 개의 인자를 받아서, 그 결과를 출력한다.&lt;/li&gt;
  &lt;li&gt;파라미터의 개수와 인자의 개수가 일치하지 않아도 오류가 발생하지 않는다.
    &lt;ul&gt;
      &lt;li&gt;만약, 파라미터 1개가 정의된 함수를 부를 때, 인자의 개수를 0개만 넣어 실행하면 이미 정의된 파라미터(매개변수)는 undefined이라는 값을 갖게 된다.&lt;/li&gt;
      &lt;li&gt;이는 변수는 초기화됐지만, 값이 할당되지 않았기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자바스크립트에서는 &lt;strong&gt;함수도 객체&lt;/strong&gt;이다.
    &lt;ul&gt;
      &lt;li&gt;따라서 다른 객체와 마찬가지로 넘기거나 할당할 수 있다.&lt;/li&gt;
      &lt;li&gt;함수를 &lt;em&gt;객체 프로퍼티&lt;/em&gt;에 할당할 수도 있다.
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFunc&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// test!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;함수를 &lt;em&gt;객체 배열 요소&lt;/em&gt;로 할당할 수도 있다.
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFunc&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// test!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;함수-호출-vs-함수-참조&quot;&gt;함수 호출 vs 함수 참조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;함수 호출&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;함수 식별자 뒤에 괄호를 쓰면 함수 본문(Body)을 실행한다&lt;/li&gt;
      &lt;li&gt;함수를 호출한 표현식은 반환값이 된다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testFunc()&lt;/code&gt; // test!! (함수 호출)
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// 함수의 호출.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;함수 참조&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;함수 식별자 뒤에 괄호를 쓰지 않으면 함수는 실행되지 않는다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testFunc&lt;/code&gt; // function testFunc() // (함수 참조)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const f = testFunc&lt;/code&gt;와 같이 함수를 변수에 할당하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt;과 같이 다른 이름으로 함수를 호출할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;원시값-매개변수-vs-객체-매개변수&quot;&gt;원시값 매개변수 vs 객체 매개변수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수를 호출하면 함수 매개변수는 변수 자체가 아니라 그 값을 전달받는다.
    &lt;ul&gt;
      &lt;li&gt;따라서 넘겨받은 &lt;strong&gt;원시값&lt;/strong&gt; 매개변수를 함수 내에서 변경하더라도 밖에서는 변경되지 않는다.&lt;/li&gt;
      &lt;li&gt;하지만 넘겨받은 매개변수가 &lt;strong&gt;객체&lt;/strong&gt;이고, 이 객체 자체를 변경하면 그 객체는 함수 밖에서도 바뀐 점이 반영된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원시값과 객체의 차이?
    &lt;ul&gt;
      &lt;li&gt;원시값은 불변이므로 수정할 수 없다.&lt;/li&gt;
      &lt;li&gt;원시값을 담은 변수는 수정할 수 있지만(다른 값으로 바꿀 수 있지만) 원시값 자체는 바뀌지 않는다.&lt;/li&gt;
      &lt;li&gt;반면 객체는 바뀔 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;반환값과-undefined&quot;&gt;반환값과 undefined&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수는 어떤 타입의 값이라도 반환할 수 있다.&lt;/li&gt;
  &lt;li&gt;자바스크립트 함수는 반드시 return값이 존재하며, 없을 때는 기본 반환값인 &lt;strong&gt;‘undefined’&lt;/strong&gt;가 반환된다.
    &lt;ul&gt;
      &lt;li&gt;자바스크립트에서는 void 타입이 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ex. 반환값: undefined
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arguments-객체&quot;&gt;arguments 객체&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수 호출 시에 넘겨진 실제 인자값을 가지는 객체&lt;/li&gt;
  &lt;li&gt;함수가 실행되면 그 안에는 arguments라는 &lt;strong&gt;특별한 지역변수&lt;/strong&gt;가 자동으로 생성된다.
    &lt;ul&gt;
      &lt;li&gt;arguments의 타입은 객체이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자바스크립트 함수는 선언한 파라미터보다 더 많은 인자를 보낼 수도 있다.
    &lt;ul&gt;
      &lt;li&gt;이때 넘어온 인자를 arguments로 하나씩 접근할 수 있다.&lt;/li&gt;
      &lt;li&gt;arguments는 배열의 형태(array-like)를 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;arguments는 배열 타입(array)은 아니다.
    &lt;ul&gt;
      &lt;li&gt;따라서 배열의 메서드를 사용할 수 없다.
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { '0':1, '1':2, '2':3 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자바스크립트의 가변인자를 받아서 처리하는 함수를 만드는 상황에서 arguments 속성을 유용하게 사용할 수 있다.(메서드에 넘겨 받을 인자의 개수를 모를 때)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 인자의 개수가 중요한 경우 &lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;errer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다른 메서드에 가변인자를 넘겨주는 경우 &lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;arguments 사용 시 주의
    &lt;ul&gt;
      &lt;li&gt;arguments도 남용하면 변경에 약한 코드가 된다.&lt;/li&gt;
      &lt;li&gt;arguments를 함부로 수정해서도 안된다. 수정이 된다 하더라도 수정을 해서 해당 값을 바꾸려고 하는 것을 좋지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;함수선언문과-함수표현식의-차이&quot;&gt;함수선언문과 함수표현식의 차이&lt;/h2&gt;
&lt;h3 id=&quot;함수선언문-function-declaration&quot;&gt;함수선언문 (Function Declaration)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;일반적인 프로그래밍 언어에서의 함수 선언과 비슷한 형식
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;함수명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;구현&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;로직&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 함수의 호출.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HEEE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;함수표현식-function-expression&quot;&gt;함수표현식 (Function Expression)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;변수값에 함수 표현을 담아 놓은 형태
    &lt;ul&gt;
      &lt;li&gt;유연한 자바스크립트 언어의 특징을 활용한 선언 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수표현식은 익명 함수표현식과 기명 함수표현식으로 나눌 수 있다.
    &lt;ul&gt;
      &lt;li&gt;일반적으로 함수표현식이라고 부르면 앞에 익명이 생략된 형태라고 볼 수 있다.&lt;/li&gt;
      &lt;li&gt;익명 함수표현식: 함수에 식별자가 주어지지 않는다.&lt;/li&gt;
      &lt;li&gt;기명 함수표현식: 함수의 식별자가 존재한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수표현식의 장점
    &lt;ul&gt;
      &lt;li&gt;클로져로 사용&lt;/li&gt;
      &lt;li&gt;콜백으로 사용(다른 함수의 인자로 넘길 수 있음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (익명) 함수표현식&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'익명 함수표현식'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 기명 함수표현식 &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'기명 함수표현식'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수선언문과-함수표현식의-차이-1&quot;&gt;함수선언문과 함수표현식의 차이&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수선언문은 호이스팅에 영향을 받지만, 함수표현식은 호이스팅에 영향을 받지 않는다.
    &lt;ul&gt;
      &lt;li&gt;함수선언문은 코드를 구현한 위치와 관계없이 자바스크립트의 특징인 호이스팅에 따라 브라우저가 자바스크립트를 해석할 때 맨 위로 끌어 올려진다.&lt;/li&gt;
      &lt;li&gt;함수표현식은 함수선언문과 달리 선언과 호출 순서에 따라서 정상적으로 함수가 실행되지 않을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수표현식 Error 예시
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 정상 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;name is inner value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 오류 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;undefined&quot;: 선언은 되어 있지만 값이 할당되어있지 않은 경우&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!!&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식 &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TypeError: inner is not a function&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** --- JS Parser 내부의 호이스팅(Hoisting)의 결과 --- */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 오류 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수선언문&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Hoisting - 변수값을 끌어올린다. (선언은 되어 있지만 값이 할당되어있지 않은 경우)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR!!&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수표현식 &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TypeError: inner is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Q.&lt;/strong&gt; “printName이 is not defined” 이라고 오류가 나오지 않고, function이 아니라는 TypeError가 나오는 이유?&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;A.&lt;/strong&gt; printName이 실행되는 순간 (&lt;a href=&quot;&quot;&gt;Hoisting&lt;/a&gt;에 의해) inner는 ‘undefined’으로 지정되기 때문&lt;/li&gt;
      &lt;li&gt;inner가 undefined라는 것은 즉, 아직은 함수로 인식이 되지 않고 있다는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;함수표현식보다 함수선언문을 더 자주 사용하지만, 어떤 코딩컨벤션에서는 함수표현식을 권장하기도 한다.
    &lt;ul&gt;
      &lt;li&gt;즉, 어떤 컨벤션을 갖던지 한가지만 정해서 사용하는 게 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;JavaScript의 변수, 연산자, 타입에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/18/javascript-variable-and-type.html&quot;&gt;자바스크립트의 변수, 연산자, 타입의 종류&lt;/a&gt;를 참고하시기 바랍니다&lt;/li&gt;
  &lt;li&gt;JavaScript의 비교, 반복, 문자열에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/19/javascript-if-switch-for.html&quot;&gt;자바스크립트의 비교, 반복, 문자열 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;JavaScript의 호이스팅에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html&quot;&gt;자바스크립트의 호이스팅이란&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16695/&quot;&gt;https://www.edwith.org/boostcourse-web/lecture/16695/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/web-development/javascript/function-expressions-vs-declarations/&quot;&gt;https://joshua1988.github.io/web-development/javascript/function-expressions-vs-declarations/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EC%A4%91%EA%B8%89/&quot;&gt;장기효 (캡틴판교) - Vue.js 중급 강좌, 웹앱 제작으로 배워보는 Vue.js, ES6, Vuex&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/04/20/function-declaration-vs-function-expression.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/04/20/function-declaration-vs-function-expression.html</guid>
        
        <category>javascript</category>
        
        <category>function</category>
        
        
      </item>
    
      <item>
        <title>[JavaScript] 자바스크립트의 비교문/분기문/반복문, 문자열</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16694/&quot;&gt;Edwith 강의&lt;/a&gt; 참고&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;자바스크립트의 비교문/분기문/반복문에 대해 이해한다&lt;/li&gt;
    &lt;li&gt;자바스크립트의 문자열 처리에 대해 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;비교문&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%EC%A1%B0%EA%B1%B4%EB%AC%B8&quot;&gt;비교문&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;if, else if, else 문을 통해서 다양한 비교문을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 삼항 연산자&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;not ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ok &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;not ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;분기문&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#switch%EB%AC%B8&quot;&gt;분기문&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;로직을 분기하기 위해서 if 문 이외에도 switch 문을 통해서도 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;반복문&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Loops_and_iteration#for_%EB%AC%B8&quot;&gt;반복문&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;for 문이나 while문을 사용해서 반복문을 구현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;howMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 비효율적 (배열의 길이를 계속 계산)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;numberSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;와 같은 메서드도 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;for-of&lt;/code&gt;를 통한 탐색도 자주 사용된다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for-in&lt;/code&gt;은 객체를 탐색할 때 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;for 문의 성능 개선
    &lt;ol&gt;
      &lt;li&gt;배열의 길이 한 번만 계산
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for (var i = 0; len = selectObject.options.length; i &amp;lt; len; i++)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Reverse Iteration
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for (var len = selectObject.options.length; i = len; i &amp;gt; len; i--)&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;시작 포인트를 배열의 길이로 하고, 포인트 값을 감소하면서 반복문을 도는 형태&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;TIP&lt;/mark&gt; 반대로 반복문을 동작시키는(reverse iteration) 경우가 실제 브라우저에서 얼마나 성능차이가 있을까?
    &lt;ul&gt;
      &lt;li&gt;현대의 자바스크립트 엔진은 최적화를 통해 반복문을 최대한 빠르게 처리하는 과정을 거쳐왔기 때문에 실제로 실험을 해보면 그 차이가 미미하다.&lt;/li&gt;
      &lt;li&gt;따라서 for문을 무조건 반대로 구현할 필요는 없다.&lt;/li&gt;
      &lt;li&gt;이런 상황이외에도 자바스크립트의 구현 방법에 따라 (for 가 빠를까 while 빠를까? 등) 성능차이는 그리 크지 않다.&lt;/li&gt;
      &lt;li&gt;따라서 일반적으로는 &lt;strong&gt;코드의 가독성&lt;/strong&gt;에 좀 더 우선 집중하는 게 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문자열-처리&quot;&gt;문자열 처리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자바스크립트의 문자와 문자열은 같은 타입으로 모두 문자열이다.
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// string. single quote도 사용가능.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;문자열에 다양한 메서드가 있다.
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ab:cd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&quot;ab&quot;,&quot;cd&quot;]&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;ab:cd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ab$cd&quot;&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot; abcde  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;abcde&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;문자열은 내부적으로 객체로 변환되기 때문에 어떤 객체 내에 있는 메서드를 사용할 수 있는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정규표현식으로도 문자열을 처리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;JavaScript의 변수, 연산자, 타입에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/18/javascript-variable-and-type.html&quot;&gt;자바스크립트의 변수, 연산자, 타입의 종류&lt;/a&gt;를 참고하시기 바랍니다&lt;/li&gt;
  &lt;li&gt;JavaScript의 함수선언문과 함수표현식의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/20/function-declaration-vs-function-expression.html&quot;&gt;함수표현식 vs 함수선언문&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;JavaScript의 호이스팅에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html&quot;&gt;자바스크립트의 호이스팅이란&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16694/&quot;&gt;https://www.edwith.org/boostcourse-web/lecture/16693/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%EC%A1%B0%EA%B1%B4%EB%AC%B8&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#조건문&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#switch%EB%AC%B8&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#switch문&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Loops_and_iteration#for_%EB%AC%B8&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Loops_and_iteration#for_문&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/04/19/javascript-if-switch-for.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/04/19/javascript-if-switch-for.html</guid>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>[JavaScript] 자바스크립트의 변수, 연산자, 타입의 종류</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16693/&quot;&gt;Edwith 강의&lt;/a&gt; 참고&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;자바스크립트의 변수의 종류를 확인한다.
      &lt;ul&gt;
        &lt;li&gt;var과 let, const의 차이에 대해 이해한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;자바스크립트의 연산자의 종류 및 개념을 이해한다.&lt;/li&gt;
    &lt;li&gt;자바스크립트의 타입의 종류를 확인한다.
      &lt;ul&gt;
        &lt;li&gt;자바스크립트에서 type 체크 방법에 대해 이해한다.&lt;/li&gt;
        &lt;li&gt;자바스크립트에서 null 체크 방법에 대해 이해한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;자바스크립트의-버전&quot;&gt;자바스크립트의 버전&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자바스크립트 버전은 ECMAScript(줄여서 ES, 이크마스크립트)의 버전에 따라서 결정되고, 이를 자바스크립트 실행 엔진이 반영한다.
    &lt;ul&gt;
      &lt;li&gt;자바스크립트 엔진은 작성한 JS 코드를 한 줄씩 해석하면서 실행을 준비한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ES5, ES6(ES2015).. 이런 식으로 버전을 일컫는다.&lt;/li&gt;
  &lt;li&gt;2018년을 중심으로 ES6를 지원하는 브라우저가 많아서 몇 년간 ES6 문법이 표준으로 쓰이고 있다.&lt;/li&gt;
  &lt;li&gt;ES6는 ES5문법을 포함하고 있어 하위호환성 문제가 없다.
    &lt;ul&gt;
      &lt;li&gt;다만 feature별로 지원하지 않는 브라우저가 있을 수 있어 주의해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;Bable&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;구 버전 브라우저 중에서는 ES6의 기능을 지원하지 않는 브라우저가 있으므로 &lt;strong&gt;transpiling&lt;/strong&gt;이 필요&lt;/li&gt;
      &lt;li&gt;ES6의 문법을 각 브라우저의 호환 가능한 ES5로 변환하는 컴파일러&lt;/li&gt;
      &lt;li&gt;Babel 온라인 에디터: &lt;a href=&quot;https://babeljs.io/repl/&quot;&gt;https://babeljs.io/repl/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;변수&quot;&gt;변수&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;변수는 var, let, const로 선언할 수 있다.&lt;/li&gt;
  &lt;li&gt;어떤 것을 사용하는가에 의해서 scope, 즉 변수의 유효범위가 달라진다.&lt;/li&gt;
  &lt;li&gt;ES6 이전 버전에서는 var를 사용해서 변수를 선언할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;var로 선언한 변수는 끌어올린다는 뜻의 &lt;strong&gt;호이스팅(hoisting)&lt;/strong&gt; 이라는 매커니즘을 따른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aaa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;변수의-scope&quot;&gt;변수의 Scope&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;에 상관없이 스코프가 설정된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 15&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;es6-새로운-변수-선언-방식---const-let&quot;&gt;ES6 새로운 변수 선언 방식 - const, let&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;블록 단위 &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;로 변수의 범위가 제한되었다.
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Uncaught ReferenceError: i is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;: 한번 선언한 값에 대해서 변경할 수 없다.(상수 개념)
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 예시 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Uncaught TypeError: Assignment to constant variable&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* [주의!] 하지만, 객체나 배열의 내부는 변경할 수 있다. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {num: 10}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [20]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;: 한번 선언한 값에 대해서 다시 선언할 수 없다. 변경은 가능
    &lt;ul&gt;
      &lt;li&gt;메모리에 할당하면 다시 할당하지 못함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;간단한 scope 예시
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// 새로운 블록 안에 새로운 x의 스코프가 생김&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sneaky&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위에 이미 const로 x를 선언했으므로 다시 값을 대입하면 Error&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 이전 블록 범위로 돌아왔기 때문에 'let x'에 해당하는 메모리에 값을 대입&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;inner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SyntaxError: Identifier 'x' has already been declared&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연산자&quot;&gt;연산자&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;연산자 우선순위를 표현하기 위해서는 ()를 사용하면 된다.&lt;/li&gt;
  &lt;li&gt;수학 연산자, 논리 연산자, 관계 연산자, 삼항 연산자 등이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;수학-연산자&quot;&gt;수학 연산자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;+, -, *, /, %(나머지) 등이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;논리-연산자&quot;&gt;논리 연산자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; 연산자
    &lt;ul&gt;
      &lt;li&gt;모든 값이 true인지 확인하지만, 첫 번째가 이미 false라면 그 이후의 값은 확인하지 않는다.&lt;/li&gt;
      &lt;li&gt;모든 값이 true인 경우 마지막 값이 할당된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; 연산자
    &lt;ul&gt;
      &lt;li&gt;첫 번째가 true인 경우 그 이후의 값은 확인하지 않고 첫 번째 값이 할당된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// or 연산자 활용&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;myname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// myname &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// test (&amp;amp;&amp;amp;의 경우, 뒤의 값이 할당된다.)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// default &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;삼항-연산자&quot;&gt;삼항 연산자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;간단한 비교와 값 할당은 삼항연산자를 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ok &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;비교-연산자&quot;&gt;비교 연산자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;비교는 == 보다는 &lt;strong&gt;===&lt;/strong&gt; 를 사용한다.
    &lt;ul&gt;
      &lt;li&gt;=== 의 경우는 Type까지 확인하는 연산자이다.&lt;/li&gt;
      &lt;li&gt;== 의 경우 임의적으로 Type을 바꿔서 비교하기 때문에 원하는 결과와 다른 값이 나올 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;== 로 인한 다양한 오류 상황 예시
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true &lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false (null은 객체)&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false &lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;TIP&lt;/mark&gt; 자바스크립트의 null 체크에서의 ! 사용 시 주의&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0, null, undefined, “”, {}, []
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;자바스크립트의-타입&quot;&gt;자바스크립트의 타입&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;undefined, null, boolean, number, string, object, function, array, Date, RegExp 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기본형과-참조형의-종류&quot;&gt;기본형과 참조형의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Primitive
    &lt;ul&gt;
      &lt;li&gt;Number&lt;/li&gt;
      &lt;li&gt;String&lt;/li&gt;
      &lt;li&gt;Boolean&lt;/li&gt;
      &lt;li&gt;null&lt;/li&gt;
      &lt;li&gt;undefined&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reference: 기본형 데이터의 집합이라고 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;Object
        &lt;ul&gt;
          &lt;li&gt;Array&lt;/li&gt;
          &lt;li&gt;Function&lt;/li&gt;
          &lt;li&gt;RegExp&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기본형과-참조형의-차이점&quot;&gt;기본형과 참조형의 차이점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기본형: 값을 그대로 할당&lt;/li&gt;
  &lt;li&gt;참조형: 값이 저장된 주소값을 할당(참조)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자바스크립트-type-체크&quot;&gt;자바스크립트 Type 체크&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;컴파일 단계가 없는 JavaScript의 Type은 선언할 때가 아니고, &lt;strong&gt;실행 타임&lt;/strong&gt; (Dynamic Type)에 결정된다.
    &lt;ul&gt;
      &lt;li&gt;함수 안에서의 파라미터나 변수는 실행될 때 그 타입이 결정된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;타입을 체크하는 또렷한 방법은 없다.
    &lt;ul&gt;
      &lt;li&gt;정확하게는 &lt;code class=&quot;highlighter-rouge&quot;&gt;toString.call()&lt;/code&gt; 함수를 이용해서 그 결과를 매칭하곤 하는데, 문자, 숫자와 같은 자바스크립트 기본 타입은 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 키워드를 사용해서 체크할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;배열은 타입을 체크하는 isArray함수가 표준으로 생겼다. (IE와 같은 구 브라우저를 사용해야 한다면 지원범위를 살펴보고 사용)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;[object String]&quot;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;string&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;JavaScript의 비교, 반복, 문자열에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/19/javascript-if-switch-for.html&quot;&gt;자바스크립트의 비교, 반복, 문자열 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;JavaScript의 함수선언문과 함수표현식의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/20/function-declaration-vs-function-expression.html&quot;&gt;함수표현식 vs 함수선언문&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;JavaScript의 호이스팅에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html&quot;&gt;자바스크립트의 호이스팅이란&lt;/a&gt;을 참고하시기 바랍니다.
    &lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16693/&quot;&gt;https://www.edwith.org/boostcourse-web/lecture/16693/&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/04/18/javascript-variable-and-type.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/04/18/javascript-variable-and-type.html</guid>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>[Network] HTTP의 동작 및 HTTP Message 형식</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.edwith.org/boostcourse-web/lecture/16661/&quot;&gt;Edwith 강의&lt;/a&gt; 참고&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Internet이란
      &lt;ul&gt;
        &lt;li&gt;IP 주소와 Port 번호의 개념을 이해한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;HTTP란
      &lt;ul&gt;
        &lt;li&gt;HTTP의 기본 특징 및 동작에 대해 이해한다.&lt;/li&gt;
        &lt;li&gt;HTTP와 HTTPS의 차이에 대해 이해한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;HTTP Message
      &lt;ul&gt;
        &lt;li&gt;HTTP Request 형식&lt;/li&gt;
        &lt;li&gt;HTTP Response 형식&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;URI와 URL의 차이에 대해 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;인터넷네트워크-통신의-이해&quot;&gt;인터넷(네트워크 통신)의 이해&lt;/h2&gt;
&lt;h3 id=&quot;인터넷-internet이란&quot;&gt;인터넷 (Internet)이란&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP 기반의 네트워크가 전세계적으로 확대되어 하나의 연결된 네트워크들의 네트워크 (&lt;strong&gt;네트워크의 결합체&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;인터넷 != WWW(World Wide Web)
    &lt;ul&gt;
      &lt;li&gt;인터넷 기반의 대표 서비스 중 하나가 www라고 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터넷 기반의 서비스들&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;프로토콜&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;포트&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;www&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;웹 서비스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Email&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SMTP/POP3/IMAP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25/110/114&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;이메일 서비스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;21&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;파일 전송 서비스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DNS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TCP/UDP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;53&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;네임 서비스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NEWS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NNTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;119&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인터넷 뉴스 서비스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;물리적인 하나의 컴퓨터(IP 주소)에는 여러 개의 서버가 동작할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;각각의 서버들은 Port라는 값으로 구분돼서 동작한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;TIP&lt;/mark&gt; IP 주소와 Port 번호의 개념
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;IP 주소&lt;/strong&gt; 또는 &lt;strong&gt;도메인 이름&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;하드웨어 서버(물리적인 컴퓨터)를 찾기 위해 반드시 필요한 정보&lt;/li&gt;
          &lt;li&gt;Ex) 집 주소&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Port 번호&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;해당 물리적인 컴퓨터 안에 존재하는 소프트웨어 서버를 찾기 위한 정보&lt;/li&gt;
          &lt;li&gt;하나의 물리적인 컴퓨터에는 여러 개의 소프트웨어 프로그램이 각각의 Socket을 사용하여 데이터 통신을 하고 있기 때문에 각각의 Socket을 구분할 필요가 있다. Port 번호를 통해 각 Socket을 구분할 수 있다.&lt;/li&gt;
          &lt;li&gt;0보다 큰 숫자로 구성되어 있다.&lt;/li&gt;
          &lt;li&gt;Ex) 집 안의 여러 방 번호&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;웹의-동작-http-프로토콜의-이해&quot;&gt;웹의 동작 (HTTP 프로토콜의 이해)&lt;/h2&gt;
&lt;h3 id=&quot;http-hypertext-transfer-protocol란&quot;&gt;HTTP (Hypertext Transfer Protocol)란&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;웹 브라우저와 웹 서버 간의 서로 통신하기 위한 규약&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;즉, HTTP(Hypertext Transfer Protocol)란 서버와 클라이언트가 인터넷상에서 데이터를 주고받기 위한 프로토콜(protocol)을 말한다.&lt;/li&gt;
      &lt;li&gt;HTTP는 계속 발전하여 HTTP/2까지 버전이 등장한 상태&lt;/li&gt;
      &lt;li&gt;팀 버너스리(Tim Berners-Lee)와 그가 속한 팀은 CERN에서 HTML뿐만 아니라 웹 브라우저 및 웹 브라우저 관련 기술과 HTTP를 발명하였다.&lt;/li&gt;
      &lt;li&gt;어떤 종류의 데이터도 전송할 수 있도록 설계되어있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;TIP&lt;/mark&gt; HTTP와 HTTPS의 차이
    &lt;ul&gt;
      &lt;li&gt;HTTP 프로토콜
        &lt;ul&gt;
          &lt;li&gt;웹상에서 클라이언트와 서버 간에 요청/응답으로 정보를 주고 받을 수 있는 프로토콜&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;HTTPS 프로토콜
        &lt;ul&gt;
          &lt;li&gt;웹 통신 프로토콜인 HTTP의 보안이 강화된 버전&lt;/li&gt;
          &lt;li&gt;HTTPS는 소켓 통신에서 일반 텍스트를 이용하는 대신에, SSL이나 TLS 프로토콜을 통해 세션 데이터를 암호화한다.&lt;/li&gt;
          &lt;li&gt;따라서 데이터의 적절한 보호를 보장한다.&lt;/li&gt;
          &lt;li&gt;HTTPS의 기본 TCP/IP포트는 443이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-통신-과정&quot;&gt;HTTP 통신 과정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP는 서버/클라이언트 모델을 따른다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트 -&amp;gt; &lt;strong&gt;요청&lt;/strong&gt; -&amp;gt; 서버 -&amp;gt; &lt;strong&gt;응답&lt;/strong&gt; -&amp;gt; 클라이언트&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;비연결 지향(Connectionless)
            &lt;ul&gt;
              &lt;li&gt;클라이언트가 request를 서버에 보내고, 서버가 클라이언트에 요청에 맞는 response를 보내면 바로 연결을 끊는다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;무상태(Stateless)
            &lt;ul&gt;
              &lt;li&gt;연결을 끊는 순간 클라이언트와 서버의 통신은 끝나며 상태 정보를 유지하지 않는다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;불특정 다수를 대상으로 하는 서비스에는 적합하다.&lt;/li&gt;
          &lt;li&gt;클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다.&lt;/li&gt;
          &lt;li&gt;이러한 특징을 무상태(Stateless)라고 말한다.&lt;/li&gt;
          &lt;li&gt;이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/network/http-network-connect.png&quot; alt=&quot;&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트가 원하는 서버에 접속&lt;/li&gt;
      &lt;li&gt;클라이언트가 서버에 요청&lt;/li&gt;
      &lt;li&gt;요청에 따른 응답 결과를 다시 클라이언트에 응답&lt;/li&gt;
      &lt;li&gt;응답이 끝나고 나면 서버와 클라이언트의 연결은 끊긴다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-메시지-형식&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Messages&quot;&gt;HTTP 메시지 형식&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/network/http-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-요청-메시지-형식&quot;&gt;HTTP 요청 메시지 형식&lt;/h3&gt;
&lt;p&gt;HTTP Request Message = &lt;strong&gt;Request Header + 빈 줄 + Request Body&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Header
    &lt;ul&gt;
      &lt;li&gt;첫 번째 줄 (start-line)
        &lt;ul&gt;
          &lt;li&gt;요청 메서드 + 요청 URI + HTTP 프로토콜 버전&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /background.png HTTP/1.0&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST / HTTP 1.1&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;두 번째 줄 ~ (http headers)
        &lt;ul&gt;
          &lt;li&gt;Header 정보들 (‘Header Name: Header Value’ 형태)&lt;/li&gt;
          &lt;li&gt;각 줄은 Line Feed(LF)와 Carriage Return(CR)으로 구분된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빈 줄 (empty-line)
    &lt;ul&gt;
      &lt;li&gt;요청에 대한 모든 메타 정보가 전송되었음을 알린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Body
    &lt;ul&gt;
      &lt;li&gt;POST, PUT의 경우에만 존재&lt;/li&gt;
      &lt;li&gt;요청과 관련된 내용 (HTML 폼 콘텐츠 등)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ex
&lt;img src=&quot;/images/network/http-request.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-응답-메시지-형식&quot;&gt;HTTP 응답 메시지 형식&lt;/h3&gt;
&lt;p&gt;HTTP Response Message = &lt;strong&gt;Response Header + 빈 줄 + Response Body&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Header
    &lt;ul&gt;
      &lt;li&gt;첫 번째 줄 (status-line)
        &lt;ul&gt;
          &lt;li&gt;HTTP 프로토콜 버전 + 응답 코드 + 응답 메시지&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/1.1 404 Not Found.&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;두 번째 줄 ~ (http headers)
        &lt;ul&gt;
          &lt;li&gt;Header 정보들 (‘Header Name: Header Value’ 형태)
            &lt;ul&gt;
              &lt;li&gt;날짜, 웹서버 이름, 웹서버 버전, 콘텐츠 타입, 콘텐츠 길이, 캐시 제어 방식 등&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;각 줄은 Line Feed(LF)와 Carriage Return(CR)으로 구분된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빈 줄 (empty-line)
    &lt;ul&gt;
      &lt;li&gt;요청에 대한 모든 메타 정보가 전송되었음을 알린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Body
    &lt;ul&gt;
      &lt;li&gt;실제 응답 리소스 데이터&lt;/li&gt;
      &lt;li&gt;201, 204와 같은 상태 코드를 가진 응답에는 보통 body가 존재하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ex
&lt;img src=&quot;/images/network/http-response.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-기본-속성-개념&quot;&gt;HTTP 기본 속성 개념&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;요청 메서드
    &lt;ul&gt;
      &lt;li&gt;서버에게 요청의 종류를 알려주기 위해 사용&lt;/li&gt;
      &lt;li&gt;최초의 웹 서버는 GET 방식만 지원&lt;/li&gt;
      &lt;li&gt;각 메서드의 사용 목적
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;GET:&lt;/strong&gt; 정보 요청 (SELECT)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;POST:&lt;/strong&gt; 정보 밀어넣기 (INSERT)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;PUT:&lt;/strong&gt; 정보 업데이트 (UPDATE)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt; 정보 삭제 (DELETE)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;HEAD:&lt;/strong&gt; (HTTP) 헤더 정보만 요청하는 메서드. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;OPTIONS:&lt;/strong&gt; 웹 서버가 지원하는 메서드의 종류를 요청&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;TRACE:&lt;/strong&gt; 클라이언트의 요청을 그대로 반환하는 메서드. Ex) echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;요청 URI
    &lt;ul&gt;
      &lt;li&gt;요청하는 자원의 위치를 명시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTTP 프로토콜 버전
    &lt;ul&gt;
      &lt;li&gt;웹 브라우저가 사용하는 프로토콜 버전&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Status&quot;&gt;응답 상태 코드&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;요청의 성공 여부 (200, 404 혹은 302)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응답 메시지
    &lt;ul&gt;
      &lt;li&gt;상태 코드에 대한 이해를 돕기 위해 짧고 간결하게 상태 코드에 대한 설명을 글로 나타낸 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;url-uniform-resource-locator란&quot;&gt;URL (Uniform Resource Locator)란&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;URL이란
    &lt;ul&gt;
      &lt;li&gt;인터넷 상의 자원의 위치&lt;/li&gt;
      &lt;li&gt;특정 웹 서버의 특정 파일에 접근하기 위한 경로 혹은 주소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URL의 표현
    &lt;ul&gt;
      &lt;li&gt;접근 프로토콜 :// IP 주소 또는 도메인 이름 (:포트번호) / 자원의 경로 / 자원의 이름&lt;/li&gt;
      &lt;li&gt;Ex) http://www.example.co.kr/test/index.html&lt;/li&gt;
      &lt;li&gt;Ex) http://localhost:8080&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;TIP&lt;/mark&gt; URI와 URL의 차이
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;URI&lt;/strong&gt; (Uniform Resource Identifier)
        &lt;ul&gt;
          &lt;li&gt;요청하는 자원의 식별자 (규약)&lt;/li&gt;
          &lt;li&gt;자원을 고유하게 식별하고 위치를 지정할 수 있다.&lt;/li&gt;
          &lt;li&gt;URI의 하위 개념으로 URL이 포함된다. 즉, URI &amp;gt; URL&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;URL&lt;/strong&gt; (Uniform Resource Locator)
        &lt;ul&gt;
          &lt;li&gt;특정 웹 서버의 특정 자원에 대한 구체적인 위치 (규약의 형태)&lt;/li&gt;
          &lt;li&gt;자원의 정확한 위치와 접근하기 위한 방법을 알려준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) URL 이면서 URI인 경우
        &lt;ul&gt;
          &lt;li&gt;https://gmlwjd9405.github.io/tags.html&lt;/li&gt;
          &lt;li&gt;자원의 고유한 식별자이면서 구체적인 위치를 명시한 형태&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) URL이 아니면서 URI인 경우
        &lt;ul&gt;
          &lt;li&gt;https://gmlwjd9405.github.io/posts/132&lt;/li&gt;
          &lt;li&gt;https://gmlwjd9405.github.io/list?page=2
            &lt;ul&gt;
              &lt;li&gt;URL: https://gmlwjd9405.github.io/list&lt;/li&gt;
              &lt;li&gt;URI: URL + &lt;code class=&quot;highlighter-rouge&quot;&gt;?page=2&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;자원에 접근할 수 있는 위치는 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://gmlwjd9405.github.io/list&lt;/code&gt;이며, 이를 URL이라고 할 수 있다.&lt;/li&gt;
          &lt;li&gt;하지만 원하는 자원을 얻기 위해서는 추가적인 식별자인 &lt;code class=&quot;highlighter-rouge&quot;&gt;page=2&lt;/code&gt;가 필요하고 이를 포함한 내용까지가 URI라고 할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;쿠키와 세션의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://doooyeon.github.io/2018/09/10/cookie-and-session.html&quot;&gt;쿠키(Cookie)와 세션(Session) 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;구체적인 HTTP 헤더의 내용에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/01/28/http-header-types.html&quot;&gt;HTTP 헤더의 종류 및 항목&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;TCP 연결에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/09/19/tcp-connection.html&quot;&gt;TCP 3-way handshaking과 4-way handshaking&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://mygumi.tistory.com/139&quot;&gt;https://mygumi.tistory.com/139&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Status&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Messages&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/Messages&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/web-development/web-protocols/&quot;&gt;https://joshua1988.github.io/web-development/web-protocols/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/04/17/what-is-http-protocol.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/04/17/what-is-http-protocol.html</guid>
        
        <category>network</category>
        
        <category>http</category>
        
        <category>ip</category>
        
        <category>port</category>
        
        <category>url</category>
        
        <category>uri</category>
        
        <category>header</category>
        
        
      </item>
    
      <item>
        <title>[DB] ORM이란</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;영속성(Persistence)이란&lt;/li&gt;
    &lt;li&gt;ORM(Object Relational Mapping)이란&lt;/li&gt;
    &lt;li&gt;ORM의 장단점&lt;/li&gt;
    &lt;li&gt;The Object-Relational Impedance Mismatch&lt;/li&gt;
    &lt;li&gt;Association(연관성)
      &lt;ul&gt;
        &lt;li&gt;One-To-One Relationship&lt;/li&gt;
        &lt;li&gt;One-To-Many Relationship&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;영속성persistence&quot;&gt;영속성(Persistence)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 생성한 프로그램이 종료되더라도 사라지지 않는 데이터의 특성을 말한다.&lt;/li&gt;
  &lt;li&gt;영속성을 갖지 않는 데이터는 단지 메모리에서만 존재하기 때문에 프로그램을 종료하면 모두 잃어버리게 된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Object Persistence(영구적인 객체)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;메모리 상의 데이터를 파일 시스템, 관계형 테이터베이스 혹은 객체 데이터베이스 등을 활용하여 영구적으로 저장하여 영속성 부여한다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/database/orm-persistence.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;데이터를 데이터베이스에 저장하는 3가지 방법
        &lt;ul&gt;
          &lt;li&gt;1) JDBC (java에서 사용)&lt;/li&gt;
          &lt;li&gt;2) Spring JDBC (Ex. JdbcTemplate)&lt;/li&gt;
          &lt;li&gt;3) Persistence Framework (Ex. Hibernate, Mybatis 등)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persistence Layer&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로그램의 아키텍처에서, 데이터에 영속성을 부여해주는 계층을 말한다.&lt;/li&gt;
      &lt;li&gt;JDBC를 이용하여 직접 구현할 수 있지만 Persistence framework를 이용한 개발이 많이 이루어진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persistence Framework&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동을 보장한다.&lt;/li&gt;
      &lt;li&gt;Persistence Framework는 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html&quot;&gt;SQL Mapper와 ORM&lt;/a&gt;으로 나눌 수 있다.
        &lt;ul&gt;
          &lt;li&gt;Ex) JPA, Hibernate, Mybatis 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;orm이란&quot;&gt;ORM이란&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;Object Relational Mapping, 객체-관계 매핑&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체와 관계형 데이터베이스의 데이터를 &lt;strong&gt;자동으로 매핑(연결)해주는 것&lt;/strong&gt;을 말한다.
    &lt;ul&gt;
      &lt;li&gt;객체 지향 프로그래밍은 &lt;strong&gt;클래스&lt;/strong&gt;를 사용하고, 관계형 데이터베이스는 &lt;strong&gt;테이블&lt;/strong&gt;을 사용한다.&lt;/li&gt;
      &lt;li&gt;객체 모델과 관계형 모델 간에 불일치가 존재한다.&lt;/li&gt;
      &lt;li&gt;ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 데이터 &amp;lt;—매핑—&amp;gt; Object 필드
    &lt;ul&gt;
      &lt;li&gt;객체를 통해 간접적으로 데이터베이스 데이터를 다룬다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Persistant API라고도 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;Ex) JPA, Hibernate 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;orm의-장단점&quot;&gt;ORM의 장단점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;객체 지향적인 코드로 인해 더 직관적이고 &lt;strong&gt;비즈니스 로직에 더 집중&lt;/strong&gt;할 수 있게 도와준다.
        &lt;ul&gt;
          &lt;li&gt;ORM을 이용하면 SQL Query가 아닌 직관적인 코드(메서드)로 데이터를 조작할 수 있어 개발자가 객체 모델로 프로그래밍하는 데 집중할 수 있도록 도와준다.&lt;/li&gt;
          &lt;li&gt;선언문, 할당, 종료 같은 부수적인 코드가 없거나 급격히 줄어든다.&lt;/li&gt;
          &lt;li&gt;각종 객체에 대한 코드를 별도로 작성하기 때문에 코드의 가독성을 올려준다.&lt;/li&gt;
          &lt;li&gt;SQL의 절차적이고 순차적인 접근이 아닌 객체 지향적인 접근으로 인해 생산성이 증가한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;재사용 및 유지보수&lt;/strong&gt;의 편리성이 증가한다.
        &lt;ul&gt;
          &lt;li&gt;ORM은 독립적으로 작성되어있고, 해당 객체들을 재활용 할 수 있다.&lt;/li&gt;
          &lt;li&gt;때문에 모델에서 가공된 데이터를 컨트롤러에 의해 뷰와 합쳐지는 형태로 디자인 패턴을 견고하게 다지는데 유리하다.&lt;/li&gt;
          &lt;li&gt;매핑정보가 명확하여, ERD를 보는 것에 대한 의존도를 낮출 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DBMS에 대한 종속성이 줄어든다.&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;객체 간의 관계를 바탕으로 SQL을 자동으로 생성하기 때문에 RDBMS의 데이터 구조와 Java의 객체지향 모델 사이의 간격을 좁힐 수 있다.&lt;/li&gt;
          &lt;li&gt;대부분 ORM 솔루션은 DB에 종속적이지 않다.&lt;/li&gt;
          &lt;li&gt;종속적이지 않다는것은 구현 방법 뿐만아니라 많은 솔루션에서 자료형 타입까지 유효하다.&lt;/li&gt;
          &lt;li&gt;프로그래머는 Object에 집중함으로 극단적으로 DBMS를 교체하는 거대한 작업에도 비교적 적은 리스크와 시간이 소요된다.&lt;/li&gt;
          &lt;li&gt;또한 자바에서 가공할경우 equals, hashCode의 오버라이드 같은 자바의 기능을 이용할 수 있고, 간결하고 빠른 가공이 가능하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;완벽한 ORM 으로만 서비스를 구현하기가 어렵다.
        &lt;ul&gt;
          &lt;li&gt;사용하기는 편하지만 설계는 매우 신중하게 해야한다.&lt;/li&gt;
          &lt;li&gt;프로젝트의 복잡성이 커질경우 난이도 또한 올라갈 수 있다.&lt;/li&gt;
          &lt;li&gt;잘못 구현된 경우에 속도 저하 및 심각할 경우 일관성이 무너지는 문제점이 생길 수 있다.&lt;/li&gt;
          &lt;li&gt;일부 자주 사용되는 대형 쿼리는 속도를 위해 SP를 쓰는등 별도의 튜닝이 필요한 경우가 있다.&lt;/li&gt;
          &lt;li&gt;DBMS의 고유 기능을 이용하기 어렵다. (하지만 이건 단점으로만 볼 수 없다 : 특정 DBMS의 고유기능을 이용하면 이식성이 저하된다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;프로시저가 많은 시스템에선 ORM의 객체 지향적인 장점을 활용하기 어렵다.
        &lt;ul&gt;
          &lt;li&gt;이미 프로시저가 많은 시스템에선 다시 객체로 바꿔야하며, 그 과정에서 생산성 저하나 리스크가 많이 발생할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-object-relational-impedance-mismatch&quot;&gt;The Object-Relational Impedance Mismatch&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/database/orm-impedance-mismatch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Granularity(세분성)
    &lt;ul&gt;
      &lt;li&gt;경우에 따라 데이터베이스에 있는 해당 테이블 수보다 더 많은 클래스를 가진 객체 모델을 가질 수 있다.&lt;/li&gt;
      &lt;li&gt;예를 들어, “사용자 세부 사항”에 대해 생각해보자.
        &lt;ul&gt;
          &lt;li&gt;코드 재사용과 유지보수를 위해 “Person”과 “Address”라는 &lt;strong&gt;두 개의 클래스&lt;/strong&gt;로 나눌 수 있다.&lt;/li&gt;
          &lt;li&gt;그러나 데이터베이스에는 person이라는 &lt;strong&gt;하나의 테이블&lt;/strong&gt;에 “사용자 세부 사항”을 저장할 수 있다.&lt;/li&gt;
          &lt;li&gt;이렇게 Object 2개와 Table 1개로 두 개의 갯수가 다를 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;1) Coarse Granularity(굵은/거친): PersonDetails Class&lt;/li&gt;
      &lt;li&gt;2) Fine Granularity(가는/세밀한): Persion Class, Address Class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inheritance(상속)
    &lt;ul&gt;
      &lt;li&gt;RDBMS는 객체지향 프로그래밍 언어의 자연적 패러다임인 상속과 유사한 것을 정의하지 않는다.&lt;/li&gt;
      &lt;li&gt;즉, 상속의 개념이 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Identity(일치)
    &lt;ul&gt;
      &lt;li&gt;RDBMS는 ‘sameness’라는 하나의 개념을 정확히 정의하는데, 바로 ‘기본키(primary key)’이다.&lt;/li&gt;
      &lt;li&gt;그러나 자바에서는 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/06/java-==-and-equals.html&quot;&gt;객체 식별(a==b)과 객체 동일성(a.equales(b))&lt;/a&gt;을 모두 정의한다.&lt;/li&gt;
      &lt;li&gt;RDBMS에서는 PK가 같으면 서로 동일한 record로 정의하지만, Java에서는 주솟값이 같거나 내용이 같은 경우를 구분하여 정의한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Associations(연관성)
    &lt;ul&gt;
      &lt;li&gt;객체지향 언어는 객체 참조(reference)를 사용하는 연관성을 나타내는 반면, RDBMS는 연관성을 ‘외래키(foreign key)’로 나타낸다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;아래 참고&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Navigation(탐색/순회)
    &lt;ul&gt;
      &lt;li&gt;Java 및 RDBMS에서 객체에 액세스하는 방법은 근본적으로 다르다.&lt;/li&gt;
      &lt;li&gt;Java에서는 하나의 연결에서 다른 연결로 이동하면서 탐색/순회한다. (그래프 형태)
        &lt;ul&gt;
          &lt;li&gt;예를 들어, aUser.getBillingDetails().getAccountNumber()&lt;/li&gt;
          &lt;li&gt;이는 RDBMS에서 데이터를 검색하는 효율적인 방법이 아니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RDBMS에서는 일반적으로 SQL 쿼리 수를 최소화하고 JOIN을 통해 여러 엔터티를 로드하고 원하는 대상 엔터티를 선택(select)한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;association연관성&quot;&gt;Association(연관성)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java에서의 객체 참조(Object References)
    &lt;ul&gt;
      &lt;li&gt;방향성이 있다. (Directional)
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Department&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Employee -&amp;gt; Department&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Java에서 양방향 관계가 필요한 경우 연관을 두 번 정의해야 한다.
        &lt;ul&gt;
          &lt;li&gt;즉, 서로 Reference를 가지고 있어야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RDBMS의 외래키(Foreign Key)
    &lt;ul&gt;
      &lt;li&gt;FK와 테이블 Join은 관계형 데이터베이스 연결을 자연스럽게 만든다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/database/db-join-example.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;방향성이 없다. (Direction-Less)
        &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;EMPLOYEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;department_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FK&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;One-To-One Relationship&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;예를 들어, 각 학생은 고유한 주소를 가지고 있다고 하자.&lt;/li&gt;
      &lt;li&gt;RDBMS (방향성이 없다.)
&lt;img src=&quot;/images/database/orm-one-to-one-example.png&quot; alt=&quot;&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;각 Student의 record는 서로 다른 Address record를 가리키고 이것은 일대일 매핑을 보여준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Java Object (방향성이 있다.)
&lt;img src=&quot;/images/database/orm-one-to-one-example2.png&quot; alt=&quot;&quot; /&gt;
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Student -&amp;gt; Address&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addressId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;One-To-Many Relationship&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;예를 들어, 각 학생은 여러 개의 핸드폰을 가질 수 있다고 하자.&lt;/li&gt;
      &lt;li&gt;RDBMS (방향성이 없다.)
&lt;img src=&quot;/images/database/orm-one-to-many-example.png&quot; alt=&quot;&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;각 Student의 record는 여러 개의 Phone record를 가리킬 수 있다. (일대다 매핑)&lt;/li&gt;
          &lt;li&gt;이 관계를 하나의 다른 Table(Relational Model)로 만들 수 있다.&lt;/li&gt;
          &lt;li&gt;One-To-Many를 구성하는 방법: 1) Join Table, 2) Join Column&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Java Object (방향성이 있다.)
&lt;img src=&quot;/images/database/orm-one-to-many-example2.png&quot; alt=&quot;&quot; /&gt;
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentPhoneNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Student -&amp;gt; Some Phones&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;JDBC, JPA/Hibernate, Mybatis의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html&quot;&gt;JDBC, JPA/Hibernate, Mybatis의 차이&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Spring Hibernate에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/02/04/spring-hibernate.html&quot;&gt;Spring Hibernate 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.incodom.kr/ORM#h_702209f3f35878a32ee91352ddc6bbe7&quot;&gt;ORM의 장단점&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/02/01/orm.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/02/01/orm.html</guid>
        
        <category>db</category>
        
        <category>orm</category>
        
        
      </item>
    
      <item>
        <title>[Network] HTTP 헤더의 종류 및 항목</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;HTTP 헤더 내 일반 헤더 (General Header) 항목을 이해한다.&lt;/li&gt;
    &lt;li&gt;HTTP 헤더 내 엔터티/개체 헤더 (Entity Header) 항목&lt;/li&gt;
    &lt;li&gt;HTTP 헤더 내 요청 헤더 (Request Header) 항목&lt;/li&gt;
    &lt;li&gt;HTTP 헤더 내 응답 헤더 (Response Header) 항목&lt;/li&gt;
    &lt;li&gt;HTTP 헤더 내 캐시/쿠키와 관련된 항목을 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;http-공통-헤더&quot;&gt;HTTP 공통 헤더&lt;/h2&gt;
&lt;p&gt;HTTP 헤더 내 일반 헤더 (General Header) 항목&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청 및 응답 메시지 모두에서 사용 가능한 일반 목적의(기본적인) 헤더 항목&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-항목들&quot;&gt;주요 항목들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP 메시지를 생성한 일시 (RFC 1123에서 규정)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Date: Sat, 2 Oct 2018 02:00:12 GMT&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Connection&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트와 서버 간 연결에 대한 옵션 설정(다소 모호한 복잡성 있음)&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Connection: close&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;현재 HTTP 메시지 직후에 TCP 접속을 끊는다는 것을 알린다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Connection: Keep-Alive&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;현재 TCP 커넥션을 유지한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(쿠키/캐시 관련)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pragma&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trailer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;http-엔티티-관련-헤더&quot;&gt;HTTP 엔티티 관련 헤더&lt;/h2&gt;
&lt;p&gt;HTTP 헤더 내 엔터티/개체 헤더 (Entity Header) 항목&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청 및 응답 메시지 모두에서 사용 가능한 Entity(콘텐츠, 본문, 리소스 등)에 대한 설명 헤더 항목
    &lt;ul&gt;
      &lt;li&gt;HTTP 메시지 내 포함된 선택적인 개체에 대한 구체적인 미디어 타입 등의 설명&lt;/li&gt;
      &lt;li&gt;HTTP 메시지는 이미지, 비디오, 오디오, HTML 문서, 전자메일 등의 개체들을 운반할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-항목들-1&quot;&gt;주요 항목들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content-Type&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;해당 개체에 포함되는 미디어 타입 정보&lt;/li&gt;
      &lt;li&gt;컨텐츠의 타입(MIME 미디어 타입) 및 문자 인코딩 방식(EUC-KR,UTF-8 등)을 지정한다.&lt;/li&gt;
      &lt;li&gt;타입 및 서브타입(type/subtype)으로 구성된다.
        &lt;ul&gt;
          &lt;li&gt;타입(type): 10개 정도 표준으로 지정됨(application, audio, font, image, multipart 등)&lt;/li&gt;
          &lt;li&gt;서브타입(subtype): 각 타입별로 수십에서 수백개 정도&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type: text/html; charset-latin-1&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;해당 개체가 html 텍스트 문서이고, iso-latin-1 문자 인코딩 방식으로 표현되는 것을 의미한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(공통 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content-Language&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;해당 개체와 가장 잘 어울리는 사용자 언어(자연언어)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(공통 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content-Encoding&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;해당 개체 데이터의 압축 방식&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Encoding: gzip, deflate&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;만일 압축이 시행되었다면 Content-Encoding 및 Content-Length 2개 항목을 토대로 압축 해제가 가능하다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(공통 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content-Length&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;전달되는 해당 개체의 바이트 길이 또는 크기(10진수)&lt;/li&gt;
      &lt;li&gt;응답 메시지 Body의 길이를 지정하거나 특정 지정된 개체의 길이를 지정한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(공통 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content-Location&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;해당 개체의 실제 위치를 알려준다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(공통 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content-Disposition&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;응답 Body를 브라우저가 어떻게 표시해야할지 알려준다.&lt;/li&gt;
      &lt;li&gt;inline인 경우 웹페이지 화면에 표시되고, attachment인 경우 다운로드한다.
        &lt;ul&gt;
          &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Disposition: inline&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Disposition: attachment; filename='filename.csv'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;다운로드되길 원하는 파일은 attachment로 값을 설정하고, filename 옵션으로 파일명까지 지정해줄 수 있다.&lt;/li&gt;
      &lt;li&gt;파일용 서버인 경우 이 태그를 자주 사용한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Content-Security-Policy&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;다른 외부 파일들을 불러오는 경우, 차단할 소스와 불러올 소스를 명시한다.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;XSS 공격&lt;/em&gt;에 대한 방어 가능 (허용한 외부 소스만 지정 가능)&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src https:&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;https를 통해서만 파일을 가져온다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src 'self'&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;자신의 도메인의 파일들만 가져온다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src 'none'&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;파일을 가져올 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;리소스가 리다이렉트(redirect)된 때에 이동된 주소, 또는 새로 생성된 리소스 주소를 명시한다.&lt;/li&gt;
      &lt;li&gt;300번대 응답이나 201 Created 응답일 때 어느 페이지로 이동할지를 알려준다.
        &lt;ul&gt;
          &lt;li&gt;새로 생성된 리소스의 경우
            &lt;ul&gt;
              &lt;li&gt;HTTP 상태 코드 &lt;code class=&quot;highlighter-rouge&quot;&gt;201 Created&lt;/code&gt;가 반환된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;300번대 응답의 경우
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/1.1 302 Found  Location: /&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;이런 응답이 왔다면 브라우저는 / 주소로 redirect한다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Last-Modified&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;리소스를 마지막으로 갱신한 일시&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transfer-Encoding&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;chuncked&lt;/li&gt;
      &lt;li&gt;동적으로 생성되어 Body의 길이를 모르는 경우에 조금씩 전송이 가능하다.&lt;/li&gt;
      &lt;li&gt;각 chunk 마다 그 시작에 16진수 길이를 삽입하여 chunk 길이를 알려준다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;http-요청-헤더&quot;&gt;HTTP 요청 헤더&lt;/h2&gt;
&lt;p&gt;HTTP 헤더 내 요청 헤더 (Request Header) 항목&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청 헤더는 HTTP 요청 메시지 내에서만 나타나며 가장 방대하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-항목들-2&quot;&gt;주요 항목들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Host&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;요청하는 호스트에 대한 호스트명 및 포트번호 (&lt;em&gt;필수&lt;/em&gt;)
        &lt;ul&gt;
          &lt;li&gt;HTTP/1.1 이후부터 Host 필드는 필수 항목이다. (웹브라우저는 이를 반드시 포함해야 함)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Host 필드에 도메인명 및 호스트명 모두를 포함한 전체 URI(FQDN) 지정이 필요하다.&lt;/li&gt;
      &lt;li&gt;이에 따라 동일 IP 주소를 갖는 단일 서버에 여러 사이트를 구축할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트 소프트웨어(브라우저, OS) 명칭 및 버전 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;From&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트 사용자 메일 주소
        &lt;ul&gt;
          &lt;li&gt;주로 검색엔진 웹 로봇의 연락처 메일 주소를 나타낸다.&lt;/li&gt;
          &lt;li&gt;때로는, 이 연락처 메일 주소를 User-Agent 항목에 두는 경우도 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cookie&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버에 의해 Set-Cookie로 클라이언트에게 설정된 쿠키 정보&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(쿠키/캐시 관련)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Referer&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;바로 직전에 머물었던 웹 링크 주소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If-Modified-Since&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;제시한 일시 이후로만 변경된 리소스를 취득 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;인증 토큰(JWT/Bearer 토큰)을 서버로 보낼 때 사용하는 헤더&lt;/li&gt;
      &lt;li&gt;“토큰의 종류(Basic, Bearer 등) + 실제 토큰 문자”를 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Origin&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버로 POST 요청을 보낼 때, 요청이 어느 주소에서 시작되었는지 나타낸다.&lt;/li&gt;
      &lt;li&gt;여기서 요청을 보낸 주소와 받는 주소가 다르면 &lt;em&gt;CORS 에러&lt;/em&gt;가 발생한다.&lt;/li&gt;
      &lt;li&gt;응답 헤더의 &lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt;와 관련&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음 4개는 주로 HTTP 메세지 Body의 속성 또는 내용 협상용 항목들
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Accept&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;클라이언트 자신이 원하는 미디어 타입 및 우선순위를 알린다.
            &lt;ul&gt;
              &lt;li&gt;텍스트(text/html,text/plain,…),이미지(image/jpeg,…) 등&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: */*&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;어떤 미디어 타입도 가능하다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: image/*&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;모든 이미지 유형이 가능하다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Accept-Charset&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;클라이언트 자신이 원하는 문자 집합&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Accept-Encoding&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;클라이언트 자신이 원하는 문자 인코딩 방식&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Accept-Language&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;클라이언트 자신이 원하는 가능한 언어&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;각각이 HTTP Entity Header 항목 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type, Content-Type charset-xxx, Content-Encoding, Content-Language&lt;/code&gt;과 일대일로 대응된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;예시&quot;&gt;예시&lt;/h3&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mozilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;org&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Macintosh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intel&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mac&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gecko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20100101&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ *;q=0.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;8
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;br&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Referer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//developer.mozilla.org/testpage.html&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alive&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Upgrade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Insecure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Modified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mozilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;org&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Macintosh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intel&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mac&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gecko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20100101&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;http-응답-헤더&quot;&gt;HTTP 응답 헤더&lt;/h2&gt;
&lt;p&gt;HTTP 헤더 내 응답 헤더 (Response Header) 항목&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;특정 유형의 HTTP 요청이나 특정 HTTP 헤더를 수신했을 때, 이에 응답한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-항목들-3&quot;&gt;주요 항목들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버 소프트웨어 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Accept-Range&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set-Cookie&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버측에서 클라이언트에게 세션 쿠키 정보를 설정 (RFC 2965에서 규정)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(쿠키/캐시 관련)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expires&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;리소스가 지정된 일시까지 캐시로써 유효함을 나타낸다. 즉, 응답 컨텐츠가 언제 만료되는지를 나타낸다.&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Expires: Thu, 26 Jul 2018 07:28:00 GMT&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Cache-Control과 별개로 응답에 Expires라는 헤더를 줄 수 있다.
        &lt;ul&gt;
          &lt;li&gt;단, Cache-Control의 max-age가 있는 경우 이 헤더는 무시&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(쿠키/캐시 관련)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Age&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;캐시 응답. max-age 시간 내에서 얼마나 흘렀는지 초 단위로 알려준다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(쿠키/캐시 관련)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ETag&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP 컨텐츠가 바뀌었는지를 검사할 수 있는 태그&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(쿠키/캐시 관련)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Proxy-authenticate&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Allow&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;해당 엔터티에 대해 서버 측에서 지원 가능한 HTTP 메소드의 리스트를 나타낸다.&lt;/li&gt;
      &lt;li&gt;때론, HTTP 요청 메세지의 HTTP 메소드 OPTIONS에 대한 응답용 항목으로 사용된다.
        &lt;ul&gt;
          &lt;li&gt;OPTIONS: 웹서버측 제공 HTTP 메소드에 대한 질의&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Allow: GET,HEAD&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;405 Method Not Allowed 에러와 함께&lt;/li&gt;
          &lt;li&gt;웹 서버에서 제공 가능한 HTTP 메서드는 GET, HEAD 뿐임을 알린다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;요청을 보내는 프론트 주소와 받는 백엔드 주소가 다르면 &lt;em&gt;CORS 에러&lt;/em&gt;가 발생
        &lt;ul&gt;
          &lt;li&gt;서버에서 이 헤더에 프론트 주소를 적어주어야 에러가 나지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: www.zerocho.com&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;프로토콜, 서브도메인, 도메인, 포트 중 하나만 달라도 CORS 에러가 난다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: *&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;만약 주소를 일일이 지정하기 싫다면 *으로 모든 주소에 CORS 요청을 허용되지만 그만큼 보안이 취약해진다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;유사한 헤더로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Request-Method, Access-Control-Request-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Headers&lt;/code&gt; 등이 있다.&lt;/li&gt;
      &lt;li&gt;Request와 Allow에서 Method 단수 복수 주의&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;예시-1&quot;&gt;예시&lt;/h3&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Alive&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Etag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c561c68d0ba92bbeb8b0f612a9199f722e3a621a&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Keep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;997&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Modified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Apache&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mykey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Jul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GMT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31449600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/; secur&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunked&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Encoding&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;developer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scl3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mozilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;too&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;large&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kuma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1085259&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DENY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Access_control_CORS&quot;&gt;CORS(Cross-Origin Resource Sharing)란?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;배경
    &lt;ul&gt;
      &lt;li&gt;처음 전송되는 리소스의 도메인과 다른 도메인으로부터 리소스가 요청될 경우 해당 리소스는 cross-origin HTTP 요청에 의해 요청된다.&lt;/li&gt;
      &lt;li&gt;보안 상의 이유로, 브라우저들은 스크립트 내에서 초기화되는 cross-origin HTTP 요청을 제한한다.
        &lt;ul&gt;
          &lt;li&gt;예를 들면, XMLHttpRequest는 same-origin 정책을 따르기에 XMLHttpRequest을 사용하는 웹 애플리케이션은 자신과 동일한 도메인으로 HTTP 요청을 보내는 것만 가능했다.&lt;/li&gt;
          &lt;li&gt;웹 애플리케이션을 개선시키기 위해, 개발자들은 브라우저 벤더사들에게 XMLHttpRequest가 cross-domain 요청을 할 수 있도록 요청했고 이에 따라 CORS가 생겼다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개념
    &lt;ul&gt;
      &lt;li&gt;웹 서버에게 보안 cross-domain 데이터 전송을 활성화하는 cross-domain 접근 제어권을 부여한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;과정
    &lt;ul&gt;
      &lt;li&gt;CORS 요청 시에는 미리 OPTIONS 주소로 서버가 CORS를 허용하는지 물어본다.&lt;/li&gt;
      &lt;li&gt;이때 &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Request-Method&lt;/code&gt;로 실제로 보내고자 하는 메서드를 알리고,&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Request-Headers&lt;/code&gt;로 실제로 보내고자 하는 헤더들을 알린다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Allow&lt;/code&gt; 항목들은 Request에 대응되는 것으로, 서버가 허용하는 메서드와 헤더를 응답하는데 사용된다.&lt;/li&gt;
      &lt;li&gt;Request랑 Allow가 일치하면 CORS 요청이 이루어진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;http-캐시쿠키-관련-헤더&quot;&gt;HTTP 캐시/쿠키 관련 헤더&lt;/h2&gt;
&lt;h3 id=&quot;caching-관련&quot;&gt;Caching 관련&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-store&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;아무것도 캐싱하지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-cache&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;모든 캐시를 쓰기 전에 서버에 해당 캐시를 사용해도 되는지 확인한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: must-revalidate&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;만료된 캐시만 서버에 확인을 받도록 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: public&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;공유 캐시(또는 중개 서버)에 저장해도 된다는 것을 의미한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: private&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;브라우저같은 특정 사용자 환경에만 저장한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;캐시 유효시간을 명시한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;주로 응답 헤더로 사용하지만, “클라이언트 - 중개 서버 - 서버”의 구조에서 중개 서버의 캐시를 가져오지 않도록 하려면 클라이언트에서 요청 헤더에 이 헤더를 추가한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(공통 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expires&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;리소스가 지정된 일시까지 캐시로써 유효함을 나타낸다. 즉, 응답 컨텐츠가 언제 만료되는지를 나타낸다.&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Expires: Thu, 26 Jul 2018 07:28:00 GMT&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Cache-Control과 별개로 응답에 Expires라는 헤더를 줄 수 있다.
        &lt;ul&gt;
          &lt;li&gt;단, Cache-Control의 max-age가 있는 경우 이 헤더는 무시&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Age&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;캐시 응답. max-age 시간 내에서 얼마나 흘렀는지 초 단위로 알려준다.&lt;/li&gt;
      &lt;li&gt;Ex) max-age= 3600을 설정한 경우, 1분 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Age: 60&lt;/code&gt;이 캐시 응답 헤더에 포함된다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ETag&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP 컨텐츠가 바뀌었는지를 검사할 수 있는 태그&lt;/li&gt;
      &lt;li&gt;같은 주소의 자원이더라도 컨텐츠가 달라졌다면 ETag가 다르다.&lt;/li&gt;
      &lt;li&gt;같은 주소로 GET 메서드 수행 시 응답 Body의 내용이 동일하면 같은 ETag를 갖지만, 내용이 바뀌었다면 ETag 헤더 값이 변경된다.&lt;/li&gt;
      &lt;li&gt;이 헤더 값이 변경되었다면 캐시를 지우고 새로 변경된 컨텐츠를 받는다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If-None-Match&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버에 ETag가 달라졌는지 검사를 요청한다.&lt;/li&gt;
      &lt;li&gt;ETag가 다를 경우에만 컨텐츠를 새로 받는다.&lt;/li&gt;
      &lt;li&gt;만약 ETag가 같다면 서버는 &lt;code class=&quot;highlighter-rouge&quot;&gt;304 Not Modified&lt;/code&gt;를 응답해서 캐시를 그대로 사용한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(요청 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cookies-관련&quot;&gt;Cookies 관련&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cookie&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버에 의해 Set-Cookie로 클라이언트에게 설정된 쿠키 정보&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Cookie: attribute1=value1; attribute2=value2;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;서버는 이 쿠키 헤더를 파싱해서 사용한다.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;CSRF 공격&lt;/em&gt; 같은 것을 막기 위해서 반드시 서버는 쿠키가 제대로 된 상황에서 온 것인지 확인하는 로직이 필요하다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(요청 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set-Cookie&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버측에서 클라이언트에게 세션 쿠키 정보를 설정할 때 사용하는 항목 (RFC 2965에서 규정)&lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie: 속성이름(attribute)=속성값(value); 옵션들&lt;/code&gt; 형태로 다수 정보들이 설정됨&lt;/li&gt;
      &lt;li&gt;옵션들
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Expires&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;쿠키 만료 날짜 설정&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Max-Age&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;쿠키 수명 설정. Expires는 무시&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;https에서만 쿠키가 전송된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;HttpOnly&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;자바스크립트에서 쿠키에 접근할 수 없다.&lt;/li&gt;
              &lt;li&gt;&lt;em&gt;XSS&lt;/em&gt; 요청을 막으려면 활성화해두는 것이 좋다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Domain&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;도메인을 적어주면 도메인이 일치하는 요청에서만 쿠키가 전송된다.&lt;/li&gt;
              &lt;li&gt;가끔 도메인이 다른 쿠키들이 있는데, 이런 쿠키들은 써드 파티 쿠키로 클라이언트를 추적하고 있는 쿠키이다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;해당 path와 일치하는 요청에서만 쿠키가 전송된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie: zerocho=babo; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;쿠키는 &lt;em&gt;XSS 공격과 CSRF 공격&lt;/em&gt; 등에 취약하기 때문에 HttpOnly 옵션을 켜두고, 쿠키를 사용하는 요청은 서버 단에서 검증하는 로직을 마련해두는 것이 좋다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;(응답 헤더)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; 캐시, 쿠키, 세션의 차이&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ktword.co.kr/abbr_view.php?nav=&amp;amp;m_temp1=469&amp;amp;id=492&quot;&gt;캐시 (Cache)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;개념
        &lt;ul&gt;
          &lt;li&gt;CPU와 주기억장치 사이에 물리적으로 존재하는 버퍼 형태의 고속의 기억장치를 말한다. (통상, 컴퓨터 메모리 버퍼를 지칭)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;사용 목적
        &lt;ul&gt;
          &lt;li&gt;CPU와 주기억장치 사이의 속도의 차이를 완화 (메모리 읽기 속도 개선용)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;쿠키 (Cookie)
    &lt;ul&gt;
      &lt;li&gt;개념
        &lt;ul&gt;
          &lt;li&gt;인터넷 웹 상에서 상태정보를 클라이언트측(인터넷 웹브라우저)에 저장하여, 서버측에서 필요할 때마다 지속성있게 활용하고자 할 때 사용한다. (클라이언트 로컬에 저장되는 키와 값이 들어있는 파일)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;사용 목적
        &lt;ul&gt;
          &lt;li&gt;HTTP의 비연결(Connectionless)과 무상태(Stateless)을 보완&lt;/li&gt;
          &lt;li&gt;웹 브라우저에 서버측에 있는 상태값들을 저장할 수 있게하도록 하여 사용자에 대한 지속적인 상태감시 및 상태참조를 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;쿠키 저장
        &lt;ul&gt;
          &lt;li&gt;웹 서버는, HTTP 헤더 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie:&lt;/code&gt;란에 셋팅할 쿠키 관련 정보를 실려 보낸다.&lt;/li&gt;
          &lt;li&gt;웹 브라우저는, 쿠키를 도메인 서버 이름으로 정렬된 &lt;code class=&quot;highlighter-rouge&quot;&gt;쿠키 디렉토리&lt;/code&gt;에 저장한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;세션(Session)
    &lt;ul&gt;
      &lt;li&gt;개념
        &lt;ul&gt;
          &lt;li&gt;일정 시간 동안 같은 브라우저로부터 들어오는 요청을 하나의 상태로 보고 그 상태를 유지하는 기술이다.&lt;/li&gt;
          &lt;li&gt;즉, 웹 브라우저를 통해 서버에 접속한 이후부터 브라우저를 종료할 때까지 유지되는 상태이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;쿠키와 세션의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://doooyeon.github.io/2018/09/10/cookie-and-session.html&quot;&gt;쿠키(Cookie)와 세션(Session) 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP&quot;&gt;mozilla - HTTP 이해하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ktword.co.kr/abbr_view.php?nav=&amp;amp;m_temp1=5905&amp;amp;id=902&quot;&gt;http://www.ktword.co.kr/abbr_view.php?nav=&amp;amp;m_temp1=5905&amp;amp;id=902&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ktword.co.kr/abbr_view.php?nav=&amp;amp;m_temp1=469&amp;amp;id=492&quot;&gt;http://www.ktword.co.kr/abbr_view.php?nav=&amp;amp;m_temp1=469&amp;amp;id=492&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.zerocho.com/category/HTTP/post/5b594dd3c06fa2001b89feb9&quot;&gt;https://www.zerocho.com/category/HTTP/post/5b594dd3c06fa2001b89feb9&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://zamezzz.tistory.com/137&quot;&gt;cors - https://zamezzz.tistory.com/137&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Access_control_CORS&quot;&gt;cors - https://developer.mozilla.org/ko/docs/Web/HTTP/Access_control_CORS&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/28/http-header-types.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/28/http-header-types.html</guid>
        
        <category>network</category>
        
        <category>http</category>
        
        <category>header</category>
        
        <category>types</category>
        
        
      </item>
    
      <item>
        <title>[Spring] Spring MVC and Spring Boot Structure</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Spring MVC Structure를 이해한다.&lt;/li&gt;
    &lt;li&gt;Spring Boot Structure를 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;참고용!&lt;/strong&gt; &lt;mark&gt;'내가' 사용하는 프로젝트 구조이므로, 개발자마다 설정 방법에 따라 구조가 달라질 수 있다.&lt;/mark&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-mvc-structure&quot;&gt;Spring MVC Structure&lt;/h2&gt;
&lt;h3 id=&quot;ㄴsrcmainjava&quot;&gt;ㄴsrc/main/java&lt;/h3&gt;
&lt;p&gt;: 자바 소스 파일&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;class(Servlet)
    &lt;ul&gt;
      &lt;li&gt;controller package&lt;/li&gt;
      &lt;li&gt;service package&lt;/li&gt;
      &lt;li&gt;dao package&lt;/li&gt;
      &lt;li&gt;model package&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ㄴsrcmainresources&quot;&gt;ㄴsrc/main/resources&lt;/h3&gt;
&lt;p&gt;: 자바 소스 파일에서 사용하는 리소스 파일(mapper, sql, logging 등 설정 파일)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;logback.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ㄴweb-또는-webapp&quot;&gt;ㄴweb (또는 webapp)&lt;/h3&gt;
&lt;p&gt;: Web에서 사용하는 리소스 파일(static files, templates, xml, properties 등)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;static or &lt;del&gt;resources&lt;/del&gt; DIR
    &lt;ul&gt;
      &lt;li&gt;css, images, fonts, js..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WEB-INF
    &lt;ul&gt;
      &lt;li&gt;props or database DIR
        &lt;ul&gt;
          &lt;li&gt;jdbc.properties&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;views
        &lt;ul&gt;
          &lt;li&gt;includes DIR
            &lt;ul&gt;
              &lt;li&gt;header / footer / layout&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;jsp or html&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;web.xml&lt;/li&gt;
      &lt;li&gt;XXXconfig.xml
        &lt;ul&gt;
          &lt;li&gt;applicationContext.xml&lt;/li&gt;
          &lt;li&gt;dispatcher-servlet.xml&lt;/li&gt;
          &lt;li&gt;serviceContext.xml&lt;/li&gt;
          &lt;li&gt;daoContext.xml&lt;/li&gt;
          &lt;li&gt;securityContext.xml&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ㄴpomxml&quot;&gt;ㄴpom.xml&lt;/h3&gt;
&lt;p&gt;: Maven 프로젝트 설정 파일&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 기본 정보&lt;/li&gt;
  &lt;li&gt;빌드 설정&lt;/li&gt;
  &lt;li&gt;프로젝트 관계 설정&lt;/li&gt;
  &lt;li&gt;빌드 환경&lt;/li&gt;
  &lt;li&gt;Property 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;/WEB-INF 디렉토리 이하는 보안상의 문제로 웹 브라우저를 통한 접근을 금지하고 있다.
    &lt;ul&gt;
      &lt;li&gt;하지만 포워딩을 통한 접근은 웹 브라우저를 통하지 않기 때문에 가능하다.&lt;/li&gt;
      &lt;li&gt;컴파일된 클래스, 스프링 환경 설정 파일(DB 연결 정보), jsp 등 외부에서의 수정 방지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정적 자원들은 /static 디렉터리 사용을 권장한다.&lt;/li&gt;
  &lt;li&gt;dispatcher-servlet.xml
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/static/&quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;web/static/&lt;/li&gt;
      &lt;li&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/span&gt;는 “web/” location을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;applicationContext.xml
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;context:property-placeholder location=&quot;classpath:props/jdbc.properties&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;web/WEB-INF/props/jdbc.properties&lt;/li&gt;
      &lt;li&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;classpath:&lt;/strong&gt;&lt;/span&gt;는 “web/WEB-INF/” location을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h2&gt;
&lt;h3 id=&quot;ㄴsrcmainjava-1&quot;&gt;ㄴsrc/main/java&lt;/h3&gt;
&lt;p&gt;: 자바 소스 파일&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;class(Servlet)
    &lt;ul&gt;
      &lt;li&gt;web package (controller)&lt;/li&gt;
      &lt;li&gt;service package&lt;/li&gt;
      &lt;li&gt;repository package (dao)&lt;/li&gt;
      &lt;li&gt;domain package (model)&lt;/li&gt;
      &lt;li&gt;dto package&lt;/li&gt;
      &lt;li&gt;config package&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- - security package
- validation package
- common package --&gt;

&lt;h3 id=&quot;ㄴsrcmainresources-1&quot;&gt;ㄴsrc/main/resources&lt;/h3&gt;
&lt;p&gt;: 배포할 리소스 파일(static files, templates, xml, properties 등)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;static
    &lt;ul&gt;
      &lt;li&gt;css, images, fonts, js..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;templates
    &lt;ul&gt;
      &lt;li&gt;includes DIR
        &lt;ul&gt;
          &lt;li&gt;header / footer / layout&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;dynamic HTML&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;application-{profile}.properties or application.yml&lt;/li&gt;
  &lt;li&gt;import.sql&lt;/li&gt;
  &lt;li&gt;logback.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot에서는 JSP 보다는 템플릿 엔진의 사용을 권장한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/21/template-engine.html&quot;&gt;템플릿 엔진의 개념과 종류 및 필요성&lt;/a&gt; 참고&lt;/li&gt;
      &lt;li&gt;JSP 사용을 위해서는 추가 설정이 필요하다.
&lt;!-- * 기본적으로 Spring Boot는 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;**classpath**&lt;span&gt;에 있는 /static(/public, /resources, /META-INF/resources) 디렉터리 또는 ServletContext의 루트로부터 정적 콘텐트를 서비스한다. --&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring Boot는 기본적으로 src/main/resources/ 디렉터리를 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;classpath&lt;/strong&gt;&lt;/span&gt;로 가지고 있다.&lt;/li&gt;
  &lt;li&gt;Spring Boot에서는 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;classpath&lt;/strong&gt;&lt;/span&gt; 상에서 /static, /resources, /public, /META-INF/resources/ 경로를 기본으로 탐색한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content&quot;&gt;https://docs.spring.io&lt;/a&gt; 참고&lt;/li&gt;
      &lt;li&gt;/WEB-INF/resources의 경우, jar 파일로 배포할 경우에는 인식하지 않기 때문에 사용하지 않도록 주의한다.&lt;/li&gt;
      &lt;li&gt;정적 자원들은 /static 디렉터리 사용을 권장한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring Boot에서는 기존의 전통적인 웹 어플리케이션 방식에서 필수로 관리되어야 하는 Tomcat 설정 및 web.xml 파일 등은 스프링부트의 내부 모듈에 의해서 구동시 자동으로 설정된다. &lt;br /&gt; &lt;strong&gt;(default로 web/ 디렉터리가 없음)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;MVC Architecture에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/11/05/mvc-architecture.html&quot;&gt;MVC Architecture 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Spring MVC Framework에 대해 알고 싶으시면 &lt;a href=&quot;http://gmlwjd9405.github.io/2018/12/20/spring-mvc-framework.html&quot;&gt;Spring MVC 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ihoneymon/a343e2f4a0299988206e&quot;&gt;https://gist.github.com/ihoneymon/a343e2f4a0299988206e&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://lazyrodi.github.io/2017/09/03/2017-09-03-spring-structure/&quot;&gt;http://lazyrodi.github.io/2017/09/03/2017-09-03-spring-structure/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/05/spring-directory-structure.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/05/spring-directory-structure.html</guid>
        
        <category>springMVC</category>
        
        <category>spring</category>
        
        <category>springBoot</category>
        
        <category>structure</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>[Logging] SLF4J를 이용한 Logging</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Logging이란&lt;/li&gt;
    &lt;li&gt;SLF4J(Simple Logging Facade for Java)란
      &lt;ul&gt;
        &lt;li&gt;1) SLF4J API&lt;/li&gt;
        &lt;li&gt;2) SLF4J Binding&lt;/li&gt;
        &lt;li&gt;3) SLF4J Bridging Modules&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;SLF4J 특징&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;logging이란&quot;&gt;Logging이란&lt;/h1&gt;
&lt;p&gt;프로그램 개발 중이나 완료 후 발생할 수 있는 오류에 대해 디버깅하거나 운영 중인 프로그램 상태를 모니터링 하기 위해 필요한 정보(로그)를 기록하는 것&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션 실행에 대한 추적을 기록하기 위해 어딘가에 메시지 (콘솔, 파일, 데이터베이스 등)를 작성하는 것&lt;/li&gt;
  &lt;li&gt;Logging을 어디에 이용할까
    &lt;ul&gt;
      &lt;li&gt;디버깅&lt;/li&gt;
      &lt;li&gt;사용자 상호 작용 기록 (발생하는 이벤트 기록)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java의 주요 Logging Framework
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;native java.util.logging&lt;/strong&gt;: 별로 사용하지 않는다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Log4J&lt;/strong&gt;: 몇 년 전까지 사실상 표준으로 사용했다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Logback&lt;/strong&gt;: Log4J 개발자가 만든 Log4J의 후속 버전, 현재 많은 프로젝트에서 사용되고 있다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;SLF4J(Simple Logging Facade for Java)&lt;/strong&gt;: Log4J 또는 Logback과 같은 백엔드 Logger Framework의 &lt;em&gt;facade pattern&lt;/em&gt;(아래 참고)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;tinylog&lt;/strong&gt;: 사용하기 쉽게 최적화된 Java용 최소형(75KB Jar) 프레임워크&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vs-debuggger&quot;&gt;VS Debuggger&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;Logging은 응용 프로그램 실행에 대한 정확한 컨텍스트(이벤트 순서)를 제공한다.
        &lt;ul&gt;
          &lt;li&gt;전체적인 app의 흐름이나 타이밍 error도 확인할 수 있다.&lt;/li&gt;
          &lt;li&gt;error 종류: 논리적 에러, 타이밍 에러(multi-thread) 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;일단 코드에 삽입되면 logging output이 만들어질 때 사용자 개입이 필요 없다.&lt;/li&gt;
      &lt;li&gt;로그 출력은 나중에 살펴볼 수 있도록 영구 매체에 저장할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;disk에 기록을 남겨 유용한 로깅 정보를 추적할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Logging Framework는 Debuggger보다 간단하고 배우기 쉽고 사용하기 쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;출력문이 들어가기 때문에 응용 프로그램 속도를 늦출 수 있다.&lt;/li&gt;
      &lt;li&gt;너무 장황할 수 있다. (오버헤드)
        &lt;ul&gt;
          &lt;li&gt;메시지 level을 나누는 기능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;고급 사용은 구성을 확실히 알아야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vs-plain-outputsystemoutprintln&quot;&gt;VS Plain Output(System.out.println())&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;높은 유연성&lt;/li&gt;
      &lt;li&gt;우선순위 level 이상의 출력 메시지를 선택할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;—trace, debug, info, warn, error—&amp;gt; high&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;모든 모듈 또는 특정 모듈 또는 클래스에 대해 메시지를 출력할 수 있다.&lt;/li&gt;
      &lt;li&gt;로그 메시지의 형식을 제어할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;매개 변수화된 로그 메시지 지원&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;출력 위치를 지정할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;slf4jsimple-logging-facade-for-java란&quot;&gt;SLF4J(Simple Logging Facade for Java)란&lt;/h1&gt;
&lt;p&gt;Log4J 또는 Logback과 같은 백엔드 Logging Framework의 &lt;em&gt;facade pattern&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다양한 Logging Framework에 대한 추상화
    &lt;ul&gt;
      &lt;li&gt;SLF4J는 추상 로깅 프레임워크이기 때문에 단독으로는 사용하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SLF4J api를 사용하면 구현체의 종류에 상관없이 일관된 로깅 코드를 작성할 수 있다.&lt;/li&gt;
  &lt;li&gt;배포할 때 원하는 Logging Framework를 선택할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;Ex) logback/log4j/jdk14 - SLF4J - app&lt;/li&gt;
      &lt;li&gt;개발할 때, SLF4J API를 사용하여 로깅 코드를 작성한다.&lt;/li&gt;
      &lt;li&gt;배포할 때, 바인딩된 Logging Framework가 실제 로깅 코드를 수행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;교환 가능
    &lt;ul&gt;
      &lt;li&gt;Logging Framework 간에 쉬운 전환이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SLF4J는 세 가지 모듈을 제공한다. (&lt;strong&gt;API / Binding / Bridging&lt;/strong&gt;)
    &lt;ol&gt;
      &lt;li&gt;SLF4J API 활성화
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;slf4j-api-1.7.25.jar&lt;/strong&gt; (2017년 기준)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;slf4j-api-1.8.0-beta2.jar&lt;/strong&gt; (2019년 기준)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;SLF4J 바인딩(.jar)
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;SLF4J 인터페이스를 로깅 구현체와 연결&lt;/strong&gt;하는 어댑터 역할을 하는 라이브러리&lt;/li&gt;
          &lt;li&gt;사용하길 원하는 Logging Framework에 대한 SLF4J 바인딩을 추가해야 한다. &lt;br /&gt;(반드시 &lt;strong&gt;한개만&lt;/strong&gt; 사용)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;SLF4J Bridging Modules
        &lt;ul&gt;
          &lt;li&gt;다른 로깅 API로의 Logger 호출을 &lt;strong&gt;SLF4J 인터페이스로 연결(redirect)&lt;/strong&gt;하여 &lt;strong&gt;SLF4J API가 대신 처리&lt;/strong&gt;할 수 있도록 하는 일종의 어댑터 역할을 하는 라이브러리&lt;/li&gt;
          &lt;li&gt;다른 로깅 API -&amp;gt; Bridge(redirect) -&amp;gt; SLF4J API&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; &lt;em&gt;facade pattern&lt;/em&gt;
&lt;img src=&quot;/images/logging/facade-pattern.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 클래스가 하나의 역할을 수행할 때, 대표적인 인터페이스만을 다루는 클래스를 두어 원하는 기능을 처리할수 있게 도와주는 패턴이다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 Facade에 요청을 전송하여 Subsystem과 통신하며, Facade는 해당 요청을 적절한 Subsystem 객체로 전달한다.
        &lt;ul&gt;
          &lt;li&gt;Subsystem 객체가 실제 작업을 수행하지만 Facade는 인터페이스를 Subsystem 인터페이스로 변환하기 위해 자체 작업을 수행해야 할 수도 있다.&lt;/li&gt;
          &lt;li&gt;즉, 공통된 Interface를 적절하게 변환해서 연결한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Facade를 사용하는 클라이언트는 Subsystem 객체에 직접 액세스할 필요가 없다.
        &lt;ul&gt;
          &lt;li&gt;즉, 클라이언트는 Subsystem을 알 필요 없이 Common Interface에만 접근한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-slf4j-api---hello-world-using-slf4j&quot;&gt;1) SLF4J API - “Hello World” using SLF4J&lt;/h2&gt;
&lt;h3 id=&quot;1-class-path에-slf4j-api-1725jar-추가-pomxml&quot;&gt;1. class path에 slf4j-api-1.7.25.jar 추가 (pom.xml)&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;slf4j-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-helloworld-클래스를-컴파일하고-실행&quot;&gt;2. HelloWorld 클래스를 컴파일하고 실행&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;. 
SLF4J: Defaulting to no-operation (NOP) logger implementation 
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;이 경고는 class path에서 slf4j 구현체를 찾을 수 없기 때문에 출력된다.
    &lt;ul&gt;
      &lt;li&gt;즉, class path에 사용하길 원하는 Logging Framework에 대한 slf4j 바인딩(.jar)을 추가해야 한다.&lt;/li&gt;
      &lt;li&gt;이때, 둘 이상의 slf4j 바인딩(반드시 &lt;strong&gt;하나만&lt;/strong&gt;)을 두면 안된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Logging Framework를 전환하려면 class path에서 slf4j 바인딩을 변경한다.
    &lt;ul&gt;
      &lt;li&gt;Ex) java.util.logging —&amp;gt; log4j로 전환하려면&lt;/li&gt;
      &lt;li&gt;slf4j-&lt;strong&gt;jdk14&lt;/strong&gt;-1.7.25.jar —&amp;gt; slf4j-&lt;strong&gt;log4j12&lt;/strong&gt;-1.7.25.jar로 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-slf4j-binding&quot;&gt;2) SLF4J Binding&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SLF4J 인터페이스를 로깅 구현체(Logging Framework)와 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;연결하는 어댑터 역할&lt;/span&gt;을 하는 라이브러리&lt;/li&gt;
  &lt;li&gt;SLF4J binding with a Logging Framework
    &lt;ul&gt;
      &lt;li&gt;각각의 SLF4J binding(.jar)은 &lt;strong&gt;&lt;em&gt;compile time&lt;/em&gt;&lt;/strong&gt;에 오직 하나의 Logging Framework를 사용하도록 바인딩한다.&lt;/li&gt;
      &lt;li&gt;class path에서 바인딩된 구현체가 발견되지 않으면 slf4j는 기본적으로 no-operation으로 설정된다. (즉, 출력되는 것이 없음)&lt;/li&gt;
      &lt;li&gt;사용하길 원하는 Logging Framework에 대한 SLF4J 바인딩을 추가해야 한다.
&lt;img src=&quot;/images/logging/logging-framework-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;slf4j-binding-종류&quot;&gt;SLF4J binding 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용하길 원하는 Logging Framework에 대한 SLF4J 바인딩을 추가해야 한다. (반드시 &lt;strong&gt;한개만&lt;/strong&gt; 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;SLF4J binding(.jar)&lt;/strong&gt;)&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slf4j-log4j12-{version}.jar&lt;/td&gt;
      &lt;td&gt;널리 사용되는 로깅 프레임워크인 log4j 버전 1.2에 대한 바인딩. &lt;br /&gt; 또한 log4j.jar을 클래스 경로에 배치해야 한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slf4j-jdk14-{version}.jar&lt;/td&gt;
      &lt;td&gt;java.util.logging(JDK1.4 로깅)에 대한 바인딩.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slf4j-nop-{version}.jar&lt;/td&gt;
      &lt;td&gt;NOP에 대한 바인딩. 모든 로깅을 자동으로 삭제합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slf4j-simple-{version}.jar&lt;/td&gt;
      &lt;td&gt;모든 이벤트를 System.err에 출력하는 단순 구현 바인딩. &lt;br /&gt; INFO 이상의 메시지만 출력되므로 작은 응용 프로그램에서 유용하다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slf4j-jcl-{version}.jar&lt;/td&gt;
      &lt;td&gt;JCL(Jakarta Commons Logging)에 대한 바인딩. &lt;br /&gt; 모든 SLF4J 로깅을 JCL에 위임한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;logback-classic-{version}.jar&lt;/td&gt;
      &lt;td&gt;(logback-core-{version}.jar 필요) &lt;strong&gt;native implement&lt;/strong&gt; &lt;br /&gt; Logback의 클래스는 SLF4J의 인터페이스를 직접 구현한 것으로, SLF4J 프로젝트 외부에 SLF4J 바인딩이 있다. &lt;br /&gt; 따라서 Logback과 함께 SLF4J를 사용하면 메모리 및 오버헤드가 발생하지 않는다. &lt;br /&gt; Logback의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ch.qos.logback.classic.Logger&lt;/code&gt; 클래스는 SLF4J의 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.slf4j.Logger&lt;/code&gt; 인터페이스를 직접 구현한 것이다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;예시: SLF4J binding with Logback&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기본 Logging Framework로 logback-classic을 사용하려면&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logback-classic&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;slf4j-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logback-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;slf4j-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;pom.xml에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ch.qos.logback:logback-classic&quot;&lt;/code&gt; dependency 추가
    &lt;ul&gt;
      &lt;li&gt;이 dependency 하나만 추가해도 된다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-classic&lt;/code&gt;가 의존하는 logback-core-1.2.3.jar뿐만 아니라 slf4j-api-1.7.25.jar를 자동으로 가져온다.&lt;/li&gt;
      &lt;li&gt;하지만 해당 artifact의 올바른 버전을 사용하는데 필요하기 때문에 모두 &lt;strong&gt;명시적으로 선언&lt;/strong&gt;하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애플리케이션 레이어에서 SLF4J를 사용해서 Logging 코드를 작성하면 실제 로그를 출력하는 행위는 Logback이 하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-slf4j-bridging-modules&quot;&gt;3) SLF4J Bridging Modules&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;(SLF4J 이외의) 다른 로깅 API로의 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;Logger 호출을 SLF4J 인터페이스로 연결(redirect)&lt;/span&gt;하여 SLF4J API가 대신 처리할 수 있도록 하는 일종의 어댑터 역할을 하는 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.slf4j.org/manual.html&quot;&gt;Consolidate logging via SLF4J&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트는 다양한 components로 구성된다.
    &lt;ul&gt;
      &lt;li&gt;components 중 일부는 SLF4J 이외의 로깅 API에 의존한다.&lt;/li&gt;
      &lt;li&gt;Ex) spring-context는 JCL(Jarkarta Commons Logging) API를 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이러한 상황을 처리하기 위해 SLF4J에는 여러 &lt;strong&gt;Bridging Module&lt;/strong&gt;이 제공된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.slf4j.org/legacy.html&quot;&gt;Bridging legacy logging APIs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 다른 로깅 API를 사용하는 components에 대해 single channel을 통해 Logging을 통합하는 것이 바람직하다.&lt;/li&gt;
  &lt;li&gt;이를 위해 SLF4J에서 log4j API, JCL(Jakarta Commons Logging) API 및 JUL(Java Util Logging) API에 대한 호출을 대신 SLF4J API에 대한 것처럼 리디렉션하는 여러 &lt;strong&gt;Bridging Modules&lt;/strong&gt;을 제공한다.
&lt;img src=&quot;/images/logging/bridge-for-binding.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!-- xxx-over-slf4j는 SLF4J가 지원하는 로깅을 대신 구현해주는 이름들입니다. 
 결과적으로 자신이 고칠수 없는 소스를 그대로 두고 SLF4J를 사용하는것처럼 바꿀수 있는 방법입니다. 
 쉽게 말해 각각 로깅 구현체를 SLF4J가 package이름으로 구현을 해놓은 것입니다.  --&gt;&lt;/p&gt;

&lt;h3 id=&quot;slf4j가-제공하는-bridge의-종류&quot;&gt;SLF4J가 제공하는 Bridge의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;겉으로는 다른 로깅 API를 사용하는 것 같지만 내부에서는 SLF4J API를 호출하도록 일종의 어댑터 역할을 해주는 라이브러리
    &lt;ul&gt;
      &lt;li&gt;다른 로깅 API -&amp;gt; Bridge -&amp;gt; SLF4J API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;SLF4J binding(.jar)&lt;/strong&gt;)&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jcl-over-slf4j.jar&lt;/td&gt;
      &lt;td&gt;JCL API에 의존하는 클래스들을 손상시키지 않고 JCL로 들어오는 호출을 JCL-over-SLF4J를 이용해서 SLF4J API를 호출한다. &lt;br /&gt; 즉, 이 모듈을 사용하면 JCL을 사용하는 기존 소프트웨어와의 호환성을 손상시키지 않으면서 프로젝트를 SLF4J로 단편적으로 마이그레이션할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;log4j-over-slf4j.jar&lt;/td&gt;
      &lt;td&gt;이 모듈을 사용하면 log4j 호출을 SLF4J API로 리디렉션할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jul-to-slf4j.jar&lt;/td&gt;
      &lt;td&gt;이 모듈을 사용하면 java.util.logging 호출을 SLF4J API로 리디렉션할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;사용 시 주의할 점&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/logging/bridge-infinite-loop.png&quot; alt=&quot;&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;jcl-over-slf4j.jar
        &lt;ul&gt;
          &lt;li&gt;JCL API 사용 X —&amp;gt; 의존성에서 commons-logging.jar 제거&lt;/li&gt;
          &lt;li&gt;SLF4J Binding인 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j-jcl-{version}.jar&lt;/code&gt;&lt;/strong&gt;와 같이 쓸 수 없다. (무한루프)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;log4j-over-slf4j.jar
        &lt;ul&gt;
          &lt;li&gt;Log4J API 사용 X —&amp;gt; 의존성에서 log4j.jar 제거&lt;/li&gt;
          &lt;li&gt;SLF4J Binding인 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j-log4j12-{version}.jar&lt;/code&gt;&lt;/strong&gt;와 같이 쓸 수 없다. (무한루프)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;jul-to-slf4j.jar
        &lt;ul&gt;
          &lt;li&gt;java.util.logging은 교체 불가능 (LogRecord 객체를 사용해서 위임)&lt;/li&gt;
          &lt;li&gt;SLF4J Binding인 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j-jdk14-{version}.jar&lt;/code&gt;&lt;/strong&gt;와 같이 쓸 수 없다. (무한루프)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; JCL(Jakarta Commons Logging)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Log4j, LogKit, JDK1.4과 같은 다른 Logging Framework에 대한 추상화 계층을 제공하는 인터페이스&lt;/li&gt;
  &lt;li&gt;로깅 라이브러리가 아니라 로깅 &lt;strong&gt;추상화&lt;/strong&gt; 라이브러리
    &lt;ul&gt;
      &lt;li&gt;로깅 라이브러리 선택권은 애플리케이션 개발자의 것이다.&lt;/li&gt;
      &lt;li&gt;따라서 프레임워크는 주로 로깅 추상화 라이브러리를 사용하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;실제 Logging Framework을 선택하는 시점이 &lt;strong&gt;&lt;em&gt;runtime&lt;/em&gt;&lt;/strong&gt;이라 클래스 로더 문제
        &lt;ul&gt;
          &lt;li&gt;클래스 로더에 의존적인 방법으로 구현체(Logging Framework)를 찾는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;런타임 시 오버헤드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;예시: Logging with SLF4J and Logback&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/logging/loggin-with-slf4j-logback.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;필요한 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... 
    위의 SLF4J binding with Logback 내용과 동일 
    logback-classic
    logback-core
    slf4j-api
...
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/log4j-over-slf4j --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;log4j-over-slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jcl-over-slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/jul-to-slf4j --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jul-to-slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;SLF4J API (인터페이스)
    &lt;ul&gt;
      &lt;li&gt;로깅에 대한 추상 레이어를 제공&lt;/li&gt;
      &lt;li&gt;사용자가 이 interface를 통해 로깅 코드를 작성한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j-api&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SLF4J Binding(.jar)
    &lt;ul&gt;
      &lt;li&gt;SLF4J 인터페이스를 로깅 구현체로 연결하는 어댑터 역할을 하는 라이브러리&lt;/li&gt;
      &lt;li&gt;SLF4J에 구현체(Logging Framework)를 바인딩하기 위해 사용한다.&lt;/li&gt;
      &lt;li&gt;여러 바인딩 중 하나만 사용할 것&lt;/li&gt;
      &lt;li&gt;[Logback] &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-classic&lt;/code&gt;&lt;/strong&gt; / [Log4J] &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j-log4j12&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Logging Framework
    &lt;ul&gt;
      &lt;li&gt;실제 로깅 코드를 실행할 Logging Framework를 정한다.&lt;/li&gt;
      &lt;li&gt;[Logback] &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logback-core&lt;/code&gt;&lt;/strong&gt; / [Log4J] &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log4j-core&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SLF4J Bridging Module
    &lt;ul&gt;
      &lt;li&gt;다른 로깅 API -&amp;gt; Bridge(redirect) -&amp;gt; SLF4J API&lt;/li&gt;
      &lt;li&gt;다른 로깅 API로의 Logger 호출을 SLF4J 인터페이스로 연결(redirect)하여 SLF4J API가 대신 처리할 수 있도록 하는 일종의 어댑터 역할을 하는 라이브러리&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log4j-over-slf4j&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jcl-over-slf4j&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jul-to-slf4j&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Logging Framework를 변경하고 싶으면 2, 3번을 교체&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;slf4j-특징&quot;&gt;SLF4J 특징&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;배포시 Logging Framework 선택 가능
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;compile time&lt;/em&gt;에 오직 하나의 Logging Framework를 사용하도록 바인딩&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빠른 속도로 작동
    &lt;ul&gt;
      &lt;li&gt;클래스가 JVM에 의해 로드되는 방식으로 인해 프레임워크 바인딩은 초기에 자동으로 확인된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;널리 사용되는 Logging Framework를 위한 바인딩 제공
    &lt;ul&gt;
      &lt;li&gt;log4j, java.util.logging, 단순 로깅 및 NOP를 지원&lt;/li&gt;
      &lt;li&gt;logback 프로젝트는 기본적으로 SLF4J를 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bridging legacy logging API
    &lt;ul&gt;
      &lt;li&gt;log4j API, JCL(Jakarta Commons Logging) API 및 java.util.logging API에 대한 호출을 대신 SLF4J API에 대한 것처럼 리디렉션하는 여러 Bridging Modules을 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Migrate your source code
    &lt;ul&gt;
      &lt;li&gt;SLF4J-Migrator utility를 사용하면 SLF4J를 사용하는 소스를 마이그레이션할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;매개 변수화된 로그 메시지 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;SLF4J의 개념과 설정 방법에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/01/04/logging-with-slf4j.html&quot;&gt;SLF4J를 이용한 Logging&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.slf4j.org/manual.html&quot;&gt;https://www.slf4j.org/manual.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackify.com/compare-java-logging-frameworks/&quot;&gt;https://stackify.com/compare-java-logging-frameworks/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/whiteship/ss-47273947&quot;&gt;스프링 부트와 로깅 slideshare&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://whiteship.me/?p=12162&quot;&gt;http://whiteship.me/?p=12162&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://sonegy.wordpress.com/2014/05/23/how-to-slf4j/&quot;&gt;https://sonegy.wordpress.com/2014/05/23/how-to-slf4j/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/04/logging-with-slf4j.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/04/logging-with-slf4j.html</guid>
        
        <category>logging</category>
        
        <category>slf4j</category>
        
        <category>bridge</category>
        
        <category>binding</category>
        
        <category>usage</category>
        
        
      </item>
    
      <item>
        <title>[Spring] Spring Security</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Spring Security란&lt;/li&gt;
    &lt;li&gt;Spring Security 사용법
      &lt;ul&gt;
        &lt;li&gt;1) 필요한 Library&lt;/li&gt;
        &lt;li&gt;2) Spring Security 활성화&lt;/li&gt;
        &lt;li&gt;3) Spring Security 설정&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;(참고) Expression-Based Access Control&lt;/li&gt;
    &lt;li&gt;(참고) Custom Login/Logout Form&lt;/li&gt;
    &lt;li&gt;Spring Security Architecture (전체 과정)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;spring-security란&quot;&gt;Spring Security란&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 기반 애플리케이션의 보안을 위한 사실상의 표준
&lt;img src=&quot;/images/spring-framework/springsecurity-overview1.png&quot; alt=&quot;&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;Spring Security는 전적으로 Servlet Filter를 기반으로 한다.&lt;/li&gt;
      &lt;li&gt;Filter는 (Servlet과 브라우저 사이에서 주고 받는) 요청과 응답을 가로 채고, 해당 요청/응답 전후에서 필요한 처리를 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 정의가 가능한 인증 및 접근제어/권한 프레임워크
    &lt;ul&gt;
      &lt;li&gt;authientication(인증): id/pw, 공인인증서 등&lt;/li&gt;
      &lt;li&gt;authorization(권한): admin, user, guest 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;간략한 과정
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/spring-framework/springsecurity-overview2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;(권한): 권한이 없는 User가 접근할 경우, 자동으로 Login Page를 띄어준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;(인증): 사용자가 입력한 id/pw가 일치하는지 Authentication Providers(DB)를 통해 확인한다.&lt;/li&gt;
  &lt;li&gt;id/pw가 일치하지 않으면 1, 2번을 반복한다.&lt;/li&gt;
  &lt;li&gt;인증과 권한이 통과가 되면 Secured Area에 접근을 허용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;spring-security-사용법&quot;&gt;Spring Security 사용법&lt;/h1&gt;
&lt;h2 id=&quot;1-필요한-library&quot;&gt;1. 필요한 Library&lt;/h2&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;org.springframework-version&amp;gt;&lt;/span&gt;5.1.3.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/org.springframework-version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;org.springsecurity-version&amp;gt;&lt;/span&gt;4.2.3.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/org.springsecurity-version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${org.springsecurity-version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${org.springsecurity-version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-config&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${org.springsecurity-version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;사용하는 버전에 주의한다. (여기서는 Spring Security 4를 기준으로 작성)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-spring-security-활성화&quot;&gt;2. Spring Security 활성화&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Security는 &lt;strong&gt;DelegatingFilterProxy&lt;/strong&gt;를 사용한다.
    &lt;ul&gt;
      &lt;li&gt;DelegatingFilterProxy는 모든 요청을 가로채는 Filter이다.&lt;/li&gt;
      &lt;li&gt;이 Filter를 &lt;strong&gt;web.xml&lt;/strong&gt;에 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;springSecurityFilterChain&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;springSecurityFilterChain&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/code&gt; : 이 이름으로 등록된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/code&gt; : Filter로 사용할 클래스&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/code&gt; : 위에서 설정한 Filter 이름과 url을 mapping한다. (“/*”: 모든 request)&lt;/li&gt;
  &lt;li&gt;이 Filter를 이용하면 Spring이 요청을 가로채서 해당 사용자의 인증, 권한을 알아서 확인해준다.
    &lt;ul&gt;
      &lt;li&gt;사용자가 입력한 정보와 DB에 저장되어 있는 정보를 비교한 후 알아서 인증, 권한을 확인한다.&lt;/li&gt;
      &lt;li&gt;단, App마다 달라지는 부분은 우리(개발자)가 알아서 처리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-spring-security-설정&quot;&gt;3. Spring Security 설정&lt;/h2&gt;
&lt;h3 id=&quot;webxml-설정&quot;&gt;web.xml 설정&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- web.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
        /WEB-INF/applicationContext.xml
        /WEB-INF/securityContext.xml 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;web.xml의 contextConfigLocation에 securityContext.xml을 추가한다.
    &lt;ul&gt;
      &lt;li&gt;그래야 나중에 ContextLoaderListener에 의해 등록된 설정 파일을 읽을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;securitycontextxml-설정&quot;&gt;securityContext.xml 설정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-framework/springsecurity-securitycontext.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;# 1. beans에 추가할 설정&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- securityContext.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:security=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/security&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       
       ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;beans에 추가할 설정
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xmlns:security=&quot;http://www.springframework.org/schema/security&quot;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;내가 설정한 약어: security&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xsi:schemaLocation=&quot;http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd&quot;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# 2. Authentication(인증) 설정&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Authentication(인증) 설정 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--방법 1. User Authentication with In-Memory definition--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;security:authentication-manager&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:authentication-provider&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:user-service&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;authorities=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLE_ADMIN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testUser&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;authorities=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLE_USER&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:user-service&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:authentication-provider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:authentication-manager&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--방법 2. Other Authentication Provider (Using Database)--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;security:authentication-manager&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:authentication-provider&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:jdbc-user-service&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-source-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;users-by-username-query=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select username, password, enabled from users where username=?&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;authorities-by-username-query=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select username, authority from authorities where username=?&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:authentication-provider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:authentication-manager&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;authentication-manager&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;요청의 인증을 처리한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;authentication-provider&amp;gt;&lt;/code&gt;가 제공하는 메커니즘을 사용하여 사용자를 인증한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인증 처리를 할 사용자 정보를 가져오는 방법 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;2가지&lt;/span&gt;
    &lt;ul&gt;
      &lt;li&gt;1) 메모리&lt;/li&gt;
      &lt;li&gt;2) DB&lt;/li&gt;
      &lt;li&gt;모두 있어도 상관없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:user-service&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;test를 위해 &lt;strong&gt;메모리 상&lt;/strong&gt;에 일시적으로 하드 코드된 사용자를 정의한다.
        &lt;ul&gt;
          &lt;li&gt;이름은 “admin”, 비밀번호는 “1234”인 사용자에게 “ROLE_ADMIN” 권한 부여&lt;/li&gt;
          &lt;li&gt;이름은 “admtestUserin”, 비밀번호는 “test”인 사용자에게 “ROLE_USER” 권한 부여&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:jdbc-user-service&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;DB에&lt;/strong&gt; 사용자 계정 정보를 저장한다.
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/images/spring-framework/springsecurity-table-design.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;table은 개발자가 설계한다.&lt;/li&gt;
          &lt;li&gt;여기서는 계정 정보 테이블과 권한 정보 테이블을 만들었다.&lt;/li&gt;
          &lt;li&gt;이 정보들은 사용자가 회원가입할 때 저장해야하는 정보들이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data-source-ref=&quot;dataSource&quot;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;DB 접근을 위한 명시&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터베이스 정보를 추출하기 위해 수행할 구체적인 쿼리를 정의한다.
        &lt;ul&gt;
          &lt;li&gt;아래의 쿼리는 Default로 설정되어 있다. (명시하지 않아도 됨)
            &lt;ul&gt;
              &lt;li&gt;Spring Security가 인증, 권한을 확인하기 위한 사용자의 정보들을 가져오기 위해서 Spring에게 해당 쿼리문을 수행하라고 명시하는 것이다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;1) &lt;code class=&quot;highlighter-rouge&quot;&gt;users-by-username-query=&quot;select username, password, enabled from users where username=?&quot;&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;사용자가 입력한 username 정보를 바탕으로 인증을 위한 username, password, enabled 정보를 가져온다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2) &lt;code class=&quot;highlighter-rouge&quot;&gt;authorities-by-username-query=&quot;select username, authority from authorities where username=?&quot;&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;사용자가 입력한 username 정보를 바탕으로 접근 제어를 위한 authority(권한 정보)을 가져온다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이후에는 사용자가 입력한 정보와 DB에 저장되어 있는 정보를 비교하여 Spring Security가 &lt;strong&gt;알아서&lt;/strong&gt; 인증, 권한을 확인한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;# 3. Authorization(권한)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Authorization(권한) 설정 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;security:http&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;auto-config=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use-expressions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/secured/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hasRole('ROLE_USER')&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/admin/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hasRole('ROLE_ADMIN')&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;permitAll()&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;permitAll()&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/resources/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;permitAll()&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;denyAll()&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:form-login&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;login-page=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:http&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto-config=&quot;true&quot;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;form 기반 로그인, 기본 인증 및 로그 아웃 메커니즘을 자동으로 활성화한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use-expressions=&quot;true&quot;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Spring EL Expressions 사용을 활성화한다. &lt;strong&gt;&lt;em&gt;&lt;mark&gt;(아래 참고)&lt;/mark&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:intercept-url&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;보안이 필요한 요청 URL에 대한 패턴을 정의한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; 속성(use-expressions)
        &lt;ul&gt;
          &lt;li&gt;해당 패턴과 일치하는 요청된 URL을 볼 수 있는 권한이 있는 사용자의 역할을 정의한다.&lt;/li&gt;
          &lt;li&gt;권한은 특정 사용자에게 할당된 역할 목록을 쉼표로 분리하여 사용할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:form-login&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;default settings을 오버라이딩한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;login-page=&quot;/login&quot;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Defalt 페이지인 Spring Login Form이 아닌 사용자가 정의한 Custom Login Form을 사용한다. &lt;strong&gt;&lt;em&gt;&lt;mark&gt;(아래 참고)&lt;/mark&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고-expression-based-access-control&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;mark&gt;(참고)&lt;/mark&gt;&lt;/em&gt;&lt;/strong&gt; Expression-Based Access Control&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Authorization(접근 제어) 메커니즘으로서 Spring EL Expressions를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Expression&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;hasRole([role])&lt;/td&gt;
      &lt;td&gt;현재 로그인한 주체(principal)가 권한을 가지고 있으면 true 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;hasAnyRole([role1,role2])&lt;/td&gt;
      &lt;td&gt;현재 로그인한 주체가 제공된 권한 중 하나라도 가지고 있으면 true 반환 (쉼표로 여러 개의 권한 목록 지정 가능)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;principal&lt;/td&gt;
      &lt;td&gt;현재 로그인한 사용자를 나타내는 객체에 직접 액세스할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;authentication&lt;/td&gt;
      &lt;td&gt;SecurityContext에서 얻은 현재 Authentication 객체에 직접 액세스할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;permitAll&lt;/td&gt;
      &lt;td&gt;모든 사용자 접근 가능 (Always evaluates to true)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;denyAll&lt;/td&gt;
      &lt;td&gt;모든 사용자 접근 불가능 (Always evaluates to false)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isAnonymous()&lt;/td&gt;
      &lt;td&gt;현재 로그인한 사용자가 익명 사용자(anonymous user)인 경우 true 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isRememberMe()&lt;/td&gt;
      &lt;td&gt;현재 로그인한 사용자가 기억하고 있는 사용자(remember-me user)인 경우 true 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isAuthenticated()&lt;/td&gt;
      &lt;td&gt;현재 로그인한 사용자가 익명이 아닌 경우 true 반환 &lt;strong&gt;(인증만 되어 있으면 접근 허용)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isFullyAuthenticated()&lt;/td&gt;
      &lt;td&gt;현재 로그인한 사용자가 익명 또는 기억하고 있는 사용자가 아닌 경우 true 반환&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고-custom-loginlogout-form&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;mark&gt;(참고)&lt;/mark&gt;&lt;/em&gt;&lt;/strong&gt; Custom Login/Logout Form&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;default settings을 오버라이딩
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:form-login login-page=&quot;/login&quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;내가 정한 URL을 처리할 Login Controller(@GetMapping)을 만든다.&lt;/li&gt;
    &lt;li&gt;Custom Loing Page(login.jsp)를 만든다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-securitycontextxml-설정&quot;&gt;1. securityContext.xml 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:form-login&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;default settings을 오버라이딩한다.&lt;/li&gt;
      &lt;li&gt;Defalt 페이지인 Spring Login Page가 아닌 사용자가 정의한 Custom Login Page를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;security:form-login&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;login-page=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;security:form-login&lt;/code&gt; attribute &lt;strong&gt;(Spring Security 4)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;login-page=&quot;/login&quot;&lt;/code&gt;는 Spring Security을 지시한다.
        &lt;ul&gt;
          &lt;li&gt;인증 절차를 처리할 URL(/login)을 정한다.&lt;/li&gt;
          &lt;li&gt;개발자가 &lt;strong&gt;임의로 결정&lt;/strong&gt;할 수 있다.&lt;/li&gt;
          &lt;li&gt;접근 제어에 따라 사용자의 인증 절차가 필요한 경우 브라우저를 해당 URL(“/login”)으로 redirect한다.
            &lt;ul&gt;
              &lt;li&gt;return redirect:/login; [GET]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;해당 요청을 처리할 LoginController는 로그인 페이지를 렌더링하는 login.jsp를 반환한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;authentication-failure-url=&quot;/login?error&quot;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;특별히 지정하지 않아도 Default로 설정되어 있다.
            &lt;ul&gt;
              &lt;li&gt;관례상 error &lt;strong&gt;=1&lt;/strong&gt;을 넣기도 한다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;사용자가 잘못된 사용자 이름과 암호로 로그인하려고 하면 동일한 로그인 페이지로 가되, 인증 실패를 알리기 위해 URL 뒤에 error라는 request parameter를 붙여 성공과 구분한다.
            &lt;ul&gt;
              &lt;li&gt;즉, 인증 시도가 실패하면 브라우저를 “/login?error”로 redirect한다.&lt;/li&gt;
              &lt;li&gt;return redirect:/login?error; [GET]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;마찬가지로 해당 요청을 처리할 LoginController는 실패 메시지를 Model에 담아 login.jsp를 반환한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;security:logout&lt;/code&gt; attribute &lt;strong&gt;(Spring Security 4)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logout-success-url=&quot;/login?logout&quot;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;특별히 지정하지 않아도 Default로 설정되어 있다.&lt;/li&gt;
          &lt;li&gt;사용자가 성공적으로 로그아웃하면 브라우저를 “/login?logout”로 redirect한다.
            &lt;ul&gt;
              &lt;li&gt;return redirect:/login?logout; [GET]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;마찬가지로 해당 요청을 처리할 LoginController는 로그아웃 확인 메시지를 Model에 담아 login.jsp를 반환한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;security:form-login&lt;/code&gt; attribute &lt;strong&gt;(Spring Security 4)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Attribute&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Default value&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Note&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login-page&lt;/td&gt;
      &lt;td&gt;/login&lt;/td&gt;
      &lt;td&gt;implement&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;username-parameter &lt;/td&gt;
      &lt;td&gt;username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;password-parameter&lt;/td&gt;
      &lt;td&gt;password&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login-processing-url&lt;/td&gt;
      &lt;td&gt;/login , POST&lt;/td&gt;
      &lt;td&gt;the URL used to process the login request by spring&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;authentication-failure-url&lt;/td&gt;
      &lt;td&gt;/login?error&lt;/td&gt;
      &lt;td&gt;implement&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;security:logout&lt;/code&gt; attribute &lt;strong&gt;(Spring Security 4)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Attribute&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Default value&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Note&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;logout-url &lt;/td&gt;
      &lt;td&gt;/logout, POST&lt;/td&gt;
      &lt;td&gt;Log out processing module by spring&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;logout-success-url&lt;/td&gt;
      &lt;td&gt;/login?logout&lt;/td&gt;
      &lt;td&gt;implement&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;2-controller&quot;&gt;2. Controller&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 사용자가 입력한 정보로부터 POST 요청은 Spring Security를 거친 후 해당 메서드로 들어온다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;errorMsg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid username and password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logoutMsg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You have been logged out successfully&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// login.jsp(Custom Login Page)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;POST 요청 —&amp;gt; Spring Security —redirect:(GET 요청)—&amp;gt; 내가 작성한 Controller
    &lt;ul&gt;
      &lt;li&gt;POST 요청은 Spring Security에 의해 처리&lt;/li&gt;
      &lt;li&gt;Spring Security가 “redirect:” 한 GET 요청은 내가 작성한 Controller에서 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인증 성공 시, &lt;strong&gt;redirect:/&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HomeController - index.jsp(Main Page) 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인증 실패 시, &lt;strong&gt;redirect:/login?error&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;LoginController - 오류 메시지를 Model에 담아 login.jsp(Custom Login Page) 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그아웃 성공 시, &lt;strong&gt;redirect:/login?logout&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;LoginController - 로그아웃 확인 메시지를 Model에 담아 login.jsp(Custom Login Page) 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-custom-loing-page&quot;&gt;3. Custom Loing Page&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;home.jsp&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 로그인한 사용자가 있으면 LOGOUT이 보인다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;c:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${pageContext.request.userPrincipal.name != null}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:document.getElementById('logout').submit()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;LOGOUT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- logout processing module of spring security 4 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;c:url value=&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&quot; method=&quot;post&quot;&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${_csrf.parameterName}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${_csrf.token}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;login.jsp&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Custom Login with Username and Password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- For logout  --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;c:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${not empty logoutMsg}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color: #0000ff;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; ${logoutMsg} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- login processing module of spring security 4 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;c:url value=&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&quot; method=&quot;post&quot;&amp;gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- For failed user authentication  --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${not empty errorMsg}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color: #ff0000;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; ${errorMsg} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;User:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;Password:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;colspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LOGIN&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${_csrf.parameterName}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${_csrf.token}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;login/logout processing module of spring security 4
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;action=&quot;&amp;lt;c:url value=&quot;/logout&quot; /&amp;gt;&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;action=&quot;&amp;lt;c:url value=&quot;/login&quot; /&amp;gt;&quot;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;spring security에 지정되어 있는 이름이기 때문에 위의 value는 변경하면 안된다.
    &lt;ul&gt;
      &lt;li&gt;즉, 개발자가 &lt;strong&gt;임의로 결정&lt;/strong&gt;할 수 없다.&lt;/li&gt;
      &lt;li&gt;버전마다 value가 다를 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고) CSRF(사이트 간 요청 위조, Cross-Site Request Forgery) attack
    &lt;ul&gt;
      &lt;li&gt;개념
        &lt;ul&gt;
          &lt;li&gt;웹 어플리케이션 취약점 중 하나&lt;/li&gt;
          &lt;li&gt;사용자가 자신의 의지와 무관하게 공격자가 의도한 행동을 하여 특정 웹 페이지를 보안에 취약하게 한다거나 수정, 삭제 등의 작업을 하게 만드는 공격 방법을 말한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;방어 방법
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;민감한 정보를 아둘 때 세션에 Token(임의의 난수)를 발급하여, 해당 난수가 없는 상황에서 해당 동작들이 이루어지면 요청을 거부한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;spring-security-architecture-전체-과정&quot;&gt;Spring Security Architecture (전체 과정)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-framework/springsecurity-total.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;securityContext.xml에 권한 설정 명시&lt;/li&gt;
      &lt;li&gt;권한이 없는 User가 접근할 경우,&lt;/li&gt;
      &lt;li&gt;Spring이 내부적으로 Defalt 페이지인 Spring Login Page로 redirect한다.&lt;/li&gt;
      &lt;li&gt;참고) 사용자가 설정한 Login Page로 redirect하는 경우, 설정 파일(securityContext.xml)의 권한 설정에 아래 내용 추가
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;security:form-login login-page=&quot;/login&quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;사용자가 입력한 id/pw가 일치하는지 Authentication Providers(DB)를 통해 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;id/pw가 일치하지 않으면 1, 2번을 반복한다.&lt;/li&gt;
  &lt;li&gt;인증과 권한이 통과가 되면 Secured Area에 접근을 허용한다.
    &lt;ul&gt;
      &lt;li&gt;Login한 사용자가 인증, 권한에 대해 모두 성공하면 원래의 URL(Secured Page)로 redirect한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;사용자-동작에-따른-전체-과정-설명&quot;&gt;사용자 동작에 따른 전체 과정 설명&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;사용자 흐름에 따른 전체 과정 요약&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;사용자가 로그인 정보를 입력하고 Submit하면 &lt;em&gt;/login&lt;/em&gt; URL로 &lt;strong&gt;POST 요청&lt;/strong&gt;이 날아간다.&lt;/li&gt;
  &lt;li&gt;이후에는 Spring Security에 의해 Login/Logout Process를 거친다.
    &lt;ul&gt;
      &lt;li&gt;Spring Security가 인증 결과에 따라 적절하게 &lt;em&gt;redirect:&lt;/em&gt; 를 반환한다.
        &lt;ul&gt;
          &lt;li&gt;인증 성공 시, redirect:&lt;em&gt;/&lt;/em&gt;&lt;/li&gt;
          &lt;li&gt;인증 실패 시, redirect:&lt;em&gt;/login?error&lt;/em&gt;&lt;/li&gt;
          &lt;li&gt;로그아웃 성공 시, redirect:&lt;em&gt;/login?logout&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controller에서 해당 redirect &lt;strong&gt;GET 요청&lt;/strong&gt;을 받아 처리한다.
    &lt;ul&gt;
      &lt;li&gt;인증 성공 시, HomeController에서 return index.jsp(Main Page)&lt;/li&gt;
      &lt;li&gt;인증 실패 시, LoginController에서 오류 메시지를 Model에 담아 return login.jsp(Custom Login Page)&lt;/li&gt;
      &lt;li&gt;로그아웃 성공 시, LoginController에서 로그아웃 확인 메시지를 Model에 담아 return login.jsp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;참고) POST 요청 —&amp;gt; Spring Security —redirect:(GET 요청)—&amp;gt; 내가 작성한 Controller
    &lt;ul&gt;
      &lt;li&gt;POST 요청은 Spring Security에 의해 처리&lt;/li&gt;
      &lt;li&gt;Spring Security가 “redirect:” 한 GET 요청은 내가 작성한 Controller에서 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;로그인 인증 성공/실패&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;home.jsp에서 Secured Page(Ex. Admin Page) 이동 클릭 [GET]&lt;/li&gt;
  &lt;li&gt;접근 제어에 따라 사용자 인증 절차 필요 (Ex. ROLE_ADMIN 사용자만 가능)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;login-page=&quot;/login&quot;&lt;/code&gt;에 의해 Spring Security가 브라우저를 “/login”로 redirect&lt;/li&gt;
      &lt;li&gt;참고) 이때, login-page의 URL은 &lt;strong&gt;&lt;em&gt;개발자가 임의로 정할 수 있다.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;return redirect:/login; [GET]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개발자가 작성한 &lt;strong&gt;LoginController&lt;/strong&gt; login method [GetMapping]
    &lt;ul&gt;
      &lt;li&gt;return login.jsp (Custom Login Page)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;login.jsp에서 사용자 정보 입력 후 LOGIN을 Submit [POST]
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form action=&quot;&amp;lt;c:url value=&quot;/login&quot;/&amp;gt;&quot; method=&quot;post&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;참고) 이때, value 값은 &lt;strong&gt;&lt;em&gt;개발자가 임의로 정할 수 없다.&lt;/em&gt;&lt;/strong&gt; (spring security에 지정되어 있는 이름)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spring Security&lt;/strong&gt; login method [PostMapping] 실행
    &lt;ul&gt;
      &lt;li&gt;인증 절차 성공:
        &lt;ul&gt;
          &lt;li&gt;redirect:/ [GET] (원래의 URL(Secured Page)로 redirect)&lt;/li&gt;
          &lt;li&gt;-&amp;gt; &lt;strong&gt;HomeController&lt;/strong&gt; [GetMapping]에서 return index.jsp&lt;/li&gt;
          &lt;li&gt;6번으로 넘어가지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;인증 절차 실패:
        &lt;ul&gt;
          &lt;li&gt;request parameter에 error 추가&lt;/li&gt;
          &lt;li&gt;return redirect:/login?error; [GET]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LoginController&lt;/strong&gt; login method [GetMapping] 실행
    &lt;ul&gt;
      &lt;li&gt;error request parameter 유무 체크&lt;/li&gt;
      &lt;li&gt;Model에 errorMsg 저장&lt;/li&gt;
      &lt;li&gt;return login.jsp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;login.jsp에서 errorMsg 표시&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;로그아웃 인증 성공&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;home.jsp에서 LOGOUT을 Submit [POST]
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form id=&quot;logout&quot; action=&quot;&amp;lt;c:url value=&quot;/logout&quot; /&amp;gt;&quot; method=&quot;post&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;참고) 이때, value 값은 &lt;strong&gt;&lt;em&gt;개발자가 임의로 정할 수 없다.&lt;/em&gt;&lt;/strong&gt; (spring security에 지정되어 있는 이름)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spring Security&lt;/strong&gt; logout method [PostMapping] 실행
    &lt;ul&gt;
      &lt;li&gt;로그아웃 성공:
        &lt;ul&gt;
          &lt;li&gt;request parameter에 logout 추가&lt;/li&gt;
          &lt;li&gt;return redirect:/login?lougut; [GET]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LoginController&lt;/strong&gt; login method [GetMapping] 실행
    &lt;ul&gt;
      &lt;li&gt;logout request parameter 유무 체크&lt;/li&gt;
      &lt;li&gt;model에 logoutSuccessMsg 저장&lt;/li&gt;
      &lt;li&gt;return login.jsp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;login.jsp에서 logoutSuccessMsg 표시&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;MVC Architecture에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/11/05/mvc-architecture.html&quot;&gt;MVC Architecture 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Web Application Structure와 web.xml의 역할에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html&quot;&gt;Web Application Structure 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/current/guides/html5/helloworld-xml.html&quot;&gt;https://docs.spring.io/spring-security/site/docs/current/guides/html5/helloworld-xml.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/current/guides/html5/form-javaconfig.html&quot;&gt;https://docs.spring.io/spring-security/site/docs/current/guides/html5/form-javaconfig.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-login&quot;&gt;https://www.baeldung.com/spring-security-login&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-security/blob/ec970c9b8e7c2d669bc80b1bd21ad3ba91a20461/samples/xml/servletapi/src/main/java/org/springframework/security/samples/servletapi/mvc/ServletApiController.java&quot;&gt;https://github.com/spring-projects/spring-security/blob/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/4.0.x/reference/html/appendix-schema.html&quot;&gt;schema 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://hydrasky.com/network-security/cross-site-request-forgery-csrf/&quot;&gt;CSRF attack&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/03/spring-security.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/03/spring-security.html</guid>
        
        <category>spring</category>
        
        <category>web</category>
        
        <category>spring-security</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>[SpringMVC] Spring MVC WebForm</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Request Paremeter의 종류&lt;/li&gt;
    &lt;li&gt;Data Binding&lt;/li&gt;
    &lt;li&gt;Data Validation&lt;/li&gt;
    &lt;li&gt;Data Buffering&lt;/li&gt;
    &lt;li&gt;Error Message&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-framework/springwebform-overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;request-parameter의-종류&quot;&gt;Request Parameter의 종류&lt;/h2&gt;
&lt;p&gt;Request Parameter는 HTTP Request Message 안에 담겨서 보내진다.
&lt;img src=&quot;/images/spring-framework/springwebform-requestparam.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Request Parameter는 2가지 방식으로 전달된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-get-방식--query-string&quot;&gt;1. GET 방식 : Query String&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;url 뒤에 query string 형식으로 붙어서 보내진다.&lt;/li&gt;
  &lt;li&gt;Ex) 조회와 같이 DB를 변경하지 않는 작업에 이 방식을 사용한다.
&lt;img src=&quot;/images/spring-framework/springwebform-requestparam-get.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-post-방식--http-entity-body&quot;&gt;2. POST 방식 : HTTP Entity Body&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP Request Message의 Body에 담겨서 보내진다.&lt;/li&gt;
  &lt;li&gt;Ex) 암호화, 회원가입(password) 등 주로 DB를 변경하는 작업에 이 방식을 사용한다.
&lt;img src=&quot;/images/spring-framework/springwebform-requestparam-post.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;data-binding&quot;&gt;Data Binding&lt;/h2&gt;
&lt;p&gt;request parameters가 form bean(=command object)에 바인딩되는 것을 말한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;예시 
&lt;img src=&quot;/images/spring-framework/springwebform-databinding.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-naive-solution-requestparam-어노테이션&quot;&gt;1. Naive Solution (@RequestParam 어노테이션)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@RequestParam 어노테이션 이용
    &lt;ul&gt;
      &lt;li&gt;method 인자에 request parameter을 binding 해준다.&lt;/li&gt;
      &lt;li&gt;반드시 query string의 key 이름이 동일해야 값을 가져올 수 있다.&lt;/li&gt;
      &lt;li&gt;method 인자에 form bean을 선언하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/docreate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// we manually populate the Offer object with &lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// the data coming from the user&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Offer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;method 인자가 3개 이상이면 2번째 방법을 이용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-spring-data-binding-자동-binding&quot;&gt;2. Spring Data Binding (자동 Binding)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;method 인자에 form bean을 선언한다.
    &lt;ul&gt;
      &lt;li&gt;Spring이 자동으로 request paraters를 객체에 binding 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/docreate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Offer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// offer object will be automatically populated &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// with request parameters&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Data Binding 과정&lt;/strong&gt;
&lt;img src=&quot;/images/spring-framework/springwebform-databinding-process.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;form bean 객체(Offer 객체)를 생성한다.&lt;/li&gt;
  &lt;li&gt;request parameter으로부터 form bean에 내용이 자동으로 binding된다.
    &lt;ul&gt;
      &lt;li&gt;이때, form bean(POJO)에 setter method가 구현되어 있어야 binding이 가능하다.&lt;/li&gt;
      &lt;li&gt;또한 controller의 method 인자에 form bean을 선언되어 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;controller에서 form bean을 자동으로 model에 넣어준다. (form bean은 model attribute이다.)&lt;/li&gt;
  &lt;li&gt;model을 view에 넘겨준다.
    &lt;ul&gt;
      &lt;li&gt;controller에서 form bean을 model에 넣어 view에 전달한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;view는 form bean 내용에 접근할 수 있고 이 내용을 rendering 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;즉, controller로부터 전달받은 model에 있는 form bean(Offer 객체, model attribute)를 사용하여 request parameter에 접근할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Thanks&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt; 
    Hi, ${offer.name}.&lt;span class=&quot;nt&quot;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    You have successfully registered.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;data-validation&quot;&gt;Data Validation&lt;/h2&gt;
&lt;p&gt;사용자가 실수로 잘못된 정보를 입력했을 때 잘못된 양식임을 알려주기 위해 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;1-hibernate-validator&quot;&gt;1. Hibernate Validator&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용자의 오류를 감지하기 위해 form bean에 캡슐화된 form data의 유효성을 검사해야 한다.&lt;/li&gt;
  &lt;li&gt;Bean Validation API(JSR-303)는 JavaBean 유효성 검사를 위한 API를 정의하는 명세서이다.
    &lt;ul&gt;
      &lt;li&gt;이 명세의 구현체가 Hibernate Validator(라이브러리)이다.&lt;/li&gt;
      &lt;li&gt;검증 제약 조건을 bean properties에 어노테이션을 달아 설정할 수 있다.&lt;/li&gt;
      &lt;li&gt;Ex) @NotNull, &lt;a href=&quot;http://www.rubular.com/&quot;&gt;@Pattern&lt;/a&gt;, @Size, @Email 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pom.xml에 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hibernate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hibernate-validator&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.2.4.Final&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^[A-Z]{1}[a-z]+$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 정규표현(Regular Expression)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Email&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-message-interpolation&quot;&gt;2. Message Interpolation&lt;/h3&gt;
&lt;p&gt;메시지 보간법(삽입 어구)은 위배된 Bean 유효성 검증 제약 조건에 대한 오류 메시지를 생성하는 것이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메시지 속성을 통해 각 속성의 message descriptor를 정의할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예시&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name must be between 3 and 100 characters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;please provide a valid email address&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the email address cannot be empty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Text must be between 5 and 100 characters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;문제점
    &lt;ul&gt;
      &lt;li&gt;message resources(불변)가 code 안에 들어가 있는 형태이므로 별도의 파일로 관리하는 것이 바람직하다.&lt;/li&gt;
      &lt;li&gt;사용자의 location(지역)에 맞는 언어로 바꿔줘야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-validating-object&quot;&gt;3. Validating Object&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@Valid 어노테이션
    &lt;ul&gt;
      &lt;li&gt;@Valid 어노테이션을 통해 Hibernate가 자동으로 유효성 검사를 한다.&lt;/li&gt;
      &lt;li&gt;controller method의 인자 중 검증할 객체 인자 앞에 해당 어노테이션을 단다.&lt;/li&gt;
      &lt;li&gt;@Valid 어노테이션은 객체의 유효성을 먼저 확인한 다음 모델에 객체를 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BindingResult Object
    &lt;ul&gt;
      &lt;li&gt;유효성 검사 과정의 결과를 나타낸다.&lt;/li&gt;
      &lt;li&gt;필요한 경우에 controller method의 인자에 추가한다.&lt;/li&gt;
      &lt;li&gt;form bean과 같이 model에 들어가서 View에 넘겨준다.&lt;/li&gt;
      &lt;li&gt;이를 통해 View는 error message를 출력할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;즉, @Valid에 의해 Spring이 자동으로 유효성을 검사하고, 그 결과인 BindingResult 객체를 자동으로 Model에 넣어준다.
    &lt;ul&gt;
      &lt;li&gt;form bean과 BindingResult가 포함된 Model을 View에서 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Offer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAllErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectError&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;createoffer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;data-buffering&quot;&gt;Data Buffering&lt;/h2&gt;
&lt;p&gt;사용자가 잘못된 정보를 입력했을 때 처음부터 다시 입력할 필요가 없도록 입력한 정보를 view에 그대로 남아있게 해주는 것이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;예시 
&lt;img src=&quot;/images/spring-framework/springwebform-databuffering.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-spring-form-tag-library&quot;&gt;1. Spring Form Tag Library&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용자의 입력 내용을 web form에 바인딩해야 한다.
    &lt;ul&gt;
      &lt;li&gt;Spring은 data binding-aware tags 세트를 제공한다.&lt;/li&gt;
      &lt;li&gt;즉, 알아서 사용자가 입력했던 내용을 매칭해서 그려준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;‘spring form tag library’의 태그를 사용하려면 JSP 페이지의 맨 위에 다음 지시문을 추가해야 한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%@ taglib prefix=&quot;sf&quot; uri=&quot;http://www.springframework.org/tags/form&quot;%&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;prefix=”sf”: 내가 원하는 약어 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring form tag lib&lt;/td&gt;
      &lt;td&gt;HTML&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sf:form&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;form&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sf:input&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;input  type=”text”&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sf:password&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;input  type=”password”&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sf:checkbox&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;input  type=”checkbox”&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;2-revised-jsp-and-error-message&quot;&gt;2. Revised JSP and Error Message&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-framework/springwebform-revised.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;‘spring form tag library’ 태그 사용 지시문 선언&lt;/li&gt;
  &lt;li&gt;‘spring form tag’ 사용&lt;/li&gt;
  &lt;li&gt;‘spring form tag’ 사용
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sf:errors&amp;gt;&lt;/code&gt; 태그는 유효성 검사 후 BindingResult 객체로부터 받은 error message를 HTML에 랜더링한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model에 들어 있는 model attribute의 이름
    &lt;ul&gt;
      &lt;li&gt;빈 객체로 넘어온 offer이라는 이름의 model attribute(Offer 객체)에 사용자가 입력한 데이터를 넣기 위한 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;name=”name” -&amp;gt; path=”name”으로 사용
    &lt;ul&gt;
      &lt;li&gt;Offer 객체의 어떤 속성과 binding 할지를 명시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;전체-과정&quot;&gt;전체 과정&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-framework/springwebform-total.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;MVC Architecture에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/11/05/mvc-architecture.html&quot;&gt;MVC Architecture 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Web Application Structure와 web.xml의 역할에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html&quot;&gt;Web Application Structure 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- # References
&gt; - []() --&gt;
</description>
        <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/02/spring-mvc-webform.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/02/spring-mvc-webform.html</guid>
        
        <category>spring</category>
        
        <category>springMVC</category>
        
        <category>mvc</category>
        
        <category>web</category>
        
        <category>webform</category>
        
        <category>data-binding</category>
        
        <category>data-validation</category>
        
        
      </item>
    
      <item>
        <title>[Spring] Spring UTF8 한글 설정하기</title>
        <description>&lt;h2 id=&quot;오류-내용&quot;&gt;오류 내용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring 프로젝트에서 한글이 깨짐&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;한글이 깨지는 이유
    &lt;ul&gt;
      &lt;li&gt;보통 브라우저 —&amp;gt; 서버 —&amp;gt; DBMS 로 같은 내용의 한글이 서비스 처리를 하는 단계에서 매번 다른 문자코드를 사용하여 재표현되기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;한글을 올바르게 표현하는 방법
    &lt;ul&gt;
      &lt;li&gt;GET와 POST 방식이 다르다.&lt;/li&gt;
      &lt;li&gt;GET
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;3 이용&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;데이터가 GET방식에서는 요청정보 Header의 URI에 포함되어 전달된다.&lt;/li&gt;
          &lt;li&gt;서블릿의 영역 밖에 존재한다.&lt;/li&gt;
          &lt;li&gt;URI에 대해 인코딩 처리 작업&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;POST
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;1 + 2 이용&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;데이터가 POST방식에서는 요청정보 Body에 포함되어 전달된다.&lt;/li&gt;
          &lt;li&gt;서블릿에서 어느 정도 컨트롤이 가능하다.
&lt;!-- * 요청정보를 받는 페이지에서 인코딩 처리 --&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;
&lt;h3 id=&quot;1-post-방식-스프링-웹-프로젝트-webxml에-utf-8-설정&quot;&gt;1. [POST 방식] 스프링 웹 프로젝트 &lt;strong&gt;web.xml&lt;/strong&gt;에 utf-8 설정&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;forceEncoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!-- * ![Filter 과정 그림]() // 나중에 추가 --&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Web Project - &lt;strong&gt;POST 방식&lt;/strong&gt;에서의 한글 깨짐 해결 방법&lt;/li&gt;
  &lt;li&gt;역할
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;브라우저 —&amp;gt; 요청정보 Body 데이터 —UTF8 인코딩—&amp;gt; Java 단에서의 데이터 처리&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;CharacterEncodingFilter
        &lt;ul&gt;
          &lt;li&gt;HTTP상에서 주고 받는 데이터의 헤더값을 UTF-8로 인코딩&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Servlet에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.setCharacterEncoding(&quot;utf-8&quot;);&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;POST로 인코딩 데이터를 받는 Servlet에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.setCharacterEncoding(&quot;utf-8&quot;);&lt;/code&gt; 처리와 동일한 기능을 수행한다.&lt;/li&gt;
          &lt;li&gt;즉, 이 Filter를 설정하면 POST 요청을 보내는(Submit) 모든 Controller(Servlet) 마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.setCharacterEncoding(&quot;utf-8&quot;);&lt;/code&gt; 내용을 추가하지 않아도 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;또한 DB에서 불러올 한글 데이터들의 한글 깨짐 현상을 해결한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용
    &lt;ul&gt;
      &lt;li&gt;해당 filter를 매핑할 때 모든 URL에 대해 인코딩될 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;와 같이 url-pattern을 설정한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;주의!)&lt;/strong&gt; Spring Security 설정이 있는 경우,&lt;br /&gt; 한글 필터 설정이 springSecurityFilterChain 앞에 위치해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-post-방식-jsp-파일에-utf-8-설정&quot;&gt;2. [POST 방식] &lt;strong&gt;.jsp 파일&lt;/strong&gt;에 utf-8 설정&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsp&quot;&gt;&amp;lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; language=&quot;java&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Web Project - &lt;strong&gt;POST 방식&lt;/strong&gt;에서의 한글 깨짐 해결 방법&lt;/li&gt;
  &lt;li&gt;역할
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;응답정보 Body 데이터(JSP 내의 Java 코드 + HTML) —UTF8 인코딩—&amp;gt; 브라우저&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;JSP의 인코딩 방식이 무엇인지 알 수 있게 선언하는 것&lt;/li&gt;
          &lt;li&gt;jsp 파일에서의 한글 깨짐이 해결된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Servlet에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;response.setContentType(&quot;text/html;charset=UTF-8&quot;);&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Servlet에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;response.setContentType(&quot;text/html;charset=UTF-8&quot;);&lt;/code&gt; 처리와 유사한 기능을 수행한다.&lt;/li&gt;
          &lt;li&gt;Servlet/JSP 단에서의 설정 방벙의 차이점은&lt;br /&gt; 아래의 &lt;strong&gt;참고2)&lt;/strong&gt; &lt;em&gt;dispatcher-servlet.xml에서의 설정과 차이점&lt;/em&gt;을 참고하자.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;참고1)&lt;/strong&gt; &lt;a href=&quot;https://okky.kr/article/284291&quot;&gt;왜 UTF-8 이 두 번 선언이 되어 있을까&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;contentType: 서버에서 생성될 HTML의 charset에 대한 정보&lt;/li&gt;
      &lt;li&gt;pageEncoding: JSP 내의 Java 코드에 대한 charset에 대한 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;참고2)&lt;/strong&gt; &lt;a href=&quot;https://okky.kr/article/284291&quot;&gt;dispatcher-servlet.xml에서의 설정과 차이점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- dispatcher-servlet.xml에서의 설정 (Servlet/JSP 단에서의 설정) 예시 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prefix&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/views/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;suffix&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Servlet/JSP 단에서의 설정
      &lt;ul&gt;
        &lt;li&gt;dispatcher-servlet.xml에서의 설정은 &lt;em&gt;Servlet 단&lt;/em&gt;에서의 설정을 의미한다.&lt;/li&gt;
        &lt;li&gt;.jsp 파일 상의 page 설정은 &lt;em&gt;JSP 단&lt;/em&gt;에서의 설정을 의미한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Servlet/JSP 단에서의 설정 방법의 차이
      &lt;ul&gt;
        &lt;li&gt;JSP 디폴트 contentType: ISO-8859-1&lt;/li&gt;
        &lt;li&gt;아무리 Servlet에서 response.setContentType 결정해서 보내더라도 .jsp page 자체의 contentType은 jsp spec에서 결정되므로 직접 기술해주지 않으면 ISO-8859-1로 설정된다.&lt;/li&gt;
        &lt;li&gt;Servlet 단에서의 설정은 JSP가 아닌 텍스트 리턴 시에만 이용된다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;따라서, &lt;strong&gt;직접 .jsp page에 기술하는 것이 좋다.&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;post-방식에서의-한글-처리-추가-설명-servlet에서-한글처리&quot;&gt;POST 방식에서의 한글 처리 추가 설명 (Servlet에서 한글처리)&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/loginServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginServlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... 생략&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* 요청정보 Body에 있는 문자열들을 인자값으로 지정한 문자코드로 인코딩한다. */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCharacterEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//getParameter는 중복되지 않고 유일하게 하나만 넘어올 떄 사용된다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* 응답정보 문자열들을 인자값으로 지정한 문자코드로 인코딩한다.  */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Query 문자열 한글 테스트&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;h2&amp;gt; your name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;h2&amp;gt; your password is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;request.setCharacterEncoding() 메서드 역할
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;브라우저 —&amp;gt; 요청정보 Body 데이터 —UTF8 인코딩—&amp;gt; Java 단에서의 데이터 처리&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;1번 [POST 방식] 스프링 웹 프로젝트 web.xml에 utf-8 설정 과정에 해당한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;한글 처리를 해주는 메서드는 HttpServletRequest의 상위 객체인 ServletRequest에서 제공하는 setCharacterEncoding() 메서드이다.&lt;/li&gt;
      &lt;li&gt;setCharacterEncoding(“UTF-8”) 메서드는 클라이언트가 전달한 요청정보 Body에 있는 데이터(문자열)들을 메서드 인자값으로 지정한 문자코드(UTF-8)로 인코딩해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;request.setCharacterEncoding() 메서드 사용
    &lt;ul&gt;
      &lt;li&gt;Java 단에서 데이터를 받아오기 전((getParameter() 메서드)에 인코딩을 처리한다.&lt;/li&gt;
      &lt;li&gt;즉, getParameter() 메서드 위에서 사용해야 한다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCharacterEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;param&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;response.setContentType() 메서드 역할
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;응답정보 Body 데이터(Text 데이터) —UTF8 인코딩—&amp;gt; 브라우저&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;2번 [POST 방식] .jsp 파일에 utf-8 설정 과정에 해당한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;response.setContentType(“text/html;charset=UTF-8”) 메서드는 클라이언트에 전달할 응답정보 Body에 있는 데이터(문자열)들을 메서드 인자값으로 지정한 문자코드(UTF-8)로 인코딩해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;response.setContentType() 메서드 사용
    &lt;ul&gt;
      &lt;li&gt;html을 출력하는 메서드 위에서 사용해야 한다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;한글 테스트&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-get-방식-tomcat-서버의-환경-설정-파일-serverxml에-utf-8-설정&quot;&gt;3. [GET 방식] Tomcat 서버의 환경 설정 파일 &lt;strong&gt;server.xml&lt;/strong&gt;에 utf-8 설정&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Connector&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connectionTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20000&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;redirectPort=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8443&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;URIEncoding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Connector&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8009&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AJP/1.3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;redirectPort=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8443&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;URIEncoding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Web Project - &lt;strong&gt;GET 방식&lt;/strong&gt;에서의 한글 깨짐 해결 방법
    &lt;ul&gt;
      &lt;li&gt;GET 방식으로 전달된 질의 문자열들은 URI에 포함되어 전달되기 때문에 URI에 대해 인코딩 처리 작업을 해야한다.&lt;/li&gt;
      &lt;li&gt;서버마다 기본적으로 URI 인코딩 문자코드가 정해져 있으며 톰캣8 버전에서는 UTF-8 문자코드가 기본값으로 적용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Servers(아파치 톰캣)의 해당 프로젝트 config 폴더 &amp;gt; server.xml 파일 &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;URIEncoding=&quot;UTF-8&quot;&lt;/code&gt; property를 추가한다.
    &lt;ul&gt;
      &lt;li&gt;서버에서 직접 URI를 UTF-8로 인코딩하는 과정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-html-파일에-utf-8-설정&quot;&gt;4. &lt;strong&gt;.html 파일&lt;/strong&gt;에 utf-8 설정&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;head 태그 영역을 위와 같이 설정한다.
    &lt;ul&gt;
      &lt;li&gt;최신 IDE(통합 개발 환경)를 사용한다면 기본적인 인코딩 방식은 UTF-8로 설정이 되어있다.&lt;/li&gt;
      &lt;li&gt;하지만 Windows 운영체제는 기본 인코딩 값으로 여전히 euc-kr방식을 사용하기 때문에, 해당 페이지의 인코딩 방식(utf-8)이 무엇인지 브라우저가 알 수 있게 선언해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용
    &lt;ul&gt;
      &lt;li&gt;HTML5의 경우
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;/code&gt;를 head 태그 안에 삽입&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;XHTML의 경우
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;&lt;/code&gt;를 head 태그 안에 삽입&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Servlet과 JSP의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/11/04/servlet-vs-jsp.html&quot;&gt;Servlet과 JSP의 차이&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/seungjin-shin/Treeze/issues/1ㅏ&quot;&gt;https://github.com/seungjin-shin/Treeze/issues/1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://jijs.tistory.com/entry/Spring-Framework-에서-UTF8-한글-설정&quot;&gt;http://jijs.tistory.com/entry/Spring-Framework-에서-UTF8-한글-설정&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://blog.hanumoka.net/2018/04/18/spring-20180418-spring-set-korean/&quot;&gt;https://blog.hanumoka.net/2018/04/18/spring-20180418-spring-set-korean/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://egloos.zum.com/springmvc/v/513986&quot;&gt;http://egloos.zum.com/springmvc/v/513986&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://ofcourse.kr/html-course/%EC%9D%B8%EC%BD%94%EB%94%A9&quot;&gt;https://ofcourse.kr/html-course/%EC%9D%B8%EC%BD%94%EB%94%A9&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://okky.kr/article/194808&quot;&gt;인코딩 중복&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://opentutorials.org/module/3569/21229&quot;&gt;POST/GET에 따라 다른 한글 깨짐 처리 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://okky.kr/article/197156&quot;&gt;Servlet/JSP에서의 response.setContentType&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/01/spring-utf8.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/01/spring-utf8.html</guid>
        
        <category>error</category>
        
        <category>spring</category>
        
        <category>utf8</category>
        
        <category>한글깨짐</category>
        
        <category>encoding</category>
        
        
      </item>
    
      <item>
        <title>[IntelliJ] Spring .jsp 파일 update가 적용되지 않는 경우</title>
        <description>&lt;h2 id=&quot;오류-내용&quot;&gt;오류 내용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring jsp 파일을 수정했는데 자동으로 브라우저에 반영되지 않는 경우&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;IntelliJ에서 resource 파일 변경이 반영되지 않는 경우&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Run &amp;gt; Edit Configurations… 설정
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/error/not-working-jsp-update.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Server tab &amp;gt; On frame deactivation : &lt;strong&gt;Update classes and resources&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;수정한 클래스나 JSP 파일이 자동으로 반영된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &amp;gt; Run ‘Tomcat Server’&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- # 관련된 Post
* []() --&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://smallgiant.tistory.com/30&quot;&gt;http://smallgiant.tistory.com/30&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://lovesigma.github.io/realtime-resource--and-cors%C2%A0/&quot;&gt;http://lovesigma.github.io/realtime-resource–and-cors%C2%A0/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2019/01/01/not-working-jsp-update.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2019/01/01/not-working-jsp-update.html</guid>
        
        <category>error</category>
        
        <category>intellij</category>
        
        <category>spring</category>
        
        <category>not-working</category>
        
        <category>jsp</category>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>[Retrospective] 2018년 회고</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/nesoy&quot;&gt;NESOY&lt;/a&gt;님의 추천으로 난생 처음 회고록을 작성해본다. &lt;br /&gt;
2018년에 나는 무엇을 배웠으며 무엇이 부족했고 무엇을 얻었는지, 앞으로의 목표와 목표를 위해서 어떤 점을 개선하면 좋을지 생각해보는 계기가 되었다.
개발과 관련된 이야기를 주로 다루겠지만 개발 외에도 내가 개선해야 할 습관과 생각들도 되돌아 볼 수 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1년 동안 무엇을 했는지
    &lt;ul&gt;
      &lt;li&gt;스마일게이트 서버개발캠프 (2018.01~02)&lt;/li&gt;
      &lt;li&gt;한국사, 오픽, 정보처리기사, 운전면허, 토익 (2018.03~04/06)&lt;/li&gt;
      &lt;li&gt;우아한 테크 밋업 (2018.04)&lt;/li&gt;
      &lt;li&gt;개발 블로그와 개발 스터디 (2018.05~)&lt;/li&gt;
      &lt;li&gt;암흑기 (2018.07~08)&lt;/li&gt;
      &lt;li&gt;하반기 준비 (2018.09~10)&lt;/li&gt;
      &lt;li&gt;여행 및 네이버 핵데이 (2018.11~12)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;더 나은 개발자가 되려면?
    &lt;ul&gt;
      &lt;li&gt;개발은 나에게 어떤 의미일까&lt;/li&gt;
      &lt;li&gt;개발자로서 발전하는 내가 되기 위해서&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;마무리 글&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1년-동안-무엇을-했는지&quot;&gt;1년 동안 무엇을 했는지&lt;/h1&gt;

&lt;h3 id=&quot;1-스마일게이트-서버개발캠프-20180102&quot;&gt;1. 스마일게이트 서버개발캠프 (2018.01~02)&lt;/h3&gt;
&lt;!-- 작년 소프트웨어 마에스트로 과정을 밟으면서 막바지 쯤에 스마일게이트 서버개발캠프 관련 공고를 봤다. 소마 친구들 사이에서 마치 유행처럼 새로운 외부 활동을 찾아서 지원하는 분위기가 있었고, 나 또한 계속 이어서 개발 관련 공부를 할 수 있을 거라는 생각에 공고를 보자마자 망설임 없이 바로 지원하게 되었다. &lt;br&gt;
그 결과 운이 좋게 합격하게 되었고 활동하는 동안에 매일 매일이 재미있었다. 맛있는 간식이 늘 나의 곁에 있었고, 기술과 관련해서 모르는 부분을 바로 질문할 수 있는 캠프장님이 늘 곁에 계셨고, 개발에 관심있는 여러 좋은 친구들이 늘 함께 있었기 때문이다. &lt;br&gt; --&gt;

&lt;p&gt;매일 9시까지 판교로 출근하면서 프로젝트를 진행하는 것이 나에게는 &lt;strong&gt;강제성 있는 활동&lt;/strong&gt;이라 좋았고, 대학교 강의를 통해서는 알기 어려운 &lt;strong&gt;큰 규모에서의 분산 처리 및 설계 방법&lt;/strong&gt;에 대해서도 배울 수 있었다.&lt;br /&gt;
우리 팀은 DRF를 이용하여 &lt;a href=&quot;https://github.com/team-wonderwoman&quot;&gt;JANDI를 벤치마킹한 협업 메신저 웹 서비스&lt;/a&gt;를 구현했다. 그중 채팅 서버를 구축하면서 &lt;strong&gt;Django Channels&lt;/strong&gt;(Django에 새로운 계층을 추가하여 HTTP와 WebSocket handling 기능을 수행)라는 오픈 소스를 사용하게 되었다. 당시만 해도 Django Channels를 사용하는 제대로 된 예시가 없고 튜토리얼의 설명도 부족했기 때문에 프로젝트에 적용하는 것이 굉장히 어려웠다. 그래서 직접 소스코드가 어떻게 돌아가는지 확인해보고 필요한 부분을 변경하면서 프로젝트에 적용했던 기억이 난다.&lt;br /&gt; 
지금에 와서 아쉬운 점은 프로젝트 내용을 잊어버리기 전에 README.md에 차근히 정리했어야 했는데 당시에는 프로젝트를 마무리하느라 너무 급급해서 기록해두지 못했더니 많은 내용이 기억에서 사라졌다.. (나중에는 까먹기도 하고 귀찮아서 절대 작성하지 않게 된다..) &lt;br /&gt; 
다음부터는 반드시 &lt;strong&gt;프로젝트 내용(기술 스택 및 개발 환경 등)을 간단하게라도 기록해야겠다.&lt;/strong&gt;
&lt;img src=&quot;/images/etc/2018-retrospective-servercamp.png&quot; alt=&quot;서버개발캠프 사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;외부 활동을 하면서 내가 느끼는 가장 가치 있는 것이 있다.&lt;br /&gt; 
개발에 관심 있는 여러 새로운 &lt;strong&gt;친구들을 사귈 수 있다&lt;/strong&gt;는 것이다.&lt;br /&gt; 
이번 활동에서도 역시나 좋은 친구들을 많이 사귈 수 있었다는 것이 좋았고 지금도 연락을 주고 받으면서 유용한 정보들과 기술 내용을 공유하면서 서로에게 긍정적인 자극이 되고 있다.&lt;/p&gt;

&lt;p&gt;서버개발캠프가 끝나갈 즘엔 캠프장님이 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/04/how-to-write-a-resume-for-a-developer.html&quot;&gt;개발자의 포트폴리오・이력서 작성법, 면접을 잘 보는 법&lt;/a&gt; 등에 대해 여러 가지 조언을 해주셨고 조언을 들으면서 정말 공부해야 할 것도 많고 알아야 할 것도 많다는 것을 다시 한번 느꼈다.&lt;br /&gt; 
조언해주신 내용을 바탕으로 &lt;strong&gt;6개월에 한 번씩은 내 포트폴리오와 이력서를 업데이트&lt;/strong&gt;할 계획이다. 그러면서 스스로에 대해 다시 점검할 수 있는 시간을 가질 것이다. (이력서를 업데이트하면서 분기별 회고도 같이 작성하면 좋을 것 같다는 생각이 든다.!)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;프로젝트를 진행하면서 정확히 이해하지 못한 부분을 기록해두고 확실히 이해하고 넘어가기!&lt;/li&gt;
        &lt;li&gt;프로젝트 내용을 반드시 README.md에 기록하기! (나중에는 까먹기도 하고 귀찮아서 절대 작성하지 않게 된다.)&lt;/li&gt;
        &lt;li&gt;6개월에 한 번씩 포트폴리오, 이력서 업데이트하기!&lt;/li&gt;
        &lt;li&gt;사용할 기술에 대해 왜(“Why”) 사용해야 하는지 명확히 짚고 넘어가기!&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-한국사-오픽-정보처리기사-운전면허-토익-2018030406&quot;&gt;2. 한국사, 오픽, 정보처리기사, 운전면허, 토익 (2018.03~04/06)&lt;/h3&gt;
&lt;p&gt;좀 여유로워지면 하고 싶었던 일들을 기록해뒀었고, 그걸 할 수 있는 시기가 되었다.&lt;br /&gt; 
그런데 지금 돌아보면 참.. 쓸모없는 걸 하려고 했구나 싶다. 이래서 사람이 무슨 일을 할 때 항상 &lt;strong&gt;“왜” 하려고 하는지를 생각해야 된다&lt;/strong&gt;는 굉장히 중요한 교훈을 다시 한번 더 되새긴다.&lt;/p&gt;

&lt;p&gt;그래도 돌아보니 뭐 별거 별거 많이 한 것 같다. 시간이 아까웠던 활동도 몇 가지 있지만 후회가 될 만큼 크게 아쉽진 않다. ‘다 경험이지 뭐~’ 라는 생각이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;한국사(18.02)&lt;/li&gt;
  &lt;li&gt;오픽(18.03)&lt;/li&gt;
  &lt;li&gt;정보처리기사(18.03~04)&lt;/li&gt;
  &lt;li&gt;운전면허(18.04)&lt;/li&gt;
  &lt;li&gt;토익(18.06)&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- 그 이유를 굳이 끼워서 억지로 만들어 보자면 다음과 같다. &lt;br&gt;
**한국사(18.02)**는 예전에 한 번 도전했다가 학기 중이라는 핑계로 떨어졌었다. 언니가 &quot;사학과&quot;여서 티비에서 역사 얘기가 나올 때 내가 물어보곤 했는데, 너무 아는 게 없다보니 언니 딴에는 기본 상식이라고 생각하는 질문도 많이 했었고 그런 이유로.. (역사에) 무식하다는 소리도 들었다. 그래서 오기가 생겨서 나도 공부 한 번 해보자 생각을 했다. 아무 목표 없이 역사를 공부하려다 보니 열심히 공부할 동기가 생기지 않아 한국사 시험을 신청하게 되었고, 결국 아주 간당간당한 점수로 1급에 합격했다. 간당간당하게 합격해서 그런지 더 기분이 좋았던 것 같다. :)

**오픽(18.03)**는 공부를 제대로 하지 않고 봤기 때문에 별다른 언급을 하지 않겠다. 그냥 학교 교육장학금으로 공짜로 시험을 볼 수 있었기에 생각없이 본 시험이다. 하지만 영어 회화를 잘하고 싶은 욕심은 항상 가지고 있기 때문에 나중에 직장인이 되어도 아침반이나 전화 영어로라도 회화 공부는 꾸준히 할 것이다. :)

**정보처리기사(18.03~04)**는 정말 스펙용으로 딴 것 같다. 서버개발 캠프가 끝나고 딱히 할 일이 없었기도 했고, 정보처리기사 필기와 실기시험 기간이 단타로 치고 빠지기 굉장히 좋은 타이밍에 잡혀 있어서 그냥 생각 없이 따놓자고 생각했었다. 기본적인 내용을 다시 복습하는 것에는 도움이 되었지만 그냥 정말 자격증을 위한 암기식 공부여서 그렇게 유익한지는 모르겠다. :(

**운전면허(18.04)**는 직장인이 되면 학원 다닐 시간이 있을까 싶어서 여유가 되는 이런 시간에 따면 좋을 것 같았다. 딱 2주 투자해서 딴 운전면허라 시간이 아깝다는 느낌이 들진 않았다. 그래서 지금도 장농면허가 되지 않도록 가끔씩은 가까운 거리를 운전하고 다니고 있다. :)

**토익(18.06)**는 공기업에 취업하고 싶은 마음이 들 때가 있었다. 안정적인 생활과 복지, 높은 연봉 등 여러 가지 좋은 점이 많이 보였기 때문이다. (지금은 생각이 많이 달라졌지만..) 공기업에 취업하기에 가장 기본인 토익을 한 달 동안 준비했고, 원하는 성적까지 도달했기에 더 이상 추가적으로 공부하지 않았다. 토익 역시 정보처리기사와 마찬가지로 실제 영어 실력이 오른다는 느낌은 전혀 들지 않고 그냥 단순한 스킬과 암기를 통한 성적 내기에 급급했기에 그렇게 유익한지는 모르겠다. :( --&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;어떤 일을 시작할 때 가장 기본적으로 &lt;strong&gt;그 일을 왜 하는지&lt;/strong&gt;에 대해 생각하자.&lt;/li&gt;
        &lt;li&gt;왜 하는지에 대한 목표가 뚜렷하면 망설이지 말고 추진하자.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-우아한-테크-밋업-201804&quot;&gt;3. 우아한 테크 밋업 (2018.04)&lt;/h3&gt;
&lt;p&gt;이전까지 가봤던 세미나 중에는 크게 동기 부여가 되는 세미나가 없었다. 아마 기술 세미나여서 내가 아는 것이 적어서 그런 것 같지만.. 이번 우아한 테크 밋업을 통해서는 개발을 진정으로 즐겁게 하는 사람들의 경험과 조언을 들을 수 있어서 신입 개발자들에게 도움이 되는 내용들이 많았다.&lt;br /&gt; 
관련 내용은 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/04/27/woowabros-tech-meetup.html&quot;&gt;우아한 테크 밋업 후기&lt;/a&gt;를 참고하자. 
&lt;img src=&quot;/images/woowabros-tech-meetup/woowabros-tech-meetup-main.png&quot; alt=&quot;우아한 테크 밋업&quot; /&gt;&lt;/p&gt;

&lt;p&gt;발표자분들은 모두 자신만의 분명한 신념이 있었고 그것을 타인에게 잘 전달하는 능력도 뛰어난 분들이었다. (물론 개발에 열정도 대단하셨다.)&lt;br /&gt; 
기억에 남는 부분을 몇 가지 언급하자면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jojoldu&quot;&gt;“이동욱 님”&lt;/a&gt;&lt;/strong&gt;의
    &lt;ul&gt;
      &lt;li&gt;남과 겨루어 이기기를 좋아하는 마음(호승지심(好勝之心))을 통해 계속해서 동료 개발자들에게 자극을 받으며 성장하려는 욕심을 가져라.&lt;/li&gt;
      &lt;li&gt;1일1커밋: ‘실력이 부족하면 노력이라도 하자’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“김민태 님”&lt;/strong&gt;의
    &lt;ul&gt;
      &lt;li&gt;개발자의 가장 뛰어난 능력은 ‘계속 반복하면서 스스로 그것이 재미있어서 다시 또 반복할 수 있는 것’이다.&lt;/li&gt;
      &lt;li&gt;좋은 개발자란 ‘행동으로 자극을 주는 개발자’이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마음에 와닿는 조언을 듣고 나니 뒤숭숭했던 마음이 한순간에 다시 제자리를 잡는 느낌이 들었다. &lt;br /&gt; 
한참 동안 샛길로 빠져 딴짓만 해대던 나를 다잡고 다시금 개발 쪽으로 제대로 된 목표를 세울 수 있는 계기가 되었다.
그래서 이 밋업을 계기로 &lt;strong&gt;1일1커밋&lt;/strong&gt;과, 묵혀두었던 &lt;strong&gt;개발 블로그&lt;/strong&gt;를 다시 시작하게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;실력이 부족하면 노력이라도 하자.&lt;/li&gt;
        &lt;li&gt;행동으로 자극을 주는 개발자가 되자.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-개발-블로그와-개발-스터디-201805&quot;&gt;4. 개발 블로그와 개발 스터디 (2018.05~)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;# 개발 블로그&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2017년 10월에 만들어서 묵혀만 두던 개발 블로그를 다시 시작하게 되었다.&lt;br /&gt; 
개발할 때마다 모르는 부분에 대해 &lt;strong&gt;자주 찾아보게 되는 주제&lt;/strong&gt;가 있다.&lt;br /&gt; 
그런 내용들을 내 블로그에 정리하면서 제대로 이해할 수 있고, 다시 그 내용을 찾아볼 때 훨씬 더 빠르고 쉽게 접근할 수 있을 거란 생각이 들었다.
그리고 내가 알게 된 내용을 다른 사람들과 함께 &lt;strong&gt;공유&lt;/strong&gt;하면서 &lt;strong&gt;피드백&lt;/strong&gt;을 받으면 좋겠다는 생각에 깔끔하게 정리하려고 많이 노력했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/etc/2018-retrospective-blog-pv1.png&quot; alt=&quot;2018 블로그 pv 수&quot; /&gt;&lt;/p&gt;

&lt;p&gt;블로그 방문자 수가 증가하는 것을 보면서 더 열심히 써야겠다는 욕심이 생겼고 가끔가다 좋은 피드백이 오면 뿌듯한 마음이 들어 글을 계속해서 작성하는데 큰 동기부여가 됐다.&lt;/p&gt;

&lt;p&gt;하지만 방문자 수가 많아질수록 부담이 되는 것도 사실이다. 제대로 된 정보가 아닐지도 모른다는 생각이 자주 들곤 하는데 그렇게 생각하다 보면 그냥 글 쓰는 것 자체가 무서워질 것 같았다. 그래서 일단 내가 이해한 내용을 바탕으로 글을 적고 그에 따른 피드백에 맞게 다시 수정하면 된다는 생각을 하고 있다. &lt;br /&gt; 
안하는 것보단 낫지..! (많은 관심과 피드백을 주시면 감사하겠습니다. :D)&lt;/p&gt;

&lt;p&gt;지금은 알고리즘 기초와 관련된 글이 인기가 많지만, 앞으로는 조금 더 실전 개발과 관련해서 응용 가능한 글이 인기가 많아졌으면 좋겠다. 지금보다 더 유익한 &lt;strong&gt;개발 블로그다운&lt;/strong&gt; 블로그로 만들기 위해 노력해야겠다.
&lt;img src=&quot;/images/etc/2018-retrospective-blog-pv3.png&quot; alt=&quot;2018 블로그 pv 수2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내가 작성한 것도 나중에 보면 낯설고 내용도 잊어버리기 쉽기 때문에 &lt;strong&gt;수시로 다시 읽으면서&lt;/strong&gt; 제대로 내 것으로 만드는 과정이 필요하다고 생각한다. 이런 과정을 통해 글에 오타나 오류, 추가해야 될 내용을 점검하면 더욱 좋을 것 같다. (이동 시간을 잘 활용해야겠다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;# 개발 스터디&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;성장 욕구와 같은 &lt;strong&gt;스스로의 동기&lt;/strong&gt; 만큼 강력한 동기는 없는 것 같다.&lt;br /&gt;
하지만 혼자서 공부하는 것은 쉽게 지치고 지겨워지며 지속하기가 굉장히 어렵다.&lt;br /&gt;
그래서 스스로의 동기를 불꽃이라고 한다면 점점 작아지는 불꽃이 되어갈 때마다 스터디와 같은 활동을 발화제로 삼아 수시로 다시 큰 불꽃으로 타오르게 만들어 줘야 한다고 생각한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개발 스터디를 통해 타인에 의한 동기 부여와 자극(호승지심 및 피드백)이 스스로의 동기(성장 욕구)를 부여하는 데 굉장한 영향을 끼친다는 것을 느꼈다.
이 활동이 없었다면 정말 무기력한 생활을 얼마나 길게 했을지 모른다. 2018년을 끝으로 동기부여에 도움을 준 팀원들에게 감사를 전한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/etc/2018-retrospective-wearesoft.png&quot; alt=&quot;WeareSoft repository&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;archive: 개발과 관련된 각종 유익한 정보들을 정리하는 Repository&lt;/li&gt;
  &lt;li&gt;tech-interview: 기술 면접 대비를 위한 기본 개념을 정리하는 Repository&lt;/li&gt;
  &lt;li&gt;wwl: weekly we learned. 일주일 동안의 목표를 정하고 서로 피드백을 주는 Repository&lt;/li&gt;
  &lt;li&gt;algorithm-study: 알고리즘과 관련된 소스 코드 및 이론을 정리하는 Repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/WeareSoft&quot;&gt;“WeareSoft”&lt;/a&gt;&lt;/strong&gt; 개발 스터디의 가장 큰 목적은 &lt;strong&gt;‘피드백’&lt;/strong&gt;이라고 생각한다.&lt;br /&gt; 
어떤 일을 하는 데 있어서 피드백이 없는 일이면 그만큼 재미없는 일이 어딨을까라는 생각을 한다. 그래서 서로의 목표를 점검하고 그것을 수행하는 과정을 공유하면서 무엇이 좋았고 더 나은 방향은 어떤 것이 있을까에 대해 서로에게 피드백을 주는 것이 지속적인 개발 공부를 하는 데 있어서 굉장히 큰 &lt;strong&gt;동기부여가 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2018년에 서로에게 많은 도움이 되었듯이, &lt;br /&gt;
2019년에도 더욱더 좋은 자극이 되는 개발 모임이 되었으면 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;내가 작성한 블로그 글을 다시 점검하고, 완전한 내 것으로 만들자.&lt;/li&gt;
        &lt;li&gt;실무에 도움이 될 만한 기술적인 내용들에 대한 포스트를 늘리자.&lt;/li&gt;
        &lt;li&gt;지속적인 개발 스터디를 위한 규칙과 더 나은 활동 방법에 대해 고민하자.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-암흑기-20180708&quot;&gt;5. 암흑기 (2018.07~08)&lt;/h3&gt;
&lt;p&gt;정말 말 그대로 굉장한 암흑기를 보낸 것 같다.
갑자기 좋지 않은 개인적인 일이 많이 일어났고 이런 상황에 따라 마음을 다잡기가 굉장히 어려웠다.
너무 많은 생각이 밀려와 오히려 명확한 사고 과정 없이 그저 아무 생각 없이 하루하루를 보냈다.
구체적인 일은 글로 작성하고 싶지 않기에 깨달은 교훈만 남기려 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;해결할 수 있는 일에 대한 &lt;strong&gt;고민&lt;/strong&gt;은 의미가 있지만 해결할 수 없는 일에 대한 &lt;strong&gt;걱정&lt;/strong&gt;은 의미가 없다.&lt;/li&gt;
        &lt;li&gt;내가 해결할 수 없는 일은 미뤄두고 미래의 나에게 궁극적으로 도움이 될 만한 당장에 할 수 있는 일을 먼저 처리한다.&lt;/li&gt;
        &lt;li&gt;나의 일상을 유지한다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;6-하반기-준비-20180910&quot;&gt;6. 하반기 준비 (2018.09~10)&lt;/h3&gt;
&lt;p&gt;이렇게 7, 8월을 아무런 생각이 정리되지 않는 암흑기를 보냈다. 제대로 정신을 차리고 보니 9월이 되었다. &lt;br /&gt; 
곧바로 공채 시즌이 다가온 것을 몸소 느끼게 되었고 급하게 마음을 다잡고 하반기를 준비하기 시작했다. &lt;br /&gt; 
물론 5월부터 진행한 스터디가 간신히 나의 일상을 유지시켜준 유일한 활동이었고, 이 활동이 하반기 준비에 도움이 되었지만 가장 바짝 해야 될 8월에 정신줄을 놓고 있었기에 자신감이 많이 없었다. 결국 그렇게 많은 곳에 지원하지 못했고 지원한 곳들마저 알고리즘이라는 큰 벽에 막혀 떨어졌다. :(&lt;br /&gt; 
무슨 말을 해도 다 핑계다. 그냥 더 열심히 했어야 했다.&lt;/p&gt;

&lt;p&gt;이번 하반기를 준비하면서 나의 문제점에 대해 돌아볼 수 있었고, 2019년에 해야 할 목표를 정하기에 좋은 경험이었다고 생각한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;끝까지 포기하지 않는 지독함이 필요하다.&lt;/li&gt;
        &lt;li&gt;알고리즘 공부는 꾸준히 열심히 하자. (가장 부족한 부분)&lt;/li&gt;
        &lt;li&gt;나의 가치와 취업하고자 하는 회사가 맞는지 판단한 후 해당 회사에 대해 사전에 조사하고 그 회사에 입사하고 싶은 이유를 명확히 생각해두자.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;7-여행-및-네이버-핵데이-20181112&quot;&gt;7. 여행 및 네이버 핵데이 (2018.11~12)&lt;/h3&gt;
&lt;p&gt;친구들과 같이 일본으로 여행을 갔다 왔고 오랜만에 해외여행이라 정말 재미있었다. 가끔씩은 이런 힐링을 해줘야 새로운 추진력이 생기는 것 같다. 여행을 가기 전 지원했던 네이버 핵데이가 여행 도중 발표가 났고 다행히 하고 싶던 주제에 합격해서 더욱 기분이 좋았다.&lt;/p&gt;

&lt;p&gt;내 실력을 확인해볼 수 있는 기회였고, 실제 현업에서 활동하고 계신 멘토님께 직접 배움을 얻어갈 수 있는 좋은 기회였기에 잘하고 싶은 마음이 컸다.&lt;br /&gt;
&lt;!-- 팀끼리 사전미팅이 있었고 멘토님을 처음 뵀는데, 굉장히 재치있고 멘티들에게 관심이 많으신 분이었다. 그리고 같은 팀원들은 나보다 훨씬 더 개발에 열정이 있는 분들이었고, 실력자들이었다. &lt;br&gt;
그리고 운이 좋게도 성격들이 다들 정말 좋아서 첫 만남부터 대화도 길게하고 재미있게 진행해보자고 서로 으쌰으쌰했다.&lt;br&gt; --&gt;
&lt;!-- ![naver hackday](/images/etc/2018-retrospective-naverhackday.jpg) --&gt;
&lt;img src=&quot;/images/etc/2018-retrospective-naverhackday2.png&quot; alt=&quot;naver hackday&quot; /&gt;&lt;/p&gt;

&lt;p&gt;항공권 추천 시스템을 구축하는 주제였고, 나는 API 서버 역할을 담당하게 되었다.&lt;br /&gt;
웹 서비스 구축에 있어서 Django가 익숙하긴 했지만, 가장 익숙한 언어가 Java이기도 했고 최근에 Spring을 공부하고 있어서 SpringBoot를 이용하기로 결정했다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 나 스스로를 너무 과대평가했다는 생각이 든다.&lt;br /&gt; 
핵데이에서는 빠르게 구축하는 것도 중요한 데 얕은 지식만 가지고 있던 프레임워크를 사용했던 게 잘못이었다. 멘토님께 도움을 구하면서 구현해갈 수 있을 거라는 과도한 기대와 공부하고 있던 것을 응용하고 싶은 욕심에 제대로 알지도 못하는 프레임워크를 사용했고, 내가 중간 부분(데이터 파싱 - API 서버(BL) - 프론트)을 담당하고 있었기에 팀 전체의 진행도 더뎌졌다. 팀원들에게 미안하기도 했고 나 자신이 너무 답답했다. 아직도 내가 알고 있는 것에 대해 객관적으로 정확히 파악하지 못하고 있다는 것을 알게 되었다.&lt;br /&gt; 
&lt;img src=&quot;/images/etc/2018-retrospective-regret1.png&quot; alt=&quot;naver hackday&quot; /&gt;&lt;/p&gt;

&lt;p&gt;완성이라고 말하기도 어렵게 가장 기본적인 기능만 수행되도록 구현을 마무리했다.&lt;br /&gt; 
네이버 핵데이를 진행하면서 가장 아쉬웠던 점은 &lt;strong&gt;나의 실력&lt;/strong&gt;이었다.. 기본적인 구현을 빠르게 처리하고 고도화에 신경을 쓸 수 있는 수준이었다면 더욱더 구체적인 질문을 통해 얻는 것도 훨씬 많았을 것이다. &lt;br /&gt;
이런 아쉬움과 함께 스스로에 대해 객관화해볼 수 있는 시간을 가질 수 있었고 좋은 팀원들과 재미있게 프로젝트를 진행할 수 있어서 행복했고 재치있는 멘토님을 만나 부담없이 즐기면서 핵데이를 마칠 수 있어서 좋았다.&lt;br /&gt; 핵데이를 계기로 혼자서 하나의 완성된 웹 서비스를 제대로 구축해보는 &lt;strong&gt;개인 프로젝트를 진행&lt;/strong&gt;하면서 개발 과정에 익숙해질 필요성을 느꼈고, 그 과정을 반복하면서 기본적인 부분에 대해서는 빠르게 구축하는 능력을 길러야겠다는 다짐을 했다. 
&lt;img src=&quot;/images/etc/2018-retrospective-regret2.png&quot; alt=&quot;naver hackday&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wrap Up 시간에 멘토님은 어떤 기술을 이용할 때 항상 그 &lt;strong&gt;기술에 대한 타당성&lt;/strong&gt;을 점검해보고, 꾸준히 개발에 &lt;strong&gt;열정을 가지고&lt;/strong&gt; 공부하면 모두 잘 될 것 같다는 천사같은 조언을 해주셨다.&lt;br /&gt;
그래서 다음 핵데이에 또 참가할 수 있는 기회가 주어진다면 그때는 이런 후회없이 ‘아! 이 정도면 훌륭했다.’ 이런 생각이 들만큼 제대로 된 프로젝트를 빠르게 구축할 수 있는 실력을 갖춘 상태로 참여하고자 한다.&lt;br /&gt;
&lt;a href=&quot;https://soojin.ro/blog/naver-campus-hackday?utm_source=naver_d2&quot;&gt;대학생이라면 네이버 캠퍼스 핵데이에 참가해야 하는 이유 + 지원 꿀팁&lt;/a&gt; 참고
&lt;img src=&quot;/images/etc/2018-retrospective-regret3.png&quot; alt=&quot;naver hackday&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;교훈
      &lt;ul&gt;
        &lt;li&gt;스스로 어느 정도 할 수 있는지에 대해 객관적으로 생각하기!&lt;/li&gt;
        &lt;li&gt;하나의 서비스를 &lt;strong&gt;빠르게 구축&lt;/strong&gt;할 수 있는 것도 능력이다.&lt;/li&gt;
        &lt;li&gt;기본적인 부분에 대해서는 빠르게 구축하는 능력을 기르자!&lt;/li&gt;
        &lt;li&gt;사용하고자 하는 기술에 익숙해지도록 &lt;strong&gt;반복하는 작업&lt;/strong&gt;이 필요하다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;더-나은-개발자가-되려면&quot;&gt;더 나은 개발자가 되려면?&lt;/h1&gt;

&lt;h3 id=&quot;-개발은-나에게-어떤-의미일까&quot;&gt;# 개발은 나에게 어떤 의미일까&lt;/h3&gt;
&lt;p&gt;개발은 나를 욕심 있는 사람으로 만든다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;더 많은 것을 알고 싶다.&lt;/li&gt;
  &lt;li&gt;잘하고 싶다.&lt;/li&gt;
  &lt;li&gt;누군가에게 도움이 되고 싶다.&lt;/li&gt;
  &lt;li&gt;나의 코드를 실제 서비스에 배포하고 싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등의 계속해서 &lt;strong&gt;긍정적인 욕심&lt;/strong&gt;을 가지게 만든다. &lt;br /&gt; 
즉, 개발은 나에게 &lt;strong&gt;욕구를 충족&lt;/strong&gt;시켜주는 좋은 대상이다.&lt;br /&gt; 
개발을 통해 실력을 쌓게 되면 자신감과 성취를 얻을 수 있고 타인에게 존경을 받게 되는 욕구(“존경 욕구”)를 충족시킬 수 있다.
또한 공부하면서 무언가를 해결할 능력이 생기면 스스로 계속 발전하고 싶은 욕구(“성장 욕구”)를 충족시키고, 이런 욕구는 충족될수록 더욱더 커지게 되어 계속해서 몰입할 수 있는 힘을 준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결국 이런 긍정적인 욕심들이 계속해서 무언가를 해야겠다는 &lt;strong&gt;의욕&lt;/strong&gt;이 생기게 만들고, 이런 의욕이 나에게 있어서는 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;삶의 활력&lt;/strong&gt;&lt;/span&gt;이 되는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발 -&amp;gt; 긍정적인 욕심 / 욕구 충족 -&amp;gt; 개발(몰입) -&amp;gt; 욕구 성취에 대한 의욕 -&amp;gt; 삶의 활력 -&amp;gt; 개발&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;-개발자로서-발전하는-내가-되기-위해서&quot;&gt;# 개발자로서 발전하는 내가 되기 위해서&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;내가 어떤 사람인지 파악한다.
    &lt;ul&gt;
      &lt;li&gt;바쁜 삶을 통해 활력을 얻는 사람&lt;/li&gt;
      &lt;li&gt;혼자보다 같이 할 때 의욕이 생기는 사람&lt;/li&gt;
      &lt;li&gt;개념 정리를 처음부터 차근히 하고 싶은 사람&lt;/li&gt;
      &lt;li&gt;다른 사람에게 긍정적인 영향을 주는 사람&lt;/li&gt;
      &lt;li&gt;집순이가 아닌 사람 (집은 무조건적인 휴식을 취하는 공간..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;내가 개발자로서 어떤 사람이 되고 싶은지 생각한다.
    &lt;ul&gt;
      &lt;li&gt;추상적인 목표
        &lt;ul&gt;
          &lt;li&gt;다른 사람에게 도움을 줄 수 있는 사람 —&amp;gt; 스터디 및 블로그&lt;/li&gt;
          &lt;li&gt;모르는 것에 대해 철저히 알고 넘어가는 사람 —&amp;gt; 블로그&lt;/li&gt;
          &lt;li&gt;알게 된 것을 잘 기록하는 사람 —&amp;gt; 블로그&lt;/li&gt;
          &lt;li&gt;내가 알고 있는 것을 말로 잘 설명할 수 있는 사람 —&amp;gt; 세미나(?)&lt;/li&gt;
          &lt;li&gt;같이 공부하고 싶고 프로젝트 하고 싶은 실력 있는 사람 —&amp;gt; 꾸준한 개발 공부와 프로젝트 진행&lt;/li&gt;
          &lt;li&gt;공부하는 척하지 않는 사람 / 거짓 없이 실력 있는 사람 / 부풀리지 않는 사람&lt;br /&gt;
—&amp;gt; 내가 아는 것과 모르는 것을 명확히 구분하기!, 이력서 및 포트폴리오 업데이트(확실하게 아는 부분을 작성)&lt;/li&gt;
          &lt;li&gt;빠르게 배우는 사람 —&amp;gt; 방법을… 찾아야겠다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;구체적인 목표 (2019 상반기)
        &lt;ul&gt;
          &lt;li&gt;개발 블로그에 유익한 개발 관련 내용을 꾸준히 업로드하여 하루 접속자 수 3000명 달성하기!
            &lt;blockquote&gt;
              &lt;ul&gt;
                &lt;li&gt;내가 작성한 글은 반복해서 읽고 터득하기!&lt;/li&gt;
                &lt;li&gt;개발 공부를 하면서 모르는 키워드 및 주제는 Trello에 적어 놓고 블로그에 구체화하기!&lt;/li&gt;
                &lt;li&gt;일주일에 최소 2개 포스팅하기!&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
          &lt;li&gt;Spring 개인 프로젝트 진행하기
            &lt;blockquote&gt;
              &lt;ul&gt;
                &lt;li&gt;[Step1] Spring을 통한 웹서비스 구축 익숙해지기 (우선 실습!)&lt;/li&gt;
                &lt;li&gt;[Step2] SpringMVC 구조 이해하기 + 파고들기&lt;/li&gt;
                &lt;li&gt;[Step3] SpringBoot 구조 이해하기 + 파고들기&lt;/li&gt;
                &lt;li&gt;[Step4] 익숙해진 것을 바탕으로 웹서비스에 필요한 여러 가지 추가로 붙이기&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
          &lt;li&gt;가장 취약한 부분인 알고리즘 공부하기
            &lt;blockquote&gt;
              &lt;ul&gt;
                &lt;li&gt;매일 꾸준히 진행해서 재미 들이기&lt;/li&gt;
                &lt;li&gt;일주일에 최소 3개 풀고 피드백 받기&lt;/li&gt;
                &lt;li&gt;백준 / 프로그래머스 / 코딜리티 / 기업 알고리즘 이용하기&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
          &lt;li&gt;취업…!
            &lt;blockquote&gt;
              &lt;ul&gt;
                &lt;li&gt;취업하기 전 내가 생각하는 가치 생각하기!&lt;/li&gt;
                &lt;li&gt;개발 문화 / 나의 성장 가능성 / 복지 / 연봉 / 기술스택 등&lt;/li&gt;
                &lt;li&gt;기본 CS 및 면접 질문 대비하기!&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;나에게 맞는 환경을 조성하고 스스로의 규칙을 정한다.
    &lt;ul&gt;
      &lt;li&gt;1번 2번 과정을 통해 나에게 적절한 환경이 어떤 것인지 생각한다.&lt;/li&gt;
      &lt;li&gt;강제성을 통한 동기 부여
        &lt;ul&gt;
          &lt;li&gt;우선 &lt;strong&gt;밖으로&lt;/strong&gt; 나간다.&lt;/li&gt;
          &lt;li&gt;수시로 서로를 점검해주는 &lt;strong&gt;친구를&lt;/strong&gt; 만든다.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;개발 스터디&lt;/strong&gt;를 통해 피드백을 받는다.&lt;/li&gt;
          &lt;li&gt;일과를 정해놓고 &lt;strong&gt;계획에 맞게&lt;/strong&gt; 바쁜 삶을 유지한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;스스로의 성장 욕구를 통한 지속적인 동기 부여
        &lt;ul&gt;
          &lt;li&gt;구체적인 목표를 설정한다. (분기별 목표)&lt;/li&gt;
          &lt;li&gt;구체적인 계획을 세운다. (일 -&amp;gt; 주 -&amp;gt; 월)&lt;/li&gt;
          &lt;li&gt;꾸준히 할 수 있는 공부 및 프로젝트를 &lt;strong&gt;구체화&lt;/strong&gt;한다.&lt;/li&gt;
          &lt;li&gt;하나만 하면 지치기 때문에 여러 가지 다양한 공부를 &lt;strong&gt;병행&lt;/strong&gt;한다.&lt;/li&gt;
          &lt;li&gt;주에 한 번씩 수행하지 못한 부분에 대해 회고하고 &lt;strong&gt;문제점을 파악&lt;/strong&gt;한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;마무리-글&quot;&gt;마무리 글&lt;/h1&gt;
&lt;p&gt;마무리할 때가 되니 글을 너무 번잡하고 재미없게 쓴 것 같은 아쉬움이 남는다.&lt;br /&gt; 
앞으로 계속해서 다른 사람들의 글을 더 많이 읽고 이런 회고록도 분기마다 쓰다 보면 나도 언젠가는 읽기 쉽고 재미있는 글을 쓰게 될 날이 오지 않을까 싶다.&lt;br /&gt; 
다음에 작성할 회고글은 이것보다 더 부드럽게, 재미있게 읽을 수 있는 글이 되길 바란다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그저 바쁘기만 했던 2017년과 달리 사실 2018년에는 시간적으로는 여유가 있었던 해였다.&lt;br /&gt; 
사람이 여유가 많아지니까 생각할 시간도 많아졌다. 하지만 규칙적으로 하는 일 없이 생활하는 나에게 그런 대부분의 생각의 방향은 쓸모없는 걱정이 되었고 이런 걱정은 나를 더 불안하게만 만들었다.&lt;br /&gt;
그래서 지금에 와서 한 해를 되돌아보면 아무것도 하지 않고 아깝게 보낸 시간이 너무 많았던 것 같다. 2018년 회고를 하면서 가장 반성하는 부분이다.&lt;br /&gt;
다가오는 2019년에는 조금 더 정확한 목적과 목표를 생각하고, 실현가능한 탄탄하고 구체적인 계획을 세워, 늘 바쁘게 무언가를 하고 있는 사람이 되고 싶다. 쓸데없는 걱정 좀 그만하도록 스스로에게 끊임없이 강제성을 부여하려고 한다!!&lt;br /&gt;
&lt;img src=&quot;/images/etc/2018-retrospective-5.png&quot; alt=&quot;&quot; width=&quot;370&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 막 졸업을 앞둔 취준생이 되고 나니 스스로 알아서 목표를 세워야 하는 막막함과 목표를 향하는 방법이 맞는지 모르겠는 막연함이 있는 것 같다. 하지만 막막하고 막연하다고 아무것도 하지 않는 것은 정말 바보같은 짓이다. &lt;strong&gt;“시도”가 많아야 기회가 생기고 기회를 잡아야 운이 따라온다.&lt;/strong&gt; &lt;br /&gt;
그래서 2019년에는 집요함을 가지고 계속해서 여러 시도를 해보는 사람이 되어야겠다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;strong&gt;기회를 잡은 뒤에 오는 운이 좋을 확률은 바로 나의 “실력”에 따라 달라진다.&lt;/strong&gt; 결국 본인의 실력을 키워야 운도 좋아진다는 것이다. 나중에 다시 회고록을 작성할 때 매 순간 열심히 했다는 생각이 들도록, 헛된 시간을 보내지 않도록, 후회하지 않도록, 내가 세운 목표에 계속해서 꾸준히 한 걸음씩 다가가는 사람이 될 것이다. &lt;br /&gt;
그래서 2019년에는 진짜 실력 있는 사람이 되어야겠다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;한 걸음 한 걸음 걷는 자가 성공한다.&lt;/span&gt; (Step by step goes a long way)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/etc/2018-retrospective-3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;220&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;개발 외적으로는&lt;br /&gt;
2019년에는 지금보다 더 &lt;strong&gt;긍정적인 사람&lt;/strong&gt;이 되고 싶다.&lt;br /&gt; 
모든 일을 긍정적으로 바라보고 이해할 수 있는 사람이 되도록,&lt;br /&gt; 
어떤 일에 대해 왜 하는지 늘 ‘왜’를 먼저 생각하는 사람이 되도록,&lt;br /&gt; 
새로운 사람들과 같이 어울리고 즐길 수 있는 사람이 되도록,&lt;br /&gt; 
글도 발표도 공부도 재미있게 할 수 있는 사람이 되도록 노력하자.&lt;br /&gt;
말만 주저리 주저리 하지 말고 실제로 행동으로 옮기는 사람이 되어야지.!
&lt;img src=&quot;/images/etc/2018-retrospective-1.jpeg&quot; alt=&quot;&quot; width=&quot;350&quot; height=&quot;200&quot; /&gt;
&lt;!-- ![](/images/etc/2018-retrospective-6.jpeg){: width=&quot;300&quot; height=&quot;180&quot;} --&gt;
&lt;!-- ![](/images/etc/2018-retrospective-4.jpg){: width=&quot;350&quot; height=&quot;200&quot;} --&gt;&lt;/p&gt;

&lt;p&gt;아직 글을 쓰는 초보자로서 처음 써보는 회고록이라 횡설수설한 느낌이 많이 들고.. 개발과 동떨어진 얘기도 많이 들어간 것 같지만.. 1년 동안 내가 했던 활동들을 돌아보면서 그 시기에 들었던 생각을 회상해보고 활동/경험을 통해 느꼈던 교훈을 정리해볼 수 있어서 좋았다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 2018년 회고록을 계기로 앞으로 계속해서 회고록을 작성해보려고 한다. &lt;br /&gt;
다음에는 좀 더 &lt;strong&gt;개발자다운 회고록&lt;/strong&gt;을 작성하고 싶다. (개발 내용을 지금보다 더 많이 넣을 수 있도록 열심히 해야겠다.!) 2019년에는 좀 더 개발에 집중하는 시간이 많아지도록 노력할 것이고, 2018년보다 더 열정을 가지고 의미 있는 시간들을 보낼 것이다. 모든 일을 재미있게 하자!&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 &lt;mark&gt;내년엔 올해보다 더 나은 내가 되길!!!&lt;/mark&gt;&lt;br /&gt;
그래서 &lt;mark&gt;더 행복한 한 해가 되길!!!&lt;/mark&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/31/2018-retrospective.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/31/2018-retrospective.html</guid>
        
        <category>retrospective</category>
        
        
      </item>
    
      <item>
        <title>[MySQL] MySQL Workbench DB Backup</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;자신이 설계한 Model 백업하기&lt;/li&gt;
    &lt;li&gt;Table 안의 Data 백업하기&lt;/li&gt;
    &lt;li&gt;DB 전체 백업하기
      &lt;ul&gt;
        &lt;li&gt;DB 내의 모든 Table과 Table 안의 Data 백업하기&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;들어가기 전
    &lt;ul&gt;
      &lt;li&gt;해당 POST에서 설치된 버전 정보
        &lt;ul&gt;
          &lt;li&gt;MySQL Workbench ver: 6.3.10&lt;/li&gt;
          &lt;li&gt;MySQL ver: 5.7&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전제 조건: MySQL Workbench 실행 후 &lt;strong&gt;연결된 상태&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;기본 MySQL Workbench 사용법은 아래의 POST를 참고하자!&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/09/mysql-workbench-guide.html&quot;&gt;MySQL Workbench 사용법&lt;/a&gt; 참고&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;자신이-설계한-model-백업하기&quot;&gt;자신이 설계한 Model 백업하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL Workbench에서 ERD(Entity Relationship Diagram)를 통해 DB 스키마를 모델링할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;모델링한 ERD를 통해 자동으로 쿼리를 추출하고 이를 통해서 실제 물리적인 DB 스키마를 생성할 수 있다.&lt;/li&gt;
      &lt;li&gt;설계한 Model은 Workbench 전용 모델링 파일(.mwb)로 저장해두고 재사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-file--new-model-macos-cmd--n&quot;&gt;1. File &amp;gt; New Model (MacOS: Cmd + N)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;mydb 더블 클릭 - 원하는 Schema Name(‘testdb’)을 입력한다.&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/mac-guide6-0.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-model-설계하기&quot;&gt;2. Model 설계하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;두 가지 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[방법1] Add Diagram 이용
    &lt;ul&gt;
      &lt;li&gt;Add Diagram 클릭 &amp;gt; Place a New table 클릭&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/mac-guide7-1-0.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/mysql-workbench-guide/mac-guide7-2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Ex)
        &lt;ul&gt;
          &lt;li&gt;table name을 “user”로 설정&lt;/li&gt;
          &lt;li&gt;AI: auto incremental, 자동으로 1씩 증가하도록 하는 것&lt;/li&gt;
          &lt;li&gt;id, 이름, 이메일을 등록한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[방법2] Add Table 이용
    &lt;ul&gt;
      &lt;li&gt;Add Table 클릭&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/mac-guide8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Ex)
        &lt;ul&gt;
          &lt;li&gt;table name을 “product”(Ex. 쇼핑몰의 상품)로 설정&lt;/li&gt;
          &lt;li&gt;id, 상품명, 카테고리(분류), 가격, 제조사, 잔고, 설명을 등록한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-자신이-설계한-model-저장하기&quot;&gt;3. 자신이 설계한 Model 저장하기&lt;/h3&gt;
&lt;!-- * ![](/images/mysql-workbench-guide/mac-guide9-2.png) --&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL Model Tab &amp;gt; File &amp;gt; Save Model As &amp;gt; 원하는 Name(해당  포스트에서는 ’testdb’)을 입력한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/mac-guide9.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Local instance Tab &amp;gt; Open Model
    &lt;ul&gt;
      &lt;li&gt;저장된 모델링 파일을 통해 자신이 설계한 내용(.mwb)을 불러올 수 있다.&lt;/li&gt;
      &lt;li&gt;.mwb 파일: MySQL Workbench Database Structure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-자신의-설계한-model을-실제-db에-반영하기&quot;&gt;4. 자신의 설계한 Model을 실제 DB에 반영하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL Model Tab &amp;gt; Database &amp;gt; Forward Engineer…
    &lt;ul&gt;
      &lt;li&gt;Forward Engineer: 자신의 설계한 Model을 실제 DB에 반영하는 것&lt;/li&gt;
      &lt;li&gt;Reverse Engineer: DB의 내용을 가지고 Model을 만드는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/mac-guide10-1.png&quot; alt=&quot;&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;Stored Connection: 자신이 설정한 Connection Name(‘mysql-local’) 선택&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;table-data-백업하기&quot;&gt;Table Data 백업하기&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;DB &amp;lt;— &lt;strong&gt;Table Data&lt;/strong&gt; —&amp;gt; file 형태(json, csv 등)&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;table-data-export-wizard&quot;&gt;Table Data Export Wizard&lt;/h3&gt;
&lt;p&gt;DB의 Table Data를 file 형태(json, csv 등)로 저장한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;백업하기 원하는 Table이름 우클릭 &amp;gt; Export
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup1.png&quot; alt=&quot;&quot; /&gt; 
&lt;img src=&quot;/images/mysql-workbench-guide/db-backup2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;저장할 file(json, csv 등)의 형식과 이름, 위치를 지정한다.
    &lt;ul&gt;
      &lt;li&gt;Ex) ‘,’로 구분하는 csv file&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/mysql-workbench-guide/db-backup4.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/mysql-workbench-guide/db-backup5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;저장된 file의 내용 확인한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table-data-import-wizard&quot;&gt;Table Data Import Wizard&lt;/h3&gt;
&lt;p&gt;file 형태(json, csv 등)의 Table Data를 DB에 반영한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sample data를 입력하고 DB에 반영할 수 있다.&lt;/li&gt;
  &lt;li&gt;기존의 data에 data를 추가한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data를 넣을 Table이름 우클릭 &amp;gt; Import
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;file 형태(json, csv 등)의 Table Data 선택
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup9.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data를 넣을 Table 선택한다.
    &lt;ul&gt;
      &lt;li&gt;기존에 존재하는 table 또는 새로운 table 생성&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup10.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/mysql-workbench-guide/db-backup11.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/mysql-workbench-guide/db-backup12.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/mysql-workbench-guide/db-backup13.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;file의 내용이 DB에 반영됐는지 확인한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup14.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;db-전체-백업하기&quot;&gt;DB 전체 백업하기&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;DB &amp;lt;— &lt;strong&gt;DB Data&lt;/strong&gt; —&amp;gt; SQL 문&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DB 내의 모든 Table과 Table 안의 Data를 백업하고 백업한 내용을 다시 DB에 가져올 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-export&quot;&gt;Data Export&lt;/h3&gt;
&lt;p&gt;현재 DB의 모든 정보를 sql 문으로 저장할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;왼쪽 Navigator 메뉴 - MANAGEMENT &amp;gt; Data Export 클릭&lt;/li&gt;
  &lt;li&gt;또는 Local instance Tab &amp;gt; Server &amp;gt; Data Export 클릭&lt;/li&gt;
  &lt;li&gt;백업할 DB와 Table을 선택 / 옵션 설정 / 백업 파일(.sql)의 이름 및 위치 지정 &amp;gt; Start Export 클릭
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup15.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;옵션 설정
        &lt;ul&gt;
          &lt;li&gt;Objects to Export
            &lt;ul&gt;
              &lt;li&gt;저장 프로시저, 함수 백업&lt;/li&gt;
              &lt;li&gt;이벤트 백업&lt;/li&gt;
              &lt;li&gt;트리거 백업&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Export Options
            &lt;ul&gt;
              &lt;li&gt;테이블 별로 백업 파일 생성(Export to Dump Project Folder)&lt;/li&gt;
              &lt;li&gt;데이터베이스 별로 백업 파일 생성(Export to Self-Contained File)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(mysqld dump version mismatch &amp;gt; Continue Anyway)
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup16.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;백업이 완료됐는지 확인한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup17.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-import&quot;&gt;Data Import&lt;/h3&gt;
&lt;p&gt;DB와 관련된 정보(.sql)를 가져와 DB에 적용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(선택) Test를 위해 현재 DB를 삭제한다.
    &lt;ul&gt;
      &lt;li&gt;현재 DB 우클릭 &amp;gt; Drop Schema &amp;gt; Drop Now&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;왼쪽 Navigator 메뉴 - MANAGEMENT &amp;gt; Data Import 클릭&lt;/li&gt;
  &lt;li&gt;또는 Local instance Tab &amp;gt; Server &amp;gt; Data Import 클릭&lt;/li&gt;
  &lt;li&gt;옵션 설정 / 복원할 sql file을 선택 / 복원할 Schema 선택 &amp;gt; Start Import
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup18.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;옵션 설정
        &lt;ul&gt;
          &lt;li&gt;기존에 존재하면 해당 Schema 선택&lt;/li&gt;
          &lt;li&gt;해당 sql file이 테이블 별 백업 파일인지 데이터베이스 별 백업 파일인지에 따라 Import Oprions을 선택&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;복원할 Schema 선택
        &lt;ul&gt;
          &lt;li&gt;위에서 현재 DB를 삭제했으면 New… 클릭 &amp;gt; 원하는 Schema Name(‘testdb’) 입력&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup19-1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup19-2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;복원이 완료됐는지 확인한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup20.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 DB에 반영됐는지 조회한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-workbench-guide/db-backup21-0.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;ol&gt;
      &lt;li&gt;MySQL Model은 닫고 Local instance로 돌아온다.&lt;/li&gt;
      &lt;li&gt;refresh를 한다.&lt;/li&gt;
      &lt;li&gt;해당 Schema를 기본으로 설정한다.
        &lt;ul&gt;
          &lt;li&gt;eStore 우클릭 - Set as Default Schema&lt;/li&gt;
          &lt;li&gt;해당 Schema가 진하게 표시된 것을 확인할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;‘select * from table이름’으로 table에 들어간 columns를 확인한다.
        &lt;ul&gt;
          &lt;li&gt;Ex) select * from user; 입력 후 columns들을 확인한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;CLI를 이용한 MySQL 설치, 실행 등을 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/23/mysql-tips.html&quot;&gt;MySQL 깨알 팁 모음&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;MySQL Workbench 사용법을 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/09/mysql-workbench-guide.html&quot;&gt;MySQL Workbench 사용법&lt;/a&gt; 을 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;MySQL 설치 방법을 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/09/mysql-download.html&quot;&gt;MySQL 설치&lt;/a&gt; 를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=islove8587&amp;amp;logNo=220954758979&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=islove8587&amp;amp;logNo=220954758979&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://dololak.tistory.com/458?category=636506&quot;&gt;https://dololak.tistory.com/458?category=636506&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=islove8587&amp;amp;logNo=220954758979&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=islove8587&amp;amp;logNo=220954758979&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/28/mysql-workbench-guide-db-backup.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/28/mysql-workbench-guide-db-backup.html</guid>
        
        <category>mysql</category>
        
        <category>사용법</category>
        
        <category>usage</category>
        
        <category>backup</category>
        
        
      </item>
    
      <item>
        <title>[JDBC] JDBC, JPA/Hibernate, Mybatis의 차이</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;영속성(Persistence)의 개념을 이해한다.&lt;/li&gt;
    &lt;li&gt;SQL Mapper와 ORM의 차이에 대해 이해한다.&lt;/li&gt;
    &lt;li&gt;JDBC(Data Transfer Object)란 무엇인지 이해한다.&lt;/li&gt;
    &lt;li&gt;JPA/Hibernate란 무엇인지 이해한다.&lt;/li&gt;
    &lt;li&gt;Mybatis란 무엇인지 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;영속성persistence&quot;&gt;영속성(Persistence)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 생성한 프로그램이 종료되더라도 사라지지 않는 데이터의 특성을 말한다.&lt;/li&gt;
  &lt;li&gt;영속성을 갖지 않는 데이터는 단지 메모리에서만 존재하기 때문에 프로그램을 종료하면 모두 잃어버리게 된다. 때문에 파일 시스템, 관계형 테이터베이스 혹은 객체 데이터베이스 등을 활용하여 데이터를 영구하게 저장하여 영속성 부여한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persistence Layer&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로그램의 아키텍처에서, 데이터에 영속성을 부여해주는 계층을 말한다.&lt;/li&gt;
      &lt;li&gt;JDBC를 이용하여 직접 구현할 수 있지만 Persistence framework를 이용한 개발이 많이 이루어진다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/spring-framework/spring-jdbc-layer.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;[https://mingrammer.com/translation-10-common-software-architectural-patterns-in-a-nutshell/&quot;&gt;계층 참고&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;프레젠테이션 계층 (Presentation layer) - UI 계층 (UI layer) 이라고도 함&lt;/li&gt;
          &lt;li&gt;애플리케이션 계층 (Application layer) - 서비스 계층 (Service layer) 이라고도 함&lt;/li&gt;
          &lt;li&gt;비즈니스 논리 계층 (Business logic layer) - 도메인 계층 (Domain layer) 이라고도 함&lt;/li&gt;
          &lt;li&gt;데이터 접근 계층 (Data access layer) - 영속 계층 (Persistence layer) 이라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persistence Framework&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동을 보장한다.&lt;/li&gt;
      &lt;li&gt;Persistence Framework는 SQL Mapper와 ORM으로 나눌 수 있다.
        &lt;ul&gt;
          &lt;li&gt;아래 참고&lt;/li&gt;
          &lt;li&gt;Ex) JPA, Hibernate, Mybatis 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sql-mapper와-orm&quot;&gt;SQL Mapper와 ORM&lt;/h2&gt;
&lt;p&gt;Persistence Framework는 SQL Mapper와 ORM으로 나눌 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ORM은 데이터베이스 객체를 자바 객체로 매핑함으로써 객체 간의 관계를 바탕으로 SQL을 자동으로 생성해주지만 SQL Mapper는 SQL을 명시해줘야 한다.&lt;/li&gt;
  &lt;li&gt;ORM은 관계형 데이터베이스의 ‘관계’를 Object에 반영하자는 것이 목적이라면, SQL Mapper는 단순히 필드를 매핑시키는 것이 목적이라는 점에서 지향점의 차이가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-sql-mapper&quot;&gt;# SQL Mapper&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SQL &amp;lt;—매핑—&amp;gt; Object 필드&lt;/li&gt;
  &lt;li&gt;SQL Mapper는 SQL 문장으로 직접 데이터베이스 데이터를 다룬다.
    &lt;ul&gt;
      &lt;li&gt;즉, SQL Mapper는 SQL을 명시해줘야 한다.&lt;/li&gt;
      &lt;li&gt;Ex) &lt;strong&gt;Mybatis&lt;/strong&gt; 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-ormobject-relational-mapping-객체-관계-매핑&quot;&gt;# ORM(Object-Relational Mapping), 객체-관계 매핑&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 데이터 &amp;lt;—매핑—&amp;gt; Object 필드
    &lt;ul&gt;
      &lt;li&gt;객체를 통해 간접적으로 데이터베이스 데이터를 다룬다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다.
    &lt;ul&gt;
      &lt;li&gt;ORM을 이용하면 SQL Query가 아닌 직관적인 코드(메서드)로 데이터를 조작할 수 있다.&lt;/li&gt;
      &lt;li&gt;객체 간의 관계를 바탕으로 SQL을 자동으로 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Persistant API라고도 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;Ex) &lt;strong&gt;JPA, Hibernate&lt;/strong&gt; 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview/blob/master/contents/db.md#orm%EC%9D%B4%EB%9E%80&quot;&gt;ORM의 장단점&lt;/a&gt; 참고&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-jdbcjava-database-connectivity&quot;&gt;1. JDBC(Java Database Connectivity)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/spring-framework/spring-jdbc-architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;JDBC는 DB에 접근할 수 있도록 Java에서 제공하는 API이다.
    &lt;ul&gt;
      &lt;li&gt;모든 Java의 Data Access 기술의 근간&lt;/li&gt;
      &lt;li&gt;즉, 모든 Persistence Framework는 내부적으로 JDBC API를 이용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/15/setting-for-db-programming.html&quot;&gt;Plain JDBC vs Spring JDBC&lt;/a&gt; 참고&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-jpajava-persistent-api&quot;&gt;2. &lt;a href=&quot;https://terasolunaorg.github.io/guideline/5.1.0.RELEASE/en/ArchitectureInDetail/DataAccessJpa.html&quot;&gt;JPA(Java Persistent API)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/spring-framework/spring-jpa-architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;자바 ORM 기술에 대한 API 표준 명세로, Java에서 제공하는 API이다.
    &lt;ul&gt;
      &lt;li&gt;자바 플랫폼 SE와 자바 플랫폼 EE를 사용하는 응용프로그램에서 관계형 데이터베이스의 관리를 표현하는 자바 API이다.&lt;/li&gt;
      &lt;li&gt;즉, JPA는 ORM을 사용하기 위한 표준 인터페이스를 모아둔 것이다.&lt;/li&gt;
      &lt;li&gt;기존에 EJB에서 제공되던 엔터티 빈(Entity Bean)을 대체하는 기술이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JPA 구성 요소 (세 가지)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.persistance&lt;/code&gt; 패키지로 정의된 API 그 자체&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://happygrammer.tistory.com/149&quot;&gt;JPQL(Java Persistence Query Language)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;객체/관계 메타데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자가 원하는 JPA 구현체를 선택해서 사용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;JPA의 대표적인 구현체로는 Hibernate, EclipseLink, DataNucleus, OpenJPA, TopLink Essentials 등이 있다.&lt;/li&gt;
      &lt;li&gt;이 구현체들을 ORM Framework라고 부른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- JPQL 이란?
즉시, 지연 로딩 전략
영속성 컨텍스트에 대한 이해
자동 변경 감지
언제 영속성 컨텍스트가 flush 되는가?
연관관계 매핑중에 mappedBy, inverse 이해
OSIV 란?
N+1 질의 문제 (query)
쓰기 지연 --&gt;

&lt;h3 id=&quot;hibernate&quot;&gt;&lt;a href=&quot;https://howtodoinjava.com/hibernate-tutorials/&quot;&gt;Hibernate&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/spring-framework/spring-hibernate-architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Hibernate는 JPA의 구현체 중 하나이다.&lt;/li&gt;
  &lt;li&gt;Hibernate가 SQL을 직접 사용하지 않는다고 해서 JDBC API를 사용하지 않는다는 것은 아니다.
    &lt;ul&gt;
      &lt;li&gt;Hibernate가 지원하는 메서드 내부에서는 JDBC API가 동작하고 있으며, 단지 개발자가 직접 SQL을 직접 작성하지 않을 뿐이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HQL(Hibernate Query Language)이라 불리는 매우 강력한 쿼리 언어를 포함하고 있다.
    &lt;ul&gt;
      &lt;li&gt;HQL은 SQL과 매우 비슷하며 추가적인 컨벤션을 정의할 수도 있다.&lt;/li&gt;
      &lt;li&gt;HQL은 완전히 객체 지향적이며 이로써 상속, 다형성, 관계등의 객체지향의 강점을 누릴 수 있다.&lt;/li&gt;
      &lt;li&gt;HQL쿼리는 자바 클래스와 프로퍼티의 이름을 제외하고는 대소문자를 구분한다.&lt;/li&gt;
      &lt;li&gt;HQL은 쿼리 결과로 객체를 반환하며 프로그래머에 의해 생성되고 직접적으로 접근할 수 있다.&lt;/li&gt;
      &lt;li&gt;HQL은 SQL에서는 지원하지 않는 페이지네이션이나 동적 프로파일링과 같은 향상된 기능을 제공한다.&lt;/li&gt;
      &lt;li&gt;HQL은 여러 테이블을 작업할 때 명시적인 join을 요구하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;객체지향적으로 데이터를 관리할 수 있기 때문에 비즈니스 로직에 집중 할 수 있으며, 객체지향 개발이 가능하다.&lt;/li&gt;
      &lt;li&gt;테이블 생성, 변경, 관리가 쉽다. (JPA를 잘 이해하고 있는 경우)&lt;/li&gt;
      &lt;li&gt;로직을 쿼리에 집중하기 보다는 객체자체에 집중 할 수 있다.&lt;/li&gt;
      &lt;li&gt;빠른 개발이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;어렵다. (많은 내용이 감싸져 있기 때문에 알아야 할 것이 많다.)&lt;/li&gt;
      &lt;li&gt;잘 이해하고 사용하지 않으면 데이터 손실이 있을 수 있다. (persistence context)&lt;/li&gt;
      &lt;li&gt;성능상 문제가 있을 수 있다. (이 문제 또한 잘 이해해야 해결이 가능하다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-mybatis&quot;&gt;3. &lt;a href=&quot;https://terasolunaorg.github.io/guideline/5.0.1.RELEASE/en/ArchitectureInDetail/DataAccessMyBatis3.html&quot;&gt;Mybatis&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/spring-framework/spring-mybatis-architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 SQL Mapper이다.&lt;/li&gt;
  &lt;li&gt;JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다.
    &lt;ul&gt;
      &lt;li&gt;기존에 JDBC를 사용할 때는 DB와 관련된 여러 복잡한 설정(Connection)들을 다루어야 했지만 SQL Mapper는 자바 객체를 실제 SQL문에 연결함으로써, 빠른 개발과 편리한 테스트 환경을 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 record에 원시 타입과 Map 인터페이스 그리고 자바 POJO를 설정해서 매핑하기 위해 xml과 Annotation을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;MyBatis는 원래 Apache Foundation의 iBatis였으나, 생산성, 개발 프로세스, 커뮤니티 등의 이유로 Google Code로 이전되면서 이름이 바뀌었다.
    &lt;ul&gt;
      &lt;li&gt;iBatis와 바뀐 차이점은 아래와 같다.
        &lt;ul&gt;
          &lt;li&gt;JDK 1.5, Annotation&lt;/li&gt;
          &lt;li&gt;Dynatic SQL, XML Element&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;SQL에 대한 모든 컨트롤을 하고자 할때 매우 적합하다.&lt;/li&gt;
      &lt;li&gt;SQL쿼리들이 매우 잘 최적화되어 있을 때에 유용하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;애플리케이션과 데이터베이스 간의 설계에 대한 모든 조작을 하고자 할 때는 적합하지 않다.
        &lt;ul&gt;
          &lt;li&gt;애플리케이션과 데이터베이스 간에 서로 잘 구조화되도록 많은 설정이 바뀌어야 하기 때문이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16439249/when-to-use-servlet-or-controller&quot;&gt;https://stackoverflow.com/questions/16439249/when-to-use-servlet-or-controller&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://okky.kr/article/286812&quot;&gt;https://okky.kr/article/286812&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/benjaminbkim9/what-is-persistenceinjava&quot;&gt;https://www.slideshare.net/benjaminbkim9/what-is-persistenceinjava&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://blog.woniper.net/255&quot;&gt;http://blog.woniper.net/255&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://humbroll.wordpress.com/2009/11/12/1-ibatis-hibernate-%EA%B7%B8%EB%A6%AC%EA%B3%A0-jpa-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80/&quot;&gt;https://humbroll.wordpress.com/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://mingrammer.com/translation-10-common-software-architectural-patterns-in-a-nutshell/&quot;&gt;https://mingrammer.com/translation-10-common-software-architectural-patterns-in-a-nutshell/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://smartweb.sourceforge.net/persistence.html&quot;&gt;http://smartweb.sourceforge.net/persistence.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://tinkerbellbass.tistory.com/24&quot;&gt;http://tinkerbellbass.tistory.com/24&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://terasolunaorg.github.io/guideline/5.1.0.RELEASE/en/ArchitectureInDetail/DataAccessJpa.html&quot;&gt;https://terasolunaorg.github.io/guideline/5.1.0.RELEASE/en/ArchitectureInDetail/DataAccessJpa.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@springboot/105&quot;&gt;유사 주제 참고&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html</guid>
        
        <category>jdbc</category>
        
        <category>jpa</category>
        
        <category>mybatis</category>
        
        <category>orm</category>
        
        <category>hibernate</category>
        
        
      </item>
    
      <item>
        <title>[DAO] DAO, DTO, Entity Class의 차이</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;DAO(Data Access Object)란 무엇인지 이해한다.&lt;/li&gt;
    &lt;li&gt;DTO(Data Transfer Object)란 무엇인지 이해한다.&lt;/li&gt;
    &lt;li&gt;Entity Class란 무엇인지 이해한다.&lt;/li&gt;
    &lt;li&gt;package 구조에 따른 흐름, 해당 package의 역할 및 기능을 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;daodata-access-object-란&quot;&gt;DAO(Data Access Object) 란?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;repository package&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;실제로 DB에 접근하는 객체이다.
    &lt;ul&gt;
      &lt;li&gt;Persistence Layer(DB에 data를 CRUD하는 계층)이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service와 DB를 연결하는 고리의 역할을 한다.&lt;/li&gt;
  &lt;li&gt;SQL를 사용(개발자가 직접 코딩)하여 DB에 접근한 후 적절한 CRUD API를 제공한다.
    &lt;ul&gt;
      &lt;li&gt;JPA 대부분의 기본적인 CRUD method를 제공하고 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extends JpaRepository&amp;lt;User, Long&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시(JPA 사용 시)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuestionRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dtodata-transfer-object-란&quot;&gt;DTO(Data Transfer Object) 란?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;dto package&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;계층간 데이터 교환을 위한 객체(Java Beans)이다.
    &lt;ul&gt;
      &lt;li&gt;DB에서 데이터를 얻어 Service나 Controller 등으터 보낼 때 사용하는 객체를 말한다.&lt;/li&gt;
      &lt;li&gt;즉, DB의 데이터가 Presentation Logic Tier로 넘어오게 될 때는 DTO의 모습으로 바껴서 오고가는 것이다.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;로직을 갖고 있지 않는&lt;/em&gt; 순수한 데이터 객체이며, getter/setter 메서드만을 갖는다.&lt;/li&gt;
      &lt;li&gt;하지만 DB에서 꺼낸 값을 임의로 변경할 필요가 없기 때문에 DTO클래스에는 setter가 없다. (대신 생성자에서 값을 할당한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Request와 Response용 DTO는 View를 위한 클래스
    &lt;ul&gt;
      &lt;li&gt;자주 변경이 필요한 클래스&lt;/li&gt;
      &lt;li&gt;Presentation Model&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toEntity()&lt;/code&gt; 메서드를 통해서 DTO에서 필요한 부분을 이용하여 Entity로 만든다.&lt;/li&gt;
      &lt;li&gt;또한 Controller Layer에서 Response DTO 형태로 Client에 전달한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;참고&lt;/mark&gt; VO(Value Object) vs DTO
    &lt;ul&gt;
      &lt;li&gt;VO는 DTO와 동일한 개념이지만 read only 속성을 갖는다.&lt;/li&gt;
      &lt;li&gt;VO는 특정한 비즈니스 값을 담는 객체이고, DTO는 Layer간의 통신 용도로 오고가는 객체를 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JsonIgnore&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toEntityWithPasswordEncode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;entity-class란&quot;&gt;Entity Class란&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;domain package&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;실제 DB의 테이블과 매칭될 클래스
    &lt;ul&gt;
      &lt;li&gt;즉, 테이블과 링크될 클래스임을 나타낸다.&lt;/li&gt;
      &lt;li&gt;Entity 클래스 또는 가장 Core한 클래스라고 부른다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Column&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt; 등을 이용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최대한 외부에서 Entity 클래스의 getter method를 사용하지 않도록 해당 클래스 안에서 필요한 &lt;em&gt;로직 method을 구현한다.&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;단, &lt;em&gt;Domain Logic&lt;/em&gt;만 가지고 있어야 하고 Presentation Logic을 가지고 있어서는 안된다.&lt;/li&gt;
      &lt;li&gt;여기서 구현한 method는 주로 Service Layer에서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;참고&lt;/mark&gt; Entity 클래스와 DTO 클래스를 분리하는 이유
    &lt;ul&gt;
      &lt;li&gt;View Layer와 DB Layer의 역할을 철저하게 분리하기 위해서&lt;/li&gt;
      &lt;li&gt;테이블과 매핑되는 Entity 클래스가 변경되면 여러 클래스에 영향을 끼치게 되는 반면 View와 통신하는 DTO 클래스(Request / Response 클래스)는 자주 변경되므로 분리해야 한다.&lt;/li&gt;
      &lt;li&gt;Domain Model을 아무리 잘 설계했다고 해도 각 View 내에서 Domain Model의 getter만을 이용해서 원하는 정보를 표시하기가 어려운 경우가 종종 있다. 이런 경우 Domain Model 내에 Presentation을 위한 필드나 로직을 추가하게 되는데, 이러한 방식이 모델링의 순수성을 깨고 Domain Model 객체를 망가뜨리게 된다.&lt;/li&gt;
      &lt;li&gt;또한 Domain Model을 복잡하게 조합한 형태의 Presentation 요구사항들이 있기 때문에 Domain Model을 직접 사용하는 것은 어렵다.&lt;/li&gt;
      &lt;li&gt;즉 DTO는 Domain Model을 복사한 형태로, 다양한 Presentation Logic을 추가한 정도로 사용하며 Domain Model 객체는 Persistent만을 위해서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EqualsAndHashCode&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ToString&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7342736640368461848L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonIgnore&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// @Override &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// public boolean equals(Object o) { ... }&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// @Override&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// public int hashCode() { ... }&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// @Override&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// public String toString() { ... }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;전체-구조-package-기준&quot;&gt;전체 구조 (package 기준)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-framework/spring-package-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;controllerweb&quot;&gt;controller(web)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기능
    &lt;ul&gt;
      &lt;li&gt;해당 요청 url에 따라 적절한 view와 mapping 처리&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired Service&lt;/code&gt;를 통해 service의 method를 이용&lt;/li&gt;
      &lt;li&gt;적절한 ResponseEntity(DTO)를 body에 담아 Client에 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시 1)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;@Controller
        &lt;ul&gt;
          &lt;li&gt;API와 view를 동시에 사용하는 경우에 사용&lt;/li&gt;
          &lt;li&gt;대신 API 서비스로 사용하는 경우는 @ResponseBody를 사용하여 객체를 반환한다.&lt;/li&gt;
          &lt;li&gt;view(화면) return이 주목적&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시 2)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiUserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;SessionUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;@RestController
        &lt;ul&gt;
          &lt;li&gt;view가 필요없는 API만 지원하는 서비스에서 사용 (Spring 4.0.1부터 제공)&lt;/li&gt;
          &lt;li&gt;@RequestMapping 메서드가 기본적으로 @ResponseBody 의미를 가정한다.&lt;/li&gt;
          &lt;li&gt;data(json, xml 등) return이 주목적: &lt;strong&gt;return ResponseEntity&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;즉, @RestController = @Controller + @ResponseBody&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service&quot;&gt;service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기능
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired Repository&lt;/code&gt;를 통해 repository의 method를 이용&lt;/li&gt;
      &lt;li&gt;적절한 Business Logic을 처리한다.&lt;/li&gt;
      &lt;li&gt;DAO로 DB에 접근하고 DTO로 데이터를 전달받은 다음, 비지니스 로직을 처리해 적절한 데이터를 반환한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bCryptPasswordEncoder&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageSourceAccessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExistUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDuplicatedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email.duplicate.message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toEntityWithPasswordEncode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;repositorydao&quot;&gt;repository(dao)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기능
    &lt;ul&gt;
      &lt;li&gt;실제로 DB에 접근하는 객체이다.&lt;/li&gt;
      &lt;li&gt;Service와 DB를 연결하는 고리의 역할을 한다.&lt;/li&gt;
      &lt;li&gt;SQL를 사용(개발자가 직접 코딩)하여 DB에 접근한 후 적절한 CRUD API를 제공한다.
        &lt;ul&gt;
          &lt;li&gt;JPA 대부분의 기본적인 CRUD method를 제공하고 있다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extends JpaRepository&amp;lt;User, Long&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시 (JPA의 경우)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuestionRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dtodto-class와-domainentity-class&quot;&gt;dto(DTO Class)와 domain(Entity Class)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;구체적인 내용과 예시는 위의 설명 참고&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://toby.epril.com/?p=99&quot;&gt;http://toby.epril.com/?p=99&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://lazymankook.tistory.com/30&quot;&gt;http://lazymankook.tistory.com/30&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html</guid>
        
        <category>spring</category>
        
        <category>dao</category>
        
        <category>dto</category>
        
        <category>entity</category>
        
        <category>domain</category>
        
        
      </item>
    
      <item>
        <title>[IntelliJ] Export War in IntelliJ and Deploy to Tomcat</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;IntelliJ에서 War 파일을 추출할 수 있다.&lt;/li&gt;
    &lt;li&gt;추출한 War 파일로 Tomcat에 배포할 수 있다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;들어가기 전
    &lt;ul&gt;
      &lt;li&gt;OS: MacOS&lt;/li&gt;
      &lt;li&gt;IDE: IntelliJ (버전: 2018.1.5)&lt;/li&gt;
      &lt;li&gt;Spring, Spring MVC (버전: 5.1.3)&lt;/li&gt;
      &lt;li&gt;tomcat 사전 설치 (버전: 8.5.34)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기본적인-용어&quot;&gt;기본적인 용어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;빌드(Build)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;소스코드 파일을 실행 가능한 소프트웨어 산출물로 만드는 일련의 과정을 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maven에서 &lt;strong&gt;Artifact&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Maven Build의 결과로 얻을 수 있는 일반적인 .jar나 .war 또는 여타의 실행 파일을 의미한다.&lt;/li&gt;
      &lt;li&gt;즉, 빌드로 생성되는 프로젝트의 결과물&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;배포(Deploy)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;응용 프로그램을 서버 상에서 활용할 수 있도록 구동시키는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;즉, 실행 가능한 파일을 서버에 올려 사용자가 이용할 수 있게 하는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; 웹 애플리케이션을 배포하기 위한 패키징 유형(&lt;strong&gt;3가지&lt;/strong&gt;)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;package(archive)
    &lt;ul&gt;
      &lt;li&gt;아카이브(.war, .ear) 파일로 배포
        &lt;ul&gt;
          &lt;li&gt;아카이브는 WAS(Tomcat)에 의해 압축이 풀린다.&lt;/li&gt;
          &lt;li&gt;파일이 많은 경우 압축을 푸는 시간이 오래 걸릴 수 있다.&lt;/li&gt;
          &lt;li&gt;원격 서버에 배포시 한 개의 파일만 전송하면 된다.&lt;/li&gt;
          &lt;li&gt;WAS(Tomcat)에서 제공하는 업로드를 통한 배포 기능을 활용할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exploded(expanded)
    &lt;ul&gt;
      &lt;li&gt;아카이브를 압축 해제한 형태의 디렉터리로 배포
        &lt;ul&gt;
          &lt;li&gt;별도의 디렉터리에 원본 소스를 복사하여 만든다.&lt;/li&gt;
          &lt;li&gt;압축 및 해제 과정이 불필요하다.&lt;/li&gt;
          &lt;li&gt;파일이 많은 경우 복사하는 시간이 오래 걸릴 수 있다.&lt;/li&gt;
          &lt;li&gt;원본 소스를 건드리지 않고 배포를 원하는 경우에 적합하다.&lt;/li&gt;
          &lt;li&gt;원격 서버에 배포시 파일이 많은 경우 전송 시간이 오래 걸릴 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;in-place
    &lt;ul&gt;
      &lt;li&gt;소스 디렉터리(전체 또는 일부)를 그대로 배포
        &lt;ul&gt;
          &lt;li&gt;추가적인 복사 과정 불필요하다.&lt;/li&gt;
          &lt;li&gt;로컬 서버에 배포하는 경우에 적합하다.&lt;/li&gt;
          &lt;li&gt;WAS(Tomcat)가 런타임시 생성하는 파일이 소스와 섞일 수 있는 문제가 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;intellij에서-war-파일-추출-및-빌드&quot;&gt;IntelliJ에서 War 파일 추출 및 빌드&lt;/h1&gt;

&lt;h3 id=&quot;1-project-structure--project-settings--artifacts&quot;&gt;1. Project Structure &amp;gt; Project Settings &amp;gt; Artifacts&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;File - Project Structure 선택 또는 단축키 이용
    &lt;ul&gt;
      &lt;li&gt;MacOS: (cmd + ;), Windows: (Ctrl + Alt + Shift + S) 이용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Project Setting의 Artifacts 선택
    &lt;ul&gt;
      &lt;li&gt;Build Artifact: 빌드의 결과물로 생성할 형태를 정할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;archive: 아카이브(.war, .ear) 파일로 배포&lt;/li&gt;
          &lt;li&gt;exploded: 아카이브를 압축 해제한 형태의 디렉터리로 배포&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/springMVC-project/setting3/setting3-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-war-파일-추출을-위한-build-artifact-설정&quot;&gt;2. War 파일 추출을 위한 Build Artifact 설정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;상단에 + 클릭 &amp;gt; Web Application: Archive &amp;gt; For ‘PROJECT_NAME:war exploded’ 선택
    &lt;ul&gt;
      &lt;li&gt;빌드의 결과물로 ‘PROJECT_NAME:war exploded’에 대한 war 파일을 생성하도록 설정한다.&lt;/li&gt;
      &lt;li&gt;‘PROJECT_NAME:war exploded’가 기본 설정 
 &lt;!-- * `out/artifacts/PROJECT_NAME_war_exploded` 디렉터리 --&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/springMVC-project/setting3/setting3-2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PROJECT_NAME_war.war —&amp;gt; PROJECT_NAME.war로 수정
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/springMVC-project/setting3/setting3-3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;3-war-파일-추출을-위한-build&quot;&gt;3. War 파일 추출을 위한 Build&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Build - Build Artifacts 클릭&lt;/li&gt;
  &lt;li&gt;‘PROJECT_NAME:war’ 선택 &amp;gt; build 클릭
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/springMVC-project/setting3/setting3-4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;빌드의 결과물로 ‘PROJECT_NAME:war exploded’에 대한 war 파일이 생성된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;4-추출한-war-파일-확인&quot;&gt;4. 추출한 War 파일 확인&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;out/artifacts/PROJECT_NAME_war/PROJECT_NAME.war 생성
&lt;img src=&quot;/images/springMVC-project/setting3/setting3-5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; 빌드 결과물이 위치할 폴더&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;out/
    &lt;ul&gt;
      &lt;li&gt;IntellJ 프로젝트 출력 폴더&lt;/li&gt;
      &lt;li&gt;IntellJ IDE 프로젝트에서 모든 모듈은 표준 출력 폴더 (out/classes/production/module_name)를 사용한다.&lt;/li&gt;
      &lt;li&gt;예를 들어, IntellJ에서 프로젝트를 생성하고 Run을 하면
        &lt;ul&gt;
          &lt;li&gt;1) 프로젝트(work space) 상단에 &lt;strong&gt;“out”&lt;/strong&gt;이라는 디렉터리가 생성된다.&lt;/li&gt;
          &lt;li&gt;2) 해당 디렉터리 안에 컴파일된 클래스 파일이 들어간다. (src와 비슷한 계층으로 구성)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;IntellJ&lt;/em&gt;와 관련된 프로젝트의 .gitignore에 해당 내용을 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;target/
    &lt;ul&gt;
      &lt;li&gt;Java 기반 프로젝트의 라이프사이클 관리를 목적으로 하는 빌드 도구인 Maven의 빌드 결과물 저장 폴더&lt;/li&gt;
      &lt;li&gt;Maven으로 빌드하면 &lt;strong&gt;“target”&lt;/strong&gt;이라는 디렉터리가 생성된다.
        &lt;ul&gt;
          &lt;li&gt;.jar 파일을 저장하는 것이 주용도&lt;/li&gt;
          &lt;li&gt;그 외에도 빌드된 파일들을 자동으로 넣어준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;나중에 프로젝트 결과물(jar 또는 war)을 실서버에 반영할 때 target 밑에 있는 내용을 배포하게 된다.
        &lt;ul&gt;
          &lt;li&gt;개발할 때는 이클립스 안에서 모든 것이 이루어지기 때문에 별로 중요성이 없지만&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Maven&lt;/em&gt;과 관련된 프로젝트의 .gitignore에  해당 내용을 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;mark&gt;참고&lt;/mark&gt; Eclipse에서 War 파일 추출&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Eclipse에서 프로젝트 우클릭 &amp;gt; Export - Web - WAR file 선택 &amp;gt; Next 버튼 클릭&lt;/li&gt;
  &lt;li&gt;Destination에 war파일이 생성될 위치 지정 &amp;gt; Finish 버튼 클릭&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;추출한-war-파일-tomcat에-배포-후-실행&quot;&gt;추출한 War 파일 Tomcat에 배포 후 실행&lt;/h1&gt;

&lt;h3 id=&quot;1-추출한-war를-tomcatwebapps-디렉터리-하위로-이동&quot;&gt;1. 추출한 .war를 Tomcat/webapps 디렉터리 하위로 이동&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;‘Tomcat/webapps/’ 디렉터리 하위에 해당 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;WAR_NAME.war&lt;/span&gt; 파일을 복사한다.
    &lt;ul&gt;
      &lt;li&gt;명령어: &lt;code class=&quot;highlighter-rouge&quot;&gt;cp war파일위치/WAR_NAME.war tomcat위치/webapps/&lt;/code&gt; 입력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(참고) Tomcat 설치 위치
    &lt;ul&gt;
      &lt;li&gt;macOS: ‘/usr/local/apache-tomcat-8.5.34’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-외부-tomcat을-실행&quot;&gt;2. 외부 Tomcat을 실행&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Linux: Tomcat/bin/startup.sh를 실행
    &lt;ul&gt;
      &lt;li&gt;macOS 명령어: &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/apache-tomcat-8.5.34/bin/startup.sh&lt;/code&gt; 입력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows: Tomcat/bin/startup.bat를 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-tomcat을-실행시키면-패키징되어있던-war-파일-압축-해제&quot;&gt;3. Tomcat을 실행시키면 패키징되어있던 war 파일 압축 해제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;즉, ‘Tomcat/webapps/’ 디렉터리 하위에 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;WAR_NAME&lt;/span&gt;으로 디렉터리가 생성된다.
    &lt;ul&gt;
      &lt;li&gt;해당 디렉터리 안에 풀린 .war 파일의 내용이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-url로-접속해서-테스트&quot;&gt;4. url로 접속해서 테스트&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/WAR_NAME&lt;/code&gt; 로 접속하면 해당 프로젝트를 실행할 수 있다.&lt;/li&gt;
  &lt;li&gt;(참고) &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;으로 접속하고 싶다면
    &lt;ul&gt;
      &lt;li&gt;‘Tomcat/webapps/WAR_NAME/’ 디렉터리 하위에 존재하는 파일들을 ‘Tomcat/webapps/ROOT/’ 하위로 옮긴다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tomcat-배포-과정-요약&quot;&gt;Tomcat 배포 과정 요약&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Tomcat/webapps/ 디렉터리 하위에 WAR_NAME.war 이동&lt;/li&gt;
  &lt;li&gt;Tomcat Server 실행 -&amp;gt; WAR_NAME.war 압축 해제&lt;/li&gt;
  &lt;li&gt;Tomcat/webapps/WAR_NAME 디렉터리 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/WAR_NAME/&lt;/code&gt;로 접속 가능&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;IntelliJ에서 Gradle 프로젝트 생성 및 SpringMVC를 위한 설정하기에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/24/intellij-springmvc-gradle-setting.html&quot;&gt;IntelliJ에서 Spring MVC 프로젝트 생성하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Tomcat Server를 통해 “Hello World” 띄우기에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/25/intellij-springmvc-tomcat-setting.html&quot;&gt;IntelliJ에서 SpringMVC, Tomcat 설정하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Eclipse에서 Spring MVC 프로젝트 생성하기에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/07/spring-project-eclipse-setting.html&quot;&gt;Eclipse에서 Spring MVC 프로젝트 생성하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://nesoy.github.io/articles/2017-01/Intellij-War&quot;&gt;https://nesoy.github.io/articles/2017-01/Intellij-War&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://its-easy.tistory.com/4&quot;&gt;http://its-easy.tistory.com/4&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://ecogeo.tistory.com/tag/war:exploded&quot;&gt;http://ecogeo.tistory.com/tag/war:exploded&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/24/intellij-tomcat-war-deploy.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/24/intellij-tomcat-war-deploy.html</guid>
        
        <category>setting</category>
        
        <category>tomcat</category>
        
        <category>war</category>
        
        <category>export</category>
        
        <category>deploy</category>
        
        <category>intellij</category>
        
        
      </item>
    
      <item>
        <title>[MySQL] MySQL 깨알 팁 모음!</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;MySQL 설치 - 실행 - 기본 설정(root password 변경) - 접속
      &lt;ul&gt;
        &lt;li&gt;brew를 통한 설치&lt;/li&gt;
        &lt;li&gt;직접 다운로드를 통한 설치 (dmg 파일)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;MySQL 한글 설정 (UTF-8)
      &lt;ul&gt;
        &lt;li&gt;charset utf-8&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;MySQL 삭제&lt;/li&gt;
    &lt;li&gt;MySQL 접속 오류
      &lt;ul&gt;
        &lt;li&gt;임시 비밀번호 분실한 경우&lt;/li&gt;
        &lt;li&gt;비밀번호가 맞아도 접속이 안되는 경우&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;MySQL 접속 권한 설정&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;환경: MacOS, zsh&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mysql-설치-실행-및-기본-환경-설정&quot;&gt;MySQL 설치, 실행 및 기본 환경 설정&lt;/h2&gt;
&lt;h3 id=&quot;1-brew를-통한-설치&quot;&gt;1. &lt;a href=&quot;https://brew.sh/&quot;&gt;brew&lt;/a&gt;를 통한 설치&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;MySQL 설치
    &lt;ul&gt;
      &lt;li&gt;최신 버전 설치 (8.0.X)
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/images/mysql-download/mysql-install-8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;5.7 버전 설치
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install mysql@5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/images/mysql-download/mysql-install-57.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;다른 버전 설치 방법
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ brew search mysql&lt;/code&gt;로 검색, 원하는 버전의 formula 이름을 확인한다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ brew install &amp;lt;설치할 formula&amp;gt;&lt;/code&gt;으로 mysql을 설치한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 실행
    &lt;ul&gt;
      &lt;li&gt;최신 버전 실행 (8.0.X)
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew services start mysql
&lt;span class=&quot;c&quot;&gt;# background에서 실행시킬 필요가 없는 경우 아래 이용 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql.server start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;5.7 버전 실행
        &lt;ul&gt;
          &lt;li&gt;실행 전 환경 설정 필요 (.bash_profile 또는 .zshrc에 아래 내용 추가)
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# If you need to have mysql@5.7 first in your PATH run:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/opt/mysql@5.7/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For compilers to find mysql@5.7 you may need to set:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L/usr/local/opt/mysql@5.7/lib&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPPFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-I/usr/local/opt/mysql@5.7/include&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For pkg-config to find mysql@5.7 you may need to set:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/opt/mysql@5.7/lib/pkgconfig&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew services start mysql@5.7
&lt;span class=&quot;c&quot;&gt;# background에서 실행시킬 필요가 없는 경우 아래 이용 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/local/opt/mysql@5.7/bin/mysql.server start
&lt;span class=&quot;c&quot;&gt;# 하나의 버전만 깔려 있는 경우는 이 명령어도 사용 가능 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $ mysql.server start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR! The server quit without updating PID file...&lt;/code&gt; &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/23/error-mysql-start.html&quot;&gt;Error 해결 방법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 기본 환경 설정 (root 사용자 비밀번호 변경)
    &lt;ul&gt;
      &lt;li&gt;MySQL을 실행시킨 상태(2번 과정)에서 MySQL 접속하기 전에 설정한다.
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;비밀번호 복잡도 검사 과정 (n)
        &lt;ul&gt;
          &lt;li&gt;복잡한 비밀번호를 사용하도록 제한해주는 플러그인을 사용하려면 (y)&lt;/li&gt;
          &lt;li&gt;그냥 쓰던 비밀번호(약한 보안) 제한받지 않고 쓰고 싶다면 (n)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;루트 비밀번호 입력 &amp;amp; 확인&lt;/li&gt;
      &lt;li&gt;익명 사용자 삭제 (y)
        &lt;ul&gt;
          &lt;li&gt;$ mysql만으로도 접속이 가능하게 하려면 (n)&lt;/li&gt;
          &lt;li&gt;접속 시 -u 옵션을 반드시 명시하려면 (y)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;원격 접속 허용 (n)
        &lt;ul&gt;
          &lt;li&gt;로컬에서만 실행하는 경우는 (n)&lt;/li&gt;
          &lt;li&gt;localhost외의 ip에서 root 아이디의 접속을 허용하는 경우는 (y)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test DB 삭제 (n)&lt;/li&gt;
      &lt;li&gt;수정할 것이 있는가? (y or n)
        &lt;ul&gt;
          &lt;li&gt;하나라도 권한 변경을 했다면 (y)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 접속
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;접속 후 위에서 설정한 root 비밀번호를 입력한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql &lt;a href=&quot;https://gist.github.com/benlinton/d24471729ed6c2ace731&quot;&gt;버전 변경하기&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;mysql 8.0 -&amp;gt; mysql 5.7
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Unlink current mysql(8.0) version&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew unlink mysql 
&lt;span class=&quot;c&quot;&gt;# Check older mysql(5.7) version&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /usr/local/Cellar/mysql@5.7
&lt;span class=&quot;c&quot;&gt;# Link the older version&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew switch mysql@5.7 5.7.24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;mysql 5.7 -&amp;gt; mysql 8.0
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Unlink older mysql version&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew unlink mysql@5.7
&lt;span class=&quot;c&quot;&gt;# Check current mysql(8.0) version&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /usr/local/Cellar/mysql 
&lt;span class=&quot;c&quot;&gt;# Link the current version&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew switch mysql 8.0.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-사이트에서-직접-다운로드를-통한-설치-dmg-파일&quot;&gt;2. 사이트에서 직접 다운로드를 통한 설치 (dmg 파일)&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;MySQL 설치
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot;&gt;MySQL 사이트&lt;/a&gt;에서 원하는 버전의 .dmg 파일을 다운로드 (로그인 없이도 다운로드 가능)
        &lt;ul&gt;
          &lt;li&gt;자세한 내용: &lt;a href=&quot;https://dev.mysql.com/doc/mysql-osx-excerpt/5.7/en/osx-installation-pkg.html&quot;&gt;https://dev.mysql.com/ - 버전 5.7 기준&lt;/a&gt; 참고&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;중요! 설치할 때 주어지는 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;임시 비밀번호 기억&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;분실했다면 (아래 MySQL 접속 오류 설명 참고)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 실행
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 실행&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/support-files/mysql.server start
&lt;span class=&quot;c&quot;&gt;# 중지&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/support-files/mysql.server stop
&lt;span class=&quot;c&quot;&gt;# 재시작 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/support-files/mysql.server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;(6. MySQL alias 설정 참고)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 접속
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 디렉터리로 이동 후&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/mysql/bin/
&lt;span class=&quot;c&quot;&gt;# MySQL 접속 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;(아래 MySQL 접속 명령어 설명 참고)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 기본 환경 설정 (root 사용자 비밀번호 변경)
    &lt;ul&gt;
      &lt;li&gt;MySQL을 실행시키고 접속한 후(3번 과정)에 설정한다. &lt;a href=&quot;http://0719s.tistory.com/2&quot;&gt;참고1&lt;/a&gt;, &lt;a href=&quot;https://to-dy.tistory.com/58&quot;&gt;참고2&lt;/a&gt;
        &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;둘&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;중&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;하나&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'newpassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql_native_password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'newpassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;적용&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;환경 변수 설정
    &lt;ul&gt;
      &lt;li&gt;bash 또는 zsh
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi ~/.bash_profile&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi ~/.zshrc&lt;/code&gt;에 아래 내용 추가&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/local/bin:/opt/local/sbin:/usr/local/mysql/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;mysql 설치 경로로 이동하지 않아도 어디서나 mysql을 수행할 수 있다.
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 디렉터리로 이동 후&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/mysql/bin/
&lt;span class=&quot;c&quot;&gt;# MySQL 접속 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 환경 변수 설정 후 설치 경로로 이동하지 않고 접속 가능 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL alias 설정
    &lt;ul&gt;
      &lt;li&gt;bash 또는 zsh
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi ~/.bash_profile&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi ~/.zshrc&lt;/code&gt;에 아래 내용 추가
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mysqlserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo /usr/local/mysql/support-files/mysql.server&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;alias 설정 후 아래와 같이 사용 가능
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlserver start&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlserver stop&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlserver restart&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;alias 설정 시 주의 사항
        &lt;ul&gt;
          &lt;li&gt;alias 축약이름 = “실행내용” (X) 띄어쓰기 주의!&lt;/li&gt;
          &lt;li&gt;alias 축약이름=”실행내용” (O)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;3-참고&quot;&gt;3. 참고&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; MySQL 접속 명령어&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-u + 사용자명
    &lt;ul&gt;
      &lt;li&gt;해당 사용자명으로 접속 (접속할 사용자 지정)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-p + 비밀번호
    &lt;ul&gt;
      &lt;li&gt;비밀번호를 설정한 경우
        &lt;ol&gt;
          &lt;li&gt;해당 사용자의 비밀번호를 -p 뒤에 입력하거나&lt;/li&gt;
          &lt;li&gt;sudo ./mysql -u root -p 해당 명령어 이후에 입력하거나&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비밀번호 입력 시 주의사항!
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Password:&lt;/strong&gt; 형태
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;맥의 관리자 비밀번호(sudo 패스워드)&lt;/strong&gt;이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Enter password:&lt;/strong&gt; 형태
        &lt;ul&gt;
          &lt;li&gt;mysql 사용자의 비밀번호&lt;/li&gt;
          &lt;li&gt;root 사용자의 비밀번호를 변경하기 전이면 mysql 설치할 때 받았던 임시 비밀번호&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; MySQL 버전 확인&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Ver&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Distrib&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macos10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EditLine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;mysql-한글-설정-utf-8&quot;&gt;MySQL 한글 설정 (UTF-8)&lt;/h2&gt;
&lt;h3 id=&quot;charset-utf-8&quot;&gt;charset utf-8&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;mysql 접속
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&amp;gt; status;&lt;/code&gt; 명령어 입력해서 설정 확인
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-download/mysql-charset-before.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;latin이 있다면 mysql을 나간 후 터미널을 다시 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관리자 권한으로 /etc/my.cnf 파일 생성
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# my.cnf가 기본적으로 존재하지 않으므로 아래 명령어를 통해 새로 생성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/my.cnf
Password: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;my.cnf 파일에 아래 내용 넣기
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;nv&quot;&gt;init_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SET collation_connection=utf8_general_ci&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;init_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SET NAMES utf8&quot;&lt;/span&gt;
character-set-server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8
collation-server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8_general_ci
skip-character-set-client-handshake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;client]
default-character-set&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql]
default-character-set&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql 서버 정지 후 재실행
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# alias 설정 후 아래와 같이 사용 가능&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysqlserver stop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysqlserver start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql 재접속&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&amp;gt; show variables like 'c%';&lt;/code&gt; 명령어를 이용해서 정상적으로 utf-8로 설정되었는지 확인
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/mysql-download/mysql-charset-after2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mysql-삭제&quot;&gt;&lt;a href=&quot;http://dedeweb.tistory.com/30&quot;&gt;MySQL 삭제&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;해당 내용을 모두 shell script에 넣어 한 번에 실행하는 것을 추천한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# brew install mysql로 설치한 경우&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /usr/local/var/mysql
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /usr/local/bin/mysql&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /usr/local/Cellar/mysql&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# mysql 홈페이지에서 DMG 파일로 설치한 경우&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm /usr/local/mysql
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /usr/local/mysql&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /Library/StartupItems/MySQLCOM
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /Library/PreferencePanes/My&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ~/Library/PreferencePanes/My&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /Library/Receipts/mysql&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /Library/Receipts/MySQL&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/db/receipts/com.mysql.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 직접 수행!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $ vim /etc/hostconfig and removed the line MYSQLCOM=-YES-&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# mac osx(10.10 이상)은 아래 내용도 추가 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /Library/LaunchDaemons/com.microsoft.office.licensing.helper.plist 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /private/var/db/receipts/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;mysql&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;mysql-접속-오류&quot;&gt;MySQL 접속 오류&lt;/h2&gt;
&lt;h3 id=&quot;-임시-비밀번호-분실한-경우&quot;&gt;# 임시 비밀번호 분실한 경우&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;문제 원인:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;아이디/패스워드가 다르거나 접근 권한이 없을 경우!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;해결책&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;비밀번호를 알고 있는 경우: 아래의 명령어 입력 후 기억하는 비밀번호로 접속해본다.
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/local/mysql/bin/mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;비밀번호 분실한 경우: 아래의 과정 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1) MySQL 서버 실행
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/support-files/mysql.server start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;2) 터미널에서 접속하기
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/mysql/bin/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./mysql
또는
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/local/mysql/bin/mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;MySQL 실행은 “/usr/local/mysql/bin/” 디렉터리에서 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) 안전모드로 MySQL 데몬(mysqld)을 실행
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/bin/mysqld_safe &lt;span class=&quot;nt&quot;&gt;--skip-grant-tables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;위와 같이 입력하면 인증을 생략하고 안전모드로 데몬을 실행한다.&lt;/li&gt;
      &lt;li&gt;입력할 비밀번호: MySQL 비밀번호가 아닌 &lt;strong&gt;맥의 관리자 비밀번호&lt;/strong&gt;이다.&lt;/li&gt;
      &lt;li&gt;위 명령어는 실행된 상태로 유지되므로 새로운 터미널 창을 열어서 MySQL에 접속한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4) MySQL 접속
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/local/mysql/bin/mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;위의 명령어가 제대로 실행되었다면 비밀번호를 묻지 않고 바로 접속이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5) 비밀번호 재설정
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;마지막으로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변경사항을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;적용하기&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;위해&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;명령어&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;실행&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;접속한 뒤에는 아래와 같이 비밀번호를 root로 변경한다.&lt;/li&gt;
      &lt;li&gt;password=(‘root’)에 root 대신 원하는 비밀번호를 입력해도 된다.&lt;/li&gt;
      &lt;li&gt;(참고로 5.7 버전 이전에는 set password=password(‘원하는 비밀번호’)였는데 컬럼명이 바꼈다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;6) MySQL 접속
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/local/mysql/bin/mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/local/mysql/bin/mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-proot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;다시 MySQL에 접속하면 잘 되는 것을 확인할 수 있다.&lt;/li&gt;
      &lt;li&gt;만약 접속이 거부되면 -uroot -proot와 같이 비밀번호까지 붙여서 한번에 실행하는 것을 시도한다.&lt;/li&gt;
      &lt;li&gt;접속 후 명령을 실행하게 되면 다음과 같은 에러가 발생한다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;7) 에러 해결
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'원하는 비밀번호'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;마지막으로 위와 같이 설정하면 정상적으로 MySQL 명령을 실행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-비밀번호가-맞아도-접속이-안되는-경우&quot;&gt;# 비밀번호가 맞아도 접속이 안되는 경우&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;문제 원인&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;MySQL 서버가 켜져 있는지 확인!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;해결책&lt;/strong&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/support-files/mysql.server start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;MySQL 서버 실행 후 다시 접속&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mysql-접속-권한-설정&quot;&gt;MySQL 접속 권한 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL 서버 실행
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/mysql/support-files/mysql.server start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자를 추가를 위해 MySQL 서버에 로그인 (root 권한)
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
Enter password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 추가
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;로컬에서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;접속&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용자&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사용자'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'비밀번호'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;원격에서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;접속&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사용자&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사용자'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'원격IP주소'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'비밀번호'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;!-- * `mysql ERROR 1819 (HY000): Your password does not satisfy the current policy requirements` 라는 에러가 발생하면 Mysql password policy requirements 에러 validation 제거하여 해결하기 을 참고하자. --&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자에게 DB 권한 부여하기
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;모든&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;접근&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능하도록&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;권한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;부여&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사용자'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;특정&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에만&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;접근&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가능하도록&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;권한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;부여&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사용자'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 계정 삭제
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사용자'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Windows MySQL 설치방법 등을 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/09/mysql-download.html&quot;&gt;MySQL 설치&lt;/a&gt; 를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;MySQL Workbench 사용법을 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/09/mysql-workbench-guide.html&quot;&gt;MySQL Workbench 사용법&lt;/a&gt; 을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/database/mysql/basic&quot;&gt;권남님의 MySQL 기본 명령어 정리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://junho85.pe.kr/1018&quot;&gt;http://junho85.pe.kr/1018&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://junhobaik.github.io/mac-install-mysql/&quot;&gt;https://junhobaik.github.io/mac-install-mysql/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://googry.tistory.com/31&quot;&gt;http://googry.tistory.com/31&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/helloheesu/SecretlyGreatly/wiki/%EB%A7%A5%EC%97%90%EC%84%9C-mysql-%EC%84%A4%EC%B9%98-%ED%9B%84-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot;&gt;brew를 통해 mysql-version 변경&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.howtoforge.com/setting-changing-resetting-mysql-root-passwords&quot;&gt;루트 비밀번호 변경&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.nextstep.co.kr/250&quot;&gt;charset 설정 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://gomdoreepooh.github.io/notes/mysql-reset-password&quot;&gt;https://gomdoreepooh.github.io/notes/mysql-reset-password&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://codingisgame.tistory.com/12&quot;&gt;http://codingisgame.tistory.com/12&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://cjh5414.github.io/mysql-create-user&quot;&gt;MySQL 접속 권한 설정 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://coderwall.com/p/os6woq/uninstall-all-those-broken-versions-of-mysql-and-re-install-it-with-brew-on-mac-mavericks&quot;&gt;MySQL 삭제 참고&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/23/mysql-tips.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/23/mysql-tips.html</guid>
        
        <category>mysql</category>
        
        <category>plugin</category>
        
        <category>error</category>
        
        
      </item>
    
      <item>
        <title>[Error] mysql.server start 사용 시 오류</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Mac OS: /usr/local/var/mysql/&lt;/li&gt;
  &lt;li&gt;Linux OS: /var/lib/mysql/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;오류-내용&quot;&gt;오류 내용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR! The server quit without updating PID file (/usr/local/var/mysql/...)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;주로 새로운 mysql버전으로 실행 시키려고 할 때 이 오류가 발생한다.
    &lt;ul&gt;
      &lt;li&gt;Ex) mysql8.0으로 실행했다가 mysql5.7을 다운받아 5.7버전으로 실행시키려 하는 경우 5.7버전 실행 불가.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/error/mysql-start-erorr-msg.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;mysql 인스턴스가 실행 중인지 확인
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 중인 프로세스를 종료
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-15&lt;/span&gt; PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;mysql 소유자 확인
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-laF&lt;/span&gt; /usr/local/var/mysql/
drwxr-x---    8 heejeong  staff       256 12 24 21:22 mysql/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;소유자를 mysql로 변경한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; mysql /usr/local/var/mysql/
drwxr-x---    8 _mysql    staff       256 12 24 21:22 mysql/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!-- 5. 위 경로의 권한을 변경하여 해결하는 방법이 있다.
```bash
$ sudo chmod -R 777 /usr/local/var/mysql
(sudo는 root권한이 아닐 경우)
``` --&gt;

&lt;ol&gt;
  &lt;li&gt;mysql 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- # 관련된 Post
* []() --&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4963171/mysql-server-startup-error-the-server-quit-without-updating-pid-file/35070831&quot;&gt;https://stackoverflow.com/questions/4963171/mysql-server-startup-error-the-server-quit-without-updating-pid-file/35070831&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://bellsilver7.tistory.com/28&quot;&gt;http://bellsilver7.tistory.com/28&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://manage.accuwebhosting.com/knowledgebase/2342/How-to-Fix-MySQL-Error-The-server-quit-without-updating-PID-file.html&quot;&gt;https://manage.accuwebhosting.com/knowledgebase/2342/How-to-Fix-MySQL-Error-The-server-quit-without-updating-PID-file.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.interserver.net/tips/kb/mysql-error-server-quit-without-updating-pid-file/&quot;&gt;https://www.interserver.net/tips/kb/mysql-error-server-quit-without-updating-pid-file/&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/23/error-mysql-start.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/23/error-mysql-start.html</guid>
        
        <category>mysql</category>
        
        <category>error</category>
        
        
      </item>
    
      <item>
        <title>[Annotation] Servlet Annotation @WebServlet vs @Controller</title>
        <description>&lt;h2 id=&quot;webservlet&quot;&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/22/webservlet-annotation.html&quot;&gt;@WebServlet&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.servlet.annotation&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebServlet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;서블릿을 선언할 때 사용되는 Annotation&lt;/li&gt;
  &lt;li&gt;이 Annotation이 표시된 클래스는 Servlet Container에 의해 처리된다.
    &lt;ul&gt;
      &lt;li&gt;속성 값을 통해 해당 Servlet과 매핑될 URL 패턴을 지정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;controller&quot;&gt;@Controller&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.stereotype&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;이 Annotation이 표시된 클래스는 “Controller” 임을 나타낸다.&lt;/li&gt;
  &lt;li&gt;@Controller는 @Component의 구체화된 역할을 한다.
    &lt;ul&gt;
      &lt;li&gt;classpath scanning을 통해 구현 클래스를 자동으로 감지할 수 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반적으로 RequestMapping 어노테이션을 기반으로 한 handler method와 함께 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webservlet과-controller-annotation의-차이&quot;&gt;@WebServlet과 @Controller Annotation의 차이&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;WebServlet과 Spring MVC Controller는 같은 일을 하는 데 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java-servlet의-webservlet&quot;&gt;Java Servlet의 @WebServlet&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿은 J2EE 프레임워크의 일부이며 모든 Java 애플리케이션 서버(Tomcat, Jetty 등)는 서블릿을 실행하기 위해 빌드된다.&lt;/li&gt;
  &lt;li&gt;서블릿은 J2EE 스택의 “하위 레벨” 계층이다. 즉, 애플리케이션 서버와 함께 미리 패키징되어 있기 때문에 애플리케이션을 실행하기 위해 &lt;strong&gt;servlet.jar가 필요하지 않다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;성능상의 이유로, 여러 편의를 제공하는 무거운 Spring MVC보다 Java Servlet을 사용하는 것이 유리할 때도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-mvc의-controller&quot;&gt;Spring MVC의 @Controller&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring MVC
    &lt;ul&gt;
      &lt;li&gt;Java 웹 애플리케이션을 구현하는 대부분의 사람들은 서블릿 위에 구축된 일종의 &lt;strong&gt;프레임워크&lt;/strong&gt;를 사용하여 개발을 더 쉽게 만든다. Spring MVC는 서블릿 위에 구축된 프레임워크 중 하나이다.&lt;/li&gt;
      &lt;li&gt;Java 웹 애플리케이션을 구현하는 데 있어서 더 많은 편의를 제공한다.
        &lt;ul&gt;
          &lt;li&gt;(binary form management, form parameter to bean conversion, parameter validation 등)&lt;/li&gt;
          &lt;li&gt;Spring MVC는 form 매개변수와 controller method 매개변수 매핑, binary form 제출(form이 파일을 업로드할 수 있는 경우)에서의 더 쉬운 처리 등과 같은 보다 기본적인 기능들을 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;하나의 클래스에서 여러 URL과 메소드의 입력을 쉽게 관리 할 수 ​​있다.
        &lt;ul&gt;
          &lt;li&gt;서블릿에서 동일한 작업을 수행할 수는 있지만 코드가 더 복잡하고 읽기 어렵다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring MVC의 Controller
    &lt;ul&gt;
      &lt;li&gt;일을 더 쉽게하기 위해 서블릿 위에 구축된 &lt;strong&gt;라이브러리&lt;/strong&gt;이다.&lt;/li&gt;
      &lt;li&gt;기본적으로 Spring MVC에서의 모든 요청은 DispatcherServlet에 매핑된다.
        &lt;ul&gt;
          &lt;li&gt;그런 다음 DispatcherServlet은 어노테이션이 들어오는 요청과 일치하는 컨트롤러를 호출한다.&lt;/li&gt;
          &lt;li&gt;매핑과 관련된 정보는 web.xml에 작성하거나 해당 서블릿에 @Controller Annotation을 달 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Spring MVC의 Controller를 실행하기 위해서는 애플리케이션에 &lt;strong&gt;필요한 jar를 패키징해야 한다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16439249/when-to-use-servlet-or-controller&quot;&gt;https://stackoverflow.com/questions/16439249/when-to-use-servlet-or-controller&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javaee/6/api/javax/servlet/annotation/WebServlet.html&quot;&gt;https://docs.oracle.com/javaee/6/api/javax/servlet/annotation/WebServlet.html&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&quot;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/22/webservlet-vs-controller.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/22/webservlet-vs-controller.html</guid>
        
        <category>spring</category>
        
        <category>annotation</category>
        
        <category>webservlet</category>
        
        <category>servlet</category>
        
        <category>controller</category>
        
        
      </item>
    
      <item>
        <title>[Annotation] @WebServlet</title>
        <description>&lt;h2 id=&quot;webservlet-이란&quot;&gt;@WebServlet 이란&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;@WebServlet의 속성 값을 통해 해당 Servlet과 매핑될 URL 패턴을 지정한다.&lt;/li&gt;
  &lt;li&gt;이 Annotation을 통해 web.xml 파일에 별로의 설정을 하지 않더라도 해당 Servlet을 실행할 수 있다.
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Servlet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Servlet-name&amp;gt;&lt;/span&gt;HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Servlet-class&amp;gt;&lt;/span&gt;HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Servlet-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Servlet&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Servlet-name&amp;gt;&lt;/span&gt;HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webservlet의-속성들&quot;&gt;@WebServlet의 속성들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서블릿의 이름을 설정하는 속성&lt;/li&gt;
      &lt;li&gt;@WebServlet(name = “서블릿 이름”)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;urlPatterns&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서블릿의 URL 목록을 설정하는 속성&lt;/li&gt;
      &lt;li&gt;@WebServlet(urlPatterns = “/”)&lt;/li&gt;
      &lt;li&gt;@WebServlet(urlPatterns = {“/”})&lt;/li&gt;
      &lt;li&gt;@WebServlet(urlPatterns = {“/”, “/home”, “/webcome”})&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;urlPatterns와 동일한 기능을 한다.&lt;/li&gt;
      &lt;li&gt;value는 속성 이름 없이 값만 설정할 수 있다.&lt;/li&gt;
      &lt;li&gt;@WebServlet(“/calc”)&lt;/li&gt;
      &lt;li&gt;value 속성 외에 다른 속성의 값도 필요한 경우는 속성의 이름을 생략할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webservlet-import-error&quot;&gt;@WebServlet import error&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.servlet.annotation.WebServlet을 가져올 수 없습니다.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;servlet-api.jar의 버전이 3.0 이상인지 확인&lt;/li&gt;
  &lt;li&gt;@WebServlet 사용을 위한 설정 추가
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api/3.0.1&quot;&gt;https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api/3.0.1&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maven
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;/&amp;gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Gradle
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
provided group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;@WebServlet과 @Controller Annotation의 차이에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/22/webservlet-vs-controller.html&quot;&gt;@WebServlet vs @Controller&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://cocoballl.blogspot.com/2014/07/webservlet.html&quot;&gt;http://cocoballl.blogspot.com/2014/07/webservlet.html&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/22/webservlet-annotation.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/22/webservlet-annotation.html</guid>
        
        <category>spring</category>
        
        <category>annotation</category>
        
        <category>webservlet</category>
        
        <category>servlet</category>
        
        
      </item>
    
      <item>
        <title>[Template Engine] 템플릿 엔진(Template Engine)이란</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;템플릿 엔진(Template Engine)이란&lt;/li&gt;
    &lt;li&gt;템플릿 엔진(Template Engine)의 종류
      &lt;ul&gt;
        &lt;li&gt;레이아웃 템플릿 엔진 vs 텍스트 템플릿 엔진&lt;/li&gt;
        &lt;li&gt;서버 사이드 템플릿 엔진 vs 클라이언트 사이드 템플릿 엔진&lt;/li&gt;
        &lt;li&gt;Spring MVC 템플릿 엔진 vs Spring Boot 템플릿 엔진&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;템플릿 엔진(Template Engine)의 필요성
      &lt;ul&gt;
        &lt;li&gt;Server Side Rendering vs Client Side Rendering&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;템플릿-엔진template-engine이란&quot;&gt;템플릿 엔진(Template Engine)이란&lt;/h2&gt;
&lt;p&gt;템플릿 양식과 특정 데이터 모델에 따른 입력 자료를 합성하여 결과 문서를 출력하는 소프트웨어(또는 소프트웨어 컴포넌트)를 말한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;그 중 &lt;strong&gt;웹 템플릿 엔진(web template engine)&lt;/strong&gt;이란 웹 문서가 출력되는 템플릿 엔진을 말한다.
    &lt;ul&gt;
      &lt;li&gt;즉, 웹 템플릿 엔진은 웹 템플릿들(web templates)과 웹 컨텐츠 정보(content information)를 처리하기 위해 설계된 소프트웨어이다.&lt;/li&gt;
      &lt;li&gt;웹 템플릿 엔진은 view code(html)와 data logic code(db connection)를 분리해주는 기능을 한다.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://nesoy.github.io/articles/2017-03/web-template&quot;&gt;웹 템플릿 시스템&lt;/a&gt; 참고&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/etc/template-engine-system-web.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;템플릿-엔진template-engine의-종류&quot;&gt;템플릿 엔진(Template Engine)의 종류&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_web_template_engines&quot;&gt;템플릿 엔진의 종류&lt;/a&gt; 참고
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/etc/template-engine-system.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;레이아웃-템플릿-엔진-vs-텍스트-템플릿-엔진&quot;&gt;레이아웃 템플릿 엔진 vs 텍스트 템플릿 엔진&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;레이아웃&lt;/strong&gt; 템플릿 엔진
    &lt;ul&gt;
      &lt;li&gt;중복되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; 코드를 사용하지 않고도 지정된 페이지 레이아웃에 따라 페이지 타일을 조합하여 완전한 페이지로 만들어준다.&lt;/li&gt;
      &lt;li&gt;Ex) Apache Tiles, Sitemesh 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;텍스트&lt;/strong&gt; 템플릿 엔진
    &lt;ul&gt;
      &lt;li&gt;템플릿 양식에 적절한 특정 데이터를 넣어 결과 문서를 출력한다.&lt;/li&gt;
      &lt;li&gt;Ex) Freemarker, Thymeleaf, JSP(Java Server Pages) 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;둘은 역할이 다르며 섞어서 사용하는 것이지 서로 배타적인 것이 아니다. &lt;a href=&quot;https://blog.outsider.ne.kr/969&quot;&gt;[참고]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;서버-사이드-템플릿-엔진-vs-클라이언트-사이드-템플릿-엔진&quot;&gt;서버 사이드 템플릿 엔진 vs 클라이언트 사이드 템플릿 엔진&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt; Side Template Engine
    &lt;ul&gt;
      &lt;li&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;서버에서 DB 혹은 API에서 가져온 데이터를 미리 정의된 Template에 넣어 html을 그려서 클라이언트에 전달해주는 역할을 한다.&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;즉, HTML 코드에서 고정적으로 사용되는 부분은 템플릿으로 만들어두고 동적으로 생성되는 부분만 템플릿 특정 장소에 끼워넣는 방식으로 동작할 수 있도록 해준다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/etc/template-engine-server-side.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;과정
        &lt;ul&gt;
          &lt;li&gt;1) 클라이언트의 요청을 받아서&lt;/li&gt;
          &lt;li&gt;2) 필요한 데이터(DB에서 가져오거나 API에서 가져오거나)가져온다.&lt;/li&gt;
          &lt;li&gt;3) 미리 정의된 Template에 해당 데이터를 적절하게 넣는다.&lt;/li&gt;
          &lt;li&gt;4) 서버에서 HTML(데이터가 반영된 Template)을 그린다.&lt;/li&gt;
          &lt;li&gt;5) 해당 HTML을 클라이언트에 전달한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;a href=&quot;https://colorlib.com/wp/top-templating-engines-for-javascript/&quot;&gt;javascript template engine&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;EJS(Embedded JavaScript Templates), Jade(Pug), Handlebars(Handlebars.js) 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) &lt;a href=&quot;http://kwonnam.pe.kr/wiki/java/template_engine&quot;&gt;java template engine&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Freemarker, Thymeleaf, Groovy, Velocity, jade4j, Handlebars(Handlebars.java), Mustache, JSP 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;!-- * 서버 사이드 템플릿 엔진의 필요성 
      * ```js``` --&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt; Side Template Engine
    &lt;ul&gt;
      &lt;li&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;html 형태로 코드를 작성할 수 있으며, 동적으로 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Gecko_DOM_Reference/%EC%86%8C%EA%B0%9C&quot;&gt;DOM&lt;/a&gt;을 그리게 해주는 역할을 한다.&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;즉, 데이터 받아서 DOM 객체에 동적으로 그려주는 프로세스를 담당한다.&lt;/li&gt;
      &lt;li&gt;예를 들어 웹 페이지에서 여러 카테고리 중 탭을 선택할 때마다 같은 형식의 프레임에 내용만 바뀌어 변경되는 것을 볼 수 있다. 이런 공통적인 프레임을 미리 제작한 ‘template’이라고 부른다. 클라이언트에서는 이런 template을 매번 입력하거나 바꿀 수 없으므로 script 타입을 template으로 미리 만들어 사용한다. (안의 내용은 replace를 사용하여 바꾼다.)&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;/images/etc/template-engine-client-side.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;과정
        &lt;ul&gt;
          &lt;li&gt;1) 클라이언트에서 공통적인 프레임을 미리 template으로 만든다.&lt;/li&gt;
          &lt;li&gt;2) 서버에서 필요한 데이터를 받는다.&lt;/li&gt;
          &lt;li&gt;3) 데이터를 template을 적절한 위치에 replace하고 DOM 객체에 동적으로 그려준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ex) Mustache, Squirrelly, Handlebars(Handlebars.js)&lt;/li&gt;
      &lt;li&gt;클라이언트 사이드 템플릿 엔진의 필요성
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Javascript 라이브러리로 랜더링이 끝난뒤 (즉, HTML Dom이 다 그려진 뒤)에 서버 통신 없이 화면 변경이 필요할 경우&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;계속해서 페이지를 이동하여 서버 쪽으로 호출이 발생한다면 서버 사이드 템플릿 엔진을 이용하면 되는데, 단일 화면에서 특정 이벤트에 따라 화면이 계속 변경되어야 하는 경우는 javascript로 html을 렌더링하는 경우가 많다.&lt;/li&gt;
          &lt;li&gt;즉 이렇게 단일 화면에서의 화면 변경에서는 서버 쪽을 사용하지 않고 화면을 그리기(이하 렌더링)위해 javascript 안에 html 코드를 작성해야 하는데, 이때 클라이언트 사이드 템플릿 엔진을 사용하지 않고 아래와 같이 javascript로 html을 렌더링하는 경우에는 여러 문제가 있다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;
            &lt;ol&gt;
              &lt;li&gt;html 코드(문자열)의 오타를 찾기 어렵다. (태그 하나가 빠지거나, attrubute가 오타가 나도 IDE에서 감지할 수 없다.)&lt;/li&gt;
              &lt;li&gt;렌더링 해야 할 코드가 늘어나면 늘어날수록 수정하기 어려워진다. (Dom 형태를 파악하기 어렵다.)&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- 클라이언트 측 브라우저는 HTML 템플릿, JSON/XML 데이터 및 템플릿 엔진 라이브러리를 서버에서 로드합니다. 
템플릿 엔진은 클라이언트의 브라우저에서 템플릿과 데이터를 사용하여 최종 HTML을 생성합니다. 
그러나 일부 HTML 템플릿은 데이터를 처리하고 서버 측에서 최종 HTML 페이지를 생성합니다. --&gt;

&lt;h3 id=&quot;spring-mvc-템플릿-엔진-vs-spring-boot-템플릿-엔진&quot;&gt;Spring MVC 템플릿 엔진 vs Spring Boot 템플릿 엔진&lt;/h3&gt;
&lt;p&gt;Java Object에서 데이터를 생성하여 Template에 넣어주면 템플릿 엔진에서 Template에 맞게 변환하여 html 파일을 생성하는 역할을 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-template-engines&quot;&gt;Spring Template Engine 참고&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;JSP, Thymeleaf, Groovy, Freemarker, Jade4j, JMustache, Pebble, Handlebars&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;추천&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Thymeleaf&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;비추천
        &lt;ul&gt;
          &lt;li&gt;Velocity는 Spring 버전 4.3부터 사용을 중단한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-template-engines&quot;&gt;Spring Boot Template Engine 공식 지원 템플릿&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Mustache, Thymeleaf, Groovy, Freemarker&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;추천&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/255&quot;&gt;Handlebars&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Mustache&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;비추천
        &lt;ul&gt;
          &lt;li&gt;Freemarker는 몇 년 동안 업데이트가 안되고 있어, SpringBoot에선 권장하지 않는 템플릿 엔진이다.&lt;/li&gt;
          &lt;li&gt;Velocity는 SpringBoot에서 지원하지 않는다.&lt;/li&gt;
          &lt;li&gt;JSP는 임베디드 서블릿 컨테이너를 사용하는 SpringBoot에서 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#boot-features-jsp-limitations&quot;&gt;제한 사항&lt;/a&gt;이 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;템플릿-엔진template-engine의-필요성&quot;&gt;템플릿 엔진(Template Engine)의 필요성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;많은 코드를 줄일 수 있다
    &lt;ul&gt;
      &lt;li&gt;대부분의 Template Engine은 기존의 HTML에 비해서 간단한 문법을 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;재사용성이 높다
    &lt;ul&gt;
      &lt;li&gt;웹페이지 혹은 웹앱을 만들 때 똑같은 디자인의 페이지에 보이는 데이터만 바뀌는 경우가 굉장히 많다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;유지보수에 용이하다
    &lt;ul&gt;
      &lt;li&gt;하나의 Template을 만들어 여러 페이지를 렌더링하는 작업에는 또 다른 이점이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;server-side-rendering-vs-client-side-rendering&quot;&gt;Server Side Rendering vs Client Side Rendering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Q. 서버 측에서는 API만 제공하고 클라이언트에서 동적으로 웹 페이지를 구성하면 되지 않나? &lt;br /&gt;
(즉, 서버는 API만 제공하고 모든 웹 페이지 구성은 클라이언트가 처리한다.)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q. 굳이 서버단 렌더링까지 할 필요가 있느냐, 렌더링은 클라이언트에서만 하도록 하면 뷰단 로직이 분산되지 않고 좋지 않나? &lt;br /&gt;
(위와 같은 의미의 질문)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A. &lt;a href=&quot;https://www.slipp.net/questions/368#answer-1312&quot;&gt;https://www.slipp.net/questions/368#answer-1312&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;A. &lt;a href=&quot;https://www.clien.net/service/board/park/5699595&quot;&gt;https://www.clien.net/service/board/park/5699595&lt;/a&gt; 참고&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Spring MVC Framework에 대해 알고 싶으시면 &lt;a href=&quot;http://gmlwjd9405.github.io/2018/12/20/spring-mvc-framework.html&quot;&gt;Spring MVC 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_template_system&quot;&gt;https://en.wikipedia.org/wiki/Web_template_system&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://nesoy.github.io/articles/2017-03/web-template&quot;&gt;https://nesoy.github.io/articles/2017-03/web-template&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://opentutorials.org/course/2136/11915&quot;&gt;https://opentutorials.org/course/2136/11915&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/23&quot;&gt;https://jojoldu.tistory.com/23&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://ingorae.tistory.com/402&quot;&gt;http://ingorae.tistory.com/402&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://show-me-the-money.tistory.com/56&quot;&gt;http://show-me-the-money.tistory.com/56&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://jqueryhouse.com/top-5-best-javascript-template-engines/&quot;&gt;https://jqueryhouse.com/top-5-best-javascript-template-engines/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://ian90.tistory.com/35&quot;&gt;https://ian90.tistory.com/35&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://new93helloworld.tistory.com/139&quot;&gt;http://new93helloworld.tistory.com/139&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/java/template_engine&quot;&gt;http://kwonnam.pe.kr/wiki/java/template_engine&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/21/template-engine.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/21/template-engine.html</guid>
        
        <category>springMVC</category>
        
        <category>mvc</category>
        
        <category>architecture</category>
        
        <category>structure</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>[SpringMVC] Spring MVC Framework란</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Spring MVC Architecture를 이해한다.&lt;/li&gt;
    &lt;li&gt;기본 Project Structure을 이해한다.&lt;/li&gt;
    &lt;li&gt;Spring MVC에서 Model, View, Controller의 사용법을 이해한다.
      &lt;ul&gt;
        &lt;li&gt;Model&lt;/li&gt;
        &lt;li&gt;View&lt;/li&gt;
        &lt;li&gt;Controller&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Spring MVC를 위한 필수적인 기본 설정 방법과 개념을 이해한다.
      &lt;ul&gt;
        &lt;li&gt;Maven Configuration (pom.xml)&lt;/li&gt;
        &lt;li&gt;Web Deployment Descriptor (web.xml)&lt;/li&gt;
        &lt;li&gt;Spring MVC Configuration&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;spring-mvc-architecture란&quot;&gt;Spring MVC Architecture란&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/web/springmvc-architecture.png&quot; alt=&quot;&quot; /&gt;
Model, View, Controller를 분리한 디자인 패턴 (개발자가 직접 구현해야 하는 것)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Model
    &lt;ul&gt;
      &lt;li&gt;애플리케이션의 상태(data)를 나타낸다.&lt;/li&gt;
      &lt;li&gt;일반적으로 POJO로 구성된다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Java Beans&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View
    &lt;ul&gt;
      &lt;li&gt;디스플레이 데이터 또는 프리젠테이션&lt;/li&gt;
      &lt;li&gt;Model data의 렌더링을 담당하며, HTML ouput을 생성한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;JSP&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;JSP 이외에도 Thymeleaf, Groovy, Freemarker 등 여러 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/21/template-engine.html&quot;&gt;Template Engine&lt;/a&gt;이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controller
    &lt;ul&gt;
      &lt;li&gt;View와 Model 사이의 인터페이스 역할&lt;/li&gt;
      &lt;li&gt;Model/View에 대한 사용자 입력 및 요청을 수신하여 그에 따라 적절한 결과를 Model에 담아 View에 전달한다.&lt;/li&gt;
      &lt;li&gt;즉, Model Object와 이 Model을 화면에 출력할 View Name을 반환한다.&lt;/li&gt;
      &lt;li&gt;Controller —&amp;gt; Service —&amp;gt; Dao —&amp;gt; DB&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Servlet&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring Framework가 제공하는 Class&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DispatcherServlet
    &lt;ul&gt;
      &lt;li&gt;Spring Framework가 제공하는 Servlet 클래스&lt;/li&gt;
      &lt;li&gt;사용자의 요청을 받는다.&lt;/li&gt;
      &lt;li&gt;Dispatcher가 받은 요청은 HandlerMapping으로 넘어간다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HandlerMapping
    &lt;ul&gt;
      &lt;li&gt;사용자의 요청을 처리할 Controller를 찾는다. (Controller URL Mapping)&lt;/li&gt;
      &lt;li&gt;요청 url에 해당하는 Controller 정보를 저장하는 table을 가진다.&lt;/li&gt;
      &lt;li&gt;즉, 클래스에 @RequestMapping(“/url”) annotaion을 명시하면 해당 URL에 대한 요청이 들어왔을 때 table에 저장된 정보에 따라 해당 클래스 또는 메서드에 Mapping한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ViewResolver
    &lt;ul&gt;
      &lt;li&gt;Controller가 반환한 View Name(the logical names)에 prefix, suffix를 적용하여 View Object(the physical view files)를 반환한다.&lt;/li&gt;
      &lt;li&gt;예를 들어 view name: home, prefix: /WEB-INF/views/, suffix: .jsp는 “/WEB-INF/views/home.jsp”라는 위치의 View(JSP)에 Controller에게 받은 Model을 전달한다.&lt;/li&gt;
      &lt;li&gt;이 후에 해당 View에서 이 Model data를 이용하여 적절한 페이지를 만들어 사용자에게 보여준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;기본-project-structure&quot;&gt;기본 Project Structure&lt;/h2&gt;
&lt;p&gt;Web Application Structure(웹 서비스 기본 설정 구조)
&lt;img src=&quot;/images/web/web-project-structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;src
    &lt;ul&gt;
      &lt;li&gt;개발자가 작성한 Servlet 코드가 저장된다.&lt;/li&gt;
      &lt;li&gt;Controller, Model, Service, Dao&lt;/li&gt;
      &lt;li&gt;src/main/java
        &lt;ul&gt;
          &lt;li&gt;개발되는 Java 코드의 경로&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;src/main/resources
        &lt;ul&gt;
          &lt;li&gt;서버가 실행될 때 필요한 파일들의 경로&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;src/test/java
        &lt;ul&gt;
          &lt;li&gt;테스트 전용 경로 (각 테스트 코드 작성 경로)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;src/test/resource
        &lt;ul&gt;
          &lt;li&gt;테스트 시에만 사용되는 파일들의 경로&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Libraries
    &lt;ul&gt;
      &lt;li&gt;Servlet이나 JSP에서 추가로 사용하는 라이브러리 또는 드라이버&lt;/li&gt;
      &lt;li&gt;jar로 압축한 파일이어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebContent (&lt;strong&gt;전체 ROOT&lt;/strong&gt;) - webapp
    &lt;ul&gt;
      &lt;li&gt;Deploy할 때 WebContent 디렉터리 전체가 .war로 묶어서 보내진다.&lt;/li&gt;
      &lt;li&gt;resources
        &lt;ul&gt;
          &lt;li&gt;정적인 데이터 (ex. image file, css, js, fonts)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;WEB-INF
        &lt;ul&gt;
          &lt;li&gt;classes: 작성한 Java Servlet 파일이 나중에 .class로 이곳에 모두 저장된다.&lt;/li&gt;
          &lt;li&gt;lib: 추가한 모든 라이브러리 또는 드라이버가 이곳에 모두 저장된다.&lt;/li&gt;
          &lt;li&gt;props: property file을 저장한다.&lt;/li&gt;
          &lt;li&gt;spring: &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;spring configuration files&lt;/strong&gt;&lt;/span&gt;을 저장한다. (Spring과 관련된 설정 파일을 모아둔 것)
            &lt;ul&gt;
              &lt;li&gt;dispatcher-servlet.xml&lt;/li&gt;
              &lt;li&gt;applicationContext.xml&lt;/li&gt;
              &lt;li&gt;dao-context.xml, service-context.xml 등&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;views: Controller와 매핑되는 .jsp 파일들을 저장한다. (JSP 파일의 경로)&lt;/li&gt;
          &lt;li&gt;web.xml: web application의 설정을 위한 &lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;web deployment descriptor&lt;/strong&gt;&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;DispatcherServlet, ContextLoadListener 설정&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pom.xml
    &lt;ul&gt;
      &lt;li&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;&lt;strong&gt;maven configuration file&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;어떤 lib를 쓸지 명시한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-mvc에서-model-view-controller&quot;&gt;Spring MVC에서 Model, View, Controller&lt;/h2&gt;
&lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Controller에서 View로 객체를 전달하는데 사용된다.&lt;/li&gt;
  &lt;li&gt;명명된 객체들의 집합이라고 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;Key-Value 형식의 하나의 쌍(하나의 열)을 명명된 객체라고 부른다.&lt;/li&gt;
      &lt;li&gt;또한 이 명명된 객체는 model attribute라고 부른다.&lt;/li&gt;
      &lt;li&gt;여러 개의 attribute가 모여 Table 형식을 이룬다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;view에서 attribute의 key 값을 통해 value 값을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Key(name)&lt;/td&gt;
      &lt;td&gt;Value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;key1&lt;/td&gt;
      &lt;td&gt;value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;key2&lt;/td&gt;
      &lt;td&gt;value2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Model Inplementations&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Model을 표현하기 위해 여러 자료구조를 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;Controller 메서드에 input argument로 값을 넣어주면 Spring Frmework가 자동으로 Model을 만들어주고 해당 Model의 주솟값만 넘겨준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;java.util.map의 구현
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/greeting&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRandomGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ol&gt;
      &lt;li&gt;service 객체의 메서드를 호출하여 결과를 가져온다.&lt;/li&gt;
      &lt;li&gt;model에 첫 번째 인자 “name”과 결과에 대한 값인 두 번째 인자 value를 넣는다.
        &lt;ul&gt;
          &lt;li&gt;view에서 해당 이름(“name”)으로 value에 접근한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;해당하는 value를 보여줄 View name을 반환한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring에서 제공하는 Model 인터페이스 구현
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/special-deals&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSpecialDeals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 

 &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpecialDial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specialDeals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpecialDeals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialDeals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// value만 넣으면 name은 자동 생성&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Map을 사용하는 것의 단점은 “name”을 반드시 지정해야하는 것이다.&lt;/li&gt;
      &lt;li&gt;Model 인터페이스는 addAttribute()와 같은 편리한 메소드를 제공한다.
        &lt;ul&gt;
          &lt;li&gt;addAttribute()는 Map 속성의 이름(“name”)을 자동으로 생성한다는 점을 제외하면 Map의 put()과 동일하다.&lt;/li&gt;
          &lt;li&gt;자동으로 생성하고 싶지 않은 모델의 속성 이름을 결정하는 것은 여전히 가능하다.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;가장 자주 사용하는 Model 형식&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring에서 제공하는 ModelMap 객체
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/fullname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFullname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 

 &lt;span class=&quot;c1&quot;&gt;// chained calls are handy!&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Jon&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;surname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Snow&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;추가적인 기능을 제공한다.
        &lt;ul&gt;
          &lt;li&gt;chain으로 사용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HomeController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome {}.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Business Logic&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDateTimeInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formattedDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// BL의 결과를 Model에 저장 &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;serverTime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formattedDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Return logical view name&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;@Controller
    &lt;ul&gt;
      &lt;li&gt;bean으로 등록&lt;/li&gt;
      &lt;li&gt;해당 클래스가 Controller로 사용됨을 Spring Framework에 알림&lt;/li&gt;
      &lt;li&gt;@Component —구체화—&amp;gt; @Controller, @Service, @Repository&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@RequestMapping
    &lt;ul&gt;
      &lt;li&gt;value: 해당 url로 요청이 들어오면 이 메서드가 수행된다.&lt;/li&gt;
      &lt;li&gt;method: 요청 method를 명시한다.&lt;/li&gt;
      &lt;li&gt;즉, 위의 예시에서는 “/home” url로 HTTP GET 요청이 들어오면 home() 메서드가 실행된다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1) Class Level&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* an HTTP GET for /home */&lt;/span&gt; 
      &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2) Handler Level&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllEmployees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* an HTTP POST for /home/employees */&lt;/span&gt; 
      &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/employees&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;1) Class Level Mapping
        &lt;ul&gt;
          &lt;li&gt;모든 메서드에 적용되는 경우&lt;/li&gt;
          &lt;li&gt;“/home”로 들어오는 모든 요청에 대한 처리를 해당 클래스에서 한다는 것을 의미한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2) Handler Level Mapping
        &lt;ul&gt;
          &lt;li&gt;요청 url에 대해 해당 메서드에서 처리해야 되는 경우&lt;/li&gt;
          &lt;li&gt;“/home/employees” POST 요청에 대한 처리를 addEmployee()에서 한다는 것을 의미한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;model.addAttribute()
    &lt;ul&gt;
      &lt;li&gt;Business Logic의 처리 결과 값을 model attribute에 지정하면 Spring이 Model 객체를 만들어 해당 Model의 주솟값을 넘겨준다.&lt;/li&gt;
      &lt;li&gt;하나의 요청 안에서만 Controller와 View가 Model을 공유한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@RequestParam
    &lt;ul&gt;
      &lt;li&gt;HTTP GET 요청에 대해 매칭되는 request parameter 값이 자동으로 들어간다.&lt;/li&gt;
      &lt;li&gt;Ex) ` http://localhost:8080/login?username=scott&amp;amp;password=tiger`&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;view&quot;&gt;View&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;View를 생성하는 방법은 여러 가지가 있다.
    &lt;ul&gt;
      &lt;li&gt;JSP 이외에도 Thymeleaf, Groovy, Freemarker 등 여러 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/21/template-engine.html&quot;&gt;Tempate Engine&lt;/a&gt;이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/11/03/jsp.html&quot;&gt;JSP(Java Server Pages)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#boot-features-jsp-limitations&quot;&gt;JSP 제한 사항&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Java EE에 종속적이라는 단점이 있다.&lt;/li&gt;
      &lt;li&gt;SpringBoot에서는 공식적으로 jsp를 지원하지 않는다.
        &lt;ul&gt;
          &lt;li&gt;SpringBoot의 내장 Tomcat에 하드코딩 패턴때문에 jar형식으로는 webapp 내용을 가져올 수 없다.&lt;/li&gt;
          &lt;li&gt;따라서 SpringBoot에서는 war가 아닌 jar로 사용할 때는 jsp를 사용할 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JSTL(JSP Standard Tag Library)
    &lt;ul&gt;
      &lt;li&gt;많은 JSP 애플리케이션의 공통적인 핵심 기능을 캡슐화하는 유용한 JSP 태그 모음&lt;/li&gt;
      &lt;li&gt;즉, JSP 페이지를 작성할 때 유용하게 사용할 수 있는 여러 가지 action과 함수가 포함된 라이브러리&lt;/li&gt;
      &lt;li&gt;가장 많이 사용하는 태그 확장 라이브러리&lt;/li&gt;
      &lt;li&gt;자신만의 Custom Tag를 추가할 수 있는 기능을 제공한다.&lt;/li&gt;
      &lt;li&gt;사용하는 이유?
        &lt;ul&gt;
          &lt;li&gt;JSP에 Java Code가 들어가는 것을 막기 위해서 사용한다.&lt;/li&gt;
          &lt;li&gt;즉, Java Code(JSP Scriptlet)대신 Tag를 사용하여 프로그래밍할 수 있도록 하기 위해 도입되었다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-mvc를-위한-필수-설정&quot;&gt;Spring MVC를 위한 필수 설정&lt;/h2&gt;
&lt;h3 id=&quot;1-maven-configuration-pomxml&quot;&gt;1. Maven Configuration (pom.xml)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자신의 프로젝트에 대한 고유의 좌표 설정
    &lt;ol&gt;
      &lt;li&gt;groupId
        &lt;ul&gt;
          &lt;li&gt;자신의 프로젝트를 고유하게 식별하게 해 주는 것으로, 최소한 내가 컨트롤하는 domain name이어야 한다.&lt;/li&gt;
          &lt;li&gt;package 명명 규칙을 따른다.&lt;/li&gt;
          &lt;li&gt;하위 그룹은 얼마든지 추가할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;artifactId
        &lt;ul&gt;
          &lt;li&gt;제품의 이름으로, 버전 정보를 생략한 jar 파일의 이름이다.&lt;/li&gt;
          &lt;li&gt;프로젝트 이름과 동일하게 설정한다.&lt;/li&gt;
          &lt;li&gt;소문자로만 작성하며 특수문자는 사용하지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;version
        &lt;ul&gt;
          &lt;li&gt;SNAPSHOT: 개발용, RELEASE: 배포용&lt;/li&gt;
          &lt;li&gt;숫자와 점을 사용하여 버전 형태를 표현한다.(1.0, 1.1, 1.0.1, …)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.hee&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;projectName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;projectName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;war&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0-BUILD-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- properties에 명시한 version이 알아서 placeholder에 주입된다. --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;java-version&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java-version&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;org.springframework-version&amp;gt;&lt;/span&gt;4.2.5.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/org.springframework-version&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;spring-security-version&amp;gt;&lt;/span&gt;4.0.4.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/spring-security-version&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;org.aspectj-version&amp;gt;&lt;/span&gt;1.6.10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/org.aspectj-version&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;org.slf4j-version&amp;gt;&lt;/span&gt;1.6.6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/org.slf4j-version&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spring --&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spring core dependency --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-context&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${org.springframework-version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spring MVC dependency --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${org.springframework-version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt;  Maven 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pom.xml에 명시한 lib를 자동으로 다운&lt;/li&gt;
  &lt;li&gt;build process 자동화
    &lt;ul&gt;
      &lt;li&gt;compile -&amp;gt; test -&amp;gt; package(.war) -&amp;gt; install -&amp;gt; deploy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-web-deployment-descriptor-webxml&quot;&gt;2. Web Deployment Descriptor (web.xml)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;개념
    &lt;ul&gt;
      &lt;li&gt;web application의 설정을 위한 deployment descriptor&lt;/li&gt;
      &lt;li&gt;SUN에서 정해놓은 규칙에 맞게 작성해야 하며 모든 WAS에 대하여 작성 방법이 동일하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;역할
    &lt;ul&gt;
      &lt;li&gt;Deploy할 때 Servlet의 정보를 설정해준다.&lt;/li&gt;
      &lt;li&gt;브라우저가 Java Servlet에 접근하기 위해서는 WAS(Ex. Tomcat)에 필요한 정보를 알려줘야 해당하는 Servlet을 호출할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;정보 1) 배포할 Servlet이 무엇인지&lt;/li&gt;
          &lt;li&gt;정보 2) 해당 Servlet이 어떤 URL에 매핑되는지&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html&quot;&gt;구체적인 설정 내용&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;DispatcherServlet&lt;/li&gt;
      &lt;li&gt;ContextLoaderListener&lt;/li&gt;
      &lt;li&gt;Filter: encodingFilter, springSecurityFilterChain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee; http://java.sun.com/xml/ns/javaee/web-app_2.5.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
			/WEB-INF/spring/service-context.xml
			/WEB-INF/spring/dao-context.xml
			/WEB-INF/spring/security-context.xml
			/WEB-INF/spring/applicationContext.xml
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;dispatcher&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;/WEB-INF/spring/dispatcher-servlet.xml
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;dispatcher&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;forceEncoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;springSecurityFilterChain&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.DelegatingFilterProxy
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;springSecurityFilterChain&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-spring-mvc-configuration-files&quot;&gt;3. Spring MVC Configuration Files&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;# dispatcher-servlet.xml&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;주요 설정 내용:&lt;/em&gt; Controller 관련, ViewResolver, &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html&quot;&gt;mvc:annotation-driven 설정&lt;/a&gt; 등&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html&quot;&gt;Annotation 활성화&lt;/a&gt;
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:annotation-driven&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Component 패키지 지정
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;controller&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;이 패키지를 스캔하며 annotaion이 달린 것을 bean으로 생성하여 Container에 담아둔다.&lt;/li&gt;
      &lt;li&gt;참고) 이 내용은 service, dao 설정에도 필요하다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;context:component-scan base-package=&quot;service&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;context:component-scan base-package=&quot;dao&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정적인 data 위치 mapping
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:resources&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/resources/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/resources/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
또는 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:resources&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/static/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/static/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;web/resources/ 하위&lt;/strong&gt;에 정적인 데이터(css, js, img, font)가 존재&lt;/li&gt;
      &lt;li&gt;Controller가 처리할 필요 없이 해당 위치의 디렉터리에서 바로 접근할 수 있다.&lt;/li&gt;
      &lt;li&gt;HTTP GET 요청에서의 정적인 data에 바로 매핑이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ViewResolver
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prefix&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/views/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;suffix&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# applicationContext.xml&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;주요 설정 내용:&lt;/em&gt; DataSource 관련, properties 등록, SessionFactory, TransactionManager 등&lt;/li&gt;
  &lt;li&gt;properties 등록
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/props/jdbc.properties&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
동일 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:props/jdbc.properties&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;properties file에서 읽어와 주입한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DataSource 주입
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;destroy-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driverClassName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.driverClassName}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.url}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.username}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.password}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;어노테이션에 기반한 트랜잭션 동작의 설정을 활성화
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:annotation-driven&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Session Factory 등록 및 Transaction Manager 설정
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sessionFactory&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;packagesToScan&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;com.spring.model&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernateProperties&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;props&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.dialect&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQLDialect&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.hbm2ddl.auto&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;update&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.show_sql&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.format_sql&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/props&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sessionFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sessionFactory&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# service-context.xml&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;주요 설정 내용:&lt;/em&gt; Service 관련&lt;/li&gt;
  &lt;li&gt;Component 패키지 지정
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;context:component-scan base-package=&quot;service&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;이 패키지를 스캔하며 annotaion이 달린 것을 bean으로 생성하여 Container에 담아둔다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# dao-context.xml&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;주요 설정 내용:&lt;/em&gt; DAO 관련&lt;/li&gt;
  &lt;li&gt;Component 패키지 지정
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;context:component-scan base-package=&quot;dao&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;이 패키지를 스캔하며 annotaion이 달린 것을 bean으로 생성하여 Container에 담아둔다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# security-context.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;주요 설정 내용:&lt;/em&gt; Security 관련, BCryptPasswordEncoder 등
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;security:authentication-manager&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:authentication-provider&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:jdbc-user-service&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;data-source-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;users-by-username-query=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select username, password, enabled from users where username=?&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;authorities-by-username-query=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select username, authority from users where username=?&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:password-encoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;passwordEncoder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/security:password-encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:authentication-provider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:authentication-manager&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;security:http&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;auto-config=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use-expressions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:intercept-url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/admin/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hasRole('ROLE_ADMIN')&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;security:form-login&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;login-page=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;authentication-failure-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login?error&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security:http&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;passwordEncoder&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;MVC Architecture에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/11/05/mvc-architecture.html&quot;&gt;MVC Architecture 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Web Application Structure와 web.xml의 역할에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html&quot;&gt;Web Application Structure 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Template Engine에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/21/template-engine.html&quot;&gt;Template Engine 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm&quot;&gt;https://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://istoryful.tistory.com/5&quot;&gt;http://istoryful.tistory.com/5&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/20/spring-mvc-framework.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/20/spring-mvc-framework.html</guid>
        
        <category>springMVC</category>
        
        <category>mvc</category>
        
        <category>architecture</category>
        
        <category>structure</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>[Spring JDBC] JdbcTemplate의 기본 사용법</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Spring JDBC 기본 과정에 대해 이해한다.&lt;/li&gt;
    &lt;li&gt;JdbcTemplate의 기본 예제를 통해 사용법을 익힌다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;data-access-layer-이해하기&quot;&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/15/setting-for-db-programming.html&quot;&gt;Data Access Layer 이해하기&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/setting-for-dbprogramming/data-access-layer2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-jdbc-사용-과정&quot;&gt;Spring JDBC 사용 과정&lt;/h2&gt;
&lt;h3 id=&quot;1-datasource-설정&quot;&gt;1. DataSource 설정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/setting-for-dbprogramming/jdbc-process1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DB와의 연결을 위한 DB Server에 관한 정보(Property)를 설정한다.
    &lt;ul&gt;
      &lt;li&gt;설정 정보: url, driver, username, password&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 property file에 있는 값을 place holder을 통해 DataS래ucde의 속성으로 설정한 후 해당 BasicDataSource(DataSource interface 중 하나)를 bean으로 등록한다.
    &lt;ul&gt;
      &lt;li&gt;Spring JDBC를 사용하려면 먼저, DB Connection을 가져오는 DataSource를 Spring IoC 컨테이너의 공유 가능한 Bean으로 등록해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;생성된 BasicDataSource Bean을 Spring JDBC에 주입한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-dao에서의-처리-과정&quot;&gt;2. DAO에서의 처리 과정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/setting-for-dbprogramming/jdbc-process2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DataSource 설정(위의 과정)&lt;/li&gt;
  &lt;li&gt;위에서 bean으로 등록한 DataSource를 setter parameter를 통해 주입한다.
    &lt;ul&gt;
      &lt;li&gt;@Autowired에 의해 DataSource Type에 해당하는 bean을 찾아서 주입한다.&lt;/li&gt;
      &lt;li&gt;여기서는 DataSource interface 중 하나인 BasicDataSource를 찾아서 주입한다. (위의 과정에서 등록한 bean)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring JDBC 접근 방법 중 하나인 JdbcTemplate 객체를 생성하여 dataSource를 주입한다.&lt;/li&gt;
  &lt;li&gt;CRUD API를 제공한다.
    &lt;ul&gt;
      &lt;li&gt;1) SQL문을 작성한다.&lt;/li&gt;
      &lt;li&gt;2) RowMapper interface 구현을 통해 SQL의 결과(record type)를 객체(object type)에 매핑하여 결과를 리턴한다.
        &lt;ul&gt;
          &lt;li&gt;개발자는 mapRow()라는 interface method를 정의하여 결과를 처리한다.&lt;/li&gt;
          &lt;li&gt;한 번만 사용하는 기능의 경우 RowMapper를 익명 클래스로 작성하여 사용한다.&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/images/setting-for-dbprogramming/rowmapping-process.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;mark&gt;@Component(&quot;offersDao&quot;)와 @Autowired의 기능&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;해당 annotation이 없다면 xml을 통해 직접 bean을 등록하고 setter에 주입해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com/spring/props/jdbc.properties&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;destroy-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driverClassName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.driver}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.url}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.username}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.password}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- @Component: OffersDAO 클래스를 id를 offersDao로 하는 bean으로 직접 등록 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;offersDao&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.spring.OffersDAO&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- @Autowired: id가 dataSource(ref 값)인 bean을 찾아 OffersDao의 setDataSource에 주입 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;사전에 annotation을 찾아서 bean으로 등록하기 위한 설정이 필요하다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html&quot;&gt;참고 - Spring Annotation 활성화&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 annotation을 사용하면 framework이 자동으로 bean으로 등록하고 setter에 주입해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Component 패키지 지정: 해당 패키지를 스캔하여 Annotation이 붙은 클래스를 bean으로 등록 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.spring&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/context:component-scan&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com/spring/props/jdbc.properties&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;destroy-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driverClassName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.driver}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.url}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.username}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${jdbc.password}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 아래와 같은 설정 필요 없음 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;offersDao&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.spring.OffersDAO&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jdbc-template-사용법&quot;&gt;JDBC Template 사용법&lt;/h2&gt;
&lt;h3 id=&quot;queryforobject&quot;&gt;queryForObject&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Querying for an Integer
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 모든 학생의 수 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select count(*) from Student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Querying for an String
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 해당 학번(10)에 해당하는 학생의 이름 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select name from Student where id = ?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 위와 동일. hard coding&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Querying and returning an object(하나의 객체)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 해당 학번(10)에 해당하는 학생 객체 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select * from Student where id = ?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StudentMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// RowMapper interface의 구현 클래스 정의 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StudentMapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// interface method&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 

      &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Integer, String은 컴파일러가 해당 타입에 맞게 알아서 매핑해주지만 우리가 만든 객체는 알 수 없기 때문에 직접 Mapping Logic을 구현해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;query&quot;&gt;query&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Querying and returning multiple objects(여러 개 객체)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 모든 학생 객체 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select * from Student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StudentMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// RowMapper interface의 구현 클래스 정의 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StudentMapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// interface method&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 

      &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;update&quot;&gt;update&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Inserting a row into the table
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 이름이 Zara, 학번이 11인 학생을 삽입 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;insert into Student (name, age) values (?, ?)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Zara&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Updating a row into the table
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 학번이 10인 학생의 이름은 Zara로 수정 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;update Student set name = ? where id = ?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Zara&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Deleting a row into the table
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 학번이 20인 학생을 삭제 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;delete from Student where id = ?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;jdbcTemplateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Data Access Layer에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/15/setting-for-db-programming.html&quot;&gt;Data Access Layer 이해하기&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;Annotation 활성화에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html&quot;&gt;Spring Annotation 활성화&lt;/a&gt;를 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/spring/spring_jdbc_framework.htm&quot;&gt;https://www.tutorialspoint.com/spring/spring_jdbc_framework.htm&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/19/jdbctemplate-usage.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/19/jdbctemplate-usage.html</guid>
        
        <category>spring</category>
        
        <category>jdbc</category>
        
        <category>JdbcTemplate</category>
        
        
      </item>
    
      <item>
        <title>[Spring] Spring Annotation 활성화</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Annotation 기본 개념을 이해한다.&lt;/li&gt;
    &lt;li&gt;Annotation를 활성화할 수 있다.&lt;/li&gt;
    &lt;li&gt;annotation-driven, component-scan, annotation-config 차이를 이해한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;annotation-기본-개념&quot;&gt;Annotation 기본 개념&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;xml 설정이 너무 길어짐에 따라 그 대안으로 나타났다.&lt;/li&gt;
  &lt;li&gt;클래스/메서드/필드에 Annotation을 달아 그 자체로 설정이 가능하도록 한다.
    &lt;ul&gt;
      &lt;li&gt;단, xml이 우선순위가 더 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본적으로 활성화되지 않기 때문에 xml에 명시적인 활성화 작업이 필요하다.
    &lt;ul&gt;
      &lt;li&gt;IDE에서 지원한다. (체크하면 자동으로 추가)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;annotation-활성화&quot;&gt;Annotation 활성화&lt;/h2&gt;
&lt;h3 id=&quot;java-config&quot;&gt;Java config&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableWebMvc&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xml-config&quot;&gt;xml config&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Annotation 활성화 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:annotation-driven&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Component 패키지 지정 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/context:component-scan&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;annotation-driven-component-scan-annotation-config-차이&quot;&gt;annotation-driven, component-scan, annotation-config 차이&lt;/h2&gt;
&lt;h3 id=&quot;mvcannotation-driven&quot;&gt;mvc:annotation-driven&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 MVC 컴포넌트들을 그것의 디폴트 설정을 가지고 활성화하기 위해 사용된다.&lt;/li&gt;
  &lt;li&gt;이 태그는 &lt;strong&gt;Spring MVC가 @Controller에 요청을 보내기 위해 필요한 HandlerMapping과 HandlerAdapter를 bean으로 등록&lt;/strong&gt;한다.
    &lt;ul&gt;
      &lt;li&gt;이렇게 등록된 bean에 의해 요청 url과 컨트롤러를 매칭할 수 있다.&lt;/li&gt;
      &lt;li&gt;또한 컨트롤러(@Controller)에서는 @RequestMapping, @ExceptionHandler 등과 같은 주석을 통해 해당 기능을 사용할 수 있도록 한다.&lt;/li&gt;
      &lt;li&gt;근본적으로 @Controller 없이는 이 태그는 아무것도 하지 않는다고 할 수 있다.&lt;/li&gt;
      &lt;li&gt;bean을 생성하기 위해 xml 파일에 context:component-scan을 명시하면 이 태그를 포함하지 않아도 MVC 애플리케이션은 작동한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RequestMappingHandlerMapping?
    &lt;ul&gt;
      &lt;li&gt;요청 url과 매칭되는 컨트롤러(@Controller)를 검색하는 역할. 즉, 요청 url을 보고 어떤 컨트롤러가 처리할지 결정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RequestMappingHandlerAdapter?
    &lt;ul&gt;
      &lt;li&gt;컨트롤러의 실행 결과(요청을 처리한 결과)를 리턴하는 역할. Annotation 기반의 Controller 처리를 위해 반드시 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contextcomponent-scan&quot;&gt;context:component-scan&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정 패키지 안의 &lt;strong&gt;클래스들을 스캔하고, Annotation을 확인 후 bean 인스턴스를 생성&lt;/strong&gt;한다.
    &lt;ul&gt;
      &lt;li&gt;@Component @Controller @Service @Repository 등의 Annotation이 존재해야 bean을 생성할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이것의 장점 중 하나는 @Autowired와 @Qualifier Annotation을 인식할 수 있다.&lt;/li&gt;
  &lt;li&gt;component-scan을 선언했다면 context:annotation-config를 선언할 필요가 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contextannotation-config&quot;&gt;context:annotation-config&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext 안에 &lt;strong&gt;이미 등록된 bean들의 Annotation을 활성화&lt;/strong&gt; 하기 위해 사용된다.
    &lt;ul&gt;
      &lt;li&gt;bean들이 XML로 등록됐는지 혹은 패키지 스캐닝을 통해 등록됐는지는 중요하지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미 스프링 컨텍스트에 의해 생성되어 저장된 bean들에 대해서 @Autowired와 @Qualifier  Annotation을 인식할 수 있다.&lt;/li&gt;
  &lt;li&gt;component-scan 또한 같은 일을 할 수 있는데, context:annotation-config는 bean을 등록하는 작업을 하지 않는다.
    &lt;ul&gt;
      &lt;li&gt;즉, bean을 등록하기 위해 패키지를 안의 클래스를 스캔할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이 태그를 설정하면 @Required @Autowired @Resource @PostConstruct @PreDestroy @Configuration 기능을 각각 설정하지 않아도 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;mark&gt;참고&lt;/mark&gt; tx:annotation-driven&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;등록된 빈 중에서 @Transactional이 붙은 클래스/인터페이스/메소드를 찾아 트랜잭션 어드바이스를 적용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;mark&gt;참고&lt;/mark&gt; mvc:resources mapping&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정적인 data files들의 위치 mapping 해준다.
    &lt;ul&gt;
      &lt;li&gt;Controller가 처리할 필요 없이 해당 위치의 디렉터리에서 바로 접근할 수 있다.&lt;/li&gt;
      &lt;li&gt;HTTP GET 요청에서의 정적인 data에 바로 매핑이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/static/&quot; /&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;WebContent/webapp/static/(ex. image file, css, js, fonts)&lt;/li&gt;
      &lt;li&gt;web/static/(ex. image file, css, js, fonts)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;/resources/&quot; /&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;WebContent/webapp/resources/(ex. image file, css, js, fonts)&lt;/li&gt;
      &lt;li&gt;web/resources/(ex. image file, css, js, fonts)&lt;/li&gt;
      &lt;li&gt;jsp에서 사용하기 위해서
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/css/main.css&quot;&amp;gt;&lt;/code&gt; 추가&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://gmlwjd9405.github.io/2018/12/20/spring-mvc-framework.html&lt;/p&gt;
&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Annotation 종류에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html&quot;&gt;Spring Annotation의 종류&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc&quot;&gt;component-scan 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-config&quot;&gt;mvc:annotation-driven 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan&quot;&gt;https://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20551217/spring-support-for-controller-given-by-contextcomponent-scan-vs-mvcannot&quot;&gt;https://stackoverflow.com/questions/20551217/spring-support-for-controller-given-by-contextcomponent-scan-vs-mvcannot&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html</guid>
        
        <category>spring</category>
        
        <category>annotation</category>
        
        
      </item>
    
      <item>
        <title>[Error] Travis CI와 AWS s3 연동 시 오류</title>
        <description>&lt;h2 id=&quot;오류-내용&quot;&gt;오류 내용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oops, It looks like you tried to write to a bucket that isn't yours or doesn't exist yet. Please create the bucket before trying to write to it.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/error/travisci-awss3-connect-erorr-msg.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;AWS s3 버킷 퍼블릭 액세스 설정
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/error/travisci-awss3-connect-sol-1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새 퍼블릭 ACL 및 퍼블릭 객체 업로드 차단 - &lt;strong&gt;체크 해제&lt;/strong&gt; 후 저장
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/error/travisci-awss3-connect-sol-2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!-- # 관련된 Post
* []() --&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/jojoldu/blog-comments/issues/8&quot;&gt;https://github.com/jojoldu/blog-comments/issues/8&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/13/error-travisci-awss3-connect.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/13/error-travisci-awss3-connect.html</guid>
        
        <category>travis-ci</category>
        
        <category>aws</category>
        
        <category>error</category>
        
        
      </item>
    
      <item>
        <title>[Spring] Spring Annotation의 종류와 그 역할</title>
        <description>&lt;p&gt;&lt;span style=&quot;background-color: #e1e1e1&quot;&gt;계속해서 추가할 예정!&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;component&quot;&gt;@Component&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;component-scan을 선언에 의해 특정 패키지 안의 &lt;strong&gt;클래스들을 스캔하고, @Component Annotation이 있는 클래스에 대하여 bean 인스턴스를 생성&lt;/strong&gt;한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;controller-service-repository&quot;&gt;@Controller, @Service, @Repository&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@Component —구체화—&amp;gt; @Controller, @Service, @Repository&lt;/li&gt;
  &lt;li&gt;bean으로 등록&lt;/li&gt;
  &lt;li&gt;해당 클래스가 Controller/Service/Repository로 사용됨을 Spring Framework에 알린다.&lt;/li&gt;
  &lt;li&gt;참고) &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/22/webservlet-vs-controller.html&quot;&gt;@WebServlet vs @Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requestmapping&quot;&gt;@RequestMapping&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1) Class Level&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* an HTTP GET for /home */&lt;/span&gt; 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2) Handler Level&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllEmployees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* an HTTP POST for /home/employees */&lt;/span&gt; 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/employees&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;@RequestMapping에 대한 모든 매핑 정보는 Spring에서 제공하는 HandlerMapping Class가 가지고 있다.&lt;/li&gt;
  &lt;li&gt;1) Class Level Mapping
    &lt;ul&gt;
      &lt;li&gt;모든 메서드에 적용되는 경우&lt;/li&gt;
      &lt;li&gt;“/home”로 들어오는 모든 요청에 대한 처리를 해당 클래스에서 한다는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) Handler Level Mapping
    &lt;ul&gt;
      &lt;li&gt;요청 url에 대해 해당 메서드에서 처리해야 되는 경우&lt;/li&gt;
      &lt;li&gt;“/home/employees” POST 요청에 대한 처리를 addEmployee()에서 한다는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;: 해당 url로 요청이 들어오면 이 메서드가 수행된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: 요청 method를 명시한다. 없으면 모든 http method 형식에 대해 수행된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;restcontroller&quot;&gt;@RestController&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@Controller + @ResponseBody&lt;/li&gt;
  &lt;li&gt;@ResponseBody를 모든 메소드에서 적용한다.
    &lt;ul&gt;
      &lt;li&gt;메소드의 반환 결과(문자열)를 JSON 형태로 반환한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@Controller 와 @RestController 의 차이
    &lt;ul&gt;
      &lt;li&gt;@Controller
        &lt;ul&gt;
          &lt;li&gt;API와 view를 동시에 사용하는 경우에 사용&lt;/li&gt;
          &lt;li&gt;대신 API 서비스로 사용하는 경우는 @ResponseBody를 사용하여 객체를 반환한다.&lt;/li&gt;
          &lt;li&gt;view(화면) return이 주목적&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;@RestController
        &lt;ul&gt;
          &lt;li&gt;view가 필요없는 API만 지원하는 서비스에서 사용 (Spring 4.0.1부터 제공)&lt;/li&gt;
          &lt;li&gt;@RequestMapping 메서드가 기본적으로 @ResponseBody 의미를 가정한다.&lt;/li&gt;
          &lt;li&gt;data(json, xml 등) return이 주목적&lt;/li&gt;
          &lt;li&gt;즉, @RestController = @Controller + @ResponseBody&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;required&quot;&gt;@Required&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;setter method에 사용한다.&lt;/li&gt;
  &lt;li&gt;영향을 받는 bean property 구성 시 XML 설정 파일에 반드시 property를 채워야 한다. (엄격한 체크)
    &lt;ul&gt;
      &lt;li&gt;그렇지 않으면 BeanInitializationException 예외를 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Definition for student bean --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.tutorialspoint.Student&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Zara&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/spring/spring_required_annotation.htm&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;autowired&quot;&gt;@Autowired&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Type에 따라 알아서 Bean을 주입한다.&lt;/li&gt;
  &lt;li&gt;필드, 생성자, 입력 파라미터가 여러 개인 메소드(@Qualifier는 메소드의 파라미터)에 적용 가능&lt;/li&gt;
  &lt;li&gt;Type을 먼저 확인한 후 못 찾으면 Name에 따라 주입한다.
    &lt;ul&gt;
      &lt;li&gt;Name으로 강제하는 방법: @Qualifier을 같이 명시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/spring-framework/autowired-example.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TIP) Bean을 주입받는 방식 (3가지)
    &lt;ul&gt;
      &lt;li&gt;@Autowired&lt;/li&gt;
      &lt;li&gt;setter&lt;/li&gt;
      &lt;li&gt;생성자 (@AllArgsConstructor 사용) -&amp;gt; &lt;strong&gt;권장방식&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;qualifier&quot;&gt;@Qualifier&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;같은 타입의 빈이 두 개 이상이 존재하는 경우에 스프링이 어떤 빈을 주입해야 할지 알 수 없어서 스프링 컨테이너를 초기화하는 과정에서 예외를 발생시킨다.&lt;/li&gt;
  &lt;li&gt;이 경우 @Qualifier을 @Autowired와 함께 사용하여 정확히 어떤 bean을 사용할지 지정하여 특정 의존 객체를 주입할 수 있도록 한다.&lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/spring-framework/qualifier-example.png&quot; alt=&quot;&quot; /&gt;
        &lt;ol&gt;
          &lt;li&gt;xml 설정에서 bean의 한정자 값(qualifier value)을 설정한다.&lt;/li&gt;
          &lt;li&gt;@Autowired 어노테이션이 적용된 주입 대상에 @Qualifier 어노테이션을 설정한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resource&quot;&gt;@Resource&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.annotation.Resource&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;표준 자바(JSR-250 표준) Annotation으로, Spring Framework 2.5.* 부터 지원 가능한 Annotation이다.&lt;/li&gt;
  &lt;li&gt;Annotation 사용으로 인해 특정 Framework에 종속적인 어플리케이션을 구성하지 않기 위해서는 @Resource를 사용할 것을 권장한다.
    &lt;ul&gt;
      &lt;li&gt;@Resource를 사용하기 위해서는 class path 내에 jsr250-api.jar 파일을 추가해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;필드, 입력 파라미터가 한 개인 bean property setter method에 적용 가능&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/777&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;data-validation&quot;&gt;[Data Validation]&lt;/h2&gt;

&lt;h3 id=&quot;vaild&quot;&gt;@Vaild&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import javax.validation.Valid;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;@Size(max=10, min=2, message=”errMsg”)&lt;/li&gt;
  &lt;li&gt;@Email(message=”errMsg”)&lt;/li&gt;
  &lt;li&gt;@NotEmpty(message=”errMsg”)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;configuration&quot;&gt;[Configuration]&lt;/h2&gt;

&lt;h3 id=&quot;configuration-1&quot;&gt;@Configuration&lt;/h3&gt;

&lt;h3 id=&quot;enablewebsecurity&quot;&gt;@EnableWebSecurity&lt;/h3&gt;

&lt;h3 id=&quot;springbootapplication&quot;&gt;@SpringBootApplication&lt;/h3&gt;

&lt;h3 id=&quot;enablewebmvc&quot;&gt;@EnableWebMvc&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;restcontrolleradvice&quot;&gt;@RestControllerAdvice&lt;/h3&gt;

&lt;h3 id=&quot;exceptionhandler&quot;&gt;@ExceptionHandler&lt;/h3&gt;

&lt;h3 id=&quot;responsestatus&quot;&gt;@ResponseStatus&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;parameter를-받는-방법&quot;&gt;[Parameter를 받는 방법]&lt;/h2&gt;
&lt;h3 id=&quot;requestparam&quot;&gt;@RequestParam&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP GET 요청에 대해 매칭되는 &lt;strong&gt;request parameter&lt;/strong&gt; 값이 자동으로 들어간다.
    &lt;ul&gt;
      &lt;li&gt;url 뒤에 붙는 parameter 값을 가져올 때 사용한다.&lt;/li&gt;
      &lt;li&gt;Ex) ` http://localhost:8080/home?index=1&amp;amp;page=2`&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;위의 경우 GET /home?index=1&amp;amp;page=2와 같이 uri가 전달될 때 page parameter를 받아온다.&lt;/li&gt;
      &lt;li&gt;@RequestParam 어노테이션의 괄호 안의 문자열이 전달 인자 이름(실제 값을 표시)이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pathvariable&quot;&gt;@PathVariable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 요청에 대해 매칭되는 &lt;strong&gt;request parameter&lt;/strong&gt; 값이 자동으로 들어간다.
    &lt;ul&gt;
      &lt;li&gt;uri에서 각 구분자에 들어오는 값을 처리해야 할 때 사용한다.&lt;/li&gt;
      &lt;li&gt;Ex) ` http://localhost:8080/index/1`&lt;/li&gt;
      &lt;li&gt;REST API에서 값을 호출할 때 주로 많이 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/index/{idx}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deletePost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;idx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deletePost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;위의 경우 POST /index/{idx}와 같이 uri가 전달될 때 해당하는 구분자 {idx}를 받아온다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;참고&lt;/mark&gt; @RequestParam와 @PathVariable 동시 사용 예제&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user/{userId}/invoices&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listUsersInvoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	                                  &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateOrNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;위의 경우 GET /user/{userId}invoices?date=190101 와 같이 uri가 전달될 때&lt;/li&gt;
  &lt;li&gt;구분자 {userId}는 @PathVariable(“userId”)로,&lt;/li&gt;
  &lt;li&gt;뒤에 이어붙은 parameter는 @RequestParam(“date”)로 받아온다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requestbody&quot;&gt;@RequestBody&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;반드시 HTTP POST 요청에 대해서만 처리한다.
    &lt;ul&gt;
      &lt;li&gt;HTTP POST 요청에 대해 &lt;strong&gt;request body&lt;/strong&gt;에 있는 request message에서 값을 얻어와 매칭한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RequestData를 바로 Model이나 클래스로 매핑한다.
    &lt;ul&gt;
      &lt;li&gt;이를테면 JSON 이나 XML같은 데이터를 적절한 messageConverter로 읽을 때 사용하거나 POJO 형태의 데이터 전체로 받는 경우에 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;modelattribute&quot;&gt;@ModelAttribute&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@RequestParam과 비슷하다.
    &lt;ul&gt;
      &lt;li&gt;form 값&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;공용-생성일수정일을-위한-annotation&quot;&gt;[공용 생성일/수정일을 위한 Annotation]&lt;/h2&gt;
&lt;h3 id=&quot;enablejpaauditing&quot;&gt;@EnableJpaAuditing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JPA Auditing을 활성화한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mappedsuperclass&quot;&gt;@MappedSuperclass&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JPA Entity 클래스들이 BaseTimeEntity을 상속할 경우 필드들(createdDate, modifiedDate)도 컬럼으로 인식하도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;entitylistenersauditingentitylistenerclass&quot;&gt;@EntityListeners(AuditingEntityListener.class)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;BaseTimeEntity 클래스에 Auditing 기능을 포함한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;createddate&quot;&gt;@CreatedDate&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entity가 생성되어 저장될 때 시간이 자동으로 저장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lastmodifieddate&quot;&gt;@LastModifiedDate&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;조회한 Entity의 값을 변경할 때 시간이 자동으로 저장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;transactional&quot;&gt;@Transactional&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;메소드 내에서 Exception이 발생하면 해당 메소드에서 이루어진 모든 DB 작업을 초기화한다.
    &lt;ul&gt;
      &lt;li&gt;즉, save 메소드를 통해서 10개를 등록해야 하는데 5번째에서 Exception이 발생하면 앞에 저장된 4개 까지 모두 롤백한다.&lt;/li&gt;
      &lt;li&gt;(정확히 얘기하면, 이미 넣은걸 롤백시키는건 아니며, 모든 처리가 정상적으로 됐을때만 DB에 커밋하며 그렇지 않은 경우엔 커밋하지 않는 것이다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비지니스 로직과 트랜잭션 관리는 모두 Service에서 관리한다.
    &lt;ul&gt;
      &lt;li&gt;따라서 일반적으로 DB 데이터를 등록/수정/삭제 하는 Service 메소드는 @Transactional를 필수적으로 가져간다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jpa에서-제공하는-annotation&quot;&gt;[JPA에서 제공하는 Annotation]&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;JPA를 사용하면 DB 데이터에 작업할 경우 실제 쿼리를 날리지 않고 Entity 클래스의 수정을 통해 작업한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table&quot;&gt;@Table&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;엔티티 클래스에 매핑할 테이블 정보를 알려준다.&lt;/li&gt;
  &lt;li&gt;이 어노테이션을 생략하면 클래스 이름을 테이블정보로 매핑한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;entity&quot;&gt;@Entity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실제 DB의 테이블과 매칭될 클래스임을 명시한다.&lt;/li&gt;
  &lt;li&gt;즉, 테이블과 링크될 클래스임을 나타냅니다.
    &lt;ul&gt;
      &lt;li&gt;Entity Class&lt;/li&gt;
      &lt;li&gt;가장 Core한 클래스&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스 이름을 언더스코어 네이밍(_)으로 테이블 이름을 매칭한다.
    &lt;ul&gt;
      &lt;li&gt;Ex) SalesManage스.java -&amp;gt; sales_manager table&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TIP) Controller에서 쓸 DTO 클래스란
    &lt;ul&gt;
      &lt;li&gt;Request와 Response용 DTO는 View를 위한 클래스로, 자주 변경이 필요한 클래스이다.&lt;/li&gt;
      &lt;li&gt;Entity 클래스와 DTO 클래스를 분리하는 이유
        &lt;ul&gt;
          &lt;li&gt;View Layer와 DB Layer를 철저하게 역할 분리를 하는게 좋다.&lt;/li&gt;
          &lt;li&gt;테이블과 매핑되는 Entity 클래스가 변경되면 여러 클래스에 영향을 끼치게 되는 반면 View와 통신하는 DTO 클래스(Request/ Response 클래스)는 자주 변경되므로 분리해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;id&quot;&gt;@Id&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;해당 테이블의 PK 필드를 나타낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;generatedvalue&quot;&gt;@GeneratedValue&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;PK의 생성 규칙을 나타낸다.
    &lt;ul&gt;
      &lt;li&gt;TIP) 가능한 Entity의 PK는 Long 타입의 Auto_increment를 추천한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본값은 AUTO로, MySQL의 auto_increment와 같이 자동 증가하는 정수형 값이 된다.
    &lt;ul&gt;
      &lt;li&gt;스프링 부트 2.0에선 옵션을 추가하셔야만 auto_increment가 된다.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/295&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;column&quot;&gt;@Column&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;테이블의 컬럼을 나타내면, 굳이 선언하지 않더라도 해당 클래스의 필드는 모두 컬럼이 된다.
    &lt;ul&gt;
      &lt;li&gt;@Column을 생략하면 필드명을 사용해서 컬럼명과 매핑하게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이 Annotation을 사용하는 이유는, 기본값 외에 추가로 변경이 필요한 옵션이 있을 경우 사용한다.&lt;/li&gt;
  &lt;li&gt;Ex) 문자열의 경우 VARCHAR(255)가 기본값인데, 사이즈를 500으로 늘리고 싶거나(ex: title), 타입을 TEXT로 변경하고 싶거나(ex: content) 등의 경우에 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lombok-library-annotation&quot;&gt;[Lombok Library Annotation]&lt;/h2&gt;

&lt;h3 id=&quot;noargsconstructor&quot;&gt;@NoArgsConstructor&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기본생성자를 자동으로 추가한다.&lt;/li&gt;
  &lt;li&gt;access = AccessLevel.PROTECTED
    &lt;ul&gt;
      &lt;li&gt;기본생성자의 접근 권한을 protected로 제한&lt;/li&gt;
      &lt;li&gt;생성자로 protected Posts() {}와 같은 효과&lt;/li&gt;
      &lt;li&gt;Entity 클래스를 프로젝트 코드상에서 기본생성자로 생성하는 것은 막되, JPA에서 Entity 클래스를 생성하는것은 허용하기 위해 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;allargsconstructor&quot;&gt;@AllArgsConstructor&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;모든 필드 값을 파라미터로 받는 생성자를 추가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requiredargsconstructor&quot;&gt;@RequiredArgsConstructor&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 추가한다.
    &lt;ul&gt;
      &lt;li&gt;final: 값이 할당되면 더 이상 변경할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getter&quot;&gt;@Getter&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;클래스 내 모든 필드의 Getter 메소드를 자동으로 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setter&quot;&gt;@Setter&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Controller에서 @RequestBody로 외부에서 데이터를 받는 경우엔 기본생성자 + set메소드를 통해서만 값이 할당된다.&lt;/li&gt;
  &lt;li&gt;그래서 이때만 setter를 허용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tostring&quot;&gt;@ToString&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ToString(exclude = &quot;password&quot;)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;특정 필드를 toString() 결과에서 제외한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스명(필드1명=필드1값, 필드2명=필드2값, …) 식으로 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;equalsandhashcode&quot;&gt;@EqualsAndHashCode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;equals와 hashCode 메소드 오버라이딩&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pass&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 부모 클래스의 필드가 다름&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pass&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// callSuper = true 이면 false, callSuper = false 이면 true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@EqualsAndHashCode(callSuper = true)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;callSuper 속성을 통해 equals와 hashCode 메소드 자동 생성 시 부모 클래스의 필드까지 감안할지 안 할지에 대해서 설정할 수 있다.&lt;/li&gt;
      &lt;li&gt;즉, callSuper = true로 설정하면 부모 클래스 필드 값들도 동일한지 체크하며, callSuper = false로 설정(기본값)하면 자신 클래스의 필드 값들만 고려한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;builder&quot;&gt;@Builder&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;어느 필드에 어떤 값을 채워야 할지 명확하게 정하여 생성 시점에 값을 채워준다.&lt;/li&gt;
  &lt;li&gt;TIP) 생성자와 빌더의 차이
    &lt;ul&gt;
      &lt;li&gt;생성 시점에 값을 채워주는 역할은 똑같다.&lt;/li&gt;
      &lt;li&gt;하지만 빌더를 사용하면 어느 필드에 어떤 값을 채워야 할지 명확하게 인지할 수 있다.&lt;/li&gt;
      &lt;li&gt;해당 클래스의 빌더 패턴 클래스를 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;생성자 상단에 선언 시 생성자에 포함된 필드만 빌더에 포함된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data&quot;&gt;@Data&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@Getter @Setter @EqualsAndHashCode @AllArgsConstructor 을 포함한 Lombok에서 제공하는 필드와 관련된 모든 코드를 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;java-config를-위한-annotation&quot;&gt;[Java Config를 위한 Annotation]&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slipp.net/wiki/pages/viewpage.action?pageId=22282242&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;configuration-2&quot;&gt;@Configuration&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import org.springframework.context.annotation.Configuration;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enabletransactionmanagement&quot;&gt;@EnableTransactionManagement&lt;/h3&gt;

&lt;h3 id=&quot;propertysourceclasspathapplication-propertiesxml&quot;&gt;@PropertySource(“classpath:application-properties.xml”)&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-aop를-위한-annotation&quot;&gt;[Spring AOP를 위한 Annotation]&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jojoldu.tistory.com/71?category=635883&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;enableaspectjautoproxy&quot;&gt;@EnableAspectJAutoProxy&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import org.springframework.context.annotation.EnableAspectJAutoProxy;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;aop&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aspect&quot;&gt;@Aspect&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import org.aspectj.lang.annotation.Aspect;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution( void spring.aop.*.sound())&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectSound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// signature&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectSound()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aboutToSound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before advice: about to sound() &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectSound()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterSound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;after advice: after sound() &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pointcut&quot;&gt;@PointCut&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;execution&lt;/li&gt;
  &lt;li&gt;xml에서의 id: method 이름 // signature&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;before-이전&quot;&gt;@Before (이전)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;어드바이스 타겟 메소드가 호출되기 전에 어드바이스 기능을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;after-이후&quot;&gt;@After (이후)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;타겟 메소드의 결과에 관계없이(즉 성공, 예외 관계없이) 타겟 메소드가 완료 되면 어드바이스 기능을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;around-메소드-실행-전후&quot;&gt;@Around (메소드 실행 전후)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;어드바이스가 타겟 메소드를 감싸서 타겟 메소드 호출전과 후에 어드바이스 기능을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;afterreturning-정상적-반환-이후&quot;&gt;@AfterReturning (정상적 반환 이후)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;타겟 메소드가 성공적으로 결과값을 반환 후에 어드바이스 기능을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;afterthrowing-예외-발생-이후&quot;&gt;@AfterThrowing (예외 발생 이후)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;타겟 메소드가 수행 중 예외를 던지게 되면 어드바이스 기능을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;관련된-post&quot;&gt;관련된 Post&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Annotation 활성화 방법에 대해 알고 싶으시면 &lt;a href=&quot;https://gmlwjd9405.github.io/2018/12/18/spring-annotation-enable.html&quot;&gt;Spring Annotation 활성화&lt;/a&gt;을 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/255?category=635883&quot;&gt;https://jojoldu.tistory.com/255?category=635883&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/151&quot;&gt;https://jeong-pro.tistory.com/151&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc&quot;&gt;component-scan 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-config&quot;&gt;mvc:annotation-driven 참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.daleseo.com/lombok-popular-annotations/&quot;&gt;lombok annotation 참고&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html</guid>
        
        <category>spring</category>
        
        <category>annotation</category>
        
        
      </item>
    
      <item>
        <title>[IntelliJ] IntelliJ에서 Lombok 설정하기</title>
        <description>&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;IntelliJ에서 Lombok Dependency 설정하기&lt;/li&gt;
    &lt;li&gt;IntelliJ에서 Lombok Plugin 설정하기&lt;/li&gt;
    &lt;li&gt;IntelliJ에서 Enable annotation 설정하기&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-lombok-dependency-설정&quot;&gt;1. Lombok Dependency 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.projectlombok/lombok&quot;&gt;https://mvnrepository.com/artifact/org.projectlombok/lombok&lt;/a&gt;  참고&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;maven&quot;&gt;Maven&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.18.4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gradle&quot;&gt;Gradle&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// https://mvnrepository.com/artifact/org.projectlombok/lombok
provided group: 'org.projectlombok', name: 'lombok', version: '1.18.4'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-lombok-plugin-설정&quot;&gt;2. Lombok Plugin 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;최초로만 설정하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;설정
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: File &amp;gt; Setting (Ctrl+Alt+S)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MacOS&lt;/strong&gt;: Preferences (Cmd + ,)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Plugins 선택 후 Browse repositorie에서 lombok 검색
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/lombok/plugin1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lombok Plugin (TOOLS INTEGRATION) Install
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/lombok/plugin2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IntelliJ Restart
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/lombok/plugin3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-enable-annotation-설정&quot;&gt;3. Enable annotation 설정&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;설정
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: File &amp;gt; Setting (Ctrl+Alt+S)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;MacOS&lt;/strong&gt;: Preferences (Cmd + ,)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build, Execution, Deployment &amp;gt; Compiler &amp;gt; Annotation Processings
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/lombok/enable1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Enable annotation processing 체크
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/images/lombok/enable2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.projectlombok/lombok&quot;&gt;https://mvnrepository.com/artifact/org.projectlombok/lombok&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://ilovejinwon.tistory.com/49&quot;&gt;http://ilovejinwon.tistory.com/49&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
        <link>http://gmlwjd9405.github.io/2018/11/29/intellij-lombok.html</link>
        <guid isPermaLink="true">http://gmlwjd9405.github.io/2018/11/29/intellij-lombok.html</guid>
        
        <category>intellij</category>
        
        <category>lombok</category>
        
        <category>setting</category>
        
        
      </item>
    
  </channel>
</rss>
