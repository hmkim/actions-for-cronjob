<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>설모의 기록</title>
<link>https://hyeooona825.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 15:02:03 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>HA_Kwon</managingEditor>
<image>
<title>설모의 기록</title>
<url>http://cfile29.uf.tistory.com/image/998DC9425C5DA0D011D92B</url>
<link>https://hyeooona825.tistory.com</link>
<description></description>
</image>
<item>
<title>naver tech concert : front end 참여 후기</title>
<link>https://hyeooona825.tistory.com/95</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;SOPT라는 동아리를 통해 이번 04월 11일에 naver 그린팩토리에서 열린 &lt;a href=&quot;http://techcon.naver.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;b&gt;네이버 테크 콘서트&lt;/b&gt;&lt;/a&gt;가 열린다는 소식을 듣게 되었다. 업무와 관련된 외부교육이나 컨퍼런스를 휴가 사용없이 참석할 수 있게 해주는 회사 덕분에 (&lt;b&gt;좋은 회사!!&lt;/b&gt;) 사전신청을 한 후에 참여할 수 있었다!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/b6JpNH/btquxn0Ksf5/LsOrCkmabjnq3fksO5LPK1/img.gif' data-lightbox='lightbox' data-alt='(이미지 출처 :&amp;amp;nbsp;https://tenor.com/view/stormcastle-happy-dance-dancing-gif-12190249) 너무 신나서..'&gt;&lt;img src='https://k.kakaocdn.net/dn/b6JpNH/btquxn0Ksf5/LsOrCkmabjnq3fksO5LPK1/img.gif' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fb6JpNH%2Fbtquxn0Ksf5%2FLsOrCkmabjnq3fksO5LPK1%2Fimg.gif' data-filename=&quot;tenor.gif&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;(이미지 출처 :&amp;nbsp;https://tenor.com/view/stormcastle-happy-dance-dancing-gif-12190249) 너무 신나서..&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;아래의 글에서 네이버 테크 콘서트를 참여한 후기를 남겨보려 한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;b&gt;이주용님 (네이버 스마트에디터 원) - 플랫폼 UI 개발 전략의 모든 것&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 플랫폼이란? 공통의 활용 요소를 바탕으로 본연의 역할도 수행하지만, 보완적인 파생 제품, 서비스를 개발할 수 있는 기반&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 초반엔 전략보단 퍼포머스 위주로 개발을 진행했다. &lt;br /&gt;&amp;nbsp; 1. 서비스 구분없이 모든 스타일이 포함된 css &lt;br /&gt;&amp;nbsp; 2. 여러 서비스의 요구사항을 한 css 에 합쳤기 때문에 최종 산출물인 css 가 불필요하게 커지는 결과가 되었다. &lt;br /&gt;&amp;nbsp; 3. 커스텀 및 확장을 고려하지 않음 &amp;rarr; 플랫폼 css 와 서비스 css 간 간섭이 발생하고 스타일의 우선 순위 관리가 어려웠다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 플랫폼 UI 설계에서 중요한 것 &lt;br /&gt;&amp;nbsp; 1. UI 공통화는 디자인 중심이 아닌 기능 중심으로 이루어져야 한다. &lt;br /&gt;&amp;nbsp; 2. 조건 및 상태에 따라 다른 스타일이 적용 되어야 한다. &lt;br /&gt;&amp;nbsp; 3.&amp;nbsp; 각기 다른 요구사항으로 빠르고 쉽게 적용할 수 있어야 한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- css preprocessor : 시간이 많이 드는 작업들을 간소화시켜주는 도구 ex) sass, post css 등-&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 공통 요소의 분리&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 기능 중심으로 분석&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 일부 UI 가 다른 경우는 전체 스펙으로 구현 가능한지 검토&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 동적인 UI 스타일 로직&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. @include @mixin, @each 을 사용해 여러 서비스에 따라 달라지는 css 를 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 초반과 달라진점&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 여러 서비스의 요구사항을 하나의 css 로 사용했다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 공통 스타일이 중심이 되고, 각 서비스의 요구사항을 커스터마이징 한 css 를 추출&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 모듈화 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 각각의 요소가 하는 기능에 집중해 모듈화 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 현재의 요구사항에 맞게 최소한의 기능으로 모듈화 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 같은 기능을 하는 요소는 동일한 HTML 구조를 갖도록 한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 설정과 공통 코드 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 간격, 색상, 서체 등 서비스별로 변경이 쉽도록 설정(config)으로 관리한다. &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 반복적인 코드는 css preprocessor 기능을 활용 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 연관된 ui 및 수치는 공통으로 묶는다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 모든 요구사항을 플랫폼의 공통 코드로 소화할 수 는 없다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 플랫폼의 공통코드는 불변이 아니며 지속적인 리팩토링이 필요하다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;b&gt;한재엽님 (라인 파이낸셜 플러스) - 주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 성장해야 하는 부분&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 스페셜 리스트 : 성능에 대한 전문가, 특정 라이브러리의 전문가, 데이터 시각화 전문가&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 제너럴 리스트 : 분야에 대한 이해, 여러 언어에 대한 이해, 여러 플랫폼에 대한 이해&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 소프트스킬 : 스펙분석, 일정 예측, 리스크 관리, 설계, 커뮤니케이션, 협업에 대한 이해, 사업에 대한 이해&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 왜 성장해야 하는가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 자기만족&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 높은 연봉&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 팀원에게 피해를 끼치지 않기 위해&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 유명해지기 위해&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 회사로부터 갑질을 당하면 다른 곳으로 이직하기 위해&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 6. 좋은 개발자가 되기 위해&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 좋은 개발자란... 좋은 개발자가 되기 위해선...&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 한재엽님은 스페셜 리스트가 되는 것을 성장하는 것의 목표로 잡았다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 성장해야하는 이유부터 정리하라&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 그것을 바탕으로 어느 쪽으로 성장하고 싶은지 구체화하라.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 어떻게 성장해야 하는가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 출근 전, 퇴근 후, 주말에 학습해라&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 사이드 프로젝트를 해라&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 개발관련 도서를 독파&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 블로그 좋다&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 알고리즘도 하루에 한 문제씩 풀기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; =&amp;gt; 다 좋지만 이 모든 것을 이루기엔 시간이 부족하다!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;span style=&quot;letter-spacing: 0px;&quot;&gt;- 회사에서 성장하기?&lt;br /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; 1. 업무를 소비하지 말자&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 개인 프로젝트의 함정 (예 : 버그 무시, 디바이스 이슈)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 삽집을 많이 하자 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;rarr; 해결해야 할 문제라고만 생각하지 말자&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;nbsp;&amp;rarr; (&lt;/span&gt;문제 원인 파악 &amp;rarr; 학습 &amp;rarr; 문제 해결) 이 과정이 노하우가 되고, 노하우가 쌓여 전문성이 된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 질문을 잘 하자 바보같은 질문은 없어도 성의없는 질문은 있다. &amp;rarr; 동료의 시간을 낭비하지 마라 질문 전에는 질문을 준비하기 어떤 상황인지 구체적으로 물어보기&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 문서화를 잘하자 트러블 슈팅&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 나는 어쩌다 이 버그를 마주했는가&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 그 원인은 무엇이었는가&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 그래서 어떤 시도를 해보았나?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 그래서 최종적으로는 어떻게 해결했나&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 오픈 소스 ISSUE TEMPLATE 을 참고하자&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 팀의 생산성을 높이자.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;b&gt;김민태님 (우아한형제들) - 일 만드는 개발자 vs 일 부풀리는 개발자&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;요구사항은 어디까지 수용해야 할까? 에 대한 고민상담을 들은 적이 있다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 직업인 vs 직장인?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 직업인 : 직업에 대한 프로페셔널을 외부에 발산할 수 있는 사람&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 직장인 : 월급쟁이 &amp;rarr; 내가 일을 열심히 하지는 않아도 적당히 하는(?) 사람&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 습관은 관성이 되고, 관성은 도전을 싫어하지. 우리 모두 이렇게 꼰대가 된다... &amp;rarr; 건강하고 건전한 마인드를 키우자&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 예외는 사람이 만든다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 요구사항은 결국 사람이 만들어내고 분석하고 계획하고 만들어가는 사람 또한 사람이다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 다른 분야의 일을 잘 모른다는 전제하에 질문을 많이하면 더 좋은 제품을 만들 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;내가 그 분야를 많이 안다고 생각하지마라. (예 : 디자인, 기획 등)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 모든 것에는 의도가 있는데 (각자가 심어놓은 의도) 그걸 알리지 않고 넘어가면 제품의 퀄리티가 높아지지 않는다. 그걸 밸런스를 잘 맞춰주는게 개발자다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 본인이 생각했을 때 제품에 좋은 영향을 준다면 그 요구사항을 수용해야 한다. (&lt;b&gt;product 의 product 에 의한 product 을 위한&lt;/b&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 동료를 위한 개발자가 되어라&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- (민태님은) 어떤 개발자가 되고 싶은가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 제품의 품질을 고민하는 개발자&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 품질은 함께 만들어가는 것임을 아는 개발자&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 품질에 기여하고 싶은 개발자&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- &lt;b&gt;신입 때 좋은 습관을 길들일 수 있는 최적의 시기이기 때문에 처음부터 좋은 회사를 선택하는 것이 좋다.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;b&gt;한장현님 (카카오뱅크) - 빠르게 훑어보는 웹 개발 트렌드&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 서버중심 개발 &amp;rarr; 클라이언트 중심 개발 &amp;rarr; 고도화&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 웹 개발 트랜드 ( &lt;a href=&quot;https://github.com/devJang/developer-roadmap&quot;&gt;https://github.com/devJang/developer-roadmap&lt;/a&gt; )&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 서버 중심으로 개발 : 미리 만들어 두거나 서버에서 만든 웹페이지를 제공&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 클라이언트 중심으로 개발 : 페이지를 부분적으로 갱신, 서버는 API 역할에 집중 (jquery, ajax 출시 시작부터) &amp;rarr; 일단 클라이언트를 준비하고, 추가로 필요한 데이터를 클라이언트가 주도적으로 요청해서 이미 화면에 떠있는 페이지 부분 추가 ( DOM 에 적극적으로 개입)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 고도화 : 프론트엔드 로직이 복잡해지면서 라이브러리 적극 활용 &amp;rarr; 웹 기술로 native 앱을 만들어보자(native script). 오프라인일 때도 실행되게 하자(pwa). 웹 앱을 데스크탑에 설치해보자(node-webkit, electron).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 요즘 웹 개발&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 프레임워크, 라이브러리 적극 활용 (리액트, 앵귤러, 뷰 / bootstrap, angular material, clarity)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. component 기반으로 개발 &amp;rarr; 역할에 맞게 추상화된 DOM Element&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 템플릿 : HTML&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 스타일 : css, scss, styl&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 로직 : javascript, typescript&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;rarr; 위의 세개를 합쳐 컴포넌트(.jsx, .tsx, .vue) &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;rarr; 빌드(babel, webpack, tsc, parcel) 하면 javascript, css 가 나옴 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;rarr; 빌드된 결과를 웹 브라우저에서 실행&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 6. 개발 툴 : git, github&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 7. UI &amp;amp; UX 디자인 시스템&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 프론트엔드 개발 트렌드는 빠르게 변하기 때문에 계속 찾아보고 공부해야 한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- full-stack 에는 물리적인 한계가 존재한다. 전문분야를 선택하는 것이 효율적일 수 있다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;b&gt;최현철님 (네이버) - 데이터 상태관리. 그것을 알려주마&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 스토어 관리가 힘들다 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp;1. 비동기적으로 데이터가 바뀌기 때문에 데이터 관리가 중요하다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 리덕스 : 상태를 관리하기 위한 하나의 아키텍처, 툴 이라고 보면 된다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- jQuery 와 상태관리&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. jquery 개발은 DOM 에 jquery 로 동작을 입히는 것&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. DOM 이 베이스&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. element 에 상태를 저장&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 서로 다른 element의 상태변화 추적이 어렵다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 이러한 이유로 유지보수가 커지고 레거시가 점차 커진다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- angularJS 상태관리&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 기존 DOM 제어방식은 변경이 필요한 대상 DOM 요소를 먼저 선택(document.getElementById() 와 같이) 하고 필요한 작업을 수행하는 형태&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. angularJS 는 출력할 데이터에 초점을 맞추어 작업이 수행되며, 데이터 값이 변경되면 같이 변경된다. 따라서 DOM 에 접근해 값(상태)를 변경시키는 코드가 없는데도 뷰가 변경된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 상태가 언제 왜 어떻게 바꼈는지는 알기가 어렵다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- Redux 와 상태관리&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 상태(데이터)를 언제, 왜, 어떻게 변화했는지 알기가 어려움&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. (flux) view 는 store 의 상태를 읽기만 하고, 업데이트 할 경우에는 action 을 수행해 dispatcher 를 통해 수정&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. action 을 통해 상태가 업데이트 되기 때문에 로그 확인이 쉽고, 항상 데이터가 일관성있게 유지된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 문제점 : 많은 보일러 플레이트 / 과한 기술..? / 어렵다....&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- FE 앱은 상태(데이터) 들의 유기적인 집합체&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 상태관리는 DOM 의 변화와 비동기 동작 간의 개념 충돌 등 여러 이슈가 발생했다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 관점의 변화가 필요하고, 이에 따라 개발 방식 또한 변화 되어야함&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 하지만 현재는 레거시와 angularJS, redux 등이 혼재하기 때문에 경우에 따라 빠르게 관점의 적응이 필요&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 상태 관리 방법은 앱의 전체 구조, 아키텍처를 결정하기 때문에 프로젝트 초기에 치열하게 고민해야한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;b&gt;손찬욱님 (네이버) - 오늘부터 나도 FE 성능 분석가&lt;/b&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- FE 성능 분석가의 관심사는?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 사용자 입력에 얼마나 빠르게 반응 할 수 있나? (LAI : loading and interaction)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 초기 로딩 속도(얼마나 빨리 페이지를 볼 수 있나?)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 인터렉션 속도 (스크롤 버벅, 키보드 입력할 때마다 깜빡, 애니메이션 진행될 때 깜빡)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 성능 개선 작업 어떻게 할 것인가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 대상 선정하기 (숲을 보자)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 가장 많이 사용하는 화면 요소는 무엇인가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 서비스에서 사용자에게 가치있는 화면은 무엇인가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 개선 프로세스&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 측정 (어디가 문제야? 어디가 느린 곳이야?)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 6. 분석&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 7. 최적화&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; =&amp;gt; 이 사이클이 반복&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 성능 개선 작업 시작하기 1&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 초기 로딩속도 개선하기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;span style=&quot;letter-spacing: 0px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;웹 서비스 로딩에 대한 이해 필요 ( url 주소로 요청, html 을 string 으로 받아.... 등등)&lt;br /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; 2. waterfall 차트 개선하기 (높이를 줄이고, 폭을 줄이고, 간격을 땡긴다)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. js, css 파일을 나눈것을 합친다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. 여러 이미지를 하나의 request 로 함치기(sprite 기법)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. 캐싱되지 않아도 될 이미지를 html 요청에 포함시켜서 요청&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 6. 초기 로딩 시 불필요 없는 자원은 삭제하거나 뒤로 (lazy)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 7. request 를 줄여야하는 이유는 호스트당 동시에 받을 수 있는 요청의 수는 제한되어 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 8. request 시간 줄이기(폭 줄이기)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 9. request 정보에 대해 알아야 할 필요가 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 10. ttfb(time to first byte) 가 높다면 서버 비즈니스 로직을 살펴볼 필요가 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 11. content download 속도 줄이기 (js, css)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 12. 가장 효과적인 것은 큰 이미지 줄이기 (네트워크 비용, 렌더링 비용이 크다)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- css 가 불러진 다음에 css 에서 사용하는 폰트, 이미지가 로딩.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;따라서 (html &amp;rarr; css &amp;rarr; font, image) 가 로딩 순서 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;rarr; head 태그 안에 preload 를 사용하면 css 와 함께 로딩할 수 있음&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- HTTP2 에 Server Push 기능이 있다. HTML 과 함께 js, css, 이미지 로딩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 총체적으로 점검하기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 체감 속도 높이기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;First Paint(FP): HEAD 태그 종료 후&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;First Meaningful Paint(FMP): Hero 엘리먼트가 보이는 시기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;Time to Interactive&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. 균형감 찾기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. 각각의 request 를 균등한 크기를 맞추기 (튀는 놈을 없애자)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;- 성능 개선 작업 시작하기2&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. CPU 도움 받기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;javascript 가 DOM 을 건들면 기본적으로 main thread dp dmlgo rendering pipeline 이 동작 rendering pipeline (javascript &amp;rarr; style chrome devtool 에서 (computed attribute 를 계산하는 시간) &amp;rarr; layout &amp;rarr; paint &amp;rarr; composite)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://csstriggers.com/&quot;&gt;https://csstriggers.com/&lt;/a&gt; 참고&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. GPU 도움 받기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;composite : 웹페이지는 하나의 거대한 레이어이며 GPU 는 각각의 레이어를 합치는 작업을 한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;GPU 의 도움을 받기 위해 레이어를 만든다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&lt;span style=&quot;letter-spacing: 0px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;gt; 브라우저가 규칙에 따라 레이어를 구성&lt;br /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;gt; 명시적으로 레이어를 구성&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;GPU 의 side effect&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;gt; 레이어를 초기 구성하는 작업은 CPU 가 진행&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;gt; 레이어를 원래 비트맵 정보를 복사하기 때문에 2배의 작업이 필요&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;60fps 보장하기&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;gt; 렌더링 파이스가 계속해서 발생하는 경우 프레임은 16ms 내에 완료되어야 한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;gt; 애니메이션을 위해서는 requestAnimationFrame 으로 16ms 주기를 보장&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;rarr;&amp;nbsp;&lt;/span&gt;DOM 건드리지 않는 JS 코드 실행 시간도 16ms 유지하자&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;렌더과정&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 1. 서버로부터 HTML 문자열을 Stream 으로 받음(렌더 레이어를 바탕으로 렌더링을 진행)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 2. &amp;lt;head&amp;gt; 태그에 포함된 자원을 병렬로 다운로드&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 3. &amp;lt;head&amp;gt; 태그부터 화면을 그리기 시작&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 4. &amp;lt;body&amp;gt; 태그부터 화면을 그리기 시작&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 5. DOM 구성이 완료되면 DOMContentLoaded 이벤트 발생&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;&amp;nbsp; &amp;nbsp; 6. 모든 자원의 로딩 완료되면 load 이벤트 발생 ( 이미지가 로딩 완료된 시점)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: 'Nanum Gothic';&quot;&gt;( defer : DOM 제어와 관련이 있는 스크립트 /&amp;nbsp;async : 의존성이 없는 스크립트 )&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;느낀점 : 오랜만에 컨퍼런스를 참여하게 되었고, 개인적으로는 &lt;b&gt;학습의 필요성과 그동안의 나태함을 반성&lt;/b&gt;한 계기가 되었다. 다시 공부를 시작해야겠다!&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>일상</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/95</guid>
<comments>https://hyeooona825.tistory.com/95#entry95comment</comments>
<pubDate>Mon, 15 Apr 2019 00:19:02 +0900</pubDate>
</item>
<item>
<title>2018년도 회고</title>
<link>https://hyeooona825.tistory.com/94</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;다시 1년이 지나 회고를 쓰는 날이 오게되다니..&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;2018년은&amp;nbsp;내 인생의 2막을 시작하게 된 계기가 되었다. 졸업하기도 전에 취업에 성공해 조금 더 여유로워졌으며, 그 덕에 좋아하는 사람들도 많이 만나고 여행도 많이 다닐 수 있었다. 두 번의 인턴 생활을 통해 성격도 많이 바뀌었고, 생각하는 관점도 많이 바뀌게 됐다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;아래의 글에서 2018년을 정리해보았다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;카카오게임즈 퇴사&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;나는 2017년 7월부터 카카오게임즈 스낵게임 클라이언트&amp;nbsp;개발 인턴을 시작했다. 중간에 계약 연장이 되어 총 8개월을 근무하였으며, 4학년 복학을 위해 퇴사를 하게 되었다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;카카오게임즈에 근무하며 내가 많이 변했다. 게임을 좋아하지도 않던 내가 여러 게임을 만들면서 게임에 대한 인식이&amp;nbsp;많이 바뀌었다. 개발적으로는 깊게 공부해보고 싶었던 자바스크립트를 '사용'할 줄 아는 개발자가 되었으며 개발에 대한 자신감을 가지게 되었다. 마지막으로 '어떤 회사라도 입사했으면 좋겠다' 했던 마인드에서&amp;nbsp;'내가 입사할 회사와 근무할 팀의 분위기가 카카오게임즈 퀸스튜디오같은 분위기였으면 좋겠다' 라는 목표&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;도 생겼다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;정말 아무것도 모르고 성장하고 싶다는 마음 하나만으로 입사해 초반에는 채찍질을 많이 받으며 공부하고 게임&amp;nbsp;개발을 시작했다. 그런 팀장님의 교육(?) 스타일이 나에게 잘 맞았고 &lt;/span&gt;&lt;strike&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;(초반에는 조금 벅찼지만..ㅎ )&lt;/span&gt;&lt;/strike&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;, 어느덧 내 코드를 믿어주는 팀장님의 모습에 뿌듯함을 느꼈었다. &lt;/span&gt;&lt;strike&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;(지극히 내 생각..)&lt;/span&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99FC36455C21C8A60A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;206ECDC7-1F0C-4908-97E0-6F5EA7401EE6.png&quot; height=&quot;158&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9933B1455C21C8A60F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;컴뱃.png&quot; height=&quot;158&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9987F2455C21C8A70D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;프렌즈뽑기.jpg&quot; height=&quot;159&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993B62455C21C8A845&quot; filemime=&quot;image/jpeg&quot; filename=&quot;다람쥐.jpg&quot; height=&quot;159&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994E76455C21C8A908&quot; filemime=&quot;image/jpeg&quot; filename=&quot;마시멜로.jpg&quot; height=&quot;159&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995952455C21C8AA07&quot; filemime=&quot;image/jpeg&quot; filename=&quot;흰눈사이로.jpg&quot; height=&quot;160&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99EA74455C21C8AB02&quot; filemime=&quot;image/jpeg&quot; filename=&quot;누나가너무해.jpg&quot; height=&quot;159&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:90px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99778A4F5C21C8AB17&quot; filemime=&quot;image/jpeg&quot; filename=&quot;멍냥이.jpg&quot; height=&quot;159&quot; width=&quot;90&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;클라이언트 개발 인턴으로 근무하며 총 8개의 게임을 만들었고 하나의 게임을 서포트했다&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;. 오늘만큼은 암산왕, COMBAT256, 프렌즈뽑기, 달려라 다람쥐, 내가 구운 마시멜로, 흰 눈 사이로, 누나가 너무해, 멍냥이를 찾아라 가 바로 8개 게임이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;게임을 개발하면서 웹소켓, 디자인 패턴, 객체의 재사용 등 배운 점이 정말 많다. 개발자의 길로 계속 나아가야겠다는 다짐도 하게 해준 회사이기에 아직도 정이 너무 많다. 끝까지 하지 못하고 퇴사해서 아쉽지만 앞으로도 승승장구했으면 좋겠다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 18pt; color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;대학교 4학년 복학,&amp;nbsp;취업준비 그리고 취업 성공!&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;카카오게임즈를 퇴사하자마자 그 다음주가&amp;nbsp;개강날이었다. 제주도로 짧게 여행을 가서 쉬고 온 뒤에 오랜만에 학교 생활을 시작해 학점 채우기를 시작했다. (나는 왜 재수강을 했었던 것인가...)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;1학기 18학점, 2학기 12학점을 수강하며 4학년 같지 않은 생활을 보냈다. 회사를 다니다가 학교에서 친구들과 만나서 같이 놀고 공부하다보니 힐링이 되었던 부분도 많았다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;학교생활도 학교생활이지만 눈 앞에 닥친 취업준비도 막막했다. 우선 복학하면 하기로 다짐했던 정보처리기사 필기를 합격했고, Opic 시험도 치른 후 결과를 받았다. 그 후에는 그 동안 해왔던 프로젝트들을 정리해 포트폴리오로 만들었다. 그리고 알고리즘 스터디를 참여해 공부를 하기 시작했다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;아직 4학년 1학기라 신입사원이 아닌 인턴만 지원할 수 있어서&amp;nbsp;평소에 가고 싶었던 기업 몇군데만 지원을 했다. 떨어진 기업도 있었지만 운좋게도 두 개의 회사에 최종합격을 했고, 주변 사람들의 조언을 참고하여 회사를 선택하게 되었다. 다른 회사에 입사하지 못한다고 메일을 보낼 때 정말 마음이 아팠다ㅠㅠ 그렇지만 후회하지는 않는다!&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B7724E5C21CBCE06&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-12-25 오후 3.18.25.png&quot; height=&quot;63&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;(&lt;a href=&quot;http://hyeooona825.tistory.com/22&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;2017년 회고&lt;/a&gt; 글에서 쓴 내용)&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;위의 사진은 작년 회고 글이다.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;작년 회고에 썼던 내용을 실현하게 되다니!!!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&amp;nbsp;정말 행복했다&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;2018년도 &lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;여름방학동안 우아한형제들의 테크캠프에 참여했고,&amp;nbsp;두 번의 면접 폭풍이 휘몰아친 후에 합격 소식을 받고&amp;nbsp;정말 여유롭게 학교를 다녔다. (우테캠 얘기는 아래에서!)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;그 동안 모아둔 돈으로 약 2주 반? 동안 미국과 캐나다 여행도 다녀오고, 3일간 부산 여행도 다녀왔다. 그리고 취미활동인 영화보기와 책을 많이 읽었다. 한달에 영화 10편은 본 것 같고, 책도 꾸준히 읽었다. 이제는 탕진해&amp;nbsp;돈이 없다 &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;친구들도 정말 많이 만났다. 그 동안 여러 이유로 친구들을 많이 만나지 못하고 살아왔는데 마지막 학기동안 좋아하는 친구들을 많이 만난 점이&amp;nbsp;제일 좋았다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;이제는 대학교 졸업식만 기다리고 있고! 회사 입사 날짜만을 바라보며 마지막으로 실컷 놀고 있다!&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&amp;nbsp;행복했던 대학생활도 이제는 안녕이다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;우아한형제들의 '우아한테크캠프'&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;이번년도에 스프링이나 리액트를 공부해보고 싶다는 생각을 가지고 있었는데, 우아한테크캠프 개발자 모집 공고를 보니 &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;스프링을 기반으로 서버 구축하는 공부&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;를 할 수 있다는 점을 보고 고민없이 바로 지원했다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;사실 무한도전 면접편에서 나온 배달의 민족 모습밖에 몰랐던 나는 자소서를 쓰는 과정에서 회사에 대해 검색해보며 &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;많이 성장하고 있는 회사&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;라는 것을 알게 되었다. 우아한형제들 블로그를 보면 이미 만들어진 서비스를 소개하는 블로그가 아닌, &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;만들어가는 과정에서 겪는 고충이나 팁&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;을 설명해준다. 그런 점이 멋있었다. 이전에 다녔던 카카오게임즈 퀸스튜디오도 이전에는 없었던 웹 게임 시장을 개척해가고 있었는데 그러한 팀에 있었다보니 더 끌렸던 것 같다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;2번의 코딩테스트와 1번의 면접을 통과한 후에 우아한테크캠프에 참여할 수 있었다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;맨 처음 서류를 제출할 때 자기소개서에 &lt;/span&gt;&lt;span style=&quot;color: rgb(92, 189, 185);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;'우아한테크캠프를 통해 얻고자 하는 것은 무엇인지 자유롭게 기술하라'&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt; 라는 항목이 있었다. 나는 그 곳에 3가지를 작성했었다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;i&gt;같은 분야의 다양한 사람들을 만나 개발에 대한 고민과 생각을 공유하며 대화를 하고 싶다.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;i&gt;실무에서 적용할 수 있는 개발 실력을 키우고 싶다.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;i&gt;성장한 내가 되어 우아한형제들 기술블로그에 글을 작성해보고 싶다.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;마지막 3번은 아직 하지 못했지만 1, 2번은 정말 이루어졌다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;그렇게 느낀 이유 중 첫번째는 처음으로 경험했던 페어 프로그래밍이다. 처음에는 낯선 사람들과 어색한 채로 진행하다보니 체력도 많이 소모되고 힘들다고 생각했는데, 시간이 지날수록 팀 사람들과 친해지며 적응해갔다. 페어 프로그래밍을 통해 안 좋았던 코딩 습관도 고칠 수 있었고, 코딩을 하는 과정에서 &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;u&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;고민의 시간&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;이 얼마나 중요한지도 깨달았다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99CF8F3A5C58534030&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-09-02 오후 4.53.52.png&quot; height=&quot;293&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;두번째는 마스터님들께 받은 코드리뷰다. 위의 이미지는 처음 자바지기님에게 받았던 코드 리뷰 중 하나이다. 기초중의 기초인&amp;nbsp;객체지향으로 코드를 짜는 것부터 조언을 받고 반성을 많이 했었다. 나중에는 &lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;'잘했습니다. 머지할게요.'&lt;/span&gt;&lt;/b&gt; 리뷰를 한번에 받고 싶어서 팀원과 코드를 여러번 검토할 때도 있었는데 지금 생각해보면 그렇게 노력하던 때가 그립다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;세번째는 정말 신기했던 테스트 코드를 공부한 것이다. 다른 회사의 면접에서 '테스트 코드를 짜본적이 있나?' 라는 질문에 자신있게 있다고 말한적이 있었는데, 나는 그 질문이 System.out.println() 으로 테스트 결과를 찍어보거나 디버깅을 통해 확인하는 작업을&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&amp;nbsp;말하는 줄 알았다.. 테크캠프에서 TDD, ATDD 를 배우고 적용해보며 이전에 내가 자신있게 대답했던게 떠올라 얼마나 창피했는지 모른다...ㅠㅠ&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;마지막으로 팀원들과 함께한 프로젝트 개발이다. 총 9주 중 마지막 3주는 그동안 배운 내용을 바탕으로 팀원들과 함께 하나의 서비스를 개발하는 기간이었다. 우리팀이 만든 서비스는&amp;nbsp;'배짱이 생활' 로 배달의 민족의 리뷰 서비스를 카테고리 기반으로 보고 나만의 리뷰 책(?) 을 만드는&amp;nbsp;SNS 서비스이다. 나는 이 프로젝트에서 채팅 기능과 로그인 &lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;기능을 구현하는 역할을 맡았고 Websocket 을 이용해 구현을 완료했다. 매일 회의하고 개발하며 팀원들과 다같이 서비스를 만들어갔던 이 3주가 테크캠프에서 가장 기억에 남는 시간이 되었다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;우아한테크캠프에 참여하면서 개인적으로 뿌듯했던 것은 이 블로그에 9주동안 매일매일 작성하지는 못했지만 꾸준히 그 날 배운 내용을 정리했던 것이다. 하루하루 올릴 때는 잘 느껴지지 않았는데, 캠프가 끝나고 다시 블로그에 들어와보니 꽤 쌓여있던 글 목록에 뿌듯함이 많이 느껴졌던!&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DEBA4A5C58555D39&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-09-02 오후 2.29.00.png&quot; height=&quot;524&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;(&lt;a href=&quot;https://www.facebook.com/devbeginner/posts/1651473504965011&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;초보 개발자 모임 페이지&lt;/a&gt;에 올라온 설모의 기록!)&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;게다가 마지막 주에 페이스북 '초보 개발자 모임' 이라는 페이지에 관리자 jojoldu 님이 내 블로그에 대한 글을 올려주셨다 주변 지인들에게도, 캠프 동기들에게도 축하(?) 한다는 말을 많이 들었던 날이었다. 뭔가 캠프기간동안 공부했던걸 인증받은 기분..?!&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:320px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/996F2A4C5C5858AA03&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-09-05 오전 12.05.53.png&quot; height=&quot;273&quot; width=&quot;320&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;덕분에 하루동안 600명이 넘는 분들이 찾아주셨다! 정말 감사합니다ㅎㅎ&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9903303C5C3AFFC91A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_3685.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;올해 내가 선택한 일 중 가장 잘한 일이 우아한테크캠프에 지원했던게 아닐까 싶다. 많이 배웠고, 많이 공부했고, 그것들이 돌아와 취업 성공까지! 이루었다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;(돈 받으며 교육도 받고 우아한형제들의 일원이 되어 원하는 코딩도 할 수 있는 우아한테크캠프 정말 추천합니다!!!)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;여행&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;두 번의 면접끝에 우아한형제들 입사 안내 메일을 받고 행복하기도 했지만, 한편으로는 항상 이루고싶던 '취업' 이라는 목표를 이루었다 생각하니까 뭔지 모를 허탈함과 상실감을 느꼈다. 이제는 무엇을 위해 공부를 해야하는지도 잘 모르겠고 뭘 해야할지도 모르겠다는 생각에 (남들은 배부른 소리라 하지만) 나는 &lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;슬럼프에 빠졌다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;9월 한달은 자고 일어나면 밥먹고 다시 자고.. 의 생활을 반복했다. 그렇게 한달을 보낼때쯤 이렇게 아무것도 하지 않고 허무하게 사는것을 그만하자는 생각이 들었고, 일단 그 동안 모아놓은 돈으로 비행기 티켓을 끊고 계획을 짜며 여행 준비를 시작했다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;그래서 가게된 곳은 미국 뉴욕과 LA, 캐나다 벤쿠버이다. 뉴욕에 아는 언니의 게스트하우스에서 공짜로 머물며 일주일동안 뉴욕 이곳저곳을 돌아다녔다. 그 동안 여행가본 나라 중 싱가포르가 제일 좋았었는데 이번 여행을 통해 뉴욕으로 바뀌었다. 인종차별도 있고 테러 위험도 있지만 친절하고 젠틀한 뉴욕 사람들이 너무 좋았다. 뿐만 아니라 영화에서나 보던 여러 랜드마크를 본 것도 신기했고 감동적이었다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;LA 에서는 영화 라라랜드에 나온 곳들과 유니버셜스튜디오를 다녀왔다. 화려했던 뉴욕에 비해 조용하고 한적한 LA 는 느낌이 달랐다. 뉴욕보다는 좀 무서운 느낌? 죽기전에 꼭 한번 할리우드에 가보고 싶었는데 그 소원을 이룬게 가장 의미있었다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;마지막은 벤쿠버를 찍었다. 대학교에서 만난 친한 동생이 벤쿠버에서 워킹홀리데이를 하고 있었기에 그 친구집에 머물며 (또 공짜!!) 즐겁게 놀았다. 캐나다는 정말 공기가 깨끗하고 상쾌하다. 뭔가 건강해지는 기분?? 11월의 벤쿠버는 레인쿠버 라는 별명이 있다더니 정말 내내 어둡고 비가 내렸다. 그치만 그런 느낌의 벤쿠버도 좋았다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;원래 여행을 가면 일찍 일어나서 준비하고 나가 이곳저곳 돌아다니고 구경했었는데, 이번 여행은 늦잠도 매일 자고 여유롭게 돌아다니며 구경을 했었기에 더 의미있고 좋았던 기억으로 남는 듯 하다. 장거리 비행이 너무 힘들었지만 꼭 다시 미국과 캐나다를 여행하고 싶다!!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;2019년의 나&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;2019년은 이제 대학생에서 직장인으로 바뀌는 해가 된다. 첫 직장인 우아한형제들에서 월급을 받으며 열심히 일하는 평범한 사원이 되어있지 않을까?&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;우선 올해의 첫 목표는 &lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;회사에 얼른 적응하고 빨리 일을 배워서 실무에 참여하는 것이다. 이제는 놀만큼 놀았으니 다시 열심히 공부해서 팀 업무도 익히고, 나 자신을 끌어올리는 사람이 되고 싶다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;두번째는 문화생활이다. 취미생활인 영화보기도 꼭!! 많이 하고, 1주일에 한 권씩 책 읽는 것 또한 올해의 목표이다. 도서구입비를 무한으로 지원해주는 회사에 다니는만큼 적극 활용해서 책을 많이 읽는 사람이 될 것이다. 목표는 적어도 45권!!!!&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;세번째는.. 돈을 모아 독립하는 것이다!!!! 올해 돈을 꾸준히 모아서 내년엔 꼭 독립할 수 있는 여건을 만드는게 올해의 최종 목표이다 &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;그리고 마지막으로는 블로그 관리를 성실히 하는 것이다. (이것은 매번 마음먹지만 마음먹은대로 되지 않는ㅠㅠ) 2019년 황금돼지해에도 화이팅!&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>회고</category>
<category>2018</category>
<category>회고</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/94</guid>
<comments>https://hyeooona825.tistory.com/94#entry94comment</comments>
<pubDate>Wed, 19 Dec 2018 17:46:18 +0900</pubDate>
</item>
<item>
<title>[SQL 스터디] SQL 첫걸음 스터디 - 2</title>
<link>https://hyeooona825.tistory.com/92</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;하루 30분 36강으로 배우는 완전 초보의 SQL 따라잡기&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B1374950226&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;SQL 첫걸음&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;2번째&amp;nbsp;SQL 스터디 내용을 정리해보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt; color: rgb(0, 0, 0);&quot;&gt;2차 스터디 정리&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt; color: rgb(0, 0, 0);&quot;&gt;1. 데이터베이스 객체&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;테이블이나 뷰, 인덱스 등 데이터베이스 내에 정의하는 모든 것을 데이터베이스 객체라고 말합니다. 즉 데이터베이스 내의 객체를 말하는 것입니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;데이터베이스 객체는 종류와 관계없이 이름 중복이 허용되지 않지만, 스키마가 다르다면 가능합니다. 이 데이터베이스 객체를 '스키마 객체' 라고 부르기도 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 12pt;&quot;&gt;2. DELETE&amp;nbsp;FROM 테이블명&amp;nbsp;VS TRUNCATE TABLE&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;테이블내의 레코드를&amp;nbsp;삭제하는 명령에는 DELETE 와 TRUNCATE 두 가지 방법이 있습니다.&amp;nbsp;&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;margin: 43px auto 0px; padding: 16px; background: rgba(0, 0, 0, 0.05); overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;margin: 0px auto 32px; padding: 0px 0px 0px 10px; list-style: square;&quot;&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px; text-align: left;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;&lt;b&gt;DELETE&lt;/b&gt;
DELETE 명령어를 이용하면 한 레코드씩 삭제를 진행하며 레코드 단위로 삭제했다는 로그를 트랜잭션 로그에 남깁니다. 그렇기 때문에 특정 레코드를 지우는 것이 아닌 전체 테이블의 내용을 지우거나 많은 레코드를 지워야 할 때는 TRUNCATE 명령어를 고려해보는 것도 좋습니다.
또한, DELETE 명령어는 삭제된 레코드만큼 auto increment pk 값을 초기화시키는 것이 아니라 그대로 이어갑니다. 예를 들어 아래의 이미지를 보겠습니다.

&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:93px;font-size: 13.3333px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991D303D5C04E43320&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-12-03 오후 5.04.34.png&quot; height=&quot;56&quot; style=&quot;font-size: 13.3333px;&quot; width=&quot;93&quot;/&gt;&lt;/span&gt;(실행전) &lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:92px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99AAF13A5C04E4590A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-12-03 오후 5.07.40.png&quot; height=&quot;57&quot; width=&quot;92&quot;/&gt;&lt;/span&gt;(실행후)

첫번째 (실행전) 이미지를 보면 1번 hyeona1 데이터와 2번 hyeona2 데이터가 있었습니다. 이 상태에서
&lt;b&gt;DELETE FROM table1 WHERE pk=2;&lt;/b&gt;
명령을 실행하면 2번 hyeona2 가 삭제되겠죠. 그 후에 hyeona3 을 insert 하면 pk 는 2가 아닌 3이 됩니다. 이것이 TRUNCATE 와의 차이입니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px; text-align: left;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;TRUNCATE&lt;/span&gt;&lt;/b&gt;
TRUNCATE 명령어는 원래 테이블 데이터가 저장되어 있던 페이지를 할당 해제하고 그 내용을 트랜잭션 로그에 남깁니다. 이것이 한 레코드씩 지우며 해당 기록을 로그로 남기는 DELETE 보다는 빠를 수 밖에 없는 이유입니다. 그러나 TRUNCATE 명령어는 외래키로 참조되어 있거나, 인덱싱 되어있는 뷰에 참여하고 있거나, 테이블 복제로 생긴 테이블에서는 사용할 수 없습니다.
또한 TRUNCATE 명령어를 실행하고 나면 auto increment 로 설정해둔 pk 정보도 남아있지 않습니다. 따라서 위의 DELETE 명령어의 예시였던 (실행전) 이미지 상태의 테이블에서
&lt;b&gt;TRUNCATE TABLE table1;&lt;/b&gt;
를 실행한 후에 레코드를 추가하면 pk 는 다시 1부터 시작하게 됩니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt; color: rgb(0, 0, 0);&quot;&gt;3. 인덱스&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;인덱스는 검색속도를 향상하기 위해 사용하며 인덱스 또한 데이터베이스 객체입니다. 보통 인덱스는 B-Tree 알고리즘으로 구현되며 (모두 그런것은 아닙니다.) 레코드가 추가되거나 삭제될 때 B-Tree 를 최신상태로 갱신하는 시간이&amp;nbsp;소요됩니다. 따라서 무분별한 인덱스의 사용은 쿼리 처리 속도를 떨어뜨릴 수도 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;인덱스 작성을 통해 쿼리의 성능을 향상시켰다고 생각할 수도 있는데요. 이 때, 실제로 인덱스를 사용해 검색하는지를 확인하는 방법에는 &lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;EXPLAIN&lt;/span&gt;&lt;/b&gt; 이라는 명령이 있습니다. EXPLAIN 뒤에 확인해보고 싶은 쿼리를 입력하면 어떤 상태로 실행되는지를 데이터베이스가 설명해줍니다. (모든 데이터베이스가 지원해주는 것은 아닙니다.)&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;인덱스에 대한 자세한 내용은 다음 스터디 글에서 정리하겠습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;4. 뷰&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;뷰는 데이터베이스 객체로 등록할 수 없는 SELECT 명령을 객체로서 이름을 붙여 관리할 수 있도록 하는 것을 말합니다. 어려운 말이지만 뷰를 생성할 때 입력한 SELECT 명령을 관리하는 객체가 바로 뷰입니다.&amp;nbsp;&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;&lt;b&gt;뷰&lt;/b&gt;
뷰는 가상테이블입니다. SELECT 명령을 실행한 결과값을 테이블로 저장하고 있는게 아니라 단지 SELECT 명령을 저장하고 있는 것입니다. 따라서 뷰를 참조할 때마다 뷰에 등록되어 있는 SELECT 명령이 실행되는 것입니다. 저도 처음에는 테이블처럼 제가 실행한 SELECT 명령에 대한 결과값을 저장하고 있는 줄 알았는데 이번 스터디를 통해 깨닫게 되었습니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;Materialized View
위에서 말씀드린 뷰의 단점을 보완하기 위해 사용하는 것이 바로 Materialized View 입니다. SELECT 명령에 해당하는 결과값이 많은 뷰를 집계처리할 때 사용한다면 처리속도가 많이 떨어질 수 밖에 없겠죠. 그러나 Materialized View 는 처음 참조되었을 때의 데이터를 저장해둔 후, 다시 참조할 때 이전에 저장해 두었던 데이터를 그대로 사용합니다. 뷰에 지정된 테이블의 데이터가 변경된 경우에는 SELECT 명령을 재실행해서 데이터를 다시 저장합니다.
따라서 뷰에 지정된 테이블의 데이터가 자주 변경되지 않는 경우라면 기본 뷰보다는 Materialized View 를 고려해보는 것도 좋을 것 같습니다. (MySQL 에는 Materialized View 가 존재하지 않습니다.)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>데이터베이스</category>
<category>Database</category>
<category>SQL</category>
<category>SQL첫걸음</category>
<category>데이터베이스</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/92</guid>
<comments>https://hyeooona825.tistory.com/92#entry92comment</comments>
<pubDate>Wed, 05 Dec 2018 01:37:01 +0900</pubDate>
</item>
<item>
<title>[SQL 스터디] SQL 첫걸음 스터디 - 1</title>
<link>https://hyeooona825.tistory.com/91</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;하루 30분 36강으로 배우는 완전 초보의 SQL 따라잡기&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B1374950226&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;SQL 첫걸음&lt;/a&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Spring JPA 를 사용하기는 했지만 SQL 을 모르면 내부 쿼리가 어떻게 실행되는지를 잘 알지 못한채로 그냥 넘어가는 경우가 생길 수 있습니다. SQL 공부 해야지..해야지.. 하고 미루던 다짐을 스터디를 진행하며 실천하게 되었습니다.&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;우아한테크캠프에&amp;nbsp;참여할 당시, 교육을 해주시던 마스터님들이 추천해주신 책들을 바탕으로 계획을 짠 후에 스터디를 진행하기로 했습니다. &lt;b&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;(&lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;좋은 책 추천해주셔서 감사합니다. -HA, SH, YS의 깨알 인사&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;이 책은 SQL 에 대해 깊은 내용까지 나와있지는 않지만 (그동안 알고 있었던 내용 복습 + 놓쳤던 부분) 에 대해 학습하기에 좋은 책입니다.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;이번주에 책을 읽으며 스터디원들이 몰랐던 내용과 같이 만나 알게된 내용을 정리하겠습니다.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;1차 스터디 정리&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;1. NULL&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;언어를 배울 때에 항상 마주치는 것이 NULL 인데요. 학교나 동아리에서 프로젝트를 할 때는 항상 데이터가 존재하는 테이블에 쿼리를 실행하는 것을 연습했었기 때문에 NULL 데이터에 대해 생각을 해본적이 사실 많지 않았습니다. 그래서 좀 흥미로웠던 내용입니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;margin: 43px auto 0px; padding: 16px; background: rgba(0, 0, 0, 0.05); overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;margin: 0px auto 32px; padding: 0px 0px 0px 10px; list-style: square;&quot;&gt;&lt;li style=&quot;font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;ORDER BY 로 컬럼을 지정해 정렬할 때, NULL 값을 가지는 행은 가장 먼저 표시되거나 가장 나중에 표시됩니다.
- 데이터베이스 제품에 따라 기준이 다르지만 MySQL 의 경우 오름차순에서는 가장 먼저, 내림차순에서는 가장 나중으로 정렬됩니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;NULL 값의 연산은 결과 또한 NULL 입니다. NULL 은 0 으로 처리되지 않습니다.
- NULL + 1 → NULL
- NULL * 2 → NULL
- 1 / NULL → NULL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;집계함수(예 : SUM(), AVG() 등) 에서는 NULL 은 무시됩니다.
(예외 : COUNT() 는 * 를 넣을 시 NULL 값을 카운트하지만 다른 경우에서는 NULL 값을 카운트하지 않습니다.)
- 예 : 각 레코드의 quantity 값이 1, 2, 10, NULL, 3 일 때 AVG(quantity) 의 값은 4 입니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;NOT IN 을 이용할 때, 집합 안에 NULL 값이 있으면 왼쪽 값이 집합 안에 포함되어 있지 않아도 참을 반환하지 않습니다.
- 예 : table1 에서 각 레코드의 no 값이 1, 2, 3, 4 일 때 아래의 쿼리가 반환하는 데이터는 없습니다.
SELECT * FROM table1 WHERE no NOT IN (1, 2, NULL);&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;아래의 함수는 a 가 NULL 이면 b를, NULL 이 아니면 a 를 출력합니다.
- MySQL : COALESCE(a, b)
- Oracle : NVL(a, b)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;2. 문자열 결합 연산&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;문자열데이터&amp;nbsp;결합하는 연산에 사용하는 연산자는 데이터베이스 제품마다 다릅니다. 따라서 사용하는 제품에 알맞는 연산자 또는 함수를 사용해야 합니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;+ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; → SQL Server&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;|| &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;→ Oracle, DB2, PostgreSQL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;CONCAT → MySQL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;3. SQL 쿼리 내부 처리 순서&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;SQL 쿼리에서 내부 처리 순서는 다음과 같습니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;WHERE → GROUP BY → HAVING → SELECT → ORDER BY
- 위와 같은 순서로 SQL 쿼리가 처리가 되기 때문에 오른쪽 순서에서 정의한 별명을 왼쪽 순서에서 사용할 수 없습니다.
- 옳은 예 : SELECT table1.name FROM table1;
- 옳지 않은 예 : SELECT column1 as name FROM table1 WHERE name = '현아';&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;4. 복수열 갱신&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;UPDATE 명령의 SET 에서 콤마로 구분해 복수의 열을 갱신하려고 할 때, 실행 순서를 알아야 합니다. 먼저 기본이 되는 테이블과 실행할 쿼리는&amp;nbsp;아래와 같습니다.&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A1F4445BC97B4A12&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-19 오후 3.35.10.png&quot; height=&quot;103&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(250, 236, 197); font-size: 11pt;&quot;&gt;실행할 쿼리 :&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: rgb(250, 236, 197); font-size: 11pt;&quot;&gt;UPDATE table1 SET no = no + 1, no2 = no;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;위의 테이블 table1 에&amp;nbsp;쿼리를 실행하면 데이터베이스 제품 종류에 따라 다른 결과가 나타납니다.&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:320px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9936283D5BC97C6402&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-19 오후 3.39.59.png&quot; height=&quot;92&quot; width=&quot;320&quot;/&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:320px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9955BA3F5BC97D0C19&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-19 오후 3.42.58.png&quot; height=&quot;91&quot; width=&quot;320&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;(왼쪽 : MySQL, 오른쪽 : Oracle)&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;MySQL 에서는 no 값에 1을 더하여&amp;nbsp;no 에 저장한 후 그 값을 다시 no2&amp;nbsp;에 대입합니다. 그러나 Oracle 은 항상 갱신 전의 no 값을 반환하기 때문에 no2 에는 갱신되기 전의 no 값이 대입됩니다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;그러면 첫번째 기본 테이블에서 &lt;b&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;UPDATE table1 SET no2 = no, no = no + 1;&lt;/span&gt;&lt;/b&gt; 을 실행하면 결과는 어떻게 될까요?&lt;/p&gt;
&lt;p&gt;결과는 MySQL, Oracle 모두 오른쪽 Oracle 의 결과였던 테이블 형태가 됩니다. 따라서 Oracle 은 갱신식 안에서 컬럼값을 참조할 때 항상 이전의 값을 반환하지만, MySQL 은 갱신 처리 순서를 고려할 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;5. 날짜 연산&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;SELECT CURRENT_DATE ± INTERVAL 일수 DAY;
- 일수에 숫자를 넣으면 오늘 날짜에서 일수 만큼 연산을 한 DATE 값을 연산해줍니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;날짜형 간의 뺄셈
- Oracle : '2018-08-25' - '1995-08-25'
- MySQL : DATEDIFF('2018-08-25', '1995-08-25')&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;문자열 데이터를 날짜형 데이터로 변환
- Oracle : TO_DATE(char, format) → TO_DATE('20180825', 'YYYY-MM-DD')
- MySQL : STR_TO_DATE(char, format) → STR_TO_DATE('2018-08-25', '%Y-%M-%D')&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;6. 결과의 행 제한&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;SELECT 컬럼명 FROM 테이블명 LIMIT 행수 [OFFSET 시작행];
- 결과를 찾은 후 '시작행'부터 '행수' 만큼 데이터를 제한해 반환합니다.
- LIMIT 는 표준 SQL 이 아니라 MySQL 또는 PostgreSQL 에서 사용할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;SELECT TOP 행수 컬럼명 FROM 테이블명;
- 결과를 찾은 후 '행수' 만큼 제한해 반환합니다.
- LIMIT 를 사용할 수 없는 SQL Server 에서 사용합니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 14px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;SELECT 컬럼명 FROM 테이블명 WHERE ROWNUM &amp;lt;= 열번호;
- 결과를 찾은 후 열번호가 '열번호' 보다 작거나 같은 데이터만 반환합니다.
- Oracle 에서 사용합니다.
- WHERE 절은 ORDER BY 보다 먼저 처리되기 때문에 정렬을 하려면 WHERE 절에서 사용하면 안되고 서브쿼리를 사용해야 합니다. (이유 : 정렬한 후에 열번호로 데이터를 제한해야 하기 때문입니다.)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>데이터베이스</category>
<category>SQL</category>
<category>데이터베이스</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/91</guid>
<comments>https://hyeooona825.tistory.com/91#entry91comment</comments>
<pubDate>Fri, 19 Oct 2018 16:31:13 +0900</pubDate>
</item>
<item>
<title>[Spring] 상속 관계 매핑</title>
<link>https://hyeooona825.tistory.com/90</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;상속 관계 매핑&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여러 클래스를 구현할 때 공통된 기능이나 변수가 있다면 상위 클래스를 만들어 그 곳에 모아두는 '상속' 을 이용하는 경우가 많습니다. 가장 대표적인 예로 Animal 클래스라는 상위 클래스를 만들어 bark() 라는 함수를 만들어두고,&amp;nbsp;하위 클래스로 Dog, Lion, Cat 등을 만들어 bark() 함수를 오버라이딩하는 경우입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;그렇다면 객체의 상속 관계가 데이터베이스에서는 어떻게 매핑이 될까요? 이에 대한 설명을 아래에 기록하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;상속 관계 매핑&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;사실 RDB에서는 '상속' 개념이 따로 있지 않습니다. 따라서 &lt;span style=&quot;background-color: rgb(249, 255, 99);&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;ORM 에서 이야기하는 상속 관계 매핑은 객체의 상속 구조와 데이터베이스의 슈퍼타입 서브타입 관계를 매핑하는 것&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;입니다.&lt;/p&gt;&lt;p&gt;슈퍼타입-서브타입 논리 모델을 실제 물리 모델인 테이블로 구현하는 방법에는 다음과 같이 3가지 방법이 있습니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li&gt;&lt;u&gt;각각의 테이블로 변환&lt;/u&gt;&lt;/li&gt;&lt;li&gt;&lt;u&gt;통합 테이블로 변환&lt;/u&gt;&lt;/li&gt;&lt;li&gt;&lt;u&gt;서브타입 테이블로 변환&lt;/u&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;위의 3가지 방법에 대해 더 자세히 알아보겠습니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:615px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F3474F5BB4FB6106&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-04 오전 2.24.23.png&quot; height=&quot;275&quot; width=&quot;615&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;설명에 앞서&amp;nbsp;기본이 되는 객체 상속 모델의 형태는 위의 이미지와 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); font-size: 14pt;&quot;&gt;(1) 각각의 테이블로 변환&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); font-size: 14pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:576px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99EE0F455BB4FB702A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-04 오전 2.23.44.png&quot; height=&quot;397&quot; width=&quot;576&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;각각의 테이블로 변환하는 것은 JPA 에서 &lt;span style=&quot;background-color: rgb(249, 255, 99);&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;조인전략&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;이라고 합니다. 위의 테이블 형태와 같이 엔티티 각각을 모두 테이블로 만들고 자식 테이블이 &lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;&lt;b&gt;부모 테이블의 기본 키를 받아 (기본 키 + 외래 키) 로 사용&lt;/b&gt;&lt;/span&gt;하는 전략입니다. 이 때, Food 테이블에 있는 음식이 Rice 인지, Pasta 인지, Snack 인지를 알아보기 위해 DTYPE 과 같이 타입을 &lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;&lt;b&gt;구분하는 컬럼을 추가&lt;/b&gt;&lt;/span&gt;해야 합니다. 이를 JPA 를 이용해 코드로 나타내면 아래와 같습니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Inheritance&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= InheritanceType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;JOINED&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorColumn&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public abstract class &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id @GeneratedValue&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @Column&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;name &lt;/span&gt;= &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;FOOD_ID&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;price&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Food.java&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorValue&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;P&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Pasta &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;restaurant&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Pasta.java&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorValue&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;R&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Rice &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;region&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Rice.java&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorValue&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;S&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Snack &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;company&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Snack.java&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;위의 코드에서 사용한 주요 어노테이션은 다음과 같습니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255); color: rgb(187, 181, 41);&quot;&gt;@Inheritance&lt;/span&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255);&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255); color: rgb(208, 208, 255);&quot;&gt;strategy &lt;/span&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255);&quot;&gt;= InheritanceType.&lt;/span&gt;&lt;span style=&quot;font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255); color: rgb(152, 118, 170); font-style: italic;&quot;&gt;JOINED&lt;/span&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255);&quot;&gt;)
&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Menlo; font-size: 10pt; white-space: pre; background-color: rgb(255, 255, 255);&quot;&gt;: 상속 매핑은 부모 클래스에 Inheritance 어노테이션을 사용해야 합니다. 이 때의 전략으로는 조인전략을 사용했습니다.&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-family: Menlo; font-size: 16px; white-space: pre; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(187, 181, 41);&quot;&gt;@DiscriminatorColumn&lt;/span&gt;
&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt;: 부모 클래스에 구분 컬럼을 지정합니다. 기본값이 DTYPE 이기 때문에 저는 컬럼 이름을 따로 지정하지 않았습니다.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-family: Menlo; font-size: 16px; white-space: pre;&quot;&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;@DiscriminatorValue(&quot;S&quot;)&lt;/span&gt;
&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt;: 엔티티 저장 시 구분 컬럼에 입력할 값을 지정합니다. &quot;S&quot; 라 지정한다면 엔티티를 저장할 때 부모 클래스인 Food 의 DTYPE 에 S 가 저장됩니다.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위와 같은 방식의 조인 전략을 사용한다면 다음과 같은 특징이 있습니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;margin: 43px auto 0px; padding: 16px; background: rgba(0, 0, 0, 0.05); overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; font-size: 16px; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;margin: 0px auto 32px; padding: 0px 0px 0px 10px; list-style: square;&quot;&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;장점
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 테이블이 정규화됩니다&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 외래 키 참조 무결성 제약조건을 활용할 수 있습니다.&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 저장공간을 효율적으로 사용할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;단점
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 조회할 때 조인이 많이 사용되기 때문에 성능이 저하될 수 있습니다.
- 조회 쿼리가 복잡합니다.&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 데이터를 등록할 때 부모 클래스와 자식 클래스 모두 저장해야하기 때문에 INSERT 쿼리가 두 번 실행됩니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); font-size: 14pt;&quot;&gt;(2) 단일 테이블 전략&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); font-size: 14pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:202px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BFD54C5BB75D7309&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-05 오후 9.47.30.png&quot; height=&quot;237&quot; width=&quot;202&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;단일 테이블 전략은 말 그대로 &lt;span style=&quot;background-color: rgb(249, 255, 99);&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;테이블을 하나만 사용하는 방식&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;입니다. 이 때, DTYPE 과 같이 구분 컬럼으로 어떤 자식 데이터가 저장되었는지를 구분합니다. 이 전략은 조회할 때 조인을 사용하지 않기때문에 일반적으로 가장 빠릅니다. 그러나 예를 들어 파스타 데이터를 저장하려 할 때 REGION 이나 COMPANY, TYPE 과 같은 컬럼에는 null 값이 저장되게 됩니다. 따라서 &lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;&lt;b&gt;자식 엔티티에 매핑된 컬럼은 모두 null 을 허용해야 엔티티 별로 데이터를 저장할 수 있습니다.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;이를 JPA 를 이용해 코드로 나타내면 다음과 같습니다.&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Inheritance&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= InheritanceType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;SINGLE_TABLE&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorColumn&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public abstract class &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id @GeneratedValue&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @Column&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;name &lt;/span&gt;= &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;FOOD_ID&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;price&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Food.java&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorValue&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;P&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Pasta &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;restaurant&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Pasta.java&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorValue&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;R&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Rice &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;region&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Rice.java&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorValue&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;S&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Snack &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;company&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Snack.java&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;이 때,&amp;nbsp;&lt;span style=&quot;color: rgb(187, 181, 41); background-color: rgb(255, 255, 255); font-family: Menlo; font-size: 12pt;&quot;&gt;@Inheritance&lt;/span&gt;&amp;nbsp;의 전략을&amp;nbsp;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: Menlo; font-size: 12pt;&quot;&gt;InheritanceType.&lt;/span&gt;&lt;span style=&quot;font-family: Menlo; font-size: 12pt; color: rgb(0, 0, 0); font-style: italic; background-color: rgb(255, 255, 255);&quot;&gt;SINGLE_TABLE&lt;/span&gt;&amp;nbsp;로 지정하면 단일 테이블 전략을 사용합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;위와 같은 방식의 단일 테이블 전략을 사용한다면 다음과 같은 특징이 있습니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;font-size: 16px; list-style: disc; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;장점
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 조인이 필요하지 않기 때문에 일반적으로 조회 성능이 빠릅니다.&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 조회 쿼리가 단순합니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;font-size: 16px; list-style: disc; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;단점
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 자식 엔티티가 매핑한 컬럼은 모두 null 을 허용해야 한다.
- 단일 테이블에 모든 것을 저장하기 때문에 테이블이 커질 수 있습니다. 따라서 어떤 상황에서는 조인 성능이 오히려 느려질 수도 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;주의
- 구분 컬럼을 꼭 사용해야 합니다. 즉 @DiscriminatorColumn 을 꼭 설정해야 합니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); font-size: 14pt;&quot;&gt;(3) 구현 클래스마다 테이블 전략&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); font-size: 14pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:607px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991B9D4B5BB75E9C3C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-05 오후 9.52.30.png&quot; height=&quot;179&quot; width=&quot;607&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;구현 클래스마다 테이블 전략은 위의 그림과 같이 &lt;span style=&quot;background-color: rgb(249, 255, 99);&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;각각의 테이블을 만드는 전략&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;입니다. 그리고 자식 테이블 각각에 필요한 컬럼이 모두 존재합니다. 이 방법은 &lt;strike&gt;일반적으로 추천하지 않는 전략&lt;/strike&gt;입니다. JPA 를 이용해 코드로 나타내면 아래와 같습니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Inheritance&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= InheritanceType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;TABLE_PER_CLASS&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DiscriminatorColumn&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public abstract class &lt;/span&gt;Food {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id @GeneratedValue&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @Column&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;name &lt;/span&gt;= &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;FOOD_ID&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;price&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// Food.java&lt;/span&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: left;&quot;&gt;나머지 자식 클래스 코드는 위와 똑같아서 생략하겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-family: Menlo; font-size: 12pt;&quot;&gt;@Inheritance&amp;nbsp;&lt;/span&gt;의 전략을&amp;nbsp;&lt;span style=&quot;font-family: Menlo; font-size: 12pt;&quot;&gt;InheritanceType.&lt;/span&gt;&lt;span style=&quot;font-family: Menlo; font-size: 12pt; font-style: italic;&quot;&gt;TABLE_PER_CLASS&lt;/span&gt;&amp;nbsp;로 지정하시면 각 음식별로 테이블이 생성됩니다. 이 전략의 장단점은 아래와 같습니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; font-size: 16px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;장점
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 서브 타입을 구분해서 처리할 때 효과적이다.&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 단일테이블과 비교해보면 not null 제약조건을 사용할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;list-style: disc; font-size: 16px; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;단점
&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;- 여러 자식 테이블을 함께 조회할 때 SQL 의 union 을 사용해야하기 때문에 성능이 느립니다.
- 자식 테이블을 통합해 쿼리를 적용하기가 어렵다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;@MappedSuperclass&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;위의 상속 관계 매핑은 부모 클래스(Food) 와 자식 클래스(Rice, Pasta, Snack) 가 모두 데이터베이스 테이블과 매핑되었습니다. 즉 각각의 클래스가 데이터베이스 테이블이 되는 구조였습니다. 이에 반해 @MappedSuperclass 는 &lt;span style=&quot;background-color: rgb(249, 255, 99); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;부모크래스를 데이터베이스 테이블로 매핑하지 않고&amp;nbsp;자식 클래스에게 매핑 정보만 제공&lt;/b&gt;&lt;/span&gt;하고 싶을 때 사용합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;즉, &lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;&lt;b&gt;위의 예제들처럼 Food 클래스에 @Entity 를 붙이면 테이블이 생성되지만, @MappedSuperclass 는 실제 테이블과 매핑되지 않는다&lt;/b&gt;&lt;/span&gt;는 것입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;아래의 예제를 보겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:375px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995C8A345BB76BE70E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-05 오후 10.49.11.png&quot; height=&quot;207&quot; width=&quot;375&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;위의 테이블을 보면 전혀 관계가 없는 Board, Product 테이블이 있습니다. 하지만 id, created_at, updated_at 이 세 개의 속성은 공통으로 가지고 있습니다. 이제 @MappedSuperclass 를 이용해 공통 속성을 부모 클래스로 모은 후에 Board, Product 클래스와 상속 관계를 만들어보겠습니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:390px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997CE83E5BB76C8407&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-10-05 오후 10.51.47.png&quot; height=&quot;293&quot; width=&quot;390&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;MappedSuperclass&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.time.LocalDateTime&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@MappedSuperclass&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public abstract class &lt;/span&gt;BaseEntity {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id @GeneratedValue&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;LocalDateTime &lt;span style=&quot;color:#9876aa;&quot;&gt;createdAt&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;LocalDateTime &lt;span style=&quot;color:#9876aa;&quot;&gt;updatedAt&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Board &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;BaseEntity {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;writer&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;contents&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.&lt;span style=&quot;color:#bbb529;&quot;&gt;Entity&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Product &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;BaseEntity {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;ownerId&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;위의 코드와 같이 &lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;BaseEntity 에는 공통 매핑 정보를 정의&lt;/b&gt;&lt;/span&gt;했습니다. 자식 엔티티들은 상속을 통해 BaseEntity 의 매핑 정보를 물려받았습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;위의 예제에서는 BaseEntity 가 데이터베이스 테이블로 매핑될 필요가 없기 때문에 @MappedSuperclass 를 사용했습니다. 이 때, 자식 엔티티에서 부모로부터 물려받은 매핑 정보를 재정의하려면 @AttributeOverrides 또는 @AttributeOverride 를 이용해 속성 이름을 변경할 수 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;@MappedSuperclass 방식의 특징은 아래와 같습니다.&lt;/p&gt;&lt;div style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif;&quot;&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;padding: 16px; background: rgba(0, 0, 0, 0.05); margin: 43px auto 0px; overflow-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style: square; padding: 0px 0px 0px 10px; margin: 0px auto 32px;&quot;&gt;&lt;li style=&quot;list-style: disc; margin: 0px 0px 10px 24px; padding: 0px;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;특징
- 테이블과 매핑되지 않고 자식 클래스에게 매핑 정보를 상속하기 위해 사용합니다.
- @MappedSuperclass 로 지정한 클래스는 엔티티가 아니기 때문에 em.find() 또는 JPQL 에서 사용할 수 없습니다.
- @MappedSuperclass 로 지정한 클래스를 이용해 객체를 생성해 사용할 일은 거의 없기 때문에 추상 클래스로 만드는 것을 권장합니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위의 모든 내용의 출처는 &lt;a href=&quot;http://acornpub.co.kr/book/jpa-programmig&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;자바 ORM 표준 JPA 프로그래밍&lt;/a&gt; 서적입니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Spring</category>
<category>framework</category>
<category>Java</category>
<category>Spring</category>
<category>springboot</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/90</guid>
<comments>https://hyeooona825.tistory.com/90#entry90comment</comments>
<pubDate>Fri, 05 Oct 2018 23:27:14 +0900</pubDate>
</item>
<item>
<title>[Spring] WebSocket 구현하기</title>
<link>https://hyeooona825.tistory.com/89</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 36pt;&quot;&gt;Web S&lt;/span&gt;&lt;span style=&quot;font-size: 36pt;&quot;&gt;ocket?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;웹에서 채팅을 구현할 때 사용하는 Web Socket 에 대해 알아보겠습니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;보통 서버에게 정보를 요청할 때 HTTP/HTTPS 통신을 거치게 되는데요. HTTP/HTTPS 통신은 &lt;/span&gt;&lt;u&gt;&lt;b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;클라이언트가 요청을 했을 때&lt;/span&gt;&lt;/b&gt;&lt;/u&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt; &lt;/span&gt;&lt;b&gt;&lt;u&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;서버가 해당하는 정보를 응답&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;해주는 구조입니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;그러나 채팅은 누군가가 대화를 보내면 내가 서버에 요청을 보내지 않아도 서버가 저에게 정보를 주어야 합니다. 이럴 때 사용하는게 웹소켓입니다. &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(250, 244, 192); color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt;내가 원하는 정보에 대해 구독을 신청하고, 토픽에 대한 메세지를 발행하면 해당 토픽을&lt;/span&gt;&lt;span style=&quot;background-color: rgb(250, 244, 192); color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt; 구독하고 있는 모든 사용자에게 보내주는 방식&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;입니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;HTTP/HTTPS 는 같은 사용자가 서버에게 여러 번 자원이나 정보를 요청하는 경우에 매번 연결을 요청해야 하며 그 때마다 Header 에 요청 정보를 실어 보내야 합니다. 그러나 &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt;소켓통신은 한번 연결을 하면 연결이 유지&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;되어 별다른 설정없이 정보를 주고 받을 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;일반적인 웹소켓은 ws 로 HTTP 에 해당하며, wss 는 데이터 보안을 위해 SSL 을 적용한 프로토콜로 HTTPS 로 볼 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;보통 Web Socket 은 Node.js 로 구현된 예제가 가장 많습니다. javascript 로 구현하기가 가장 편하기 때문이죠.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;이 포스팅은 Springboot + Gradle + WebSocket + JavaScript 를 기반으로 구현된 코드를 바탕으로 설명하는 포스팅입니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;구현에 앞서 &lt;/span&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;WebSocket 의 기본 동작 원리는 클라이언트마다 원하는 토픽을 구독신청해놓고, 특정 사용자가 토픽에 해당하는 메세지를 보내면 그 토픽을 구독하는 모든 클라이언트에게 보내는 구조&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;입니다. WebSocket&amp;nbsp;에서의 토픽은 HTTP 에서의 URI 로 생각하시면 편할 것 같습니다!&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;Gradle 설정&amp;nbsp;및 Config 파일 생성&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;compile(&lt;span style=&quot;color:#6a8759;&quot;&gt;'org.springframework.boot:spring-boot-starter-websocket'&lt;/span&gt;)&lt;br /&gt;compile(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;org.webjars:sockjs-client:1.1.2&quot;&lt;/span&gt;)&lt;br /&gt;compile(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;org.webjars:stomp-websocket:2.3.3&quot;&lt;/span&gt;)&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;먼저 build.gradle 파일에 위의 3개를 추가합니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo; font-size: 9pt; word-break: normal !important; word-wrap: normal !important; overflow: auto; background: #2b2b2b&quot;&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;@Configuration&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;@EnableWebSocketMessageBroker&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;public class &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;WebSocketConfig &lt;/font&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;implements &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;WebSocketMessageBrokerConfigurer {&lt;br /&gt;    &lt;/font&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;@Override&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109);&quot;&gt;configureMessageBroker&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;(MessageBrokerRegistry registry) {&lt;br /&gt;        registry.enableSimpleBroker(&lt;/font&gt;&lt;span style=&quot;color: rgb(106, 135, 89);&quot;&gt;&quot;/topic&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89);&quot;&gt;&quot;/queue&quot;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;)&lt;/font&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;        &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;registry.setApplicationDestinationPrefixes(&lt;/font&gt;&lt;span style=&quot;color: rgb(106, 135, 89);&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;)&lt;/font&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;    &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;/font&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;@Override&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50);&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109);&quot;&gt;registerStompEndpoints&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot;&gt;(StompEndpointRegistry registry) {&lt;/font&gt;&lt;span style=&quot;color: rgb(128, 128, 128);&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 128, 128);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-size: 9pt;&quot;&gt;registry.addEndpoint(&lt;/span&gt;&lt;span style=&quot;font-size: 9pt; color: rgb(106, 135, 89);&quot;&gt;&quot;room1&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(169, 183, 198); font-size: 9pt;&quot;&gt;)&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;font-size: 9pt;&quot;&gt;.getRoomName()).addInterceptors(&lt;/font&gt;&lt;span style=&quot;font-size: 9pt; color: rgb(204, 120, 50);&quot;&gt;new &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;font-size: 9pt;&quot;&gt;HttpHandshakeInterceptor()).withSockJS()&lt;/font&gt;&lt;font color=&quot;#cc7832&quot; style=&quot;font-size: 9pt;&quot;&gt;;&lt;/font&gt;
&lt;font color=&quot;#a9b7c6&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;}&lt;/font&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;다음으로 config 파일을 생성해야 합니다. 코드 한 줄씩 살펴보겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;margin: 43px auto 0px; padding: 16px; background: rgba(0, 0, 0, 0.05); word-wrap: break-word; line-height: 20px; overflow: auto;&quot;&gt;&lt;ul style=&quot;color: rgb(102, 102, 102); font-size: 14px; margin: 0px; padding: 0px; list-style: square;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px; list-style: none;&quot;&gt;&lt;p style=&quot;padding: 0px; color: rgb(0, 0, 0); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 13px; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 10pt; white-space: pre; color: rgb(36, 41, 46); font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;1. &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;text-align: justify; font-family: Menlo; font-size: 12px; white-space: pre;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;registry.enableSimpleBroker(&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo, Monaco, Consolas, monospace; font-size: 10pt; white-space: pre; color: rgb(106, 135, 89);&quot;&gt;&quot;/topic&quot;&lt;/span&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo, Monaco, Consolas, monospace; font-size: 10pt; white-space: pre; color: rgb(204, 120, 50);&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo, Monaco, Consolas, monospace; font-size: 10pt; white-space: pre; color: rgb(106, 135, 89);&quot;&gt;&quot;/queue&quot;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;text-align: justify; font-family: Menlo; font-size: 12px; white-space: pre;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;)&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo; font-size: 9pt; white-space: pre; background-color: rgb(246, 246, 246); color: rgb(204, 120, 50);&quot;&gt;&lt;span style=&quot;font-size: 10pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;메세지브로커를 등록하는 코드&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;-&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;보통 /topic 과 /queue 를 사용하는데요,&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;/topic&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-align: justify; font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp;은&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;한명이 message 를 발행했을 때 해당 토픽을 구독하고 있는 n명에게 메세지를 뿌려야 하는 경우&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-align: justify; font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;에 사용합니다. 반면에&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;/queue&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-align: justify; font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp;는&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;한명이 message 를 발행했을 때 발행한 한 명에게 다시 정보를 보내는 경우&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-align: justify; font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;에 사용합니다. 저는&amp;nbsp;두 개의 경우 모두 사용하기 때문에 /topic, /queue 를 모두 등록했습니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; list-style: none;&quot;&gt;&lt;p style=&quot;padding: 0px; color: rgb(0, 0, 0); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 13px; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 12px; white-space: pre; color: rgb(36, 41, 46); font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; &quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; list-style: none;&quot;&gt;&lt;p style=&quot;padding: 0px; color: rgb(0, 0, 0); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 13px; white-space: normal;&quot;&gt;&lt;span style=&quot;font-size: 10pt; white-space: pre; color: rgb(36, 41, 46); font-family: Menlo, Monaco, Consolas, monospace; &quot;&gt;2. &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;text-align: justify; font-family: Menlo; font-size: 12px; white-space: pre;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;registry.setApplicationDestinationPrefixes(&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo, Monaco, Consolas, monospace; font-size: 10pt; white-space: pre; color: rgb(106, 135, 89);&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;text-align: justify; font-family: Menlo; font-size: 12px; white-space: pre;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;)&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo; font-size: 10pt; white-space: pre; color: rgb(204, 120, 50);&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace; &quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; &quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(102, 102, 102); font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;도착경로에 대한 prefix 를 설정&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;-&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;예를 들어,&amp;nbsp;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;text-align: justify; font-family: Menlo; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;registry.setApplicationDestinationPrefixes(&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo, Monaco, Consolas, monospace; font-size: 9pt; color: rgb(0, 0, 0);&quot;&gt;&quot;/app&quot;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;text-align: justify; font-family: Menlo; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;)&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;text-align: justify; font-family: Menlo, Monaco, Consolas, monospace; font-size: 9pt; color: rgb(0, 0, 0);&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;text-align: justify; font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace; color: rgb(0, 0, 0);&quot;&gt;이라고 설정해두면&amp;nbsp;/topic/hello 라는 토픽에 대해 구독을 신청했을 때 실제 경로는 /app/topic/hello 가 되는 것입니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; list-style: none;&quot;&gt;&lt;p style=&quot;padding: 0px; color: rgb(0, 0, 0); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 13px; white-space: normal;&quot;&gt;&lt;span style=&quot;text-align: justify; font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;font face=&quot;Menlo, Monaco, Consolas, monospace&quot;&gt;&lt;span style=&quot;font-size: 10pt; white-space: normal;&quot;&gt;3.&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;font style=&quot;font-family: Menlo; font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;registry.addEndpoint&lt;/span&gt;(&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-family: Menlo; font-size: 10pt;&quot;&gt;&quot;/room1&quot;&lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;font-family: Menlo; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt;).addInterceptors(&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;font-family: Menlo; font-size: 10pt; color: rgb(204, 120, 50);&quot;&gt;new &lt;/span&gt;&lt;font color=&quot;#a9b7c6&quot; style=&quot;font-family: Menlo; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 10pt;&quot;&gt;HttpHandshakeInterceptor()).withSockJS()&lt;/span&gt;&lt;/font&gt;&lt;font color=&quot;#cc7832&quot; style=&quot;font-family: Menlo; font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size:10pt;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;font-size: 9pt; font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt; 엔드포인트 등록&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace; font-size: 9pt; color: rgb(0, 0, 0);&quot;&gt;연결할 소켓 엔드포인트를 지정하는 코드입니다. room1 이라는 endpoint 에 interceptor 를 추가해&amp;nbsp;소켓을 등록합니다.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(102, 102, 102); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;b&gt;Interceptor 클래스&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;다음으로 소켓이 연결될 때 수행해야 할 작업을 해주는 interceptor 클래스 코드를 보겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt; word-break: normal !important; word-wrap: normal !important; overflow: auto;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;HttpHandshakeInterceptor &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;HandshakeInterceptor {&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public boolean &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;beforeHandshake&lt;/span&gt;(ServerHttpRequest request&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;ServerHttpResponse response&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;WebSocketHandler wsHandler&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;                                   &lt;/span&gt;Map attributes) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(request &lt;span style=&quot;color:#cc7832;&quot;&gt;instanceof &lt;/span&gt;ServletServerHttpRequest) {&lt;br /&gt;            ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;HttpSession session = servletRequest.getServletRequest().getSession()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;attributes.put(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;SESSION&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;session)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return true;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;afterHandshake&lt;/span&gt;(ServerHttpRequest request&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;ServerHttpResponse response&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;WebSocketHandler wsHandler&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;                               &lt;/span&gt;Exception ex) {&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;위의 HttpHandshakeInterceptor 클래스는 HanshakeInterceptor 클래스를 상속받았습니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;웹소켓은 처음 connect 시점에 handshake 라는 작업이 수행됩니다. handshake 과정은 HTTP 통신을 기반으로 이루어지며&amp;nbsp;GET방식으로 통신을 하게 됩니다. 이때, HTTP 요청 헤더의 Connection 속성은 Upgrade 로 되어야 합니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;웹소켓은 &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(234, 234, 234); font-size: 10pt;&quot;&gt;3번의&amp;nbsp;handshake 를 거쳐 연결을 확정&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;합니다. 위의 beforeHandshake 는 클라이언트의 연결 요청이 들어오면 3번의 handshake 에서 호출됩니다. 결국 3번이 실행되는 것입니다. 제 코드에서는 HTTP 통신에 존재하는 Session을 웹소켓 세션으로 등록하는 코드입니다. SESSION 변수는 static 변수로 String 타입입니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;afterHandshake 도 마찬가지로 hanshake 과정이 일어난 후 호출되는 함수입니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;Message Controller 클래스&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;word-break: normal !important; word-wrap: normal !important; overflow: auto;&quot;&gt;@Controller&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ChatController {&lt;br /&gt;&lt;br /&gt;    @MessageMapping(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;info&quot;&lt;/span&gt;)&lt;br /&gt;    @SendToUser(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/queue/info&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;info&lt;/span&gt;(String message&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;SimpMessageHeaderAccessor messageHeaderAccessor) {&lt;br /&gt;        User talker = messageHeaderAccessor.getSessionAttributes().get(SESSION).get(USER_SESSION_KEY)&lt;span style=&quot;color:#cc7832;&quot;&gt;; 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &lt;/span&gt;message&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    @MessageMapping(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;chat&quot;&lt;/span&gt;)&lt;br /&gt;    @SendTo(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/topic/message&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;chat&lt;/span&gt;(String message&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;SimpMessageHeaderAccessor messageHeaderAccessor) {&lt;br /&gt;        User talker = messageHeaderAccessor.getSessionAttributes().get(SESSION).get(USER_SESSION_KEY)&lt;span style=&quot;color:#cc7832;&quot;&gt;; 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&lt;/span&gt;(talker == &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;) &lt;span style=&quot;color:#cc7832;&quot;&gt;throw new &lt;/span&gt;UnAuthenticationException(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;로그인한 사용자만 채팅에 참여할 수 있습니다.&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;
        return &lt;/span&gt;message&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    @MessageMapping(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;bye&quot;&lt;/span&gt;)&lt;br /&gt;    @SendTo(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/topic/bye&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;User &lt;span style=&quot;color:#ffc66d;&quot;&gt;bye&lt;/span&gt;(String message) {
        User talker = messageHeaderAccessor.getSessionAttributes().get(SESSION).get(USER_SESSION_KEY)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        return &lt;/span&gt;talker&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;위의 ChatController 는 &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(234, 234, 234); font-size: 10pt;&quot;&gt;웹소켓 통신을 위한 Message 컨트롤러&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;입니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(187, 181, 41); font-family: Menlo; font-size: 10pt; white-space: pre;&quot;&gt;@MessageMapping &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;어노테이션에 발행하는 경로를,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(187, 181, 41); font-family: Menlo; font-size: 10pt; white-space: pre;&quot;&gt;@SendTo&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;와&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(187, 181, 41); font-family: Menlo; font-size: 10pt; white-space: pre;&quot;&gt;@SendToUser&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;어노테이션에 구독 경로를 작성합니다. 예를 들어, 특정 사용자가 chat&amp;nbsp;이라는 경로로 메세지를 보내면 /topic/message 라는 토픽을 구독하는 사용자들에게 모두 메세지를 뿌리는 것입니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;여기서 주목할 것은&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-family: Menlo; font-size: 10pt; white-space: pre;&quot;&gt;@SendTo&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;와&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-family: Menlo; font-size: 10pt; white-space: pre;&quot;&gt;@SendToUser&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;입니다. &lt;/span&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;SendTo 는 1 : n 으로 메세지를 뿌릴 때 사용하는 구조이며 보통 경로가 /topic 으로 시작&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;합니다. 반면에 &lt;/span&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;SendToUser 는 1 : 1 으로 메세지를 보낼 때 사용하는 구조이며 보통 경로가 /queue 로 시작&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;합니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;또한 아까 Interceptor 에서 넣어준 session 을 이용할 수 있습니다. 파라미터에 SimpleMessageHeaderAccessor 를 추가한 후에 messageHeaderAccessor 의 세션에서 SESSION 이라는 key 값으로 등록한 세션을 꺼낼 수 있습니다. 저는 해당 세션에 저장해 둔 user 를 꺼내오도록 코드를 구현했습니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;이런식으로 Controller 코드를 작성해주시면 클라이언트와 웹소켓 통신을 할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;websocket 프론트엔드&amp;nbsp;코드&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;이번엔 클라이언트 코드를 작성해보겠습니다. 제 경우, 프론트엔드는 HTML + JavaScript 로 작성하였으며 별다른 프레임워크를 적용하지 않은 순수 자바스크립트를 이용했습니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;먼저 HTML 에 아래 두 개의 스크립트를 추가해주세요. 맨 처음 Gradle 을 추가하셨다면 에러가 나지 않을 것입니다.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;span style=&quot;color:#e8bf6a;&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&quot;color:#bababa;&quot;&gt;src=&lt;/span&gt;&lt;span style=&quot;color:#a5c261;&quot;&gt;&quot;/webjars/sockjs-client/sockjs.min.js&quot;&lt;/span&gt;&lt;span style=&quot;color:#e8bf6a;&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#e8bf6a;&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&quot;color:#bababa;&quot;&gt;src=&lt;/span&gt;&lt;span style=&quot;color:#a5c261;&quot;&gt;&quot;/webjars/stomp-websocket/stomp.min.js&quot;&lt;/span&gt;&lt;span style=&quot;color:#e8bf6a;&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;이제 소켓을 연결해보겠습니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;let &lt;/span&gt;socket = &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;SockJS&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;room1&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;let &lt;/span&gt;stompClient = &lt;span style=&quot;color:#9876aa;&quot;&gt;Stomp&lt;/span&gt;.&lt;span style=&quot;color:#ffc66d;&quot;&gt;over&lt;/span&gt;(socket)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;stompClient.&lt;span style=&quot;color:#ffc66d;&quot;&gt;connect&lt;/span&gt;({}&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;function &lt;/span&gt;(frame) {&lt;br /&gt;    console.&lt;span style=&quot;color:#ffc66d;&quot;&gt;log&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;소켓 연결 성공&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;frame)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;})&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;먼저 SOCKJS 를 통해 &lt;/span&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;소켓을 생성한 후 connect 메소드를 호출&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;합니다. SockJS() 의 파라미터로는 위의 서버에서 추가했던 endpoint 명과 일치해야 합니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;생성한 stompClient 를 이용해 소켓을 연결합니다. 연결 이후 콜백 메소드의 파라미터인 frame 은 연결 정보가 담겨있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;다음은 토픽을 구독하는 방법입니다.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;stompClient.&lt;span style=&quot;color:#ffc66d;&quot;&gt;subscribe&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/topic/message&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;function &lt;/span&gt;(response) {&lt;br /&gt;    console.&lt;span style=&quot;color:#ffc66d;&quot;&gt;log&lt;/span&gt;(JSON.&lt;span style=&quot;color:#ffc66d;&quot;&gt;parse&lt;/span&gt;(response.&lt;span style=&quot;color:#9876aa;&quot;&gt;body&lt;/span&gt;))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;})&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;stompClient 의 subscribe 메소드는 두 개의 파라미터가 필요합니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;첫 번째는 구독할 토픽의 url 입니다. 위의 Message Controller 에서 @SendTo 또는 @SendToUser 어노테이션으로 등록한 url 을 작성하시면 됩니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;두 번째 파라미터는 콜백메소드입니다. 구독한 url 에 대한 발행이 이루어지면 해당 콜벡메소드가 호출됩니다. 파라미터로 들어오는 response 의 body 정보를 JSON 으로 파싱해서 사용하시면 됩니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;이제 소켓을 통해 메세지를 발행해보겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;stompClient.&lt;span style=&quot;color:#ffc66d;&quot;&gt;send&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/chat&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;{}&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;JSON.&lt;span style=&quot;color:#ffc66d;&quot;&gt;stringify&lt;/span&gt;({&lt;span style=&quot;color:#9876aa;&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;hi&quot;&lt;/span&gt;}))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;stompClient 의 send 메소드는 3개의 파라미터가 필요합니다. 첫번째는 Message Controller 클래스에서 등록한 매핑 url 입니다. 두 번째는 헤더정보입니다. contentType 등을 기술하시면 됩니다. 세 번째 파라미터 바로 보낼 데이터인데요. 저는 message 로 hi 를 보내겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;이 메소드를 호출하면 서버의 Message Controller 에서 해당하는 url 의 메소드가 호출됩니다. 제 경우에는 chat 이라는 메소드가 호출될 것입니다. 그러면 @SendTo 어노테이션으로 등록한 &quot;/topic/message&quot; 를 구독하는 사용자에게 message 를 뿌리게 됩니다. 따라서 위에서 구독 신청을 통해 등록한 콜백메소드가 호출되는 것입니다.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;
&lt;/span&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;소켓을 모두 사용했다면 소켓 연결을 끊어줘야 합니다. disconnect 하는 코드는 아래와 같습니다.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;stompClient.&lt;span style=&quot;color:#ffc66d;&quot;&gt;disconnect&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;서버와 클라이언트가 계속 연결을 유지하며 주기적으로 메세지를 주고 받아야 하는 경우에 웹소켓이 편리할 경우가 많을 것입니다. 특히 채팅의 경우가 대표적인데요. 위의 코드가 웹소켓 구현에 도움이 되었으면 좋겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Spring</category>
<category>Java</category>
<category>JavaScript</category>
<category>springboot</category>
<category>websocket</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/89</guid>
<comments>https://hyeooona825.tistory.com/89#entry89comment</comments>
<pubDate>Sun, 26 Aug 2018 15:36:26 +0900</pubDate>
</item>
<item>
<title>[Spring] 다대일, 일대다 연관관계 매핑</title>
<link>https://hyeooona825.tistory.com/88</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;데이터베이스에서의 연관관계와 JPA 에서의 연관관계&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;Spring 을 공부하면서 가장 헷갈리는 내용이 연관관계 매핑입니다. 데이터베이스의 외래키와 똑같이 생각하다가 함정에 빠지는 것이 태반입니다.&lt;/p&gt;&lt;p&gt;데이터베이스에서는 외래키라는 하나의 컬럼을 가지고 연관관계를 표현합니다. 그러나 JPA 에서는 객체를 매핑합니다. 따라서 JPA에서의 연관관계 매핑은&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li&gt;관계의 방향&lt;/li&gt;&lt;li&gt;다중성 (다대일? 일대다? 다대다?)&lt;/li&gt;&lt;li&gt;연관관계의 주인&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;이 세가지가 중요합니다. 아래에 정리한 내용에서 위의 3가지를 알아볼 것입니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;단방향 연관관계&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;연관관계 중 다대일(N:1) 을 먼저 알아보겠습니다. 다음에서 설명할 예제의 객체들은 다음의 관계입니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;사람은 가족이 있습니다.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;사람은 하나의 가족에만 소속될 수 있습니다.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;사람과 가족은 다대일 관계입니다.&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;위의 관계를 나타낸 객체 연관관계와 테이블 연관관계는 아래와 같습니다.&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:320px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9981C3355B7572D112&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-08-16 오후 9.37.30.png&quot; height=&quot;406&quot; width=&quot;320&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:297px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998B79395B75730A23&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-08-16 오후 9.48.34.png&quot; height=&quot;486&quot; width=&quot;297&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;(객체 연관관계와 테이블 연관관계)&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;margin: 43px auto 0px; padding: 16px; background: rgba(0, 0, 0, 0.05); word-wrap: break-word; font-family: Menlo, Consolas, Monaco, monospace; font-size: 16px; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;margin: 0px auto 32px; padding: 0px 0px 0px 10px; list-style: square;&quot;&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;객체 연관관계
- 사람 객체는 Person.family 로 가족 객체와 연관관계를 맺습니다.
- 사람 객체와 가족 객체는 &lt;span style=&quot;background-color: rgb(255, 167, 167);&quot;&gt;단방향 관계입니다.&lt;/span&gt; 사람은 Person.family 를 통해 가족을 알 수 있지만, 가족은 사람을 알 수 없습니다.&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px 0px 10px 24px; padding: 0px; list-style: disc;&quot;&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; margin-left: auto; padding: 0px; line-height: 28px;&quot;&gt;테이블 연관관계
- 사람 테이블은 Family_id 외래 키로 가족 테이블과 연관관계를 맺습니다.
- 사람 테이블과 가족 테이블은 &lt;span style=&quot;background-color: rgb(255, 167, 167);&quot;&gt;양방향 관계입니다.&lt;/span&gt; 사람 테이블의 Family_id 외래키를 통해 사람과 가족을 조인할 수 있고, 반대로 가족과 사람을 조인할 수도 있습니다.
=&amp;gt; 예 : 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1) SELECT * FROM PERSON P JOIN FAMILY F ON P.Family_id = F.id
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2) SELECT * FROM FAMILY F JOIN PERSON P ON P.Family_id = F.id
&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;p style=&quot;margin: 0px auto 28px; padding: 0px; font-size: 16px; line-height: 28px; color: rgb(92, 92, 92); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;위에서도 정리 해놓은 것처럼 참조를 통한 연관관계인 객체 연관관계는 언제나 단방향입니다. 객체간의 연관관계에서 양방향으로 만들고 싶다면 반대쪽에도 필드를 추가해서 참조를 보관해야 합니다. 결국 양방향이라는 것은 단반향을 2개 만들어 서로 참조하도록 설계해야 하는 것입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;그렇지만 데이터베이스 테이블은 외래 키 하나로 양방향으로 조인할 수 있습니다.&lt;/p&gt;&lt;p&gt;단방향 연관관계인 Person 클래스와 Family 클래스는 아래와 같습니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Person {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @GeneratedValue&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= GenerationType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;IDENTITY&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Column&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@ManyToOne&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @JoinColumn&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Family &lt;span style=&quot;color:#9876aa;&quot;&gt;family&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Family {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @GeneratedValue&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= GenerationType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;IDENTITY&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Column&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;p&gt;이 때 사용한 어노테이션의 의미는 다음과 같습니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;ManyToOne&lt;/b&gt;&lt;/span&gt; : 다대일 관계라는 매핑 정보로 다대일 연관관계를 매핑할 때 필수로 사용해야 합니다.&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;JoinColumn&lt;/b&gt;&lt;/span&gt; : 외래 키를 매핑할 때 사용합니다. JoinColumn 의 name 속성에는 매핑할 외래키 이름을 지정합니다. 이 어노테이션은 생략해도 됩니다. 만약 생략한다면, 외래키로 매핑되는 컬럼의 이름은 필드명&amp;nbsp;+ '_' + 참조하는_테이블의_컬럼명 입니다. 위를 예로 들면 family_ID 가 외래키로 매핑됩니다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 18pt;&quot;&gt;양방향 연관관계&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;위의 예제에서는 항상 Person 클래스에서 Family 클래스를 접근해야만 했습니다. 이번에는 Family 클래스에서 Person 클래스를 접근하는 관계를 추가해보도록 하겠습니다. 다시 말하면 서로 양방향으로 점근할 수 있는 양방향 연관관계로 매핑하겠습니다.&lt;/p&gt;&lt;p&gt;양방향 연관관계로 설정된 Person 클래스와 Family 클래스의 연관관계와 데이터베이스 테이블의 연관관계는 다음과 같습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:245px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997902395B7577B825&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-08-16 오후 10.09.07.png&quot; height=&quot;292&quot; width=&quot;245&quot;/&gt;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:250px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99640B335B7577C802&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-08-16 오후 9.50.00.png&quot; height=&quot;409&quot; width=&quot;250&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;(객체 연관관계와 테이블 연관관계)&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;사람과 가족의 관계는 다대일이지만, 가족과 사람의 관계는 일대다입니다. 따라서 일대다 관계는 여러 객체와 연관관계를 맺을 수 있기 때문에 컬렉션을 사용해야 합니다. 저는 List 컬렉션을 이용했습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;이 부분에서 헷갈리지 말아야 하는 부분이 바로 이것입니다. &lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;데이터베이스에서는 외래 키 하나를 이용해 양방향으로 조회할 수 있습니다.&lt;/b&gt;&lt;/span&gt; 위의 오른쪽 그림만 봐도 양방향 관계이든, 단방향 관계이든 변하는 것은 없습니다. 그러나 객체 연관관계는 아래와 같이 List 가 추가되었습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Person {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @GeneratedValue&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= GenerationType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;IDENTITY&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Column&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@ManyToOne&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @JoinColumn&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Family &lt;span style=&quot;color:#9876aa;&quot;&gt;family&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.List&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Family {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @GeneratedValue&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= GenerationType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;IDENTITY&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Column&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@OneToMany&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;mappedBy &lt;/span&gt;= &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;family&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;List&amp;lt;Person&amp;gt; &lt;span style=&quot;color:#9876aa;&quot;&gt;people&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위와 같이 Family 클래스에 people 이라는 List 를 추가했습니다. 그리고 일대다 관계를 매핑하기 위해 @OneToMany 매핑 정보를 사용했습니다. mappedBy 속성은 양방향 매핑일 때 사용하게 되는데, 반대쪽 매핑의 필드 이름을 값으로 주면 됩니다. 위에서는 Person 클래스에 family 와 매핑할 것이기 때문에 family 를 적으면 됩니다.&lt;/p&gt;&lt;p&gt;이 때 간과하지 말아야 할 개념은 연관관계의 주인입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 18pt;&quot;&gt;연관관계의 주인?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;위의 예제에서 @OneToMany 만 있어도 될 것 같은데, mappedBy 속성까지 있어야하는 이유는 무엇일까요?&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;엄밀하게 말하자면 &lt;span style=&quot;color: rgb(152, 0, 0); background-color: rgb(234, 234, 234);&quot;&gt;&lt;b&gt;객체에는 양방향 연관관계라는 것은 없습니다.&lt;/b&gt;&lt;/span&gt; 서로 다른 단방향 연관관계 2개를 잘 묶어서 양방향인 것처럼 보이게 할 뿐입니다. 반면에 데이터베이스 테이블은 외래 키 하나로 양쪽이 서로 조인을 해서 양방향 연관관계를 맺습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Entity 를 단방향으로 매핑하면 참조를 하나만 사용하기 때문에 (위에서는 family) 이 참조로 외래 키를 관리하면 됩니다. 그러나 Entity 를 양방향으로 매핑하면 두 곳에서 서로를 참조하게 되기 때문에 객체의 연관관계를 관리하는 포인트는 2곳으로 늘어나게 됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;엔티티를 양방향 연관관계로 설정하면 객체의 참조는 둘인데 외래키는 하나다?&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;이 문제를 해결하기 위해 JPA 에서는 두 객체 연관관계 중 하나를 정해서 테이블의 외래키를 관리해야 하는데 이것을 &lt;i&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(152, 0, 0);&quot;&gt;연관관계의 주인&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;이라 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;양방향 연관관계 매핑에서는 두 연관관계 중 하나를 연관관계의 주인으로 정해야 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;연관관계의 주인만이 데이터베이스 연관관계와 매핑되며 외래 키를 관리(등록, 수정, 삭제) 할 수 있습니다.&lt;/b&gt;&lt;/span&gt; 반면에 &lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;주인이 아닌 쪽은 읽기만 할 수 있습니다.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;이 때, &lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;주인은 mappedBy 속성을 사용하지 않습니다.&lt;/span&gt;&lt;/b&gt; &lt;br /&gt;또한 &lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;주인이 아니면 mappedBy 속성을 사용해서 속성의 값으로 연관관계의 주인을 지정해야 합니다.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;그렇다면 위의 예제에서 Person 이 주인이 되어야 할까요? 아니면 Family 가 주인이 되어야 할까요?&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;이 과정에서 생각해봐야 할 것은 &lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;연관관계의 주인을 정한다는 것은 외래 키 관리자를 선택하는 것&lt;/b&gt;&lt;/span&gt;입니다. 따라서 위의 예제에서는 Person 이 주인이 되어야 본인 테이블에 있는 외래키를 관리할 수 있습니다. 만약에 Family Entity 에 있는 people 이 주인이 된다면 물리적으로 다른 테이블의 외래 키를 관리해야 합니다. 따라서 주인이 아닌 people 에는 &lt;b&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;mappedBy=&lt;/span&gt;&lt;span style=&quot;color: rgb(107, 153, 0); background-color: rgb(234, 234, 234);&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(107, 153, 0); background-color: rgb(234, 234, 234);&quot;&gt;family&quot;&lt;/span&gt;&lt;/b&gt; 속성을 사용해 주인이 아님을 설정해야 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;양방향 연관관계에서의 주의사항&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;양방향 연관관계에서 조심해야 할 실수는 연관관계의 주인에는 값을 입력하지 않고, 주인이 아닌 곳에만 값을 넣는 경우입니다. 다음 예제를 보겠습니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;p&gt;Person hyeona = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Person(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;kwonhyeona&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;entityManager.persist(hyeona)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;Person father = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Person(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;father&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;entityManager.persist(father)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;Family family = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Family()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;family.getPeople().add(hyeona)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;family.getPeople().add(father)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;entityManager.persist(family)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;위의 코드에서는 hyeona, father 객체의 family 멤버변수를 설정하는 것이 아니라 family 객체의 people 리스트를 수정했습니다. 이 후 데이터베이스를 조회해보면 Person 테이블의 Family_id 에는 null 값이 있을 것입니다. 주인인 Person 에 값을 입력하지 않고, 주인이 아닌 Family 에 값을 넣었기 때문입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그렇다면 주인인 Entity 에만 값을 넣는 것이 바람직한 것일까요?&amp;nbsp;&lt;/p&gt;&lt;p&gt;객체 관점에서 가장 안전한 것은 주인/주인이 아닌 Entity 모두 값을 입력해주는 것이 안전합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사실 이런 경우에는 편의 메소드를 구현하는 것이 좋습니다. &lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;편의 메소드란 한 번에 양방향 관계를 설정하는 메소드&lt;/b&gt;&lt;/span&gt;를 말합니다. 아래의 함수를 보겠습니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Person {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @GeneratedValue&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= GenerationType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;IDENTITY&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Column&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@ManyToOne&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @JoinColumn&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Family &lt;span style=&quot;color:#9876aa;&quot;&gt;family&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;Person&lt;/span&gt;(String name) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;name &lt;/span&gt;= name&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;setFamily&lt;/span&gt;(Family family) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;family &lt;/span&gt;!= &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;) {&lt;br /&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;family&lt;/span&gt;.removePerson(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;family &lt;/span&gt;= family&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;family.addPerson(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;javax.persistence.*&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.List&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Entity&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Family {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Id&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    @GeneratedValue&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;strategy &lt;/span&gt;= GenerationType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;IDENTITY&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Column&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@OneToMany&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;mappedBy &lt;/span&gt;= &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;family&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;List&amp;lt;Person&amp;gt; &lt;span style=&quot;color:#9876aa;&quot;&gt;people&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;addPerson&lt;/span&gt;(Person person) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;people&lt;/span&gt;.add(person)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;removePerson&lt;/span&gt;(Person person) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;people&lt;/span&gt;.remove(person)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;위의 예제에는 Person 클래스에 setFamily() 를, Family 클래스에 addPerson(), removePerson()&amp;nbsp;메소드를 구현했습니다. 따라서 Person.setFamily() 메소드를 호출하면 Person 과 Family 객체 보두 양방향 관계를 설정하게 됩니다. 이런 메소드를 &lt;span style=&quot;background-color: rgb(234, 234, 234); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;편의 메소드&lt;/b&gt;&lt;/span&gt;라 합니다.&lt;/p&gt;&lt;p&gt;따라서 객체의 양방향 연관관계를 사용하기 위해서는 로직을 견고하게 작성해야 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위의 내용을 정리하면 다음과 같습니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li&gt;&lt;b&gt;단방향 매핑만으로 테이블과 객체의 연관관계 매핑은 이미 완료되었습니다.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;단방향을 양방향으로 만들면 반대방향으로 객체 그래프 탐색 기능이 추가됩니다.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;앙방향 연관관계를 매핑하려면 객체에서 양쪽 방향을 모두 관리해야 합니다.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;마지막으로 연관관계의 주인을 정하는 기준은 외래 키의 위치와 관련해서 정해야 하며 비즈니스 중요도로 접근하면 안된다는 점을 강조드립니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(92, 92, 92); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 16px;&quot;&gt;출처 :&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://acornpub.co.kr/book/jpa-programmig&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;color: rgb(107, 172, 206); font-family: &amp;quot;Spoqa Han Sans&amp;quot;, sans-serif; font-size: 16px;&quot;&gt;자바 ORM 표준 JPA 프로그래밍&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Spring</category>
<category>JPA</category>
<category>ORM</category>
<category>Spring</category>
<category>연관관계</category>
<category>자바ORM표준JPA프로그래밍</category>
<author>HA_Kwon</author>
<guid>https://hyeooona825.tistory.com/88</guid>
<comments>https://hyeooona825.tistory.com/88#entry88comment</comments>
<pubDate>Fri, 17 Aug 2018 18:47:25 +0900</pubDate>
</item>
<item>
<title>[Spring] 영속성이란 (persistence)</title>
<link>https://hyeooona825.tistory.com/87</link>
<description>&lt;div style=&quot;text-align:center;margin:0 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 가로배너(728*90) --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-6821714774264347&quot;
     data-ad-slot=&quot;4774524543&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 36pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 36pt;&quot;&gt;JPA Persistence&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Spring JPA 를 공부하다보면 &lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(246, 246, 246);&quot;&gt;&lt;b&gt;persistence&lt;/b&gt;&lt;/span&gt; 라는 말을 많이 들어보게 됩니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99EF44355B6EF02E36&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-08-11 오후 11.17.34.png&quot; height=&quot;233&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 8pt;&quot;&gt;(출처 : 네이버 영어사전)&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;무슨 소리지...하고 매번 넘어갔었는데 이번 기회에 정리를 하게 되었습니다. &lt;span style=&quot;color: rgb(152, 0, 0);&quot;&gt;&lt;b&gt;JPA 에서의 영속성은 위의 단어 해석처럼 Entity를 영구적으로 저장해주는 환경을 의미합니다.&lt;/b&gt;&lt;/span&gt; 책의 내용을 바탕으로 자세하게 정리해보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;EntityManagerFactory 와 EntityManager&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;데이터베이스를 하나만 사용하는 애플리케이션은 보통 EntityManagerFactory 를 하나만 생성합니다. EntityManagerFactory 는 여러&amp;nbsp;EntityManager 를 생성하는 객체입니다. 두 객체의 차이점은 아래와 같습니다.&lt;/p&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0&quot; class=&quot;graf graf--pre graf-after--p&quot; style=&quot;margin: 43px auto 0px; padding: 16px; background: rgba(0, 0, 0, 0.05); word-wrap: break-word; font-size: 16px; line-height: 20px; overflow: auto; white-space: pre-wrap; color: rgba(0, 0, 0, 0.8);&quot;&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; padding: 0px; line-height: 28px;&quot;&gt;EntityManagerFactory
- 생성하는데 비용이 크기 때문에 애플리케이션 전체에서 한 번만 생성해 공유하도록 설계되어 있다.
- 여러 스레드가 동시에 접근해도 안전하다. 따라서 서로 다른 스레드 간에 공유가 가능하다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;margin-right: auto; margin-bottom: 28px; padding: 0px; line-height: 28px;&quot;&gt;EntityManager
- 생성하는데 비용이 거의 들지 않는다.
- 여러 스레드가 동시에 접근하면 동시성 문제가 발생하기 때문에 스레드 간에 절대 공유하지 않는다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;참고로 EntityManager 는 데이터베이스 연결이 꼭 필요한 시점까지 (보통 트랜잭션을 시작할 때)&amp;nbsp;커넥션을 얻지 않습니다. EntityManagerFactory 와 EntityManager 를 생성하는 코드는 아래와 같습니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;word-break: normal !important; word-wrap: normal !important; overflow: auto; white-space: pre !important;&quot;&gt;EntityManagerFactory entityManagerFactory = Persistence.&lt;span style=&quot;font-style:italic;&quot;&gt;createEntityManagerFactory&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;person&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// 파라미터 : 영속성 단위 이름&lt;br /&gt;&lt;/span&gt;EntityManager entityManager = entityManagerFactory.createEntityManager()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;영속성 컨텍스트란?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;위에서도 말했다시피 영속성 컨텍스트(persistence context) 는 &lt;span style=&quot;background-color: rgb(246, 246, 246); color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;u&gt;'엔티티를 영구 저장하는 환경'&lt;/u&gt;&lt;/b&gt;&lt;/span&gt; 이라는 뜻입니다. EntityManager 를 이용해 Entity 를 저장하거나 조회할 때 EntityManager 는 영속성 컨텍스트에 Entity 를 보관하고 관리합니다. &lt;b&gt;&lt;span style=&quot;background-color: rgb(246, 246, 246); color: rgb(0, 0, 0);&quot;&gt;EntityManger&lt;/span&gt;&lt;span style=&quot;background-color: rgb(246, 246, 246); color: rgb(0, 0, 0);&quot;&gt;객체.persist(Entity객체&lt;/span&gt;&lt;span style=&quot;background-color: rgb(246, 246, 246); color: rgb(0, 0, 0);&quot;&gt;)&lt;/span&gt;&lt;/b&gt; 를 실행하면 영속성 컨텍스트가 Entity 를 관리하게 됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(246, 246, 246);&quot;&gt;영속성 컨텍스트는 &lt;u&gt;눈에 보이지 않는 논리적인 개념&lt;/u&gt;&lt;/span&gt;&lt;/b&gt;입니다. 또한 EntityManager 를 하나 생성할 때 하나가 만들어지며, EntityManager 를 통해 접근할 수 있고 관리할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;영속성 컨텍스트의 특징은 아래와 같습니다.&lt;/p&gt;&lt;pre name=&quot;e6b0&quot; id=&quot;e6b0