<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>어쩐지 오늘은</title>
    <description>메모가 습관인 데이터쟁이입니다
</description>
    <link>https://zzsza.github.io/</link>
    <atom:link href="https://zzsza.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 May 2019 07:37:43 +0000</pubDate>
    <lastBuildDate>Sun, 12 May 2019 07:37:43 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Tensorflow Data Validation 사용하기</title>
        <description>&lt;ul&gt;
  &lt;li&gt;TFX에서 Data Validation을 담당하고 있는 TensorFlow Data Validation(TFDV)에 대한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tfdv&quot;&gt;TFDV&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/data-validation&quot;&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;TensorFlow Data Validation는 데이터를 더 쉽게 이해하고 점검할 수 있도록 도와주는 라이브러리&lt;/li&gt;
  &lt;li&gt;Google에서 매일 페타바이트의 데이터를 분석하고 점검할 때 사용&lt;/li&gt;
  &lt;li&gt;Train, Test Data의 요약 통계, 분포를 쉽게 비교 가능&lt;/li&gt;
  &lt;li&gt;필수 값, 데이터에 대한 기대치를 의미하는 데이터 스키마 생성&lt;/li&gt;
  &lt;li&gt;지정된 조건을 벗어나는 경우(예시 : int 타입을 예상했는데 float이 들어오는 경우) 예외를 식별&lt;/li&gt;
  &lt;li&gt;Python 2.7, 3.5만 지원&lt;/li&gt;
  &lt;li&gt;Mac OS(시에라) 이상, Ubuntu 16.04 이상 지원
    &lt;ul&gt;
      &lt;li&gt;윈도우는 추후 지원 예정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;내부적으로 &lt;a href=&quot;https://github.com/PAIR-code/facets&quot;&gt;Facet&lt;/a&gt;, &lt;a href=&quot;https://beam.apache.org/&quot;&gt;Apache Beam&lt;/a&gt; 사용&lt;/li&gt;
  &lt;li&gt;회사 업무시, 데이터 경진대회(캐글 등)에서 유용할 듯&lt;/li&gt;
  &lt;li&gt;이 글은 0.13.1 버전 기준으로 작성했습니다. 추후 계속 수정될 예정입니다&lt;/li&gt;
  &lt;li&gt;코드는 모두 Github에 올렸습니다. &lt;a href=&quot;https://nbviewer.jupyter.org/github/zzsza/tfx-tutorial/blob/master/data-validation/All-Features-Example.ipynb?flush_cache=true&quot;&gt;Nbviewer&lt;/a&gt;로 확인 부탁드려요!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기능&quot;&gt;기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Statistics 생성 및 시각화
    &lt;ul&gt;
      &lt;li&gt;Train과 Test셋 데이터 분포 동시에 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스키마 추론&lt;/li&gt;
  &lt;li&gt;데이터 검증&lt;/li&gt;
  &lt;li&gt;Drift와 Skew 체크&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치&quot;&gt;설치&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install tensorflow-data-validation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;설치한 후, 확인&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import sys, os
  import tempfile, urllib, zipfile
  import tensorflow_data_validation as tfdv
  print('TFDV version: {}'.format(tfdv.version.__version__))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-준비&quot;&gt;데이터 준비&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;시카고 택시 데이터를 다운로드 후, 압축 해제&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  BASE_DIR = tempfile.mkdtemp()
  DATA_DIR = os.path.join(BASE_DIR, 'data')
  OUTPUT_DIR = os.path.join(BASE_DIR, 'chicago_taxi_output')
  TRAIN_DATA = os.path.join(DATA_DIR, 'train', 'data.csv')
  EVAL_DATA = os.path.join(DATA_DIR, 'eval', 'data.csv')
  SERVING_DATA = os.path.join(DATA_DIR, 'serving', 'data.csv')
	
  zip, headers = urllib.urlretrieve('https://storage.googleapis.com/tfx-colab-datasets/chicago_data.zip')
  zipfile.ZipFile(zip).extractall(BASE_DIR)
  zipfile.ZipFile(zip).close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;statistics-생성-및-시각화&quot;&gt;Statistics 생성 및 시각화&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;csv, dataframe, tfrecord을 통해 Statistics를 생성할 수 있음&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [methods for methods in dir(tfdv) if &quot;generate&quot; in methods]
  &amp;gt;&amp;gt;&amp;gt; ['generate_statistics_from_csv',
   	 'generate_statistics_from_dataframe',
       'generate_statistics_from_tfrecord']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Statistics 생성&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  train_stats = tfdv.generate_statistics_from_csv(data_location=TRAIN_DATA)
  # method : tfdv.generate_statistics_from_csv(data_location, column_names=None, delimiter=',', output_path=None, stats_options=&amp;lt;tensorflow_data_validation.statistics.stats_options.StatsOptions object at 0x14436a110&amp;gt;, pipeline_options=None)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;train_stats를 확인해보면 feature별로 다양한 통계치를 가지고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시각화&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  tfdv.visualize_statistics(train_stats)
  # method : tfdv.visualize_statistics(lhs_statistics, rhs_statistics=None, lhs_name='lhs_statistics', rhs_name='rhs_statistics)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wuudyhmvisv9d3e/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2013.44.27.png?raw=1&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Interactive하게 직접 만져보고 싶으신 분은 웹에서 제 &lt;a href=&quot;https://nbviewer.jupyter.org/github/zzsza/tfx-tutorial/blob/master/data-validation/All-Features-Example.ipynb?flush_cache=true&quot;&gt;Github nbviewer&lt;/a&gt; 참고!&lt;/li&gt;
      &lt;li&gt;Numeric Features
        &lt;ul&gt;
          &lt;li&gt;맨 왼쪽에 Sort By 옵션
            &lt;ul&gt;
              &lt;li&gt;Non-uniformity&lt;/li&gt;
              &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/gv4a1ljc3a2whww/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2013.50.49.png?raw=1&quot; /&gt;&lt;/li&gt;
              &lt;li&gt;Amount missing/zero&lt;/li&gt;
              &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/e3odgkz2fom61v1/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2013.51.11.png?raw=1&quot; /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;오른쪽에 Chart to show은 분포, Quantiles, Value list length 등으로 볼 수 있고, 클릭으로 log로 변환 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Categorical Feature도 아래처럼 시각화됨
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/3v0v13mx83kxt06/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2013.54.21.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;SHOW RAW DATA를 누르면 카테고리 데이터 count 결과 보여줌&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Train과 Eval Data 동시에 시각화&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Kaggle에서 매우 유용할 듯&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  eval_stats = tfdv.generate_statistics_from_csv(data_location=EVAL_DATA)
  tfdv.visualize_statistics(lhs_statistics=eval_stats, rhs_statistics=train_stats,
                        lhs_name='EVAL_DATASET', rhs_name='TRAIN_DATASET')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/yp05oqr5pz5mcag/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2013.57.04.png?raw=1&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이제 파란색은 Eval data, 주황색은 Train data&lt;/li&gt;
      &lt;li&gt;우측 Charts to show에서 percentages를 클릭시 Eval과 Train의 비율을 포개서 보여줌
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/p9uzhb7b6xauwgr/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2013.59.00.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스키마-추론&quot;&gt;스키마 추론&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tfdv.infer_schema&lt;/code&gt;로 스키마를 추론한 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;tfdv.display_shcema&lt;/code&gt;로 출력&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;infer schema 결과 스키마 Protocol buffer가 생성됨&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  schema = tfdv.infer_schema(statistics=train_stats)
  # method : tfdv.infer_schema(statistics, infer_feature_shape=True, max_string_domain_size=100)
	
  tfdv.display_schema(schema=schema)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/pukezj5i0v7tp3g/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2014.02.39.png?raw=1&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;각 Feature별 Type, Presence, Valency, Domain 출력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feautre의 속성을 바꾸고 싶을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;tfdv.get_feature&lt;/code&gt;로 가져온 후 수정&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  tfdv.get_feature(schema, 'payment_type').name = &quot;oh&quot;
  schema 
  # find name: 'oh'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;다시 복구&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  tfdv.get_feature(schema, 'oh').name = &quot;payment_type&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-검증&quot;&gt;데이터 검증&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Validation 기능&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예를 들어 Train엔 없는 Categorical Value가 Test에 존재한다면?&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  anomalies = tfdv.validate_statistics(statistics=eval_stats, schema=schema)
  tfdv.display_anomalies(anomalies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mqhkt513q5ufwcp/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2014.51.21.png?raw=1&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;company, payment type feature에 예상하지 못한 값이 있음&lt;/li&gt;
      &lt;li&gt;문제 해결을 위해 min_domain_mass 제약 조건을 추가하고, value를 수동으로 추가함&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Relax the minimum fraction of values that must come from the domain for feature company.
  company = tfdv.get_feature(schema, 'company')
  company.distribution_constraints.min_domain_mass = 0.9
	
  # Add new value to the domain of feature payment_type.
  payment_type_domain = tfdv.get_domain(schema, 'payment_type')
  payment_type_domain.value.append('Prcard')
	
  # Validate eval stats after updating the schema 
  updated_anomalies = tfdv.validate_statistics(eval_stats, schema)
  tfdv.display_anomalies(updated_anomalies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Serving시 데이터 검증
    &lt;ul&gt;
      &lt;li&gt;requirements를 정의해 특정 문제가 발생하면 자동으로 수정될 수 있게 보조해주는 기능도 존재&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  serving_stats = tfdv.generate_statistics_from_csv(SERVING_DATA)
  serving_anomalies = tfdv.validate_statistics(serving_stats, schema)

  tfdv.display_anomalies(serving_anomalies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lmdgwnk79ii3n5s/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2015.04.57.png?raw=1&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;tips 컬럼은 완벽하게 missing이고 trip_seconds는 FLOAT 타입을 예상했는데 INT 타입이 들어옴&lt;/li&gt;
      &lt;li&gt;타입 문제 해결 방법
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;infer_type_from_schema=True&lt;/code&gt;인 StatsOptions를 생성한 후, generate_statistics_from_csv에 추가&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  options = tfdv.StatsOptions(schema=schema, infer_type_from_schema=True)
  serving_stats = tfdv.generate_statistics_from_csv(SERVING_DATA, stats_options=options)
  serving_anomalies = tfdv.validate_statistics(serving_stats, schema)

  tfdv.display_anomalies(serving_anomalies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;tips feature가 serving 데이터에 없는 문제 해결 방법
        &lt;ul&gt;
          &lt;li&gt;스키마 환경을 TRAINING과 SERVING으로 생성한 후, SERVING시 tips 데이터가 없는 것을 명시&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # All features are by default in both TRAINING and SERVING environments.
  schema.default_environment.append('TRAINING')
  schema.default_environment.append('SERVING')
		
  # Specify that 'tips' feature is not in SERVING environment.
  tfdv.get_feature(schema, 'tips').not_in_environment.append('SERVING')
		
  serving_anomalies_with_env = tfdv.validate_statistics(
      serving_stats, schema, environment='SERVING')
		
  tfdv.display_anomalies(serving_anomalies_with_env)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;drift와-skew-체크&quot;&gt;Drift와 Skew 체크&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tfdv.validate_statistics()&lt;/code&gt; method를 사용해 체크&lt;/li&gt;
  &lt;li&gt;Drift
    &lt;ul&gt;
      &lt;li&gt;Drift detection은 Categorical 데이터 및 데이터의 연속 기간(N, N+1) 사이(예를 들면 서로 다른 날의 훈련 데이터 사이)에서 지원&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chebyshev_distance&quot;&gt;L-infinity distnace&lt;/a&gt;로 Drift를 표현하고 허용값보다 높으면 경고를 받을 수 있음&lt;/li&gt;
      &lt;li&gt;정확한 거리를 설정하는 것은 도메인 지식과 실험을 필요로하는 반복 프로세스&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Skew
    &lt;ul&gt;
      &lt;li&gt;Schema Skew
        &lt;ul&gt;
          &lt;li&gt;같은 스키마를 가지지 않을 때&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Feature Skew
        &lt;ul&gt;
          &lt;li&gt;Feature 생성 로직이 변경될 때&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Distribution Skew
        &lt;ul&gt;
          &lt;li&gt;Train, Serving 데이터 분포가 다를 경우&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Add skew comparator for 'payment_type' feature.
  payment_type = tfdv.get_feature(schema, 'payment_type')
  payment_type.skew_comparator.infinity_norm.threshold = 0.01
	
  # Add drift comparator for 'company' feature.
  company=tfdv.get_feature(schema, 'company')
  company.drift_comparator.infinity_norm.threshold = 0.001
	
  skew_anomalies = tfdv.validate_statistics(train_stats, schema,
                                            previous_statistics=eval_stats,
                                            serving_statistics=serving_stats)
	
  tfdv.display_anomalies(skew_anomalies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2gsxvyl6rke62iq/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2015.18.46.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;payment_type이 train / serving시 거리가 매우 큼&lt;/li&gt;
  &lt;li&gt;company가 과거와 현재의 거리가 매우 큼&lt;/li&gt;
  &lt;li&gt;위 예시에선 의도적으로 threshold값을 낮게 설정해 오류가 발생하도록 한 것이기 때문에 따로 수정하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스키마-저장&quot;&gt;스키마 저장&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;스키마를 검토하고 큐레이션이 되었으니 “frozen”(고정된) 상태를 반영하도록 Protocol Buffer에 저장&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  from tensorflow.python.lib.io import file_io
  from google.protobuf import text_format
	
  file_io.recursive_create_dir(OUTPUT_DIR)
  schema_file = os.path.join(OUTPUT_DIR, 'schema.pbtxt')
  tfdv.write_schema_text(schema, schema_file)
	
  !cat {schema_file}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-형태가-다를-경우&quot;&gt;데이터 형태가 다를 경우&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;현재 TFRecord, CSV, Dataframe만 지원하는데 그 외의 데이터 타입을 사용한다면 Apache Beam의 &lt;code class=&quot;highlighter-rouge&quot;&gt;PTransform&lt;/code&gt;을 사용해 데이터를 가공할 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/tfx/data_validation/get_started#writing_custom_data_connector&quot;&gt;링크&lt;/a&gt; 참고하면 예시가 나와있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;구글-클라우드에서-사용하기&quot;&gt;구글 클라우드에서 사용하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;설치&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pip download tensorflow_data_validation \
  --no-deps \
  --platform manylinux1_x86_64 \
  --only-binary=:all:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예시 코드 snippet&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import tensorflow_data_validation as tfdv
  from apache_beam.options.pipeline_options import PipelineOptions, GoogleCloudOptions, StandardOptions, SetupOptions
	
  PROJECT_ID = ''
  JOB_NAME = ''
  GCS_STAGING_LOCATION = ''
  GCS_TMP_LOCATION = ''
  GCS_DATA_LOCATION = ''
  # GCS_STATS_OUTPUT_PATH is the file path to which to output the data statistics
  # result.
  GCS_STATS_OUTPUT_PATH = ''
	
  PATH_TO_WHL_FILE = ''
	
	
  # Create and set your PipelineOptions.
  options = PipelineOptions()
	
  # For Cloud execution, set the Cloud Platform project, job_name,
  # staging location, temp_location and specify DataflowRunner.
  google_cloud_options = options.view_as(GoogleCloudOptions)
  google_cloud_options.project = PROJECT_ID
  google_cloud_options.job_name = JOB_NAME
  google_cloud_options.staging_location = GCS_STAGING_LOCATION
  google_cloud_options.temp_location = GCS_TMP_LOCATION
  options.view_as(StandardOptions).runner = 'DataflowRunner'
	
  setup_options = options.view_as(SetupOptions)
  # PATH_TO_WHL_FILE should point to the downloaded tfdv wheel file.
  setup_options.extra_packages = [PATH_TO_WHL_FILE]
	
  tfdv.generate_statistics_from_tfrecord(GCS_DATA_LOCATION,
                                         output_path=GCS_STATS_OUTPUT_PATH,
                                         pipeline_options=options)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;언제-tfdv를-사용해야할까&quot;&gt;언제 TFDV를 사용해야할까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;갑자기 이상한 feature가 들어오는지 확인하고 싶을 경우&lt;/li&gt;
  &lt;li&gt;Decision surface에서 모델이 훈련 잘되었는지 확인하고 싶을 경우&lt;/li&gt;
  &lt;li&gt;feature engineering 실수 방지하고 싶을 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;facets&quot;&gt;Facets&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사실 TFDV의 데이터 분포 보여주는 부분은 &lt;a href=&quot;https://pair-code.github.io/facets/&quot;&gt;Facets&lt;/a&gt;으로 이루어져 있음&lt;/li&gt;
  &lt;li&gt;Facets은 현재 2가지 시각화를 제공하는데, 1) FACETS OVERVIEW가 위에서 TFDV가 보여준 시각화고 2) FACETS DIVE로 다양한 양의 데이터를 한번에 인터랙티브하게 시각화해줌&lt;/li&gt;
  &lt;li&gt;FACETS DIVE는 아래처럼 시각화됨
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/rb6nllzw1oqamun/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-12%2015.34.51.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;데이터를 연령대별 직업별로 보여줌&lt;/li&gt;
      &lt;li&gt;Quick Draw 데이터셋을 인터렉티브하게 보려면 &lt;a href=&quot;https://pair-code.github.io/facets/quickdraw.html&quot;&gt;링크&lt;/a&gt; 참고&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Colab에서 사용하는 예제는 &lt;a href=&quot;https://github.com/PAIR-code/facets/blob/master/colab_facets.ipynb&quot;&gt;Github&lt;/a&gt;에 나와있음
    &lt;ul&gt;
      &lt;li&gt;데이터를 데이터프레임으로 불러온 후, to_json을 사용해 json으로 변경&lt;/li&gt;
      &lt;li&gt;그 후 HTML Template을 사용해 노트북에서 볼 수 있도록 출력&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Load UCI census train and test data into dataframes.
  import pandas as pd
  features = [&quot;Age&quot;, &quot;Workclass&quot;, &quot;fnlwgt&quot;, &quot;Education&quot;, &quot;Education-Num&quot;, &quot;Marital Status&quot;,
              &quot;Occupation&quot;, &quot;Relationship&quot;, &quot;Race&quot;, &quot;Sex&quot;, &quot;Capital Gain&quot;, &quot;Capital Loss&quot;,
              &quot;Hours per week&quot;, &quot;Country&quot;, &quot;Target&quot;]
  train_data = pd.read_csv(
      &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data&quot;,
      names=features,
      sep=r'\s*,\s*',
      engine='python',
      na_values=&quot;?&quot;)
  test_data = pd.read_csv(
      &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test&quot;,
      names=features,
      sep=r'\s*,\s*',
      skiprows=[0],
      engine='python',
      na_values=&quot;?&quot;)
	    
  # Display the Dive visualization for the training data.
  from IPython.core.display import display, HTML
	
  jsonstr = train_data.to_json(orient='records')
  HTML_TEMPLATE = &quot;&quot;&quot;
          &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/0.7.24/webcomponents-lite.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;link rel=&quot;import&quot; href=&quot;https://raw.githubusercontent.com/PAIR-code/facets/master/facets-dist/facets-jupyter.html&quot;&amp;gt;
          &amp;lt;facets-dive id=&quot;elem&quot; height=&quot;600&quot;&amp;gt;&amp;lt;/facets-dive&amp;gt;
          &amp;lt;script&amp;gt;
            var data = {jsonstr};
            document.querySelector(&quot;#elem&quot;).data = data;
          &amp;lt;/script&amp;gt;&quot;&quot;&quot;
  html = HTML_TEMPLATE.format(jsonstr=jsonstr)
  display(HTML(html))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;refenrece&quot;&gt;Refenrece&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/data-validation&quot;&gt;TFDV Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/tfx/data_validation/get_started&quot;&gt;TFDV Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PAIR-code/facets&quot;&gt;Facets Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/mlops/2019/05/12/tensorflow-data-validation-basic/</link>
        <guid isPermaLink="true">https://zzsza.github.io/mlops/2019/05/12/tensorflow-data-validation-basic/</guid>
        
        <category>tfx</category>
        
        
        <category>mlops</category>
        
      </item>
    
      <item>
        <title>Mac, Linux에서 Zip 파일에 password(암호) 설정하는 방법</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Mac OS와 Linux(Ubuntu)에서 Zip 파일에 암호를 설정하는 방법에 대해 작성한 글입니다
    &lt;ul&gt;
      &lt;li&gt;별도의 프로그램 설치 없이 터미널에서 진행하는 방법입니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mac-os에서-압축시-암호-걸기&quot;&gt;Mac OS에서 압축시 암호 걸기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Mac Zip 파일로 압축할 때, 암호 설정하는 방법(Terminal)&lt;/li&gt;
  &lt;li&gt;zip 명령어를 날릴 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; 옵션을 주면 암호를 설정할 수 있음
    &lt;ul&gt;
      &lt;li&gt;약자의 의미는 encrypt(암호화)를 뜻함&lt;/li&gt;
      &lt;li&gt;입력하면 Enter password: 가 나오고 암호를 입력하면 됨(Verify password에서 1번 더 입력)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  zip -e 압축_파일.zip 압축에_사용될_파일
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 확장자로 끝나는 모든 파일을 압축하고 싶은 경우엔 *를 사용하면 됨&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  zip -e 압축_파일.zip *.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;폴더째 압축하고 싶은 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; 옵션	을 주면 됨(암호까지 주려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;-er&lt;/code&gt;)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  zip -er zip_file.zip ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xewt1gmz55550y7/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-08%2021.47.50.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;zip에 대해 궁금하면 zip을 치면 관련 명령어가 나옴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2fwegq5f4x0bdxw/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-08%2021.52.56.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mac-os에서-압축-풀기&quot;&gt;Mac OS에서 압축 풀기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;unzip 명령어를 통해 압축을 풀 수 있음
    &lt;ul&gt;
      &lt;li&gt;암호가 설정되어 있으면 암호를 물어봄&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  unzip zip_file.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;unzip을 치면 관련 명령어가 나옴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sn688ds59n75z3e/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-05-08%2021.54.35.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;linuxubuntu에서-압축시-암호-걸기&quot;&gt;Linux(Ubuntu)에서 압축시 암호 걸기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;설치&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  apt-get update
  apt-get install zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;zip 명령어 사용시 &lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt; 옵션 사용하면 암호를 설정할 수 있음
    &lt;ul&gt;
      &lt;li&gt;그러나 보안에 취약하기 때문에 비추천&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  zip -P 암호 압축_파일.zip 압축에_사용될_파일
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mac과 동일하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; 옵션을 주면 암호를 설정할 수 있음&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  zip -e 압축_파일.zip 압축에_사용될_파일
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linuxubuntu에서-압축-풀기&quot;&gt;Linux(Ubuntu)에서 압축 풀기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;설치&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  apt-get update
  apt-get install unzip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mac OS와 동일하게 사용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  unzip 압축_파일.zip	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/development/2019/05/08/mac-zip-password/</link>
        <guid isPermaLink="true">https://zzsza.github.io/development/2019/05/08/mac-zip-password/</guid>
        
        <category>linux</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Airflow BigQuery Operator의 이해</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Apache Airflow의 BigQuery Operator에 대한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;bigquery&quot;&gt;BigQuery&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;BigQuery는 Google Cloud Platform에서 매우 좋은 평가를 받고 있는 Managed 데이터 웨어하우스&lt;/li&gt;
  &lt;li&gt;데이터 분석용 데이터베이스로 매우 좋고, 빠른 속도가 장점&lt;/li&gt;
  &lt;li&gt;더 자세한 내용은 &lt;a href=&quot;https://cloud.google.com/bigquery/&quot;&gt;공식 문서&lt;/a&gt; 또는 &lt;a href=&quot;https://www.facebook.com/groups/bigquery/permalink/1760585197568366/&quot;&gt;Google BigQuery Users 참고 자료&lt;/a&gt; 참고!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;airflow-operator&quot;&gt;Airflow Operator&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Apache Airflow는 AWS/GCP Operator들이 잘 구현되어 있음
    &lt;ul&gt;
      &lt;li&gt;굳이 따지면 GCP 쪽 Operator가 더 잘되어 있는 편&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://airflow.apache.org/integration.html?highlight=bigquery#gcp&quot;&gt;공식 문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BigQuery Operator는 내부적으로 &lt;a href=&quot;http://airflow.apache.org/_api/airflow/contrib/hooks/bigquery_hook/index.html#airflow.contrib.hooks.bigquery_hook.BigQueryHook&quot;&gt;BigQueryHook&lt;/a&gt;을 사용해 Google Cloud Platform과 연결
    &lt;ul&gt;
      &lt;li&gt;처음 Operator 사용할 땐 “내부적으로 Hook을 통하는구나” 정도로 먼저 이해한 후, 사용해도 무방&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bigquery-operator&quot;&gt;BigQuery Operator&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://airflow.apache.org/integration.html?highlight=bigquery#bigquery&quot;&gt;공식 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/airflow/tree/master/airflow/contrib/operators&quot;&gt;Github Link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;총 11개 Operator가 존재(1.10.1 버전 기준)
    &lt;ul&gt;
      &lt;li&gt;BigQueryCheckOperator&lt;/li&gt;
      &lt;li&gt;BigQueryIntervalCheckOperator&lt;/li&gt;
      &lt;li&gt;BigQueryValueCheckOperator&lt;/li&gt;
      &lt;li&gt;BigQueryGetDataOperator&lt;/li&gt;
      &lt;li&gt;BigQueryCreateEmptyDatasetOperator&lt;/li&gt;
      &lt;li&gt;BigQueryCreateExternalTableOperator&lt;/li&gt;
      &lt;li&gt;BigQueryDeleteDatasetOperator&lt;/li&gt;
      &lt;li&gt;BigQueryOperator&lt;/li&gt;
      &lt;li&gt;BigQueryTableDeleteOperator&lt;/li&gt;
      &lt;li&gt;BigQueryToBigQueryOperator&lt;/li&gt;
      &lt;li&gt;BigQueryToCloudStorageOperator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용하는 사람마다 다르겠지만 제가 제일 많이 사용하는 Operator는 &lt;code class=&quot;highlighter-rouge&quot;&gt;BigQueryOperator&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BigQueryCreateExternalTableOperator&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BigQueryTableDeleteOperator&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BigQueryToBigQueryOperator&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;BigQueryOperator
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://airflow.apache.org/_api/airflow/contrib/operators/bigquery_operator/index.html#airflow.contrib.operators.bigquery_operator.BigQueryOperator&quot;&gt;공식 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;BigQuery SQl 쿼리를 날려주는 Operator&lt;/li&gt;
      &lt;li&gt;쿼리 결과를 Table로 저장할 수 있음&lt;/li&gt;
      &lt;li&gt;사용 예시&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  from airflow import models
  from airflow.contrib.operators.bigquery_operator import BigQueryOperator
	
  default_dag_args = {
      'owner': 'zzsza',
      'start_date': datetime(2019, 4, 2),
      'email': ['your_email@gmail.com'],
      'email_on_failure': False,
      'email_on_retry': False,
      'retries': 0,
      'project_id': 'your_proeject_name'
  }

  query = &quot;&quot;&quot;
      SELECT *
      FROM `project.dataset.table`
      LIMIT 1000
  &quot;&quot;&quot;
	
  with models.DAG(
      dag_id = 'extract_feature_dag',
      schedule_interval= '30 0 * * *',
      default_args=default_dag_args) as dag:

      bq_query = bigquery_operator.BigQueryOperator(
          task_id='extract_daily_metric',
          bql=query, 
          use_legacy_sql=False,
          destination_dataset_table='dataset.table',
          write_disposition='WRITE_TRUNCATE'
          )
	
      bq_query
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;파라미터 (몇개만 설명)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  BigQueryOperator(bql=None, sql=None, destination_dataset_table=None, write_disposition='WRITE_EMPTY', \
      allow_large_results=False, flatten_results=None, bigquery_conn_id='bigquery_default', delegate_to=None, \
      udf_config=None, use_legacy_sql=True, maximum_billing_tier=None, maximum_bytes_billed=None, \
      create_disposition='CREATE_IF_NEEDED', schema_update_options=(), query_params=None, labels=None, \
      priority='INTERACTIVE', time_partitioning=None, api_resource_configs=None, cluster_fields=None, \
      location=None, *args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;bql는 이제 deprecate 예정, sql 사용(.sql 파일도 사용 가능)&lt;/li&gt;
      &lt;li&gt;destination_dataset_table : &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;project&amp;gt;.&amp;lt;dataset&amp;gt;.&amp;lt;table&amp;gt;&lt;/code&gt; 형태로 사용&lt;/li&gt;
      &lt;li&gt;write_disposition : WRITE_EMPTY(빈 경우만 쓰기), WRITE_TRUNCATE(덮어 쓰기), WRITE_APPEND(데이터 Append), &lt;a href=&quot;https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs&quot;&gt;참고 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;bigquery_conn_id : Connection 설정 이름&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BigQueryCreateExternalTable
    &lt;ul&gt;
      &lt;li&gt;GoogleCloudStorageToBigQueryOperator과 유사한 작업을 하는 Operator로 BigQueryCreateExternalTable은 Bigtable, Google Storage, Google Drive 등에서 데이터를 가지고 올 수 있음(더 넓은 개념)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  date = &quot;{#{ macros.ds_format(macros.ds_add(ds, -1), '%Y-%m-%d', '%Y/%m/%d') }#}&quot; # 코드에선 # 빼주세요
	
  create_table = BigQueryCreateExternalTable(bucket='bucket_name', source_objects=[f'{date}/user_log.csv'],
                                      schema_fields =[{&quot;name&quot;: &quot;user_id&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;mode&quot;: &quot;REQUIRED&quot;}, {&quot;name&quot;:&quot;purchase_amount&quot;, &quot;type&quot;: &quot;INTEGER&quot;, &quot;mode&quot;: &quot;NULLABLE&quot;}],
                                      schema_object='bigquery-schema/user_log.json' # Google Storage path,
                                      source_format='CSV',
                                      bigquery_conn_id='bigquery_default',
                                      google_cloud_storage_conn_id='storage_default'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;BigQueryDeleteDatasetOperator
    &lt;ul&gt;
      &lt;li&gt;데이터셋 삭제 Operator&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  delete_temp_data = BigQueryDeleteDatasetOperator(dataset_id = 'temp-dataset',
                                       project_id = 'temp-project',
                                       bigquery_conn_id='_my_gcp_conn_',
                                       task_id='Deletetemp',
                                       dag=dag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;BigQueryToBigQueryOperator
    &lt;ul&gt;
      &lt;li&gt;BigQuery Table A를 B로 옮길 때 사용하는 Operator&lt;/li&gt;
      &lt;li&gt;데이터 마이그레이션시 사용&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  move_table = BigQueryToBigQueryOperator(source_project_dataset_tables='project.dataset.table',  \
                                  destination_project_dataset_talbe='project.dataset.tableb', write_disposition='WRITE_TRUNCATE', \
                                  bigquery_conn_id='bigquery_default')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/data/2018/01/04/airflow-1/&quot;&gt;Apache Airflow - Workflow 관리 도구(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/mlops/2019/04/17/airflow-bigquery-operator/</link>
        <guid isPermaLink="true">https://zzsza.github.io/mlops/2019/04/17/airflow-bigquery-operator/</guid>
        
        <category>airflow</category>
        
        
        <category>mlops</category>
        
      </item>
    
      <item>
        <title>Interpretable Machine Learning</title>
        <description>&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 Alumni Special Seminar, Interpretable Machine Learning 세미나를 듣고 정리한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;총평&quot;&gt;총평&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;요새 Interpretable Machine Learning의 필요성을 느끼고 LIME이나 깃북을 보며 공부하고 있었는데, 연사님의 좋은 발표 덕에 Interpretable ML의 큰 그림을 더 잘 이해할 수 있게됨&lt;/li&gt;
  &lt;li&gt;많은 사람들이 비슷한 생각을 하고 있구나- 깨달았고, 회사 업무에 어떻게 적용할 수 있을지 고민해볼 예정&lt;/li&gt;
  &lt;li&gt;추후 참고하면 좋을 컨텐츠
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://christophm.github.io/interpretable-ml-book/&quot;&gt;https://christophm.github.io/interpretable-ml-book/&lt;/a&gt; : 전반적인 내용이 잘 나와있는 Gitbook&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://people.csail.mit.edu/beenkim/papers/BeenK_FinaleDV_ICML2017_tutorial.pdf&quot;&gt;Interpretable Machine Learning, ICML 2017&lt;/a&gt; : ICML 2017 Tutorial&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://interpretable.ml/&quot;&gt;Interpretable ML Symposium&lt;/a&gt; : NIPS 2017&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://pay.modulabs.co.kr/lab_safeai/&quot;&gt;모두의 연구소 Safe AI Lab&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/marcotcr/lime&quot;&gt;LIME Github&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Kaggle &lt;a href=&quot;https://www.kaggle.com/learn/machine-learning-explainability&quot;&gt;Machine Learning Explainability&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Paper
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1901.04592&quot;&gt;Interpretable machine learning: definitions, methods, and applications&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.kdd.org/kdd2016/papers/files/rfp0573-ribeiroA.pdf&quot;&gt;Why Should I Trust You? Explaining the Prediction of Any classifier&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1709.06680&quot;&gt;Deep Lattice Networks and Partial Monotonic functions&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1610.02391&quot;&gt;Grad-CAM : Visual Explanations from Deep networks via Gradient-Based localization&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.nature.com/articles/s41591-018-0107-6&quot;&gt;Clinically applicable deep learning for diagnosis and referral in retinal disease&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1805.09901&quot;&gt;Boolean Decision Rules via Column Generation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1811.12615&quot;&gt;An Interpretable Model with Globally Consistent Explanations for Credit Risk&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1811.10154&quot;&gt;Please Stop Explaining Black Box Models for High Stakes Decisions&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://papers.nips.cc/paper/8072-co-teaching-robust-training-of-deep-neural-networks-with-extremely-noisy-labels.pdf&quot;&gt;Co-teaching : Robust Training of Deep Neural Networks with Extremely Noisy Labels&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fastcampus.co.kr/data_seminar_fcalumni/&quot;&gt;패스트캠퍼스 Alumni Special Seminar - Interpretable Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;연사님
    &lt;ul&gt;
      &lt;li&gt;윤상웅님
        &lt;ul&gt;
          &lt;li&gt;장병탁 교수님 연구실&lt;/li&gt;
          &lt;li&gt;SNU Robotics&lt;/li&gt;
          &lt;li&gt;해줌&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;빌리언즈라는 드라마&lt;/li&gt;
  &lt;li&gt;2명의 트레이더
    &lt;ul&gt;
      &lt;li&gt;의견 중재가 필요한 상황&lt;/li&gt;
      &lt;li&gt;얼마나 확신하는지 물어봄&lt;/li&gt;
      &lt;li&gt;이 때 답변을 못하면?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트레이더는 곧 ML Model
    &lt;ul&gt;
      &lt;li&gt;한다면?
        &lt;ul&gt;
          &lt;li&gt;과거 데이터 /시뮬레이션에 대해서 철저히 검증됨&lt;/li&gt;
          &lt;li&gt;알고리즘이 기반한 아이디어가 말이 되고 납득이 됨&lt;/li&gt;
          &lt;li&gt;리스크가 적음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;하지 않는다면?
        &lt;ul&gt;
          &lt;li&gt;과거 데이터에 대해서만 검증(=시뮬레이션에 대해서만)&lt;/li&gt;
          &lt;li&gt;알고리즘이 작동하는 원리가 말이 안됨&lt;/li&gt;
          &lt;li&gt;리스크가 큼&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ML의 숙명 - 1
    &lt;ul&gt;
      &lt;li&gt;에러가 반드시 발생함
        &lt;ul&gt;
          &lt;li&gt;Bayes Error
            &lt;ul&gt;
              &lt;li&gt;정의 : Classification 문제에서 이론적으로 도달할 수 있는 최소한의 오분류율&lt;/li&gt;
              &lt;li&gt;각 class의 확률분포가 겹치는 만큼 발생&lt;/li&gt;
              &lt;li&gt;Bayes Error보다 오분류율을 줄일 수 없으며, 많은 경우 Bayes Error ≠ 0&lt;/li&gt;
              &lt;li&gt;새로운 정보를 가진 Feature가 추가되어야만 Bayes Error를 낮출 수 있음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;어떤 에러는 아주 치명적
        &lt;ul&gt;
          &lt;li&gt;loss(암 환자를 정상으로 분류) &amp;gt; loss(정상을 암환자로 분류)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ML의 숙명 - 2
    &lt;ul&gt;
      &lt;li&gt;예측값만 제공
        &lt;ul&gt;
          &lt;li&gt;인간을 설득시키기엔 부족함&lt;/li&gt;
          &lt;li&gt;알고리즘 작동으로 얻는 정보가 너무 적음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;일부 알고리즘은 불확실성(uncertainty) 혹은 확정도(confidence)도 함께 제공
        &lt;ul&gt;
          &lt;li&gt;그러나 항상 제공하진 않음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;결국 &lt;strong&gt;신뢰의 문제&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ML 알고리즘을 믿고 의존할 수 있는가?&lt;/li&gt;
      &lt;li&gt;ML 알고리즘이 잘못되었을 때 인간이 바로잡을 수 있는가?&lt;/li&gt;
      &lt;li&gt;ML 알고리즘이 예측하지 못한 안 좋은 효과를 일으키지 않는가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;trusthworthy-machine-learning&quot;&gt;Trusthworthy Machine Learning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;신뢰할만한 머신러닝, 다양한 분야랑 연결됨&lt;/li&gt;
  &lt;li&gt;1) Interpretable ML&lt;/li&gt;
  &lt;li&gt;2) Causality : 상관관계가 아닌 인과관계를 학습
    &lt;ul&gt;
      &lt;li&gt;코잘리티&lt;/li&gt;
      &lt;li&gt;X로부터 Y를 예측할 수 있다고 X가 Y의 원인인 것은 아님
        &lt;ul&gt;
          &lt;li&gt;X와 Y가 상관관계(correlation)이 있을 뿐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;관측 데이터로 인과관계를 알아내는 것은 매우 어려운 일&lt;/li&gt;
      &lt;li&gt;외부 변수(Confounding variable) → 현실에선 항상 존재&lt;/li&gt;
      &lt;li&gt;당연한 것(암 걸린 사람이 항암제 처방을 받았을 것이다)을 인과관계로 정의할 수 있는데, 그럼 bias… 그러면 안됨&lt;/li&gt;
      &lt;li&gt;이론적으로 어디까지 가능한지 학회에서 연구중&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) Fairness : 알고리즘의 공정성
    &lt;ul&gt;
      &lt;li&gt;ML 알고리즘은 편향(bias)되기 쉬움
        &lt;ul&gt;
          &lt;li&gt;예시
            &lt;ul&gt;
              &lt;li&gt;흑인 사진을 고릴라라고 인식&lt;/li&gt;
              &lt;li&gt;인도 신부 복장을 입은 사람을 댄서로 인식&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;수집한 데이터의 편향&lt;/li&gt;
          &lt;li&gt;데이터셋 제작자의 부주의&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4) Pirvacy-preserving ML : 사용자 데이터 보호
    &lt;ul&gt;
      &lt;li&gt;ML 모델 개발 과정 및 서비스 중 확인을 위해 로그 데이터를 까보는데, 민감한 개인 정보가 노출됨&lt;/li&gt;
      &lt;li&gt;암호화된 데이터로 학습할 수 있을까?&lt;/li&gt;
      &lt;li&gt;애초에 데이터 수집 단계에서 Privacy를 보존할 수 있을까?&lt;/li&gt;
      &lt;li&gt;Differential Privacy
        &lt;ul&gt;
          &lt;li&gt;설문지에 에이즈 보균자냐고 물어보면 정직하게 답변하지 않을 것&lt;/li&gt;
          &lt;li&gt;동전을 던져서 앞면이 나오면 무조건 YES, 뒷면이 나오면 솔직한 답을 적음&lt;/li&gt;
          &lt;li&gt;얻은 YES 응답률에서 0.5를 빼고 2배를 하면 실제 YES 응답 비율을 구할 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5) Adversarial attack : 해킹에 대한 보호
    &lt;ul&gt;
      &lt;li&gt;DNN의 입력에 작은 perturbation을 출력해 원하는대로 출력을 조절&lt;/li&gt;
      &lt;li&gt;왜 발생하는지? 어떻게 방어할 것인지? 고민하고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;interpretable-machine-learning&quot;&gt;Interpretable Machine Learning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;예측 결과에 더해서 사람이 이해할 수 있는 형태로 추가적인 정보를 제공할 수 있는 머신러닝 알고리즘을 연구하는 분야&lt;/li&gt;
  &lt;li&gt;목표
    &lt;ul&gt;
      &lt;li&gt;Interpretability란 무엇인가?&lt;/li&gt;
      &lt;li&gt;Interpretability가 가능한가? 왜 필요한가?&lt;/li&gt;
      &lt;li&gt;UI 기획으로도 풀 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;신뢰를 얻는 방법은 상황과 상대에 따라 다름
    &lt;ul&gt;
      &lt;li&gt;문제 상황, 데이터셋, 알고리즘, 사용자의 상황에 따라 다르게 접근&lt;/li&gt;
      &lt;li&gt;새로운 알고리즘만이 해결책은 아님&lt;/li&gt;
      &lt;li&gt;여러 문제에 맞는 해결책을 &lt;strong&gt;직접 고민해야 함&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;시각화는 어떻게? 등&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Interpretable ML의 효용 (From selvaragu, 2017)
    &lt;ul&gt;
      &lt;li&gt;어디에 도움이 될 것인가&lt;/li&gt;
      &lt;li&gt;(1) 연구 개발 단계의 ML
        &lt;ul&gt;
          &lt;li&gt;인간 수준 이하의 알고리즘의 경우(ex: VQA)&lt;/li&gt;
          &lt;li&gt;왜 못하는지 ⇒ 확인 후 개선&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(2) 상용화 수준의 ML
        &lt;ul&gt;
          &lt;li&gt;인간 수준에 가깝거나 유용한 수준(ex: Image classification)&lt;/li&gt;
          &lt;li&gt;사용자들에게 신뢰를 얻고 활용도를 증진&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(3) 인간 이상의 수준 ML
        &lt;ul&gt;
          &lt;li&gt;인간보다 압도적으로 뛰어난&lt;/li&gt;
          &lt;li&gt;Interpretability를 통해 인간을 가르칠 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;널리 퍼져 있는 믿음
    &lt;ul&gt;
      &lt;li&gt;Linear model은 interpretable ( 학계의 정설)
        &lt;ul&gt;
          &lt;li&gt;Linear Regression, Logistic Regression&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1) 개별 가중치를 파악
    &lt;ul&gt;
      &lt;li&gt;전체적인 규칙을 알 수 있음 ⇒ Global interpretability&lt;/li&gt;
      &lt;li&gt;함정
        &lt;ul&gt;
          &lt;li&gt;다중 공선성
            &lt;ul&gt;
              &lt;li&gt;입력 feature간 상관성이 높을 경우&lt;/li&gt;
              &lt;li&gt;weight 값이 직관과 다르게 얻어질 수 있음(그래프를 뿌려보면 양의 상관관계가 보이는데 실제로 나온 계수는 음수)&lt;/li&gt;
              &lt;li&gt;상관성이 높은 feature를 제거
                &lt;ul&gt;
                  &lt;li&gt;차원 축소 혹은 feature delete ⇒ 휴리스틱&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) 개별 Data point에 대해 예측해야되는 순간
    &lt;ul&gt;
      &lt;li&gt;나이, 거리, 등록기간에 따른 재등록 확률을 예측&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;w_{i} x_{i}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w_{i} x_{i}&lt;/script&gt; : log odds-ratio에 대한 기여도&lt;/li&gt;
      &lt;li&gt;Local interpretability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) 확률값과 신뢰구간
    &lt;ul&gt;
      &lt;li&gt;모델의 출력은 확률값 0 ~ 1&lt;/li&gt;
      &lt;li&gt;1에 가까우면 확실하게 재등록&lt;/li&gt;
      &lt;li&gt;0에 가까우면 확실히 이탈&lt;/li&gt;
      &lt;li&gt;0.5면? → ??&lt;/li&gt;
      &lt;li&gt;모델의 예측이 얼마나 확실한지 제공
        &lt;ul&gt;
          &lt;li&gt;Predictive Uncertainty / Confidence Score&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Interpretable ML의 세 방향
    &lt;ul&gt;
      &lt;li&gt;1) Global interpretability
        &lt;ul&gt;
          &lt;li&gt;모델이 전체적으로 어떤 원리로 예측하는지 설명&lt;/li&gt;
          &lt;li&gt;분산 분석, 통계 테스트&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2) Local interpretability
        &lt;ul&gt;
          &lt;li&gt;개별 data point에 대해 예측의 이유 설명&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;w_{i} x_{i}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w_{i} x_{i}&lt;/script&gt; 항들의 값을 비교&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;3) Uncertainty
        &lt;ul&gt;
          &lt;li&gt;예측값에 얼마나 확신이 있는지?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;1)과 2)는 아직 정립된 용어는 아님&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;global-interpretability&quot;&gt;Global Interpretability&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1) Monotonicity(단조성)
    &lt;ul&gt;
      &lt;li&gt;대출 연체를 했는데 신용등급이 올라간다?&lt;/li&gt;
      &lt;li&gt;소득이 늘었는데 신용 등급이 떨어진다?&lt;/li&gt;
      &lt;li&gt;입력 변수와 예측 변수의 단조성을 강제로 넣어줌!
        &lt;ul&gt;
          &lt;li&gt;상식과 벗어난 거동을 방지&lt;/li&gt;
          &lt;li&gt;모델의 전체적인 작동을 설명하기 쉬움&lt;/li&gt;
          &lt;li&gt;선형모델은 단조성이 보장됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;굉장히 강력한 제한조건
        &lt;ul&gt;
          &lt;li&gt;소수의 모델에만 적용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Linear 모델은 Monotonic함&lt;/li&gt;
      &lt;li&gt;Gradient Boosting(XGB, LGBM)은 monotonic constraint option 존재
        &lt;ul&gt;
          &lt;li&gt;원래 에러를 무조건 줄이라고 하면 사인 함수로 할텐데, 모노토닉 constraint 옵션을 주면 어디는 트리를 만들지 않고 단조 증가/단조 감소 하도록 예측&lt;/li&gt;
          &lt;li&gt;실용적으론 제일 유용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Neural Networks
        &lt;ul&gt;
          &lt;li&gt;신경망과 유사한 구조를 사용하며 단조성 조건 추가&lt;/li&gt;
          &lt;li&gt;Tensorflow 구현체 공개됨
            &lt;ul&gt;
              &lt;li&gt;TensorFlow Lattice&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/lattice&quot;&gt;https://github.com/tensorflow/lattice&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;1D Lattice
            &lt;ul&gt;
              &lt;li&gt;한 레이어나 유닛&lt;/li&gt;
              &lt;li&gt;일종의 Look-up Table&lt;/li&gt;
              &lt;li&gt;5개의 점이 찍혀있는 좌표를 알면 그에 맞는 함수 생성&lt;/li&gt;
              &lt;li&gt;Key가 아닌 값(없는 좌표)을 받으면 linear interpolation&lt;/li&gt;
              &lt;li&gt;파라미터 값은 gradient descent로 학습&lt;/li&gt;
              &lt;li&gt;1차원 함수로 다 표현&lt;/li&gt;
              &lt;li&gt;Monotonicity
                &lt;ul&gt;
                  &lt;li&gt;Key1 &amp;lt; Key2이면 Value1 ≤ Value2가 되도록 constraint&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Activation function의 역할
                &lt;ul&gt;
                  &lt;li&gt;ReLU의 선형결합과 동일&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Exclusive or 문제
                &lt;ul&gt;
                  &lt;li&gt;Linear는 풀 수 없음&lt;/li&gt;
                  &lt;li&gt;1,3 / 2,4 같은 클래스&lt;/li&gt;
                  &lt;li&gt;단조성 강제하면 모델이 가질 수 있는 함수의 Set이 줄어드니 함수가 약해지는 것이 맞음&lt;/li&gt;
                  &lt;li&gt;단조성이 선형성은 아님&lt;/li&gt;
                  &lt;li&gt;모든 변수에 대해서 모노토릭할 필요는 없음 ⇒ partial monotonic&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;KD Lattice
            &lt;ul&gt;
              &lt;li&gt;2^{k}의 격자점&lt;/li&gt;
              &lt;li&gt;3개의 입력을 받음&lt;/li&gt;
              &lt;li&gt;격자점이 아닌 값이 들어오면 multilinear interpolation&lt;/li&gt;
              &lt;li&gt;Monotonicity가 필요할 경우 격자점들의 값에 제한조건 부여&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Deep Lattice Network
            &lt;ul&gt;
              &lt;li&gt;쌓아둠&lt;/li&gt;
              &lt;li&gt;Monotonic이라고 지정된 입력이 지나가는 layer는 모두 monotonic constraint
                &lt;ul&gt;
                  &lt;li&gt;constraint를 만족하는 파라미터를 찾는 최적화 과정이 non-trivial&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Classification/Regression loss를 최소화하도록 SGD를 이용해 학습&lt;/li&gt;
              &lt;li&gt;단조적 연산만 하도록 강제&lt;/li&gt;
              &lt;li&gt;모노토릭한 것을 하면 반쯤은 지켜야한다는 constraint가 생김 ⇒ 더 많은 연산량&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) Feature Importance
    &lt;ul&gt;
      &lt;li&gt;Rough한 정보지만 여러 종류 모델에 적용 가능&lt;/li&gt;
      &lt;li&gt;Feature selection과 밀접한 연관
        &lt;ul&gt;
          &lt;li&gt;변수가 너무 많을 경우 어떤 변수를 예측모형에 사용할지 선택하는 작업&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(1) Feature Ablation
        &lt;ul&gt;
          &lt;li&gt;Feature를 제거하고 돌렸을 때 성능이 얼마나 떨어지는지 확인&lt;/li&gt;
          &lt;li&gt;성능이 많이 떨어지는 feature가 중요한 feature&lt;/li&gt;
          &lt;li&gt;장점
            &lt;ul&gt;
              &lt;li&gt;무식한 방법이지만 직관적으로 이해하기 쉬움&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;단점
            &lt;ul&gt;
              &lt;li&gt;연산이 많음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(2) Mutual information
        &lt;ul&gt;
          &lt;li&gt;정보 이론에서 나옴&lt;/li&gt;
          &lt;li&gt;두 확률변수 X, Y가 서로에게 얼마나 정보를 가지고 있는지 나타내는 값&lt;/li&gt;
          &lt;li&gt;MI(X, Y)=0이면 X와 Y가 독립&lt;/li&gt;
          &lt;li&gt;Corr과 다른 것
            &lt;ul&gt;
              &lt;li&gt;Corr은 선형 관계만 표시하는데, 이건 비선형도 사용 가능&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;MI가 큰 feature가 중요한 feature일 확률이 높음&lt;/li&gt;
          &lt;li&gt;Nearest neighbor, kernel density estimation 등을 이용한 비모수적(non-parameter) 추정 방법 가능&lt;/li&gt;
          &lt;li&gt;MI가 아니더라도 t-statistic 등 여러 지표로 측정 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(3) L1 constraint
        &lt;ul&gt;
          &lt;li&gt;가중치의 L1 nort으로 regularization&lt;/li&gt;
          &lt;li&gt;0이 많이 들어간 솔루션을 찾음&lt;/li&gt;
          &lt;li&gt;중요하지 않은 feature는 weight는 0이 됨, Sparse solution&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;local-interpretability&quot;&gt;Local Interpretability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이게 연구가 많이 됨&lt;/li&gt;
  &lt;li&gt;1) Local Surrogate
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;LIME(Local interpretable model-agnostic explanations)&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;복잡한 모형을 국지적(local)으로 근사하는 선형 모형을 만듬&lt;/li&gt;
      &lt;li&gt;특정 포인트 주변에 선형 모형을 fitting&lt;/li&gt;
      &lt;li&gt;전체에 대해선 모르지만 특정 부분 근처엔 왼쪽은 ~, 오른쪽은 ~&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/marcotcr/lime&quot;&gt;https://github.com/marcotcr/lime&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Interpretable Data Representation
        &lt;ul&gt;
          &lt;li&gt;이것에 대해 생각해볼 수 있음&lt;/li&gt;
          &lt;li&gt;이 Feature가 항상 의미가 있을까?&lt;/li&gt;
          &lt;li&gt;해석이 불가능한 것이 있을 수 있음. 이미지에서 개별 픽셀(452번째)이 중요하다고 ???&lt;/li&gt;
          &lt;li&gt;Feature Transform : 루트, 제곱 등 ⇒ 루트는 중요한데 제곱은 중요하지 않다?&lt;/li&gt;
          &lt;li&gt;Feature 자체로 의미가 있는 경우와 없는 경우를 구분&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;LIME
        &lt;ul&gt;
          &lt;li&gt;f(x) : black-box model based on features&lt;/li&gt;
          &lt;li&gt;g(z) : local explanation based on interpretable representation&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\pi_{x}(z)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\pi_{x}(z)&lt;/script&gt; : 가중치&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\Omega (g)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\Omega (g)&lt;/script&gt; : regularization&lt;/li&gt;
          &lt;li&gt;g(z)가 f(x)를 잘 모사하면서 너무 복잡하지 않도록 학습&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) Counterfactual Explanation
    &lt;ul&gt;
      &lt;li&gt;Counterfactual = What if
        &lt;ul&gt;
          &lt;li&gt;만약 이랬다면 다른 결과가 얻어졌을 것이다&lt;/li&gt;
          &lt;li&gt;가상 혹은 진짜의 데이터 포인트를 제시&lt;/li&gt;
          &lt;li&gt;입력값 중 하나, 두개 여러개를 바꿈 ⇒ 예측 결과가 달라짐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Counterfactual 끝판왕 = 입력을 바꿔서 돌려볼 수 있도록 공개
        &lt;ul&gt;
          &lt;li&gt;Simulator
            &lt;ul&gt;
              &lt;li&gt;사용자가 직접 값을 바꿔보면 어떻게 되는지?&lt;/li&gt;
              &lt;li&gt;헬스장 거리를 줄여보니 예측값이 좋아짐&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;단점 : Adversarial attack 등 위험
            &lt;ul&gt;
              &lt;li&gt;classification을 모두 공개하면 attack할 수 있음&lt;/li&gt;
              &lt;li&gt;예를 들어 보험료 산정 알고리즘이면 그걸 해킹해보고.. 특정 조건을 찾아서 내 보험료를 깎을 수 있음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) Gradient-based Explanation
    &lt;ul&gt;
      &lt;li&gt;Grad CAM
        &lt;ul&gt;
          &lt;li&gt;가장 성공적이고 널리 쓰이는 방법&lt;/li&gt;
          &lt;li&gt;Class activation 에 가장 기여하는 hidden neuron을 찾음
            &lt;ul&gt;
              &lt;li&gt;가장 윗층의 conv layer 사용
                &lt;ul&gt;
                  &lt;li&gt;가장 high level 정보&lt;/li&gt;
                  &lt;li&gt;공간적인(Spatial) 정보를 보유하고 있음&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;각 Feautre map의 기여도를 계산함(Global Average Pooling in CAM)&lt;/li&gt;
          &lt;li&gt;Class activation Map L을 얻음&lt;/li&gt;
          &lt;li&gt;L을 upsample(bilinear)하여 입력 image에 시각화&lt;/li&gt;
          &lt;li&gt;장점
            &lt;ul&gt;
              &lt;li&gt;Classification만 했는데 Detection 가능
                &lt;ul&gt;
                  &lt;li&gt;여러 object 가능&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;학습된 네트워크에 적용하기만 하면 됨
                &lt;ul&gt;
                  &lt;li&gt;재학습, 구조 변경이 없어서 예측 성능 유지&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;guided backpropagation과 함께 사용해 더 향상&lt;/li&gt;
              &lt;li&gt;ConvNet으로 시작하는 task는 모두 적용 가능&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;예측 결과에 중요한 이미지 부분을 heatmap 형태로 제공
        &lt;ul&gt;
          &lt;li&gt;일반적인 ConvNet에 대해&lt;/li&gt;
          &lt;li&gt;Image classification, captioning, visual QA 등 여러 종류의 task에 사용 가능&lt;/li&gt;
          &lt;li&gt;네트워크에 변형도 가하지 않고 어떤 성능 저하도 없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Grad CAM 실험
        &lt;ul&gt;
          &lt;li&gt;인간 실험
            &lt;ul&gt;
              &lt;li&gt;실제 사람들에게 설문조사 같은 것을 뿌림&lt;/li&gt;
              &lt;li&gt;이 방법을 사용했을 때 더 신뢰를 느끼는가?&lt;/li&gt;
              &lt;li&gt;결론 : Grad-CAM visualization이 더 믿을만한 알고리즘을 고르는데 도움이 됨&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;모델 실패 사례 분석
            &lt;ul&gt;
              &lt;li&gt;vgg16이 잘못 예측하는 경우를 분석&lt;/li&gt;
              &lt;li&gt;어째서 잘못된 예측을 하는가?&lt;/li&gt;
              &lt;li&gt;관측된 사례
                &lt;ul&gt;
                  &lt;li&gt;Class label의 모호함&lt;/li&gt;
                  &lt;li&gt;헷갈릴만한 경우&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;잘못된 예측에 대해 엉뚱한 CAM이 나오면 모델 학습에 문제가 있다는 것&lt;/li&gt;
              &lt;li&gt;하지만 구체적 개선방안이 언제나 명확한 것은 아님&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Class 레이블의 애매한 이유
    &lt;ul&gt;
      &lt;li&gt;레이블러의 실수 때문(노이즈 때문) 이라면 통계적 접근을 할 수 있을..(딥뉴럴넷의 특징)&lt;/li&gt;
      &lt;li&gt;Co-teaching : Robust Training of Deep Neural Networks with Extremely Noisy Labels&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://papers.nips.cc/paper/8072-co-teaching-robust-training-of-deep-neural-networks-with-extremely-noisy-labels.pdf&quot;&gt;https://papers.nips.cc/paper/8072-co-teaching-robust-training-of-deep-neural-networks-with-extremely-noisy-labels.pdf&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;학습 과정 중간을 보면 레이블이 제대로 된 것부터 학습하고, 아닌 것에 나중에 fitting(나중에 training error가 줄어듬)
        &lt;ul&gt;
          &lt;li&gt;잘못달린 것 같은데? 라고 의심할 수 있고 로버스트하게.. 제안&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이론적 근거가 확실하진 않지만 실험적으로 관찰되는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uncertainty&quot;&gt;Uncertainty&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;설명이 아닌 예측에 대해 얼마나 확신을 가지는지 제시할 수 있는 기법에 대해 이야기함&lt;/li&gt;
  &lt;li&gt;Class 1, 2 분류하는 알고리즘&lt;/li&gt;
  &lt;li&gt;좋은 분류기라면 확실한 것은 확실하다 말하고 경계선은 약간의 불확실성이 있다고 말할 수 있을 듯&lt;/li&gt;
  &lt;li&gt;Confidence Score
    &lt;ul&gt;
      &lt;li&gt;ML 알고리즘은 예측값만 출력하는 것이 일반적&lt;/li&gt;
      &lt;li&gt;그러나 알고리즘에 따라 내부적인 변수를 활용해 예측에 얼마나 확신을 가지고 있는지 알 수 있는 경우가 있음&lt;/li&gt;
      &lt;li&gt;“확률”의 형태를 띄고 있지 않음 → 직관적으로 이해하기 어려움
        &lt;ul&gt;
          &lt;li&gt;SVM Margin&lt;/li&gt;
          &lt;li&gt;Ensemble Methods : 개별 tree들의 예측이 일치하면 high confidence, 불일치하면 low confidence&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Predictive Probability
    &lt;ul&gt;
      &lt;li&gt;로지스틱 회귀나 뉴럴넷은 아웃풋을 확률의 형태로 출력할 수 있음
        &lt;ul&gt;
          &lt;li&gt;확률값이 1에 가까우면 high confidence, 아니면 low confidence&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;정량적으로 (Shannon) Entropy를 기준으로 판단할 수 있음
        &lt;ul&gt;
          &lt;li&gt;3개의 클래스로 예측한 후
            &lt;ul&gt;
              &lt;li&gt;결과 확률이 많이 차이가 안나는 경우 (비등비등)&lt;/li&gt;
              &lt;li&gt;결과 확률이 차이가 크게 나는 경우&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;엔트로피 계산 : 데이터가 얼마나 무질서에 가까운지 측정
            &lt;ul&gt;
              &lt;li&gt;유니폼 분포라면 엔트로피가 높고, 극단적인 분포라면 엔트로피가 낮음&lt;/li&gt;
              &lt;li&gt;엔트로피가 높으면 확신을 많이 하고있진 않겠구나..&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;응용
        &lt;ul&gt;
          &lt;li&gt;Active Learning
            &lt;ul&gt;
              &lt;li&gt;데이터셋을 수집하는 단계부터 생각&lt;/li&gt;
              &lt;li&gt;Label된 데이터가 조금 있고, 새로 취득할 때 어떤 데이터를 취득해야 모델의 학습에 도움이 될까?&lt;/li&gt;
              &lt;li&gt;Labeling은 비싼 작업이므로 최대한 효율적으로 데이터를 수집하는 것이 중요&lt;/li&gt;
              &lt;li&gt;Idea : 모델이 가장 헷갈려하는 데이터를 수집&lt;/li&gt;
              &lt;li&gt;현재 데이터로 모델 학습&lt;/li&gt;
              &lt;li&gt;Unlabeled data들에 대해 예측을 수행&lt;/li&gt;
              &lt;li&gt;예측 확률의 entropy가 가장 큰 sample들을 labeling&lt;/li&gt;
              &lt;li&gt;학습 데이터셋에 추가&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;어떤 것에 취득해야 할까 알고리즘 학습에 도움이 될까?&lt;/strong&gt;가 핵심
                &lt;ul&gt;
                  &lt;li&gt;unlabeld 데이터에 모두 예측을 한 후, 엔트로피가 높은 것을 선택&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;함정
        &lt;ul&gt;
          &lt;li&gt;최근에 Report된 현상&lt;/li&gt;
          &lt;li&gt;확률값이 부정확하단 말이 있음(not calibrated)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;P(Y=1\vert X)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;P(Y=1\vert X)&lt;/script&gt;가 0.5인 데이터들을 모아놓고 보면
            &lt;ul&gt;
              &lt;li&gt;
                &lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;P(Y=1\vert X) ≠ 0.5&lt;/code&gt;&lt;/pre&gt;
                &lt;script type=&quot;math/tex; mode=display&quot;&gt;P(Y=1\vert X) ≠ 0.5&lt;/script&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;이 현상을 개선하기 위해 많은 연구가 이루어짐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bayesian Machine Learning
    &lt;ul&gt;
      &lt;li&gt;불확실성을 위해 많이 사용하는 기법&lt;/li&gt;
      &lt;li&gt;Bayesian 통계에선 확률=확신의 세기&lt;/li&gt;
      &lt;li&gt;모델의 parametere들을 distribution을 갖는 random variable로 취급&lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;계산이 어려움&lt;/li&gt;
          &lt;li&gt;closed-form solution이 없을 수 있어 근사가 필요&lt;/li&gt;
          &lt;li&gt;필요한 계산 양이 많음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Gaussian Process Regression
        &lt;ul&gt;
          &lt;li&gt;가장 깔끔하고 아름다운 머신러닝 알고리즘 중 한나&lt;/li&gt;
          &lt;li&gt;통계학에서 확률 과정(Stochastic Process) 중 하나인 Gaussian Process를 확장해 ML에 사용할 수 있도록 한 것&lt;/li&gt;
          &lt;li&gt;무한히 많은 개수일 때 어떻게 생각할 수 있을까?&lt;/li&gt;
          &lt;li&gt;무한개 중 아무렇게나 N개를 골라도 가우시안 분포를 가진다고 정의&lt;/li&gt;
          &lt;li&gt;머신러닝에선 예측에 쓸 수 있도록 조금 바꿈
            &lt;ul&gt;
              &lt;li&gt;학습 데이터와 예측 대상이 되는 y가 모두 하나의 Gaussian distribution을 따른다고 가정&lt;/li&gt;
              &lt;li&gt;평균이 0이고 covariance matrix가 커널 function으로 주어짐&lt;/li&gt;
              &lt;li&gt;conditional gaussian distribution의 공식에 의해 평균과 분산을 구함&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Predictive uncertainty가 closed form으로 구해지는 몇 안되는 사례&lt;/li&gt;
          &lt;li&gt;Inverse 곱해서 N^{3}이라 몇천개 넘어가면 계산 속도가 급격하게 하락&lt;/li&gt;
          &lt;li&gt;응용 : Bayesian Optimization
            &lt;ul&gt;
              &lt;li&gt;Auto ML을 시작시킨 개념&lt;/li&gt;
              &lt;li&gt;Active Learning과 유사&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;베이지안 뉴럴넷을 다루고 싶었는데 시간 관계나 난이도상 못다루긴 했는데, 관심이 있다면 더 찾아보기
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1506.02142&quot;&gt;https://arxiv.org/abs/1506.02142&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제공되는 형태에 초점을 맞춤
    &lt;ul&gt;
      &lt;li&gt;모델 전체에 대해 interpretable을 줄 것인가? 개별에 대한 interpretable을 줄 것인가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;애초에-interpretable-ml이-가능할까&quot;&gt;애초에 Interpretable ML이 가능할까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;애초에 가능하면 왜 이 사단이 났을까?&lt;/li&gt;
  &lt;li&gt;데이터엔 신호와 소음으로 나눠서 생각
    &lt;ul&gt;
      &lt;li&gt;데이터마다 다 다름! 어떤 데이터는 신호가 낮고 소음이 많고 어떤 데이터는 신호가 높고 소음이 적음&lt;/li&gt;
      &lt;li&gt;낮은 신호/높은 소음 : 베이즈 에러가 높다고 볼 수 있음 ⇒ 주식/금융 데이터, 사회과학 데이터
        &lt;ul&gt;
          &lt;li&gt;단순한 모델&lt;/li&gt;
          &lt;li&gt;소음이 높으면 오버피팅을 막아야 함&lt;/li&gt;
          &lt;li&gt;데이터의 노이즈를 잘 무시하는 것이 관건&lt;/li&gt;
          &lt;li&gt;단순한 모델이니 설명할 필요가 없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;높은 신호/낮은 소음 : 베이즈 에러가 낮다고 볼 수 있음 ⇒ 사진, 음성, 텍스트, 바둑
        &lt;ul&gt;
          &lt;li&gt;복잡한 모델&lt;/li&gt;
          &lt;li&gt;언더피팅이 문제&lt;/li&gt;
          &lt;li&gt;데이터가 많이 필요&lt;/li&gt;
          &lt;li&gt;복잡한 패턴을 포착하는 것이 목표&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;고슴도치와 여우
    &lt;ul&gt;
      &lt;li&gt;고슴도치
        &lt;ul&gt;
          &lt;li&gt;초기에 설정한 규칙을 고수, 예측을 잘 못함&lt;/li&gt;
          &lt;li&gt;근본적 아이디어가 모든 것을 결정한다고 생각&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;여우
        &lt;ul&gt;
          &lt;li&gt;사소한 생각과 증거들을 고려하고 면밀히 살핌&lt;/li&gt;
          &lt;li&gt;여러 접근 방법을 동시에 적용&lt;/li&gt;
          &lt;li&gt;한두마디로 설명할 수 없지만 예측력 상승&lt;/li&gt;
          &lt;li&gt;앙상블 알고리즘, ML 알고리즘&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Human-(in/out of)-the Loop
    &lt;ul&gt;
      &lt;li&gt;데이터를 이용해 할 수 있는 일&lt;/li&gt;
      &lt;li&gt;1) 데이터 시각화&lt;/li&gt;
      &lt;li&gt;2) 지식의 생산 (가설 검정)&lt;/li&gt;
      &lt;li&gt;3) 예측&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/99wxe8sbfrornb6/스크린샷 2019-04-14 15.45.09.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Human in the Loop이 interpretable이 중요한 듯&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;신용평가 Credit Scoring 사례
    &lt;ul&gt;
      &lt;li&gt;이 사람이 돈을 빌렸을 때 잘 갚을 수 있을까?&lt;/li&gt;
      &lt;li&gt;굉장히 큰 임팩트를 주고 있다는 것을 깨달음&lt;/li&gt;
      &lt;li&gt;역사
        &lt;ul&gt;
          &lt;li&gt;1941년 미국에서 시작&lt;/li&gt;
          &lt;li&gt;1950년대 후반 Fiar &amp;amp; Isaac에 의해 방법론 정립 후 상용화 ( Score card &amp;amp; Logistic regression)&lt;/li&gt;
          &lt;li&gt;현재 FICO는 세계 최대의 신용정보 회사
            &lt;ul&gt;
              &lt;li&gt;FICO Score가 미국인들에겐 신용등급과 동일한 단어&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;우리 나라는 NICE신용평가, KCB(Korea Credit Bureau)이 수행&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/q8hajyc0hm5uu1j/스크린샷 2019-04-14 15.49.30.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;NIPS 2018 워크샵
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://sites.google.com/view/feap-ai4fin-2018/&quot;&gt;https://sites.google.com/view/feap-ai4fin-2018/&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://community.fico.com/s/explainable-machine-learning-challenge&quot;&gt;https://community.fico.com/s/explainable-machine-learning-challenge&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Winner : IBM 리서치팀
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;http://papers.nips.cc/paper/7716-boolean-decision-rules-via-column-generation&quot;&gt;http://papers.nips.cc/paper/7716-boolean-decision-rules-via-column-generation&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;명시적인 룰을 뽑아내는 알고리즘을 만듬&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2등
            &lt;ul&gt;
              &lt;li&gt;Duke 대학팀&lt;/li&gt;
              &lt;li&gt;왜 굳이 Black-Box 모델을 쓰고 그걸 설명하려고 하나?&lt;/li&gt;
              &lt;li&gt;애초부터 transparent한 white-box 모델을 쓰자&lt;/li&gt;
              &lt;li&gt;거의 유사한 성능을 낸다!&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;http://dukedatasciencefico.cs.duke.edu/&quot;&gt;http://dukedatasciencefico.cs.duke.edu/&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;웹 데모로 직관적으로 표현&lt;/li&gt;
              &lt;li&gt;히든 뉴런에 이름이 달려있음&lt;/li&gt;
              &lt;li&gt;발표자님이 이걸 좋아한 이유 : 단순히 알고리즘이 중요한 것이 아닐 수 있음! 보여주는 과정도 생각을&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Medical 사례
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://nips.cc/Conferences/2018/Schedule?showEvent=12346&quot;&gt;https://nips.cc/Conferences/2018/Schedule?showEvent=12346&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;이 부분을 보니 환자가 ~~ 병이야&lt;/li&gt;
      &lt;li&gt;영국에서 만든 어플리케이션
        &lt;ul&gt;
          &lt;li&gt;유방암 진단을 받은 사람이 얼마나 더 살 수 있는지?&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://breast.predict.nhs.uk/index.html&quot;&gt;https://breast.predict.nhs.uk/index.html&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;결과를 보여줄 때 생존 확률을 보여주고, 아이콘 형태로 100명을 가정할 때 몇명이 살아나는 확률입니다 (심리적으로 검증) 라고 보여줌&lt;/li&gt;
          &lt;li&gt;어플리케이션 자체가 신뢰를 얻어야 함&lt;/li&gt;
          &lt;li&gt;의사, 간호사, 환자, 환자 부모님, 연구자 등 다양한 이해 관계자가 설명을 얻어가는 포인트가 다름&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Communicating Uncertainty
    &lt;ul&gt;
      &lt;li&gt;생각보다 사람은 확률을 잘 인지하지 못한다&lt;/li&gt;
      &lt;li&gt;생존 확률이 0.92 → 와닿지 않음&lt;/li&gt;
      &lt;li&gt;100명 중 92명이 생존 → 와닿음&lt;/li&gt;
      &lt;li&gt;Heart Age
        &lt;ul&gt;
          &lt;li&gt;나의 심장질환 발병확률(위험)이 몇 세의 확률과 같은가?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Explainable AI는 종합예술
    &lt;ul&gt;
      &lt;li&gt;다면적인 설명이 제공될 필요가 있음
        &lt;ul&gt;
          &lt;li&gt;인간은 본능적으로 거짓이 아닌 것은 여러 각도에서 보아도 참이라는 것을 알고 있음&lt;/li&gt;
          &lt;li&gt;다양한 측면에서 제공된 정보가 모두 일치할 때 신뢰를 얻을 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;복합적인 요소가 작용
        &lt;ul&gt;
          &lt;li&gt;심리, 통계, 윤리, 디자인, 언어&lt;/li&gt;
          &lt;li&gt;사용자 스터디, 좋은 기획, 좋은 디자인이 필요&lt;/li&gt;
          &lt;li&gt;끝판왕 알고리즘 하나로 해결되는 문제가 아님!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다하지 못한 이야기
    &lt;ul&gt;
      &lt;li&gt;Shapley Value&lt;/li&gt;
      &lt;li&gt;Bayesian Deep Learning&lt;/li&gt;
      &lt;li&gt;하나 더 있었는데 발표자료 보고 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질문&quot;&gt;질문&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Self Attention과 Grad CAM의 차이는?
    &lt;ul&gt;
      &lt;li&gt;아이디어 공유되는 것이 있음&lt;/li&gt;
      &lt;li&gt;Attention 기법은 모델을 설계할 때 애초에 입력한 데이터를 중점적으로 볼지 말지 취사선택 하는 모듈을 중간에 넣는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/data/2019/04/14/interpretable-ml-intro/</link>
        <guid isPermaLink="true">https://zzsza.github.io/data/2019/04/14/interpretable-ml-intro/</guid>
        
        <category>interpretable</category>
        
        
        <category>data</category>
        
      </item>
    
      <item>
        <title>Google Cloud Next 19 정리 및 후기</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Cloud Next 19의 영상들을 보고 정리한 글입니다
    &lt;ul&gt;
      &lt;li&gt;다음엔 저도 현장에 가서 이런 내용들을 듣고 싶네요!(잘 정리하고 전파할 수 있는데..!)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정리한 영상
    &lt;ul&gt;
      &lt;li&gt;ML Ops Best Practices on Google Cloud&lt;/li&gt;
      &lt;li&gt;Accelerating Machine Learning App Development with Kubeflow Pipelines&lt;/li&gt;
      &lt;li&gt;What’s New with BigQuery ML and Using it to Assess Data Quality&lt;/li&gt;
      &lt;li&gt;Data Processing in Google Cloud: Hadoop, Spark, and Dataflow&lt;/li&gt;
      &lt;li&gt;Rethinking Business: Data Analytics With Google Cloud&lt;/li&gt;
      &lt;li&gt;AI Hub: The One Place for Everything AI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;메모&quot;&gt;메모&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영상 볼 수 있는 곳
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://cloud.withgoogle.com/next/sf/next-onair&quot;&gt;https://cloud.withgoogle.com/next/sf/next-onair&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;다양한 분야 중 Analyze &amp;amp; Learn archive를 중점적으로 봄&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Google Cloud 블로그 글
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/ai-machine-learning/all-ai-announcements-from-google-next19-the-smartest-laundry-list&quot;&gt;All 29 AI announcements from Google Next ‘19: the smartest laundry list&lt;/a&gt; : AI/인공지능 기술에 대한 총 정리 글&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/topics/inside-google-cloud/100-plus-announcements-from-google-cloud-next19&quot;&gt;News to build on: 122+ announcements from Google Cloud Next ‘19&lt;/a&gt; : Cloud Next 19에서 나온 모든 새로운 것 정리&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/topics/inside-google-cloud/next19-recap-day1&quot;&gt;Cloud Next 1일차 정리&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/topics/inside-google-cloud/day-2-next-19-working-smarter-better-and-more-securely-cloud&quot;&gt;Cloud Next 2일차 정리&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/topics/inside-google-cloud/next19-recap-day3&quot;&gt;Cloud Next 3일차 정리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이상훈님의 &lt;a href=&quot;https://www.facebook.com/phoenixlee.sh/posts/2634407856601132&quot;&gt;2일차 정리글&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;총평
    &lt;ul&gt;
      &lt;li&gt;우선 구글 클라우드의 데이터 처리 도구들(Pub/Sub, Dataflow, Dataproc, BigQuery)는 정말 강력하고 더 쉽게 사용할 수 있게 됨
        &lt;ul&gt;
          &lt;li&gt;진입 장벽이 낮아지는 중&lt;/li&gt;
          &lt;li&gt;미래엔 데이터 엔지니어링 스킬이 기본적으로 있는 머신러닝 엔지니어들도 많이 나올 것 같음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;AI Platform, Kubeflow, TFX, TFDV, TFMA 등을 보면 MLOps도 활발하게 진행되고 있는 듯?
        &lt;ul&gt;
          &lt;li&gt;Kubeflow 정복할 예정! 이걸 위해 쿠버네티스 공부중..&lt;/li&gt;
          &lt;li&gt;Tensorflow보다 PyTorch가 상승하는 것 같지만 프러덕션에선 대부분 Tensorflow를 써야할 듯
            &lt;ul&gt;
              &lt;li&gt;지향점이 다른 느낌&lt;/li&gt;
              &lt;li&gt;그냥 토치 텐서 다 상관없이 해야할 듯?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;회사에서 BigQuery쪽은 적극적으로 사용하고 있기 때문에 최신 기능을 모두 팔로업하고 있는데, 다른 도구들도 조금씩 테스트해보고 좋은 것은 바로 사용해볼 예정!&lt;/li&gt;
      &lt;li&gt;서울 리전!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ml-ops-best-practices-on-google-cloud&quot;&gt;ML Ops Best Practices on Google Cloud&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=20h_RTHEtZI&quot;&gt;https://www.youtube.com/watch?v=20h_RTHEtZI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MLOps Challenges
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/kqwjascfp2tnq6c/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-12%2022.57.22.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Validation
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/tfx/data_validation/get_started&quot;&gt;TFDV&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/8vl3uvr56wa29kb/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-12%2023.13.47.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/14kjzk2tsokql9y/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-12%2023.14.11.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model Analyze
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/tfx/model_analysis/get_started&quot;&gt;TFMA&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Model 정확도가 시간이 지나며 점점 낮아지고 지속적 모니터링이 불가능한 상황이 자주 오는데, 이럴 때 사용하면 좋음&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/kvvs6o4rmnwsr3c/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-12%2023.22.21.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/uaixck53fkfm208/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-12%2023.24.27.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/0ifgpk12qdlqpzf/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-12%2023.26.50.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;trip_start_hour가 특정 값일때 정확도를 알려줌
  	- 예시 : 현재 모델이 주간엔 정확도가 높고 야간엔 낮다 이런 결론이 나올 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kubeflow
    &lt;ul&gt;
      &lt;li&gt;Kubernetes-native OSS Platform to Develop, Deploy and Manage Scalable and End-to-End ML Workloads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cloud AI Platform
    &lt;ul&gt;
      &lt;li&gt;A code-based intergrated development environment for data science and machine learning inside the GCP console&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/ni6y9e6tasw9ma5/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2000.07.22.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/pl2qcm80z02etme/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2000.12.19.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/05tnudp8mg5axna/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2000.12.44.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;아키텍쳐
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/9fbqtejea5ki416/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2000.14.25.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/0t5enhuy9q39hyv/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2000.15.50.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;accelerating-machine-learning-app-development-with-kubeflow-pipelines&quot;&gt;Accelerating Machine Learning App Development with Kubeflow Pipelines&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TZ1lGrJLEZ0&quot;&gt;https://www.youtube.com/watch?v=TZ1lGrJLEZ0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/data/2018/01/28/hidden-technical-debt-in-maching-learning-systems/&quot;&gt;Hidden Technical Debt in ML Systems&lt;/a&gt;를 보면 모델링이 차지하는 부분은 매우 작음&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubeflow.org/&quot;&gt;Kubeflow&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;A Kubernetes-native open source platform to develop, deploy and manage, scalable ML Workloads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ML Workflow Orchestration
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/odt09jlkibamud7/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.14.16.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/rwfdrgj7fd04ad7/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.19.02.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;코드 예제
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/sb5bzxzxqj8i01m/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.19.54.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Share, Re-use &amp;amp; Compose
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/6icgiyldirc4xz6/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.21.21.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;zip 파일로 올림(람다에서도 이렇게 진행)&lt;/li&gt;
      &lt;li&gt;AI Hub도 사용 가능
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/y473qnjfrdblqh2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.22.00.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;코드 예제
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/f8xon3c5kg4s50y/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.22.18.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rapid Reliable Experimentation
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/0f2vu12npoqd7cz/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.23.12.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/g3vet8pecqxzj3p/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.23.22.png?raw=1&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;MlFlow랑 비교해서 어떤 우위가 있는지 궁금&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/4fow7szw0umzq7b/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.23.54.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/6dt7713assf2p3s/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.24.39.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GOJEK
    &lt;ul&gt;
      &lt;li&gt;싱가포르, 인도네시아, 베트남, 태국에서 교통, 물류 등의 서비스를 하고 있는 기업&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/8hd7foe2s1sh9u4/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.27.01.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/hlc0rq4txo3j15v/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.27.17.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Airflow를 사용했는데, 아래 이유로 Kubeflow 도입
        &lt;ul&gt;
          &lt;li&gt;실험하기 어려움&lt;/li&gt;
          &lt;li&gt;엔지니어링 무거움&lt;/li&gt;
          &lt;li&gt;Low traceability and reproducibility&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data pipeline은 Airflow를 쓰고, ML pipeline은 Kubeflow 사용
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/fhhps7re6g949jx/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.30.10.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/gkjzprcsd7eumbb/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.30.55.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;roc 커브도 그려줌&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/3l5a7gxtjao9qeg/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.32.51.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TFX Taxi 예제
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/hlxdsw5vsnb9cof/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.33.27.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/2uf0du393jt7jrg/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.33.57.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/nlixphmj86t9cau/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.34.39.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;TFMA를 Static HTML로 생성해줌&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;whats-new-with-bigquery-ml-and-using-it-to-assess-data-quality&quot;&gt;What’s New with BigQuery ML and Using it to Assess Data Quality&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DnlG4frLKmw&quot;&gt;https://www.youtube.com/watch?v=DnlG4frLKmw&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/gcp/2018/08/03/bigqueryml/&quot;&gt;BigQuery ML&lt;/a&gt;의 새로운 기능에 대해 말해줌&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/2j41htu4m7qalgz/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.38.35.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;New BigQuery UI
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/4yh9n5ln4c15bi6/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.38.58.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;현기증 납니다.. 빨리 나와주세요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Matrix Factorization
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/p82vj7wp49q6v2l/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.39.28.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NCAA 농구 3점슛 예측
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/rmldqf4v8fxxdy1/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.39.59.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TensorFlow
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/dcu87vkywus6nj5/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.40.29.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Feautre pre-processing function
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/z072npxtlpzw48o/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.40.52.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;BUCKETIZE, POLYNOMIAL_EXPAND, FEATURE_CROSS 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시연
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/groovenauts/QueryItSmart&quot;&gt;QueryItSmart&lt;/a&gt; Github 참고&lt;/li&gt;
      &lt;li&gt;BigQuery + Cloud ML engine을 사용한 웹 데모&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;K means clustering
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/daa97kxjc03q8rw/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.46.33.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Booking.com의 시연
    &lt;ul&gt;
      &lt;li&gt;빅쿼리로 kmenas 진행(클러스터 개수 21개)한 후 데이터 스튜디오로 시각화&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/lizg8uw38l6urol/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.48.30.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/ptdopkb7kv04v7l/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.49.58.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;data-processing-in-google-cloud-hadoop-spark-and-dataflow&quot;&gt;Data Processing in Google Cloud: Hadoop, Spark, and Dataflow&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GRP-cGbJSCs&quot;&gt;https://www.youtube.com/watch?v=GRP-cGbJSCs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;이미 많이 알던 내용들인데, 새롭게 알게된 내용 위주로 캡쳐&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/849mvs0cuc4evrh/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.00.17.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/7vwqbypxxsipykj/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.00.34.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/zidbjll9urrxkfm/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.00.48.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Dataflow
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/tyb9x1499xe0c5j/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.01.10.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;1년 사이에 템플릿이 정말 많아짐&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/0y2mqdo8ud4g515/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.03.50.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dataproc
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/64ukdqwcnewieum/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.04.24.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Web interface에서 제플린 선택 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rethinking-business-data-analytics-with-google-cloud&quot;&gt;Rethinking Business: Data Analytics With Google Cloud&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DpngHc31a5Y&quot;&gt;https://www.youtube.com/watch?v=DpngHc31a5Y&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Platform
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/wkgkax05ww11oy6/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.54.08.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Funsion
    &lt;ul&gt;
      &lt;li&gt;Google &lt;a href=&quot;https://cloud.google.com/data-fusion/&quot;&gt;Data Fusion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/yy98uamifj5hyl4/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.54.37.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;코드 없이 파이프라인 생성&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/rwjb56x4dmsxdth/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.56.45.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BigQuery flat-rate with Reservations
    &lt;ul&gt;
      &lt;li&gt;예약제 요금제?&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/pppf9nul4xkdj2i/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.57.52.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BigQuery Storage API
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/flavb24cnyv3dgb/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.58.22.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BI Engine
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/lpgu8ytcklbhh4q/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.59.06.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;시각화하는 도구 같은데, Tableau를 대체할 수 있을지 궁금&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dataproc and Composer
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/tj2ruljdtnyyryp/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2002.00.33.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Composer는 Managed Airflow인데, 사용하다보면 약간 불편한 점도 있긴함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stream 데이터 처리하는 파이프라인
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/126rs7ebz6xh9ij/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2002.01.40.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dataflow SQL
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/389dqh15qlgg1wr/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2002.01.57.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/aiylt1wu3hi09vd/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2002.07.18.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;빅쿼리 콘솔에서 Dataflow Engine으로 설정한 후, 아래 쿼리 날림&lt;/li&gt;
      &lt;li&gt;TUMBLE_START는 처음 보는데 신기..&lt;/li&gt;
      &lt;li&gt;쿼리 날리면 내부적으로 Beam이 데이터 읽고 전처리하는듯&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  SELECT sr.sales_region, TUMBLE_START(&quot;INTERVAL 5 SECOND&quot;) AS period_start, SUM(tr.payload.amount) as amount
  FROM `pubsub.dataflow-sql.transactions` as tr
      INNER JOIN `bigquery.dataflow-sql.opsdb.us_state_salesregions` AS sr
      ON tr.payload.state = sr.state_code
  GROUP BY sr.sales_region, TUMBLE(tr.event_timestamp, &quot;INTERVAL 5 SECOND&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/mluaams5n0o31yz/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2002.05.47.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;pubsub 토픽을 바로 넣어서 쓰는듯..?&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/637pcfwpwj51u79/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2002.08.08.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Catalog
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/z4fegch5hwi7a2v/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.53.05.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/5r7h4my6cq57ybi/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-13%2001.53.40.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ai-hub-the-one-place-for-everything-ai&quot;&gt;AI Hub: The One Place for Everything AI&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QMTT2ngnj9Q&quot;&gt;https://www.youtube.com/watch?v=QMTT2ngnj9Q&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google &lt;a href=&quot;https://cloud.google.com/ai-hub/&quot;&gt;AI Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AI Hub에 대한 설명, 다른 세션과 겹치는 부분이 있는 느낌&lt;/li&gt;
  &lt;li&gt;Kubeflow, TFX에 대해 이야기함&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/gcp/2019/04/13/google-next19-review/</link>
        <guid isPermaLink="true">https://zzsza.github.io/gcp/2019/04/13/google-next19-review/</guid>
        
        <category>basic</category>
        
        
        <category>gcp</category>
        
      </item>
    
      <item>
        <title>Kotlin 기본 문법 정리</title>
        <description>&lt;ul&gt;
  &lt;li&gt;코틀린 기본 문법에 대한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;kotlin&quot;&gt;Kotlin&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;코틀린은 안드로이드나 서버 개발을 할 때 사용할 수 있는 언어&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/server-overview.html&quot;&gt;kotlin server overview&lt;/a&gt; 참고하면 서버 사이드에서 장점을 알 수 있음
    &lt;ul&gt;
      &lt;li&gt;자바에서 많이 쓰이는 Spring도 사용 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://engineering.vcnc.co.kr/2019/01/tada-system-architecture/&quot;&gt;VCNC 시스템 아키텍쳐&lt;/a&gt;를 보면 서버 언어를 코틀린으로 쓰는 회사가 점점 증가하는듯!
    &lt;ul&gt;
      &lt;li&gt;이 코드를 읽기 위해 코틀린을 공부합니다..!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-syntax&quot;&gt;Basic Syntax&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;패키지 정의&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;함수 정의
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;fun 키워드로 정의&lt;/p&gt;

        &lt;p&gt;fun sum(a: Int, b: Int): Int {
      return a + b
  }&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;함수 몸체가 식인 경우 return 생략 가능, return type이 추론됨&lt;/p&gt;

        &lt;p&gt;fun sum(a: Int, b: Int) = a + b&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;리턴할 값이 없는 경우 Unit(Object)으로 리턴
        &lt;ul&gt;
          &lt;li&gt;자바의 void 역할&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;fun printKotlin(): Unit {
  	println(“Hello Kotlin”)
  }&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Unit은 생략 가능&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fun printKotlin() {
  	println(&quot;Hellok Kotlin&quot;)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;변수 정의
    &lt;ul&gt;
      &lt;li&gt;val : 읽기전용 변수&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;값의 할당이 1회만 가능, 자바의 final과 유사&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val a: Int = 1
  val b = 2 // int type 추론
  val c: Int // 컴파일 오류, 초기화 필요(값 할당 안함)
  c = 3 // 컴파일 오류, 읽기 전용이라 추후에 할당 불가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;var : Mutable 변수&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var x = 5
  x += 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주석
    &lt;ul&gt;
      &lt;li&gt;자바와 자바스크립트와 동일&lt;/li&gt;
      &lt;li&gt;// : 한줄 추석&lt;/li&gt;
      &lt;li&gt;/* */ : 여러 줄 주석(여러개 중첩 가능)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문자열 템플릿
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;String Interpolation(문자열 보간법)&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var a = 1
  val s1 = &quot;a is $a&quot;
        
  a = 2
  val s2 = &quot;${s1.replace('is', 'was')}, but now is $a&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건문&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fun maxOf(a: Int, b: Int): Int {
  	if (a &amp;gt; b) {
  		return a
  	} else {
  		return b
  	}
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;조건식으로 사용 가능&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fun maxOf(a: Int, b: Int) = if (a&amp;gt;b) a else b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;nullable
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;값이 null일 수 있는 경우 타입에 nullable 마크를 명시&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  func parseInt(str: String): Int?{
  // 정수가 아니면 null 리턴
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;nullable 타입의 변수를 접근할 땐 반드시 null 체크를 해야 함&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그렇지 않으면 컴파일 오류 발생&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fun printProduct(arg1: String, arg2: String) {
  	val x: Int? = parseInt(arg1)
  	val y: Int? = parseInt(args2)
        
  	if (x != null &amp;amp;&amp;amp; y!= null) {
  		println(x*y)
  	} else {
  		println(&quot;eithe '$arg1' or '$arg2' is not a number&quot;)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자동 타입 변환
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;타입 체크만 해도 자동으로 타입 변환!!!&lt;/p&gt;

        &lt;p&gt;obj: Any는 object의 최상위 객체&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fun getStringLength(obj: Any): Int?{
  	if (obj is String) {
  			// obj가 자동으로 string 타입으로 변환
  			return obj.length
  	}
  	return null
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;while loop&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;)
  var index = 0
  while (index &amp;lt; items.size) {
  	println(&quot;item at $index is ${items[index]}&quot;)
  	index ++
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;when expression&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  fun describe(obj: Any): String =
  		when (obj) {
  			1 -&amp;gt; &quot;One&quot;
  			&quot;Hello&quot; -&amp;gt; &quot;Greeting&quot;
  			is Long -&amp;gt; &quot;Long&quot;
  			!is String -&amp;gt; &quot;Not a string&quot;
  			else -&amp;gt; &quot;Unknown&quot;
  		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;ranges
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;In 연산자를 이용해 숫자 범위 체크 가능&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val x = 3
  if (x in 1..10) {
  	println(&quot;fits in range&quot;)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;range를 이용한 for loop&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  for (x in 1..5) {
  	println(x)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;collections
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;컬렉션도 in으로 loop 가능&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;)
  for (item in items) {
  	println(item)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;in으로 해당 값이 collection에 포함되는지 체크 가능&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val items = setOf(&quot;apple&quot;, &quot;banan&quot;, &quot;kiwi&quot;)
  when {
  	&quot;orange&quot; in items -&amp;gt; println(&quot;juicy&quot;)
  	&quot;apple&quot; in items -&amp;gt; println(&quot;apple is fine too&quot;)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;람다식을 이용해 컬렉션에 filter, map 연산 가능&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val fruits = listOf(&quot;banana&quot;, &quot;avocado&quot;, &quot;apple&quot;, &quot;kiwi&quot;)
  fruits
  			.filter { it.startsWith&quot;a&quot;) }
  			.sortedBy { it }
  			.map { it.toUpperCase() }
  			.forEach { println(it) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-types&quot;&gt;Basic Types&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기본 타입
    &lt;ul&gt;
      &lt;li&gt;코틀린은 모두 객체&lt;/li&gt;
      &lt;li&gt;모든 것에 멤버 함수나 프로퍼티를 호출 가능!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;숫자
    &lt;ul&gt;
      &lt;li&gt;Java의 숫자와 비슷&lt;/li&gt;
      &lt;li&gt;Kotlin에서 Number는 클래스&lt;/li&gt;
      &lt;li&gt;Java에서 숫자형이던 char가 kotlin에선 숫자형이 아님&lt;/li&gt;
      &lt;li&gt;리터럴(Literal)
        &lt;ul&gt;
          &lt;li&gt;10진수 (Int, Short)&lt;/li&gt;
          &lt;li&gt;Long&lt;/li&gt;
          &lt;li&gt;Double&lt;/li&gt;
          &lt;li&gt;Float&lt;/li&gt;
          &lt;li&gt;2진수&lt;/li&gt;
          &lt;li&gt;8진수는 미지원&lt;/li&gt;
          &lt;li&gt;16진수&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Underscore in numeric literals
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;언더스코어를 사용해 표현 가능&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val oneMillon = 1_000_000
  val creditCardNumber = 1234_5678_9012_3456L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Representation
    &lt;ul&gt;
      &lt;li&gt;Java 플랫폼에서 숫자형은 JVM primitive type으로 저장&lt;/li&gt;
      &lt;li&gt;Nullable이나 제네릭의 경우엔 박싱&lt;/li&gt;
      &lt;li&gt;박싱된 경우엔 identity를 유지하지 않음&lt;/li&gt;
      &lt;li&gt;show bytecode → decompile하면 자바 코드로 변환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Explicit Conversions
    &lt;ul&gt;
      &lt;li&gt;작은 타입은 큰 타입의 하위 타입이 아님&lt;/li&gt;
      &lt;li&gt;즉, 작은 타입에서 큰 타입으로 대입이 안됨
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;숫자끼리 변화할 땐 명시적으로 변환해야 함&lt;/p&gt;

            &lt;p&gt;val i: Int = b.toInt()
  // toByte(), toShort(), toInt() …&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문자
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Char는 숫자로 취급되지 않음&lt;/p&gt;

        &lt;p&gt;fun check(c: Char) {
  	if (c == ‘a’)
  }&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;배열
    &lt;ul&gt;
      &lt;li&gt;배열은 Array 클래스로 표현&lt;/li&gt;
      &lt;li&gt;get, set ([] 연산자 오버로딩됨)&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;size 등 유용한 멤버 함수 포함&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var array: Array&amp;lt;String&amp;gt; = arrayOf(&quot;코틀린&quot;, &quot;강좌&quot;)
  println(array.get(0))
  println(array[0])
  println(array.size)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;배열 생성
        &lt;ul&gt;
          &lt;li&gt;Array의 팩토리 함수 사용&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;arrayOf() 등의 라이브러리 함수 이용&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val b = Array(5, { i -&amp;gt; i.toString() })
            
  val a = arrayOf(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;특별한 Array 클래스
        &lt;ul&gt;
          &lt;li&gt;primitive 타입의 박싱 오버헤드를 없애기 위한 배열&lt;/li&gt;
          &lt;li&gt;IntArray, ShortArray, IntArray&lt;/li&gt;
          &lt;li&gt;Array를 상속한 클래스는 아니지만 Array와 같은 메소드, 프로퍼티를 가짐&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;size 등 유용한 멤버 함수 포함&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val x: IntArray = intArrayOf(1, 2, 3)
  x[0] = 7
  println(x.get(0))
  println(x[0])
  println(x.size)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문자열
    &lt;ul&gt;
      &lt;li&gt;문자열은 String 클래스로 구현&lt;/li&gt;
      &lt;li&gt;String은 characters로 구성&lt;/li&gt;
      &lt;li&gt;s[i] 같은 방식으로 접근 가능&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;immutable이므로 변경은 불가&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var x: String = &quot;Kotlin&quot;
  println(x.get(0))
  println(x.length)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;문자열 리터럴
        &lt;ul&gt;
          &lt;li&gt;escape string (“Kotlin”)
            &lt;ul&gt;
              &lt;li&gt;전통적인 방식으로 Java String과 비슷&lt;/li&gt;
              &lt;li&gt;Backslash를 사용해 escaping 처리&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;raw string (“&quot;”Kotlin”””)
            &lt;ul&gt;
              &lt;li&gt;escaping 처리 필요 없음&lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;개행이나 어떤 문자 포함 가능&lt;/p&gt;

                &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  val s = &quot;Hello, world₩n&quot;
	            
  val s = &quot;&quot;&quot;
  '''이것은 코틀린의
   raw String
  입니다.'''
  &quot;&quot;&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs&quot;&gt;코틀린 공식 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.inflearn.com/course/코틀린-강좌-새차원&quot;&gt;인프런, 코틀린 강의&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/development/2019/04/11/kotlin-basic/</link>
        <guid isPermaLink="true">https://zzsza.github.io/development/2019/04/11/kotlin-basic/</guid>
        
        <category>kotlin</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>데이터 사이언티스트가 되기 위해 진행한 다양한 노력들</title>
        <description>&lt;ul&gt;
  &lt;li&gt;데이터 공부를 시작하고 현재까지, 제 일대기에 대해 작성한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다양한 경로로 진로 관련 질문을 많이 받고 있습니다
    &lt;ul&gt;
      &lt;li&gt;특히 제가 자주 받는 질문은 &lt;strong&gt;“문과생”&lt;/strong&gt;이고 &lt;strong&gt;대학원&lt;/strong&gt;도 진학하지 않았는데 어떻게 공부했는지?입니다&lt;/li&gt;
      &lt;li&gt;이런 질문을 많이 받다보니 글로 남기면 좋지 않을까! 생각해서 글을 작성합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;약 4년간 과거를 회고하려고 합니다&lt;/li&gt;
  &lt;li&gt;제가 진행한 내용이 &lt;strong&gt;답은 아니고 누군가는 저렇게 했구나&lt;/strong&gt; 정도로 이해하면 좋을 것 같습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;첫-시작&quot;&gt;첫 시작&lt;/h2&gt;
&lt;h3 id=&quot;간단한-자기소개&quot;&gt;간단한 자기소개&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;저에 대해 간략히 설명하면 경영학을 전공했고(부전공, 복수전공 없습니다) 대학 입학하고 2년간 놀다가 군대에 갔습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2013년&quot;&gt;2013년&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;전역 후엔 대학생 연합 광고동아리인 애드파워에서 “광고”, “디자인”을 공부했습니다
    &lt;ul&gt;
      &lt;li&gt;경쟁 PT나 광고 공부를 통해 자신의 생각을 어떻게 효율적으로 전달할지, 기획이란 무엇인지 등을 조금이나마 배웠습니다&lt;/li&gt;
      &lt;li&gt;광고 전반, 디자인/영상에 대해 알 수 있었고 좋은 사람들을 많이 만나서 후회하지 않는 생활이었지만, 광고를 업으로 삼을 수 없을 것 같다는 생각이 들었습니다&lt;/li&gt;
      &lt;li&gt;그나마 관심있던 직군은 미디어 플래너였습니다. 수학이나 통계학을 좋아했던 성향이 있어서 매체별 데이터를 다루는 미디어 플래너에 대해 관심이 있었습니다&lt;/li&gt;
      &lt;li&gt;실제 데이터를 보니 너무 가공된 데이터란 생각을 했고, 한단계 깊은 데이터를 보고 싶었습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;R을 활용한 데이터 분석이 궁금해 한국 RFID/USN 융합협회에서 진행한 “R 기반 빅데이터 분석 입문 과정”을 2013년 9월에 들었습니다
    &lt;ul&gt;
      &lt;li&gt;하지만 이 시기에 들은 내용 중 지금 기억나는건 전혀 없네요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2014년&quot;&gt;2014년&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2013년~2014년엔 공기업에서 계약직으로 근무했습니다
    &lt;ul&gt;
      &lt;li&gt;3학년으로 복학했지만 학교 공부에 흥미가 없어서 학점도 낮아서 그냥 회사에선 어떤 일을 하는지 알고싶어 인천도시공사에 지원했는데, 합격했습니다&lt;/li&gt;
      &lt;li&gt;간단한 사무보조부터 각종 행정처리, 건축 토목 현장 관리 등을 진행했습니다&lt;/li&gt;
      &lt;li&gt;돌이켜보니 그냥 이 시기는 멍 때리던 시기입니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공기업에 취업할 생각도 있어서 시작했지만, 결론적으로 전 조금 더 액티브한 삶을 지향한다는 것을 알게 되었습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2015년&quot;&gt;2015년&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2014년 말부터 지인들과 창업했습니다&lt;/li&gt;
  &lt;li&gt;와디즈에서 500만원 펀딩을 받으며 시작했습니다
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.wadiz.kr/web/campaign/detail/698&quot;&gt;달다쓰다 - 또 하나의 작은 게양&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;진행했던 업무는 운영, 회계, 배송, 온라인 마케팅 등 다양한 일을 했습니다. 일하던 도중 “내가 진짜 하고 싶은 일이 지금 하는 일들일까?”라는 생각에 창업팀에서 빠지고 데이터 공부를 본격적으로 시작했습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2015년은 요즘처럼 인터넷에 데이터 관련 다양한 정보가 넘치진 않던 시절입니다(참고로 우리가 많이 알고있는 알파고는 2016년에 나왔습니다)&lt;/li&gt;
  &lt;li&gt;그 당시 진행했던 것은 크게 2가지입니다
    &lt;ul&gt;
      &lt;li&gt;1) 빅데이터 동아리 BOAZ 활동&lt;/li&gt;
      &lt;li&gt;2) 오늘 밤부터 쓰는 GA 수강&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빅데이터 동아리 보아즈 활동
    &lt;ul&gt;
      &lt;li&gt;공모전도 활성화되지 않았고, 책도 많이 없기 때문에 비슷한 지향점을 가지는 사람들을 알고 싶어 빅데이터 동아리에 지원했습니다&lt;/li&gt;
      &lt;li&gt;기반 능력이 거의 없음에도 불구하고 다행히 합격했습니다&lt;/li&gt;
      &lt;li&gt;하지만 저는 공부보단, 그냥 동아리에 출석하고 가끔 뒷풀이 가는 삶을 살았던 기억이 나네요&lt;/li&gt;
      &lt;li&gt;요새 동아리 후배분들을 보니 정말 많은 고민을 하고, 빡세게 공부를 잘 하고 있는 것 같습니다&lt;/li&gt;
      &lt;li&gt;프로젝트 진행할 때도 R과 파이썬을 거의 못했던 기억이 납니다&lt;/li&gt;
      &lt;li&gt;단, “빅데이터”란 공통된 흥미를 가진 사람들을 만났던 것이 정말 좋았습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;오늘 밤부터 쓰는 GA 수강
    &lt;ul&gt;
      &lt;li&gt;이 강의는 알렉스앤컴퍼니에서 진행한 강의입니다&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/9r3dgpfb1onztsi/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-05%2022.02.33.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Google Analytics를 통해 데이터 분석할 수 있단 소식을 듣고 수강했습니다&lt;/li&gt;
      &lt;li&gt;돌이켜 보면 이 강의를 통해 하용호님을 만날 수 있었고, 계속 데이터 공부를 할 자극을 얻었습니다&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/6cwfx9buyy7tkxa/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-05%2022.04.06.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;하용호님은 어려운 내용을 정말 쉽게 설명해주시는 것으로 유명합니다! &lt;a href=&quot;https://www.slideshare.net/yongho&quot;&gt;슬라이드쉐어&lt;/a&gt;에 가면 자료를 볼 수 있습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016년&quot;&gt;2016년&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;빅데이터 동아리 활동이 끝난 후, 4학년 2학기인 저는 깊은 고민에 빠졌습니다
    &lt;ul&gt;
      &lt;li&gt;“진짜 데이터를 더 공부하고 싶은가? 아니면 그냥 취업할까?”&lt;/li&gt;
      &lt;li&gt;“대학원에 갈까?”&lt;/li&gt;
      &lt;li&gt;아마 이런 고민들은 지금도 많은 분들이 고민할 내용이라 생각합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;깊은 고민 끝에 내린 결론은 “연구”보단 실제로 제 능력을 갖고 싶었습니다&lt;/li&gt;
  &lt;li&gt;대학원이 아닌 다른 방법을 찾아보던 도중, 패스트캠퍼스 데이터사이언스 스쿨을 찾았고 2기를 등록했습니다
    &lt;ul&gt;
      &lt;li&gt;360만원의 학원비와 신사 고시텔 생활비 180만원, 금전적으론 약 500만원, 시간은 3개월 정도 할애해야 하는 과정이었습니다&lt;/li&gt;
      &lt;li&gt;하지만 투자할 가치를 느꼈고, 잘한 선택이라고 생각합니다&lt;/li&gt;
      &lt;li&gt;이 기간에 어떻게 코딩해야 하는지, 데이터 사이언스에 대한 전반적 지식을 얻을 수 있었습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공부한 내용을 조금씩 기록하잔 의미로 인스타그램에 공부 계정 : &lt;a href=&quot;https://instagram.com/data.scientist/&quot;&gt;data.scientist&lt;/a&gt;을 만들고 글을 꾸준히 올렸습니다. 요새도 올리고 있습니다&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스
    &lt;ul&gt;
      &lt;li&gt;개발을 전혀 모르던 제게 많은 지식을 얻게 해준 과정입니다&lt;/li&gt;
      &lt;li&gt;요샌 광고가 많아서 대부분 패스트캠퍼스를 알고, 고민할 것 같습니다&lt;/li&gt;
      &lt;li&gt;요샌 인터넷에 많은 자료가 공개되었기 때문에 학원을 안 다녀도 된다는 분들이 많습니다. 맞습니다. 제가 공부하던 시기보단 자료가 많아졌습니다. 따라서 굳이 학원으로 시작을 하지 않아도 되긴 합니다&lt;/li&gt;
      &lt;li&gt;아예 초심자고, 의지를 컨트롤하기 힘들 것 같은 경우엔 학원도 나쁘진 않단 생각을 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;많은 지식을 쌓았고, 여러 회사에 면접을 봤습니다
    &lt;ul&gt;
      &lt;li&gt;아직도 기억에 나는 면접은 “아프리카TV”의 데이터 분석가 면접입니다&lt;/li&gt;
      &lt;li&gt;데이터 분석가로 진행하는 거의 첫 면접인 동시에 사전 과제를 처음 겪은 면접입니다
        &lt;ul&gt;
          &lt;li&gt;아프리카TV의 데이터 일부분을 주고, 분석하는 문제였습니다&lt;/li&gt;
          &lt;li&gt;데이터를 보고 “왜 이런 사람이 있지? 이 데이터는 뭘까? 왜 이런 결과가 나오지?” 등을 고민하며 즐거웠습니다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;사실 면접 다음 달에 1달간 어머니와 유럽 여행이 계획되어 있다고 말했고, 제 자신도 부족했기 때문에 불합격했습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;유럽에 다녀오고, 천천히 지식을 재점검하며 2016년이 지나갔습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017년&quot;&gt;2017년&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;파이썬, 개발, 머신러닝에 대해 얼추 이해한 상태에서 다시 고민에 빠졌습니다
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;공부하면 할수록, 대학원에 가야할 것 같은데..? 공부할 것이 너무 많다&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;고민 후 결론은 &lt;strong&gt;우선 취업해서 현실의 업무를 하나씩 진행해본 후, 다시 결정하자&lt;/strong&gt;였습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;카메라에 관심이 많았는데, 카메라 어플을 만드는 “레트리카”에서 데이터 분석가를 채용하는 공고를 봤습니다
    &lt;ul&gt;
      &lt;li&gt;무언가의 끌림에 바로 지원했고, 면접을 봤습니다&lt;/li&gt;
      &lt;li&gt;면접을 보며 면접관 분이 매우 똑똑하고, 말을 잘하는 것이 인상깊었습니다&lt;/li&gt;
      &lt;li&gt;논리적인 대화로 제가 KO 완패를 받아, 오기가 생겼습니다&lt;/li&gt;
      &lt;li&gt;운이 좋게도 합격했습니다. 나중에 왜 저를 합격했는지 물어보니 다양한 지원자 중 &lt;strong&gt;데이터에 대해 이야기할 때 눈이 반짝거렸다&lt;/strong&gt;고 들었습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;레트리카
    &lt;ul&gt;
      &lt;li&gt;레트리카는 카메라 어플로 입사 당시 DAU(Daily Active User)가 약 1,000만명이었습니다&lt;/li&gt;
      &lt;li&gt;터키, 인도, 브라질 등 다양한 국가에서 사용하는 어플!&lt;/li&gt;
      &lt;li&gt;입사하니 데이터팀은 면접관이셨던 COO님, 그리고 저보다 2달 먼저 입사한 신입분, 저 이렇게 3명이었습니다&lt;/li&gt;
      &lt;li&gt;입사하고 데이터 분석이란 어떤 일인지 몸소 체험하며 다양한 시행착오를 겪었습니다&lt;/li&gt;
      &lt;li&gt;특히 기억나는 4가지를 말씀드리면,&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1) 시니어의 부재
    &lt;ul&gt;
      &lt;li&gt;COO분은 매우 논리적이고 날카로운 분이셨지만, 데이터 분석에 풍부한 경험이 있는 분은 아니었습니다&lt;/li&gt;
      &lt;li&gt;(여전히 매우 좋아하는 분입니다)&lt;/li&gt;
      &lt;li&gt;입사 3달까진 시니어를 뽑아주길 바랬고, 시니어 면접에 참여했습니다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;어느 순간 시니어를 바라지 않고, 제가 업무를 찾아보며 시작했습니다. 책이나 인터넷 강의를 많이 들었고, 인터넷에서 경험이 많은 분들에게 페북 메세지를 보내며 궁금한 내용들을 채웠습니다&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;아마 시니어가 없던 이 상황에 제가 살아남기 위해 고민을 했던 점들이 지금 제게 큰 자양분이 된 것 같습니다&lt;/li&gt;
      &lt;li&gt;1년간 거의 12시~새벽 1시에 집에 갔습니다
        &lt;ul&gt;
          &lt;li&gt;제가 부족하다 생각했기 때문에 남아서 더 자료를 찾아보고 공부하고 일을 했습니다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) 데이터 엔지니어링 경험
    &lt;ul&gt;
      &lt;li&gt;팀 내에서 유일한 파이썬 경험자였는데(솔직히 이 당시에 잘하진 못했음) 서버 개발자분이 저를 보시더니 데이터 ETL 과정을 인수인계해주셨습니다 ^_^&lt;/li&gt;
      &lt;li&gt;완전 급하게 배워서 체하는 느낌도 살짝 있었지만, 새로운 내용을 하는 것이 너무 재밌어서 이것도 퇴근 하고 계속 공부했습니다&lt;/li&gt;
      &lt;li&gt;덕분에 Google Cloud BigQuery에 대해선 정말 많이 이해했고, ETL이 꼭 하둡/스파크를 사용하지 않아도 되는 점 등을 알게 되었습니다&lt;/li&gt;
      &lt;li&gt;서버 개발자분도 사내에 혼자셔서 바쁘셨기 때문에 제게 이런 내용을 다 넘겨주신건데, 정말 감사하게 생각하고 있습니다(여전히 자주 보고 있습니다)&lt;/li&gt;
      &lt;li&gt;2017년 말엔 아예 서버 개발자로 직군을 바꿔, 유일하게 계신 서버개발자분에게 아주 약간의 지도를 받았습니다&lt;/li&gt;
      &lt;li&gt;지도라고 해봤자 Error 디버깅하는 것을 바라본 정도인데, 그 과정을 보고 어떻게 트러블 슈팅할지 감을 익혔습니다&lt;/li&gt;
      &lt;li&gt;그리고 쉘스크립트, 파이썬으로 맵리듀스 짜는 것도 해보고, 다양한 경험을 했습니다&lt;/li&gt;
      &lt;li&gt;사내 대시보드, 다양한 데이터를 볼 수 있는 대시보드, Airflow 등을 찾아보고 사내에 도입했습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) 오퍼레이션 업무 지원
    &lt;ul&gt;
      &lt;li&gt;사실 데이터 분석, 머신러닝/딥러닝을 공부하다보면 무언가 별도의 조직처럼 움직일 것 같지만, 회사에서 필요로 하는 것들 중 전혀 몰랐던 것도 있습니다&lt;/li&gt;
      &lt;li&gt;기술을 통해 오퍼레이션에서 진행하는 다양한 노동 활동을 자동화하는 것도 회사에 큰 도움이 되는 것을 깨달았습니다&lt;/li&gt;
      &lt;li&gt;야한 사진을 Block하는 것들을 만들며 새로운 지식을 또 습득했습니다
        &lt;ul&gt;
          &lt;li&gt;컴퓨터 비전 지식, Docker 지식&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2)와 3)에 대한 내용이 더 궁금하시면 제 발표자료 : &lt;a href=&quot;https://www.slideshare.net/zzsza/little-big-data-1&quot;&gt;바닥부터 시작하는 데이터 인프라&lt;/a&gt;를 참고하면 좋을 것 같습니다&lt;/li&gt;
  &lt;li&gt;4) 개인 업무 성향 파악
    &lt;ul&gt;
      &lt;li&gt;입사 후, 30일/60일/90일 피드백을 통해 제가 어떤 스타일로 업무를 하는지 알 수 있었습니다&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/di9g6ymhk7ijnr4/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-05%2022.37.40.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;어떤 일을 하기 전에, 다양한 고민이 많았고 뜬구름도 많이 잡았습니다. 이런 피드백을 핵직구로 받은 후 계속 개선하다보니 이젠 린한 사고 과정이 체득되었습니다&lt;/li&gt;
      &lt;li&gt;꾸준히 메모하던 습관에서, 일정 관리도 더 자세히 하게 되었습니다
        &lt;ul&gt;
          &lt;li&gt;캘린더에 시간 단위로 일정을 등록하고 있습니다&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/pti3kmcf2jgmc11/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-06%2009.12.04.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;파란색은 회사 일정, 연보라색은 개인 일정입니다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/diary/2017/12/30/2017-retrospect/&quot;&gt;2017년 회고, 2018년 계획&lt;/a&gt; 블로그 글에 자세히 작성했습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2018년&quot;&gt;2018년&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;4월까지 회사를 다니다 퇴사했습니다&lt;/li&gt;
  &lt;li&gt;퇴사한 이유는 아래와 같습니다
    &lt;ul&gt;
      &lt;li&gt;1) 자신에 대해 생각할 시간이 필요해서&lt;/li&gt;
      &lt;li&gt;2) 개인 공부할 시간을 확보하기 위해서&lt;/li&gt;
      &lt;li&gt;3) 취업은 언젠가 다시 할 수 있단 긍정적 마인드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자신이 나아갈 방향을 설정하는 시간인 Gap Year를 계획적으로 보내기로 다짐했습니다&lt;/li&gt;
  &lt;li&gt;특히 앞으로 어떻게 커리어를 쌓을 것인가?에 대해 계속 고민했습니다
    &lt;ul&gt;
      &lt;li&gt;공부한 기록과 이직 과정은 &lt;a href=&quot;https://zzsza.github.io/diary/2018/10/26/gap-year-and-socar/&quot;&gt;Gap Year 및 쏘카 이직 이야기&lt;/a&gt;에 있으니 저 글을 참고하면 좋을 것 같습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이 시기에 제 진로를 다시 고민한 결과, 저는 “연구”보단 현실의 문제를 푸는 “Solver”가 되고 싶어하는 성향을 발견했습니다
    &lt;ul&gt;
      &lt;li&gt;문제를 해결하는 동시에 엔지니어이고 싶었기 때문에, 문제 해결에 대한 공부와 엔지니어 성향 모두를 계속 공부하고 있습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대학생 분들에게 고민을 나누기 위해 취업 특강을 많이 했습니다
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/zzsza/data-science-intro&quot;&gt;Data Science. Intro&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TMI) &lt;a href=&quot;https://www.slideshare.net/zzsza/ss-137831892&quot;&gt;글쓰는 개발자 모임, 글또&lt;/a&gt;를 시작해서 다른 분들이 글쓰는 것을 돕고 있습니다&lt;/li&gt;
  &lt;li&gt;데이터 진로와 관련된 책을 집필하려고 하고 있습니다. 빨리 오프라인에서 만나볼 수 있으면 좋겠네요&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/diary/2018/12/22/2018-retrospect/&quot;&gt;2018년 회고, 2019년 다짐&lt;/a&gt; 블로그 글에 자세히 나와있어요!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;쏘카&quot;&gt;쏘카&lt;/h2&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;쏘카 입사한지 6개월이 지났습니다(글 쓰는 시간 기준)
    &lt;ul&gt;
      &lt;li&gt;2018년 9월 ~ 현재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;많은 일이 있었는데, 느낀 점 몇개 말씀드리면&lt;/li&gt;
  &lt;li&gt;1) 큰 규모의 데이터팀
    &lt;ul&gt;
      &lt;li&gt;저희 쏘카 데이터 그룹은 현재 약 20명입니다&lt;/li&gt;
      &lt;li&gt;리서치 회사를 제외한 데이터 관련 팀 중 제일 큰 규모라고 생각합니다&lt;/li&gt;
      &lt;li&gt;각자 도메인이 다르고, 다양한 경험이 있어 대화하는 것만으로도 충분히 성장하게 됩니다&lt;/li&gt;
      &lt;li&gt;문무를 겸비한 것처럼 데이터 분석/머신러닝/딥러닝/데이터엔지니어링 모두 경험있는 분들도 꽤 있습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) 재미있는 데이터와 문제
    &lt;ul&gt;
      &lt;li&gt;모빌리티 데이터는 정말 재미있습니다&lt;/li&gt;
      &lt;li&gt;차량에서 나올 수 있는 데이터가 무엇인지? 생각해보면 좋을 것 같습니다&lt;/li&gt;
      &lt;li&gt;그리고 최근 나온 타다도 급성장하며 생기는 데이터와 문제들! 블로그에 말씀 드리긴 어렵지만, 현실의 문제를 빠르게 해결하고 있습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;저는 어떻게 지낼까요?
    &lt;ul&gt;
      &lt;li&gt;요샌 “최적화”에 대해 관심이 많습니다. Operation Research부터 시작해 휴리스틱, 메타휴리스틱, 유전 알고리즘 등 기존에 전혀 알지 못했던 내용들을 공부하고 익히고 있습니다&lt;/li&gt;
      &lt;li&gt;지리 데이터, 좌표 데이터를 많이 가공하며 새로운 도메인에 대해 적응하고 있습니다&lt;/li&gt;
      &lt;li&gt;여전히 공부 많이하고, 책도 보고 강의도 보고 그러고 있습니다&lt;/li&gt;
      &lt;li&gt;머신러닝 부분은 “시계열 예측”과 “MLOps”에 대해 계속 공부하고 있습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;좋은 문화, 좋은 팀을 만들기 위해
    &lt;ul&gt;
      &lt;li&gt;저는 제가 속한 회사가 제일 좋은 회사가 되길 원하고 있습니다. 오지랖 부리며 이것저것 하고 있는데 몇개 말씀드리면&lt;/li&gt;
      &lt;li&gt;1) 스터디 진행
        &lt;ul&gt;
          &lt;li&gt;최근에 나온 “파이선 머신러닝 완벽 가이드”를 스터디하고 있습니다&lt;/li&gt;
          &lt;li&gt;책이 너무 좋고, 팀 동료분들이 알면 좋을 내용이 많다 판단해서 제가 스터디 매니저를 자처해 스터디를 진행하고 있습니다&lt;/li&gt;
          &lt;li&gt;누가 발표하는 것이 아닌, 정해진 시간에 책을 같이 읽고 토론하고 있습니다&lt;/li&gt;
          &lt;li&gt;스터디 내용은 &lt;a href=&quot;https://github.com/zzsza/Perfect-Guide-about-Machine-Learning-Study&quot;&gt;Github&lt;/a&gt;에 올리고 있습니다&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/s0hf0qit9vabta6/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-05%2022.55.56.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;이 스터디 말고도, 스터디잼 중급반도 시작했습니다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2) 스터디 지원
        &lt;ul&gt;
          &lt;li&gt;쏘카에서 SQL을 사용하는 분들이 질문하시면 정성껏 답변 하고 있습니다(스터디의 QnA 봇 같은 존재..?)&lt;/li&gt;
          &lt;li&gt;기획자분들이 직접 SQL을 하는 것을 정말! 감동적인 일이라 생각해서 열심히 답변드리고 있습니다&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/2tjk0kmxobgalh6/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-05%2022.57.56.png?raw=1&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;저 말고도 다른 데이터그룹 분들도 함께 답변을 하고 있습니다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;3) Kaggle에서 홍보
        &lt;ul&gt;
          &lt;li&gt;좋은 분들을 모시기 위해 다양한 곳에서 회사 홍보를 해야한다고 생각합니다&lt;/li&gt;
          &lt;li&gt;저는 데이터에 관심있는 분들은 캐글을 많이 할 것이란 가정하에 캐글에서 [SOCAR]라는 타이틀을 달고 대회에 참가하고 있습니다&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/fh3tg35iz0f4dkn/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-02-15%2014.49.54.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;앞으로도 좋은 팀, 좋은 문화를 가질 수 있도록 계속 노력할 예정입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;미래&quot;&gt;미래&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;요새 관심사인 Operation Research, 시계열 예측, MLOps 등 다양한 내용들을 공부, 정리, 현업에서 바로 활용을 하려고 합니다&lt;/li&gt;
  &lt;li&gt;친한 분들과 유튜브 채널을 만들었습니다 : &lt;a href=&quot;https://www.youtube.com/channel/UCdLZ0MsYS4hmqFgOYCB6C9w&quot;&gt;DeepNOL!&lt;/a&gt; 데이터와 관련된 다양한 이야기를 전해드리려고 합니다
    &lt;ul&gt;
      &lt;li&gt;이와 별개로 제 개인 유튜브에 책 리뷰를 남기려고 합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구성원들과 함께 자라기를 실천하기 위해 어떤 행동을 할까 고민하고 있습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;정리하면 저는 2013년부터 데이터 분석에 관심을 가지다 방황하고, 2015년부터 다시 공부하고, 2016년부턴 아예 데이터 분야에 몰입했습니다. 2018년엔 퇴사 후 제 부족한 부분을 채웠고, 현재 쏘카에서 근무하고 있습니다&lt;/li&gt;
  &lt;li&gt;이 글을 보시는 분들도 포기하지 않고, 목표를 가진 상태로 꾸준히 공부하면 좋은 결과가 있을거라 믿습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;faq&quot;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;제 일대기를 작성했지만, 명쾌하게 답변하지 않은 부분을 정리하려 합니다&lt;/li&gt;
  &lt;li&gt;1) 대학원에 꼭 가야할까요?
    &lt;ul&gt;
      &lt;li&gt;이 고민을 하기 전에, 본인이 &lt;strong&gt;연구&lt;/strong&gt;를 하고 싶어하는지, &lt;strong&gt;현실의 문제를 풀고싶은지&lt;/strong&gt; 등을 고민하면 좋을 것 같습니다&lt;/li&gt;
      &lt;li&gt;연구를 하고 싶다면 대학원에 가는 것도 좋은 선택일 수 있고, 반면 현실의 문제를 풀고 싶다면 회사에 가는 것도 좋은 선택일 수 있습니다&lt;/li&gt;
      &lt;li&gt;본인의 목적과 미래를 생각해보면 조금 더 확실한 결정을 내릴 수 있을 것 같습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) 비전공자인 제가 할 수 있을까요?
    &lt;ul&gt;
      &lt;li&gt;각자의 전공은 충분히 의의가 있다고 생각합니다. 저는 경영학에서 배운 커뮤니케이션 능력이 업무에 큰 도움이 되고 있습니다&lt;/li&gt;
      &lt;li&gt;비전공자일 경우 코딩이나 수학에서 어려움이 있을 수는 있지만, 꾸준히 공부하다보면 어느정도 해결될 것이라 생각합니다&lt;/li&gt;
      &lt;li&gt;전공이냐 비전공이냐기 보다 “나는 할 수 있고, 나의 페이스대로 잘 가고 있다”라는 생각을 하시며 꾸준히 하시면 좋을 것 같습니다&lt;/li&gt;
      &lt;li&gt;단, 정말 많은 노력이 수반되니 꾸준히 공부해주세요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) 공부하시며 어려운 점이 있었나요?
    &lt;ul&gt;
      &lt;li&gt;공부할 내용이 너무 많아 어렵지만, 이런 생각을 반대로 &lt;strong&gt;새로운 내용을 배우는 것은 너무 재미있고, 하나씩 정복하는 재미가 있다&lt;/strong&gt;고 생각했습니다&lt;/li&gt;
      &lt;li&gt;어렵다고 말하면 안할 생각인지 여쭤보고 싶습니다. 정말 하고 싶다면, 어려운 점도 극복할만하다 생각합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4) 무엇을 공부해야 할까요?
    &lt;ul&gt;
      &lt;li&gt;답이 없는 질문인 것 같습니다. 사람마다 배경이 다르기 때문에 어떤 것을 공부해야 한다!고 말하긴 어려울 것 같습니다&lt;/li&gt;
      &lt;li&gt;단, 채용공고를 정리한 내용을 토대로 어떤 능력이 필요한지는 파악할 수 있을 것 같습니다.&lt;/li&gt;
      &lt;li&gt;그 전에 어떤 직군을 하고 싶은지 고민해보시는 것을 추천합니다.제가 작성한 &lt;a href=&quot;https://github.com/Team-Neighborhood/I-want-to-study-Data-Science/wiki&quot;&gt;I-want-to-study-Data-Science&lt;/a&gt;를 참고하면 좋을 것 같습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5) 학원을 다녀야 할까요? 국비지원을 가야할까요?
    &lt;ul&gt;
      &lt;li&gt;요샌 의지만 있다면 인터넷에 다양한 자료가 있기 때문에, 학원을 굳이 안가도 됩니다. 스터디를 꾸려도 되고, 모두의 연구소 같은 곳에서 공부해도 되고 다양한 방법이 있습니다. 어떤 곳이 있는지 찾아보시고 결정하시면 좋을 것 같습니다&lt;/li&gt;
      &lt;li&gt;단, 국비지원 중 너무 많은 범위를 다루는 수업(예를 들어 자바, 하둡, 스파크, 텐서플로, 딥러닝 등을 3~6개월에 다루는 수업)이 얼마나 좋을지는 모르겠습니다(제가 경험을 안했기 때문에 판단하기 어렵지만, 과한 느낌이 있습니다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;6) 자격증을 따려고 하는데 도움이 될까요?
    &lt;ul&gt;
      &lt;li&gt;보통 자격증하면 ADP, ADsP, SQLD, SQLP, 사회조사 분석사, 정보처리기사 등이 있습니다. 공부의 목적으론 괜찮을 수 있지만 취업 목적으론 효용이 있는지 모르겠습닌다
        &lt;ul&gt;
          &lt;li&gt;저는 사회조사 분석사 2급, 정보처리기사가 있지만 취업할 때 도움을 받은 기억은 없습니다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이 업계는 실력이 중요하기 때문에 실제 데이터 분석을 하거나, 프로젝트 진행, 캐글 등을 참여해보는 것이 좋을 것 같습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 질문에 대해 답변을 남긴 &lt;a href=&quot;https://github.com/Team-Neighborhood/I-want-to-study-Data-Science/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;를 참고하셔도 좋을 것 같습니다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이력서 작성이 어려운 분들을 위해 제 이력서를 보여드립니다. 참고만 하시면 좋을 것 같습니다
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/zgrgqgu90zrs5gf/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-06%2000.33.11.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;저는 구인본님의 &lt;a href=&quot;http://woowabros.github.io/experience/2017/07/17/resume.html&quot;&gt;이직초보 어느 개발자의 이력서 만들기&lt;/a&gt;를 보고 이력서를 만들었습니다&lt;/li&gt;
      &lt;li&gt;제가 만든 이력서 템플릿도 공유드립니다(pages 파일) : &lt;a href=&quot;https://www.dropbox.com/s/tqr8szz6odfxtcy/%EC%9D%B4%EB%A0%A5%EC%84%9C-%ED%85%9C%ED%94%8C%EB%A6%BF.pages&quot;&gt;Dropbox Link&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/diary/2019/04/05/how-to-study-datascience/</link>
        <guid isPermaLink="true">https://zzsza.github.io/diary/2019/04/05/how-to-study-datascience/</guid>
        
        <category>diary</category>
        
        
        <category>diary</category>
        
      </item>
    
      <item>
        <title>Uber Kepler.gl : 지리 데이터 시각화 도구</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Uber의 데이터 시각화 도구인 Kepler.gl에 대한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;keplergl&quot;&gt;Kepler.gl&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;우버에서는 쏟아지는 GPS 데이터를 분석하기 위해 데이터 시각화팀을 만듬&lt;/li&gt;
  &lt;li&gt;이 시각화 팀은 &lt;a href=&quot;vis.gl&quot;&gt;vis.gl&lt;/a&gt;라는 홈페이지를 운영하고 있는데, 다양한 프레임워크를 제공하고 있음
    &lt;ul&gt;
      &lt;li&gt;Kepler.gl, &lt;a href=&quot;https://movement.uber.com/&quot;&gt;Movement&lt;/a&gt;, &lt;a href=&quot;http://avs.auto/&quot;&gt;AVS&lt;/a&gt; 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;csv, json, geojson 데이터 포맷을 사용할 수 있고, GPU 지원 덕분에 대용량 데이터도 쉽게 렌더링됨
    &lt;ul&gt;
      &lt;li&gt;단, 대용량(250MB 이상) 데이터를 업로드하려면 사파리를 사용하는 것을 권장하고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기능&quot;&gt;기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;지원하는 기능은 Arc, Line, Hexagon, Point, Heatmap, GeoJSON, Buildings 등이 있음&lt;/li&gt;
  &lt;li&gt;Arc
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/36gak1ise6tmxxw/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.20.04.png?raw=1&quot; width=&quot;400&quot; height=&quot;350&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Line
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/0rkymltbu4h9cxx/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.20.21.png?raw=1&quot; width=&quot;400&quot; height=&quot;350&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hexagon
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/bcs55gpd5e71lok/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.21.33.png?raw=1&quot; width=&quot;400&quot; height=&quot;350&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Point
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/0cdqwtr565hw6re/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.21.48.png?raw=1&quot; width=&quot;400&quot; height=&quot;350&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heatmap
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/303atrade22s7nu/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.22.03.png?raw=1&quot; width=&quot;400&quot; height=&quot;350&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GeoJSON
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/3t2902bx7yc209l/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.22.17.png?raw=1&quot; width=&quot;400&quot; height=&quot;300&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Buildings
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/dzw21i1l72729cz/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2014.22.32.png?raw=1&quot; width=&quot;400&quot; height=&quot;350&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;홈페이지 메인에서 GET STARTED 클릭
    &lt;ul&gt;
      &lt;li&gt;혹은 URL : &lt;a href=&quot;https://kepler.gl/demo&quot;&gt;https://kepler.gl/demo&lt;/a&gt;로 접속&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;데이터-추가&quot;&gt;데이터 추가&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ns282b255ylf972/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2015.42.12.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 추가하는 부분&lt;/li&gt;
  &lt;li&gt;만약 자신의 데이터가 있다면, (적절히 가공한 후) 업로드하면 됨&lt;/li&gt;
  &lt;li&gt;데이터가 없다면 우선 Sample Data를 클릭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/r1ffr880r122pew/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2015.43.19.png?raw=1&quot; width=&quot;400&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;택시 데이터가 마음에 들기 때문에, NYC taxi trips 클릭&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;기본-ui&quot;&gt;기본 UI&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/9dq5r95qwr9sy8d/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2015.47.57.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;총 6가지 Component로 나눠봤는데(=제 마음대로), 하나씩 설명하면&lt;/li&gt;
  &lt;li&gt;1) Layers, Filters, Interactions, Base map 선택 창
    &lt;ul&gt;
      &lt;li&gt;Layers는 일단 Pass&lt;/li&gt;
      &lt;li&gt;Filters
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/bfw9ipcvu3lav6y/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2015.56.50.png?raw=1&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;여기서 Filter를 설정할 수 있음&lt;/li&gt;
          &lt;li&gt;시간 관련 Filter를 걸면 4)가 생김&lt;/li&gt;
          &lt;li&gt;int나 float 컬럼을 선택하면 값을 조절할 수 있는 bar가 생김&lt;/li&gt;
          &lt;li&gt;string 컬럼은 Search box가 생김&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Interactions
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/p1mxwdvct21pz8l/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.01.51.png?raw=1&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;Tooltip은 마우스온할 때 어떤 값들이 추가적으로 나오는지 설정하는 부분으로 쉽게 추가하거나 뺄 수 있음&lt;/li&gt;
          &lt;li&gt;Brush는 커서로 영역을 강조 표시 할 수 있음. 브러쉬가 켜지면 모든 레이어가 어두워짐
            &lt;ul&gt;
              &lt;li&gt;마우스로 커서를 올려 놓은 부분만 밝아지고 특히 아크 레이어와 잘 작동&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Tooltip or Brush 중 하나만 선택 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Base map
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/dozvzg3jz60l9ht/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.06.00.png?raw=1&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;Map Style을 선택할 수 있고, May Layers도 설정 가능&lt;/li&gt;
          &lt;li&gt;Label, Road, Building, Water 등을 ON/OFF 할 수 있고 레이어 순서를 결정할 수 있음&lt;/li&gt;
          &lt;li&gt;Map Style을 커스텀하고 싶으면 mapbox에서 자신만의 map style을 publish한 후, access token을 입력하면 사용 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2) Layers
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/few0q422z4wcrck/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.08.36.png?raw=1&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;이 부분엔 데이터의 타입(Point, Arc, Line, Grid, Cluster, Icon, Heatmap, H3, Polygon 등등)을 설정 가능&lt;/li&gt;
      &lt;li&gt;설정값에 따라 옵션이 세부적으로 조절 가능&lt;/li&gt;
      &lt;li&gt;레이어를 ON/OFF 가능하고 Label이 없는 경우엔 Point로 표현 가능하고, Label도 붙일 수 있음
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/ucuzk0ga5000kva/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.11.21.png?raw=1&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이 부분은 백번 보는 것보다 직접 실행하는 것이 좋음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3) Layer Blending
    &lt;ul&gt;
      &lt;li&gt;레이어를 어떻게 섞을지, additive, normal, subtractive가 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4) Time Playback
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/rf53v4jom97nof4/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.13.49.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;시간 Filter가 걸릴 경우 활성화&lt;/li&gt;
      &lt;li&gt;Bound를 조절한 후, 재생 버튼을 누르면 시간순으로 데이터를 볼 수 있음&lt;/li&gt;
      &lt;li&gt;또한 재생 속도도 조절 가능&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/9di8t3vjxoa3i7e/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.20.49.gif?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5) Map View mode
    &lt;ul&gt;
      &lt;li&gt;dual map view, 3D Map, show legend 가능&lt;/li&gt;
      &lt;li&gt;Dual Map view를 한 후, visible layers를 다르게 설정할 수 있음&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/m4oguf9kap8n8wn/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-04-22%2020.42.59.png?raw=1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;6) Share
    &lt;ul&gt;
      &lt;li&gt;Share 옵션으로 Export Image, Export Data, Export Config, Export Map, Share Public URL(Dropbox)를 사용할 수 있음&lt;/li&gt;
      &lt;li&gt;config를 export해서 재사용 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2019-로드맵&quot;&gt;2019 로드맵&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기능에 대한 로드맵은 아래 Github 참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/uber/kepler.gl/wiki/Kepler.gl-2019-Roadmap&quot;&gt;Kepler.gl 2019 Roadmap&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;faq&quot;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Video File로 export할 수 있는지?
    &lt;ul&gt;
      &lt;li&gt;kepler에선 불가능, Quicktime Player나 Giffy 등을 사용하면 됨&lt;/li&gt;
      &lt;li&gt;참고 링크 : &lt;a href=&quot;https://it-talktalk.tistory.com/164&quot;&gt;Giphy Capture&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;지도에 추가할 수 있는 데이터 세트의 수에 제한이 있는지?
    &lt;ul&gt;
      &lt;li&gt;제한은 없지만 많을수록 성능이 저하될 가능성이 큼&lt;/li&gt;
      &lt;li&gt;레이어도 동일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최대 파일 업로드 크기는 얼마인지?
    &lt;ul&gt;
      &lt;li&gt;250mb 이하 파일을 허용함. 사파리에선 더 큰 파일을 로드할 수는 있지만 성능은 제한됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl&quot;&gt;Vis.gl 블로그&lt;/a&gt;에 글이 많음&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl/animating-40-years-of-california-earthquakes-e4ffcdd4a289&quot;&gt;Animating 40 years of California Earthquakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl/mapping-the-parisian-trees-6dc30f6aabc7&quot;&gt;Mapping the Parisian trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl/visualizing-u-s-county-unemployment-with-kepler-gl-c5f2ed31c71&quot;&gt;Visualizing Unemployment for U.S. Counties with kepler.gl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl/movement-in-kepler-d00e843f464d&quot;&gt;Using Kepler.gl and Movement to Visualize Traffic Effects of a Rainstorm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;자체-서버에-빌드하기&quot;&gt;자체 서버에 빌드하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;별도로 빌드해서 사용해야 하는 분들을 위해 작성한 부분&lt;/li&gt;
  &lt;li&gt;Git, Node.js, Yarn이 설치되어 있어야 함&lt;/li&gt;
  &lt;li&gt;MapboxAccessToken 있어야 함
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://account.mapbox.com/&quot;&gt;홈페이지&lt;/a&gt; 가입 후 발급&lt;/li&gt;
      &lt;li&gt;역시 이런 것은 유료.. 월 499달러라..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/uber/kepler.gl.git
cd kepler.gl
yarn --ignore-engines
export MapboxAccessToken=&amp;lt;insert_your_token&amp;gt;
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;완료된 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt;에 가면 아래 같은 화면이 뿅!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4i3uv5r19avptal/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2016.40.48.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/kepler.gl&quot;&gt;kepler.gl Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kepler.gl/&quot;&gt;공식 홈페이지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/kepler.gl/tree/master/docs/user-guides&quot;&gt;Kepler User Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/kepler.gl/blob/master/contributing/DEVELOPERS.md&quot;&gt;Developing Kepler.gl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl&quot;&gt;Vis.gl Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/data/2019/04/01/uber-keplergl/</link>
        <guid isPermaLink="true">https://zzsza.github.io/data/2019/04/01/uber-keplergl/</guid>
        
        <category>geographic</category>
        
        
        <category>data</category>
        
      </item>
    
      <item>
        <title>Simulated Annealing 개념과 Python 구현</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Simulated Annealing에 대한 설명과 파이썬 구현 코드를 작성한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;simulated-annealing&quot;&gt;Simulated Annealing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Kirkpatrick이 1983년에 만듬&lt;/li&gt;
  &lt;li&gt;뜨거운 욕조에서 재료의 냉각을 시뮬레이션하는 알고리즘에 기반&lt;/li&gt;
  &lt;li&gt;더 전통적인 방법의 변형
    &lt;ul&gt;
      &lt;li&gt;Local(neighborhood) search&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;확률론적 메타휴리스틱 방법&lt;/li&gt;
  &lt;li&gt;Annealing
    &lt;ul&gt;
      &lt;li&gt;내부 강도를 제거하기 위해 금속이나 유리를 가열하고 천천히 냉각시키는 방법&lt;/li&gt;
      &lt;li&gt;금속재료를 가열한 다음 조금씩 냉각해 결정을 성장시켜 그 결함을 줄이는 작업&lt;/li&gt;
      &lt;li&gt;열에 의해서 원자는 초기의 위치(내부 에너지가 극소점에 머무르는 상태)로부터 멀어져 에너지가 더욱 높은 상태로 추이됨&lt;/li&gt;
      &lt;li&gt;천천히 냉각함으로써 원자는 초기 상태보다 내부 에너지가 한층 더 극소인 상태를 얻을 가능성이 많아짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cooling하는 방법
    &lt;ul&gt;
      &lt;li&gt;Temperature를 낮추는 방법&lt;/li&gt;
      &lt;li&gt;Cooling rate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Local minima/optima를 벗어나는 컨트롤된 방식으로 오르막 이동(더 나쁜 솔루션)을 허용함
    &lt;ul&gt;
      &lt;li&gt;확률로 더 나쁜 움직임을 받아들임&lt;/li&gt;
      &lt;li&gt;random number를 체크한 후, random이 적으면 나쁘게 움직이고 높으면 움직이지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/4w56bige61wyoed/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-26%2023.53.53.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/tldpmm7ds7gqneh/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-27%2000.01.01.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;해를 반복해 개선하며 현재의 해 근방에 있는 해를 임의로 찾는데, 그 때 주어진 함수의 값과 전역 인자 T가 영향을 줌
    &lt;ul&gt;
      &lt;li&gt;위에서 말한 물리 과정과 비슷한 원리로 T(온도)의 값은 서서히 작아짐&lt;/li&gt;
      &lt;li&gt;처음엔 T가 크기 때문에 해가 크게 변화하지만, T가 0에 가까워짐에 따라 변화가 줄어듬&lt;/li&gt;
      &lt;li&gt;처음은 간단하게 비탈을 올라갈 수 있으므로, 지역 최적점에 빠졌을 때 대책을 생각할 필요가 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;아이디어 자체는 모든 분야에 대하여 적용이 가능
    &lt;ul&gt;
      &lt;li&gt;임의의 경우의 수가 많은 경우 정해진 조건에서 대용량의 최적화를 찾을 때 유용하게 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notations&quot;&gt;Notations&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mdbt91lfzeafx4q/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-28%2020.39.11.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빨간색이 Final Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wxuijdt6m3ig532/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-28%2020.40.42.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법&quot;&gt;방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;T_{0}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;T_{0}&lt;/script&gt;, M, N, alpha, move operator의 종류를 설정&lt;/li&gt;
  &lt;li&gt;
    &lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;m = 1&lt;/code&gt;&lt;/pre&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;m = 1&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;Search space &lt;code class=&quot;MathJax_Preview&quot;&gt;x_{i}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x_{i}&lt;/script&gt;에서 random point로 시작&lt;/li&gt;
  &lt;li&gt;move operator &lt;code class=&quot;MathJax_Preview&quot;&gt;x_{t}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x_{t}&lt;/script&gt;를 사용해 다른 장소로 이동&lt;/li&gt;
  &lt;li&gt;근처를 둘러보고 그 중 하나로 이동&lt;/li&gt;
  &lt;li&gt;더 나아졌는지 확인 후, 나아졌으면 끝. 아니면 계속
    &lt;ul&gt;
      &lt;li&gt;나아지지 않았다면 random number를 취함&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;1/(e^{(f(x_{tmp})-f(x_{i})/T_{t})}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;1/(e^{(f(x_{tmp})-f(x_{i})/T_{t})}&lt;/script&gt;랑 비교&lt;/li&gt;
      &lt;li&gt;작다면 취하고, 작지 않다면 다른 곳을 찾고 n = n + 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;N번 진행&lt;/li&gt;
  &lt;li&gt;m = m + 1&lt;/li&gt;
  &lt;li&gt;
    &lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;T_{t+1} = \alpha * T_{t}&lt;/code&gt;&lt;/pre&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;T_{t+1} = \alpha * T_{t}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;1time에 5~9 스텝을 반복&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;x_{Final}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x_{Final}&lt;/script&gt;을 찾고 좋은 Solution으로 기록&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flowchart&quot;&gt;Flowchart&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/repgqi2ne3n2nxu/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-28%2021.04.37.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;himmelblau-구현&quot;&gt;Himmelblau 구현&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Himmelblau%27s_function&quot;&gt;Himmelblau function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;z = (x^{2} + y - 11)^{2} + (x+y^{2}-7)^{2}&lt;/code&gt;&lt;/pre&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;z = (x^{2} + y - 11)^{2} + (x+y^{2}-7)^{2}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;x와 y는 -6 ~ 6&lt;/li&gt;
  &lt;li&gt;minimized z = 0.0000&lt;/li&gt;
  &lt;li&gt;1개의 극대값과 4개의 극소값을 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;himmelblau-코드&quot;&gt;Himmelblau 코드&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt


x0 = 1 # Initial solution
y0 = -1

k = 0.1
T0 = 1000
M = 300
N = 15
alpha = 0.85


z_int = ((x0**2)+y0-11)**2+(x0+(y0**2)-7)**2

print(f&quot;Initial X is {x0:.3f}&quot;)
print(f&quot;Initial Y is {y0:.3f}&quot;)
print(f&quot;Initial Z is {z_int:.3f}&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;처음엔 Z가 146으로 Optimal과 거리가 멈&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt


x0 = 1 # Initial solution
y0 = -1

k = 0.1
T0 = 1000
M = 300
N = 15
alpha = 0.85


z_int = ((x0**2)+y0-11)**2+(x0+(y0**2)-7)**2

print(f&quot;Initial X is {x0:.3f}&quot;)
print(f&quot;Initial Y is {y0:.3f}&quot;)
print(f&quot;Initial Z is {z_int:.3f}&quot;)

temp = []
min_z = []

# neighborhood search

for i in range(M):
	for j in range(N):
		xt = 0
		yt = 0
		
		# move operator
		ran_x_1 = np.random.rand()
		ran_x_2 = np.random.rand()
		ran_y_1 = np.random.rand()
		ran_y_2 = np.random.rand()
		
		if ran_x_1 &amp;gt;= 0.5:
			x1 = k*ran_x_2
		else:
			x1 = -k*ran_x_2
			
		if ran_y_1 &amp;gt;= 0.5:
			y1 = k*ran_y_2
		else:
			y1 = -k*ran_y_2
			
		xt = x0 + x1
		yt = y0 + y1
		
		of_new = ((xt**2)+yt-11)**2+(xt+(yt**2)-7)**2
		of_final = ((x0**2)+y0-11)**2+(x0+(y0**2)-7)**2
	
		ran_1 = np.random.rand()
		form = 1/(np.exp((of_new-of_final)/T0))
		
		if of_new &amp;lt;= of_final:
			x0 = xt
			y0 = yt
		elif ran_1 &amp;lt;= form:
			x0 = xt
			y0 = yt				
		else:
			x0 = x0
			y0 = y0
		
	temp = np.append(temp, T0)
	min_z = np.append(min_z, of_final)
	T0 = alpha*T0
	
print(f&quot;X is {x0:.3f}&quot;)	
print(f&quot;Y is {y0:.3f}&quot;)	
print(f&quot;Final OF is {of_final:.3f}&quot;)	

plt.plot(temp, min_z)
plt.title(&quot;Z vs Temp&quot;, fontsize=20, fornweight='bold')
plt.xlabel(&quot;Temp&quot;, fontsize=18, fornweight='bold')
plt.ylabel(&quot;Z&quot;, fontsize=18, fornweight='bold')

plt.xlim(1000, 0)
plt.xticks(np.arrange(min(temp), max(temp), 100), fornweight='bold')
plt.yticks(fontweight='bold')

plt.show()


&amp;gt;&amp;gt;&amp;gt; X is 3.584
&amp;gt;&amp;gt;&amp;gt; Y is -1.848
&amp;gt;&amp;gt;&amp;gt; Final OF is 0.000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/88bwlvqwrgpj5ki/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-29%2020.47.40.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;x0를 2로 바꾸고, y0을 1로 바꾸고 실행해보기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;quadratic-assignment-problem&quot;&gt;Quadratic Assignment Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Quadratic_assignment_problem&quot;&gt;QAP Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;8개의 department와 8개의 location이 있음&lt;/li&gt;
  &lt;li&gt;objective = minimize flow costs between the placed departments&lt;/li&gt;
  &lt;li&gt;flow cost is flow * distance&lt;/li&gt;
  &lt;li&gt;optimal flow costs is 107(or 214)&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/2m64zmd3e114r2e/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-29%2020.59.07.png?raw=1&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;코드&quot;&gt;코드&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import numpy as np
from matplotlib import pyplot as plt
import pandas as pd

Dist = pd.DataFrame(
    [[0, 1, 2, 3, 1, 2, 3, 4], [1, 0, 1, 2, 2, 1, 2, 3], [2, 1, 0, 1, 3, 2, 1, 2], [3, 2, 1, 0, 4, 3, 2, 1],
     [1, 2, 3, 4, 0, 1, 2, 3], [2, 1, 2, 3, 1, 0, 1, 2], [3, 2, 1, 2, 2, 1, 0, 1], [4, 3, 2, 1, 4, 2, 1, 0]],
    columns=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;], index=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;])

Flow = pd.DataFrame(
    [[0, 5, 2, 4, 1, 0, 0, 6], [5, 0, 3, 0, 2, 2, 2, 0], [2, 3, 0, 0, 0, 0, 0, 5], [4, 0, 0, 0, 5, 2, 2, 10],
     [1, 2, 0, 5, 0, 10, 0, 0], [0, 2, 0, 2, 10, 0, 5, 1], [0, 2, 0, 2, 0, 5, 0, 10], [6, 0, 5, 10, 0, 1, 10, 0]],
    columns=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;], index=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;])

T0 = 1500
M = 250
N = 20
alpha = 0.9

X0 = [&quot;B&quot;, &quot;D&quot;, &quot;A&quot;, &quot;E&quot;, &quot;C&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;]

New_Dist_DF = Dist.reindex(columns=X0, index=X0)
New_Dist_Arr = np.array(New_Dist_DF)

# Make a dataframe of the cost of the initial solution

objfun1_start = pd.DataFrame(New_Dist_Arr * Flow)
objfun1_start_Arr = np.array(objfun1_start)

sum_start = sum(sum(objfun1_start_Arr))

print(sum_start)

Temp = []
Min_Cost = []

for i in range(M):
    for j in range(N):
        ran_1 = np.random.randint(0, len(X0))
        ran_2 = np.random.randint(0, len(X0))

        while ran_1 == ran_2:
            ran_2 = np.random.randint(0, len(X0))

        xt = []
        xf = []

        A1 = X0[ran_1]
        A2 = X0[ran_2]

        # Make a new list of the new set of departments

        w = 0
        for i in X0:
            if X0[w] == A1:
                xt = np.append(xt, A2)
            elif X0[w] == A2:
                xt = np.append(xt, A1)
            else:
                xt = np.append(xt, X0[w])
            w = w + 1

        # print(X0)
        # print(A1, A2)
        # print(xt)

        new_dis_df_init = Dist.reindex(columns=X0, index=X0)
        new_dis_init_arr = np.array(new_dis_df_init)

        new_dis_df_new = Dist.reindex(columns=xt, index=xt)
        new_dis_new_arr = np.array(new_dis_df_new)

        # Make a dataframe of the current solution
        objfun_init = pd.DataFrame(new_dis_init_arr * Flow)
        objfun_init_arr = np.array(objfun_init)

        # Make a dataframe of the new solution
        objfun_new = pd.DataFrame(new_dis_new_arr * Flow)
        objfun_new_arr = np.array(objfun_new)
        sum_init = sum(sum(objfun_init_arr))
        sum_new = sum(sum(objfun_new_arr))

        rand1 = np.random.rand()
        form = 1 / (np.exp(sum_new - sum_init) / T0)

        if sum_new &amp;lt;= sum_init:
            X0 = xt
        elif rand1 &amp;lt;= form:
            X0 = xt
        else:
            X0 = X0

        Temp.append(T0)
        Min_Cost.append(sum_init)

        T0 = alpha * T0

print()
print(&quot;Final Solution&quot;, X0)
print(&quot;Minimized Cost:&quot;, sum_init)

plt.plot(Temp, Min_Cost)
plt.title(&quot;Cost vs Temp&quot;, fontsize=20, fontweight='bold')
plt.xlabel(&quot;Temp&quot;, fontsize=18, fontweight='bold')
plt.ylabel(&quot;Cost&quot;, fontsize=18, fontweight='bold')
plt.xlim(1500, 0)

plt.xticks(np.arange(min(Temp), max(Temp), 100), fontweight='bold')
plt.yticks(fontweight='bold')
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8B%B4%EA%B8%88%EC%A7%88_%EA%B8%B0%EB%B2%95&quot;&gt;Simulated Annealing, SA, 담금질 기법 - 위키피디아&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aistudy.com/neural/simulated_annealing.htm&quot;&gt;Simulated  Annealing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://koosaga.com/3&quot;&gt;동전 뒤집기와 Simulated Annealing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/data/2019/04/01/simulated-annealing/</link>
        <guid isPermaLink="true">https://zzsza.github.io/data/2019/04/01/simulated-annealing/</guid>
        
        <category>optimization</category>
        
        
        <category>data</category>
        
      </item>
    
      <item>
        <title>Uber H3 : 육각형 계층의 인덱스</title>
        <description>&lt;ul&gt;
  &lt;li&gt;Uber의 그리드 시스템인 H3에 대한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;그리드-시스템&quot;&gt;그리드 시스템&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Grid 시스템은 대용량 데이터를 분석하고, 지구의 영역을 구분 가능한 그리드셀로 분할할 때 중요
    &lt;ul&gt;
      &lt;li&gt;한국 같은 경우 행정 구역 단위가 있지만(시군구동…) 이 단위는 행정을 위한 단위기 때문에 분석시 유용하지 않음&lt;/li&gt;
      &lt;li&gt;강남구는 생각보다 길고, 큼. 강남역 왼쪽은 서초구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;우버에선 ride price과 dispatch을 효율적으로 최적화하기 위해 그리드 시스템인 H3을 개발하고 오픈소스로 공개함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;유튜브-영상&quot;&gt;유튜브 영상&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ay2uwtRO3QE&quot;&gt;H3 Youtube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Surge Pricing 하며 겪은 이슈
    &lt;ul&gt;
      &lt;li&gt;우버에서 처음엔 도시 단위로 오퍼레이션 했는데, Boundary Effect가 생김
        &lt;ul&gt;
          &lt;li&gt;Surge Cliffs에서 취소가 생김&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Pantom Demand: 유령 수요(너무 넓은 지역)&lt;/li&gt;
      &lt;li&gt;프랑스는 도시가 매우 복잡하고 잘게 쪼개져 있음&lt;/li&gt;
      &lt;li&gt;도시보다 작은 단위가 필요함을 깨달음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;왜 육각형(헥사곤)을 사용했는가?
    &lt;ul&gt;
      &lt;li&gt;Smooth gradients of demand를 구현할 수 있음&lt;/li&gt;
      &lt;li&gt;Clear center of demand&lt;/li&gt;
      &lt;li&gt;Dynamic neighborhoods&lt;/li&gt;
      &lt;li&gt;아래 관점으로 여러 실험
        &lt;ul&gt;
          &lt;li&gt;Neighbor Traversal(이웃 순회)
            &lt;ul&gt;
              &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/tdcnpzxmdz1p48i/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2011.44.58.png?raw=1&quot; /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Subdivision(재조합)
            &lt;ul&gt;
              &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/sabnt0g3y12umnl/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2011.45.42.png?raw=1&quot; /&gt;&lt;/li&gt;
              &lt;li&gt;사각형이 완벽하게 재조합이 되나, 헥사곤은 그렇진 않음. 우버는 완전 똑같을 필요는 없다고 함(약간의 에러를 감수)&lt;/li&gt;
              &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/bp9s01z4rzuwoty/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2011.46.49.png?raw=1&quot; /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Distortion(왜곡)
            &lt;ul&gt;
              &lt;li&gt;헥사곤을 선택한 중요한 이유 중 하나&lt;/li&gt;
              &lt;li&gt;지구는 sphere(구체)고, 평평하지 않음. 그러나 grid는 평평함. Map Projection을 통해 평평해짐&lt;/li&gt;
              &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/7hjfjzjlh6goz1f/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2011.49.10.png?raw=1&quot; /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/daxvn294bw4tkhc/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2011.52.21.png?raw=1&quot; height=&quot;300&quot; width=&quot;350&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;H3를 사용하면 지리 데이터를 분석해 여러 결정을 내릴 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;그리드를-사용한-분석-사례&quot;&gt;그리드를 사용한 분석 사례&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rej9qljs0lx6ty0/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2012.01.23.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;매 순간 라이더가 라이딩을 요청하고, 운전자는 여행을 시작, 배고픈 사용자는 음식을 요청
    &lt;ul&gt;
      &lt;li&gt;각 이벤트는 특정 위치에서 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이런 이벤트를 분석해 시장에 대해 더 잘 이해하고 최적화할 수 있음&lt;/li&gt;
  &lt;li&gt;도시의 특정 지역에서 공급보다 수요가 많아 가격을 조정하거나 특정 드라이버에게 가까운 거리에 승차 요청이 있다고 알릴 수 있음&lt;/li&gt;
  &lt;li&gt;도시 전체 데이터를 분석해야 하고, 미세한 단위로 수행되어야 함&lt;/li&gt;
  &lt;li&gt;헥사곤은 quantization error를 최소화함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;h3&quot;&gt;H3&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Hexagonal global grid system의 장점 + hierarchical indexing 시스템을 결합하기 위해 H3을 만듬&lt;/li&gt;
  &lt;li&gt;지구상 3차원 위치에서 2차원 점으로 이동하려면 투영(Projection)이 필요
    &lt;ul&gt;
      &lt;li&gt;Mercator Projection이 유명한데, 크기 왜곡이 발생해 셀의 영역이 달라짐
        &lt;ul&gt;
          &lt;li&gt;정사각형 그리드는 여러 계수가 필요로 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;결국 지도 투영은 이십면체(&lt;a href=&quot;https://en.wikipedia.org/wiki/Icosahedron&quot;&gt;Icosahedron&lt;/a&gt;)를 중심으로 하는 gnomonic projection을 사용함
        &lt;ul&gt;
          &lt;li&gt;20면체는 다양한 방법으로 펼쳐져 2차원 지도를 생성할 수 있으나, H3는 전개하지 않고 20 면에 그리드를 배치해 geodesic discrete global grid 시스템을 만듬&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;육각형
    &lt;ul&gt;
      &lt;li&gt;육각형은 중심점과 이웃 점 사이에 단 하나의 거리를 가지고 있음&lt;/li&gt;
      &lt;li&gt;그라디언트에 대한 분석/스무딩을 단순화함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;H3 그리드
    &lt;ul&gt;
      &lt;li&gt;122개의 기본 셀을 지구상에 배치하고 한 면에 10개의 셀을 배치해 구성함&lt;/li&gt;
      &lt;li&gt;16개의 해상도(resolution)을 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/e0l8shg4cuzx80w/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-31%2012.09.37.png?raw=1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;계층적 특성으로 인덱스의 해상도를 효율적으로 자르고 복구할 수 있음&lt;/li&gt;
  &lt;li&gt;육각형 색인은 64 비트 정수로 표현됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;h3-사용하기&quot;&gt;H3 사용하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/h3-py&quot;&gt;h3-py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;가 깔려있는지 확인&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  which cc
  /usr/bin/cc
  which make
  /usr/bin/make
  which cmake
  /usr/bin/cmake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설치&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pip3 install h3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geo_to_h3&lt;/code&gt; 함수
    &lt;ul&gt;
      &lt;li&gt;위도, 경도, 해상도를 통해 h3 인덱스를 반환하는 함수&lt;/li&gt;
      &lt;li&gt;arg : lat 위도, lng 경도, hex resolution&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  from h3 import h3
  h3_address = h3.geo_to_h3(37.3615593, -122.0553238, 5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h3_to_geo&lt;/code&gt; 함수
    &lt;ul&gt;
      &lt;li&gt;h3 인덱스를 통해 헥사곤의 중심점(lat, lng)을 반환하는 함수&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  hex_center_coordinates = h3.h3_to_geo(h3_address)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h3_to_geo_boundary&lt;/code&gt; 함수
    &lt;ul&gt;
      &lt;li&gt;h3 인덱스를 통해 헥사곤의 boundary를 반환하는 함수&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  hex_boundary = h3.h3_to_geo_boundary(h3_address)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;k_ring_distance&lt;/code&gt; 함수
    &lt;ul&gt;
      &lt;li&gt;h3 인덱스를 통해 거리가 k 안에 있는 h3 인덱스를 반환하는 함수&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  h3.k_ring_distances(h3_address, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/h3-py/blob/master/docs/Usage.ipynb&quot;&gt;Folium과 결합해 Jupyter Notebook에서 사용하는 예시&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SQL에서 사용하고 싶으면, UDF를 만들어서 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;H3를 토대로 나온 데이터를 &lt;a href=&quot;https://kepler.gl/&quot;&gt;kepler.gl&lt;/a&gt;에서 시각화할 수 있음&lt;/li&gt;
  &lt;li&gt;관련 블로그 글 : &lt;a href=&quot;https://zzsza.github.io/data/2019/04/01/uber-keplergl/&quot;&gt;Uber Kepler.gl : 지리 데이터 시각화 도구&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://eng.uber.com/h3/&quot;&gt;H3: Uber’s Hexagonal Hierarchical Spatial Index&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/h3&quot;&gt;H3 Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/h3-py&quot;&gt;h3-py Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ay2uwtRO3QE&quot;&gt;H3 Youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/data/2019/03/31/uber-h3/</link>
        <guid isPermaLink="true">https://zzsza.github.io/data/2019/03/31/uber-h3/</guid>
        
        <category>geographic</category>
        
        
        <category>data</category>
        
      </item>
    
      <item>
        <title>메타휴리스틱 기법과 탐색 방법, Metaheuristics and Search Technique</title>
        <description>&lt;ul&gt;
  &lt;li&gt;메타휴리스틱 이론, 메타휴리스틱 기법에 대해 작성한 글입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/cnwnbmfvz1lbarq/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-26%2017.06.44.png?raw=1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;operations-research&quot;&gt;Operations Research&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OR&lt;/li&gt;
  &lt;li&gt;수학적 모델링이나 통계 분석, 최적화 기법 등을 이용해 복잡한 &lt;strong&gt;의사결정&lt;/strong&gt; 문제에서 최적해 혹은 근사최적해를 찾아내 이익, 성능, 수익 등을 최대화하거나 손실, 위험, 비용 등을 최소화하는 현실적인 문제를 해결할 때 사용&lt;/li&gt;
  &lt;li&gt;2차 세계 대전에서 기원
    &lt;ul&gt;
      &lt;li&gt;Scheduling&lt;/li&gt;
      &lt;li&gt;Transportation&lt;/li&gt;
      &lt;li&gt;Inventory management&lt;/li&gt;
      &lt;li&gt;Warehousing&lt;/li&gt;
      &lt;li&gt;Facility allocation&lt;/li&gt;
      &lt;li&gt;Energy distribution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예제
    &lt;ul&gt;
      &lt;li&gt;의자는 15BF, 6시간 노동력이 필요하고 식탁은 24BF, 5시간의 노동력이 필요&lt;/li&gt;
      &lt;li&gt;Maximize profit =&amp;gt; z = 12X + 10Y
        &lt;ul&gt;
          &lt;li&gt;Chair : 12달러, Table : 10달러&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Subjected to
        &lt;ul&gt;
          &lt;li&gt;15X + 24Y &amp;lt;= 300&lt;/li&gt;
          &lt;li&gt;6X + 5Y &amp;lt;= 120&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;or-구성-요소&quot;&gt;OR 구성 요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;목적 함수(Objective function)&lt;/li&gt;
  &lt;li&gt;결정 변수(Decision variables)
    &lt;ul&gt;
      &lt;li&gt;목적 함수식이나 제약조건에서 미지수로 나타나는 변수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제약 조건(Constraints)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;types-of-solutions-and-constraints&quot;&gt;Types of Solutions and Constraints&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Solutions
    &lt;ul&gt;
      &lt;li&gt;Infeasible : 모든 제약조건에 만족하는 solution이 없는 경우&lt;/li&gt;
      &lt;li&gt;Feasible&lt;/li&gt;
      &lt;li&gt;Optimal&lt;/li&gt;
      &lt;li&gt;Near-Optimal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Constraints
    &lt;ul&gt;
      &lt;li&gt;Hard constraints : 필수 제약조건&lt;/li&gt;
      &lt;li&gt;Soft constraints&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;continuous-vs-combinatorial&quot;&gt;Continuous vs Combinatorial&lt;/h2&gt;
&lt;h3 id=&quot;continuous&quot;&gt;Continuous&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;연속적 문제&lt;/li&gt;
  &lt;li&gt;결정 변수가 연속적인 문제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;combinatorial&quot;&gt;Combinatorial&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;결정 변수가 이산적인 문제&lt;/li&gt;
  &lt;li&gt;이산적 문제, 조합 최적화 문제&lt;/li&gt;
  &lt;li&gt;정수 계획법(Integer Programming : 결정 변수가 정수인 최적화 문제)이 대표적&lt;/li&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;Traveling Salesman Problem(TSP)&lt;/li&gt;
      &lt;li&gt;Vehicle Routing Problem(VRP)&lt;/li&gt;
      &lt;li&gt;Knapsack PRoblem(KP)&lt;/li&gt;
      &lt;li&gt;Quadratic Assignment Problem(QAP)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;p-vs-np-problems&quot;&gt;P vs NP Problems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;P problem : 짧은 다항식 문제&lt;/li&gt;
  &lt;li&gt;NP problem : 짧은 non-deterministic 문제&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메타휴리스틱&quot;&gt;메타휴리스틱&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;휴리스틱
    &lt;ul&gt;
      &lt;li&gt;합리적인 계산 비용으로 최적 또는 거의 최적의 솔루션을 찾는 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메타휴리스틱
    &lt;ul&gt;
      &lt;li&gt;특정 문제에 특화되지 않고 자연에서 영감을 얻은 경험적 방법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NP Problem은 문제가 커지면서 점점 더 어려워짐&lt;/li&gt;
  &lt;li&gt;자주 사용되는 메타휴리스틱 방법
    &lt;ul&gt;
      &lt;li&gt;Genetic Algorithm(GA)&lt;/li&gt;
      &lt;li&gt;Tabu Search(TS)&lt;/li&gt;
      &lt;li&gt;Ant Colony Optimization(ACO)&lt;/li&gt;
      &lt;li&gt;Partical Swarm Optimization(PSO)&lt;/li&gt;
      &lt;li&gt;Simulated Annealing(SA)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;search-techniques&quot;&gt;Search Techniques&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Local search vs global search
    &lt;ul&gt;
      &lt;li&gt;local : 이웃에 기반함, 그리드 서치&lt;/li&gt;
      &lt;li&gt;global : search space&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deterministic vs stochastic
    &lt;ul&gt;
      &lt;li&gt;deterministic : non-random&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/post/Difference_between_stochastic_and_deterministic_optimization_model&quot;&gt;참고 링크&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Continuous Problem
    &lt;ul&gt;
      &lt;li&gt;특정 인풋으로부터 어떤 output이 나오는 함수&lt;/li&gt;
      &lt;li&gt;Minimization or maximization 문제&lt;/li&gt;
      &lt;li&gt;Himmelblau’s function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Combination Problem
    &lt;ul&gt;
      &lt;li&gt;discrete elements의 조합 문제&lt;/li&gt;
      &lt;li&gt;Minimization or maximization 문제&lt;/li&gt;
      &lt;li&gt;TSP 문제
        &lt;ul&gt;
          &lt;li&gt;5개의 도시 : A, B, C, D, E&lt;/li&gt;
          &lt;li&gt;minimum route : D-A-E-C-B (최소 거리)&lt;/li&gt;
          &lt;li&gt;다른 것도 가능 : A-D-C-E-B&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;neighborhood-vs-population-search&quot;&gt;Neighborhood vs Population Search&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Neighborhood search
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/pb45r9rcnld5d8c/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202019-03-26%2018.16.50.png?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;local search&lt;/li&gt;
      &lt;li&gt;계산적으로 어려운 최적화 문제를 해결하는 휴리스틱 방법론&lt;/li&gt;
      &lt;li&gt;잠재적 솔루션을 취하고 주변 환경(일종의 이웃)을 체크&lt;/li&gt;
      &lt;li&gt;Simulated Annealing and Tabu Search&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Population Based Search
    &lt;ul&gt;
      &lt;li&gt;각 iteration에서 솔루션의 population를 사용하는 방법&lt;/li&gt;
      &lt;li&gt;잠재성이 있는 솔루션을 Evaluate&lt;/li&gt;
      &lt;li&gt;랜덤하게 다른 솔루션을 생산하기 위한 솔루션을 선택&lt;/li&gt;
      &lt;li&gt;Genetic Aglorithm, Evolutionary Strategies, Particle Swarm Optimization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메타휴리스틱은-어떻게-작동하는가&quot;&gt;메타휴리스틱은 어떻게 작동하는가?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Random initial solution&lt;/li&gt;
  &lt;li&gt;Neighborhood search
    &lt;ul&gt;
      &lt;li&gt;초기 솔루션부터 근처를 돌아다니며 실행&lt;/li&gt;
      &lt;li&gt;모든 스텝을 evaluate&lt;/li&gt;
      &lt;li&gt;각 스텝의 목적 값(objective value)를 추적&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Population-Based search
    &lt;ul&gt;
      &lt;li&gt;랜덤 초기 솔루션을 여러개 생성&lt;/li&gt;
      &lt;li&gt;더 “나은” 솔루션을 생성&lt;/li&gt;
      &lt;li&gt;Diverse&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%9C%B4%EB%A6%AC%EC%8A%A4%ED%8B%B1_%EC%9D%B4%EB%A1%A0&quot;&gt;휴리스틱 이론 - 위키피디아&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
        <link>https://zzsza.github.io/data/2019/03/26/metaheuristics/</link>
        <guid isPermaLink="true">https://zzsza.github.io/data/2019/03/26/metaheuristics/</guid>
        
        <category>optimization</category>
        
        
        <category>data</category>
        
      </item>
    
      <item>
        <title>KafkaKRU(Kafka 한국사용자 모임) 2회 미니밋업 후기</title>
        <description>&lt;ul&gt;
  &lt;li&gt;카프카 한국자 사용자모임에서 진행한 2회 미니밋업 후기입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;행사-정보&quot;&gt;행사 정보&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.facebook.com/events/2222351638018632/&quot;&gt;Facebook Event URL&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1. 제목: KafkaKRU(Kafka 한국사용자 모임) 제2회 미니밋업
	
  2. 신청: https://www.onoffmix.com/event/171028
	
  3. 날짜: 3월 26일 화요일 오후 6시 50분
	
  4. 장소: 서울특별시 송파구 올림픽로35길 125 삼성SDS 잠실 Campus 동관 지하2층 다목적홀
	
  5. 인원: 35명
	
  6. 후원:
  (1) 삼성 SDS: 장소 및 다과
  (2) 카카오: 카카오 스티커, 카카오 프렌즈 상품
  (3) 책만 출판사: &amp;lt;대시보드 설계와 데이터 시각화&amp;gt; 3권, &amp;lt;블록체인 기업으로 가는 길&amp;gt; 3권
  (4) 젯브레인
	
  7. 일정
  18:50 ~ 19:00 인사 + 네트워킹
  19:00 ~ 19:20 Kafka를 활용한 캐시 로그 처리 - 김현준(카카오)
  19:20 ~ 19:40 Kafka를 활용한 Elasticsearch 실무프로젝트 소개 - 이은학(메가존)
  19:40 ~ 19:50 브레이크 타임
  19:50 ~ 20:10 Kafka를 활용한 rabbitmq 로그 처리 - 정원빈(카카오)
  20:10 ~ 20:30 Kafka를 Microservice Architecture에 활용하기 - 이동진(Apache Software Foundation)
  20:30 ~ 20:50 Kafka 프로듀서 &amp;amp; 컨슈머 - 강한구(카카오 모빌리티)
  21:00 ~ 뒷풀이
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인사&quot;&gt;인사&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/171e1o759mlbadb/2019-03-26%2018.52.45.jpg?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;발표 자료 : &lt;a href=&quot;https://github.com/kafkakru/meetup&quot;&gt;https://github.com/kafkakru/meetup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;나중에 스티커를 만든다고 하심!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kafka를-활용한-캐시-로그-처리-사례&quot;&gt;Kafka를 활용한 캐시 로그 처리 사례&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;카카오 김현준님&lt;/li&gt;
  &lt;li&gt;1도 모르는 사람이 Kafka &amp;amp; ELK로 캐시로그 처리해보기&lt;/li&gt;
  &lt;li&gt;캐시 시스템과 실시간 로그분석의 필요성
    &lt;ul&gt;
      &lt;li&gt;캐시 시스템
        &lt;ul&gt;
          &lt;li&gt;오픈소스를 활용한 구성(nginx + ATS)&lt;/li&gt;
          &lt;li&gt;자체 개발 캐시서버&lt;/li&gt;
          &lt;li&gt;img/static image(css/js), 동영상 등을 처리하기 위한 캐시 시스템&lt;/li&gt;
          &lt;li&gt;1차 Cache ⇒ 2차 Cache ⇒ 원본(Origin)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;실시간 로그 분석 필요성
        &lt;ul&gt;
          &lt;li&gt;Image size, 404, 응답 지연 등 ⇒ 하루 전 데이터를 가지고 모니터링&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;캐시 로그 분석 시스템 구축
    &lt;ul&gt;
      &lt;li&gt;운영의 니즈를 반영하고자 시스템 구축 시작&lt;/li&gt;
      &lt;li&gt;ELK로 시작, 1차 Cache에서 access_log를 그림
        &lt;ul&gt;
          &lt;li&gt;요청이 많고, 트래픽이 많음 ⇒ 로그도 많음&lt;/li&gt;
          &lt;li&gt;로컬 캐시 서버에 로그를 쌓기 싫어서, nginx에서 바로 쏨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문제 인지와 Kafka 도입 그리고 Lag
    &lt;ul&gt;
      &lt;li&gt;키바나 그래프를 보다보니 로그가 너무 조금만 들어오고 있음!?&lt;/li&gt;
      &lt;li&gt;분석 시작&lt;/li&gt;
      &lt;li&gt;Syslog 전송 과정에서 누락? Logstash 성능?&lt;/li&gt;
      &lt;li&gt;주변에 물어보니 대용량이나 많은 트래픽은 logstash 앞단에 큐 하나!&lt;/li&gt;
      &lt;li&gt;redis나 rabbitmq를 찾아보다가 승범님이 카프카를 쓰길 권함&lt;/li&gt;
      &lt;li&gt;lag이 계속 쌓임…! lag은 처리하지 못한 수치
        &lt;ul&gt;
          &lt;li&gt;파티션을 쪼개던지, 컨슈머를 늘리거나 등등&lt;/li&gt;
          &lt;li&gt;로그 분석이 돈 버는 것은 아니라 컨슈머를 늘리기엔 눈치가 보이고.. 파티션 조정해도 효과가 적음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;logstash 설정이 잘못된 것 같으니 다시! ⇒ 모두 동일..&lt;/li&gt;
      &lt;li&gt;auto.commit.interval.ms=5000과 auto.commit= true
        &lt;ul&gt;
          &lt;li&gt;interval을 줄이니 lag이 사라짐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;현재는 수백대의 cache 서버 로그를 초당 15만건 이상 처리
    &lt;ul&gt;
      &lt;li&gt;대략 30테라?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka를-활용한-elasticsearch-실무프로젝트-소개&quot;&gt;Kafka를 활용한 Elasticsearch 실무프로젝트 소개&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;메가존 이은학님&lt;/li&gt;
  &lt;li&gt;빅데이터 플랫폼 구축 및 활용솔루션 개발 중&lt;/li&gt;
  &lt;li&gt;프로젝트
    &lt;ul&gt;
      &lt;li&gt;카드사&lt;/li&gt;
      &lt;li&gt;비정형 / 정형 / 외부 데이터 ⇒ 분산되어 있는데 통합!&lt;/li&gt;
      &lt;li&gt;빅데이터 허브 : 엘라스틱 서치 + 하둡&lt;/li&gt;
      &lt;li&gt;사이언스 플랫폼&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로젝트에서 Elastic Stack 활용 영역
    &lt;ul&gt;
      &lt;li&gt;비정형 데이터 분석
        &lt;ul&gt;
          &lt;li&gt;Google analytics&lt;/li&gt;
          &lt;li&gt;고객 상담데이터(STT) ⇒ RESTFul 한글 형태소 분석기(Nori)&lt;/li&gt;
          &lt;li&gt;웹/앱 로그&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;아키텍쳐
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://www.dropbox.com/s/1jpa38uk5qyvmho/2019-03-26%2019.28.17.jpg?raw=1&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;스트리밍 데이터(24시간 발생하는 웹, 고객 상담) ⇒ 카프카&lt;/li&gt;
      &lt;li&gt;GA 데이터 ⇒ Batch로 logstash&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;카프카 사용 이유
    &lt;ul&gt;
      &lt;li&gt;데이터가 많고, 다른 곳에서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;카드사라 고객 상담 데이터 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;탈퇴&lt;/code&gt;라는 단어나 &lt;code class=&quot;highlighter-rouge&quot;&gt;카드론&lt;/code&gt;은 민감 ⇒ 이 단어가 나오면 해당 부서에 Push ⇒ 대응(카드론은 수익에 연결된 단어)&lt;/li&gt;
  &lt;li&gt;프로젝트 이슈
    &lt;ul&gt;
      &lt;li&gt;사용자 쿼리 기록해야 함 ⇒ 금융감독원 감사&lt;/li&gt;
      &lt;li&gt;6.5.1부터 UserID를 남길 수 있음&lt;/li&gt;
      &lt;li&gt;xpack.security.audit.enabled; true&lt;/li&gt;
      &lt;li&gt;xpack.security.audit.outputs: logfile&lt;/li&gt;
      &lt;li&gt;통신 노드도 남음 ⇒ 제외할 ID를 설정해야함
        &lt;ul&gt;
          &lt;li&gt;kibana, 다른 id&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Audit 활용 사례
    &lt;ul&gt;
      &lt;li&gt;건수 확인 (curl)&lt;/li&gt;
      &lt;li&gt;조회(페이징)
        &lt;ul&gt;
          &lt;li&gt;주의 사항 : 엘라스틱은 기본적으로 10000건까지만 반환함. 설정 필요
            &lt;ul&gt;
              &lt;li&gt;max_result_window를 설정하고 조회한 후, 해제(null) ⇒ 해제 안하면 부담이 될 수 있음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개인정보 비식별화
    &lt;ul&gt;
      &lt;li&gt;비정형 데이터 특정상 개인정보의 식별범위 모호&lt;/li&gt;
      &lt;li&gt;처음엔 할 수 없다고 했는데, 생각해보니 몇 패턴이 있음
        &lt;ul&gt;
          &lt;li&gt;고객 상담을 전문으로 하는 분들은 단어 선택을 또박 또박하게 함 ⇒ 음성 분석 파일을 분석하니 ~~ 회원님 ~~님이라고 정확하게 발음하는 것을 확인함 ⇒ 로직 처리&lt;/li&gt;
          &lt;li&gt;카드 번호, 주민번호 : 연속되는 숫자 체크&lt;/li&gt;
          &lt;li&gt;치환 : 주소&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ruby Filter(str.rb) 작성 후, str.conf(logstash 적용)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빅데이터 에코시스템 연계
    &lt;ul&gt;
      &lt;li&gt;Elasticsearch → Hadoop
        &lt;ul&gt;
          &lt;li&gt;ES Hadoop 사용&lt;/li&gt;
          &lt;li&gt;일별을 index로 지정&lt;/li&gt;
          &lt;li&gt;N번 실행시 중복 방지하도록 overwriting table&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Hadoop → Elasticsearch&lt;/li&gt;
      &lt;li&gt;명사 별도 적재 사례
        &lt;ul&gt;
          &lt;li&gt;적재된 한글 문장 데이터 중 명사만 별도 field로 적재 필요&lt;/li&gt;
          &lt;li&gt;이유 : Nori 형태소 분석 결과를 타 빅데이터 시스템에서 활용
            &lt;ul&gt;
              &lt;li&gt;REST Call이 힘드니 하둡에 적재&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;아이디어1 : 인덱스 데이터는 날짜별로 쌓임&lt;/li&gt;
          &lt;li&gt;아이디어2 : logstash를 통해 reindex가 가능&lt;/li&gt;
          &lt;li&gt;아이디어3 : Cron 형태의 배치가 가능&lt;/li&gt;
          &lt;li&gt;INDEX 조회시 source와 토큰을 동시 조회한 후, 동일 INDEX에 source와 토큰 업데이트!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;소스도 올라와있음!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka를-활용한-rabbitmq-로그-처리&quot;&gt;Kafka를 활용한 RabbitMQ 로그 처리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;카카오, 정원빈님&lt;/li&gt;
  &lt;li&gt;RabbitMQ
    &lt;ul&gt;
      &lt;li&gt;erlang으로 구현된 AMQP 메시지 브로커&lt;/li&gt;
      &lt;li&gt;Advanced Message Queue Protocol&lt;/li&gt;
      &lt;li&gt;AMQP
        &lt;ul&gt;
          &lt;li&gt;퍼블리셔가 Exchange → 큐에 전달(메세지를 저장하는 저장소) → Consumer에서 push/pull 방식으로 가져감&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Exchange, queue가 VHOST 논리 단위로 생성&lt;/li&gt;
      &lt;li&gt;퍼블리셔가 제대로 보냈는지, 컨슈머가 제대로 받았는지 확인할 수도 있음&lt;/li&gt;
      &lt;li&gt;TCP 연결 체크하는 로직&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RabbitMQ 모니터링
    &lt;ul&gt;
      &lt;li&gt;Server resource
        &lt;ul&gt;
          &lt;li&gt;메모리를 모니터링&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RabbitMQ LOG&lt;/li&gt;
      &lt;li&gt;AMQP OPERATION&lt;/li&gt;
      &lt;li&gt;밑에 2개를 카프카를 사용함&lt;/li&gt;
      &lt;li&gt;Kafka + Elastic Search로 로그 처리 시스템을 개발&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rabbit MQ에서 Filebeat/Worker에서 → APP Topic, AMQP Topic을 카프카로 전송 → Elastic Search로 저장 → Kibana
    &lt;ul&gt;
      &lt;li&gt;토픽 중 특정 단어가 포함되었거나 AMQP 중 확인하고 싶은 오퍼레이션을 파싱, 구별해서 관리자에게 알람이 가도록 구성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RabbitMQ? Kafka?
    &lt;ul&gt;
      &lt;li&gt;둘다 메세지 브로커
        &lt;ul&gt;
          &lt;li&gt;RabbitMQ도 멀티컨슈머가 가능하긴 한데, 추가될 때마다 큐를 추가적으로 생성해야 함
            &lt;ul&gt;
              &lt;li&gt;Exchange는 큐의 메세지만큼 복사해서 전달&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Kafka는 Consumer를 추가하면 그냥 추가하면 끝
            &lt;ul&gt;
              &lt;li&gt;하나의 동일한 메세지를 여러개의 컨슈머가 동시에 할 수 있어서 기능 확장이 용이함&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;메시지 관점에서 상세 비교
        &lt;ul&gt;
          &lt;li&gt;RabbitMQ는 큐 기반이고 메모리에 저장됨
            &lt;ul&gt;
              &lt;li&gt;Consumer가 메세지 수신시 즉시 삭제&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Kafka는 로그 기반이고 디스크에 저장
            &lt;ul&gt;
              &lt;li&gt;리텐션 설정하면 그 기간동안 상시 보관&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;메세지 처리 방식도 다름
        &lt;ul&gt;
          &lt;li&gt;RabbitMQ는 발송 확인 / 수신 확인 가능
            &lt;ul&gt;
              &lt;li&gt;Prefetch Count : Consumer에 이슈가 있을 때(제대로 수신하지 못할 떄) 다른 consumer나 다시 전송하도록 하는 설정&lt;/li&gt;
              &lt;li&gt;메모리 사용률이 높을 때 차단&lt;/li&gt;
              &lt;li&gt;Exchange를 통해 특정 큐에 라우팅 가능&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Kafka는 발송 확인 가능 / 수신 확인 불가능
            &lt;ul&gt;
              &lt;li&gt;Prefetch나 메모리 사용률 높을때 차단하는 설정 없음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RabbitMQ는 똑똑하지만 조금 느린 브로커, Kafka는 게으르지만 매우 효율적인 브로커&lt;/li&gt;
  &lt;li&gt;서비스에 따라 적당한 것이 따로 있다고 생각함
    &lt;ul&gt;
      &lt;li&gt;동시에 모두 사용도 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RabbitMQ는 제이피모건에서 많이 사용함&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka-streams--interactive-queries&quot;&gt;Kafka Streams : Interactive Queries&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4ykqy84awjik760/2019-03-26%2020.38.05.jpg?raw=1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache Software Foundation, 이동진님&lt;/li&gt;
  &lt;li&gt;Kafka Topic에 저장된 내용을 Microservice에서 참조하고 싶은데, 어떻게 해야 하나요?
    &lt;ul&gt;
      &lt;li&gt