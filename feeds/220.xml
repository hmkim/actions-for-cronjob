<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 김준형 on Medium]]></title>
        <description><![CDATA[Stories by 김준형 on Medium]]></description>
        <link>https://medium.com/@ghilbut?source=rss-8482dec25ee1------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*f6gUd9VJ5Gc3FVQISG5KJg@2x.jpeg</url>
            <title>Stories by 김준형 on Medium</title>
            <link>https://medium.com/@ghilbut?source=rss-8482dec25ee1------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 14:51:46 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@ghilbut" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[EBS가 많이 아파 — “EBS 경제대기획 빚 3부작”]]></title>
            <link>https://medium.com/@ghilbut/ebs%EA%B0%80-%EB%A7%8E%EC%9D%B4-%EC%95%84%ED%8C%8C-ebs-%EA%B2%BD%EC%A0%9C%EB%8C%80%EA%B8%B0%ED%9A%8D-%EB%B9%9A-3%EB%B6%80%EC%9E%91-6ddb8a45e4d?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/6ddb8a45e4d</guid>
            <category><![CDATA[빚]]></category>
            <category><![CDATA[ebs]]></category>
            <category><![CDATA[경제]]></category>
            <category><![CDATA[다큐프라임]]></category>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Sat, 02 Mar 2019 07:34:20 GMT</pubDate>
            <atom:updated>2019-03-02T07:34:20.818Z</atom:updated>
            <content:encoded><![CDATA[<h3>EBS가 이상해 — “EBS 경제대기획 빚 3부작”</h3><p>나는 과거에 EBS 다큐프라임 <strong>자본주의 5부작</strong>을 보고 감동했었다. 몇 번을 다시 보았고, 주변 사람들에게도 금융에 대해 공부를 시작하려 한다면 꼭 한번은 보라고 추천을 하고 있다. 이 기회에 아래 링크를 걸어본다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0LYMTsj_eqc%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0LYMTsj_eqc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0LYMTsj_eqc%2Fhqdefault.jpg&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/9e81b411660c93ea71219ca91e5951a6/href">https://medium.com/media/9e81b411660c93ea71219ca91e5951a6/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FJswklI5vrBk%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DJswklI5vrBk&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FJswklI5vrBk%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/a6baec548cad47a8219b4ae8be7ad27b/href">https://medium.com/media/a6baec548cad47a8219b4ae8be7ad27b/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FIu-w6STAz64%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DIu-w6STAz64&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FIu-w6STAz64%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/abd7ce6fe54c69dabaf33dbc71b0892d/href">https://medium.com/media/abd7ce6fe54c69dabaf33dbc71b0892d/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FLaGYPiGXynU%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DLaGYPiGXynU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FLaGYPiGXynU%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/9b5f681aed1064578af3e77aa6ff71e1/href">https://medium.com/media/9b5f681aed1064578af3e77aa6ff71e1/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F-E9nCQbHRPM%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-E9nCQbHRPM&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F-E9nCQbHRPM%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/ef838fb74107407c53d9b8603f09abcc/href">https://medium.com/media/ef838fb74107407c53d9b8603f09abcc/href</a></iframe><p>오늘 오전 EBS 다큐프라임에서 2018년 12월 3일 ~ 5일 <strong>경제대기획 빚 3부작</strong>을 방영했다는 것을 알게되어 찾아보게 되었다. 내용은 정말 어이가 없어서 말을 잇지 못하게 만들었다. 개인적으로 가장 문제가 되는 부분 딱 2개만 말하겠다.</p><p>먼저, 1부에서 자신과 부인 명의로 각각 300채씩 총 600채의 부동산을 전세로 갭투자한 투자자를 인터뷰한다. 나레이션에서 “빚을 100% 활용하는 사업가입니다.&quot;라고 소개하고 있다. EBS는 이를 통해 레버러지를 말하고자 한 것 같은데, 번지수를 정말 잘못 찾았다. 레버러지라는 것은 대출에 수반되는 위험과 대출을 기반으로 얻게 되는 이익 사이의 상관 관계에서 헷징할 수 있는 적정선을 찾아 투자하는 것이다. 즉, 위험을 어떻게 상쇄할 수 있는지가 빠지면 이건 투자가 아니라 투기가 되는 것이다.</p><p>현재 가계부채와 맞물려 갭투자와 깡통전세의 위험에 대해서는 10여년 전부터 부동산하락론자들이 끈임없이 말해온 부분이 있다. 물론, 그 주장에도 과장이 있다고 보지만 주지의 사실은 경제는 크고 작은 순환 싸이클이 있어서 집값이 끝없이 상승할 수 없다는 것이다. 단순하게만 생각해봐도 임대사업을 통해 대출 이자를 감당할 수 없으면 사업이 유지될 수 없다. 사업자는 보유 부동산에 대해 각종 세금을 내야한다. 집에 문제가 생기면 유지보수도 해줘야 한다. 전세금 상승으로 2년마다 상승분을 받는 것 이외에 수입이 없다. 그런데, 전세금은 월세와 달리 무이자 차입금이므로 전액 채무로 분류해야 한다. 즉, 집값 상승으로 자산 가치만 상승 했을 뿐 현금 흐름이 없는 사업이 된다. 게다가 집값이 상승할수록 부채도 늘어난다(전세를 올리니까). 살얼음판 위에 600 가구의 운명이 올라타 있는 것이다. 그런데 인터뷰이는<strong> “정부에게도 좋은 일을 하는거고요. 세입자에게도 좋은 일을 하는 겁니다.”</strong>라고 말하고 있다. 그리고 EBS는 이 주장을 여과없이 내보낸다.</p><p>만약 이 사업가가 없었다면 어떤 현상이 발생할까? 어짜피 이 사업가가 없어도 600채는 공급이 된다. 왜냐하면, 이미 건설사가 건축한 것을 구입했지 이 사람이 시행사가 되서 계획에 없던 아파트 600호를 공급한게 아니기 때문이다. 그럼, 시장에는 600채의 아파트가 매물로 나와 있을 것이고, 현재 그곳에 전세로 살고 있는 사람들은 매입 또는 전세를 찾고 있었을 것이다. 우리가 알다시피 공급망이 길어지고 복잡해질수록 판매가는 공급가보다 더욱 비싸진다. 이 사업가가 자신이 구입한 비용보다 싸게 주택을 공급한게 아닌 이상 공급자와 실수요자 사이에서 보이지 않는 손에 의해 조정되었어야 할 가격을 교란하여 차익을 얻은 것이다. 게다가 현재 그 리스크는 본인이 아닌 세입자들이 고스란히 지고 있다. 왜냐고? 집값 하락하면 이 임대사업가는 그냥 집을 던져서 경매에 넘어가게 내버려두면 대부분의 채무가 변제된다. 하지만, 세입자들은 전세자금의 상당부분 또는 전부를 날릴 수도 있다. 이런 사람들 때문에 정부는 집값 잡기 힘들고 서민들은 자기 집을 구입 못하는 것인데, 마치 자신이 부동산 시장에서 유동성을 공급하는 사람인양 생색을 내고 있다. 진짜 유동성 공급자라면, 전세 세입자들은 리스크가 없고 집값 변동에 대한 리스크는 사업자가 떠안아야만 한다. 그러나 전세 갭투자는 정반대이다. 월세 임대사업자는 사업이지만, 전세 갭투자 임대사업자는 투기꾼인 이유가 여기에 있다.</p><p>둘째, 3부 후반부에서 착한 대출의 한 가능성으로 집을 자기자본 30%와 대출 70%로 구입했을 때, 집값 하락 및 상승에 대해서 채무자와 채권자가 리스크와 이익을 같은 비율로 공유하는 방식을 소개한다. 경제에 ㄱ도 모르는 소리를 하고 있다. 이게 투자지 어떻게 대출이 되는가? 대출은 개인의 신용에 따라 돈의 사용처를 묻지 않고 필요한 액수를 빌려주는 것이다. 그것으로 갭투자를 하던지 사업을 하던지 휴가를 가던지 물건을 사던지 묻지 않으니까 신용을 평가해서 일정한 이자를 받는 것이다. 리스크와 이익을 공유하는 것은 투자이다. 그리고 투자자들은 신용이 아닌 사업을 평가해서 투자한다. 투자금을 받은 사업자의 투자를 감시하고 견제할 수 있다. 일반적으로 주식을 매입하여 주주의 권리를 행사하는 것이 이런 경우이다. 투자와 대출도 구분을 못하면서 빚에 대한 다큐멘터리를 만들어 방영했다. 게다가 계속 출연하고 있는 세 명의 경제학 교수는 이 내용에 동의한 것인가?</p><p>EBS의 시청률과 유투브에서의 조회수 등을 보면 많이 보지도 않는데 호들갑이라고 생각할 수도 있을 것이다. 하지만, EBS가 우리 사회에서 갖는 공신력을 보면 이번 기획은 정말 위험하고 잘못되었다고 생각한다.</p><p>나는 주변에서 대출에 고통 받은 사람들을 알고 있다. 사실 이 고통은 대출 때문이 아니라 사회 안전망이 없기 때문에 위험한 대출을 선택할 수 밖에 없었던 안타까운 사연들이다. 이것은 국가와 사회의 책임이다. 그러나 사치와 게으름에 빠져 대출에 고통 받는 사람들 또한 알고 있다. 이것은 온전하게 그들의 책임이다. 재미있게도 게으름과 안일함, 자기 제어의 부재로 빚의 늪에 빠져 파산 및 회생 신청으로 빚을 모두 탕감 받은 뒤에 장사로 돈벌어 현금 부자가 된 사람들도 알고 있다. 이들은 여전히 신용이 없어서 신용카드를 못만든다. 하지만, 한강이 보이는 큰 아파트에서 살고 있다. 이들이 탕감 받은 빚은 누군가 받았어야 할 돈이다. 누군가는 정당하게 받아야할 돈을 받지 못했는데, 빚을 갚지 않은 사람들은 현금 부자로 살고 있다.</p><p>자본주의는 태초부터 빚으로 움직인다. 빚이 없으면 경제가 성장할 수 없다. 이것은 EBS 자본주의 5부작에서 충분히 설명했다. 그리고 그 빚을 건전하게 조율하기 위해 신용이라는 개념을 사용한다. 만약, EBS가 제정신으로 빚이라는 주제의 기획을 만들었다면, 레버러지와 헷징에 대한 객관적이고 정확한 설명을 했어야 한다.</p><p>내가 빚 3부작을 보며 느낀 늬앙스는 현재 금융 시스템의 대출이 전체적으로 약자를 먹이 삼고 있으므로 대출 받아 고통 받는 사람들이 무조건 피해자라는 것과 빚내서 부자가 되라는 두 가지였다. 완전히 잘못된 신호를 국민들에게 보내고 있다. 학자금 대출 등과 같은 부분은 사회 안전망이 필요한 것이지 대출이 나쁜 것이 아니다. 대출로 고통 받는 사람들 중에는 욕심이나 허영 때문에 스스로 대가를 치고 있는 사람들도 많다. 빚을 잘 활용하면 더 많은 돈을 벌 수 있다. 그러나 항상 거기에는 리스크가 수반된다. 돈을 잃을 수도 있는 것이다. 빚으로 돈을 얼마나 벌 수 있고 잘못 되었을 때 얼마나 손해를 볼 수 있는지를 가리키는게 레버러지이다. 그리고 핵심 투자가 잘못되더라도 손해를 보지 않거나 손해를 최소화 하는 것이 헷징이다. 빚을 이용한 투자에서 이 두 가지를 제대로 설명하지는 않으면서 투기꾼을 레버러지를 이용한 사업가로 소개하고, 현재의 대출 방식을 손해를 보지 않으려는 이기적인 사업으로, 투자라는 개념을 착한 대출로 둔갑시켰다. 정말 EBS에게 대단히 실망했다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FBuTr1PluoQk%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DBuTr1PluoQk&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FBuTr1PluoQk%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/c99006ff7793ec2ea559deb494368bb6/href">https://medium.com/media/c99006ff7793ec2ea559deb494368bb6/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F2FTri1oQ_ww%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D2FTri1oQ_ww&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F2FTri1oQ_ww%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/b7711c32960b35668d364f8f18bcbc23/href">https://medium.com/media/b7711c32960b35668d364f8f18bcbc23/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fql0JwUxouok%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dql0JwUxouok&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fql0JwUxouok%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/b5414cfaebea2e7e142093a033190e27/href">https://medium.com/media/b5414cfaebea2e7e142093a033190e27/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Faxa39FhDX_Q%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Daxa39FhDX_Q&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Faxa39FhDX_Q%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/59d6c82b70ba0eb4d85518563fa818c8/href">https://medium.com/media/59d6c82b70ba0eb4d85518563fa818c8/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F--CXWZW1Hjs%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D--CXWZW1Hjs&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F--CXWZW1Hjs%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/f6e7b2eae37f0df090a9e72ffa9bf99e/href">https://medium.com/media/f6e7b2eae37f0df090a9e72ffa9bf99e/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FfB79OBWKgbA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfB79OBWKgbA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfB79OBWKgbA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/9ad6ea68501abaa1abe473ecc6b51469/href">https://medium.com/media/9ad6ea68501abaa1abe473ecc6b51469/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fie5N4rTazEc%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Die5N4rTazEc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fie5N4rTazEc%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/72c8c7171a8d9b19e4808a31d818ea9e/href">https://medium.com/media/72c8c7171a8d9b19e4808a31d818ea9e/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FwNos6TjKmBQ%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DwNos6TjKmBQ&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FwNos6TjKmBQ%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/ebf51902acc641e57a619676a846caac/href">https://medium.com/media/ebf51902acc641e57a619676a846caac/href</a></iframe><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FiPs-Rb8pIj4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DiPs-Rb8pIj4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FiPs-Rb8pIj4%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/41b119f74c6794ad1eaa3d00ec2651bf/href">https://medium.com/media/41b119f74c6794ad1eaa3d00ec2651bf/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6ddb8a45e4d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 생각하는 도서 출판의 미래]]></title>
            <link>https://medium.com/@ghilbut/%EB%82%B4%EA%B0%80-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EB%8F%84%EC%84%9C-%EC%B6%9C%ED%8C%90%EC%9D%98-%EB%AF%B8%EB%9E%98-8cb20626d39d?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/8cb20626d39d</guid>
            <category><![CDATA[publishing]]></category>
            <category><![CDATA[books]]></category>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Sat, 29 Dec 2018 04:09:31 GMT</pubDate>
            <atom:updated>2018-12-29T04:09:31.829Z</atom:updated>
            <content:encoded><![CDATA[<p>오늘 페이스북에서 출판사에 계시는 지인분께서 아래의 글에 대해 출판의 어려움에 대해 페북에 올리신 글을 읽고 댓글로 메세지를 남기려다가 별도의 글을 쓰는 것이 나을 것 같아서 오랜만에 미디엄을 켜게 되었다. 반년 넘게 글을 안 썼던 듯 하여 개인적인 반성도 하게 된다.</p><p><a href="https://news.naver.com/main/read.nhn?mode=LSD&amp;mid=sec&amp;sid1=103&amp;oid=028&amp;aid=0002437629&amp;fbclid=IwAR2ROrpBGQOvomQGVBhIRDk8dOYhhQpGinyV0GO19XVZKipWac3H5ziVyWU">기업형 중고서점 확장은 출판 침몰의 길</a></p><p>글에 앞서 나는 집의 한쪽 벽에 3.5m의 책장을 책으로 채우고 살며 음악은 아직 MP3로만 구매해서 듣는 매우 올드한 컨텐츠 소비 스타일을 가지고 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2JRBNZPZ-0yxA3hfGSq12w.jpeg" /><figcaption>2년전 이사 직후 찍은 책장, 지금은 책이 더 늘어났다.</figcaption></figure><p>대형 서점의 무차별적 확장과 할인은 동네 서점을 침략하고 출판사들의 고혈을 짜고 있는듯 하다. 개인적으로는 종이 책을 참 좋아하는데 안타까운 일이다. 하지만, 출판사의 미래는 더더욱 어두워져 가는 듯 하다. 왜 그렇게 생각하는지 내가 기대하는 출판의 미래는 어떠한지 적어보겠다.</p><blockquote>컨텐츠는 소유에서 공유로…</blockquote><p>이미 오래 전부터 미디어 업계 분석에서 나온 말이고 이제는 완전히 정설이 되었다. 우리는 동영상을 더 이상 비디오 테이프나 CD, DVD를 통해서 소비하지 않는다. Netflix나 YouTube, Pooq, 옥수수TV와 같은 스트리밍 서비스를 통해 소비한다. 나는 아직도 음악을 MP3로 듣고 그래서 내 아이폰의 음악은 아직도 3~5년 이전에 머물러 있다. 하지만, 주변 사람들은 모두 멜론과 같은 스트리밍 서비스에서 음악을 소비한다. 많은 지인들은 인기 가요 탑100을 듣는다. 스마트폰 앱들도 옛날에는 전부 제값을 주고 다운로드 받았다면, 지금은 무료로 다운로드 받은 후 유료 구독을 하거나 앱내 구매를 통해 필요한 부분들을 구매해야 한다. 소유의 취향은 점점 덕후들의 영역이 되어 가는지도 모른다.</p><p>소유에서 공유로 이행되는 것이 비단 미디어 뿐만은 아니다. 공유 경제라는 이름으로 카풀이 산업이 된지 오래고 배달 시스템이 일원화되고 이제는 공유하우스에 대기업의 손길이 닿고 있다. 위워크와 같은 공유 오피스는 너무 흔하다. 그리고 이제 공유 부엌까지 스타트업들의 격전지로 부상하고 있다.</p><p>컨텐츠는 가장 공유되기 쉬운 재료임에도 책만은 상당히 그 자리를 굳건히 지켜온 것으로 보인다. 몇 년 전까지만 해도 전자책은 충분히 성숙하지 못했었고 읽을 수 있는 컨텐츠도 한정적이었기에 몇몇 얼리어답터들의 기호품에 가까웠다. 하지만, 이제는 소셜미디어에서 많은 사람들이 전자책 단말기를 고르기 위해 고심하는 글들을 볼 수 있다. 이제 종이 책의 종말이 피부로 다가오고 있다고 생각한다.</p><blockquote>종이 책은 비싸다. 매우…</blockquote><p>나는 점점 종이책이 비싸지고 있다고 생각한다. 그것이 소유보다 공유를 부추기고 있다고 본다. 옛날부터 지적되어 온 책이 외국에 비해 지나치게 고급스럽다라는 것을 말하려는 것이 아니다. 소유할 가치는 낮은데 읽어야 하는 책들이 많다는 것과 깊이 없이 흥미 위주인 책이 너무 많다는 것이다. 나도 중고책방에 책을 많이 팔아보았다. 그 책들 중 대부분은 최근에 산 책들이고 오래 전에 산 책들은 사실 잘 팔지 않는다. 왜 그런 것일까? 나는 개발자이기에 개발 서적과 비개발 서적 두 가지를 보도록 하겠다.</p><p>먼저, 개발 서적 측면에서 나는 도서 구입의 절박함이 옛날 만큼 없다. 내가 2004년에 샀던 윈도우 기술 서적을 나는 2010년까지도 썼다. 데이터베이스 서적은 더 일찍 사서 지금도 유효하다. 그런데 내가 다루는 최신 기술들은 버전업이 너무 빠르다. 심지어 내가 Github에 작업 결과를 정리해서 자동화 한 것 조차도 많은 것들이 6개월만에 버전이 크게 바뀌었다. 그걸 위해 책을 샀을 때 한 컴포넌트는 책에서 다루는 버전이 1.4였고, 내가 다루어야 하는 시스템은 5.2였으며, 지금 다루는 버전은 6.5이다. 게다가 1.4와 5.2는 하위 호환성이 없었다. 내가 알기로 기술서적을 아무리 스피디하게 써도 1쇄 출판까지 1년쯤 걸리는 것으로 알고 있다. 프로그래밍 세계에서 주류 기술로 급부산하는 스타 오픈소스들은 버전 수명이 6개월 정도이고, 성숙해지기 시작하면 성숙해 질때까지 하위호환성을 버리고 급격하게 발전해 나가기도 한다. 영원히 98 버전을 고수하다 화석이되어 죽을 것 같던 C++도 최근 몇 년 사이에 3번의 버전 발표가 있었고 완전히 새로운 언어가 되었다. 출판이 쉽게 따라잡을 수 없는 속도이다. 결국 최근에서 와서는 기술서적을 구입하는 것이 매우 비싸졌다. 하지만, 그래도 나는 아직 구입한다. 그 안에 단 한 줄의 단서라도 얻기 위해서… 그러나, 인터넷이 더 유효하다. 영어를 보기 싫은 것만 빼면 책보다 인터넷이 내 고민을 효과적으로 해결해준다.</p><p>비개발책은 더더욱 비싸다고 느껴진다. 사실 최근에 나온 책들 중 스테디셀러의 가치가 있다고 생각되는 책이 얼마나 있을까? 책들은 점점 트렌디하게 소비되는 내용들로 채워지고 있지만, 껍질은 더 고급스러워지고 가격은 점점 비싸진다. 지금 읽을 때는 공감하지만 다음에 읽을 때는 고루하거나 당시에 선동 당했던 것일 수도 있다. 기술 서적은 내 밥줄에 관련된거니까 대가를 치를 결심이 서지만, 일반 서적은 글쎄다. 최근에 인문서적을 10여권 샀는데 절반이 실패다. 이것들을 왜 종이 인쇄물로 소장해야 하는지 이유를 알 수 없었다. 중고로 팔 때는 20~25% 정도 가격을 받은 것 같다. 그 중 한두권은 끝까지 읽지도 않았다. 내가 가장 애정하고 여러 번 읽는 책들은 2010년 이전에 산 책들이다. 그곳에는 깊이와 통찰이 있었다.</p><blockquote>이제 지식은 YouTube를 통해 전달된다.</blockquote><p>과거 동영상은 즐거움을 위한 도구였다. 그러나 이제는 지식도 모두 동영상으로 전달되고 있다. 나는 중학생과 초등학생인 두 조카를 두고 있는데, 이 또래는 지식이 필요하면 인터넷을 검색하는 것이 아니고 유투브를 검색한다고 한다. 나도 좀 시도해 보았는데, 글자는 내가 원하는 것을 찾아서 빠르게 읽을 수 있는데 동영상은 말해줄 때까지 기다려야 해서 너무 답답했다. 하지만, 그건 내가 늙어서 그런 것이고… 어쨌든 책의 목적의 절반을 차지했던 지식의 전달조차도 이제 다른 형태의 미디어들에게 내어주고 있는 것이다. 책의 미래가 깜깜하다고 느낄 법 하다.</p><blockquote>출판 시장은 공룡과 같이 사멸할 것인가?</blockquote><p>나는 출판과 출판사에 대해 두 가지 변화를 기대한다. 나의 기대가 주류가 될지 시도조차 되지 않을지는 잘 모른다. 왜냐하면 나는 그냥 나의 기대와 바램을 적는거니까…</p><p>일단, 출판이 완전히 사라지지는 않을 것이다. 종이 책이 주는 감촉은 매우 매력적이다. 사람이 오감을 가지고 있다는 것은 각각의 것들에서 쾌감을 얻을 수 있다는 의미이기도 하다. 종이책을 만질 때의 촉각으로 전해오는 그것은 마음의 안정을 준다. 나는 킨들 오아시스를 가지고 있지만, 그곳에서는 질감에 대한 종이만큼의 만족을 찾을 수 없다. 우리는 스트리밍 시대에 살지만 아직도 음악 CD를 사는 사람들이 있다. 어떤 아티스트는 USB 앨범도 발표했다. 영화는 블루레이로 소장하는 사람들이 있다. 흥행한 영화들은 디렉터스 컷과 인터뷰 등을 포함한 블루레이를 꾸준히 발매한다. 이제 소장이라는 것은 일반적인 컨텐츠 소비의 영역에서 특별한 수집의 영역으로 변화되었다. 종이 책은 사라지지 않는다. 하지만, 더 적게 출판되고, 더 많이 비싸지고, 더 소장가치 높은 내용들만 종이에 인쇄되게 될 것이다.</p><p>그렇다면 출판사들은 모두 망하게 될 것인가? 우리는 그 힌트를 마블과 디즈니에서 엿볼 수 있다고 본다. 마블은 아이언맨을 찍을 때 젖먹던 힘까지 그 한편에 모두 쏟아 부었다고 알고 있다. 그러나 아이언맨의 흥행과 더불어 마블의 매력적인 코믹스 컨텐츠들은 불사조와 같이 되살아났으며, 재정 문제로 갈갈이 찢겨 팔려나갔던 캐릭터들의 저작권들도 속속들이 회수되고 있다. 동화의 왕국 디즈니도 망해가고 있던 시절이 있었다. 그러나 그들의 스토리텔링 실력과 픽사의 기술이 합쳐지면서 부활의 계기를 얻게 되었고, 이제는 컨텐츠계의 공룡 중 하나가 되었다.</p><p>출판사는 세가지 중 하나를 선택해야 할 것이다. 컨텐츠 플랫폼이 되거나 컨텐츠 큐레이터가 되거나… 망하거나… 컨텐츠 플랫폼은 사실 대형 서점에 어울린다. 그리고 이미 그들은 전자책을 무기로 견고한 진입장벽을 쌓고 있다. 컨텐츠 큐레이터도 쉽지는 않다. 텍스트를 어떻게 빠르게 유통할 수 있는 매력적인 박스에 담아야 하는지는 아직 정답이 없다. 하지만, 종이책을 끌어안고 종이책만으로 살아남으려 한다면 분명한 것은 죽는다는 것이다. 확실히 죽거나 살 길을 찾거나…</p><blockquote>출판사가 변화할 수 있는 세 가지 옵션</blockquote><p>첫째, 작지만 특별한 플랫폼이 되자. 그러면 작은 앱을 만들고 그 앱에서 구독 모델 전략을 구사할 수 있다. 여기서 장벽은 홍보일 것이다. 그 앱에서 특별한 가치를 얻을 수 있다는 인식을 일반에게 줄 수 없다면 앱이 다운로드 되지도 않을테니까… 이것이 대형서점에게 이기기 힘들고 대형 서점에 입점해야 하는 이유가 될 수 있겠지만… 이 장벽을 이겨낼 수 있다면 살아남을 가능성이 높다. 사실 이미 많이 구사되기 시작하기도 했고… 이 전략을 가장 잘 구사하는 것이 개인적으로는 <a href="https://www.safaribooksonline.com/">사파리북스</a>라고 본다. 과거에 회사를 통해 1년 구독을 접했는데 양질의 방대한 기술 서적들을 접할 수 있었다.</p><p>둘째, 텍스트 컨텐츠 시장의 큐레이터가 되자. 책으로 대표되어 커버되던 많은 텍스트 컨텐츠 영역들 중 어떤 것들은 더 이상 텍스트로 소비되지 않을 수 있다. 유투브 동영상이나 오디오북 등과 같이… 어떤 것들은 종이를 떠나 블로그나 위키 등에서의 텍스트로만 소비되기 시작할 수도 있다. 어떤 것들은 전자책으로 이행될 수 있다. 무엇이 되었든지 출판사의 기본은 텍스트로 표현되는 컨텐츠를 규격화하여 일반에게 판매한다는 점이라고 생각한다. 좋은 컨텐츠를 발국하여 그 컨텐츠가 가장 잘 팔릴 수 있는 형태를 제안하고 제작하여 각각의 컨텐츠들이 가장 효과적으로 팔릴 수 있는 방식에 대한 전문가가 될 수 있다. 컨텐츠에서 발생하는 수익을 함께 나누어 가짐으로써 윈윈하는 모델이 될 수 있을 것이다.</p><p>셋째, 수집가들을 위한 고급 출판사가 되자. 내가 2018년에 산 책 중 소장에 대한 강한 욕구로 구매한 것들이 있다. 비싸고 고급스러운 고전들… 어쩌면 소형 출판의 미래는 소장가들을 만족시켜줄 특화 시장으로 파고들어 가는 것일 수도 있다. 동영상이 스트리밍이라는 일반 시장과 블루레이라는 수집 시장으로 양분 되었듯이… 텍스트 컨텐츠가 앞으로 어떤 식으로 일반에게 소비되는지와 상관 없이 수집가들의 취향을 저격하는 소장 중심의 고급 출판 시장은 계속 형성되어 있을 것이다. 그리고 내게는 이 소비가 가장 매력적이다.</p><p>대형서점들의 횡포와 대중의 저작권에 대한 미개함에 출판사들이 어려운 것은 알겠다. 그런데 흥미로운 점은 과거에 비디오와 MP3 불법복제 시장도 똑같이 심각했다. 비디오 대여점 때문에 판매 매출이 급감했다. 그런데, 스트리밍 시장이 이 모든 문제를 완전히 박살내 버렸다. 지금 대중은 편리함과 저렴하게 느껴지는 가격 속에서 정해진 값을 내고 컨텐츠를 소비한다. 물론, 그 안에도 불합리가 있겠지만, 적어도 범국민적으로 저작권을 침해하던 시대는 사라졌다. 출판사도 지금 이런 불합리를 성토할 시간이 없을 수 있다. 대중을 계몽하고 대형서점과 대립하는 것보다 컨텐츠 소비 방식을 변화시키는 방법이 더 쉽고 빠를 수 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8cb20626d39d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[좋은 말씀 감사합니다.]]></title>
            <link>https://medium.com/@ghilbut/%EC%A2%8B%EC%9D%80-%EB%A7%90%EC%94%80-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-54ed8401ce9e?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/54ed8401ce9e</guid>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Sun, 15 Jul 2018 13:53:45 GMT</pubDate>
            <atom:updated>2018-07-16T00:50:14.308Z</atom:updated>
            <content:encoded><![CDATA[<p>좋은 말씀 감사합니다.</p><p>다만, 오해가 있으신 것 같아 주신 말씀에 의견을 드립니다.</p><p>먼저, 개발자 레벨에 대해 언급한 부분은 같은 결과물을 기준으로 이야기 하는 것입니다. 같은 소스 리포지토리를 공유하는 팀이 될 수도 있고 같은 오픈소스 프로젝트를 공유하는 커뮤니티의 구성원들일 수도 있습니다. 해당 내용은 저와 지인들의 직간접적인 경험을 일반화 한 것입니다. 가장 뛰어난 프로그래머가 결과물을 만들었을 때, 어떤 사람들은 그 결과물을 자기 것으로 흡수해서 공동의 결과물으로 발전시켜 나갑니다. 또 다른 부류는 결과물이 대단한 것은 알겠는데 자신이 그것을 온전히 이해하거나 함께 수정하고 발전시켜 나가기를 포기합니다. 마지막 부류는 결과물에 대해 왜 저렇게 복잡하고 이상하게 짰느냐며 불평을 합니다. 하지만, 자기만의 방식 대로 똑같은 일을 해내지는 못하죠. 경태님은 제가 말한 대상을 개발자 풀 전반으로 너무 넓게 확대하셔서 오해를 하신 것 같습니다.</p><p>두번째로 본문은 “개발자의 코딩 능력”이 아니라 “개발자의 개발 능력&quot;에 관한 글입니다. 이 글은 서두에 밝혔듯이 OKKY의 아래와 같은 내용에 대한 반박글일 뿐 개발에 대한 가이드라인이 아닙니다.</p><blockquote>제 생각에 아직 전산 전공 교과가 운영체제, 알고리즘, 컴파일러 이론, C언어 등의 주제로 구성되어 있는 가장 큰 이유는, 그런 이론이 확립되고 교재가 만들어지고, 또 이를 가르치는 교수들이 전산을 배운 것은 지금 보다 훨씬 개발 분야가 덜 분화되고 세분화가 되기 이전이었기 때문인 것 같습니다.</blockquote><blockquote>중략…</blockquote><blockquote>그래서 이 분야에서, 만일 20년전과 지금 ‘기본’으로 가르치는 내용이 동일하다면 이는 결국 가르치는 쪽이 기술 발전의 흐름을 따라잡지 못했다는 반증이라고 생각합니다.</blockquote><p>그리고 말씀하신 수학 부분에 대해서는 “<a href="https://medium.com/@ghilbut/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EC%9E%98%ED%95%98%EB%8A%94-5%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95-1-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-ebf3a3f79ee2">프로그래밍을 잘하는 5가지 방법 — 1. 자료구조와 알고리즘 공부하기</a>”라는 글에서 아래와 같이 입장을 밝혔습니다.</p><blockquote>그리고 나를 비롯한 몇몇 사람들은 수학 공부까지 다시 하고 있다. 그러면서 안타까워 한다. 지금 알고 있는 것을 그 때도 알았더라면…</blockquote><p>저는 CS 기초가 개발에 중요한 밑거름인 만큼 수학이 CS 기초의 중요한 토대가 된다는 것을 부인하지 않습니다.</p><p>마지막으로 경태님의 “<strong>실질적으로 domain-specific 한 task를 잘 처리하는 사람들이 알고리즘을 잘 다루는 사람보다 대부분 높은 연봉과 더 좋은 인적가치를 가집니다.</strong>”라는 말씀에 저는 절대로 동의하지 않습니다. 저 명제가 통하는 집단은 기술적인 도전 난이도가 평범한 비니지스 집단에서 뿐입니다. 그런 곳에서는 라이브러리를 활용한 도메인 구현과 오픈소스 시스템의 활용만으로 비지니스를 커버할 수 있기 때문이죠.</p><p>보다 복잡한 비지니스적 요구와 높은 기술적 도전을 요구하는 회사에서는 매니저와 TL, 개발자라는 역할 분담을 통해 도메인에 대한 정리와 기술적인 구현에 대한 롤을 구분하고 있습니다. 그리고 이런 곳에서는 개발을 잘하는 개발자가 높은 가치를 인정 받습니다. 평범한 수준의 개발자가 활용하는 오픈 소스는 모두 이런 높은 수준의 개발자들의 결과물을 쓰는 것이죠. 구글이나 페이스북, 넷플릭스가 그런 경우이며, 극단적으로 애플의 다수의 개발자들은 자신이 개발하는 모듈이 제품 출시 때까지 아이폰에 들어가는지 아이패드에 들어가는지 모르기도 합니다(애플의 블루투스 라이브러리 개발자로부터 들은 이야기 입니다).</p><p>구글이나 페이스북, 아마존에서 일하고 싶거나 그에 준하는 개발 수준의 회사들(스타트업 포함)에서 일하고 싶다면, 도메인 처리를 잘하는 사람이 CS 기초에 강한 사람보다 더 높은 대우를 받는 다거나 대학교 학부의 CS 커리큘럼이 구시대적이니 프레임워크나 시스템 실무 활용이 더 중요하다는 허무맹랑한 이야기에 휘둘리면 안된다는 것이 본문을 쓴 가장 큰 취지입니다.</p><p>구글에서는 코드 커밋 후 이미 예측한 수준의 퍼포먼스 테스트를 통과하지 못하면 라이브 코드에 병합되지 못한다고 합니다. 얼마전 한 한국분은 아마존의 PS 문제 풀이 때 CPU 예측 분기 파이프라인 최적화를 위해 for문을 어떻게 개선해야 하는지에 대해 질문을 받았다고 합니다. 도메인 이해를 잘하는 사람이 더 우대 받는 것은 기본적으로 실력이 뒷바침 되는 사람들에게 해당하는 내용이지, 비지니스 요구사항을 기술적으로 커버 못하는 개발자 수준에서 개발 잘 못해도 도메인 이해력만 뛰어나면 더 대우받는 다는 식의 사고는 30~40대에 개발 떠나서 매니저 하겠다는 한국식 사고방식의 변명이라고 생각합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=54ed8401ce9e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[저는 토스에서 퇴사한 상태이며, 비밀유지서약을 하였기에 언급하신 질문에 대답해 드릴 수 없습니다.]]></title>
            <link>https://medium.com/@ghilbut/%EC%A0%80%EB%8A%94-%ED%86%A0%EC%8A%A4%EC%97%90%EC%84%9C-%ED%87%B4%EC%82%AC%ED%95%9C-%EC%83%81%ED%83%9C%EC%9D%B4%EB%A9%B0-%EB%B9%84%EB%B0%80%EC%9C%A0%EC%A7%80%EC%84%9C%EC%95%BD%EC%9D%84-%ED%95%98%EC%98%80%EA%B8%B0%EC%97%90-%EC%96%B8%EA%B8%89%ED%95%98%EC%8B%A0-%EC%A7%88%EB%AC%B8%EC%97%90-%EB%8C%80%EB%8B%B5%ED%95%B4-%EB%93%9C%EB%A6%B4-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4-ccace3559ea7?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/ccace3559ea7</guid>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Thu, 21 Jun 2018 00:52:16 GMT</pubDate>
            <atom:updated>2018-06-21T00:52:16.213Z</atom:updated>
            <content:encoded><![CDATA[<p>저는 토스에서 퇴사한 상태이며, 비밀유지서약을 하였기에 언급하신 질문에 대답해 드릴 수 없습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ccace3559ea7" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DC/OS 기반의 인프라 구축에 대한 노하우를 공유합니다.]]></title>
            <link>https://medium.com/@ghilbut/dc-os-%EA%B8%B0%EB%B0%98%EC%9D%98-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B5%AC%EC%B6%95%EC%97%90-%EB%8C%80%ED%95%9C-%EB%85%B8%ED%95%98%EC%9A%B0%EB%A5%BC-%EA%B3%B5%EC%9C%A0%ED%95%A9%EB%8B%88%EB%8B%A4-507e0b828ca5?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/507e0b828ca5</guid>
            <category><![CDATA[devops]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[dcos]]></category>
            <category><![CDATA[mesos]]></category>
            <category><![CDATA[ansible]]></category>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Wed, 23 May 2018 08:22:08 GMT</pubDate>
            <atom:updated>2018-05-23T08:22:51.909Z</atom:updated>
            <content:encoded><![CDATA[<ul><li><a href="https://github.com/ghilbut/aws-dcos">ghilbut/aws-dcos</a></li><li><a href="https://slides.com/ghilbut/automatic-data-center-supported-by-dcos">Automatic Data-Center supported by DC/OS by ghilbut</a></li></ul><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F2w-yKOk0TEk%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D2w-yKOk0TEk&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F2w-yKOk0TEk%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/48aa4dd2fb1d1bdbc869a403dc51738e/href">https://medium.com/media/48aa4dd2fb1d1bdbc869a403dc51738e/href</a></iframe><p>비바리퍼블리카(이하 토스)에서의 경험을 뒤로 하고 다음 스텝을 고민하며 쉬는 동안, DC/OS에 대한 경험과 연초에 있었던 Meetup에서의 발표에 힘입어 과분한 관심을 받고 있습니다.</p><p>하지만, 저는 코드를 작성하는 개발자 커리어를 지향하고 있고 DC/OS를 처음 시작하게 된 이유는 현재의 기술이 보장하는 범위에서 서버개발자로서 누려야 할 편의사항을 최대한 누리고자 하는 욕구가 있었기 때문입니다. 그리고 앞으로 저는 이러한 시스템 구축을 위해 다른 분들이 과분한 조건으로 저를 찾아주시는 것 보다는 제가 어디에 합류 하더라도 제가 공유한 것 이상으로 편리한 서버 개발환경이 이미 존재하기를 기대합니다. 그래서 지난 1년반의 경험을 Ansible 기반의 IaC로 공유하려고 합니다.</p><p>토스에서는 IDC라는 좀 더 제약된 환경 하에서 시스템을 만들었으나 지금 공유하는 결과물은 AWS에서 VPC로 격리된 네트워크 환경을 만들어 구성했습니다. 그리고 Meetup에서 다 하지 못한 이야기들을 담으려고 노력하고 있습니다. 제한된 시간과 기술적 한계로 만족스럽게 완성을 한 것은 아니지만, 누구라도 AWS에서 HA를 염두에 둔 DC/OS Production 환경을 구축할 수 있는 공통 기반은 최대한 Ansible로 자동화 되도록 노력하였습니다. 그리고 사용법에 대해서는 현재 github의 wiki 페이지에서 작업 중입니다.</p><p>Ansible 결과물에 대해서는 AWS에서 수십번씩 VPC와 EC2들을 지우고 다시 설치하기를 반복하면서 최대한 다듬었고, wiki 문서는 아직도 많이 부실해 보입니다. 하지만, 당분간 AWS 비용 문제로 github wiki의 부족한 문서를 보충하는 것 이상의 작업은 더 이상 힘들 것 같습니다.</p><p>혹시, 결과물의 업데이트를 기대하시어 AWS 비용에 대해 다양한 방법으로 도움을 주신다면 사양하지 않고 감사히 받아 기대에 부응하는데 사용하겠습니다.</p><p>부디 저의 부족한 피조물이 누군가에게 조금이라도 도움이 될 수 있기를 기대합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=507e0b828ca5" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[안녕하세요. 제가 미디엄을 확인하는데 소홀하여 지금에서야 답글을 달게 되었습니다. 죄송합니다.]]></title>
            <link>https://medium.com/@ghilbut/%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94-%EC%A0%9C%EA%B0%80-%EB%AF%B8%EB%94%94%EC%97%84%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94%EB%8D%B0-%EC%86%8C%ED%99%80%ED%95%98%EC%97%AC-%EC%A7%80%EA%B8%88%EC%97%90%EC%84%9C%EC%95%BC-%EB%8B%B5%EA%B8%80%EC%9D%84-%EB%8B%AC%EA%B2%8C-%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-6018a4ed54f8?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/6018a4ed54f8</guid>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Wed, 23 May 2018 07:21:27 GMT</pubDate>
            <atom:updated>2018-05-23T07:22:05.450Z</atom:updated>
            <content:encoded><![CDATA[<p>안녕하세요. 제가 미디엄을 확인하는데 소홀하여 지금에서야 답글을 달게 되었습니다. 죄송합니다.</p><p>책을 추천하라고 한다면 저는 ‘Introduction to Algorithm’을 추천할 수 밖에 없을 것 같습니다. 하지만, 학습법을 추천하라고 한다면 알고리즘 문제 싸이트에서 특정 알고리즘 문제들만 중점적으로 풀면서 부족하다고 느껴지는 부분을 ‘Introduction to Algorithm’로 채우는 것에 대해 권할 것 같습니다. 저도 CS를 전공하지 않았던 사람으로써 ‘자료구조와 알고리즘&#39;을 학부 커리큘럼 배우듯이 학습하는 방법을 수차례 시도했으나 잘 되지 않았습니다. 그래서 지금 시점에서는 차라리 문제를 통해 더 취약한 부분을 파악하고 동기 부여를 받아서 이론을 좀 더 파고들 수 있는 동력으로 삼는 것이 효과적이라고 생각하고 있습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6018a4ed54f8" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[1~2년 정도 꾸준히 하실 생각이시라면 두권 모두 보시기를 권하고 싶습니다.]]></title>
            <link>https://medium.com/@ghilbut/1-2%EB%85%84-%EC%A0%95%EB%8F%84-%EA%BE%B8%EC%A4%80%ED%9E%88-%ED%95%98%EC%8B%A4-%EC%83%9D%EA%B0%81%EC%9D%B4%EC%8B%9C%EB%9D%BC%EB%A9%B4-%EB%91%90%EA%B6%8C-%EB%AA%A8%EB%91%90-%EB%B3%B4%EC%8B%9C%EA%B8%B0%EB%A5%BC-%EA%B6%8C%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%8A%B5%EB%8B%88%EB%8B%A4-222f29544bd5?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/222f29544bd5</guid>
            <category><![CDATA[알고리즘문제해결전략]]></category>
            <category><![CDATA[introduction-to-algorithm]]></category>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Thu, 15 Mar 2018 02:46:18 GMT</pubDate>
            <atom:updated>2018-03-15T02:46:18.111Z</atom:updated>
            <content:encoded><![CDATA[<p>1~2년 정도 꾸준히 하실 생각이시라면 두권 모두 보시기를 권하고 싶습니다. ‘알고리즘 문제 해결 전략&#39;의 풀이를 깊이 있게 이해하고 응용하려면 ‘Introduction to algorithm’이 도움이 되실겁니다. 그리고, 요즘 난이도 있는 인터뷰들(전화, 오프라인 모두)은 CS 기초에 대해 많이 물어보기 때문에 ‘Introduction to algorithm’에 나온 자료구조의 정의를 충분히 숙지하거나 복잡도 계산에 익숙해 지는 것이 도움이 됩니다. 저도 ‘Introduction to algorithm’을 제대로 다 보지는 못했지만, 문제를 풀면서 특정 자료구조나 알고리즘에 대해 이해가 부족하다고 느껴지면 책을 열어보고는 합니다. 다만, 책값이 부담되신다면 ‘Introduction to algorithm’ 구매를 조금 미루셔도 될 듯 합니다. 풀이에 필요한 내용은 인터넷을 통해서도 어느 수준까지는 공부하는데 무리가 없으니까요.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=222f29544bd5" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[제가 LG전자에서 했던 활동은 구종만씨의 ‘알고리즘 문제 해결 전략 1,2’를 스터디 했었고 별도로 ‘Introduction to Algorithm’ 내용 중 가장 기본이 되는…]]></title>
            <link>https://medium.com/@ghilbut/%EC%A0%9C%EA%B0%80-lg%EC%A0%84%EC%9E%90%EC%97%90%EC%84%9C-%ED%96%88%EB%8D%98-%ED%99%9C%EB%8F%99%EC%9D%80-%EA%B5%AC%EC%A2%85%EB%A7%8C%EC%94%A8%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%A0%84%EB%9E%B5-1-2%EB%A5%BC-%EC%8A%A4%ED%84%B0%EB%94%94-%ED%96%88%EC%97%88%EA%B3%A0-%EB%B3%84%EB%8F%84%EB%A1%9C-introduction-to-algorithm-%EB%82%B4%EC%9A%A9-%EC%A4%91-%EA%B0%80%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%9D%B4-%EB%90%98%EB%8A%94-48a2709a03b8?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/48a2709a03b8</guid>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Thu, 28 Dec 2017 06:15:24 GMT</pubDate>
            <atom:updated>2017-12-28T06:15:24.091Z</atom:updated>
            <content:encoded><![CDATA[<p>제가 LG전자에서 했던 활동은 구종만씨의 ‘알고리즘 문제 해결 전략 1,2’를 스터디 했었고 별도로 ‘Introduction to Algorithm’ 내용 중 가장 기본이 되는 파트들을 여러번 읽었습니다. 또한 꾸준히 LeetCode.com의 문제들을 풀며 반년 정도 매주 화요일 ‘별다방손코딩’의 퍼실리테이터를 하였습니다. LG전자 퇴사 후에는 따로 공부할 시간이 없어서 꾸준히는 못하지만, 연휴나 업무 공백 시기에 틈틈히 LeetCode.com과 HackerRank.com 등의 문제를 풀며 부족한 부분을 체크하고 필요한 자료구조와 알고리즘을 다시 한 번씩 복습하고 있습니다.</p><p>개인적으로 온라인 문제 풀이와 함께 별다방손코딩과 같은 오프라인 모임에 참석하시거나 직접 운영해 보시는 것을 추천하고 싶습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=48a2709a03b8" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[프로그래밍을 잘하는 5가지 방법 — 1. 자료구조와 알고리즘 공부하기]]></title>
            <link>https://medium.com/@ghilbut/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%EC%9E%98%ED%95%98%EB%8A%94-5%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95-1-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-ebf3a3f79ee2?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/ebf3a3f79ee2</guid>
            <category><![CDATA[data-structures]]></category>
            <category><![CDATA[algorithms]]></category>
            <category><![CDATA[programmer]]></category>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Sun, 03 Dec 2017 05:31:03 GMT</pubDate>
            <atom:updated>2017-12-03T13:46:22.195Z</atom:updated>
            <content:encoded><![CDATA[<p><strong>1. 자료구조와 알고리즘 공부하기</strong><br>2. 가독성 신경쓰기<br>3. 공식 문서 및 메뉴얼 꼭 확인하기<br>4. 편집증적인 검증과 자동화<br>5. 똑똑한 사람들 따라하기</p><p>지난 6월 ‘<strong>자료구조와 알고리즘</strong>’에 대한 의견을 작성한 적이 있었고, 그와 함께 프로그래밍을 잘하는 방법에 대한 문의를 지속적으로 받아왔다. 나도 수준 높은 프로그래머는 아니라서 설득력이 있을지는 잘 모르겠지만, 최소한 그 동안의 멘토링 노하우를 바탕으로 노비스(Novice)가 좋은 주니어(Junior)가 되기 위해 갖추어야 할 자세에 대해서는 자신있게 작성할 수 있을 것 같아 글을 적는다.</p><p>앞으로 작성할 내용들은 특정 기술 등에 대한 것이 아니라 좀 더 형이상학적인 생각하는 방향과 자세에 대한 부분들에 대해 언급하려고 한다. 지금과 같이 기술이 급변하는 시대일수록 기본이 중요하다고 본다.</p><p>상기 순서는 중요성과 종속성에 바탕을 두고 정하였다.</p><h3>자료구조와 알고리즘</h3><p>우리는 인터넷에서 아직도 <strong>‘자료구조와 알고리즘’</strong>이 중요한가에 대해서 해묵은 논쟁을 벌이고 있다. 나는 이 문제가 왜 논쟁의 여지가 없는지에 대해 프로그래밍적인 측면에서만 이야기 하겠다.</p><p>우리가 프로그래밍을 처음 접하게 되면, C언어 기준으로 아래와 같은 코드를 처음 접하게 된다.</p><blockquote>#include &lt;stdio.h&gt;</blockquote><blockquote>int main(int argc, char ** argv) {<br> printf(“Hello, World!”);<br> return 0;<br>}</blockquote><p>일반적으로는 기본 문법을 설명하기 위해 많이 사용하는 코드지만, 사실 저 곳에는 프로그래밍의 근본적인 내용이 대부분 포함되어 있다.</p><h4>시스템과 서비스에서의 데이터와 로직</h4><p>컴퓨터가 하는 일은 데이터를 읽어서 처리한 후 다시 저장하는 것이다. CPU는 레지스트리와 메모리의 값을 읽어서 처리한 후 다시 레지스트리와 메모리에 돌려 보낸다. 메모리는 데이터를 하드디스크 등과 같은 I/O 디바이스에서 복사한다. 이 때, 어떤 데이터를 어느 주소에 저장할지 판단하고 결정하는 과정을 거치게 된다. 그리고 하드디스크에는 파일시스템이라는 것이 있다. 파일시스템에서는 정보가 어떻게 저장되고 업데이트 되고 삭제되었는지에 대한 실제 데이터와 메타데이터가 파편화 되어 존재하며, 외부 요청에 따라 필요한 데이터를 조합해서 응답으로 돌려준다.</p><p>좀 더 멀리 가보자. 우리가 웹 어플리케이션을 만든다고 하면, 데이터는 데이터베이스에 저장되고, Spring이나 Django 같은 웹프레임워크들은 이 데이터를 읽어서 사용자의 브라우저에 페이지를 보여주거나 RESTful API의 결과로 돌려주게 된다. 검색 시스템이나 메세지 큐 시스템 같은 특정 목적의 시스템들 역시 데이터를 저장하고 가공하고 읽어들이는 행동을 벗어나지 못한다.</p><p>마이크로 서비스 아키텍처의 일도 다르지 않다. 데이터를 포함한 요청을 받고, 그 데이터를 가공해서 다른 서비스들에 데이터와 함께 요청을 보낸다. 다른 서비스들이 응답으로 보낸 데이터를 받아서 가공한 뒤 내가 받은 요청에 적절한 데이터를 응답으로 보낸다.</p><h4>코드에서의 데이터와 로직</h4><p>처음에는 너무 미시적인 세계를 이야기 했고, 그 다음은 너무 큰 서비스를 말했으니 이번에는 코드 레벨로 돌아와보자.</p><p>먼저, 구문을 기준으로 보자. 우리는 먼저 변수를 선언하고, 변수에 값을 넣는다. 어떨 때는 상수를 선언하기도 한다. 그리고 if 또는 for 문을 통하여 변수의 값을 변경하여 다른 변수에 저장하거나 원래의 변수값을 변경한다.</p><p>함수 레벨에서 추가되는 것은 입력 변수가 있다는 것과 특정한 값을 리턴(return)해야 한다는 것 뿐이다. OOP에서 객체는 데이터를 멤버변수라는 개념으로 유지할 수 있고, 멤버함수는 입력변수와 구문에 선언한 변수 이외에 멤버변수도 접근하고 가공할 수 있다.</p><p>우리가 코드를 작성할 때, 고려해야할 것들은 너무나도 많지만 그 중에서도 가장 먼저 해야 할 일은 입력 데이터의 형태를 파악하고 출력(저장/리턴) 데이터의 형태를 파악하거나 결정해야 한다. 그리고 그 다음으로 입력→출력 사이에 어떤 가공(로직)이 필요한지를 결정한다. 마지막으로 로직을 수행하기에 가장 적합한 데이터 구조가 어떤 것인지 결정해야 한다. 그리고 이렇게 파악되거나 결정된 내용을 바탕으로 실제 구현을 하게 되는 것이다.</p><p>그리고 우리가 말하는 프로그래밍이라는 것은 이런 활동이 프랙탈(fractal)처럼 확장되어 가는 것이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*noZM8UNXPIu25znetBRBVA@2x.jpeg" /><figcaption>Data and Logic Fractal</figcaption></figure><p><strong>‘자료구조와 알고리즘’</strong> 논쟁을 보면 중요하지 않다는 측의 주장 중 가장 많은 논거가 <em>“이미 대부분의 자료구조와 알고리즘은 라이브러리로 구현이 다 되어 있으니 잘 쓰기만 하면 된다.”</em>라는 것이다. 하지만, 개인적으로 PS(Problem Solving) 트레이닝을 하면서 가장 많이 생각하는 것은 O(n) — 시간 복잡도(Time Complexity)와 공간 복잡도(Space Complexity) — 에 대한 것이다. 아무리 이미 주요 자료구조와 알고리즘이 라이브러리로 존재한다고 하더라도 내가 작성한 for문이 사용자의 HTTP 요청에 1시간만에 응답할 수 있다거나 1GB의데이터를 처리하는데 100GB의 메모리가 필요하다면, 우리는 그 솔루션을 사용할 수 없다.</p><p>과거 삼성전자에 다닐적에 그에 대한 사례를 들은 적이 있다. 디지털 카메라를 만드는 사업부가 아직 삼성전자에 소속되어 있을 무렵, 연구소에서 획기적으로 화질을 개선하는 알고리즘을 개발하여 사업부에 이관했다. 그런데, 사업부 개발자들이 받고서 엄청나게 욕을 했다. 이유는 화질은 획기적으로 개선되었지만 사진 한 장에 대한 프로세싱이 1분이 넘게 걸린다는 것이었다. 사진 한 장 찍고 1분을 기다려야 하는 카메라라면 누가 구입하려고 할까?</p><p><strong>‘자료구조와 알고리즘’</strong>에 대한 이해를 등한시 하는 것은 적절한 동작 시간 안에 적절한 메모리로 데이터를 처리해야 하는 실무 세계에서 시간과 공간이라는 두 가지 개념을 무시하겠다는 것과 같다. 왜? 요즘엔 CPU도 빵빵하고 메모리도 크고, HDD는 엄청나게 싸니까… 물론, 시스템을 돌에서 물짜듯이 쥐어짜면서 구성할 필요는 없다. 시스템 대비 우리의 몸값도 싼 것은 아니다. 하지만, 비지니스의 성장에 따라 성능이 급격히 나빠지는 처리 로직을 짜는 것이 자원이 풍부하다고 해서 용서 받을 수 있는 일은 아니다. 최적 코드는 아니더라도 허용 가능한 성능을 갖는 코드를 짜는 능력은 매우 중요하다. 짧은 시간 안에 더 나은 코드를 짜는 것은 자료구조와 알고리즘을 얼마나 잘 이해하는가와 연결된다.</p><p><strong>‘수학’</strong>이라는 과목은 사칙연산을 가르치기도 하지만, 본질적으로는 논리적 사고를 함양하는 것을 목적으로 한다. <strong>‘자료구조와 알고리즘’</strong> 역시 자료구조와 알고리즘을 직접 짜는 방법을 알려주려는 것이 가장 중요한 목적이 아니다. <strong>‘자료구조와 알고리즘’</strong>은 시간 복잡도와 공간 복잡도를 계산하는 방법들을 알려주고 가장 많이 쓰이는 자료구조와 알고리즘을 통해 복잡도를 계산하는 방법을 이해시키는 것이다. 결국, 시간이 지나면 디테일은 사라지고 남는 지식은 각각의 자료구조와 알고리즘이 어떤 용도로 쓰이며 얼만큼의 시간 및 공간 복잡도를 갖는지 정도지만, 이를 통해 코드의 O(n)을 계산하는 능력을 얻게 된다. 이 지식과 능력을 바탕으로 어떤 자료구조를 선택해야 하는지와 나의 구현이 실제로 제품에 적용하기에 적합한지를 판단할 수 있는 것이다.</p><p>비전공자인 내가 <strong>‘자료구조와 알고리즘’</strong>을 처음 접한 것은 ‘C로 구현한 알고리즘’ 책을 구입했던 대학 2년 때 이다. 하지만, 당시에는 읽어도 도통 무슨 소리인지도 모르겠거니와 8비트 마이크로 프로세서나 꽁냥거리던 환경에서는 필요성도 전혀 느끼지 못했다. 그 뒤에도 종종 책을 떠들어 보기는 했지만, 그냥 잡다한 지식을 쌓는다는 의미 외에는 없었고, 그마저도 언제나 O(n)이라는 표현 앞에서 무릎을 꿇었다. 사실 시작부터 O(n) 거리는데 뒤에 있는 자료구조나 알고리즘이랑 뭔 상관인지도 몰랐다. 그 뒤에 수년간 윈도우 프로그래밍을 할 때도 나에게 <strong>‘자료구조와 알고리즘’</strong>은 프로그래머에게 별로 안 중요한 것이었다. 진정한 내용은 1도 모르면서 책들을 샀다는 뿌듯함만 안겨주는 그런 것이었다.</p><p>내 생각에 변화가 생긴 것은 2013년 LG전자에서 하광성과 함께 <a href="https://www.slideshare.net/kwangswei/ss-30510586"><strong>‘손코딩뇌컴파일눈디버깅’</strong></a>을 시작하고, 후에 <a href="https://www.facebook.com/groups/startbucks.coding/"><strong>‘별다방손코딩’</strong></a><strong> </strong>퍼실리테이터를 하면서부터였다. 이제서야 O(n)으로 시작하는 내용과 책을 관통하는 의미에 대해서 알 수 있을 것 같다. 주변의 많은 사람들이 <strong>‘손코딩뇌컴파일눈디버깅’</strong>의 영향을 받고 바쁜 와중에도 틈틈히 PS 트레이닝에 매진하고 있다. 그리고 나를 비롯한 몇몇 사람들은 수학 공부까지 다시 하고 있다. 그러면서 안타까워 한다. 지금 알고 있는 것을 그 때도 알았더라면…</p><p>이 글을 읽는 독자 중 <strong>‘자료구조와 알고리즘’</strong>을 공부하고 싶다면, 다음과 같은 방법들을 추천하고 싶다.</p><p>1. <strong>‘자료구조와 알고리즘’</strong> 책을 공부한다.<br>2. <a href="https://www.topcoder.com/"><strong>‘Top Coder’</strong></a>나 <a href="https://leetcode.com/"><strong>‘LeetCode’</strong></a>와 같은 트레닝 싸이트에서 꾸준히 문제를 푼다.<br>3. <a href="https://www.facebook.com/groups/startbucks.coding/"><strong>‘별다방손코딩’</strong></a> 모임에 나간다.</p><p>이제 마무리를 하겠다.</p><p>프로그래밍을 잘하기 위한 1단계는 코드가 하는 본질적인 일은 어딘가에서 받은 데이터를 가공해서 또 다른 데이터를 만들어 어딘가에 전달한다는 것을 이해하는 것이다. 데이터는 일종의 경계선이며 로직은 두 데이터를 잇는 파이프이다. 어떤 데이터들을 기준으로 코드의 경계를 나눌 것인가, 각 단계에 어떤 형태와 내용의 데이터가 존재해야 하는가와 데이터 사이의 형태 변환을 어떻게 가장 효율적으로 할 수 있을 것인가에 대해 끊임없이 질문을 던지고 답을 찾는데 신경을 써야 한다. 이것은 코드의 구조화와 가독성에도 많은 영향을 준다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ebf3a3f79ee2" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[뒤늦게 읽어보았습니다.]]></title>
            <link>https://medium.com/@ghilbut/%EB%92%A4%EB%8A%A6%EA%B2%8C-%EC%9D%BD%EC%96%B4%EB%B3%B4%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4-5be0e2299003?source=rss-8482dec25ee1------2</link>
            <guid isPermaLink="false">https://medium.com/p/5be0e2299003</guid>
            <dc:creator><![CDATA[김준형]]></dc:creator>
            <pubDate>Tue, 19 Sep 2017 04:53:13 GMT</pubDate>
            <atom:updated>2017-09-19T04:53:13.584Z</atom:updated>
            <content:encoded><![CDATA[<p>뒤늦게 읽어보았습니다. 뭐라고 해야할 지 딱 맞는 문장이 지금 당장 떠오르지 않지만, 글을 읽고 가슴 속에서는 많은 감정들이 교차하고 있네요. 다시 한 번 태호님과 한 잔 하며 대화할 기회가 있기를 기대합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5be0e2299003" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>