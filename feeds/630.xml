<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Jesang Yoon on Medium]]></title>
        <description><![CDATA[Stories by Jesang Yoon on Medium]]></description>
        <link>https://medium.com/@yoonjs2?source=rss-a3946348a9cc------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*wVTybueS-RHfNJdGn68HFQ.jpeg</url>
            <title>Stories by Jesang Yoon on Medium</title>
            <link>https://medium.com/@yoonjs2?source=rss-a3946348a9cc------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 08:07:53 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@yoonjs2" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[In my experience of service operation, Memory leakage is inevitable.]]></title>
            <link>https://medium.com/@yoonjs2/in-my-experience-of-service-operation-memory-leakage-is-inevitable-be8d349d1b7?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/be8d349d1b7</guid>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Thu, 07 Mar 2019 02:48:14 GMT</pubDate>
            <atom:updated>2019-03-07T02:48:14.432Z</atom:updated>
            <content:encoded><![CDATA[<p>In my experience of service operation, Memory leakage is inevitable. It can be occur in any portion of code whether it is your code or their (framework) code. You may optimize easily when software is in small scale but as feature grows, its hard to optimize more and more. So It may Vue has memory leaks but It’s not a big deal when I keep split and maintain application in small separations and simple codes. If it is really problem, just commence clean reload of my application.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=be8d349d1b7" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[정우님, 안녕하세요]]></title>
            <link>https://medium.com/@yoonjs2/%EC%A0%95%EC%9A%B0%EB%8B%98-%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94-292b7d5343a7?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/292b7d5343a7</guid>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Tue, 29 Jan 2019 11:33:56 GMT</pubDate>
            <atom:updated>2019-01-29T11:33:56.094Z</atom:updated>
            <content:encoded><![CDATA[<p>정우님, 안녕하세요</p><p>HardBoiledSmith 페이지 Writer로 Invite 해 드렸습니다.</p><p>글 Publish 해 주시면 팀 블로그에 올려 드릴께요 :)</p><p>그동안 저희랑 같이 일하느라 고생 많으셨습니다.</p><p>다음에도 같이 일 할수 있게 되길 기원할께요 :)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=292b7d5343a7" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Software Testing — QA 자동화란 무엇인가?]]></title>
            <link>https://medium.com/hbsmith/software-testing-qa-%EC%9E%90%EB%8F%99%ED%99%94%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-ba1c1ceeeecf?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/ba1c1ceeeecf</guid>
            <category><![CDATA[software-testing]]></category>
            <category><![CDATA[automation-testing]]></category>
            <category><![CDATA[cypress]]></category>
            <category><![CDATA[selenium]]></category>
            <category><![CDATA[qa]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Fri, 25 Jan 2019 15:53:26 GMT</pubDate>
            <atom:updated>2019-01-25T15:53:26.925Z</atom:updated>
            <content:encoded><![CDATA[<h3>Software Testing — QA 자동화란 무엇인가?</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*Fh3UpPWwi7V5RYa-HZb2qA.jpeg" /><figcaption><a href="https://pixabay.com/en/software-testing-service-762486/">https://pixabay.com/en/software-testing-service-762486/</a></figcaption></figure><p>나는 S 전자라는 테스팅이 중요한 회사에서 커리어를 시작했다. S 전자는 가전제품부터 휴대폰까지 모든 전자제품을 만들고 전 세계에 판매를 하는 회사이다. 전자제품의 특성상 한번 판매를 하면 업데이트/업그레이드는 거의 불가능하기 때문에 제품을 출시하기 전에 철저하게 테스트를 하는것이 매우 중요했다. 이런 출시/배포 전에 테스트를 수행하여 최종 고객에게 제공되는 제품의 Quality를 확인 및 관리하는 작업을 QA (Quality Assurance)라고 부른다.</p><p><strong>대기업의 QA</strong></p><p>하드웨어 테스팅의 경우 물에 빠뜨려보거나 던져보거나 하는 내구성 테스트, 회로의 동작여부나 전자적인 결함을 보는 수많은 테스트를 수도없이 많이 진행했다. 테스트를 통과하지 못하면 다시 처음부터 설계를 해야 하는 경우도 있어서 개발일정이 종종 연기 되었던 걸로 기억한다. 수많은 테스팅중 일부는 사람이 진행하는 경우도 있었지만 많은 부분들이 자동화가 되었고 테스팅 Lab에선 로봇이 수십대의 휴대폰을 던지고 부수고 누르는 소리가 밤새도록 들렸었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Tadz-3MotmctlXGgJceI9A.jpeg" /><figcaption><a href="https://www.flickr.com/photos/christophd/4926548133">https://www.flickr.com/photos/christophd/4926548133</a></figcaption></figure><p>이에 비해 소프트웨어 테스팅은 원시적으로 진행되었다. 개발 조직에서 테스트 케이스를 작성하여 엑셀 시트로 검증 조직에 보내면 검증 조직은 내부 또는 테스트 협력사 들에게 테스트 케이스를 나눠주고 테스트가 끝나면 결과를 취합해서 개발 조직에 알려주는 식이었다. 테스트 수행은 테스트 전문가가 아닌 아르바이트로 고용된 사람들이 진행하였고 테스트 시트에 나온 체크리스트들을 기계적으로 수행하였다. 테스트 수행하는 분들이 이직이 심했기 때문에 문제로 지적된 내용에 대해서 자세히 문의하려고 하면 테스트 담당자가 교체되거나 이미 퇴사한 경우가 잦았다. 개발실 입장에선 버그를 어떻게 재현해야 하는지에 대해 정확히 알아야 버그를 잡기가 쉬운데 해당 버그를 발견한 사람이 없어져 버리니 정보가 제대로 남을리가 없었다. 이렇게 놓쳐버린 버그가 출시 직전에 발견되어 공장의 패키징 공정을 멈춘 일도 있었다.</p><p>이런 문제 때문에 테스팅 조직에선 소프트웨어 테스팅을 자동화 해야 한다는 의견이 많이 대두 되었고 테스팅 Lab에서 수많은 스마트폰을 서버에 직접 연결하고 테스트를 돌리는 시스템이 구축 되었다. 하루에도 수십, 수백, 수천번 이상 테스트 코드가 서버에서 스마트폰으로 전송 되었고 테스트가 스마트폰에서 돌아갔으며 테스트 결과들이 서버에 남자 심각했던 OS 버그들이 점점 줄어들기 시작했다. 줄어든 OS 버그는 출시일정에 맞추어 휴대폰의 안정성을 보장해 줬고 보장된 안정성은 품질에 대한 고객들의 인식을 높여 주었다. 그 높아진 인식은 매년 높은 판매율로 이어졌다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/225/1*_qiK96dfwFIjNevqLaIfaQ.jpeg" /><figcaption><a href="https://www.flickr.com/photos/adactio/7705323460">https://www.flickr.com/photos/adactio/7705323460</a></figcaption></figure><p>만일 피쳐폰 시절에 하던 것처럼 수많은 사람들이 매달려서 손으로 테스팅을 하던 시절처럼 스마트폰도 테스팅을 하고 있었다면, 피쳐폰보다 수백배 이상 기능이 많은 스마트폰은 출시할 만한 품질을 절대 보장할수가 없었을 것이다. (그 과도기의 희생양이 잊혀진 “바다&quot; 플랫폼 이라는건 또 다른 이야기…)</p><p><strong>QA의 딜레마</strong></p><p>스타트업을 시작하고 수많은 크고 작은 회사와 관계자 분들을 만났지만 QA에 대해서 알고 계시거나 조직에서 제대로 수행하고 있는 곳들은 비교적 적었다. 대부분의 회사가 급하게 수정하고 -&gt; 출시하고 -&gt; 문제가 터지면 고객에게 사과하는 패턴을 반복하고 있었다. 그나마 대표이사가 품질에 대해서 민감한 경우엔 기획자나 대표 스스로가 체크리스트를 작성해서 돌리고 있었다. 그러다가 서비스가 커지고 비용이 증가하고 경쟁사들이 늘어나는 것에 비례하여 체크리스트가 늘어나고 늘어난 체크리스트를 다 테스트 하는데 많은 시간이 소요 되었다. 모 고객사의 경우 출시전에 테스팅을 수행하는데 모든 회사 멤버가 하루 꼬박 매달려도 안끝나는 경우도 있었다. 테스트에서 문제가 발견되어 수정후 다시 테스트를 하게되면 테스트만 일주일을 반복하는 경우도 많았다. 반복된 테스트 작업은 인력들의 피로도 증가로 이어졌고 증가한 피로도 만큼 불만도 증가했다.</p><p>하지만 테스트를 자동화할 여력은 없었다. 기능개발하고 출시하는데에만 해도 모든 개발 역량을 쏟아도 부족한 회사들이 많았다. TDD, BDD 등 개발 단계에서부터 테스팅을 하는건 꿈과도 같은 이야기인 회사들이 많았다. 여력이 된다고 시도한 회사들도 있었지만 만들어놓은 걸 오랫동안 유지보수 하기가 어려워 결국 옛날 방식으로 돌아가는 일이 벌어졌다. 왜냐면 테스팅 코드 및 플랫폼 개발 때문에 리소스가 투입되는걸 경영진이나 매니저들이 공감하고 지원해주는게 어려웠다. 힘들여서 만들어 놨지만 경영진이나 매니저의 한마디로 또는 일정상의 이유로 테스팅은 우선순위에서 밀려났고 이는 그대로 품질 저하로 이어졌다. <strong>결국 품질을 챙기자니 일정이 늘어나고 일정을 챙기자니 품질을 희생하는 딜레마</strong>에 빠져 고통스럽게 업데이트를 이어 나가는 하루하루가 반복되고 있었다.</p><p>그럼 S전자는 어떨까? 전자는 OS 레벨에서의 테스트 자동화는 어느정도는 달성 하였지만 그 위에서 돌아가는 앱과 서비스에 대한 테스팅은 다시 원시적인 방법으로 하고 있었다. 기존에 OS 레벨의 테스팅 플랫폼은 OS 테스팅 전용으로 개발 및 운용되고 있어 앱과 서비스의 테스팅엔 적합하지 않았다. 또한 앱과 서비스는 변경이 잦고 인프라 자체의 테스팅 까지 포함해야 했기 때문에 기존에 디바이스를 대상으로 하던 방식과 다른 테스팅 기법을 요구하였다. 게다가 앱과 서비스는 전자 내에서 상대적으로 매출이 적은 조직이었기 때문에 테스팅에 대한 투자도 작을수밖에 없었다. 마지막으로 내가 경험했던건 인건비를 줄이기 위해서 인도에 아웃소싱을 줬던 것 이었다. 한국에서 비전문 인력이 하던일을 인도 사람들이 진행하는것 외에 달라진건 없었다.</p><p><strong>해결방안은 없는 것인가?</strong></p><p>결국 인하우스 개발 조직이 자동화된 테스팅을 전문적으로 진행한다는 것은 쉽지 않다는 경험적인 결론이 나온다. 그렇다면 어떻게 이 문제를 해결할수 있을까? QA 전문인력을 뽑을 것인가? 국내의 QA 시장은 테스트 자동화 보다는 저렴한 임금의 인력으로 많은 프로젝트를 수주하는데 포커싱이 되어 있다. 국내의 IT 시장을 키운 전통적인 SI 산업의 특성상 테스팅은 원청이 아닌 하청에게 저가로 일을 맡기는 구조이다. 따라서 을이 될수밖에 없는 테스팅 업체들은 저임금의 인력을 여럿 뽑아 테스트를 진행해 왔고 자동화를 위한 R&amp;D 투자는 힘든 상황이었다. 이는 자연스럽게 높은 수준의 QA 테스팅 전문 인력이 국내에 희귀하게 만드는 악순환을 만들어 낸다.</p><p>다른 나라는 어떨까? 미국의 경우 우리보다 IT 역사가 오래됐고, 분업과 전문화가 우리보다 조금 나은 편이다. 테스팅 자동화 도구도 여럿 나왔고 이를 평가하고 사용하는 전문적인 커뮤니티도 운영되고 있다. 전문 테스팅 인력도 여럿 존재하는 것으로 보인다.</p><ul><li><a href="https://www.joecolantonio.com/">Automation Testing Made Easy: Tools, Tips &amp; Training Awesomeness</a></li><li><a href="https://automationguild.com/">Event Info</a></li></ul><p>물론 작은 스타트업이나 아직도 알만한 미국 대기업 조차도 테스팅을 전문적으로 하는 조직은 없다는 이야기가 들려오지만 Microsoft SDET 같은 유명한 전문 테스팅 조직 사례는 다 미국에서 나온걸 생각해보면 우리보다는 많은 시도와 연구가 있었던건 확실한것 같다.</p><p><a href="https://docs.microsoft.com/en-us/azure/devops/learn/devops-at-microsoft/evolving-test-practices-microsoft">Evolving Test Practices at Microsoft - Azure DevOps</a></p><p>다시 국내로 돌아가서 이야기 하자면, 테스팅 전문 조직 구성/양성/운용 모두 어느정도 규모가 나오고 경영진의 의지가 확실한 기업이 아니고선 꿈꾸기 힘든 상황이다. 또한 검증된 전문 인력을 고용하는 것도 힘든 일이다. 그렇다면 해결책은 무엇일까?</p><p><strong>위임 그리고 전문화</strong></p><p>내부에서 해결책을 찾기 힘들다면 아웃소싱을 하는것이 한 방법일 것이다. 바로 QA 자동화를 전문적으로 제공하는 서비스를 이용하는 것이다. 이런 서비스엔 두가지 타입이 존재한다.</p><ol><li>셀프 서비스 타입</li></ol><p>이 타입은 테스팅 소프트웨어 또는 인프라를 제공하지만 테스트 자체는 스스로 작성해야 하는 타입이다. 대개 프로그래밍에 대한 지식을 요구하거나 프로그래밍이 익숙치 않은 사람들을 위해서 매크로 녹화기능을 제공하기도 한다. 테스트 주체가 컨트롤 할수 있는 부분은 많지만 직접 테스트를 개발, 관리 및 운용해야 하는 부담이 존재한다. 또한 도구가 원하는 테스트를 모두 지원하지 못할수도 있다.</p><ul><li><a href="https://ghostinspector.com/">Automated Website Testing and Monitoring - Ghost Inspector</a></li><li><a href="https://www.cypress.io/">JavaScript End to End Testing Framework | Cypress.io</a></li></ul><p>2. 컨시어지 타입</p><p>Concierge 라는 단어는 “대신 모든걸 알아서 해주다&quot; 라는 의미로 이 경우에 테스트 주체가 테스팅 업체에 의뢰를 하면 그 이후부터는 업체가 테스트 작성, 운영 그리고 보고서까지 알아서 제공하는 형태이다. 자동화와 Man-Power가 혼합된 형태로 운영되는 경우가 많으며 고객 입장에선 전문성이 없어도 자사 제품의 테스팅 의뢰가 가능하며, 사용에 많은 고민이나 품을 들이지 않아도 되는 장점이 있다. 하지만 테스트 주체가 직접 컨트롤 할수 있는 범위가 한정적이며 테스트가 새로 만들어지거나 기존의 것이 변경되어야 할때 업체의 사정에 따라 테스트가 늦어질수도 있다.</p><ul><li><a href="https://www.rainforestqa.com/">Rainforest QA: Bring QA Into The Era of Continuous Delivery</a></li><li><a href="https://hbsmith.io/">HBSmith - 인공지능 QA 자동화 서비스</a></li></ul><p>테스팅 조직이 있거나 테스팅 업무가 가능한 전담 개발자가 있다면 1의 타입을 선택할 것이고 그렇지 않다면 대개 2의 타입을 선택하는 것이 합리적인 방법일 것이다. 앞에서 설명한 고통을 겪는 고객들은 1의 타입과 2의 타입에서 주로 2를 선택하였다. 하지만 무엇보다 중요한건 테스팅을 하려는 경영진 또는 매니저의 의지일 것이다. 테스팅을 제대로 하려는 경영진일수록 제품의 퀄리티에 집중할 것이며, 그러한 팀이 경쟁사가 문제가 생겼을때에도 일정한 퀄리티를 제공함으로서 경쟁에 우위를 점할수 있을 것이다.</p><p>저희 HBSmith는 여러 기업들에 QA 자동화 서비스를 제공하고 있습니다. 아래 사이트에서 자세한 정보를 확인하세요 :)</p><p><a href="https://hbsmith.io/">HBSmith - 인공지능 QA 자동화 서비스</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ba1c1ceeeecf" width="1" height="1"><hr><p><a href="https://medium.com/hbsmith/software-testing-qa-%EC%9E%90%EB%8F%99%ED%99%94%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-ba1c1ceeeecf">Software Testing — QA 자동화란 무엇인가?</a> was originally published in <a href="https://medium.com/hbsmith">HardBoiledSmith Stories</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thanks. Very insightful article :)]]></title>
            <link>https://medium.com/@yoonjs2/thanks-very-insightful-article-a817d248a909?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/a817d248a909</guid>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Fri, 25 Jan 2019 06:09:32 GMT</pubDate>
            <atom:updated>2019-01-25T06:09:32.774Z</atom:updated>
            <content:encoded><![CDATA[<p>Thanks. Very insightful article :)</p><p>If you don’t mind, Can I translate your article into Korean and share onto my team blog? My company is providing test automation service in south korea. Your article should give a good insight to my customers about future of testing automation.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a817d248a909" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HBSmith는 왜 Vue.js로 옮겨탔는가?]]></title>
            <link>https://medium.com/hbsmith/hbsmith%EB%8A%94-%EC%99%9C-vue-js%EB%A1%9C-%EC%98%AE%EA%B2%A8%ED%83%94%EB%8A%94%EA%B0%80-4134aed0d3f8?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/4134aed0d3f8</guid>
            <category><![CDATA[google]]></category>
            <category><![CDATA[webpack]]></category>
            <category><![CDATA[hbsmith]]></category>
            <category><![CDATA[angularjs]]></category>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Sat, 15 Dec 2018 14:38:40 GMT</pubDate>
            <atom:updated>2019-01-13T05:22:35.764Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/610/1*P72C35MFynq_jvaSQCj3Rw.png" /><figcaption><a href="https://medium.com/dailyjs/how-to-migrate-from-angularjs-to-vue-4a1e9721bea8">https://medium.com/dailyjs/how-to-migrate-from-angularjs-to-vue-4a1e9721bea8</a></figcaption></figure><p>HBSmith는 2016년 부터 비교적 오래된 프레임워크인 angualr.js 1.x 버전을 이용하여 Frontend를 개발하고 고객에게 서비스를 제공해 왔다. 하지만 Google이 더이상 angular.js 1.x 버전을 활발하게 유지 보수하지 않고 있다. 그리고 angular 2 이후 버전은 1.x와 모든 면에서 거의 호환이 되지 않는 새로운 프레임워크였다. 이 때문에 가까운 미래엔 angular.js 1.x로 개발이 더이상 불가능할 상황이었다.</p><p><a href="https://angularjs.org/">AngularJS - Superheroic JavaScript MVW Framework</a></p><p>angular 1.x 버전은 grunt를 이용하여 build를 제공해 왔다. grunt는 minification, cache-breaker, image optimization등의 기능을 훌륭하게 제공해 왔다. 하지만 그새 gulp가 잠시 등장했다가 혜성처럼 사라져 버리고 그 자리를 webpack이 대세로 차지하게 되었다. webpack은 grunt와 완전히 다른 도구였기 때문에 다시 배워야 할 판이었다.</p><p>backend 세계가 보수적이라면 frontend 세계는 진보적이다. backend 기술은 최소 수년 이상 유지되며 하위호환을 신경쓰고 천천히 퍼져 나간다. frontend 기술은 매달 새로운 기술이 등장하며 한 기술이 대중의 인기를 얻으면 매우 빨리 퍼져 나간다. 인기에 힘입어 하위호환을 포기하는 일도 허다하다. 이런 Frontend 기술의 특성이 Backend 기술에 강점을 가지는 우리로서는 부담스러웠다. 하지만 고민하는 중에도 시간은 가기 때문에, 어떻게든 효율적으로 이전할수 있는 방법을 찾기로 했다.</p><p><a href="https://hbsmith.io">HBSmith</a>는 새로운 기술을 선택할때 다음의 조건들을 기준으로 선택을 해 왔다.</p><ol><li>얼마나 많은 레퍼런스가 존재하는가?</li><li>당사가 커버할수 있을 만한 단점을 가졌는가?</li><li>기술의 성숙도가 충분한가?</li></ol><p>이 기준으로 몇가지의 현존하는 Web Framework들을 비교했고 최종적으로 Vue.js를 선택하게 되었다.</p><h3>왜 지금 Vue 인가?</h3><p><a href="https://vuejs.org">Vue.js</a></p><p>Vue는 비교적 많이 알려진 프레임워크이다. 하지만 React 보단 인기가 적고, angular 보단 오래되지 않았다. 어쩌면 애매한 포지션에 있는 이 프레임워크를 굳이 우리가 선택하게 된 이유는 다음과 같았다.</p><ol><li>Vue의 Documentation은 잘 정리되어 있으며 커뮤니티의 지원이 활발하다.</li><li>우리는 서버로직이 중심인 단순한 SPA Frontend를 만들 것이다.</li><li>Vue는 2.x 버전을 제공하며 여러 상업 프로젝트/사이트에서 활용중이다.</li></ol><p>이거 외에 몇가지 더 장점이 있는데</p><ol><li>Angular를 아는 사람이라면 쉽게 배울 수 있을 정도로 비슷한 기능들이 많다.</li><li>젊은 개발자들 사이에서 잘 알려져 있다.</li><li>React, Angular에 비해 여러 측면에서 가볍고 단순하다.</li></ol><p>등이 있다.</p><p>무엇보다 기존 코드가 Angular 1.x 기반으로 만들어져 있기 때문에 Angular 1.x 코드를 아는 사람 입장에서 빠르게 배울 수 있었던 점이 가장 큰 매력이었다. 쉽게 비교할수 있도록 몇가지 예시를 작성해 보았다.</p><p><strong>템플릿</strong></p><pre>[angualr.js]</pre><pre>&lt;small class=&quot;text-muted&quot;&gt;{{ teamName }}&lt;/small&gt;</pre><pre>[vue.js]</pre><pre>&lt;small class=&quot;text-muted&quot;&gt;{{ teamName }}&lt;/small&gt;</pre><p><strong>바인딩</strong></p><pre>[angualr.js]</pre><pre>&lt;div ng-if=&quot;count &gt; 0 || searchKeyword !== &#39;&#39;&quot;&gt;</pre><pre>[vue.js]</pre><pre>&lt;div v-if=&quot;count &gt; 0 || searchKeyword !== &#39;&#39;&quot;&gt;</pre><p><strong>이벤트 처리</strong></p><pre>[angualr.js]</pre><pre>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;<br>        ng-click=&quot;onClickPlay()&quot;&gt;<br>&lt;/button&gt;</pre><pre>[vue.js]</pre><pre>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;<br>        @click=&quot;onClickPlay()&quot;&gt;<br>&lt;/button&gt;</pre><p><strong>클래스 조작</strong></p><pre>[angualr.js]</pre><pre>&lt;p ng-class=&quot;{<br>  &#39;method-get&#39;: selected.http_method === &#39;GET&#39;<br>}&quot;&gt;</pre><pre>[vue.js]</pre><pre>&lt;p :class=&quot;{<br>  &#39;method-get&#39;: selected.http_method === &#39;GET&#39;<br>}&quot;&gt;</pre><p><strong>데이터 변화 감지</strong></p><pre>[angualr.js]</pre><pre>scope.$watch(<br>  function(newValue, oldValue) {<br>    if ( newValue !== oldValue ) {<br>    }<br>  }<br>)</pre><pre>[vue.js]</pre><pre>export default {<br>   watch: {<br>     foo(newValue, oldValue) {<br>        if ( newValue !== oldValue ) {<br>        }<br>     }<br>   }<br>}</pre><p>매우 비슷하다는걸 알수 있다.</p><p>왜 이렇게 비슷한가? Vue.js의 창시자인 Evan You의 인터뷰에 그 이유가 나와있다.</p><p><a href="https://medium.freecodecamp.org/between-the-wires-an-interview-with-vue-js-creator-evan-you-e383cbf57cc4">Between the Wires: An interview with Vue.js creator Evan You</a></p><blockquote>My job at Google involved a lot of prototyping in the browser. We had this idea and we wanted to get something tangible as fast as possible. Some of the projects used Angular at that time. For me, Angular offered something cool which is data binding and a data driven way of dealing with a DOM, so you don’t have to touch the DOM yourself. It also brought in all these extra concepts that forced you to structure the code the way it wanted you to. It just felt too heavy for the use case that I had at that time.</blockquote><blockquote>I figured, what if I could just extract the part that I really liked about Angular and build something really lightweight without all the extra concepts involved? I was also curious as to how its internal implementation worked. I started this experiment just trying to replicate this minimal feature set, like declarative data binding. That was basically how Vue started.</blockquote><p><em>“Angular가 무거웠기 때문에 거기서 내가 좋아하는 부분만 빼서 가볍게 만들기 시작한게 Vue의 시작이었다&quot;</em></p><p>이 글이 Vue Framework가 왜 생겨났으며, 어떤 점을 지향하고 있는지를 잘 설명해주고 있다. 이래서 특정 기술을 접할때 그 창시자가 누구인지 그리고 어떤 생각으로 그 기술을 만들기 시작했는지 아는게 매우 중요하다.</p><h3>Webpack으론 어떻게 넘어갔는가?</h3><p>프레임워크를 정하자 Webpack으로의 이전은 비교적 쉬웠다. 우리는 다음 공식 템플릿을 사용했고, 약간의 변경만을 적용하였다. 이전에 grunt를 사용할때 기본 설정을 거의 안건드리고 사용하고 있었기 때문에 거기서 지원하는 기능이 Webpack template에서 지원하는 기능과 대부분 일치하였다. 그래서 생각보다 많은 노력이 들진 않았다.</p><p><a href="https://vuejs-templates.github.io/webpack/">Introduction · GitBook</a></p><p>다만 이 템플릿엔 selenium을 e2e 테스트로 활용하는 부분이 있는데 이 부분은 우리 <a href="https://hbsmith.io">HBSmith</a>의 자체 서비스로 대체할수 있어 제외했다.</p><h3>이전하고 나서 알게된 점</h3><p>마이그레이션 작업에만 순수하게 한달 정도가 소요된것 같다. 시작은 Angular 1.x를 작성한 멤버가 끊었고 Vue.js로 Production Web을 개발해본 다른 멤버가 바톤을 이어 받아 세부 기능을 구현한 후에 마지막으로 처음 작업한 멤버가 마무리 배포 작업을 했다. Angular 버전과 Vue.js 버전을 3주 정도 병행 운영하였고 그 사이에 발견된 중요한 미구현 부분 또는 문제점을 해결한 후에 Angular 버전을 제거하고 Vue.js로 넘어갔다.</p><p>마이그레이션 하고 나서 알게 된건 다음과 같다.</p><ol><li>Angular 1.x까지 지원되던 #! (Hashbang)은 Vue.js 2.x 에선 지원하지 않는다.</li><li>1 AWS S3 버킷 = 1 App으로 배포하는 것이 가장 단순하고 좋은 방법이다.</li><li>Angular 보다 Vue.js 가 확실히 가벼우며 반응도 빠르다.</li><li>절반 이하의 코드로 Angular 1.x 때와 동일한 구현이 가능하다.</li><li>Angular 보다 좀더 이해하기 쉬운 코드를 짤수 있다.</li><li>npm만 사용해서 패키지 관리, 빌드 모든걸 해결할수 있다. <br>(이전엔 의존성 때문에 bower, yarn, npm 등을 복잡하게 써야 했다.)</li></ol><p>아쉬운건 다음과 같다.</p><ol><li>*.vue 파일이 생각보다 쉽게 커질수 있다. (모듈화를 신경써야 하는점)</li><li>Angular 때 사용하던 라이브러리들이 Vue.js에는 덜 지원된다.</li><li>webpack이 grunt 보다 개인적으로 어렵다.</li></ol><p>그래도 혹시 옛날 프레임워크 때문에 Vue.js로의 이전을 고민하는 독자가 있다면 진지하게 고려해보는걸 추천하고 싶다. 이 글이 그런 분들에게 조금이나마 도움이 되었으면 한다.</p><p>저희 HBSmith는 여러 기업들에 QA 자동화 서비스를 제공하고 있습니다. 아래 사이트에서 자세한 정보를 확인하세요 :)</p><p><a href="https://hbsmith.io/">HBSmith - 인공지능 QA 자동화 서비스</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4134aed0d3f8" width="1" height="1"><hr><p><a href="https://medium.com/hbsmith/hbsmith%EB%8A%94-%EC%99%9C-vue-js%EB%A1%9C-%EC%98%AE%EA%B2%A8%ED%83%94%EB%8A%94%EA%B0%80-4134aed0d3f8">HBSmith는 왜 Vue.js로 옮겨탔는가?</a> was originally published in <a href="https://medium.com/hbsmith">HardBoiledSmith Stories</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HBSmith 11번째 업데이트 소식]]></title>
            <link>https://medium.com/hbsmith/hbsmith-11%EB%B2%88%EC%A7%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%86%8C%EC%8B%9D-1317791b83b0?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/1317791b83b0</guid>
            <category><![CDATA[monitoring]]></category>
            <category><![CDATA[hbsmith]]></category>
            <category><![CDATA[servers]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[cloudwatch]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Thu, 02 Aug 2018 06:38:19 GMT</pubDate>
            <atom:updated>2018-08-02T06:38:19.665Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aFlxJEm_vILK85UyT6lTzg.png" /></figure><p>안녕하세요, Server 장애 모니터링 대행 서비스 HBSmith 의 11번째 업데이트 소식입니다. (2018년 8월 2일자)</p><p>이번 업데이트에선:</p><ul><li><strong>고객사 로고(Logo) 지원 (유료고객 한정)</strong></li><li><strong>Dashboard: 가용성(Availability) 정보 제공</strong></li><li><strong>Dashboard: 장애 Timeline 그래프 개선</strong></li><li><strong>응답속도 통계정보 제공</strong></li></ul><h3>고객사 로고(Logo) 지원 (유료고객 한정)</h3><p>고객 여러분의 회사 시스템인 것처럼 보일수 있도록 Logo를 지원해 드리게 되었습니다. 이제 고객님의 사무실이나 TV에 자연스럽게 띄워 놓고 보실수 있습니다 :)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/830/1*YAPtfkqe5Zhq18W25B8g2Q.png" /></figure><p>/* 정말로 많은 편리한 기능들이 유료로 제공되고 있습니다! 어떤 기능이 유료로 제공되는지 관심있으신 고객님은 아래 폼에 이메일을 남겨주세요 :) */</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fupscri.be%2Fcdc349%3Fas_embed%3Dtrue&amp;dntp=1&amp;url=https%3A%2F%2Fupscri.be%2Fcdc349%2F&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=upscri" width="800" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/93308bce1e436cb74329cb41dd04a152/href">https://medium.com/media/93308bce1e436cb74329cb41dd04a152/href</a></iframe><h3>Dashboard: 가용성(Availability) 정보 제공</h3><p>가용성은 고객님의 시스템이 일정 기간동안 얼마나 안정적으로 서비스를 제공했는지를 표현하는 척도입니다.</p><blockquote><strong>가용성</strong>(可用性, Availability)이란 <a href="https://ko.wikipedia.org/wiki/%EC%84%9C%EB%B2%84">서버</a>와 <a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">네트워크</a>, <a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8">프로그램</a> 등의 <a href="https://ko.wikipedia.org/wiki/%EC%A0%95%EB%B3%B4_%EC%8B%9C%EC%8A%A4%ED%85%9C">정보 시스템</a>이 정상적으로 사용 가능한 정도를 말한다. <strong>가동률</strong>과 비슷한 의미이다. 가용성을 수식으로 표현할 경우, 가용성(Availability)이란 정상적인 사용 시간(Uptime)을 전체 사용 시간(Uptime+Downtime)으로 나눈 값을 말한다. 이 값이 높을수록 “가용성이 높다”고 표현한다. 가용성이 높은 것을 <a href="https://ko.wikipedia.org/wiki/%EA%B3%A0%EA%B0%80%EC%9A%A9%EC%84%B1"><strong>고가용성</strong></a>(HA, High Availability)이라고 한다.<br>- 위키피디아 발췌 -</blockquote><p>가용성이 높을수록 정상적으로 웹사이트나 API를 사용 가능하다는 의미가 됩니다. 이 정보를 이제부터 Dashboard에서 확인하실수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/994/1*QDHjZo4vrpIYhI_AZtXAmQ.png" /></figure><h3>Dashboard: 장애 Timeline 그래프 개선</h3><p>저번 업데이트때 Dashboard를 공개한 이후로, 장애 Timeline 그래프에 아무것도 나오지 않아 버그가 아니냐는 의견이 다수 있었습니다. 그래서 정상 상태일 경우엔 초록색으로 채워지도록 개선해 보았습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*tpsg8eEZBDeZIslyCssJDw.png" /></figure><h3>응답속도(Response Time) 통계 제공</h3><p>고객님들이 자주 궁금하신 내용중 하나는 <strong>“내 사이트가 다른 사람들의 사이트 대비 얼마나 느리거나 빠를까?”</strong> 였습니다. 이제부터 이 의문을 바로바로 해소 가능합니다. Response Time 정보 옆에 고객님의 End-Point가 인터넷 상위 몇% 정도의 속도인지 알려드립니다. 이 수치는 작을수록 더 빠릅니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lG33m12_qTBttD924ElobQ.png" /></figure><p>이 모든 기능들은 지금 당장 사용 가능합니다!</p><h4>서비스 장애 모니터링(관제)을 대행해 드립니다</h4><p>저희 HBSmith는 기업 서버의 장애 모니터링 및 관제를 대행해 드리고 있습니다. 다음 문제를 고민해 보셨다면 저희가 필요하실 겁니다.</p><ul><li>큰 기업처럼 1선, 2선, 3선의 장애 모니터링/대응팀을 구축하기 힘들다.</li><li>서버 모니터링은 해야 하는데 어떻게 시작할지 모르겠다.</li><li>서버는 APM으로 모니터링 하지만, 고객이 장애없이 사용가능한지 확신이 없다.</li></ul><p>저희는 AWS 공식 기술 파트너로서 이 분야에 확실한 전문성을 바탕으로 서비스를 제공해 드리고 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*z5YcFAM-TLBTDXtdIfqTvw.png" /></figure><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fupscri.be%2Fcdc349%3Fas_embed%3Dtrue&amp;dntp=1&amp;url=https%3A%2F%2Fupscri.be%2Fcdc349%2F&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=upscri" width="800" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/93308bce1e436cb74329cb41dd04a152/href">https://medium.com/media/93308bce1e436cb74329cb41dd04a152/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1317791b83b0" width="1" height="1"><hr><p><a href="https://medium.com/hbsmith/hbsmith-11%EB%B2%88%EC%A7%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%86%8C%EC%8B%9D-1317791b83b0">HBSmith 11번째 업데이트 소식</a> was originally published in <a href="https://medium.com/hbsmith">HardBoiledSmith Stories</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HBSmith 10번째 업데이트 소식]]></title>
            <link>https://medium.com/hbsmith/hbsmith-10%EB%B2%88%EC%A7%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%86%8C%EC%8B%9D-a84c030ecfd0?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/a84c030ecfd0</guid>
            <category><![CDATA[servers]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[hbsmith]]></category>
            <category><![CDATA[monitoring]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Sat, 21 Jul 2018 10:17:33 GMT</pubDate>
            <atom:updated>2018-07-21T10:17:33.511Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aFlxJEm_vILK85UyT6lTzg.png" /></figure><p>안녕하세요, Server 장애 모니터링 대행 서비스 HBSmith 의 10번째 업데이트 소식입니다. (2018년 7월 21일자)</p><p>이번 업데이트에선:</p><ul><li><strong>최근 장애상황을 한눈에 볼수있는 Dashboard 제공!</strong></li><li><strong>통계 그래프가 좀더 보기 편한 스타일로 변경!</strong></li><li><strong>좀더 보기 편해진 Notification 팝업!</strong></li></ul><h3>최근 장애상황을 한눈에 볼수있는 Dashboard 제공!</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dcUgbrg8l6bPxnNJXQxd-A.png" /><figcaption>민감한 정보는 가려둔 점 양해 부탁드립니다. :)</figcaption></figure><p>서비스 출시 이후 고객님들의 많은 피드백중 하나였던 Dashboard가 이번 업데이트 부터 제공됩니다. Dashboard는 고객님들이 최근 수일동안 발생한 “장애”에 대해서 한눈에 확인 가능하실수 있도록 정보를 제공합니다.</p><p>현재 제공되는 정보는 다음과 같습니다:</p><ul><li><strong>최근 장애 발생 수</strong></li><li><strong>장애로 인해 고객님께 전달된 이메일 알람 수</strong></li><li><strong>최근에 등록된 Case와 Scenario 수</strong></li><li><strong>최근에 발생한 장애 타임라인 (언제 장애가 발생했는지 알수 있도록)</strong></li><li><strong>최근에 발생한 장애 내용 목록 (어떤 장애가 발생했는지 알수 있도록)</strong></li></ul><p>Dashboard는 앞으로 계속 업데이트 될 예정입니다! 많은 피드백 부탁드립니다!</p><h3>통계 그래프가 좀더 보기 편한 스타일로 변경!</h3><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FKftgypjfZXg%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKftgypjfZXg&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FKftgypjfZXg%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/a7efd837f687510eeff99f5f3c0e61d9/href">https://medium.com/media/a7efd837f687510eeff99f5f3c0e61d9/href</a></iframe><p>출시때부터 제공되던 Case 별 통계 그래프를 좀더 보기 쉽고 다루기 편리하게 변경 하였습니다. 동영상에 보시다시피 Drag하여 자세히 보기 원하는 부분을 선택하거나 다른 시간대로 이동할수 있습니다. Zoom out은 기존의 큼지막한 버튼 대신 돋보기 모양 버튼으로 변경 되었습니다.</p><h3>좀더 보기 편해진 Notification 팝업!</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MNaWBxYtXtT8SVywXWKGqA.png" /></figure><p>출시때부터 제공되던 Notification 팝업이 촌스럽고 불편하다는 의견이 많아 이를 개선한 팝업을 제공합니다. 화면 중앙에 제공되는 이 팝업은 알람 뿐만 아니라 Yes/No 선택지를 제공하는 기능도 가지고 있습니다.</p><p>이 모든 기능들은 지금 당장 사용 가능합니다!</p><h4>서비스 장애 모니터링(관제)을 대행해 드립니다</h4><p>저희 HBSmith는 기업 서버의 장애 모니터링 및 관제를 대행해 드리고 있습니다. 다음 문제를 고민해 보셨다면 저희가 필요하실 겁니다.</p><ul><li>큰 기업처럼 1선, 2선, 3선의 장애 모니터링/대응팀을 구축하기 힘들다.</li><li>서버 모니터링은 해야 하는데 어떻게 시작할지 모르겠다.</li><li>서버는 APM으로 모니터링 하지만, 고객이 장애없이 사용가능한지 확신이 없다.</li></ul><p>저희는 AWS 공식 기술 파트너로서 이 분야에 확실한 전문성을 바탕으로 서비스를 제공해 드리고 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*JZi45ErNjbO7sDi-Wv4Z9A.png" /></figure><p><a href="https://hbsmith.io">HBSMITH - 서버 장애 모니터링 대행 서비스</a></p><p>관심 있으신가요? hello@hbsmith.io 또는 아래 피드백 폼에 이메일을 남겨주세요 :)</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fdocs.google.com%2Fforms%2Fd%2Fe%2F1FAIpQLSfiOMyqnVWpqz-sAYD6tR7yS7zHtXa8Z3MKDDmiaJs47UP8GA%2Fviewform%3Fembedded%3Dtrue&amp;url=https%3A%2F%2Fdocs.google.com%2Fforms%2Fd%2Fe%2F1FAIpQLSfiOMyqnVWpqz-sAYD6tR7yS7zHtXa8Z3MKDDmiaJs47UP8GA%2Fviewform%3Fusp%3Dsend_form&amp;image=https%3A%2F%2Flh4.googleusercontent.com%2FZtrxehFJNL5g0gCcY2u8Q5VY7mXo0Tkx82nR7UumpOPIp56K1MWHeZkwrw6wmyRNafE%3Dw1200-h630-p&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=google" width="760" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/4b5293f9b5bcc4edada8a844815cdd20/href">https://medium.com/media/4b5293f9b5bcc4edada8a844815cdd20/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a84c030ecfd0" width="1" height="1"><hr><p><a href="https://medium.com/hbsmith/hbsmith-10%EB%B2%88%EC%A7%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%86%8C%EC%8B%9D-a84c030ecfd0">HBSmith 10번째 업데이트 소식</a> was originally published in <a href="https://medium.com/hbsmith">HardBoiledSmith Stories</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MySQL: 모든 테이블의 사이즈 조회]]></title>
            <link>https://medium.com/@yoonjs2/mysql-%EB%AA%A8%EB%93%A0-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EC%82%AC%EC%9D%B4%EC%A6%88-%EC%A1%B0%ED%9A%8C-a2be63cf76d6?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/a2be63cf76d6</guid>
            <category><![CDATA[optimization]]></category>
            <category><![CDATA[database]]></category>
            <category><![CDATA[mysql]]></category>
            <category><![CDATA[sql]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Thu, 19 Jul 2018 05:53:29 GMT</pubDate>
            <atom:updated>2018-07-19T05:53:29.306Z</atom:updated>
            <content:encoded><![CDATA[<p>MySQL 에서 모든 테이블 사이즈를 조회하여 보여주는 쿼리<br>테이블 다이어트 할때 유용합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/102b8c9e97f87d8a868bfa42392b9544/href">https://medium.com/media/102b8c9e97f87d8a868bfa42392b9544/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a2be63cf76d6" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to: RDS MySQL 에서 Aurora MySQL로 안전하게 이전하기]]></title>
            <link>https://medium.com/hbsmith/migration-how-to-rds-mysql-to-aurora-mysql-3a78cb0261c8?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/3a78cb0261c8</guid>
            <category><![CDATA[aws-rds]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[migration]]></category>
            <category><![CDATA[mysql]]></category>
            <category><![CDATA[aws-aurora]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Sat, 02 Jun 2018 04:43:17 GMT</pubDate>
            <atom:updated>2018-08-23T04:47:22.261Z</atom:updated>
            <content:encoded><![CDATA[<p>데이터는 정말로 중요하다. 날아간 서버는 금방 다시 띄우면 그만이지만 망가진 데이터 베이스는 두고두고 모두를 괴롭힌다. 데이터 베이스가 불안정 하면 아무리 서버 사양이 좋아도 서비스는 불안정 해진다. HBSmith를 시작하고 나서 다양한 회사의 다양한 장애 상황을 들여다 볼 기회가 있었다. 어플리케이션 서버의 장애는 코드 수정으로 비교적 짧은 시간내에 고쳐볼수 있었다. 하지만 데이터 베이스의 불안정성은 바로 해결되기 어려우며 오랜시간 구성원들을 괴롭히고 있었다.</p><p>RDBMS가 클라우드 시대에도 불안정한 근본 이유는 Scale in/out이 힘든 구조이기 때문이다. <a href="https://en.wikipedia.org/wiki/Relational_database_management_system">RDBMS</a>의 핵심인 <a href="https://ko.wikipedia.org/wiki/ACID">ACID 원칙</a>은 OS에서 지원하는 <a href="https://ko.wikipedia.org/wiki/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4">Semaphore</a>, Lock등의 개념을 통해 단일 머신 내에서 비교적 쉽게(?) 실현 가능했다. 하지만 네트워크로 연결된 수많은 node로 구성된 HA(<a href="https://www.techopedia.com/definition/1021/high-availability-ha">High Availability</a>)환경 내에서는 구현이 복잡해진다. A 머신에서 걸어놓은 Transaction과 Lock을 B 머신에서도 똑같이 복제할수 있는가? 그리고 여러 머신과 네트워크 장애에도 불구하고 안정적으로 유지하며 <a href="https://ko.wikipedia.org/wiki/%EA%B2%BD%EC%9F%81_%EC%83%81%ED%83%9C">Race condition</a> 또는 <a href="https://ko.wikipedia.org/wiki/%EA%B5%90%EC%B0%A9_%EC%83%81%ED%83%9C">Dead lock</a> 이슈를 해결할수 있는가? (이런 문제들을 Split Brain 문제라고 한다.) 같은 온갖 복잡한 문제들이 존재한다.</p><p><a href="https://en.wikipedia.org/wiki/Split-brain_(computing)">Split-brain (computing) - Wikipedia</a></p><p>그래서 NoSQL 같은 기술들은 ACID의 일부를 포기함으로서 이러한 문제들을 해결할수 있다고 이야기 해왔다. 그러나 ACID가 가져다 주는 이점을 포기했기 때문에 동시에 RDBMS를 완전히 대체하는 것은 불가능해졌다. (용도 자체가 달라져 버렸기 때문에)</p><p>클라우드 기술이 대중화 되면서 이런 RDBMS의 근본적인 한계가 이상적인 HA를 달성하는데 방해로 지적되어왔다. 오랜 시간동안 컴퓨터 업계에선 CPU의 속도는 무어의 법칙처럼 빨라졌는데 스토리지가 거북이 걸음같은 속도에 머물기 때문에 컴퓨터가 제 성능을 못낸다고 이야기 되어왔다. 마찬가지로 모든 컴퓨팅 자원이 가상화되고 HA화 되었는데 RDBMS는 완벽하게 HA 되지 못했기 때문에 계속 SPOF(Single Point of Failure)가 Architecture 속에 아킬레스 건처럼 존재해 왔다.</p><p>AWS는 이 문제를 클라우드적인 해법으로 풀어보고자 노력했고 그 결과로 AWS Aurora를 출시하였다. Aurora는 완전히 새로운 DBMS가 아니라, 기존 RDBMS의 하부 구조를 AWS에 맞게 개조하여 ACID는 유지하면서 자동화된 장애복구와 HA가 가능하도록 만든 RDBMS이다. MySQL과 완전히 호환되며 AWS에서 RDS 기반의 Workload를 돌리는 분이라면 Aurora로의 전환을 고려해 보시는걸 추천드린다.</p><p><a href="https://aws.amazon.com/ko/rds/aurora/?nc1=h_ls">데이터 베이스 관리 시스템 | MySQL | Amazon Web Services</a></p><p>우리 고객사중 하나인 Sixshop은 수년이상 AWS 상에서 서비스를 운용해 왔고 RDS MySQL을 이용하여 전자상거래를 제공해 왔다.</p><p>Sixshop은 WIX 처럼 누구나 쉽게 6분만에 예쁜 쇼핑몰을 만들수 있는 서비스를 제공한다. 관심있는 분은 <a href="https://sixshop.com">https://sixshop.com</a> 에 방문해 보시길 추천드립니다.</p><p><a href="https://www.sixshop.com/">SixShop | 6분 만에 만드는 멋진 쇼핑몰, 식스샵</a></p><p>하지만 고객이 점차 늘어나면서 기존 RDS MySQL을 이용하여 안정적인 서비스를 제공하는것이 점점 어려워졌고 외부의 공격과 해킹에 대비해 DBMS의 보안을 좀더 강화할 필요가 생겼다. 따라서 AWS Aurora로의 Migration이 필요하게 되었고 이를 위해 몇가지 전제조건을 제시했다.</p><ol><li>최대한 Downtime이 적었으면 한다.</li><li>DBMS가 네트워크 레벨 부터 외부와 완전히 격리 되었으면 한다.</li><li>데이터는 완벽하게 이전되어야 한다.</li></ol><p>이 전제조건을 만족하기 위해 조사한 몇가지 방법중 우리는 최종적으로 Aurora Read Replica를 사용하는 방법을 택했다. 선정 이유는 다음과 같다.</p><ol><li>원본 DB를 Snapshot을 뜨고 이를 바닥에서 Aurora로 다시 띄우는 것보다 짧은 시간에 이전이 가능하다. = Downtime의 최소화</li></ol><p>나머지 조건들은 전통적인 Snapshot 복제 방법으로도 달성할수 있었다.</p><h4>이전 계획은 어떻게 세우면 되나?</h4><p>AWS 문서에는 당연하겠지만 이 마이그레이션 과정에서 고려해야할 문제나 계획에 대해선 자세히 언급되어 있지 않다. 따라서 운영 DB를 처음 마이그레이션 하는 사람은 여러가지 실수를 범할 가능성이 크게 존재한다. 이 실수 때문에 복구가 불가능한 상황에 처할수도 있다. 이런 문제를 피하려면 모든 과정에 대해서 분명한 계획을 세워야 하고 계획을 테스트 베드에서 여러차례 실험해 보아야 한다. 이 계획이 없는 상태에서 migration 시도를 하려다가 실패하거나 장애를 겪은 고객들을 몇번 목격했기 때문에 강조하고 싶다.</p><p>우선 AS-IS 분석이 필요하다.</p><ol><li><strong>현재 운영중인 DBMS(이하 Source DB)의 사양과 설정을 정확히 알아야 한다. 다음과 같은 내용들이 문서에 정리되어야 한다.</strong></li></ol><ul><li>Source DB의 Engine과 Version (예: mysql 5.6.5a, Inno DB x.x)</li><li>Source DB의 Network 설정 (어떤 VPC에 있으며 어떤 SG 설정이 되어 있는지)</li><li>Source DB에 접근하는 요소 (WAS 뿐만 아니라 cron 같은 요소들 모두)</li><li>Source DB의 데이터 크기 (Snapshot을 뜨는데 걸리는 시간을 결정함)</li><li>Source DB의 Parameter 설정 (매우 중요한 요소로서 DB의 시간대와 인코딩을 결정한다. 이 정보가 제대로 이전이 안되면 데이터 자체가 틀어져버린다)</li></ul><p><em>DB Parameter의 경우 RDS MySQL에선 한벌이었던 Parameter가 Aurora에서는 Cluster용과 Instance용의 2벌로 나뉘어져 있다. 만약 Source DB의 Parameter를 튜닝하였다면 Aurora의 Cluster와 Instance Parameter중에 어떤걸 튜닝해야 Source DB와 똑같이 맞출수 있는지 확인해야 한다. 비교하는 방법은 RDS Web Console에서 비교하고 싶은 Parameter를 선택하고 Compare 를 클릭하면 된다.</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0Lk0gRHBZgq_r4GHES9ZRQ.png" /><figcaption>비교하고 싶은 Parameter를 선택하고 우측 상단의 Compare를 클릭한다.</figcaption></figure><ul><li>Source DB내의 Table, Schema 정보 (어떤 Table이 있고 각 Table이 몇개의 Row를 지니고 있는지 확인할 필요가 있다)</li></ul><p>2. <strong>현재 운영중인 서비스의 특성을 알아야 한다. 다음과 같은 내용들이 역시 문서에 정리되어 있어야 한다.</strong></p><ul><li>서비스가 가장 한가한 시간이 언제인가 (Sixshop의 경우 새벽 3~4시 대가 가장 트래픽이 적은 시간이었다. 이시간대에 migration을 진행해야 Downtime 발생에 대한 고객 불만을 최소화 할수있다.)</li><li>서비스 점검/장애 공지를 언제 어떻게 누구를 통해 내보낼수 있는가? (고객에게 미리 공지가 나가야 하며, 문제가 터졌을때 복구가 될 때까지 운영팀에서 방어를 해줘야 한다.)</li><li>장애 발생시 보통 어떻게 고객에게 보상하는가? (예기치 못한 문제로 인해 이전/복구 과정이 길어지거나 장애로 인한 고객 손실을 어떻게 보상해서 불만을 줄일 것인가를 고민해야 한다.)</li><li>서비스의 현재 Architecture는 어떻게 되어 있는가? (특히 시스템의 네트워크 구성과 WAS와의 연결이 어떻게 설정되어 있는지 자세히 확인해야 한다.)</li></ul><p>충분히 현 상황에 대한 파악이 되어 있다면 To-Be 계획을 세울 차례다.</p><ol><li>Source DB와 동급 성능의 Tier와 Engine이 AWS Aurora에 있는지 확인한다. <br>(너무 오래된 Engine 버전을 Source DB에서 쓸 경우 Aurora에서 지원하지 못할 가능성이 있다. 이럴경우엔 DB Data를 직접 Dump 떠서 변환 후 이전하는 방법밖에 없다.)</li><li>기존 Architecture Diagram이 있다면 migration 후의 최종 Architecture Diagram을 그려본다.</li><li>기존 Architecture에서 최종 Architecture로의 모든 이전 Step을 Diagram 및 표로 묘사해 둔다. Sixshop의 경우는 다음과 같다. (여기선 일부만 모사했다) 여기서 중요한건, migration이 실패해도 잽싸게 옛날 상태로 rollback할수 있게 계획을 세워야 한다는 것이다.</li></ol><p>To-Be 계획에서 3번째인 각 작업 Step이 어떻게 이루어지는지는 아래 예시를 참고 바란다. 실제로 진행한 과정이므로 참고가 될 것이다.</p><h4>Migration 과정은 어떻게 이루어지나?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DmdNw-Mlu8CNjK1-_GmISg.png" /></figure><p><strong>STEP 0: AS-IS (Migration 시작 전 상태)<br> </strong>이번 작업은 default VPC에 설정된 RDS MySQL 서버를 RDS 전용 VPC에 Aurora MySQL 서버로 migration 하는 작업이다. 따라서 미리 RDS 전용의 VPC를 생성하고 WAS가 위치한 VPC와 VPC Peering Connection을 연결해 두었다. (기존 WAS 서버와 VPC를 다르게 둔 이유는 Security 때문이며 이 VPC는 WAS가 위치한 VPC에서 MySQL용 TCP 3306 포트로 접근하는 것 외엔 모든 접근이 차단된 격리된 VPC 이다.)</p><p><strong>STEP 1: Aurora Read Replica 생성, 실시간 복제 시작<br> </strong>Aurora Read Replica를 이용한 migration 방법은 기존 MySQL master의 slave로 Aurora Read Replica Instance를 띄워 master의 내용이 slave에 replication이 완료되면 이 slave를 master로 승격(promote)시키고 여기로 WAS의 연결을 옮기는 방법이다. 따라서 Source DB의 slave로 띄울 Aurora Read Replica instance를 마련해야 한다. 방법은 RDS Web Console 상에서 “Create Aurora Read Replica”를 선택하고</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/900/1*1md5slNitLbxzL0hv2EUkQ.png" /><figcaption><a href="https://aws.amazon.com/blogs/aws/new-create-an-amazon-aurora-read-replica-from-a-mysql-db-instance/">https://aws.amazon.com/blogs/aws/new-create-an-amazon-aurora-read-replica-from-a-mysql-db-instance/</a></figcaption></figure><p>어떤 instance를 띄울 것인지 To-Be 계획을 참고하여 설정한다. sixshop의 경우엔 DB Instance Identifier를 기존 Source DB와 다르게 설정하고, Network는 앞에서 설명한 전용 VPC와 subnet으로 설정한 후 나머지는 Source DB와 동일하게 맞춰두었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/773/1*uqRAxbOhzCNoN1_dTPwI2Q.png" /><figcaption><a href="https://aws.amazon.com/blogs/aws/new-create-an-amazon-aurora-read-replica-from-a-mysql-db-instance/">https://aws.amazon.com/blogs/aws/new-create-an-amazon-aurora-read-replica-from-a-mysql-db-instance/</a></figcaption></figure><p>이렇게 Replica를 생성하면 RDS에서 자동으로 다음 작업을 수행한다.</p><p>1) Source DB의 가장 최신 Snapshot을 생성한다.<br>2) 1)에서 생성한 Snapshop을 이용하여 Aurora Read Replica를 생성한다. (Cluster와 Instance 모두)<br>3) Source DB에서 Read Replica로 Replication을 수행한다 = Source DB와 Replica 사이의 데이터 차이를 확인하여 Replica로 복제를 수행한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GgCt4xKqJ25D6zJWctxRXg.png" /><figcaption>클러스터 설정에서 preparing-data-migration 모드로 들어가면 작업이 시작된 것이다.</figcaption></figure><p><strong>STEP 2: Replica Lag로 복제가 완료되었는지 확인<br> </strong>Replication이 완전히 진행되었는지 여부는 Replication Lag으로 확인할수 있다. 보통 MySQL에 root 계정으로 직접 접속하여 Query로 확인해볼수 있지만 RDS에서 제공하는 기본 root 계정은 이 Query를 수행할수 있는 권한이 막혀있기 때문에 CloudWatch를 통해서 확인해야만 한다. Aurora Read Replica의 CloudWatch Dashboard에서 Aurora Binload Replica Lag 값의 변화를 확인한다.</p><p><a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Monitoring.html">https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Monitoring.html</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*H4NgpKNArQyAzWdHSpDVJg.png" /><figcaption>우측 하단의 그래프를 참고하라</figcaption></figure><p>이 값이 0에 도달한지 좀 됐다면 Source DB의 내용이 Aurora Read Replica와 거의 일치한다고 보면 된다.</p><p><strong>STEP 3: Replica Lag이 0에 거의 도달면 기존 WAS의 트래픽을 차단<br> </strong>기존 WAS는 여전히 Source DB에 연결되어 있기 때문에 새로운 내용이 계속 Source DB에 기록되고 slave인 Aurora Read Replica로 지속적으로 복제된다. 이런 상황에선 Source DB와 Read Replica간의 복제가 굉장히 빠르게 이루어진다고 하더라도 미세한 데이터 차이가 계속 발생하게 된다. (Source DB의 Table과 복제된 Table의 Row Count를 해보면, Row 수가 계속 미세하게 차이가 난다)이 상황에서 WAS의 연결을 Read Replica로 옮겨버리면 옮기는 과정에서 걸린 시간 사이에 발생한 데이터 차이를 직접 찾아서 Read Replica에 수동으로 넣어줘야 한다. 그렇지 않으면 migration 후에 데이터가 누락되거나 정합성이 깨지는 일이 벌어진다.</p><p>이런일을 방지하려면 WAS나 다른 요소가 Source DB에 Write를 하는 작업(INSERT, UPDATE, ALTER, DELETE 등)을 모두 멈추도록 해야한다. 따라서 sixshop의 경우 공사중 페이지를 띄우고 WAS를 모두 중지 시켜야 했다. 그리고 Source DB를 Reboot 시켜 모든 Connection이 끊어지도록 하여 Write 작업이 중단되도록 만들었다. (프로시저를 돌리고 있다면 미리 모두 중단시켜야 할 것이다.) 이후 양쪽 DB의 모든 Table (DBMS에서 관리하는 Table은 제외)에 대해서 Row Count를 확인하여 양쪽 DB의 Row Count가 일치하는지 확인하였다. 유저 Table에 대한 Row Count를 뽑는 SQL을 만들어주는 쿼리는 다음을 이용 하였다.</p><pre>SELECT CONCAT( </pre><pre>    &#39;SELECT &quot;&#39;,</pre><pre>    table_name,</pre><pre>    &#39;&quot; AS table_name, COUNT(*) AS exact_row_count FROM `&#39;,</pre><pre>    table_schema,</pre><pre>    &#39;`.`&#39;,</pre><pre>    table_name,</pre><pre>    &#39;` UNION &#39;</pre><pre>)</pre><pre>FROM INFORMATION_SCHEMA.TABLES</pre><pre>WHERE table_schema = &#39;&lt;my table schema&gt;&#39;;</pre><p>Source DB에 연결된 Connection이 0이고 Write 작업이 일어나지 않으며, 양쪽 DB에서 각각 수행한 Row Count가 동일하다면 이제 다음 Step으로 넘어갈 준비가 된 것이다.</p><p>특정 설정만 on 하면 시스템 전체가 Source DB에 대해서 Write 작업을 멈추고 Read만 하는, Read-Only 모드가 가능하도록 설계가 되어 있다면 WAS를 굳이 중단시키고 공사중 페이지를 띄우는 일은 없었을 것이다. 하지만 대부분의 고객 시스템들이 이런 고려가 되어있지 않기 때문에 얼마간의 Downtime이 발생할 수밖에 없다. 물론 세상엔 더 좋은 방법이 있어 “완벽한 무중단 이전&quot;이 가능할수도 있다. 하지만 이 상황과 당신의 비슷하다면, 얼마간의 “중단”은 각오해야 하며 개발하시는 서비스의 운영팀이 이를 인지하고 정책적으로 대비할수 있도록 미리 알려줘서 준비해야 한다.</p><p><strong>주의사항</strong><br>이 과정에서 Aurora Read Replica는 놀랍게도 Read-Only 상태가 아니기 때문에 Write 쿼리를 실행할수 있다! 만일 실수로라도 Read Replica에서 Write 쿼리를 수행해 버리면 양쪽 DB의 복제 정합성을 보장하는 Binary Log가 틀어져버려 Read Replica를 완전히 부수고 Step 1부터 모든 작업을 다시 시작해야만 한다! <br>STEP 4로 넘어가기 전에 실수로라도 Write 쿼리를 수행하지 않도록 주의하자!</p><p><strong>STEP 4: Aurora를 Master로 승격 (Promote)</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/713/1*5yoMvQhOrG3z1i8amt-0CA.png" /><figcaption><a href="https://aws.amazon.com/blogs/aws/new-create-an-amazon-aurora-read-replica-from-a-mysql-db-instance/">https://aws.amazon.com/blogs/aws/new-create-an-amazon-aurora-read-replica-from-a-mysql-db-instance/</a></figcaption></figure><p>복제가 완료되었기 때문에 이제 Aurora와 Source DB의 연결을 끊을 때가 왔다. Promote Read Replica를 클릭하면 수초 이내로 Aurora 클러스터를 replica 모드에서 master 모드로 바꾸어준다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eGcLJpo11Qm_s1JIiABoKA.png" /><figcaption>Cluster 설정이 이렇게 바뀌게 되면 Promotion이 완료된 것이다.</figcaption></figure><p><strong>STEP 5: Aurora Connection 변경 후 트래픽 다시 연결<br></strong>이제 마지막 단계이다. WAS의 설정에서 DB Endpoint 부분을 Aurora의 Cluster Endpoint로 바꾸고 WAS를 재시작 한다. 그리고 서비스의 모든 기능들이 정상 동작하는지 확인한다. 문제가 없다면 이제 공사중 페이지로 차단했던 사용자 트래픽을 다시 WAS로 연결하고 아무일이 없던것 처럼 서비스를 시작하면 된다. 이때 주의할 점은 이전후에 Source DB를 바로 부수지 말라는 것이다. 왜냐면 DB 이전때문에 문제가 발생했을때 참고할 원본 자료가 있는것이 안전하기 때문이다. 일주일 정도 운영한 후에 문제가 없다면 Source DB는 최종 스냅샷만 만들고 부숴서 비용을 아끼도록 하자.</p><h4>이제 테스트와 실행만이 남았다.</h4><p>실제 migration 을 진행하기 전에, To-Be 계획을 세웠던 그때로 돌아가 운영환경이 아닌 테스트 환경에서 위의 모든 과정을 실험해보길 추천한다. AS-IS와 최대한 똑같은 환경을 구축하고 To-Be로 이전하는 테스트를 최대 3번 정도 진행하면서 각 과정을 기록해 본다. 과정에서 어떤 일들이 발생하고, 얼마만큼의 시간이 걸리는지 미리 확인해보기 위해서이다.</p><p><em>경험적으론, 과정중에 가장 시간이 많이 걸리는 과정은 STEP 1에서 Source DB의 스냅샷을 뜨고 여기서 Read Replica를 띄운후 복제를 시작하는데 까지 걸리는 시간이었다. DB에 저장된 데이터의 크기가 클수록, 띄우려는 Instance의 사이즈가 클수록 오래 걸린다.</em></p><p>여기까지 진행했다면, 운영팀 및 경영진과 협의하여 언제 얼마만큼의 시간을 가지고 이전할 것인지 정할수가 있게된다. 이제부턴 migration에 참여할 인력들과 그 시간에 한자리에 모여 고객에게 공지를 보낸 후에 한 Step씩 진행하면 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vI0G-_d7FLVuClbXYuWZrg.png" /></figure><p><strong>HBSmith</strong>는 <strong>AWS Technology Partner</strong>로서 AWS에 대한 전문성을 바탕으로 고객님의 IT 서비스가 24/365 잘 동작하는지 모니터링해 주는 “<strong>서버 관제 전문 서비스</strong>&quot; <strong>HBSmith</strong>를 제공하고 있습니다. 무료로 가입하시고 AWS 관련 소식도 받아보세요!</p><p><a href="https://hbsmith.io">HBSMITH - 서버 장애 모니터링 대행 서비스</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3a78cb0261c8" width="1" height="1"><hr><p><a href="https://medium.com/hbsmith/migration-how-to-rds-mysql-to-aurora-mysql-3a78cb0261c8">How to: RDS MySQL 에서 Aurora MySQL로 안전하게 이전하기</a> was originally published in <a href="https://medium.com/hbsmith">HardBoiledSmith Stories</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HBSmith 9번째 업데이트 소식]]></title>
            <link>https://medium.com/hbsmith/hbsmith-9%EB%B2%88%EC%A7%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%86%8C%EC%8B%9D-94516fcccab?source=rss-a3946348a9cc------2</link>
            <guid isPermaLink="false">https://medium.com/p/94516fcccab</guid>
            <category><![CDATA[servers]]></category>
            <category><![CDATA[monitoring]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[hbsmith]]></category>
            <dc:creator><![CDATA[Jesang Yoon]]></dc:creator>
            <pubDate>Sun, 13 May 2018 12:31:48 GMT</pubDate>
            <atom:updated>2018-05-21T08:07:58.191Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aMhXk5eazsoZiIIWyeMgaA.png" /></figure><p>안녕하세요, 서버(Server) 장애 모니터링 대행 서비스 HBSmith 의 아홉번째 업데이트 소식입니다. (2018년 5월 13일자)</p><p>이번 업데이트에선:</p><ul><li><strong>일본에서 서비스 하시는 분들에게 희소식! 새 원격 테스트 지역으로 “일본&quot;이 추가되었습니다!</strong></li><li><strong>테스트를 여러개 만드시는 분들을 위해 테스트 복제 기능이 생겼습니다!</strong></li></ul><h4>오늘부터 일본에서 모니터링을 하실 수 있습니다.</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*H7ddIqzVyO8_wU5xjvF3UA.png" /></figure><p>HBSmith는 대한민국 뿐만 아니라 “<strong>미국</strong>”에서 고객님의 서비스를 모니터링 하는 기능을 오픈 첫날부터 제공해 왔습니다. 하지만 “<strong>일본</strong>”에서도 자신의 서비스를 모니터링 하고 싶어하시는 고객님들이 계시는데요 이분들의 꾸준한 요청을 반영하여 이번 업데이트 부터 “<strong>일본(도쿄)</strong>” 지역을 지원하게 되었습니다 :)</p><p>사용 방법은 간단합니다! 새 Case를 생성하거나 수정하실때 Monitoring From을 JP — Tokyo로 설정하시기만 하면 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*u8sgvMQahYM2MZs70ANxZA.png" /></figure><p>설정이 완료되면 대시보드에서 Monitoring From이 Tokyo로 맞춰져 있는걸 확인하실수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1018/1*EKEnls28UokKOAJhah6UwA.png" /></figure><p>이 기능은 무료로 제공되며 지금 당장 사용 가능합니다!</p><h4>테스트 여러개 만드는게 힘드셨죠? 복제 기능을 사용해 보세요</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/721/1*6Iq_IcTQ4qJYFkK507BXvg.png" /></figure><p>HBSmith를 사용하다 보면 비슷한 Case들을 여러개 추가할 일이 많습니다. 예를들어 Endpoint는 똑같지만 URL Parameter만 바꾸고 싶을때가 있죠. 그동안 이럴땐 매번 새로운 Case를 만들어야만 했습니다. 이게 불편하다는 고객님들의 의견이 그동안 계속 있어왔는데요 이젠 그러실 필요가 없습니다. “<strong>Copy</strong>” 버튼을 눌러 원하는 Case를 바로바로 복제해서 사용하실수 있습니다.</p><p>우측 화면 상단의 버튼중에 두번째 버튼 (Play 버튼 바로 오른쪽)을 누르면</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*i8PwP9QqkfVbEWWUD12raw.png" /></figure><p>똑같은 Case가 “<strong>(copy)</strong>” 이름만 붙은채로 바로 아래 추가됩니다. 이제 Edit 버튼을 눌러 원하시는대로 약간만 수정하시면 되겠죠?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*3UXdHA8w2t17eP4pXYUv9w.png" /></figure><p>이 기능 역시 지금 당장 사용 가능합니다!</p><h4>서비스 장애 모니터링(관제)을 대행해 드립니다</h4><p>저희 HBSmith는 기업 서버의 장애 모니터링 및 관제를 대행해 드리고 있습니다. 다음 문제를 고민해 보셨다면 저희가 필요하실 겁니다.</p><ul><li>큰 기업처럼 1선, 2선, 3선의 장애 모니터링/대응팀을 구축하기 힘들다.</li><li>서버 모니터링은 해야 하는데 어떻게 시작할지 모르겠다.</li><li>서버는 APM으로 모니터링 하지만, 고객이 장애없이 사용가능한지 확신이 없다.</li></ul><p>관심 있으신가요? hello@hbsmith.io 또는 아래 피드백 폼에 이메일을 남겨주세요 :)</p><p>많은 부분들이 부족함에도 불구하고 열정적으로 피드백을 주시는 고객님들 덕에 HBSmith는 매일 조금씩 변화하고 있습니다. 아직 피드백 주시지 않은 고객분이 계시다면 아래 <a href="https://goo.gl/forms/wxkNAxsKy28FK2f12">링크</a>로 언제든 피드백을 주실 수 있습니다. 주저하지 마세요!</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fdocs.google.com%2Fforms%2Fd%2Fe%2F1FAIpQLSfiOMyqnVWpqz-sAYD6tR7yS7zHtXa8Z3MKDDmiaJs47UP8GA%2Fviewform%3Fembedded%3Dtrue&amp;url=https%3A%2F%2Fdocs.google.com%2Fforms%2Fd%2Fe%2F1FAIpQLSfiOMyqnVWpqz-sAYD6tR7yS7zHtXa8Z3MKDDmiaJs47UP8GA%2Fviewform%3Fusp%3Dsend_form&amp;image=https%3A%2F%2Flh4.googleusercontent.com%2FZtrxehFJNL5g0gCcY2u8Q5VY7mXo0Tkx82nR7UumpOPIp56K1MWHeZkwrw6wmyRNafE%3Dw1200-h630-p&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=google" width="760" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/4b5293f9b5bcc4edada8a844815cdd20/href">https://medium.com/media/4b5293f9b5bcc4edada8a844815cdd20/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=94516fcccab" width="1" height="1"><hr><p><a href="https://medium.com/hbsmith/hbsmith-9%EB%B2%88%EC%A7%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EC%86%8C%EC%8B%9D-94516fcccab">HBSmith 9번째 업데이트 소식</a> was originally published in <a href="https://medium.com/hbsmith">HardBoiledSmith Stories</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>