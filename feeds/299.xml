<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-5432537856508947805</id><updated>2019-05-09T20:53:03.330-07:00</updated><category term="UEFI"/><category term="EDK2"/><category term="EDKII"/><category term="EFI"/><category term="UDK2014"/><category term="asio"/><category term="boost"/><category term="build"/><category term="timer"/><category term="vmware"/><title type='text'>pieces of code</title><subtitle type='html'></subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>25</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-498121717067511464</id><published>2018-09-27T19:59:00.001-07:00</published><updated>2018-09-27T20:09:38.370-07:00</updated><title type='text'>코드 리뷰 </title><content type='html'>&lt;style&gt;/*---------------------------------------------------------------------------------------------  *  Copyright (c) Microsoft Corporation. All rights reserved.  *  Licensed under the MIT License. See License.txt in the project root for license information.  *--------------------------------------------------------------------------------------------*/ body {  font-family: &quot;Segoe WPC&quot;, &quot;Segoe UI&quot;, &quot;SFUIText-Light&quot;, &quot;HelveticaNeue-Light&quot;, sans-serif, &quot;Droid Sans Fallback&quot;;  font-size: 14px;  padding: 0 12px;  line-height: 22px;  word-wrap: break-word; }  #code-csp-warning {  position: fixed;  top: 0;  right: 0;  color: white;  margin: 16px;  text-align: center;  font-size: 12px;  font-family: sans-serif;  background-color:#444444;  cursor: pointer;  padding: 6px;  box-shadow: 1px 1px 1px rgba(0,0,0,.25); }  #code-csp-warning:hover {  text-decoration: none;  background-color:#007acc;  box-shadow: 2px 2px 2px rgba(0,0,0,.25); }   body.scrollBeyondLastLine {  margin-bottom: calc(100vh - 22px); }  body.showEditorSelection .code-line {  position: relative; }  body.showEditorSelection .code-active-line:before, body.showEditorSelection .code-line:hover:before {  content: &quot;&quot;;  display: block;  position: absolute;  top: 0;  left: -12px;  height: 100%; }  body.showEditorSelection li.code-active-line:before, body.showEditorSelection li.code-line:hover:before {  left: -30px; }  .vscode-light.showEditorSelection .code-active-line:before {  border-left: 3px solid rgba(0, 0, 0, 0.15); }  .vscode-light.showEditorSelection .code-line:hover:before {  border-left: 3px solid rgba(0, 0, 0, 0.40); }  .vscode-dark.showEditorSelection .code-active-line:before {  border-left: 3px solid rgba(255, 255, 255, 0.4); }  .vscode-dark.showEditorSelection .code-line:hover:before {  border-left: 3px solid rgba(255, 255, 255, 0.60); }  .vscode-high-contrast.showEditorSelection .code-active-line:before {  border-left: 3px solid rgba(255, 160, 0, 0.7); }  .vscode-high-contrast.showEditorSelection .code-line:hover:before {  border-left: 3px solid rgba(255, 160, 0, 1); }  img {  max-width: 100%;  max-height: 100%; }  a {  color: #4080D0;  text-decoration: none; }  a:focus, input:focus, select:focus, textarea:focus {  outline: 1px solid -webkit-focus-ring-color;  outline-offset: -1px; }  hr {  border: 0;  height: 2px;  border-bottom: 2px solid; }  h1 {  padding-bottom: 0.3em;  line-height: 1.2;  border-bottom-width: 1px;  border-bottom-style: solid; }  h1, h2, h3 {  font-weight: normal; }  h1 code, h2 code, h3 code, h4 code, h5 code, h6 code {  font-size: inherit;  line-height: auto; }  a:hover {  color: #4080D0;  text-decoration: underline; }  table {  border-collapse: collapse; }  table &gt; thead &gt; tr &gt; th {  text-align: left;  border-bottom: 1px solid; }  table &gt; thead &gt; tr &gt; th, table &gt; thead &gt; tr &gt; td, table &gt; tbody &gt; tr &gt; th, table &gt; tbody &gt; tr &gt; td {  padding: 5px 10px; }  table &gt; tbody &gt; tr + tr &gt; td {  border-top: 1px solid; }  blockquote {  margin: 0 7px 0 5px;  padding: 0 16px 0 10px;  border-left: 5px solid; }  code {  font-family: Menlo, Monaco, Consolas, &quot;Droid Sans Mono&quot;, &quot;Courier New&quot;, monospace, &quot;Droid Sans Fallback&quot;;  font-size: 14px;  line-height: 19px; }  body.wordWrap pre {  white-space: pre-wrap; }  .mac code {  font-size: 12px;  line-height: 18px; }  pre:not(.hljs), pre.hljs code &gt; div {  padding: 16px;  border-radius: 3px;  overflow: auto; }  /** Theming */  .vscode-light, .vscode-light pre code {  color: rgb(30, 30, 30); }  .vscode-dark, .vscode-dark pre code {  color: #DDD; }  .vscode-high-contrast, .vscode-high-contrast pre code {  color: white; }  .vscode-light code {  color: #A31515; }  .vscode-dark code {  color: #D7BA7D; }  .vscode-light pre:not(.hljs), .vscode-light code &gt; div {  background-color: rgba(220, 220, 220, 0.4); }  .vscode-dark pre:not(.hljs), .vscode-dark code &gt; div {  background-color: rgba(10, 10, 10, 0.4); }  .vscode-high-contrast pre:not(.hljs), .vscode-high-contrast code &gt; div {  background-color: rgb(0, 0, 0); }  .vscode-high-contrast h1 {  border-color: rgb(0, 0, 0); }  .vscode-light table &gt; thead &gt; tr &gt; th {  border-color: rgba(0, 0, 0, 0.69); }  .vscode-dark table &gt; thead &gt; tr &gt; th {  border-color: rgba(255, 255, 255, 0.69); }  .vscode-light h1, .vscode-light hr, .vscode-light table &gt; tbody &gt; tr + tr &gt; td {  border-color: rgba(0, 0, 0, 0.18); }  .vscode-dark h1, .vscode-dark hr, .vscode-dark table &gt; tbody &gt; tr + tr &gt; td {  border-color: rgba(255, 255, 255, 0.18); }  .vscode-light blockquote, .vscode-dark blockquote {  background: rgba(127, 127, 127, 0.1);  border-color: rgba(0, 122, 204, 0.5); }  .vscode-high-contrast blockquote {  background: transparent;  border-color: #fff; } &lt;/style&gt;&lt;br /&gt;&lt;br /&gt;&lt;style&gt;/* Tomorrow Theme */ /* http://jmblog.github.com/color-themes-for-google-code-highlightjs */ /* Original theme - https://github.com/chriskempson/tomorrow-theme */  /* Tomorrow Comment */ .hljs-comment, .hljs-quote {  color: #8e908c; }  /* Tomorrow Red */ .hljs-variable, .hljs-template-variable, .hljs-tag, .hljs-name, .hljs-selector-id, .hljs-selector-class, .hljs-regexp, .hljs-deletion {  color: #c82829; }  /* Tomorrow Orange */ .hljs-number, .hljs-built_in, .hljs-builtin-name, .hljs-literal, .hljs-type, .hljs-params, .hljs-meta, .hljs-link {  color: #f5871f; }  /* Tomorrow Yellow */ .hljs-attribute {  color: #eab700; }  /* Tomorrow Green */ .hljs-string, .hljs-symbol, .hljs-bullet, .hljs-addition {  color: #718c00; }  /* Tomorrow Blue */ .hljs-title, .hljs-section {  color: #4271ae; }  /* Tomorrow Purple */ .hljs-keyword, .hljs-selector-tag {  color: #8959a8; }  .hljs {  display: block;  overflow-x: auto;  color: #4d4d4c;  padding: 0.5em; }  .hljs-emphasis {  font-style: italic; }  .hljs-strong {  font-weight: bold; } &lt;/style&gt;&lt;br /&gt;&lt;br /&gt;&lt;style&gt;/*  * Markdown PDF CSS  */   body {  font-family:  &quot;Meiryo&quot;, &quot;Segoe WPC&quot;, &quot;Segoe UI&quot;, &quot;SFUIText-Light&quot;, &quot;HelveticaNeue-Light&quot;, sans-serif, &quot;Droid Sans Fallback&quot;; }  pre {  background-color: #f8f8f8;  border: 1px solid #cccccc;  border-radius: 3px;  overflow-x: auto;  white-space: pre-wrap;  overflow-wrap: break-word; }  pre:not(.hljs) {  padding: 23px;  line-height: 19px; }  blockquote {  background: rgba(127, 127, 127, 0.1);  border-color: rgba(0, 122, 204, 0.5); }  .emoji {  height: 1.4em; }  /* for inline code */ :not(pre):not(.hljs) &gt; code {  color: #C9AE75; /* Change the old color so it seems less like an error */  font-size: inherit; }  /* Page Break : use &lt;div class=&quot;page&quot;/&gt;to insert page break -------------------------------------------------------- */ .page {  page-break-after: always; } &lt;/style&gt;&lt;br /&gt;&lt;br /&gt;BoB 에서 프로젝트 멘토링을 하면서 코드 리뷰를 하다가, 기록을 남겨두면 좋을것 같아서 적어봅니다.&lt;br /&gt;아래 함수는 특정 레지스트리 키 경로를 입력받고, 키 내부의 값을 읽어서 출력하는 함수로 보이네요.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&lt;div&gt;int Reg_Read(const char* subkey, TCHAR* value) {&lt;br /&gt; LONG ret;&lt;br /&gt; DWORD data_size = 1024;&lt;br /&gt; DWORD data_type;&lt;br /&gt; TCHAR* data_buffer = (TCHAR*)malloc(data_size);&lt;br /&gt; HKEY hKey;&lt;br /&gt;&lt;br /&gt; RtlZeroMemory(data_buffer, sizeof(data_buffer));&lt;br /&gt;&lt;br /&gt; ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE,&lt;br /&gt;  subkey,&lt;br /&gt;  0, KEY_ALL_ACCESS, &amp;amp;hKey);&lt;br /&gt;&lt;br /&gt; if (ret != ERROR_SUCCESS) {&lt;br /&gt;  printf(&quot;RegOpenKey Failed! \n &quot;);&lt;br /&gt;  return 0;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //memset(data_buffer, 0, sizeof(data_buffer));&lt;br /&gt; //data_size = sizeof(data_buffer);&lt;br /&gt; RegQueryValueEx(hKey, &quot;UninstallString&quot;, 0, &amp;amp;data_type, (LPBYTE)data_buffer, (DWORD*)&amp;amp;data_size);&lt;br /&gt; RegCloseKey(hKey);&lt;br /&gt; value = data_buffer;&lt;br /&gt; printf(&quot;Value : %s\n&quot;, value);&lt;br /&gt; free(data_buffer);&lt;br /&gt; data_buffer = NULL;&lt;br /&gt; return 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;int main() {&lt;br /&gt; TCHAR* value = nullptr;&lt;br /&gt; const char* subkey = &quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{19DD1D8D-927F-45DF-ADF4-75D38267848D}&quot;;&lt;br /&gt; Reg_Read(subkey, value);&lt;br /&gt; &lt;br /&gt;    printf(&quot;Value : %s\n&quot;, value);&lt;br /&gt; getchar();&lt;br /&gt;}&lt;br /&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;몇 가지 고쳤으면 하는 점들이 보이네요.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;리턴 값의 의미가 모호하다.&lt;/li&gt;&lt;li&gt;입력값 검증이 없다.&lt;/li&gt;&lt;li&gt;변수의 사용&lt;br /&gt;&lt;ul&gt;&lt;li&gt;사용하는 시점에 선언하자.&lt;/li&gt;&lt;li&gt;변수는 선언시 초기화하자.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;리소스 관리&lt;br /&gt;&lt;ul&gt;&lt;li&gt;할당한 메모리는 반드시 소멸하자.&lt;/li&gt;&lt;li&gt;시스템 리소스 (레지스트리 키 핸들 등)는 반드시 반환해야 한다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;유니코드 함수와 안시코드 함수, 변수를 구분하자.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;char* 변수를 입력으로 받는 함수는 RegOpenKeyExA()&lt;/li&gt;&lt;li&gt;wchar* 변수를 입력으로 받는 함수는 RegOpenKeyExW()&lt;/li&gt;&lt;li&gt;귀찮으면 TCHAR* 타입의 변수를 사용하고, RegOpenKeyEx()&lt;/li&gt;&lt;li&gt;당연히 printf 도 _tprintf() 를 사용해야 합니다.&lt;/li&gt;&lt;li&gt;char*, wchar* 를 정확히 인지하지 않은상태에서 혼용하면 안됨&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;에러로그를 남길때는 최소한 어떤 이유로 에러가 났는지 추적에 필요한 단서를 남기자.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;리턴값 또는 GetLastError() 코드 정도는 기록하자.&lt;/li&gt;&lt;li&gt;에러로그는 에러 추적을 위해 남기는 것이다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;리턴값이 있는 외부 함수를 호출했으면 반드시 리턴 값을 확인하자.&lt;/li&gt;&lt;li&gt;함수 설계 상의 문제&lt;br /&gt;&lt;ul&gt;&lt;li&gt;value 값이 output 파라미터로 사용되고 있으나&lt;/li&gt;&lt;li&gt;value 값의 타입을 어디에서도 정확히 명시 하지 않고 있다(string 인지, dword 인지).&lt;/li&gt;&lt;li&gt;전체적인 느낌으로는 string 타입이라고 가정하고 작성한 것 같네요.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;아주 심각한 문제인데, 소멸된 메모리에 접근하는 문제가 있습니다.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;out-parameter 로 사용된 value 가 가리키는 포인터는 이미 소멸되었습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;정도가 될 것 같습니다.&lt;br /&gt;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&lt;div&gt;int Reg_Read(const char* subkey, TCHAR* value) {&lt;br /&gt; LONG ret;&lt;br /&gt; DWORD data_size = 1024;&lt;br /&gt; DWORD data_type;&lt;br /&gt; TCHAR* data_buffer = (TCHAR*)malloc(data_size);&lt;br /&gt; HKEY hKey;&lt;br /&gt;&lt;br /&gt; RtlZeroMemory(data_buffer, sizeof(data_buffer));&lt;br /&gt;&lt;br /&gt; ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE,&lt;br /&gt;  subkey,&lt;br /&gt;  0, KEY_ALL_ACCESS, &amp;amp;hKey);&lt;br /&gt;&lt;br /&gt; if (ret != ERROR_SUCCESS) {&lt;br /&gt;  printf(&quot;RegOpenKey Failed! \n &quot;);&lt;br /&gt;&lt;br /&gt;        //&lt;br /&gt;        //  이렇게 리턴해버리면 data_buffer 에 할당한 메모리는 해제하지 못하고&lt;br /&gt;        //  프로그램이 종료될 때 까지 자원만 차지하고 있게됩니다.&lt;br /&gt;        //  이건 아주 심각한 문제입니다. &lt;br /&gt;        //&lt;br /&gt;  return 0;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //memset(data_buffer, 0, sizeof(data_buffer));&lt;br /&gt; //data_size = sizeof(data_buffer);&lt;br /&gt; RegQueryValueEx(hKey, &quot;UninstallString&quot;, 0, &amp;amp;data_type, (LPBYTE)data_buffer, (DWORD*)&amp;amp;data_size);&lt;br /&gt; RegCloseKey(hKey);&lt;br /&gt;&lt;br /&gt;    //&lt;br /&gt;    // value 에 포인터를 할당해 두고, free 해버리면 value 는 &lt;br /&gt;    // 더이상 유효한 메모리를 가리키고 있지 않게됩니다. &lt;br /&gt;    //&lt;br /&gt;    value = data_buffer;&lt;br /&gt; printf(&quot;Value : %s\n&quot;, value);&lt;br /&gt; free(data_buffer);&lt;br /&gt; data_buffer = NULL;&lt;br /&gt;&lt;br /&gt; return 1;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;int main() {&lt;br /&gt;&lt;br /&gt; TCHAR* value = nullptr;&lt;br /&gt; const char* subkey = &quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{19DD1D8D-927F-45DF-ADF4-75D38267848D}&quot;;&lt;br /&gt;&lt;br /&gt;    //&lt;br /&gt;    //  Reg_Read() 가 실패했다면 value 는 여전히 nullptr 입니다. &lt;br /&gt;    //&lt;br /&gt; Reg_Read(subkey, value);&lt;br /&gt; &lt;br /&gt;    //&lt;br /&gt;    // value 는 &lt;br /&gt;    //      - Reg_Read() 가 성공했다면 이미 유효한 포인터가 아니므로 펑펑펑~~&lt;br /&gt;    //      - Reg_Read() 가 실패했다면 nullptr 이니까 당연히 펑펑펑~~&lt;br /&gt;    // 어쨌거나 펑펑펑~ ㅅㅂ&lt;br /&gt;    //&lt;br /&gt;    printf(&quot;Value : %s\n&quot;, value);&lt;br /&gt; getchar();&lt;br /&gt;&lt;br /&gt;    //&lt;br /&gt;    //  리턴값도 없어요. 아마 컴파일러에서 에러를 뿜었을텐데...(컴파일도 안해본건가요...ㅠㅠ)?&lt;br /&gt;    //&lt;br /&gt;}&lt;br /&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;고쳐볼까요?&lt;br /&gt;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&lt;div&gt;#include &quot;stdafx.h&quot;&lt;br /&gt;#define WIN32_LEAN_AND_MEAN&lt;br /&gt;#include &lt;windows .h=&quot;&quot;&gt;&lt;br /&gt;#include &lt;memory&gt;&lt;br /&gt;#include &lt;crtdbg .h=&quot;&quot;&gt;&lt;br /&gt;#include &lt;sal .h=&quot;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;/// @brief subkey 내부 value 값을 읽어 리턴한다. &lt;br /&gt;/// @param subkey 레지스트리 키&lt;br /&gt;/// @param value 읽을 대상 키 이름&lt;br /&gt;/// @return 성공시 true 를 리턴하고, value 포인터에 읽은 문자열 포인터를 할당&lt;br /&gt;///   호출자는 반드시 value 포인터를 소멸시켜주어야 함&lt;br /&gt;bool &lt;br /&gt;Reg_Read(&lt;br /&gt; _In_z_ const TCHAR* subkey,&lt;br /&gt; _Outptr_ TCHAR* value&lt;br /&gt;)&lt;br /&gt;{&lt;br /&gt; _ASSERTE(nullptr != subkey);&lt;br /&gt; _ASSERTE(nullptr == value);&lt;br /&gt; if (nullptr == subkey || nullptr != value) return false;&lt;br /&gt;&lt;br /&gt; HKEY hKey = NULL;&lt;br /&gt; DWORD ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE,&lt;br /&gt;        subkey,&lt;br /&gt;        0, &lt;br /&gt;        KEY_ALL_ACCESS, &lt;br /&gt;        &amp;amp;hKey);&lt;br /&gt;&lt;br /&gt; if (ret != ERROR_SUCCESS) &lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;RegOpenKey Failed!, ret=0x%08x\n&quot;), ret);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;    //&lt;br /&gt;    //  여기서는 절대로 hKey 가 NULL 이 아니어야 합니다.&lt;br /&gt;    //&lt;br /&gt;    _ASSERTE(NULL != hKey);&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // 이제 앞으로 어떤 일이 발생하든지간에 hKey 는 반드시 &lt;br /&gt; // RegCloseHandle() 로 닫아주어야 합니다.&lt;br /&gt; //&lt;br /&gt;&lt;br /&gt; DWORD data_size = 1024;&lt;br /&gt; TCHAR* data_buffer = (TCHAR*)malloc(data_size);&lt;br /&gt;    if (nullptr == data_buffer)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;Not enough memory \n&quot;));&lt;br /&gt;&lt;br /&gt;  RegCloseKey(hKey);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;    _ASSERTE(nullptr != data_buffer);&lt;br /&gt; RtlZeroMemory(data_buffer, sizeof(data_buffer));&lt;br /&gt;&lt;br /&gt; DWORD data_type = REG_NONE;&lt;br /&gt; ret = RegQueryValueEx(hKey, &lt;br /&gt;        _T(&quot;UninstallString&quot;), &lt;br /&gt;        0, &lt;br /&gt;        &amp;amp;data_type, &lt;br /&gt;        (LPBYTE)data_buffer, &lt;br /&gt;        (DWORD*)&amp;amp;data_size);&lt;br /&gt; if (ret != ERROR_SUCCESS)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;RegQueryValueEx Failed!, ret=0x%08x\n&quot;), ret);&lt;br /&gt;&lt;br /&gt;  //&lt;br /&gt;  // 잊지 말고 핸들과 메모리를 소멸시켜 주어야 합니다.&lt;br /&gt;  //&lt;br /&gt;  free(data_buffer);&lt;br /&gt;  RegCloseKey(hKey);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // value 가 string 타입이 아니라면 문제가 있을 수 있으니&lt;br /&gt; // 확인해주어야 합니다.&lt;br /&gt; //&lt;br /&gt; if (data_type != REG_SZ || data_type != REG_MULTI_SZ || data_type != REG_EXPAND_SZ)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;Type of value is not string. actual type=%u&quot;), data_type);&lt;br /&gt;&lt;br /&gt;  //&lt;br /&gt;  // 역시 잊지 말고 핸들과 메모리를 소멸시켜 주어야 합니다.&lt;br /&gt;  //&lt;br /&gt;  free(data_buffer);&lt;br /&gt;  RegCloseKey(hKey);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // 역시 잊지 말고 핸들을 닫아주어야지요.&lt;br /&gt; //&lt;br /&gt; RegCloseKey(hKey);&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // data_buffer 는 free 하면 안됍니다.&lt;br /&gt; // &lt;br /&gt; value = data_buffer;&lt;br /&gt; //free(data_buffer); &lt;br /&gt; _tprintf(_T(&quot;Value : %s\n&quot;), value);&lt;br /&gt; data_buffer = NULL;&lt;br /&gt;&lt;br /&gt; return true;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;int main()&lt;br /&gt;{&lt;br /&gt; TCHAR* value = nullptr;&lt;br /&gt; const TCHAR* subkey = _T(&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{19DD1D8D-927F-45DF-ADF4-75D38267848D}&quot;);&lt;br /&gt; if (true != Reg_Read(subkey, value))&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;Reg_Read() failed. \n&quot;));&lt;br /&gt;  return -1;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // 여기까지 왔다면 value 는 절대 nullptr 이 아니어야 합니다 .&lt;br /&gt; // 그리고, value 는 잊지 말고 소멸시켜주어야 합니다. &lt;br /&gt; //&lt;br /&gt; _ASSERTE(nullptr != value);&lt;br /&gt; _tprintf(_T(&quot;Value : %s\n&quot;), value);&lt;br /&gt; free(value);&lt;br /&gt; getchar();&lt;br /&gt;&lt;br /&gt;    return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/sal&gt;&lt;/crtdbg&gt;&lt;/memory&gt;&lt;/windows&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;수정된 내용을 보면&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/code-quality/understanding-sal?view=vs-2017&quot;&gt;sal notation&lt;/a&gt; 적용&lt;br /&gt;&lt;ul&gt;&lt;li&gt;코드를 읽는데 도움이 되는것 뿐만 아니라 컴파일러가 오류도 잡아줍니다.&lt;/li&gt;&lt;li&gt;강추! 강추! Visual Studio 를 사용한다면 무조건 쓰세요.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;_ASSERT 코드 (아무리 강조해도 지나치지 않습니다.)&lt;/li&gt;&lt;li&gt;리턴값 체크&lt;/li&gt;&lt;li&gt;변수 선언은 최대한 늦게, 생성즉시 초기화하기&lt;/li&gt;&lt;li&gt;char, wchar_t 를 TCHAR 로 통일&lt;/li&gt;&lt;li&gt;리소스 릭 제거 (레지스트리 핸들, 메모리)&lt;/li&gt;&lt;li&gt;레지스트리 value 타입 확인&lt;/li&gt;&lt;li&gt;value 포인터 잘 다루기 (ㅠ,.ㅠ)&lt;/li&gt;&lt;li&gt;등등...&lt;/li&gt;&lt;/ul&gt;정도 입니다.&lt;br /&gt;하지만 아직 많은 문제가 있습니다.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;실수하기 너무 쉬운 코드&lt;br /&gt;&lt;ul&gt;&lt;li&gt;memory 소멸을 여러군데에서 하고있고, 성공하는 경우 호출자가 value 메모리를 해제해야 합니다.&lt;/li&gt;&lt;li&gt;코드가 길어지거나, 로직이 더 복잡해 지거나, 다른 사람이 코드를 수정한다면 실수하기 딱 좋은 코드입니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;RegQueryValueEx() 함수의 사용&lt;br /&gt;&lt;ul&gt;&lt;li&gt;현재는 1024 바이트로 고정된 버퍼를 사용합니다.&lt;/li&gt;&lt;li&gt;더 긴 문자열을 읽어야 한다면?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;그래서 한번 더 고쳤습니다.&lt;br /&gt;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&lt;div&gt;#include &quot;stdafx.h&quot;&lt;br /&gt;#define WIN32_LEAN_AND_MEAN&lt;br /&gt;#include &lt;windows .h=&quot;&quot;&gt;&lt;br /&gt;#include &lt;memory&gt;&lt;br /&gt;#include &lt;crtdbg .h=&quot;&quot;&gt;&lt;br /&gt;#include &lt;sal .h=&quot;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class SafeRegHandle&lt;br /&gt;{&lt;br /&gt;public:&lt;br /&gt; SafeRegHandle(_In_ HKEY key) : _key(key)&lt;br /&gt; {&lt;br /&gt;  _ASSERTE(NULL != key);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; ~SafeRegHandle()&lt;br /&gt; {&lt;br /&gt;  _ASSERTE(NULL != _key);&lt;br /&gt;  RegCloseKey(_key);&lt;br /&gt; }&lt;br /&gt;private:&lt;br /&gt; HKEY _key;&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;/// @brief subkey 내부 value 값을 읽어 리턴한다. &lt;br /&gt;/// @param subkey 레지스트리 키&lt;br /&gt;/// @param value 읽을 대상 키 이름&lt;br /&gt;/// @return 성공시 true 를 리턴하고, value 포인터에 읽은 문자열 포인터를 할당&lt;br /&gt;///   호출자는 반드시 value 포인터를 소멸시켜주어야 함&lt;br /&gt;bool &lt;br /&gt;Reg_Read(&lt;br /&gt; _In_z_ const TCHAR* subkey,&lt;br /&gt; _Outptr_ TCHAR* value&lt;br /&gt;)&lt;br /&gt;{&lt;br /&gt; _ASSERTE(nullptr != subkey);&lt;br /&gt; _ASSERTE(nullptr == value);&lt;br /&gt; if (nullptr == subkey || nullptr != value) return false;&lt;br /&gt;&lt;br /&gt; HKEY hKey = NULL;&lt;br /&gt; DWORD ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE,&lt;br /&gt;        subkey,&lt;br /&gt;        0,&lt;br /&gt;        KEY_ALL_ACCESS,&lt;br /&gt;        &amp;amp;hKey);&lt;br /&gt;&lt;br /&gt; if (ret != ERROR_SUCCESS)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;RegOpenKey Failed!, ret=0x%08x\n&quot;), ret);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt; _ASSERTE(NULL != hKey);&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // SafeRegHandle 객체는 함수가 리턴되는 시점에 알아서 소멸자가 호출되고&lt;br /&gt; // hKey 는 SafeRegHandle 클래스의 소멸자에서 닫아줍니다. &lt;br /&gt; // 따라서 이제 hKey는 잊고 살면 됩니다. &lt;br /&gt; //&lt;br /&gt; SafeRegHandle safe_key(hKey);&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // RegQueryValueEx() 함수는 입력받은 버퍼가 부족한 경우 ERROR_MORE_DATA 를 리턴합니다. &lt;br /&gt; // 만일 입력받은 버퍼가 NULL 을 입력한 경우 필요한 사이즈를 data_size 변수에 바이트 단위로&lt;br /&gt; // 설정하고 ERROR_SUCCESS 를 리턴합니다. &lt;br /&gt; // &lt;br /&gt; // 참고로 가변길이의 데이터를 다루는 대부분의 Windows API 가 이런 패턴을 보입니다. &lt;br /&gt; //&lt;br /&gt; // 따라서 &lt;br /&gt; // 1) RegQueryValueEx( NULL, size_need ) 호출로 필요한 메모리 크기를 구하고&lt;br /&gt; // 2) 메모리를 할당하고, &lt;br /&gt; //  3) RegQueryValueEx() 를 호출&lt;br /&gt; // 데이터를 읽어옵니다. &lt;br /&gt; //&lt;br /&gt; DWORD data_type = REG_NONE;&lt;br /&gt; DWORD data_size = 0;&lt;br /&gt; char* data_buffer = nullptr;&lt;br /&gt;&lt;br /&gt; // 필요한 사이즈 구하기 &lt;br /&gt; ret = RegQueryValueEx(hKey,&lt;br /&gt;        _T(&quot;UninstallString&quot;),&lt;br /&gt;        0,&lt;br /&gt;        &amp;amp;data_type,&lt;br /&gt;        (LPBYTE)data_buffer,&lt;br /&gt;        (DWORD*)&amp;amp;data_size);&lt;br /&gt; if (ret != ERROR_SUCCESS)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;RegQueryValueEx Failed!, ret=0x%08x\n&quot;), ret);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; // null terminate 를 위한 여분의 메모리를 추가 할당&lt;br /&gt; data_buffer = (char*)malloc(data_size + sizeof(TCHAR));&lt;br /&gt; if (nullptr == data_buffer)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;Not enough memory \n&quot;));&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt; _ASSERTE(nullptr != data_buffer);&lt;br /&gt;&lt;br /&gt; // 데이터를 읽습니다. &lt;br /&gt; ret = RegQueryValueEx(hKey,&lt;br /&gt;        _T(&quot;UninstallString&quot;),&lt;br /&gt;        0,&lt;br /&gt;        &amp;amp;data_type,&lt;br /&gt;        (LPBYTE)data_buffer,&lt;br /&gt;        (DWORD*)&amp;amp;data_size);&lt;br /&gt; if (ret != ERROR_SUCCESS)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;RegQueryValueEx Failed!, ret=0x%08x\n&quot;), ret);&lt;br /&gt;&lt;br /&gt;  //&lt;br /&gt;  // 잊지 말고, 메모리를 소멸시켜 주어야 합니다.&lt;br /&gt;  //&lt;br /&gt;  free(data_buffer);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // value 가 string 타입이 아니라면 문제가 있을 수 있으니&lt;br /&gt; // 확인해주어야 합니다.&lt;br /&gt; //&lt;br /&gt; if (data_type != REG_SZ || data_type != REG_MULTI_SZ || data_type != REG_EXPAND_SZ)&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;Type of value is not string. actual type=%u&quot;), data_type);&lt;br /&gt;&lt;br /&gt;  //&lt;br /&gt;  // 잊지 말고, 메모리를 소멸시켜 주어야 합니다.&lt;br /&gt;  //&lt;br /&gt;  free(data_buffer);&lt;br /&gt;  return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // data_buffer 는 free 하면 안됍니다.&lt;br /&gt; // &lt;br /&gt; value = (TCHAR*)data_buffer;&lt;br /&gt; _tprintf(_T(&quot;Value : %s\n&quot;), value);&lt;br /&gt; data_buffer = NULL;&lt;br /&gt;&lt;br /&gt; return true;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;int main()&lt;br /&gt;{&lt;br /&gt; TCHAR* value = nullptr;&lt;br /&gt; const TCHAR* subkey = _T(&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{19DD1D8D-927F-45DF-ADF4-75D38267848D}&quot;);&lt;br /&gt; if (true != Reg_Read(subkey, value))&lt;br /&gt; {&lt;br /&gt;  _tprintf(_T(&quot;Reg_Read() failed. \n&quot;));&lt;br /&gt;  return -1;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; //&lt;br /&gt; // 여기까지 왔다면 value 는 절대 nullptr 이 아니어야 합니다 .&lt;br /&gt; // 그리고, value 는 잊지 말고 소멸시켜주어야 합니다. &lt;br /&gt; //&lt;br /&gt; _ASSERTE(nullptr != value);&lt;br /&gt; _tprintf(_T(&quot;Value : %s\n&quot;), value);&lt;br /&gt; free(value);&lt;br /&gt; getchar();&lt;br /&gt;&lt;br /&gt;    return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/sal&gt;&lt;/crtdbg&gt;&lt;/memory&gt;&lt;/windows&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;다시 한번 수정 된 내용을 보면&lt;br /&gt;&lt;ul&gt;&lt;li&gt; SafeRegHandle 클래스 추가&lt;br /&gt;&lt;ul&gt;&lt;li&gt;이건 아주 자주 사용되는 패턴인데, 아래 내용들을 참고하시면...&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&quot;&gt;Resource acquisition is initialization&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Smart_pointer&quot;&gt;Smart pointer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;RegQueryValueEx() 함수 사용 패턴 변화&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Windows API 사용시 아주 기본적인 사용 패턴이니까 익숙해지도록...&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;더 고치고 싶은것은 있지만, 이쯤에서 마무리 해야겠습니다.&lt;br /&gt;&lt;/body&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/498121717067511464/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2018/09/blog-post.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/498121717067511464'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/498121717067511464'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2018/09/blog-post.html' title='코드 리뷰 '/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-7826446136221172976</id><published>2018-03-30T21:56:00.001-07:00</published><updated>2018-03-30T21:56:25.987-07:00</updated><title type='text'>PreviousMode (한글 번역)</title><content type='html'>MSDN 원문주소:&amp;nbsp;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/previousmode&lt;br /&gt;&lt;br /&gt;&lt;h1 class=&quot;code-line&quot; data-line=&quot;13&quot; id=&quot;previousmode&quot; style=&quot;border-bottom: 1px solid rgb(234, 236, 239); border-left-color: rgba(255, 255, 255, 0.18); border-right-color: rgba(255, 255, 255, 0.18); border-top-color: rgba(255, 255, 255, 0.18); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em; position: relative;&quot;&gt;PreviousMode&lt;/h1&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;15&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;유저모드 애플리케이션이&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;또는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 네이티브 시스템 서비스 루틴을 호출하면 시스템 콜 매커니즘이 호출 스레드를 커널모드로 트랩합니다. 매개 변수 값이 유저모드에서 시작되었음을 알리기 위해 호출자&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;vscode-workspace-resource:/c:/windows-driver-docs-forked/windows-driver-docs-pr/kernel/introduction-to-thread-objects.md&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;vscode-workspace-resource:/c:/windows-driver-docs-forked/windows-driver-docs-pr/kernel/introduction-to-thread-objects.md&quot;&gt;thread object&lt;/a&gt;의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;필드를&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;UserMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;로 설정합니다. 네이티브 시스템 서비스 루틴은 매개변수가 유저모드로부터 왔는지 확인하기 위해 호출 스레드의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;필드를 확인합니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;17&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;만일 커널모드 드라이버가 네이티브 시스템 서비스 루틴을 호출하고 매개 변수를 커널모드 루틴에 전달하는 경우 현재 스레드 오브젝트의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;필드는 반드시&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;KernelMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;이어야 합니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;19&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;커널모드 드라이버는 임의의 스레드 컨텍스트에서 실행 될 수 있고,&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;필드가&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;UserMode&lt;/span&gt;로 설정될 수 있습니다. 이 경우 커널모드 드라이버는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 네이티브 서비스 루틴을 호출하여 매개 변수 값이 신뢰할 수 있는, 커널모드 호출임을 알릴 수 있습니다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;호출은 현재 스레드 객체의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값을 겹쳐 쓰는 간단한 래퍼함수로 이동합니다. 래퍼함수는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;를&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;KernelMode&lt;/span&gt;로 설정하고&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 루틴을 호출합니다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전 루틴이 리턴하면 래퍼함수는 스레드 오브젝트의 원래&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값으로 복원하고 반환합니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;21&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;커널모드 드라이버는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 네이티브 시스템 서비스 루틴을 직접 호출할 수 있습니다. 커널모드 드라이버가 유저모드나 커널모드에서 시작될 수 있는 I/O 요청을 처리할때, 드라이버는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 루틴을 호출하여 루틴이 실행되는 동안 현재 스레드의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값이 변경되지 않도록 할 수 있습니다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;em style=&quot;box-sizing: border-box;&quot;&gt;Xxx&lt;/em&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴은 호출 스레드의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값을 통해 매개변수가 유저모드에서 왔는지 커널모드 콤포넌트에서 왔는지 판단하고, 적절하게 처리합니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;23&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;커널모드 드라이버가&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;em style=&quot;box-sizing: border-box;&quot;&gt;Xxx&lt;/em&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴을 호출하고, 현재 스레드 오브젝트의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값이 매개변수의 출처가 유저모드인지, 커널모드인지를 정확하게 가리키지 못한다면 오류가 발생 할 수 있습니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;25&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;예를 들어, 커널모드 드라이버가 임의의 스레드 컨텍스트에서 실행중이고,&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값이&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;UserMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;인 경우를 가정합니다. 만일 드라이버가 커널모드 파일 핸들을&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff566417&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff566417&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;NtClose&lt;/span&gt;&lt;/a&gt;루틴에 전달한 경우 이 루틴은&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값을 확인하고, 핸들이 유저모드 핸들이어야 한다고 결정합니다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;NtClose&lt;/span&gt;가 유저모드 핸들테이블에서 핸들을 찾을 수 없으므로 STATUS_INVALID_HANDLE 에러코드를 리턴합니다. 반면에 드라이버는 절대 핸들을 닫을 수 없기 때문에 핸들 누수 상황을 만들게 됩니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;27&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;다른 예로, 만일&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;em style=&quot;box-sizing: border-box;&quot;&gt;Xxx&lt;/em&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴의 매개변수에 입력 또는 출력 버퍼가 포함되어있고,&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;=&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;UserMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;인 경우 루틴은 버퍼를 검증하기 위해&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff559876&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff559876&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;ProbeForRead&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;또는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff559879&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff559879&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;ProbeForWrite&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴을 호출합니다. 만일 버퍼가 유저모드 메모리가 아니라 시스템 메모리에 할당되어있는 경우&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;ProbeFor&lt;em style=&quot;box-sizing: border-box;&quot;&gt;Xxx&lt;/em&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴은 예외를 발생시키고,&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;em style=&quot;box-sizing: border-box;&quot;&gt;Xxx&lt;/em&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴은 STATUS_ACCESS_VIOLATION 에러코드를 리턴하게 됩니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;29&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;필요한 경우 드라이버는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff545288&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff545288&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;ExGetPreviousMode&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴을 호출해서 현재 스레드 오브젝트의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값을 가져올 수 있습니다. 또는 요청된 I/O 작업 정보를 담고있는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff550694&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff550694&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;IRP&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;구조체의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;RequestorMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;필드를 읽을 수 있습니다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;RequestorMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;필드는 작업을 요청한 스레드의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;값의 사본을 포함합니다.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/7826446136221172976/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2018/03/previousmode.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/7826446136221172976'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/7826446136221172976'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2018/03/previousmode.html' title='PreviousMode (한글 번역)'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-3279361380179358747</id><published>2018-03-30T21:56:00.000-07:00</published><updated>2018-03-30T21:56:14.123-07:00</updated><title type='text'>Using Nt and Zw Versions of the Native System Services Routines (한글 번역)</title><content type='html'>MSDN 원문주소 :&amp;nbsp;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/using-nt-and-zw-versions-of-the-native-system-services-routines&lt;br /&gt;&lt;br /&gt;&lt;h1 class=&quot;code-line&quot; data-line=&quot;13&quot; id=&quot;using-nt-and-zw-versions-of-the-native-system-services-routines&quot; style=&quot;border-bottom: 1px solid rgb(234, 236, 239); border-left-color: rgba(255, 255, 255, 0.18); border-right-color: rgba(255, 255, 255, 0.18); border-top-color: rgba(255, 255, 255, 0.18); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em; position: relative;&quot;&gt;Using Nt and Zw Versions of the Native System Services Routines&lt;/h1&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;15&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;Windows 의 네이티브 서비스 API 는 커널모드에서 동작하는 루틴들의 집합으로 이루어져있습니다. 이 루틴들의 이름은&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;또는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;로 시작합니다. 커널모드 드라이버들은 이 루틴들을 직접 호출할 수 있으며, 유저모드 어플리케이션들은 시스템 콜을 통해서 이 루틴들을 호출할 수 있습니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;17&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;몇몇 예외사항이 있긴 하지만 각각의 네이티브 시스템 서비스 루틴들은 비슷한 이름의 접두어만 다른 두가지 버전이 있습니다. 예를 들어&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://go.microsoft.com/fwlink/p/?linkid=157250&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;http://go.microsoft.com/fwlink/p/?linkid=157250&quot;&gt;NtCreateFile&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;와&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff566424&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff566424&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;ZwCreateFile&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;호출은 비슷한 작업을 수행하지만 사실은 동일한 커널모드 시스템 루틴에 의해서 처리됩니다. 유저모드에서의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;와&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전 루틴은 동일하지만 커널모드에서의&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;와&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전 루틴들은 호출자가 전달한 파라미터 값을 다루는 방식이 다릅니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;19&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;커널모드 드라이버는 전달되는 매개변수가 신뢰 할 수 있는 커널모드에서 전달된 것임을 알리기 위해&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 네이티브 서비스 루틴을 호출합니다. 이 경우 루틴은 매개변수를 검증하지 않고 안전하게 사용할 수 있다고 가정합니다. 그러나 매개변수가 유저모드 또는 커널모드 중 하나일 경우라면 드라이버는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 루틴을 호출하는데 이는 루틴을 호출한 스레드의 기록을 기반으로 매개변수가 유저모드에서 전달되었는지 커널모드에서 전달되었는지를 구별합니다. 커널모드 매개변수와 유저모드 매개변수를 구분하는 방법에 대한 자세한 내용은&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;vscode-workspace-resource:/c:/windows-driver-docs-forked/windows-driver-docs-pr/kernel/previousmode.md&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;vscode-workspace-resource:/c:/windows-driver-docs-forked/windows-driver-docs-pr/kernel/previousmode.md&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;PreviousMode&lt;/span&gt;&lt;/a&gt;를 참조하십시오.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;21&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;유저모드 애플리케이션이&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Nt&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;또는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;Zw&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전의 네이티브 시스템 서비스 루틴을 호출하면 루틴은 항상 매개변수는 신뢰할 수 없는 유저모드에서 전달된 것으로 간주하고 매개변수를 사용하기 전에 철저히 검증합니다. 특히 루틴은 호출자가 제공한 버퍼를 검사하여 버퍼가 유효한 유저모드 메모리에 존재하고 있으며 올바르게 정렬되어있는지 확인합니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;23&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;네이티브 시스템 서비스 루틴은 매개변수에 대한 추가적인 가정을 합니다. 만일 커널모드 드라이버가 할당한 버퍼의 포인터를 매개변수로 받은 경우 버퍼는 유저모드 메모리가 아니라 시스템 메모리에 할당되어있다고 가정합니다. 만일 유저모드 애플리케이션에서 열어둔 핸들을 받으면 루틴은 커널모드 핸들테이블이 아니라 유저모드 핸들테이블에서 핸들을 찾습니다.&lt;/div&gt;&lt;div class=&quot;code-line&quot; data-line=&quot;25&quot; style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; position: relative;&quot;&gt;몇 가지 예에서 매개변수 값의 의미는 사용자 모드 및 커널모드에서의 호출간에 더 크게 다릅니다. 예를 들어&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff566488&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff566488&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;ZwNotifyChangeKey&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;루틴 (또는 해당&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;NtNotifyChangeKey&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;버전)에는 입력 매개변수 쌍이 있습니다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em style=&quot;box-sizing: border-box;&quot;&gt;ApcRoutine&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;과&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em style=&quot;box-sizing: border-box;&quot;&gt;ApcContext&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;는 유저모드에서의 호출인지 커널모드에서의 호출인지에 따라 의미가 다릅니다. 유저모드 호출인 경우&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em style=&quot;box-sizing: border-box;&quot;&gt;ApcRoutine&lt;/em&gt;은 APC 루틴을 가리키고,&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em style=&quot;box-sizing: border-box;&quot;&gt;ApcContext&lt;/em&gt;는 APC 루틴을 호출할 때 운영체제가 제공하는 컨텍스트 값을 가리킵니다. 커널모드 호출인 경우&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em style=&quot;box-sizing: border-box;&quot;&gt;ApcRoutine&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;은&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff557304&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; title=&quot;https://msdn.microsoft.com/library/windows/hardware/ff557304&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;WORK_QUEUE_ITEM&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;구조체를 가리키고&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;em style=&quot;box-sizing: border-box;&quot;&gt;ApcContext&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;는&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;box-sizing: border-box; font-weight: 600;&quot;&gt;WORK_QUEUE_ITEM&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;구조체에 의해서 기술되는 워크 큐 아이템의 타입을 가리킵니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/3279361380179358747/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2018/03/using-nt-and-zw-versions-of-native.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/3279361380179358747'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/3279361380179358747'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2018/03/using-nt-and-zw-versions-of-native.html' title='Using Nt and Zw Versions of the Native System Services Routines (한글 번역)'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-738801280702071607</id><published>2017-05-23T22:17:00.000-07:00</published><updated>2017-05-23T22:23:04.688-07:00</updated><title type='text'>vcpkg 사용하기 </title><content type='html'>&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;vcpkg&lt;/h1&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;vcpkg는 curl, boost, openssl 같은 자주 사용되는 3rd party 라이브러리들을 Visual Studio 에서 쉽게 사용할 수 있게 해주는 패키지 매니저입니다. openssl 같은 라이브러를 직접 빌드하려면 정말 귀찮고, 짜증 나는데 vcpkg 를 사용하면 이런 귀찮은 일들을 알아서 자동으로 다 해줍니다.&lt;/div&gt;&lt;/h1&gt;&lt;h2 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-top: 24px; padding-bottom: 0.3em;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#quick-start&quot; id=&quot;user-content-quick-start&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick start&lt;/h2&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;vcpkg 를 사용하려면&amp;nbsp;&lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot;&gt;github&lt;/a&gt;&amp;nbsp;을 clone 하고, 로컬에서 빌드만 하면 됩니다. Visual Studio 가 참조하는 헤더파일, 라이브러리 경로 설정들도 자동으로 다 해줍니다.&lt;/div&gt;&lt;ol style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; margin-bottom: 16px; margin-top: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;c:\work.vcpkg&lt;/code&gt;&amp;nbsp;에 clone 한다. (경로는 편한대로 알아서 하면 됩니다)&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; margin-bottom: 16px; margin-top: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;c:\work.vcpkg\bootstrap-vcpkg.bat&lt;/code&gt;&amp;nbsp;을 실행하면&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg.exe&lt;/code&gt;&amp;nbsp;를 생성합니다.&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; margin-bottom: 16px; margin-top: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg integrate install&lt;/code&gt;&amp;nbsp;명령으로 Visual Studio 설정을 해줍니다. (최초 실행시 관리자 권한 필요)&lt;/div&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; margin-bottom: 16px; margin-top: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg.exe&lt;/code&gt;&amp;nbsp;을 통해서 패키지 인스톨/업데이트/삭제 등등을 할 수 있습니다 (쉽습니다).&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt; C:\work.vcpkg&amp;gt;vcpkg.exe /?&lt;br /&gt; Commands:&lt;br /&gt;   vcpkg search [pat]              Search for packages available to be built&lt;br /&gt;   vcpkg install &lt;pkg&gt;...          Install a package&lt;br /&gt;   vcpkg remove &lt;pkg&gt;...           Uninstall a package&lt;br /&gt;   vcpkg remove --outdated         Uninstall all out-of-date packages&lt;br /&gt;   vcpkg list                      List installed packages&lt;br /&gt;   vcpkg update                    Display list of packages for updating&lt;br /&gt;   vcpkg hash &lt;file&gt; [alg]         Hash a file by specific algorithm, default SHA512&lt;br /&gt;&lt;br /&gt;   vcpkg integrate install         Make installed packages available user-wide. Requires admin privileges on first use&lt;br /&gt;   vcpkg integrate remove          Remove user-wide integration&lt;br /&gt;   vcpkg integrate project         Generate a referencing nuget package for individual VS project use&lt;br /&gt;&lt;br /&gt;   vcpkg export &lt;pkg&gt;... [opt]...  Exports a package&lt;br /&gt;   vcpkg edit &lt;pkg&gt;                Open up a port for editing (uses %EDITOR%, default &#39;code&#39;)&lt;br /&gt;   vcpkg import &lt;pkg&gt;              Import a pre-built library&lt;br /&gt;   vcpkg create &lt;pkg&gt; &lt;url&gt;&lt;br /&gt;             [archivename]        Create a new package&lt;br /&gt;   vcpkg owns &lt;pat&gt;                Search for files in installed packages&lt;br /&gt;   vcpkg cache                     List cached compiled packages&lt;br /&gt;   vcpkg version                   Display version information&lt;br /&gt;   vcpkg contact                   Display contact information to send feedback&lt;br /&gt;&lt;br /&gt; Options:&lt;br /&gt;   --triplet &lt;t&gt;                   Specify the target architecture triplet.&lt;br /&gt;                                   (default: %VCPKG_DEFAULT_TRIPLET%, see &#39;vcpkg help triplet&#39;)&lt;br /&gt;&lt;br /&gt;   --vcpkg-root &lt;path&gt;             Specify the vcpkg root directory&lt;br /&gt;                                   (default: %VCPKG_ROOT%)&lt;br /&gt;&lt;br /&gt; For more help (including examples) see the accompanying README.md.&lt;br /&gt;&lt;br /&gt; C:\work.vcpkg&amp;gt;&lt;br /&gt;&lt;/path&gt;&lt;/t&gt;&lt;/pat&gt;&lt;/url&gt;&lt;/pkg&gt;&lt;/pkg&gt;&lt;/pkg&gt;&lt;/pkg&gt;&lt;/file&gt;&lt;/pkg&gt;&lt;/pkg&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/h1&gt;&lt;h2 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-top: 24px; padding-bottom: 0.3em;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#라이브러리-설치&quot; id=&quot;user-content-라이브러리-설치&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라이브러리 설치&lt;/h2&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg.exe install package&lt;/code&gt;&amp;nbsp;명령으로 패키지(라이브러리)를 설치하면 기본적으로 x86 dynamic 으로 설치합니다. 하지만 개발환경에 따라서 x86 static/dynamic, x64 static/dynamic 버전 등등이 필요합니다. 사용가능 한 버전은&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg install package:triplet&lt;/code&gt;&amp;nbsp;명령으로 확인가능합니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;C:\work.vcpkg&amp;gt;vcpkg help triplet&lt;br /&gt;Available architecture triplets:&lt;br /&gt;  arm-uwp&lt;br /&gt;  x64-uwp&lt;br /&gt;  x64-windows-static&lt;br /&gt;  x64-windows&lt;br /&gt;  x86-uwp&lt;br /&gt;  x86-windows-static&lt;br /&gt;  x86-windows&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;&amp;gt;vcpkg install package:triplet&lt;/code&gt;&amp;nbsp;명령으로 설치 각 버전의 라이브러리를 설치할 수 있습니다. 아래 예제는 boost, curl, sqlite 등의 라이브러리를 설치합니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;&amp;gt;vcpkg install boost:x86-windows boost:x86-windows-static boost:x64-windows boost:x64-windows-static&lt;br /&gt;&amp;gt;vcpkg install curl:x86-windows curl:x86-windows-static curl:x64-windows curl:x64-windows-static&lt;br /&gt;&amp;gt;vcpkg install sqlite3:x86-windows sqlite3:x86-windows-static sqlite3:x64-windows sqlite3:x64-windows-static&lt;br /&gt;&amp;gt;vcpkg install jsoncpp:x86-windows jsoncpp:x86-windows-static jsoncpp:x64-windows jsoncpp:x64-windows-static&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;설치된 패키지는 Visual Studio 에서 별다른 설정을 하지 않아도 바로 사용가능합니다.&lt;/div&gt;&lt;/h1&gt;&lt;h2 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-top: 24px; padding-bottom: 0.3em;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#라이브러리-강제-지정하기-x86-x64-또는-md-mt&quot; id=&quot;user-content-라이브러리-강제-지정하기-x86-x64-또는-md-mt&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라이브러리 강제 지정하기 (x86, x64 또는 /MD, /MT)&lt;/h2&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;vcpkg 는 기본으로 /MD (Multi Threaded DLL) 로 라이브러리를 빌드하고, 참조하게 합니다. 하지만 프로젝트 환경에 따라서 static 하게 링크해야 하는 경우도 있습니다. 패키지 컴파일시에&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;triplet&lt;/code&gt;&amp;nbsp;을 지정해서 /MD, /MT 등으로 설치는 가능한데, 어떻게 지정하는지에 대해서는 공식적인 내용을 찾지 못했습니다. 구글의 도움을 받아 찾은 해결책은 몇 가지 있었습니다만 깔끔하게 해결할 수 있는 방법은 아직 모르겠습니다. 아시는 분께서는 좀 알려주세요.&lt;/div&gt;&lt;ul style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; margin-bottom: 16px; margin-top: 16px;&quot;&gt;default 가 md (using dll) 로 링크되는데, 관련 설명은 있는데, 어떻게 하라는것인지 잘 모르겠고, 읽기도 귀찮음.&lt;/div&gt;&lt;ul style=&quot;box-sizing: border-box; margin-bottom: 0px; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/vcblog/2016/11/01/vcpkg-updates-static-linking-is-now-available/&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot;&gt;vcpkg-updates-static-linking-is-now-available&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;&lt;a href=&quot;https://github.com/Microsoft/vcpkg/issues/281&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot;&gt;Disable automatic integration for a particuar VS project&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; margin-bottom: 16px; margin-top: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;c:\work.vcpkg\scripts\buildsystems\msbuild\vcpkg.targets&lt;/code&gt;&amp;nbsp;파일을 수정하는 방법&lt;/div&gt;&lt;ul style=&quot;box-sizing: border-box; margin-bottom: 0px; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;프로젝트 빌드 과정에서 참조되는 파일로&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;VcpkgEnabled&lt;/code&gt;,&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;VcpkgTriplet&lt;/code&gt;&amp;nbsp;변수를 적당히 수정해주면 됨&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;전역 파일을 수정하는것이 맘에 들지 않음.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;저는 아래 처럼 프로젝트의 설정파일을 직접 편집합니다. 편한 텍스트 에디터를 이용해서&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;.vcxproj&lt;/code&gt;&amp;nbsp;파일을 열고,&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;Globals&lt;/code&gt;&amp;nbsp;아래에 내용을 추가합니다. vcpkg 로 패키지를 설치하면&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg-root\installed\x64-windows&lt;/code&gt;,&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcpkg-root\installed\x64-windows-static&lt;/code&gt;&amp;nbsp;등의 경로에 패키지가 설치되는데 이 경로를 강제로 지정하는 것입니다. Visual Studio 에서 사용하는&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;VcpkgRoot&lt;/code&gt;&amp;nbsp;환경변수를 바꿔치기 해주는 것이지요. :-)&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;a href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/img/vcpkg_vcxproj.png&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;vcxproj&quot; src=&quot;https://github.com/somma/somma.github.io/raw/master/docs/img/vcpkg_vcxproj.png&quot; style=&quot;background-color: white; border-style: none; box-sizing: content-box; max-width: 100%;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h2 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-top: 24px; padding-bottom: 0.3em;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#curl-라이브러리-문제-해결하기&quot; id=&quot;user-content-curl-라이브러리-문제-해결하기&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;curl 라이브러리 문제 해결하기&lt;/h2&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;curl 라이브러리는 아주 많은 application network protocol 구현을 제공하는 라이브러리입니다. 디폴트 동작방식인&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;/MD&lt;/code&gt;&amp;nbsp;라면 추가적인 설정이 필요없지만 static link 를 사용하는 경우 추가적인 설정이 필요합니다. 우선 static 링크를 사용하기 위해서 c/c++ -&amp;gt; Runtime Library 를&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;/MT&lt;/code&gt;&amp;nbsp;로 변경합니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;a href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/img/vcpkg_curl_1.png&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;set_mt&quot; src=&quot;https://github.com/somma/somma.github.io/raw/master/docs/img/vcpkg_curl_1.png&quot; style=&quot;background-color: white; border-style: none; box-sizing: content-box; max-width: 100%;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;vcxproj&lt;/code&gt;&amp;nbsp;파일도 static 버전을 참조할 수 있도록 수정합니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;a href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/img/vcpkg_curl_2.png&quot; style=&quot;box-sizing: border-box; color: #0366d6; text-decoration-line: none;&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;set_vcxproj&quot; src=&quot;https://github.com/somma/somma.github.io/raw/master/docs/img/vcpkg_curl_2.png&quot; style=&quot;background-color: white; border-style: none; box-sizing: content-box; max-width: 100%;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h3 style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 1.25em; line-height: 1.25; margin-bottom: 16px; margin-top: 24px;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#curl_staticlib&quot; id=&quot;user-content-curl_staticlib&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CURL_STATICLIB&lt;/h3&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;프로젝트를 빌드하면 아래와 유사한 에러가 발생합니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;1&amp;gt;libcurl.lib(schannel.obj) : error LNK2019: unresolved external symbol __imp__CertFreeCertificateContext@4 referenced in function _schannel_connect_step3&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2001: unresolved external symbol __imp__CertFreeCertificateContext@4&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_init referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_unbind_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_set_option referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_simple_bind_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_search_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_msgfree referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_err2string referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_entry referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_entry referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_attribute referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_attribute referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_values_len referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_value_free_len referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_dn referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_memfree referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ber_free referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertOpenStore@20 referenced in function _capi_open_store&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertCloseStore@8 referenced in function _capi_find_key&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertEnumCertificatesInStore@8 referenced in function _capi_find_cert&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertFindCertificateInStore@24 referenced in function _capi_find_cert&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertDuplicateCertificateContext@4 referenced in function _capi_load_ssl_client_cert&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertGetCertificateContextProperty@16 referenced in function _capi_cert_get_fname&lt;br /&gt;1&amp;gt;C:\work.zzig\out\x86_debug\update_host.exe : fatal error LNK1120: 23 unresolved externals&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;이 문제는&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;CURL_STATICLIB&lt;/code&gt;&amp;nbsp;전처리기를 정의하면 됩니다. 아래 처럼&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;curl.h&lt;/code&gt;&amp;nbsp;를 include 하기 전에 정의해도 되고, project 설정파일에 정의해주어도 됩니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;#define CURL_STATICLIB&lt;br /&gt;#include &quot;curl/curl.h&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;사실 이 문제는 vcpkg 의 문제가 아니라 curl 라이브러리 구현상의 특징이며&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;curl/curl.h&lt;/code&gt;&amp;nbsp;파일에 관련된 코드가 있습니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;/*&lt;br /&gt;* libcurl external API function linkage decorations.&lt;br /&gt;*/&lt;br /&gt;&lt;br /&gt;#ifdef CURL_STATICLIB&lt;br /&gt;#  define CURL_EXTERN&lt;br /&gt;#elif defined(WIN32) || defined(_WIN32) || defined(__SYMBIAN32__)&lt;br /&gt;#  if defined(BUILDING_LIBCURL)&lt;br /&gt;#    define CURL_EXTERN  __declspec(dllexport)&lt;br /&gt;#  else&lt;br /&gt;#    define CURL_EXTERN  __declspec(dllimport)&lt;br /&gt;#  endif&lt;br /&gt;#elif defined(BUILDING_LIBCURL) &amp;amp;&amp;amp; defined(CURL_HIDDEN_SYMBOLS)&lt;br /&gt;#  define CURL_EXTERN CURL_EXTERN_SYMBOL&lt;br /&gt;#else&lt;br /&gt;#  define CURL_EXTERN&lt;br /&gt;#endif&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/h1&gt;&lt;h3 style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 1.25em; line-height: 1.25; margin-bottom: 16px; margin-top: 24px;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#crypt32lib-에러&quot; id=&quot;user-content-crypt32lib-에러&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;crypt32.lib 에러&lt;/h3&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;하지만 여전히 또 다른 링크에러들이 발생합니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;&amp;gt;libcurl.lib(schannel.obj) : error LNK2019: unresolved external symbol __imp__CertFreeCertificateContext@4 referenced in function _schannel_connect_step3&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2001: unresolved external symbol __imp__CertFreeCertificateContext@4&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_init referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_unbind_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_set_option referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_simple_bind_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_search_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_msgfree referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_err2string referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_entry referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_entry referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_attribute referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_attribute referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_values_len referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_value_free_len referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_dn referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_memfree referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ber_free referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertOpenStore@20 referenced in function _capi_open_store&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertCloseStore@8 referenced in function _capi_find_key&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertEnumCertificatesInStore@8 referenced in function _capi_find_cert&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertFindCertificateInStore@24 referenced in function _capi_find_cert&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertDuplicateCertificateContext@4 referenced in function _capi_load_ssl_client_cert&lt;br /&gt;1&amp;gt;libeay32.lib(e_capi.obj) : error LNK2019: unresolved external symbol __imp__CertGetCertificateContextProperty@16 referenced in function _capi_cert_get_fname&lt;br /&gt;1&amp;gt;C:\work.zzig\out\x86_debug\update_host.exe : fatal error LNK1120: 23 unresolved externals&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;CertFindCertificateInStore&lt;/code&gt;&amp;nbsp;등의 함수는&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;crypt32.lib&lt;/code&gt;&amp;nbsp;에서 export 하는 함수이므로 아래처럼 해당 라이브러리를 link 해주거나 visual studio 의 link 옵션에서 지정해주면 됩니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;#define CURL_STATICLIB&lt;br /&gt;#include &quot;curl/curl.h&quot;&lt;br /&gt;#pragma comment(lib, &quot;crypt32.lib&quot;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/h1&gt;&lt;h3 style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 1.25em; line-height: 1.25; margin-bottom: 16px; margin-top: 24px;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#wldap32lib-에러&quot; id=&quot;user-content-wldap32lib-에러&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wldap32.lib 에러&lt;/h3&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;하지만 여전히 또 다른 링크에러들이 발생합니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_init referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_unbind_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_set_option referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_simple_bind_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_search_s referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_msgfree referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_err2string referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_entry referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_entry referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_attribute referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_attribute referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_values_len referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_value_free_len referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_dn referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_memfree referenced in function __ldap_free_urldesc&lt;br /&gt;1&amp;gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ber_free referenced in function __ldap_free_urldesc&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal; margin-bottom: 16px;&quot;&gt;이 에러는 아래처럼&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;wldap32.lib&lt;/code&gt;&amp;nbsp;을 link 해주면 해결됩니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;#define CURL_STATICLIB&lt;br /&gt;#include &quot;curl/curl.h&quot;&lt;br /&gt;#pragma comment(lib, &quot;crypt32.lib&quot;)&lt;br /&gt;#pragma comment(lib, &quot;wldap32.lib&quot;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/h1&gt;&lt;h3 style=&quot;box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 1.25em; line-height: 1.25; margin-bottom: 16px; margin-top: 24px;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/vcpkg.md#lnk4099-링크-경고&quot; id=&quot;user-content-lnk4099-링크-경고&quot; style=&quot;box-sizing: border-box; color: #0366d6; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration-line: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LNK4099 링크 경고&lt;/h3&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(234, 236, 239); box-sizing: border-box; color: #24292e; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;pre style=&quot;background-color: #f6f8fa; border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; font-weight: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;1&amp;gt;libcurl.lib(file.obj) : warning LNK4099: PDB &#39;libcurl.pdb&#39; was not found with &#39;libcurl.lib(file.obj)&#39; or at &#39;C:\work.zzig\out\x86_release\libcurl.pdb&#39;; linking object as if no debug info&lt;br /&gt;1&amp;gt;libcurl.lib(timeval.obj) : warning LNK4099: PDB &#39;libcurl.pdb&#39; was not found with &#39;libcurl.lib(timeval.obj)&#39; or at &#39;C:\work.zzig\out\x86_release\libcurl.pdb&#39;; linking object as if no debug info&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-weight: normal;&quot;&gt;모든 설정을 다 하고 빌드하면&amp;nbsp;&lt;code style=&quot;background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;LNK4099&lt;/code&gt;&amp;nbsp;경고가 발생하는데, 이건 어떻게 해야할지 모르겠네요. 아시는 분은 알려주십셔 (ㅠ,.ㅠ)&lt;/div&gt;&lt;/h1&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/738801280702071607/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2017/05/vcpkg.html#comment-form' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/738801280702071607'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/738801280702071607'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2017/05/vcpkg.html' title='vcpkg 사용하기 '/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-4405374956010799091</id><published>2017-02-15T10:48:00.000-08:00</published><updated>2017-02-15T10:48:23.075-08:00</updated><title type='text'>ASSERT, ASSERT, ASSERT</title><content type='html'>&lt;div style=&quot;border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;아래의 코드를 봅시다. busy_write 라는 전역변수를 통해서 아주 간단한 배타적 접근을 구현하고 있습니다.&lt;/div&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;int busy_write = 0;&lt;br /&gt;int value_write = 0;&lt;br /&gt;&lt;br /&gt;int funcA()&lt;br /&gt;{&lt;br /&gt;    //&lt;br /&gt;    //  #1 lock 을 걸어주고&lt;br /&gt;    //&lt;br /&gt;    if (1 == InterlockedCompareExchange(&amp;amp;busy_write, 1, 0))&lt;br /&gt;    {&lt;br /&gt;        goto Cleanup;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //&lt;br /&gt;    //  #2 뭔가 열심히 복잡한 작업을 하고, value_write 값을 갱신합니다.&lt;br /&gt;    //&lt;br /&gt;    ...&lt;br /&gt;    value_write++;&lt;br /&gt;    ...&lt;br /&gt;&lt;br /&gt;    //&lt;br /&gt;    //  #3 이 ASSERT 가 필요한가?&lt;br /&gt;    //&lt;br /&gt;    ASSERT(1 == StreamContext-&amp;gt;busy_write);&lt;br /&gt;&lt;br /&gt;Cleanup:&lt;br /&gt;    //&lt;br /&gt;    //  #4 busy_write 를 다시 0 으로.&lt;br /&gt;    //&lt;br /&gt;    InterlockedAnd(&amp;amp;busy_write, 0);&lt;br /&gt;    return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;코드 #3 에 있는&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;ASSERT&lt;/code&gt;&amp;nbsp;는 별로 필요없어 보입니다. 위에서 busy_write 를 1로 변경한 상태이기 때문에 언제나&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;true&lt;/code&gt;&amp;nbsp;입니다. 따라서 당연히 ASSERT 를 넣는것이 이해가 되지 않을 수도 있습니다. 하지만 시간이 흘러, 어찌 어찌하다 보니 이 함수가 #2 에서 재귀호출을 하도록 수정되어버렸다고 가정해 봅시다. 어떻게 될까요?&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;#2 에서 재귀호출이 발생하면 #4 로 jump 하게 될것이고, busy_write 를 0 으로 변경한 후 리턴될겁니다. 그럼 원래 호출했던 코드에서는 #3 ASSERT 에 걸리게 되고, 개발자는 바로 이 코드에 문제가 있음을 알아챌 수 있을겁니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;만일 #3 에 ASSERT 가 없었다면 어떻게 되었을까요? 아마 코드의 문제를 인지하고, 디버깅 하는데 ASSERT 가 있었던 상황보다 분명히 더 많은 시간이 소요될 겁니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;ASSERT 를 사용하는 규칙은, 당연히 확실한 상태라고 믿어 의심치 않아서, ASSERT 가 전혀 필요없어 보이는, 그런코드에 ASSERT 를 사용하는것입니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;가끔 강의를 하거나 코드 리뷰를 할때 ASSERT 사용을 가볍게 여기는 개발자분들을 많이 봐서, 오늘 겪은 좋은 예가 있길래 글로 남겼습니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px;&quot;&gt;#초보_&lt;em style=&quot;box-sizing: border-box;&quot;&gt;개발자_&lt;/em&gt;참고용 #손가락이_아플때까지&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/4405374956010799091/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2017/02/assert-assert-assert.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/4405374956010799091'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/4405374956010799091'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2017/02/assert-assert-assert.html' title='ASSERT, ASSERT, ASSERT'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-7628480908283198159</id><published>2017-02-13T23:33:00.000-08:00</published><updated>2017-02-13T23:33:46.436-08:00</updated><title type='text'>FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO</title><content type='html'>&lt;h1 style=&quot;border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin-bottom: 16px; margin-left: 0px; margin-right: 0px; margin-top: 0px !important; padding-bottom: 0.3em;&quot;&gt;&lt;a href=&quot;https://github.com/Microsoft/Windows-driver-samples/blob/master/filesys/miniFilter/delete/delete.c&quot; style=&quot;box-sizing: border-box; color: #4078c0; font-size: 16px; text-decoration: none;&quot;&gt;delete 미니필터 샘플&lt;/a&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;을 보면 아래와 같이&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;IRP_MJ_SET_INFORMATION&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;콜백 핸들러를 등록할때&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;를 사용하는 것을 확인할 수 있다.&lt;/span&gt;&lt;/h1&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;    CONST FLT_OPERATION_REGISTRATION Callbacks[] = {&lt;br /&gt;        ...&lt;br /&gt;        { IRP_MJ_SET_INFORMATION,&lt;br /&gt;        FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO,&lt;br /&gt;        DfPreSetInfoCallback,&lt;br /&gt;        DfPostSetInfoCallback },&lt;br /&gt;        ...&lt;br /&gt;        { IRP_MJ_OPERATION_END }&lt;br /&gt;    };&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;이유가 궁금해서 검색을 해보니 관련된&amp;nbsp;&lt;a href=&quot;https://www.osronline.com/showthread.cfm?link=238116&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;질문과 답&lt;/a&gt;이 있었다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;내용을 정리해두자면, On demand paging 을 구현하기 위해 VMM(Virtual Memory Manager)이 생성한 IRP 기반의 I/O 요청이 Paging I/O 이다. IRP_MJ_CREATE, IRP_MJ_CLEAN_UP 에는 Paging I/O 가 없고, Paging I/O 를 지원하는 I/O 는 아래와 같다.&lt;/div&gt;&lt;ul style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;IRP_MJ_READ&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;IRP_MJ_WRITE&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;IRP_MJ_SET_INFORMATION&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;IRP_MJ_QUERY_INFORMATION&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;IRP_MJ_READ 나 IRP_MJ_WRITE 의 는 Paging I/O 를 지원하는 것이 당연하고, IRP_MJ_SET_INFORMATION 이나 IRP_MJ_QUERY_INFORMATION 은 메모리 매니저가 섹션 객체를 생성하거나 접근할 때 필요할것이다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;해당 샘플(delete)의 경우 파일 삭제를 식별하기 위해 IRP_MJ_SET_INFORMATION 콜백을 등록하고, FileDispositionInformation, FileDispositionInformationEx 를 모니터링 한다. 이 I/O 는 Paging I/O 와는 상관없기때문에&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO&lt;/code&gt;&amp;nbsp;를 사용한 것이다.&lt;/div&gt;&lt;h1 style=&quot;border-bottom: 1px solid rgb(238, 238, 238); box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; line-height: 1.25; margin: 24px 0px 16px; padding-bottom: 0.3em;&quot;&gt;&lt;a aria-hidden=&quot;true&quot; class=&quot;anchor&quot; href=&quot;https://github.com/somma/somma.github.io/blob/master/docs/minifilter_dev/delete_sample.md#참고&quot; id=&quot;user-content-참고&quot; style=&quot;box-sizing: border-box; color: #4078c0; float: left; line-height: 1; margin-left: -20px; padding-right: 4px; text-decoration: none;&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고&lt;/h1&gt;&lt;ul style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 0px !important; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;&lt;a href=&quot;http://www.osronline.com/article.cfm?article=17#Q25&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;IFS FAQ&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;&lt;a href=&quot;https://www.osronline.com/showthread.cfm?link=238116&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;[FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO] Why is this flag used here? (minifilter)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/7628480908283198159/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2017/02/fltfloperationregistrationskippagingio.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/7628480908283198159'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/7628480908283198159'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2017/02/fltfloperationregistrationskippagingio.html' title='FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-1880725637995640369</id><published>2017-01-14T04:38:00.003-08:00</published><updated>2017-01-15T21:30:33.782-08:00</updated><title type='text'>dwDesiredAccess 와 dwShareMode 정확히 사용하기</title><content type='html'>&lt;div style=&quot;box-sizing: border-box; color: #333333; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; margin-bottom: 16px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;이 글에서는&amp;nbsp;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;CreateFile()&lt;/a&gt;&amp;nbsp;API의 두번째, 세번째 파라미터인&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwDesiredAccess&lt;/code&gt;,&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwShareMode&lt;/code&gt;&amp;nbsp;에 대해서 정확히 파악해보고자 합니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;먼저 퀴즈로 시작해 보겠습니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;A 라는 프로세스는&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;abc.log&lt;/code&gt;&amp;nbsp;파일에 데이터를 쓰고, B 라는 프로세스는 해당 파일을 읽어서 화면에 출력하는 코드를 작성한다고 가정합니다. A 프로세스는&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;abc.log&lt;/code&gt;&amp;nbsp;파일에 데이터를 쓰기 위해&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;FILE_GENERIC_WRITE&lt;/code&gt;&amp;nbsp;접근 권한을 요청하고, B 프로세스가 해당 로그파일을 읽을 수 있도록&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;FILE_SHARE_READ&lt;/code&gt;&amp;nbsp;공유권한을 요청합니다. ( A 프로세스가 먼저 실행된다고 가정합니다 )&lt;/div&gt;&lt;div class=&quot;highlight highlight-source-c&quot; style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; A 프로세스의 코드&lt;/span&gt;&lt;br /&gt;HANDLE fileHandle = CreateFile(&lt;span class=&quot;pl-s&quot; style=&quot;box-sizing: border-box; color: #183691;&quot;&gt;&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;abc.log&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt;                               FILE_WRITE_DATA,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 로그를 쓰려면 쓰기 권한으로 파일을 열어야죠.&lt;/span&gt;&lt;br /&gt;                               FILE_SHARE_READ,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; B 프로세스가 해당 파일을 읽어야 하니까 `공유 읽기` 를.&lt;/span&gt;&lt;br /&gt;                               ...&lt;br /&gt;                               ...);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; B 프로세스의 코드&lt;/span&gt;&lt;br /&gt;HANDLE fileHandle = CreateFile(&lt;span class=&quot;pl-s&quot; style=&quot;box-sizing: border-box; color: #183691;&quot;&gt;&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;abc.log&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt;                               FILE_READ_DATA,      &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 로그 파일을 읽어야 하니까&lt;/span&gt;&lt;br /&gt;                               FILE_SHARE_READ,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; A 프로세스의 코드랑 그냥 같은걸로???&lt;/span&gt;&lt;br /&gt;                               ...&lt;br /&gt;                               ...);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;이 코드는 생각대로, 잘 동작하지 않습니다. 바로 무엇이 문제인지 대답하실 수 있다면 더이상 이 글을 읽지 않으셔도 됩니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;..&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;CreateFile()&lt;/a&gt;&amp;nbsp;함수는 Windows API 중 가장 많이 사용되는 API 중 하나이고, 가장 어렵고, 가장 많은것을 알아야 하는 API 중 하나입니다.&lt;/div&gt;&lt;div class=&quot;highlight highlight-source-c&quot; style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;&quot;&gt;HANDLE WINAPI &lt;span class=&quot;pl-en&quot; style=&quot;box-sizing: border-box; color: #795da3;&quot;&gt;CreateFile&lt;/span&gt;(&lt;br /&gt;  _In_     LPCTSTR               lpFileName,&lt;br /&gt;  _In_     DWORD                 dwDesiredAccess,&lt;br /&gt;  _In_     DWORD                 dwShareMode,&lt;br /&gt;  _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,&lt;br /&gt;  _In_     DWORD                 dwCreationDisposition,&lt;br /&gt;  _In_     DWORD                 dwFlagsAndAttributes,&lt;br /&gt;  _In_opt_ HANDLE                hTemplateFile&lt;br /&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;두번째&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwDesiredAccess&lt;/code&gt;&amp;nbsp;는 해당 파일에 어떤 권한으로 접근을 하려고 하는지를 명시합니다 (읽기를 할것인지, 쓰기를 할것인지, 삭제를 할것인지). 세번째&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwShareMode&lt;/code&gt;&amp;nbsp;는 해당 파일에 접근하고있는 동안 다른 프로세스가 해당 파일에 접근하고자 하는 경우 어떤 권한을 허용할지를 명시합니다 (읽기를 허용할지, 쓰기를 허용할지, 삭제를 용할지).&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;Windows Kernel 은 CreateFile 요청이 발생하면 다양하고, 복잡한 함수호출을 통해서 특정 파일에 대한 오브젝트(FILE_OBJECT)를 생성하거나 이미 생성된 FILE_OBJECT 에 접근합니다. FILE_OBJECT 는 Windows 커널이 파일을 표현하기 위해서 커널내부적으로 사용하는 자료구조이며, 특정프로세스에 종속되지 않는 커널전체에서 공유되는 자원입니다. 매번 파일을 열고자 할때마다 새롭게 FILE_OBJECT 를 생성하면 효율적이지 못할테니까요. 응용프로그램이 사용하는 HANDLE 은 Windows 커널이 관리하는 오브젝트 배열의 인덱스 값 같은 것입니다. 이에 대한 자세한 내용은&amp;nbsp;&lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/bb963901.aspx&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;Windows Internals&lt;/a&gt;&amp;nbsp;또는 제&amp;nbsp;&lt;a href=&quot;http://egloos.zum.com/somma/v/2947301&quot; style=&quot;box-sizing: border-box; color: #4078c0; text-decoration: none;&quot;&gt;예전 블로그 포스트&lt;/a&gt;를 참고하시면 도움이 될것 같습니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;커널은 특정 오브젝트로의 접근 요청을 받으면 해당 오브젝트에 접근이 가능한 권한이 있는 지 확인하는 과정을 거치는데, 파일의 경우 추가적으로 요청권한 및 공유권한을 확인하는 과정을 거칩니다. 이 공유위반이 발생하면&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;ERROR_SHARING_VIOLATION&lt;/code&gt;에러코드를 리턴하게 됩니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;Windows Kernel 이 FILE_OBJECT 에 요청된 접근권한(&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwDesiredAccess&lt;/code&gt;)과 공유권한(&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwShareMode&lt;/code&gt;)가 유효한지 판단하는 과정을 자세히 확인해보겠습니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;FILE_OBJECT 는 매우 복잡하고, 알아야 할것도 많고, 모르는것도 굉장히 많지만, 우리에게 필요한 필드는 아래와 같습니다.&lt;/div&gt;&lt;pre lang=&quot;text&quot; style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;kd&amp;gt; dt nt!_file_object&lt;br /&gt;   ...&lt;br /&gt;   +0x04a ReadAccess       : UChar&lt;br /&gt;   +0x04b WriteAccess      : UChar&lt;br /&gt;   +0x04c DeleteAccess     : UChar&lt;br /&gt;   +0x04d SharedRead       : UChar&lt;br /&gt;   +0x04e SharedWrite      : UChar&lt;br /&gt;   +0x04f SharedDelete     : UChar&lt;br /&gt;   ...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;별다른 설명이 없더라도&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwDesiredAccess&lt;/code&gt;&amp;nbsp;와&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwShareMode&lt;/code&gt;&amp;nbsp;인걸 알 수 있을 것입니다. FILE_OBJECT 의 값들과 우리가 입력한 파라미터가 매칭되는 방식은 아래 코드와 같습니다.&lt;/div&gt;&lt;div class=&quot;highlight highlight-source-c&quot; style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;&quot;&gt;FILE_OBJECT.ReadAccess = (BOOLEAN) ((DesiredAccess &amp;amp; (FILE_EXECUTE| FILE_READ_DATA)) != &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;0&lt;/span&gt;);&lt;br /&gt;FILE_OBJECT.WriteAccess = (BOOLEAN) ((DesiredAccess &amp;amp; (FILE_WRITE_DATA | FILE_APPEND_DATA)) != &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;0&lt;/span&gt;);&lt;br /&gt;FILE_OBJECT.DeleteAccess = (BOOLEAN) ((DesiredAccess &amp;amp; DELETE) != &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;0&lt;/span&gt;);&lt;br /&gt;...&lt;br /&gt;FILE_OBJECT.SharedRead = (BOOLEAN) ((DesiredShareAccess &amp;amp; FILE_SHARE_READ) != &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;0&lt;/span&gt;);&lt;br /&gt;FILE_OBJECT.SharedWrite = (BOOLEAN) ((DesiredShareAccess &amp;amp; FILE_SHARE_WRITE) != &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;0&lt;/span&gt;);&lt;br /&gt;FILE_OBJECT.SharedDelete = (BOOLEAN) ((DesiredShareAccess &amp;amp; FILE_SHARE_DELETE) != &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;0&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;Windows kernel 은 유효성 여부를 검사와 해당 FILE_OBJECT 에 대한 요청들을 추적하기 위해서&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;SHARE_ACCESS&lt;/code&gt;라는 자료구조를 사용하는데, windbg 를 통해서 확인할 수 있습니다. FILE_OBJECT 접근에 성공하면 각 필드를 업데이트 합니다.&lt;/div&gt;&lt;pre lang=&quot;text&quot; style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;kd&amp;gt; dt nt!share_access&lt;br /&gt;   +0x000 OpenCount        : Uint4B&lt;br /&gt;   +0x004 Readers          : Uint4B&lt;br /&gt;   +0x008 Writers          : Uint4B&lt;br /&gt;   +0x00c Deleters         : Uint4B&lt;br /&gt;   +0x010 SharedRead       : Uint4B&lt;br /&gt;   +0x014 SharedWrite      : Uint4B&lt;br /&gt;   +0x018 SharedDelete     : Uint4B&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;C 코드로 변경해보면 아래와 같고, 각각의 의미는 코드의 주석으로 표현해 두었습니다.&lt;/div&gt;&lt;div class=&quot;highlight highlight-source-c&quot; style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;span class=&quot;pl-k&quot; style=&quot;box-sizing: border-box; color: #a71d5d;&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;pl-k&quot; style=&quot;box-sizing: border-box; color: #a71d5d;&quot;&gt;struct&lt;/span&gt; _SHARE_ACCESS&lt;br /&gt;{&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; OpenCount;     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 파일 열기 횟수&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; Readers;       &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 읽기 권한 횟수&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; Writers;       &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 쓰기 권한 횟수&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; Deleters;      &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 삭제 권한 횟수&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; SharedRead;    &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 공유 읽기 권한 횟수&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; SharedWrite;   &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 공유 쓰기 권한 횟수&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;pl-c1&quot; style=&quot;box-sizing: border-box; color: #0086b3;&quot;&gt;uint32_t&lt;/span&gt; SharedDelete;  &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 성공한 공유 삭제 권한 횟수&lt;/span&gt;&lt;br /&gt;} SHARE_ACCESS;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;SHARE_ACCESS&lt;/code&gt;&amp;nbsp;와&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwDesiredAccess&lt;/code&gt;,&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;dwShareMode&lt;/code&gt;&amp;nbsp;간의 관계는 아래와 같이 정리 할 수 있습니다.&lt;/div&gt;&lt;pre lang=&quot;text&quot; style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;[규칙 #1]&lt;br /&gt;`SHARE_ACCESS.Shared[Read|Write|Delete]` 가 OpenCount 보다 작고,&lt;br /&gt;`[Read|Write|Delete]` 권한을 요청하는 경우 SHARE VIOLATION.&lt;br /&gt;&lt;br /&gt;기존에 생성된 공유권한이 없다면 공유권한과 매칭되는 접근권한을 요청 할 수 없습니다.&lt;br /&gt;예를 들어 이전 호출 중 `FILE_SHARE_READ` 공유권한 요청이 없었다면, `FILE_READ_DATA` 접근 권한을 요청할 수 없습니다.&lt;br /&gt;&lt;br /&gt;[규칙 #2]&lt;br /&gt;`SHARE_ACCESS.[Readers|Writers|Deleters]` 가 0 이 아닌데,&lt;br /&gt;요청 된 공유권한이 `FILE_SHARE_[READ|WRITE|DELETE]` 가 0 인 경우 SHARE VIOLATION.&lt;br /&gt;&lt;br /&gt;기존에 요청된 접근권한과 매칭되는 공유권한이 현재 요청에 없다면 요청에 실패합니다.&lt;br /&gt;예를 들어 이전 호출 중 `FILE_READ_DATA` 접근권한 요청이 있었다면, 현재 요청에는 반드시 `FILE_SHARE_READ` 공유권한이 포함되어 있어야 합니다.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;앞에서 보여드렸던 아래의 코드는&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;ERROR_SHARING_VIOLATION&lt;/code&gt;&amp;nbsp;를 리턴하게 됩니다.&lt;/div&gt;&lt;div class=&quot;highlight highlight-source-c&quot; style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; A 프로세스의 코드&lt;/span&gt;&lt;br /&gt;HANDLE fileHandle = CreateFile(&lt;span class=&quot;pl-s&quot; style=&quot;box-sizing: border-box; color: #183691;&quot;&gt;&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;abc.log&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt;                               FILE_WRITE_DATA,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 로그를 쓰려면 쓰기 권한으로 파일을 열어야죠.&lt;/span&gt;&lt;br /&gt;                               FILE_SHARE_READ,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; B 프로세스가 해당 파일을 읽어야 하니까 `공유 읽기` 를.&lt;/span&gt;&lt;br /&gt;                               ...&lt;br /&gt;                               ...);&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; B 프로세스의 코드&lt;/span&gt;&lt;br /&gt;HANDLE fileHandle = CreateFile(&lt;span class=&quot;pl-s&quot; style=&quot;box-sizing: border-box; color: #183691;&quot;&gt;&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;abc.log&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt;                               FILE_READ_DATA,      &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 로그 파일을 읽어야 하니까&lt;/span&gt;&lt;br /&gt;                               FILE_SHARE_READ,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; A 프로세스의 코드랑 그냥 같은걸로???&lt;/span&gt;&lt;br /&gt;                               ...&lt;br /&gt;                               ...);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;왜 그럴까요?&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;A 프로세스의 코드가 실행되면 해당 FILE_OBJECT 의 상태는 아래와 같습니다.&lt;/div&gt;&lt;pre lang=&quot;text&quot; style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; overflow: visible; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;SHARE_ACCESS.OpenCount = 1;&lt;br /&gt;&lt;br /&gt;SHARE_ACCESS.Readers = 0;&lt;br /&gt;SHARE_ACCESS.Writers = 1;       // FILE_GENERIC_WRITE 를 지정했으니까.&lt;br /&gt;SHARE_ACCESS.Deleters = 0;&lt;br /&gt;&lt;br /&gt;SHARE_ACCESS.SharedRead = 1;    // FILE_SHARE_READ 를 정했으니까.&lt;br /&gt;SHARE_ACCESS.SharedWrite = 0;&lt;br /&gt;SHARE_ACCESS.SharedDelete = 0;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;B 프로세스의 코드가 실행되는 시점에 공유위반 검사를 해보면&lt;/div&gt;&lt;ul style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px; margin-top: 0px; padding-left: 2em;&quot;&gt;&lt;li style=&quot;box-sizing: border-box;&quot;&gt;규칙 #1,&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;SHARE_ACCESS.SharedRead &amp;lt; SHARE_ACCESS.OpenCount&lt;/code&gt;&amp;nbsp;조건이 거짓이므로 공유위반 아님&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin-top: 0.25em;&quot;&gt;규칙 #2,&amp;nbsp;&lt;code style=&quot;background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;&quot;&gt;SHARE_ACCESS.Writers != 0&lt;/code&gt;&amp;nbsp;이고, 요청된 공유모드가 FILE_SHARE_WRITE 가 0 입니다. (FILE_SHARE_READ 만 지정했으니까요)&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;즉 [규칙 #2] 에 의해서 공유위반입니다.&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;따라서 위의 코드는 아래처럼 작성해야 합니다.&lt;/div&gt;&lt;div class=&quot;highlight highlight-source-c&quot; style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; A 프로세스의 코드&lt;/span&gt;&lt;br /&gt;HANDLE fileHandle = CreateFile(&lt;span class=&quot;pl-s&quot; style=&quot;box-sizing: border-box; color: #183691;&quot;&gt;&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;abc.log&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt;                               FILE_WRITE_DATA,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 로그를 쓰려면 쓰기 권한으로 파일을 열어야죠.&lt;/span&gt;&lt;br /&gt;                               FILE_SHARE_READ,     &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; B 프로세스가 해당 파일을 읽어야 하니까 `공유 읽기` 를.&lt;/span&gt;&lt;br /&gt;                               ...&lt;br /&gt;                               ...);&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; B 프로세스의 코드&lt;/span&gt;&lt;br /&gt;HANDLE fileHandle = CreateFile(&lt;span class=&quot;pl-s&quot; style=&quot;box-sizing: border-box; color: #183691;&quot;&gt;&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;abc.log&lt;span class=&quot;pl-pds&quot; style=&quot;box-sizing: border-box;&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;br /&gt;                               FILE_READ_DATA,      &lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box; color: #969896;&quot;&gt;&lt;span class=&quot;pl-c&quot; style=&quot;box-sizing: border-box;&quot;&gt;//&lt;/span&gt; 로그 파일을 읽어야 하니까&lt;/span&gt;&lt;br /&gt;                               FILE_SHARE_READ | FILE_SHARE_WRITE,&lt;br /&gt;                               ...&lt;br /&gt;                               ...);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; margin-bottom: 16px;&quot;&gt;사실 상식적으로 생각해보면 굉장히 당연한 규칙입니다만, 코드를 말로 풀어서 설명하다보니 쓸데없이 길어진 것 같습니다. 의외로 예제로 보여드린 코드와 유사한 실수를 저지르는 경우가 많고, 정확히 규칙을 모르는 분들이 많은것 같습니다 (저도 정확히 모르고 대충 썼습니다).&lt;/div&gt;&lt;div style=&quot;box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;;&quot;&gt;매번 정확히 한번 따져봐야지 생각만 하고 미루다가 드디어 정확히 알게된것 같아 기쁩니다 ^__^&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/1880725637995640369/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2017/01/createfile-dwdesiredaccess-dwsharemode.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/1880725637995640369'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/1880725637995640369'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2017/01/createfile-dwdesiredaccess-dwsharemode.html' title='dwDesiredAccess 와 dwShareMode 정확히 사용하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-5351022467766419048</id><published>2016-11-28T20:38:00.001-08:00</published><updated>2016-11-28T20:51:33.944-08:00</updated><title type='text'>FLT_STREAM_CONTEXT vs FLT_STREAMHANDLE_CONTEXT</title><content type='html'>몇년만에 드라이버코드를 작성할 일이 있어서 공부중입니다.&lt;br /&gt;파일시스템이나 미니필터는 바닥부터 작성해본적이 없어서 공부하기가 쉽지 않네요.&lt;br /&gt;FLT_STREAM_CONTEXT 가 FLT_STREAMHANDLE_CONTEXT 뭐가 다른건지 헤깔려서 찾아보다가 정리했습니다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;style&gt;@font-face {   font-family: octicons-anchor;   src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format(&#39;woff&#39;); }  * {     box-sizing: border-box; }  body {     width: 980px;     margin-right: auto;     margin-left: auto; }  body .markdown-body {     padding: 45px;     border: 1px solid #ddd;     border-radius: 3px;     word-wrap: break-word; }  pre {     font: 12px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; }  .markdown-body {   -webkit-text-size-adjust: 100%;   text-size-adjust: 100%;   color: #333;   font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Segoe UI&quot;, Arial, freesans, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;   font-size: 16px;   line-height: 1.6;   word-wrap: break-word; }  .markdown-body a {   background-color: transparent; }  .markdown-body a:active, .markdown-body a:hover {   outline: 0; }  .markdown-body strong {   font-weight: bold; }  .markdown-body h1 {   font-size: 2em;   margin: 0.67em 0; }  .markdown-body img {   border: 0; }  .markdown-body hr {   box-sizing: content-box;   height: 0; }  .markdown-body pre {   overflow: auto; }  .markdown-body code, .markdown-body kbd, .markdown-body pre {   font-family: monospace, monospace;   font-size: 1em; }  .markdown-body input {   color: inherit;   font: inherit;   margin: 0; }  .markdown-body html input[disabled] {   cursor: default; }  .markdown-body input {   line-height: normal; }  .markdown-body input[type=&quot;checkbox&quot;] {   box-sizing: border-box;   padding: 0; }  .markdown-body table {   border-collapse: collapse;   border-spacing: 0; }  .markdown-body td, .markdown-body th {   padding: 0; }  .markdown-body input {   font: 13px / 1.4 Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; }  .markdown-body a {   color: #4078c0;   text-decoration: none; }  .markdown-body a:hover, .markdown-body a:active {   text-decoration: underline; }  .markdown-body hr {   height: 0;   margin: 15px 0;   overflow: hidden;   background: transparent;   border: 0;   border-bottom: 1px solid #ddd; }  .markdown-body hr:before {   display: table;   content: &quot;&quot;; }  .markdown-body hr:after {   display: table;   clear: both;   content: &quot;&quot;; }  .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 {   margin-top: 15px;   margin-bottom: 15px;   line-height: 1.1; }  .markdown-body h1 {   font-size: 30px; }  .markdown-body h2 {   font-size: 21px; }  .markdown-body h3 {   font-size: 16px; }  .markdown-body h4 {   font-size: 14px; }  .markdown-body h5 {   font-size: 12px; }  .markdown-body h6 {   font-size: 11px; }  .markdown-body blockquote {   margin: 0; }  .markdown-body ul, .markdown-body ol {   padding: 0;   margin-top: 0;   margin-bottom: 0; }  .markdown-body ol ol, .markdown-body ul ol {   list-style-type: lower-roman; }  .markdown-body ul ul ol, .markdown-body ul ol ol, .markdown-body ol ul ol, .markdown-body ol ol ol {   list-style-type: lower-alpha; }  .markdown-body dd {   margin-left: 0; }  .markdown-body code {   font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;   font-size: 12px; }  .markdown-body pre {   margin-top: 0;   margin-bottom: 0;   font: 12px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; }  .markdown-body .select::-ms-expand {   opacity: 0; }  .markdown-body .octicon {   font: normal normal normal 16px/1 octicons-anchor;   display: inline-block;   text-decoration: none;   text-rendering: auto;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale;   -webkit-user-select: none;   -moz-user-select: none;   -ms-user-select: none;   user-select: none; }  .markdown-body .octicon-link:before {   content: &#39;\f05c&#39;; }  .markdown-body:before {   display: table;   content: &quot;&quot;; }  .markdown-body:after {   display: table;   clear: both;   content: &quot;&quot;; }  .markdown-body&gt;*:first-child {   margin-top: 0 !important; }  .markdown-body&gt;*:last-child {   margin-bottom: 0 !important; }  .markdown-body a:not([href]) {   color: inherit;   text-decoration: none; }  .markdown-body .anchor {   display: inline-block;   padding-right: 2px;   margin-left: -18px; }  .markdown-body .anchor:focus {   outline: none; }  .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 {   margin-top: 1em;   margin-bottom: 16px;   font-weight: bold;   line-height: 1.4; }  .markdown-body h1 .octicon-link, .markdown-body h2 .octicon-link, .markdown-body h3 .octicon-link, .markdown-body h4 .octicon-link, .markdown-body h5 .octicon-link, .markdown-body h6 .octicon-link {   color: #000;   vertical-align: middle;   visibility: hidden; }  .markdown-body h1:hover .anchor, .markdown-body h2:hover .anchor, .markdown-body h3:hover .anchor, .markdown-body h4:hover .anchor, .markdown-body h5:hover .anchor, .markdown-body h6:hover .anchor {   text-decoration: none; }  .markdown-body h1:hover .anchor .octicon-link, .markdown-body h2:hover .anchor .octicon-link, .markdown-body h3:hover .anchor .octicon-link, .markdown-body h4:hover .anchor .octicon-link, .markdown-body h5:hover .anchor .octicon-link, .markdown-body h6:hover .anchor .octicon-link {   visibility: visible; }  .markdown-body h1 {   padding-bottom: 0.3em;   font-size: 2.25em;   line-height: 1.2;   border-bottom: 1px solid #eee; }  .markdown-body h1 .anchor {   line-height: 1; }  .markdown-body h2 {   padding-bottom: 0.3em;   font-size: 1.75em;   line-height: 1.225;   border-bottom: 1px solid #eee; }  .markdown-body h2 .anchor {   line-height: 1; }  .markdown-body h3 {   font-size: 1.5em;   line-height: 1.43; }  .markdown-body h3 .anchor {   line-height: 1.2; }  .markdown-body h4 {   font-size: 1.25em; }  .markdown-body h4 .anchor {   line-height: 1.2; }  .markdown-body h5 {   font-size: 1em; }  .markdown-body h5 .anchor {   line-height: 1.1; }  .markdown-body h6 {   font-size: 1em;   color: #777; }  .markdown-body h6 .anchor {   line-height: 1.1; }  .markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-body ol, .markdown-body dl, .markdown-body table, .markdown-body pre {   margin-top: 0;   margin-bottom: 16px; }  .markdown-body hr {   height: 4px;   padding: 0;   margin: 16px 0;   background-color: #e7e7e7;   border: 0 none; }  .markdown-body ul, .markdown-body ol {   padding-left: 2em; }  .markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown-body ol ul {   margin-top: 0;   margin-bottom: 0; }  .markdown-body li&gt;p {   margin-top: 16px; }  .markdown-body dl {   padding: 0; }  .markdown-body dl dt {   padding: 0;   margin-top: 16px;   font-size: 1em;   font-style: italic;   font-weight: bold; }  .markdown-body dl dd {   padding: 0 16px;   margin-bottom: 16px; }  .markdown-body blockquote {   padding: 0 15px;   color: #777;   border-left: 4px solid #ddd; }  .markdown-body blockquote&gt;:first-child {   margin-top: 0; }  .markdown-body blockquote&gt;:last-child {   margin-bottom: 0; }  .markdown-body table {   display: block;   width: 100%;   overflow: auto;   word-break: normal;   word-break: keep-all; }  .markdown-body table th {   font-weight: bold; }  .markdown-body table th, .markdown-body table td {   padding: 6px 13px;   border: 1px solid #ddd; }  .markdown-body table tr {   background-color: #fff;   border-top: 1px solid #ccc; }  .markdown-body table tr:nth-child(2n) {   background-color: #f8f8f8; }  .markdown-body img {   max-width: 100%;   box-sizing: content-box;   background-color: #fff; }  .markdown-body code {   padding: 0;   padding-top: 0.2em;   padding-bottom: 0.2em;   margin: 0;   font-size: 85%;   background-color: rgba(0,0,0,0.04);   border-radius: 3px; }  .markdown-body code:before, .markdown-body code:after {   letter-spacing: -0.2em;   content: &quot;\00a0&quot;; }  .markdown-body pre&gt;code {   padding: 0;   margin: 0;   font-size: 100%;   word-break: normal;   white-space: pre;   background: transparent;   border: 0; }  .markdown-body .highlight {   margin-bottom: 16px; }  .markdown-body .highlight pre, .markdown-body pre {   padding: 16px;   overflow: auto;   font-size: 85%;   line-height: 1.45;   background-color: #f7f7f7;   border-radius: 3px; }  .markdown-body .highlight pre {   margin-bottom: 0;   word-break: normal; }  .markdown-body pre {   word-wrap: normal; }  .markdown-body pre code {   display: inline;   max-width: initial;   padding: 0;   margin: 0;   overflow: initial;   line-height: inherit;   word-wrap: normal;   background-color: transparent;   border: 0; }  .markdown-body pre code:before, .markdown-body pre code:after {   content: normal; }  .markdown-body kbd {   display: inline-block;   padding: 3px 5px;   font-size: 11px;   line-height: 10px;   color: #555;   vertical-align: middle;   background-color: #fcfcfc;   border: solid 1px #ccc;   border-bottom-color: #bbb;   border-radius: 3px;   box-shadow: inset 0 -1px 0 #bbb; }  .markdown-body .pl-c {   color: #969896; }  .markdown-body .pl-c1, .markdown-body .pl-s .pl-v {   color: #0086b3; }  .markdown-body .pl-e, .markdown-body .pl-en {   color: #795da3; }  .markdown-body .pl-s .pl-s1, .markdown-body .pl-smi {   color: #333; }  .markdown-body .pl-ent {   color: #63a35c; }  .markdown-body .pl-k {   color: #a71d5d; }  .markdown-body .pl-pds, .markdown-body .pl-s, .markdown-body .pl-s .pl-pse .pl-s1, .markdown-body .pl-sr, .markdown-body .pl-sr .pl-cce, .markdown-body .pl-sr .pl-sra, .markdown-body .pl-sr .pl-sre {   color: #183691; }  .markdown-body .pl-v {   color: #ed6a43; }  .markdown-body .pl-id {   color: #b52a1d; }  .markdown-body .pl-ii {   background-color: #b52a1d;   color: #f8f8f8; }  .markdown-body .pl-sr .pl-cce {   color: #63a35c;   font-weight: bold; }  .markdown-body .pl-ml {   color: #693a17; }  .markdown-body .pl-mh, .markdown-body .pl-mh .pl-en, .markdown-body .pl-ms {   color: #1d3e81;   font-weight: bold; }  .markdown-body .pl-mq {   color: #008080; }  .markdown-body .pl-mi {   color: #333;   font-style: italic; }  .markdown-body .pl-mb {   color: #333;   font-weight: bold; }  .markdown-body .pl-md {   background-color: #ffecec;   color: #bd2c00; }  .markdown-body .pl-mi1 {   background-color: #eaffea;   color: #55a532; }  .markdown-body .pl-mdr {   color: #795da3;   font-weight: bold; }  .markdown-body .pl-mo {   color: #1d3e81; }  .markdown-body kbd {   display: inline-block;   padding: 3px 5px;   font: 11px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;   line-height: 10px;   color: #555;   vertical-align: middle;   background-color: #fcfcfc;   border: solid 1px #ccc;   border-bottom-color: #bbb;   border-radius: 3px;   box-shadow: inset 0 -1px 0 #bbb; }  .markdown-body .plan-price-unit {   color: #767676;   font-weight: normal; }  .markdown-body .task-list-item {   list-style-type: none; }  .markdown-body .task-list-item+.task-list-item {   margin-top: 3px; }  .markdown-body .task-list-item input {   margin: 0 0.35em 0.25em -1.6em;   vertical-align: middle; }  .markdown-body .plan-choice {   padding: 15px;   padding-left: 40px;   display: block;   border: 1px solid #e0e0e0;   position: relative;   font-weight: normal;   background-color: #fafafa; }  .markdown-body .plan-choice.open {   background-color: #fff; }  .markdown-body .plan-choice.open .plan-choice-seat-breakdown {   display: block; }  .markdown-body .plan-choice-free {   border-radius: 3px 3px 0 0; }  .markdown-body .plan-choice-paid {   border-radius: 0 0 3px 3px;   border-top: 0;   margin-bottom: 20px; }  .markdown-body .plan-choice-radio {   position: absolute;   left: 15px;   top: 18px; }  .markdown-body .plan-choice-exp {   color: #999;   font-size: 12px;   margin-top: 5px; }  .markdown-body .plan-choice-seat-breakdown {   margin-top: 10px;   display: none; }  .markdown-body :checked+.radio-label {   z-index: 1;   position: relative;   border-color: #4078c0; } &lt;/style&gt;&lt;title&gt;FLT_STREAM_CONTEXT vs FLT_STREAMHANDLE_CONTEXT&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;markdown-body&quot;&gt;&lt;h3&gt;&lt;a id=&quot;user-content-stream_context&quot; class=&quot;anchor&quot; href=&quot;#stream_context&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;STREAM_CONTEXT&lt;/h3&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;file stream 마다 붙일 수 있는 context. &lt;/li&gt;&lt;li&gt;FILE_OBJECT.FsContext 를 추적하는데 사용. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-streamhandle_context&quot; class=&quot;anchor&quot; href=&quot;#streamhandle_context&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;STREAMHANDLE_CONTEXT&lt;/h3&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;개개의 file open 시 생성되는 file object (I/O 서브시스템이 생성하는)마다 붙일 수 있는 context. &lt;/li&gt;&lt;li&gt;FILE_OBJECT 를 추적하는데 사용.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;hr&gt;&lt;br /&gt;&lt;h2&gt;&lt;a id=&quot;user-content-file-streams-stream-contexts-and-per-stream-contexts-msdn-원문&quot; class=&quot;anchor&quot; href=&quot;#file-streams-stream-contexts-and-per-stream-contexts-msdn-%EC%9B%90%EB%AC%B8&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;File Streams, Stream Contexts, and Per-Stream Contexts (&lt;a href=&quot;https://msdn.microsoft.com/windows/hardware/drivers/ifs/file-streams--stream-contexts--and-per-stream-contexts&quot;&gt;MSDN 원문&lt;/a&gt;)&lt;/h2&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-file-stream&quot; class=&quot;anchor&quot; href=&quot;#file-stream&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;File Stream&lt;/h3&gt;&lt;br /&gt;&lt;p&gt;파일 데이터를 저장하는데 사용되는 바이트 시퀀스이다. &lt;br /&gt;보통 파일은 하나의 file stream 을 가지는데, 요걸 파일의 default data stream 이라고 한다. &lt;br /&gt;그러나 multiple data stream 을 지원하는 파일시스템에서는 각각의 파일은 여러개의 file stream 을 가질 수 있다. &lt;br /&gt;그 중 하나는 default data stream 이고, 얘는 unnamed 이다. &lt;br /&gt;다른 놈들은 alternate data stream 이다. 파일을 열면, 실제로는 해당 파일의 스트림을 여는 것이다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;file system 이 최초로 파일을 열때, &lt;code&gt;file control block(FCB)&lt;/code&gt; 이나 &lt;code&gt;stream control block (SCB)&lt;/code&gt; 같은 &lt;br /&gt;file-system-specific stream context 구조체를 생성하고, 이 구조체의 주소를 file object 의 &lt;code&gt;FsContext&lt;/code&gt; 멤버에 저장한다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;로컬 파일시스템에서, 이미 열려있는 file streeam 이 다시 열리면 (shared read access 같은 경우로 인해), &lt;br /&gt;I/O 서브시스템은 새로운 file object 를 생성하지만, file system 은 새로운 stream context 를 생성하지는 않는다. &lt;br /&gt;따라서 로컬 파일시스템에서는 stream context pointer 는 file stream 을 식별하는 유니크한 값으로 사용될 수 있다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;per-stream context 를 지원하는 네트워크 파일시스템에서는 이미 열려있는 file stream 이 동일한 network share name 이나 IP 주소 등을 &lt;br /&gt;이용해서 다시 열린다면 로컬 파일시스템과 동일하게 동작한다. &lt;br /&gt;I/O 서브시스템은 새로운 file object 를 생성하지만 file system 은 새로운 stream context 를 생성하지 않고, &lt;br /&gt;두 file object 에 동일한 &lt;code&gt;FsContext&lt;/code&gt; 포인터를 할당한다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;그러나 file stream 이 서로 다른 경로로 열리는 경우 (다른 share name 또는 IP 가 다른 경우), file system 은 &lt;br /&gt;새로운 file stream context 를 생성한다. &lt;br /&gt;그러므로 per-stream context 를 지원하는 네트워크 파일시스템에서는 &lt;code&gt;FsContext&lt;/code&gt; 는 file stream 을 구분하는 &lt;br /&gt;유일한 값으로 사용될 수 없다.            &lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;code&gt;per-stream context&lt;/code&gt; 는 &lt;a href=&quot;https://msdn.microsoft.com/library/windows/hardware/ff547357&quot;&gt;FSRTL_PER_STREAM_CONTEXT&lt;/a&gt; 구조체를 멤버로 포함하는 &lt;br /&gt;filter-defined 구조체이다. 필터드라이버는 이 구조체를 file system 이 열어놓은 각각의 file stream 에 대한 정보를 추적하는데 사용한다.   &lt;/p&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-file-sytem-support-for-per-stream-contexts&quot; class=&quot;anchor&quot; href=&quot;#file-sytem-support-for-per-stream-contexts&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;File Sytem Support for Per-Stream Contexts&lt;/h3&gt;&lt;br /&gt;&lt;p&gt;Microsoft Windows XP 이후, per-stream context 를 지원하는 파일시스템은 &lt;a href=&quot;&quot;&gt;FSRTL_ADVANCED_FCB_HEADER&lt;/a&gt;구조체를 포함하는 &lt;br /&gt;stream context 구조체를 사용해야 한다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;특정 file stream 에 연관된 per-stream context 의 global list 는 file system 이 관리한다. &lt;br /&gt;file system 이 file stream 을 위한 새 stream context (FSRTL_ADVANCED_FCB_HEADER object)를 생성할 때, 이 list 를 초기화하기 위해 &lt;br /&gt;&lt;a href=&quot;&quot;&gt;FsRtlSetupAdvancedHeader&lt;/a&gt; 를 호출한다. &lt;br /&gt;file system filter 드라이버가 &lt;a href=&quot;&quot;&gt;FsRtlInsertPerStreamContext&lt;/a&gt; 함수를 호출하면, filter 가 생성한 per-steram context 는 &lt;br /&gt;그 global list 에 추가된다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;file system 이 file stream 에 대한 stream context 를 삭제하때, filter 가 가진 file stream 에 연관된 모든 per-stream context 를 &lt;br /&gt;제거하기 위해 &lt;a href=&quot;&quot;&gt;FsRtlTeardownPerStreamContexts&lt;/a&gt; 를 호출한다. &lt;br /&gt;이 루틴은 global list 에 있는 각각의 per-stream context 에 대해서 &lt;a href=&quot;&quot;&gt;FreeCallback&lt;/a&gt;루틴을 호출한다. &lt;br /&gt;&lt;code&gt;FreeCallback&lt;/code&gt; 루틴은 file stream 과 연관된 file object 가 이미 소멸되었음을 인지하고 있어야 한다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;file system 이 file object 로 대표되는 file stream 에 대해서 per-stream context 를 지원하는지 확인하려면, 해당 file object 를 통해서 &lt;br /&gt;&lt;a href=&quot;&quot;&gt;FsRtlSupportsPerStreamContexts&lt;/a&gt;를 호출할 수 있다. file system 은 어떤 파일 타입에 대해서는 per-stream context 를 지원할 수 도 있고, &lt;br /&gt;그렇지 않을 수도 있다. 예를들어 NTFS 와 FAT 는 paging file 에 대해서 per-stream context 를 지원하지 않는다. &lt;br /&gt;따라서 &lt;code&gt;FsRtlSupportsPerStreamContexts&lt;/code&gt; 함수는 하나의 file stream 에 대해서는 TRUE 를 리턴하지만, 모든 file stream 에 대해서 &lt;br /&gt;TRUE 를 리턴하지는 않을것이다.      &lt;/p&gt;&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/5351022467766419048/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2016/11/fltstreamcontext-vs-fltstreamhandlecont.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/5351022467766419048'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/5351022467766419048'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2016/11/fltstreamcontext-vs-fltstreamhandlecont.html' title='FLT_STREAM_CONTEXT vs FLT_STREAMHANDLE_CONTEXT'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-1129536445093515485</id><published>2016-10-11T04:40:00.002-07:00</published><updated>2016-10-12T01:08:58.532-07:00</updated><title type='text'>하이퍼바이저 구현을 위한 공부 방법</title><content type='html'>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;style&gt;@font-face {   font-family: octicons-anchor;   src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format(&#39;woff&#39;); }  * {     box-sizing: border-box; }  body {     width: 980px;     margin-right: auto;     margin-left: auto; }  body .markdown-body {     padding: 45px;     border: 1px solid #ddd;     border-radius: 3px;     word-wrap: break-word; }  pre {     font: 12px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; }  .markdown-body {   -webkit-text-size-adjust: 100%;   text-size-adjust: 100%;   color: #333;   font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Segoe UI&quot;, Arial, freesans, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;   font-size: 16px;   line-height: 1.6;   word-wrap: break-word; }  .markdown-body a {   background-color: transparent; }  .markdown-body a:active, .markdown-body a:hover {   outline: 0; }  .markdown-body strong {   font-weight: bold; }  .markdown-body h1 {   font-size: 2em;   margin: 0.67em 0; }  .markdown-body img {   border: 0; }  .markdown-body hr {   box-sizing: content-box;   height: 0; }  .markdown-body pre {   overflow: auto; }  .markdown-body code, .markdown-body kbd, .markdown-body pre {   font-family: monospace, monospace;   font-size: 1em; }  .markdown-body input {   color: inherit;   font: inherit;   margin: 0; }  .markdown-body html input[disabled] {   cursor: default; }  .markdown-body input {   line-height: normal; }  .markdown-body input[type=&quot;checkbox&quot;] {   box-sizing: border-box;   padding: 0; }  .markdown-body table {   border-collapse: collapse;   border-spacing: 0; }  .markdown-body td, .markdown-body th {   padding: 0; }  .markdown-body input {   font: 13px / 1.4 Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; }  .markdown-body a {   color: #4078c0;   text-decoration: none; }  .markdown-body a:hover, .markdown-body a:active {   text-decoration: underline; }  .markdown-body hr {   height: 0;   margin: 15px 0;   overflow: hidden;   background: transparent;   border: 0;   border-bottom: 1px solid #ddd; }  .markdown-body hr:before {   display: table;   content: &quot;&quot;; }  .markdown-body hr:after {   display: table;   clear: both;   content: &quot;&quot;; }  .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 {   margin-top: 15px;   margin-bottom: 15px;   line-height: 1.1; }  .markdown-body h1 {   font-size: 30px; }  .markdown-body h2 {   font-size: 21px; }  .markdown-body h3 {   font-size: 16px; }  .markdown-body h4 {   font-size: 14px; }  .markdown-body h5 {   font-size: 12px; }  .markdown-body h6 {   font-size: 11px; }  .markdown-body blockquote {   margin: 0; }  .markdown-body ul, .markdown-body ol {   padding: 0;   margin-top: 0;   margin-bottom: 0; }  .markdown-body ol ol, .markdown-body ul ol {   list-style-type: lower-roman; }  .markdown-body ul ul ol, .markdown-body ul ol ol, .markdown-body ol ul ol, .markdown-body ol ol ol {   list-style-type: lower-alpha; }  .markdown-body dd {   margin-left: 0; }  .markdown-body code {   font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;   font-size: 12px; }  .markdown-body pre {   margin-top: 0;   margin-bottom: 0;   font: 12px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; }  .markdown-body .select::-ms-expand {   opacity: 0; }  .markdown-body .octicon {   font: normal normal normal 16px/1 octicons-anchor;   display: inline-block;   text-decoration: none;   text-rendering: auto;   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale;   -webkit-user-select: none;   -moz-user-select: none;   -ms-user-select: none;   user-select: none; }  .markdown-body .octicon-link:before {   content: &#39;\f05c&#39;; }  .markdown-body:before {   display: table;   content: &quot;&quot;; }  .markdown-body:after {   display: table;   clear: both;   content: &quot;&quot;; }  .markdown-body&gt;*:first-child {   margin-top: 0 !important; }  .markdown-body&gt;*:last-child {   margin-bottom: 0 !important; }  .markdown-body a:not([href]) {   color: inherit;   text-decoration: none; }  .markdown-body .anchor {   display: inline-block;   padding-right: 2px;   margin-left: -18px; }  .markdown-body .anchor:focus {   outline: none; }  .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 {   margin-top: 1em;   margin-bottom: 16px;   font-weight: bold;   line-height: 1.4; }  .markdown-body h1 .octicon-link, .markdown-body h2 .octicon-link, .markdown-body h3 .octicon-link, .markdown-body h4 .octicon-link, .markdown-body h5 .octicon-link, .markdown-body h6 .octicon-link {   color: #000;   vertical-align: middle;   visibility: hidden; }  .markdown-body h1:hover .anchor, .markdown-body h2:hover .anchor, .markdown-body h3:hover .anchor, .markdown-body h4:hover .anchor, .markdown-body h5:hover .anchor, .markdown-body h6:hover .anchor {   text-decoration: none; }  .markdown-body h1:hover .anchor .octicon-link, .markdown-body h2:hover .anchor .octicon-link, .markdown-body h3:hover .anchor .octicon-link, .markdown-body h4:hover .anchor .octicon-link, .markdown-body h5:hover .anchor .octicon-link, .markdown-body h6:hover .anchor .octicon-link {   visibility: visible; }  .markdown-body h1 {   padding-bottom: 0.3em;   font-size: 2.25em;   line-height: 1.2;   border-bottom: 1px solid #eee; }  .markdown-body h1 .anchor {   line-height: 1; }  .markdown-body h2 {   padding-bottom: 0.3em;   font-size: 1.75em;   line-height: 1.225;   border-bottom: 1px solid #eee; }  .markdown-body h2 .anchor {   line-height: 1; }  .markdown-body h3 {   font-size: 1.5em;   line-height: 1.43; }  .markdown-body h3 .anchor {   line-height: 1.2; }  .markdown-body h4 {   font-size: 1.25em; }  .markdown-body h4 .anchor {   line-height: 1.2; }  .markdown-body h5 {   font-size: 1em; }  .markdown-body h5 .anchor {   line-height: 1.1; }  .markdown-body h6 {   font-size: 1em;   color: #777; }  .markdown-body h6 .anchor {   line-height: 1.1; }  .markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-body ol, .markdown-body dl, .markdown-body table, .markdown-body pre {   margin-top: 0;   margin-bottom: 16px; }  .markdown-body hr {   height: 4px;   padding: 0;   margin: 16px 0;   background-color: #e7e7e7;   border: 0 none; }  .markdown-body ul, .markdown-body ol {   padding-left: 2em; }  .markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown-body ol ul {   margin-top: 0;   margin-bottom: 0; }  .markdown-body li&gt;p {   margin-top: 16px; }  .markdown-body dl {   padding: 0; }  .markdown-body dl dt {   padding: 0;   margin-top: 16px;   font-size: 1em;   font-style: italic;   font-weight: bold; }  .markdown-body dl dd {   padding: 0 16px;   margin-bottom: 16px; }  .markdown-body blockquote {   padding: 0 15px;   color: #777;   border-left: 4px solid #ddd; }  .markdown-body blockquote&gt;:first-child {   margin-top: 0; }  .markdown-body blockquote&gt;:last-child {   margin-bottom: 0; }  .markdown-body table {   display: block;   width: 100%;   overflow: auto;   word-break: normal;   word-break: keep-all; }  .markdown-body table th {   font-weight: bold; }  .markdown-body table th, .markdown-body table td {   padding: 6px 13px;   border: 1px solid #ddd; }  .markdown-body table tr {   background-color: #fff;   border-top: 1px solid #ccc; }  .markdown-body table tr:nth-child(2n) {   background-color: #f8f8f8; }  .markdown-body img {   max-width: 100%;   box-sizing: content-box;   background-color: #fff; }  .markdown-body code {   padding: 0;   padding-top: 0.2em;   padding-bottom: 0.2em;   margin: 0;   font-size: 85%;   background-color: rgba(0,0,0,0.04);   border-radius: 3px; }  .markdown-body code:before, .markdown-body code:after {   letter-spacing: -0.2em;   content: &quot;\00a0&quot;; }  .markdown-body pre&gt;code {   padding: 0;   margin: 0;   font-size: 100%;   word-break: normal;   white-space: pre;   background: transparent;   border: 0; }  .markdown-body .highlight {   margin-bottom: 16px; }  .markdown-body .highlight pre, .markdown-body pre {   padding: 16px;   overflow: auto;   font-size: 85%;   line-height: 1.45;   background-color: #f7f7f7;   border-radius: 3px; }  .markdown-body .highlight pre {   margin-bottom: 0;   word-break: normal; }  .markdown-body pre {   word-wrap: normal; }  .markdown-body pre code {   display: inline;   max-width: initial;   padding: 0;   margin: 0;   overflow: initial;   line-height: inherit;   word-wrap: normal;   background-color: transparent;   border: 0; }  .markdown-body pre code:before, .markdown-body pre code:after {   content: normal; }  .markdown-body kbd {   display: inline-block;   padding: 3px 5px;   font-size: 11px;   line-height: 10px;   color: #555;   vertical-align: middle;   background-color: #fcfcfc;   border: solid 1px #ccc;   border-bottom-color: #bbb;   border-radius: 3px;   box-shadow: inset 0 -1px 0 #bbb; }  .markdown-body .pl-c {   color: #969896; }  .markdown-body .pl-c1, .markdown-body .pl-s .pl-v {   color: #0086b3; }  .markdown-body .pl-e, .markdown-body .pl-en {   color: #795da3; }  .markdown-body .pl-s .pl-s1, .markdown-body .pl-smi {   color: #333; }  .markdown-body .pl-ent {   color: #63a35c; }  .markdown-body .pl-k {   color: #a71d5d; }  .markdown-body .pl-pds, .markdown-body .pl-s, .markdown-body .pl-s .pl-pse .pl-s1, .markdown-body .pl-sr, .markdown-body .pl-sr .pl-cce, .markdown-body .pl-sr .pl-sra, .markdown-body .pl-sr .pl-sre {   color: #183691; }  .markdown-body .pl-v {   color: #ed6a43; }  .markdown-body .pl-id {   color: #b52a1d; }  .markdown-body .pl-ii {   background-color: #b52a1d;   color: #f8f8f8; }  .markdown-body .pl-sr .pl-cce {   color: #63a35c;   font-weight: bold; }  .markdown-body .pl-ml {   color: #693a17; }  .markdown-body .pl-mh, .markdown-body .pl-mh .pl-en, .markdown-body .pl-ms {   color: #1d3e81;   font-weight: bold; }  .markdown-body .pl-mq {   color: #008080; }  .markdown-body .pl-mi {   color: #333;   font-style: italic; }  .markdown-body .pl-mb {   color: #333;   font-weight: bold; }  .markdown-body .pl-md {   background-color: #ffecec;   color: #bd2c00; }  .markdown-body .pl-mi1 {   background-color: #eaffea;   color: #55a532; }  .markdown-body .pl-mdr {   color: #795da3;   font-weight: bold; }  .markdown-body .pl-mo {   color: #1d3e81; }  .markdown-body kbd {   display: inline-block;   padding: 3px 5px;   font: 11px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;   line-height: 10px;   color: #555;   vertical-align: middle;   background-color: #fcfcfc;   border: solid 1px #ccc;   border-bottom-color: #bbb;   border-radius: 3px;   box-shadow: inset 0 -1px 0 #bbb; }  .markdown-body .plan-price-unit {   color: #767676;   font-weight: normal; }  .markdown-body .task-list-item {   list-style-type: none; }  .markdown-body .task-list-item+.task-list-item {   margin-top: 3px; }  .markdown-body .task-list-item input {   margin: 0 0.35em 0.25em -1.6em;   vertical-align: middle; }  .markdown-body .plan-choice {   padding: 15px;   padding-left: 40px;   display: block;   border: 1px solid #e0e0e0;   position: relative;   font-weight: normal;   background-color: #fafafa; }  .markdown-body .plan-choice.open {   background-color: #fff; }  .markdown-body .plan-choice.open .plan-choice-seat-breakdown {   display: block; }  .markdown-body .plan-choice-free {   border-radius: 3px 3px 0 0; }  .markdown-body .plan-choice-paid {   border-radius: 0 0 3px 3px;   border-top: 0;   margin-bottom: 20px; }  .markdown-body .plan-choice-radio {   position: absolute;   left: 15px;   top: 18px; }  .markdown-body .plan-choice-exp {   color: #999;   font-size: 12px;   margin-top: 5px; }  .markdown-body .plan-choice-seat-breakdown {   margin-top: 10px;   display: none; }  .markdown-body :checked+.radio-label {   z-index: 1;   position: relative;   border-color: #4078c0; } &lt;/style&gt;&lt;title&gt;howto_study_hypervisor&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;markdown-body&quot;&gt;&lt;h1&gt;&lt;a id=&quot;user-content-hypervisor-구현-방법을-공부하기-위한-가이드&quot; class=&quot;anchor&quot; href=&quot;#hypervisor-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95%EC%9D%84-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B0%80%EC%9D%B4%EB%93%9C&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Hypervisor 구현 방법을 공부하기 위한 가이드&lt;/h1&gt;&lt;br /&gt;&lt;h2&gt;&lt;a id=&quot;user-content-레퍼런스-메뉴얼&quot; class=&quot;anchor&quot; href=&quot;#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%EB%A9%94%EB%89%B4%EC%96%BC&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;레퍼런스, 메뉴얼&lt;/h2&gt;&lt;br /&gt;&lt;p&gt;당연히 인텔/AMD 메뉴얼입니다. 무식하게 읽으면 어려워서, 중간에 포기하기 십상입니다만, 어느정도 개념이 잡히면 가장 먼저 보게 되는게 메뉴얼입니다. 경험상 인텔메뉴얼 만큼 좋은 자료는 없었습니다. (전 AMD SVM 은 안봐서 모릅니다. 동작 방식은 거의, 완전히 비슷합니다.)&lt;br /&gt;개인적인 경험으로는 인텔메뉴얼의 Virtual Machine Extension 챕터를 세번정도 읽어보니, 머리속에 들어오기 시작하더군요.&lt;/p&gt;&lt;br /&gt;&lt;h2&gt;&lt;a id=&quot;user-content-온라인-자료&quot; class=&quot;anchor&quot; href=&quot;#%EC%98%A8%EB%9D%BC%EC%9D%B8-%EC%9E%90%EB%A3%8C&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;온라인 자료&lt;/h2&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://opensecuritytraining.info/AdvancedX86-VTX.html&quot;&gt;http://opensecuritytraining.info/AdvancedX86-VTX.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;강추! 개인적으로 가장 추천하는 자료입니다. 엔텔메뉴얼과 같이 보면서 공부하셔야 할것입니다. 최소한 여기 나오는 내용을 확실히 다 숙지해야 합니다.&lt;/p&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/yonghwannoh/hypervisor-seminar&quot;&gt;http://www.slideshare.net/yonghwannoh/hypervisor-seminar&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;제가 예전에 만들었던 자료입니다. 마지막에 하이퍼바이저를 통해 안티키로거 &lt;br /&gt;제품 우회하는 시연영상도 있습니다.&lt;/p&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://programming.or.kr/?p=312&quot;&gt;http://programming.or.kr/?p=312&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/hefos&quot;&gt;서승현님&lt;/a&gt; 이 정리해두신 글입니다. KVM 코드 분석을 시작하시는 분들께 많이 도움될것 같습니다. &lt;/p&gt;&lt;br /&gt;&lt;h2&gt;&lt;a id=&quot;user-content-책&quot; class=&quot;anchor&quot; href=&quot;#%EC%B1%85&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;책&lt;/h2&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Series 1 Xen으로 배우는 가상화 기술의 이해 - CPU 가상화&lt;/li&gt;&lt;li&gt;Series 2 Xen으로 배우는 가상화 기술의 이해 - 메모리 가상화&lt;/li&gt;&lt;li&gt;Series 3 Xen으로 배우는 가상화 기술의 이해 - I/O 가상화&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;한빛리얼타임에서 PDF 로 구매하실 수 있습니다. Xen 하이퍼바이저 소스코드를 분석하면서 공부한 내용을 정리해서 책으로 출판했네요.&lt;br /&gt;대단하신분들인듯, 하지만 가상머신의 기본 개념이나 VT-x 스펙에 대한 기초지식이 없으면 이해하기 쉽지 않을 것 같네요.&lt;/p&gt;&lt;br /&gt;&lt;h2&gt;&lt;a id=&quot;user-content-코드&quot; class=&quot;anchor&quot; href=&quot;#%EC%BD%94%EB%93%9C&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;코드&lt;/h2&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ionescu007/SimpleVisor&quot;&gt;https://github.com/ionescu007/SimpleVisor&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;Windows Interernals 의 저자중 한명인 Alex Ionescue 가 만든 하이퍼바이저입니다. 최소한의 어셈블리코드로 엄청나게 간결하게 작성된 멋진 하이퍼바이저입니다. 공부를 위해서라면 최고의 선택이라고 생각합니다.&lt;/p&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/somma/HyperPlatform&quot;&gt;https://github.com/somma/HyperPlatform&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;또다른 멋진 오픈소스 구현입니다. &lt;/p&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Xen, KVM, VirtualBox&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;제품이니 당연히 매우 높은 완성도를 보이죠. 개인적으로는 VirtualBox 소스코드가 가장 읽기 편했습니다만, 기본 개념을 이해하지 못한상태에서는 해독 불가능한 암호로 보일겁니다. &lt;/p&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;기타&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;요즘은 다양한 하이퍼바이저 구현코드들을 쉽게 찾을 수 있더군요. 검색검색~~&lt;/p&gt;&lt;br /&gt;&lt;h2&gt;&lt;a id=&quot;user-content-도움이-될만-한-잔소리&quot; class=&quot;anchor&quot; href=&quot;#%EB%8F%84%EC%9B%80%EC%9D%B4-%EB%90%A0%EB%A7%8C-%ED%95%9C-%EC%9E%94%EC%86%8C%EB%A6%AC&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;도움이 될만 한 잔소리&lt;/h2&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-아키텍처x86-x64-같은운영체제를-공부해야-합니다&quot; class=&quot;anchor&quot; href=&quot;#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98x86-x64-%EA%B0%99%EC%9D%80%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%B4%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;아키텍처(x86, x64 같은)/운영체제를 공부해야 합니다&lt;/h3&gt;&lt;br /&gt;&lt;p&gt;인터럽트 처리, 가상메모리 구현 같은, 리얼모드/보호모드 같은 운영체제 구현에 대한 기초 지식은 필수입니다. 어차피 하이퍼바이저는 운영체제가  직접 다루는 CPU 나 메모리를 가상화 하는 코드를 구현하는 작업입니다. 따라서 컨트롤 레지스터나 인터럽트들을 운영체제들이 어떻게 다루는지 정확히 알아야 제대로 구현하고, 트러블 슈팅이 가능하겠죠. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;공부하기 쉽지는 않지만 꽤 재밌는 것들을 할 수 있습니다. &lt;/p&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-full-virtualization-vs-para-virtualzation&quot; class=&quot;anchor&quot; href=&quot;#full-virtualization-vs-para-virtualzation&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Full Virtualization vs Para-Virtualzation&lt;/h3&gt;&lt;br /&gt;&lt;p&gt;가상머신을 구현하는 방법에는 Full virtualization 과 Para-Virtualization 으로 나눌 수 있습니다. &lt;br /&gt;Vmware 나 Qemu 가 대표적인 Full Virtualization 제품에 속하고, Xen 이 대표적인 Para-Virtualization 제품에 속했습니다(과거형입니다). &lt;/p&gt;&lt;br /&gt;&lt;p&gt;전자는 모든 명령어를 가상화 하는겁니다. 모든 CPU 명령어를 에뮬레이트하기때문에 완전히 새로운 명령어 체계를 사용하는 아키텍처라 해도 가상화 할 수 있겠죠. 하지만 당연히 느립니다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;후자는 꼭 필요한 명령어만 가상화 합니다. 예를들어 아래와 같은 명령어가 있다고 가정합니다.&lt;/p&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;xor eax, eax&lt;br /&gt;mov cr0, eax&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;p&gt;첫번째 명령어는 그냥 범용 레지스터를 다르는 명령어이기 때문에 가상화 하지 않아도 됩니다. 실제 하드웨어를 그대로 사용하기 때문에 당연히 100% 하드웨어 성능을 냅니다. 하지만 두번째 명령어는 컨트롤 레지스터를 갱신해야 하기 때문에 반드시 가상화 해야 합니다. &lt;/p&gt;&lt;br /&gt;&lt;p&gt;첫번째 명령어 처럼 하드웨어를 직접 활용하는 걸 &lt;code&gt;Direct execution&lt;/code&gt; 이라고 합니다. 이렇게 꼭 필요한 중요한 명령어만 가상화 하는 것을 Para-Virtualization 이라고 합니다. 당연히 Full Virtualization 보다 성능이 좋아지겠죠?&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Para-Virtualization 을 구현하기 위해서는 결국 꼭 가상화해야 하는 명령어와 그렇지 않은 명령어를 구분할 수 있어야 합니다. 그래서 커널을 직접 수정하는 방식을 활용했습니다. &lt;code&gt;mov cr0, eax&lt;/code&gt; 같은 명령어를 찾아서 가상머신에게 가상화해달라고 요청하도록 커널코드를 직접 수정했습니다. 응용프로그램은 어차피 반드시 가상화 해야 하는 명령어를 사용하지 않으니 별 문제 없겠죠.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;이렇게 가상머신에게 해당 명령어를 가상화해달라고 요청하는것을 &lt;code&gt;하이퍼 콜(hyper call) - vm 과 host 간 호출&lt;/code&gt; 이라고 합니다.&lt;br /&gt;그래서 Xen 에서 리눅스 올리려면, 전용 리눅스 커널을 사용해야 했습니다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;그런데 Windows 같은 운영체제는 커널을 직접 수정할 수 없기때문에, VT-x/SVM 기술이 나오기 전까지는 Para-Virtualization 방식의 가상머신 제품은 Windows 운영체제를 지원하지 못했습니다. 재밌는건 Vmware 같은 경우 Full Virtualization 방식임에도 불구하고 Xen 같은 제품보다 더 빨랐다는...&lt;/p&gt;&lt;br /&gt;&lt;p&gt;아무튼 옛날엔 그랬고, VT-x/SVM 이 나온 이후 가상머신을 만드는 방식이 매우 간편해졌습니다. 간편해 진게 아니라, 간편하게 만든것이죠.&lt;br /&gt;앞에서 얘기했던 반드시 가상화 해야 하는 명령어와 그렇지 않은 명령어를 CPU, 즉 아키텍처에서 알아서 구분해줍니다. 가상머신 개발자는 CPU 가 알려주는 반드시 가상화하라고 통지하는 이벤트를 상황에 맞게 알아서 잘 처리해주면 됩니다. 이걸 &lt;code&gt;VMExit&lt;/code&gt; 이라고 합니다. &lt;br /&gt;저는 &lt;code&gt;하이퍼바이저 구현은 VM Exit handler/callback 작성&lt;/code&gt; 이라고 표현하곤 합니다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;따라서 하드웨어 가상화 기술이 나온 이후에는 Para-Virtualization 이니 뭐니 하는게 필요가 없죠. 그렇기 때문에 이제는 Xen 도 Windows 를 가상화할 수 있게 된겁니다. 개발하기도 훨씬 쉬워졌죠. 만세~&lt;/p&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-nested-vm-&quot; class=&quot;anchor&quot; href=&quot;#nested-vm-&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Nested VM ?&lt;/h3&gt;&lt;br /&gt;&lt;p&gt;가상머신 안에 또 가상머신 안에 또 가상머신?&lt;/p&gt;&lt;br /&gt;&lt;p&gt;무지막지하게 느릴까요? 당연히 느려지기야 하겠지만, 앞에서 얘기한 direct execution 때문에 그렇게 미친듯이 느려지지는 않을것입니다. 하이퍼바이저 개발자 입장에서는 관리할 자료구조가 훨씬 복잡해지고, 메모리 변환등으로 인해 복잡하긴 하겠지만요.&lt;/p&gt;&lt;br /&gt;&lt;h3&gt;&lt;a id=&quot;user-content-qemu-에-대해서&quot; class=&quot;anchor&quot; href=&quot;#qemu-%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C&quot; aria-hidden=&quot;true&quot;&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;octicon octicon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;QEMU 에 대해서&lt;/h3&gt;&lt;br /&gt;&lt;p&gt;QEMU 는 원래 에뮬레이터입니다. &lt;br /&gt;에뮬레이터이기 때문에 호스트가 x86 이라도 x64, ARM 등의 명령어를 에뮬레이트 할 수 있기때문에 다양한 아키텍처를 지원할 수 있죠. 다양한 CPU를 소프트웨어로 에뮬레이트 할 수 있으니까요. 세상에 있는 모든 cpu 를 지원한다죠? 그렇기 때문에 엄청 느렸습니다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;하드웨어 가상화(VT-x, SVM 같은) 기술이 나온 이후, CPU 에뮬레이트는 하드웨어 가상화 기능을 활용하기 시작했습니다. 그게 바로 KVM 이구요. 나머지 하드웨어들은 소프트웨어로 에뮬레이팅 합니다. 다른 Vmware, Virttual Box 같은 가상머신 제품도 마찬가지 입니다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;만일 QEMU로 호스트의 아키텍처와 다른 아키텍처를 가상머신으로 돌리고자 한다면, VT-x 같은 기술을 활용 할 수 없기때문에 100% 에뮬레이팅에 의존 할 수 없을 겁니다. 느리겠죠?&lt;/p&gt;&lt;br /&gt;&lt;p&gt;간략히 얘기하자면, QEMU 는 다양한 디바이스/하드웨어에 대한 에뮬레이팅을 담당하고, KVM 은 CPU/Memory 가상화를 담당한다고 보시면 됩니다. &lt;strong&gt;따라서 VT-x/SVM 구현에 관심있는 분이라면 QEMU 코드를 살펴보기보다는 리눅스 커널에 포함된 KVM 구현 코드를 분석하셔야 합니다.&lt;/strong&gt;    &lt;/p&gt;&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/1129536445093515485/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2016/10/blog-post.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/1129536445093515485'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/1129536445093515485'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2016/10/blog-post.html' title='하이퍼바이저 구현을 위한 공부 방법'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-8587464813976482370</id><published>2014-12-27T07:41:00.002-08:00</published><updated>2014-12-27T07:41:48.496-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="asio"/><category scheme="http://www.blogger.com/atom/ns#" term="boost"/><category scheme="http://www.blogger.com/atom/ns#" term="timer"/><title type='text'>boost::asio timer 사용하기</title><content type='html'>&lt;div style=&quot;-webkit-font-smoothing: antialiased; background-color: white; background-color: white; background-position: initial initial; background-repeat: initial initial; color: black; font-family: &#39;Lucida Grande&#39;, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Sans&#39;, AppleSDGothicNeo-Medium, &#39;Segoe UI&#39;, &#39;Malgun Gothic&#39;, Verdana, Tahoma, sans-serif; font-family: &#39;Lucida Grande&#39;, &#39;Segoe UI&#39;, &#39;Apple SD Gothic Neo&#39;, &#39;Malgun Gothic&#39;, &#39;Lucida Sans Unicode&#39;, Helvetica, Arial, sans-serif; font-size: 0.9em; font-size: 15px; margin: 0px !important; overflow-x: hidden; overflow-y: auto; padding: 20px; padding: 20px; padding: 5px 20px 26px !important;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;오늘은 boost::asio 예제코드를 보다가 (몰라서) 헤멧던 내용을 공유할까 합니다.&lt;br style=&quot;clear: both;&quot; /&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;c++&lt;/code&gt; 이나 boost 같은 라이브러리에 익숙하지 않은 저 같은 c++ 초보자들에게 도움이 되길 바라며 :-)&lt;br style=&quot;clear: both;&quot; /&gt;오늘은 그냥… 괜히… Windows 의 타이머 객체를 사용하고 싶지 않아서, boost::asio 의 timer &lt;a href=&quot;http://www.boost.org/doc/libs/1_36_0/doc/html/boost_asio/tutorial/tuttimer3/src.html&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;예제코드&lt;/a&gt; 를 조금 수정해서 아래와 같은 코드를 작성했습니다. 간단히 설명하자면 정해진 시간(1초)이 지나면 callback 함수(print(…))를 5번만 호출하는 코드입니다. &lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;void print(const boost::system::error_code&amp;amp; e, boost::asio::steady_timer* timer, int* count)&lt;br /&gt;{&lt;br /&gt;    if (*count &amp;lt; 5)&lt;br /&gt;    {&lt;br /&gt;        std::cout &amp;lt;&amp;lt; *count &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;&lt;br /&gt;        ++(*count);&lt;br /&gt;&lt;br /&gt;        timer-&amp;gt;expires_from_now(boost::chrono::seconds(1));&lt;br /&gt;        timer-&amp;gt;async_wait(boost::bind(print, boost::asio::placeholders::error, timer, count));&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;int main()&lt;br /&gt;{&lt;br /&gt;    boost::asio::io_service io_service;&lt;br /&gt;&lt;br /&gt;    int count = 0;&lt;br /&gt;    boost::asio::steady_timer timer(io_service);&lt;br /&gt;    timer.async_wait(boost::bind(&lt;br /&gt;                                print,&lt;br /&gt;                                boost::asio::placeholders::error,&lt;br /&gt;                                &amp;amp;timer,&lt;br /&gt;                                &amp;amp;count));&lt;br /&gt;    io_service.run();&lt;br /&gt;&lt;br /&gt;    std::cout &amp;lt;&amp;lt; &amp;quot;count = &amp;quot; &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;&lt;br /&gt;    return true;&lt;br /&gt;}&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;void print(const boost::system::error_code&amp;amp; e, boost::asio::steady_timer* timer, int* count)&lt;br /&gt;{&lt;br /&gt;    if (*count &amp;lt; 5)&lt;br /&gt;    {&lt;br /&gt;        std::cout &amp;lt;&amp;lt; *count &amp;lt;&amp;lt; &quot;\n&quot;;&lt;br /&gt;        ++(*count);&lt;br /&gt;&lt;br /&gt;        timer-&amp;gt;expires_from_now(boost::chrono::seconds(1));&lt;br /&gt;        timer-&amp;gt;async_wait(boost::bind(print, boost::asio::placeholders::error, timer, count));&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;int main()&lt;br /&gt;{&lt;br /&gt;    boost::asio::io_service io_service;&lt;br /&gt;&lt;br /&gt;    int count = 0;&lt;br /&gt;    boost::asio::steady_timer timer(io_service);&lt;br /&gt;    timer.async_wait(boost::bind(&lt;br /&gt;                                print,&lt;br /&gt;                                boost::asio::placeholders::error,&lt;br /&gt;                                &amp;amp;timer,&lt;br /&gt;                                &amp;amp;count));&lt;br /&gt;    io_service.run();&lt;br /&gt;&lt;br /&gt;    std::cout &amp;lt;&amp;lt; &quot;count = &quot; &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;&lt;br /&gt;    return true;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;timer.async_wait() 함수는 아래와 같은 함수 포인터 또는 함수객체를 파라미터로 받습니다. &lt;a href=&quot;http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio/reference/WaitHandler.html&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;여기&lt;/a&gt;에 자세한 내용이 있습니다.&lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;void handler(&lt;br /&gt;  const boost::system::error_code&amp;amp; error // Result of operation.&lt;br /&gt;);&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;void handler(&lt;br /&gt;  const boost::system::error_code&amp;amp; error // Result of operation.&lt;br /&gt;);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;예제에서는 부가적인 파라미터를 전달 받는 print() 함수를 async_wait() 의 파라미터로 사용하기 위해서 아래의 코드 처럼 boost::bind() 를 이용했습니다.&lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;    timer.async_wait(boost::bind(&lt;br /&gt;                                print,&lt;br /&gt;                                boost::asio::placeholders::error,&lt;br /&gt;                                &amp;amp;timer,&lt;br /&gt;                                &amp;amp;count));&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;    timer.async_wait(boost::bind(&lt;br /&gt;                                print,&lt;br /&gt;                                boost::asio::placeholders::error,&lt;br /&gt;                                &amp;amp;timer,&lt;br /&gt;                                &amp;amp;count));&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;저는 print() 함수에 전달되는 파라미터로 boost::asio::deadline_timer 와 count 의 포인터 타입이 사용되는것이 그냥 맘에 안들어서 참조자로 바꾸고 싶었습니다.&lt;br style=&quot;clear: both;&quot; /&gt;boost::asio::placeholders::error 는 boost::bind() 를 사용할 때  &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;_1&lt;/code&gt; 같은 역할을 하는 placeholder argument 이므로, boost::bind(print, _1, timer, count) 와 같으므로, timer 와 count 를 참조자로 넘겨도 아무 문제 없을 것 같았습니다.&lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;void&lt;br /&gt;print(&lt;br /&gt;    const boost::system::error_code&amp;amp; /*e*/,&lt;br /&gt;    boost::asio::deadline_timer&amp;amp; t,&lt;br /&gt;    int&amp;amp; count&lt;br /&gt;    )&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;void&lt;br /&gt;print(&lt;br /&gt;    const boost::system::error_code&amp;amp; /*e*/,&lt;br /&gt;    boost::asio::deadline_timer&amp;amp; t,&lt;br /&gt;    int&amp;amp; count&lt;br /&gt;    )&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;print() 함수 파라미터를 참조자를 받도록 변경하고 컴파일하면 아래처럼 복잡한 에러가 발생합니다. &lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;1&amp;gt;  All outputs are up-to-date.&lt;br /&gt;1&amp;gt;  _test_boost_asio_timer.cpp&lt;br /&gt;1&amp;gt;c:\Boost_x64\include\boost-1_56\boost/asio/basic_waitable_timer.hpp(514): error C2248: &#39;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;::basic_io_object&#39; : cannot access private member declared in class &#39;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;&#39;&lt;br /&gt;1&amp;gt;          with&lt;br /&gt;1&amp;gt;          [&lt;br /&gt;1&amp;gt;              IoObjectService=boost::asio::waitable_timer_service&amp;lt;boost::chrono::steady_clock,boost::asio::wait_traits&amp;lt;boost::chrono::steady_clock&amp;gt;&amp;gt;&lt;br /&gt;1&amp;gt;          ]&lt;br /&gt;1&amp;gt;          c:\Boost_x64\include\boost-1_56\boost/asio/basic_io_object.hpp(163) : see declaration of &#39;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;::basic_io_object&#39;&lt;br /&gt;1&amp;gt;          with&lt;br /&gt;1&amp;gt;          [&lt;br /&gt;1&amp;gt;              IoObjectService=boost::asio::waitable_timer_service&amp;lt;boost::chrono::steady_clock,boost::asio::wait_traits&amp;lt;boost::chrono::steady_clock&amp;gt;&amp;gt;&lt;br /&gt;1&amp;gt;          ]&lt;br /&gt;1&amp;gt;          This diagnostic occurred in the compiler generated function &#39;boost::asio::basic_waitable_timer&amp;lt;Clock&amp;gt;::basic_waitable_timer(const boost::asio::basic_waitable_timer&amp;lt;Clock&amp;gt; &amp;amp;)&#39;&lt;br /&gt;1&amp;gt;          with&lt;br /&gt;1&amp;gt;          [&lt;br /&gt;1&amp;gt;              Clock=boost::chrono::steady_clock&lt;br /&gt;1&amp;gt;          ]&lt;br /&gt;1&amp;gt;&lt;br /&gt;1&amp;gt;Build FAILED.&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;1&amp;gt;  All outputs are up-to-date.&lt;br /&gt;1&amp;gt;  _test_boost_asio_timer.cpp&lt;br /&gt;1&amp;gt;c:\Boost_x64\include\boost-1_56\boost/asio/basic_waitable_timer.hpp(514): error C2248: &#39;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;::basic_io_object&#39; : cannot access private member declared in class &#39;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;&#39;&lt;br /&gt;1&amp;gt;          with&lt;br /&gt;1&amp;gt;          [&lt;br /&gt;1&amp;gt;              IoObjectService=boost::asio::waitable_timer_service&amp;lt;boost::chrono::steady_clock,boost::asio::wait_traits&amp;lt;boost::chrono::steady_clock&amp;gt;&amp;gt;&lt;br /&gt;1&amp;gt;          ]&lt;br /&gt;1&amp;gt;          c:\Boost_x64\include\boost-1_56\boost/asio/basic_io_object.hpp(163) : see declaration of &#39;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;::basic_io_object&#39;&lt;br /&gt;1&amp;gt;          with&lt;br /&gt;1&amp;gt;          [&lt;br /&gt;1&amp;gt;              IoObjectService=boost::asio::waitable_timer_service&amp;lt;boost::chrono::steady_clock,boost::asio::wait_traits&amp;lt;boost::chrono::steady_clock&amp;gt;&amp;gt;&lt;br /&gt;1&amp;gt;          ]&lt;br /&gt;1&amp;gt;          This diagnostic occurred in the compiler generated function &#39;boost::asio::basic_waitable_timer&amp;lt;Clock&amp;gt;::basic_waitable_timer(const boost::asio::basic_waitable_timer&amp;lt;Clock&amp;gt; &amp;amp;)&#39;&lt;br /&gt;1&amp;gt;          with&lt;br /&gt;1&amp;gt;          [&lt;br /&gt;1&amp;gt;              Clock=boost::chrono::steady_clock&lt;br /&gt;1&amp;gt;          ]&lt;br /&gt;1&amp;gt;&lt;br /&gt;1&amp;gt;Build FAILED.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;찬찬히 읽어보니 &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;boost::asio::basic_io_object&amp;lt;IoObjectService&amp;gt;&lt;/code&gt; 클래스에 정의된 private member 에 접근하지 못한다는 에러입니다. 대체 이런 에러는 어디서 나는걸까 고민하다가 &lt;a href=&quot;http://www.boost.org/doc/libs/1_57_0/libs/bind/bind.html&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;boost::bind 문서&lt;/a&gt;를 다시 한번 읽어보니 해답이 보이더군요. &lt;/div&gt;&lt;blockquote style=&quot;border-left-color: rgb(230, 230, 230); border-left-style: solid; border-left-width: 4px; font-style: italic; margin: 1em 20px; padding: 0px 15px;&quot;&gt;&lt;div style=&quot;margin-bottom: 0px; margin-top: 0px; margin: 1em 0px; word-wrap: break-word;&quot;&gt;a copy of the value of i is stored into the function object. boost::ref and boost::cref can be used to make the function object store a reference to an object, rather than a copy:&lt;/div&gt;&lt;/blockquote&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;boost::bind 는 고정된 변수값을 call by value 로 넘기는게 기본인가 봅니다. (미루어 보건데 - 소스를 보지 않았으니 - boost::bind 는 함수 객체를 생성하는것으로 구현했는가 보네요.)&lt;br style=&quot;clear: both;&quot; /&gt;결국 boost::bind 호출시 사용된 timer 객체가 call by value 로 넘어가면서 복사 생성자나 대입 연산자가 호출되는 시점에 오류가 발생한 것 같습니다. &lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;/// Base class for all I/O objects.&lt;br /&gt;/**&lt;br /&gt; * @note All I/O objects are non-copyable. However, when using C++0x, certain&lt;br /&gt; * I/O objects do support move construction and move assignment.&lt;br /&gt; */&lt;br /&gt;#if !defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)&lt;br /&gt;template &amp;lt;typename IoObjectService&amp;gt;&lt;br /&gt;#else&lt;br /&gt;template &amp;lt;typename IoObjectService,&lt;br /&gt;    bool Movable = detail::service_has_move&amp;lt;IoObjectService&amp;gt;::value&amp;gt;&lt;br /&gt;#endif&lt;br /&gt;class basic_io_object&lt;br /&gt;{&lt;br /&gt;public:&lt;br /&gt;...&lt;br /&gt;protected:&lt;br /&gt;  /// Construct a basic_io_object.&lt;br /&gt;  /**&lt;br /&gt;   * Performs:&lt;br /&gt;   * @code get_service().construct(get_implementation()); @endcode&lt;br /&gt;   */&lt;br /&gt;  explicit basic_io_object(boost::asio::io_service&amp;amp; io_service)&lt;br /&gt;    : service(boost::asio::use_service&amp;lt;IoObjectService&amp;gt;(io_service))&lt;br /&gt;  {&lt;br /&gt;    service.construct(implementation);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;private:&lt;br /&gt;  basic_io_object(const basic_io_object&amp;amp;);&lt;br /&gt;  basic_io_object&amp;amp; operator=(const basic_io_object&amp;amp;);&lt;br /&gt;};&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;/// Base class for all I/O objects.&lt;br /&gt;/**&lt;br /&gt; * @note All I/O objects are non-copyable. However, when using C++0x, certain&lt;br /&gt; * I/O objects do support move construction and move assignment.&lt;br /&gt; */&lt;br /&gt;#if !defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)&lt;br /&gt;template &amp;lt;typename IoObjectService&amp;gt;&lt;br /&gt;#else&lt;br /&gt;template &amp;lt;typename IoObjectService,&lt;br /&gt;    bool Movable = detail::service_has_move&amp;lt;IoObjectService&amp;gt;::value&amp;gt;&lt;br /&gt;#endif&lt;br /&gt;class basic_io_object&lt;br /&gt;{&lt;br /&gt;public:&lt;br /&gt;...&lt;br /&gt;protected:&lt;br /&gt;  /// Construct a basic_io_object.&lt;br /&gt;  /**&lt;br /&gt;   * Performs:&lt;br /&gt;   * @code get_service().construct(get_implementation()); @endcode&lt;br /&gt;   */&lt;br /&gt;  explicit basic_io_object(boost::asio::io_service&amp;amp; io_service)&lt;br /&gt;    : service(boost::asio::use_service&amp;lt;IoObjectService&amp;gt;(io_service))&lt;br /&gt;  {&lt;br /&gt;    service.construct(implementation);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;private:&lt;br /&gt;  basic_io_object(const basic_io_object&amp;amp;);&lt;br /&gt;  basic_io_object&amp;amp; operator=(const basic_io_object&amp;amp;);&lt;br /&gt;};&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;코드를 따라가 보니 class basic_waitable_timer 템플릿 클래스는 public basic_io_object&lt;waitabletimerservice&gt; 를 상속받았고, basic_io_object 템플릿 클래스의 &lt;strong&gt;복사 생성자와 대입연산자가 private 으로 선언&lt;/strong&gt;되어있음을 확인 할 수 있었습니다. 클래스 자체가 복사하지 않도록 디자인된 녀석이었습니다!&lt;/waitabletimerservice&gt;&lt;/div&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;포인터를 사용하지 않고, 참조자를 사용하도록 수정한 코드는 아래와 같습니다. &lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;void print(const boost::system::error_code&amp;amp; e, boost::asio::steady_timer&amp;amp; timer, int&amp;amp; count)&lt;br /&gt;{&lt;br /&gt;    if (count &amp;lt; 5)&lt;br /&gt;    {&lt;br /&gt;        std::cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;&lt;br /&gt;        ++(count);&lt;br /&gt;&lt;br /&gt;        timer.expires_from_now(boost::chrono::seconds(1));&lt;br /&gt;        timer.async_wait(boost::bind(print, boost::asio::placeholders::error, boost::ref(timer), boost::ref(count)));&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;bool test_boost_asio_timer_3()&lt;br /&gt;{&lt;br /&gt;    boost::asio::io_service io_service;&lt;br /&gt;&lt;br /&gt;    int count = 0;&lt;br /&gt;    boost::asio::steady_timer timer(io_service);&lt;br /&gt;    timer.async_wait(boost::bind(&lt;br /&gt;                                print,&lt;br /&gt;                                boost::asio::placeholders::error,&lt;br /&gt;                                boost::ref(timer),&lt;br /&gt;                                boost::ref(count)));&lt;br /&gt;    io_service.run();&lt;br /&gt;&lt;br /&gt;    std::cout &amp;lt;&amp;lt; &amp;quot;count = &amp;quot; &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;&lt;br /&gt;    return true;&lt;br /&gt;}&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;void print(const boost::system::error_code&amp;amp; e, boost::asio::steady_timer&amp;amp; timer, int&amp;amp; count)&lt;br /&gt;{&lt;br /&gt;    if (count &amp;lt; 5)&lt;br /&gt;    {&lt;br /&gt;        std::cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; &quot;\n&quot;;&lt;br /&gt;        ++(count);&lt;br /&gt;&lt;br /&gt;        timer.expires_from_now(boost::chrono::seconds(1));&lt;br /&gt;        timer.async_wait(boost::bind(print, boost::asio::placeholders::error, boost::ref(timer), boost::ref(count)));&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;bool test_boost_asio_timer_3()&lt;br /&gt;{&lt;br /&gt;    boost::asio::io_service io_service;&lt;br /&gt;&lt;br /&gt;    int count = 0;&lt;br /&gt;    boost::asio::steady_timer timer(io_service);&lt;br /&gt;    timer.async_wait(boost::bind(&lt;br /&gt;                                print,&lt;br /&gt;                                boost::asio::placeholders::error,&lt;br /&gt;                                boost::ref(timer),&lt;br /&gt;                                boost::ref(count)));&lt;br /&gt;    io_service.run();&lt;br /&gt;&lt;br /&gt;    std::cout &amp;lt;&amp;lt; &quot;count = &quot; &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;&lt;br /&gt;    return true;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;오늘도 하나 배웠습니다. :-)&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/8587464813976482370/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/12/boostasio-timer.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8587464813976482370'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8587464813976482370'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/12/boostasio-timer.html' title='boost::asio timer 사용하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-6665448408921317825</id><published>2014-09-16T08:47:00.001-07:00</published><updated>2014-09-16T08:47:40.499-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="build"/><category scheme="http://www.blogger.com/atom/ns#" term="EDK2"/><category scheme="http://www.blogger.com/atom/ns#" term="EDKII"/><category scheme="http://www.blogger.com/atom/ns#" term="UDK2014"/><category scheme="http://www.blogger.com/atom/ns#" term="UEFI"/><title type='text'>Windows 에서 UEFI 빌드 환경 구성하기</title><content type='html'>&lt;div style=&quot;-webkit-font-smoothing: antialiased; background-color: white; background-color: white; background-position: initial initial; background-repeat: initial initial; color: black; font-family: &#39;Lucida Grande&#39;, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Sans&#39;, AppleSDGothicNeo-Medium, &#39;Segoe UI&#39;, &#39;Malgun Gothic&#39;, Verdana, Tahoma, sans-serif; font-family: &#39;Lucida Grande&#39;, &#39;Segoe UI&#39;, &#39;Apple SD Gothic Neo&#39;, &#39;Malgun Gothic&#39;, &#39;Lucida Sans Unicode&#39;, Helvetica, Arial, sans-serif; font-size: 0.9em; font-size: 15px; margin: 0px !important; overflow-x: hidden; overflow-y: auto; padding: 20px; padding: 20px; padding: 5px 20px 26px !important;&quot;&gt;&lt;h1 id=&quot;windows-에서-uefi-빌드-환경-구성하기&quot; style=&quot;clear: both; font-size: 2.2em; font-weight: bold; margin-top: 0px; margin: 1.5em 0px 1em;&quot;&gt;&lt;a href=&quot;https://www.blogger.com/blogger.g?blogID=5432537856508947805#windows-에서-uefi-빌드-환경-구성하기&quot; name=&quot;windows-에서-uefi-빌드-환경-구성하기&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;/a&gt;Windows 에서 UEFI 빌드 환경 구성하기&lt;/h1&gt;&lt;hr style=&quot;border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(230, 230, 230);&quot; /&gt;&lt;h2 id=&quot;요약&quot; style=&quot;border-bottom-color: rgb(230, 230, 230); border-bottom-style: solid; border-bottom-width: 1px; clear: both; font-size: 1.8em; font-weight: bold; line-height: 1.7em; margin: 1.275em 0px 0.85em;&quot;&gt;&lt;a href=&quot;https://www.blogger.com/blogger.g?blogID=5432537856508947805#요약&quot; name=&quot;요약&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;/a&gt;요약&lt;/h2&gt;&lt;div style=&quot;margin-top: 0px; margin: 1em 0px; word-wrap: break-word;&quot;&gt;UDK2014 를 Windows 개발환경에서 빌드하는 방법을 설명합니다. UDK 패키지 파일내의 &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;2014-ReleaseNotes-MyWorkSpace.txt&lt;/code&gt; 를 참고했습니다.&lt;/div&gt;&lt;h2 id=&quot;시작&quot; style=&quot;border-bottom-color: rgb(230, 230, 230); border-bottom-style: solid; border-bottom-width: 1px; clear: both; font-size: 1.8em; font-weight: bold; line-height: 1.7em; margin: 1.275em 0px 0.85em;&quot;&gt;&lt;a href=&quot;https://www.blogger.com/blogger.g?blogID=5432537856508947805#시작&quot; name=&quot;시작&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;/a&gt;시작&lt;/h2&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;개발 환경&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;windows 7, x64&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;visual studio 2010&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;소스코드 압축 풀기&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;UDK2014.MyWorkSpace.zip&lt;/code&gt; -&amp;gt; &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;d:\work.uefi\MyWorkSpace&lt;/code&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;BaseTools(Windows).zip&lt;/code&gt; -&amp;gt; &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;d:\work.uefi\MyWorkSpace\BaseTools\&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;빌드 환경 셋업 하기&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;d:\work.uefi\MyWorkSpace&lt;/code&gt; 에서 command prompt 하나 띄우고,&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;EDK_TOOLS_PATH&lt;/code&gt; 환경 변수 설정해주고&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;edksetup.bat --nt32&lt;/code&gt; 실행하면 준비 완료&lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;  d:\work.uefi\MyWorkSpace&amp;gt;set EDK_TOOLS_PATH=d:\work.uefi\MyWorkSpace\BaseTools\BaseTools&lt;br /&gt;&lt;br /&gt;  d:\work.uefi\MyWorkSpace&amp;gt;edksetup.bat --nt32&lt;br /&gt;            PATH      = d:\work.uefi\MyWorkSpace\BaseTools\BaseTools\Bin;d:\work.uefi\MyWork&lt;br /&gt;  Space\BaseTools\BaseTools\Bin\Win32;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VS&lt;br /&gt;  TSDB\Deploy;...[skip]&lt;br /&gt;&lt;br /&gt;       WORKSPACE      = d:\work.uefi\MyWorkSpace&lt;br /&gt;  EDK_TOOLS_PATH      = d:\work.uefi\MyWorkSpace\BaseTools\BaseTools&lt;br /&gt;&lt;br /&gt;  copying ... target.template to d:\work.uefi\MyWorkSpace\Conf\target.txt&lt;br /&gt;  copying ... tools_def.template to d:\work.uefi\MyWorkSpace\Conf\tools_def.txt&lt;br /&gt;  copying ... build_rule.template to d:\work.uefi\MyWorkSpace\Conf\build_rule.txt&lt;br /&gt;&lt;br /&gt;  Rebuilding of tools is not required.  Binaries of the latest,&lt;br /&gt;  tested versions of the tools have been tested and included in the&lt;br /&gt;  EDK II repository.&lt;br /&gt;&lt;br /&gt;  If you really want to build the tools, use the ForceRebuild option.&lt;br /&gt;&lt;br /&gt;  !!! WARNING !!! No CYGWIN_HOME set, gcc build may not be used !!!&lt;br /&gt;&lt;br /&gt;  d:\work.uefi\MyWorkSpace&amp;gt;&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;  d:\work.uefi\MyWorkSpace&amp;gt;set EDK_TOOLS_PATH=d:\work.uefi\MyWorkSpace\BaseTools\BaseTools&lt;br /&gt;&lt;br /&gt;  d:\work.uefi\MyWorkSpace&amp;gt;edksetup.bat --nt32&lt;br /&gt;            PATH      = d:\work.uefi\MyWorkSpace\BaseTools\BaseTools\Bin;d:\work.uefi\MyWork&lt;br /&gt;  Space\BaseTools\BaseTools\Bin\Win32;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VS&lt;br /&gt;  TSDB\Deploy;...[skip]&lt;br /&gt;&lt;br /&gt;       WORKSPACE      = d:\work.uefi\MyWorkSpace&lt;br /&gt;  EDK_TOOLS_PATH      = d:\work.uefi\MyWorkSpace\BaseTools\BaseTools&lt;br /&gt;&lt;br /&gt;  copying ... target.template to d:\work.uefi\MyWorkSpace\Conf\target.txt&lt;br /&gt;  copying ... tools_def.template to d:\work.uefi\MyWorkSpace\Conf\tools_def.txt&lt;br /&gt;  copying ... build_rule.template to d:\work.uefi\MyWorkSpace\Conf\build_rule.txt&lt;br /&gt;&lt;br /&gt;  Rebuilding of tools is not required.  Binaries of the latest,&lt;br /&gt;  tested versions of the tools have been tested and included in the&lt;br /&gt;  EDK II repository.&lt;br /&gt;&lt;br /&gt;  If you really want to build the tools, use the ForceRebuild option.&lt;br /&gt;&lt;br /&gt;  !!! WARNING !!! No CYGWIN_HOME set, gcc build may not be used !!!&lt;br /&gt;&lt;br /&gt;  d:\work.uefi\MyWorkSpace&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;빌드하기&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;build -t &amp;lt;tool chain name&amp;gt;&lt;/code&gt; 명령으로 빌드&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;tool chain 을 변경하려면&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;Conf/target.txt : TOOL_CHAIN_TAG = VS2010x86 으로 변경하거나&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;build -t &amp;lt;tool chain name&amp;gt;&lt;/code&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;x64 머신에서 x86 버전 vs 를 사용하므로 &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;VS2010x86&lt;/code&gt; tool chain 을 사용&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;vs 는 x86 버전밖에 없다는 건 함정&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;tool chain 정보는 &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;Conf/tools_def.txt&lt;/code&gt; 참고 (edksetup 에서 동적으로 생성해 주는 파일 임)&lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;  d:\work.uefi\MyWorkSpace&amp;gt;build -t VS2010x86&lt;br /&gt;  ..........&lt;br /&gt;  ..........&lt;br /&gt;  Generate Region at Offset 0x28E000&lt;br /&gt;     Region Size = 0x2000&lt;br /&gt;     Region Name = DATA&lt;br /&gt;&lt;br /&gt;  Generate Region at Offset 0x290000&lt;br /&gt;     Region Size = 0x10000&lt;br /&gt;     Region Name = None&lt;br /&gt;&lt;br /&gt;  GUID cross reference file can be found at d:\work.uefi\myworkspace\Build\NT32IA32\DEBUG_VS&lt;br /&gt;  2010x86\FV\Guid.xref&lt;br /&gt;&lt;br /&gt;  FV Space Information&lt;br /&gt;  FVRECOVERY [66%Full] 2621440 total, 1733424 used, 888016 free&lt;br /&gt;&lt;br /&gt;  - Done -&lt;br /&gt;  Build end time: 23:37:28, Sep.16 2014&lt;br /&gt;  Build total time: 00:02:12&lt;br /&gt;  d:\work.uefi\MyWorkSpace&amp;gt;&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt;  d:\work.uefi\MyWorkSpace&amp;gt;build -t VS2010x86&lt;br /&gt;  ..........&lt;br /&gt;  ..........&lt;br /&gt;  Generate Region at Offset 0x28E000&lt;br /&gt;     Region Size = 0x2000&lt;br /&gt;     Region Name = DATA&lt;br /&gt;&lt;br /&gt;  Generate Region at Offset 0x290000&lt;br /&gt;     Region Size = 0x10000&lt;br /&gt;     Region Name = None&lt;br /&gt;&lt;br /&gt;  GUID cross reference file can be found at d:\work.uefi\myworkspace\Build\NT32IA32\DEBUG_VS&lt;br /&gt;  2010x86\FV\Guid.xref&lt;br /&gt;&lt;br /&gt;  FV Space Information&lt;br /&gt;  FVRECOVERY [66%Full] 2621440 total, 1733424 used, 888016 free&lt;br /&gt;&lt;br /&gt;  - Done -&lt;br /&gt;  Build end time: 23:37:28, Sep.16 2014&lt;br /&gt;  Build total time: 00:02:12&lt;br /&gt;  d:\work.uefi\MyWorkSpace&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;하드웨어의 기능을 이용하는 빌드 옵션들&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;build -D &amp;lt;option&amp;gt;&lt;/code&gt; 을 이용해서 기능 추가 할 수 있음&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;build -D SECURE_BOOT_ENABLE&lt;/code&gt;  &amp;lt;- 요렇게!&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;SECURE_BOOT_ENABLE&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;Provides access for generic authentication information&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;associated with specific device path.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;TPM_UID_ENABLE&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;Provides TCG-defined service, and user identification feature.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;IP6_NETWORK_ENABLE&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;Provides Ipv6 network stack support.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;DUAL_NETWORK_ENABLE&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;Provides both Ipv4 and Ipv6 network stacks support.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;SOURCE_DEBUG_ENABLE&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;Provides source debugging feature.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;visual studio 에서 빌드하려면?&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;a href=&quot;http://uefi.blogspot.kr/2012/06/how-to-set-up-edk2s-windows-hosted-uefi.html&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;여기참고&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;실행은?&lt;/div&gt;&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;make 의 &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;run&lt;/code&gt; 타겟을 이용할 수도 있고&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;d:\work.uefi\MyWorkSpace\Build\NT32IA32\DEBUG_VS2010x86\IA32\SecMain.exe 를 실행해도 됨&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;끝!&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/6665448408921317825/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/09/windows-uefi.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/6665448408921317825'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/6665448408921317825'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/09/windows-uefi.html' title='Windows 에서 UEFI 빌드 환경 구성하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-459352927854870944</id><published>2014-09-12T09:43:00.002-07:00</published><updated>2014-09-12T09:43:42.302-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="EFI"/><category scheme="http://www.blogger.com/atom/ns#" term="UEFI"/><category scheme="http://www.blogger.com/atom/ns#" term="vmware"/><title type='text'>VMWARE 에서 UEFI 모드로 windows 8 설치하기</title><content type='html'>&lt;div style=&quot;-webkit-font-smoothing: antialiased; background-color: white; background-color: white; background-position: initial initial; background-repeat: initial initial; color: black; font-family: &#39;Lucida Grande&#39;, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Sans&#39;, AppleSDGothicNeo-Medium, &#39;Segoe UI&#39;, &#39;Malgun Gothic&#39;, Verdana, Tahoma, sans-serif; font-family: &#39;Lucida Grande&#39;, &#39;Segoe UI&#39;, &#39;Apple SD Gothic Neo&#39;, &#39;Malgun Gothic&#39;, &#39;Lucida Sans Unicode&#39;, Helvetica, Arial, sans-serif; font-size: 0.9em; font-size: 15px; margin: 0px !important; overflow-x: hidden; overflow-y: auto; padding: 20px; padding: 20px; padding: 5px 20px 26px !important;&quot;&gt;&lt;h1 id=&quot;enable-efi-mode-in-vmware&quot; style=&quot;clear: both; font-size: 2.2em; font-weight: bold; margin-top: 0px; margin: 1.5em 0px 1em;&quot;&gt;&lt;a href=&quot;https://www.blogger.com/blogger.g?blogID=5432537856508947805#enable-efi-mode-in-vmware&quot; name=&quot;enable-efi-mode-in-vmware&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;/a&gt;Enable efi mode in vmware&lt;/h1&gt;&lt;hr style=&quot;border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(230, 230, 230);&quot; /&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;vmware 로 새로운 가상머신을 생성&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;windows 8 x64 이미지 생성&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;‘install os later’ 를 선택해서 vmx 파일만 만들고, 실제 OS 를 설치하지는 않음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;가상머신 설정 수정&lt;ul&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;a href=&quot;http://sourceforge.net/projects/vmtweaker/&quot; style=&quot;color: #3269a0; text-decoration: none; vertical-align: baseline;&quot;&gt;VM Tweaker&lt;/a&gt; 다운로드 &lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;VM Teaker -&amp;gt; EFI BIOS Tweaks -&amp;gt; Enable ‘efi’ BIOS boot type 체크&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;CD rom 을 win8 x64 iso 파일로 지정하고, OS 설치&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;OS 설치 완료 후 EFI system partition 이 있으면 ㅇㅋ!&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;vmware tools 설치해주고, 스냅샷 떠 놓으면 끝!&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/459352927854870944/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/09/vmware-uefi-windows-8.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/459352927854870944'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/459352927854870944'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/09/vmware-uefi-windows-8.html' title='VMWARE 에서 UEFI 모드로 windows 8 설치하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-4921149982413623858</id><published>2014-08-21T18:43:00.000-07:00</published><updated>2014-08-21T18:43:44.065-07:00</updated><title type='text'>boost build summary</title><content type='html'>&lt;div style=&quot;-webkit-font-smoothing: antialiased; background-color: white; background-color: white; background-position: initial initial; background-repeat: initial initial; color: #737373; font-family: &#39;Lucida Grande&#39;, &#39;Lucida Sans Unicode&#39;, &#39;Lucida Sans&#39;, AppleSDGothicNeo-Medium, &#39;Segoe UI&#39;, &#39;Malgun Gothic&#39;, Verdana, Tahoma, sans-serif; font-family: &#39;Lucida Grande&#39;, &#39;Segoe UI&#39;, &#39;Apple SD Gothic Neo&#39;, &#39;Malgun Gothic&#39;, &#39;Lucida Sans Unicode&#39;, Helvetica, Arial, sans-serif; font-size: 0.9em; font-size: 15px; margin: 0px !important; overflow-x: hidden; overflow-y: auto; padding: 20px; padding: 20px; padding: 5px 20px 26px !important;&quot;&gt;&lt;h2 id=&quot;build-and-install-boost&quot; style=&quot;border-bottom-color: rgb(204, 204, 204); border-bottom-style: solid; border-bottom-width: 1px; clear: both; color: #404040; font-size: 1.8em; font-weight: bold; line-height: 1.7em; margin-top: 0px; margin: 1.275em 0px 0.85em;&quot;&gt;&lt;a href=&quot;https://www.blogger.com/blogger.g?blogID=5432537856508947805#build-and-install-boost&quot; name=&quot;build-and-install-boost&quot; style=&quot;color: #1e6ea7; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;/a&gt;Build and Install boost&lt;/h2&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;download boost library at &lt;a href=&quot;http://www.boost.org/&quot; style=&quot;color: #1e6ea7; text-decoration: none; vertical-align: baseline;&quot;&gt;http://www.boost.org/&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;extract library to &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;d:\work.lib\boost_1_56_0\&lt;/code&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;build build tool &lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt; d:\work.lib\boost_1_56_0&amp;gt;bootstrap.bat&lt;br /&gt; Building Boost.Build engine&lt;br /&gt;&lt;br /&gt; Bootstrapping is done. To build, run:&lt;br /&gt;&lt;br /&gt;     .\b2&lt;br /&gt;&lt;br /&gt; To adjust configuration, edit &#39;project-config.jam&#39;.&lt;br /&gt; Further information:&lt;br /&gt;&lt;br /&gt;     - Command line help:&lt;br /&gt;     .\b2 --help&lt;br /&gt;&lt;br /&gt;     - Getting started guide:&lt;br /&gt;     http://boost.org/more/getting_started/windows.html&lt;br /&gt;&lt;br /&gt;     - Boost.Build documentation:&lt;br /&gt;     http://www.boost.org/boost-build2/doc/html/index.html&lt;br /&gt;&lt;br /&gt; d:\work.lib\boost_1_56_0&amp;gt;&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt; d:\work.lib\boost_1_56_0&amp;gt;bootstrap.bat&lt;br /&gt; Building Boost.Build engine&lt;br /&gt;&lt;br /&gt; Bootstrapping is done. To build, run:&lt;br /&gt;&lt;br /&gt;     .\b2&lt;br /&gt;&lt;br /&gt; To adjust configuration, edit &#39;project-config.jam&#39;.&lt;br /&gt; Further information:&lt;br /&gt;&lt;br /&gt;     - Command line help:&lt;br /&gt;     .\b2 --help&lt;br /&gt;&lt;br /&gt;     - Getting started guide:&lt;br /&gt;     http://boost.org/more/getting_started/windows.html&lt;br /&gt;&lt;br /&gt;     - Boost.Build documentation:&lt;br /&gt;     http://www.boost.org/boost-build2/doc/html/index.html&lt;br /&gt;&lt;br /&gt; d:\work.lib\boost_1_56_0&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;build and install boost library at &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;c:\Boost_x86\&lt;/code&gt;, &lt;code style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); margin: 0px 2px; padding: 0px 5px; word-break: break-all; word-wrap: break-word;&quot;&gt;c:\Boost_x64\&lt;/code&gt;&lt;/div&gt;&lt;pre style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; overflow: auto; word-break: break-all; word-wrap: break-word;&quot;&gt;&lt;code data-origin=&quot;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt; d:\work.lib\boost_1_56_0&amp;gt;b2.exe toolset=msvc-10.0 --build-type=complete --build-dir=d:\work.lib\boost_1_56_0\build_dir_x86 --prefix=c:\Boost_x86 install&lt;br /&gt;&lt;br /&gt; d:\work.lib\boost_1_56_0&amp;gt;b2.exe toolset=msvc-10.0 address-model=64 --build-type=complete --build-dir=d:\work.lib\boost_1_56_0\build_dir_x64 --prefix=c:\Boost_x64 install&lt;br /&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot; style=&quot;border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(204, 204, 204); display: block; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.9em; margin: 0px 2px; margin: 0px; padding: 0.5em; padding: 0px 5px; white-space: pre; word-break: break-all; word-wrap: break-word;&quot;&gt; d:\work.lib\boost_1_56_0&amp;gt;b2.exe toolset=msvc-10.0 --build-type=complete --build-dir=d:\work.lib\boost_1_56_0\build_dir_x86 --prefix=c:\Boost_x86 install&lt;br /&gt;&lt;br /&gt; d:\work.lib\boost_1_56_0&amp;gt;b2.exe toolset=msvc-10.0 address-model=64 --build-type=complete --build-dir=d:\work.lib\boost_1_56_0\build_dir_x64 --prefix=c:\Boost_x64 install&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li style=&quot;display: list-item; line-height: 1.4em;&quot;&gt;&lt;div style=&quot;margin: 1em 0px; word-wrap: break-word;&quot;&gt;If you want boost::python, install python before build boost. :-)&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/4921149982413623858/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/08/boost-build-summary.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/4921149982413623858'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/4921149982413623858'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/08/boost-build-summary.html' title='boost build summary'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-8786600914811726209</id><published>2014-05-21T23:37:00.000-07:00</published><updated>2014-05-21T23:38:35.263-07:00</updated><title type='text'>hypervisor 구현 세미나 자료</title><content type='html'>hypervisor 구현 관련 세미나 자료입니다. &lt;br /&gt;vmware 같은 가상머신을 어떻게 만드는지에 대한 내용입니다. &lt;br /&gt;&lt;br /&gt;재 작년인가에 세미나할때 만든 거 같은데 :-)&lt;br /&gt;동영상도 있습니다. 음하하하&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;iframe allowfullscreen=&#39;allowfullscreen&#39; webkitallowfullscreen=&#39;webkitallowfullscreen&#39; mozallowfullscreen=&#39;mozallowfullscreen&#39; width=&#39;320&#39; height=&#39;266&#39; src=&#39;https://www.youtube.com/embed/pedN1Z8Olwk?feature=player_embedded&#39; frameborder=&#39;0&#39; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://www.slideshare.net/yonghwannoh/hypervisor-seminar&quot; target=&quot;_blank&quot;&gt;[slide share]&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/8786600914811726209/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/05/hypervisor.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8786600914811726209'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8786600914811726209'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/05/hypervisor.html' title='hypervisor 구현 세미나 자료'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-1689820762118537548</id><published>2014-02-04T07:54:00.002-08:00</published><updated>2014-02-04T08:03:58.230-08:00</updated><title type='text'>WinDbg :: dg 명령어</title><content type='html'>오랜만에 분석 할 꺼리가 생겨서 커널코드를 뒤적이다가, 세그먼트 관련 내용을 확인할 일이 생겼습니다. &lt;br /&gt;하도 오랜만에 하는거라 그런지, dg 명령어까지는 생각이났는데, 출력 형태를 헤깔리는 바람에 쓸데없는 삽질을 하게되어 흔적이라도 남겨볼까하고요. &lt;br /&gt;&lt;br /&gt;세그먼트 셀렉터는 상위 13비트를 GDT / LDT 인덱스로 사용합니다. 아래 처럼요.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c&quot;&gt;; 15                                                2  1  0&lt;br /&gt;; +----------------------------+-------------------+--+--+--+&lt;br /&gt;; |                          index                 |TI| RPL |&lt;br /&gt;; +----------------------------+-------------------+--+--+--+&lt;br /&gt;;&lt;br /&gt;; index&lt;br /&gt;;   GDT 의 인덱스 값 ( GDT = index * sizeof(GDT Descriptor) )&lt;br /&gt;;&lt;br /&gt;; TI (Table Indicator)&lt;br /&gt;;   0 이면 GDT (Global Descriptor Table)&lt;br /&gt;;   1 이면 LDT (Local Descriptor Table)&lt;br /&gt;;&lt;br /&gt;; RPL (Requestor Privilege Level)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;system context 에서 셀렉터와 세그먼트 디스크립터 출력내용입니다. &lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: c&quot;&gt;cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202&lt;br /&gt;&lt;br /&gt;0: kd&amp;gt; dg 0 80&lt;br /&gt;                                                    P Si Gr Pr Lo&lt;br /&gt;Sel        Base              Limit          Type    l ze an es ng Flags&lt;br /&gt;---- ----------------- ----------------- ---------- - -- -- -- -- --------&lt;br /&gt;0000 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0008 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0010 00000000`00000000 00000000`00000000 Code RE Ac 0 Nb By P  Lo 0000029b&lt;br /&gt;0018 00000000`00000000 00000000`ffffffff Data RW Ac 0 Bg Pg P  Nl 00000c93&lt;br /&gt;0020 00000000`00000000 00000000`ffffffff Code RE    3 Bg Pg P  Nl 00000cfa&lt;br /&gt;0028 00000000`00000000 00000000`ffffffff Data RW Ac 3 Bg Pg P  Nl 00000cf3&lt;br /&gt;0030 00000000`00000000 00000000`00000000 Code RE Ac 3 Nb By P  Lo 000002fb&lt;br /&gt;0038 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0040 00000000`00b96080 00000000`00000067 TSS32 Busy 0 Nb By P  Nl 0000008b&lt;br /&gt;0048 00000000`0000ffff 00000000`0000f800 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0050 ffffffff`fffe0000 00000000`00003c00 Data RW Ac 3 Bg By P  Nl 000004f3&lt;br /&gt;0058 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0060 00000000`00000000 00000000`ffffffff Code RE    0 Bg Pg P  Nl 00000c9a&lt;br /&gt;0068 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0070 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0078 00000000`00000000 00000000`00000000 &amp;lt;reserved&amp;gt; 0 Nb By Np Nl 00000000&lt;br /&gt;0080 Unable to get descriptor&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;WinDbg 의 dg 명령어 출력의 Sel 부분은 셀렉터의 RPL 필드를 00 으로 간주한 상태로 셀렉터 값을 출력합니다. 이걸 깜빡하는 바람에...@,.@&lt;br /&gt;&lt;br /&gt;따라서 fs 셀렉터 0x53 -&amp;gt; 0x50 으로 치환해서 dg 출력에서 찾아야 합니다. &lt;br /&gt;위에서는 0xffffffff`fffa0000 를 베이스로 하고, 리미트가 0x00003c00 인 GDT 엔트리를 가지는 것을 확인 할 수 있습니다. 다시 말해서 fs:[0] -&amp;gt; 0xffffffff`fffa0000 라는 거죠.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:c&quot;&gt;cs = 0x0010 : 00010 0 00 -&amp;gt; r0, gdt, Sel = 0010 0 00 -&amp;gt; 0x10&lt;br /&gt;ss = 0x0018 : 00011 0 00 -&amp;gt; r0, gdt, Sel = 0011 0 00 -&amp;gt; 0x18&lt;br /&gt;fs = 0x0053 : 01010 0 11 -&amp;gt; r3, gdt, Sel = 1010 0 00 -&amp;gt; 0x50&lt;br /&gt;ds,es,gs&lt;br /&gt;   = 0x002b : 00101 0 11 -&amp;gt; r3, gdt, Sel = 0101 0 00 -&amp;gt; 0x28&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;64 비트는 분석경험이 거의 없다보니, 새롭기도 하고, 어렵기도 하고...&lt;br /&gt;언젠가 64비트 악성코드가 나오기 시작하면 분석가 생활을 접겠다고 하셨던 고XX 책임님이 생각납니다. :-)</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/1689820762118537548/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/02/windbg-dg.html#comment-form' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/1689820762118537548'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/1689820762118537548'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/02/windbg-dg.html' title='WinDbg :: dg 명령어'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-4886411938453647550</id><published>2014-01-28T05:44:00.001-08:00</published><updated>2014-02-10T18:29:17.837-08:00</updated><title type='text'>const 위치와 의미</title><content type='html'>자주 사용하지만, 항상 뭔가 헤깔리는 그런것들이 있는데, const 도 그런 것들 중에 하나입니다. (저만 그럴지도...)&lt;br /&gt;위치에 따른 const 의미를 정리해 보았습니다.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: c&quot;&gt;/**&lt;br /&gt; * @brief &lt;br /&gt;**/&lt;br /&gt;class ConstPositionTest&lt;br /&gt;{&lt;br /&gt;public: &lt;br /&gt;    //&amp;gt; (const char*) msg : char* 가 const, 즉 msg 가 가리키는 데이터 변경 불가&lt;br /&gt;    char* Function1(const char* msg)  &lt;br /&gt;    {&lt;br /&gt;        msg[0] = &#39;t&#39;; // error&lt;br /&gt;        return m_msg;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //&amp;gt; char* (const msg) : msg 변수가 const, 즉 msg 포인터 변수 변경 불가&lt;br /&gt;    char* Function2(char* const msg)  &lt;br /&gt;    {    &lt;br /&gt;        msg = m_msg; //error&lt;br /&gt;        return m_msg;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //&amp;gt; 메소드 상수화, 이 메소드는 클래스 멤버를 읽을 수는 있으나 변경 할 수는 없음&lt;br /&gt;    char* Function3(char* msg) const &lt;br /&gt;    {&lt;br /&gt;        m_msg = msg; //error&lt;br /&gt;        return m_msg;  &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //&amp;gt; (const char*) : 리턴 값이 const char* 이므로 리턴 받는 변수도 const char* 이어야 함&lt;br /&gt;    //&amp;gt; 따라서 리턴되는 포인터가 가리키는 데이터 변경 불가&lt;br /&gt;    const char* Function4(char* msg)  &lt;br /&gt;    {&lt;br /&gt;        m_msg = msg;&lt;br /&gt;        return m_msg; //반환 받는 타입이 const가 아닐 경우 error&lt;br /&gt;    }&lt;br /&gt;private:&lt;br /&gt;    char* m_msg;&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * @brief &lt;br /&gt; * @param &lt;br /&gt; * @see  &lt;br /&gt; * @remarks &lt;br /&gt; * @code  &lt;br /&gt; * @endcode &lt;br /&gt; * @return &lt;br /&gt;**/&lt;br /&gt;bool test_const_position()&lt;br /&gt;{&lt;br /&gt;    ConstPositionTest test;&lt;br /&gt;    char msg[] = &quot;hello, const!&quot;;&lt;br /&gt; &lt;br /&gt;    test.Function1(msg);&lt;br /&gt;    test.Function2(msg);&lt;br /&gt;    test.Function3(msg);&lt;br /&gt;&lt;br /&gt;    const char* pMessage = test.Function4(msg);&lt;br /&gt;    pMessage[0] = 0; // error&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/4886411938453647550/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2014/01/const.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/4886411938453647550'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/4886411938453647550'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2014/01/const.html' title='const 위치와 의미'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-2244134471076831698</id><published>2013-12-16T08:11:00.002-08:00</published><updated>2013-12-16T08:22:48.192-08:00</updated><title type='text'>windows xp 에서 MSEC extension 사용하기</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;즐거운 연말을 보내기 위해 1주일 짜리 &#39;소프트웨어 버그헌팅&#39; 교육을 가게 되었습니다. 오호호~~&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;워드 프로세서 프로그램의 크래시를 일으키는 실습을 하던중에 예전에 &#39;오 이런것도 있네&#39; 했던 MSEC 확장이 생각났습니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;http://msecdbg.codeplex.com/&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;msec 은 MS 에서 배포하는 고마운 WinDbg 확장모듈로, 자동으로 크래시에 대한 분석을 수행하고, 이 크래시가 exploitable 한지 확인을 해줍니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;냉큼 다운로드 받고, WinDbg 로 로딩하려는데 계속 에러가 나는군요.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-eRnpW11NCwY/Uq8hMTFvD3I/AAAAAAAAAY8/sxUUCPNV7RQ/s1600/hwp_03.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-eRnpW11NCwY/Uq8hMTFvD3I/AAAAAAAAAY8/sxUUCPNV7RQ/s1600/hwp_03.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;우선 depends 로 봤더니 msvcr11.dll, msvcp11.dll 이 필요하네요. visual studio 2012 로 빌드를 했나봅니다. visual studio 2012 redistributable package 를 설치해 주면 되겠죠?&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;(http://www.microsoft.com/en-us/download/details.aspx?id=30679)&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;재배포 패키지 설치 후 다시 로드를 해봐도 마찬가지로 에러를 내면서 로딩이 안됩니다. Orz&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-P8uiZO-ygYQ/Uq8hLu6wNZI/AAAAAAAAAYw/7PyAdzMgGgo/s1600/hwp_00.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-P8uiZO-ygYQ/Uq8hLu6wNZI/AAAAAAAAAYw/7PyAdzMgGgo/s1600/hwp_00.png&quot; height=&quot;147&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;depends 로 다시 확인해 보니, Kenel32.dll 의 GetTickCount64 함수를 import 하고 있는데, msdn 에서 확인해보니 이 함수는 vista 부터 사용가능한 함수입니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;제 테스트 환경은 windows xp sp3 라서 dll 로딩이 실패할 수 밖에요.&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;어떻게 할까 한 10초 고민하다가 그냥 PE 의 import 테이블을 직접 고치는게 제일 편할것 같습니다. GetTickCount() 나 GetTickCount64() 나 뭐 정밀도의 차이가 좀 있을뿐 프로그램 돌아가는데는 별 문제 없으니, GetTickCount() 함수를 import 하도록 실행파일을 변경시켜 버리면 될것 같습니다.&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-n62VvVqr6IE/Uq8hMi3UlWI/AAAAAAAAAZE/pjmOrH0cvyM/s1600/hwp_04.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-n62VvVqr6IE/Uq8hMi3UlWI/AAAAAAAAAZE/pjmOrH0cvyM/s1600/hwp_04.png&quot; height=&quot;339&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;100만년 전에 열심히 사용하던 LordPE 를 검색해서 다운로드 받고 실행합니다. (우와 PE+ 도 지원하고, 정말 오랜만이네요, 반갑다!)&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-BbnXb1CZTeI%2FUq8hNJmfqMI%2FAAAAAAAAAZM%2F4qhnx2wvNyY%2Fs1600%2Fhwp_05.png&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-BbnXb1CZTeI/Uq8hNJmfqMI/AAAAAAAAAZM/4qhnx2wvNyY/s1600/hwp_05.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;text-align: start;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;text-align: start;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;text-align: start;&quot;&gt;IAT 를 고쳐야 하니까 &#39;Directories&#39; 버튼을 눌러주고요.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;text-align: start;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;span style=&quot;text-align: start;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;&quot; style=&quot;clear: both;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-jzt0xGDcf10/Uq8hNlBV-hI/AAAAAAAAAZU/DVxFUhVOMLA/s1600/hwp_06.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em; text-align: left;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-jzt0xGDcf10/Uq8hNlBV-hI/AAAAAAAAAZU/DVxFUhVOMLA/s1600/hwp_06.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-7gTVeaQW9_w/Uq8hONlxoeI/AAAAAAAAAZc/lKCuO9J3Ydk/s1600/hwp_07.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-7gTVeaQW9_w/Uq8hONlxoeI/AAAAAAAAAZc/lKCuO9J3Ydk/s1600/hwp_07.PNG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-5YAvWbOh-Vw/Uq8hOQ_ZSDI/AAAAAAAAAZo/-l3TkaIvZTQ/s1600/hwp_08.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-5YAvWbOh-Vw/Uq8hOQ_ZSDI/AAAAAAAAAZo/-l3TkaIvZTQ/s1600/hwp_08.PNG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;GetTickCount64 를 GetTickCount 로 변경해주면 됩니다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;이제 다시 !load winext/msec.dll 명령으로 extension 을 로드하고, !exploitable 명령을 실행해보면...&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;오오옷! exploit 가능한 크래시군용~&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-GqfrOcWSm7E/Uq8hOYITs5I/AAAAAAAAAZg/u5wd_Vkb7Pw/s1600/hwp_01.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-GqfrOcWSm7E/Uq8hOYITs5I/AAAAAAAAAZg/u5wd_Vkb7Pw/s1600/hwp_01.png&quot; height=&quot;206&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-J_McizAuuDc/Uq8hLst6_0I/AAAAAAAAAY0/sCsH0nh3trM/s1600/hwp_02.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-J_McizAuuDc/Uq8hLst6_0I/AAAAAAAAAY0/sCsH0nh3trM/s1600/hwp_02.png&quot; height=&quot;324&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&amp;nbsp;참 쉽죠? :-) (쉽긴 개뿔...-_-;;)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/2244134471076831698/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2013/12/windows-xp-msec-extension.html#comment-form' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/2244134471076831698'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/2244134471076831698'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2013/12/windows-xp-msec-extension.html' title='windows xp 에서 MSEC extension 사용하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-eRnpW11NCwY/Uq8hMTFvD3I/AAAAAAAAAY8/sxUUCPNV7RQ/s72-c/hwp_03.png" height="72" width="72"/><thr:total>2</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-8589878164244483002</id><published>2013-11-11T19:54:00.000-08:00</published><updated>2013-11-11T20:02:35.315-08:00</updated><title type='text'>Visual studio 컴파일러 버전 별 처리하기</title><content type='html'>최근 Visual Studio 6 으로 개발을 하고 있는데, 여간 귀찮은게 아니네요. ㅠ.ㅠ&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;std::list 를 사용하려고 했더니 엄청나게 많은 &amp;nbsp;warning 을 뱉어내기에 봤더니&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre class=&quot;brush:cpp&quot;&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;C:\Program Files (x86)\Microsoft Visual Studio\VC98\INCLUDE\list(131) : warning C4786: &#39;std::reverse_bidirectional_&lt;wbr&gt;&lt;/wbr&gt;iterator&lt;std::list std::basic_=&quot;&quot; wbr=&quot;&quot;&gt;string&lt;unsigned short=&quot;&quot; std::char_traits=&quot;&quot; wbr=&quot;&quot;&gt;unsigned short&amp;gt;,std::allocator&lt;unsigned short=&quot;&quot;&gt; &amp;gt;,std::allocator&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/std::list&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;td::basic_string&lt;unsigned short=&quot;&quot; std::char_traits=&quot;&quot; wbr=&quot;&quot;&gt;unsigned short&amp;gt;,std::allocator&lt;unsigned short=&quot;&quot;&gt; &amp;gt; &amp;gt; &amp;gt;::const_iterator,std::basic_&lt;wbr&gt;&lt;/wbr&gt;string&lt;unsigned short=&quot;&quot; std::char_traits=&quot;&quot; wbr=&quot;&quot;&gt;unsigned short&amp;gt;,std::allocator&lt;unsigned short=&quot;&quot;&gt; &amp;gt;,std::basic_string&amp;nbsp;&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,std::char_traits&lt;unsigned short=&quot;&quot;&gt;,std::allocator&lt;unsigned short=&quot;&quot;&gt; &amp;gt; const &amp;amp;,std::basic_string&lt;unsigned short=&quot;&quot; std::char_traits=&quot;&quot; wbr=&quot;&quot;&gt;unsigned short&amp;gt;,std::allocator&lt;unsigned short=&quot;&quot;&gt; &amp;gt; const *,int&amp;gt;&#39; : identifier was truncated to &#39;255&#39; characters in the debug i&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/unsigned&gt;&lt;/span&gt;nformation&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;이런 경고네요. VS6 은 찾아보기 파일이나 디버그 정보에 255 자를 넘는 문자열을 처리못하나 봅니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;이런건 뭐 별수 없죠. 워닝을 끄는 수 밖에요.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;아래 코드를 무식하게 stdafx.h 에 넣어두었습니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;div style=&quot;font-family: 맑은고딕; font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;font-family: 맑은고딕; font-size: x-small;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp&quot;&gt;&lt;/pre&gt;&lt;span style=&quot;font-family: 맑은고딕; font-size: x-small;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;#if defined(_MSC_VER) &amp;amp;&amp;amp; _MSC_VER &amp;lt; 1300&lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;#pragma warning (disable: 4786)&lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;div style=&quot;font-family: 맑은고딕; font-size: 13px;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;#endif&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 맑은고딕; font-size: 13px;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 맑은고딕; font-size: 13px;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;br /&gt;&lt;/span&gt; 참고로 _MSC_VER 매크로 값은 아래와 같다고 합니다.&lt;/div&gt;&lt;div style=&quot;font-family: 맑은고딕; font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;font-family: 맑은고딕; font-size: x-small;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp&quot;&gt;&lt;/pre&gt;&lt;span style=&quot;font-family: 맑은고딕; font-size: x-small;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre style=&quot;border: none; direction: ltr; font-family: 맑은고딕; font-size: 14px; line-height: 21px; list-style-type: none; padding: 0px; text-align: left; vertical-align: baseline; word-wrap: break-word;&quot;&gt;&lt;div style=&quot;font-family: tahoma; font-size: 12px; line-height: 20.390625px; white-space: normal;&quot;&gt;&lt;br /&gt;1000 :&amp;nbsp;Visual C++ 4.x (4.0)&lt;br /&gt;&lt;br /&gt;1100 : Visual C++ 5 &amp;nbsp; &amp;nbsp;(5.0)&lt;br /&gt;&lt;br /&gt;1200 : Visual C++ 6 &amp;nbsp; &amp;nbsp;(6.0)&lt;br /&gt;&lt;br /&gt;1300 : Visual C++ .NET (7.0)&lt;br /&gt;&lt;br /&gt;1310 : Visual C++ .NET 2003 (7.1)&lt;br /&gt;&lt;br /&gt;1400 : Visual C++ .NET 2005 (8.0)&lt;br /&gt;&lt;br /&gt;1500 : Visual C++ .NET 2008 (9.0)&lt;br /&gt;&lt;br /&gt;1600 : Visual C++ 2010 (10.0)&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;font-family: tahoma; font-size: 12px; line-height: 20.390625px; white-space: normal;&quot;&gt;&lt;br /&gt;1700 : Visual C++ 2012 (11.0)&lt;/div&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div style=&quot;font-family: tahoma; font-size: 12px; line-height: 20.390625px; white-space: normal;&quot;&gt;( from&amp;nbsp;&lt;a href=&quot;http://dstein.egloos.com/1952030&quot; style=&quot;font-family: 맑은고딕; font-size: 14px; line-height: 21px;&quot;&gt;http://dstein.egloos.com/1952030&lt;/a&gt;&amp;nbsp;)&lt;/div&gt;&lt;pre style=&quot;border: none; direction: ltr; font-family: 맑은고딕; font-size: 14px; line-height: 21px; list-style-type: none; padding: 0px; text-align: left; vertical-align: baseline; word-wrap: break-word;&quot;&gt;&lt;/pre&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; font-size: 13px; margin: 0cm 0cm 0.0001pt; text-align: justify;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot; style=&quot;background-color: white; font-family: 맑은고딕; margin: 0cm 0cm 0.0001pt; text-align: center;&quot;&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;끝!!&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/8589878164244483002/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2013/11/visual-studio.html#comment-form' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8589878164244483002'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8589878164244483002'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2013/11/visual-studio.html' title='Visual studio 컴파일러 버전 별 처리하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-9209816440722033347</id><published>2013-09-11T23:36:00.005-07:00</published><updated>2013-09-11T23:50:34.837-07:00</updated><title type='text'>커널모드 유닛테스팅 프레임웤 활용하기</title><content type='html'>간단하게 커널모드 코드를 테스트 할 수 있는 방법에 대해서 설명할까 합니다. &lt;br /&gt;&lt;br /&gt;응용프로그램 레벨에서는 사용할 수 없는 인스트럭션 (예. mov eax, cr0 )들에 대한 테스트가 필요한 경우도 있고, 간단한 커널모드 코드 조각을 테스트해야 하는 경우도 있고, 커널모드 안티디버깅 같은거 테스트 할 때... 필요한 상황이야 많습니다.&lt;br /&gt;&lt;br /&gt;대부분의 응용프로그램 개발자들은 커널모드 프로그램 개발에 대해서 알지 못하고, 간단한 테스트 하나 하자고, 두꺼운 책들과 씨름하기엔 너무 귀찮고, 좀 어렵죠?&lt;br /&gt;&lt;br /&gt;좀 쉽게 할 수 있는 방법이 없을까요? (있으니까 이런 글을 쓰고 있겠죠.) &lt;br /&gt;유닛테스트 프레임웤 중에 &lt;a href=&quot;http://www.cfix-testing.org/&quot;&gt;cfix&lt;/a&gt; 라는 녀석은 윈도우즈 커널모드 코드에 대한 유닛테스팅을 지원합니다. 예전에도 몇번인가 제 블로그에서 다뤘던거 같은데요.&lt;br /&gt;&lt;br /&gt;cfix 를 이용해서 테스트할 커널 코드를 작성하고, 프레임웤을 이용해서 실행해보면 되는거죠. &amp;nbsp;드라이버를 실행하기 위한 서비스 등록/시작/중지/제거기능, 드라이버 구현을 위한 기본 코드따위는 프레임웤이 알아서 다 해줍니다.&lt;br /&gt;&lt;br /&gt;우린 그냥 프레임웤에 테스트할 코드만 넣어주면 땡입니다. 아싸~&lt;br /&gt;&lt;br /&gt;우선 &lt;a href=&quot;http://www.cfix-testing.org/unit-testing-framework/windows/index.html&quot;&gt;여기&lt;/a&gt;에서 cfix 프레임웤을 받아서 설치합니다.&lt;br /&gt;홈페이지에 보면 Visual Assert 와 cfix 두 가지가 있는데 읽어보시면 알겠지만 visual assert 는 cfix 를 기반으로 만들어진 visual studio 용 플러그인입니다. &lt;br /&gt;&lt;br /&gt;둘다 사용법은 같으니 아무거나 설치해도 됩니다만 나중에 visual studio 에서 유닛테스트를 사용할 때도 쓰려면 visual assert 를, 드라이버 테스트만을 위한거라면 cfix 를 설치하시면 됩니다.&lt;br /&gt;&lt;br /&gt;설치할때 주의할 점은 설치 경로에 공백문자나 한글이 있는 경우 커널모드 유닛테스트를 사용할때 문제가 발생 할 수 있습니다. 그냥 C:\VisualAssert 에 설치하는게 가장 좋습니다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-9UCXY9dho1A/UjFRb3tHjBI/AAAAAAAAAGo/Zb_TK8iH2hQ/s1600/blog_1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-9UCXY9dho1A/UjFRb3tHjBI/AAAAAAAAAGo/Zb_TK8iH2hQ/s320/blog_1.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;C:\VisualAssert 아래 Doc, example 에 보면 필요한 내용은 다 있습니다. 그거 참고해서 알아서들 하세요... 라고 하고 싶... :-)&lt;br /&gt;&lt;br /&gt;C:\VisualAssert\examples\KernelMode 에 보면 우리에게 필요한 모든게 다 있습니다. &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-m4z4h8EInlQ/UjFThqScRiI/AAAAAAAAAG0/3qAHsBXpML8/s1600/blog_2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;143&quot; src=&quot;http://2.bp.blogspot.com/-m4z4h8EInlQ/UjFThqScRiI/AAAAAAAAAG0/3qAHsBXpML8/s320/blog_2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;suite.c 파일에 있는 주석들 대충 읽어보면 뭐가 뭔지 알거에요. 나중에 읽어보시고, 아래처럼 간단하게 고쳐봅시다. &lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;#include &lt;cfix .h=&quot;&quot;&gt;&lt;br /&gt;&lt;br /&gt;static void __stdcall Test1()&lt;br /&gt;{&lt;br /&gt;    // CR4 레지스터에 접근해 볼까요?&lt;br /&gt;    unsigned long _cr4=0x00000000;&lt;br /&gt;    __asm &lt;br /&gt;    {&lt;br /&gt;        mov eax, cr4&lt;br /&gt;        mov _cr4, eax&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    CFIX_LOG(L&quot;cr4 = 0x%08x&quot;, _cr4);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;CFIX_BEGIN_FIXTURE( MyFixture )&lt;br /&gt; CFIX_FIXTURE_ENTRY( Test1 )&lt;br /&gt;CFIX_END_FIXTURE()&lt;br /&gt;&lt;/cfix&gt;&lt;/pre&gt;&lt;br /&gt;이제 드라이버 코드를 빌드해야 겠죠? 당연히 드라이버 빌드를 위해서는 DDK가 설치되어있어야 합니다. 우선 32 비트 xp 에서 테스트 할 것이므로 아래 그림처럼 WindowsXP \ x86 checked Build Environment 를 선택합니다.&lt;br /&gt;당연히 디버깅을 할 상황도 생길 수 있기때문에 checked build 를 선택하는게 좋겠죠?&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-vTszqX2v6AE/UjFVzn3-QGI/AAAAAAAAAHA/FHrWnClnYmc/s1600/blog_3.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-vTszqX2v6AE/UjFVzn3-QGI/AAAAAAAAAHA/FHrWnClnYmc/s320/blog_3.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;MakeFile, Sources 파일이 위치한 경로로 이동해서 &quot;build -ceZ&quot; 명령을 내려주면 됩니다. &lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-JUv-TnA-gAA/UjFXFBZrxTI/AAAAAAAAAHI/8fEXbP5BWG0/s1600/blog_4.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;282&quot; src=&quot;http://1.bp.blogspot.com/-JUv-TnA-gAA/UjFXFBZrxTI/AAAAAAAAAHI/8fEXbP5BWG0/s320/blog_4.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;빨간 부분으로 표시한 곳을 보면 에러가 발생했네요. &lt;br /&gt;잘 읽어보면 에러를 워닝으로 간주하도록 설정이 되어있어서 워닝 -&amp;gt; 에러가 된 상황이죠. ( 간혹 워닝은 워닝이니까 하고, 무시하는 님들이 계신데, 워닝은 에러... 라고 생각하고, 미주알 고주알 따져서 반드시 다 없애주는 버릇을 들여줘야 합니다. 무시한 워닝 하나로 인해 정말 찾기 힘든 버그 만들어서 개고생 하는 사람들 많이 봤습니다 )&lt;br /&gt;&lt;br /&gt;워닝 메세지를 보니 cr4 라는 레이블을 인식못한다는 군요. 이것은 DDK 에 내장된 어셈블러가 &#39;cr4&#39; 문자열을 레지스터 이름으로 인식하지 못하고, 일반 문자열로 인식하기 때문이겠죠. &lt;br /&gt;&lt;br /&gt;mov eax, cr4 명령을 기계어로 넣어주거나, __readcr4( ) 함수를 이용하면 됩니다. 자세한건 인터넷 찾아보시고요. 아래 처럼 코드를 수정해 주시고, 다시 build -ceZ 명령을 해봅시다.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;static void __stdcall Test1()&lt;br /&gt;{&lt;br /&gt;    // CR4 레지스터에 접근해 볼까요?&lt;br /&gt;    unsigned long _cr4=0x00000000;&lt;br /&gt;    __asm&lt;br /&gt;    {&lt;br /&gt;        _emit 0x0f   ; mov eax, cr4&lt;br /&gt;        _emit 0x20 &lt;br /&gt;        _emit 0xe0   &lt;br /&gt;        &lt;br /&gt;        mov _cr4, eax&lt;br /&gt;    } &lt;br /&gt;    &lt;br /&gt;    CFIX_LOG(L&quot;cr4 = 0x%08x&quot;, _cr4);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-EeYo9bGvsuI/UjFanVAt_eI/AAAAAAAAAHU/YRzu4ojJ3JA/s1600/blog_5.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;222&quot; src=&quot;http://2.bp.blogspot.com/-EeYo9bGvsuI/UjFanVAt_eI/AAAAAAAAAHU/YRzu4ojJ3JA/s320/blog_5.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;아 ㅅㅂ 또 에러인데, 이번도 warning 때문에 발생한 문제네요. 그런데 워닝 메세지도 없습니다. ㅠ.ㅠ&lt;br /&gt;&lt;br /&gt;build 명령을 내리면 현재 MakeFile 이 있는 디렉토리에 buildXXX_XXX_XXX.wrn/err/log 파일이 생성되는데 각 파일들은 워님, 에러, 로그를 담고있습니다.&lt;br /&gt;wrn 파일을 열어보면 아래와 같은 내용이...&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;1&amp;gt;c:\visualassert\examples\kernelmode\cl : warning D9035 : option &#39;Wp64&#39; has been deprecated and will be removed in a future release&lt;br /&gt;1&amp;gt;c:\visualassert\examples\kernelmode\suite.c : warning C4819: The file contains a character that cannot be represented in the current code page (949). Save the file in Unicode format to prevent data loss&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;대충 요약해 보면 첫 번째 라인은 64 비트 호환모드 옵션(/Wp64)때문인데 아마 vs 2003 이후 컴파일러부터는 필요없는 옵션일겁니다. &lt;br /&gt;두 번째는 소스 파일 인코딩이 cp949 가 아니라는 거죠. 외국에서 만든거니 코드페이지가 달라서 발생한 문제입니다. &lt;br /&gt;&lt;br /&gt;다 귀찮으니 SOURCES 파일의 컴파일 옵션을 아래처럼 수정하고, 다시 빌드합니다. &lt;br /&gt;( 64 비트 호환모드 체크 안함 / 워닝을 에러로 처리 안함 )&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;# MSC_WARNING_LEVEL=/W4 /WX /Wp64&lt;br /&gt;MSC_WARNING_LEVEL=/W4&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-PjbpTkbvoy0/UjFcqlQTy6I/AAAAAAAAAHg/tIci4427FXA/s1600/blog_6.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;188&quot; src=&quot;http://2.bp.blogspot.com/-PjbpTkbvoy0/UjFcqlQTy6I/AAAAAAAAAHg/tIci4427FXA/s320/blog_6.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;그대로 따라했다면 &quot; C:\VisualAssert\examples\bin\chk\i386\kern.sys/pdb/obj/lib &quot; 같은 파일들이 생겼을겁니다. 젠장, 이제 겨우 빌드에 성공했군요. -_-;&lt;br /&gt;&lt;br /&gt;이제 빌드 한 커널드라이버를 실행하기 위해서 가상머신에 cfix 프레임웤을 설치해야 합니다. 사실 개발 머신에는 cfix 프레임웤을 설치할 필요는 없으나 예제 코드를 그대로 사용하려고 했던거고요.&lt;br /&gt;&lt;br /&gt;정말 중요한건 드라이버를 실행할 PC 에 cifx 프레임웤을 설치해야 하는거죠. &lt;br /&gt;가상머신에 visual studio 가 설치되어있지 않은 경우 visual assert 를 설치하려하면 오류가 나고, 설치가 중단됩니다. 당연히 visual assert 는 visual studio 플러그인이니까요. 홈페이지에서 cfix 를 다운로드 해서 설치하거나 &quot; c:\VisualAssert\bin\i386 &quot; 폴더 아래의 파일들을 가상머신의 적당한 경로에 복사합니다. 편한대로 하세요~&lt;br /&gt;&lt;br /&gt;저는 가상머신의 c:\dbg 폴더 아래에 복사했고, 빌드 할 실행파일 kern.sys 도 같은 경로에 복사했습니다. c:\dbg\cfix32.exe -kern kern.sys 명령을 실행하면 아래처럼 우리가 작성했던 코드의 결과를 확인할 수 있습니다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-ed2ulau1TEw/UjFg1Aj5kcI/AAAAAAAAAH0/hw94t2eY1KY/s1600/blog_7.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;126&quot; src=&quot;http://2.bp.blogspot.com/-ed2ulau1TEw/UjFg1Aj5kcI/AAAAAAAAAH0/hw94t2eY1KY/s320/blog_7.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;참~ 쉽죠~?! ^__^&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/9209816440722033347/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2013/09/blog-post.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/9209816440722033347'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/9209816440722033347'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2013/09/blog-post.html' title='커널모드 유닛테스팅 프레임웤 활용하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-9UCXY9dho1A/UjFRb3tHjBI/AAAAAAAAAGo/Zb_TK8iH2hQ/s72-c/blog_1.png" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-6616099366924308549</id><published>2013-02-05T22:31:00.000-08:00</published><updated>2013-02-05T22:38:16.843-08:00</updated><title type='text'>MASM 팁</title><content type='html'>어셈블리 뻘짓 하던 내용을 정리해서 포스팅합니다.&lt;br /&gt;나중에 또 뻘짓할게 뻔하기에...&amp;nbsp;@,.@&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: c&quot;&gt;&lt;br /&gt;.686&lt;br /&gt;.model flat, StdCall&lt;br /&gt;option casemap:none&lt;br /&gt;&lt;br /&gt;.code&lt;br /&gt;&lt;br /&gt;; int __stdcall test_sum(int _param1, int _param2)&lt;br /&gt;test_sum PROC StdCall _param1, _param2&lt;br /&gt; mov eax, _param1&lt;br /&gt; add eax, _param2&lt;br /&gt; ret&lt;br /&gt;test_sum ENDP&lt;br /&gt;&lt;br /&gt;; int __stdcall test_sum2(int _param1, int _param2)&lt;br /&gt;test_sum2 PROC StdCall _param1, _param2&lt;br /&gt; mov eax, _param1&lt;br /&gt; add eax, _param2&lt;br /&gt; ret 08h&lt;br /&gt;test_sum ENDP&lt;br /&gt;&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;이렇게 코드를 작성하면 매크로 어셈블러가 자동으로 prologue, epilogue 를 생성해주기 때문에 test_sum, test_sum2 함수는 모두 아래와 같은 동일한 코드로 변환됩니다.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: c&quot;&gt;&lt;br /&gt;push ebp&lt;br /&gt;mov  esp, ebp&lt;br /&gt;mov  eax, dword ptr [ebp+08h]&lt;br /&gt;add  eax, dword ptr [ebp+0ch]&lt;br /&gt;leave&lt;br /&gt;ret  08h&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;어셈블리 코드에서 test_sum 함수는 ret 명령의 경우 파라미터 스택 사이즈를 지정하지 않았지만 ret 08h 로 자동으로 지정해주죠. 편합니다.&lt;br /&gt;&lt;br /&gt;하지만 때때로 prologue / epilogue 를 자동생성하지 않게 해야 하는 경우도 있는데 이때는 &amp;nbsp;option prologue, epilogue 로 함수 부분을 감싸주면 됩니다. 아래 test_sum3 함수처럼요.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: c&quot;&gt;&lt;br /&gt;.686&lt;br /&gt;.model flat, StdCall&lt;br /&gt;option casemap:none&lt;br /&gt;&lt;br /&gt;.code&lt;br /&gt;&lt;br /&gt;; int __stdcall test_sum(int _param1, int _param2)&lt;br /&gt;test_sum PROC StdCall _param1, _param2&lt;br /&gt; mov eax, _param1&lt;br /&gt; add eax, _param2&lt;br /&gt; ret&lt;br /&gt;test_sum ENDP&lt;br /&gt;&lt;br /&gt;; int __stdcall test_sum2(int _param1, int _param2)&lt;br /&gt;test_sum PROC StdCall _param1, _param2&lt;br /&gt; mov eax, _param1&lt;br /&gt; add eax, _param2&lt;br /&gt; ret 08h&lt;br /&gt;test_sum ENDP&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;option prologue:none&lt;br /&gt;option epilogue:none&lt;br /&gt;&lt;br /&gt;; int __stdcall test_sum3(int _param1, int _param2)&lt;br /&gt;test_sum3 PROC Stdcall _param1, _param2&lt;br /&gt; ; build stack frame&lt;br /&gt; push ebp&lt;br /&gt; mov  ebp, esp&lt;br /&gt; &lt;br /&gt; mov  eax, dword ptr [ebp+08h]&lt;br /&gt; add  eax, dwrod ptr [ebp+0ch]&lt;br /&gt; &lt;br /&gt; ; restore stack frame&lt;br /&gt; mov  esp, ebp&lt;br /&gt; pop  ebp&lt;br /&gt; ret  08h&lt;br /&gt;test_sum3 ENDP&lt;br /&gt;&lt;br /&gt;option prologue:PrologueDef&lt;br /&gt;option prologue:EpilogueDef&lt;br /&gt;&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;이상 허접한 팁이었습니다.&lt;br /&gt;MSDN 의 MASM 레퍼런스에는 option 에 대한 키워드는 있는데, 각각의 옵션 키워드에 대한 설명이 없네요!! 왜 그런거지...</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/6616099366924308549/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2013/02/masm.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/6616099366924308549'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/6616099366924308549'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2013/02/masm.html' title='MASM 팁'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-6328570490543274992</id><published>2013-02-04T22:43:00.000-08:00</published><updated>2014-01-19T18:12:02.154-08:00</updated><title type='text'>C4018 워닝을 잡아라!</title><content type='html'>&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/y92ktdf2(v=vs.81).aspx&quot; target=&quot;_blank&quot;&gt;C4018 warning&lt;/a&gt;을 아시나요?&lt;br /&gt;Visual Studio 에서 뿌려주는 컴파일 워닝 코드입니다. (cl.exe 가 뿌려주는거라고 말하는게 정확한 것이겠죠?)&lt;br /&gt;어찌되었거나 Level3 짜리 워닝인데요, &quot;signed int 와 unsigned int 간의 비교연산이 있다&quot; 라는 경고입니다.&lt;br /&gt;&lt;br /&gt;여러분은 어떤가요? 컴파일러가 이런 워닝을 뱉어내면 어떻게 하시나요?&lt;br /&gt;&quot;워닝은 반드시 잡아야 하는 대상이 아닌 그냥 무시해도 되는거...&quot; 정도로 생각하시는 분들이 생각보다 많더군요.&lt;br /&gt;C4018 때문에 발생하는 재앙(?)을 한번 볼까요?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;void test_compare_uint_int()&lt;br /&gt;{&lt;br /&gt;    int32_t  i32;&lt;br /&gt;    uint32_t u32;&lt;br /&gt;&lt;br /&gt;    i32 = 1;&lt;br /&gt;    u32 = 10;  &lt;br /&gt;    printf(&quot;i32 %s u32 \n&quot;, i32 &amp;gt; u32 ? &quot;&amp;gt;&quot; : &quot;&amp;lt;&quot;);&lt;br /&gt;&lt;br /&gt;    i32 = -1;&lt;br /&gt;    u32 = 10;&lt;br /&gt;    printf(&quot;i32 %s u32 \n&quot;, i32 &amp;gt; u32 ? &quot;&amp;gt;&quot; : &quot;&amp;lt;&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;위의 코드는 i32(signed) 와 u32(unsigned) 간의 비교연산을 시도하는 코드입니다.&lt;br /&gt;실행해보면 어떤 결과가 나올까요?&lt;br /&gt;첫 번째는 비교는 사실 문제가 없습니다.&lt;br /&gt;두 번째는 어쩌면 생각과는 다른 결과가 나올 수 도 있을 겁니다.&lt;br /&gt;상식적으로 -1과 10 중에 누가 더 클까요? 사람은 10이 더 크다고 생각하겠지만 컴퓨터도 그럴까요?&lt;br /&gt;-1 == 0xFFFFFFFF, 10 == 0x0000000a 입니다. 누가 더 큰가요? 당연히 0xFFFFFFFF 입니다.&lt;br /&gt;이게 결국 의도하지 않은 버그를 만들어내게 되지요.&lt;br /&gt;이런 류의 버그는 평소엔 잠잠히 있다가 아주 가끔씩, 비 정기적으로 (보통때는 양의 정수이다가 아주 가끔 음수값이 들어올때) 시스템을 망가뜨리게 되죠.&lt;br /&gt;당연히 디버깅하기가 매우 까다로운 녀석중에 하나입니다.&lt;br /&gt;&lt;br /&gt;그럼 어떻게 해야 할까요?&lt;br /&gt;정석대로라면 signed 와 unsigned 를 용도에 따라서 정확히 구분해서 사용하는거죠.&lt;br /&gt;하지만 그게 말처럼 간단하지 않습니다. 애매한 경우가 많이 생기죠.&lt;br /&gt;외부 라이브러리가 리턴하는 값이 signed 인데 내 코드의 비교 대상 변수는 unsigned 라든지...&lt;br /&gt;&lt;br /&gt;그럼 어쩌라구?!&lt;br /&gt;그렇습니다. signed 변수와 unsigned 변수를 모두 담을 수 있는 크기의 변수로 캐스팅하는겁니다.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;i32 = -1;&lt;br /&gt;u32 = 10;&lt;br /&gt;/* 이렇게 하면 안되요!! */&lt;br /&gt;printf(&quot;i32 %s u32 \n&quot;, i32, i32 &amp;gt; u32 ? &quot;&amp;gt;&quot; : &quot;&amp;lt;&quot;, u32);&lt;br /&gt;&lt;br /&gt;/* 이렇게 해야 합니다. */&lt;br /&gt;printf(&quot;i32 %s u32 \n&quot;, i32, INT64(i32) &amp;gt; INT64(u32) ? &quot;&amp;gt;&quot; : &quot;&amp;lt;&quot;, u32);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;오늘의 교훈! 컴파일러의 워닝 메세지도 모두 없애는 습관을 들이자.</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/6328570490543274992/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2012/11/c4018.html#comment-form' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/6328570490543274992'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/6328570490543274992'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2012/11/c4018.html' title='C4018 워닝을 잡아라!'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-3677089914086117605</id><published>2013-01-31T18:53:00.000-08:00</published><updated>2014-01-19T18:12:29.644-08:00</updated><title type='text'>object namespace</title><content type='html'>&lt;br /&gt;이벤트, 뮤텍스, 세마포, 공유 메모리등은 모두 커널오브젝트입니다.&lt;br /&gt;윈도우 API 중에 무언가 생성할 때 이름을 파라미터로 받아들이는 녀석이 있다면 모두 커널오브젝트를 생성하는 API 라고 생각하면 됩니다.&lt;br /&gt;다들 잘 아시는 것처럼 OS 는 이 커널오브젝트들을 관리하기 계층구조로 관리합니다. &lt;a href=&quot;http://technet.microsoft.com/ko-kr/sysinternals/bb896657.aspx&quot; target=&quot;_blank&quot;&gt;WinObj&lt;/a&gt; 같은 툴을 이용하면 쉽게 확인이 가능하죠.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-2-zTQFS9XM8/UMfwvfFVztI/AAAAAAAAAEU/pZ7f9Rfuucs/s1600/obj_1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-2-zTQFS9XM8/UMfwvfFVztI/AAAAAAAAAEU/pZ7f9Rfuucs/s1600/obj_1.png&quot; height=&quot;203&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;이렇게 계층 구조로 커널오브젝트를 관리하기 때문에 오브젝트를 처리할 때는 네임스페이스처리를 잘 해주어야하는데요.&amp;nbsp;Windows xp 까지는 콘솔세션은 세션 0, 원격데스크탑 세션은 세션 1, 세션 2 이렇게 세션이 생성되었습니다.&amp;nbsp;( 대부분의 사용자가 사용하는 ) 콘솔세션은 서비스와 어플리케이션이 동일한 세션에서 실행되었기때문에 별 문제가 없었습니다.&lt;br /&gt;&lt;br /&gt;보통 이름있는 이벤트를 생성해서 서비스/응용프로그램간에 공유하는 경우 아래와 같은 코드가 문제없이 실행되었을 것입니다.&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;HANDLE event_handle = CreateEventW(&lt;br /&gt;                          NULL, &lt;br /&gt;                          FALSE, &lt;br /&gt;                          FALSE, &lt;br /&gt;                          L&quot;my_nmaed_event&quot;&lt;br /&gt;                          );&lt;br /&gt;&lt;/pre&gt;하지만 vista 이후에는 이런 코드가 정상작동하지 않을 것입니다.&lt;br /&gt;vista 이후부터는 서비스 세션(세션 0)과 응용프로그램 세션(세션 1)이 분리되었기 때문이지요.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-RkYUqD4mcnM/UMfwwBqci3I/AAAAAAAAAEY/kMkWPoAbCzA/s1600/obj_2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-RkYUqD4mcnM/UMfwwBqci3I/AAAAAAAAAEY/kMkWPoAbCzA/s1600/obj_2.png&quot; height=&quot;320&quot; width=&quot;260&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;위의 코드는&lt;span style=&quot;color: blue;&quot;&gt;&lt;b&gt;&lt;i&gt; \Sessions\응용프로그램이 실행된 세션번호\BaseNamedObjects&lt;/i&gt;&lt;/b&gt;&lt;/span&gt; 네임스페이스에 객체를 생성합니다.&lt;br /&gt;아마 \Sessions\1\BaseNamedObjects\my_named_event 가 될 것입니다.&lt;br /&gt;이 이벤트를 서비스에서 오픈해서 공유하려면 아래와 같은 코드를 사용하면 되겠죠.&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;HANDLE event_handle = OpenEventW(&lt;br /&gt;                            EVENT_ALL_ACCESS,&lt;br /&gt;                            FALSE, &lt;br /&gt;                            L&quot;\\Sessions\\1\\BaseNamedObjects\\my_nmaed_event&quot;&lt;br /&gt;                            );&lt;br /&gt;&lt;/pre&gt;그런데 어플리케이션이 세션 2 에서 실행중이라면 어쩌죠? (원격데스크탑 등으로 접속해서 실행한 경우)&lt;br /&gt;반대로 서비스에서 객체를 생성하면 항상 \Sessions\0\BaseNamedObjects\ 네임스페이스를 사용하니 되지 않겠느냐 라고 생각할 수도 있겠지만 그다지 좋은 해결책은 아니죠.&lt;br /&gt;그래서 만들어진것이 &lt;span style=&quot;color: blue;&quot;&gt;&lt;b&gt;&lt;i&gt;Global&lt;/i&gt;&lt;/b&gt;&lt;/span&gt; 네임스페이스입니다.&lt;br /&gt;&lt;br /&gt;Global 네임스페이스를 사용하면 세션에 구애 받지 않고, \BaseNamedObjects 네임스페이스를 사용하게 됩니다.&lt;br /&gt;즉 아래 코드는 모두 &lt;span style=&quot;color: blue;&quot;&gt;&lt;b&gt;\BaseNamedObject\my_named_event&lt;/b&gt;&lt;/span&gt; 객체를 생성하고, 오픈하게 됩니다.&lt;br /&gt;따라서 서로 다른 세션에 있어도 오브젝트에 대한 접근이 가능하게 됩니다.&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;HANDLE event_handle = CreateEventW(&lt;br /&gt;                          NULL, &lt;br /&gt;                          FALSE, &lt;br /&gt;                          FALSE, &lt;br /&gt;                          L&quot;Global\\my_nmaed_event&quot;&lt;br /&gt;                          );&lt;br /&gt;&lt;/pre&gt;이렇게 오브젝트를 생성하고,&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;HANDLE event_handle = OpenEventW(&lt;br /&gt;                          EVENT_ALL_ACCESS,&lt;br /&gt;                          FALSE, &lt;br /&gt;                          L&quot;Global\\my_nmaed_event&quot;&lt;br /&gt;                          );&lt;br /&gt;&lt;/pre&gt;이렇게 오픈해서 사용하면 됩니다.&lt;br /&gt;만일 디바이스 드라이버의 경우 \BaseNamedObjects\my_named_object 에 접근하면 됩니다.&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;UNICODE_STRING us;&lt;br /&gt;HANDLE   r0_handle;&lt;br /&gt;PKEVENT   r0_object;&lt;br /&gt;RtlInitUnicodeString(&amp;amp;us, L&quot;\\BaseNamedObjects\\my_named_object&quot;);&lt;br /&gt;r0_object = IoCreateNotificationEvent(&amp;amp;us, &amp;amp;r0_handle);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;결론!&lt;br /&gt;공유가 필요한 커널오브젝트를 사용하는 경우 오브젝트 네임스페이스 문제를 고려하자.&lt;br /&gt;일반적으로 Global 네임스페이스를 이용하는게 편리하다.</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/3677089914086117605/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2012/12/object-namespace.html#comment-form' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/3677089914086117605'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/3677089914086117605'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2012/12/object-namespace.html' title='object namespace'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-2-zTQFS9XM8/UMfwvfFVztI/AAAAAAAAAEU/pZ7f9Rfuucs/s72-c/obj_1.png" height="72" width="72"/><thr:total>2</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-5426543492073456676</id><published>2013-01-17T00:58:00.000-08:00</published><updated>2013-01-17T01:00:46.530-08:00</updated><title type='text'>Microsoft specific predefined macro</title><content type='html'>&lt;br /&gt;전체 목록은 &lt;a href=&quot;http://msdn.microsoft.com/en-US/library/b0084kay(v=vs.100).aspx&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;에서 확인 할 수 있습니다. 자주 사용하는 내용인데도, 매번 헤깔리네요.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;__cplusplus &amp;nbsp; &amp;nbsp; : C++ 파일인 경우 정의&lt;/li&gt;&lt;li&gt;_DEBUG &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: /LDd, /MDd, /MTd 와 함께 정의 됨 (디버그 버전인 경우)&lt;/li&gt;&lt;li&gt;__FUNCDNAME__ &amp;nbsp; : 함수 이름을 보여줌&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush:cpp&quot;&gt;// Demonstrates functionality of __FUNCTION__, __FUNCDNAME__, and __FUNCSIG__ macros&lt;br /&gt;void exampleFunction()&lt;br /&gt;{&lt;br /&gt; printf(&quot;Function name: %s\n&quot;, __FUNCTION__);&lt;br /&gt; printf(&quot;Decorated function name: %s\n&quot;, __FUNCDNAME__);&lt;br /&gt; printf(&quot;Function signature: %s\n&quot;, __FUNCSIG__);&lt;br /&gt; &lt;br /&gt; // Sample Output&lt;br /&gt; // -------------------------------------------------&lt;br /&gt; // Function name: exampleFunction&lt;br /&gt; // Decorated function name: ?exampleFunction@@YAXXZ&lt;br /&gt; // Function signature: void __cdecl exampleFunction(void)&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;_M_AMD64, _M_X64 &amp;nbsp; &amp;nbsp;: x64 프로세서인 경우 정의 됨&lt;/li&gt;&lt;li&gt;_M_IX86 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : x86 프로세스인 경우 정의 됨&lt;/li&gt;&lt;li&gt;_M_IA64 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : IA64 (인텔 아이테니엄) 프로세서인 경우 정의 됨&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/5426543492073456676/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2013/01/microsoft-specific-predefined-macro.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/5426543492073456676'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/5426543492073456676'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2013/01/microsoft-specific-predefined-macro.html' title='Microsoft specific predefined macro'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-8583263907232844908</id><published>2013-01-14T00:10:00.001-08:00</published><updated>2013-01-17T00:56:00.283-08:00</updated><title type='text'>LNK4197 경고 해결하기</title><content type='html'>&lt;pre class=&quot;brush:cpp;&quot;&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;send_command&#39; specified multiple times; using first specification&lt;br /&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;stop_driver&#39; specified multiple times; using first specification&lt;br /&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;start_driver&#39; specified multiple times; using first specification&lt;br /&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;uninstall_driver&#39; specified multiple times; using first specification&lt;br /&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;install_driver&#39; specified multiple times; using first specification&lt;br /&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;free_scm_context&#39; specified multiple times; using first specification&lt;br /&gt;1&amp;gt;afc_scm.obj : warning LNK4197: export &#39;create_scm_context&#39; specified multiple times; using first specification&lt;br /&gt;&lt;/pre&gt;32비트에서는 아무런 문제없이 빌드되던 프로젝트가 오늘 보니 4197 링크 경고를 뿌려대고 있었습니다.&lt;br /&gt;http://support.microsoft.com/kb/835326/en-us 페이지에 경고에 대해서 설명된 내용이 있네요.&lt;br /&gt;&lt;br /&gt;결론은 dllexport 를 사용하던지 def 파일을 사용하던지 하나만 하라는건데요...&lt;br /&gt;&lt;br /&gt;문제가 좀 있어보입니다.&lt;br /&gt;def 파일을 사용하지 않고, __declspec(dllexport) 만 사용하는 경우 __stdcall 호출방식을 사용할때 네임맹글링 문제로 인해서 원치않는 형태의 이름으로 export 되지요.&lt;br /&gt;아래 그림처럼요...&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-7NjWNIgSdi8/UPO9ySD_6vI/AAAAAAAAAEw/eWkij-6dia8/s1600/lnk_one.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;98&quot; src=&quot;http://1.bp.blogspot.com/-7NjWNIgSdi8/UPO9ySD_6vI/AAAAAAAAAEw/eWkij-6dia8/s320/lnk_one.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;그렇다면 def 파일을 이용해서 dll export 를 하면어떨까요?&lt;br /&gt;이건 제 경우에만 문제가 될 수 있는 문제인데요. 저는 dll 을 만들때 아래와 같은 구조의 코드를 항상 사용합니다.&lt;br /&gt;&lt;pre class=&quot;brush:cpp;&quot;&gt;&lt;br /&gt;#ifdef AFC_SCM_EXPORTS&lt;br /&gt; #ifdef __cplusplus&lt;br /&gt;  #define AFC_SCM_API   extern &quot;C&quot; __declspec(dllexport) &lt;br /&gt;  #define AFC_SCM_CLASS  __declspec(dllexport) &lt;br /&gt; #else&lt;br /&gt;  #define AFC_SCM_API   __declspec(dllexport) &lt;br /&gt; #endif//__cplusplus&lt;br /&gt;#else&lt;br /&gt; #ifdef __cplusplus&lt;br /&gt;  #define AFC_SCM_API   extern &quot;C&quot; __declspec(dllimport)&lt;br /&gt;  #define AFC_SCM_CLASS  __declspec(dllimport) &lt;br /&gt; #else&lt;br /&gt;  #define AFC_SCM_API   __declspec(dllimport)&lt;br /&gt; #endif//__cplusplus  &lt;br /&gt;#endif//AFC_SCM_EXPORTS&lt;br /&gt;&lt;br /&gt;AFC_SCM_API &lt;br /&gt;scm_ctx&lt;br /&gt;__stdcall&lt;br /&gt;create_scm_context(&lt;br /&gt; _In_z_ const wchar_t* driver_path, &lt;br /&gt; _In_z_ const wchar_t* service_name, &lt;br /&gt; _In_z_ const wchar_t* service_display_name,&lt;br /&gt; _In_ bool uninstall_service_on_free&lt;br /&gt; );&lt;br /&gt;&lt;/pre&gt;AFC_SCM_API 가 정의되어있는 경우 (dll 프로젝트 자체) create_scm_context() 함수는 dllexport 가 됩니다.&amp;nbsp;그렇지 않은 경우 &amp;nbsp;create_scm_context() 함수는 dllimport 가 되죠. 즉 dll 을 묵시적으로 링크하는 프로젝트가 되겠죠.&lt;br /&gt;dll 사용자는 dll, lib, header 파일만 있으면 별도로 손대지 않고, 그냥 dll 을 나름 편하게 사용할 수 있습니다.&amp;nbsp;def 파일을 이용해서 dll 을 만드는 경우 이런 이점을 버려야 할것 같네요. (별도로 dllimport 를 해주거나 명시적 링킹을 해야 하니까요...)&lt;br /&gt;&lt;br /&gt;대체 MS 는 왜 이런 짓을 하는거야..ㅆㅂ ㅆㅂ 하면서 잠시 생각해보니 나이스한 해결책이 있습니다. (&amp;nbsp;사실은 해결책이 아니라 제가 바보였던거죠. )&lt;br /&gt;&lt;br /&gt;x86 프로젝트에서는 예전처럼 dllexport 와 DEF 파일을 모두 사용하고, x64 프로젝트에서는 def 만 사용안하면 그만입니다.&amp;nbsp;x64 는 호출규약이 하나뿐이라 네임맹글링 문제가 없어서 def 와 dllexport 를 함께 사용하지 않도록 (불필요한 실수를 줄이기 위해) 가이드하는거 같습니다... (아님 말구요)&lt;br /&gt;&lt;br /&gt;결론:&amp;nbsp;dll 을 만들때는&lt;br /&gt;&lt;span style=&quot;color: blue; font-size: large;&quot;&gt;- dllexport 를 이용하고,&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue; font-size: large;&quot;&gt;- 32 비트에서 네임맹글링 문제가 있다면 def 파일을 함께 사용&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue; font-size: large;&quot;&gt;- 64 비트에서는 그냥 dllexport 만 사용 (네임맹글링 문제가 아예 없다!)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/8583263907232844908/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2013/01/lnk4197.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8583263907232844908'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/8583263907232844908'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2013/01/lnk4197.html' title='LNK4197 경고 해결하기'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-7NjWNIgSdi8/UPO9ySD_6vI/AAAAAAAAAEw/eWkij-6dia8/s72-c/lnk_one.png" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5432537856508947805.post-3360419051096575909</id><published>2013-01-02T22:04:00.000-08:00</published><updated>2016-03-06T04:25:57.587-08:00</updated><title type='text'>windows api hooking 예제</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;BoB 에서 멘토링을 하면서 API 후킹에 대한 예제를 만들었는데요.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;최대한 이해하기 쉽게 심플하게 만들었습니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;하드에 썩히는것보다는 공개하면 혹시 도움되시는 분들이 계실까? 하고 올려봅니다.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/somma/apihook&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://bugsfixed.blogspot.com/feeds/3360419051096575909/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://bugsfixed.blogspot.com/2012/11/windows-api-hooking.html#comment-form' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/3360419051096575909'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5432537856508947805/posts/default/3360419051096575909'/><link rel='alternate' type='text/html' href='http://bugsfixed.blogspot.com/2012/11/windows-api-hooking.html' title='windows api hooking 예제'/><author><name>somma</name><uri>http://www.blogger.com/profile/05406023541962197602</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry></feed>