<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>주노준호 블로그</title>
    <description>정리하는 블로그
</description>
    <link>https://junojunho.com/</link>
    <atom:link href="https://junojunho.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Feb 2019 08:33:18 +0000</pubDate>
    <lastBuildDate>Wed, 13 Feb 2019 08:33:18 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>머신러닝 : 프론트엔드 개발자의 새로운 도전</title>
        <description>&lt;h2 id=&quot;오늘-성장했어&quot;&gt;오늘 성장했어?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“준호씨 오늘 성장했어?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;나를 가장 자극했던 말은 성장에 대해 내 스스로 생각해볼 수 있는 질문을 받았을 때였다. 내가 멘토라고 할 수 있는 분에게 들은 말 가운데 가장 나를 긴장하게 만들면서도 자극을 주는 말은 오늘 성장했냐는 질문이다. 오늘도 나는 성장했을까?&lt;/p&gt;

&lt;h2 id=&quot;미래를-위한-준비&quot;&gt;미래를 위한 준비&lt;/h2&gt;

&lt;p&gt;나는 11번가에서 프론트엔드 개발자로 일하고 있다. 주로 모바일 웹을 담당하면서, 여러 서비스를 개발하고 있다. 조직에 속해있으면서 그 안의 시스템을 적극 활용해서 여러 문제를 만나고, 해결하고, 성장하기 위해 노력하고 있다. 프론트엔드 개발자로 일하는 만큼, 이 분야에서의 성장은 &lt;strong&gt;당연&lt;/strong&gt;해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/190118_01.png&quot; alt=&quot;열일일기&quot; /&gt;
(사진=11번가)&lt;/p&gt;

&lt;p&gt;하지만 조직에서의 성장에는 분명 한계가 있을 것이다. 의식적으로 성장하려는 노력을 하지 않는다면 나도 모르게 이미 뒤쳐져 있을 지도 모른다. 그렇다고 항상 트렌드만 쫒을 수는 없다. 끊임없이 발전되는 기술 속에 파묻힐 것이 분명하다.&lt;/p&gt;

&lt;p&gt;직감적으로 &lt;strong&gt;이미 어디엔가 다가와 있는 미래&lt;/strong&gt;를 미리 &lt;strong&gt;준비&lt;/strong&gt;해야 한다는 생각이 든다.&lt;/p&gt;

&lt;h2 id=&quot;도전-머신러닝&quot;&gt;도전! 머신러닝&lt;/h2&gt;

&lt;p&gt;웹 어플리케이션을 개발하다보면, 비슷한 패턴이 있다는 것을 느낀다. 서버에서 데이터베이스로부터 읽은 데이터를 API를 통해 클라이언트로 받아 읽고, 쓰고, 삭제하고 수정하는… 언제까지 이렇게 패턴화된 작업만 하면서 안주할 수는 없다. 지금도 다양한 곳에서 학습된 데이터나 인공지능 기술을 이용한 다른 종류의 어플리케이션이 등장하고 있고 내 호기심을 자극한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://news.chosun.com/site/data/html_dir/2019/01/01/2019010100203.html&quot;&gt;모든 학문에 인공지능이 스며들고 있다.&lt;/a&gt; 물론 IoT, 3D 프린팅, VR 과 같은 약간의 버즈워드와 같은 느낌도 있지만, 인공지능을 이용한 문제 해결 방법이 각 분야를 들쑤시며 이슈를 만들고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/190118_02.png&quot; alt=&quot;Coursera Machine Learning&quot; /&gt;
(사진=Coursera)&lt;/p&gt;

&lt;p&gt;가끔 이건 정말 내가 못할 것이라고 생각하는 것들에 대해 도전하고 싶을 때가 있다. 나에게는 &lt;strong&gt;머신러닝&lt;/strong&gt;이 바로 그랬다. 철학적으로, 개념적으로 &lt;strong&gt;인공지능&lt;/strong&gt;의 의미는 이해하고 있지만, 구체적인 동작 원리에 대해서는 아직 이해해야 할 것이 많다.&lt;/p&gt;

&lt;p&gt;나는 늘 수학적인 사고가 부족했다. 이성적인 사고를 통해 문제를 구조화하는 능력, 나아가 이런 사고의 기반이 되는 수학적 사고는 반드시 극복해야 한다. 수학을 하지 않던 미대 출신의 비전공자 개발자로서 올해 해야 할 목표 중 하나는 머신러닝/딥러닝에 대한 깊은 이해와 구현이다.&lt;/p&gt;

&lt;h2 id=&quot;작은-시작-지속하자&quot;&gt;작은 시작. 지속하자.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/190118_03.png&quot; alt=&quot;&quot; /&gt;
(사진=&lt;a href=&quot;https://www.instagram.com/tto_o1/&quot;&gt;@tto_o1 인스타그램&lt;/a&gt; 귀차냐옹~)&lt;/p&gt;

&lt;p&gt;일단은 회사의 지원을 받아 Coursera에서 가장 유명한 강의인 스탠포드 대학 앤드류 응 교수의 머신러닝 강의를 수강하기 시작했다. 사실 회사도 다니면서 다른 여러 학습도 해야 하는데, 한 가지 학습을 지속하기가 쉽지 않다. 지하철에서도 듣고, 점심시간에도 학습을 하려고 하지만 역시 아직까지는 과도기이다.&lt;/p&gt;

&lt;p&gt;올 해 하고 싶은 다른 주제들도 있었는데, 결국 선택과 집중을 해야만 한다. 아직까지는 이해가 쉽게 안가기 때문에 여러번 반복하지만, 근 미래에는 간단한 어플리케이션도 직접 구현해보고 싶다.&lt;/p&gt;

</description>
        <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/project/new-challenge</link>
        <guid isPermaLink="true">https://junojunho.com/project/new-challenge</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>Create-react-app Mobx, Router 환경 구성</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;본 포스트는 리액트에 대한 약간의 지식을 요구한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;목표&quot;&gt;목표&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;을 이용해 간단한 개발 환경 구성
    &lt;ul&gt;
      &lt;li&gt;웹앱의 상태 관리를 위한 라이브러리 &lt;strong&gt;react-mobx&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;라우팅를 위한 &lt;strong&gt;react-router&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본적인 React 웹앱의 구조 파악&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기본-리액트-환경-구성&quot;&gt;기본 리액트 환경 구성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;npx를 사용해서 리액트 프로젝트를 생성해본다.&lt;/li&gt;
  &lt;li&gt;과거에는 주로 react-create-app을 글로벌로 설치해서 사용했으나, npx를 이용하면 글로벌 패키지로 설치하지 않고 일회성 명령을 실행할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;을 이용해 web-app이라는 프로젝트를 생성한다.&lt;/li&gt;
  &lt;li&gt;(nodejs가 설치되어 있어야 한다)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx react-create-app web-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mobx&quot;&gt;&lt;a href=&quot;https://github.com/mobxjs/mobx&quot;&gt;Mobx&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;리액트 SPA(Single Page Application)에서는 상태 관리를 위한 라이브러리로 주로 &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;를 사용한다.&lt;/li&gt;
  &lt;li&gt;Mobx는 또 다른 상태관리 도구로, 정말 간단하게 상태를 관리할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/mobxjs/mobx-react&quot;&gt;react-mobx&lt;/a&gt;&lt;/strong&gt;를 이용하면 스토어의 상태가 변경될 때 뷰가 업데이트된다.&lt;/li&gt;
  &lt;li&gt;리덕스와 같은 보일러플레이트 코드를 사용하지 않기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt; 문법을 사용해야하는데, 추가 babel 설정이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mobx-패키지-설치&quot;&gt;Mobx 패키지 설치&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn add mobx react-mobx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mobx-데이터-구조&quot;&gt;Mobx 데이터 구조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기본적으로 간단히 ES6 클래스와 ES7 데코레이터 문법을 이용해서 스토어를 생성한다.&lt;/li&gt;
  &lt;li&gt;아래 예시 코드는 간단한 view model과 관련된 데이터를 저장하는 클래스이다.&lt;/li&gt;
  &lt;li&gt;변수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt;로 상태 변화 감지 시 리액트 뷰를 업데이트하고,&lt;/li&gt;
  &lt;li&gt;함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; 으로 정의되며, 리액트 내부에서 상태를 업데이트할 때 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데코레이터를-사용하지-않고-정의하는-방법&quot;&gt;데코레이터를 사용하지 않고 정의하는 방법&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* store/viewStore.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decorate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mobx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hideModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;showModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;decorate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;isShowModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hideModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;showModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewStore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;데코레이터를-사용한-스토어-정의&quot;&gt;데코레이터를 사용한 스토어 정의&lt;/h3&gt;

&lt;p&gt;ES7 데코레이터를 사용하면 코드를 더욱 간단하게 처리할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* store/viewStore.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mobx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observable&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hideModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* store/index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewStore&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./viewStore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;viewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;스토어-추가&quot;&gt;스토어 추가&lt;/h3&gt;

&lt;p&gt;앱의 시작점이 되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Provider&lt;/code&gt;를 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;stores&lt;/code&gt;를 전달한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* index.js */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mobx-react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stores&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./stores'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mobx-store의-사용&quot;&gt;Mobx Store의 사용&lt;/h3&gt;

&lt;p&gt;실제 스테이트를 사용할 컴포넌트에서 스토어를 주입하고, 상태 변화를 감지해서 화면을 업데이트한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mobx-react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'viewStore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;observer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 데코레이터를 사용하지 않는 방법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mobx-react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;isShowModal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;viewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-react-app에서-eject-없이-바벨-설정-추가하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt;에서 eject 없이 바벨 설정 추가하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ES7의 데코레이터와 같이 해당 기능을 사용하려면 babel 설정을 추가해야한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;create-react-app&lt;/strong&gt;의 기본 환경에서는 변경할 수 없다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run eject&lt;/code&gt; 스크립트를 통해 웹팩 설정을 외부로 꺼낸 후 변경할 수 있지만 번거롭다.&lt;/li&gt;
  &lt;li&gt;웹팩 설정이 꽤 복잡하고 장황하기 때문에, 이미 최적화된 &lt;strong&gt;create-react-app&lt;/strong&gt;을 그대로 사용하는 방법이 있다.&lt;/li&gt;
  &lt;li&gt;아래 내용은 웹팩의 설정을 꺼내지 않는 방법을 소개한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react-app-rewired&quot;&gt;&lt;a href=&quot;https://www.notion.so/fe11st/react-mobx-f0cc3ae8e24d42bc869914ce876413d2&quot;&gt;react-app-rewired&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;리액트 스크립트를 대체하는 &lt;strong&gt;react-app-rewired&lt;/strong&gt;를 이용하면 리액트 스크립트의 웹팩 설정에 새로운 바벨 설정을 주입시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn add react-app-rewired

&lt;span class=&quot;c&quot;&gt;# 추가 사용할 웹팩 패키지 설치 (데코레이터를 위한 모듈)&lt;/span&gt;
yarn add @babel/plugin-proposal-decorators &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 루트 디렉토리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;config-overrides.js&lt;/code&gt; 추가한다.&lt;/li&gt;
  &lt;li&gt;이곳에서 웹팩의 config를 확장시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;packagejson-스크립트-변경&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 스크립트 변경&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/190107_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;2019년 1월 3일 기준&lt;/em&gt;
  &lt;em&gt;리액트 스크립트가 버전 업데이트 되면서 오류가 발생한다.
  아래와 같이 depencency가 있는 버전을 맞추어주어야 한다.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-app-rewired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.6.2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config-overrides.js&lt;/code&gt; 에 데코레이터 바벨 설정 추가&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injectBabelPlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react-app-rewired'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injectBabelPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@babel/plugin-proposal-decorators'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;legacy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start&lt;/code&gt; 스크립트를 통해 개발 서버에서 정상 작동 되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;리액트-라우터&quot;&gt;&lt;a href=&quot;https://github.com/ReactTraining/react-router&quot;&gt;리액트 라우터&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;리액트-라우터-설치&quot;&gt;리액트 라우터 설치&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn add react-router-dom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 에서 라우터 주입한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;hashRouter&lt;/code&gt; 를 이용할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* index.js */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserRouter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-router-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/BrowserRouter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-router-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;withRouter&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Link&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Link&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/about&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Switch&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;본 포스트에서는 기본적인 웹어플리케이션의 필수적인 기능인 뷰 (React), 라우터 (React Router), 상태 관리 라이브러리 (MobX)를 이용해 프로젝트의 보일러플레이트를 구축해보았다.&lt;/li&gt;
  &lt;li&gt;action, reducer, constant, store 등 꽤 장황한 코드를 작성해야하는 리덕스와 달리 Mobx는 정말로 심플하게 대규모 앱을 관리할 수 있는 툴로 보인다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/front-end/create-react-app-with-mobx</link>
        <guid isPermaLink="true">https://junojunho.com/front-end/create-react-app-with-mobx</guid>
        
        
        <category>Front-end</category>
        
      </item>
    
      <item>
        <title>콘텐츠 워크플로우</title>
        <description>&lt;h3 id=&quot;선-요약&quot;&gt;선 요약&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;읽을거리가 너무 많다.&lt;/li&gt;
  &lt;li&gt;너무 많아지면 집중도가 떨어진다.&lt;/li&gt;
  &lt;li&gt;그래서 나만의 워크플로우를 만들었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/181111_01.png&quot; alt=&quot;contents workflow&quot; /&gt;
&lt;em&gt;위 워크플로우는 &lt;a href=&quot;https://draw.io&quot;&gt;플로우차트 드로잉 툴&lt;/a&gt;을 이용해 작성되었다.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본적으로 여러 리소스를 통해 지식을 습득 받지만, 처리해야 할 프로세스는 일정한 룰을 따른다.
물론 이 프로세스는 유동적으로 업그레이드되겠지만, 당분간은 이렇게 유지할 생각이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;첫-번째-문제---리소스가-너무-많다&quot;&gt;첫 번째 문제 - 리소스가 너무 많다.&lt;/h2&gt;

&lt;p&gt;인터넷을 하다 보면 읽을거리가 너무나도 많다. 읽을거리는 왜 이렇게 많고, 읽어야 하겠다는 욕심은 생기니 이것저것 저장해두고, 나중에 읽기로 한다.
시간이 지나면 읽을거리는 엄청나게 쌓여 있고, 왜 저장을 해두었는지 가늠조차 하기 어려워진다. 나 또한 여러 곳에서 리소스를 받아들이고 있다. 읽어야 할 디지털 콘텐츠는 시도 때도 없이 발견되고, 쉽게 잊어버린다.&lt;/p&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;p&gt;먼저, 내가 주로 콘텐츠를 얻는 리소스를 정리해보았다. 콘텐츠를 얻는 흐름을 예측 가능한 상태로 만들고 이후 프로세스를 진행해야겠다는 생각이었다. 나는 주로 &lt;a href=&quot;http://feedly.com&quot;&gt;Feedly&lt;/a&gt;통해 RSS 구독되는 콘텐츠를 가장 많이 접한다. 또한 여러 &lt;a href=&quot;https://getpocket.com&quot;&gt;Pocket&lt;/a&gt;, &lt;a href=&quot;http://medium.com&quot;&gt;Medium&lt;/a&gt; 등 이메일 구독 서비스를 통해 주기적으로 콘텐츠를 전달받는다. 그리고 간헐적으로 페이스북 타임라인에 공유되는 것들, 인터넷 기사 등을 통해 콘텐츠를 접한다.&lt;/p&gt;

&lt;p&gt;그리고 콘텐츠를 접한 이후 프로세스를 구축했다. 각 콘텐츠는 위 워크플로우를 따르도록 구성되는데, 콘텐츠를 바로 읽거나, &lt;a href=&quot;https://keep.google.com&quot;&gt;Google Keep&lt;/a&gt;을 이용해 &lt;strong&gt;나중에 읽도록&lt;/strong&gt; 저장된다.&lt;/p&gt;

&lt;p&gt;Keep 해둔 읽을거리는 시간을 내어 살펴본다. 읽는 시간 또한 계획적이어야 한다. 이때 깊게 익혀야 할 지식은 에버노트에 태깅하여 스크랩하거나, &lt;a href=&quot;https://bear.app/&quot;&gt;Bear&lt;/a&gt; 앱에 따로 정리 후 저장한다. 상황에 따라 &lt;strong&gt;종이 노트&lt;/strong&gt;를 쓰기도 한다. (종이 노트에 관련된 이야기는 나중에 따로 정리할 예정이다)&lt;/p&gt;

&lt;h2 id=&quot;두-번째-문제---지식의-습득이-일시적이다&quot;&gt;두 번째 문제 - 지식의 습득이 일시적이다.&lt;/h2&gt;
&lt;p&gt;디지털 콘텐츠를 접하는 것이 보편화된 상황에서 지식 또한 자연스럽게 편식하게 된다. 그리고 책이 아니고선 긴 글을 읽을 기회가 적다. 또한 읽고 나서 남는 게 없다는 느낌을 받게 된다. 항상 읽지만 정작 얻는 것은 없다는 이 느낌은 디지털 기반의 콘텐츠로부터 지식을 얻는 사람들 대부분이 공감할 문제일 것이다.&lt;/p&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;p&gt;나 또한 모든 것을 디지털화하려고 했던 때가 있었다. 최근 다시 아날로그를 적극 활용하는 방향으로 키를 돌렸다. 늘 디지털을 사용하면 정리는 잘 될지 몰라도, 책, 노트를 스르륵 넘기면서 우연히 발견되는 아이디어나, 생각, 조각들을 결합하기 어렵다. E-Book으로 보려고 애썼던 책은 종이책을 더 이용하는 방향으로, 노트 앱만 이용하던 기록은 종이 노트를 이용해 정리하기로 한다.&lt;/p&gt;

&lt;p&gt;노트는 상황에 맞게 선택한다. 개발 공부와 관련된 지식은 주로 앱을 사용하며, 자유롭게 기록하면서 익혀야 할 지식은 종이 노트를 활용한다. 이렇게 정리가 된 지식은 장기 보관된다.&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Nov 2018 18:01:00 +0000</pubDate>
        <link>https://junojunho.com/productivity/knowledge-work-flow</link>
        <guid isPermaLink="true">https://junojunho.com/productivity/knowledge-work-flow</guid>
        
        
        <category>Productivity</category>
        
      </item>
    
      <item>
        <title>JS 코딩 면접과 문제 해결 과정</title>
        <description>&lt;h3 id=&quot;배경&quot;&gt;배경&lt;/h3&gt;

&lt;p&gt;프론트엔드 개발자 포지션으로 인터뷰를 할 기회가 있어서 참여했다가 코딩 테스트를 3번 하게 되었다. 그 중 한 문제가 알고리즘과 유사한 문제였다. 나머지 두 개는 리액트로 컴포넌트를 만들거나 스타일을 입히는 문제라 잘 진행을 했는데, 평소 관심을 두지 않던 분야의 문제를 받았고 이렇게 다시 정리해본다.&lt;/p&gt;

&lt;h3 id=&quot;디자이너의-문제-해결-방식&quot;&gt;디자이너의 문제 해결 방식&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180504_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;디자이너는 미적인 선택을 할 때 주로 직관을 사용한다. 특정 이미지의 색깔을 변경할 때 판단의 도구가 되는 것은 바로 &lt;strong&gt;감각&lt;/strong&gt;이다. 사진을 보정해야 하는 상황을 가정해보자. 디자이너는 포토샵과 같은 편집 툴을 이용해 명도/채도 값을 변화시키는데, 이 때 판단의 기준은 본인의 감각이다. 값을 조금씩 바꾸어 보면서 결과를 눈으로 바로 확인하고, 보정을 마친다. 물론 주관적이라고 할 수도 있다. 일정 수준 이상의 주관적인 감각이 바로 디자이너의 역량이 된다.&lt;/p&gt;

&lt;h3 id=&quot;잘못된-코딩-습관&quot;&gt;잘못된 코딩 습관&lt;/h3&gt;

&lt;p&gt;주제는 코딩 테스트인데, 왜 디자이너의 작업 과정 이야기를 했을까. 이게 바로 내가 고쳐야 할 문제 중 하나이기 때문이다. 과거 코딩을 처음 시작했을 때도, 인터뷰에서도 문제가 된 나의 &lt;strong&gt;코딩 습관&lt;/strong&gt;이었다.&lt;/p&gt;

&lt;p&gt;특히 3D 작업을 할 경우, 모델링을 랜더링할 때, 빛과 같은 설정 값을 변화시키고, 눈으로 확인하는 작업은 매우 익숙하다. 나 또한 디자이너로 보낸 오랜 시간 동안 이 과정을 익숙하게 받아들였다. 이는 사실 CSS 작업을 해야할 때는 조금 유리하게 작용하기도 한다. &lt;strong&gt;진짜 문제&lt;/strong&gt;는 프로그래밍 문제를 해결해야 할 때의 잘못된 습관이다.&lt;/p&gt;

&lt;p&gt;코딩을 할 때, 특정 문제나 이슈를 해결해야 할 때 내 모습은 이렇다. 이 문제는 아무 생각없이, 의식하지 않고 코딩을 할 때 자주 발생하는데, 결과적으로 내 시간과 성장의 기회를 깍아먹는다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;문제를 해결해야 할 상황에 주어진다.&lt;/li&gt;
  &lt;li&gt;바로 키보드에 손이 간다.&lt;/li&gt;
  &lt;li&gt;이것 저것 함수를 만들어보고, 로그를 본다.&lt;/li&gt;
  &lt;li&gt;가끔 검색도 하고 코드를 카피해서 붙여본다.&lt;/li&gt;
  &lt;li&gt;해결이 안 되면, 또 키보드를 두드린다.&lt;/li&gt;
  &lt;li&gt;운이 좋으면 문제가 해결되겠지만, 정작 얻은 것은 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 과정은 마치 디자이너가 사진을 보정할 때의 과정과 유사하다. 나는 그렇게 느껴진다. 하지만 나는 개발자가 이래서는 안된다는 것을 분명히 알고 있다.&lt;/p&gt;

&lt;h3 id=&quot;자바스크립트-코딩-문제&quot;&gt;자바스크립트 코딩 문제&lt;/h3&gt;

&lt;p&gt;내가 받은 문제는 다음과 같다.(100% 정확하진 않지만, 기억 나는대로 내가 받은 문제를 떠올렸다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180504_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
트리 구조의 엘리먼트가 있다. 2개의 선택자 문자열을 인자를 받는 함수를 통해
아래와 같은 결과를 콘솔에 출력해야 한다.

printStr('.c-2', '.c-3');
`Home. I feel Happy Today.`
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        Hello
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-1-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-1-2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;to my&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        Home.
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-2-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            I
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-2-1-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;am&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        Happy
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-3-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Today.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        Thanks
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-4-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Guys!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.c-2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.c-3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음에는 간단해 보였다. 나는 jQuery를 다룰 줄 아니까, 선택자로 텍스트를 뽑아서 로그 찍으면 되겠구나. 그리고 재귀 함수를 작성해야겠다.&lt;/p&gt;

&lt;p&gt;재귀 함수도 쉽게 작성하지 못했지만, 선택자로 div 내의 텍스트와 일반 텍스트를 구별해야했기 때문에 뜻대로 안 되니 당황하기 시작했다. 당황스러운 상황에 들어가니 다시 습관이 도지기 시작했다. jQuery 문서를 이리저리 뒤져보다가 함수를 여러 개 만들기를 반복했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 당황해하자 지켜보시던 면접관님이 내가 풀 수 있는 쪽으로 유도해주셨다. 바로 키보드를 치려고 하지 말고, 차근이 생각해보라. 그리고 면접이 끝날 시간이 다가오니, 말로 해보자면서 지금 문제가 되는 부분을 해결해줄 수 있는 함수가 있다면 어떻게 할 것인가? 등의 질문으로 당황한 내 상황을 진정시켜주었다. 문제를 정확하게 풀진 못했지만, 다시 한 번 내 코딩 습관과 문제에 대한 접근 방법에 대해 고민할 수 있는 계기가 되었다.&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;&lt;/p&gt;

&lt;p&gt;면접관님은 이런 코딩 습관을 어떻게 해결할 것인지에 대해서 물어보았다. 나는 이미 내 코딩 습관에 대해 알고 있었고, 생각해본적도 많았다. 나는 대략 이렇게 대답했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://book.naver.com/bookdb/book_detail.nhn?bid=7046432&quot;&gt;습관의 힘&lt;/a&gt;이라는 책을 보면, 습관에는 3가지 단계가 있는데, &lt;strong&gt;신호 - 반복행동 - 보상&lt;/strong&gt; 이 과정을 반복한다. 문제를 정의하고 해결할 방법을 찾아가는 논리적인 사고 없이 키보드를 치는 내 코딩 습관에 대해서 이미 알고 있었고, 앞으로 내가 문제를 만났을 때 (신호), 바로 키보드에 손을 올리는 행동 (반복행동) 대신, 그 사이에 종이와 펜을 넣어 논리적으로 생각할 수 있는 단계를 인위적으로 넣어보겠다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;평소 개발자는 문제에 대해 논리적인 접근을 할 수 있어야 한다고 생각했지만, 테스트에서 나는 그런 모습을 보여주지 못했다. (오늘 날짜로 아직 결과가 나오지 않았고, 같이 일 해보고 싶은 곳이었지만 결과는 잘 모르겠다.)&lt;/p&gt;

&lt;h3 id=&quot;다시-풀어보기&quot;&gt;다시 풀어보기&lt;/h3&gt;

&lt;p&gt;집으로 돌아가면서 너무 억울했고 자책하기도 했다. 난이도 높은 문제도 아닌데 내가 왜 못했을까. 왜 당황했을까. 그리고 집으로 돌아가서 문제를 떠올렸고, 내가 해결해야 할 문제와 상황을 다시 정의해보면서 문제를 풀기 시작했다.&lt;/p&gt;

&lt;p&gt;내가 받은 문제는 두 가지를 묻는 문제였다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;자바스크립트에서 children과 childNode를 구분하는 것&lt;/li&gt;
  &lt;li&gt;재귀 함수를 작성하는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그리고&lt;/p&gt;

&lt;p&gt;나는 재귀 함수로 children과 childNode의 텍스트를 전달해주는 함수 &lt;code class=&quot;highlighter-rouge&quot;&gt;getText&lt;/code&gt;를  작성했다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;allStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DIV'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/gi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;allStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(지금 볼 때 좋은 구조는 아닌 것 같지만) &lt;code class=&quot;highlighter-rouge&quot;&gt;allStr&lt;/code&gt;이라는 전역변수에 재귀로 뽑은 텍스트를 추가해주는 식이었다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 시작과 끝 인덱스를 저장할 변수 선언&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// wrap 내 모든 자식 dom을 가져온다&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#wrap'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 리턴할 문자열&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// from, to의 인덱스 찾기&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;allDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fromIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;toIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 각 노드의 텍스트를 뽑아 문자열 업데이트&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;allDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메인이 되는 함수 &lt;code class=&quot;highlighter-rouge&quot;&gt;printStr&lt;/code&gt; 에서는 시작 지점과 끝 지점을 구분할 인덱스 변수를 만들었고, 배열에서 해당 범위의 문자열만 뽑아 리턴하는 구조로 작성했다.&lt;/p&gt;

&lt;h3 id=&quot;결과&quot;&gt;결과&lt;/h3&gt;

&lt;p&gt;알게 모르게 디자인 베이스의 개발자가 꽤 많아 보인다. 웹에서는 접점도 많고 니즈도 분명히 있기 때문으로 보인다. 그러나 그런 사람들이 나와 같은 과정을 반복하는지 모르겠다. 나만 겪는 문제인지 확신할 수는 없지만, 나는 내 단점을 명확하게 인식하고, 습관을 바꾸고, 더 성장하고 싶을 뿐이다.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/front-end/coding-test</link>
        <guid isPermaLink="true">https://junojunho.com/front-end/coding-test</guid>
        
        
        <category>Front-end</category>
        
      </item>
    
      <item>
        <title>크리에이티브 코딩 익히기</title>
        <description>&lt;h3 id=&quot;프로세싱-processing-과-p5&quot;&gt;프로세싱 (processing) 과 p5&lt;/h3&gt;

&lt;p&gt;처음에는 &lt;a href=&quot;https://www.processing.org/&quot; target=&quot;_blank&quot;&gt;프로세싱 (Processing)&lt;/a&gt;으로 시작했다. 프로세싱은 자바 기반이며, 누구나, 어느 환경에서든 쉽게 실행시킬 수 있도록 OS 별 IDE (에디터)도 제공하고 있다.&lt;/p&gt;

&lt;p&gt;프로세싱에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;draw&lt;/code&gt; 라는 전역 함수가 있는데, 두 함수를 기본으로 그래픽이 그려진다. &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;에서 기본적으로 화면에 필요한 기능을 초기화하고, 프레임에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;draw&lt;/code&gt; 함수가 끊임없이 실행된다.&lt;/p&gt;

&lt;p&gt;프로세싱으로 기본 도형부터 시작해서 기하학적인 형태의 이미지를 만들어보았지만, 프로세싱 IDE는 불편했고 버그도 많았다. 다른 에디터에서 쓰던 단축키 등 다양한 기능에 제한이 있었다. 그러다가 프로세싱의 웹 버전인 p5를 알게 되었고, 사용하기 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://p5js.org&quot; target=&quot;_blank&quot;&gt;p5&lt;/a&gt; 웹에서 작동되는 방식이기 때문에 접근성이 높고, 진입장벽이 낮으며, 비교적 간단하다. 웹 브라우저만 있으면 실행시킬 수 있다는 말이다. 특히 다니엘 쉬프만과 같이 &lt;a href=&quot;https://www.youtube.com/watch?v=8j0UDiN7my4&quot; target=&quot;_blank&quot;&gt;좋은 유투브 강의&lt;/a&gt;가 많았고, 사운드, 씨리얼 통신 등 필요한 라이브러리는 모두 갖추고 있었다. HTML 돔(DOM)을 함께 이용할 수 있는 것도 큰 장점이다. HTML 캔버스를 직접 사용하거나, iframe 을 사용해서 웹페이지에 그대로 넣을 수도 있다.&lt;/p&gt;

&lt;p&gt;p5를 다루면서, 프로세싱에서 자바로 구현했던 코드를 p5로 바꾸었다. 자료형이나 약간 다른 함수명만 잘 파악해주면 쉽게 바꿀 수 있었다.&lt;/p&gt;

&lt;iframe height=&quot;500&quot; src=&quot;https://commoners.gitlab.io/feed/2018/03/29/segmented-circle.html&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;지킬jekyll-템플릿을-활용한-p5-개발-환경&quot;&gt;지킬(jekyll) 템플릿을 활용한 p5 개발 환경&lt;/h3&gt;

&lt;p&gt;p5의 새로운 프로젝트를 시작하기 위해서는 동일한 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;에 라이브러리 스크립트를 불러오고, 스타일을 추가해야하고, 늘 같은 코드를 반복해서 카피해야만 했다. CLI로 p5 프로젝트를 생성할 수 있는 툴도 찾아봤지만, 결국 똑같은 코드를 카피하는 것일 뿐이었기에 마음에 들지 않았다.
나는 작업을 원활하게 하기 위해 정적 블로그 생성기 &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;jekyll&lt;/a&gt; 을 이용해서 간단한 &lt;a href=&quot;https://commoners.gitlab.io&quot; target=&quot;_blank&quot;&gt;페이지&lt;/a&gt;를 만들었고, p5로 작업한 결과물을 블로그 포스트를 하듯이 업로드 하게 되었다. (지속적으로 업데이트 중이다)&lt;/p&gt;

&lt;p&gt;지킬은 특정 디렉토리에서 템플릿을 만들어 사용할 수 있는데, 의존성있는 라이브러리와 스타일을 정의해둔 템플릿을 만들어두고, 마크다운 대신에 html 파일을 기반으로 포스트를 작성할 수 있다. html 형식의 포스트에서는 p5 코드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 블럭에 포함되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; 를 통해 생성된다.&lt;/p&gt;

&lt;h3 id=&quot;다른-라이브러리와-함께-사용하기&quot;&gt;다른 라이브러리와 함께 사용하기&lt;/h3&gt;

&lt;p&gt;웹 기반인 p5의 장점은 여러 웹용 라이브러리를 손쉽게 추가하고 사용할 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;가장 유용한 툴은 &lt;a href=&quot;https://github.com/dataarts/dat.gui&quot; target=&quot;_blank&quot;&gt;dat.GUI&lt;/a&gt;인데, 파라메트릭 디자인에서 형태를 만드는데 가장 중요한 파라미터 데이터를 쉽게 바꿔주는 툴이다. 참조형 타입인 자바스크립트의 오브젝트를 watch하면서 그려준다. &lt;a href=&quot;https://commoners.gitlab.io/library/2018/03/29/dat-gui.html&quot; target=&quot;_blank&quot;&gt;예제&lt;/a&gt;는 여기서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180322_face_tracking.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 &lt;a href=&quot;https://github.com/auduno/clmtrackr&quot; target=&quot;_blank&quot;&gt;clmtrackr&lt;/a&gt; 얼굴을 인식하여, 모델 객체를 받을 수 있는 자바스크립트 라이브러리이다. p5의 카메라와 이미지를 함께 사용해서 재미있는 &lt;a href=&quot;https://commoners.gitlab.io/feed/2018/03/12/face-tracking.html&quot; target=&quot;_blank&quot;&gt;인터렉션 작업&lt;/a&gt;을 할 수 있었다. &lt;a href=&quot;https://commoners.gitlab.io/feed/2018/03/12/face-tracking.html&quot; target=&quot;_blank&quot;&gt;이 곳에서 직접 확인&lt;/a&gt;할 수 있다. (웹캠 필요)&lt;/p&gt;

&lt;p&gt;하지만 위의 작업과 같이 카메라를 사용하거나 복잡한 형태를 그리게 되면 퍼포먼스에 문제가 드러난다. 브라우저의 성능이 끊임없이 발전되고 있지만, 확실히 아직까지는 무거운 작업에 적합하지 않다는 결론이다.&lt;/p&gt;

&lt;h3 id=&quot;컴퓨테이셔널-디자인을-위해-필요한-지식&quot;&gt;컴퓨테이셔널 디자인을 위해 필요한 지식&lt;/h3&gt;

&lt;p&gt;p5로 기하학 형태 그리면서 알게된 원리는 함수명만 다를 뿐, 구현 방식은 비슷하다는 것을 알게 되었다. 프로세싱, 오픈프레임웍스, 라이노, 그래스호퍼, 포토샵, 일러스트 모두 같은 원리로 기하 형태를 그린다. 어떻게 구현하는지가 문제가 아니라, 어떤 형태를 만드는지가 더 중요하다는 것이다. 더 매력적인 이미지를 만들기 위해서는 수학이 필수적이었다. 기하학적인 형태를 만들기 위해서는 수학적 지식을 기반으로 응용해야했다.&lt;/p&gt;

&lt;p&gt;전에 &lt;a href=&quot;http://junojunho.com/design/design-and-math&quot;&gt;디자인과 수학&lt;/a&gt;이라는 글을 쓴 적도 있지만, 우리가 인지하지 못하는 곳에서 이미 수학적 지식이 사용되고 있다. 나는 다시 수학을 공부해야만 했다. 디지털 아트에 정말 필요한 수학 지식은 선형대수와 같이 벡터, 삼각 함수 정도가 있다.&lt;/p&gt;

&lt;p&gt;물론 수학은 아티스트와 디자이너에게 꽤 큰 장벽이 될 수 밖에 없다는 생각이 든다. 하지만 기초가 되는 원리를 알지 못한다면, 알고리즘을 이용한 디지털 아트 작업, 파라메트릭 디자인, 제너레이티브 아트 모두 우연에 의해 생성되었다는 편견을 가질 수도 있다. 우연적인 방법으로 만들어진 형태로 보이는 자하 하디드의 DDP는 오히려 더 수학적으로 계산된 것이다.&lt;/p&gt;

&lt;h3 id=&quot;오픈프레임웍스-openframeworks&quot;&gt;오픈프레임웍스 (OpenFrameworks)&lt;/h3&gt;

&lt;p&gt;퍼포먼스 문제도 있지만, 이미지를 분석해서 사람의 동작이나 영상을 다룰 수 있는 OpenCV 와 같은 툴도 함께 다루어 보고 싶어서 &lt;a href=&quot;http://openframeworks.cc/&quot; target=&quot;_blank&quot;&gt;openFrameworks (오픈프레임웍스)&lt;/a&gt;를 더 익히기로 했다. C++은 스크립트 언어인 자바스크립트보다 저수준의 언어이기 때문에 퍼포먼스가 좋기 때문에 게임 쪽에서 많이 이용된다. 언젠가 iOS 도 다루어보고 싶은데, 애플에서 나온 언어인 스위프트도 함께 사용 가능할 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;오픈프레임웍스-본격적으로-익혀보기&quot;&gt;오픈프레임웍스, 본격적으로 익혀보기&lt;/h3&gt;

&lt;p&gt;일단 어떤 과정으로 어떤 것을 익혀야 하는지에 대한 방향을 설정했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개발환경 구성&lt;/li&gt;
  &lt;li&gt;C++
    &lt;ul&gt;
      &lt;li&gt;기본 문법&lt;/li&gt;
      &lt;li&gt;자료구조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공식 홈페이지
    &lt;ul&gt;
      &lt;li&gt;문서 간단히 읽고 프로젝트 구조 파악&lt;/li&gt;
      &lt;li&gt;API 문서 보는 방법 익히기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-Book
    &lt;ul&gt;
      &lt;li&gt;따라해보기&lt;/li&gt;
      &lt;li&gt;필요한 코드 메모&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;오픈프레임웍스는 어제부터 익히기 시작해서, 오늘 날짜로 이틀 되었다. 아직까지 C++ 문법이 쉽게 익숙해지지 않지만, 앞서 이야기했듯이, 기하학을 기반으로 형태를 그리는 것은 원리가 유사하다. 문법과 API가 익숙하지 않지만, 무언가를 만들 수는 있다. 여러 애드온도 붙여서 사용해봐야 하고, OpenCV, 아두이노 등과 연동해보려면 아직 해야할 것들이 꽤 남았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180405_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;p5로 구현했으면 꽤 버벅였을 이미지를 오픈프레임웍스로 작업해보았다. 각 포인트에 대한 컬러 값을 랜덤으로 생성하는데, 오픈프레임웍스에서는 확실히 퍼포먼스가 좋다. 물론 컴파일에 시간이 걸리고, xcode가 낯설지만, 안정적이다.&lt;/p&gt;

&lt;h3 id=&quot;목표&quot;&gt;목표&lt;/h3&gt;

&lt;p&gt;크리에이티브 코딩을 제대로 시작한지 이제 막 한 달정도 되었고, 매일 조금씩 진행 중이다. 언제까지 해볼지는 잘 모르겠지만, 원하는 수준은 있다. 판매가 가능한 높은 수준의 결과물, 낯선 경험을 주는 결과물을 생산하고 싶다.&lt;/p&gt;

&lt;p&gt;디지털 아트는 문제 해결을 위한 코딩이 아니기 때문에 어떤 면에서 굉장히 막연하다. 어느 시점에서 작업을 멈추어야 하는지도 헷갈린다. 매일 아무 생각없이 이것 저것 따라해보면, 항상 어떤 결과물이 만들어지는 것을 경험한다. 하지만 디자이너가 아닌, 개발자로 보낸 시간이 있기 때문에, 이상하게 더 기술적 지식이나 구현 방법에 매달리고 툴을 만들어보려는 아이디어에서 벗어나기 어렵기도 하다. 지금의 나는 형태의 구현보다, 무형의 가치와 판단되기 어려운 아름다움에 더 집중할 필요가 있다는 생각이 든다.&lt;/p&gt;

&lt;p&gt;물론 이 작업을 하면서도 성장에 도움이 되는 방향으로 연결시켜야 한다. 그렇기 때문에 이런 글도 써보고 정리도 해본다. 수학을 아주 오래전에 접었던 내가 다시 공부를 해보면서, 크리에이티브 코딩을 할 때 필요한 수학적 지식을 정리해보고 있다. 언젠가 정리가 되면 공개할 생각이다.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/project/learn-creative-coding</link>
        <guid isPermaLink="true">https://junojunho.com/project/learn-creative-coding</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>AWS EC2 + NginX + Nodejs Express</title>
        <description>&lt;h3 id=&quot;배경&quot;&gt;배경&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://commoners.co.kr/&quot;&gt;commoners(커머너즈) 홈페이지&lt;/a&gt;를 풀스택으로 개발하면서 여러 이슈가 있었는데, 그 중 경험이 없어서 어려웠던 부분이 백엔드였다. 배포도 마찬가지였다. 서버에 배포시켜 웹서버를 띄우는 것보다, 개발 환경에서 가상 서버 크고 끄는데 더 익숙했던 나는 서버 작업 모두가 큰 이슈였다.&lt;/p&gt;

&lt;p&gt;백엔드 스택은 AWS의 EC2 리눅스 서버를 사용하고, nginx 위에 Nodejs express, 데이터베이스는 mongodb를 사용한다. 이 과정에서 겪은 몇몇 문제를 공유해본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;forever로-express-서버-실행&quot;&gt;forever로 express 서버 실행&lt;/h3&gt;

&lt;p&gt;서버 실행은 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;로 express 서버를 실행시키는 방법을 택했다. 서버가 프로세스(백그라운드)에서 실행되어야 했기에 &lt;a href=&quot;https://www.npmjs.com/package/forever&quot;&gt;forever&lt;/a&gt; 라는 프로세스 관리 패키지를 글로벌에 설치하여 사용했고, 잘 작동한다.&lt;/p&gt;

&lt;p&gt;forever를 이용해서 스크립트를 실행하는 코드는 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forever start -c &quot;npm start&quot; ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-80포트-방화벽-문제&quot;&gt;AWS 80포트 방화벽 문제&lt;/h3&gt;

&lt;p&gt;EC2 서버에서는 기본 포트인 80 포트가 보안 문제로 직접 접근할 수 없기 때문에, 방화벽 설정을 통해 리다이렉트 시켜주는 방법을 이용해야 한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;를 통해 리눅스에서 방화벽을 설정할 수 있는데, 아래 코드를 통해 80포트로 접근되는 접근을 3000포트로 리다이렉트 시켰다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws로-ssl-인증서-적용&quot;&gt;AWS로 SSL 인증서 적용&lt;/h3&gt;

&lt;p&gt;크롬에서는 사용자 랩탑의 카메라를 사용하기 위해서는 SSL 인증을 요구했는데, 카메라를 사용해서 얼굴을 인식하는 것과 같은 &lt;a href=&quot;&quot;&gt;인터렉션 디자인 작업&lt;/a&gt;을 커머너즈 홈페이지에 적용할 경우를 대비해 SSL 적용이 필요했다.&lt;/p&gt;

&lt;p&gt;SSL을 적용하는 것은 AWS에서 처리했는데, &lt;a href=&quot;https://aws.amazon.com/certificate-manager/&quot;&gt;Certificate Manager&lt;/a&gt;를 사용하면 무료로 인증서를 발급받아 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;여기에 EC2의 로드밸런서를 이용해 80 포트로 접근하면 http, 443 포트로 접근하면 https로 넘겨준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-접근-시-https로-넘기는-문제&quot;&gt;http 접근 시 https로 넘기는 문제&lt;/h3&gt;

&lt;p&gt;또 다른 문제에 직면했는데, http로 접근했을 때도 https로 접속시키게 만들고 싶었다. express의 라우터를 리슨하면서 처리해봤는데, 잘 되지 않았다. AWS의 로드밸런서 만으로 되지 않았다.&lt;/p&gt;

&lt;p&gt;페이스북 AWS 커뮤니티에 질문해보니, 3가지 답변이 올라왔다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;웹서버에서 해결 (Nginx rewrite 모듈을 적용)&lt;/li&gt;
  &lt;li&gt;AWS 기능 활용 (클라우드 프론트 / ALB)&lt;/li&gt;
  &lt;li&gt;Express &lt;code class=&quot;highlighter-rouge&quot;&gt;x-forwarded-proto&lt;/code&gt; 로 해결&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;나는 express 보다 비교적 안정적인 nginx를 express 앞단에 두는 방법을 택했다. 조금 검색해보니 해킹 위험 방지 효과도 있고 마침 EC2에 nginx로 설치되어 있어서 1번 방법을 선택했다. 직접적으로 익스프레스 서버를 실행하는건 동일하지만, nginx의 프록시패스로 처리된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기존-방화벽-코드-삭제&quot;&gt;기존 방화벽 코드 삭제&lt;/h3&gt;

&lt;p&gt;nginx의 프록시 패스를 사용하기 위해 기존에 &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;에 적용시킨 코드를 삭제해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기존 방화벽 룰 확인
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -t nat -L --line-numbers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;체인 번호 확인 후 삭제&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;만약 1번이 내가 삭제할 룰 이라면,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -t nat -D PREROUTING 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginx-의-프록시-패스로-express-적용하기&quot;&gt;Nginx 의 프록시 패스로 express 적용하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;nginx 가 설치된 디렉토리로 이동한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /etc/nginx/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt; 파일을 수정한다.
  기존 설치된 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt; 파일은 백업 본을 복사해두고, 불필요한 부분은 주석 처리한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; 하는 방법을 선택했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;nginx.conf 편집 (주석 생략)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # servers 하위 설정 파일을 모두 include 시킨다
    include servers/*;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;servers/site_url.conf 편집&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name site_url;

    # 로드 밸런서를 사용했다면, 아래 코드로 인해 http -&amp;gt; https로 리다이렉트됨
    proxy_set_header X-Forwarded-Proto $scheme;
    if ( $http_x_forwarded_proto != 'https' ) {
        return 301 https://$host$request_uri;
    }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://127.0.0.1:3000/;
        proxy_redirect off;
    }

    gzip on;
    gzip_comp_level 2;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_disable &quot;MSIE [1-6]\.&quot;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;nginx restart
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이후 다시 forever를 이용해 express를 실행시키고, http로 접근해보면 https로 리다이렉트 되는 것을 확인할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/front-end/aws-nginx-express</link>
        <guid isPermaLink="true">https://junojunho.com/front-end/aws-nginx-express</guid>
        
        
        <category>Front-end</category>
        
      </item>
    
      <item>
        <title>다시 디자인하기</title>
        <description>&lt;h3 id=&quot;문제&quot;&gt;문제&lt;/h3&gt;

&lt;p&gt;개발자로 일한지 2년이다. 과거 나는 UI 디자이너로 일했다. 개발자가 된 이후 디자인에 손을 거의 떼다시피 했다. 작년에는 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.farota.console.android&quot;&gt;FAROTA 앱&lt;/a&gt;의 프론트엔드를 개발하면서 UI 디자인도 함께 했지만, 사실 디자인에 비중을 크게 두지 않았다.&lt;/p&gt;

&lt;p&gt;최근 디지털 + 디자인 스튜디오 &lt;a href=&quot;https://commoners.co.kr&quot;&gt;commoners&lt;/a&gt;에 합류하면서 그래픽 디자인 작업을 해야하는 상황이 생겼다. 효자동의 책방 인테리어를 진행하면서 브랜딩 작업을 하게 되었는데, 아무리 아이디어를 내보고, 그려봐도 결과물이 잘 나오지 않았다.&lt;/p&gt;

&lt;p&gt;일단 툴부터 문제였다. 개발자로 일하면서 라이센스 문제로 Adobe 제품 대신 &lt;a href=&quot;https://affinity.serif.com/en-us/&quot;&gt;Affinity&lt;/a&gt; 제품을 구매해서 사용했다. UI 디자인은 Sketch나 Figma를 사용했고, 그동안 나에게 복잡한 작업이 요구되지 않았다. 로고 디자인을 위해 Affinity Desinger로 복잡한 형태의 디자인을 그리려고 하니 손에 익지 않았다. 처음 포토샵과 일러스트를 익힌지 12년이나 지났기 때문에, 한 번 익숙해진 툴에 대한 감각은 쉽게 변하지 않았다. 결국 Adobe creative cloud에서 트라이얼 버전의 포토샵과 일러스트를 받았다.&lt;/p&gt;

&lt;p&gt;개발자가 된 이후에도 디자인을 매일 보기만 했지, 직접 아이디어를 내고 작업하지는 않았다. 디자인에 대한 생각을 정립했고, 디자인을 보는 관점을 가지게 되었다고 생각했지만, 직접 작업하는 것은 또 다른 문제였다. 마치 예술가와 미학자의 다른 성격과 같이 나는 직접 작업하는 플레이어가 아니라, 해석하고 비평하는 사람이 되어있었던 것이다.&lt;/p&gt;

&lt;h3 id=&quot;디자인-케이스-스터디&quot;&gt;디자인 케이스 스터디&lt;/h3&gt;

&lt;p&gt;문득 디자인을 코딩 공부하듯이 스터디를 해보아야 겠다는 생각이 들었다. 먼저 내가 관리하는 trello의 보드에 리스트를 생성하고 세부 계획을 세웠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계획은 이렇다. 카피해볼 작업을 선정하고, 그려보고, 컬러와 형태에 대한 감각을 익히는 것이다. 이는 분명 코딩과 같이 명확한 인풋과 아웃풋이 존재하는 작업이 아니다. 그러나 내 문제를 파악했고, 해결책이 될 수도 있는 방법으로 시도해보는 작업이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;나에게 부족한 것은 형태와 컬러에 대한 감각이다. 스케치를 오랜 시간 하지 않았고, 손도 굳었다. 현대 디자인에서 머리를 쥐어짜내는 형태만이 진리가 아니라고 생각하지만, 손의 감각이 중요한 것임은 분명하다. 따라 그려볼 누군가의 작업이 필요했다. behance에서 &lt;a href=&quot;https://www.behance.net/gallery/48002377/Personas&quot;&gt;Personas (페르소나)&lt;/a&gt; 라는 일러스트 작업을 골랐다.&lt;/p&gt;

&lt;h3 id=&quot;일단-따라-그려보자&quot;&gt;일단 따라 그려보자&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일러스트는 쉽게 손에 익었다. 마우스로 슥슥 따라 그렸다. 내가 처음 배웠던 2006년의 포토샵, 일러스트와는 확실히 많이 바뀌었다. Adobe CC 가 나올 시기에 디자인 일을 그만두었는데, 최신 버전의 일러스트는 생각보다 안정성이 있더라.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아웃라인도 확인해보면서 어색한 부분을 수정했다. 색을 넣어보니 그라데이션이 빠져있어서 그려넣었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;10분 정도 걸렸다. 좌측이 내가 카피한 결과물이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내친 김에 하나 더 그려봤다. 두 번째 일러스트는 조금 더 복잡해서 더 오래걸렸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;컬러&quot;&gt;컬러&lt;/h3&gt;

&lt;p&gt;페르소나의 컬러는 색감이 적절하게 표현되어 있었다. 흑인의 피부색은 다 같은 검정색이 아니다. 검정색 안에서 푸른 빛이 돌기도 하는데, 두 번째 일러스트가 그랬다. 배경이 파란색이고, 푸른 계열의 검정색이 이 페르소나의 피부색으로 표현되었다. 첫 번째 그림은 태닝된 백인의 이미지였다. 붉은 피부로 그려진 이 페르소나는 웜톤의 배경과 더 잘 어울린다.&lt;/p&gt;

&lt;p&gt;실재로 디자이너는 어떻게 색을 정할까. 뭐 여러 방법이 있겠지만 색상환에서 감으로 고르는 장면을 많이 봤다. 컬러를 쉽게 고르기 위한 툴도 많다. 대표적으로 &lt;a href=&quot;https://color.adobe.com/&quot;&gt;Adobe Color CC&lt;/a&gt;라는 툴을 이용할 수도 있는데, 이미지를 업로드하면 대표색을 정해주기도 한다.&lt;/p&gt;

&lt;h3 id=&quot;실재를-이미지로-추상화하기&quot;&gt;실재를 이미지로 추상화하기&lt;/h3&gt;

&lt;p&gt;일러스트를 따라 그려 보면서 이 작업의 제목인 페르소나에 대해 곰곰이 생각해봤다. 작가는 일상속에 흔히 보이는 이미지를 페르소나라는 하나의 이미지로 그려냈다라는 생각이 들었다. 나도 이 작업처럼 특정 이미지를 페르소나화 시킨 일러스트를 그려보고 싶었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 스케치를 해봤다. 처음 따라 그린 페르소나를 스케치해보고, 어떤 이미지를 만들지 고민했다. 오랜만에 스케치를 하니 선도 못나 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음에는 90년대 이미지를 컨셉으로 잡은 가수 UV를 그려보려고 했는데, 잘 안되더라. 인체를 그려보지 않기도 했고, 실재하는 이미지를 단순화시켜야 했는데, 그 작업이 잘 안되었다.&lt;/p&gt;

&lt;p&gt;다른 아이디어를 냈다. 예전에 본 조선 시대 사진이 떠올랐다. 조선 사람 이미지를 그려보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/180323_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리는 작업은 생각보다 오래걸렸다. 스케치와 사진을 적절히 참고했다. 마지막으로 컬러를 넣어보았다. 컬러는 현실을 반영하여 선택했고, 그라데이션도 사용해보았다. 머리 뒷 부분의 잔 머리는 표현이 잘 되지 않은 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;결과&quot;&gt;결과&lt;/h3&gt;

&lt;p&gt;이런 식의 케이스 스터디를 스스로 해본 적은 학교 다닐 때도 없었다. 물론 이 글까지 4시간 동안 작업한 결과물은 일러스트 달랑 한 장이지만, 이런 방법의 케이스 스터디가 디자인에 대한 감각을 끌어 올려줄 좋은 방법이 될 수도 있겠다는 생각이 들었다. 다음에는 브랜드 아이덴티티 작업을 카피해보면 어떨까 한다.&lt;/p&gt;

&lt;p&gt;디자이너에게는 컨셉도 중요하지만, 매력적인 결과물을 만들어야 한다. 매력은 대부분 1초 이내에 결정된다. 디자이너는 감각적으로 판단되는 측정하기 어려운 이 가치를 다루어야 한다. 그런 의미에서 많은 고민이 든다.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/project/design-again</link>
        <guid isPermaLink="true">https://junojunho.com/project/design-again</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>기술적 복제 시대와 현대 예술</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기술적 복제가 가능한 시대의 예술은 어떻게 왔고, 어디를 향해 가나.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리는 기술인 복제가 당연한 시대에 살고 있다. 20세기 초, 이미 예술 분야에서는 이러한 시대적 흐름과 변화의 움직임을 감지한다. ‘기술적 복제시대의 예술작품’을 집필한 발터 벤야민의 관점은 복제가 더 고도화되고, 하루가 다르게 기술이 변화하는 이 시대의 현대의 예술가에게도 유의미한 메시지를 던져준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;발터 벤야민은 기술 혁명으로 인해 급변하는 시대를 예술을 통해 읽었다. 그는 그림이라는 예술의 한 장르가 사진으로, 나아가 영화로 대체되는 20세기에 살면서, &lt;strong&gt;예술의 기술적 복제 가능성&lt;/strong&gt;을 통해 &lt;strong&gt;기존 예술 형식의 종말&lt;/strong&gt;을 포착한다.&lt;/p&gt;

&lt;p&gt;그에 따르면 예술은 기술적 복제 가능성으로 인해 &lt;strong&gt;아우라&lt;/strong&gt;를 잃는다. 과거의 예술에는 신성함, 신비로움, 지금, 여기라는 가치가 숨겨져 있었다. 아우라를 잃어버린 예술을 접하는 대중과 함께 예술의 제의적 가치는 점점 상실된다. 현대 예술은 더 이상 제의 가치에 머무르지 않는다. 그러나 완전히 사라진 모습은 아니다. 제의적 가치는 기존과는 다른 형태로 드러난다. 예술은 예술 위한 예술이라는 사회로부터 격리된 또 다른 신학, 혹은 교의와 같은 모습으로 여전히 그 가치를 지닌다.&lt;/p&gt;

&lt;p&gt;벤야민은 그림과 영화를 통해 아우라가 사라진 대중 예술의 시대로 흘러가는 모습을 바라본다. 대중에게 그림은 가까이에 있지만 더 분리된 것이었다. 영화는 분리되어있지만 더 가까워지고, 집단의 형태로 나타난다. 관객은 복합 예술의 한 장르가 된 영화를 통해 무의식적 시각의 세계를 엿보게 된다. 즉 예술에 대중의 영역이 정착되는 것이다. 특히 영화는 &lt;strong&gt;기술의 예술적 활용과 과학적 활용을 동일한 것으로 인식&lt;/strong&gt;시키게 되는 계기가 되는데, 벤야민은 이를 영화의 혁명적인 기능으로 바라본다.&lt;/p&gt;

&lt;p&gt;아우라가 없어진 이후의 예술은 상품의 모습으로 나타난다. 예술에 참여하는 것은 누구에게나 열려있으며, 기존의 일방적인 예술-관객 사이 관계는 무너졌다. 관객에게 투고의 길이 열린 것이다. 기술적 복제 가능성으로 인해 기존의 예술은 &lt;strong&gt;특권적 성격을 잃었고&lt;/strong&gt; &lt;strong&gt;현대적 가치와 단절&lt;/strong&gt;된다. 기술 복제 시대는 그 장벽은 끊임없이 무너트리면서 &lt;strong&gt;새로운 예술&lt;/strong&gt;의 모습을 요구하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예술의 가장 중요한 과제는 &lt;strong&gt;나아갈 시대보다 한 발 앞선 수요, 완전한 충족의 시기가 도래해 있지않은 수요를 만들어 내는 일&lt;/strong&gt;이다. 즉, &lt;strong&gt;시대의 첨단에서 새로운 제안을 하는 일&lt;/strong&gt;이 예술가의 과제이다.&lt;/p&gt;

&lt;p&gt;벤야민은 완성된 예술이 자리 잡는 과정을 독창적으로 바라본다. 대중 속에 자리잡은 완성된 예술의 형식에는 발전 경로의 교점이 드러나는데, 먼저 &lt;strong&gt;기술이 일정한 예술 형식을 지향하는 경향&lt;/strong&gt;이 나타난다. 일정한 발전 단계 이후, &lt;strong&gt;새 형식에 의해 실현될 효과를 목표로&lt;/strong&gt; 삼기 시작하고, &lt;strong&gt;특정 기술이나 효과를 대중으로 끌어 올리려는 시도&lt;/strong&gt;가 행해진다. 결국 드러나지 않는 사회적 변화들이 새로운 예술 형식을 위해 도움이 되는, &lt;strong&gt;예술 작품의 수용 방식의 변화를 목표&lt;/strong&gt;로 하게 된다.&lt;/p&gt;

&lt;p&gt;예술 형식의 역사에서 위기에 직면한 시기에 예술 형식이 추구하는 방식은 시간이 흐른 이후 사후 분석을 통해 드러난다. 위기 속의 예술가들은 기술 수준의 변화 이후 새로운 예술 형식의 도래, 그 이후 얻게되는 효과를 목표로 돌진한다. 예술가의 근본적으로 새롭고 획기적인 수요를 만들어내는 작업이라는 목표는 지나가기 마련이다.&lt;/p&gt;

&lt;p&gt;기술적 복제가 가능한 시대를 겪은 다다이스트의 인식은 상업적으로 환산되는 예술과는 대조적인 길을 걸었다. 그들은 관조적 침잠을 통해 서서히 스며들어가길 원한다. 다다이스트의 작업은 소재의 무가치화, 작품의 무용성과 같은 특징으로 드러나는데, 전통 예술의 아우라를 파괴시키고, 작품에 가차없이 복제의 낙인을 찍는다. 이러한 운동의 쇠퇴기에 나타나는 조야함과 과도함은 예술의 역사적 힘들의 중심에서 드러나는 면에서 유의미하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 기술 시대를 살아가는 우리는 어떤 예술을 행해야 하고, 어떤 방향으로 나아가야 할까. 예술은 정신 집중을 요구하는 모습에서, 이제는 무심결에 수용되는 모습으로 다가온다. 대중화된 예술은 콘텐츠로 승화된다. 콘텐츠는 예술을 소비의 대상으로 든다. 콘텐츠는 시장에서의 니즈를 통해 생산되고 소비된다. 기술 복제화를 통해 대중화된 예술은 기존의 예술 소비 방식을 점진적으로 변화시켰다.&lt;/p&gt;

&lt;p&gt;현대 예술은 아메바와 같이 그저 자극을 주고 반응하는 모습으로 대중 그리고 기술과 결합한다.  오늘 날 예술은 디지털 아트, 미디어 아트, 인터렉션 디자인과 같은 모습으로 드러난다. 이들은 기술을 끊임없이 수용하고 대중과 인스턴트 메시지를 주고 받는다. 현대 예술은 무가치함의 냉전 속에서 이루어진다. 획기적인 수요를 만들어 내야 할 우리의 작업은 예술 본연의 무가치함을 극복해야 이루어질 것이다. 또한 예술을 위한 예술이라는 시각에서 벗어나 상업적으로 환산된 예술을 인정하고, 복제를 비롯한 모든 것들을 이용하여 가치를 창출해야 한다. 현대 예술은 이런 환경에 직면했다.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/design/vision-of-modern-art</link>
        <guid isPermaLink="true">https://junojunho.com/design/vision-of-modern-art</guid>
        
        
        <category>Design</category>
        
      </item>
    
      <item>
        <title>지난 2017년</title>
        <description>&lt;h4 id=&quot;지난-2017년에-나는&quot;&gt;지난 2017년에 나는…&lt;/h4&gt;

&lt;p&gt;지난 1년 간 나는 뱅크웨어글로벌에서 프론트엔드 개발자로 일했다. 이곳에서 정말 많은 문제를 만났고, 해결해왔다. 회사에서는 내가 성장할 수 있는 환경을 만들어주었고, 좋은 사람들과 일할 수 있었다. 회사가 배우러 오는 곳이냐는 말도 있을 정도로 부품 취급당하기 쉬운 현대 사회속에 살고 있지만, 그 곳에서 시간을 보내다 보면 자연스럽게 관련 지식이 체득된다. 특히 프로그래밍이라는 일을 할 경우에는 업무가 학습과 자연스럽게 일치하기도 한다. 전반기의 대부분은 그런 환경에 놓여있었다.&lt;/p&gt;

&lt;p&gt;회사에 들어오고 본격적으로 리액트를 다루기 시작했다. 간단한 로그인/로그아웃 기능부터 프로토타입까지 만들어보면서 기존의 Backbone 기반의 프로젝트를 리액트로 업그레이드시켰다. 회사의 제품에는 그리드(테이블), 탭, 버튼 등 항상 필요한 컴포넌트가 있다. 내가 속한 팀은 컴포넌트를 직접 만들기도 하고 리액트 오픈소스 컴포넌트를 랩핑하여 우리 소스에 맞게 커스터마이징했다. 오픈소스를 쓰던 중 버그를 만났고, 깃허브에 &lt;a href=&quot;https://github.com/cnaa97/reactabular&quot; target=&quot;_blank&quot;&gt;풀 리퀘스트&lt;/a&gt;하면서 처음으로 오픈소스 컨트리뷰터가 되기도 했다.&lt;/p&gt;

&lt;p&gt;일을 하던 도중 개념적으로 막히거나 애매한 부분은 &lt;a href=&quot;http://book.naver.com/bookdb/book_detail.nhn?bid=7204207&quot; target=&quot;_blank&quot;&gt;자바스크립트 노란 책&lt;/a&gt;을 자습서처럼 찾아 보면서 기본 지식을 더했다. 비전공자로서 내가 약하다고 여겼던 분야중 하나인 네트워크나 컴퓨터에 대한 책을 점심 시간을 통해 틈틈이 보면서 평생 돔(DOM)에서 빠져나오기 어려울 뻔 했던 코더로서의 한계에서 벗어났다.&lt;/p&gt;

&lt;p&gt;컴포넌트를 회사 팀 내에서 직접 만들었기 때문에 기존 기능에 추가 기능을 덧붙일 때 생길 버그 예상하기 위해 컴포넌트 테스트도 필요했다. Jest, Enzyme 등을 사용하여 테스트케이스를 작성하는, 조금은 지루한 작업으로 커버리지를 높였고, 추가 기능 개발 시 버그가 생길 가능성도 줄였다.
최근에는 큰 규모의 SI 프로젝트에 투입되어 야근과 더불어 비영업 제품의 프론트엔드를 맡아 개발했고 출시하기도 했다. 앵귤러JS라는 꽤 오래된 라이브러리 기반이긴 하지만, 대부분의 프론트엔드 라이브러리가 기술적으로 지향하는 바가 비슷함을 느꼈다. 개발을 뒤늦게 시작했지만, 비로소 jQuery 부터 Backbone, AngularJS, React 까지 2010년 이후 라이브러리가 발전하는 모습을 느끼면서 불편함도 몸소 체험했다.&lt;/p&gt;

&lt;p&gt;몇 년 전부터 알고있던 모질라의 &lt;a href=&quot;https://aframe.io/&quot; target=&quot;_blank&quot;&gt;A-Frame&lt;/a&gt;이라는 VR 라이브러리를 사용해서 파노라마 이미지를 VR로 볼 수 있는 &lt;a href=&quot;/vrv&quot; target=&quot;_blank&quot;&gt;간단한 프로젝트&lt;/a&gt;도 진행해보았다. 이 아이디어는 파노라마로 랜더링한 공간 이미지를 VR로 볼 수 있는 간단한 프로젝트다. UI디자인을 하다가 다시 공간 디자이너가 되겠다고 마음먹었던 시기에 만들었던 &lt;a href=&quot;/design_portfolio&quot; target=&quot;_blank&quot;&gt;포트폴리오&lt;/a&gt;에 넣으려고 했을 때 떠올린 아이디어인데, 당시에는 작은 버그 하나도 처리못할 정도라 완성시키지 못했다. 그 때와는 다르게 쉽게 공개했고, 내가 나온 학교 커뮤니티에 올려 여러 피드백을 받았다.&lt;/p&gt;

&lt;p&gt;개인적으로 농업 IoT 기반 제품 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.farota.console.android&quot; target=&quot;_blank&quot;&gt;파로타&lt;/a&gt;의 프론트엔드와 UX/UI 디자인을 맡아 리액트 기반의 하이브리드 앱을 출시해보는 경험까지 했다. 어떻게 제품이 만들어지고 출시가 될까, 어떤 과정으로 개발이 진행될까라는 디자이너 시절부터 늘 궁금했던 모든 것들이 서서히 풀렸다.&lt;/p&gt;

&lt;p&gt;그러던 와중에 내 안에 숨어있던 디자이너로서의 눈을 다시 일깨워준 &lt;a href=&quot;/design/field&quot;&gt;Field의 세미나&lt;/a&gt;에 참석하였고, 정말 큰 영감을 받았다. 스무살 때부터 했던 막연한 고민을 행동으로 이끌어 주는 기회였다. 그리고 조금씩 간단한 스터디를 시작했다. 처음에는 프로세싱으로 디지털 아트 작업을 하다가, ThreeJS로 3D 모델도 다루었다. 아두이노와 프로세싱을 이용해서 인터렉션 디자인까지 구현해보면서 가능성을 보았다.&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;새로운-시작이-아닌-연장으로&quot;&gt;새로운 시작이 아닌 연장으로&lt;/h4&gt;

&lt;p&gt;성장은 스스로 성장할 수 있는 환경을 만들어 나가야 한다고 생각한다. 나는 올 해 성장했을까? 글쎄 잘 모르겠다. 나는 그저 성장이라는 기준을 극단으로 끌어올려 푹 빠질 수 있는 환경을 만들길 바라며, 그 곳에 내던져지고 싶을 뿐이다.&lt;/p&gt;

&lt;p&gt;나 또한 새 해가 되면 늘 새롭게 시작하겠다고 다짐하던 사람 중 하나였다. 사실 새로워 지는 것은 불가능하다. 시간이라는 규칙 중 특정한 값이 바뀌는 시점을 마음을 다잡는 하나의 이정표로 볼 뿐이다. 올해는 나는 새로운 다짐을 하지 않았다. 더이상 2018년의 거창한 목표도 세우지 않는다. 그저 내가 늘 해오던 것들, 해야할 것들의 연장으로만 본다. 그저 내가 하는 일상을 지속할 뿐이다.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/vision/extension</link>
        <guid isPermaLink="true">https://junojunho.com/vision/extension</guid>
        
        
        <category>Vision</category>
        
      </item>
    
      <item>
        <title>디자인과 수학</title>
        <description>&lt;h3 id=&quot;디자인과-수학은-전혀-관련이-없을까&quot;&gt;디자인과 수학은 전혀 관련이 없을까?&lt;/h3&gt;

&lt;p&gt;흔히 한국에서 디자이너는 수학을 할 필요가 없다고 여겨진다. 수학이 하기 싫어서 미대로 왔다는 말도 들어봤다. 나 또한 수학에 대해 깊게 생각해본 적이 없었다. 과연 수학과 디자인은 전혀 상관이 없을까. 요즘의 나는 전혀 동의하지 않는다. 오히려 수학은 직접적으로 드러나지 않고 숨겨져 있을 뿐이다. 일러스트레이터로 펜툴로 오브젝트를 그릴 때를 생각해보자. X, Y 축의 좌표에 점을 찍고, 마우스가 지정하는 방향인 벡터로 베지어 곡선을 그려간다.&lt;/p&gt;

&lt;h3 id=&quot;디자인-뒤에-숨어-있는-수학적-개념들&quot;&gt;디자인 뒤에 숨어 있는 수학적 개념들&lt;/h3&gt;

&lt;p&gt;최근의 나는 프로세싱이라는 툴을 통해 파라메트릭 디자인을 해보면서 형태 생성을 위한 수학적 지식을 습득했다. 예컨대 원형을 그리기 위해서는 삼각 함수를 알아야 하는 식이다. 우리 주변의 모든 사물은 3D 모델링이라는 수학적 접근을 통해 그려질 수 있다. 모든 형태는 수학적으로 분석 가능하다는 것을 말한다. 심지어 무작위의 값조차 프로그래밍 언어를 통해 쉽게 생성한다는 것은, 원한다면 인간의 머리에서 나오기 어려운 형태를 컴퓨터를 이용해서 생성가능하다는 것이다. 동대문 디자인 플라자도 파라메트릭 디자인으로 설계되었다. 감각적인 건축가가 유기적인 형태의 스케치를 해서 유선형의 형태를 그렸다고 생각할 수도 있지만, 사실 그 이면에는 수학적 설계가 있다. 그래스호퍼를 통해 모든 형태를 생산 가능한 형태로 나뉘어 생산된다. 그러나 모든 디자이너에게 수학적 지식이 반드시 필요하다는 것은 아니다. 다만, 더 나은 디자인을 하기 위한 과정과 도구로서 필요하다는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;더-나은-디자이너는-수학을-이용할-뿐이다&quot;&gt;더 나은 디자이너는 수학을 이용할 뿐이다.&lt;/h3&gt;

&lt;p&gt;정말 중요한 것은 수학적 접근과 사고이다. 고대 그리스로부터 수학과 기하학은 복잡다단한 세계를 일원화하는 도구로 여겨졌다. 수학과 기하학은 이성적 사고의 상징이다. 그러나 항상 이성적일 수는 없다. 현대는 욕망을 긍정한다. 이제 디자이너도 욕망이 흐르는 흐름 속에서 이성적인 순간을 활용할 필요가 있다. 디자인을 문제 해결의 관점에서 보자면, 사용자에 대한 설득력과 결과물에 대한 타당성을 위해 이성적 사고는 필수적인 것이 된다. 예술에 있어서도 벗어나기 어렵다. 단순히 붓으로 그리는 것이 아닌 현대 예술의 모호해진 경계에서 이성적 사고는 작업을 위한 하나의 도구가 되기도 한다. 디자이너는 이성적이어야 한다는 말이 아니다. 디자인이라는 직관이 지배하는 활동을 하는 디자이너는 그저 이성이라는 도구를 활용할 뿐이다.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://junojunho.com/design/design-and-math</link>
        <guid isPermaLink="true">https://junojunho.com/design/design-and-math</guid>
        
        
        <category>Design</category>
        
      </item>
    
  </channel>
</rss>
