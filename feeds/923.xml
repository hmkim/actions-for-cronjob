<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DEV.ZZOMAN.COM</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dev.zzoman.com/"/>
  <updated>2017-11-29T13:06:36.000Z</updated>
  <id>http://dev.zzoman.com/</id>
  
  <author>
    <name>zzoman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>image-sprite-vs-webpack-string</title>
    <link href="http://dev.zzoman.com/2017/11/29/image-sprite-vs-webpack-string/"/>
    <id>http://dev.zzoman.com/2017/11/29/image-sprite-vs-webpack-string/</id>
    <published>2017-11-29T12:45:41.000Z</published>
    <updated>2017-11-29T13:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Front-end 개발을 위한 번들링 설정 중 가장 힘든 것은 언제나 Image Sprite이다. 일반적인 번들링 과정과 달리 File System을 과도하게 이용하고, 스타일 파일을 생성하기 위한 ‘CSS용 Template’을 만들어야 하는 등, 다른 도구들이 유기적으로 JavaScript 생태계에 녹아드는 데에 반해, 어딘가 혼자 툭 튀어나와서는 여러모로 번거롭다.</p>
<p>새 프로젝트에 앞서 도무지 <code>spritesmith</code>를 설정하기 귀찮았던 찰나, ‘과연 아직까지도 Image Sprite가 웹최적화로서 의미가 있을까?’ 하는 의문이 들었다.</p>
<p>Image Sprite 도구의 대표인 <a href="https://www.npmjs.com/package/spritesmith" target="_blank" rel="external">spritesmith</a> 조차도 마지막 업데이트가 7개월이나 지났고, Image Sprite가 여전히 많은 사람들이 동의하는 개발 방법론이라면 빠르게 변화하는 JavaScript 생태계에서 이렇게까지 불편하고 못난 구조를 이어나가진 않을 것이라는 확신도 들었다.</p>
<p>그렇게 ‘필시 더 이상 Image Sprite는 필요하지 않을 것이다.’ 라는 결론을 마음에 안고 근거를 수집하기 위해 구글링을 시작했다.</p>
<h2 id="Image-Sprite"><a href="#Image-Sprite" class="headerlink" title="Image Sprite"></a>Image Sprite</h2><blockquote>
<p><a href="https://developer.yahoo.com/performance/rules.html#under25" target="_blank" rel="external">Best Practices for Speeding Up Your Web Site : Yahoo Developer Networks</a></p>
<p>엔드유저가 겪는 대기시간의 80%는 front-end에서 소비된다. 그 시간의 대부분은 페이지에서 필요한 모든 요소 - 이미지, 스타일시트, 스크립트, 플래시 등등 - 를 다운받는 것이다. 이 요소들의 숫자를 줄이는 것으로 페이지를 렌더링하기 위한 HTTP 요청의 갯수를 줄일 수 있다. 이것은 더욱 빠른 페이지의 핵심이다.</p>
</blockquote>
<p>Image Sprite는 여러개의 이미지 리소스를 하나의 이미지로 합치고, <code>background-size</code>, <code>backgorund-position</code>등의 CSS 속성을 통해 이미지를 렌더링하는 방법으로, 이미지 다운로드에 걸리는 시간과 HTTP 요청을 감소시킴으로 웹 Front-end의 성능을 최적화한다.</p>
<p>그러나 당연히 하나의 큰 이미지 리소스를 다운받는 것에 대한 부담이기에, 상황에 따라 Image Sprite의 적용 여부를 결정하기 위한 방법론들도 있다.</p>
<blockquote>
<p><a href="https://developer.yahoo.com/performance/rules.html#opt_sprites" target="_blank" rel="external">Optimize CSS Sprites : Yahoo Developer Networks</a></p>
<ul>
<li>일반적으로 이미지를 수직으로 대각선으로 수평으로 정렬하면 파일 크기가 작아집니다.</li>
<li>스프라이트에서 유사한 색상을 결합하면 PNG8에 적합하도록 색상 수가 256 색상 이하로 이상적으로 낮아집니다.</li>
<li>“모바일 친화적으로” 스프라이트의 이미지 사이에 큰 간격을 두지 마십시오. 이것은 파일 크기에 큰 영향을 미치지는 않지만 클라이언트가 이미지를 픽셀 맵으로 압축 해제하는 데 필요한 메모리가 더 적게 필요합니다. 100 x 100 이미지는 10,000 픽셀이며 1,000 x 1,000은 1,000,000 픽셀입니다.</li>
</ul>
</blockquote>
<p>이미지 리소스의 크기 제한은 브라우저별로 차이가 있으나 되도록 작게 유지하는 것이 좋고, 대부분의 Image Sprite는 투명 배경이 필요하기 때문에 Indexed Color 기반의 PNG나 GIF 포멧을 사용해야 하며, 따라서 색상의 갯수가 너무 많은 사진 등의 이미지는 JPEG 포멧의 독립 이미지로 이용하는 편이 용량면에서 좋다.</p>
<h2 id="HTTP-2의-등장"><a href="#HTTP-2의-등장" class="headerlink" title="HTTP/2의 등장"></a>HTTP/2의 등장</h2><p>이러한 웹최적화의 핵심인 Image Sprite가 처음 의심의 대상이 된 계기는 2015년, HTTP/2의 등장이었다. </p>
<p><a href="https://developers.google.com/web/fundamentals/performance/http2/?hl=ko#_4" target="_blank" rel="external">HTTP/2에서는 여러 HTTP 요청을 병렬로 처리</a>할 수 있게 되었고, 따라서 웹 최적화에 있어 가장 중요한 명제였던 ‘HTTP 요청 줄이기’가 앞으로도 유효할 지에 대한 논의가 있어 왔다.</p>
<blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/32160790/does-using-image-sprites-make-sense-in-http-2" target="_blank" rel="external">Does using image sprites make sense in HTTP/2 - Stackoverflow</a></li>
<li><a href="https://cloudfour.com/thinks/are-css-sprites-a-mobile-web-worst-practice/" target="_blank" rel="external">Are CSS Sprites A Mobile Web “Worst Practice?” - Cloud4</a></li>
<li><a href="https://blog.octo.com/en/http2-arrives-but-sprite-sets-aint-no-dead/" target="_blank" rel="external">HTTP/2 arrives but sprite sets ain’t no dead - Octo</a></li>
</ul>
</blockquote>
<p>위의 논의와 기사에 의하면 각각의 주장에 대한 의견은 아래와 같다.</p>
<h3 id="단일-이미지가-낫다"><a href="#단일-이미지가-낫다" class="headerlink" title="단일 이미지가 낫다!"></a>단일 이미지가 낫다!</h3><ul>
<li>스프라이트 이미지는 이용하는 페이지 외의 불필요한 이미지 리소스를 모두 불러온다.</li>
<li>스프라이트 이미지는 소수의 이미지 변경에도 모든 이미지의 브라우저 캐시가 무효화된다.</li>
<li>iOS 웹브라우저의 경우 25kb 이상의 요소는 캐싱하지 않는다.</li>
</ul>
<h3 id="Image-Sprite를-써야한다"><a href="#Image-Sprite를-써야한다" class="headerlink" title="Image Sprite를 써야한다!"></a>Image Sprite를 써야한다!</h3><ul>
<li>PNG 압축 알고리즘이 여러 개의 단일 이미지보다 한장의 스프라이트 이미지에서 더욱 효율적으로 동작한다.</li>
<li>HTTP/2는 로드 시간이 현저히 감소하지만 HTTP 프로토콜 향상만으로는 front-end 최적화의 유용성을 충분히 대체하기 어렵다.</li>
</ul>
<p>이렇게 모아보니 HTTP/2의 존재와 무관하게 앞서서 얘기한 Image Sprite의 프로젝트 적용조건과 크게 다르지 않아 보이지만, 관련한 문제를 직접 테스트한 Octo 블로그의 기사 - <a href="https://blog.octo.com/en/http2-arrives-but-sprite-sets-aint-no-dead/" target="_blank" rel="external">HTTP/2 arrives but sprite sets ain’t no dead - Octo</a> - 는 시사하는 바가 크다.</p>
<p><img src="https://blog.octo.com/wp-content/uploads/2015/12/sprites-graph4.png" alt="Images loading time versus images total size, browser and protocol"></p>
<p>위 그래프는 이미지의 갯수에 따라 소요되는 로딩 시간을 HTTP 버전 별로 그린 것으로, 전반적인 성능 향상을 제외하고는 두 버전 모두 동일하게 이미지의 갯수에 따라 시간이 늘어남을 확인할 수 있다. HTTP/2 프로토콜이 표준으로 자리잡는다 하더라도 여전히 Image Sprite 적용은 필요해 보인다.</p>
<h2 id="대안"><a href="#대안" class="headerlink" title="대안"></a>대안</h2><p>지금까지 알아본 바, ‘더 이상 Image Sprite를 이용한 웹최적화는 유효하지 않을 것이다.’ 라는 최초의 가정은 결국 잘못되었다. 그러나 나는 Front-end 개발의 복잡도를 현저하게 증가시키는 Image Sprite 도구들이 너무너무 싫다. 언제 어디서 작업을 멈추어도 손쉽게 다시 시작할 수 있는 코드가 좋은 코드라고 믿기 때문이다.</p>
<p>정녕 Image Sprite를 피하기 위한 방법은 없는 것일까?</p>
<h3 id="DataURI-그리고-SVG"><a href="#DataURI-그리고-SVG" class="headerlink" title="DataURI, 그리고 SVG"></a>DataURI, 그리고 SVG</h3><p>Bitmap의 경우 DataURI, 그리고 Vector의 경우에는 SVG를 사용하면 별도의 HTTP 요청없이 Front-end 자원 내에 문자열로서 이미지를 전달할 수 있다. 그리고 문자열로 대체된 이미지는 <code>Webpack</code> 등의 번들링 도구를 통해 최적화될 수 있다고 한다.</p>
<p>그러나 이는 클라이언트가 최초 로딩하는 번들링된 파일의 용량을 증가시킬 수 있고, 문자열로 치환된 이미지(특히 dataURI의 경우)는 경우에 따라 이미지에 비해 과도하게 용량이 커질 위험이 있어 Image Sprite와 마찬가지로 상황에 맞게 사용하는 지혜가 필요하다.</p>
<p>궁금하니까 간단하게 직접 테스트 해보았다.</p>
<blockquote>
<p><a href="https://github.com/reumia/image-sprite-vs-webpack-string" target="_blank" rel="external">이미지 스프라이트 vs Base64와 Webpack 용량 비교 (소스코드) : Github</a></p>
</blockquote>
<p>64 x 64 단일 색상과 다중 색상의 Bitmap 이미지, 그리고 다중 색상의 Vector 이미지를 각 10장씩 <code>node-sprite-generator</code>와 <code>webpack</code>을 이용해 결과물을 비교하였다. 결과는 아래와 같다.</p>
<p><img src="https://reumia.github.io/image-sprite-vs-webpack-string/example.png" alt=""></p>
<table>
<thead>
<tr>
<th></th>
<th>단일 색상</th>
<th>다중 색상</th>
</tr>
</thead>
<tbody>
<tr>
<td>PNG (Image Sprite)</td>
<td>15 kb</td>
<td>35 kb</td>
</tr>
<tr>
<td>JS (dataURI) / JS.GZ (gzipped)</td>
<td>19 kb / 13 kb</td>
<td>50 kb / 37 kb</td>
</tr>
<tr>
<td>JS (SVG) / JS.GZ (gzipped)</td>
<td>-</td>
<td><strong>23 kb / 7kb</strong></td>
</tr>
</tbody>
</table>
<p>표현할 색상이 많아질 수록 dataURI보단 Image Sprite가 경제적이며, gzip 압축 시 SVG에서 눈에 띄는 용량 차이를 확인할 수 있다.</p>
<p>모바일 환경일 경우, 레티나 환경 대응을 위한 여러벌의 스프라이트 이미지가 필요할 수 있기 때문에, 대부분의 브라우저가 SVG를 지원하므로 SVG를 선택하는 것이 모든 방면에서 좋을 듯 하다.</p>
<p>SVG가 좋다는 것을 익히 알고는 있었지만, XML 형태의 장황한 모양새 때문에 사용할 때마다 늘 마음에 짐이 있었는데, 테스트를 통해 직접 확인해보니 앞으로 마음 편히 SVG를 사용할 수 있게 되었다.</p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>관련 자료 리서치 중 앞서 언급한 <a href="https://blog.octo.com/en/http2-arrives-but-sprite-sets-aint-no-dead/" target="_blank" rel="external">Octo 블로그의 기사</a>는 시작과 진행이 본 포스팅과 굉장이 유사하며, 보다 더 깊이 있는 통찰을 준다. 또한 위 기사에서는 <a href="https://github.com/benoit74/http2-sprites/" target="_blank" rel="external">테스트에 사용한 코드</a>를 Github을 통해 공유하고 있으므로, 소스를 살펴보는 것도 개인적으로 유의미할 듯 하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-end 개발을 위한 번들링 설정 중 가장 힘든 것은 언제나 Image Sprite이다. 일반적인 번들링 과정과 달리 File System을 과도하게 이용하고, 스타일 파일을 생성하기 위한 ‘CSS용 Template’을 만들어야 하는 등
    
    </summary>
    
      <category term="web" scheme="http://dev.zzoman.com/categories/web/"/>
    
      <category term="javascript" scheme="http://dev.zzoman.com/categories/web/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>vue d3 tree with zoom and panning </title>
    <link href="http://dev.zzoman.com/2017/10/27/vue-d3-tree-with-zoom-and-panning/"/>
    <id>http://dev.zzoman.com/2017/10/27/vue-d3-tree-with-zoom-and-panning/</id>
    <published>2017-10-27T14:30:51.000Z</published>
    <updated>2017-10-27T14:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>Vue : 2.2.6</li>
<li>D3 : 4.11.0</li>
</ul>
</blockquote>
<p><code>Vue</code>를 대부분은 ‘정말 쉽다’라고 소개하곤 하지만 나는 거기에 동의하지는 않는다. <code>Vue</code>는 쉽다기보단 간편한 도구이고, 간편한 만큼 그 간편함 뒤에 숨어 있는 구석이 많다. 때문에 익히기는 쉬울 수 있어도 마음껏 사용하기에는 어려움이 많다.</p>
<p><code>Vue</code>는 충분히 자유로이 JavaScript를 쓸 수 있도록 만들어졌지만, 일반적인 JavaScript의 사용 방법과는 사뭇 다르기 때문에 다른 라이브러리를 함께 사용하는 순간이 오면 쉽게 당황해 버리고 만다. 전혀 다른 맥락으로 쓰여진 다른 JavaScript 라이브러리의 문서들은 Vue를 사용하는 순간 무용지물이 되는 것 처럼 느껴진다.</p>
<p>이 포스트에서는 <code>d3</code>의 예제와 <code>Vue</code>로 작성한 <code>d3</code> 예제를 비교해 보면서, Vue에서 DOM과 JavaScript를 작성하는 방법을 소개하려고 한다.</p>
<p>Vue와 d3를 사용해 Tree 구조의 그래프를 그리고, 간단히 Zoom과 Pan을 구현해보자.<br>포스팅간 사용할 예제 소스와 데모 페이지는 아래를 확인하자.</p>
<blockquote>
<p><a href="https://github.com/reumia/vue-d3-tree-zoom-pan" target="_blank" rel="external"><strong>작성 예제 전체 소스</strong> : https://github.com/reumia/vue-d3-tree-zoom-pan</a><br><a href="https://reumia.github.io/vue-d3-tree-zoom-pan/" target="_blank" rel="external"><strong>예제 데모 페이지</strong> : https://reumia.github.io/vue-d3-tree-zoom-pan/</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 저장소 클론</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/reumia/vue-d3-tree-zoom-pan.git</div><div class="line"></div><div class="line"><span class="comment"># 의존성 모듈 설치</span></div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment"># localhost:8080 서버 실행</span></div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<h2 id="1-Tree-그리기"><a href="#1-Tree-그리기" class="headerlink" title="1. Tree 그리기"></a>1. Tree 그리기</h2><blockquote>
<p><a href="https://bl.ocks.org/mbostock/e9ba78a2c1070980d1b530800ce7fa2b" target="_blank" rel="external"><strong>d3 공식 튜토리얼</strong> : Tidy Tree vs Dendogram</a><br><a href="https://github.com/reumia/vue-d3-tree-zoom-pan/blob/b366a4d17b457f5f664b198e80acc8848e2f6187/src/components/Tree.vue" target="_blank" rel="external"><strong>Vue 적용 예제</strong> : Tree 작성</a></p>
</blockquote>
<h3 id="1-1-data-준비"><a href="#1-1-data-준비" class="headerlink" title="1-1. data 준비"></a>1-1. data 준비</h3><p>JavaScript 소스를 읽을 때에는 함수가 정의되는 부분과 실제로 함수가 실행되는 부분을 구분하여 확인하는 것이 중요하다. 튜토리얼 소스는 <code>d3.csv()</code>가 실행될 때에 callback으로 실행되는 익명함수가 나머지 모든 함수를 실행하는 구조이다.</p>
<p><code>d3.csv</code>는 <code>d3.tree</code>가 사용할 수 있는 JSON 포멧의 데이터를 CSV 포멧의 소스를 기반으로 생성하는 <a href="https://github.com/d3/d3-dsv" target="_blank" rel="external">d3-dsv API</a>이며, 본 포스팅에서는 준비된 JSON 포멧의 소스를 기반으로 하기에 간소화할 수 있다.</p>
<p><code>d3.stratify</code>는 <a href="https://github.com/d3/d3-hierarchy/blob/master/README.md#hierarchy" target="_blank" rel="external">d3-hierarchy API</a>의 하나로, 평면 데이터 모델을 자신의 키와 부모의 키를 바탕으로 tree 구조의 데이터로 전환해준다.</p>
<p><strong>튜토리얼 소스</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// d3-tree API 옵션을 정의</span></div><div class="line"><span class="keyword">var</span> tree = d3.tree()...</div><div class="line"></div><div class="line"><span class="comment">// d3-hierarchy API 옵션을 정의</span></div><div class="line"><span class="keyword">var</span> stratify = d3.stratify()...</div><div class="line">    </div><div class="line"><span class="comment">// CSV 포멧으로부터 데이터 모델 생성  </span></div><div class="line">d3.csv(<span class="string">"flare.csv"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// d3-hierarchy API로 tree 구조 데이터 모델 생성</span></div><div class="line">  <span class="keyword">var</span> root = stratify(data).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> (a.height - b.height) || a.id.localeCompare(b.id); </div><div class="line">  &#125;);</div><div class="line">    </div><div class="line">  <span class="comment">// ... 생성된 데이터로 화면을 그린다.</span></div></pre></td></tr></table></figure>
<p><strong>Vue에서의 적용</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 미리 준비한 data 활용</span></div><div class="line"><span class="comment">// https://github.com/reumia/vue-d3-tree-zoom-pan/blob/3850e52a36d22596385c63f9c60aaab902273a54/src/data.js</span></div><div class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">'@/data'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  data () &#123;</div><div class="line">    <span class="comment">// 템플릿에 바인딩할 데이터를 정의</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">nodes</span>: [],</div><div class="line">      <span class="attr">lines</span>: []</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  created () &#123;</div><div class="line">    <span class="comment">// Vue 인스턴스가 생성된 후, 데이터 생성 함수를 실행</span></div><div class="line">    <span class="keyword">this</span>.setData()</div><div class="line">  &#125;,</div><div class="line">  methods () &#123;</div><div class="line">    setData () &#123;</div><div class="line">      <span class="comment">// d3-hierarchy API로 tree 구조 데이터 모델 생성</span></div><div class="line">      <span class="keyword">const</span> stratify = d3.stratify().id(<span class="function">(<span class="params">d</span>) =&gt;</span> d.id).parentId(<span class="function">(<span class="params">d</span>) =&gt;</span> d.parentId)</div><div class="line">      <span class="keyword">const</span> stratified = stratify(data)</div><div class="line">      <span class="keyword">const</span> tree = d3.tree().size([<span class="keyword">this</span>.viewer.w, <span class="keyword">this</span>.viewer.h])</div><div class="line">        </div><div class="line">      <span class="comment">// 템플릿으로 화면을 그릴 데이터를 Vue data 객체에 전달</span></div><div class="line">      tree(stratified)</div><div class="line">      <span class="keyword">this</span>.nodes = stratified.descendants()</div><div class="line">      <span class="keyword">this</span>.lines = stratified.descendants().slice(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<h3 id="1-2-화면-그리기-DOM-Element-핸들링"><a href="#1-2-화면-그리기-DOM-Element-핸들링" class="headerlink" title="1-2. 화면 그리기 : DOM Element 핸들링"></a>1-2. 화면 그리기 : DOM Element 핸들링</h3><p>튜토리얼은 d3만으로 작성되어 있기 때문에, <code>d3.selection API</code>를 활용해 DOM Element를 가져오고, <code>.attr()</code>로 속성을 추가하거나 <code>.append()</code>로 DOM 내에 삽입하는 구조로 작성되어 있지만, <code>Vue</code>에서 이와 같은 방식으로 DOM Element를 다루는 것은 어색하다.</p>
<p>크롬 개발자도구를 통해 튜토리얼 소스가 만들어내는 <code>html</code>의 형태를 확인하고, <code>Vue</code>를 이용해 같은 모양으로 만들어내는 방식으로 작성해 나가면 편리하다.</p>
<p><strong>튜토리얼 소스</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// d3-selection API의 DOM Element 핸들링</span></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"svg"</span>),</div><div class="line">    width = +svg.attr(<span class="string">"width"</span>),</div><div class="line">    height = +svg.attr(<span class="string">"height"</span>),</div><div class="line">    g = svg.append(<span class="string">"g"</span>).attr(<span class="string">"transform"</span>, <span class="string">"translate(40,0)"</span>);</div><div class="line">    </div><div class="line"><span class="comment">// ...</span></div><div class="line">d3.csv(<span class="string">"flare.csv"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</div><div class="line">  	<span class="comment">// ... 생성된 데이터로 화면을 그린다.</span></div><div class="line">	<span class="keyword">var</span> link = g.selectAll(<span class="string">".link"</span>)</div><div class="line">		.data(root.descendants().slice(<span class="number">1</span>))</div><div class="line">	   	.enter().append(<span class="string">"path"</span>)</div><div class="line">	   	.attr(<span class="string">"class"</span>, <span class="string">"link"</span>)</div><div class="line">	   	.attr(<span class="string">"d"</span>, diagonal);	</div><div class="line">   	<span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>위 코드는 결과적으로 아래와 같은 구조의 <code>html</code>을 만들어낸다. 이를 통해 <code>.data()</code>로 전달된 <code>JSON</code>을 바탕으로 <code>&lt;path&gt;</code>를 반복적으로 <code>&lt;g&gt;</code>에 <code>.append()</code>하는 내용임을 확인한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">transform</span>=<span class="string">"translate(40,0)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"link"</span> <span class="attr">d</span>=<span class="string">"M200,25.9067..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"link"</span> <span class="attr">d</span>=<span class="string">"M200,25.1761..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"link"</span> <span class="attr">d</span>=<span class="string">"M200,25.1709..."</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Vue에서의 적용</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- template --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">:width</span>=<span class="string">"viewer.w"</span> <span class="attr">:height</span>=<span class="string">"viewer.h"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">:transform</span>=<span class="string">"`translate(40, 0)`"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"link"</span></div><div class="line">        <span class="attr">v-for</span>=<span class="string">"line in lines"</span></div><div class="line">        <span class="attr">:d</span>=<span class="string">"getDiagonal(line)"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div></pre></td></tr></table></figure>
<p>나머지 내용도 위와 동일하게 적용할 수 있으므로 생략한다.<br>본 단락의 최상단에 링크한 예제 소스를 통해 현재 단계에서 작성된 전체 소스를 확인할 수 있다.</p>
<h2 id="2-Zoom-amp-Panning"><a href="#2-Zoom-amp-Panning" class="headerlink" title="2. Zoom &amp; Panning"></a>2. Zoom &amp; Panning</h2><blockquote>
<p><a href="https://bl.ocks.org/mbostock/6123708" target="_blank" rel="external"><strong>d3 공식 튜토리얼</strong> : Drag + Zoom</a><br><a href="https://github.com/reumia/vue-d3-tree-zoom-pan/commit/3850e52a36d22596385c63f9c60aaab902273a54" target="_blank" rel="external"><strong>Vue 적용 예제</strong> : Zoom 적용</a></p>
</blockquote>
<p>위 링크한 공식 튜토리얼은 v3를 기준으로 작성하였기 때문에 v4와는 코드가 조금 다르다.<br>v4를 사용하기 위해서 링크한 튜토리얼로 구조를 참고하고, <a href="https://github.com/d3/d3/blob/master/API.md" target="_blank" rel="external">d3 공식문서의 API Reference</a>를 확인하여 변경된 API를 적용하도록 한다.</p>
<h3 id="2-1-d3-zoom-API"><a href="#2-1-d3-zoom-API" class="headerlink" title="2-1. d3-zoom API"></a>2-1. d3-zoom API</h3><p><a href="https://github.com/d3/d3-zoom" target="_blank" rel="external">d3-zoom API</a>의 적용을 위해서는 <a href="https://github.com/d3/d3-selection" target="_blank" rel="external">d3-selection API</a>의 사용이 필수적이다. d3-selection API는 DOM Element에 이벤트를 발생시키거나 발생된 이벤트를 <code>d3.event</code>를 통해 조회할 수 있도록 도와준다.</p>
<p><code>d3-selection API</code>를 사용하기위해 DOM Element를 <code>document.querySelector()</code>등의 방법으로 직접 가져와야 하는데, 이는 Vue에서 권장하는 방법은 아니다. 그러나 이를 Vue의 Lifecycle 내에서 무리없이 지원하기 위해 <code>$refs</code>와 <code>$el</code>을 제공한다.</p>
<p><code>$refs</code>를 사용해 DOM Element를 가져와 <code>selection</code>을 생성하고, d3-zoom API를 적용하여 <code>d3.event</code>에 전달된 결과 확인해 보자.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tree"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">ref</span>=<span class="string">"svg"</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">:width</span>=<span class="string">"viewer.w"</span> <span class="attr">:height</span>=<span class="string">"viewer.h"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- ... --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> deafault &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  mounted () &#123;</div><div class="line">    <span class="comment">// $refs는 created hook에서는 할당되지 않기 때문에 mounted hook을 사용한다.</span></div><div class="line">    <span class="keyword">this</span>.setZoom()</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    setZoom () &#123;</div><div class="line">      <span class="comment">// zoom의 scale 범위, zoom 이벤트가 실행할 callback 등의 옵션을 정의한다.</span></div><div class="line">      <span class="keyword">const</span> zoom = d3.zoom().scaleExtent([<span class="number">1</span>, <span class="number">10</span>]).on(<span class="string">'zoom'</span>, <span class="keyword">this</span>.onZoom)</div><div class="line">      <span class="comment">// selection을 $refs로 생성한다.</span></div><div class="line">          <span class="keyword">const</span> selection = d3.select(<span class="keyword">this</span>.$refs.svg)</div><div class="line">          </div><div class="line">          selection.call(zoom)</div><div class="line">    &#125;,</div><div class="line">    onZoom () &#123;</div><div class="line">      <span class="comment">// Console을 통해 d3.event에 할당되는 값을 확인한다.</span></div><div class="line">      <span class="built_in">console</span>.log(d3.event)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-Translate-Scale-바인딩"><a href="#2-2-Translate-Scale-바인딩" class="headerlink" title="2-2. Translate, Scale 바인딩"></a>2-2. Translate, Scale 바인딩</h3><p><code>onZoom()</code> callback에서 발생한 <code>d3.event</code> 값에는 <code>zoom</code> 이벤트가 생성한 <code>d3.event.transform</code> 객체가 존재한다.</p>
<p><a href="https://github.com/d3/d3-zoom" target="_blank" rel="external">d3-zoom API</a>는 발생한 사용자의 이벤트에 따라 계산된 <code>transform</code> 값을 자동으로 생성하고 전달한다. 모든 SVG 요소를 감싸고있는 가장 상위의 SVG 요소 <code>&lt;g&gt;</code>에서 변경된 <code>translate</code>값과 <code>scale</code>을 적용할 수 있도록 Vue Component의 <code>data</code>로 설정하고 템플릿에 바인딩한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// D3-zoom 이벤트가 만들어내는 zoom 객체와 동일한 모양으로 구성</span></div><div class="line">      <span class="comment">// https://github.com/d3/d3-zoom/blob/master/src/transform.js</span></div><div class="line">      zoom: &#123;</div><div class="line">        <span class="attr">x</span>: <span class="number">40</span>,	<span class="comment">// Translate를 위한 X좌표 초기값</span></div><div class="line">        y: <span class="number">0</span>,		<span class="comment">// Translate를 위한 Y좌표 초기값</span></div><div class="line">        k: <span class="number">1</span> 		<span class="comment">// Scale 초기값</span></div><div class="line">      &#125;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    onZoom () &#123;</div><div class="line">      <span class="comment">// 변경된 값을 data에 전달하면, 변경된 내용이 template에 반영된다.</span></div><div class="line">      <span class="keyword">this</span>.zoom.x = d3.event.transform.x</div><div class="line">      <span class="keyword">this</span>.zoom.y = d3.event.transform.y</div><div class="line">      <span class="keyword">this</span>.zoom.k = d3.event.transform.k</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tree"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">ref</span>=<span class="string">"svg"</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">:width</span>=<span class="string">"viewer.w"</span> <span class="attr">:height</span>=<span class="string">"viewer.h"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">g</span> <span class="attr">:transform</span>=<span class="string">"`translate($&#123;zoom.x&#125;,$&#123;zoom.y&#125;)scale($&#123;zoom.k&#125;)`"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- ... --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-d3-zoomIdentity"><a href="#3-d3-zoomIdentity" class="headerlink" title="3. d3.zoomIdentity"></a>3. d3.zoomIdentity</h2><blockquote>
<p><a href="https://github.com/d3/d3/issues/2521" target="_blank" rel="external"><strong>d3.zoomIdentity 관련 Issue</strong> : d3 Github repository</a><br><a href="https://github.com/reumia/vue-d3-tree-zoom-pan/tree/3850e52a36d22596385c63f9c60aaab902273a54" target="_blank" rel="external"><strong>Vue 적용 예제</strong> : zoomIdentity 작성</a></p>
</blockquote>
<p>여기까지 작업하고나면 Zoom은 무리없이 동작하지만, 최초에 설정해 두었던 <code>data.zoom.x</code>값 때문에 <code>panning</code>이나 <code>zoom</code>을 시작하기위해 캔버스를 클릭하면 화면이 조금 어색하게 틀어지는 현상이 발생한다.</p>
<p><code>data</code>에서만 정의한 초기 <code>data.zoom.x</code>값을 <code>d3-zoom API</code>가 인식하고 있지 못하기 때문에 생기는 현상으로, 이를 수정하기 위해 <code>d3.zoomIdentity</code>를 적용하고, 그래프의 빈 공간을 클릭했을 때에 <code>zoom</code> 상태를 초기하는 기능을 추가해 보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    setZoom () &#123;</div><div class="line">      <span class="keyword">const</span> zoom = d3.zoom().scaleExtent([<span class="number">1</span>, <span class="number">10</span>]).on(<span class="string">'zoom'</span>, <span class="keyword">this</span>.onZoom)</div><div class="line">        <span class="keyword">const</span> selection = d3.select(<span class="keyword">this</span>.$refs.svg)</div><div class="line"></div><div class="line">        selection</div><div class="line">          .call(zoom)</div><div class="line">          <span class="comment">// 초기화된 zoom 값을 적용한다.</span></div><div class="line">          .call(zoom.transform, <span class="keyword">this</span>.initZoom())</div><div class="line">    &#125;,</div><div class="line">    initZoom () &#123;</div><div class="line">      <span class="comment">// zoom 값을 초기화한다.</span></div><div class="line">      <span class="keyword">this</span>.zoom.x = <span class="number">40</span></div><div class="line">      <span class="keyword">this</span>.zoom.y = <span class="number">0</span></div><div class="line">      <span class="keyword">this</span>.zoom.k = <span class="number">1</span></div><div class="line">      <span class="comment">// 초기화된 zoom 값을 d3-zoom API에 전달한다.</span></div><div class="line">      <span class="keyword">return</span> d3.zoomIdentity</div><div class="line">        .translate(<span class="keyword">this</span>.zoom.x, <span class="keyword">this</span>.zoom.y)</div><div class="line">        .scale(<span class="keyword">this</span>.zoom.k)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tree"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 클릭시 다시 Zoom을 초기화할 수 있도록 @click 속성으로 이벤트를 할당한다. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">svg</span> @<span class="attr">click</span>=<span class="string">"setZoom"</span> <span class="attr">ref</span>=<span class="string">"svg"</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">:width</span>=<span class="string">"viewer.w"</span> <span class="attr">:height</span>=<span class="string">"viewer.h"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- ... --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며."></a>마치며.</h2><p>JavaScript 라이브러리는 JavaScript로 쓰여져 있다. 결국 JavaScript를 잘 다루고, 다른 사람이 쓴 JavaScript 코드를 잘 읽을 수만 있다면 여러 다른 라이브러리들을 섞거나, 직접 JavaScript 코드를 더하거나 하는데에 두려움을 가질 필요가 없다.</p>
<p>물론 각 라이브러리들의 기반과 철학을 무시한 채 마구잡이 코딩을 해도 된다는 뜻은 아니다. </p>
<p><strong>사실</strong> 이 포스팅의 예제에는 무서운 비밀이 숨어있다. 여기서 그린 Tree 그래프는 속씨식물군의 구조를 선별적으로 나열하고 있는데, 트리의 마지막을 따라가면 놀라운 사실을 알 수 있다.</p>
<p>여러분, 감자에 탱글탱글한 열매가 열린다는 사실, 들어본 적이 있습니까? 토마토, 감자, 고추가 전부다 가지과라는 사실, 알고 계셨습니까? 내게는 너무나 충격적이었던 <a href="https://www.google.co.kr/search?q=%EA%B0%90%EC%9E%90%EC%97%B4%EB%A7%A4&amp;rlz=1C5CHFA_enKR722KR722&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjrnJ7S_43XAhUKgLwKHTQ5BxgQ_AUICigB&amp;biw=1573&amp;bih=880#imgrc=ZjmbJaCywgOerM:" target="_blank" rel="external">감자 열매 사진</a>을 공유하면서 이 포스팅을 마친다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Vue : 2.2.6&lt;/li&gt;
&lt;li&gt;D3 : 4.11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;를 대부분은 ‘정말 쉽다’라고 소개하곤 하지만 나는 거기에 동의하지는 않는
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>why do you need to learn about webpack</title>
    <link href="http://dev.zzoman.com/2017/09/04/why-do-you-need-to-learn-about-webpack/"/>
    <id>http://dev.zzoman.com/2017/09/04/why-do-you-need-to-learn-about-webpack/</id>
    <published>2017-09-04T13:04:44.000Z</published>
    <updated>2017-09-04T13:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>작년 말, 조금은 늦게 Webpack을 접했고, 이제는 Webpack 없이 어떻게 Front-end 개발을 시작할 수 있을까 의문이 들 정도로 Webpack이라는 도구에 많은 것을 의지하고 있다.</p>
<p>그렇게 여러 프로젝트들을 당연하다는 듯이 Webpack으로 시작하거나 리팩토링하다보니 스스로야 너무 편하지만, 다른 누군가와 협업을 하게 될 경우 익숙하지 않은 Webpack 개발 환경을 사용하길 어떻게 설득해야할지 생각을 정리해 둘 필요성을 느꼈다.</p>
<p>분명히 Webpack을 사용하게되면 프로젝트의 시작에 꽤많은 시간이 필요하고, Front-end 개발자로서는 ‘개발 환경설정을 위한 시간 투자’가 상당히 불편하고 어색하게 느껴질 수 있다. 그럼에도 불구하고 Webpack을 사용하여야 하는 이유, JavaScript 개발자로서 Webpack이 기본 소양이어야만 하는 이유에 대해 정리해 보고자 한다.</p>
<p>글은 개괄적으로 쓸 예정이며, 자세한 내용은 링크를 통해서, 또는 글에서 나온 용어를 검색해서 확인할 수 있다.</p>
<h2 id="Entry-설정을-통한-JavaScript-리소스-모듈화"><a href="#Entry-설정을-통한-JavaScript-리소스-모듈화" class="headerlink" title="Entry 설정을 통한 JavaScript 리소스 모듈화"></a>Entry 설정을 통한 JavaScript 리소스 모듈화</h2><p>Webpack은 기본적으로 JavaScript Bundling 도구이다. <code>Bundle</code>은 한글로 ‘묶음, 꾸러미’ 라는 뜻으로 여러 JavaScript 소스를 하나로 묶는 도구라는 뜻이다. </p>
<p>Webpack 설정 내의 <code>entry</code>객체를 통해 하나로 묶을 소스들의 위치를 정의할 수 있으며, <code>output</code>객체 내에 정의된 규칙에 따라 특정 위치에 한 개, 또는 복수의 bundle 파일을 생성할 수 있다.</p>
<p>따라서 어떻게 설정하느냐에 따라 편하고 의미있는 폴더 구조를 만들어낼 수 있다.</p>
<p>예를 들어 개발용 리소스에서는 template, style, script를 페이지별로 나누어 담아 사람이 이해하거나 사용하기 쉬운 폴더 구조를 만들고, 빌드된 결과 내에선 웹서버에서 설정하기 편하도록 template, style, script 파일을 확장자 별로 나누어 폴더에 담을 수 있다.</p>
<p>예를 들어 아래와 같은 폴더 구조를 구성하면, 작업 중인 페이지의 여러 리소스들을 찾아 헤매는 번거로움을 줄이면서, 동시에 서버 개발자에게는 익숙한 형태의 리소스 전달이 가능하다.</p>
<p><strong>개발용 리소스</strong></p>
<pre><code>pages
|--about
|    |--about.html
|    |--about.css
|    `--about.js
`--home
    |--home.html
    |--home.css
    `--home.js
</code></pre><p><strong>빌드된 결과</strong>  </p>
<pre><code>build
|--html
|    |--about.html
|    `--home.html
|--css
|    |--about.css
|    `--home.css
`--js
    `--index.js
</code></pre><h2 id="CommonsChunkPlugin-자동생성"><a href="#CommonsChunkPlugin-자동생성" class="headerlink" title="CommonsChunkPlugin 자동생성"></a>CommonsChunkPlugin 자동생성</h2><p><code>chunk</code>는 한글로 번역하면 ‘하나로 뭉쳐진 덩어리’이다.</p>
<p>Webpack은  <a href="https://webpack.js.org/concepts/output/#multiple-entry-points" target="_blank" rel="external"><code>output</code>설정을 통해서 <code>entry</code>객체를 바탕으로 원하는 위치에 여러 JavaScript 파일을 생성</a>할 수 있다.</p>
<p>이렇게 하면 하나로 Bundle된 엄청 큰 사이즈의 JavaScript가 생성되는 것을 피할 수 있지만, 각 페이지에서 중복되어 여러번 로드되는 JavaScript 코드가 생겨 오히려 전반적인 서비스의 유저경험을 저해할 수 있다.</p>
<p><code>CommonsChunkPlugin</code>을 활용하면 중복 사용되는 JavaScript 모듈을 별도의 공통된 파일로 생성할 수 있다. 공통된 리소스만 뭉쳐진 파일은 초기에 로드한 뒤 브라우저 캐쉬를 통해 빠르게 로드할 수 있다.</p>
<h2 id="NPM으로-JavaScript-리소스-일원화"><a href="#NPM으로-JavaScript-리소스-일원화" class="headerlink" title="NPM으로 JavaScript 리소스 일원화"></a>NPM으로 JavaScript 리소스 일원화</h2><p>Webpack은 <a href="https://webpack.js.org/api/module-methods/#commonjs" target="_blank" rel="external">CommonJS 모듈</a>을 포함한다.</p>
<p>대부분의 Major 라이브러리는 NPM 생태계를 통해 제공되고 있으며, CommonJS를 통해 읽어오고 Webpack을 통해 브라우저에서도 작동가능한 JavaScript 파일로 번들링할 수 있다.</p>
<p>이렇게 하면 라이브러리를 로드하기 위해 Temaplate 파일에 별도의 지저분한 <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code> 태그를 작성할 필요가 없어지고, NPM을 통한 라이브러리의 버전관리도 가능하다.</p>
<h2 id="Loader를-활용한-Node-js-도구의-활용"><a href="#Loader를-활용한-Node-js-도구의-활용" class="headerlink" title="Loader를 활용한 Node.js 도구의 활용"></a>Loader를 활용한 Node.js 도구의 활용</h2><p>Webpack은 JavaScript 파일을 <code>entry</code>로 지정하여, JavaScript 내에서 Front-end에 필요한 여러 리소스를 읽어들이고, 수정하고, Build할 수 있다.</p>
<p>특정한 확장자가 포함된 파일을 CommonJS 모듈을 통해 읽어들이고, 읽어들인 파일의 형식에 따라 처리하기 위해 필요한 도구가 <code>loader</code>이다. 뭐하려 불편하게 JavaScript로 CSS와 각종 Asset을 읽어들이냐고 물을 수 있을 것이다. <code>loader</code>를 통해 Front-end 리소스를 관리하는 데에는 다음과 같은 장점이 있다.</p>
<ul>
<li>Sass, ESLint, Babel 등의 도구를 위한 설정과 빌드 프로세스를 일원화할 수 있다.</li>
<li>Script 뿐만 아니라 Style, Template 파일에서도 HMR(Hot Module Replacement)를 사용할 수 있다.</li>
<li>정적리소스의 Cache 방지를 위한 Timestamp나 Hash를 간편하게 추가할 수 있다.</li>
<li>각 페이지별 template 파일에 필요한 <code>&lt;script&gt;</code>태그나 <code>&lt;link&gt;</code>태그를 자동으로 추가할 수 있다.</li>
</ul>
<h2 id="Webpack-Configuration으로-간편한-로컬-테스트-리얼-환경별-빌드-관리"><a href="#Webpack-Configuration으로-간편한-로컬-테스트-리얼-환경별-빌드-관리" class="headerlink" title="Webpack Configuration으로 간편한 로컬/테스트/리얼 환경별 빌드 관리"></a>Webpack Configuration으로 간편한 로컬/테스트/리얼 환경별 빌드 관리</h2><p>Webpack은 <code>Object</code>를 <code>return</code>하는 별도의 <code>webpack.config.js</code> 설정파일을 기반으로 돌아간다.</p>
<p><a href="https://webpack.js.org/api/cli/#common-options" target="_blank" rel="external">CLI 명령어</a>나 <a href="https://webpack.js.org/api/plugins/compiler/" target="_blank" rel="external">Compiler 모듈</a>을 통해 복수의 설정파일을 운영할 수 있으며, 설정한 내용에 근거해 Local/Stage/Real 등의 환경별 다른 빌드 옵션을 관리할 수 있다.</p>
<p>일반적으로 개발과 테스트를 위한 환경에서는 브라우저 개발자 도구 활용을 위한 <code>sourcemap</code>관련 옵션을 추가하거고, 상용 서비스 환경에서는 유저의 편이와 서버 리소스 절약을 위한 <code>uglify</code>등의 optimize 플러그인, 스크립트를 통해 로드하는 정적리소스들을 추출하기 위한 <code>extract-text-webpack-plugin</code> 등을 추가한다.</p>
<p>또한 개발 환경에서 Front-end와 Back-end 서버를 따로 운영하는 등의 경우 <code>proxy</code> 설정을 통해 각 서버의 리소스 교환을 손쉽게 관리할 수도 있다.</p>
<h2 id="Webpack-dev-server-활용한-개발-편의성-증대"><a href="#Webpack-dev-server-활용한-개발-편의성-증대" class="headerlink" title="Webpack-dev-server 활용한 개발 편의성 증대"></a>Webpack-dev-server 활용한 개발 편의성 증대</h2><p>JAVA 등의 Back-end 언어와 협업하는 환경에서 Front-end 개발자는 큰 시련을 겪는다. Front-end 리소스의 수정사항이 늦게 반영되거나, 잘못 업데이트되거나 배포되는 이슈들 속에서 Front-end 개발자는 자신의 개발 실력과 무관한 잡다한 스트레스 속에서 수영하게 된다.</p>
<p><code>webpack-dev-server</code>는 Webpack 설정을 통해 Front-end만의 개발용 Node.js 서버를 손쉽게 구축하도록 돕는다.</p>
<p>Back-end 리소스와 무관하게 독립적으로 돌아가는 서버로 빌드에 소요되는 시간을 대폭 줄일 수 있으며, 매번 서버에 문제가 생길 때에 Back-end 개발자와 커뮤니케이션해야하는 번거로움도 해소할 수 있다. <code>HMR (Hot Module Replacement)</code>을 통해 수정된 사항을 브라우저에서 빠르게 확인할 수도 있다. </p>
<p>또한 <code>webpack-dev-server</code>는 실질적으로 물리적인 파일을 Build해내는 것이 아니라, Memory내에  Cache 한 결과를 라우팅하기 때문에 <code>watch</code>를 통해 변경사항을 매번 빌드하는 것에 비해 쾌적한 개발 환경을 구축할 수 있다.</p>
<h1 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h1><p>이 외에도 Webpack에는 내가 아직 사용해보지 못한 수많은 장점이 존재한다. 그러나 어떤 도구든 도구에 대한 의존성을 너무 크게 가져가는 것은 바람직하지 않다. 처음 Webpack을 접하는 사용자라면, 가장 기초적인 Webpack 설정으로 시작해서 다른 Major 도구들에서 사용하는 Webpack의 기능을 하나하나 살펴보길 바란다.</p>
<p>대표적으로 React 프로젝트 자동 생성 도구인 <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a>을 살펴보는 것을 추천한다. 도구를 통해 React 프로젝트를 생성한 후, <code>$npm run inject</code> 명령어를 실행하면 상세한 환경별 Webpack 설정 파일을 확인해 볼 수 있으며, 각 도구의 의미와 용법을 방대한 주석과 함께 공부할 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;작년 말, 조금은 늦게 Webpack을 접했고, 이제는 Webpack 없이 어떻게 Front-end 개발을 시작할 수 있을까 의문이 들 정도로 Webpack이라는 도구에 많은 것을 의지하고 있다.&lt;/p&gt;
&lt;p&gt;그렇게 여러 프로젝트들을 당연하다는 
    
    </summary>
    
      <category term="web" scheme="http://dev.zzoman.com/categories/web/"/>
    
      <category term="javascript" scheme="http://dev.zzoman.com/categories/web/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Unicode Normalization</title>
    <link href="http://dev.zzoman.com/2016/05/17/unicode-normalization/"/>
    <id>http://dev.zzoman.com/2016/05/17/unicode-normalization/</id>
    <published>2016-05-17T08:11:23.000Z</published>
    <updated>2016-05-17T10:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<p> <strong><a href="https://github.com/reumia/toonman" target="_blank" rel="external">Toonman</a></strong>이라는 도구를 제작 중이다.<br>zzoman.com 에서 만화용 플랫폼을 따로 분리하려다 어찌저찌 일이 커졌다.</p>
<p>이미지 파일명을 양식에 맞추어 작성하고 폴더에 넣기만하면 Blog를 운영할 수 있도록 돕는 일종의 Static Blog Generator인데, 그러려다보니 파일명을 한글같은 제3세계 언어로 작성가능해야 하고, 이게 특수한 환경에서 문제를 일으켰다.</p>
<p>서버에만 올라가면 한글명으로된 이미지들이 읽히지가 않아서 한동안 호스팅 업체를 괴롭혔지만, Github Page 에서도 동일한 이슈가 반복되어서 코드 자체에 문제가 있다는 걸 알았다.</p>
<h2 id="문제는-OSX"><a href="#문제는-OSX" class="headerlink" title="문제는 OSX"></a>문제는 OSX</h2><p>웹에서 한글은 <code>%D3%09</code>같은 문자가 나열되는 Unicode 형태로 치환되어 표현되는데, 브라우저 URL에 한글을 입력했을 때에 변환되는 Unicode와 내 소스에서 뱉어내는 Unicode가 완전히 달랐고, 하나하나 로그를 찍어보다보니 왠걸, OSX 환경때문에 생기는 이슈였다.</p>
<p>OSX는 한글을 조합되지 않은 상태로 기록한다. 그러니까 <code>달</code>이라고 입력을 하고 실제로 그렇게 보이지만, 내부적으로는 <code>ㄷㅏㄹ</code>이라고 저장한다. <code>달</code>을 Unicode로 치환한 값과 <code>ㄷㅏㄹ</code>을 Unicode로 치환하는 값은 다르다. Unicode는 언어의 모양을 특정 키값에 저장하는데, <code>달</code>이라는 조합된 글자는 하나의 키에 저장되지만 <code>ㄷㅏㄹ</code>은 각 글자수만큼 세개의 키에 저장이 된다. </p>
<p>Toonman은 Node.js로 제작 중이었고, OSX환경에서 <code>fs</code>의 <code>readdir()</code>을 통해 파일명을 읽어오니 실제 파일명과 다르게 조합되지 않은 형태의 파일명을 가져오고 있었다. (물론 표현할 때에 조합해주기 때문에 눈으로 보기에는 정상적으로 조합된 형태였다.)</p>
<p>로컬환경에서야 맥이 다시 값을 조합하기 때문에 문제없이 이미지의 URL을 읽어들일 수 있었지만, 서버에서는 해당 기능을 제공하지 않으니 이미지의 위치를 제대로 읽을리 만무했다. </p>
<p><code>달.jpg</code>를 호출해야 하는데 <code>ㄷㅏㄹ.jpg</code>를 요청하고 있었던 것이다.</p>
<p>문제를 알았으니, 이제 OSX가 풀어해친 한글을 다시 조합하기만 하면 된다.</p>
<h2 id="Unicode-Normalizing"><a href="#Unicode-Normalizing" class="headerlink" title="Unicode Normalizing"></a>Unicode Normalizing</h2><p>이렇게 풀어헤쳐진 Unicode를 다시 조합된 형태로 바꾸거나, 조합된 Unicode를 풀어헤치는 과정을 <code>Unicode Normalizing</code>이라고 한다. </p>
<p>조합된 형태를 <code>NFC</code> 포맷, 풀어진 형태를 <code>NFD</code> 포맷이라고 하며, 그러니까 나는 <code>NFD TO NFC</code> 과정을 거쳐야 한다. Node.js에는 물론 <a href="https://github.com/walling/unorm" target="_blank" rel="external">UNORM</a>이라는 NPM 도구가 이미 제작되어 있었다.</p>
<p><code>fs.readdir()</code>에서 리턴된 값을, <code>UNORM</code>을 이용해 <code>NFC</code> 포맷으로 변환시켜주자 정상적으로 서버에서도 이미지를 읽어온다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;&lt;a href=&quot;https://github.com/reumia/toonman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toonman&lt;/a&gt;&lt;/strong&gt;이라는 도구를 제작 중이다.&lt;br&gt;zzoman.com 에서 
    
    </summary>
    
      <category term="web" scheme="http://dev.zzoman.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #133</title>
    <link href="http://dev.zzoman.com/2016/04/18/translate-wdrl-133/"/>
    <id>http://dev.zzoman.com/2016/04/18/translate-wdrl-133/</id>
    <published>2016-04-18T04:42:33.000Z</published>
    <updated>2016-04-18T04:55:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/133" target="_blank" rel="external">Web Development Reading List #133</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h2><h4 id=""><a href="#" class="headerlink" title=""></a><link rel="preload"></h4><blockquote>
<p><a href="http://www.zachleat.com/web/preload/" target="_blank" rel="external">The Web Fonts : Preloaded</a></p>
</blockquote>
<p>Webfont를 사용할 때에 <code>&lt;link rel=&quot;preload&quot;&gt;</code>를 사용함으로 얻을 수 있는 이점과, 다른 방법들과의 테스트를 통한 결과를 공유합니다. 크로스브라우징 여부, 그리고 사용하게 될 웹폰트의 갯수에 따라 <code>dataURI</code>와 <code>preload</code>를 선택적으로 사용하는게 좋다고 합니다.</p>
<h4 id="Font-Face-Observer"><a href="#Font-Face-Observer" class="headerlink" title="Font Face Observer"></a>Font Face Observer</h4><blockquote>
<p><a href="https://www.bramstein.com/writing/web-font-loading-patterns.html" target="_blank" rel="external">Web Font Loading Patterns</a><br><a href="https://github.com/bramstein/fontfaceobserver" target="_blank" rel="external">Font Face Observer</a></p>
</blockquote>
<p>JavaScript로 제작된 도구인 Font Face Observer를 활용해 웹폰트의 로딩을 간결화하는 방법을 소개합니다. </p>
<h2 id="HTML-SVG"><a href="#HTML-SVG" class="headerlink" title="HTML / SVG"></a>HTML / SVG</h2><h4 id="SVG로-화살표-만들기"><a href="#SVG로-화살표-만들기" class="headerlink" title="SVG로 화살표 만들기"></a>SVG로 화살표 만들기</h4><blockquote>
<p><a href="http://thenewcode.com/1068/Making-Arrows-in-SVG" target="_blank" rel="external">Making Arrows in SVG</a></p>
</blockquote>
<p><code>SVG</code>의 <code>&lt;marker&gt;</code>요소를 활용하여 화살표를 만드는 방법을 소개합니다. Illustrator는 아직 <code>&lt;marker&gt;</code>요소를 사용하지 않기 때문에 화살표를 제작하는 경우라면 패킷을 아낄 수 있는 방법이 되겠네요.</p>
<h4 id="Icon-Font의-웹접근성"><a href="#Icon-Font의-웹접근성" class="headerlink" title="Icon Font의 웹접근성"></a>Icon Font의 웹접근성</h4><blockquote>
<p><a href="http://fontawesome.io/accessibility/" target="_blank" rel="external">FontAwesome : Accessibility</a></p>
</blockquote>
<p>대표적인 아이콘폰트 서비스인 FontAwesome에서 아이콘폰트를 위한 웹접근성 가이드라인을 고융하였습니다. 웹접근성에서 정보를 아이콘으로 표시하는 것에 대한 갑론을박이 늘 있어왔는데, 해당 분야의 대표의 의견인 만큼 꼭 한번 읽어볼 필요가 있다고 생각됩니다.</p>
<hr>
<h2 id="덧붙여"><a href="#덧붙여" class="headerlink" title="덧붙여"></a>덧붙여</h2><p>WDRL 외에 금주 개인 프로젝트를 진행하는 동안 참고했던 내용들을 공유해 보려고 합니다.</p>
<h4 id="ES6-객체지향-작성법"><a href="#ES6-객체지향-작성법" class="headerlink" title="ES6 객체지향 작성법"></a>ES6 객체지향 작성법</h4><blockquote>
<p><a href="https://chrisrng.svbtle.com/es6-object-oriented" target="_blank" rel="external">https://chrisrng.svbtle.com/es6-object-oriented</a></p>
</blockquote>
<p>ES6 문법이 아직 눈에 익숙치 않아서, 기존 ES5에서의 <code>Prototype Pattern</code>을 기준으로 ES6의 <code>Class Pattern</code>을 설명하는 내용이 필요했습니다. 관련하여 검색하다가 찾은 유용한 포스트입니다.</p>
<h4 id="has-Pseudo-Class"><a href="#has-Pseudo-Class" class="headerlink" title=":has Pseudo-Class"></a><code>:has</code> Pseudo-Class</h4><blockquote>
<p><a href="http://www.ericponto.com/blog/2015/01/10/has-pseudo-class-parent-selector/" target="_blank" rel="external">http://www.ericponto.com/blog/2015/01/10/has-pseudo-class-parent-selector/</a></p>
</blockquote>
<p>관계형 Pseudo-Class인 <code>:has</code> 선택자에 대한 포스트입니다. CSS3도 아닌 무려 CSS4의 속성이지만, 미리 알아보고 꿈꿔보는 것도 꽤 괜찮은 위로가 될지도 모릅니다. :P</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/133&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #133&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="translate" scheme="http://dev.zzoman.com/categories/translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #131</title>
    <link href="http://dev.zzoman.com/2016/04/04/translate-wdrl-131/"/>
    <id>http://dev.zzoman.com/2016/04/04/translate-wdrl-131/</id>
    <published>2016-04-04T02:28:02.000Z</published>
    <updated>2016-04-04T03:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/131" target="_blank" rel="external">Web Development Reading List #131</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="디자인"><a href="#디자인" class="headerlink" title="디자인"></a>디자인</h2><h4 id="Process-of-The-Times-Website-Renewal"><a href="#Process-of-The-Times-Website-Renewal" class="headerlink" title="Process of The Times Website Renewal"></a>Process of The Times Website Renewal</h4><p>Pedro Duarte가 블로그를 통해 <a href="https://medium.com/swlh/building-the-ui-for-the-new-the-times-website-26dc4e6569e" target="_blank" rel="external">The Times의 웹사이트 디자인 개편 과정</a>을 공개하였습니다. 큰 규모의 웹사이트를 구조화하여 접근하는 그의 노하우를 엿볼수 있습니다. 읽어볼만 합니다.</p>
<hr>
<h2 id="도구"><a href="#도구" class="headerlink" title="도구"></a>도구</h2><h4 id="Bash-Shell-on-Windows-10"><a href="#Bash-Shell-on-Windows-10" class="headerlink" title="Bash Shell on Windows 10"></a>Bash Shell on Windows 10</h4><blockquote>
<p><a href="http://www.hanselman.com/blog/DevelopersCanRunBashShellAndUsermodeUbuntuLinuxBinariesOnWindows10.aspx" target="_blank" rel="external">http://www.hanselman.com/blog/DevelopersCanRunBashShellAndUsermodeUbuntuLinuxBinariesOnWindows10.aspx</a></p>
</blockquote>
<p>다음 업데이트부터 Windows 10에서 Bash Shell이 사용가능해질 전망입니다. Windows 10으로의 업그레이드를 망설일 필요가 없어졌습니다. 개발할 때면 집에서조차 맥북을 켜야했던 저에게는 무척 반가운 소식이네요.</p>
<hr>
<h2 id="접근성"><a href="#접근성" class="headerlink" title="접근성"></a>접근성</h2><h4 id="CaptionBot"><a href="#CaptionBot" class="headerlink" title="CaptionBot"></a>CaptionBot</h4><p>Microsoft에서 <a href="https://www.captionbot.ai/" target="_blank" rel="external">CaptionBot</a>을 발표했습니다. 이미지에서 어떤 것이 보이는지 분석하여 적절한 대체텍스트를 제공하는 도구입니다.</p>
<hr>
<h2 id="CSS-Sass"><a href="#CSS-Sass" class="headerlink" title="CSS / Sass"></a>CSS / Sass</h2><h4 id="CSS-Grid"><a href="#CSS-Grid" class="headerlink" title="CSS Grid"></a>CSS Grid</h4><p>Flexbox를 배우기 위해 CSS Trick에서 작성한 “<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">Complete Guide to Flexbox</a>“라는 포스팅을 본 적이 있을 겁니다. 같은 컨셉으로 최신 속성인 CSS Grid에 대해 “<a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="external">Complete Guide to CSS Grid</a>“라는 이름으로 새로운 포스팅을 발행했습니다. 아직은 최신브라우저에서조차 지원하지 않지만 미리 공부해보는 것도 좋겠습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #131&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #130</title>
    <link href="http://dev.zzoman.com/2016/03/28/translate-wdrl-130/"/>
    <id>http://dev.zzoman.com/2016/03/28/translate-wdrl-130/</id>
    <published>2016-03-28T02:35:50.000Z</published>
    <updated>2016-04-04T02:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/130" target="_blank" rel="external">Web Development Reading List #130</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>많이 쉬었습니다. 피로감이 커져서 번역을 이어나갈 수 없었으나, 뉴스는 계속 지켜보고 있었습니다. 내용을 살펴보고 필요하거나 제 블로그의 성격에 맞는 정보만 정리해서 올리고자 합니다. 주로 JavaScript를 포함한 Front-end 관련한 정보를 추릴 예정입니다.</p>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h4 id="Tape"><a href="#Tape" class="headerlink" title="Tape"></a>Tape</h4><blockquote>
<p><a href="https://ponyfoo.com/articles/testing-javascript-modules-with-tape" target="_blank" rel="external">https://ponyfoo.com/articles/testing-javascript-modules-with-tape</a></p>
</blockquote>
<p>JavaScript 테스트 도구인 Mocha와 Jasmine을 대체하는 Tape을 소개한 포스팅입니다.</p>
<h4 id="Snapback-Cache"><a href="#Snapback-Cache" class="headerlink" title="Snapback Cache"></a>Snapback Cache</h4><blockquote>
<p><a href="https://m.signalvnoise.com/snapback-cache-what-we-use-to-make-our-infinite-scrolling-feeds-at-highrise-awesome-a789128e807a#.84z8rbnv8" target="_blank" rel="external">https://m.signalvnoise.com/snapback-cache-what-we-use-to-make-our-infinite-scrolling-feeds-at-highrise-awesome-a789128e807a#.84z8rbnv8</a></p>
</blockquote>
<p>Infinite Scrolling을 구현 시, 페이지 전환으로 기존 스크롤 내용을 모두 날려버리는 이슈를 해결하기 위한 Snapback Cache를 이용한 예제 공유</p>
<hr>
<h2 id="CSS-SASS"><a href="#CSS-SASS" class="headerlink" title="CSS / SASS"></a>CSS / SASS</h2><h4 id="Noramlize-css"><a href="#Noramlize-css" class="headerlink" title="Noramlize.css"></a>Noramlize.css</h4><p>Normalize.css는 모두 다른 각 브라우저의 기본 규칙을 동일하게 표현가능하도록 표준화하는 도구로, 다른 여타 reset.css와 구분됩니다.</p>
<p>Normalize.css의 <a href="https://github.com/necolas/normalize.css/releases/tag/4.0.0" target="_blank" rel="external">v4.0</a>이 공개되었습니다. 유용한 Normalization이 많이 추가되었으니 <a href="https://github.com/necolas/normalize.css/blob/master/CHANGELOG.md" target="_blank" rel="external">Changelog 링크</a>를 통해 확인해 봅시다.</p>
<h4 id="Stickystate"><a href="#Stickystate" class="headerlink" title="Stickystate"></a>Stickystate</h4><blockquote>
<p><a href="https://github.com/soenkekluth/sticky-state" target="_blank" rel="external">https://github.com/soenkekluth/sticky-state</a></p>
</blockquote>
<p>Stickystate는 <code>position: sticky</code>를 지원하지 않는 브라우저에 대한 폴리필과 기존 내용을 보다 안정적으로 구현시켜주는 JavaScript 모듈입니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/130&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #130&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>port fowarding in osx el capitan</title>
    <link href="http://dev.zzoman.com/2016/03/24/port-forwarding-in-osx-el-capitan/"/>
    <id>http://dev.zzoman.com/2016/03/24/port-forwarding-in-osx-el-capitan/</id>
    <published>2016-03-24T01:47:08.000Z</published>
    <updated>2016-03-24T03:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>로컬 환경에서 서버에 있는 정보를 요청해야 할 때에, 가상 도메인에 붙어있는 포트 정보 <code>local-domain:8080</code> 때문에 Cross Origin 이슈가 발생한다.</p>
<p>윈도우에서야 80 포트로 간단히 변경해 주면 되지만, OSX에서는 1024 포트 이하의 포트들을 루트 권한 없이는 사용이 불가하기 때문에 우회하는 방법을 사용해야 한다.</p>
<hr>
<h2 id="Port-Forwarding"><a href="#Port-Forwarding" class="headerlink" title="Port Forwarding"></a>Port Forwarding</h2><blockquote>
<p><a href="https://gist.github.com/kujohn/7209628" target="_blank" rel="external">https://gist.github.com/kujohn/7209628</a></p>
</blockquote>
<p>기존에는 <code>ipfw</code>를 통해 포트포워딩을 하였지만, Mavericks 이후로는 <code>pf</code>로 대체되었다. 아래 내용은 위 링크된 블로그의 내용을 참고했다.</p>
<h3 id="1-Anchor-파일-생성"><a href="#1-Anchor-파일-생성" class="headerlink" title="1. Anchor 파일 생성"></a>1. Anchor 파일 생성</h3><p><code>/etc/pf.anchors/&lt;anchor file&gt;</code> 위치에 Anchor 파일을 생성한다. Anchor 파일에는 아래의 Redirection Rule 을 적어준다.</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line">rdr pass on lo0 inet proto tcp <span class="keyword">from</span> any <span class="keyword">to</span> 127.0.0.1<span class="built_in"> port </span>80 -&gt; 127.0.0.1<span class="built_in"> port </span>8080</div></pre></td></tr></table></figure>
<h3 id="2-Anchor-파일-테스트"><a href="#2-Anchor-파일-테스트" class="headerlink" title="2. Anchor 파일 테스트"></a>2. Anchor 파일 테스트</h3><p>테스트를 통해 작성된 Anchor 파일에 특별한 이슈가 없는지 파악한다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">sudo pfctl -vnf <span class="tag">&lt;<span class="name">anchor</span> <span class="attr">file</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-pf-conf-참조"><a href="#3-pf-conf-참조" class="headerlink" title="3. pf.conf 참조"></a>3. <code>pf.conf</code> 참조</h3><p><code>/etc/pf.conf</code> 파일은 부트시에 PF가 로드하는 메인 설정 파일이다. 이전에 생성한 Anchor 파일을 사용하기 위해서 기존 메인 설정 파일을 복사하거나, 새로운 설정파일을 만든다.</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line">sudo touch <span class="meta-keyword">/etc/</span><span class="params">&lt;custom .conf file&gt;</span></div></pre></td></tr></table></figure>
<p>내용은 아래와 같이 채워준다.</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><div class="line">rdr-anchor <span class="string">"forwarding"</span></div><div class="line"><span class="built_in">load</span> <span class="built_in">anchor</span> <span class="string">"forwarding"</span> <span class="keyword">from</span> <span class="string">"/etc/pf.anchors/&lt;anchor file&gt;"</span></div></pre></td></tr></table></figure>
<h3 id="4-로드하고-PF-적용"><a href="#4-로드하고-PF-적용" class="headerlink" title="4. 로드하고 PF 적용"></a>4. 로드하고 PF 적용</h3><p>Mavericks 에서 PF는 기본으로 실행되지는 않는다. 블로그에서는 몇 가지 방법으로 소개하나, 로컬 환경에서 테스트를 위한 용도로 사용할 예정이라 수동으로 적용하는 방법 하나만 기록한다.</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><div class="line">sudo pfctl -ef &lt;custom .<span class="keyword">conf</span> <span class="keyword">file</span>&gt;</div></pre></td></tr></table></figure>
<p>이 외에도 부트 시에 자동으로 로드하거나, <code>pfctl</code> 명령어에 alias를 추가하는 방법 등이 있다.</p>
<hr>
<h2 id="AJP를-이용한-ProxyPass"><a href="#AJP를-이용한-ProxyPass" class="headerlink" title="AJP를 이용한 ProxyPass"></a>AJP를 이용한 ProxyPass</h2><p><code>/etc/apache2/httpd.conf</code> 파일에 아래 한 줄 추가 후 아파치를 재실행 <code>apachectl restart</code> 한다.</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">ProxyPass <span class="regexp">/ ajp:/</span><span class="regexp">/localhost:8080/</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;로컬 환경에서 서버에 있는 정보를 요청해야 할 때에, 가상 도메인에 붙어있는 포트 정보 &lt;code&gt;local-domain:8080&lt;/code&gt; 때문에 Cross Origin 이슈가 발생한다.&lt;/p&gt;
&lt;p&gt;윈도우에서야 80 포트로 간단히 변경해 주
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fix a canvas clearRect bug</title>
    <link href="http://dev.zzoman.com/2016/03/14/fix-a-canvas-clearRect-bug/"/>
    <id>http://dev.zzoman.com/2016/03/14/fix-a-canvas-clearRect-bug/</id>
    <published>2016-03-14T05:56:20.000Z</published>
    <updated>2016-03-15T01:31:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>저사양의 안드로이드 디바이스가 특정버전에서 canvas내의 결과가 중복되어 노출되는 이슈가 있었다. 양상은 단순히 사양 문제로 하드웨어 가속과 관련된 이슈가 아닐까 했고, 관련하여 아래와 같이 일종의 CSS Hack으로 해결하는 방법들이 있었다.</p>
<p><a href="https://code.google.com/p/android/issues/detail?id=41312" target="_blank" rel="external">Html5 Canvas drawing issue - duplicated drawing - when parent has overflow:hidden</a></p>
<ul>
<li>모든 부모 엘리먼트에 overflow:hidden 값 제거</li>
<li>Canvas 요소에 position:absolute 값 추가</li>
<li>특정 px 값으로 width, height 속성 지정</li>
<li>모든 부모 엘리먼트에 overflow-x:visible 값 추가</li>
<li>첫번째 드로잉이 끝나고, “canvas.width = canvas.width” 실행</li>
<li>Canvas 요소의 부모에 z-index 값 추가</li>
<li><a href="https://code.google.com/p/android/issues/detail?id=35474#c39" target="_blank" rel="external">하드웨어 가속 속성 제거</a></li>
</ul>
<p>첫 번째 방법을 통해 문제가 해결되었지만, <strong>Hack을 이용한 해결책은 근본적인 해결책이 아니다.</strong> 더 복잡한 다른 이슈를 야기시킬 가능성이 있기에 관련된 내용을 좀 더 알아보기로 했다.</p>
<p>해당 이슈는 서양권에서 <code>clearRect bug</code> 라고 보고되고 있다.</p>
<p><code>canvas</code>의 내용을 지우는 <code>claerRect</code> 함수가 저사양 브라우저에서 제대로 동작하지 않는 것으로, 해당 함수의 호출 이후에 캔버스 영역을 강제로 다시 렌더링 시키는 방법으로 문제를 해결한다.</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><div class="line"><span class="keyword">canvas</span>.clearRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"><span class="keyword">canvas</span>.style.display = ‘none’;		<span class="comment">// Detach from DOM</span></div><div class="line"><span class="keyword">canvas</span>.offsetHeight; 			<span class="comment">// Force the detach</span></div><div class="line"><span class="keyword">canvas</span>.style.display = ‘inherit’; 	<span class="comment">// Reattach to DOM</span></div></pre></td></tr></table></figure>
<p>위 내용은 <a href="https://medium.com/@dhashvir/android-4-1-x-stock-browser-canvas-solution-ffcb939af758#.x3g68siv7" target="_blank" rel="external">이 블로그의 포스팅</a>을 통해 좀 더 자세히 확인할 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;저사양의 안드로이드 디바이스가 특정버전에서 canvas내의 결과가 중복되어 노출되는 이슈가 있었다. 양상은 단순히 사양 문제로 하드웨어 가속과 관련된 이슈가 아닐까 했고, 관련하여 아래와 같이 일종의 CSS Hack으로 해결하는 방법들이 있었다.
    
    </summary>
    
      <category term="web" scheme="http://dev.zzoman.com/categories/web/"/>
    
      <category term="javascript" scheme="http://dev.zzoman.com/categories/web/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #116</title>
    <link href="http://dev.zzoman.com/2015/12/16/translate-wdrl-116/"/>
    <id>http://dev.zzoman.com/2015/12/16/translate-wdrl-116/</id>
    <published>2015-12-15T16:30:55.000Z</published>
    <updated>2015-12-16T05:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/116" target="_blank" rel="external">Web Development Reading List #116</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>이번 주에는 비교적 큰 뉴스가 없는 반면에 CSS와 관련한 재미있는 도구와 방법론이 몇 가지 소개되었네요. </p>
<p>가장 미니멀한 그리드 시스템으로 Gridly가 소개되었는데요, Flexbox를 사용하고 모던 브라우저만을 지원하기에 국내에선 아직 실효성이 높아보이지는 않지만 현대적인 기술들이 어떻게 활용가능한지 공부하기 위해 아주 좋을 듯 합니다.</p>
<blockquote>
<p><code>gridly</code>, <code>typekit</code></p>
</blockquote>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>안녕,</p>
<p>아마도 아직 크리스마스 선물을 사지 않았을 거야. 대개 가족이나 친구에게 선물을 사야할 것처럼 느껴지지만, 종종 그 느낌때문에 실질적으로 가치가 없는 아무 물건이나 사게되기도 해. 나는 그 대신에 직접 만든 식사와 손으로 만든 작은 선물, 그리고 사랑하는 사람들과의 충분한 시간을 가지는 것으로 저녁을 즐기기 시작했어. 지금까지 가게에서 산 어떤 선물보다 좋은 방법이었어. 그러니 아직 아무것도 찾지 못했다고 스트레스 받지말아. 시간과 주의, 그리고 함께하는 것 또한 훌륭한 선물일 수 있어. 좋은 주말 보내!</p>
<h3 id="News"><a href="#News" class="headerlink" title="News"></a>News</h3><ul>
<li><a href="https://blogs.windows.com/msedgedev/2015/12/05/open-source-chakra-core/" target="_blank" rel="external">Microsoft가 그들의  JavaScript 엔진인 Chakra를 오픈소스화 했다</a>. 사랑스러운 시도이며, 게다가 그들이 node.js를 지원하기를 원해왔던 것 처럼 V8에 대한 완전한 대안을 찾을 수 있음을 의미한다.</li>
<li>Mozilla는 이번 주, <a href="http://techcrunch.com/2015/12/08/mozilla-will-stop-developing-and-selling-firefox-os-smartphones/" target="_blank" rel="external">Firefox OS의 개발을 그만둘 것</a>임을 발표했다. Firefox OS는 우리에게 많은 새로운 웹기술 API들을 제공해왔기 때문에 슬픈 일이긴하지만, 유명한 선수들 사이에서 찬스를 얻을 기회가 없었기 때문에 또한 이해할만 하다.</li>
</ul>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul>
<li>PHP 7이 지금 출시되었고 많은 공급자들이 이미 지원하고 있다(덕분에 wdrl.info의 응답시간을 반이나 줄였다). <a href="https://www.phptoday.org/php7" target="_blank" rel="external">이 곳에서 새로운 PHP 7에 대해 더 배우기 위한 최고의 자원들을 모았다</a>.</li>
</ul>
<h3 id="Concepts-amp-Design"><a href="#Concepts-amp-Design" class="headerlink" title="Concepts &amp; Design"></a>Concepts &amp; Design</h3><ul>
<li>많은 경우에, 우리는 그저 보기 좋고 텍스트를 대체할 수 있다는 이유만으로 아이콘을 사용하고 있다. 하지만 우리는 <a href="http://tubikstudio.com/iconic-simplicity-the-vital-role-of-icons/" target="_blank" rel="external">아이콘의 단순함이 사용자 경험을 향상시키는데에 주요한 역할을 한다는 것</a>에 대해서는 그리 많이 알지 못한다.</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><ul>
<li>요즘 우리는 무언가가 미치는 영향이 어느 정도인지 인식하지 못할 때가 너무 많기 때문에 신경쓸 것들이 너무 많다. 하지만 <a href="https://github.com/ChALkeR/notes/blob/master/Do-not-underestimate-credentials-leaks.md" target="_blank" rel="external">우리는 정말로 자격증명이 새어나가는 것을 과소평가해서는 안된다</a>. 이 기사는 쉽게 발생하는 최악의 것들과, 그것이 얼마나 심각한지, 그리고 당신이 그 상황에 쳐했을 때에 해야할 것들을 설명한다.</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul>
<li>만약 <a href="http://bytearcher.com/articles/does-taking-a-callback-make-a-function-asynchronous/" target="_blank" rel="external">무엇이 JavaScript의 함수를 비동기적으로 만드는지</a>에 대해 항상 알아내고 싶었다면, 이 기사가 바로 당신이 원하는 것이다.</li>
</ul>
<h3 id="CSS-Sass"><a href="#CSS-Sass" class="headerlink" title="CSS / Sass"></a>CSS / Sass</h3><ul>
<li><a href="https://github.com/IonicaBizau/gridly" target="_blank" rel="external">Gridly는 아마도 가장 작은</a>(157 bytes 이하) CSS 그리드 시스템일 것이다. 모던 브라우저를 지원하고, Flexbox를 사용하였다.</li>
<li>Dave Rupert는 Picture 요소에 <a href="http://daverupert.com/2015/12/intrinsic-placeholders-with-picture/" target="_blank" rel="external">고유의 Placeholder</a>를 생성하는 그의 방법을 공유했다.</li>
<li>Typekit은 웹에서의 <a href="http://practice.typekit.com/lesson/caring-about-opentype-features/" target="_blank" rel="external">Open Type 기능을 위한 실용적인 가이드</a>를 배포했다. 이 가이드는 우리가 어떤 기능을 사용해야만 할 때와 그들 중 일부는 사용하지 말아야하는 때를 가르쳐 준다. 좋은 live 예제와 함께하는 아주 좋은 가이드이다.</li>
</ul>
<h3 id="Work-amp-Life"><a href="#Work-amp-Life" class="headerlink" title="Work &amp; Life"></a>Work &amp; Life</h3><ul>
<li>Kai Branch는 <a href="http://blog.offscreenmag.com/post/134649108556/take-your-conscience-to-work" target="_blank" rel="external">도전과 의미있는 일을 하는 것의 중요성</a>에 대해 썼다. 또, 당신이 하는 일 근처의 사소한 사건들을 사람들이 듣고 싶어하다는 것을 경험한 바 있다. 우리는 너무 많은 정보속에 있기 때문에 우리가 믿을 수 있는 사람의 의견을 필요로 하고 있다.</li>
<li>Corey Vilhauer는 많은 것을 바꾸지 않고 더 나은 삶을 살거나, <a href="https://the-pastry-box-project.net/corey-vilhauer/2015-december-5" target="_blank" rel="external">개인적인 기분이 나아지길 바라는모든 사람들에게 몇가지 충고</a>를 했다. 단지 당신의 마음가짐을 조절하고 스스로를 정확히 다시 파악해야 한다.</li>
</ul>
<h3 id="Go-beyond…"><a href="#Go-beyond…" class="headerlink" title="Go beyond…"></a>Go beyond…</h3><ul>
<li>우리는 지금, 변화에 대한 필요성, 지속가능성, 그리고 <a href="https://www.facebook.com/notes/arnold-schwarzenegger/i-dont-give-a-if-we-agree-about-climate-change/10153855713574658" target="_blank" rel="external">우리의 환경에 대한 아놀드 슈왈츠제네거 같은 사람의 대담한 문장들</a>을 읽을 수 있는 흥미로운 시간 속에 있다. 나는 여태 정치에서 종종 실패해온 것과 달리 앞으로 잘 알려진 사람들이 지금의 문제를 묘사하기에 더욱 적합한 던어를 이해가능한 방법으로 찾고 말 것이라는 사실을 사랑한다.</li>
<li>만약 <a href="http://www.nytimes.com/interactive/2015/12/03/upshot/what-you-can-do-about-climate-change.html?_r=0" target="_blank" rel="external">환경에 미치는 당신의 영향을 줄이기 위해 작은 무언가를 해보려고 한다</a>면, 이 곳에 몇가지 훌륭한 팁이 있다.</li>
</ul>
<p>여기까지가 이번 주의 내용이다. 이 글이 마음에 든다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/116&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #116&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #115</title>
    <link href="http://dev.zzoman.com/2015/12/07/translate-wdrl-115/"/>
    <id>http://dev.zzoman.com/2015/12/07/translate-wdrl-115/</id>
    <published>2015-12-06T17:02:42.000Z</published>
    <updated>2015-12-06T17:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/115" target="_blank" rel="external">Web Development Reading List #115</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>저번 주는 몸이 좋지 않아서 쉬었습니다 .<br>이번 주에는 프론트엔드와 관련한 새로운 뉴스가 많습니다. 귀찮으신 분들은 제가 기록하는 키워드로 내용만 확인해보는 것도 좋을 것 같습니다.</p>
<blockquote>
<p><code>깔끔한 flex box grid</code>, <code>DocumentCSS</code>, <code>calc()</code>, <code>HTTP/2</code></p>
</blockquote>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>안녕,</p>
<p>이 곳엔 아직 겨울이 오지 않았어, 대신에 나는 오늘 산에서 또 다른 자전거 모임을 가졌어. 아마 내게 있어 자연이 얼마나 중요한 것인지 이미 들은 적이 있을거야. 이번 주에는 야심찬 결과를 목표로 하지 않는 국제 기후 컨퍼런스를 보고, 어떤 독자는 기후 온난화에 대항하여 <a href="http://worrydream.com/ClimateChange/" target="_blank" rel="external">기술 산업 종사자로서 개인적으로 할 수 있는 일</a>이라는 훌륭한 기사를 보내왔어. 만약 이런 내용에 관심이 있다면, 이 글을 읽고 <a href="https://www.youtube.com/watch?v=oJJGuIZVfLM" target="_blank" rel="external">생각해보길 바래</a>(이 비디오는 1992년에 제작되었지만 여전히 유효하다). 즐거운 한주가 되길 바라며 이번 주 동안 내가 모은 놀라운 웹개발 기술들을 경험해 보자.</p>
<h3 id="News"><a href="#News" class="headerlink" title="News"></a>News</h3><ul>
<li>어제부터, <a href="https://letsencrypt.org/2015/12/03/entering-public-beta.html" target="_blank" rel="external">Let’s Encrypt는 공개 베타가 되었고</a> 이제 누구든지 사용가능해졌다. 그러니 가상 서버를 운영중이라면, <a href="https://timkadlec.com/2015/12/taking-lets-encrypt-for-a-spin/" target="_blank" rel="external">이 가이드 내용에 따라 시도해 보자</a>. 이 곳 독일에 있는 나의 호스팅 업체에서도 오늘 배포하기로 하였고, 많은 다른 호스팅 업체에서도 곧 따라오기를 바란다.</li>
<li>Adobe에서 빅뉴스를 발표했다: Photoshop과 Illustrator의 업데이트를 발표하였다. 이제 Photoshop에서 <a href="https://blogs.adobe.com/photoshop/2015/11/photoshop-cc-2015-and-fuse-cc-preview-available-today.html" target="_blank" rel="external">SVG를 삽입하거나 추출</a>할 수 있고, 추출 기능도 업그레이드 되었다. Illustrator는 <a href="https://helpx.adobe.com/illustrator/how-to/export-svg.html" target="_blank" rel="external">더 나은 SVG 추출</a>, 그리고 <a href="https://blogs.adobe.com/adobeillustrator/2015/11/the-latest-release-of-illustrator-cc-is-here.html" target="_blank" rel="external">새로운 shaper 도구</a>가 추가되었다. 그리고 심지어 더 큰 뉴스: Edge 도구와 서비스가 <a href="https://blogs.adobe.com/creativecloud/update-about-edge-tools-and-services/?scid=social55826686" target="_blank" rel="external">더 이상 개발되지 않는다</a>(Edge Animate, Reflow, Inspect). 대신 <a href="https://blogs.adobe.com/flashpro/welcome-adobe-animate-cc-a-new-era-for-flash-professional/" target="_blank" rel="external">Flash Pro를 Animate CC</a>로 새로 이름 붙였고, 추후 Edge Animate의 기능을 새 도구로 포함시킬 계획이다. 게다가, Adobe는 Dreamweaver를 다시 무대로 올릴 계획이며 또한 Bracket을 Dreamweaver에 통합하고 소프트웨어를 정리할 계획이다.</li>
<li>이번 주 <a href="https://secure.php.net/ChangeLog-7.php#7.0.0" target="_blank" rel="external">PHP 7.0이 마침내 출시되었다</a>. PHP 7.0의 새로운 기능에 아직 친숙하지 않다면, <a href="https://laracasts.com/series/php7-up-and-running" target="_blank" rel="external">이 가이드가 더 많은 것을 얘기해줄 것이다</a>.</li>
<li>올 해 초에 발표되었듯이, <a href="https://swift.org/" target="_blank" rel="external">Apple은 그들의 프로그래밍 언어인 Swift를 마침내 오픈소스화 했다</a>. Gihub에서 Code를 얻을 수 있고 새로운 웹사이트에서 정보를 찾아보자.</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>JavaScript로 이미지에서 얼굴을 찾아낼 수 있다면 정말 좋지 않을까? <a href="https://github.com/jwagner/smartcrop.js" target="_blank" rel="external">smartcrop.js</a>로 그것이 가능해졌다. 서버에서 그 기능을 구현하고 싶다면, 여기에 그것을 위한 <a href="https://www.npmjs.com/package/smartcrop-node" target="_blank" rel="external">node.js로 구현하는 방법</a>이 있다.</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><ul>
<li>Stefan Viehböck는 수천개의 기계를 분석했고 그들의 펌웨어를 위한 HTTPS에서 <a href="http://www.scmagazine.com/nine-percent-of-https-hosts-on-the-web-share-the-same-private-keys/article/456385/" target="_blank" rel="external">대부분의 기기들이 동일한 private key를 공유한다</a>는 것을 알아냈다. 그것은 물론 HTTPS의 보안을 훼손하며 모든 데이터 연결은 안전하지 않다.</li>
<li>Snyk는 당신의 node.js 어플리케이션의 취약점을 분석한다. 이제 그들은 <a href="https://github.com/Snyk/vulndb" target="_blank" rel="external">그들의 취약점 데이터베이스를 오픈소스화했다</a>.</li>
<li>이 데모는 <a href="http://feross.org/html5-fullscreen-api-attack/" target="_blank" rel="external">왜 브라우저가 전체화면으로 변환할 때에 이 성가신 메세지를 보여주는지</a>를 설명한다. 메세지는 사람들이 피싱 공격을 알아채도록 한다.</li>
</ul>
<h3 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h3><ul>
<li>“돈과 사업의 제한이 없는 세계는, 아이러니하게도, 인간을 위한 좀 더 확실한 제한이 있는 세계이다. 예를 들어 정부는, 다국적 기업이 세금을 지불하도록 하거나, 거대하고 잘 돌아가는 계산 기계들로 그들의 적을 잡는 시스템을 개발하는 것 같은  효과적인 제스춰를 만들어 왔다. <a href="https://boingboing.net/2015/12/01/ironically-modern-surveillanc.html" target="_blank" rel="external">그런 시스템은 개인의 이해나 동의없이는 사실상 불가능하다</a>.”</li>
</ul>
<h3 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h3><ul>
<li>Rebecca Murphey는 <a href="http://rmurphey.com/blog/2015/11/25/building-for-http2" target="_blank" rel="external">HTTP/2 의 새로운 컨셉</a>과 그것이 자바스크립트를 위한 도구와 빌드 체인에 어떤 영향을 미칠지에 대해서 공유하였다. 이 글엔 몇가지 좋은 생각이 있는데, 대규모 프론트엔드 어플리케이션의 전송을 최적화하기 위해 염두에 둘 필요가 있다.</li>
</ul>
<h3 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h3><ul>
<li>최근 Facebook은 접근성에 관하여 push한 것으로 보인다. React Native의 최근 개발을 보면, 그들은 최근 <a href="http://accessibility.parseapp.com/" target="_blank" rel="external">단숨에 당신을 접근성 바보에서 영웅으로 만드는</a> 유용한 가이드를 발행했다.</li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li><a href="http://robotlolita.me/2015/11/15/how-do-promises-work.html" target="_blank" rel="external">Promises가 어떻게 작동하는지</a>에 대해서 알고 싶어한 적 있는가? 이 가이드는 아마도 모든 당신의 궁금증에 대한 결정적인 답일 것이다.</li>
</ul>
<h3 id="CSS-Sass"><a href="#CSS-Sass" class="headerlink" title="CSS / Sass"></a>CSS / Sass</h3><ul>
<li>Heydon Pickering은 어떻게 하면 마지막 행을 보기 싫지 않게 <a href="https://medium.com/@Heydon/flexbox-grid-finesse-4d22b80bfee1#.urvo8w81x" target="_blank" rel="external">깔끔한 flexbox grid를 구현할지</a>를 보여준다.</li>
<li>스타일 가이드들은 회사의 디자인과 컴퍼넌트를 관리하는 좋은 방법이다. 스타일 가이드는 점진적으로 진화해서 최근에는 심지어 <a href="https://24ways.org/2015/animating-your-brand/" target="_blank" rel="external">애니메이션과 트렌지션을 스타일 가이드에서 구현한다</a>. 하지만 이를 최신으로 유지하는 것은 때때로 도전이다. 가이드의 유지보수를 쉽게 해주는 <a href="http://documentcss.com/" target="_blank" rel="external">DocumentCSS</a>같은 도구가 있다는 것은 기쁜 일이다.</li>
<li>CSS의 <code>calc()</code> 함수는 여전히 아주 새롭지만 요즘엔 많은 브라우저에서도 지원한다. 그러니 한 번 시도해보는 것이 어떨까? Ana Tudor는 몇가지 <a href="http://www.smashingmagazine.com/2015/12/getting-started-css-calc-techniques/" target="_blank" rel="external">일반적인 문제를 CSS Calculation으로 해결하는 간편한 예제</a>에 대하여 썼다.</li>
</ul>
<h3 id="Work-amp-Life"><a href="#Work-amp-Life" class="headerlink" title="Work &amp; Life"></a>Work &amp; Life</h3><ul>
<li>“리더로서, 당신의 목표는 항상 당신에게 의존하지 않는, 이상적으로는 당신을 필요로 하지 않는 구조와 프로세스를 구축하는 것이다.” Adam Pisoni는 <a href="http://firstround.com/review/the-keys-to-scaling-yourself-as-a-technology-leader/" target="_blank" rel="external">기술 리더로서 스스로를 확장하는 방법</a>이라는 이 훌륭한 기사를 통해 말했다.</li>
</ul>
<h3 id="Go-beyond…"><a href="#Go-beyond…" class="headerlink" title="Go beyond…"></a>Go beyond…</h3><ul>
<li>이것은 아마도 이번주의 가장 논쟁적인 주제일 것이다. Mark Zuckerberg는 인류의 삶을 개선하기 위해 스스로 설립한  자선 조직에 <a href="https://www.facebook.com/notes/mark-zuckerberg/a-letter-to-our-daughter/10153375081581634" target="_blank" rel="external">그의 자산의 대부분을 이동 중이다</a>. 나는 좋은 시도라고 생각한다. 물론 아마도 그의 세금을 아끼기 위한 것이고(<a href="https://www.facebook.com/zuck/posts/10102507695055801" target="_blank" rel="external">이 포스트가 설명하듯이 꼭 필요한 것은 아니다</a>), 자선을 위한 공식적인 방법을 선택해온 거이라면 더 좋은 것이고, 대개 정부에 의해서 돈이 관리되었던 것을 그가 관리할 수 있게 되는 것이다. 하지만 솔직히, 그는 여전히 돈이 그의 주머니에 있을 때에 그의 모든 영향력을 행사했다. 그리고 부자들이 인류의 문제에 대해 신경쓰는 것은 부자와 가난한 사람의 대결구도를 벗어나고 더욱 통합된 세계로 나아가는 좋은 시작이다. 불평하고 아무것도 하지 않는 대신에 그와 같은 것을 하는 것이 어떨까.</li>
<li>환경에 대해서 관심이 있는가? 이번 주, Elon Musk는 그가 연구 중인 탄소배출을 줄일 수 있는 방법에 대하여 <a href="http://fortune.com/2015/12/02/elon-musk-carbon-tax-paris/" target="_blank" rel="external">파리의 학생들과 Talk this week를 열었다</a>. 이 주제에 대한 이 색다른 의견을 읽는 것은 흥미롭다. 특히, 기업의 역할에 대해서 확실히 아는 누군가에게서 듣는 것 말이다. 읽을 가치가 있다.</li>
</ul>
<p>여기까지가 이번 주의 내용이다. 이 글이 마음에 든다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/115&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #115&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #113</title>
    <link href="http://dev.zzoman.com/2015/11/25/translate-wdrl-113/"/>
    <id>http://dev.zzoman.com/2015/11/25/translate-wdrl-113/</id>
    <published>2015-11-25T13:19:02.000Z</published>
    <updated>2015-11-25T17:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/113" target="_blank" rel="external">Web Development Reading List #113</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>지난 한 주 동안, 동적으로 스크립트를 삽입했을 때에 문서 내에서 스크립트의 로딩이 끝났는지를 어떻게 판단해야할 지에 대한 고민이 있었습니다. 금주 소개된 Steve Souders의 글이 같은 내용을 다루고 있습니다.</p>
<p>신기하게도 매주 WDRL을 통해서 지난 주에 고민했던 부분에 대한 해결책을 만나고 있습니다. 이런 일이 몇 번 생기니까 놀라움과 동시에 ‘지역을 떠나 같은 고민을 공유하는 것’으로부터 묘한 위안을 얻게 되기도 합니다.</p>
<blockquote>
<p><code>hero image</code>, <code>Custom Metric API</code>, <code>SVG를 위한 접근성</code>, <code>native DOM method</code>, <code>box-decoration-break: clone;</code></p>
</blockquote>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>안녕,</p>
<p>독일의 가을이 거의 끝나가고 겨울이 오고있어. 기상 예보에서는 우리 집 근처 Bavarian Alps에 첫눈이 내릴거라고 얘기해. Service Workers와, ‘Complex 알고리즘을 가르치기’, 그리고 ‘얼마나 더 객곽적일 수 있을까’와 같은 추상적인 주제들에 관해 읽어보자.</p>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul>
<li>Paul Lewis의 “<a href="https://aerotwist.com/blog/the-cost-of-frameworks/" target="_blank" rel="external">프레임워크의 비용</a>“은 프레임워크를 사용할 때에 드는 비용과 이점을 분석하고, 개발자로서의 경험을 계산된 자료와 함께 공유한다. 그 부분이 종종 논외로 치부되곤 하는 관점을 환기시킨다.</li>
</ul>
<h3 id="Concepts-amp-Design"><a href="#Concepts-amp-Design" class="headerlink" title="Concepts &amp; Design"></a>Concepts &amp; Design</h3><ul>
<li>Google Now 같은 상황인식에 관련한 멋진 상품들을 보면, <a href="https://netguru.co/blog/anticipatory-design-part-1" target="_blank" rel="external">이전에 없던 상품을 디자인하기</a>가 쉽지 않은 일이라는 것을 깨닫는다. 때때로 <a href="https://netguru.co/blog/anticipatory-design-2" target="_blank" rel="external">적은 선택지</a>가 많은 기능이 눈에 띄게 전시되어 있는 것보다 더 좋은 결과를 가져온다. Aaron Shapiro는 왜 <a href="http://aaronshapiro.com/blog/anticipatorydesign/" target="_blank" rel="external">적은 수의 선택이 뇌가 나은 결정을 내리도록 돕는지</a>, 그리고 왜 <a href="http://aaronshapiro.com/blog/real-innovation-solving-problems-ideas/" target="_blank" rel="external">진짜 혁신은 최고의 아이디어에서 비롯되는 것이 아니라</a> 실질적인 문제를 해결하는데에서 시작하는지에 대해 공유했다.</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li><a href="https://mapzen.com/" target="_blank" rel="external">Mapzen</a>은 ‘Open source mapping lab’으로, 지도에 기반한 소프트웨어를 만들기 위한 훌륭한 옵션들을 제공한다. 예를 들어 클라이언트 측의 라우팅 서비스, 또는 실시간 3D 렌더링 엔진들이 있다.</li>
<li>Sara Soueidan은 <a href="http://sarasoueidan.com/blog/svg-tips-for-designers/" target="_blank" rel="external">SVG로 그래픽을 출력하고 구축하는 방법</a>에 대한 훌륭한 예제를 공유했다. SVG를 더욱 깨끗하게, 혹은 더욱 잘 만들 수 있는 간단한 팁을 알려준다.</li>
</ul>
<h3 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h3><ul>
<li>TLS protocol은 <a href="https://timtaubert.de/blog/2015/11/more-privacy-less-latency-improved-handshakes-in-tls-13/" target="_blank" rel="external">TLS 1.3을 통해 대폭 향상되었다</a>. Privacy를 강화하고, Handshakes의 개선을 통해 대기시간(latency)을 줄였다. 이를 통해 기본적으로 비밀보장을 지향하게 될 것이며, 나는 이 변화가 웹에 어서 빨리 적용되길 바란다.</li>
<li>알고리즘을 우리 삶에 반영하는 일이 잦아지면서, <a href="https://cihr.eu/eoa2015web/" target="_blank" rel="external">윤리의 문제를 제기할 필요성이 대두되고 있다</a>. 인간의 뇌는 비이성적이고 감정적인 결정을 할 수 있다. 그리고 때때로 이는 필요하거나, 좋은 것일 수 있다. 그러나 알고리즘과 컴퓨터는 그럴 수 없다. 이는 인공지능의 가장 큰 과제이며, 페이스북 뉴스피드 콜렉션이나 채용 알고리즘같은 알고리즘이 이미 존재하는 현실을 직시할 필요가 있다. 알고리즘을 투명하게 공개하고, 사용자들이 해당 알고리즘을 향상시킬 수 있는 가능성을 제공함으로 알고리즘의 객관성을 획득하는 것이 좋을 해결책일 수 있다.</li>
</ul>
<h3 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h3><ul>
<li>우리 모두는 성능 문제를 알고 있지만 Steve Souders의 새로운 기사는 User Timing과 Custom Metrics API를 통한 <a href="https://speedcurve.com/blog/user-timing-and-custom-metrics/" target="_blank" rel="external">실질적인 프론트-엔드 성능을 다루는 방법</a>에 대한 실용적인 통찰을 공유한다. Stylesheet와 script, 글꼴, 그리고 Hero image의 로딩이 끝났을 때 블록화하는 방법을 배워보자.</li>
</ul>
<h3 id="HTML-SVG"><a href="#HTML-SVG" class="headerlink" title="HTML / SVG"></a>HTML / SVG</h3><ul>
<li>Craig Hockenberry는 Safari9의 새로운 기능인 고정탭을 시험해보았다. Firefox와 Chrome 사용자에게는 새로운 것이 아니지만, Safari의 고정탭은 약간 다르다. 반면 기사는 전반적으로 <a href="http://blog.iconfactory.com/2015/11/the-new-favicon/" target="_blank" rel="external">고정탭에서 최상의 아이콘을 보여주는 방법</a>을 다룬다. Safari의 좋은 기능 덕분에, SVG 파일을 참조해서 마스크를 만들어서 아이콘에 동적으로 스타일을 입힐 수 있다. 예를들어 사용자가 어떤 페이지에 있는지를 알려주거나, 동적인 변화를 알려주고 싶을 때에 손쉽게 사용할 수 있다. 확실히, 모든 브라우저에 이 기능이 추가되었으면 한다.</li>
</ul>
<h3 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h3><ul>
<li>Jennison Asuncion은 <a href="https://www.linkedin.com/pulse/why-implementing-swipe-gestures-causes-mobile-issue-jennison-asuncion" target="_blank" rel="external">왜 어플리케이션이 전적으로 스와이프 제스춰에 의존해서는 안되는지</a>, 그리고 왜 스와이프를 대체하는 것이 중요한지를 설명한다. VoiceOver와 같은 보조 기술들이 사용자 제스춰를 대체하게 될 것이다.</li>
<li>Léonie Watson은 <a href="http://www.sitepoint.com/tips-accessible-svg/" target="_blank" rel="external">SVG를 위한 접근성을 향상시키는 손쉬운 트릭들</a>을 공유한다.</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul>
<li>The AngularConnect 2015 행사가 이번 달에 진행되었고, 프레임워크에 대한 몇 가지 <a href="http://angularjs.blogspot.hr/2015/11/highlights-from-angularconnect-2015.html" target="_blank" rel="external">주목할 만한 발표</a>가 있었다: ngUpgrade로 Angular 1에서 2로 원활하게 업그레이드가 가능하며, Angular 2는 시동 시간의 개선으로 훨씬 더 빨라졌으며, Server 측 사전 렌더링과 다른 멋진 기능들이 추가되었다.</li>
<li>Native DOM으로 작업하는 것은 여전히 많은 사람들에겐 고통과 같다. 하지만 요즘엔, DOM을 위한 native JavaScript API들이 작은 요소들을 선택하기 위한 많은 작은 함수들을 제공하고 있다. Louis Lazaris는 <a href="http://www.sitepoint.com/dom-tips-techniques-parent-child-siblings/" target="_blank" rel="external">native DOM method를 통해 자식과 형제 노드를 선택</a>하는 실용적인 팁들을 공유한다.</li>
<li><a href="http://keycode.info/" target="_blank" rel="external">Keycode.info</a>는 누른 키의 JavaScript 키코드를 반환해주는 작고 손쉬운 도구이다.</li>
<li>Ian Feather는 <a href="http://ianfeather.co.uk/what-even-is-vanilla-js-these-days/" target="_blank" rel="external">오늘 날 Vanilla JS가 의미하는 바</a>에 대해 “vanilla todoMVC 이행”같은 여전히 작은 라이브러리들과 DOM handler를 위한 추상화를 사용하는 예제들을 빌어 설명한다. </li>
<li>David Walsh는 Mozilla의 새로운 “<a href="https://serviceworke.rs/" target="_blank" rel="external">Service Worker Cookbook</a>“을 소개한다. 책에는 훌륭한 리소스와 유용한 Service Worker 예제들이 포함되어 있다. 그의 블로그 포스트에서 그는 당신의 시작을 도울 <a href="https://hacks.mozilla.org/2015/11/offline-service-workers/" target="_blank" rel="external">가장 보편적인 코드 예제들 또한 공유한다</a>.</li>
</ul>
<h3 id="CSS-Sass"><a href="#CSS-Sass" class="headerlink" title="CSS / Sass"></a>CSS / Sass</h3><ul>
<li>텍스트를 행별로 강조하는 것은 언제나 고통이었다. hack을 통해 몇가지 방법으로 구현할 수 있었지만, 요즘엔 훨씬 쉬운 해결방법이 있다. <a href="http://codepen.io/anon/pen/qOvqWy" target="_blank" rel="external"><code>box-decoration-break: clone;</code>을 사용하면 텍스트를 행 단위로 꾸밀 수 있다</a>. (<code>box-decoration-break: clone;</code>을 이용한 <a href="http://codepen.io/df/pen/KdENZv?editors=110" target="_blank" rel="external">zick-zack stripes</a> 또한 확인해 보자.)</li>
</ul>
<h3 id="Go-beyond…"><a href="#Go-beyond…" class="headerlink" title="Go beyond…"></a>Go beyond…</h3><ul>
<li>오늘날 우리는 GPS 장비들의 보급과 스마트폰, Geo 추적장치, 관계형 지도와 가이드 덕에 더 이상 길을 잃어버릴 수가 없다. 이것이 많은 사람들에게 큰 즐거움이었지만, <a href="http://www.bbc.com/news/magazine-34473588" target="_blank" rel="external">Stephan Smith는 만약에 우리가 실종된다면</a> 어떻게 될지를 궁금해 한다. 이 글을 읽었을 때, 나는 즉시 며칠 전에 Vitaly Firedman이 공유한 <a href="http://www.smashingmagazine.com/smashing-newsletter-issue-147/" target="_blank" rel="external">비슷한 경험</a>이 기억났다. 지능적인 기술 덕에 예측가능해져버린 요즈음의 삶으로부터 삶의 불확실성을 다시 얻으려고 하는 인류의 노력이 흥미롭다.</li>
<li>때때로 나는 돈에 관하여 항상 생각하지는 말아야겠다고 되새긴다. 세상에서 가장 행복한 사람들은 <a href="http://elitedaily.stfi.re/news/world/people-spend-money-experiences-instead-things-much-happier/983208/?sf=vnldao" target="_blank" rel="external">쇼핑중독과 불필요한 소비로부터 거리를 유지하는 방법</a>을 찾았던 것 같다. 삶은 다이아몬드가 아니라 추억으로 이루어져있기 때문이다.</li>
<li>Mike Ellis가 Waterstone’s Online을 그만두었을 때, 그의 상사는 그에게 괜찮다고, “이직은 상직적으로 업무를 정리하는 것이고, 너의 직장생활을 통틀어 가장 중요한 부분이다.”라고 얘기했다. 여전히 오늘날, 이 문장은 Mike의 마음 속에 남아있고, <a href="https://the-pastry-box-project.net/mike-ellis/2015-november-18" target="_blank" rel="external">그는 정기적으로 이 말을 되새긴다</a>. 무자비하게, 자책감 없이, 뒤돌아 보지 않고, ‘어쩌면’같은 생각 없이 그냥 물건을 버리는 것은 때때로 누군가의 마음과 인생을 정리하는 최고의 방법이 되기도 한다.</li>
<li>더 욕망하고, 더 사고, 충동적으로 행동하며, 비축하고, 문제를 해결하기 위해 소비하고, 쇼핑을 통해 안정감을 찾고, 여행을 통해 스릴을 찾고, 무언가를 더하고, 더욱 더 무언가가 되기를 부추기는 것은 오늘날 소비주의 세계의 한 모습이었다. 만약 우리가 우리의 쇼핑 중독과 과다한 욕망을 부숴버린다면 어떻게 될까? <a href="http://zenhabits.net/wantnot/" target="_blank" rel="external">나는 지금 우리가 스스로 모든 욕구로부터 해방될 수 있다고 말하는 것은 아니다. 그러나 우리는 조금이라도 더 노력해야만 한다</a>.</li>
</ul>
<p>여기까지가 이번 주의 내용이다. 이 글이 마음에 든다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/113&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #113&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #112</title>
    <link href="http://dev.zzoman.com/2015/11/15/translate-wdrl-112/"/>
    <id>http://dev.zzoman.com/2015/11/15/translate-wdrl-112/</id>
    <published>2015-11-15T12:44:54.000Z</published>
    <updated>2015-11-15T12:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/112" target="_blank" rel="external">Web Development Reading List #112</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<p>WDRL을 번역하면서, 해외에서 비판적인 사고와 논리적인 비평, 그리고 더 나은 미래에 대한 제안이 얼마나 존중받는지에 대해 간접적으로 느낍니다. 부러운 문화, 또 우리가 배워야하는 문화가 아닌가 생각합니다.</p>
<p>금주에는 아래 키워드들을 뽑아봤습니다.</p>
<blockquote>
<p><code>CSS initial, unset</code>, <code>&lt;picture&gt;</code>, <code>페이지에서 패턴까지</code>, <code>PostCSS</code>, <code>Safe Hobour</code>, <code>배열에서 값을 제거하는 방법</code></p>
</blockquote>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>안녕,</p>
<p>지난 주에는 하루종일 일하는 것을 피하는 방법에 대해서 얘기했었어. <a href="http://www.smashingmagazine.com/2015/11/web-development-reading-list-111/#comment-1285325" target="_blank" rel="external">Erik</a>은 실질적인 방법을 추가했어. 피고용인으로서, 항상 장비들의 전원을 끄는 것과 매니저의 요청에 대응하지 않는 것은 쉽지 않을 거야. 그리고 대부분의 회사들이 여전히 “우리가 당신에게 급여를 지불하므로, 당신을 소유하게 되는 것이 당연하다.”라는 생각을 하고 있어. 하지만 그건 진실과 거리가 멀고, <a href="https://medium.com/the-wtf-economy/common-ground-for-independent-workers-83f3fbcf548f" target="_blank" rel="external">우리 모두는 매니저를 포함한 사람이 피고용인을 존중하도록 교육할 필요가 있어</a>. 즐거움이 없는 일은 효율적이지 못해. 우리는 일을 즐기기 위해, 또 좋은 결과물을 위해 때때로 쉬어가는 시간을 가질 필요가 있어.</p>
<h3 id="News"><a href="#News" class="headerlink" title="News"></a>News</h3><ul>
<li><a href="https://dev.windows.com/en-us/microsoft-edge/platform/changelog/desktop/10586/?compareWith=10240" target="_blank" rel="external">새로운 Microsoft Edge 가 공개되었다</a>. 이제 <code>&lt;picture&gt;</code> 요소, <code>CSS initial</code>과 <code>unset</code> 속성값, 확장된 <code>srcset</code>, <code>download</code> 속성, 외부 SVG 요소(드디어 외부 자원을 사용하기 위해 <code>use</code>를 사용할 수 있게 되었다!), 그리고 WebRTC를 지원한다.</li>
</ul>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul>
<li>혹시 다른 회사에서 사용된 코드를 열어보았다면, 아마도 알고 있을 것이다: <a href="http://www.coglib.com/~icordasc/blog/2015/11/corporations-and-oss-do-not-mix.html" target="_blank" rel="external">기업과 오픈 소스 소프트웨어는 잘 섞이지 않는다</a>. 당신이 무료로 일함에도 불구하고, 대부분의 기업은 임금은 지불하지 않으면서 버그는 즉시 처리되길 원한다. 우리가 없애야만 하는 딜레마이다. 기업은 오픈 소스 제작자들이 프로젝트를 유지할 수 있도록 금전적인 후원을 해야한다.</li>
<li>Gerry Mcgovern은 <a href="http://www.gerrymcgovern.com/new-thinking/less-content-marketing-more-quality-content" target="_blank" rel="external">웹사이트의 불필요한 컨텐츠를 “declutter”하는 것이 얼마나 중요한지</a>, 그리고 정부웹사이트같은 큰 규모의 웹사이트들이 “declutter”를 통해서 얼마나 큰 이익을 얻는지를 설명한다.</li>
</ul>
<h3 id="Conepts-amp-Design"><a href="#Conepts-amp-Design" class="headerlink" title="Conepts &amp; Design"></a>Conepts &amp; Design</h3><ul>
<li>Charlotte Jackson은 <a href="http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone" target="_blank" rel="external">페이지에서 패턴까지: 모두를 위한 연습</a>을 통해 디자인과 웹사이트 제작에서 전체 페이지보다 하나의 작은 컴퍼넌트단위로 생각하는 것이 훨씬 좋은 이유에 대해서 설명한다.</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li><a href="https://github.com/AlDanial/cloc" target="_blank" rel="external">cloc</a>은 여러 언어로 공백 라인, 주석 라인, 그리고 물리적인 라인을 세어주는 도구이다. 프로젝트를 위한 통계를 작성하는데에 매우 유용하다.</li>
<li>누군가가 생각보다 빨리 새로운 Apple TV에 브라우저를 추가했다. 이 브라우저는 tvOS를 위해 private API(UIWebView로 알려진)로 제작된 아주 단순한 브라우저로, 사용자가 직접 build하여야 한다. 이를 구현하기 위해 몇가지 꼼수를 사용하여야 하는데, <a href="https://www.youtube.com/watch?v=xIDTh9bVRas" target="_blank" rel="external">놀랍게도 아주 잘 작동한다</a>.</li>
<li><a href="http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889" target="_blank" rel="external">The PostCSS Deep Dive</a>: 이 연작은 PostCSS로 할 수 있는 많은 것들을 소개한다.</li>
<li>‘<a href="https://hacks.mozilla.org/2015/11/firefoxs-new-memory-tool/" target="_blank" rel="external">새로운 Firefox Developer Memory Tool 을 사용하기</a>‘를 통해 웹사이트의 메모리 사용을 분석해보자. 이 도구는 JavaScript를 coarse type으로 분할하여 제작자에게 깊은 통찰을 제공한다.</li>
</ul>
<h3 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h3><ul>
<li>Julia Powels는 큰 기술 행사에 참석중 <a href="http://www.theguardian.com/technology/2015/nov/09/web-summit-vision-smart-world" target="_blank" rel="external">흥미로운 점을 발견했다</a>. 회사들은 개인별 맞춤 상품과 서비스를 위해 더욱더 많은 개인정보를 얻기를 원한다는 것이다. 도시, 집 그리고 우리의 몸이 연결되면서 더 똑똑해지고 빨라진다 것은 의심의 여지가 없고, 보편적으로 받아들여지고 있다. 그러나 그 누구도  그 이유와 방법, 그리고 그것이 우리의 삶에 실질적으로 의미하는 바에 대해서 이야기해 주지 않는다.</li>
<li><a href="http://www.afp.com/en/news/belgian-court-gives-facebook-48-hours-stop-tracking-internet-users" target="_blank" rel="external">Facebook은 48시간동안 벨기에의 인터넷 사용자 정보 수집을 법원에 의해 금지당했다</a>. 이를 통해 판사들은 그들의 결정이 얼마나 심각한 것인지를 보여주려 했다. Safe Harbour 법이 폐지된 이후 이런 해프닝을 보게되는 것이 흥미롭다.</li>
<li>나는 최근 그 어떤 법도 Safe Habour 법의 폐지에 비해 기술산업을 이렇게까지 문제에 휘말리게 한적이 없다고 단언한다. 그 결과로, 가이드라인을 따르기 위해 <a href="http://thehill.com/policy/cybersecurity/259656-microsoft-opens-uk-only-data-center-following-eu-ruling" target="_blank" rel="external">Microsoft는 유럽에 데이터센터를 설립할 예정</a>이다.</li>
</ul>
<h3 id="Web-Perfomance"><a href="#Web-Perfomance" class="headerlink" title="Web Perfomance"></a>Web Perfomance</h3><ul>
<li>Paul Lewis가 <a href="https://aerotwist.com/blog/bigrig/" target="_blank" rel="external">Big Rig</a>을 만들었다. Big Rig은 성능 계산 도구로, CLI 환경에서나 브라우저 대쉬보드로 모두 사용 가능하다.<br><img src="https://wdrl-1d6d.kxcdn.com/content/1-archive/0-112/11-098c4685f685629766df82a924dcf4fd7b45e4c4/b83e9868-8159-11e5-9f0e-285549e89c76.png" alt="Big Rig Dashboard"></li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li>이 무료 온라인 책으로 <a href="http://regex.learncodethehardway.org/book/" target="_blank" rel="external">정규식을 배울 수 있다</a>. 이 훌륭한 책은 다양하고 유용한 통찰을 제공하며, 초심자 혹은 전문가에게 도움이 될 수 있다.</li>
<li>Jeremy Keith는 <a href="https://adactio.com/journal/9775" target="_blank" rel="external">Service Worker를 사용한 그의 첫 프로젝트</a>에 대한 경험과 코드를 공유했다. 이 글에는 유용한 팁과 힌트가 아주 많다. 시각적인 설명과 함께 알아보고 싶다면, ‘<a href="https://www.youtube.com/watch?v=TGwjgmAqNRo" target="_blank" rel="external">Service Worker에 대한 Max Stoiber의 이야기</a>‘를 보자.</li>
<li>JavaScript에서 배열에 값을 추가하는 것은 어렵지 않다. 그러나 많은 사람들이 <a href="http://bytearcher.com/articles/how-to-delete-value-from-array/" target="_blank" rel="external">배열에서 값을 제거하는 방법</a>에 대해서는 잘 모른다. 이 글은 배열에서 값을 제거하기 위한 적합한 방법을 소개한다.</li>
<li>이 문서를 통해 <a href="https://stormpath.com/blog/angular-xsrf/" target="_blank" rel="external">Angular 어플리케이션에서 XSRF 공격을 피하는 방법</a>을 배워보자.</li>
</ul>
<h3 id="CSS-Sass"><a href="#CSS-Sass" class="headerlink" title="CSS / Sass"></a>CSS / Sass</h3><ul>
<li>Ana Tudor는 CSS Gradient를 사용하고자 할 때에 왜 <a href="http://codepen.io/thebabydino/full/pjxVWp/" target="_blank" rel="external">Graident 생성기를 사용하는 것은 좋은 생각이 아닌지</a>에 대해서 CodePen 예제와 함께 공유했다.</li>
</ul>
<h3 id="Work-amp-Life"><a href="#Work-amp-Life" class="headerlink" title="Work &amp; Life"></a>Work &amp; Life</h3><ul>
<li>당신은 이런 멋지고 어린 개발자인가? 이 곳을 보자: James Victors는 <a href="https://www.youtube.com/watch?v=bAu5taT4Hhs" target="_blank" rel="external">유명해지는 비법</a>을 그의 유명한 Burning Questions 비디오를 통해 공유했다.</li>
</ul>
<h3 id="Go-Beyond"><a href="#Go-Beyond" class="headerlink" title="Go Beyond"></a>Go Beyond</h3><ul>
<li><a href="http://www.independent.co.uk/news/uk/crickhowell-welsh-town-moves-offshore-to-avoid-tax-on-local-business-a6728971.html" target="_blank" rel="external">Crickhowell의 지역 기업들은 그들의 마을 전체가 지역의 재정으로 부터 벗어나기 위해, 구글과 스타벅스와 같은 세계에서 가장 큰 기업에서 사용하는 것과 동일한 회계 관행으로 그들의 table을 전환한다</a>. 처음엔 좀 이상하게 들릴 수 있으나, 실질적으로 지금의 고장난 세금 모델과 가능한한 세금을 피하려하는 비윤리적 기업에 관한 일말의 희망이다. 나는 국가가 법을 변경할 수 밖에 없도록 많은 중소기업들이 이 예를 따르길 희망한다.</li>
<li>우리 모두는 불평하기를 좋아한다. 하지만 여러 면에서 불평은 우리에게 좋지 않다. <a href="http://further.net/complaining/" target="_blank" rel="external">차이를 만들 수 있는 유일한 사람은 당신 자신이다</a>.</li>
</ul>
<p>여기까지가 이번 주의 내용이다. 이 글이 마음에 든다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/112&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #112&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #111</title>
    <link href="http://dev.zzoman.com/2015/11/09/translate-wdrl-111/"/>
    <id>http://dev.zzoman.com/2015/11/09/translate-wdrl-111/</id>
    <published>2015-11-09T14:16:57.000Z</published>
    <updated>2015-11-09T14:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/111" target="_blank" rel="external">Web Development Reading List #111</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<h2 id="역자-코멘트"><a href="#역자-코멘트" class="headerlink" title="역자 코멘트"></a>역자 코멘트</h2><p>유용하고 재밌는 도구 / 프로젝트에 대한 소개가 매번 하나 이상씩은 있는데, 번역을 하고 나면 막상 그런 내용을 살펴보지는 않게 된다. 나중에라도 쉽게 살펴볼 수 있도록  개인적으로 관심이 가는 <strong>키워드</strong>를 매 번역마다 남겨볼까 한다. 요약을 또 요약하다니… 혁신적인 생각이다!</p>
<p>오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<blockquote>
<p><strong>관심사 키워드</strong><br><code>The Awesome collections</code>, <code>CSS intrinsic sizing</code>, <code>Segment</code>, <code>DOM Event Listener</code></p>
</blockquote>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>안녕, </p>
<p>매주 리뷰를 하다보면 많은 사람들의 훌륭한 글들을 만나게 돼. 프론트엔드 이슈를 해결하도록 돕는 유용한 기술에 대한 글, 다시 일을 즐길 수 있는 동기를 주는 글, 그리고 수익을 올리는 것에 급급하지 않고 그들에게 의미있는 것들을 해내는 스타트업들이 있다는 것을 알 수 있게 해주는 글이 있었어. 또 고용인들의 노동시간을 보장하고, 일 중독자들이 노동을 그만두도록 강제하고, 조직원의 건강을 지속적으로 관리하는 Heath Monitor를 구축하는 것에 대한 생각들도 있었어 . 난 그런 생각을 하는 사람들이 더 많은 세상을 꿈꿔.</p>
<h3 id="News"><a href="#News" class="headerlink" title="News"></a>News</h3><ul>
<li>Node.js 4가 출시된지 단 몇 주밖에 지나지 않았는데, <a href="https://nodejs.org/en/blog/release/v5.0.0/" target="_blank" rel="external">Node.js v5가 출시되었다</a>. 하지만 걱정할 필요는 없다. 버전 4에 대한 업데이트와 지원이 꽤 긴 시간동안 여전히 지원될 예정이다. <a href="https://nodejs.org/en/blog/community/node-v5/" target="_blank" rel="external">새로운 버전 공개와 주목할만한 부분</a>에 대해 확인해 보자.</li>
<li>최신 버전의 Chrome과 <a href="https://dev.opera.com/blog/opera-33/" target="_blank" rel="external">Opera 33</a>이 이제 <code>&lt;link rel=preconnet&gt;</code>을 지원한다. 뿐만 아니라 확장된 샌드박스형 아이프레임 옵션과 <code>history.scrollRestoration</code>, <a href="https://drafts.csswg.org/css-sizing-3/" target="_blank" rel="external">CSS Sizing 상속 모듈</a>과 Client Hints, 그리고 HKPK 또한 지원한다.</li>
<li><a href="https://www.mozilla.org/en-US/firefox/42.0/releasenotes/" target="_blank" rel="external">Firefox v42가 공개</a>되었다. Private window에 새로운 방탄 추적 보호 기능, 확장된 보안/개인 설정, 탭에서의 오디오 음소거 기능, 개발자 도구에서의 WiFi 디버깅이 포함된다.</li>
</ul>
<h3 id="Concepts-amp-Design"><a href="#Concepts-amp-Design" class="headerlink" title="Concepts &amp; Design"></a>Concepts &amp; Design</h3><ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">The Awesome collections</a>에 새로운 주제가 추가되었다: <a href="https://github.com/neutraltone/awesome-stock-resources" target="_blank" rel="external">Awesome Stock Resources</a>는 무료로 사용가능한 사진과 영상을 축적한다. </li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>개인적으로 Git 저장소의 사용되지 않거나 버려진 브랜치들은 무척이나 성가시다. “<a href="https://stackoverflow.com/questions/2003505/delete-a-git-branch-both-locally-and-remotely/23961231" target="_blank" rel="external">로컬저장소와 원격저장소의 브랜치 대량삭제 방법</a>“은 이런 문제를 해결하는 방법들을 모았다. 일관되고 깨끗하게 유지하는 것이 중요하는 것을 다시 한번 일깨워 준다.</li>
<li>새로운 <a href="https://github.com/sindresorhus/ava" target="_blank" rel="external">AVA test runner</a>가 동시성<code>Concurrency</code>을 적용함으로 훨씬 더 빠른 테스트가 가능해 졌다. 다음 프로젝트를 위해 확인해 두도록 하자.</li>
<li>iOS 9의 발표와 함께 Apple은 새로운 WebView를 소개했다. <a href="https://itunes.apple.com/us/app/webview-wkwebview-uiwebview/id928647773?mt=8" target="_blank" rel="external">이 iOS 9 앱</a>을 사용하여 iOS에서 동작 가능한 모든 종류의 WebView를 쉽게 테스트할 수 있다.</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><ul>
<li><a href="https://snyk.io/" target="_blank" rel="external">Synk</a>는 Node.js 종속의 알려진 취약점을 찾고 수정한다. <a href="https://github.com/nodesecurity/nsp" target="_blank" rel="external">nsp</a>는 당신의 Node.js 어플리케이션의 취약점을 찾도록 돕는다.</li>
</ul>
<h3 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h3><ul>
<li>Dean Hume는 <a href="http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/" target="_blank" rel="external">Service Workers를 사용하여 WebP 또는 JPEGXR 포맷으로 Dynamic한 반응형 이미지를 만드는 방법</a>을 설명한다.</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul>
<li><a href="https://www.webreflection.co.uk/blog/2015/10/22/how-to-add-dom-events-listeners" target="_blank" rel="external">Dom Event Listener를 만들거나 제거하는 적절한 방법</a>을 배워보자.</li>
<li><a href="https://lmgonzalves.github.io/segment/" target="_blank" rel="external">Segment</a>를 활용하여 SVG로 그려진 선을 쉽게 애니메이션으로 구현할 수 있다. Segment는 아주 작은 규모의 라이브러리로 필요한 기능에 따라 GSAP같은 큰 규모의 라이브러리를 사용하는 대신에 사용할 수 있다.</li>
<li>jQuery를 제거해야 할까, 혹은 앞으로 공개될 jQuery3를 사용해야할까? 한 동안 이 문제때문에 바쁠 것이다. 하지만 <a href="http://developer.telerik.com/featured/jquerys-relevancy-there-and-back-again/" target="_blank" rel="external">jQuery는 여전히 의미가 있으며, 우리는 jQuery가 무엇을 위한 것인지에 대해 이해할 필요가 있다</a>. jQuery는 단순한 DOM Wrapper가 아니다.</li>
<li><a href="http://blog.jquery.com/2015/11/05/pep-0-4-0/" target="_blank" rel="external">Pointer Event Polyfill 0.4.0 버전</a>이 공개되었다. PEP 0.4.0에서는 webpack과 browserify에 대한 지원이 향상되었으며 그 외에도 자잘한 수정들이 있었다.</li>
</ul>
<h3 id="Works-amp-Life"><a href="#Works-amp-Life" class="headerlink" title="Works &amp; Life"></a>Works &amp; Life</h3><ul>
<li>“<a href="https://madebysidecar.com/journal/standards-work-to-live" target="_blank" rel="external">일 중독자들은 영웅이 아니다.</a> 그들은 하루를 그냥 소모해버릴 뿐 절약하지 못한다. 진짜 영웅은 더 빠른 방법으로 일을 끝내고 집에 일찍 귀가하는 사람들이다.” 일에 더 집중하고 더 많은 여가를 얻는 방법 중.</li>
<li>Kickstarter의 Yancey Strickler는 기업들의 최근의 추세 - 공익법인으로의 전환 - 에 대해 말한다. 그는 위험한 자본과 이윤 극대화에 대한 유혹, 이상주의, 그리고 <a href="http://www.theguardian.com/technology/2015/nov/03/kickstarter-chooses-public-good-over-private-riches" target="_blank" rel="external">상품의 가치를 넘어선 판매를 하지 않는 것이 기업과 사람들에게 중요한 이유</a>에 대해서 이야기한다.</li>
<li>Atlassian은 <a href="https://www.atlassian.com/inside-atlassian/project-team-health-monitor" target="_blank" rel="external">프로젝트 구성원의 지속적인 건강 관리에 대한 생각을 공유하였다.</a></li>
</ul>
<h3 id="Go-Beyond…"><a href="#Go-Beyond…" class="headerlink" title="Go Beyond…"></a>Go Beyond…</h3><ul>
<li>Jessica Collider는 <a href="https://medium.com/@verbagetruck/discomfort-zone-talking-diversity-at-epicurrence-ba77fda4a784" target="_blank" rel="external">Make Me Uncomfortable : Epicurrence의 The Discomfort Zone</a> 포스트를 통해 새롭고 흥미로운 경험에 대하여 말한다.</li>
<li>요즘의 스타트업들은 실질적으로 더 나은 것을 만드는 것에 집중하지 않는다. Basecamp의 창시자 중 한 명은 우리가 모든 것을 소유하는 것에 초점을 맞춰야 하는지, <a href="https://signalvnoise.com/posts/3972-reconsider" target="_blank" rel="external">혹은 실질적으로 해결해야 하는 한 가지에 집중하는 것이 나은지</a>에 대해서 생각했다.</li>
</ul>
<p>여기까지가 이번 주의 내용이다. 이 글이 마음에 든다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/111&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #111&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #110</title>
    <link href="http://dev.zzoman.com/2015/11/01/translate-wdrl-110/"/>
    <id>http://dev.zzoman.com/2015/11/01/translate-wdrl-110/</id>
    <published>2015-11-01T11:54:00.000Z</published>
    <updated>2015-11-09T13:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/110" target="_blank" rel="external">Web Development Reading List #110</a><br>저자 : <a href="http://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<h2 id="역자-코멘트"><a href="#역자-코멘트" class="headerlink" title="역자 코멘트"></a>역자 코멘트</h2><p>Anselm Hannemann이 비단 웹개발 뿐만 아니라 우리의 환경과 경제시스템에 대해 많은 관심을 기울이고 있다는 것이 아주 흥미롭습니다. 이번 WDRL의 말미에는 자본주의의 미래에 대한 언급이 있습니다. 번역하는 이 글이 비단 새로운 뉴스를 전하는데 급급하지 않아서 아주 기쁩니다.</p>
<p>개발자는 오류해결을 위한 논리적인 사고를 하는 사람들입니다. 진보적일 순 없더라도, 사회적 시스템의 오류에 관심이 가는건 당연한 귀결일 것이라 생각합니다.</p>
<p>덧붙여, 번역을 한 뒤 몇 번을 읽어도 여전히 어색한 문장이 많습니다. 지속적으로 고쳐나가고 있습니다만, 가능한 도움을 주시면 고맙겠습니다. 오역 제보는 <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<p>감사합니다.</p>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>안녕,</p>
<p>몇주 전, 친구 <a href="https://tobiastom.name/" target="_blank" rel="external">Tobias</a>가 흥미로운 이야기를 했어. 팀 단위의 큰 프로젝트를 진행하고 있다면, 매주 금요일 퇴근 전에 모든 프로젝트를 삭제하고 다음주 월요일 아침에 다시 설치하도록 지시해봐. 그러면 구성원의 프로세스와 모든 프로젝트의 셋업이 생각보다 간단하다는 것을 확인하게 될 거야. 서버가 고장나면, 단 몇분안에 모든 걸 새로 설치할 수도 있을거야. 자 이제 List와 함께 주말을 잘 보내길!</p>
<h3 id="News"><a href="#News" class="headerlink" title="News"></a>News</h3><ul>
<li><a href="https://www.fxsitecompat.com/en-US/docs/2015/element-mozmatchesselector-will-be-removed/" target="_blank" rel="external">Firefox에서는 새로운 표준인 Element.matches 메쏘드를 곧 적용하며</a>, 기존의 Element.mozMatchesSelector를 삭제할 것이라고 한다. 준비하길.</li>
<li><a href="http://jekyllrb.com/news/2015/10/26/jekyll-3-0-released/" target="_blank" rel="external">Jekyll 3</a>가 출시되었다. 새로운 incremental builds 를 위한 큰 폭의 성능향상이 있었다. 이미 Jekyll을 사용하고 있다면, 새로운 버전을 경험해보길 바란다. - 업데이트는 거의 원활하게 적용된다. 그냥 몇가지 설정이 변경되었다.</li>
<li>이번 주엔 Internet에 관련한 좋지않은 뉴스가 많았다. 유럽에서는 <a href="http://www.theguardian.com/technology/2015/oct/27/eu-net-neutrality-laws-fatally-undermined-by-loopholes-critics-say" target="_blank" rel="external">논쟁의 중심인 망중립성법이 특정 기업을 위한 많은 허점을 남겨둔 채로 통과되고 말았다.</a> 그리고 <a href="http://www.theguardian.com/world/2015/oct/27/cisa-cybersecurity-bill-senate-vote" target="_blank" rel="external">마찬가지로</a>, 미국에서는 <a href="https://www.eff.org/deeplinks/2015/10/eff-disappointed-cisa-passes-senate" target="_blank" rel="external">CISA가 통과</a>되었다.</li>
<li><a href="https://github.com/sass/libsass/releases/tag/3.3.0" target="_blank" rel="external">libsass 3.3</a>이 출시되었다. 더 많은 테스트와 성능향상, Shadow DOM support, <a href="http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#selector_functions" target="_blank" rel="external">모든 Sass3.4 selector function</a>을 지원하며 <code>url()</code>의 기능 향상을 제공한다.</li>
</ul>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul>
<li>“내가 찾은 것 중 주목할 만한 것은 인간 위주의 대규모의 포획과 착취가 불가피한지 혹은 윤리적인지에 대한 논쟁의 양측 모두의 의견이 애초에 너무 단순하다는 것이다. 이것은 우리가 디지털 시대의 관심이 어떻게 역할하는지에 대해 - 뿐만 아니라 경쟁하도록 설계된 환경에서 우리 삶의 대부분을 차지하는 소비의 의미에 대해서도 - 완전히 이해하지 못하고 있다는 것을 보여준다.” - <a href="http://blog.practicalethics.ox.ac.uk/2015/10/why-its-ok-to-block-ads/" target="_blank" rel="external">광고차단에 대한 James Williams</a>의 매우 윤리적인 생각 중.</li>
</ul>
<h3 id="Concepts-amp-Design"><a href="#Concepts-amp-Design" class="headerlink" title="Concepts &amp; Design"></a>Concepts &amp; Design</h3><ul>
<li>Medium 의 새로운 버전(2.0)이 <a href="https://medium.com/@mwichary/system-shock-6b1dc6d6596f" target="_blank" rel="external">이제 가능하다면 시스템 폰트를 사용한다.</a> 만약 Mac을 쓰고 있다면, San Francisco 폰트를 쓰게 된다는 뜻이다. Apple이 CSS에서 이 폰트의 실제 이름을 통해 사용할 수 없도록 했었기 때문에, 이 폰트의 사용을 위해선 다른 해결방법이 필요했었다. 제시하는 방법을 통해, OS와 웹사이트를 동일하게 구현할 수 있다.</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>Remy Sharp는 <a href="https://remysharp.com/2015/10/26/using-travis-with-private-npm-deps" target="_blank" rel="external">npm의 새로운 비공개 모듈을 통해서 Travis CI를 구현한 방법에 대해 이야기한다.</a> 물론, 당신도 비슷한 방법을 통해서 지속적인 통합(CI : continuous integration service)을 구현할 수 있다.</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><ul>
<li>MITM attack은 웹사이트의 문제만은 아니다. <a href="http://conferences2.sigcomm.org/imc/2015/papers/p27.pdf" target="_blank" rel="external">MITM attcack을 통한 이메일 가로채기</a>는 아주 보편적인 일이다. IETF는 메일서버 연결에 <a href="https://datatracker.ietf.org/doc/rfc7672/" target="_blank" rel="external">DANE와 TLS</a>를 적용하여 이런 문제를 해결하기위한 무언가를 시도하고 있다.</li>
</ul>
<h3 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h3><ul>
<li><a href="https://github.com/google/brotli" target="_blank" rel="external">Brotli</a> 압축은 웹성능 쪽에서 큰 관심을 받고 있다. 하지만 실질적으로 논리적으로 이를 증명할 수 있어야 한다. <a href="https://blog.cloudflare.com/results-experimenting-brotli/" target="_blank" rel="external">Cloudflare는 실제 조건 하에 실험</a>을 했고, 크고 정적인 파일에서는 큰 이점이 있음을 확인했지만, 작고 역동적인 content block에는 이상적이지 않다는 것을 확인했다. 상황에 맞게 현명하게 사용할 것이 아니라면, 그냥 Gzip을 고수하도록 하자.</li>
<li>Facebook은 <a href="http://uk.businessinsider.com/facebook-2g-tuesdays-to-slow-employee-internet-speeds-down-2015-10" target="_blank" rel="external">직원들을 위한 2G/EDGE Tuesdays</a>를 시작했다. 직원들은 이를 통해 사용자들의 문제에 더욱 가까이갈 수 있게 되었다. 이건 훌륭한 아이디어이며, 우리 모두 규칙적으로 이를 시행할 필요가 있다.</li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li>React를 사용한다면, <a href="http://reactcheatsheet.com/" target="_blank" rel="external">Michael Chan의 Cheat sheet</a>를 유용하게 사용할 수 있다. 단순하게 검색가능한 웹사이트이지만, React의 Coding Method에 대해 잘 정리된 개요이다.</li>
<li><a href="https://ponyfoo.com/articles/serviceworker-revolution" target="_blank" rel="external">ServiceWorker</a>는 어플리케이션을 점진적으로 향상시킬 수 있는 좋은 방법이다.</li>
<li><a href="https://garris.github.io/BackstopJS/" target="_blank" rel="external">BackstopJS</a>는 간단한 방법으로 CSS 회기(regression) 테스트를 제공한다. Report를 위해 Resemble과 Casper, 그리고 SlimerJS와 PhantomJS 뿐만 아니라 선호하는 어떤 것이든 사용할 수 있다.</li>
</ul>
<h3 id="Work-amp-Life"><a href="#Work-amp-Life" class="headerlink" title="Work &amp; Life"></a>Work &amp; Life</h3><ul>
<li>이번주는 Geek Mental Health Week이고, Alexander Charchar는 <a href="http://www.smashingmagazine.com/2015/10/dealing-with-loud-silent-burnout/" target="_blank" rel="external">어떻게 Silent Burnout을 발견하고 다룰 것인가</a>에 대해 이야기한다. 스스로를 잘 돌보고, 자신의 업무일정에 관하여서는 이기적으로 굴어야 한다.</li>
<li>의식을 가지는 것은 좋은 것이라고 모두들 얘기한다. <a href="http://www.bakadesuyo.com/2015/10/ritual/" target="_blank" rel="external">요점은 이것이다: 의식가지기 - 타인을 포용하라</a>, 그리고 최고의 의식은 유명인사들이 아니라 당신의 가슴에서 시작된다는 것을 기억해라.</li>
<li><a href="https://the-pastry-box-project.net/marcy-sutton/2015-october-26" target="_blank" rel="external">인생엔 기복이 가득하고</a>, 가끔 진동하는 선으로 인생의 그래프를 그려볼 수도 있을 것이다. 이 생각에 동의한다면, 바다에서 큰 파도를 타는 생각을 해보아라. 내려가는 시간을 좀 더 잘 다룰 수 있지 않을까? 반복되는 생활을 벗어날 수 있을 것이다. 파도를 탈출하자, 그리고 내려가는 시간에 괴로워하는 대신 다른 것을 해보자!</li>
</ul>
<h3 id="Go-beyond…"><a href="#Go-beyond…" class="headerlink" title="Go beyond…"></a>Go beyond…</h3><ul>
<li><a href="https://www.youtube.com/watch?v=rrzXIV8eZPo" target="_blank" rel="external">자본주의의 미래에 대한 비디오이다</a>. 인구수의 증가, 환경과 빈곤위기에 대해 생각할때 생각하게 되는 어떤 것들에 대한 이야기이다. 자본주의는 오직 시장의 성장에서만 동작하는 고장난 시스템이며, 생각보다 빨리 무너질 수도 있다. 난 여전히 모든 신화를 제외한 채 자본주의 경제시스템이 실제로 어떻게 동작하는지에 대해 이야기할 수 있는 사람을 한 명도 만나볼 수 없었다는 사실이 흥미롭다.</li>
</ul>
<p>뮌헨에서 있을 <a href="http://2015.modxpo.eu/" target="_blank" rel="external">MODXpo Europe conference</a>에 연사로 참석한다. 본 컨퍼런스는 CMS 뿐만 아니라, 합리적인 워크플로우와 개발자의 삶을 보다 여유롭게 만드는 것에 대해 이야기한다.</p>
<p>여기까지가 이번 주의 내용이다. 이 글이 마음에 든다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/110&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #110&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>Web Development Reading List #106</title>
    <link href="http://dev.zzoman.com/2015/10/26/translate-wdrl-106/"/>
    <id>http://dev.zzoman.com/2015/10/26/translate-wdrl-106/</id>
    <published>2015-10-26T12:15:41.000Z</published>
    <updated>2015-10-30T11:37:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>원본 : <a href="https://wdrl.info/archive/106" target="_blank" rel="external">Web Development Reading List #106</a><br>저자 : <a href="https://helloanselm.com" target="_blank" rel="external">Anselm Hannemann</a><br>역자 : <a href="http://dev.zzoman.com">조현석</a></p>
<h2 id="역자-코멘트"><a href="#역자-코멘트" class="headerlink" title="역자 코멘트"></a>역자 코멘트</h2><p>개인적인 공부와 정보 습득의 목적으로 WDRL <code>Web Development Reading List</code> 을 번역해 보고자 합니다. 12년의 의무 영어교육에도 불구하고 의역과 오역이 난무합니다. 제보를 언제나 환영합니다. <a href="mailto:reumia@gmail.com" target="_blank" rel="external">이메일</a>과 댓글로 부탁드립니다.</p>
<p>번역하려는 WDRL에 대한 소개는 아래 Smashing Magazine의 글로 대신합니다.</p>
<blockquote>
<p>업계에서 무슨 일이 일어나고 있을까요? 최근에 어떤 중요한 기술이 등장했을까요? 새로운 케이스 스터디나, 통찰(insighits), 기술 그리고 도구들이 있을까요? 친애하는 <a href="http://www.smashingmagazine.com/author/anselm-hannemann/?rel=author" target="_blank" rel="external">Anselm Hannemann</a> 께서 이 모든 것들을 <a href="https://wdrl.info/" target="_blank" rel="external">Web Development Reading List</a>를 통해 추적하고 있습니다. 지난 한 주 동안 일어난 일들과 당신이 관심있어할 만한 것들을 신중하게 모아봤습니다.<br><br>Smashing Magazine Ed.</p>
</blockquote>
<hr>
<h2 id="번역문"><a href="#번역문" class="headerlink" title="번역문"></a>번역문</h2><p>매주 20개의 흥미로운 Link들을 발행하고 있다. 이미 50여개 이상의 자원 중에서 선발하고 있지만, 이마저도 독자들이 계속해서 주의를 기울이기에는 매우 힘든 것으로 보인다. 종종 사람들에게서 “아직 지난 WDRL들을 자세히 읽어보지 못했어, 미안.” 하는 이야기를 듣곤 한다. 내가 뭐라고 답했을까? 충분히 이해한다. 모든 것을 읽는 것은 불가능하다. Tim Kadlec이 말했듯이, 모든 것을 알 순 없다: “<a href="http://timkadlec.com/2015/09/the-fallacy-of-keeping-up/" target="_blank" rel="external">In fact, we can’t know everything about the web.</a>“</p>
<h3 id="News"><a href="#News" class="headerlink" title="News"></a>News</h3><ul>
<li>두 달 전, PHP7이 마침내 릴리즈되었다. <a href="https://kinsta.com/blog/getting-ready-for-php7/" target="_blank" rel="external">퍼포먼스 향상과 새로운 feature를 경험하기 위해 지금 준비하자</a>. </li>
<li>사파리 9에 <a href="">shrink-to-fit: no property in the viewport</a> meta element가 추가되었다. <a href="https://www.reddit.com/r/web_design/comments/3la04p/psa_safari_on_ios9_has_a_media_query_bug/" target="_blank" rel="external">새로운 웹킷 버전의 initial-scale 속성의 변경</a>에 따른 변화이다.</li>
<li><a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/09/30/javascript-goes-to-asynchronous-city.aspx" target="_blank" rel="external">ES2016에서 비동기 코드 작성이 쉬워진다.</a> Chakra와 <a href="http://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/" target="_blank" rel="external">Microsoft Edge</a> 브라우저에서 추가적인 기능을 활성화하면 사용 가능하다.</li>
</ul>
<h3 id="Concepts-amp-Design"><a href="#Concepts-amp-Design" class="headerlink" title="Concepts &amp; Design"></a>Concepts &amp; Design</h3><ul>
<li>최근 UI 프레임워크의 대두와 더불어 프론트엔드 프레임워크와 웹앱의 복잡도가 증가하면서 웹은 나날이 지루해지고 있다. 부트스트랩이나 Material UI Design 등의 비슷한 레이아웃을 참조하며 거의 차이가 없다. 이런 디자인 원칙들 덕분에 우리는 개발자로서 훨씬 쉬운 삶을 살게되었지만, 그러는 동안 우리는 웹의 개별성과 다양성을 잃었다. <a href="https://signalvnoise.com/posts/3948-a-rallying-cry-for-the-weird-wild-web" target="_blank" rel="external">이 선언은 웹을 다시 이상하게 만들고자 한다.</a></li>
</ul>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li>PostCSS는 가장 새로운 CSS이다. “<a href="http://webdesign.tutsplus.com/tutorials/postcss-deep-dive-what-you-need-to-know--cms-24535" target="_blank" rel="external">PostCSS Deep Dive</a>“는 PostCSS가 무엇인지 설명하고, PostCSS가 무엇을 할 수 있으며, 또 그것을 사용함으로서 무엇을 얻을 수 있는지를 설명한다.</li>
<li>CSS를 구축하고 검증하는 <a href="https://github.com/stylelint/stylelint/" target="_blank" rel="external">stylelint</a> 옵션이 PostCSS에 추가되었다.</li>
<li>JSLint에 대해서 알고있을 것이다. JSLint는 JSHint의 훌륭한 후계자이기에, ESLint에 대해서 처음 들었을 때에 왜 또다른 검증도구가 필요한지에 대해서 의문을 가졌을 것이다. <a href="http://www.smashingmagazine.com/2015/09/eslint-the-next-generation-javascript-linter/" target="_blank" rel="external">Nicholas C. Zakas의 아티클</a>에서는 그가 작성한 새로운 검증도구를 사용할 때에 얻을 수 있는 몇가지 장점에 대하여 이야기한다. </li>
<li>Vagrant가 꽤 복잡하고 직관적이지 않다고 생각했던가? Vagrant의 제작사에서 그 뒤를 이을 새로운 도구를 제작했다. 개발환경구축과 쉬운 자동배포기능을 합친 도구인 <a href="https://ottoproject.io/" target="_blank" rel="external">otto</a>를 만나보자.</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><ul>
<li>Paul Lewis는 CORS, CSP, HTTPS 같은 현재의 접근방식과, 그리고 또 다른 여타 Security Layer들이 그동안의 발전과 실제 사용사례에 대한 연구에도 불구하고 많은 사람들에게 버림받고 있는 이유를 종합했다. <a href="">CORS for Concern</a>에서는 보다 안전한 웹을 위한 중앙집중방식 인프라 구조의 함정에 대해 이야기한다.</li>
</ul>
<h3 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h3><ul>
<li>The Intercept를 통해 발간된 이 놀라운 글은 지능적인 기업들이 <a href="https://theintercept.com/2015/09/25/gchq-radio-porn-spies-track-web-users-online-identities/" target="_blank" rel="external">웹상의 모든 메타데이터 - 음악 네트워크, 쿠키, 비디오 웹사이트, 블로그 플랫폼, 전화, 그리고 사진과 온라인광고 등 - 를 추적</a>해 거의 모든 사람들을 염탐해온 방법을 알려준다. HSTS/HPKP를 이용하여 HTTPS를 구현하거나 광고네트워크의 데이터 수집을 제한하여 유저들의 프라이버시에 더욱 촛점을 맞추고, CDN을 분산하여 각 자원들의 연관성을 떨어뜨려 MITM Attack을 방어하는 것은 개발의 관점에서 중요한 일이다.</li>
</ul>
<h3 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h3><ul>
<li>Nolan Lawson은 <a href="http://nolanlawson.com/2015/09/29/indexeddb-websql-localstorage-what-blocks-the-dom/" target="_blank" rel="external">브라우저 저장소의 퍼포먼스</a>와 그것이 DOM에 미치는 영향에 대해서 더 많은 것을 알고 싶어했다. 알고보니 그것은 복잡하며, I/O 퍼포먼스를 상향할 것인지 DOM Rendering Block을 피할 것인지에 따라, 그리고 각각의 브라우저에 따라 다르다는 것을 알 수 있다.</li>
<li>플리커 개발팀의 의 A Behind-the-scenes 아티클은 <a href="https://code.flickr.net/2015/06/25/real-time-resizing-of-flickr-images-using-gpus/" target="_blank" rel="external">GPU를 이용하여 어떻게 Image Resizing Service의 속도를 올릴 것인지</a>를 알려준다.</li>
<li>Yoav Weiss는 진행중인 Netinfo API의 초안이 개발자들이 원했던 것이 아닌 이유와   <a href="http://blog.yoav.ws/adapting_without_assumptions/" target="_blank" rel="external">함부로 추측하지 않고 웹사이트와 응용프로그램을 선택하는 것이 더 중요한 이유</a>에 대해 설명한다.</li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li>Ember를 사용하지만 <a href="http://guides.emberjs.com/v1.10.0/understanding-ember/run-loop/" target="_blank" rel="external">run loops</a>에 대한 사용설명을 따르지 못하고 있다면, <a href="https://netguru.co/blog/free-ember-run-loop-guide" target="_blank" rel="external">Ember Run Loop 에 대한 Free Guide</a>가 여기 있다.</li>
<li>수년간 복사/붙여넣기에 Flash를 사용해 왔지만 마침내 순수 Javascript만으로 구현이 가능해졌다. Zeno Rocha의 <a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="external">clipboard.js</a>는 복사/붙여넣기를 쉽게 구현하며, 브라우저도 폭넓게 지원한다.</li>
<li>ponyfoo의 ES6 아티클 시리즈는 계속되고 있으며 <a href="https://ponyfoo.com/articles/es6-promises-in-depth" target="_blank" rel="external">ES6 Promises 작동방법에 대해 깊이있게 탐구하고 있다.</a> 뿐만 아니라 <a href="https://bevacqua.github.io/promisees/" target="_blank" rel="external">visualize promises의 성능을 개선하기 위해 Prmoisees를 사용할 수 있다.</a><br><img src="https://wdrl-1d6d.kxcdn.com/content/1-archive/0-106/15-c0327131939f2015e696801c82fedc34a93085b9/screen-shot-2015-10-01-at-11.55.22.png" alt="ES6 Promises in Depth"> </li>
<li>YouTube player를 커스텀해보고 싶었다면, <a href="https://github.com/ginpei/html5-youtube.js" target="_blank" rel="external">youtube.js</a>를 써보자.</li>
<li>Apple의 새로운 <a href="https://github.com/freinbichler/3d-touch" target="_blank" rel="external">3D force touch action</a>을 이 Javascript 라이브러리로 구현할 수 있게 되었다. <a href="http://blog.framerjs.com/posts/prototyping-3D-touch-interactions.html" target="_blank" rel="external">framer.js 블로그 포스트</a>로 그 사용방법과 action의 응답에 대해 배워보자.</li>
</ul>
<h3 id="CSS-Sass"><a href="#CSS-Sass" class="headerlink" title="CSS / Sass"></a>CSS / Sass</h3><ul>
<li>Chris Coyier는 <a href="https://css-tricks.com/how-to-do-knockout-text/" target="_blank" rel="external">knockout text를 할 수 있는 서로 다른 방법</a>에 대해 썼다. 꽤 긴 시간동안 이 효과를 구현하기 위해서는 Photoshop만이 유일한 방법이었으나, SVG뿐만 아니라 심지어 CSS로도 어느정도 가능해 졌다.</li>
</ul>
<h3 id="Work-amp-Life"><a href="#Work-amp-Life" class="headerlink" title="Work &amp; Life"></a>Work &amp; Life</h3><ul>
<li>Paul McMahon은 실질적으로 필요한 내용이 없는 채용공고가 너무 많다는 것에 짜증이 났다. 그는 유용한 팁이 담긴 “<a href="http://www.tokyodev.com/2015/08/28/writing-developer-job-posting/" target="_blank" rel="external">채용공고를 쓰는 방법</a>“을 썼다. 만약 채용을 계획중이라면, 이 힌트를 통해 당신의 채용공고를 보충하라. </li>
</ul>
<h3 id="덧붙여…"><a href="#덧붙여…" class="headerlink" title="덧붙여…"></a>덧붙여…</h3><ul>
<li>처음 이 기사를 읽었을 땐 좀 이상해 보였다. 하지만 우리 행성의 다양성을 이미 3/4 정도를 잃었고 몇몇 <a href="http://www.catchnews.com/environment-news/the-svalbard-global-seed-vault-stores-8-40-000-species-of-seeds-and-it-just-saw-a-withdrawal-1442978019.html" target="_blank" rel="external">똑똑한 사람들이 세계의 남은 씨앗들을 저장하려한다는 것</a>을 읽었을 때에 흥미를 느꼈다. 우리의 후손들이 우리가 일생을 거쳐 해온 것들을 재추적할 수 있도록 보살펴온 사람들이 있음을 기쁘게 생각한다.</li>
<li>“<a href="https://the-pastry-box-project.net/jenn-downs/2015-september-24" target="_blank" rel="external">Dear Tech Industry,</a>“로 시작하는 Jenn Downs가 작성한 이 훌륭한 기사는 기술산업에 종사하는 회사와 사람들이 기술에 대해 더 알고 있다는 사실만으로 스스로를 타인들보다 똑똑하다고 생각하지 말아야한다고 이야기한다. 대신, 지역 자선단체와 문화에 환원하는것이 더 중요하다.</li>
<li><a href="https://www.gnome.org/outreachy/" target="_blank" rel="external">Gnome outreachy</a> 프로그램은 오픈소스로 함께 참여하고 발전한 좋은 예이다. Mozilla는 <a href="https://wiki.mozilla.org/Outreachy/2016/December_to_March" target="_blank" rel="external">당신이 미래에 도움을 줄 수도 있는 것들에 대한 로드맵</a>을 공유하였다.</li>
</ul>
<p>여기까지가 이번 주의 내용이다. 매주 써왔던 나의 글이 좋았다면, <a href="https://wdrl.info/donate" target="_blank" rel="external">후원</a>과 공유를 부탁한다. <a href="https://wdrl.info/costs/" target="_blank" rel="external">이 프로젝트에 드는 비용</a>을 확인할 수도 있다. 이메일과 RSS, online으로 제공된다.</p>
<p>감사합니다.<br>Anselm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;원본 : &lt;a href=&quot;https://wdrl.info/archive/106&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Development Reading List #106&lt;/a&gt;&lt;br&gt;저자 : &lt;a href=&quot;https:
    
    </summary>
    
      <category term="Translate" scheme="http://dev.zzoman.com/categories/Translate/"/>
    
    
      <category term="WDRL" scheme="http://dev.zzoman.com/tags/WDRL/"/>
    
  </entry>
  
  <entry>
    <title>usage of hr element</title>
    <link href="http://dev.zzoman.com/2015/08/04/usage-of-hr-element/"/>
    <id>http://dev.zzoman.com/2015/08/04/usage-of-hr-element/</id>
    <published>2015-08-04T08:53:02.000Z</published>
    <updated>2015-10-24T08:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>마크다운에서 <code>----</code> <code>***</code>를 입력하면 HTML에서 <code>&lt;hr&gt;</code>태그로 해석된다.</p>
<p>글에서 단락과 단락을 구분짓는 여백을 중요시하기 때문에 마크다운 문서 작성 시에 <code>----</code>태그를 자주 사용하는데, 웹사이트를 제작할 때에도 <code>&lt;hr&gt;</code>태그를 적극적으로 사용할 수 있을 것 같았다.</p>
<h3 id="W3C-명세"><a href="#W3C-명세" class="headerlink" title="W3C 명세"></a>W3C 명세</h3><p><a href="http://www.w3.org/TR/2012/WD-html5-20121025/the-hr-element.html#the-hr-element" target="_blank" rel="external">hr 태그에 대한 W3C 명세</a>를 살펴보자.</p>
<blockquote>
<p>The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book.</p>
</blockquote>
<p><code>&lt;hr&gt;</code>태그는 문단의 주제 전환, 이야기의 장면 변환 등에서 사용하는 태그로 설명하고 있다.</p>
<blockquote>
<p>There is no need for an hr element between the sections themselves, since the section elements and the h1 elements imply thematic changes themselves.</p>
</blockquote>
<p>섹션과 섹션 사이에서는 <code>&lt;hr&gt;</code>태그가 사용될 필요가 없다고 한다. <code>&lt;section&gt;</code>이나 <code>&lt;h1&gt;</code>태그가 주제 전환 / 장면 변환의 역할을 이미 포함하고 있기 때문.</p>
<h3 id="hr-태그의-적절한-사용"><a href="#hr-태그의-적절한-사용" class="headerlink" title="hr 태그의 적절한 사용"></a>hr 태그의 적절한 사용</h3><p>섹션이 주제전환의 의미를 내포하고 있다는 것은, 시각장애인이 스크린리더를 통해 문서를 읽을 때에, 주제의 전환을 인지할 수 있도록 잠깐 쉬었다가 읽는 등의 기능을 내포하고 있다는 것으로 이해할 수 있을 것이다.</p>
<p>적절한 태그를 선택했느나, 그렇지 못했느냐에 대한 문제가 가장 크게 가시화되는 부분은 아무래도 접근성 이슈일 것이며, 접근성 이슈는 비단 장애인에게만 국한되는 문제가 아니다. </p>
<p>접근성의 개선은 비장애인의 사용자 경험에도 영향을 끼친다. 결국 적절한 태그를 선택하는 것은, 일반적인 UX 측면에서도 상당히 중요하다.</p>
<p>많은 양의 정보가 나열된 웹사이트에서 사용자의 눈과 머리가 잠깐 호흡을 가다듬을 수 있는 공간은 꼭 필요하다. <code>&lt;hr&gt;</code>태그는 그 역할을 간단하고 효과적으로 구현한다.</p>
<p>여느 HTML태그와 마찬가지로, 주제의 전환, 단락과 단락을 구분하는데에 굳이 <code>&lt;hr&gt;</code>태그를 사용할 필요는 없다. </p>
<p><code>&lt;hr&gt;</code>태그는 컨텐츠를 포함하지 않기 때문에 실질적으로 어떤 표현도 가지고 있지 않다. 때문에 그 동안의 웹개발에서 무의미한 태그로 인식되어 왔다.</p>
<p>일반적으로는 하나의 단락으로 묶을 수 있는 글의 집합을 부모 요소로 감싸서 스타일을 입히곤 하지만, 좀 더 유연하게, 원하는 곳에 쉼표를 찍고 싶을 때가 있다. 바로 그때 <code>&lt;hr&gt;</code>태그가 유용하게 쓰일 수 있을 거라 생각된다.</p>
<hr>
<h3 id="덧붙여"><a href="#덧붙여" class="headerlink" title="덧붙여"></a>덧붙여</h3><p>명세에서 말하는 섹션이 꼭 <code>&lt;section&gt;</code>태그를 의미하는 것은 아니다. 여기에서의 섹션은 <a href="http://www.w3.org/TR/2012/WD-html5-20121025/content-models.html#sectioning-content-0" target="_blank" rel="external">Section Contents</a>를 의미하며, <code>&lt;hr&gt;</code>태그의 Category로 명시되어 있는 <a href="http://www.w3.org/TR/2012/WD-html5-20121025/content-models.html#flow-content-1" target="_blank" rel="external">Flow Contents</a>와 구분된다.</p>
<p>좀 더 쉬운 이해를 위해서 <a href="http://html5.clearboth.org/content-models.html#flow-content" target="_blank" rel="external">Clearboth 에서 번역한 한글 HTML5 명세</a>를 참고해도 좋을 것이다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;마크다운에서 &lt;code&gt;----&lt;/code&gt; &lt;code&gt;***&lt;/code&gt;를 입력하면 HTML에서 &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;태그로 해석된다.&lt;/p&gt;
&lt;p&gt;글에서 단락과 단락을 구분짓는 여백을 중요시하기 때문에 마크다운 문서 작성 
    
    </summary>
    
      <category term="web" scheme="http://dev.zzoman.com/categories/web/"/>
    
      <category term="markup" scheme="http://dev.zzoman.com/categories/web/markup/"/>
    
    
  </entry>
  
  <entry>
    <title>Add Javascript Libraries to Tumblr Theme</title>
    <link href="http://dev.zzoman.com/2015/06/10/add-javascript-libraries-to-tumblr-theme/"/>
    <id>http://dev.zzoman.com/2015/06/10/add-javascript-libraries-to-tumblr-theme/</id>
    <published>2015-06-10T09:32:25.000Z</published>
    <updated>2015-08-16T10:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>텀블러 테마를 둘러보면 Dynamic Layout이나 Slider, Inifinite Scroll 등의 자바스크립트 라이브러리가 많이 보인다. 테마개발 시에 따로 호스팅을 제공하지 않는 텀블러의 특성상, 어떻게 자바스크립트 파일을 가져오는지 궁금하다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.tumblr.com/hugxd2w/6Cpm8gh20/modernizr.2.6.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>제작된 테마를 뒤져보면 위와 같은 URL로 자바스크립트 파일을 가져오고 있는 것을 확인할 수 있는데, Tumblr 자체에 자바스크립트 라이브러리를 보관하거나 제작자에게 제공하는 공간이 있는 것일까 싶어 찾아보았다.</p>
<p><a href="https://www.tumblr.com/themes/upload_static_file" target="_blank" rel="external">https://www.tumblr.com/themes/upload_static_file</a></p>
<p>위 링크를 통하면, 텀블러 테마용 파일에 한해서 업로드할 수 있다. 만약 테마에 사용되는 파일이 아닐 경우에는 즉시 계정정지를 당할 수 있으므로 유의하도록 하자.</p>
<p>아직 직접 사용해보진 않았지만, 올리면 위와 같은 링크를 생성해주고 그 내용을 테마의 HTML에 파일에 링크하는 형식으로 사용이 가능한 듯 하다.</p>
<p>같은 방법으로 자바스크립트 라이브러리 뿐만 아니라 직접 제작한 자바스크립트 파일이나, CSS 파일 역시 삽입가능하므로 잘 활용할 경우에 로컬 환경에서 훨씬 더 쾌적하게 텀블러 개발이 가능할 것으로 보인다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;텀블러 테마를 둘러보면 Dynamic Layout이나 Slider, Inifinite Scroll 등의 자바스크립트 라이브러리가 많이 보인다. 테마개발 시에 따로 호스팅을 제공하지 않는 텀블러의 특성상, 어떻게 자바스크립트 파일을 가져오는지 궁금
    
    </summary>
    
      <category term="theme" scheme="http://dev.zzoman.com/categories/theme/"/>
    
      <category term="tumblr" scheme="http://dev.zzoman.com/categories/theme/tumblr/"/>
    
    
  </entry>
  
  <entry>
    <title>Learning Markup Language with Tumblr Theme Development 3</title>
    <link href="http://dev.zzoman.com/2015/03/24/learning-markup-language-with-tumblr-theme-development-3/"/>
    <id>http://dev.zzoman.com/2015/03/24/learning-markup-language-with-tumblr-theme-development-3/</id>
    <published>2015-03-24T14:49:57.000Z</published>
    <updated>2015-08-16T10:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1주차-강의내용-공유"><a href="#1주차-강의내용-공유" class="headerlink" title="1주차 강의내용 공유"></a>1주차 강의내용 공유</h1><p><a href="http://colorscripter.com/s/FzOMfwK" target="_blank" rel="external">1주차 강의 소스 보러가기</a></p>
<p>본 소스는 오프라인에서진행한 포스트 제목과 동명의 강의에서 제작한 소스이다. 1주차 강의의 내용을 기록하기 위한 용도이며, 완성된 소스는 아니다. 강의는 스스로 웹개발의 궁금한 점을 알아보고 공부하는 방법을 터득하는 것을 목표로 하고 있다.</p>
<p>간략한 내용은 주석으로 메모하였으며, 구체적인 내용은 인터넷 검색과 크롬 개발자도구를 활용한 테스트로 스스로 알아보도록 하자.</p>
<ol>
<li>소스는 <a href="https://www.tumblr.com/docs/en/custom_themes" target="_blank" rel="external">텀블러 공식 테마 제작 가이드</a>의 샘플 소스에서 시작한다.</li>
<li>HTML 작성법, 지켜야하는 약속에 대해 알아보았다.</li>
<li>선택자를 이용하여 HTML과 CSS를 연결하는 방법을 알아보았다.</li>
<li>몇가지 대표적인 CSS 속성의 활용 방법을 알아보았다.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1주차-강의내용-공유&quot;&gt;&lt;a href=&quot;#1주차-강의내용-공유&quot; class=&quot;headerlink&quot; title=&quot;1주차 강의내용 공유&quot;&gt;&lt;/a&gt;1주차 강의내용 공유&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://colorscripter.com/
    
    </summary>
    
      <category term="theme" scheme="http://dev.zzoman.com/categories/theme/"/>
    
      <category term="tumblr" scheme="http://dev.zzoman.com/categories/theme/tumblr/"/>
    
    
  </entry>
  
  <entry>
    <title>Learning Markup Language with Tumblr Theme Development 2</title>
    <link href="http://dev.zzoman.com/2015/03/22/learning-markup-language-with-tumblr-theme-development-2/"/>
    <id>http://dev.zzoman.com/2015/03/22/learning-markup-language-with-tumblr-theme-development-2/</id>
    <published>2015-03-22T06:23:34.000Z</published>
    <updated>2015-08-16T10:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그램-설치"><a href="#프로그램-설치" class="headerlink" title="프로그램 설치"></a>프로그램 설치</h1><p><img src="http://dev.zzoman.com/wp-content/uploads/sites/2/2015/03/tumblr_3.png" alt="텀블러의 HTML/CSS 편집기"></p>
<p>텀블러는 자체적으로 테마 제작을 위한 HTML/CSS 편집기를 제공하고 있지만, 웹에서 구현된 편집기의 특성상 코딩 자체에 불편함이 많고 저장하거나 저장한 내용을 반영하는 데에 있어서 잦은 오류가 발생한다. 텀블러가 제공하는 변수와 블럭요소들을 눈에 띄게 보거나 하는 데에는 편할 수는 있지만, 빠른 코딩을 위해 유용한 기능이 많은 Texteditor의 도움을 받는 것이 좋다.</p>
<hr>
<h1 id="Sublime-Text-2"><a href="#Sublime-Text-2" class="headerlink" title="Sublime Text 2"></a>Sublime Text 2</h1><p>Sublime Text 2 는 오픈소스로 제작된 Text Editor 이다. 오픈 소스인 만큼 다양한 플러그인이 개발되어 어떤 형태의 개발에도 손색없이 사용할 수 있다. HTML과 CSS를 하나의 파일에 병기해야만 하는 텀블러 테마 제작의 특성상 기능이 좋은 Text Editor 의 활용은 꼭 필요하다고 생각한다.</p>
<p>기본적으로는 Sublime Text 2 에서 작업을 하고, 내용을 복사해서 텀블러 편집기에 붙여넣어 적용하는 방식으로 작업을 진행한다. 화면 전환이 잦은 것이 번거로울 수 있지만 소스가 저장되지 않을 채 날아가는 것을 미연에 방지하고, Emmet같은 자동완성 기능을 활용하여 빠른 코딩을 할 수 있다.</p>
<p>원하는 기능을 플러그인으로 붙히는 방식이기 때문에, 설치 이후에 몇 가지 플러그인을 추가로 설치해주어야 한다.</p>
<ul>
<li><a href="www.sublimetext.com">Sublime Text 2</a></li>
<li><a href="https://packagecontrol.io/installation" target="_blank" rel="external">Package Control</a></li>
</ul>
<h2 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h2><p>Package Control은 Sublime에 플러그인을 설치할 수 있도록 돕는 프로그램이다. 설치 방법이 조금 특이한데, 가이드를 천천히 읽어보면 어렵지 않게 설치할 수 있다. 설치 이후에는 단축키 <code>ctrl + shift + p</code> <code>cmd + shift + P</code> 를 눌러 활성화할 수 있다. 단축키로 활성화된 창에 Install Package 를 입력해서 인스톨할 플러그인을 찾는 새로운 창을 활성화 시킨 후, 아래의 플러그인의 이름을 타이핑하여 하나씩 차례차례 설치해 준다.</p>
<ol>
<li><strong>ConvertToUTF8</strong> 한글을 무리없이 사용할 수 있도록 언어셋을 설치해 준다.</li>
<li><strong>Emmet</strong> 코딩을 빠르게 돕는 Zen Coding 프로그램 중 하나인 Emmet 을 설치한다. 활용법은 검색을 하면 쉽게 찾을 수 있다.</li>
</ol>
<p><img src="http://dev.zzoman.com/wp-content/uploads/sites/2/2015/03/tumblr_5.png" alt="Install Package 를 선택하여 플러그인을 설치한다."></p>
<hr>
<h1 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h1><p>Chrome 은 구글에서 개발한 웹브라우저이다. 요즈음에는 메모리 문제 등으로 많이 느려지긴 했지만 여전히 강력한 기능이 많고 빠르기도 빠른 좋은 브라우저이다. 비교적 타 브라우저에 비해 표준에 가까운 렌더링을 하기 때문에 개발 시에 테스트용으로 활용하기 좋으며, F12를 누르면 튀어나오는 개발자 도구의 기능이 아주 막강하다.</p>
<p>HTML과 CSS의 내용이 궁금한 웹사이트의 특정 UI에 <code>마우스 우클릭 &gt; 요소 검사</code> 를 하면 개발자 도구 창에서 해당하는 내용을 낱낱이 살펴보고, 또한 다른 값을 입력해 테스트해볼 수도 있다.</p>
<p><img src="http://dev.zzoman.com/wp-content/uploads/sites/2/2015/03/tumblr_4.png" alt="버튼에 우클릭&gt; 요소검사를 통해 개발자 도구를 열었다. HTML과 CSS값을 우측에서 확인할 수 있다."></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;프로그램-설치&quot;&gt;&lt;a href=&quot;#프로그램-설치&quot; class=&quot;headerlink&quot; title=&quot;프로그램 설치&quot;&gt;&lt;/a&gt;프로그램 설치&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://dev.zzoman.com/wp-content/uploads
    
    </summary>
    
      <category term="theme" scheme="http://dev.zzoman.com/categories/theme/"/>
    
      <category term="tumblr" scheme="http://dev.zzoman.com/categories/theme/tumblr/"/>
    
    
  </entry>
  
</feed>
