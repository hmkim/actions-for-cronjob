<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>Jaehyun&#039;s blog</title>
	<atom:link href="https://only2sea.wordpress.com/feed/" rel="self" type="application/rss+xml" />
	<link>https://only2sea.wordpress.com</link>
	<description></description>
	<lastBuildDate>
	Mon, 19 Nov 2018 02:04:28 +0000	</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>http://wordpress.com/</generator>
<cloud domain='only2sea.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Jaehyun&#039;s blog</title>
		<link>https://only2sea.wordpress.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="https://only2sea.wordpress.com/osd.xml" title="Jaehyun&#039;s blog" />
	<atom:link rel='hub' href='https://only2sea.wordpress.com/?pushpress=hub'/>
	<item>
		<title>미국에서 카드 마케팅 우편물 거부하는 법</title>
		<link>https://only2sea.wordpress.com/2017/11/26/%eb%af%b8%ea%b5%ad%ec%97%90%ec%84%9c-%ec%b9%b4%eb%93%9c-%eb%a7%88%ec%bc%80%ed%8c%85-%ec%9a%b0%ed%8e%b8%eb%ac%bc-%ea%b1%b0%eb%b6%80%ed%95%98%eb%8a%94-%eb%b2%95/</link>
				<comments>https://only2sea.wordpress.com/2017/11/26/%eb%af%b8%ea%b5%ad%ec%97%90%ec%84%9c-%ec%b9%b4%eb%93%9c-%eb%a7%88%ec%bc%80%ed%8c%85-%ec%9a%b0%ed%8e%b8%eb%ac%bc-%ea%b1%b0%eb%b6%80%ed%95%98%eb%8a%94-%eb%b2%95/#respond</comments>
				<pubDate>Sun, 26 Nov 2017 17:50:39 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/2017/11/26/%eb%af%b8%ea%b5%ad%ec%97%90%ec%84%9c-%ec%b9%b4%eb%93%9c-%eb%a7%88%ec%bc%80%ed%8c%85-%ec%9a%b0%ed%8e%b8%eb%ac%bc-%ea%b1%b0%eb%b6%80%ed%95%98%eb%8a%94-%eb%b2%95/</guid>
				<description><![CDATA[미국에서 받는 우편물 중에 대부분이 카드 만들라는 내용이다. 중요하지도 않으면서 매우 중요하다고 겉봉투에 써 놓고 수신인에게 주지 않으면 징역 살거나 벌금 물려야 한다고 겁도 줘 가면서 꾸준히 보낸다. 그래서 중요하다고 하는 우편물일수록 안 중요하다는 걸 알게 되었다. 받아도 폐기 처분하기가 귀찮다.&#160; 비행기에서 읽은 잡지에서 알게 된 정보인데 이걸 거부하는 방법이 있다. 전화로 +1 888-5OP-TOUT 즉 &#8230;]]></description>
								<content:encoded><![CDATA[<p>미국에서 받는 우편물 중에 대부분이 카드 만들라는 내용이다. 중요하지도 않으면서 매우 중요하다고 겉봉투에 써 놓고 수신인에게 주지 않으면 징역 살거나 벌금 물려야 한다고 겁도 줘 가면서 꾸준히 보낸다. 그래서 중요하다고 하는 우편물일수록 안 중요하다는 걸 알게 되었다. 받아도 폐기 처분하기가 귀찮다.&nbsp;</p>
<p>비행기에서 읽은 잡지에서 알게 된 정보인데 이걸 거부하는 방법이 있다. 전화로 +1 888-5OP-TOUT 즉 +1 888-567-8688 이 번호로 걸거나 <a href="http://www.optoutprescreen.com" rel="nofollow">http://www.optoutprescreen.com</a> 여기로 가면 된다. 신용 평가 회사들이 이 정보를 주기 때문에 여기서 메일들을 거부 가능한가 보다.&nbsp;<br />
기분이 한결 후련하다.&nbsp;</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2017/11/26/%eb%af%b8%ea%b5%ad%ec%97%90%ec%84%9c-%ec%b9%b4%eb%93%9c-%eb%a7%88%ec%bc%80%ed%8c%85-%ec%9a%b0%ed%8e%b8%eb%ac%bc-%ea%b1%b0%eb%b6%80%ed%95%98%eb%8a%94-%eb%b2%95/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>미래의 생명 보험</title>
		<link>https://only2sea.wordpress.com/2017/06/05/%eb%af%b8%eb%9e%98%ec%9d%98-%ec%83%9d%eb%aa%85-%eb%b3%b4%ed%97%98/</link>
				<comments>https://only2sea.wordpress.com/2017/06/05/%eb%af%b8%eb%9e%98%ec%9d%98-%ec%83%9d%eb%aa%85-%eb%b3%b4%ed%97%98/#respond</comments>
				<pubDate>Mon, 05 Jun 2017 13:53:26 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[삶]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=612</guid>
				<description><![CDATA[얼마 전에 라는 책을 읽었다. 가볍게 읽기 좋은 책이었는데, 그 중에 이런 구절이 있었다. &#8220;사람들이 일정 연령에서 죽지 않고 계속 산다면 아무도 생명보험에 관심을 갖지 않게 된다.&#8221; 문맥상으로 봤을 때 사고사가 완전히 없어지는 것은 아닌데, 내 생각에는 오히려 생명 보험에 관심이 늘어날지도 모른다는 생각이다. 나는 생명보험을 수명까지 다 살다가 죽은 경우가 아닌, 예상치 못하게 이른 &#8230;]]></description>
								<content:encoded><![CDATA[<p>얼마 전에 라는 책을 읽었다. 가볍게 읽기 좋은 책이었는데, 그 중에 이런 구절이 있었다.</p>
<p>&#8220;사람들이 일정 연령에서 죽지 않고 계속 산다면 아무도 생명보험에 관심을 갖지 않게 된다.&#8221;</p>
<p>문맥상으로 봤을 때 사고사가 완전히 없어지는 것은 아닌데, 내<br />
 생각에는 오히려 생명 보험에 관심이 늘어날지도 모른다는 생각이다. 나는 생명보험을 수명까지 다 살다가 죽은 경우가 아닌, 예상치 못하게 이른 나이에 죽게 되는 경우에 유족들의 안정적인 삶을 대비하기 위함이라 생각하므로&#8230;</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2017/06/05/%eb%af%b8%eb%9e%98%ec%9d%98-%ec%83%9d%eb%aa%85-%eb%b3%b4%ed%97%98/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>일찍 은퇴하는 것의 부작용</title>
		<link>https://only2sea.wordpress.com/2017/06/05/%ec%9d%bc%ec%b0%8d-%ec%9d%80%ed%87%b4%ed%95%98%eb%8a%94-%ea%b2%83%ec%9d%98-%eb%b6%80%ec%9e%91%ec%9a%a9/</link>
				<comments>https://only2sea.wordpress.com/2017/06/05/%ec%9d%bc%ec%b0%8d-%ec%9d%80%ed%87%b4%ed%95%98%eb%8a%94-%ea%b2%83%ec%9d%98-%eb%b6%80%ec%9e%91%ec%9a%a9/#comments</comments>
				<pubDate>Mon, 05 Jun 2017 09:24:30 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[학습]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=588</guid>
				<description><![CDATA[Kristin Wong의 글 Why Early Retirement Isn’t as Awesome as It Sounds의 요약이다. 충분한 돈을 벌어서 일찍 은퇴하는 것은 일견 아주 멋져 보인다. 요즈음에는 30대, 40대에 이것을 이루는 사람들도 있다. 그러나 부작용도 있다. 은퇴를 하게 되면 기억력을 비롯한 지적 능력이 감퇴한다고 한다. 실제로는 은퇴가 가까워져도 이미 마음 자세가 달라지기 때문에 은퇴하기 전부터 지적 능력의 감퇴가 &#8230;]]></description>
								<content:encoded><![CDATA[<p><a href="http://kinja.com/kristinwong">Kristin Wong</a>의 글 <a href="http://twocents.lifehacker.com/why-early-retirement-isn-t-as-awesome-as-it-sounds-1795743837">Why Early Retirement Isn’t as Awesome as It Sounds</a>의 요약이다.</p>
<p>충분한 돈을 벌어서 일찍 은퇴하는 것은 일견 아주 멋져 보인다. 요즈음에는 30대, 40대에 이것을 이루는 사람들도 있다. 그러나 부작용도 있다.</p>
<p>은퇴를 하게 되면 기억력을 비롯한 지적 능력이 감퇴한다고 한다. 실제로는 은퇴가 가까워져도 이미 마음 자세가 달라지기 때문에 은퇴하기 전부터 지적 능력의 감퇴가 시작된다고 한다.</p>
<p>따라서 은퇴의 개념을 마냥 아무 것도 안 하고 쉬는 것이 아니라 돈 걱정으로부터 탈피하여, 더 새로운 도전을 하는 것으로 재정립할 필요가 있겠다.</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2017/06/05/%ec%9d%bc%ec%b0%8d-%ec%9d%80%ed%87%b4%ed%95%98%eb%8a%94-%ea%b2%83%ec%9d%98-%eb%b6%80%ec%9e%91%ec%9a%a9/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>외국어 공부와 두뇌 계발</title>
		<link>https://only2sea.wordpress.com/2017/01/12/%ec%99%b8%ea%b5%ad%ec%96%b4-%ea%b3%b5%eb%b6%80%ec%99%80-%eb%91%90%eb%87%8c-%ea%b3%84%eb%b0%9c/</link>
				<comments>https://only2sea.wordpress.com/2017/01/12/%ec%99%b8%ea%b5%ad%ec%96%b4-%ea%b3%b5%eb%b6%80%ec%99%80-%eb%91%90%eb%87%8c-%ea%b3%84%eb%b0%9c/#comments</comments>
				<pubDate>Thu, 12 Jan 2017 20:26:41 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[학습]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=567</guid>
				<description><![CDATA[Stephen Case 씨가 쓰신 Why learning a language is the best exercise you can give your brain: six big benefits 이라는 글의 내용을 가볍게 요약해 봤습니다. 과거에는 외국어를 공부하는 것이 뇌에 좋지 않은 영향을 끼친다고 생각했다고 합니다. 여러 언어가 상충하면서 고차원적인 사고를 방해한다고 생각했다고 하는데요, 실제로는 이런 충돌이 두뇌를 더 발달시키는 역할을 한다는 것이 주된 &#8230;]]></description>
								<content:encoded><![CDATA[<p>Stephen Case 씨가 쓰신 <a href="https://www.lingualift.com/blog/why-learning-a-language-is-the-best-exercise-you-can-give-your-brain-six-of-the-big-benefits/">Why learning a language is the best exercise you can give your brain: six big benefits</a> 이라는 글의 내용을 가볍게 요약해 봤습니다.</p>
<p>과거에는 외국어를 공부하는 것이 뇌에 좋지 않은 영향을 끼친다고 생각했다고 합니다. 여러 언어가 상충하면서 고차원적인 사고를 방해한다고 생각했다고 하는데요, 실제로는 이런 충돌이 두뇌를 더 발달시키는 역할을 한다는 것이 주된 내용입니다. 원글에서는 여섯 가지를 나열했지만, 굳이 나열하고 꼽을 필요는 없을 듯 합니다.</p>
<p>흥미로운 점은 한 분야에 대해서 더 많이 아는 사람은 관련 영역에 대한 질문을 받았을 때, 대답하는데 시간이 더 걸린다고 합니다. 반면에 그 분야에 대해서 잘 모르는 사람이 오히려 그 분야를 잘 아는 양 신속하고 자세하게 대답을 할 수 있다고 하네요.</p>
<p>외국어를 공부해서 더 많이 알고 있으면 반응 속도가 느려진다고 합니다. 그래서 과거에는 두뇌 활동을 방해한다고 생각했는데, 실은 틀린 대답을 빨리 하기보다는 좀 더 분석하여 더 정확한 답을 하기 위해서라고 합니다. 좋은 점이긴 한데, 빠른 반응으로 각광받는 현실에서 이것이 꼭 장점일까 하는 생각이 듭니다.</p>
<p>언어를 바꾸다보면 생기는 멀티 태스킹 능력이나 불필요한 정보를 걸러내는 능력이 다중 언어 구사자의 경우에 더 뛰어나다고 하네요. 그리고 새로운 언어를 배우는 것은 굉장히 힘든 일이므로 두뇌 계발을 촉진시켜서 6주 이상 꾸준히 공부하면 뇌가 커진다고 합니다.</p>
<p>연구 조사 결과에 대해서 심각하게 검증해 보지 않고, 간단히 요약한 것이기 때문에, 너무 곧이 곧대로 믿을 필요는 없습니다. 필요한 만큼만 이 정보를 받아들이면 될 것 같습니다.</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2017/01/12/%ec%99%b8%ea%b5%ad%ec%96%b4-%ea%b3%b5%eb%b6%80%ec%99%80-%eb%91%90%eb%87%8c-%ea%b3%84%eb%b0%9c/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>배열의 인덱스와 구간</title>
		<link>https://only2sea.wordpress.com/2016/03/24/%eb%b0%b0%ec%97%b4%ec%9d%98-%ec%9d%b8%eb%8d%b1%ec%8a%a4%ec%99%80-%ea%b5%ac%ea%b0%84/</link>
				<comments>https://only2sea.wordpress.com/2016/03/24/%eb%b0%b0%ec%97%b4%ec%9d%98-%ec%9d%b8%eb%8d%b1%ec%8a%a4%ec%99%80-%ea%b5%ac%ea%b0%84/#respond</comments>
				<pubDate>Fri, 25 Mar 2016 00:54:27 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[프로그래밍]]></category>
		<category><![CDATA[고]]></category>
		<category><![CDATA[고 언어]]></category>
		<category><![CDATA[Go]]></category>
		<category><![CDATA[golang]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=480</guid>
				<description><![CDATA[인덱스 세는 방법은 참 헷깔리기 쉽습니다. 1부터 세는 언어도 있고, 0부터 세는 언어도 있습니다. 구간에서 시작 인덱스는 대부분 포함이 되지만 끝 인덱스는 포함이 되는 언어도 있고 되지 않는 언어도 있습니다. GDG Korea Golang 커뮤니티에 올라온 질문에 대한 답변을 작성했는데 답변 내용을 여기로 옮겨서 공유합니다. Go 언어 이외의 다른 언어에서도 유용한 정보입니다. 인덱스 세는 방법을 제대로 &#8230;]]></description>
								<content:encoded><![CDATA[<p>인덱스 세는 방법은 참 헷깔리기 쉽습니다. 1부터 세는 언어도 있고, 0부터 세는 언어도 있습니다. 구간에서 시작 인덱스는 대부분 포함이 되지만 끝 인덱스는 포함이 되는 언어도 있고 되지 않는 언어도 있습니다.</p>
<p><a href="http://golang.kr">GDG Korea Golang 커뮤니티</a>에 올라온 질문에 대한 답변을 작성했는데 답변 내용을 여기로 옮겨서 공유합니다. Go 언어 이외의 다른 언어에서도 유용한 정보입니다.</p>
<p>인덱스 세는 방법을 제대로 익혀 두지 않고 그 때 그 때 실행해 보면서 +1이나 -1을 붙여서 해결하다보면 찾기 어려운 버그들을 만들어낼 가능성이 많습니다. 그렇기 때문에 신경을 좀 써야 합니다.</p>
<p>널리 사용되는 여러 인덱스 방법 중에 하나는 0부터 시작하고, 시작 인덱스에 있는 원소는 영역에 포함이 되지만, 끝 인덱스에 있는 원소는 영역에 포함이 되지 않습니다. 이렇게 생각해 보시면 이해가 빠를 수 있습니다.</p>
<pre class="brush: plain; title: ; notranslate">
for i := start; i &lt; end; i++ {
    fmt.Println(A[i])
}
</pre>
<p>0부터 시작하고 끝 인덱스가 영역에 포함이 안 되는 것은 여러가지 장점이 있습니다.</p>
<ol>
<li>길이를 잴 때 끝 인덱스에서 앞 인덱스를 빼면 된다는 점이 간편합니다. 불필요하게 +1을 하지 않아도 됩니다. <code>length := end - start</code>와 같은 형태가 됩니다.</p>
</li>
<li>
<p>1을 생각해 볼 때, 시작 인덱스와 길이를 알 때 단순히 둘을 더하면 끝 인덱스가 나오므로 -1을 하지 않아도 되어서 수식이 더 간단해 집니다. 영역이 <code>start:start+length</code>가 되는 거죠.</p>
</li>
<li>
<p>영역을 나눌 때 편합니다. 0:n 구간을 m 등분 한다면 <code>0:n/m, n/m:2*n/m, 2*n/m:3*n/m ..., (m-1)*n/m:n</code>과 같이 표현 가능합니다. 0:10을 3등분 한다면<br />
0:3, 3:6, 6:10이 됩니다. 식이 복잡해 보일 수 있지만 사실 간단합니다. n개짜리 구간을 m 등분하면 하나당 길이는 n/m이므로 여기 앞에 단순히 등분된 덩어리의 인덱스를 곱해서 구간을 맞추면 됩니다. 아래 예제 코드로 써 봤습니다.</p>
</li>
</ol>
<p><a href="https://play.golang.org/p/5pFksNksNQ" rel="nofollow">https://play.golang.org/p/5pFksNksNQ</a></p>
<ol>
<li>두 구간이 서로 인접해 있는지 볼 때도 한 구간의 끝과 다른 구간의 시작 인덱스가 같은지 비교하면 되는데 이게 +1이나 -1을 쓰는 것보다 간단합니다.</p>
</li>
<li>
<p>연속된 영역에서 중간 부분을 잘라서 제거해 낼 때도 편리합니다. 15:25 구간에서 18:22 구간을 잘라내면 남는 부분은 15:18과 22:25이 됩니다. 15:25 구간은 {15, 16, 17, 18, 19, 20, 21, 22, 23, 24}이고 18:22구간은 {18, 19, 20, 21}이므로 이것을 뺀 구간은 {15, 16, 17, 22, 23, 24}가 되므로 15:18과 22:25 구간이 됩니다.</p>
</li>
</ol>
<p>+1이나 -1이 여기저기 들어가야 되는 상황이면 복잡해지고 인덱스 처리할 때 버그 발생 가능성도 높아집니다.</p>
<ol>
<li>직사각형 형태의 2차원 배열을 1차원으로 표현할 때도 계산이 편해집니다.</li>
</ol>
<p>n<em>m 행렬이라고 할 때 n</em>m개의 1차원 배열이나 슬라이스를 잡은 뒤에 i행 j열에 있는 원소는 A[i*m+j]로 찾으면 됩니다.</p>
<p><a href="https://play.golang.org/p/MH8wTpHCHi" rel="nofollow">https://play.golang.org/p/MH8wTpHCHi</a></p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2016/03/24/%eb%b0%b0%ec%97%b4%ec%9d%98-%ec%9d%b8%eb%8d%b1%ec%8a%a4%ec%99%80-%ea%b5%ac%ea%b0%84/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>Go 언어로 우버에서 초당 요청수가 가장 많은 서비스를 어떻게 개발했나?</title>
		<link>https://only2sea.wordpress.com/2016/03/08/go-%ec%96%b8%ec%96%b4%eb%a1%9c-%ec%9a%b0%eb%b2%84%ec%97%90%ec%84%9c-%ec%b4%88%eb%8b%b9-%ec%9a%94%ec%b2%ad%ec%88%98%ea%b0%80-%ea%b0%80%ec%9e%a5-%eb%a7%8e%ec%9d%80-%ec%84%9c%eb%b9%84%ec%8a%a4%eb%a5%bc-2/</link>
				<comments>https://only2sea.wordpress.com/2016/03/08/go-%ec%96%b8%ec%96%b4%eb%a1%9c-%ec%9a%b0%eb%b2%84%ec%97%90%ec%84%9c-%ec%b4%88%eb%8b%b9-%ec%9a%94%ec%b2%ad%ec%88%98%ea%b0%80-%ea%b0%80%ec%9e%a5-%eb%a7%8e%ec%9d%80-%ec%84%9c%eb%b9%84%ec%8a%a4%eb%a5%bc-2/#comments</comments>
				<pubDate>Wed, 09 Mar 2016 05:46:43 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[소프트웨어 엔지니어링]]></category>
		<category><![CDATA[프로그래밍]]></category>
		<category><![CDATA[고]]></category>
		<category><![CDATA[고 언어]]></category>
		<category><![CDATA[Go]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[우버]]></category>
		<category><![CDATA[Software Engineering]]></category>
		<category><![CDATA[Uber]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=475</guid>
				<description><![CDATA[저자: Kai Wei / 번역: 염재현 2016년 2월 24일 작성 / 2016년 3월 8일 번역 원문주소: https://eng.uber.com/go-geofence/ 이 글은 원저자인 Kai Wei씨의 허락 하에 우버 블로그 포스트인 &#8220;HOW WE BUILT UBER ENGINEERING’S HIGHEST QUERY PER SECOND SERVICE USING GO&#8221;를 번역한 것입니다. 2015년 초에 저희는 한 가지만 하는 (그리고 그 한 가지를 굉장히 잘 하는) geofence &#8230;]]></description>
								<content:encoded><![CDATA[<p>저자: Kai Wei / 번역: 염재현<br />
2016년 2월 24일 작성 / 2016년 3월 8일 번역</p>
<p>원문주소: <a href="https://eng.uber.com/go-geofence/" rel="nofollow">https://eng.uber.com/go-geofence/</a></p>
<p><em>이 글은 원저자인 Kai Wei씨의 허락 하에 우버 블로그 포스트인 &#8220;HOW WE BUILT UBER ENGINEERING’S HIGHEST QUERY PER SECOND SERVICE USING GO&#8221;를 번역한 것입니다.</em></p>
<p><img src="https://eng.uber.com/wp-content/uploads/2016/02/WP_20140823_09_20_45_Pro__highres-edit_small.jpg" alt="enter image description here" /></p>
<p>2015년 초에 저희는 한 가지만 하는 (그리고 그 한 가지를 굉장히 잘 하는) geofence 조회 서비스를 만들었습니다. 한 해가 지나고, 이 서비스는 우버에서 서비스하는 수백개의 서비스 중에서 초당 조회수(QPS)가 가장 높은 서비스가 되었습니다. 왜 저희가 이 서비스를 만들었는지, 그리고 비교적 최근에 태어난 <a href="https://golang.org/">Go 프로그래밍 언어</a>로 어떻게 이렇게 빨리 서비스를 만들고 크게 키울 수 있었는지에 대하여 이야기하려고 합니다.</p>
<h2>배경</h2>
<p>우버에서 <em>geofence</em>는 지구 표면 위에 있는 사람이 정의한(human-defined) 지리적 구역(기하학적 용어로는 다각형)을 뜻합니다. geofence는 우버에서 지리 기반 설정에 광범위하게 사용됩니다. 특정 위치에서 어떤 상품을 이용할 수 있는지를 보여주고, 공항 같은 특별 요구사항이 필요한 지역을 정의하고, 많은 사람들이 동시에 탑승 요청을 하는 동네에서 탄력적인 가격 조정을 구현하기 위하여, 이 서비스는 매우 중요합니다.</p>
<p><img src="https://eng.uber.com/wp-content/uploads/2016/02/geofence-example-1024x796.png" alt="콜로라도에 있는 geofence의 예시" /><br />
<em>콜로라도에 있는 geofence의 예시</em></p>
<p>사용자의 모바일 폰의 <a href="https://ko.wikipedia.org/wiki/%EC%A7%80%EB%A6%AC_%EC%A2%8C%ED%91%9C%EA%B3%84">위도-경도</a> 위치에 따른 설정값을 구하기 위한 첫 번째 단계는 해당 위치가 어떤 geofence에 들어가는지를 찾는 것입니다. 이 기능은 여러 서비스와 모듈에 분산되고 중복되어 있었습니다. 그러나 <a href="https://eng.uber.com/soa/">단일체 구조에서 (마이크로)서비스 기반의 구조로 이전</a>하면서 이 기능을 새 마이크로서비스 하나에 중앙 집중시켰습니다.</p>
<h2>제자리에, 차려, 출발! (Ready, Set, Go!)</h2>
<p>언어들을 평가하고 있을 무렵, 실시간 장터(real-time marketplace) 팀에서 주로 쓰는 프로그래밍 언어가 <a href="https://ko.wikipedia.org/wiki/Node.js">Node.js</a>였으므로 사내에서는 Node.js에 대하여 더 많은 지식이 있었습니다. 그러나 다음과 같은 이유로 Go 언어가 더 적합했습니다!</p>
<ul>
<li><strong>높은 처리량과 낮은 지연 시간.</strong> geofence 조회 서비스는 굉장히 많은(초당 수십만 개) 요청을 하나하나 모두 짧은 시간(백분위로 99%의 요청을 100밀리초 이내)에 처리해야 합니다.</li>
<li><strong>CPU에 집중적으로 걸리는 로드.</strong> geofence 조회 서비스는 CPU가 많이 필요한 <a href="https://en.wikipedia.org/wiki/Point_in_polygon">다각형 내에 있는 점 판별</a> 알고리즘을 풀어야 합니다. Node.js는 입출력(I/O)이 집중적으로 필요한 우버 내의 다른 서비스에는 적합하지만, Node.js의 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%8A%B8_%EC%96%B8%EC%96%B4">인터프리터 방식</a>과 <a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84#.EB.8F.99.EC.A0.81_.EC.A0.95.ED.98.95">동적 정형</a> 때문에 이 경우에 적합하지 않습니다.</li>
<li><strong>백그라운드 로딩의 비방해성(non-disruptive).</strong> 최신의 geofence 자료가 활용되는 것을 보장하려면, 이 서비스는 메모리 상에 있는 geofence 자료를 여러 자료원으로부터 계속해서 백그라운드에서 갱신해 주어야 합니다. Node.js가 <a href="https://en.wikipedia.org/wiki/Thread_%28computing%29#Single_threading">단일 쓰레드</a> 구조이기 때문에, 백그라운드 갱신 중에 CPU를 장기간(예를 들어 CPU가 많이 필요한 <a href="https://ko.wikipedia.org/wiki/JSON">JSON</a> 파싱 같은 작업이 수행되는 기간 동안)에 걸쳐서 붙잡고 있어야 하고, 이것 때문에 조회 요청에 대한 응답 시간이 튀는 현상이 발생합니다. Go 언어에서는 <a href="https://gobyexample.com/goroutines">고루틴</a>들이 여러 CPU 코어에서 실행되어 백그라운드 작업들이 포그라운드의 조회 작업들과 함께 병렬적으로 수행될 수 있기 때문에, 이것이 문제가 되지 않습니다.</li>
</ul>
<h3>위치 색인을 하느냐 마느냐: 그것이 문제로다</h3>
<p>위도-경도 위치가 주어졌을 때, 수만 개의 geofence들 중에서 이것이 어디에 속하는지는 어떻게 찾을 수 있을까요? 무차별 대입(brute-force) 방법은 간단합니다. 모든 geofence에 대하여 다각형 안에 점이 들어가는지를 <a href="https://en.wikipedia.org/wiki/Point_in_polygon#Ray_casting_algorithm">광선 쏘기 알고리즘</a> 등으로 검사하면 됩니다. 그러나 이 방법은 너무 느립니다. 어떻게 하면 효율적으로 탐색 공간을 줄일 수 있을까요?</p>
<p><a href="https://ko.wikipedia.org/wiki/R_%ED%8A%B8%EB%A6%AC">R 트리</a>나 난해한 <a href="http://blog.christianperone.com/2015/08/googles-s2-geometry-on-the-sphere-cells-and-hilbert-curve/">S2</a>로 geofence들을 색인하는 대신에, 저희들은 우버의 사업 모델이 도시 중심적이라는 것에 착안하여 더 단순한 길을 선택했습니다. 사업 규칙(비지니스 룰)이나 그것을 정의하는 geofence는 주로 도시와 연관되어 있습니다. 그래서 도시의 geofence(도시 경계를 정의하는 geofence)를 첫 번째 단계로 두고, 각각의 도시 안에 있는 geofence를 두 번째 단계로 두는 2단계 계층으로 geofence들을 구성했습니다.</p>
<p>각각의 조회 요청에 대하여 선형 탐색(linear scan)으로 먼저 도시의 geofence를 찾고, 그 도시 안에 들어 있는 geofence들을 또 다른 선형 탐색으로 찾습니다. 이 해법의 실행 시간 복잡도는 <a href="https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95">O(N)</a>으로 동일하지만, 이런 단순한 테크닉으로 N이 만 단위에서 백 단위로 줄어들었습니다.</p>
<h2>설계</h2>
<p>저희는 이 서비스를 상태 없이(stateless) 만들어서 각각의 요청을 아무 서비스 인스턴스에서 받아서 처리해도 같은 결과가 나오게 하고 싶었습니다. 이것은 정보를 분할해서 갖고 있는 것이 아니라 인스턴스 하나하나가 지구 전체의 정보를 다 갖고 있어야 한다는 뜻입니다. <a href="https://en.wikipedia.org/wiki/Deterministic_system">결정론적인(deterministic)</a> 폴링 스케쥴을 생성해서 geofence 자료가 다른 서비스 인스턴스들과 동기화 되도록 만들었습니다. 따라서 이 서비스는 설계가 아주 단순합니다. 백그라운드 작업이 주기적으로 geofence 자료를 여러 자료 저장소에서 퍼옵니다. 그 다음 이 자료는 주 기억장치에 저장되어서 조회 요청에 응답하고, 서비스가 재시작했을 때 빨리 일어설 수 있도록 로컬 파일 시스템으로 직렬화됩니다.</p>
<p><img src="https://eng.uber.com/wp-content/uploads/2016/02/go-geofence-service-architecture-1024x621.png" alt="geofence 조회 서비스 설계" /><br />
<em>geofence 조회 서비스 설계</em></p>
<h3>Go 메모리 모델 다루기</h3>
<p>이 설계를 구현하려면 메모리에 있는 지리 색인에 병행적으로 읽기/쓰기 접근이 필요합니다. 특히 백그라운드 폴링 작업은 포그라운드 조회 엔진이 색인에서 읽어오는 동안에 메모리에 씁(write)니다. 단일 쓰레드 기반의 Node.js 세상에서 온 사람들에게 <a href="https://golang.org/ref/mem">Go 메모리 모델</a>은 어렵게 느껴질 수 있었습니다. 고루틴과 <a href="https://gobyexample.com/channels">채널</a>로 병행적으로 읽기/쓰기를 동기화 하는 것이 Go의 특징인데, 이렇게 하면 성능에 부정적인 영향이 있을 것이라는 우려가 있었습니다. <a href="https://golang.org/pkg/sync/atomic/">sync/atomic</a> 패키지에 있는 <em>StorePointer/LoadPointer</em> 같은 저수준 기능을 활용하여 메모리 장벽을 스스로 관리하고자 했으나, 코드가 쉽게 깨지고 유지보수하기 어려워졌습니다.</p>
<p>결국, <a href="https://golang.org/pkg/sync/#RWMutex">읽기/쓰기 잠금(RWLock)</a>을 이용하여 지리 색인으로의 접근을 동기화하는 방식으로 결정했습니다. 잠금(lock)이 서로 충돌하는 것을 최소화하기 위하여, 새로 들어오는 색인 조각들은 따로 만들어진 다음에 주 색인과 원자적으로(atomically) 교환되었습니다. 이렇게 잠금을 사용하니 <em>StorePointer/LoadPointer</em>를 이용했을 때보다 조금 지연 시간이 증가하였지만, 단순하고 유지 보수 가능한 코드 베이스를 위한 약간의 성능 비용은 충분히 낼 가치가 있다고 믿습니다.</p>
<h2>우리의 경험</h2>
<p>뒤돌아 보자면, 저희가 <a href="https://ko.wikipedia.org/wiki/Go_%28%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4%29">Go</a>를 선택하여(Go for it) 새로운 언어로 서비스를 만든 것은 매우 만족스러운 결정이었습니다. 강조드릴 점은:</p>
<ul>
<li><strong>높은 개발자 생산성.</strong> Go 언어는 C++, Java, Node.js 개발자가 배우는데 그저 며칠 정도 밖에 걸리지 않고, 코드를 쉽게 유지 보수할 수 있습니다. (<a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84#.EC.A0.95.EC.A0.81_.EC.A0.95.ED.98.95">정적 정형</a> 덕분에 더 이상 추측을 해야 할 필요도 없고, 불쾌하게 깜짝 놀랄 일도 없습니다.)</li>
<li><strong>높은 처리량과 낮은 지연 시간.</strong> 중국을 제외한 모든 나라에 서비스되는 저희 주 데이터 센터는 2015년말 기준으로 40대의 기계가 35% CPU 사용률을 유지하면서 170k QPS(초당 17만 조회)를 처리하고 있습니다. 백분위로 95%의 요청들이 모두 5밀리초 이내로 처리되고, 99%의 요청들이 모두 50밀리초 이내로 처리됩니다.</li>
<li><strong>초특급 신뢰성.</strong> 이 서비스는 시작된 이후로 99.99%의 가동률을 보이고 있습니다. 유일한 가동중지가 초보적인 프로그래밍 실수와 써드파티 라이브러리에 있던 파일 서술자(file descriptor) 누출 버그로부터 발생했습니다. 중요한 점은, Go 런타임에서는 어떤 문제도 발견할 수 없었다는 것입니다.</li>
</ul>
<h2>앞으로 가야(Go)할 길</h2>
<p>지금까지 우버는 Node.js와 파이썬을 주로 이용해 왔지만, 우버의 새 서비스 중 다수에 Go 언어가 채택되고 있습니다. 우버에서 Go의 기세가 대단하기 때문에, Go 언어의 전문가나 아니면 초보자로 열정이 있으시다면, 저희는 Go 개발자를 <a href="https://www.uber.com/careers/list/?city=all&amp;country=all&amp;keywords=&amp;subteam=all&amp;team=engineering">채용</a>하고 있습니다. <a href="https://en.wikipedia.org/wiki/Oh,_the_Places_You%27ll_Go!">오, 당신이 갈(Go) 그곳들! (Oh, the places you&#8217;ll Go!)</a></p>
<p>사진 출처: &#8220;Golden Gate Gopher&#8221; by Conor Myhrvold, Golden Gate Park, San Francisco.</p>
<p>헤더 설명: <a href="https://blog.golang.org/gopher">고퍼(The Go Gopher)</a>는 &#8220;아이코닉한 마스코트이자 가장 독특한 Go 프로젝트의 특징&#8221;으로 표현된다.</p>
<p>번역: 염재현 (<a href="https://only2sea.wordpress.com/2016/03/08/%EB%94%94%EC%8A%A4%EC%BB%A4%EB%B2%84%EB%A6%AC-go-%EC%96%B8%EC%96%B4-%EC%8B%A4%EC%A0%84%EC%97%90%EC%84%9C-%EC%93%B0%EB%8A%94-go-%EC%96%B8%EC%96%B4%EB%A5%BC-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EA%B0%80/">디스커버리 Go 언어</a> 저자)</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2016/03/08/go-%ec%96%b8%ec%96%b4%eb%a1%9c-%ec%9a%b0%eb%b2%84%ec%97%90%ec%84%9c-%ec%b4%88%eb%8b%b9-%ec%9a%94%ec%b2%ad%ec%88%98%ea%b0%80-%ea%b0%80%ec%9e%a5-%eb%a7%8e%ec%9d%80-%ec%84%9c%eb%b9%84%ec%8a%a4%eb%a5%bc-2/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>

		<media:content url="https://eng.uber.com/wp-content/uploads/2016/02/WP_20140823_09_20_45_Pro__highres-edit_small.jpg" medium="image">
			<media:title type="html">enter image description here</media:title>
		</media:content>

		<media:content url="https://eng.uber.com/wp-content/uploads/2016/02/geofence-example-1024x796.png" medium="image">
			<media:title type="html">콜로라도에 있는 geofence의 예시</media:title>
		</media:content>

		<media:content url="https://eng.uber.com/wp-content/uploads/2016/02/go-geofence-service-architecture-1024x621.png" medium="image">
			<media:title type="html">geofence 조회 서비스 설계</media:title>
		</media:content>
	</item>
		<item>
		<title>디스커버리 Go 언어: 실전에서 쓰는 Go 언어를 배우는 가장 확실한 방법</title>
		<link>https://only2sea.wordpress.com/2016/03/08/%eb%94%94%ec%8a%a4%ec%bb%a4%eb%b2%84%eb%a6%ac-go-%ec%96%b8%ec%96%b4-%ec%8b%a4%ec%a0%84%ec%97%90%ec%84%9c-%ec%93%b0%eb%8a%94-go-%ec%96%b8%ec%96%b4%eb%a5%bc-%eb%b0%b0%ec%9a%b0%eb%8a%94-%ea%b0%80/</link>
				<comments>https://only2sea.wordpress.com/2016/03/08/%eb%94%94%ec%8a%a4%ec%bb%a4%eb%b2%84%eb%a6%ac-go-%ec%96%b8%ec%96%b4-%ec%8b%a4%ec%a0%84%ec%97%90%ec%84%9c-%ec%93%b0%eb%8a%94-go-%ec%96%b8%ec%96%b4%eb%a5%bc-%eb%b0%b0%ec%9a%b0%eb%8a%94-%ea%b0%80/#comments</comments>
				<pubDate>Wed, 09 Mar 2016 05:44:25 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[소프트웨어 엔지니어링]]></category>
		<category><![CDATA[프로그래밍]]></category>
		<category><![CDATA[고]]></category>
		<category><![CDATA[고 언어]]></category>
		<category><![CDATA[Go]]></category>
		<category><![CDATA[golang]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=451</guid>
				<description><![CDATA[실전에서 쓰는 Go 언어를 배우는 가장 확실한 방법! 거의 10달 걸려서 낳은 내 자식 같은 첫 책이 나왔다. 미천한 실력으로 책을 쓰려니 쥐구멍에도 들어가고 싶었지만 읽어본 분들의 평이 좋아서 자신감도 생긴다. 늘상 인터넷에 연결된 시대에 책을 살 이유가 뭘까 고민을 해 봤다. 쉽게 찾을 수 있는 정보들이나 틀리게 하더라도 금방 바로잡을 수 있을 부분들은 빠르게 &#8230;]]></description>
								<content:encoded><![CDATA[<p><strong>실전에서 쓰는 Go 언어를 배우는 가장 확실한 방법!</strong></p>
<p><img src="https://only2sea.files.wordpress.com/2016/03/b_2268.gif?w=1088" alt="디스커버리 Go 언어" /></p>
<p>거의 10달 걸려서 낳은 내 자식 같은 첫 책이 나왔다. 미천한 실력으로 책을 쓰려니 쥐구멍에도 들어가고 싶었지만 읽어본 분들의 평이 좋아서 자신감도 생긴다.</p>
<p>늘상 인터넷에 연결된 시대에 책을 살 이유가 뭘까 고민을 해 봤다. 쉽게 찾을 수 있는 정보들이나 틀리게 하더라도 금방 바로잡을 수 있을 부분들은 빠르게 전개했고 (그래도 리뷰 과정 중에 많이 채워지긴 했다) 혼자서 공부하다 보면 알기 어려운 내용들, 한참 삽질하고서야 알 수 있거나 영영 모를 수 있는 것들을 위주로 324페이지를 구성해서 책 값은 충분히 할 녀석으로 만들기 위해 노력했다. 독자들이 한 단계 업그레이드 되는 기분을 느낄 수 있도록 구성하기 위하여 노력했다.</p>
<p>책 내용에 대해서라면 애프터서비스도 하겠으니 Go 언어에 관심이 없더라도 (내가 내 책에 대해 이런 말 하기 뭐하지만) 읽어볼 만한 책인 것 같다. 아래는 책 구입할 수 있는 링크.</p>
<p><strong>한빛미디어:</strong><br />
<a href="http://www.hanbit.co.kr/book/look.html?isbn=978-89-6848-268-7" rel="nofollow">http://www.hanbit.co.kr/book/look.html?isbn=978-89-6848-268-7</a></p>
<p><strong>교보문고:</strong><br />
<a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#038;mallGb=KOR&#038;barcode=9788968482687&#038;orderClick=LAG&#038;Kc=" rel="nofollow">http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#038;mallGb=KOR&#038;barcode=9788968482687&#038;orderClick=LAG&#038;Kc=</a></p>
<p><strong>강컴닷컴:</strong><br />
<a href="http://www.kangcom.com/sub/view.asp?sku=201603033685" rel="nofollow">http://www.kangcom.com/sub/view.asp?sku=201603033685</a></p>
<p><strong>Yes24:</strong><br />
<a href="http://www.yes24.com/24/goods/24759320" rel="nofollow">http://www.yes24.com/24/goods/24759320</a></p>
<p><strong>알라딘:</strong><br />
<a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=78786120" rel="nofollow">http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=78786120</a></p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2016/03/08/%eb%94%94%ec%8a%a4%ec%bb%a4%eb%b2%84%eb%a6%ac-go-%ec%96%b8%ec%96%b4-%ec%8b%a4%ec%a0%84%ec%97%90%ec%84%9c-%ec%93%b0%eb%8a%94-go-%ec%96%b8%ec%96%b4%eb%a5%bc-%eb%b0%b0%ec%9a%b0%eb%8a%94-%ea%b0%80/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>

		<media:content url="https://only2sea.files.wordpress.com/2016/03/b_2268.gif" medium="image">
			<media:title type="html">디스커버리 Go 언어</media:title>
		</media:content>
	</item>
		<item>
		<title>아톰 적응기 2일차: 스마트 하지 않은 편집기</title>
		<link>https://only2sea.wordpress.com/2016/02/15/%ec%95%84%ed%86%b0-%ec%a0%81%ec%9d%91%ea%b8%b0-2%ec%9d%bc%ec%b0%a8-%ec%8a%a4%eb%a7%88%ed%8a%b8-%ed%95%98%ec%a7%80-%ec%95%8a%ec%9d%80-%ed%8e%b8%ec%a7%91%ea%b8%b0/</link>
				<comments>https://only2sea.wordpress.com/2016/02/15/%ec%95%84%ed%86%b0-%ec%a0%81%ec%9d%91%ea%b8%b0-2%ec%9d%bc%ec%b0%a8-%ec%8a%a4%eb%a7%88%ed%8a%b8-%ed%95%98%ec%a7%80-%ec%95%8a%ec%9d%80-%ed%8e%b8%ec%a7%91%ea%b8%b0/#comments</comments>
				<pubDate>Tue, 16 Feb 2016 06:32:40 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[소프트웨어 엔지니어의 연장]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=427</guid>
				<description><![CDATA[편집기를 제대로 배워보기로 마음을 먹었으면 제대로 사용해 봐야겠기에 2일차 시도를 해 보았다. Git Plus 사용 일단 git에 물려서 사용을 하려고 하니 쉽지 않았다. 패키지 검색을 해 보니 git-plus라는 인기 있는 패키지가 있었다. 이상하게도 제대로 설치가 되지 않고 실패했다. 아톰을 전부 닫고 다시 들어와서 설치를 시도하니 제대로 되었다. 그런데 현재 설치되어 있는 패키지 목록이 제대로 안 &#8230;]]></description>
								<content:encoded><![CDATA[<p>편집기를 제대로 배워보기로 마음을 먹었으면 제대로 사용해 봐야겠기에 2일차 시도를 해 보았다.</p>
<h2>Git Plus 사용</h2>
<p>일단 git에 물려서 사용을 하려고 하니 쉽지 않았다. 패키지 검색을 해 보니 git-plus라는 인기 있는 패키지가 있었다. 이상하게도 제대로 설치가 되지 않고 실패했다. 아톰을 전부 닫고 다시 들어와서 설치를 시도하니 제대로 되었다. 그런데 현재 설치되어 있는 패키지 목록이 제대로 안 나오고 멈춰 있다. 안정적으로 동작하지 않아서 굉장히 거슬린다.</p>
<p>이제 깃헙에서 클론을 해 오려고 하는데, 클론을 하는 방법이 없는 듯 하다. 그냥 이맥스로 가서 클론을 했다. 디렉토리가 생기자마자 바로 트리는 생겼다.</p>
<p>현재 상태가 어떤지 눈에 잘 띄지는 않았지만 작성하는 코드의 왼쪽에 노란색 혹은 녹색으로 표시를 해 주고 있었다. 녹색은 새로 추가된 줄, 노란색은 편집된 줄에 표시되었다.</p>
<p>Add나 Commit도 별 문제 없이 되었다. Add는 현재 편집하고 있는 파일을 추가하는 방식으로 직관적으로 동작하는 것 같았다. 문제는 왼쪽 파일 목록에 아무런 변화가 없다는 점이다. Add를 하기 전과 후 모두 파일에 칠해진 색깔은 동일했다. Commit은 새로 창이 하나 떠서 로그를 입력한 뒤에 저장 버튼을 누르니 알아서 커밋이 되었다.</p>
<p>그럭저럭 동작은 하는데 복원을 해야 할 때는 어떻게 해야할 지 감이 잡히지 않았다. 로그 보는 메뉴는 훌륭했으나 눌러도 응답이 없어서 한 번 더 누르니 파일 뷰가 둘이 되었다. 천천히 누르면 파일 뷰가 하나만 존재한다. 느리면서도 경쟁 상태(Race Condition)에 쉽게 빠졌다.</p>
<p>그리고 푸쉬를 했다. 나는 푸쉬가 제대로 된 줄 알았다. 왜냐하면 아무런 오류 메시지도 없이 푸쉬가 된 것처럼 나왔다. 그런데 사실 푸쉬가 되지 않았다. 어떤 메시지를 출력하면서 git 명령이 수행되었는지 알아볼 수 있는 방법이 별로 없었다.</p>
<p>결국 이맥스로 가서 푸쉬를 했다. 평소 이맥스에서 잘 하지 않던 마크다운 편집을 아톰에서 하고 있는데 이마저도 쉽지 않다.</p>
<h2>Auto Flow 사용</h2>
<p>기본으로 설치된 Auto Flow라는 패키지가 있었다. 부드러운 줄바꿈(Soft Line Wrapping) 대신에 강제 줄바꿈(Hard Line Wrapping)을 이용하기 위해 사용한다. 수동으로 줄바꿈 할 필요가 없다. 단축키도 이맥스의 <code>Alt+Q</code>와 비슷한 <code>Ctrl+Alt+Q</code>였기 때문에 기대하면서 기능을 동작시켰3다.</p>
<p>그러나 사용하자마자 바로 실망했다. 이것은 멍청한 방식으로 동작했다. 마크다운에서 불릿 리스트로 표현된 것들이 있을 때, 이 기능은 여러 불릿들을 하나로 다 합쳐 버리는 바보 같은 짓을 했다. 그러니까 이것은 전혀 똑똑한 편집기가 아니다. 아무 것도 이해하지 못하고 있는 것이다.</p>
<p>혹시 소스 코드도 이것이 제대로 동작하지 않는 문제가 있는지 궁금해졌다. C++ 파일을 하나 만든 뒤에 주석을 한 줄에 길게 쓰고 이 기능을 동작시켰다. 다행히도 줄 바꿈을 하면서 다음 줄에도 //를 넣어 주었다. 이것을 제대로 처리해 준다는 것은 참 다행이다. 그런데, 갑자기 위화감이 들었다. 이거 그냥 아무 생각없이 문맥 상관없이 이렇게 동작하는 것 아닌가 하는 생각이 들었다.</p>
<p>다시 마크다운 파일로 돌아가서 C++ 스타일의 //로 시작하는 주석을 만든 다음에 자동 줄바꿈 기능을 동작시켰다. 마크다운임에도 불구하고 마치 C++인 양 동작하였다. 이러면 안 되는데 말이다. 주석 시작을 #으로 해도 동작하였다. 물론 많은 스크립트 언어들이 이것을 주석으로 사용하기 때문에 이렇게 하는 것은 이해가 간다. 그러면 이제 마크다운에서 #을 쓴 다음에 내용을 길게 썼다. 마크다운에서 이것은 헤더를 의미한다. 따라서 여기서 Auto Flow를 동작 시켰을 때 마치 주석인 것처럼 처리해서는 안 된다. 그렇게 하면 헤더 내용이 2개의 헤더로 분리된다. 기도하는 마음으로 기능을 동작시켰다. 편집기는 멍청했다. 마크다운을 마치 쉘 스크립트 코드인 양, 주석 줄 나누기를 시전했다. C++ 코드에 가서 이것을 해도 마찬가지였다.</p>
<p>그러니까 대충 주석에서 동작하도록 땜질을 해 놓은 것이다. 전혀 현재 어떤 파일을 편집하고 있는지에 대한 이해가 없었다. 이래서는 제대로 된 포부를 가진 편집기라고 할 수 없다. 그냥 약간 발전된 메모장이라고 할 수 밖에.</p>
<p>내 생각에 아톰의 패키지끼리 서로 간섭을 할 수 없는 모양이다. 철저하게 독립적으로 동작하는 모양새이고, 스마트하지 않다. 결국 줄 나누기를 하기 위하여 이맥스를 쓸 수 밖에 없었다.</p>
<h2>다시 매뉴얼 읽기</h2>
<p>이 편집기 칭찬을 하고 싶어도 칭찬 하기가 매우 어렵다. 매뉴얼을 다시 읽어 보았다. 며칠 사이에 1.5.1에서 1.5.3으로 두 단계나 건너 뛰었는데 매뉴얼 목차 이상하게 꼬여 있는 것은 여전하다.</p>
<p>자동 완성 부분을 읽어보니, 이 기능은 <code>autocomplete-plus</code>에서 제공된다고 한다. 해당 패키지를 아톰 편집기 내부에서 찾았지만, 검색되지 않았다. 설치된 패키지 목록에서 찾아보니 있었다. 이상한 점은 <code>autoflow</code> 같은 패키지는 기본으로 제공되는 패키지임에도 설치할 패키지를 찾는 검색창에서 검색을 하면 검색이 되고, 이미 설치되어 있다고 표시되어 있었다. 그러나 <code>autocomplete-plus</code>는 설치할 패키지를 찾는 검색창에서는 검색이 되지 않고, 설치된 패키지 목록에서만 볼 수 있었다. 두 패키지 모두 github에서 관리되고 atom.io/packages 아래의 웹 페이지에서 찾을 수 있었다. 도대체 둘의 차이가 무엇이길래, 다른 결과가 나오는지 궁금하고, 여러모로 신뢰가 안 가는 편집기다.</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2016/02/15/%ec%95%84%ed%86%b0-%ec%a0%81%ec%9d%91%ea%b8%b0-2%ec%9d%bc%ec%b0%a8-%ec%8a%a4%eb%a7%88%ed%8a%b8-%ed%95%98%ec%a7%80-%ec%95%8a%ec%9d%80-%ed%8e%b8%ec%a7%91%ea%b8%b0/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>What is Learning: 첫째 주</title>
		<link>https://only2sea.wordpress.com/2016/02/15/what-is-learning-%ec%b2%ab%ec%a7%b8-%ec%a3%bc/</link>
				<comments>https://only2sea.wordpress.com/2016/02/15/what-is-learning-%ec%b2%ab%ec%a7%b8-%ec%a3%bc/#respond</comments>
				<pubDate>Tue, 16 Feb 2016 06:13:55 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[학습]]></category>
		<category><![CDATA[What is Learning]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=423</guid>
				<description><![CDATA[바바라 오클리 여사의 What is Learning 강의를 들으면서 1주차 내용으로 배운 점을 간단히 요약을 해 보려고 한다. 뇌의 2가지 모드 뇌는 집중 모드(focused mode)와 확산 모드(diffused mode)로 구분한다. 여기서는 뇌를 핀볼 기계에 비유하였다. 핀볼 기계는 쇠구슬을 이리저리 튀겨 내면서 노는 게임기다. 집중 모드는 핀볼 기계의 고무 핀들이 조밀하게 박혀 있는 상태라 생각하면 되고, 쇠구슬이 서로 &#8230;]]></description>
								<content:encoded><![CDATA[<p>바바라 오클리 여사의 <a href="https://www.coursera.org/learn/learning-how-to-learn">What is Learning</a> 강의를 들으면서 1주차 내용으로 배운 점을 간단히 요약을 해 보려고 한다.</p>
<h2>뇌의 2가지 모드</h2>
<p>뇌는 집중 모드(focused mode)와 확산 모드(diffused mode)로 구분한다. 여기서는 뇌를 핀볼 기계에 비유하였다. 핀볼 기계는 쇠구슬을 이리저리 튀겨 내면서 노는 게임기다.</p>
<ul>
<li>집중 모드는 핀볼 기계의 고무 핀들이 조밀하게 박혀 있는 상태라 생각하면 되고, 쇠구슬이 서로 가까운 고무 핀들과 부딪히며 좁은 범위에서 움직이게 된다.</li>
<li>확산 모드는 핀볼 기계의 고무 핀들이 듬성듬성 박혀 있는 상태라 생각하면 되고, 쇠구슬이 서로 멀리 있는 고무 핀들과 부딪히며 넓은 범위에서 움직이게 된다.</li>
</ul>
<p>집중 모드는 이미 알고 있는 내용을 논리적이고 순차적으로 풀 때 유용한 모드이고, 확산 모드는 창의적인 사고를 하거나 잘 모르는 것을 새로 배우고자 할 때 유용한 모드이다. 이 두 모드 사이를 왔다 갔다 하면서 학습을 하는 것이 효과가 좋다.</p>
<h2>단기 기억과 장기 기억</h2>
<p>뇌에는 단기 기억(Short-term Memory)과 장기 기억(Long-term Memory)을 관장하는 부위가 있다. 단기 기억을 작업 기억(Working Memory)라고 부른다.</p>
<p>단기 기억을 하기 위한 기억 장소는 좁은 부위에 분포하며 품질 나쁜 칠판과 같아서 계속 반복해서 되뇌지 않으면 금방 흐릿해지고 잊어버린다. 장기 기억 장소는 마치 창고와 같다. 장기 기억을 위한 장소는 뇌의 여러 부위에 분산되어 있다.</p>
<p>단기 기억을 장기 기억으로 옮기기 위해서는 꾸준히 계속 반복해서 학습해 주어야 한다. 하루에 여러 번 반복하는 것보다 기간을 두고 반복하는 것이 더 효과적이다. 하루에 같은 내용을 100번 읽는 것보다 여러 날 나누어서 반복해야 한다는 것이다.</p>
<h2>잠의 효능</h2>
<p>우리가 의식을 가지고 있을 때, 전두엽이 뇌를 통제하게 된다. 잠을 자게 되면 뇌의 다른 부위들이 전두엽의 통제에서 벗어나서 자유롭게 대화하고 서로 뉴런들을 연결하게 된다.</p>
<p>잠을 자면 불필요한 기억은 지우고 필요한 기억은 장기 기억 장소에 더 강하게 기억시킨다. 따라서 잠을 자지 않으면 학습 효과가 떨어진다.</p>
<p>잠이 깬 상태에서는 뇌에 독성 물질이 퍼진다. 잠을 자면 뇌 세포가 줄어들어 통로가 넓어지고, 이곳에 흐름이 생겨서 뇌의 독성 물질들이 제거될 수 있다.</p>
<h2>운동의 효능</h2>
<p>운동을 하면 새로운 뇌신경이 생긴다. 이것은 어른들도 마찬가지다. 학교에서 체육 시간을 줄이는 것은 학습에 나쁜 영향을 준다.</p>
<p>가벼운 산책이나 샤워를 하는 활동들도 뇌의 상태를 확산 모드로 바꾸어 준다.</p>
<p>다른 사람과 함께 활동하면서 받은 자극도 학습에 도움이 된다.</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2016/02/15/what-is-learning-%ec%b2%ab%ec%a7%b8-%ec%a3%bc/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
		<item>
		<title>아톰 적응기 1일차: 문제점 많은 편집기</title>
		<link>https://only2sea.wordpress.com/2016/02/11/%ec%95%84%ed%86%b0-%ec%a0%81%ec%9d%91%ea%b8%b0-1%ec%9d%bc%ec%b0%a8-%eb%ac%b8%ec%a0%9c%ec%a0%90-%eb%a7%8e%ec%9d%80-%ed%8e%b8%ec%a7%91%ea%b8%b0/</link>
				<comments>https://only2sea.wordpress.com/2016/02/11/%ec%95%84%ed%86%b0-%ec%a0%81%ec%9d%91%ea%b8%b0-1%ec%9d%bc%ec%b0%a8-%eb%ac%b8%ec%a0%9c%ec%a0%90-%eb%a7%8e%ec%9d%80-%ed%8e%b8%ec%a7%91%ea%b8%b0/#comments</comments>
				<pubDate>Thu, 11 Feb 2016 18:16:54 +0000</pubDate>
		<dc:creator><![CDATA[only2sea]]></dc:creator>
				<category><![CDATA[소프트웨어 엔지니어의 연장]]></category>

		<guid isPermaLink="false">http://only2sea.wordpress.com/?p=408</guid>
				<description><![CDATA[이맥스(Emacs)를 쓰다가 아톰(Atom) 편집기로 넘어온 아톰 초보의 경험을 글로 정리해 보고자 한다. 아톰으로 넘어온 첫 날. 편집기 안에서 해결하기 나는 이맥스 사용자로서 모든 것을 편집기 안에서 해결하려는 이상한 습성이 있다. 일단 browser-plus라는 확장을 설치하였다. 정상적이지 않은 사용자로 보일지도 모르겠지만 워드프레스에 글을 쓰는 것도 편집기 안에서 해야 된다는 생각이 들어서다. 설치 즉시 Ctrl+Alt+O를 누르면 이제 편집기 &#8230;]]></description>
								<content:encoded><![CDATA[<p><a href="https://www.gnu.org/software/emacs/">이맥스(Emacs)</a>를 쓰다가 <a href="https://atom.io/">아톰(Atom)</a> 편집기로 넘어온 아톰 초보의 경험을 글로 정리해 보고자 한다. 아톰으로 넘어온 첫 날.</p>
<h2>편집기 안에서 해결하기</h2>
<p>나는 이맥스 사용자로서 모든 것을 편집기 안에서 해결하려는 이상한 습성이 있다. 일단 <a href="https://atom.io/packages/browser-plus">browser-plus</a>라는 확장을 설치하였다. 정상적이지 않은 사용자로 보일지도 모르겠지만 워드프레스에 글을 쓰는 것도 편집기 안에서 해야 된다는 생각이 들어서다. 설치 즉시 <code>Ctrl+Alt+O</code>를 누르면 이제 편집기 안에서 브라우저가 열린다. 이맥스에서는 <a href="https://www.emacswiki.org/emacs/emacs-w3m">w3m-emacs</a> 혹은 <a href="https://www.google.com/search?as_q=eww%20emacs&amp;gfe_rd=ssl&amp;ei=DMW8VomlA-SD8QfJ-aiABQ">eww</a>이용해서 브라우징을 하기도 했지만 자바스크립트가 많이 들어간 복잡한 웹사이트는 이용할 수 없는 시대에 뒤떨어진 점이 분명 있었다. 이제 그럴 걱정 없을 거라고 생각했지만 뭔가 현실은 다르다.</p>
<p>브라우저가 편집기에 붙어 있기는 하지만 이것이 편집기의 인터페이스와 결합이 되어 있지 않다. 당연한 얘기겠지만 워드프레스를 편집기 내에서 연 다음에 글을 작성하다가 줄 끝에 있는 공백 제거 같은 기능들을 수행한다고 해도 워드프레스 내에서 내가 작성하던 글의 마지막 공백 문자가 지워지거나 하는 일을 일어나지 않았다. 텍스트들을 영역 설정한 뒤에 해도 마찬가지였다. 내가 너무 마법을 바랬던 것일까? 게다가 더 큰 문제점은 편집기 단축키 때문에 워드프레스 단축키들이 동작하지 않는 경우들이 생긴다는 것이다. 그리고 크롬 브라우저의 확장 기능들을 설치하지도 못할 것이다.</p>
<p>좋은 점은 겨우 편집기 안에서 탭을 이동하는 방식으로 분서와 텍스트 편집 탭을 쉽게 이동할 수 있고, 한 쪽에 문서를 띄워놓고 코딩을 할 수 있으며, 외부 브라우저를 아예 닫아 버린다면 메모리를 아낄 수 있다는 것 정도일 것이다.</p>
<p>이제 편집기를 배워보려고 Help 메뉴에 있는 Documentation을 선택해 보았다. 문서가 열린다. 그런데 외부 브라우저에 열린다.</p>
<p>이맥스 사용자로 중요한 점 중에 하나는 편집기 안에서 모든 일을 해결할 수 있는 점이다. 이것은 이맥스 뿐만 아니라 과거의 볼란드 IDE 등 많은 IDE들이 지원하던 것들이다. 물론 그 때는 도스(DOS) 시절이어서 앱 전환이 안 되었기 때문에 관련 문서나 튜토리얼들이 편집기 안에서 수행될 수 밖에 없었다. 이맥스가 편집기 안에서 튜토리얼이나 도움말을 모두 볼 수 있게 되어 있는 것도 구닥다리 시대적 유물인지도 모른다. 그러나 어쨌든 편집기에 대해서 배우는 것을 외부 브라우저를 통해서 보게 되어 있는 점은 아톰이라는 편집기가 이맥스적인 것들을 현대적으로 구현하려 했지만 여전히 꽤 다른 철학을 갖고 있을지도 모른다는 생각이 든다.</p>
<p>마음을 가다듬고 너무 사소한 것이 불만 갖지 말자. 어쨌든 다시 그 매뉴얼을 억지로 편집기 안에 browser-plus 탭을 하나 만들어서 연다. 그래. 나는 이런 사람이다.</p>
<h2>튜토리얼</h2>
<p>튜토리얼을 읽어보니 Why Atom으로 시작하는 첫 부분은 내가 생각하고 있는 철학과 비슷했다. 커스터마이징이 가능한 편집기를 만들면서도 편리한 사용자 인터페이스를 위하여 편집기를 웹앱으로 만들지 않고 브라우저로 만들고 그 안에서 각종 확장 기능들이 동작하는 방식으로 이 부분은 내가 원하는 방향과 완전히 맞아 들어갔다. 아마도 방금 내가 겪은 어려움은 처음 시작하는 사람에게는 오히려 편리한 것이라 생각한다. 편집기 안에서 튜토리얼이 뜨는 것을 불편하게 여기는 사람이 많을 것이다.</p>
<p>내용 부분을 버퍼라고 부르는데 이것은 이맥스 용어와 동일하다. 디렉토리 하나당 창이 하나씩 열리는 구조인 듯 하다. 프로젝트 디렉토리 하나를 통째로 두고 사용하면 되는데, 프로젝트 내에서 파일을 찾는 것은 편리하다. 프로젝트 크기가 매우 큰 경우에는 어떻게 될지 아직 시험해 보지 않았다.</p>
<h2>꼼꼼하지 못한 수많은 버그</h2>
<p>리눅스용에서만 생기는 문제일지 모르겠는데 굉장히 불편한 문제를 발견했다. 텍스트 편집을 하지 않는 다른 탭(예를 들어 Welcome 탭이나 브라우저 탭)으로 이동한 뒤 다시 텍스트 편집 탭으로 돌아왔을 때, 커서가 사라져서 마우스로 텍스트 부분을 클릭해 주어야 한다는 점이었다. 마우스로 클릭하여 다른 탭으로 갔다가 온 경우는 이 문제가 발생하지 않는다. 그러나 키보드 단축키 <code>Ctrl+Tab</code>이나 <code>Ctrl+PgUp/PgDn</code>키 혹은 <code>Alt+숫자</code>를 이용하여 탭을 이동하면 커서가 사라진다. 키보드만으로 편집기를 사용하고자 하는 사람에게 이런 점은 굉장히 불편하고 짜증스러운 일이다.</p>
<p>패키지를 설치를 하였는데 제대로 로딩이 안 되는 문제도 있다. <a href="https://ko.wikipedia.org/wiki/경쟁_상태">경쟁 상태(Race Condition)</a>에 빠진 건지 될 때도 있고 안 될 때도 있고 하면서 꼬였다. 무엇보다도 메시지들이 모두 출력되는 메시지 버퍼가 없어서 무슨 일이 일어나고 있는지 숨겨져 있어서 매우 불편했다. <code>apm</code>으로 패키지를 설치를 했는데 제대로 안 되는 경우라거나 로딩 중에 멈춰 있는데 이유를 알기 어려웠다. 문제가 있는 해당 패키지를 지워도 문제가 사라지지 않고 한번 꼬이면 모든 패키지를 다 지우고 몇 번 재시작해야 문제가 풀렸다.</p>
<p>편집기를 바꿀 때, 기존의 편집기에서 잘 활용하던 기능을 이용하기보다는 자주 사용하지 않거나 새 편집기에서 잘 할 수 있는 것 위주로 사용하면 바꾸기 편리하다. 그래서 아톰 편집기를 <a href="https://ko.wikipedia.org/wiki/마크다운">마크다운</a> 편집기로 쓰기로 했다. 이맥스로도 실시간 미리보기를 보면서 마크다운 편집을 할 수 있지만 <a href="https://www.emacswiki.org/emacs/MarkdownPreviewMode">markdown-preview-mode</a> 패키지를 설치해야 하는 반면에, 아톰에서는 기본으로 이 기능을 제공해 주기 때문이다. 그런데 얼마 쓰지 않아서 금방 버그를 발견했다.</p>
<p>볼드를 하기 위해서는 <code>**볼드**</code>와 같이 양 옆에 별표를 둘 붙여 주어야 한다. 마크다운에서 이것은 반드시 단어의 첫 부분에서 시작하고 단어의 끝 부분에서 끝나야 하는 것은 아니다. 그래서 <code>**마크다운**을</code>과 같이 마크다운이라는 단어만 강조할 때, 마크다운 네 글자만 볼드 처리가 되어야 한다. 물론 마크다운 엔진의 문제는 없어서 미리보기 화면에서는 제대로 나오는데 문법 강조(Syntax Highlighting) 기능이 오동작해서 볼드 영역이 끝나지 않는다. 문서 끝까지 볼드가 된다. 그냥 편집 화면에서 눈으로 보기에만 있는 문제지만 여전히 문제다. 버그 리포팅을 했는데, 이런 굉장히 기본적인 것부터 버그가 많아서 쓰는 내내 불편하고 불안했다.</p>
<p>버그라고 하긴 뭣하지만 <code>Ctrl+M</code>을 이용하여 짝 맞는 괄호를 왔다갔다 이동할 때 불편한 점이 있다. <code>(a)(b)(c)(d)</code> 이렇게 되어 있는 텍스트에서 맨 처음에 커서를 놓고 이 단축키를 반복적으로 누르면 맨 뒤로 가 버린다. 왜 그런지 이유는 알겠는데, 이맥스의 <code>Ctrl+Alt+F</code>와 <code>Ctrl+Alt+B</code>와 비교하면 불편했다.</p>
<p>매뉴얼은 뭔가 꼬여있고 지저분했다. 1장 1절의 Why Atom의 경우에는 왼쪽에 목차에 나타나지도 않고 다른 문서들이 목차에 나타났다. 매뉴얼 웹 사이트를 돌아다니다보면 온갖 버그와 꼬여있는 부분들이 많았다. 페이지를 넘기는데 버전이 달라지기도 하고 일관성이 없게 되어 있다. 솔직히 말해서 엉망이다. 미완성인 부분이 많은 사람과 일하는 것은 괜찮은데, 이런 식으로 꼬여있는 부분에서 꼼꼼하지 않은 사람과 일하는 것이 참 불편한데 딱 그 느낌이다.</p>
<h2>일관성 없는 인터페이스</h2>
<p>그러나 가장 큰 문제는 패키지들의 인터페이스에 있다. 현재 커서가 놓여 있는 함수의 선언/정의 부분으로 가려면 <code>Symbols View: Go to declaration</code> 기능을 사용하면 된다. 단축키는 <code>Ctrl(Cmd)+Alt+Down</code>이다. 그런데 <a href="https://golang.org/">고(Go)</a> 코드에서는 이것이 동작하지 않았다. 그래서 살펴보니 <a href="https://atom.io/packages/go-plus">go-plus</a>라는 패키지를 설치하면 <a href="https://github.com/rogpeppe/godef">godef</a> 등 다른 도구를 이용하여 이것을 동작하게 해 준다. 설치하고 나서 다시 <code>Go to declaration</code>을 해 보니 여전히 동작하지 않았다. 선언/정의로 가려면 <code>Golang Godef</code>라는 다른 기능을 사용해야 한다! 단축키도 다르다. <code>Alt+Cmd+G</code>이다. 그렇다는 말은 패키지를 새로 설치할 때마다 새 패키지의 사용법을 배워야 한다는 것이다!</p>
<p>이것은 심각한 문제다. 이맥스를 쓸 때 좋은 점은 배우는데 시간이 적게 든다는 것이다. 배우는데 시간이 많이 걸릴 것 같은데 적게 걸린다는 말은 무엇인가? 이것은 마치 새로운 한자를 배울 때 시간이 적게 걸리는 것과 비슷할지도 모르겠다. 이맥스에서 버퍼를 읽기 전용과 쓰기가 가능한 상태로 바꾸는 단축키는 <code>Ctrl+X Ctrl+Q</code>이다. 그러면 파일 목록을 열어온 상태라고 하자. 여기서 현재 커서가 놓여져 있는 파일 이름을 변경하는 <code>R</code>이라는 단축키가 있지만 사실 <code>Ctrl+X Ctrl+Q</code>를 눌러서 현재 버퍼를 편집 가능한 상태로 바꾼 뒤에 파일 이름을 텍스트 편집하듯이 하면 된다. 그리고 저장하기 단축키를 누르면 파일 이름 변경이 적용이 된다. 다음 문장으로 건너 뛰는 단축키가 프로그램 소스 코드에서는 다음 명령으로 건너 뛰는 기능으로 변경된다. 텍스트에서 이전 문장과 이후 문장을 바꾸는 명령은 프로그램 소스 코드에서 이전 명령과 이후 명령을 바꾸는 기능으로 둔갑하며, 텍스트에서 단어의 위치를 바꾸는 명령은 프로그램 소스 코드에서 함수 호출 시 매개 변수의 위치를 바꾸는 기능으로 탈바꿈한다. 그렇기 때문에 이맥스를 사용할 수 있으면 새로운 패키지에서도 이전에 쓰던 단축키를 다르게 동작하지만 개념상으로는 같은 기능들을 직관적으로 사용할 수 있다. 직접 단축키를 할당하고 새로운 기능을 개인적으로 추가하는 과정에서도 처음에는 기능들을 잘 몰라서 새로운 단축키를 만들었다가 해당 기능이 필요한 문맥에서 이미 있는 다른 기능을 개념적으로 대체하는 경우라면 이것들의 기능을 합치는 과정을 거치다보면 단축키의 갯수는 늘어나지 않는다. 그러나 아톰 편집기의 패키지들이 이런 식이면 패키지 하나마다 사용법을 따로 배워야 한다는 것이다. 패키지가 다른 패키지와 협력할 수 없는 것이라면 이것은 매우 안타까운 일이다. 그런데 자바스크립트의 세계에서는 분명 이것이 가능하기 때문에 이 문제가 그저 <code>go-plus</code> 패키지를 만든 사람이 제대로 못 만들어서 발생한 결과이길 바란다.</p>
<p>그러니까 이맥스의 세계가 물리학에서 말하는 <a href="https://namu.wiki/w/통일장%20이론">통일장 이론</a>으로 최대한 나아가려는 노력을 하고 있다면, 아톰은 그런 거 없다.</p>
<p>다른 매우 불편한 점은 매뉴얼에 단축키 설명은 되어 있지만 기능 이름이 무엇인지는 전혀 설명하고 있지 않다는 점이다. 맥 기준으로 단축키가 설명되어 있어서 맥이 아닌 경우에는 해당 기능의 단축키를 찾아 봐야 하는데 기능의 이름을 모르니 커맨드 팔레트에서 이름을 찾을 수가 없다. 웹 검색을 통하여 커맨드 이름을 하나하나 알아내야 했다.</p>
<p>예를 들어서 영역 설정한 곳에서 커서를 여럿 보여주는 기능이다. 다음과 같이 나와 있다.</p>
<blockquote><p>
  <code>cmd-shift-L</code> Convert a multi-line selection into multiple cursors
</p></blockquote>
<p>근데 리눅스에서 단축키는 저것이 아니기 때문에 찾아내려고 했는데 찾지 못했다. 그러면 어떤 커맨드인지는 알아야 할 것 아닌가? 커맨드 팔레트를 연 다음에 convert, multi, cursor 등으로 열심히 찾았는데 찾는 것에 실패했다. 열심히 웹 검색을 해서 해당 커맨드가 <code>editor:split-selections-into-lines</code>라는 것을 알아냈다. 전부 이런 식이니 미칠 노릇이다. 이맥스에서는 상상도 할 수 없는 일이다.</p>
<p>일단 매뉴얼에 커맨드 이름이 뭔지는 반드시 알려주고 거기에 바인딩 되어 있는 단축키를 알려 줘야 한다는 생각이 든다. 그리고 어떤 단축키를 눌렀을 때 어떤 커맨드가 실행되는지 찾을 수 있는 방법이 없다. 커맨드 팔레트는 단축키로 검색할 수는 없다.</p>
<h2>좋은 점</h2>
<p><code>Ctrl+T</code> 및 <code>Ctrl+B</code>를 누르면 나오는 <code>Fuzzy Finder</code> 기능은 꽤 훌륭했다. 비교적 빠르고 편리하게 동작한다.</p>
<h2>아톰과 하루를 보내고</h2>
<p>그러고 보니 이맥스는 참 훌륭한 편집기다. 수십년 동안 개발되어 온 편집기를 무시할 수는 없는 노릇이다. 그러나 앞으로 점점 지는 해가 될 편집기보다는 새로 떠오르는 편집기를 열심히 사용해 보겠다는 마음가짐으로 그리고 좋은 점도 있다는 것을 생각하고 계속 적응해 봐야겠다.</p>
]]></content:encoded>
							<wfw:commentRss>https://only2sea.wordpress.com/2016/02/11/%ec%95%84%ed%86%b0-%ec%a0%81%ec%9d%91%ea%b8%b0-1%ec%9d%bc%ec%b0%a8-%eb%ac%b8%ec%a0%9c%ec%a0%90-%eb%a7%8e%ec%9d%80-%ed%8e%b8%ec%a7%91%ea%b8%b0/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
						
		<media:content url="https://0.gravatar.com/avatar/cf9e7056794e8f058299fbf3ec62965f?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">only2sea</media:title>
		</media:content>
	</item>
	</channel>
</rss>
