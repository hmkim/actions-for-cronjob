<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Jae Sung Park on Medium]]></title>
        <description><![CDATA[Stories by Jae Sung Park on Medium]]></description>
        <link>https://medium.com/@alberto.park?source=rss-86b93c8635b9------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*RrbwWI8eZ2X8N0mkjkOfsw.jpeg</url>
            <title>Stories by Jae Sung Park on Medium</title>
            <link>https://medium.com/@alberto.park?source=rss-86b93c8635b9------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 10:47:24 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@alberto.park" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[billboard.js 1.8.0 released today!]]></title>
            <link>https://medium.com/@alberto.park/billboard-js-1-8-0-released-today-3ed432f2d9d4?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/3ed432f2d9d4</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[data-visualization]]></category>
            <category><![CDATA[charts]]></category>
            <category><![CDATA[d3js]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Fri, 15 Mar 2019 08:01:39 GMT</pubDate>
            <atom:updated>2019-03-21T02:10:57.500Z</atom:updated>
            <content:encoded><![CDATA[<h3>The chart library: billboard.js 1.8.0 released today!</h3><p>Super excited announce the new release of the billboard.js today!</p><p>This release includes 6 new features and 17 bug fixes,.</p><blockquote>For the detailed release info, please checkout the release note:<br><a href="https://github.com/naver/billboard.js/releases/tag/1.8.0">https://github.com/naver/billboard.js/releases/tag/1.8.0</a></blockquote><h3>What’s New from the release?</h3><h4>Let’s change color when is over!</h4><p>To indicate current data selection, vertical focus line is well enough in all circumstances. But sometimes you want to emphasize to show clear indication applying some color changes at chart elements(when it goes to mobile environment, this can be more useful because of the touch based interaction).</p><p>To facilitate these tasks, <strong><em>color.onover</em></strong> option is introduced from this release.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#ChartOptions.ColorOnover">https://naver.github.io/billboard.js/demo/#ChartOptions.ColorOnover</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/370/1*pzGjqcrAMWJU_dtJA1sUTQ.gif" /><figcaption>color.onover in action</figcaption></figure><p>This option allows updating data element’s color and is fully configurable.</p><pre>// set all data to &#39;red&#39;<br>onover: &quot;red&quot;,</pre><pre>// set different color for data<br>onover: {<br>    data1: &quot;red&quot;,<br>    data2: &quot;yellow&quot;<br>},</pre><pre>// will pass data object to the callback<br>onover: function(d) {<br>    return d.id === &quot;data1&quot; ? &quot;red&quot; : &quot;green&quot;;<br>}</pre><h4>Full display control for axis tick</h4><p>In most circumstances, axis are shown as is, but sometimes there’re needs to customize the display of each parts.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Axis.HideTickLineText">https://naver.github.io/billboard.js/demo/#Axis.HideTickLineText</a></blockquote><p>One real example will be using ‘subchart’. From the below screenshot, you might want to get rid the subchart axis texts. Because they’re not really useful.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/652/1*3fZ7LkVoSZ28KdvB29vMLA.png" /></figure><p>Even isn’t provided an option, the displaying of the elements can be controlled by CSS. But in this case isn’t helpful, giving a gap between legend elements.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/374/1*bvXjBNRu5iVXSSiT4yh9fg.png" /></figure><p>To solve this issue, and will be helpful for some circumstances, added new axis tick display control option.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/298/1*HnqMBZsYlShKKB3Ubqg9HA.png" /><figcaption>Tick composition</figcaption></figure><p>This option let control the visibility of the tick(the line) and tick text.</p><pre><br>x: {  // same for &#39;x&#39;, &#39;y&#39;, &#39;y2&#39; and subchart axis<br>	tick: {<br>		show: true,  // show or hide tick lines<br>		text: {<br>			show: true  // show or hide tick texts<br>		}<br>	}<br>}</pre><p>With this new option, will solve the example mentioned earlier removing the gap between the subchart and the legend.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/687/0*QWLcNRqdlkI5lBng.png" /></figure><h4>Variant width on bars</h4><p>Usually bar elements are visualized with the same width, but having different width size can give different visualization experience to be distinguished one from others.</p><blockquote>Demo:<a href="https://naver.github.io/billboard.js/demo/#BarChartOptions.BarWidthVariant">https://naver.github.io/billboard.js/demo/#BarChartOptions.BarWidthVariant</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/419/1*-wDAuLDseFUoT7kCSPHU5g.png" /><figcaption>Applied different width value for each dataset</figcaption></figure><p>Simply set ratio or pixel values for each dataset.</p><pre>bar: {<br>    width: {<br>    	data1: {<br>	     ratio: 0.2,<br>	     max: 20<br>    	},<br>    	data2: 30<br>    }<br>}</pre><h4>Multilined text</h4><p>Adding break lines are quite annoying task in SVG. To facilitate, billboard.js added functionality to break the line using ‘<strong>\n</strong>’ char where is applicable.</p><p>As an extension of this, Pie/Donut data text label and title where added on this list.</p><ul><li><strong>Multine text enhancement for Pie/Donut</strong></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/560/1*IP1yOKbf4NOEtU1nr9h9jA.png" /></figure><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#PieChartOptions.MultilineLabel">https://naver.github.io/billboard.js/demo/#PieChartOptions.MultilineLabel</a></blockquote><pre>pie: {  // donut also as well<br>    label: {<br>        format: function(value, ratio, id) {<br>            return value +&quot;<strong>\n</strong>Hours&quot;;<br>        }<br>    }<br>}</pre><ul><li><strong>Multilined Text</strong></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/528/1*rG2QRuY8lABmtQLor_0-eg.png" /><figcaption>Multilined title</figcaption></figure><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Title.MultilinedTitle">https://naver.github.io/billboard.js/demo/#Title.MultilinedTitle</a></blockquote><pre>title: {<br>    text: &quot;Temperature History by Region, 2017-2018<strong>\n</strong>Source: community weather center&quot;<br>}</pre><h4>LinearGradient for Area types</h4><p>Background gradient is one design/UX factor to display area type charts. To accomplish this, added new <strong><em>area.linearGradient </em></strong>option.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#AreaChartOptions.LinearGradient">https://naver.github.io/billboard.js/demo/#AreaChartOptions.LinearGradient</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/532/1*k9y00bAd7buN0X2rXBrLUQ.png" /></figure><p>The usage is very simple. Just set to true if you want to apply gradient. From this setting will apply a ‘default’ gradient to all area datasets with their original colors.</p><pre>// will generate follwing linearGradient:<br>// &lt;linearGradient x1=&quot;0&quot; x2=&quot;0&quot; y1=&quot;0&quot; y2=&quot;1&quot;&gt;<br>//  &lt;stop offset=&quot;0&quot; stop-color=&quot;$DATA_COLOR&quot; stop-opacity=&quot;1&quot;&gt;&lt;/stop&gt;<br>//  &lt;stop offset=&quot;1&quot; stop-color=&quot;$DATA_COLOR&quot; stop-opacity=&quot;0&quot;&gt;&lt;/stop&gt;<br>// &lt;/linearGradient&gt;</pre><pre>linearGradient: true,</pre><p>What about if you want apply customized one? Of course you can.</p><p>To customize, you need to have little knowledge about on SVG’s <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient">&lt;linearGraient&gt;</a> element, but isn’t really difficult.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/534/1*mxDTgEF9e57lCFhmKHYG_A.png" /><figcaption>Customized linearGradient</figcaption></figure><p>The above gradient settings are:</p><pre>// Or customized gradient<br>linearGradient: {<br> x: [0, 0],  // x1, x2 attributes<br> y: [0, 0],  // y1, y2 attributes<br> stops: [<br>  // offset, stop-color, stop-opacity<br>  [0, &quot;#7cb5ec&quot;, 1],</pre><pre>  // setting &#39;null&#39; for stop-color, will set its original data color<br>  [0.5, null, 0],</pre><pre>  // setting &#39;function&#39; for stop-color, will pass data id as argument.<br>  // It should return color string or null value<br>  [1, function(id) { return id === &quot;data1&quot; ? &quot;red&quot; : &quot;blue&quot;; }, 0],<br> ]<br>}</pre><h3>Improved performance</h3><p>Performance is one of the main key to be considered. We were putting efforts on these, but it can not be done all at once.</p><p>From this release, refactoring were made for the performance. As a start, of this, we focused in 3 different categories on this release:</p><ul><li>Do not generate unnecessary nodes if they aren’t necessary.</li><li>Get rid the duplicated calls to minimize execution calls.</li><li>Memoize some dimension values to not evaluate multiple times.</li></ul><p>Of course, this is just the one step only. The effort on this will continue among the future releases.</p><h4>Small benchmark</h4><p>We did some small benchmark to measure the difference and here are the results.</p><pre>Test condition:<br>- Total of 30 datasets, which each has length of 30 data</pre><pre>The resources(CPU, JS heap size and DOM Nodes) values aren&#39;t really accurate, just take as a consideration.</pre><p>The first benchmark is about loading dynamic datasets using <strong><em>.load()</em></strong> API.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/892/1*UnlG3w86c5MfROjtABr8yg.gif" /><figcaption>Performing dynamic load via .load()</figcaption></figure><p>The counts measured of layouts and Style recals:</p><ul><li>v1.7.1: 33~42/sec</li><li>v1.8.0: 16 ~ 24/sec</li></ul><p>The second is about resizing window via <strong><em>.resize()</em></strong> API.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/892/1*84aD-RhUpJMFf5yEn2wmXQ.gif" /><figcaption>Performing dynamic resize via .resize()</figcaption></figure><p>The counts measured of layouts and Style recals:</p><ul><li>v1.7.1: 51~66/sec</li><li>v1.8.0: 12 ~ 39/sec</li></ul><p>As you can see from the result, roughly dropped <strong>+50%</strong> in these two tests. Hope this be beneficial for billboard.js users :)</p><h4>Small tip</h4><p>One best way to improve the performance is <strong><em>turning-off the transition</em></strong>. Is kinda obvious, but just one setting will mitigate the cost of rendering.</p><p>As you can see from the below test, the rate of Layout/Style recalcs dropped dramatically comparing the previous tests, in a average of 4/sec.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/443/1*lxoZJgcaGANTGBdktTiBNg.gif" /></figure><p>Turing-off is simple. Just set <strong><em>transition.duration</em></strong> value to 0 or null.</p><pre>transition: {<br>    duration: 0  // or null<br>}</pre><h3>Closing</h3><p>I’d like to address thanks to all users and the contributors. And hope these efforts let facilitate on your tasks!</p><p>If you have any ideas, comments or want to make any contribution, please don’t hesitate doing that.</p><p>This project needs your attention to move forward. Please try giving back what you’ve been received from the OSS project.</p><p><em>If you’re interested how OSS projects are sustained, checkout some articles:</em></p><ul><li><a href="https://techcrunch.com/2018/06/23/open-source-sustainability/"><em>Open source sustainability</em></a></li><li><a href="https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"><em>Roads and Bridges</em></a><em>: The Unseen Labor Behind Our Digital Infrastructure</em></li><li><a href="https://motherboard.vice.com/en_us/article/43zak3/the-internet-was-built-on-the-free-labor-of-open-source-developers-is-that-sustainable"><em>The Internet Was Built on the Free Labor of Open Source Developers. Is That Sustainable?</em></a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3ed432f2d9d4" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[billboard.js 1.7.0 release!!]]></title>
            <link>https://medium.com/@alberto.park/billboard-js-1-7-0-release-4944a2eb59fe?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/4944a2eb59fe</guid>
            <category><![CDATA[d3js]]></category>
            <category><![CDATA[svg]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[data-visualization]]></category>
            <category><![CDATA[charts]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Fri, 14 Dec 2018 06:42:06 GMT</pubDate>
            <atom:updated>2018-12-14T06:42:06.152Z</atom:updated>
            <content:encoded><![CDATA[<p>Finally, another new release came out before the year ends :)</p><p>This release includes 5 new features you might love and 18 bug fixes.</p><blockquote>For the detailed release info, checkout the release note:<br><a href="https://github.com/naver/billboard.js/releases/tag/1.7.0">https://github.com/naver/billboard.js/releases/tag/1.7.0</a></blockquote><h3>What’s New?</h3><h4>Multi Axes</h4><p>The support on multi axes is one of the major feature added on this release.</p><p>Until now, axes are only can be represented for each sides(x, y and y2), but with the newly added <strong><em>axis[x|y|y2].axes</em></strong> option, let you add additional axes as you want.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Axis.MultiAxes">https://naver.github.io/billboard.js/demo/#Axis.MultiAxes</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*YmBu3MW280B9rP83lWitlA.png" /><figcaption>Additional axes for x Axis and y Axis</figcaption></figure><p>The scales for additional axes are bound to the corresponding axis and it will be interacting and updating if corresponding axis changes.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/454/1*lzu2v1BqmWH3vr7XfLIQ5Q.gif" /><figcaption>Rotated y2 Axes interacting with the y Axis scale change</figcaption></figure><p>The option interface is really simple. Just add axes options as array and billboard.js will handle on displaying it!</p><pre>x: {<br>   axes: [<br>     {<br>       tick: {<br>         outer: false,<br>         format: function(x) {<br>            return x + &quot;%&quot;;<br>         },<br>         count: 2,<br>         values: [10, 20, 30]<br>       }<br>     },<br>     ...<br>   ]<br>}</pre><h4>New ‘graph’ theme</h4><p>From the previous release, we introduced theme CSS files for easy style changes. With the provided CSS theme file, you can get different style flavor immediately without any code changes.</p><p>To add more flavor on this, we added new graph theme on this release.<br>Take a look on the style differences of the themes from the below screenshot.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/687/1*hTIfC2JmyiR0hYp2LRGSZQ.png" /><figcaption>From the left: <strong>default</strong>, <strong>insight </strong>and <strong>graph </strong>theme style respectively</figcaption></figure><p>The one of the main key for themes are color patterns. Each themes uses different default color patterns if color options aren’t set.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/761/1*-BK8M1enTd_TxVMVXjz39w.png" /><figcaption>Color pattern used for each themes</figcaption></figure><p>Try different themes flavor by yourself visiting <a href="https://naver.github.io/billboard.js/demo/">example site</a> and change theme from the menu.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/222/1*kwWyt95Q3xMEg7P4U7YAwA.png" /></figure><p>Applying themes is so simple. Include your preferred CSS file that’s all!</p><ul><li><strong>Default theme: </strong><a href="https://naver.github.io/billboard.js/release/latest/dist/billboard.css">https://naver.github.io/billboard.js/release/latest/dist/billboard.css</a></li><li><strong>Insight theme: </strong><a href="https://naver.github.io/billboard.js/release/latest/dist/theme/insight.css">https://naver.github.io/billboard.js/release/latest/dist/theme/insight.css</a></li><li><strong>Graph theme: </strong><a href="https://naver.github.io/billboard.js/release/latest/dist/theme/graph.css">https://naver.github.io/billboard.js/release/latest/dist/theme/graph.css</a></li></ul><h4>Normalized staking data</h4><p>One another great feature added is the ability on displaying staking data as normalized graph.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/881/1*SKzbQuKOU3AnPpL5upycHg.png" /></figure><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Data.DataStackNormalized">https://naver.github.io/billboard.js/demo/#Data.DataStackNormalized</a></blockquote><p>With normalization, you can visualize each data in percent value rather than its absolute value.</p><p>This can be used in different purposes, but I’m sure this is one of the most wanted feature for the community.</p><p>The usage is simple. Just indicate <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.data%25E2%2580%25A4stack%25E2%2580%25A4normalize"><strong><em>data.stack.normalize</em></strong></a> option true.<br>Make sure your chart data is grouped with <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.data%25E2%2580%25A4groups"><strong>data.groups</strong></a><strong> </strong>options.</p><pre>data: {<br>    stack: {<br>        normalize: true<br>    }<br>}</pre><h4>TypeScript support</h4><p>This is one of the community most wanted feature. Yeap, from this release TypeScript support has been added!</p><p>This addition came out with the help of <a href="https://github.com/rexebin"><em>github/@rexebin</em></a><em>.</em> Thanks for the contribution!</p><p>If your IDE has support on it, you can enjoy full code assist, which can facilitate your chart generation from your editor.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/448/1*9deUSh6fT5wDs1tg0aOfMg.gif" /></figure><p>You can find full type definition from below link:<br><a href="https://github.com/naver/billboard.js/tree/master/types">https://github.com/naver/billboard.js/tree/master/types</a></p><h4>data.min/max()</h4><p>This can be an useful API addition for those who needs to get minimum or maximum data value bound to the chart.</p><p>You can get min or max data value, simply calling these new APIs.</p><pre>// Get the minimum data value<br>chart.data.min(); // [{x:0, value:30, id:&quot;data1&quot;, index:0}, ...]</pre><pre>// Get the maximum data value<br>chart.data.max(); // [{x:3, value:400, id:&quot;data1&quot;, index:3}, ...]</pre><h4>Continuous efforts for improvements</h4><p>We’re continuously looking the possibility to make an improvements to bring the best experience for everyone.</p><p><strong>Refactorings<br></strong>One of the best way to achieve this is reducing the size of build. We did some refactorings for this release and made an average of <strong>10% decrease</strong> on build file size.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/388/1*xISH7Dok4xjIKICkOr-iEA.png" /></figure><p><strong>Test coverage<br></strong>We believe that one of the major key factor for the library is the stability and the consistence.</p><p>From the start, test code coverage remained at 70%. This isn’t a bad number, but isn’t really enough guaranteeing on stability among code changes.</p><p>So, the intent on improving test coverage was done from the beginning adding new test cases and finally reached 90%!</p><p>This will make assuring to maintain a certain quality code level.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/530/1*8POD2UGRzmzi1JqH7x0SSg.png" /></figure><p>Of course, this isn’t an end. This efforts will be continuously put on to make an stable library.</p><h3>Closing</h3><p>Only left few weeks for the year 2018. At the beginning of this year, we were having 2~3K downloads per month, but as Oct. we reached 10K/month downloads!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/975/1*vb00V0zBVfb1_rHmyuFGUQ.png" /><figcaption><a href="https://npm-stat.com/charts.html?package=billboard.js&amp;from=2018-01-01&amp;to=2018-12-31">npm-stats downloads by 2018</a></figcaption></figure><p>Thanks for every users who opted on us and of course, all those who made an excellent contribution also!</p><p>We’ve been released 9 releases this year. Hope this efforts have been touched fulfilling all of your necessities.</p><p>Happy holidays for all and hope continue this journey in next coming 2019.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4944a2eb59fe" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[billboard.js 1.6.0 released today!]]></title>
            <link>https://medium.com/@alberto.park/billboard-js-1-6-0-released-today-3b3d06857fed?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/3b3d06857fed</guid>
            <category><![CDATA[d3]]></category>
            <category><![CDATA[billboard-js]]></category>
            <category><![CDATA[charts]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[data-visualization]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Thu, 30 Aug 2018 06:43:59 GMT</pubDate>
            <atom:updated>2018-08-30T06:44:46.169Z</atom:updated>
            <content:encoded><![CDATA[<p>Happy to announce the new release of the billboard.js!</p><p>This release includes biggest changes since its creation, with the 10 new features. Also 19 bug fixes which is making more stable than ever.</p><blockquote>For the detailed release note, checkout: <a href="https://github.com/naver/billboard.js/releases/tag/1.5.0">https://github.com/naver/billboard.js/releases/tag/1.6.0</a></blockquote><h3>What’s New?</h3><h4>Themes</h4><p>One of the benefits of SVG based chart is the ability and flexibility on styling via CSS.</p><p>To take this advantage, we’re introducing the new <em>‘</em><strong><em>theme</em></strong><em>’</em> feature. This is an initiative to provide easy way on chart design styling.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/232/1*xQijVeP1Za1gUjnbcdcB0g.png" /><figcaption>Checkout the <a href="https://naver.github.io/billboard.js/demo/">example</a> site to see in action</figcaption></figure><p>You don’t need to do any extra work. Just load different CSS theme file provided, and boom! You’ll get totally different look of your chart instantly.</p><p>Let’s check how this is looks like.</p><p>The first screenshot is when you’re applying the default css file. And the second is when you’re using ‘<strong><em>insight</em></strong>’ theme. Can you notice the differences?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/521/1*hzCr5trAcj0OGpPIHHIq8Q.png" /><figcaption>(Above) default / (Below) insight theme</figcaption></figure><p>The use of theme is really simple. Just load the desired theme css file.</p><ul><li><strong>Default theme:</strong> <a href="https://naver.github.io/billboard.js/release/latest/dist/billboard.css"><em>https://naver.github.io/billboard.js/release/latest/dist/billboard.css</em></a></li><li><strong>Insight theme: </strong><a href="https://naver.github.io/billboard.js/release/latest/dist/theme/insight.css"><em>https://naver.github.io/billboard.js/release/latest/dist/theme/insight.css</em></a></li></ul><p>There’re plans on adding more different themes in the future. If you want add your own? Don’t hesitate sending us PR :)</p><h4>bar.radius</h4><p>Normally, bars corners are interpreted as square. With the new ‘<a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.bar"><strong><em>bar.radius</em></strong></a>’ option, you can give some changes on that.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#BarChartOptions.BarRadius">https://naver.github.io/billboard.js/demo/#BarChartOptions.BarRadius</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/465/1*xyv_FiZzgybtIuf0QX--lw.png" /><figcaption>Rounded bar</figcaption></figure><p>Simply indicate the radius value and the bar corners will turn to be rounded.</p><pre>bar: {<br>  radius: {<br>    <strong>ratio: 0.5</strong><br>  }<br>}</pre><h4>Zoom by dragging</h4><p>This is the wonderful contribution by <a href="https://github.com/lorgan3">@lorgan3</a>, which gives a great usability on zooming.</p><p>Drag the zoom area right from the chart area, and you’ll get zoomed chart. Very intuitive and simple approach on zoom interaction.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Interaction.DragZoom">https://naver.github.io/billboard.js/demo/#Interaction.DragZoom</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/615/1*OsIOWsC14O0AvDu0iz0ixA.gif" /><figcaption>Zoom by drag in action</figcaption></figure><p>In addition of the traditional way, <em>mouse wheel</em>, just indicate zoom type as “<a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.zoom"><strong><em>drag</em></strong></a>”. And to facilitate for unzoom, it will be displaying the reset button, which you can customize also if you want.</p><pre>zoom: {<br>    enabled: {<br>        <strong>type: &quot;drag&quot;</strong>  // or &#39;wheel&#39; (default value)<br>    },<br>    <br>    // control &#39;reset button&#39; display<br>    resetButton: true,<br>    <br>    // customize reset button&#39;s text value<br>    resetButton: {<br>         text: &quot;unzoom&quot;<br>    }<br>}</pre><h4>Dasharray for regions</h4><p>With the new dasharray option, you’re able to style differently regions of same data series.</p><p>As you can notice from the screenshot below, there’re two different regions for the ‘data1’ series.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Chart.LineChartWithRegions">https://naver.github.io/billboard.js/demo/#Chart.LineChartWithRegions</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/521/1*eRakn_SLNxAlI-O1COqG-g.png" /><figcaption>Applying different dash styles in different region</figcaption></figure><p>Applying is really simple. Just indicates the dashed array style for each region.</p><pre>regions: {<br>    data1: [<br>       {<br>           start: 1,<br>           end: 2,<br>           style: {<br>                // The first number specifies a distance for the filled area, and the second a distance for the unfilled area<br>                <strong>dasharray: &quot;6 2&quot;</strong><br>           }<br>       },<br>       ...<br>    ]<br>}</pre><h4>line.point</h4><p>To control data points showing, <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.point"><em>point.show</em></a> option could be used. But the limitation was, you can turn on/off entire data points not allowing to control specific data series only.</p><blockquote>Aside of programmatic solution, there’s way on doing that by defining CSS rule.</blockquote><pre>.bb-circles-data2 circle {<br>    visibility: hidden;<br>}</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/521/1*tFywRHwTvTd--Q_AEmZRIw.png" /><figcaption>Indicating specific data point display</figcaption></figure><p>To give more freedom on display control, <a href="https://github.com/lorgan3">@lorgan3</a> contributed an excellent solution. With the new ‘<a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.line"><strong><em>line.point</em></strong></a><strong><em>’</em></strong> option, you can indicate which data series will have data points.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#LineChartOptions.LinePoint">https://naver.github.io/billboard.js/demo/#LineChartOptions.LinePoint</a></blockquote><pre>line: {<br>    // indicate, what data will be showing points<br>    point: [&quot;data1&quot;, &quot;data3&quot;]<br>},</pre><h4>radar.direction.clockwise</h4><p>The ‘radar’ type was introduced from the last release. As being new implementation, it wasn’t reflecting all user necessities sufficiently.</p><p>The new <strong><em>‘</em></strong><a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.radar"><strong><em>radar.direction.clockwise</em></strong></a><strong><em>’</em></strong> is one of the new option to fulfill that. You can control the direction of the radar data to be drawn.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Chart.RadarChart">https://naver.github.io/billboard.js/demo/#Chart.RadarChart</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/650/1*ejkKb0RD-KVTEVuZbW-YNg.png" /><figcaption>(Left) counter clockwise, (Right) clockwise direction</figcaption></figure><pre>radar: {<br>    direction: {<br>        <strong>clockwise: true</strong><br>    }<br>}</pre><h4>Enhancement on custom data point</h4><p>Custom data point was introduced from v1.2.0. This feature was giving a lots of usability differentiating data series.</p><p>Previously it was only accepting a single node for the data point definition. Is obvious having limitation on defining custom data points with single node.</p><pre>&quot;&lt;polygon points=&#39;2.5 0 0 5 5 5&#39;&gt;&lt;/polygon&gt;&quot;</pre><p>To break this limitation, it is allowed defined grouped node with child nodes within. The example below, is the combination of <em>&lt;circle&gt;</em> and <em>&lt;rect&gt;</em> elements together.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#Point.CustomPointsGrouped">https://naver.github.io/billboard.js/demo/#Point.CustomPointsGrouped</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/235/1*mYp9DEi1oyTGSwK16oYG4Q.png" /><figcaption>Using complex custom data point</figcaption></figure><pre>&quot;&lt;g&gt;&lt;circle cx=&#39;10&#39; cy=&#39;10&#39; r=&#39;10&#39;&gt;&lt;/circle&gt;&lt;rect x=&#39;5&#39; y=&#39;5&#39; width=&#39;10&#39; height=&#39;10&#39; style=&#39;fill:#fff&#39;&gt;&lt;/rect&gt;&lt;/g&gt;&quot;</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/183/1*ClebO2BeVSTUbkXaUn_TyA.png" /><figcaption>Combined custom data points</figcaption></figure><p>From this enhancement, you’re able define more complex data point.</p><pre>point: {<br>    pattern: [<br>      ...<br>      &quot;&lt;polygon points=&#39;2.5 0 0 5 5 5&#39;&gt;&lt;/polygon&gt;&quot;,<br>      &quot;&lt;g&gt;&lt;circle cx=&#39;10&#39; cy=&#39;10&#39; r=&#39;10&#39;&gt;&lt;/circle&gt;&lt;rect x=&#39;5&#39; y=&#39;5&#39; width=&#39;10&#39; height=&#39;10&#39; style=&#39;fill:#fff&#39;&gt;&lt;/rect&gt;&lt;/g&gt;&quot;<br>    ]<br>}</pre><h4>Multiline for gauge label text</h4><p>Multilining is a tedious job, as lack of SVG support on efficient way.</p><p>To facilitate these, billboard.js was adding the support of multiline text values using ‘\n’ character in different options.</p><p>In addition with that, added the new multiline support for gauge’s text label.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/295/0*67aWSL4EeyQfrv6q.png" /><figcaption>Multilined text label</figcaption></figure><p>From the label.format callback function, return the value with the ‘\n’ character where line break should be happen.</p><pre>gauge: {<br>   label: {<br>      format: function(value) {<br>          return value +&quot;%<strong>\n</strong>Test<strong>\n</strong>Value&quot;;<br>      }<br>   }<br>}</pre><h4>Exposing primary node elements</h4><p>If you’re old billboard.js user, there’re situations to manipulate chart elements directly.</p><p>In many cases, you do a direct selection or via undocumented private property ‘chart.internal’.</p><p>The use of private properties aren’t recommended in any situations, but the use of direct access on elements are needed.</p><p>From this release, we’re introducing new ‘<a href="https://naver.github.io/billboard.js/release/latest/doc/Chart.html#$"><strong><em>$</em></strong></a>’ property. It’s providing easy way to access primary elements within chart and they’re wrapped as d3 selection.</p><p>So, you can take the advantage of d3’s selection API directly.</p><pre>const chart = bb.generate(...);</pre><pre><strong>chart.$;</strong></pre><pre>// main element <strong>&#39;</strong>&lt;g transform=&quot;translate(50.5, 4.5)&quot;&gt;<strong>&#39;<br></strong>// wrapped with d3<br><strong>chart.$.main;</strong></pre><h4>The new .config() API</h4><p>This is another enhancement on private property usecase. To approach the configuration option value, there was no option for that.</p><p>So, accessing the private property ‘chart.internal.config’ was used for those are needed.</p><p>To break that, introducing the new ‘<a href="https://naver.github.io/billboard.js/release/latest/doc/Chart.html#config"><strong><em>.config()</em></strong></a>’ method. The basic usage on this is getting the configuration value, and also you can change if you need.</p><blockquote><strong>Note:</strong> Changing configuration option doesn’t guaranteeing reflecting the option spontaneously. The correct and guaranteed way is from the generation.</blockquote><pre>const chart = bb.generate({<br>  data: {<br>    columns: [<br>        [&quot;data&quot;, 91.4]<br>    ],<br>    type: &quot;gauge&quot;<br>  },<br>  gauge: {<br>    max: 1000<br>  }<br>});</pre><pre><strong>chart.config(&quot;data.type&quot;);</strong> // will return &#39;gauge&#39;</pre><p>And what is the usecase for this? For example, you generated a gauge chart having some max value and later then want to update max value with different number.</p><p>Let’s check how this works in action. You can notice the gauge max value and the percentage is updating.</p><blockquote>Demo: <a href="https://naver.github.io/billboard.js/demo/#API.UpdateConfig">https://naver.github.io/billboard.js/demo/#API.UpdateConfig</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/281/1*FI58MoHrYTlNdesJ5AvLVg.gif" /><figcaption>Update gauge’s max value and redraw</figcaption></figure><pre>setTimeout(() =&gt; {<br>   // update gauge.max to 100, and redraw with changed option<br>   <strong>chart.config(&quot;gauge.max&quot;, 100, true);</strong><br>}, 1000);</pre><p>With the last parameter, you can make to redraw to reflect updated option value. But as quoted earlier, not every options are guaranteed to be reflected.</p><h3>Closing</h3><p>The mission of <strong><em>billboard.js</em></strong> is to provide a better and easy way for data visualization for the web.</p><p>To fulfill this mission, your feedback and attention are absolutely necessary. So, do not hesitate to approach us, and tell us what is your opinion. Any kind of contribution are welcoming. :)</p><p>Stay well, and see you on next release!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3b3d06857fed" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thanks Roger Wang, for the info.]]></title>
            <link>https://medium.com/@alberto.park/thanks-roger-wang-for-the-info-cfaf802d96e4?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/cfaf802d96e4</guid>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Thu, 28 Jun 2018 01:36:38 GMT</pubDate>
            <atom:updated>2018-06-28T01:36:38.506Z</atom:updated>
            <content:encoded><![CDATA[<p>Thanks <a href="https://medium.com/u/c73505bf9fae">Roger Wang</a>, for the info. As I pointed from the article, isn’t compared directly. I’ll update the article quoting your comment :)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cfaf802d96e4" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The status of JavaScript outside of the browser: 2018 & beyond.]]></title>
            <link>https://hackernoon.com/the-status-of-javascript-outside-of-the-browser-2018-beyond-ee0b79ee059f?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/ee0b79ee059f</guid>
            <category><![CDATA[nodejs]]></category>
            <category><![CDATA[webpack]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[react-native]]></category>
            <category><![CDATA[pwa]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Wed, 27 Jun 2018 13:54:09 GMT</pubDate>
            <atom:updated>2019-04-24T11:56:38.422Z</atom:updated>
            <content:encoded><![CDATA[<p>The <a href="https://hackernoon.com/tagged/javascript">JavaScript</a> doesn’t stay just only in inside of browser as many could think. It’s showing a great power in various area and sometimes it’s more potential from outside of the browser.</p><blockquote><strong>Bear in mind:</strong> The content of this article is by May of 2018 and will not likely reflecting newest updates as well and may contain some personal perspectives.</blockquote><h3>Node.js</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/357/1*0qz-rzy_5gcf9wjdBP99pw.png" /></figure><p>As the year of 2017, continuously demonstrated a shiny progress as it was. 250 million downloads happened on last year, and this is equivalent of 700K downloads per day!</p><p>It’s growing tremendously every year, the monthly downloads of the year 2017 was increased as 70~80K more compared with the monthly downloads from 2016.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/654/1*FchSvMkcPlakgTKKv1CIMg.png" /><figcaption><a href="https://nodesource.com/node-by-numbers">node by numbers</a></figcaption></figure><p>Many companies adopted Node.js last year. For those who needed to provide new digital experiences to customers in short period of time, choosing <a href="https://hackernoon.com/tagged/nodejs">Node.js </a>is somehow looks very reasonable. Because with the Node.js, could take the beneficials from the fast dev process and the rich ecosystem.</p><p>The ‘company’ doesn’t mean just for small tech startups. The Node.js territory is expanding to those traditional big companies too.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/653/1*J1de93a5W1HlhEPFthylng.png" /><figcaption>A list of companies using Node.js in a variety of industries</figcaption></figure><blockquote>Checkout the adoption experiences shared by different industry companies.<br>- <strong>Walmart:</strong> <a href="https://medium.com/walmartlabs/migrating-large-enterprise-to-nodejs-6c38523d2b33">Migrating Large Enterprise to NodeJS</a><br>- <strong>Lowe’s:</strong> <a href="https://www.youtube.com/watch?v=vBtEb_wn2r0">Implemented Node.js to get digital experiences</a><br>- <strong>Netflix:</strong> <a href="https://www.youtube.com/watch?v=p74282nDMX8&amp;feature=youtu.be&amp;t=12m11s">Containerized their edge service layer</a><br>- <strong>NASA:</strong> <a href="https://foundation.nodejs.org/wp-content/uploads/sites/50/2017/09/Node_CaseStudy_Nasa_FNL.pdf">Node.js Helps NASA Keep Astronauts Safe and Data Accessible</a></blockquote><p>How Node.js used and evolved during 2017? You can take a compacted illustration from the survey result.</p><ul><li><a href="https://foundation.nodejs.org/wp-content/uploads/sites/50/2017/11/Nodejs_2017_User_Survey_Exec_Sum.pdf">Node.js: 2017 User Survey Executive Summary</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/653/1*SaEN0Khc6w3M-decjhJEiw.png" /><figcaption>One of the survey result: How organizations use Node.js</figcaption></figure><h4>N-API</h4><p><a href="https://nodejs.org/api/n-api.html#n_api_n_api">N-API</a>(Node.js API) is an API for building <a href="https://nodejs.org/api/addons.html">native Add-ons</a>. It’s independent from the JavaScript runtime and is maintained as part of Node.js.</p><p>It was added on <a href="https://nodejs.org/en/blog/release/v8.0.0/#say-hello-to-the-node-js-api-n-api">Node.js 8.0</a> as experimental feature, then <a href="https://github.com/nodejs/node/commit/cd7d7b15c1">removed the ‘experimental’</a> to becoming an official feature since v10.0.0 release.</p><p>It provides the ways of building add-ons using C/C++, even not having a deep knowledge about the runtime. It can define as an abstracted layer between the runtime and Node.js.</p><p>The new N-API improved a lot, compared with the old native abstraction API <a href="https://github.com/nodejs/nan">NAN</a>(Native Abstraction for Node.js), providing the ABI(Application Binary Interface) compatibility. This makes add-ons to work in different Node.js version without the recompilation process.</p><ul><li><a href="https://hackernoon.com/n-api-and-getting-started-with-writing-c-addons-for-node-js-cf061b3eae75">N-API and getting started with writing C addons for Node.js</a></li><li><a href="https://medium.com/the-node-js-collection/n-api-next-generation-node-js-apis-for-native-modules-169af5235b06">N-API: Next generation Node.js APIs for native modules</a> (<a href="https://www.slideshare.net/michaeldawson3572846/n-api-node-interactive-2017">summary slide</a>)</li></ul><h4>What are the other changes?</h4><p>Since v7.6 release, native Async/Await supports were added. This allows to make standardized asynchronous codes. And from the v8.0, added WebAssembly support.</p><h4><strong>v10.0.0</strong></h4><p>The 7th major release v10.0.0 was held at Apr. 24th. With this release N-API became as an official feature. Also N-API was added to the experimental Chakra(MS’ runtime) based Node.js, the <a href="https://github.com/nodejs/node-chakracore">Node-ChakraCore</a>.</p><blockquote>On Node-ChakraCore 10.0.0 release, alse added Time-travel debugging extension for VSCode and the support of generator and async functions.</blockquote><blockquote>- Node.js with ChakraCore (node-chakracore-v10.0.0)</blockquote><p>From the V8 runtime engine update(v6.6), Node.js will also get lots of beneficial changes from it.</p><p>The efforts for the perfect ESM support is on undergoing, but still struggling solve some remain issues.</p><p>Even though the support of the native ESM is done on all modern browsers now, Node.js is still facing some difficulties on the integration with CJS(CommonJS) — the default module system used by Node.js — environment.</p><ul><li><a href="https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71">Native ES Modules in NodeJS: Status And Future Directions, Part I</a></li></ul><h4>Future release schedule</h4><p>According the LTS, v10.x will be entering to Active LTS stage at Oct. 2018.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/657/1*iZnsMhj5xXacmFwBdVE7lg.png" /><figcaption><a href="https://github.com/nodejs/Release#release-schedule">Node.js release schedule</a></figcaption></figure><p>All Node.js major releases will be maintained followed by the LTS plan.</p><p>Every major version will be actively maintained for a period of 18 months from the date of it enters to LTS coverage. And later it will be transitioning to “<strong><em>maintenance</em></strong>” mode in a period of 12 additional months.</p><h3>Package Managers</h3><p>What was the changes on 2017 for the two prominent, npm and Bower?</p><p>In a period of May 2017 to May 2018, approx. 200K new packages were registered on npm, consolidating the strong leading position.</p><p>Bower, is still providing continuous update releases and each week occurs 50K downloads. But the Bower team is officially recommending to use Yarn instead.</p><blockquote>..psst! While Bower is maintained, we recommend <a href="https://yarnpkg.com/">yarn</a> and <a href="https://webpack.js.org/">webpack</a> or <a href="https://parceljs.org/">parcel</a> for new front-end projects! — a note from the Bower project readme</blockquote><p>Based on the recommendation, there’s an uncertainty about the maintenance. As Bower team’s recommendation, it’s necessary not considering use Bower for new projects.</p><blockquote>The Bower team is continuously recommending to not use.<br>- <a href="https://bower.io/blog/2017/how-to-migrate-away-from-bower/">How to migrate away from bower?</a><br>- <a href="https://bower.io/blog/2017/how-to-drop-bower-support/">How to drop bower support?</a></blockquote><h3>npm</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/350/1*gdS4dqgBguG8VX4z49YFfg.png" /></figure><p>By the May of 2018, there’re 650K packages registered in total. This number is like having new 500 packages per day on a average.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/559/1*PkX7BKYO9SKj78q10MeDGQ.png" /><figcaption>Number of modules registered by May 2018 (from <a href="http://www.modulecounts.com/">Module Counts</a>)</figcaption></figure><p>This growth is the top most regardless on the languages and environments. As you can see from the above chart, npm is positioned on the top followed by Maven(Java) — 230K and Packagist(PHP) 180K.</p><h4>Remarkable features from the previous release</h4><p>By the year of 2017 and 2018, there was one major release on each year respectively.</p><p>The lock file(<a href="https://docs.npmjs.com/files/package-lock.json">package-lock.json</a>) support(as like yarn) has been added at <a href="https://blog.npmjs.org/post/161081169345/v500">v5.0.0</a>(May 2017). By the 5.7.0 update, npm could be facing a nightmare caused by the <a href="https://github.com/npm/npm/issues/19883">filesystem permission change</a> issue. But they treated well fixing the issue.</p><p>The last major version update <a href="https://blog.npmjs.org/post/173260195980/announcing-npm6">v6.0</a>, was released on last April.</p><h4>npx</h4><p>The new tool called ‘<strong>npx</strong>’ has been introduced since the 5.2.0 release.</p><p>npx is a “<em>pacakge runner</em>”, letting to run packages without registering as dependency nor installing it. It’s adequate for those who needs ran package once.</p><pre># example of creating a new React project with &#39;create-react-app&#39;<br>$ npx creat-react-app myApp</pre><blockquote>For more details checkout: <a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b">Introducing npx: an npm package runner</a></blockquote><h4>audit</h4><p>Added since v6.0(including 5.10.0), which lets check the security vulnerability of the module used, giving recommendations on solving it.</p><pre>$ npm audit<br><br># Run `npm install webpack-cli@2.1.3` to resolve 2 vulnerabilities<br>  low             Cryptographically Weak PRNG<br>  Package         randomatic<br>  Dependency of   webpack-cli [dev]<br>  Path            webpack-cli &gt; jscodeshift &gt; micromatch &gt; braces &gt;<br>                  expand-range &gt; fill-range &gt; randomatic<br>  More info       https://nodesecurity.io/advisories/157<br>  ...</pre><blockquote>For more details checkout: <a href="https://blog.npmjs.org/post/173719309445/npm-audit-identify-and-fix-insecure">`npm audit`: identify and fix insecure dependencies</a></blockquote><h4>Prospectives</h4><p>The next major v7.0, will be estimated to be released at the end of this year and will likely add alias support as one of the major features. Checkout the below link for more details.</p><ul><li><a href="https://github.com/npm/npm/wiki/Roadmap#beyond-npm6-the-future-of-the-npm-cli">Beyond npm@6: The future of the npm cli</a></li></ul><h3>yarn</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/374/1*OhGZGOQJb3EL3KBzSJVTQA.png" /></figure><p>Since its first appearance at 2016, it has been grown as a package manager with having 400K package downloads per week.</p><p>As of the decreasing influence of Bower, ‘<strong>npm vs yarn</strong>’ has been formed in this area.</p><p>By the May of 2018, approximately <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=filename%3Ayarn.lock+path%3A%2F&amp;type=Code">450K GitHub projects</a> are using yarn. And the number of <a href="https://stats.yarnpkg.com/">300M packages installation happens per day</a> using yarn.</p><p>The v1.0 released at Sep. 2017, adding following features.</p><ul><li><strong>workspaces</strong></li></ul><p>workspaces let manage packages more efficiently in a monorepo structured project. This makes not to installing duplicated packages and provides the methods on sharing and updates of the packages.</p><blockquote>Checkout <a href="https://lernajs.io/">Lerna project</a> for managing multi-package on a monorepo structure style. <a href="https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/#lerna">Lerna can be used with yarn</a>.</blockquote><ul><li><strong>Selective version resolutions</strong></li></ul><p>With the new ‘resolution’ key added to package.json file, provides a way to manage versions of the sub packages.</p><h3>npm vs yarn</h3><p>As mentioned above, it has formed the “<strong>npm vs yarn</strong>” now. Unlike as the Bower, they’re using same registry. This characteristic makes the comparison of both to be targeted on the performance of the client.</p><p>From the v6 release, npm announced 17x times faster than a year ago. And this announcement seems to be truth based on the daily updated benchmark.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*o8734DKJ1TtG2MwrBIp9vQ.png" /><figcaption><a href="https://docs.google.com/spreadsheets/d/1ZE5B4qJw1kNGMzjgslcWTuPYrpatzQJXSYMGNOhZ2ys/edit#gid=263077280">Daily updated comparison of npm and yarn</a></figcaption></figure><p>These results aren’t fixed and is flexible depending from the new updates and features. But this will reminds the yarn’s quotes on its first debut. It was saying yarn is more performant than npm.</p><p>Now this advantage seems blurring.</p><h3>The other alternatives</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/643/1*BkyEXkaT5m5G9wQc98KAdA.png" /></figure><p>Aside of npm and yarn, there’re many other alternatives to be considered. Among them, the well knowns are ‘<a href="https://jspm.org/">jspm</a>’ and ‘<a href="https://github.com/pnpm/pnpm">pnpm</a>’.</p><h4>jspm</h4><p>The jspm, also used as the name of the package manager and also the name of the toolchain and its ecosystem.</p><p><strong>1. The </strong><a href="https://jspm.io/"><strong>jspm registry</strong></a></p><p>This is a “<strong>Native ES Modules CDN</strong>”. Letting load npm packages as native ESM.</p><pre>&lt;script type=module&gt;<br>    import React from &#39;https://dev.jspm.io/react&#39;;<br><br>    // or as dynamic import(chrome)<br>    import(&#39;https://dev.jspm.io/react&#39;)<br>        .then(({ default: React }) =&gt; console.log(React));<br>&lt;/script&gt;</pre><p><strong>2. </strong><a href="https://github.com/systemjs/systemjs"><strong>SystemJS</strong></a></p><p>A module loader, which allows load modules regardless the <a href="https://github.com/systemjs/systemjs/blob/master/docs/module-formats.md">different module formats</a>.</p><pre>&lt;!-- Load SystemJS first --&gt;<br>&lt;script src=&quot;systemjs/dist/system.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    // it doesn&#39;t matter what module format main.js is written<br>    SystemJS.import(&quot;/js/main.js&quot;);<br>&lt;/script&gt;</pre><h4>pnpm</h4><p>Announced at the year of 2016, having the similarity features like others. The most notable and differentiating feature is the ‘<strong><em>efficiency on disk space usage’</em></strong>.</p><p>Most package managers, installs the dependency packages and its dependents even though they’re duplicated. This could make an unefficiency of disk space usage.</p><p>pnpm manages to be installed one unique package(via hardlink or symlink) of the same version. This can be an attractive feature for those struggling on disk space management.</p><h4><strong>Prospectives</strong></h4><p>Package manager isn’t an area with frequent changes. The current status will continue, if nothing happens.</p><p>The npm(the outstanding, without substitutes) is surpassing other competitors. And this status will be continued for a while.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/764/1*sxULzqqwCvKabNnnyHkF-A.png" /><figcaption><a href="http://www.npmtrends.com/npm-vs-yarn-vs-jspm-vs-pnpm">Recent 6 months downloads comparison of npm, yarn, jspm and pnpm</a></figcaption></figure><h3>The Bundler (Builder)</h3><p>At this point, if you don’t have a specific reason, there’s no reason not using webpack.</p><p>As you can check from the below chart, the number of downloads of webpack occurs 3M per day, whereas others not reaching 1M.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/763/1*7Gwe4Ixjn9G6I5X0JS3Udw.png" /><figcaption><a href="http://www.npmtrends.com/webpack-vs-browserify-vs-grunt-vs-gulp-vs-parcel-bundler">Recent 6 months downloads comparison of webpack, browserify, grunt, gulp and parcel</a></figcaption></figure><h3>webpack</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/597/1*Ps467dZNVyRfLHSecdlFXQ.png" /></figure><p>Last 20th Feb, released the major v4.0 with the below notable features.</p><ul><li><strong>Performance:</strong> Making an impressive improvement about 60 ~ 98% on build time.</li><li><strong>webpack-cli:</strong> The CLI functionality, has been split as separate package. Need to be installed separately along with webpack.</li></ul><pre>1. The new CLI tool, &#39;webpack-command&#39; was announced by 30th Apr.<br>   - Checkout: <a href="https://github.com/webpack-contrib/webpack-command#differences-with-webpack-cli">Differences With webpack-cli</a></pre><pre>2. The webpack-dev-server, went to in &#39;maintenance&#39; mode.<br>   - Use <a href="https://github.com/webpack-contrib/webpack-serve">webpack-serve</a> instead</pre><ul><li><strong>‘mode’ option:</strong> Required option to point exact bundle type. development and production(default)are the allowed values, which makes an adequate optimized bundling for each one.</li></ul><pre>1. When &#39;<strong>production</strong>&#39; mode is set, all outputs are minified. If you&#39;re using minify plugin(like UglifyJS) as a separate task, you can disable this behavior by setting &#39;<strong>none</strong>&#39; for mode option. This will make to remain same behavior as before.</pre><pre>2. Checkout <a href="https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a">webpack 4: mode and optimization</a> for more details.</pre><p>If you’re using webpack, may likely faced the struggle on handling with lots of webpack’s options. Additionally, if there’re plugins/loaders, this will increase the complexity and some headaches.</p><p>In a response to solve this issue, the terminology aiming ‘Zero Configuration JavaScript’(0CJS) came out. And the use of the new wepack’s mode option can mitigate this complexity.</p><p>By the <a href="https://github.com/webpack/webpack/releases/tag/v4.6.0">v4.6</a>, introduced the support of prefetch/preload resources. This will let apply ‘Resource Hint’ capabilities out of the box when the browser is in idle.</p><ul><li><a href="https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c">&lt;link rel=”prefetch/preload”&gt; in webpack</a></li></ul><pre>// Generate a chunk for On-Demand-Loading, when parent chunk load finishes.<br>import(/* webpackPrefetch: true */ &quot;SOME-MODULE-NAME&quot;);<br><br>// Load the module with parent in parallel<br>import(/* webpackPreload: true */ &quot;SOME-MODULE-NAME&quot;);</pre><h4>Some Caveats</h4><p>By the June of 2018, the latest version is <a href="https://github.com/webpack/webpack/releases/tag/v4.12.1">v4.12.1</a>. It looks like webpack isn’t following a scheduled release plan. Bu the team is showing the efforts for the new releases in a very short term.</p><p>In most cases, the use of latest version is strongly recommended. But the last v4.0 major release, included a <a href="https://github.com/webpack/webpack/wiki/Changelog-WIP#breaking-changes-for-pluginsloaders">breaking changes for plugins/loaders</a>, which brought an incompatibility issue for those plugins/loaders not being up-to-date with the webpack’s changes.</p><p>This issue seems quite natural. Due to the many of those plugins/loaders are maintained by third-party developers. But as having this nature, some strategical plan could be considered to not update major release right after their release.</p><h3>Parcel</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/754/1*g7jjfS_Yi3Sj-QbM2RpxVA.png" /></figure><p>The new fresh bundling tool ‘Parcel’ debuted at Dec. 2017. Since its appearance, got an impact attention receiving 13K GitHub stars in its first month of the release(23K by the June 2018).</p><ul><li><a href="https://medium.com/@devongovett/announcing-parcel-a-blazing-fast-zero-configuration-web-application-bundler-feac43aac0f1">Announcing Parcel</a></li></ul><blockquote>There’re several reasons for this reaction. One of the reason could be assumed by the ‘antipathy’ from the complexity of the configuration on webpack. If you ever experienced webpack, the Parcel’s configuration will be much simpler in contrast to webpack.</blockquote><blockquote>Checkout also: <a href="https://medium.com/@ibrahimbutt/if-youve-ever-configured-webpack-parcel-will-blow-your-mind-b615468cee78">If you’ve ever configured Webpack, Parcel will blow your mind!</a></blockquote><p>Davon Govett, the creator, said Parcel was developed with the two main goals.</p><p><strong>1. Performance</strong></p><p>The parallel compilation via worker process and the use of cache(keeping the compile result in cache to be used for the next build), can boost the performance 10x times faster than the other bundlers.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/241/1*hqdlsiTwgHSDS7i3uRwJIA.png" /><figcaption><a href="https://github.com/parcel-bundler/parcel#benchmarks">Benchmark based on a app, containing 1726 modules with 4 physical CPUs</a></figcaption></figure><p><strong>2. Make to improve on the configuration experience</strong></p><ul><li>All assests(JS, HTML, CSS and images) automatically analyzed and are included to the output bundle file, without the necessity of separate plugins.</li><li>Automatic transforms are supported. Automatically will use Babel, PostCSS and PostHTML when it finds its configuration file.</li><li>Supporting on ‘code splitting’ out of the box. When it finds a dynamic import syntax, code will be split and will be loaded on demand.</li><li>Built-in support of HMR(Hot Module Replacement)</li></ul><h4>Recent changes and prospective</h4><p>With the v1.7 release, added 0CJS support for Vue.js. The v1.8(May 2018), added the support of multiple entry points and UMD(Universal Module Definition). With the v1.9, added tree-shaking, faster watch with lots of improvements.</p><blockquote>Checkout for 1.9.0 changes: <a href="https://medium.com/@devongovett/parcel-v1-9-0-tree-shaking-2x-faster-watcher-and-more-87f2e1a70f79">📦 Parcel v1.9.0 — Tree Shaking, 2x faster watcher, and more! 🚀</a></blockquote><p>For the future implementation, take a look on GitHub’s <a href="https://github.com/parcel-bundler/parcel/labels/%3Aspeech_balloon%3A%20RFC">RFC labeled issues</a>.</p><p>Is difficult to estimate exact schedules and the features to be implemented. But as having 23 releases from its first appearance, the enhancements will be implemented in a very fast way.</p><h3>Mobile Application</h3><p>The tools for mobile application development using JavaScript, has been narrowed down to React Native and NativeScript. This result is proportional as their based library popularity — React(React Native) / Angular(NativeScript).</p><blockquote>Will not be considering in this article, but the <a href="https://www.fusetools.com/">Fuse</a> is one another tool having strengths on graphic process with simple UI development based on XML style code. On May of 2018, they announced to open-sourcing on all of their platform tools. But it seems difficult to give some impact on current status quo.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/763/1*tLqsohmcEpqBlTCUIiQ6Iw.png" /><figcaption><a href="http://www.npmtrends.com/react-native-vs-nativescript">Recent 6 months downloads comparison of Cordova, PhoneGap, ReactNative and NativeScript</a></figcaption></figure><h3>NativeScript</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/205/1*AZnrKwTqY1v8cvvP8Od8Lw.png" /></figure><p>The tool was announced in the year of 2015, for the development of cross-platform mobile application using JavaScript. Steadily updated and managed. The last major, <a href="https://github.com/NativeScript/NativeScript/releases/tag/4.0.0">v4.0.0</a> was released at last April.</p><ul><li><a href="https://www.nativescript.org/blog/nativescript-4.0-is-out">NativeScript 4.0 is out!</a></li></ul><p>Basically, the applications can be developed using plain JavaScript or TypeScript, but it will give <a href="https://www.nativescript.org/nativescript-is-how-you-build-native-mobile-apps-with-angular">more efficiency and integration with Angular</a>.</p><p>For the convenience of development, NativeScript provides a variety of tools.</p><ul><li><a href="https://www.nativescript.org/ui-for-nativescript"><strong>NativeScript UI</strong></a></li></ul><p>This is a set of different UI components, like Calendar, Chart, DataForm and AutoComplete. From the <a href="http://developerday.nativescript.org/">NativeScript developer day 2017</a>, these components <a href="https://www.nativescript.org/blog/nativescript-ui-is-now-free-here-s-how-to-get-started">announced to be free</a>. Each of them can be installed via npm separately.</p><ul><li><a href="https://www.nativescript.org/nativescript-sidekick"><strong>NativeScript Sidekick</strong></a></li></ul><p>A desktop application with set of tools. Announced at July 2017, facilitating simple and tedious works(ex. scaffolding, build, etc.).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/622/1*0RUpZcckwbVQ9NuBQ8ySCg.png" /></figure><p>This desktop application was developed using Vue.js and Electron. Hierarchically positioned on the top of <a href="https://github.com/NativeScript/nativescript-cli">NativeScript CLI</a>. This means all of the CLI functionalities are available within.</p><h4>The expansion of ecosystem</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/756/1*GnEPGdIzHBvOUDcgWtnFAQ.png" /><figcaption><a href="https://nativescript-vue.org/">NativeScript-Vue</a></figcaption></figure><p>From the <a href="https://www.vuejs.amsterdam/">Vue.js Amsterdam</a> conference event held on last February, announced the <a href="https://www.nativescript.org/blog/announcing-nativescript-vue-1.0">Vue.js support on NativeScript</a>. Unlike as Angular support is done by the NativeScript dev team, Vue.js support is driven by community effort. The support on Vue.js, can expand the usability of the NativeScript in one more step further.</p><p>Aside of this, there’re a lot of different community-driven plugins. <a href="https://github.com/eddyverbruggen/nativescript-ar">nativescript-ar</a> for AR support, is one of the featured plugin. It uses Apple’s <a href="https://developer.apple.com/arkit/">ARKit</a>(iOS 11) and Google’s <a href="https://developers.google.com/ar/">ARCore</a>(Oreo) API for AR application development.</p><ul><li><a href="https://www.nativescript.org/blog/preview-of-augmented-reality-in-nativescript">Preview of Augmented Reality in NativeScript</a></li></ul><h4>Prospectives</h4><p>What will be the next moves for NativeScript? Taking a look on roadmap can give a rough idea on it.</p><ul><li><a href="https://www.nativescript.org/roadmap-and-releases">Roadmap &amp; Release Notes</a></li></ul><p>Will strength support on multi-platforms. The current community-driven Vue.js support will be taken over, supporting it officially.</p><p>And will break the shell of being mobile application tool only, expanding its territory as being multi-platform development tool.</p><p>In prove on that, there’s already <a href="https://www.nativescript.org/blog/building-an-android-tv-app-with-nativescript">AndroidTV PoC plugin</a> for TV apps development, and will likely add the support of <a href="https://www.android.com/auto/">Android Auto</a> and <a href="https://www.apple.com/ios/carplay/">Apple CarPlay</a> also.</p><blockquote>If you’re interested on NativeScript, checkout also:</blockquote><blockquote><a href="https://market.nativescript.org/"><strong>NativeScript Marketplace</strong></a><br>You’ll find a variety of plugins and templates</blockquote><blockquote><a href="https://play.nativescript.org/"><strong>NativeScript playground</strong></a><br>Experience NativeScript development via online editor</blockquote><blockquote><a href="https://www.nativescript.org/get-the-nativescript-book"><strong>The NativeScript book</strong></a><br>Free 450 pages NativeScript development book.</blockquote><h3>React Native</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/409/1*WFcMCllnR-ftWkCYFLDznA.png" /></figure><p>Since its first appearance at <a href="https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/">March of 2015</a>, it was proportionally grown in conjunction as the React popularity growth. React Native stands in the leading position of native mobile app development in these days.</p><p>Regularly delivering new release on every month. At this point(June 2018) the latest is <a href="https://github.com/react-native-community/react-native-releases/blob/master/CHANGELOG.md#0560">v0.56</a>.</p><p>From this release, updated many of dependents minimum requirements (Babel 7, Node 8, iOS9, Xcode 9). And also strengthened the type checking by Flow.</p><p>On similarity with the popular CLI <a href="https://github.com/facebook/create-react-app">create-react-app</a> tool, announced <a href="https://github.com/react-community/create-react-native-app">create-react-native-app</a> on March of 2017.</p><h4>Ecosystem</h4><p>Variety of plugins are developed by many third-parties. Among them, the representatives are coming from below repositories. The members of the group are from the official React team and the third-parties team.</p><ul><li><a href="https://github.com/react-community">React Native Community</a></li><li><a href="https://github.com/react-native-community">React Community</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/677/1*PyBeraSMdtnxocgGag9FeQ.png" /></figure><p>The create-react-native-app mentioned above, is one of the <a href="http://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html">project made in cooperation</a> with <a href="https://expo.io/">Expo</a> and React Team.</p><p>Expo is developing a variety of React Native <a href="https://expo.io/tools">open source toolchains</a>. The most featured is <a href="https://github.com/expo/xde/releases">Expo XDE</a>(eXpo Development Environment), which provides an environment for developing and testing on desktop.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/498/1*ExLLDIEVHZfmaTDyxOB41g.png" /><figcaption>Expo’s toolchain</figcaption></figure><blockquote>For more about React Native development, also checkout:</blockquote><blockquote>- <a href="http://www.awesome-react-native.com/">Awesome React Native</a><br>- <a href="https://www.native.directory/">Native Directory</a><br>- <a href="https://hackernoon.com/how-to-become-a-react-native-developer-in-2018-d9bc85e1d91f">How to Become a React Native Developer in 2018</a></blockquote><h4>Prospectives</h4><p>Will likely continue its success. Difficult to predict what will be added or changed due to the lack on detailed roadmap and milestone.</p><p>But, a big change will to come. In a recent(June 14th) post from official blog, announced the rearchitecturing plan for React Native.</p><blockquote>We’re working on a large-scale rearchitecture of React Native to make the framework more flexible and integrate better with native infrastructure in hybrid JavaScript/native apps. —<a href="https://facebook.github.io/react-native/blog/2018/06/14/state-of-react-native-2018"> State of React Native 2018</a></blockquote><p>Isn’t reached a major version release yet. When the tool is matured enough, could possible take the same path on changing its <a href="https://reactjs.org/blog/2016/02/19/new-versioning-scheme.html">major version as React</a>(v0.14.7 went to v15.0.0).</p><h3>Attempts on one codebase devs</h3><p>These days tendency is not to use one type of language(JavaScript) for one platform only. There’re community ecosystem attempts to make use of same codebase for native-app and web-app.</p><p>The <a href="https://github.com/necolas/react-native-web">React Native for Web</a> project is a good example, attempting React Native apps to be rendered on web.</p><p>For Angular, the <a href="https://github.com/TeamMaestro/angular-native-seed">Angular NativeScript Seed</a> project provides a way to develop web-apps and NativeScript apps on one codebase via Angular CLI.</p><p>Enterprise companies will be welcoming on this, because they can save lots of costs with this methodology. But this is pretty new approach, requiring variety of success experiences for a broad adoption.</p><h3>Desktop Application</h3><p>This isn’t an area with frequent changes. Each project has their own direction and goals set, but it seems having a clear winner on this.</p><blockquote>Maybe the recent acquisition of GitHub from MS could give some changes on this.</blockquote><blockquote>Electron was started as <a href="https://atom.io/">Atom</a>’s desktop shell. Electron based MS <a href="https://code.visualstudio.com/">VSCode</a> is in the same category as Atom. For the acquisition, MS now likely or not, possessing two similar products as well, and this could bring some future changes.</blockquote><h3>Electron</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/424/1*HewkL4hoT_0RZUtby9R9HQ.png" /></figure><p>In the recent year showed a steady growth for Electron. On May of 2017, monthly downloads was 370K. By the April 2018 this numbers were increased approx. 47% than a year ago, reaching 540K downloads.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/755/1*FsNZkb8RD_RAnuUF_R-4hw.png" /><figcaption><a href="https://npm-stat.com/charts.html?package=electron&amp;from=2017-05-01&amp;to=2018-04-30">Electron downloads: May 2017 to Apr 2018</a></figcaption></figure><p>From the <a href="https://electronjs.org/releases#2.0.0">v2.0 release</a> at 2nd May of 2018, added support for Chrome 61, Node 8.9.3, V8 6.1.534.41 and Linux <a href="https://developer.gnome.org/gtk3/stable/">GTK+ 3</a>.</p><p>Bunch of new APIs(<a href="https://github.com/electron/electron/pull/11565">file loading</a>, <a href="https://github.com/electron/electron/pull/11469">locale setting</a>, <a href="https://github.com/electron/electron/pull/11832">enable/disable window</a>, etc.) and the support on <a href="https://electronjs.org/blog/in-app-purchases">in-app purchases for MacOS</a>(for Windows stores is on the way also) were added.</p><p>In the beginning of May, announced the support of <a href="https://electronjs.org/blog/autoupdating-electron-apps">AutoUpdating for Open-Source Apps</a> <a href="https://github.com/electron/update.electronjs.org">hosting service</a>. The “<em>auto update</em>” feature, can be implemented very easily with the use of provided <a href="https://github.com/electron/update-electron-app">update-electron-app</a> module.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/422/1*jt0-JVBgi1qmtMHO1UrNaQ.png" /></figure><p>Since the <a href="https://electronjs.org/releases#1.6.9">v1.6.9</a> added the <a href="https://electronjs.org/blog/typescript">inclusion of TypeScript definition</a> file, which let facilitate write code more easily via code assists and it could reduce the possibilities on buggy code writing.</p><h4>Prospectives</h4><p>The new versioning strategy will be applied, giving more frequent updates than before.</p><blockquote>This change means you’ll see the major version bump more often, and it will usually be a major update to Chromium. Patch releases will also be more stable, as they will now only contain bug fixes with no new features. — <a href="https://electronjs.org/blog/electron-2-semantic-boogaloo">Electron 2.0 and Beyond — Semantic Versioning</a></blockquote><h3>NW.js</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/358/1*lPyIJo1RwpkMlZedKTGqRg.png" /></figure><p>Since its creation by <a href="https://github.com/rogerwang">Roger Wang</a> at the year of 2011, the NW.js(previously known as node-webkit) got a massive attention. Later then, establishing the birth of Electron.</p><p>The core member of Electron, <a href="https://github.com/zcbenz">Cheng Zhao</a> has been participated on a internship program of the node-webkit project. From this experience brought the development of Electron, which was based on node-webkit v0.3.6.</p><blockquote>Read more behind story from: <a href="http://cheng.guru/blog/2016/05/13/from-node-webkit-to-electron-1-0.html">From node-webkit to Electron 1.0</a></blockquote><p>There’s no download statistics provided, making the difficulty of direct comparison with Electron. But indirectly, the comparison could be made with the <a href="https://www.npmjs.com/package/nw">nw</a> package(a NW.js installer) download number.</p><p>By the April of 2018, there’s a huge difference gap - 540K/Electron, against 19K/NW.js. Electron has 25x more downloads(isn’t accurate, check the below note) than NW.js.</p><blockquote><strong>NOTE </strong>— <a href="https://medium.com/u/c73505bf9fae">Roger Wang</a>, the author of NW.js, pointed as by <a href="https://medium.com/@rogerwa/regarding-the-download-stats-for-nw-js-dd5bc1b55a3d">commenting on this article</a>:</blockquote><blockquote>Regarding the download stats for NW.js, I have to say that the number of ‘nw’ packages downloaded from npmjs.org is far less than the numbers we see on ‘dl.nwjs.io’. Thus it’s not accurate to say that ‘Electron has 25x more downloads than NW.js’.</blockquote><blockquote>I’m not authorized to publish the number of NW.js downloads, but I can say that it has been growing steady beyond our expectation.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/755/1*FTQ7sw_iJYgSuCJrGmSF4g.png" /><figcaption><a href="https://npm-stat.com/charts.html?package=electron&amp;from=2017-05-01&amp;to=2018-04-30">Download status of nw: May 2017 to Apr 2018</a></figcaption></figure><p>The <a href="https://nwjs.io/blog/v0.31.3/">v0.31.3</a>, was released at June 2018, adding support of Node.js v10.5.0 with lots of bug fixes.</p><p>For this type of tools(also Electron), is common to have to adopt the base applications(like Chromium and Node.js) updates, correlating with their new releases. This makes forcing a constant releases in a very short period.</p><blockquote>For more detailed NW.js, checkout: <a href="https://nwjs.io/blog/">https://nwjs.io/blog/</a></blockquote><h3>PWA (Progressive Web Apps)</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/345/1*pVZrHKPCPsMD2OiWjW9CtA.png" /><figcaption>The new community-driven PWA logo (<a href="https://medium.com/samsung-internet-dev/we-now-have-a-community-approved-progressive-web-apps-logo-823f212f57c9">We now have a community-approved Progressive Web Apps logo!</a>)</figcaption></figure><p>PWA based on different web standard specs, was struggling for long time for a broad adoption. Especially Google put lots of efforts into.</p><p>The lack of broad supports by browsers(primarily Safari and Edge) was the primary obstacle.</p><p>The PWA’s core spec is ServiceWorker(offline caching). Safari announced the support, starting from <a href="https://webkit.org/blog/8042/release-notes-for-safari-technology-preview-46/">Safari Technology Preview 46</a>(Dec. 2017) and by the <a href="https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html#//apple_ref/doc/uid/TP40014305-CH14-SW2">Safari 11.1</a>(MacOS 10.13.4) release, adopted it officially.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/526/1*sr5ehIPFN1EC7sVMK-5n9Q.png" /><figcaption><a href="https://twitter.com/rmondello/status/979470498714103808">A tweet from Ricky Mondello, member of Safari dev team</a></figcaption></figure><p>Unlikely with other vendors, WebKit has adopted different approach on caching policy. The unused caches will be deleted after a few weeks.</p><blockquote>Service worker and Cache API stored information will grow as a user is browsing content. To keep only the stored information that is useful to the user, <strong>WebKit will remove unused service worker registrations after a period of a few weeks. Caches that do not get opened after a few weeks will also be removed.</strong> Web Applications must be resilient to any individual cache, cache entry or service worker being removed. — <a href="https://webkit.org/blog/8090/workers-at-your-service/">Workers at Your Service</a></blockquote><blockquote>For more technical issues, checkout: <a href="https://medium.com/@firt/progressive-web-apps-on-ios-are-here-d00430dee3a7">Progressive Web Apps on iOS are here</a></blockquote><p>In case of Edge, the <a href="https://blogs.windows.com/msedgedev/2017/12/19/service-workers-going-beyond-page/">ServiceWorker support</a> has been added from the <a href="https://blogs.windows.com/blog/tag/windows-insider-program/">Window Insider Build</a> (Dec. 2017). Later then, ServiceWorkers and Push Notification were enabled by default from the <a href="https://docs.microsoft.com/en-us/microsoft-edge/dev-guide#progressive-web-apps">EdgeHTML 17 release</a>.</p><p>What is the meaning of these updates? It means, the <a href="https://jakearchibald.github.io/isserviceworkerready/">basic support of PWA</a> is done on all modern browsers and is ready to use!</p><h3>PWA Ecosystem</h3><h4>Workbox</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*b7COUkxwd-dWQXC81TbdTQ.png" /></figure><p>The Google powered workbox, lets add offline capability to web-apps.</p><p>The <a href="https://github.com/GoogleChromeLabs/so-pwa">SO PWA</a>(StackOverflow PWA app) is an example app created using workbox.</p><p>The similar old tools, <a href="https://github.com/GoogleChromeLabs/sw-toolbox">sw-toolbox</a> and <a href="https://github.com/GoogleChromeLabs/sw-precache">sw-precache</a>, <a href="https://github.com/GoogleChromeLabs/sw-toolbox#should-you-switch-to-workbox">will be deprecated</a> replaced by workbox.</p><h4>HNPWA</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/394/1*bn6J8PMFSCPmkAYyNcMAug.png" /></figure><p>HNPWA is the curated examples of PWA apps. These apps are implementing the popular well known Hacker News website, made with different frameworks.</p><p>HNPWA has the similarity with the famous <a href="http://todomvc.com/">TodoMVC</a>, which was giving a reference examples for frameworks selection.</p><h4>PWA Starter Kit</h4><p><a href="https://github.com/Polymer/pwa-starter-kit">PWA Starter Kit</a> consists with a sample project in a purpose of helping the development of PWA app, in a range of build configuration to page style structures, like responsible design layouts.</p><blockquote>Checkout the Google I/O ’18 session:<br><a href="https://www.youtube.com/watch?v=we3lLo-UFtk">PWA starter kit: build fast, scalable, modern apps with Web Components</a></blockquote><h4>pwa-helpers</h4><p><a href="https://github.com/Polymer/pwa-helpers">pwa-helpers</a> are small set of helper utilities developed by Polymer’s team. These are router, network, metadata and media-query related utilities.</p><p>It also includes helpers for testing and the Redux.</p><h3>Prospectives</h3><p>The recent Google I/O ‘18(May 2018), included a variety of PWA’s sessions. This could give an active prediction on how Google will move for PWA.</p><blockquote>Google I/O ’18 PWA releated sessions:</blockquote><blockquote>- <a href="https://www.youtube.com/watch?v=NITk4kXMQD">PWAs: building bridges to mobile, desktop, and native</a><br>- <a href="https://www.youtube.com/watch?v=we3lLo-UFtk">PWA starter kit: build fast, scalable, modern apps with Web Components</a><br>- <a href="https://www.youtube.com/watch?v=X6yof_vIQnk">Beyond single-page apps: alternative architectures for your PWA</a><br>- <a href="https://www.youtube.com/watch?v=QCoQs9NO9q0">Build e-commerce sites for the modern web with AMP, PWA, and more</a></blockquote><p>Microsoft by adding the support on Edge, will likely put more investment on PWA.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/487/1*juFPfGYUfhC4F7mI1EqDFA.png" /><figcaption><a href="https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps">Progressive Web Apps on Windows</a></figcaption></figure><p>They are posting related tech documents on their web site, like the document about how to deploy PWA apps on MS Store(<a href="https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps/microsoft-store">Progressive Web Apps in the Microsoft Store</a>).</p><p>The PWA got an attention as an alternative option of native mobile apps, for possessing the capability of being installed and used like native mobile app.</p><blockquote>Checkout for different options for mobile app development:<br><a href="https://www.telerik.com/blogs/choose-between-progressive-web-apps-react-native-nativescript-2018">Choosing Between Progressive Web Apps, React Native &amp; NativeScript in 2018</a></blockquote><p>Now the adoption environment has been matured. Will PWA occupying some significant position on app development? This will be really an interest point to see.</p><h3>Augmented Reality &amp; Virtual Reality</h3><p>AR/VR are promising future techs with lots of attentions. But unlike the attentions, the usage undergoes than the expectation. There’s no clear leading tool in this area, staying several years on transition period.</p><p>But the usage will be increasing likely or not. And this will prompt lots of competitions battle to take the leading position.</p><h3>WebVR API</h3><p>WebVR API, announced at March of 2016, is the standard spec to bring Virtual Reality on the web. The latest <a href="https://immersive-web.github.io/webvr/spec/1.1/">WebVR 1.1</a> released at April of 2017.</p><ul><li><a href="https://hacks.mozilla.org/2016/03/introducing-the-webvr-1-0-api-proposal/">Introducing the WebVR 1.0 API Proposal</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*Vi9MxQigJLi4q3qKzW6hyQ.png" /></figure><p>During the year of 2017, the support of WebVR was broadly adopted and appeared lots of related tools and libraries.</p><p><strong>Broad browsers adoption</strong></p><ul><li><a href="https://www.mozilla.org/en-US/firefox/55.0/releasenotes/">Firefox 55.0</a> (Aug. 2017)</li><li><a href="https://blogs.windows.com/msedgedev/2017/04/11/introducing-edgehtml-15/">Microsoft Edge</a> (Apr. 2017)</li><li><a href="https://www.engadget.com/2016/12/26/samsungs-gear-vr-browser-gets-improved-webvr-content-support/">Samsung GearVR</a> (Dec. 2016)</li></ul><p><strong>Variety of tools and libraries</strong></p><ul><li>Mozilla’s <a href="https://aframe.io/">A-Frame</a></li><li><a href="https://facebook.github.io/react-360/">React 360</a>: 360 viewing and VR contents on React</li><li><a href="https://playcanvas.com/">PlayCanvas</a>(a web game engine), <a href="https://vizor.io/">Vizor</a>(making and sharing VR contents), <a href="https://ottifox.com/">Ottifox</a>(tool for AR/VR), <a href="https://help.sketchfab.com/hc/en-us/articles/211640363-VR-Editor/">Sketchfab’s VR Editor</a>, <a href="https://github.com/jeromeetienne/ar.js">AR.js</a>, etc.</li></ul><p>Aside of these interests growth, it has been arisen the necessity of the new API design, due to the insufficiency of application development support by the WebVR API.</p><blockquote>Based on feedback received from web developers, hardware manufacturers, and other implementers the WebVR API has been undergoing a significant refactoring — <a href="https://www.reddit.com/r/webdev/comments/6zpgu1/were_the_chrome_team_here_to_answer_questions/dn0iisg/">We’re the Chrome team, here to answer questions about building a better web. Ask us Anything (on 9/14)!</a></blockquote><h3>The new WebXR Device API</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/273/1*pEkXPsw4vgxxMSbep37bTQ.png" /></figure><p>Oct of 2017, the new WebXR Device API has been proposed, in a replacement of the existing WebVR API to overcome its limitation.</p><ul><li><a href="https://blog.mozilla.org/blog/2017/10/20/bringing-mixed-reality-web/">Bringing Mixed Reality to the Web</a></li></ul><p>The new proposal, includes the AR(Augmented Reality) support in addition with the coexisted VR(Virtual Reality). It’s advocating the “<strong>Immersive Web</strong>” terminology also.</p><blockquote><strong>What is the ‘Immersive Web’?</strong></blockquote><blockquote>The immersive web is defined as a <strong>collection of new and upcoming technologies</strong> that prepares the web for the full spectrum of immersive computing.</blockquote><blockquote>The immersive web means <strong>virtual world experiences hosted through the browser</strong>. This covers entire virtual reality (VR) experiences surfaced in the browser or in VR enabled headsets.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/764/1*OiQccjGKGvEvVTg_yWBr7g.png" /><figcaption><a href="https://developers.google.com/web/updates/2018/05/welcome-to-immersive">Welcome to the immersive web</a>: Staged spectrum from Reality to Virtual Reality</figcaption></figure><p>The ‘WebXR Device API’ standard is lead by <a href="https://github.com/immersive-web">Immersive Web Community Group</a> constituted with the developers from Google, Microsoft and Mozilla. This standard is also a <a href="https://www.androidpolice.com/2018/02/04/webvr-now-webxr-device-api-supports-augmented-reality/">substitution for the WebVR 2.0</a>.</p><p>For now, it can be ran only on Chrome 67(only VR support for now. AR will be on 68) with the chrome://flags/#webxr flag setting.</p><p>The supported environments are:</p><ul><li>Headsets (<a href="https://vr.google.com/daydream/">Daydream VR</a>, <a href="https://vr.google.com/cardboard/">Cardboard</a>)</li><li>Desktop VR System (<a href="https://www.vive.com/">HTC Vive</a>/<a href="https://www.oculus.com/rift/">Oculus Rift</a>)</li><li>Via the ‘<a href="https://developers.google.com/vr/develop/unity/guides/magic-window">Magic Window</a>’, for those devices without having VR support</li></ul><p>The “<em>Magic Window</em>” is a technique of viewing the ‘immersive web’ contents on mobile devices possessing orientation sensor, based on the single view app renderer.</p><blockquote>For more detailed informations:</blockquote><blockquote>1) Magic Window:<br>- <a href="https://youtu.be/1t1gBVykneA?t=849">The future of the web is immersive (Google I/O ‘18)</a></blockquote><blockquote>2) WebXR Device API:<br>- <a href="https://www.youtube.com/watch?v=1t1gBVykneA">The future of the web is immersive</a> <br>- <a href="https://www.youtube.com/watch?v=bNJJCREZgVM">Best practices to design AR applications</a></blockquote><h4>Prospectives</h4><p>Seeing the evolving path flows from the WebVR API to WebXR Device API, and the support of related APIs on major OS(Apple’s ARKit API and Google’s ARCore API), is an obvious to predict the appearance of the new related AR/VR services and apps.</p><p>The new WebXR Device API is opening the new possibility to make AR/VR experiences on the web. Prior of this, the usual way was by native mobile apps development.</p><p>For not being matured enough, in terms of standardization, many will be approaching the use of this tech just for PoC purposes. But the majority will be agreeing these are the ‘next cutting edge tech’.</p><p>If the standardization process continues well as expected, we’ll probably seeing the broad adoption on the web in near future.</p><blockquote>Here are useful tools and samples, you might check.</blockquote><blockquote>- <a href="https://github.com/immersive-web/webxr-polyfill">WebXR Polyfill</a>: The WebXR Device API polyfill <br>- <a href="https://github.com/google-ar/three.ar.js">three.ar.js</a>: A Three.js helper library to implement AR<br>- <a href="https://itunes.apple.com/us/app/webxr-viewer/id1295998056?mt=8">WebXR Viewer</a>: Mozilla’s WebXR viewer for iOS <br>- <a href="https://immersive-web.github.io/webxr-samples/">WebXR-samples</a>: Variety of WebXR API samples<br>- <a href="https://mixedreality.mozilla.org/">Mozilla VR</a>: Mozilla’s VR website</blockquote><h3>Closing</h3><p>From its birth of JavaScript at Dec 4th of 1995, nobody couldn’t be imagining what it is like as today.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/772/1*2RT-3QwOWmboLEuixpiSBg.png" /><figcaption>The press release of Netscape, announcing JavaScript (source: <a href="https://web.archive.org/web/20070916144913/http:/wp.netscape.com/newsref/pr/newsrelease67.html">weybackmachine</a>)</figcaption></figure><p>If you’re developer, probably knows the best selling book written by Martin Fowler, titled “<a href="https://martinfowler.com/books/refactoring.html">Refactoring — Improving the Design of Existing Code</a>”(1999). At that time, he used JAVA for the example codes.</p><p>Last March, he announced the plan on writing the 2nd edition, which will likely out at the end of this year 2018. For this time, will take JavaScript for sample codes in replacement of JAVA.</p><blockquote>… but the compelling reason for choosing it over Java is that isn’t wholly centered on classes. There are top-level functions, and use of first-class functions is common. This makes it much easier to show refactoring out of the context of classes. — <a href="https://martinfowler.com/articles/201803-refactoring-2nd-ed.html">Announcing the Second Edition of “Refactoring”</a></blockquote><p>We don’t know what will be the end of JavaScript, but we’re witnessing the great journey it is taking. I’m pretty sure, that there’s no one will objecting on this.</p><p>Yes, “<strong><em>JavaScript is still eating the world</em></strong><em>”</em>.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fupscri.be%2Fdde502%3Fas_embed%3Dtrue&amp;dntp=1&amp;url=https%3A%2F%2Fupscri.be%2Fhackernoon%2F&amp;image=https%3A%2F%2Fucarecdn.com%2F57662ddc-da7c-407b-afcb-cb45184b2705%2F&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=upscri" width="800" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/3c851dac986ab6dbb2d1aaa91205a8eb/href">https://medium.com/media/3c851dac986ab6dbb2d1aaa91205a8eb/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ee0b79ee059f" width="1" height="1"><hr><p><a href="https://hackernoon.com/the-status-of-javascript-outside-of-the-browser-2018-beyond-ee0b79ee059f">The status of JavaScript outside of the browser: 2018 &amp; beyond.</a> was originally published in <a href="https://hackernoon.com">Hacker Noon</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[billboard.js 1.5.0 released today!]]></title>
            <link>https://medium.com/@alberto.park/billboard-js-1-5-0-released-today-920c82864637?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/920c82864637</guid>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Fri, 22 Jun 2018 08:12:05 GMT</pubDate>
            <atom:updated>2018-06-24T01:35:50.674Z</atom:updated>
            <content:encoded><![CDATA[<p>Super excited to announce the new release of billboard.js today!</p><p>Added 7 new features and a lot of bug fixes, and I’m sure this is an one another step forward to make an improved library.</p><blockquote>For the detailed release note, checkout: <a href="https://github.com/naver/billboard.js/releases/tag/1.5.0">https://github.com/naver/billboard.js/releases/tag/1.5.0</a></blockquote><h3>What’s new?</h3><h4>The new Radar type</h4><p>A long waited ‘radar’ type support has been added from this release. You can see the working demo on below link.</p><ul><li><a href="https://naver.github.io/billboard.js/demo/#Chart.RadarChart">https://naver.github.io/billboard.js/demo/#Chart.RadarChart</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WZmlgqig54pT4ki63_zKBQ.png" /><figcaption>Different radar types</figcaption></figure><p>To use ‘radar’ type, just simply set <strong><em>data.types</em></strong> option value. (currently has no support for separate type indication using <strong><em>data.type</em></strong> option)</p><pre>bb.generate({<br>  data: {<br>    x: &quot;x&quot;,<br>    columns: [<br>      [&quot;x&quot;, &quot;Data A&quot;, &quot;Data B&quot;, &quot;Data C&quot;, &quot;Data D&quot;, &quot;Data E&quot;],<br>      [&quot;data1&quot;, 330, 350, 200, 380, 150]<br>    ],<br>    type: &quot;radar&quot;,  // that&#39;s all!<br>  }<br>});</pre><p>Also, there’re several useful new options for radar type, which can help customize to get different variation of the data visualization.</p><ul><li><a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.radar">https://naver.github.io/billboard.js/release/latest/doc/Options.html#.radar</a></li></ul><p>As being an initial support, there’re possible incompatibility with other options. These will be fixed along with future releases.</p><h4>axis.[x|y|y2].tick.text.position</h4><p>Usually tick’s texts position doesn’t necessarily being manipulated, but there’re moments(mostly for designing purposes) to do so.</p><p>Let’s assume you want display y axis to be positioned inside of the data area. And want to make every grids indicating each data amount steps.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/265/1*s8fNOkyhoZW05C-fu0ve_g.png" /><figcaption>tick’s text position before applying option (left) / after (right)</figcaption></figure><p>Setting each tick’s text position is really easy. Just set position pixel for x and y coordinate value. Every value is treated relatively as the original position.</p><pre>axis: {<br>  y: {<br>    tick: {<br>      text: {<br>        position: {<br>          x: 10, // original x position + 10px<br>          y: 10  // original y position + 10px<br>        }<br>      }<br>    }<br>  }<br>}</pre><p>These can give a variety way to customize and use axes tick’s text value.</p><h4>axis.[x|y].clipPath</h4><p>This new options can be used along with tick’s text position option.</p><p>Usually the axes elements are clipped to not surpass the actual axes area and these are implemented by the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath"><em>clip-path</em> attribute</a>.</p><p>But when you need implement an rotated bar using x axis value coordinated on each data bars like the example below, the tick texts aren’t visible due to the <em>clip-path</em> attribute.</p><ul><li><a href="https://naver.github.io/billboard.js/demo/#Axis.XAxisTickPosition">https://naver.github.io/billboard.js/demo/#Axis.XAxisTickPosition</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/855/1*TAs1WK6SA0UJkLqTKRnIkQ.png" /></figure><p>This is the moment for <strong>axis[x|y]. clipPath</strong> option comes to play.</p><pre>axis: {<br>    x: {<br>      clipPath: false  // will not set &#39;clip-path&#39; attribute<br>    }, <br>    y: {<br>      clipPath: false  // will not set &#39;clip-path&#39; attribute<br>    }<br>}</pre><h4>Improved lining for x axis</h4><p>Do you have struggled to display x axis category texts properly? By default, <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.axis%25E2%2580%25A4x%25E2%2580%25A4tick%25E2%2580%25A4multiline">axis.x.tick.multiline</a> option is set.</p><p>It will adjust x axis text’s line automatically, but it doesn’t look nicely and is also unexpected determine the exact new line will happen.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/559/1*PlZtoWvjpiFkOZjuKJ6Nwg.gif" /><figcaption>Automatic multiline for x axis text</figcaption></figure><p>To mitigate, there is <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.axis%25E2%2580%25A4x%25E2%2580%25A4tick%25E2%2580%25A4width">axis.x.tick.width</a> and <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.axis%25E2%2580%25A4x%25E2%2580%25A4tick%25E2%2580%25A4rotate">axis.tick.rotate</a> options, but none of these are effective if you want get exact lining.</p><p>This is the reason of the implementation. Give user to line on exact position they want.</p><p>When you bind the category names for data, just put \n character where you want to be lined and that’s all.</p><pre>data: {<br>      columns: [<br>         [&quot;x&quot;,<br>          &quot;<a href="http://www.somes\nitename1\n.com">www.somes<strong>\n</strong>itename1<strong>\n</strong>.com</a>&quot;,<br>          &quot;<a href="http://www.\nsomesitename2\n.com">www.<strong>\n</strong>somesitename2<strong>\n</strong>.com</a>&quot;,<br>          &quot;<a href="http://www.somesitename3\n.com">www.somesitename3<strong>\n</strong>.com</a>&quot;,<br>          &quot;<a href="http://www.somesitename4.com">www.</a><a href="http://www.\nsomesitename2\n.com"><strong>\n</strong></a><a href="http://www.somesitename4.com">somesitename4.com</a>&quot;,<br>          &quot;<a href="http://www.somesitename5.com">www.somesitename5</a><a href="http://www.\nsomesitename2\n.com"><strong>\n</strong></a><a href="http://www.somesitename5.com">.com</a>&quot;<br>         ],<br>         [&quot;pv&quot;, 90, 100, 140, 200, 100]<br>      ],<br>   }</pre><p>And see what it looks likes. There’s no more headaches doing some width calculation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/582/1*yInxTAtIAymCViArnZMQ7Q.png" /><figcaption>Specified multiline of x axis text</figcaption></figure><h4>tooltip.linked.name</h4><p><a href="https://naver.github.io/billboard.js/demo/#Tooltip.LinkedTooltips">tooltip.linked</a> option was added since 1.4.0 release. This was giving an opportunity of interaction among charts generated within a same context.</p><p>The new <a href="https://naver.github.io/billboard.js/release/latest/doc/Options.html#.tooltip"><em>tooltip.linked.name</em></a> let group linked charts. When is indicated, the ‘linking interaction’ will work for the same name groups only.</p><pre>var chart1 = bb.generate({<br> ...<br> tooltip: {<br>  linked: {<br>   name: &quot;link01&quot;  // will be linked with the &#39;link01&#39; name group<br>  }<br> }<br> <br>var chart2 = bb.generate({<br> ...<br> tooltip: {<br>  linked: {<br>   name: &quot;link02&quot;  // will be linked with the &#39;link02&#39; name group<br>  }<br> }<br> <br>var chart3 = bb.generate({<br> ...<br> tooltip: {<br>  linked: {<br>   name: &quot;link01&quot;<br>  }<br> }<br> <br> <br>var chart4 = bb.generate({<br> ...<br> tooltip: {<br>  linked: {<br>   name: &quot;link02&quot;<br>  }<br> }</pre><p>Checkout the example in action. There’re 4 charts with two different name groups and they’re interacting only with the same linked name value.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/594/1*6SSHehCbcAFgezHboYbmuA.gif" /><figcaption>linked tooltip with grouped name</figcaption></figure><h3>What’s Next?</h3><p>A year ago, released the first version of billboard.js.</p><p>Maybe it was slow for some, but I want define as a steady year adopting and implementing new features for users.</p><p>The rough plan for the next release are:</p><ul><li>Multiple Axes</li><li>Themed CSS file</li></ul><p>and more!</p><p>Hope these updates be useful and stay well until the next release!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=920c82864637" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[billboard.js 1.4.0 release]]></title>
            <link>https://medium.com/@alberto.park/billboard-js-1-4-0-release-79fa78b23e7b?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/79fa78b23e7b</guid>
            <category><![CDATA[billboard-js]]></category>
            <category><![CDATA[data-visualization]]></category>
            <category><![CDATA[charts]]></category>
            <category><![CDATA[d3]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Tue, 10 Apr 2018 07:38:48 GMT</pubDate>
            <atom:updated>2018-04-10T07:38:48.623Z</atom:updated>
            <content:encoded><![CDATA[<p>As may you know, billboard.js has d3.js dependency and the new major release of <a href="https://github.com/d3/d3/releases/tag/v5.0.0">D3.js v5.0</a> was out on 23rd March.</p><p>v1.4.0 release was scheduled by June, but to get rid the compatibility issue(data loading via XHR), we moved up to release earlier than expected.</p><p>D3.js v5.0 removed the support of d3-request (for XHR) and replaced to d3-fetch(Fetch API). Due to this change, we removed use of d3-request, replacing it with the native XHR.</p><blockquote>We’re planning to move all the old async codes to Promise based, at the time we’re dropping old browsers support.</blockquote><p>Even this is a small change release, added two interesting features to checkout.</p><p>What’s New?</p><h4>Linked tooltips</h4><p>An excellent work from <a href="https://github.com/rshingleton"><em>github/@rshingleton</em></a>, which allows show synchronized tooltip across multiple charts generated within same page.</p><ul><li><em>Demo: </em><a href="https://naver.github.io/billboard.js/demo/#Tooltip.LinkedTooltips"><em>https://naver.github.io/billboard.js/demo/#Tooltip.LinkedTooltips</em></a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/534/1*tqK-WBZ2NuifRDX7t_Mb-g.gif" /><figcaption>Linked tooltip</figcaption></figure><p>Just simply set tooltip.linkedoption to true, on each chart generation.</p><pre>// chart #1<br>bb.generate({<br> ...<br> tooltip: {<br>     linked: true<br> },<br>});</pre><pre>// chart #2<br>bb.generate({<br> ...<br> tooltip: {<br>     linked: true<br> },<br>});</pre><h4>bar.padding</h4><p>This new option, allows add ‘padding’ between each bar graph. You can notice the difference from the below example image.</p><ul><li><em>Demo: </em><a href="https://naver.github.io/billboard.js/demo/#BarChartOptions.Padding"><em>https://naver.github.io/billboard.js/demo/#BarChartOptions.Padding</em></a></li></ul><p>The first is shown without padding and the second with padding.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/402/1*DkiNOwue0wP0v5x_fo7Mhw.png" /><figcaption>bar chart with padding option</figcaption></figure><p>The usage is straight forward. Set bar.padding option with the value(px) and you’ll get padded bar chart.</p><pre>bar: {<br>  padding: 3<br>},</pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=79fa78b23e7b" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tom Humphris]]></title>
            <link>https://medium.com/@alberto.park/tom-humphris-257bbbe31482?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/257bbbe31482</guid>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Sat, 07 Apr 2018 02:24:01 GMT</pubDate>
            <atom:updated>2018-04-07T02:24:01.549Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://medium.com/u/a5ce9c27bf9c">Tom Humphris</a></p><p>Checkout out the details on:</p><ul><li><a href="https://github.com/vuejs/vue/pull/7171">https://github.com/vuejs/vue/pull/7171</a></li><li><a href="https://youtu.be/TRJMT9yjONQ?t=1753">https://youtu.be/TRJMT9yjONQ?t=1753</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=257bbbe31482" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The status of JavaScript libraries & frameworks: 2018 & beyond.]]></title>
            <link>https://hackernoon.com/the-status-of-javascript-libraries-frameworks-2018-beyond-3a5a7cae7513?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/3a5a7cae7513</guid>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Fri, 30 Mar 2018 07:48:20 GMT</pubDate>
            <atom:updated>2019-04-24T11:59:35.882Z</atom:updated>
            <content:encoded><![CDATA[<p>Libraries and <a href="https://hackernoon.com/tagged/frameworks">frameworks</a> are one of the intense competitiveness on front-end development.</p><p>In these days, the meaning of FE dev is about what libraries or frameworks is using.</p><p>Every year new different projects appeared with their own features, but now we can roughly agreeing that Angular, React or Vue.js are the pioneers in this world.</p><p>This was proved by the survey result.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/655/1*46QgY1otVaAT6S87hguZNg.png" /><figcaption><a href="https://stateofjs.com/2017/front-end/results/">State of JS 2017: Libraries</a></figcaption></figure><p>The nowdays FE dev can be illustrated as agonizing what is the best choice and taking a look of the current &amp; future status will be a good starting point of your consideration.</p><h3>React</h3><p>Without doubt, React leads among others. Last year faced a difficult moment — <a href="https://wptavern.com/react-users-petition-facebook-to-re-license-react-js-after-apache-software-foundation-bans-bsdpatents-license-in-dependencies">the license issue</a> — which could led loose the actual position, but <a href="https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/">treated well</a>.</p><p>Also, React is the most wanted on job markets. This result shows clearly that React is surpassing others.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/732/1*E2K5HyI9pYQhlhojRgdO5g.png" /><figcaption><a href="https://www.indeed.com/jobtrends/q-react-q-vue.js-q-angularJS-q-angular.html">indeed.com: Job Trends</a></figcaption></figure><p>At Jan/2018, the create-react-app(CLI tool helping create React app), has been moved from the incubation to the official facebook repository.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/454/1*Q042rJAWuG9nsXyzlhk5cA.png" /><figcaption><a href="https://twitter.com/i/web/status/955513652261482496">https://twitter.com/i/web/status/955513652261482496</a></figcaption></figure><p>The <a href="https://github.com/facebook/react/releases/tag/v16.0.0">version 16</a>(codenamed ‘Fiber’) which was announced Sep/2017, improved SSR(rewrite of server renderer) and added the support of custom DOM prop and fragment. Also, the render method has been updated to return multiple elements.</p><p>Fragment looks like to be an empty JSX tag. It allows groping child nodes without adding new one and has been <a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html">improved the usability on v16.2</a>.</p><pre>// fragments<br>render() {<br>  return (<br>   &lt;React.Fragment&gt;  // or Short Syntax: &#39;&lt;&gt;&#39;<br>      &lt;ChildA /&gt;<br>      &lt;ChildB /&gt;<br>      &lt;ChildC /&gt;<br>    &lt;React.Fragment&gt;  // or Short Syntax: &#39;&lt;/&gt;&#39;<br>  );<br>}</pre><p>Since Dec/2017, React started a new process to treat new features &amp; suggestions via <a href="https://github.com/reactjs/rfcs">RFC(Request For Comments)</a> inspired by <a href="https://github.com/rust-lang/rfcs">Rust RFC</a>.</p><h4><strong>New Context API</strong></h4><p>If you have experienced using React, is quite likely had the annoyance of through passing the top component’s status value to the lower in the React tree structure, known ‘<a href="https://www.reddit.com/r/reactjs/comments/4v3mcb/passing_down_too_many_props_to_child_components/">prop drilling</a>’.</p><p>This is one of the reason which state management libraries such as <a href="https://github.com/reactjs/redux">Redux</a> or <a href="https://github.com/mobxjs/mobx">MobX</a> comes to play.</p><p>Did you know? There’s a way to solve this issue using React’s API without using them. The ‘context API’.</p><p>But when you want to try using it, you’ll find “<a href="https://reactjs.org/docs/context.html#why-not-to-use-context">Why Not To Use Context</a>” from the official doc and even more, it recommends not using.</p><blockquote>If you’re still learning React, don’t use context</blockquote><p>To solve, purposed a new experimental ‘Context API’ as the first RFC issue. The new API was included on the new <a href="https://reactjs.org/blog/2018/03/29/react-v-16-3.html">v16.3 release</a>.</p><pre>Checkout more details:<br>- <a href="https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b">React’s ⚛️ new Context API</a><br>- <a href="https://medium.freecodecamp.org/replacing-redux-with-the-new-react-context-api-8f5d01a00e8c">Replacing Redux with the new React context API</a></pre><h4>Async Rendering</h4><p>The ‘async rendering’ was raised from the basic question of “How to provide the best user experience among the differences of the computer power and net latency?”.</p><p>During the development of v16, there was a consideration on it, but couldn’t continued due to the potential backward compatibility, but the support will be added on the future release.</p><p>Dan Abramov(member of React dev team), did two demos called as ‘Time Slicing’ and ‘Suspense’ from his speech during <a href="https://2018.jsconf.is/">JSConf Iceland last March</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/451/1*YjiHFfYWcmqWtnsxM3Jc3w.png" /><figcaption>The factors to be improved from the CPU and IO perspective.</figcaption></figure><p>Doing improvement on CPU side, is to filling gaps of the computer power difference. And the network side from IO.</p><ul><li><a href="https://www.youtube.com/watch?time_continue=1&amp;v=v6iR3Zk4oDY">Beyond React 16 by Dan Abramov — JSConf Iceland ⚛</a></li></ul><p><strong>Time Slicing(CPU)</strong></p><p>Time Slicing, provides a generic way for high priority updates to not blocked from the lower priority.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/437/1*6KVUdnGjfXBgrLTv0y792w.png" /></figure><p>Also it improves the responsiveness on lower performed devices by scheduling the complicated/difficult CPU jobs without the any intervention of the developer.</p><p><strong>Suspense (IO)</strong></p><p>Suspense provides a generic way to suspend and deferring component rendering from the asynchronous data loading.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/438/1*Jux9XB_Y25O85N9y8BoPZw.png" /></figure><p>It helps to get smoothness of the user experience(loading and rendering) without hurt from the async tasks(like REST, GraphQL API calls, etc).</p><h3>Vue.js</h3><p>2017 was an impressive and impactive year for Vue.js and similarly positioned as React and Angular as well.</p><p>Also became the most popular Front-End GitHub projects receving 40K stars last year.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/434/1*qfJ2Dxo_ON4OOrWd6Yspng.png" /><figcaption><a href="https://risingstars.js.org/2017/en/#section-framework">2017 JavaScript Rising Stars</a></figcaption></figure><p>Having the similarity as AngularJS, Vue.js can be an attractive alternative for AngularJS users.</p><p>This is some how persuasive having the consideration of:</p><ul><li>The migration to Angular is not that easy.</li><li>Knowing the official support for AngularJS will end.</li></ul><p>Evan You, the creator, talked about the similarity with AngularJS.</p><blockquote>I figured, what if I could just extract the part that I really liked about Angular and build something really lightweight without all the extra concepts involved? I was also curious as to how its internal implementation worked. I started this experiment just trying to replicate this minimal feature set, like declarative data binding. That was basically how Vue started.</blockquote><blockquote>— <a href="https://betweenthewires.org/2016/11/03/evan-you/">https://betweenthewires.org/2016/11/03/evan-you/</a></blockquote><h4>What differs Vue.js from others?</h4><p>Vue.js describes itself as “The Progressive <a href="https://hackernoon.com/tagged/javascript">JavaScript</a> Frameworks”.</p><p>The core focuses on data binding and component as React and it get easier for whom knowing the basic web technologies like HTML, JS and CSS.</p><p>But when the application becomes complicated, is inevitable the necessities of helping tools like routing, state management, communication among components, etc.</p><p>Frameworks like Ember and Angular approach including all of these helpers on their own. Like React let these to the community ecosystem.</p><p>Vue.js takes as the middle. The core provide the minimal functionality. But of course, they provides officially maintained well made tools with docs also.</p><h4>The ecosystem is growing</h4><p><a href="https://nuxtjs.org/">Nuxt.js</a> which was inspired from the React based SSR universal webapp framework <a href="https://zeit.co/blog/next">next.js</a>(first appearance 2016), reached <a href="https://github.com/nuxt/nuxt.js/releases/tag/v1.0.0">v1.0</a> on Jan/2018.</p><p>The <a href="https://vuetifyjs.com/en/">vuetify</a>, which helps build material design UI component, also reached <a href="https://github.com/vuetifyjs/vuetify/releases/tag/v1.0.0">v1.0</a> on Feb/2018.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/501/1*HPptW0OzSiC0X5at-ZrfUQ.png" /></figure><p>The popular VSCode from MS, also started to <a href="https://github.com/Microsoft/vscode-recipes/tree/master/vuejs-cli">support debugging</a> functionality of Vue.js.</p><p>These changes makes attractive atmosphere for Vue.js more and more.</p><h4>Prospectives</h4><p>The powerful CLI tool <a href="https://github.com/vuejs/vue-cli">vue-cli</a>, which let configure dev environment, will release a new version soon.</p><p>On v3.0, the new targeted build option will be added. It’ll allow create easily with the three(App, Lib and Web Componet — and planned to add more w/community collaboration) targets. Also will have the ‘zero configuration’ support.</p><p>The current latest of the core is 2.5.x. Next minor release(v2.6), will support native ESM import, improved async error handling, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">iterator</a> on ‘v-for’ directive and more.</p><p>Support of IE will be dropped starting the next version of 2.6(2.6-next or 3.0), having evergreen browser supports only.</p><blockquote>Vue 3 is not going to be one of those “big change releases” — the main difference will be that Vue 3 only targets modern “evergreen” browsers (i.e. IE11 &amp; below are out). ‐ <a href="https://hashnode.com/ama/with-vuejs-team-cj7itlrki03ae62wuv2r2005s">Hashnode: AMA with Vue.js Team</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/530/1*I0ZRQKC6smWSIXe-CCiGsA.png" /><figcaption><a href="https://www.youtube.com/watch?v=TRJMT9yjONQ">State of VueJS 2018</a></figcaption></figure><p>Basically, the development of the next version will have the backward compatibility with the v2.6 dev in parallel. The codebase will have the newest ES specification also.</p><p>There’s no doubt predicting another great year 2018 for Vue.js. Many developers used to say about ‘Angular vs React’ before, but now most will be agreeing on ‘<strong>Vue.js vs React</strong>’.</p><pre>Take a look &quot;<a href="https://medium.com/reverdev/why-we-moved-from-angular-2-to-vue-js-and-why-we-didnt-choose-react-ef807d9f4163">Why we moved from Angular 2 to Vue.js (and why we didn’t choose React</a>&quot; article for reference.</pre><h3>Angular</h3><p>Following the every 6 months release schedule, the v5.0 was release Nov/2017. The coming v6.0, reached RC status and if follows the schedule, it expected to be released on April.</p><p>Last year Angular focused <a href="https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced">improving performance</a> mostly. In this year will be expected to have adding new features and new different approaches as well.</p><h4>Prospectives on the v6.0 changes</h4><h4><strong>Ivy Renderer</strong></h4><p>The new backward compatible experimental renderer called ‘Ivy Renderer’, will be added. It aims provides small size, simple debugging and faster compilation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/593/1*XW6PIT2QyGSyUeecMUN4mQ.png" /><figcaption><a href="https://blog.angular.io/trip-report-from-ngatlanta-angulars-roadmap-inclusion-and-more-b6c8bae85417">Trip report from ngAtlanta: Angular’s Roadmap, Inclusion, and more</a></figcaption></figure><p>It will not be a ‘breaking change’. It will be automatically enabled updating to the newer version.</p><h4><strong>Angular Elements</strong></h4><p>Angular Elements allows Angular components to publish as Custom Element. Simply think as a Angular component wrapped as Custom Element.</p><p>This means the expansion of Angular Component more freely. And being as Custom Element, it can be used on vanillaJS or on different frameworks such as React!</p><ul><li><a href="https://www.youtube.com/watch?v=vHI5C-9vH-E">Angular Elements — Rob Wormald — AngularConnect 2017</a></li><li><a href="https://medium.com/vincent-ogloblinsky/export-angular-components-as-custom-elements-with-angular-elements-a2a0bfcd7f8a">Export Angular components as Custom Elements with “Angular Elements”</a></li></ul><h4><strong>Angular Labs</strong></h4><p>Angular Labs is the idea announced from the ‘<a href="https://angularmix.com/">AngularMix</a>’ conference on Oct/2017. The main goal is to provide having a clear and balanced communication with the previous releases, about new features and research.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/258/1*EpnPRDzqQqqQXMs-8pgLzw.png" /><figcaption>Angular Labs Logo</figcaption></figure><p>Has been set the following initial three goals.</p><p><strong>1. Shematic</strong></p><p>The Angular DevKit / CLI team’s efforts to build generic tooling for transforming code, likes scaffolding, querying backend APIs, etc.</p><p><strong>2. Component Dev Kit</strong></p><p>The Angular Material team’s working to extract some of the core solutions to common component development problems, and to expose them via the CDK.</p><p>CDK also includes extensible tools bringing different mechanisms helping the component development.</p><p><strong>3. </strong><a href="http://g.co/ng/abc"><strong>ABC</strong></a> (Angular Buildtools Convergence: Angular + Bazel + Closure)</p><p>An effort to converge the toolchain used internally at Google on building Angular applications with the external one. They’re consisted with:</p><ul><li>Bazel: The build system used for nearly all software at Google.</li><li>Closure Compiler: The optimizer used to create JavaScript artifacts for nearly all Google web applications.</li></ul><h4><strong>Migration of examples</strong></h4><p>In conjunction with <a href="https://stackblitz.com/">StackBlitz</a>, the example codes on <a href="https://plnkr.co/">Plunker </a>will be <a href="https://github.com/angular/angular/issues/20045">moved</a> to StackBlitz.</p><p>If you’re familiar with the VSCode, it can give more comfort way on using.</p><h4>What is the future of AngularJS (v1.x)?</h4><p>As most knows, AngularJS is the v1.x(Angular is v2.x+). How many users still using it?</p><p>The answer can be found from the developer’s survey result and according the result, there’re still a significant AngularJS users.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/821/1*xFiOPoAzsaB2PDeP0fYtDg.png" /><figcaption><a href="https://stateofjs.com/2017/front-end/results/">State Of JavaScript 2017: Library</a> (Left) / <a href="https://insights.stackoverflow.com/survey/2017#technology-frameworks-libraries-and-other-technologies">StackOverflow: Developer Survey Results 2017</a> (Right)</figcaption></figure><p>From this, we can infer that the upgrade to Angular doesn’t mean a simple ‘upgrade’ for AngularJS users.</p><p>This isn’t just on compatibility issue of Angular with previous 1.x version only. There’s also new learning curves, TypeScript.</p><p>Long time ago, the core team <a href="https://youtu.be/aHGmj_fqPLE?t=1510">promised on supporting multiple languages</a>, but it didn’t happened. This is critical for those can’t give up their comfortable way on developing application(ex. those whom using CoffeeScript, etc.).</p><p>Until when the support of AngularJS will be continued?</p><p>The new coming minor release v1.7, will be held before the July/2018. After that, starting from the July 1st, v1.2.x and v1.7.x will be enter a <a href="https://docs.angularjs.org/misc/version-support-status#long-term-support">Long Term Support</a> period for 3 years.</p><h3>Web Components and Polymer</h3><p>2017 was a ‘<strong>big impressive</strong>’ for Web Components, because the support of browser was expanded.</p><p>Safari officially added Custom Elements and ShadowDOM support and Firefox(currently flags: <a href="https://developer.mozilla.org/en-US/Firefox/Experimental_features#APIs"><em>dom.webcomponents.enabled</em>, <em>dom.webcomponents.shadowdom.enabled</em></a> enabling are required) will be expected follow on version 60/61. Edge remained the only one without support.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/605/1*czWarDQwhRjzUEa4gdF99g.png" /><figcaption><a href="http://webcomponents.org/">webcomponents.org</a>: Browser Support</figcaption></figure><p>The new <strong><em>&lt;script type=”module”&gt;</em></strong> has been added newly as a part of Web Components substituting HTML Imports. The lack of interest and the slow adoption of browser was the reason.</p><pre>Check out more details: <a href="https://github.com/w3c/webcomponents/issues/645">https://github.com/w3c/webcomponents/issues/645</a></pre><p>Since then, <a href="https://www.polymer-project.org/blog/2017-08-22-npm-modules.html">Polymer 3.0 announced</a> the transition plan on using ES6 modules instead of HTML Imports.</p><p>ESM is supported on all modern browser, so technically the lack support of browsers has been removed!</p><h4>The recent and 2017 changes</h4><h4><strong>Polymer</strong></h4><p>With the <a href="https://www.polymer-project.org/blog/2017-05-15-time-for-two.html">release of v2.0</a>(May/2017), has been improved the interoperability with other library/framework. Also removed the restriction on using Polymer.dom for DOM handling and <a href="https://github.com/webcomponents/shadydom">ShadyDOM</a>(the ShadowDOM shim) has been splitted as stand alone polyfill.</p><p>The way on defining elements via factory method, changed to use more on standard way by ES6 class syntax and custom elements.</p><ul><li><a href="https://www.polymer-project.org/2.0/docs/about_20">What’s new in 2.0</a></li></ul><p>The recent release v2.4(Jan/2018), added the support of TypeScript and by February announced <a href="https://github.com/Polymer/polymer-decorators">polymer-decorator</a>.</p><p>In term of service adoption, the renewal design of <a href="https://youtube.googleblog.com/2017/05/a-sneak-peek-at-youtubes-new-look-and.html">YouTube was developed using Polymer</a>. The adoption by Google on their flagship service can be a significant for many others.</p><h4><strong>The Web Components ecosystem</strong></h4><p>The new specification “<a href="http://w3c.github.io/webcomponents/proposals/Template-Instantiation">Template Instantiation</a>” purposed by Apple, brings different ways of instantiate template with the usage of template syntax, the use of condition and loops.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/575/1*3gX8mKPdGCgG08tynur2Bw.png" /><figcaption><a href="https://youtu.be/edXRi6z7zrE?t=7747">Template Instantiation</a></figcaption></figure><p>CSS Shadow Parts proposal also looks interesting. With the <em>::part()</em> and <em>::theme()</em> functions, make possible style shadow DOM elements from outside.</p><pre>&lt;my-slider&gt;<br>    #shadow-root<br>    &lt;div part=&quot;track&quot;&gt;&lt;/div&gt;<br>    &lt;div part=&quot;thumb&quot;&gt;&lt;/div&gt;<br>&lt;/my-slider&gt;<br><br>// defined outside of &lt;my-slider&gt;<br>my-slider::part(thumb) {<br>    color: red;<br>}</pre><h4>Polymer v3.0</h4><p>The v3.0 will be automatic translation from v2.0 and will be transition to ESM as mentioned earlier.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/569/1*2PwhMM0Ezop4_v95Hc9VpQ.png" /><figcaption><a href="https://youtu.be/edXRi6z7zrE?t=8077">Changes for v3.0</a></figcaption></figure><p>The new library called ‘<a href="https://github.com/Polymer/lit-html">lit-html</a>’(still experimental)will be used on creating custom element. The element created will be called ‘<a href="https://github.com/PolymerLabs/lit-element">lit-element</a>’.</p><p>lit-html was announced on Polymer Summit(2017), which focuses on DOM rendering implementing it by ES6 Tagged Template Literals. Similar as React’s JSX, but it doesn’t require build process, because is standard.</p><p>It’s extensible providing directive and customized syntax.</p><pre>Similar Tagged Template Literals libraries are: <a href="https://github.com/WebReflection/hyperHTML">hyperHTML</a>, <a href="https://github.com/choojs/hyperx">hyperx</a>, <a href="https://github.com/trueadm/t7">t7.js</a></pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/689/1*ruSmQ9ju5xhNLiwIauQeHw.png" /><figcaption>lit-html and lit-lement</figcaption></figure><blockquote>The prefix ‘lit’ stands for ‘literals’ and ‘little’</blockquote><h3>Static Type System</h3><p>JavaScript is dynamic typed language, which types of variable are defined at the runtime by interpreter. Because of this nature, many traditional language developers indicated as weak point.</p><p>One of the problem not having types is the possibility of bug increase. To overcome, many attempts have been in non-standard way.</p><p>The representative tools and languages are, <a href="https://www.typescriptlang.org/">TypeScript</a> from Microsoft, <a href="https://flow.org/">Flow</a> and <a href="https://reasonml.github.io/">ReasonML</a> from Facebook and followed by <a href="https://github.com/purescript/purescript">PureScript</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/721/1*UvJRIGS1JGEUkp2xsnsEmw.png" /></figure><p>What are the biggest advantages on using it?</p><p>One study report says, the adoption of static type system can decrease 15% of bug rates.</p><blockquote>static type systems find an important percentage of public bugs: both Flow 0.30 and TypeScript 2.0 successfully detect 15%!</blockquote><blockquote>— <a href="http://earlbarr.com/publications/typestudy.pdf">To Type or Not to Type:Quantifying Detectable Bugs in JavaScript</a></blockquote><h4>Which one choose?</h4><p>TypeScript leads for now followed by Flow and ReasonML.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/660/1*FErufu3OTJSbQj67319UJQ.png" /><figcaption><a href="https://stateofjs.com/2017/flavors/results/">State of JavaScript 2017: JavaScript Flavors</a></figcaption></figure><p>TypeScript(superset of JavaScript), ReasonML(OCaml) and PureScript(Haskell) approaches as new programming languages and Flow as a tool. This are illustrated by how describes themselves.</p><blockquote>- <strong>TypeScript:</strong> TypeScript is a superset of JavaScript that compiles to clean JavaScript output.<br>- <strong>Flow:</strong> Flow is a static typechecker for JavaScript.<br>- <strong>ReasonML:</strong> Simple, fast &amp; type safe code that leverages the JavaScript &amp; OCaml ecosystems<br>- <strong>PureScript:</strong> A strongly-typed language that compiles to Javascript, written in and inspired by Haskell</blockquote><p>Take a look on simple example below. The code throws an error, but it’s not shown until runtime.</p><pre>function square(n) {<br>  return n * n;<br>}<br><br>square(&quot;oops&quot;);</pre><p>As being superset of JavaScript, TypeScript has same syntax we already know. Just adding data types on it, can make to detect errors during compile time.</p><pre>function square(n: number): number { ... }</pre><p>Flow, can be done without defining types. Everything can be <em>inferred</em>.</p><p>This characteristic provide the adoption of type check without code changes and cost.</p><pre>Checkout more on:<br>- <a href="https://jamie.build/adopting-flow-and-typescript.html">Adopting Flow &amp; TypeScript</a><br>- <a href="http://2ality.com/2018/03/javascript-typescript-reasonml.html">JavaScript vs. TypeScript vs. ReasonML</a></pre><h4>Prospectives</h4><p>The growth of TypeScript will be consistent. Many well known projects are using it.</p><blockquote><a href="https://techcrunch.com/2015/03/05/microsoft-and-google-collaborate-on-typescript-hell-has-not-frozen-over-yet/">Angular</a>, <a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08">Vue.js</a>, <a href="https://www.polymer-project.org/blog/2018-01-25-polymer-2-4">Polymer</a> and <a href="https://github.com/desktop/desktop">GitHub Desktop</a> are using TypeScript</blockquote><p>While Flow and ReasonML built and used by Facebook on <a href="https://github.com/facebook/react/blob/master/scripts/tasks/flow.js">React</a> and <a href="https://reasonml.github.io/blog/2017/09/08/messenger-50-reason.html">Facebook Messenger</a>, not having a clear reference like TypeScript.</p><p>Reducing the rate of bugs is optimistic, but the needs of additional configuration(compile) and the learning curve can be an obstacle.</p><p>These all are basically an additional “supportive” tools helping to make good quality code and they aren’t “standard”.</p><h3>jQuery</h3><h4>Still alive and well</h4><p>jQuery isn’t primary option anymore when you consider start a project, but 300K downloads happens everyday. This is almost 300% growth compared at the beginning of 2017.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/637/1*kvm9kQFv7Mu27uiFpefwJw.png" /><figcaption><a href="https://npm-stat.com/charts.html?package=jquery&amp;from=2017-01-01&amp;to=2018-03-31">npm-stat.com: jquery</a></figcaption></figure><p>Not only downloads. The 90% of top 500K websites still uses jQuery.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/718/1*qvn-H5hErrzktE5eS4SCFA.png" /><figcaption><a href="https://discuss.httparchive.org/t/javascript-library-detection/955/2">http archive: JavaScript Library Detection</a></figcaption></figure><p>It can be a surprising result for whom thought jQuery is an old fashioned forgotten ancient library.</p><h4>Prospectives</h4><p>jQuery team had two releases(<a href="https://blog.jquery.com/2017/03/16/jquery-3-2-0-is-out/">3.2.0</a> and <a href="https://blog.jquery.com/2017/03/20/jquery-3-2-1-now-available/">3.2.1</a>) last year. Seeing this, it looks changes are slow downed.</p><p>Timmy Willison(core member), explains about as:</p><blockquote>the team decided a while ago to release at a slow but steady pace, which we translated to about 2 releases a year</blockquote><blockquote>— <a href="https://github.com/jquery/jquery/issues/3886#issuecomment-350880747">What’s the future of jQuery in 2018?</a></blockquote><p>The planned v4.0 will have below changes.</p><ul><li>A complete rewrite using next generation JavaScript</li><li>A rewrite of our speed framework</li><li>An all-new <a href="https://github.com/jquery/jquery/wiki/jQuery-4.0-Event-Design">event module design</a></li></ul><pre>For more details about future plans, check out:<br>- <a href="https://github.com/jquery/jquery/milestone/7">v4.0 Milestone</a> and <a href="https://github.com/jquery/jquery/milestone/3">Future Milestone</a> as well.</pre><p>Using the latest libray and framework isn’t the right answer. We don’t know what will be the future of jQuery, but is doing well not loosing its influence.</p><h3>Closing</h3><p>Front-end development is quite dynamic and impressive.</p><p>Following each corner of stack seems impossible, but knowing and understanding the part of it, can give us the insight on front-end development.</p><p>How many libraries/framework we should know? Knowing them all is the prove of your skill capability?</p><p>Of course, is better than not knowing, but each of them approaches with different philosophy saying they are all good and best.</p><blockquote><strong><em>There’s no right thing.</em></strong></blockquote><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fupscri.be%2Fdde502%3Fas_embed%3Dtrue&amp;dntp=1&amp;url=https%3A%2F%2Fupscri.be%2Fdde502%2F&amp;image=https%3A%2F%2Fucarecdn.com%2F57662ddc-da7c-407b-afcb-cb45184b2705%2F&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=upscri" width="800" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/d25dd15e8727342107fbe0b6d67b030e/href">https://medium.com/media/d25dd15e8727342107fbe0b6d67b030e/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3a5a7cae7513" width="1" height="1"><hr><p><a href="https://hackernoon.com/the-status-of-javascript-libraries-frameworks-2018-beyond-3a5a7cae7513">The status of JavaScript libraries &amp; frameworks: 2018 &amp; beyond.</a> was originally published in <a href="https://hackernoon.com">Hacker Noon</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[billboard.js 1.3.0 is released today!!✨]]></title>
            <link>https://medium.com/@alberto.park/billboard-js-1-3-0-is-released-today-45d774ea9a7?source=rss-86b93c8635b9------2</link>
            <guid isPermaLink="false">https://medium.com/p/45d774ea9a7</guid>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Jae Sung Park]]></dc:creator>
            <pubDate>Thu, 15 Mar 2018 08:33:47 GMT</pubDate>
            <atom:updated>2018-03-15T08:33:47.920Z</atom:updated>
            <content:encoded><![CDATA[<p>I’m happy to announce the new release of the billboard.js today! With this first release of 2018, comes 7 new features and 14 bug fixes.</p><p>You can find the detailed release note on the below link</p><ul><li><a href="https://github.com/naver/billboard.js/releases/tag/1.3.0">https://github.com/naver/billboard.js/releases/tag/1.3.0</a></li></ul><blockquote>If there’s no issue, the release period of billboard.js is done on every 3 months.</blockquote><h3>What’s new?</h3><h4>2 new area range types</h4><p>Area-range is the new type to visualize each data in conjunction with the high and low value.</p><ul><li><a href="https://naver.github.io/billboard.js/demo/#Chart.AreaRangeChart">https://naver.github.io/billboard.js/demo/#Chart.AreaRangeChart</a></li></ul><p>As you can see from the example below, the ‘ranged’ line(or spline) are rendered with the transparent area which is the representation of the high/low values.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/583/1*u_kmun0u_UUF0ZALSB5CoQ.png" /><figcaption>new area-line-range chart</figcaption></figure><p>To use ‘ranged’ types, the data should be bound differently than the others. It should contain ‘low/mid/high’ values together. The values can be represented as Array or Object.</p><pre>// as Array<br>[&quot;data1&quot;,<br>      [120, 70, 0],  // in the order of: high / mid / low <br>      [175, 130, 115],<br>      [180, 135, 120],<br>      [155, 120, 110],<br>      [200, 150, 130],<br>      [229, 160, 125]<br>],<br>     <br>// as Object<br>[&#39;data1&#39;,<br>      {high: 195, low: 125, mid: 150},<br>      {high: 200, mid: 190, low: 150},<br>      {high: 230, mid: 215, low: 200},<br>      {high: 210, mid: 200, low: 180},<br>      {high: 220, mid: 210, low: 190},<br>      {high: 200, mid: 180, low: 160}<br> ]</pre><p>Here’s the complete generation example.</p><pre>bb.generate({<br>   data: {<br>      columns: [<br>         [&quot;data1&quot;, 30, 200, 100, 400, 150, 250],<br>         [&quot;data2&quot;,<br>                [120, 70, 0],<br>                [175, 130, 115],<br>                [180, 135, 120],<br>                [155, 120, 110],<br>                [200, 150, 130],<br>                [229, 160, 125]<br>         ]<br>      ],<br>      types: {<br>         data2: &quot;area-line-range&quot;<br>      }<br>   }<br>})</pre><h4>pie.padding</h4><p>Padding lets give ‘padding’ between the data.</p><ul><li><a href="https://naver.github.io/billboard.js/demo/#PieChartOptions.Padding">https://naver.github.io/billboard.js/demo/#PieChartOptions.Padding</a></li></ul><p>Unlinke the <a href="https://naver.github.io/billboard.js/demo/#PieChartOptions.PadAngle">pie.padAngle</a>, padding gives equal spaces. You can notice clearly from the below example.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/573/1*6OgGyzVts4r1CTMfiDTv8A.png" /><figcaption>Pie’s padAngle(left) &amp; padding(right)</figcaption></figure><p>The usage is very simple and straight forward. Set value for each options, but bear in mind that both options can’t be used at same time.</p><pre>pie: {<br>    padAngle: 0.1,<br>    padding: 20<br>},</pre><h4>pie.innerRadius</h4><p>Donut type can be defined as modified version of pie with big inner circle.</p><p>But, there’re demands on having small or bigger inner circle for different purposes(IMO in most cases for design).</p><p>So, to fulfill, newly added option came out. It let adjust inner circle on pie.</p><ul><li><a href="https://naver.github.io/billboard.js/demo/#PieChartOptions.InnerRadius">https://naver.github.io/billboard.js/demo/#PieChartOptions.InnerRadius</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/283/1*gp6sjvnSxn21TFlJybcqfw.png" /><figcaption>Pie’s innerRadius</figcaption></figure><pre>pie: {<br>    innerRadius: 20<br>},</pre><h4>legend.usePoint</h4><p>On the last release, we introduced ‘<a href="https://medium.com/@alberto.park/billboard-js-1-2-0-release-b6f6e77c3ef2#ba21">Customized data points</a>’. It was really nice feature which let create a customized data points.</p><ul><li><a href="https://naver.github.io/billboard.js/demo/#Legend.usePoint">https://naver.github.io/billboard.js/demo/#Legend.usePoint</a></li></ul><p>With the conjunction of legend.usePoint option, let display custom data points on legend.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/578/1*O_pJ9jTofaQnIAHgxZwQLw.png" /><figcaption>Display custom data points on legend</figcaption></figure><pre>legend: {<br>    usePoint: true<br>},</pre><h4>axis.x.tick.tooltip</h4><p>This is a small feature, which let show system tooltip for x Axis tick texts. It only works for desktop environment.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/496/1*U53nEn8dk0nKcFjQe4j0Qw.png" /><figcaption>System tooltip on x tick texts</figcaption></figure><pre>axis: {<br>    x: {<br>       tick: {<br>          tooltip: true<br>       }<br>    }<br>},</pre><h4>bb.instance</h4><p>Another small feature added is bb.instance. It returns an array value containg the created instances within a page.</p><p>It facilitate to distinguish handling instances if you have more than one chart generated.</p><pre>// generate charts<br>var chart1 = bb.generate(...);<br>var chart2 = bb.generate(...);</pre><pre>bb.instance;  // [ chart1, chart2, ... ]</pre><h4>Improved the test coverage!</h4><p>What’re the biggest decision making to opt using open source?</p><p>As most will agree, the stability is the most matters. So, we do.</p><p>When billboard.js was started at June 2017, the initial coverage was 73%. That’s not bad, but not enough to guarantee the quality of the codes from the new changes happened.</p><p>Increasing the coverage was the one of the willing point from the beginning, but it wasn’t easy. It needed to organize test codes structures first and so on.</p><p>This isn’t something that users can notice clearly from the release, but personally I’m really glad on <strong>10%! increase</strong> of the coverage.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/699/1*BcUixKJv1aLVx5ZoFu0CSw.png" /><figcaption>Test coverage histogram from coveralls.io</figcaption></figure><p>This will give more relieve in terms of developing and stabilities to end users.</p><p>Hope this under the hood efforts give positive affects 😍</p><h3>Current status</h3><h4>Downloads</h4><p>Every week 700+ downloads happens. This means on average 100 downloads every day. Wow!!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/696/1*8pozHJa1NQhntEAe2h_wWA.png" /><figcaption>Downloads stats from npm-stat.com from the last release (15th, Dec. 2017)</figcaption></figure><h4>Projects</h4><p>There’re appearance of projects based on billboard.js.</p><p>Like just-dashboard is the awesome work by <a href="https://github.com/kantord">github/@kantord</a>, is the online service letting create chart(dashboard) using YAML/JSON hosted from GitHub’s gist(or you can make your own system).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*s_SObTW3ueaNlh_L148nSg.png" /><figcaption><a href="https://kantord.github.io/just-dashboard/">https://kantord.github.io/just-dashboard/</a></figcaption></figure><p>The project got a lot of attention and reached 1.2K stars! This is the one of the strong evidence of the increase of the communities(or users).</p><p>If you want to know more, check out the curated list.</p><ul><li><a href="https://github.com/naver/billboard.js/wiki/Who&#39;s-using-billboard.js">https://github.com/naver/billboard.js/wiki/Who&#39;s-using-billboard.js</a></li></ul><blockquote>If you’re using billboard.js,<strong> please let us know</strong>. We’re finding new references!</blockquote><h4>StackOverflow</h4><p>Did you know that? It was added ‘billboard.js’ tag on StackOverflow!</p><ul><li><a href="https://stackoverflow.com/questions/tagged/billboard.js">https://stackoverflow.com/questions/tagged/billboard.js</a></li></ul><p>If you need some help, try find some on using billboard.js tag.</p><h3>Requests for help</h3><h4>Contributors!</h4><p>On this 1.3.0 release was made by with the efforts from these contributors!</p><p><a href="https://github.com/julien"><strong><em>github/@julien</em></strong></a>, <a href="https://github.com/rshingleton"><strong><em>github/@rshingleton</em></strong></a> and <a href="https://github.com/matthiaskomarek"><strong><em>github/@matthiaskomarek</em></strong></a></p><p>Thanks again for the efforts made. I’m sure that this efforts will help a lot of users out there!</p><p>Beside of that, we still needs more helps from the community. Hope having more attention and more participation.</p><h3>What’s next?</h3><p>Of course, we’ll continuing our journey. The next release will be expected to be June.</p><p>The rough plans for the next release are:</p><ul><li>Support on coming d3.js v5</li><li>new chart types</li></ul><p>Your attentions are the source to continue this journey!!! Hope to stay well until the next release. See ya~!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=45d774ea9a7" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>