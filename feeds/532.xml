<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://doublem.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://doublem.org/" rel="alternate" type="text/html" /><updated>2019-04-16T15:59:02+00:00</updated><id>https://doublem.org/feed.xml</id><title type="html">Doublem.org</title><subtitle>Doublem.org가 운영하는 화단</subtitle><entry><title type="html">[리뷰] 실습과 그림으로 배우는 리눅스 구조</title><link href="https://doublem.org/book-review-01/" rel="alternate" type="text/html" title="[리뷰] 실습과 그림으로 배우는 리눅스 구조" /><published>2019-04-14T17:40:00+00:00</published><updated>2019-04-14T17:40:00+00:00</updated><id>https://doublem.org/book-review-01</id><content type="html" xml:base="https://doublem.org/book-review-01/">&lt;p&gt;2월에 발간된  “&lt;a href=&quot;http://www.hanbit.co.kr/media/books/book_view.html?p_code=B2453522793&quot;&gt;실습과 그림으로 배우는 리눅스 구조&lt;/a&gt;” 책을 한빛미디어의 리뷰단에 선정되어 리뷰하고자 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;실습과-그림으로-배우는-리눅스-구조를-읽고&quot;&gt;“실습과 그림으로 배우는 리눅스 구조를 읽고”&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;*본 글은 한빛 미디어의 ‘나는 리뷰어다 2019년 4월’의 프로그램 일환으로 진행 된 리뷰입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;대상독자&quot;&gt;대상독자&lt;/h3&gt;

&lt;p&gt;이책의 대상 독자를 저자는 ‘리눅스의 기본 명령어를 아는 어플리케이션 개발자, 시스템 설계자 , 서버엔지니어’ 라고 한다.
역자는 특히 &lt;strong&gt;리눅스와 연관된 분야에서 일하는 프로그래머&lt;/strong&gt; 라고 한다.&lt;/p&gt;

&lt;p&gt;나의 경우에는 VM 기반의 환경에서 웹개발을 해오고 있기에, 꼭 보아야 하는 사람의 범주에는 들지 않았다.
그래서 이번 리뷰 대상의 책에 대한 흥미가 높지는 않았다. 아마도 웹 분야의 많은 개발자들도 비슷 할 것이라고 생각한다.&lt;/p&gt;

&lt;p&gt;그렇다고 해서, 리눅스등의 OS를 몰라도 된다는 소리인가 싶지만, 꼭 그렇지는 않을 것으로 생각된다.
OS 까지 고려해야 하는 상황을 만난적 없는 개발자도, 언젠가 만나게 될 경우를 대비하여 아주 기초는 준비를 해두어야 할 것이다.&lt;/p&gt;

&lt;p&gt;특히 &lt;a href=&quot;https://aws.amazon.com/ko/devops/what-is-devops/&quot;&gt;데브옵스&lt;/a&gt; 등을 고려해야 하는 상황이 생각보다 빨리 개발자에게 다가올 수 있음을 상기하고 대비를 하고 있어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;구성&quot;&gt;구성&lt;/h3&gt;

&lt;p&gt;1장에서는 개요를 설명하며, 2장에서는 리눅스의 사용자 모드에서 동작하는 시스템콜, 3장에서는 커널의 프로세스 생성 및 제거 관리,
4장 프로세스 스케줄러, 5장 메모리관리, 6장 기억장치, 7장 파일시스템, 8장 저장장치로 &lt;strong&gt;총 8장에 걸쳐서 OS를 설명한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;설명 방식은 개요 설명 이후에 그림과 함께 코드 -&amp;gt; 결과확인의 순으로 진행된다.
여기서 과정 설명에서 텍스트로 이뤄진 내용을 도식화하여 보여주기 때문에 이해가 쉽다.
&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190414/IMG_5828.JPG&quot; title=&quot;표지&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190414/IMG_5829.JPG&quot; title=&quot;body1&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190414/IMG_5830.JPG&quot; title=&quot;body2&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190414/IMG_5831.JPG&quot; title=&quot;body3&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;
&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190414/IMG_5833.JPG&quot; title=&quot;body4&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 그 내용이 담고 있는 컨텐츠와 단어 그리고 문맥의 흐은 가볍게 읽기에는 초보자에게는 버거울수 있다.
따라서, 별도의 스터디나 참고 자료를 활용하여 추가적인 보충 활동을 수행해야 할 것으로 보인다.&lt;/p&gt;

&lt;p&gt;본 책의 장점은 실제 코드를 통한 활동과 이미지를 통한 연상으로 인해 학습 능률이 높을 것으로 예상된다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="리뷰" /><category term="리눅스" /><category term="책" /><summary type="html">2월에 발간된 “실습과 그림으로 배우는 리눅스 구조” 책을 한빛미디어의 리뷰단에 선정되어 리뷰하고자 합니다.</summary></entry><entry><title type="html">간단한 구글 쿼리로 수십개의 퍼블릭 트렐로에서 패스워드 얻는 방법</title><link href="https://doublem.org/Trello-Security/" rel="alternate" type="text/html" title="간단한 구글 쿼리로 수십개의 퍼블릭 트렐로에서 패스워드 얻는 방법" /><published>2019-03-05T00:10:00+00:00</published><updated>2019-03-05T00:10:00+00:00</updated><id>https://doublem.org/Trello-Security</id><content type="html" xml:base="https://doublem.org/Trello-Security/">&lt;p&gt;요즘 트렐로를 프로젝트 관리 용도로 많이 사용합니다. 최근 미디엄에 올라온 글 중에서 눈여겨 볼 글이 있어서 이를 공유 하고자 합니다.
전문은 아래와 같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;간단한-구글-쿼리로-수십개의-퍼블릭-트렐로에서-패스워드-얻는-방법&quot;&gt;“간단한 구글 쿼리로 수십개의 퍼블릭 트렐로에서 패스워드 얻는 방법”&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;*본 자료는 &lt;a href=&quot;https://twitter.com/xKushagra&quot;&gt;Kushagra Pathak&lt;/a&gt;님이 Medium에서 작성한 글 입니다. Doublem.org는 저자의 허락을 받아 번역하여 대한민국에 소개하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;*개인정보보안을 위한 공익목적으로 공개하는 자료입니다. 악의적 사용시 책임은 본인에게 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;*Original article is written by &lt;a href=&quot;https://twitter.com/xKushagra&quot;&gt;Kushagra Pathak&lt;/a&gt;. Doublem.org, with the permission of the author, is translated and introduced to Korea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;*This information is for public interest. If you use for malicious, You must have responsibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;저는 2018년 4월 25일 조사를 하면서 수 많은 개인 및 회사의 민감성 정보가 퍼블릭 &lt;a href=&quot;https://trello.com&quot;&gt;트렐로&lt;/a&gt; 보드에 있는 것을 찾았습니다.&lt;/p&gt;

&lt;p&gt;고쳐지지 않은 버그, 보안취약점, SNS자격증명, 이메일 주소, 서버 및 관리자 대시보드 정보 등은 검색엔진이 인덱싱 해놓은 퍼블릭 트렐로 보드에 있다면,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;누구나 쉽게 이런 정보를 찾을 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;어떻게-발견했나&quot;&gt;어떻게 발견했나?&lt;/h3&gt;

&lt;p&gt;저는 아래 쿼리를 통해서 Jira의 &lt;a href=&quot;http://www.itworld.co.kr/news/110223&quot;&gt;버그바운티&lt;/a&gt;를 운영하는 Jira 인스턴스를 검색 중이었습니다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jira&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Note : 저는 구글 Google dork query를 사용하였으며, dork이라고도 불립니다.
       고급 검색 연산자를 사용하여 웹사이트에서 쉽게 접근하기 어려운 정보를 찾습니다. - &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B5%AC%EA%B8%80_%ED%95%B4%ED%82%B9&quot;&gt;WhatIs.com&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;저는 Trello를 {company name}에 넣었고, 구글은 몇가지 트렐로 보드의 결과를 보여줬습니다.&lt;/p&gt;

&lt;p&gt;결과에는 Jira 인스턴스로 로그인하는 정보들이 있었습니다. 이때가 8:19 AM UTC 쯤 이였습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;저는 너무 놀랍고 충격에 휩싸였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue0.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 왜 이런 문제가 있었을까요? 트렐로는 프로젝트 및 개인 일정 관리를 위한 온라인 도구이기 때문입니다.
트렐로는 보드를 통해서 프로젝트와 일정을 관리합니다. 사용자는 보드를 개인용(private) 혹은 공개용(Public)으로 설정 할 수 있습니다.
여기서 &lt;strong&gt;공개용으로 설정한 내용이 노출&lt;/strong&gt; 되는 것 입니다.&lt;/p&gt;

&lt;p&gt;이메일 계정 자격 증명과 같은 다른 정보를 찾아보기로 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue1.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSH, FTP는 어떨까요?&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ftp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue2.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;내가-찾은-것&quot;&gt;내가 찾은 것&lt;/h3&gt;

&lt;p&gt;이러한 방법으로 몇 시간정도 찾은 결과, 더 놀라운 사실을 발견했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue3.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤 회사는 퍼블릭 트렐로 보드를 &lt;strong&gt;자사 웹사이트 및 어플리케이션의 버그관리와 보안 취약점을 관리하는 용도&lt;/strong&gt;로 사용하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue4.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사람들은 또한 트렐로 보드를 멋진(?) 비밀번호 관리용으로 사용하기도 합니다. 
어떤 경우에는 서버, CMS, CRM, 기업용 이메일, SNS 계정 등을 포함하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue5.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤 &lt;strong&gt;NGO는 수많은 기부자 개인정보와 기부 재정정보를 가지고 있는 기부자 관리 소프트웨어 (데이터베이스) 접속방법을 공유&lt;/strong&gt;하고 있었습니다.&lt;/p&gt;

&lt;p&gt;아홉 시간동안 이런 정보를 찾고, 가장 민감한 정보를 노출하고있는 25개의 회사의 연락처를 찾아서 이 사실을 알려주었습니다. 25개의 연락처 정보를 찾는 일은 굉장히 지루하고 도전적인 일이었습니다.&lt;/p&gt;

&lt;p&gt;이후 저는 private 버그바운티 창에 이런 사실을 공지하였고, 트위터에 트렐로 기법과 관련하여 피드를 달았습니다.&lt;/p&gt;

&lt;p&gt;사람들은 제가 그랬던것처럼 몹시 놀랐습니다.&lt;/p&gt;

&lt;p&gt;사람들은 공유 한 트렐로 기법을 통해 비즈니스 이메일, Jira 자격 증명, Bug Bounty 프로그램의 민감한 내부 정보 등 멋진 정보를 찾았다고 말하기 시작했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20190305/trello_issue6.png&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런 사실을 발견한지 거의 10시간이 됬을 무렵, 버그바운티 프로그램을 운영하는 회사를 대상으로 테스팅 하기 시작했습니다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;이후&quot;&gt;이후&lt;/h3&gt;

&lt;p&gt;이런 사실을 해당 회사의 보안팀에 알렸으나, 일부 회사는 이미 처리중인 문제라는 응답을 주었습니다.&lt;/p&gt;

&lt;p&gt;일부는 대기업 이었지만 많은 곳들이 버그바운티 프로그램을 운영하지 않았습니다.&lt;/p&gt;

&lt;p&gt;버그바운티를 운영하는 곳에서도 이미 인지된 문제로 보상을 거절하기도 하였습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;kushagra-pathak님-추가활동&quot;&gt;&lt;a href=&quot;https://twitter.com/xKushagra&quot;&gt;Kushagra Pathak&lt;/a&gt;님 추가활동&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2018.05.18 - &lt;a href=&quot;https://securityaffairs.co/wordpress/72380/data-breach/trello-data-leak.html&quot;&gt;미국정부&lt;/a&gt;의 로그인 정보등을 포함한 민감정보가 노출 신고&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2018.08.17 - &lt;a href=&quot;https://theintercept.com/2018/08/16/trello-board-uk-canada/&quot;&gt;영국 및 캐나다&lt;/a&gt; 정부의 내부정보 누출 신고&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2018.09.24 - &lt;a href=&quot;https://theintercept.com/2018/09/24/united-nations-trello-jira-google-docs-passwords/&quot;&gt;UN&lt;/a&gt;의 FTP, SNS, 내부정보 등 민감정보 누출 신고&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/discovering-the-hidden-mine-of-credentials-and-sensitive-information-8e5ccfef2724&quot;&gt;How I used a simple Google query to mine passwords from dozens of public Trello boards&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="Trello" /><category term="Tip" /><category term="보안" /><summary type="html">요즘 트렐로를 프로젝트 관리 용도로 많이 사용합니다. 최근 미디엄에 올라온 글 중에서 눈여겨 볼 글이 있어서 이를 공유 하고자 합니다. 전문은 아래와 같습니다.</summary></entry><entry><title type="html">모든 개발자가 알아야만 하는 SOLID 원칙 - 2편(LSP/ISP/DIP)</title><link href="https://doublem.org/SOLID_LSP_ISP_DIP/" rel="alternate" type="text/html" title="모든 개발자가 알아야만 하는 SOLID 원칙 - 2편(LSP/ISP/DIP)" /><published>2018-10-23T23:00:00+00:00</published><updated>2018-10-23T23:00:00+00:00</updated><id>https://doublem.org/SOLID_LSP_ISP_DIP</id><content type="html" xml:base="https://doublem.org/SOLID_LSP_ISP_DIP/">&lt;p&gt;지난 글에 이어서 모든 개발자가 알아야만 하는 SOLID 원칙 (LSP/ISP/DIP)를 알아보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;liskov-substitution-principle-리스코프-치환원칙lsp&quot;&gt;Liskov Substitution Principle (리스코프 치환원칙:LSP)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;하위 클래스는 반드시 상위클래스와 대체 가능 해야 한다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 원칙이 지향하는 것은 하위클래스가 상위 클래스의 자리를 에러 없이 맡을 수 있는지 확인하는 것 입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;만약, 코드가 스스로 자신의 클래스 타입을 확인한다면, 그건 정말로 원칙을 위반 한 것입니다.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;우리의 예제를 살펴보도록 합시다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;//...
function AnimalLegCount(a: Array&amp;lt;Animal&amp;gt;) {
    for(int i = 0; i &amp;lt;= a.length; i++) {
        if(typeof a[i] == Lion)
            return LionLegCount(a[i]);
        if(typeof a[i] == Mouse)
            return MouseLegCount(a[i]);
        if(typeof a[i] == Snake)
            return SnakeLegCount(a[i]);
    }
}

AnimalLegCount(animals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같은 것이 LSP 원칙을 위한한 모습입니다. (또한 OCP를 위반한 것이기도 합니다.)&lt;/p&gt;

&lt;p&gt;위 코드는 모든 Animal 타입을 알아야 하고, leg-counting 기능과 연관된 것을 호출해야합니다.&lt;/p&gt;

&lt;p&gt;모든 새로운 Animal의 생성을 할때, 위의 AnimalLegCount() 는 새로운 Animal을 받아드릴 수 있도록 반드시 수정되어야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;//...
class Pigeon extends Animal {
        
}
const animals[]: Array&amp;lt;Animal&amp;gt; = [
    //...,
    new Pigeon();
]
function AnimalLegCount(a: Array&amp;lt;Animal&amp;gt;) {
    for(int i = 0; i &amp;lt;= a.length; i++) {
        if(typeof a[i] == Lion)
            return LionLegCount(a[i]);
        if(typeof a[i] == Mouse)
            return MouseLegCount(a[i]);
         if(typeof a[i] == Snake)
            return SnakeLegCount(a[i]);
        if(typeof a[i] == Pigeon)
            return PigeonLegCount(a[i]);
    }
}
AnimalLegCount(animals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 함수가 LSP를 따르게 만드는 것은, 우리가 Steve Fenton가 필수조건으로 말한 LSP의 요구사항을 따르는 것 입니다.&lt;/p&gt;

&lt;p&gt;만약 상위 클래스(Animal)가 상위클래스 타입(Animal)의 Parameter를 받는 메소드를 갖고 있을 경우, 하위클래스(Pigeon)은 반드시 상위클래스 타입(Animal 타입) 또는 하위클래스 타입(Pigeon type)을 Argument로 받을 수 있어야만 한다.
만약 상위클래스가 상위클래스 타입(Animal)을 반환한다면, 하위클래스는 상위클래스 타입(Animal) 또는 하위클래스 타입(Pigeon type)을 반드시 반환해야 합니다.&lt;/p&gt;

&lt;p&gt;이제 LSP를 따르도록, AnimalLegCount()를 새로 구현해보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;function AnimalLegCount(a: Array&amp;lt;Animal&amp;gt;) {
    for(let i = 0; i &amp;lt;= a.length; i++) {
        a[i].LegCount();
    }
}
AnimalLegCount(animals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AnimalLegCount()는 전달된 Animal의 타입에 대해서는 관심이 없고, 오직 다리의 숫자를 세는 것에만 관심이 있습니다.&lt;/p&gt;

&lt;p&gt;파라미터는 Animal 타입(Animal 클래스나 Animal의 하위 클래스)이어야만 한다는 것이 위 코드에서 알 수 있는 전부입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Animal 클래스는 이제 LegCount() 메소드만 구현/정의 하기만 하면 됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Animal {
    //...
    LegCount();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그리고 하위 클래스들은 LegCount()메소드를 구현해야만 하죠.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//...
class Lion extends Animal{
    //...
    LegCount() {
        //...
    }
}
//...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lion 클래스 타입의 아규먼트가 AnimalLegCount() 메소드로 전달 될 때, LegCount()는 lion이 갖고 있는 다리의 숫자를 반환 할 것입니다.&lt;/p&gt;

&lt;p&gt;이제 우리는 AnimalLegCount()가 다리 갯수를 세기 위해서 Animal의 타입에 대해 알 필요가 없다는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;단지 Animal 타입의 LegCount()만 호출하면 됩니다. 계약으로 인해, Animal클래스의 하위 클래스는 LegCount() 기능을 구현해야만 하거든요. &lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;interface-segregation-principle-인터페이스-분리-원칙--isp&quot;&gt;Interface Segregation Principle (인터페이스 분리 원칙 : ISP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;클라이언트의 세분화된 내용과 같은 세분화된 인터페이스를 만들자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;클라이언트는 사용되지 않는 인터페이스에 의존하도록 강요해서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 원칙은 커다란 인터페이스의 구현에 관한 단점을 다룹니다.
아래의 Shape 인터페이스를 보세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;interface Shape {
    drawCircle();
    drawSquare();
    drawRectangle();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 인터페이스는 Squares와 circles, rectangles를 그립니다. Shape 인터페이스를 구현하고 있는 클래스 Circle, Square,Rectangle는 반드시 메소드 drawCircle(), drawSquare(),drawRectangle()를 정의해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Circle implements Shape {
    drawCircle(){
        //...
    }
    drawSquare(){
        //...
    }
    drawRectangle(){
        //...
    }    
}
class Square implements Shape {
    drawCircle(){
        //...
    }
    drawSquare(){
        //...
    }
    drawRectangle(){
        //...
    }    
}
class Rectangle implements Shape {
    drawCircle(){
        //...
    }
    drawSquare(){
        //...
    }
    drawRectangle(){
        //...
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위의 코드를 보면 꽤 재밌습니다. &lt;strong&gt;클래스 Rectangle은 쓰이지 않는 메소드들(drawCircle()과 drawSquare())을 구현하고 있습니다.&lt;/strong&gt; 마찬가지로 Square 또한 사용되지않는 drawCircle()과 drawRactangle()을, Circle 클래스는 drawSquare(), drawSquare()를 구현하고 있습니다.&lt;/p&gt;

&lt;p&gt;만약 우리가 drawTriangle()과 같은 다른 메소드를 Shape 인터페이스에 추가 한다면 아래와 같을겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;interface Shape {
    drawCircle();
    drawSquare();
    drawRectangle();
    drawTriangle();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;클래스는 반드시 신규 메소드를 구현해야 하며, 그렇지 않으면 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;우리는 위 코드가 Circle을 그릴 수있지만 그 외의 rectangle,square ,triangle은 그릴 수 없는 Shape의 구현은 불가능 하다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;(*역자주: drawCircle()만을 구현 할 수 없음을 말함)&lt;/p&gt;

&lt;p&gt;단지 Operation을 실행 할 수 없다는 에러를 던지는 메소드를 구현 할 수 있을 뿐입니다. &lt;/p&gt;

&lt;p&gt;ISP는 이런 Shape 인터페이스의 설계에 대해서 질색으로 싫어 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클라이언트(여기서는 Rectangle, Circle, Square)는 필요하치 않거나 사용되지 않는 메소드에 의존하도록 강요해선 안됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한, ISP는 다음과 같이 명시하고 있습니다. ‘인터페이스는 꼭 하나의 일을 해야 하며,  추가적인 행위 그룹은 반드시 다른 인터페이스로 분리되어 추상화 되어야 한다.’ 라고 말이에요.&lt;/p&gt;

&lt;p&gt;아래에의 코드에서, Shape 인터페이스는 다른 인터페이스들에 의해 개별적으로 움직이는 일을 수행하고 있습니다.&lt;/p&gt;

&lt;p&gt;Shape 인터페이스를 ISP 원칙을 따르도록 만드는 것은 행위(action)를 다른 인터페이스로 분리하는 것을 말합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;interface Shape {
draw();
}

interface ICircle {
    drawCircle();
}
interface ISquare {
    drawSquare();
}
interface IRectangle {
    drawRectangle();
}
interface ITriangle {
    drawTriangle();
}
class Circle implements ICircle {
    drawCircle() {
        //...
    }
}
class Square implements ISquare {
    drawSquare() {
        //...
    }
}
class Rectangle implements IRectangle {
    drawRectangle() {
        //...
    }    
}
class Triangle implements ITriangle {
    drawTriangle() {
        //...
    }
}
class CustomShape implements Shape {
   draw(){
      //...
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ICircle 인터페이스는 오직 circle을 그리는 일만 하고 있으며, Shape는 그외의 도형들을 그리는 것을 다루고 있습니다. ^^&lt;/p&gt;

&lt;p&gt;ISqurae 는 Squre그리는 일만. 그리고 IRectangle은 rectangles를 그리는 일만 하고 있지요. &lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dependency-inversion-principle-의존성-역전-원칙--dip&quot;&gt;Dependency Inversion Principle (의존성 역전 원칙 : DIP)&lt;/h3&gt;
&lt;p&gt;의존(종속)은 구체가 아닌 추상과 이뤄져야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A. 고수준(High-Level)의 모듈은 저수준(Low-Level)의 모듈에 의존하면 안된다. 둘다 추상화에 의존해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;B. 추상은 세부사항(Details)에 의존해서는 안된다. 세부사항은 추상에 의존해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;ul&gt;
      &lt;li&gt;참고 : 모듈화 디자인이란, 한 시스템을 여러 개의 기능적 구성요소(모듈)들을 조합함으로써 완성하도록 한 설계를 말한다. - 나무위키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;이번 원칙에서는 모듈로 구성되어 커지게 될 소프트웨어 개발에 대한 중요한 점이 나옵니다.&lt;/p&gt;

&lt;p&gt;시작하기전, 우리는 의존성 주입(Dependency Injection) 과 관련된 일들에 대해서 명확히 알아야 합니다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 고수준의 구성요소(Component)가 저수준의 구성요소에 따라 행동하는 모습의 예시입니다.&lt;/p&gt;

&lt;p&gt;아래의 코드에서는 HttpService가 저수준의 컴포넌트이고, Http는 고수준의 컴포넌트 입니다. &lt;/p&gt;

&lt;p&gt;(* 역자주: Http 클래스는 Constructor를 통한 XMLHttpService 클래스의 의존성 삽입의 사례를 나타내고 있습니다.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class XMLHttpService extends XMLHttpRequestService {}

class Http {
    constructor(private xmlhttpService: XMLHttpService) { }
    get(url: string , options: any) {
        this.xmlhttpService.request(url,'GET');
    }
    post() {
        this.xmlhttpService.request(url,'POST');
    }
    //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 설계는 DIP A를 위반하였습니다.(DIP A - 고수준의 모듈은 저수준의 모듈에 의존해선 안된다. 반드시 추상화에 의존 해야한다.)&lt;/p&gt;

&lt;p&gt;상위 코드의 Http 클래스는 XMLhttpService 클래스에 의존하도록 되어있습니다. 간혹, xmlHttpService 외에 다른 Http 연결 서비스를 사용 하고 싶을 수도 있습니다. 이럴때, 코드를 편집하기 위해서는 모든 Http 인스턴스(사용중인)를 고려하여 조심스레 수정해야합니다. 이는 OCP 원칙 위반이기도 합니다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;strong&gt;‘Connection 인터페이스’를 만들어, 사용중인 Http 서비스 타입들에 대해 덜 신경 써야합니다&lt;/strong&gt;. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;interface Connection {
    request(url: string, opts:any);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;request 메소드를 갖고 있는 Connection 인터페이스를 이용하여 Http를 개선 할 수 있습니다. Connection 인터페이스 타입의 Argument를 Http 클래스로 전송합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Http {
constructor(private httpConnection: Connection) { }

    get(url: string , options: any) {
        this.httpConnection.request(url,'GET');
    }
    post() {
        this.httpConnection.request(url,'POST');
    }
    //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Http에 전달된 Http 연결 서비스 유형에 관계없이 네트워크 연결 유형을 알지 않고도 쉽게 네트워크에 연결할 수 있습니다.
이제 XMLHttpService 클래스를 다시 구현하여 Connection 인터페이스를 구현할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class XMLHttpService implements Connection {
    const xhr = new XMLHttpRequest();
    //...
    request(url: string, opts:any) {
        xhr.open();
        xhr.send();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;많은 Http Connection 타입을 만들고 Http 클래스에 에러와 같은 야단법석한 일들은 피해서 전송 할 수 있습니다. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class NodeHttpService implements Connection {
    request(url: string, opts:any) {
        //...
    }
}
class MockHttpService implements Connection {
    request(url: string, opts:any) {
        //...
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;우리는 고수준의 모듈과 저수준의 모듈이 추상에 의존하고 있음을 볼 수 있습니다. Http 클래스(고수준의 모듈)은 Connection 인터페이스(추상)에 의존하고 있으며, Http 서비스 타입들(저수준의모듈)또한 Connection 인터페이스에 의존하고 있습니다.&lt;/p&gt;

&lt;p&gt;또한, 여기서 DIP는 Liskov Substitution Principle을 위반하지 않도록 합니다. (Connection 유형 Node-XML-MockHttpService는 상위 유형 Connection을 대체 할 수 있습니다.)&lt;/p&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론 &lt;/h3&gt;

&lt;p&gt;우리는 여기서 모든 소프트웨어 개발자가 반드시 알아야 하는 다섯가지 원칙에 대해서 알아봤습니다.
모든 원칙들을 지키는 일은 처음에는 너무나도 벅찬일이지만, 꾸준한 연습과 적용을 통해서 원칙들을 우리의 어플리케이션 소프트웨어의 일부로 만들고 유지보수에 훌륭하고 큰 영향을 끼칠 수 있을 것입니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;*본 자료는 &lt;a href=&quot;https://blog.bitsrc.io/@kurtwanger40&quot;&gt;Chidume Nnamdi&lt;/a&gt;님이 Medium에서 작성한 글 입니다. Doublem.org는 저자의 허락을 받아 번역하여 대한민국에 소개하고 있습니다.&lt;/p&gt;

&lt;p&gt;*Original article is written by &lt;a href=&quot;https://blog.bitsrc.io/@kurtwanger40&quot;&gt;Chidume Nnamdi&lt;/a&gt;. Doublem.org, with the permission of the author, is translated and introduced to Korea.
&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bitsrc.io/solid-principles-every-developer-should-know-b3bfa96bb688&quot;&gt;SOLID Principles every Developer Should Know&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="SOLID" /><category term="Principles" /><category term="every" /><category term="Developer" /><category term="Should" /><category term="Know" /><summary type="html">지난 글에 이어서 모든 개발자가 알아야만 하는 SOLID 원칙 (LSP/ISP/DIP)를 알아보겠습니다.</summary></entry><entry><title type="html">모든 개발자가 알아야만 하는 SOLID 원칙 - 1편(SRP/OCP)</title><link href="https://doublem.org/SOLID_SRP_OCP/" rel="alternate" type="text/html" title="모든 개발자가 알아야만 하는 SOLID 원칙 - 1편(SRP/OCP)" /><published>2018-10-18T23:00:00+00:00</published><updated>2018-10-18T23:00:00+00:00</updated><id>https://doublem.org/SOLID_SRP_OCP</id><content type="html" xml:base="https://doublem.org/SOLID_SRP_OCP/">&lt;p&gt;객체지향 타입의 프로그래밍은 소프트웨어 개발의 새로운 설계를 불러왔습니다.&lt;/p&gt;

&lt;p&gt;개발자가 데이터와 같은 목적/기능을 클래스로 묶을 수 있으며, 전체 어플리케이션과 상관없이 단일 목적을 위해 이용 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만, 객체지향프로그래밍은 유지보수가 어렵고, 코드가 혼란스러워지는 것을 예방하지는 않습니다.&lt;/p&gt;

&lt;p&gt;Robert C. Martin은 다섯 가지 지침을 개발했습니다. 다섯 가지 지침 / 원칙을 통해 개발자는 읽기 쉽고 유지 보수가 쉬운 프로그램을 쉽게 만들 수 있습니다. &lt;/p&gt;

&lt;p&gt;다음 다섯가지 원칙은 S.O.L.I.D 라고 합니다. (Michael Feathers가 만든 머리글자)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;S: Single Responsibility Principle (단일책임원칙)&lt;/li&gt;
  &lt;li&gt;O: Open-Closed Principle (열린-닫힌 원칙)&lt;/li&gt;
  &lt;li&gt;L: Liskov Substitution Principle (리스코프 치환 원칙)&lt;/li&gt;
  &lt;li&gt;I: Interface Segregation Principle (인터페이스 분리 원칙)&lt;/li&gt;
  &lt;li&gt;D: Dependency Inversion Principle (의존성 역전 원칙)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 원칙들을 본 글에서 다뤄보려고 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Note : 이번 글에 있는 대부분의 예제는 실제 어플리케이션의 적용이나 사례로로 충분하지 않을 수 있습니다. 모든것은 자신의 설계와 사용 사례에 달려 있습니다.  가장 중요하게 이해해야 하는 것은 어떻게 원칙을 적용하고 따라 하는지를 아는 것 입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tip : SOLID 원칙은 모듈화, 캡슐화, 확장용이성, 구성용이한 컴포넌트 등을 고려한 소프트웨어의 구축을 위한 설계 입니다.
(비트(&lt;a href=&quot;https://github.com/teambit/bit&quot;&gt;Bit&lt;/a&gt;)는 이러한 원칙을 실천에 옮기는 도구입니다. 팀별로 다양한 프로젝트에서 이러한 구성 요소를 쉽게 분리, 공유 및 관리 할 수 ​​있습니다.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/srp.jpeg&quot; title=&quot;&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;single-responsibility-principle-srp단일-책임-원칙&quot;&gt;Single Responsibility Principle (SRP:단일 책임 원칙)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;“…You had one job” — Loki to Skurge in Thor: Ragnarok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;당신은 일 하나를 가지고 있었다… -  로키, 토르 라그나로크 中&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;(“당신은 일 하나를 가지고 있었다”라는 말은 직장에서 개인이 저지른 실수에 주의를 환기시키는 표현입니다. https://knowyourmeme.com/memes/you-had-one-job)&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;단일 클래스는 오직 하나의 일을 가져야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;단일 클래스는 오직 한 가지 일에만 책임이 있어야 합니다.  만약 하나의 클래스가 하나 이상의 책임이 있다면, 이것은 결합(Coupled)를 불러옵니다. 하나의 책임에 대한 변경은 다른 책임의 수정을 발생시킵니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NOTE: 이 원칙의 적용은 클래스에만 국한되지 않으며, 소프트웨어 컴포넌트와 마이크로 서비스에도 적용됩니다. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 아래의 예제 코드를 살펴보세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Animal {
    constructor(name: string){ }
    getAnimalName() { }
    saveAnimal(a: Animal) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Animal 클래스는 SRP원칙을 위반했습니다.&lt;/p&gt;

&lt;p&gt;어떻게 SRP 위반했을까요?&lt;/p&gt;

&lt;p&gt;클래스는 하나의 책임(맡은 일)을 가져야 한다고 명시되어 있습니다. 여기서 우리는 두가지 책임을 뽑아 낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;첫째로,1) Animal 데이터베이스의 관리와 두번째로 2) Animal 프로퍼티들(속성)의 관리입니다. saveAnimal이 DB의 Animal 스토리지를 관리하는 동안 생성자와 getAnimalName은 Animal 프로퍼티를 관리 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이런 설계는 나중에 어떤 이슈를 불러올까요?&lt;/p&gt;

&lt;p&gt;어플리케이션이 DB관리기능에 영향을 주도록 변경된다면, 변경사항에 맞춰 Animal 프로퍼티의 사용을 만드는 클래스는 반드시 건들이게 되고 새로 컴파일 해야 합니다.&lt;/p&gt;

&lt;p&gt;우리는 시스템에서 경직된 냄새가 나며, 도미노 효과처럼 보이고, 하나의 카드를 만지면 다른 모든 카드에 영향을 주는 것으로 보입니다. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rigidity (경직성) 
물체의 형태나 구조가 비교적 고정되어 잘 바뀌지 않음을 일컫는 말
 - 네이버 지식백과 인문과학 &amp;gt; 심리 &amp;gt; 실험심리학용어사전&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 시스템이 SRP를 따르도록, DB에 각 animal을 저장하는 단 하나의 책임을 관리 할 또 다른 클래스를 만들었습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Animal {
    constructor(name: string){ }
    getAnimalName() { }
}
class AnimalDB {
    getAnimal(a: Animal) { }
    saveAnimal(a: Animal) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스들이 같은 이유로 매번 변화하는 변화경향이 있다면, 클래스를 설계할때 연관된 기능들을 함께 모으는 것을 목표로 해야한다.
우리는 기능을 분리하노록 노력하고, 기능들은 서로 다른 이유로 변경되어야 한다. - Steve Fenton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;이런 것을 적절히 응용하면, 우리 어플리케이션은 높은 응집력을 갖게 될 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;open-closed-principle-ocp열림-닫힘-원칙&quot;&gt;Open-Closed Principle (OCP:열림-닫힘 원칙)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 엔티티(클래스,모듈,함수)는 확장을 위해 열려있고, 수정되서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;계속해서 우리의 Animal 클래스를 살펴봅시다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Animal {
    constructor(name: string){ }
    getAnimalName() { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;우리는 Animal 리스트를 반복하고, 각 Animal의 울음소리를 반복하였습니다. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;//...
const animals: Array&amp;lt;Animal&amp;gt; = [
    new Animal('lion'),
    new Animal('mouse')
];
function AnimalSound(a: Array&amp;lt;Animal&amp;gt;) {
    for(int i = 0; i &amp;lt;= a.length; i++) {
        if(a[i].name == 'lion')
            return 'roar';
        if(a[i].name == 'mouse')
            return 'squeak';
    }
}
AnimalSound(animals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;함수 AnimalSound()는 OCP를 따르지 않고 있습니다. 왜냐하면 새로운 종의 Animal에 대해서 닫혀있지 않기 때문이죠 .&lt;/p&gt;

&lt;p&gt;만약, 우리가 새로운 Animal, Snake를 추가한다면:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;//...
const animals: Array&amp;lt;Animal&amp;gt; = [
    new Animal('lion'),
    new Animal('mouse'),
    new Animal('snake')
]
//...
We have to modify the AnimalSound function:

//...
function AnimalSound(a: Array&amp;lt;Animal&amp;gt;) {
    for(int i = 0; i &amp;lt;= a.length; i++) {
        if(a[i].name == 'lion')
            return 'roar';
        if(a[i].name == 'mouse')
            return 'squeak';
        if(a[i].name == 'snake')
            return 'hiss';
    }
}
AnimalSound(animals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;여러분은 앞으로 보시게 될겁니다. 모든 새로운 Animal을 위해서 새로운 로직을 AnimalSound() 함수에 추가하는 것을 말이지요.&lt;/p&gt;

&lt;p&gt;이건 상당히 간단한 예제입니다. 우리의 어플리케이션이 커지고 복잡해질때, 여러분은 만나게 될 것입니다. 매시간 새로운 animal이 추가 될 때 마다, ‘if’ 조건문이 AnimalSound()함수에서 계속해서 반복되며 추가된다는 것을 말이에요.&lt;/p&gt;

&lt;p&gt;어떻게 하면 AnimalSound가 OCP를 지킬 수 있도록 할까요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Animal {
        makeSound();
        //...
}
class Lion extends Animal {
    makeSound() {
        return 'roar';
    }
}
class Squirrel extends Animal {
    makeSound() {
        return 'squeak';
    }
}
class Snake extends Animal {
    makeSound() {
        return 'hiss';
    }
}
//...
function AnimalSound(a: Array&amp;lt;Animal&amp;gt;) {
    for(int i = 0; i &amp;lt;= a.length; i++) {
        a[i].makeSound();
    }
}
AnimalSound(animals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;현재 Animal은 가상의 makeSound()를 가지고 있습니다. 우리는 Animal class를 확장하고 가상의 makeSound()를 구현하고 있는 각각의 animal을 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;모든 animal은 자신의 makeSound()에서 울음소리에 관한 방법을 구현하고 있습니다. AnimalSound()는 animal 배열을 반복하며 makeSound() 메서드를 호출 할 뿐입니다.&lt;/p&gt;

&lt;p&gt;이제, 우리가 새로운 animal을 추가한다면, AnimalSound는 더이상 변경 할 필요가 없습니다. 우리가 할 일은 새로운 animal을 animal 배열에 추가하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;AnimalSound는 이제 OCP 원칙을 따르게 되었습니다.&lt;/p&gt;

&lt;p&gt;다른예제:&lt;/p&gt;

&lt;p&gt;여러분이 상점을 가지고 있다고 상상해보세요. 그리고 여러분이 좋아하는 고객에게 20% 할인해주고자 할때,&lt;/p&gt;

&lt;p&gt;클래스는 아래와 같을겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Discount {
    giveDiscount() {
        return this.price * 0.2
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;여기에 VIP 고객에게는 20%를 추가로 할인해주기로 결정했을때, 코드는 아래와 같을것입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class Discount {
    giveDiscount() {
        if(this.customer == 'fav') {
            return this.price * 0.2;
        }
        if(this.customer == 'vip') {
            return this.price * 0.4;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 위 코드는 OCP 원칙을 지키지 못했습니다. OCP는 이런 코드를 금지하고 있거든요 :)&lt;/p&gt;

&lt;p&gt;만약에 우리가 신규 할인률을 다른 고객에게 적용하려고 한다면, 새로운 로직이 추가되는 것을 보게 될 것입니다.&lt;/p&gt;

&lt;p&gt;OCP 원칙을 준수하며 만드는 방법은 Discount를 확장하여 새로운 클래스를 추가하는 것입니다. &lt;/p&gt;

&lt;p&gt;추가된 신규 클래스에서 우리는 신규 행위를 구현 할 수 있을 것입니다.  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class VIPDiscount: Discount {
    getDiscount() {
        return super.getDiscount() * 2;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;만약, 80%의 할인율을 슈퍼 VIP 고객에게 적용하려면 아래와 같습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cfml&quot;&gt;class SuperVIPDiscount: VIPDiscount {
    getDiscount() {
        return super.getDiscount() * 2;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;이제, 우리는 ‘수정’과는 별개로 ‘확장’ 된 모습을 볼 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;*본 자료는 &lt;a href=&quot;https://blog.bitsrc.io/@kurtwanger40&quot;&gt;Chidume Nnamdi&lt;/a&gt;님이 Medium에서 작성한 글 입니다. Doublem.org는 저자의 허락을 받아 번역하여 대한민국에 소개하고 있습니다.&lt;/p&gt;

&lt;p&gt;*Original article is written by &lt;a href=&quot;https://blog.bitsrc.io/@kurtwanger40&quot;&gt;Chidume Nnamdi&lt;/a&gt;. Doublem.org, with the permission of the author, is translated and introduced to Korea.
&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bitsrc.io/solid-principles-every-developer-should-know-b3bfa96bb688&quot;&gt;SOLID Principles every Developer Should Know&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="SOLID" /><category term="Principles" /><category term="every" /><category term="Developer" /><category term="Should" /><category term="Know" /><summary type="html">객체지향 타입의 프로그래밍은 소프트웨어 개발의 새로운 설계를 불러왔습니다.</summary></entry><entry><title type="html">헐리우드원칙과 DIP구현</title><link href="https://doublem.org/Hollywood_DIP_Impl/" rel="alternate" type="text/html" title="헐리우드원칙과 DIP구현" /><published>2018-06-14T10:29:00+00:00</published><updated>2018-06-14T10:29:00+00:00</updated><id>https://doublem.org/Hollywood_DIP_Impl</id><content type="html" xml:base="https://doublem.org/Hollywood_DIP_Impl/">&lt;p&gt;다른사람들과 함께 ‘일’을 하다보면 다양한 ‘일’을 겪는다. 그 일들은
고객의 문제와 해결이며, 필요성과 욕구 사이의 줄타기이다.&lt;/p&gt;

&lt;p&gt;줄타기 사이에서 우리의 역할은 문제를 정의하는 일을 할 수도, 문제를
해결하는 방법을 만드는 일을 할 수도, 필요와 욕구 사이를 적절히 조율하는
일을 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/1.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소프트웨어는 무엇이고, 개발은 무엇인가? 아마, 소프트웨어는 문제를
해결하는 방법이며 개발은 문제를 해결하는 일을 만드는 일이라고 할 수 있을
것이다.&lt;/p&gt;

&lt;p&gt;그렇다면, &lt;strong&gt;‘문제정의 → 해결방안설계 → 해결방안구현 → 문제해결’&lt;/strong&gt;
이라는 방법으로 순차적으로 처리를 할 수 있을까?&lt;/p&gt;

&lt;p&gt;위와 같은 일은 큰 맥락으로 이뤄지지만, 나의 학교에서의 프로젝트
경험으로도, 기업단위의 프로젝트경험에서도 매끄럽게 이뤄지지 않았다.&lt;/p&gt;

&lt;p&gt;가장 큰 문제는 문제정의를 문제라고 생각하는 실제 경험자가 정의하지 않고,
할 수도 없는 상황이 많다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해, 소프트웨어 개발방법론에는 Agile이라는 방법도 있고,
일반 과학연구방법론쪽에서는 Living-Lab이라는 개념을 도입하기도 한다.&lt;/p&gt;

&lt;p&gt;두개의 방법 모두 실제문제경험을 할 수 있는 고객,소비자,사용자를
문제정의의 대상객체에서 정의를 내리는 주체로 만들고 지속적인 반복 해결을
통하여 문제를 해결하자라는 개념이다.&lt;/p&gt;

&lt;p&gt;아직까지는 나의 경우 경험이 부족하여 식견이 짧아, 어떤 방안이 더욱
효율적인지는 판단이 어렵다. &lt;/p&gt;

&lt;p&gt;하지만, 위와 같은 방법론적인 방안외에 내가 프로그래밍(coding)을 통해서
할 수 있는 일은 어떤것이 있을까하고 고민하던 중 아래와 같은 원칙을
발견하고 적용해보려고 한다. &lt;/p&gt;

&lt;h4 id=&quot;헐리우드원칙&quot;&gt;헐리우드원칙&lt;/h4&gt;

&lt;p&gt;사전적 정의는 없지만, 많은 위키와 글들에서 아래와 같이 말한다.&lt;/p&gt;

&lt;p&gt;“Don’t call us, we’ll call you” 우리한테 연락하지 마세요. 우리가
연락할께요&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/2.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘내’가 할 수 있는 일과 ‘남’이 할 수 있는 일을 구분하는 것이다.&lt;/p&gt;

&lt;p&gt;인력채용과정에서 구직자가 주도적으로 할 수 있는 일은 ‘자기소개서 및
이력서’ 작성 및 제출이 최선이다. 제출이후에 벌어지는 일들은 각
구인기업의 방법에 따라 다르다.&lt;/p&gt;

&lt;p&gt;구직자는 서류통과 이후 기업에서 요청하는데로 반응하여 행동 할 수 밖에
없다.&lt;/p&gt;

&lt;p&gt;구직을 위해서라면 기업요청에 맞춰 유연하게 대응해야한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/3.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 경우 구직자의 서류가 모두 통과 되었다고 하자, 그렇다면 구직자는
세가지의 채용 프로세스에 따라서 행동을 해야 한다.&lt;/p&gt;

&lt;p&gt;여기서 문제는 세가지의 채용프로세스이고, 해결을 위해서는 구직자가 각
채용프로세스에 맞춰서 행동해야 한다.&lt;/p&gt;

&lt;p&gt;프로그래밍을 한다면 어떻게 할 것인가?&lt;/p&gt;

&lt;p&gt;아래에서 getResult 함수는 각각의 회사채용방식에 맞게 코드를 작성 할
것인가?&lt;/p&gt;

&lt;p&gt;지원자 객체는 이름과 점수(학점), 현재회사, 고용유무상태를 확인한다.&lt;/p&gt;

&lt;p&gt;Node.JS 예시&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//서버&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* GET home page. */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//구직자&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jerry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;isHired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//결과(웹)

extends layout

block content

h1= title

p Welcome to #{result.company}

p #{result.name}은 #{result.company}의 채용전형 결과
#{result.score}로 #{result.isHired}하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A기업의 채용프로세스는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;지원자의 이름은 지원번호와 함께 나타난다.&lt;/li&gt;
    &lt;li&gt;지원자의 점수는 10을 곱하여 합격유무가 결정된다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;기업&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;지원번호 000123/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;불합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 B기업의 프로세스를 추가하려면 아래와 같은 선택지가 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a. getResult를 삭제 혹은 주석처리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;b. getResult2 라는 새로운 이름의 함수선언 및
Route.get(‘/’)의 getResult 호출 변경&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a안은 A기업의 프로세스를 재사용 할 수 없다.  a안을 따르는 순간 A기업의
getResult를 사용하던 모든 함수는 장애가 발생한다. (강제로 B기업
프로세스로 적용)&lt;/p&gt;

&lt;p&gt;b안은 함수의 이름을 관리해야하며, 잘못된 함수의 이름은 다른사람으로
하여금 혼돈 및 오용가능성을 높일 수 있다. 또한 Route.get(‘/’)에서
필요로 하는 요소 (이름, 회사명, 점수, 합격유무) 프로퍼티가 존재하지
않을경우 잘못된 페이지가 나타난다.&lt;/p&gt;

&lt;p&gt;잘못된 페이지는 잘못된 응용이다.  (아래 B기업의 결과를 보고 싶다면
반드시 결과(웹) 템플릿의 호출 프로퍼티 식별자 명을 바꿔야 한다.)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;기업&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;불합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;의존성역전의-원칙&quot;&gt;의존성역전의 원칙&lt;/h3&gt;

&lt;p&gt;Dependency Inversion Principle 이라고 한다. (이하 DIP) , 의존이란
‘다른것에 의지하여 존재함’이라는 뜻이다.&lt;/p&gt;

&lt;p&gt;객체 지향 프로그래밍에서 의존 관계 역전 원칙은 소프트웨어 모듈들을
분리하는 특정 형식을 지칭한다.&lt;/p&gt;

&lt;p&gt;이 원칙을 따르면, 상위 계층(정책 결정)이 하위 계층(세부 사항)에 의존하는
전통적인 의존 관계를 반전(역전)시킴으로써 상위 계층이 하위 계층의
구현으로부터 독립되게 할 수 있다. 이 원칙은 다음과 같은 내용을 담고
있다.&lt;/p&gt;

&lt;p&gt;첫째, 상위 모듈은 하위 모듈에 의존해서는 안된다. 상위 모듈과 하위 모듈
모두 추상화에 의존해야 한다.
둘째, 추상화는 세부 사항에 의존해서는 안된다. 세부사항이 추상화에
의존해야 한다.&lt;/p&gt;

&lt;p&gt;이 원칙은 ‘상위와 하위 객체 모두가 동일한 추상화에 의존해야 한다’는
객체 지향적 설계의 대원칙을 제공한다.&lt;/p&gt;

&lt;p&gt;상위 모듈이 하위모듈에 의존하지 말라고 한다. 우리의 예를 들면, 구직자가
보고 싶어하는 페이지(웹템플릿)이 상위모듈이다. (이 페이지에는 구직자의
목표인 구직결과가 나타나있다.)&lt;/p&gt;

&lt;p&gt;하지만, 지금까지의 프로그래밍 결과로는 상위모듈이 하위모듈에 의존하고
있는 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/4.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;A&lt;/em&gt; &lt;strong&gt;&lt;em&gt;policy&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;is&lt;/em&gt; &lt;em&gt;a&lt;/em&gt; &lt;em&gt;set&lt;/em&gt; &lt;em&gt;of&lt;/em&gt; &lt;em&gt;ideas&lt;/em&gt; &lt;em&gt;or&lt;/em&gt; &lt;em&gt;plans&lt;/em&gt; &lt;em&gt;that
is&lt;/em&gt; &lt;em&gt;used&lt;/em&gt; &lt;em&gt;as&lt;/em&gt; &lt;em&gt;a&lt;/em&gt; &lt;em&gt;basis&lt;/em&gt; &lt;em&gt;for&lt;/em&gt; &lt;em&gt;making&lt;/em&gt; &lt;em&gt;decisions&lt;/em&gt;, &lt;em&gt;especially&lt;/em&gt; &lt;em&gt;in&lt;/em&gt; &lt;em&gt;politics&lt;/em&gt;, &lt;em&gt;economics&lt;/em&gt;, &lt;em&gt;orbusiness&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Policy는 계획이나 아이디어의 모음이며, 의사결정을 하는데 쓰인다. -
콜린스코빌드영영사전&lt;/p&gt;

&lt;p&gt;지극히도 구직을 하기 위한 Policy 수준내용이 반영된 구현체(웹템플릿)이
채용프로세스를 담고있는 함수들에 의존을 하고 있다. &lt;/p&gt;

&lt;p&gt;위에서 보았겠지만, b안(&lt;em&gt;getResult2 라는 새로운 이름의 함수선언 및
Route.get(‘/’)의 getResult 호출 변경&lt;/em&gt;)을 따르는 경우에는 필연적으로
웹템플릿을 수정 할 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/5.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/6.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DIP는 이를 해결하기 위해 Interface를 사용하라고 한다. 어떤 뜻일까?&lt;/p&gt;

&lt;h3 id=&quot;사용예시&quot;&gt;사용예시&lt;/h3&gt;

&lt;p&gt;상위 예시에서는 getResult를 정의하고 사용 할 수 있다.&lt;/p&gt;

&lt;p&gt;그러나, applicant의 프로퍼티에 대해서 강력한 제약사항을 선언 할 수
없었다. 이것은 관심사의 분리 정도밖에 기능을 할 수 없는 것으로 보인다. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;separation of concerns; SoC관심사의 분리, 관심의 분리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;(소프트웨어 공학) 프로그램을 기능 면에서 가능한 중복이 아닌 여러 모듈로
명확히 나누는 것
여기서, 관심 = 프로그램의 기능, 행동, 목적
큰 문제를 작은 부분들의 문제로 분할하면 해결이 용이함
모든 프로그래밍 패러다임의 지향점
모듈성과 캡슐화가 중요함
//예시
MVC 디자인 패턴 - 데이터와 표현 분리
서비스 지향 설계 - 관심을 서비스로 분리
절차적 프로그래밍
객체지향프로그래밍 - 데이터에 대한 관심을 클래스와 객체로 분리
관점지향프로그래밍 AOP
역할지향프로그래밍
주제지향프로그래밍
-
[[https://zetawiki.com/wiki/%EA%B4%80%EC%8B%AC%EC%9D%98&lt;em&gt;%EB%B6%84%EB%A6%AC_SoC](https://zetawiki.com/wiki/%EA%B4%80%EC%8B%AC%EC%9D%98&lt;/em&gt;%EB%B6%84%EB%A6%AC_SoC)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;잠깐! 여기서 생각해보자. 지금까지 우리는 구직자의 행위와 함께 구인기업의
채용프로세스를 정의하는 제3자, 전지적작가시점에서 코드를 작성했다.&lt;/p&gt;

&lt;p&gt;만약, 구인기업의 채용프로세스를 모른다고 가정한다면 어떻게 코드를
작성해야 할까? 막연히 프로세스를 알때까지 기다려야 할까?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* GET home page. */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jerry Ahn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isHired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'??????????????????'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//여기는 어떻게 하나???&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런경우 아래와 같이 작성을 하게 된다면 이후, 채용프로세스를 알때,
우리는 채용프로세스 함수를 인자로 넣어주기만 하면 된다. &lt;/p&gt;

&lt;p&gt;(나중에 내가 선언을 해줘도 되고, 외부에서 모듈로 다운로드 받아도 된다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Don’t call us, we’ll call you” 우리한테 연락하지 마세요. 우리가
연락할께요. 가 눈앞에 구현되는 순간이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* GET home page. */

router.get('/', function(req, res, next) {

var applicant = {name: 'Jerry Ahn', score: 10,
company:'',isHired:''};

var result = getResult(applicant,'프로세스');//시키는데로 반응하겠다.
헐리우드 원칙 적용

res.render('index', { result:result});

});

//회사채용후 결과를 얻는 함수 //시키는데로 반응하겠다. 헐리우드 원칙
적용

//applicant는 name:String, score:integer, company:String, isHired:String
프로퍼티로 구성되어있습니다.

function getResult(applicant,callback){

return callback(applicant);

};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단지 JS로 구현한 코드에는 인터페이스의 강제성이 없어서 만약 applicant의
프로퍼티 타입이 다를경우를 해결하는 로직을 getResult에 구현해줘야한다. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단, 해결로직은 getResult에만 포함해주면 된다. 이는 관심사의 분리를
통한 이점이다.&lt;/strong&gt; 다른사람과의 협업시에 한사람은 getResult만 신경쓰면
되며, 이를 사용하는 쪽에서는 다른 부분에만 관심을 두고 작업을 진행하면
된다.&lt;/p&gt;

&lt;p&gt;(사실. Interface라면 서로 합의가 된 상태에서 구현이 이뤄져야한다.
아니면, 누군가가 하나의 기준을 준수하고 따라줘야 한다. 프로퍼티가
다르다는 것은 인터페이스가 제 기능을 못하는것으로 봐도 될 것이다.) &lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* GET home page. */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jerry Ahn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isHired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CompanyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//회사채용후 결과를 얻는 함수 //시키는데로 반응하겠다. 헐리우드 원칙&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;적용&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//applicant는 name:String, score:integer, company:String, isHired:String&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;프로퍼티로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구성되어있습니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//A기업&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CompanyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;지원번호 000123/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A기업'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;불합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//B기업&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CompanyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B기업'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;불합격&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 자바에서 구현해보자. 자바의 경우에는 인터페이스를 구현시에는
강제성을 지닌다. 따라서 결과에 대한 보장을 받을 수 있다.&lt;/p&gt;

&lt;p&gt;아래와 같이 구현시에는 지원서에 적힌 Company명을 가지고 분류하는
기능으로 자동화가 가능하다. 이기능을 구현시에는 이부분의 코딩은 완료가
된다. → Factory Pattern 을 통한 활용이 가능&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;model.Applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;model.CompanyA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;model.HiringProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.ui.Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IndexController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Applicant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jerry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jerry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HiringProcess&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompanyA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 채용프로세스 타입을 보장받는다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (지금은 CompanyA를 넣었지만, 지원서에 적힌 Company명을 가지고&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//분류하는 기능으로 자동화가 가능하다. 이기능을 구현시에는 이부분의 코딩은&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//완료가 된다.)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jerry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Applicant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isHired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isHired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;미정&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//..... Getter, Setter}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//-----------------------&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//채용프로세스 인터페이스&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HiringProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Applicant&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Applicant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//---------------------&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompanyA&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HiringProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Applicant&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Applicant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;지원번호 000123/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;companyScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIsHired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;합격&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIsHired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;불합격&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;//doublems.github.io/assets/postphoto/20180614/7.jpg&quot; title=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;추후 OCP 연계 및 자동화기능을 수행하는 Factory를 만들어보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://doublem.org/Hollywood-Principle/&quot;&gt;http://doublem.org/Hollywood-Principle/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/the-hollywood-principle&quot;&gt;https://dzone.com/articles/the-hollywood-principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;https://en.wikipedia.org/wiki/Dependency_inversion_principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vandbt.tistory.com/42&quot;&gt;http://vandbt.tistory.com/42&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@smartbosslee/%EA%B4%80%EC%8B%AC%EC%82%AC%EC%9D%98-%EB%B6%84%EB%A6%AC-separation-of-concerns-soc-8a8d09df066d&quot;&gt;https://medium.com/@smartbosslee/%EA%B4%80%EC%8B%AC%EC%82%AC%EC%9D%98-%EB%B6%84%EB%A6%AC-separation-of-concerns-soc-8a8d09df066d&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[https://zetawiki.com/wiki/%EA%B4%80%EC%8B%AC%EC%9D%98_%EB%B6%84%EB%A6%AC_SoC]&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Living_lab&quot;&gt;https://en.wikipedia.org/wiki/Living_lab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="Hollywood" /><category term="Principle" /><category term="DIP" /><category term="js" /><category term="java" /><summary type="html">다른사람들과 함께 ‘일’을 하다보면 다양한 ‘일’을 겪는다. 그 일들은 고객의 문제와 해결이며, 필요성과 욕구 사이의 줄타기이다.</summary></entry><entry><title type="html">헐리우드 원칙</title><link href="https://doublem.org/Hollywood-Principle/" rel="alternate" type="text/html" title="헐리우드 원칙" /><published>2018-05-20T19:00:00+00:00</published><updated>2018-05-20T19:00:00+00:00</updated><id>https://doublem.org/Hollywood%20Principle</id><content type="html" xml:base="https://doublem.org/Hollywood-Principle/">&lt;p&gt;세계적으로 영화와 연관된 키워드로 유명한 헐리우드가 있다.&lt;/p&gt;

&lt;h2 id=&quot;헐리우드-원칙이란-&quot;&gt;헐리우드 원칙이란? &lt;br /&gt;&lt;/h2&gt;
&lt;p&gt;헐리우드 원칙(Hollywood Principle)이란 아래와 같다&lt;/p&gt;

&lt;p&gt;&lt;del&gt;(가수라니..)&lt;/del&gt;
&lt;a href=&quot;https://www.sandiegoreader.com/bands/hollywood-principle/#&quot; data-lightbox=&quot;헐리우드원칙_가수&quot; data-title=&quot;헐리우드원칙 가수&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;https://media.sandiegoreader.com/img/bands/leadart/Hollywood-Principle_t658.jpg?ff95ca2b4c25d2d6ff3bfb257febf11d604414e5&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;사전적 정의는 없지만, 많은 위키와 글들에서 아래와 같이 말한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;dont-call-us-well-call-you-우리한테-연락하지-마세요-우리가-연락할께요&quot;&gt;“Don’t call us, we’ll call you” 우리한테 연락하지 마세요. 우리가 연락할께요.&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;예를들면, 캠퍼스 리쿠르팅 (교내채용) 행사를 진행한다고 하자.
학생은 기업의 채용담당자를 찾아가서 이력서를 제출한다.
그리고 기다리면, 채용담당자에게 연락이 올 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/20180520/Hollywood_campus.jpg&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/20180520/Hollywood_campus.jpg&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;하지만, 캠퍼스 리쿠르팅 (교내채용) 행사가 없다면?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;기업에 채용행사 요청을 한다.&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;채용행사을 기다리고, 이력서를 제출한다. &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;이력풀에 이력등록을 하고 기다린다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;일반적으로는 위와 같이 생각 할 수 있다. 그래서? 어떤 선택지가 더 나은 방법일까?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;행사요청 → 채용의사가 있는지, 행사를 할지를 정함 → 만약 정한다면 행사 참여 및 이력서를 제출&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;채용행사를 기다림 → 회사 : 회사의 채용의사와 채용행사 진행 유무를 결정&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;이력풀 등록 → 학생이 이력서를 제출 할 수 있음&lt;br /&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;학생이 할 수 있는 최선의 선택은 이력풀에 본인의 이력을 등록하는 것이다.&lt;/strong&gt;&lt;br /&gt;
(1번은 행사유무 의사를 확인하고, 이후에 이력서를 제출하게 됨으로 시간이든다. 2번은 학생이 주도적으로 할 수 있는 일이 없다.)&lt;/p&gt;

&lt;p&gt;최선의 선택을 위해서, 예시 상황에 대한 목표와 각 요소의 구성과 역할을 보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;목표&lt;br /&gt;
채용(구직과 구인)&lt;br /&gt;
요소의 구성과 역할&lt;br /&gt;
학생(구직자) → 구직을 위한 본인의 이력서를 채용담당자에게 제공한다.&lt;br /&gt;
채용담당자(구인자) → 구인을 위해 학생(구직자)들의 이력서를 수집하고, 채용을 위한 활동을 한다.&lt;br /&gt;
이력서 → 학생의 희망 업무와 정보가 들어있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 상황에서 학생과 채용담당자는 각자의 역할과 목표달성을 위해 다양한 일을 한다.&lt;/p&gt;

&lt;p&gt;학생은 이력서 작성 후, 작성 된 이력서를 채용담당자에게 제공 할 것이다.&lt;/p&gt;

&lt;p&gt;그러면, 이후에는 담당자는 일련의 절차를 거쳐 채용유무를 확정 할 것이다.&lt;/p&gt;

&lt;p&gt;여기서 중요한 사항은 &lt;strong&gt;‘추가적으로 이후에 발생하는 복잡한 일들’&lt;/strong&gt;이다.  더욱 복잡한일로 고난도(High-Level)의 일들이 펼쳐진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;채용담당자가 이력서를 검토하거나 사내 채용시스템 혹은 프로세스에 전달한다. &lt;br /&gt;
채용담당자는 검토 혹은 시스템(프로세스)를 통해서 돌아온 결과를 확인한다. &lt;br /&gt;
학생은 이력서를 수정한다. &lt;br /&gt;
채용담당자는 수정 이력서를 반영한다. &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;채용기업은 채용을 위한 준비를 한다. 행사를 열고, 채용담당자는 이력서를 검토하거나 프로세스를 이용하는 일부터, 수정이력서의 반영까지의 역할을 수행하고 있다. 
&lt;br /&gt;
학생은 이력서의 작성(수정포함)과 제출이 캠퍼스리쿠르팅에서 할 수 있는 유일한 결정적인 일이다.
이후의 일들은 전적으로 ‘채용담당자의 영역’이다. 수집된 이력서를 다루는 일은 채용담당자에게 넘겨진 것이다.&lt;/p&gt;

&lt;p&gt;학생은 이력서를 제출 뒤에 할 수 있는 일이 극히 제한적이며, 채용과정에 참여 할 수 없다.
앞으로의 채용을 위한 여정은 ‘오직 채용기업과 담당자’만 할 수 있는 과정이다.&lt;br /&gt;
나의 의지로 시간에 맞춰서 순차적으로 해결 가능하던 일들이, 이력서 제출 후 채용기업의 의사에 맞춰서 진행해야 한다. (내가 관여 할 수도, 해서도 안되는 영역이니까..)
따라서 학생은 채용기업의 채용프로세스에 맞춰서 연락을 받고 행동 할 뿐이다. 구직자가 해야 할 일들에 대한 제어는 채용담당자(채용기업)을 통해서 이뤄진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;즉, 헐리우드 원칙은 ‘당신이 할 일 중에서 내가 필요할 때 불러주면, 요청한 사항에 맞춰서 행동하겠다.’ 로 이해 할 수 있겠다.&lt;/strong&gt;
(요청한 사항 → 다양한 활용)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;제어권의-소유와-흐름&quot;&gt;제어권의 소유와 흐름&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;단계 : 이력서작성 → 이력서 제출 → 채용(인터뷰, 계약등) &lt;br /&gt;
제어소유자 : 	구직자 →	 구직자 → 구인자 &lt;br /&gt;
제어방향	→ (순방향) → (순방향)	← (역방향) &lt;br /&gt;
*단계는 시간순으로 흐름, 학생을 기준(주체)로 볼 때 권한이 역전됨&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;q만약학생이-채용담당자가의-이력서를-수정-할-수-있는-권한이-생긴다면-어떤-문제가-있을까&quot;&gt;Q)만약,학생이 채용담당자가의 이력서를 수정 할 수 있는 권한이 생긴다면 어떤 문제가 있을까?&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약, ‘검토 → 인터뷰요청 → 계약 → 채용완료’ 의 절차가 있다면, 절차상태 중간에 수정을 하면 검토 행위가 무시된다.
한명이라면 검토부터 다시하면 문제가 없다.&lt;br /&gt;
하지만 절차가 많고, 수정요청이 많을 경우 절차 수(N) * 사람(N)만큼의 변수가 발생한다. →  복잡도가 높아진다. 잘못생각하면 프로세스가 엉켜버린다.&lt;br /&gt;
이 문제를 해결 하려면 시간에 따라 프로세스가 동작해야만한다. 채용절차를 공개하고, 수정 가능한 일자를 제공하여 해당 날짜 이후에는 일괄처리 해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;어디서-사용될까&quot;&gt;어디서 사용될까?&lt;/h2&gt;
&lt;p&gt;프로그래밍의 영역으로 옮겨보자.&lt;/p&gt;

&lt;p&gt;흔히 헐리우드 원칙은 IoC 혹은 DI로 불린다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HollywoodPrinciple is often called InversionOfControl, or DependencyInjection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;헐리우드원칙은 제어의 역전이나 의존성 삽입으로 흔히 불린다.&lt;/p&gt;

&lt;p&gt;IoC와 DI를 사용하는 범주는 API와 Framework라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;프레임워크의 경우에는 요즘에는 유명한 Spring DI가 있으며, API의 경우 JS의 CallBack등을 활용한 경우가 포함된다.&lt;/p&gt;

&lt;h2 id=&quot;예시는&quot;&gt;예시는?&lt;/h2&gt;

&lt;p&gt;자바스크립트 API와 스프링프레임워크 DI를 통해서 실제 사례를 살펴볼 것이다.&lt;/p&gt;

&lt;p&gt;여기서 중요하게 살펴봐야 할 점은  헐리우드 원칙 ‘당신이 할 일 중에서 내가 필요할 때 불러주면, 요청한 사항에 맞춰서 행동하겠다.’ 이다.&lt;/p&gt;

&lt;p&gt;요청에 맞춰 행동하겠다는 것은, 다양하게 응용하여 ‘재사용’ 할 수 있다는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;자바스크립트-api&quot;&gt;자바스크립트 API&lt;/h3&gt;
&lt;p&gt;함수 call이 이전의 경우에는 전역변수 name에 의존을 하고 있는 모습이다.&lt;/p&gt;

&lt;p&gt;재사용을 위해서는 name을 바꿔주어야 하는데.. 아래 코드에서 name이 변경되면 이전 수행작업이 변경된다. 변수와 함수가 꽁꽁묶인 코드이다.&lt;/p&gt;

&lt;p&gt;그러나 함수에 파라미터를 넣어서 본인의 파라미터 nameVar에 의존하고 있다.&lt;/p&gt;

&lt;p&gt;따라서 함수 call은 부를때 Argument로 할당한 값에 따라서 얼마든지 다양한 방법으로 console.log 를 수행한다. 즉 재사용이 가능하다.&lt;/p&gt;

&lt;p&gt;callback을 통해 인수로 함수를 넣어 주게 되면, 수행해야 할 변수와 동작까지 지정이 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;헐리우드-예제-코드-js&quot;&gt;헐리우드 예제 코드 JS&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//헐리우드 적용 전&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;//헐리우드 적용 후&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;spring-프레임워크&quot;&gt;Spring 프레임워크&lt;/h3&gt;
&lt;p&gt;헐리우드 적용전에는 TextEditor() 메소드가 SpellChecker 인스턴스를 생성했다.&lt;br /&gt;
그러나 적용 후에는 프레임워크가 빈등록과정을 통해서 SpellChecker를 생성후 파라미터로 삽입해주었다.(Dependency Injection)&lt;br /&gt;
이경우에도, DI로 같은 클래스의 인스턴스라면 얼마든지 교체 할 수 있다. 프로퍼티의 정의를 다른곳에 위임 해준 것이다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//헐리우드 적용 전&lt;/span&gt;
 
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TextEditor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spellChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TextEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;spellChecker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;///////////////////////////////////////////////////////&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;//헐리우드 적용 후&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TextEditor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spellChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TextEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spellChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spellChecker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spellChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;////빈등록
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version = &quot;1.0&quot; encoding = &quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;xmlns:xsi =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 
   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Definition for textEditor bean --&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;textEditor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.tutorialspoint.TextEditor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spellChecker&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
 
   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Definition for spellChecker bean --&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spellChecker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.tutorialspoint.SpellChecker&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;정리하며&quot;&gt;정리하며&lt;/h2&gt;

&lt;p&gt;헐리우드 원칙을 &lt;strong&gt;‘당신이 할 일 중에서 내가 필요할 때 불러주면, 요청한 사항에 맞춰서 행동하겠다.’&lt;/strong&gt; 라고 정의했었다.&lt;br /&gt;
즉, 내가 언제 어떻게 해야 할 지를 알고, 스스로 제어 할 수 있는 일이면 하되, 그밖에 영역의 일은 정의해서 알려주면 행동하겠다는 것이다.
이를 고수준 컴포넌트(High-Level Component)라고 봐도 될 것 같다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스스로 할 수 있는 일을 열심히 하고, 못하는 일은 위임하자.&lt;br /&gt;
특히 내가 시간을 정할 수 없는 일은 부탁하고 다른일을 하자..&lt;br /&gt;
계속 묻는건 서로 피곤하다.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://dzone.com/articles/the-hollywood-principle&lt;/li&gt;
  &lt;li&gt;http://wiki.c2.com/?HollywoodPrinciple&lt;/li&gt;
  &lt;li&gt;https://martinfowler.com/bliki/InversionOfControl.html&lt;/li&gt;
  &lt;li&gt;http://vandbt.tistory.com/43&lt;/li&gt;
  &lt;li&gt;http://thephantomprogrammer.blogspot.kr/2015/08/the-hollywood-principle-dont-call-us.html&lt;/li&gt;
  &lt;li&gt;https://www.tutorialspoint.com/spring/spring_dependency_injection.htm&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="Hollywood" /><category term="Principle" /><summary type="html">세계적으로 영화와 연관된 키워드로 유명한 헐리우드가 있다.</summary></entry><entry><title type="html">Eclipse Web project로의 여정</title><link href="https://doublem.org/webJorney/" rel="alternate" type="text/html" title="Eclipse Web project로의 여정" /><published>2017-11-13T00:20:59+00:00</published><updated>2017-11-13T00:20:59+00:00</updated><id>https://doublem.org/webJorney</id><content type="html" xml:base="https://doublem.org/webJorney/">&lt;p&gt;많은 분들이 처음 Java를 학습 할 때, 이클립스 IDE를 설치하고 예시를 따라서 기본프로젝트로 src 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Helloworld.java&lt;/code&gt;  를 작성한 경험이 있을것으로 생각합니다.
기본프로젝트 이후로, Servlet, Spring 등 웹 프로젝트를 학습하면서 조금 더 복잡한 프로젝트 구조를 만나게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/20171112_1.PNG&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/20171112_1.PNG&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;책이나 예시 자료등을 보고 따라하는 웹프로젝트의 첫 학습은 흔히 기본프로젝트와는 별개로 새로운 프로젝트로 시작됩니다. (제 경험에 의하면) 기존에 학습하던 프로젝트 방식과 맥락이 이어지지 않는 갑작스런 변화는 프로젝트가 복잡하고 어렵다고 생각하게 합니다.
평소, 프로젝트 구조도 궁금하기도 했고, 어떻게 하면 프로젝트가 확장되어 진행 될 수 있는지 궁금하여 본 글을 작성하게 되었습니다. 
따라서  이 글은 &lt;strong&gt;기본프로젝트  &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWolrd.java&lt;/code&gt; 부터 웹프로젝트까지의 프로젝트의 연결이 궁금하신 분&lt;/strong&gt; 들에게 도움이 될 수 있을 것으로 생각됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;자바-기본-프로그래밍&quot;&gt;자바 기본 프로그래밍&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;이클립스를 통해서 가장 처음 만나는 기본 프로그래밍 프로젝트를 시작합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;New Java Project를 통해 프로젝트를 생성&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;src 하단 HelloWorld 클래스 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_14-52-8.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_14-52-8.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;너무나도 익숙한 HelloWorld 입니다.&lt;/p&gt;

&lt;p&gt;이때, 우리의  실제 프로젝트 저장은 어떤 폴더에 어떻게 저장될까요? 
&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_14-54-12.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_14-54-12.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이클립스 시작 후 (&lt;del&gt;Enter key로 순식간에 넘어가는)&lt;/del&gt;제일 처음 만나는 화면입니다. Workspace에 쓰여있는 실제 경로로 이동해보면 만들었던 프로젝트 폴더가 있습니다.
&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_14-57-42.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_14-57-42.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;
src는 이클립스에서 프로젝트 진행 때 봤던것이고, 나머지는 생소합니다.&lt;/p&gt;

&lt;p&gt;src안에는 만들었던 &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.java&lt;/code&gt;가 있습니다.  bin에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.class&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-41-12.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-41-12.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;bin은 컴파일러에 의해 컴파일 된 클래스가 저장된 공간입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-4-46.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-4-46.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;늘 여기서 문제였습니다. 여기까지하고 무엇을 해야 할 지 모릅니다.&lt;/strong&gt; 검정색 콘솔창에 글씨를 아름답게 찍는 분들도 계시고, 여기서 멈추는 분들도 많습니다.
&lt;strong&gt;하지만, 이글의 제목처럼 이어서 웹프로젝트로 여정을 진행&lt;/strong&gt;하겠습니다.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;사전준비 : 톰캣설치 Tomcat https://tomcat.apache.org/download-80.cgi
    ​
——&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;웹-프로젝트로-구조변경&quot;&gt;웹 프로젝트로 구조변경&lt;/h4&gt;

&lt;p&gt;웹프로젝트로 구조를 변경하기 위해선 &lt;strong&gt;Project facets&lt;/strong&gt;를 통한 환경구성이 필요합니다.&lt;/p&gt;

&lt;p&gt;facet은 보석의 깎인 면, 측면등의 뜻으로 이클립스에서 사용할 언어나 환경구성을 보고싶은 형태로 만드는 것을 뜻하는 것으로 유추됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;A facet of something is a single part or aspect of it.&lt;/em&gt;
&lt;em&gt;1.~ (of sth) 측면, 양상&lt;/em&gt;
&lt;em&gt;Now let’s look at another facet of the problem.예문 발음듣기&lt;/em&gt;
&lt;em&gt;이제 그 문제의 또 다른 측면을 살펴보죠.&lt;/em&gt;
&lt;em&gt;2.(보석의 깎인) 면&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로젝트 폴더 &lt;code class=&quot;highlighter-rouge&quot;&gt;오른쪽 클릭-&amp;gt; Properties-&amp;gt; project facets&lt;/code&gt;을 선택합니다. 그리고 이번 글에서는 Tomcat 기반의 웹프로젝트를 진행하기로 합니다. 따라서 중간 오른편의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Runtimes -&amp;gt; 설치된 톰캣선택&lt;/code&gt;을 합니다.&lt;/p&gt;

&lt;p&gt;그리고, Dynamic WebModule, Java, JavaScript를 선택합니다. 그랬더니 WebContents 폴더와 하위로 META-INF, WEB-INF가 생겼습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-44-31.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-44-31.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-51-38.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_15-51-38.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;웹-프로젝트-프로그래밍-servlet&quot;&gt;웹 프로젝트 프로그래밍 (Servlet)&lt;/h4&gt;

&lt;p&gt;설치했던 Tomcat은 Java Servlet, JSP 등 JavaEE 설계에 대한 구현체입니다. 본 글에서는 자세하게 설명하기 어렵습니다. 지금은 웹프로그래밍을 위해 필요한 도구라고 생각하고 사용해보도록 하겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;The Apache Tomcat® software is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies. *&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선 기존에 작성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.java&lt;/code&gt; 클래스를 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet&lt;/code&gt; 클래스를 상속받아서 웹의 기능으로 확장(extends)하도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doublem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.PrintWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;cm&quot;&gt;/**
     * Example Hello World by Servlet
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Do required initialization&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           
          &lt;span class=&quot;c1&quot;&gt;// Set response content type&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
          &lt;span class=&quot;c1&quot;&gt;// Actual logic goes here.&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;h1&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/h1&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// do nothing.&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 서블릿 배포(Servlet Deployment)를 위해서 web.xml을 생성해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee 
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     
&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;doublem.HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
     
     
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성한 web.xml 파일은  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Tomcat-installation-directory&amp;gt;/webapps/프로젝트명/WEB-INF/&amp;gt;&lt;/code&gt; 에 위치시켜줍니다.&lt;/p&gt;

&lt;p&gt;또 상위 HelloWorld 소스파일의 컴파일된 .class 파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Tomcat-installationdirectory&amp;gt;/webapps/프로젝트명/WEB-INF/classe/&amp;gt;&lt;/code&gt; 에 위치시켜야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(이 규칙들은 Servlet 2.4 specification에 보면 설명 되어 있고, Tomcat 구현 소스를 살펴보면 아래와 같이 구성이 되어 있습니다.)&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;web.xml 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ContextConfig.java&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;getContextWebXmlSource()&lt;/code&gt;메서드 에서 constants.java의 String ApplicationWebXml = “/WEB-INF/web.xml” 사용을 통해 web.xml 읽는 것으로 구현&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;*“/WEB-INF/lib/”; “META-INF/services/” 경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebappServiceLoader&lt;/code&gt;에서 설정 *&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;catalina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/**
 * String constants for the startup package.
 *
 * @author Craig R. McClanahan
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Constants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.apache.catalina.startup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContextXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;META-INF/context.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationWebXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/web.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultContextXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conf/context.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultWebXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conf/web.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostContextXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;context.xml.default&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostWebXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;web.xml.default&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WarTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/META-INF/war-tracker&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;cm&quot;&gt;/**
     * A dummy value used to suppress loading the default web.xml file.
     *
     * &amp;lt;p&amp;gt;
     * It is useful when embedding Tomcat, when the default configuration is
     * done programmatically, e.g. by calling
     * &amp;lt;code&amp;gt;Tomcat.initWebappDefaults(context)&amp;lt;/code&amp;gt;.
     *
     * @see Tomcat
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoDefaultWebXml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;org/apache/catalina/startup/NO_DEFAULT_XML&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java
public class WebappServiceLoader&amp;lt;T&amp;gt; {
private static final String LIB = &quot;/WEB-INF/lib/&quot;;
private static final String SERVICES = &quot;META-INF/services/&quot;;
 
private final Context context;
private final ServletContext servletContext;
private final Pattern containerSciFilterPattern;
 
/**
 * Construct a loader to load services from a ServletContext.
 *
 * @param context the context to use
 */
public WebappServiceLoader(Context context) {
    this.context = context;
    this.servletContext = context.getServletContext();
  ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 명세와 구성과는 다르게, 이클립스 프로젝트에는 프로젝트 명과 하단에 WebContent가 있고 그 하단에 META-INF와 WEB-INF가 있었습니다.  WebContent는 어떻게 해야할까요?&lt;/p&gt;

&lt;p&gt;배포 경로를 확인해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로젝트 우클릭 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Properties→ Deployment Assembly&lt;/code&gt;로 이동하게 되면 출처와 배포 경로를 알 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;class 파일의 경우는 /src  →  WEB-INF/classes로 알맞게 되어있습니다.
/WebContent는 → /(루트로) 되어있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_16-11-52.png&quot; data-lightbox=&quot;경로확인&quot; data-title=&quot;경로확인&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_16-11-52.png&quot; title=&quot;경로확인&quot; width=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;작성된 코드를 톰캣을 통해서 실행해봅시다.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;프로젝트 우클릭 -&amp;gt; Run as  -&amp;gt; Run on Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_17-14-59.png&quot; data-lightbox=&quot;경로확인&quot; data-title=&quot;경로확인&quot;&gt;
  &lt;img src=&quot;//doublems.github.io/assets/postphoto/web-jorney/image2017-11-4_17-14-59.png&quot; title=&quot;경로확인&quot; width=&quot;40%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여기서 주의 할 점은 이클립스에서 실행한 웹프로젝트는 설치된 톰캣 디렉토리에서 실행 되지 않습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;‘이클립스상에서 톰켓이 구동되면 워크스페이스로 잡은 폴더 내부 .metadate 폴더안에&lt;/em&gt;
&lt;em&gt;war파일로 만들어서 압축을 풀었을때 같은 형태로 배포가 됩니다.’&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;참고  : &lt;a href=&quot;https://okky.kr/article/286482&quot;&gt;https://okky.kr/article/286482&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\eclipse-workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\&lt;/code&gt; 에서 실행이 됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자세한 정보는 Servers 의 server.xml에서 마지막줄을 확인하면 자세히 알 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Context&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;docBase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProjectStructure_test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/ProjectStructure_test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reloadable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.eclipse.jst.jee.server:ProjectStructure_test&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/Host&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;따라서-추후-웹-프로젝트-수행시는-war를-생성후-톰캣폴더에-직접-올려줘야-합니다이를-배포라고-합니다&quot;&gt;따라서, 추후 웹 프로젝트 수행시는 War를 생성후 톰캣폴더에 직접 올려줘야 합니다.이를 배포라고 합니다.&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;h4 id=&quot;war-배포&quot;&gt;War 배포&lt;/h4&gt;

  &lt;p&gt;이클립스에서 File → export → war 선택 후 war 파일로 압축파일을 만든다. 만든 파일을 톰캣 내의 web-app 파일에 넣고 톰캣\bin 내의 startup을 통해 서버를 가동(켜있다면 재가동) 하면 war 파일의 압축이 해제되며 실행된다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="Eclipse" /><category term="Java" /><category term="Web" /><summary type="html">많은 분들이 처음 Java를 학습 할 때, 이클립스 IDE를 설치하고 예시를 따라서 기본프로젝트로 src 하단에 Helloworld.java 를 작성한 경험이 있을것으로 생각합니다. 기본프로젝트 이후로, Servlet, Spring 등 웹 프로젝트를 학습하면서 조금 더 복잡한 프로젝트 구조를 만나게 됩니다.</summary></entry><entry><title type="html">데이터 구조 선택도</title><link href="https://doublem.org/dataStructureChoice/" rel="alternate" type="text/html" title="데이터 구조 선택도" /><published>2017-10-29T00:20:59+00:00</published><updated>2017-10-29T00:20:59+00:00</updated><id>https://doublem.org/dataStructureChoice</id><content type="html" xml:base="https://doublem.org/dataStructureChoice/">&lt;p&gt;프로그래밍에 처음 입문한 사람에게 어려운 일은 많습니다. Collection, Data Structure라고 불리는 하나 이상의 데이터를 담기 위한 객체를 선정하는 일도 어렵습니다.
작은 보탬이 되고자 해외 사이트에서 작성된 선택 순서도의 한국어 버전을 작성하였습니다.&lt;/p&gt;

&lt;p&gt;(학습을 위해 작성한 게시글입니다. 오류가 있을 수 있습니다. 피드백을 환영합니다.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//doublem.org/assets/postphoto/20171029/자료구조 선택알고리즘.png&quot; data-lightbox=&quot;기본 프로젝트 시작&quot; data-title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot;&gt;
  &lt;img src=&quot;//doublem.org/assets/postphoto/20171029/자료구조 선택알고리즘.png&quot; title=&quot;기본 프로젝트 시작&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Jerry Ahn(안재열)</name></author><category term="Java" /><summary type="html">프로그래밍에 처음 입문한 사람에게 어려운 일은 많습니다. Collection, Data Structure라고 불리는 하나 이상의 데이터를 담기 위한 객체를 선정하는 일도 어렵습니다. 작은 보탬이 되고자 해외 사이트에서 작성된 선택 순서도의 한국어 버전을 작성하였습니다.</summary></entry></feed>