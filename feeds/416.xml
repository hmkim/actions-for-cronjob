<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>아이단은 어디갔을까</title>
    <link>https://aidanbae.github.io/</link>
    <description>Recent content on 아이단은 어디갔을까</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 07 May 2019 09:31:27 +0900</lastBuildDate>
    
        <atom:link href="https://aidanbae.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>리눅스 이해하기 - IO redirection</title>
      <link>https://aidanbae.github.io/video/linux/io-redirection/</link>
      <pubDate>Tue, 07 May 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/linux/io-redirection/</guid>
      <description>Linux에서 로그파일을 다루거나 민감한 정보를 다루다보면 IO Redirection을 사용할 일이 종종 생긴다. 이번 기회에 개념을 확실히 정리하자.
학습목표 이 명령어의 의미를 해석할 수 있으면 된다.
$ head -n1 &amp;lt; linux.txt &amp;gt; one.txt  추가 - input에 대한 이야기   
종합 핵심 정리 &amp;gt;&amp;gt; 꺽쇄 두개는 추가가 된다. 덮어쓰기가 아니라 뒤에 추가하는것
&amp;lt;&amp;lt; 꺽쇄 두개는 input에 대한 제한 명령어.
// mail이라는 프로그램에게 인자를 보내는데 // eot라는 input이 나올때까지 standard input을 받음 $ mail egoing@gmail.</description>
    </item>
    
    <item>
      <title>리눅스 이해하기 - Permission</title>
      <link>https://aidanbae.github.io/video/linux/permission/</link>
      <pubDate>Mon, 06 May 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/linux/permission/</guid>
      <description>생활코딩 강의의 전달력은 최고수준
학습목표 리눅스 시스템 운영을 하다보면 permission은 굉장히 중요하면서 골치아픈녀석이다.
이 중요한 부분을 같이 정확히 공부해 리눅스 기본, 기초를 탄탄히 하고 넘어가자
핵심정리 $ ls -al  파일 정보를 조회하다보면 자주 보았던 테이블이다. 이제 부분별로 정확한 의미를 알고가자. 제일 앞부분 - 은 type을 나타낸다. directory라면 d가 적혀져있을 것이다. 그 뒤에 9개의 공간은 access mode를 나타낸다. 이 access mode는 또 3부분으로 쪼개지는데 아래와 같다.
 owner : 소유자 group : 그룹에 속한 자 other : 그 외 모든 녀석들  r: read 권한(파일을 읽을 수 있는 권한)</description>
    </item>
    
    <item>
      <title>사다리게임, 공평한줄 알고있었지만</title>
      <link>https://aidanbae.github.io/article/sadari/</link>
      <pubDate>Fri, 03 May 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/sadari/</guid>
      <description>http://docs.likejazz.com/ghost-leg-probabilities/
카카오 자연어 처리 엔지니어 박상길님의 기술 블로그에 있는 글이다. 책 리뷰도 자주 올려주고 계속 도전하는 여러모로 멋진 철학을 가진 개발자분이다. 내 블로그 구성에 책리뷰를 넣은데에도 롤모델 역할이 된 블로그이다.
요약: 사다리게임은 불공평하다.</description>
    </item>
    
    <item>
      <title>쿠버네티스 느낌가져가기 1 - minikube</title>
      <link>https://aidanbae.github.io/code/devops/k8s/start/</link>
      <pubDate>Wed, 01 May 2019 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/k8s/start/</guid>
      <description>쿠버네티스 개발환경을 구성하는 동기 퇴사 직전에 최대 관심사는 kubernetes였다. 카카오가 더이상 자회사에게 DKOS(메소스 마라톤) 서비스를 제공하지 않음에 따라 DKOS에 있는 개발환경을 어디론가 옮겨야하는 이슈에 직면했다. 인프라팀장님한테 물리서버 혹은 VM을 받아서 개발환경을 구축할 수 있다는 소식에 설레는 마음으로 쿠버네티스 책을 구매하고 이것저것 공부했지만 이것저것 딜레이가 되면서 퇴사때까지 해보지못한게 작은 한이 되었다. 메소스마라톤 환경을 직접 구성해보지 않았기 때문에 적당히 문제 없을 수준으로 공부하고 사용했었다. 그래서 부사수가 왔음에도 정확한 설명을 하지 못해 스스로에 대해 부족함과 아쉬움을 느꼈다.</description>
    </item>
    
    <item>
      <title>Docker Container 내부 소켓 상태 확인 - nsenter와 netstat</title>
      <link>https://aidanbae.github.io/code/docker/docker-netstat/</link>
      <pubDate>Tue, 30 Apr 2019 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-netstat/</guid>
      <description>도커로 서비스 개발을 하다보면 상태 확인을 위해 호스트 머신이 아닌 컨테이너에 접근해야하는 경우가 생긴다. 호스트 머신 한 대에 여러 docker 서비스가 떠있을 수 있기 때문이다. (내가 이용 중인 AWS(ECS)도 내가 띄운 서비스 이외에 로그수집기, executor등의 또다른 docker 컨테이너가 떠있다.) 그러므로 호스트 머신에서 netstat 명령어는 모든 도커 서비스의 소켓정보들을 보여주기때문에 특정 서비스에 대한 스코프기능이 지원되지 않는다.
도커를 조금 이용해본 개발자라면 쉽게 docker exec 명령어로 해당 컨테이너에 접근해 내부에서 소켓상태를 살펴보려할 것이다.</description>
    </item>
    
    <item>
      <title>CPU 캐시 이해하기</title>
      <link>https://aidanbae.github.io/code/devops/computer/cpucache/</link>
      <pubDate>Mon, 22 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/computer/cpucache/</guid>
      <description>CPU 캐시란? 컴퓨터 시스템의 성능을 향상 시키기 위해 주로 CPU칩 안에 포함되는 빠르고 작은 매우 비싼 메모리입니다. 프로그램에서 직접적으로 읽거나 쓸 수 없고 하드웨어의 메모리 관리 시스템이 내부적으로 제어합니다. 대부분의 프로그램은 한번 사용할 데이터를 다시 사용할 가능성이 높고, 그 주변의 데이터도 곧 사용할 가능성이 높은 데이터 지역성을 가지고 있다. 데이터 지역성을 활용하여 메인 메모리에 있는 데이터를 캐시 메모리에 불러와 두고, cpu가 필요한 데이터를 캐시에서 먼저 찾도록 하면 향상시킬수 있다.</description>
    </item>
    
    <item>
      <title>DevOps와 SE를 위한 리눅스 커널 이야기</title>
      <link>https://aidanbae.github.io/article/book/linux/</link>
      <pubDate>Sat, 20 Apr 2019 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/linux/</guid>
      <description>게임 업계에서는 과거에 윈도우 서버가 90퍼를 차지했지만 최근에는 오픈소스인 리눅스 진영의 발전이 눈부시다. 특히 Docker서비스가 리눅스 기반으로 제작되면서 리눅스 커널에 대한 이해는 서버 운영자에게 필수 지식이 되었다.
이 책은 카카오 클라우드팀에서 시스템 엔지니어로 근무중인 강진우님이 지으셨다. 브런치 블로그를 운영중인데 실제 실무에서의 경험을 통해 좋은 글을 계속 게시해주고 계신다.
https://brunch.co.kr/@alden#articles
아쉽게도 docker에 대한 이야기가 없어 docker로 서비스를 한다면 시스템 모니터링에 대한 부분이 좀 달라질 수 있지만 docker역시 pid를 리눅스로부터 부여받고 자원할당을 받기 때문에 호스트머신의 /proc 디렉토리에 접근해 다양한 정보를 확인하는 것은 상황에 따라 훌륭한 이슈트래킹 접근법이 될 수 있다.</description>
    </item>
    
    <item>
      <title>tcmalloc</title>
      <link>https://aidanbae.github.io/code/devops/computer/tcmalloc/</link>
      <pubDate>Tue, 16 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/computer/tcmalloc/</guid>
      <description>go tune memory 발표자료를 보면서 구경한 파생 지식 tcmalloc
구글 공식 문서 http://goog-perftools.sourceforge.net/doc/tcmalloc.html
구글에서 만든 TCMalloc
보통 멀티 스레드 환경의 서버를 만들다보면 메모리 풀을 사용하게 된다.
메모리 풀의 이점:
 빠른메모리할당 메모리 단편화 감소  하나의 거대한 메모리 풀을 사용하면 단순하게 malloc을 호출해서 메모리를 할당하는 것 보다 속도가 빠르다. 메모리 풀에 따라 다르겠지만 일반적으로 볼ㄸ ㅐ 처음 프로그래밍이 실행될 때 필요한 메모리를 통째로 잡아놓고 메모리가 필요한 경우에는 잡아놓은메모리 안에서 잘라서 주기 때문입니다.</description>
    </item>
    
    <item>
      <title>[dotGo 2019] golang gc 튜닝</title>
      <link>https://aidanbae.github.io/video/gogc/</link>
      <pubDate>Mon, 15 Apr 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/gogc/</guid>
      <description>페이스북을 기술정보를 얻는 용도로 사용하는데 평소 추종하던 홍혜종님이 공유해준 발표자료이다.
go tune your memory라는 이름으로 dotgo 2019에서 진행된 발표 (Go 1.12 기준으로 설명)
gc언어를 사용한다면, garbage collector가 호출되는 것에 대해 알 필요가있다. 왜냐하면 gc가 호출되는 순간, 해당 프로그램은 잠깐동안의 lack상태가 되기 때문이다. 찰나의 순간이지만 게임처럼 퍼포먼스가 중요한 클라이언트, 서버는 gc호출을 튜닝해야한다. 개발자는 그러므로 gc의 잦은 호출을 막을 수 있도록 크게 두가지 행위를 할 수 있다.
첫번째는 garbage 자체가 생기지 않도록 하는 것.</description>
    </item>
    
    <item>
      <title>구글 코드잼 2019 QR 도전!</title>
      <link>https://aidanbae.github.io/code/golang/googlecodejam2019/</link>
      <pubDate>Tue, 09 Apr 2019 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/googlecodejam2019/</guid>
      <description>20대의 마지막으로 기본기를 탄탄히하자는 생각으로 알고리즘 공부를 진행해 왔다. 목표가 있으면 동기부여에 좋기때문에 구글코드잼을 도전해보았다.
올해 4월 7일에 진행된 Qualification Round는 다음 라운드로 통과할 수 있는 자격을 주는 테스트이다. 문제는 어렵지 않다. bfs, dfs, dp 등 문제만 읽어도 케이스가 좀 나뉘는 한국의 정형화된 코딩테스트에 비해 창의력이 필요한 문제가 좀더 많았다. 문제 하나당 3개의 테스트 케이스가 존재한다. normal case는 보통 자료의 크기가 적어 정확성 테스트가 진행돠며 통과할경우 6point를 얻게된다. hard case는 좀더 데이터 input의 크기가 크며 효율성을 증명하는 테스트이다 통과할경우 10point를 얻게된다.</description>
    </item>
    
    <item>
      <title>살며 사랑하며 배우며</title>
      <link>https://aidanbae.github.io/article/book/lovelivelearn/</link>
      <pubDate>Fri, 15 Mar 2019 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/lovelivelearn/</guid>
      <description>교보문고에서 교육에 대한 책들을 보다가 제목이 마음에 들어 구매하게되었다. 많은 사람들이 인생이 덫없다고 하지만 살아가며 love, learn은 끝없이 반복되는 중요한 가치이다.
저자인 레오 버스카글리아는 교육학자로서 미국에서 &amp;lsquo;닥터 러브&amp;rsquo;로 불리우며 캘리포니아 대학교에서 &amp;lsquo;사랑학&amp;rsquo;을 가르쳤다. 그녀가 &amp;lsquo;사랑학&amp;rsquo;에서 중요 메세지는 책의 제목과 같다. &amp;lsquo;living, loving, learning&amp;rsquo;
내가 크게 공감했던 3가지를 뽑았다.
독창성을 죽이는 학교  동물들이 학교를 만드는 이야기 토끼, 새., 물고기, 다람쥐, 오리 등 수많은 동물들이 모여 학교를 만들기로 했습니다. 그런데 토끼는 달리기를 수업에 넣어야한다고 했고, 새는 날기를 수업에 넣어야한다고 했습니다.</description>
    </item>
    
    <item>
      <title>[영화리뷰] 그린북</title>
      <link>https://aidanbae.github.io/article/movie/greenbook/</link>
      <pubDate>Wed, 23 Jan 2019 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/movie/greenbook/</guid>
      <description>별 5개
서로 다른 상대를 이해해나가는 과정을 정말 잘 그렸다.
불편한 역사를 유쾌하게 풀어 결국 가슴이 따뜻해지는 영화
지루할 틈이 없었다. 연출과 각본에 감탄감탄
토니 발레롱가, 돈 셜리 박사
흑인 연주자인 돈 셜리 박사는 사회적 약자이면서 계급적으로는 상류층이다.
무대에서는 환영받지만 무대 뒤에서는 차별받는 흑인이다.
교양과 품위를 중요시하게 생각하는 돈셜리 박사는 흑인들과도 어울리지 못하며 또 환영받지 못한다.
그렇게 자신만의 세상에서 고독하게 모순적인 삶을 이어나간다.
&amp;ldquo;백인답지도 않고, 흑인답지도 않고, 충분히 남자답지도 않다면 그럼 난 뭐죠?</description>
    </item>
    
    <item>
      <title>Golang Fan-Out Fan-In 디자인</title>
      <link>https://aidanbae.github.io/code/golang-design/fan/</link>
      <pubDate>Wed, 16 Jan 2019 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/fan/</guid>
      <description>회사일을 바쁘다보니 이것저것 신경쓸게 많아 정리해야지정리해야지 하고 너무 늦게 글을 쓰는 감이 없지 않네요. 이어서 해보도록 하겠습니다. 이전 시간에 Pipeline 패턴을 알아봤는데 이를 좀더 활용해 Fan out Fan in 패턴을 알아보고자합니다.
golang 멀티플렉싱 디자인패턴 중 하나인 Fan out Fan In은 큰 건물의 회전문을 생각하면서 이해하면 편합니다.
prerequisites  chan에 대한 이해를 토대로 pipe함수를 작성할 수 있다. Pipeline 디자인패턴을 숙지했다.  Basic Fan의 사전적 의미는 선풍기, 환풍기, 회전문 같은 것입니다. 회전문처럼 생각했습니다.</description>
    </item>
    
    <item>
      <title>함께 자라기 - 애자일로 가는 길</title>
      <link>https://aidanbae.github.io/article/book/grow/</link>
      <pubDate>Sun, 13 Jan 2019 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/grow/</guid>
      <description>입사 후 처음으로 책을 선물받았다.
선물을 준 동료(cody)는 퇴근길에 종종 나를 태워줬기때문에 개발 또는 인생에 대해 의견을 나눌 일이 많았는데 생각이 많이 달랐지만 서로 경청하고 자신의 의견을 확실히 이야기해주기에 즐거운 대화가 많았다. 어린왕자에 대해 이야기할 때 나에게 책선물을 주시겠다며 이 책을 소개해주었다.
개발조직을 이끄는 리더라면 꼭 보았으면 한다.
좋은 영감을 준다.
책의 주요 주제별로 내생각을 정리해보았다.
중요하다고 생각하는 것이 중요하지 않다. 대다수의 조직에서 직원을 뽑는 데 중요하다고 생각하는 요소가 많은 경우 별로 중요하지 않고, 중요하지 않다고 생각하는 요소가 중요한 경우가 많음.</description>
    </item>
    
    <item>
      <title>어린왕자의 눈</title>
      <link>https://aidanbae.github.io/article/book/little-prince/</link>
      <pubDate>Wed, 09 Jan 2019 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/little-prince/</guid>
      <description>&amp;lsquo;이 시대에 우리는 어떻게 살아야하는가&amp;rsquo;는 내게 꽤나 중요한 주제였다. 대학생 때 추종했던 니체의 철학부터 최근에 접했던 유시민의 &amp;lsquo;어떻게 살것인가&amp;rsquo;까지 모두 내 남은 인생을 어떻게 살것인가에 대한 고민으로 시작된 길이었다. 그 답을 얻지못한채 시간을 보냈고 미숙한 선택들로 길을 잃었을 때 혼자 세상 심각해지기도했고 그렇게 만든 어두움으로 주변 사람들에게 피해를 주기도했다.
다음 글귀는 &amp;ldquo;프로그래밍 대회에서 배우는 알고리즘 문제해결전략&amp;rdquo;책 6장의 서론이다.
 &amp;ldquo; 프로그래밍 대회에서 대부분의 사람들이 가장 많이 하는 실수는 쉬운 문제를 어렵게 푸는 것입니다.</description>
    </item>
    
    <item>
      <title>글쓰기를 잘할 수 있는 3가지 비법 - 고영성</title>
      <link>https://aidanbae.github.io/video/writer/</link>
      <pubDate>Tue, 25 Dec 2018 16:23:40 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/video/writer/</guid>
      <description>요약  두려워하지 말라.  재능없음을 두려워하지말라. 글쓰기는 충분히 노력으로 넘을 수 있는 산이다. 맞춤법을 두려워하지말라. 좋은 글은 컨텐츠 자체가 좋은 것. 수준낮은 글을 쓸까봐 두려워하지말라. 아이가 걸음마를 배울려면 수백번의 엉덩방아를 찧는다.  날로 먹을 생각 하지말라  독서를 해야한다  3S 전략  Short: 의도적으로 글을 짧게 써라. Story: 이야기로 써라. 뇌가 가장 좋아하는 것. 자신의 이야기는 진정성으로 이어진다.  remarkable한 이야기  Seat: 엉덩이로 써라. 작가도 글쓰기 힘들어해.</description>
    </item>
    
    <item>
      <title>올해 내 10대 뉴스 뽑아보기</title>
      <link>https://aidanbae.github.io/article/news2018/</link>
      <pubDate>Sat, 22 Dec 2018 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/news2018/</guid>
      <description>어디서 주어들어서 2018년 한해 동안 나의 10대 뉴스를 뽑아봤다.
정리해보니 내 한계를 느끼거나 부족함에 아쉬워한 뉴스가 3개
소기의 목표 달성과 같은 밝은 뉴스가 7개
아쉬운 뉴스들도 지나고보니 다 가르침이 컸다. 올 한해는 운이 좋았다.
내년에는 좀더 의식적으로 노력해야겠다.
내년엔 굵직한 목표 3개정도를 생각해두었는데 기대된다.
다짐!</description>
    </item>
    
    <item>
      <title>당신의 풀은 푸르다</title>
      <link>https://aidanbae.github.io/article/pool/</link>
      <pubDate>Sat, 22 Dec 2018 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/pool/</guid>
      <description>더 푸른 풀 건너편 풀이 더 푸른 이유가
그 곳에 늘 비가 오기 때문이라면
언제나 나눠 주는 사람이
사실은 가진 것이 거의 없는 사람이라면,
가장 환한 미소를 짓는 사람이
눈물 젖은 베개를 가지고 있고
당신을 아는 가장 용감한 사람이
사실은 두려움으로 마비된 사람이라면,
세상은 외로운 사람들로 가득하지만
함께 있어서 보이지 않는 것이라면,
자신은 진정한 안식처가 없으면서도
당신을 편안하게 해 주는 것이라면,
어쩌면 그들의 풀이 더 푸르러 보이는 것은
그들이 그 색으로 칠했기 때문이라면.</description>
    </item>
    
    <item>
      <title>시로 납치하다</title>
      <link>https://aidanbae.github.io/article/book/siro/</link>
      <pubDate>Sat, 22 Dec 2018 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/siro/</guid>
      <description>나의 최애 작가 중 하나인 류시화 시인이 올해 초에 내놓았던 시모음집이다. 제목만 보고 어떤 시로 독자들의 마음을 납치할지 궁금했기에 샀다. 이 책은 류시화 시인의 시가 아니라 노벨 문학상 수상 시부터 프랑스의 무명시인, 아일랜드의 음유 시인, 일본의 동시, 노래 가사 등 다양한 작품이 수록되어 있고 작품 하나하나가 인생의 본질을 꽤뚫어보는 좋은 생각을 담고 있다.
올해 6월쯤에 서점에서 샀는데 조금씩 마음에 여유가 부족할 때 읽어서 이제야 수록된 모든 시를 다 읽고 생각을 정리할 수 있었다.</description>
    </item>
    
    <item>
      <title>Go Modules 시작하기</title>
      <link>https://aidanbae.github.io/code/golang/modules/</link>
      <pubDate>Thu, 20 Dec 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/modules/</guid>
      <description>Go modules 시작하기 golang version 1.11버전부터 획기적인 변화가 생겼습니다. 버전관리 프로젝트(vgo)를 Russ Cox의 메인오더로 go modules가 추가되었습니다.
go modules는 vgo, dep, glide등으로 파생되었던 버전관리의 표준을 이야기하며 gopath의 종말을 외쳤습니다. 즉, 패키지간 종속성 관리를 golang team이 표준화하여 관리하는 정책입니다.
개발환경
 IDE : intellij IDEA version: golang 1.11.4 os : darwin(mac os)  Golang으로된 프로젝트를 동시에 여러개 진행(페이스북 웹훅 클러스터)하면서 불편했던 것 중 하나가 GOPATH설정 바꾸기였다. 내가 사용하던 intellij IDEA는 GOPATH를 기준으로 인덱싱을 했었기때문에 작업 프로젝트가 설정에 추가된 GOPATH가 아니라면 다시 GOPATH를 수정하고 프로젝트를 켜야했다.</description>
    </item>
    
    <item>
      <title>역할</title>
      <link>https://aidanbae.github.io/article/role/</link>
      <pubDate>Mon, 03 Dec 2018 19:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/role/</guid>
      <description>옆팀이 우리팀에 흡수되면서 혼자였던 서버팀이 갑자기 커졌다.
시드와 케빈이 잘 적응하도록 돕는 것,
에반이 서버로서 자신감을 갖도록 돕는 것,
요정도만 생각해야겠다.
내가 리드할 역량이 있을지는&amp;hellip; 모르겠다. 일단 부끄러운 코드부터 정리정리</description>
    </item>
    
    <item>
      <title>&lt;알고리즘 도감&gt; 그림으로 배우자</title>
      <link>https://aidanbae.github.io/gallery/algorithmbook/</link>
      <pubDate>Fri, 30 Nov 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/gallery/algorithmbook/</guid>
      <description>특정 구조를 남에게 설명할때도 내 머리 속에 집어넣을때도 나만의 그림을 그린다. 문제가 복잡하면 복잡할수록 더 심플하게 그림을 그리고 생각하는 편이다. 그래서 특정한 요구사항을 받고 시스템 또는 프로그램의 설계를 시작하기 전에 A4용지를 들고 카페테라스를 자주 간다. 이렇게 내 생각 정리에도 좋지만 남에게 설명할 때에도 이미지는 정말 좋은 도구이다. 우리팀의 아키텍쳐와 데이터흐름이 어떻게 흘러가는지 백본(backbone)에 대해 이야기할 때도 간단한 그림을 그려서 설명하면 팀원들이 빠르고 확실하게 이해하고 공유한 내용을 바탕으로 풍부한 담론을 이어나갈 수 있게된다.</description>
    </item>
    
    <item>
      <title>최고의 서비스</title>
      <link>https://aidanbae.github.io/article/service/</link>
      <pubDate>Thu, 22 Nov 2018 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/service/</guid>
      <description>승무원을 꿈꾸는 친구가 면접준비를 하면서
서비스직이다보니 서비스에 대해 나의 의견을 물어 이야기를 나누었다.
그러던 도중 친구는 자기가 받아본 최고의 서비스에 대해 말해줬다.
지난 주 본인이 굉장히 아픈 날, 택시를 타고 급히 갈 곳이 생겼었다.
카카오택시를 예약하고 택시기사님과 확인전화 한통을 한 뒤
몸도 마음도 힘든 일이 있어 늦게 나가게 되었다고한다.
보통 예약장소 근처에 와서 승객이 안오면 재촉하는 전화가 오기마련
택시기사는 약속장소에 도착한지 10분이 되도록 모습을 보이지 않는 본인에게
재촉 또는 확인전화를 하지 않았다고 한다.</description>
    </item>
    
    <item>
      <title>nGrinder agent가 controller에 못붙는 현상</title>
      <link>https://aidanbae.github.io/code/devops/ngrinder/agentcontroller/</link>
      <pubDate>Mon, 19 Nov 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/ngrinder/agentcontroller/</guid>
      <description>마크다운문서가 테마때문에 잘 적용되지 않아 수정할 예정입니다. 다음번 업데이트에 테마를 고칠예정이니 불편해도 양해부탁드려요
nGrinder agent가 controller에 못붙는 현상 환경 IDC에서 AWS로 옮겨오면서 테스트환경을 구축하기위해 n-grinder EC2 인스턴스 이미지를 떠 놨습니다.
참고
n-grinder는 마스터-슬레이브처럼 controller와 agent로 구성됩니다. controller는 하나의 머리 역할을 하는 곳으로 task와 스크립트 관리, 테스트 결과를 수집해 통계자료로 보여주며 웹 인터페이스를 제공한다. agent는 cotroller의 명령을 받아 수행합니다. agent는 유저가 요청한 task정보에 따라 부하를 발생시켜 프로세스와 쓰레드를 관리하고 대상 시스템의 CPU와 메모리를 모니터링합니다.</description>
    </item>
    
    <item>
      <title>삶의 지혜 시리즈를 쓰</title>
      <link>https://aidanbae.github.io/quote/soso/</link>
      <pubDate>Sat, 17 Nov 2018 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/quote/soso/</guid>
      <description>담백함을 부족함이라 착각했던 날들.</description>
    </item>
    
    <item>
      <title>golang과 자료구조 힙(heap)</title>
      <link>https://aidanbae.github.io/code/golang/heap/</link>
      <pubDate>Sat, 17 Nov 2018 09:31:27 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/heap/</guid>
      <description>마크다운문서가 테마때문에 잘 적용되지 않아 수정할 예정입니다. 다음번 업데이트에 테마를 고칠예정이니 불편해도 양해부탁드려요
자료구조 힙 그래프의 트리 구조중 하나로 &amp;lsquo;우선순위 큐(priority queue)&amp;lsquo;를 구현할 때 사용됩니다. 우선순위 큐는 데이터 구조의 하나로서 데이터를 자유롭게 추가할 수 있습니다. 반면 데이터를 추출할 때는 최솟값부터 순서대로 선택됩니다. 추가는 자유롭게하고 추출할 때는 작은 값부터 꺼내는 것이 우선순위 큐입니다.
특징  힙을 표현하는 트리 구조에서는 각 정점을 &amp;lsquo;노드&amp;rsquo;라고 부릅니다.
 자식 노드의 숫자는 반드시 부모의 숫자보다 커야한다는 규칙이 있습니다.</description>
    </item>
    
    <item>
      <title>우분투 ubuntu</title>
      <link>https://aidanbae.github.io/article/ubuntu/</link>
      <pubDate>Mon, 05 Nov 2018 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/ubuntu/</guid>
      <description>네이버에 우분투를 치면 우분투, 리눅스 서버와 관련된 내용들이 쭈르륵 나온다. 나는 개발자라서 unbuntu는 aws에서 서버를 띄우면서 사용하는 많은 운영체제(OS) 중 하나로 생각이 좁혀진다. 우연하게도 류시화의 책 &amp;lsquo;시로 납치하다&amp;rsquo;를 읽던 중 우분투의 어원을 알게되었다.
아프리카 원주민들의 생활을 연구하던 인류학자가 자신을 졸졸 따라다니는 부족의 아이들에게 한가지 놀이를 제안했다. 그는 사탕을 가득 담은 바구니를 멀리 떨어진 나무에 매달아 놓고, 자신이 출발 신호를 하면 맨 먼저 그곳까지 뛰어간 사람에게 사탕을 전부 주겠다고 약속했다. 그런데 신호를 하자 예상하지 못한 일이 일어났다.</description>
    </item>
    
    <item>
      <title>독서모임 어텀(Autumn)</title>
      <link>https://aidanbae.github.io/article/book/faust/</link>
      <pubDate>Sun, 04 Nov 2018 13:01:14 +0900</pubDate>
      
      <guid>https://aidanbae.github.io/article/book/faust/</guid>
      <description>혼자 쌓는 생각의 탑은 많이 위험하다.
다양한 생각을 마주하기 위해 독서모임을
이전부터 하고싶었는데
운이 좋게도 좋은 독서모임을
지인의 추천으로 들어가게되었다.
독서모임 이름은 Autumn(가을)
(분위기 무엇, 이름부터 마음에 든다)
모임의 형태는 지정책이 아닌 자유책으로 진행되는데
각자 선택한 책을 미리 집에서 읽어온뒤 모임에서 그책을 소개하는 방식이다.
나처럼 읽고싶은 책이 많이 쌓여있는 친구들에게 굉장히 좋고,
한 조당 인원이 4명에서 5명이기때문에 5권 정도의 책을 한번에 읽은 느낌이라 좋다.
또 다양한 분야의 사람들이 모이기 때문에 생각의 다름은 물론이고</description>
    </item>
    
    <item>
      <title>Golang - EmptyStruct 빈구조체</title>
      <link>https://aidanbae.github.io/code/golang/emptystruct/</link>
      <pubDate>Thu, 18 Oct 2018 11:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/emptystruct/</guid>
      <description>done &amp;lt;- struct{}{}  고랭관련 깃을 돌아다니면서 훌륭한 레파지토리(Docker, Gin..)들을 내부를 구경하다보면
위처럼 빈 구조체를 채널에 던지는 경우를 종종 볼 수 있다.
struct{}{}
the empty struct
나는 이게 {}{} 이 리터럴 모양이 뭔가 지저분해보여서
간단한 종료 시그널을 보내는 채널은 대부분 bool, int 채널을 사용했었다.
bool 값보내는 거 보다 값이 적은가?..
나는 구조체라고 생각해서 더 크다고만 생각했는데
찾아보니 놀랍게도 struct{}{}는 사이즈가 0이다(기본기가 부족한 나만 놀란거일수도 있다;)
사이즈를 확인할 수 있는 내장 메소드가 있을까 찾아보니</description>
    </item>
    
    <item>
      <title>Golang Slice 슬라이스 응용</title>
      <link>https://aidanbae.github.io/code/golang/slice/</link>
      <pubDate>Sun, 14 Oct 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/slice/</guid>
      <description>이거보면된다.
https://github.com/golang/go/wiki/SliceTricks</description>
    </item>
    
    <item>
      <title>행복이라</title>
      <link>https://aidanbae.github.io/quote/hangbok/</link>
      <pubDate>Mon, 01 Oct 2018 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/quote/hangbok/</guid>
      <description>&amp;ldquo;고통을 어떻게 바라보는가가 행복을 결정한다.&amp;rdquo;</description>
    </item>
    
    <item>
      <title>부러운 인생</title>
      <link>https://aidanbae.github.io/article/miniproject/</link>
      <pubDate>Sun, 30 Sep 2018 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/miniproject/</guid>
      <description>아두이노 미니프로젝트를 이번 설에 혼자 끝냈다.
이전에는 함께 하는 것에 목말라있었다. 늘 함께 무언가를 하는데에 많이 익숙했다. 프로젝트도 그랬고 동아리활동도 학교 과제도 게임도 스터디도 무조건 함께하는 것에 익숙해있었다. 나 혼자만으로는 모르는게 많아 나약한 부분도 많았고 같이 할때 서로 도움도 받고 농담하며 웃을 수 있는 것에 즐거웠던것같다. 혼자 남아 무언가를 하는데에 익숙하지 않았었고 싫었었다. 함께하고 난뒤에 찾아오는 공허함이 두려웠던거 같기도하다.
요즘은 나 혼자만으로 할 수 있는 것들이 늘어나면서 혼자 있어도 즐거운 일을 간단하게 설계할 수 있어 소소하게 행복하다.</description>
    </item>
    
    <item>
      <title>빅오 표기법(Big O notation)과 자바스크립트</title>
      <link>https://aidanbae.github.io/code/algorithm/bigo/</link>
      <pubDate>Thu, 20 Sep 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/algorithm/bigo/</guid>
      <description>오늘은 컴퓨터과학의 꽃, 알고리즘의 인트로에 늘 나오는 빅오표기법에 대해서 이야기해보고자한다! +_ +
대학생 때, 삼성SCSS 덕분에 컴퓨터과학을 늦게 접하면서 시립대에서 김진석 교수님 알고리즘 수업을 야간에 들었었는데 컴퓨터과학 전공자와 비전공자를 나누는 기준이 알고리즘이며 알고리즘의 효율성을 판별하는 빅오표기법은 매우 중요해요라고 콕 찦어 말하신게 기억에 남는다.
스타트업에 있을 때는 되게하는데 바빠 빅오표기법을 고민한 적이 없었고, 현업에 들어와서 게임프로그래밍을 하며 알고리즘의 효율성, 뎁스를 줄이기 위한 고민을 했을 뿐 정확하게 빅오표기법으로 얼마다하며 팀장님을 설득한 적이 없다.</description>
    </item>
    
    <item>
      <title>Day 1 ◑ - HONNE</title>
      <link>https://aidanbae.github.io/video/day1/</link>
      <pubDate>Tue, 11 Sep 2018 16:23:40 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/video/day1/</guid>
      <description>존경하는 프로그래머의 컬러링으로 듣게된 명곡
고음에서 중저음으로 변해 두명이 부른듯한 이곡은
Warm on a cold night로 유명한 Honne의 노래다.
가사 한줄 한줄이 정말 주옥같다. 혼네의 방한공연 가보고싶다~
You&amp;rsquo;ll always be my day 1 &amp;hellip;
i got lucky finding you
i won big the day that i came across you
Cause when you&amp;rsquo;re with me, i don&amp;rsquo;t feel blue</description>
    </item>
    
    <item>
      <title>Golang 결제검증서버 구현 - Validator 디자인</title>
      <link>https://aidanbae.github.io/code/golang/validator/</link>
      <pubDate>Fri, 07 Sep 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/validator/</guid>
      <description>Intro 결제 와 관련된 정보는 고객 입장에서도 회사 입장에서도 매우 중요한 정보이다.
타사(구글, 페이스북, 샘성)의 결제모듈을 활용한다면 그 절차 사이사이의 검증과 기록은 결제검증서버가 해야할 필수적인 부분- 이번에 페이스북으로 글로벌 게임서버 런칭을 진행하면서 페이스북 결제를 활용해 돈방석에 앉아보기로 팀방향이 결정되었고(제발~)
우리 서버팀은 그 돈방석의 영수증 역할을 할 결제검증서버를 구현하게되었다.
이전에 불확실성을 줄이기위해 방명록을 간단하게 만들어보면서 orm프레임워크, mariadb 등을 확인했었고 그 연장선에서 이번 검증서버 프로젝트는 xorm과 web framework는 gin을 활용하기로 했다.</description>
    </item>
    
    <item>
      <title>DinD(docker in docker)와 DooD(docker out of docker)</title>
      <link>https://aidanbae.github.io/code/docker/dinddood/</link>
      <pubDate>Mon, 03 Sep 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/dinddood/</guid>
      <description>Docker의 Client-Server아키텍쳐 단순히 도커를 이용해 이미지를 만들고 띄우는 개발자라면 docker client와 docker daemon이 분리되어 있는 것을 인지하지 못할 수 있다. 반면 CI(Continuous Integration/ 지속적 통합)툴을 사용하며 agent를 세팅하는 DevOps쪽 개발자라면 docker관련 task를 수행하면서 이 사실을 쉽게 접하게된다.
그림처럼 docker시스템 유닛은 크게 3개로 분리되며, Client, Host(Daemon), Registry가 그것이다. 자세한 내용은 이전 포스트 Docker client와 Docker server를 참고.
대부분의 현대 CI 도구들(travis, circle, gocd, jenkins)등이 agent를 통해 docker관련 Task를 수행을 하기 때문에 docker daemon은 호스트머신에서 동작하면서 컨테이너로 동작하는 agent들이 docker-client역할을 하는 경우가 많다.</description>
    </item>
    
    <item>
      <title>Golang 동시성을 활용한 알고리즘 문제풀이 - 1</title>
      <link>https://aidanbae.github.io/code/golang/googlecodejam2016/</link>
      <pubDate>Mon, 20 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/googlecodejam2016/</guid>
      <description>파이프라인 패턴을 활용해서 알고리즘을 풀어보기로 했다.
알고리즘 문제: Google Code Jam 2016 qualification round A
궁금했던 점
동시성 프로그래밍으로 기존 알고리즘 모범답안보다 얼마나 퍼포먼스를 낼 수 있을까
많은 프로그래밍대회가 싱글쓰레드기반으로 동작해 정답이 순차적으로 나와야한다. 하지만 멀티쓰레드 프로그래밍은 Case #1번이 아니라 Case #5번이 먼저 풀릴 수 있다.
(사실 구글 코드잼의 가장 큰 난적은 문제가 영어라는 점이다)
문제요약 Bleatrix Trotter 이라는 여자분은 불면증에 걸린거 같다.
이 여자분은 잠에 골아떨어지기위해 특별한 전략이 있다.</description>
    </item>
    
    <item>
      <title>Golang Sort 정렬</title>
      <link>https://aidanbae.github.io/code/golang/sort/</link>
      <pubDate>Tue, 14 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/sort/</guid>
      <description>golang에서는 정렬 (sort) 라이브러리를 제공하고 있습니다.
다음은 내장 함수들을 활용한 예제코드입니다:
func main() { str := []string{&amp;quot;c&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;} sort.Strings(str) fmt.Println(&amp;quot;Strings: &amp;quot;, str) ints := []int{70, 2, 4} sort.Ints(ints) fmt.Println(&amp;quot;Ints: &amp;quot;, ints) s := sort.IntsAreSorted(ints) fmt.Println(&amp;quot;Sorted: &amp;quot;, s) }  결과:
Strings: [a b c] Ints: [2 4 70] Sorted: true Process finished with exit code 0  sort.Sort() 정렬을 꼭 이런식으로 하고싶은게 아닐 수 있습니다. 커스터마이징을 할 수 있도록 sort는 Sort라는 메소드를 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Pipeline</title>
      <link>https://aidanbae.github.io/code/golang-design/pipeline/</link>
      <pubDate>Sun, 12 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/pipeline/</guid>
      <description>저번 시간에 채널 중심의 생각전환으로 하나의 작업 파이프를 만드는 방법을 배웠습니다.
이번엔 여러가지 작업 파이프들을 이어서 하나의 작업 파이프라인을 구축해봅시다.
혹시 이전 채널 중심 프로그래밍이라는 포스트를 놓치셨다면 보고오시길 추천드립니다.
Why 작업 파이프라인을 구축해서 고루틴과 채널 활용을 극대화합니다.
 What 어떤 작업 파이프라인을 구성해볼까요?
이해하기 쉬운 설명을 위해 쉬운 작업들 위주로 예제를 구성해보았습니다.
  0에서 99까지 랜덤한 수를 특정 횟수만큼 만들어내는 task 해당 랜덤한 수를 출력하는 task 숫자들을 제곱하는 task 마지막으로 그 제곱된 수들을 모두 더하는 task   총 4개의 작업이 있습니다.</description>
    </item>
    
    <item>
      <title>Golang 채널 중심 프로그래밍</title>
      <link>https://aidanbae.github.io/code/golang/fib/</link>
      <pubDate>Sat, 11 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/fib/</guid>
      <description>&amp;ldquo;사실 모든 학문은 연결되어있다. 사회학도 역사도 프로그래밍도&amp;rdquo;
Intro 사회학에서 산업혁명 하면 떠오르는 키워드는 Division of labour이다. 즉, 한국어로 분업이다. 일을 처리하는데 분업에 따른 전문성 증가, 기계와 같은 파이프라인 등은 우리 사회에 큰 영향을 미쳤다. 이전에 없던 엄청난 생산량(공장 시스템)에 사회는 급성장한다.
빠른 성장만큼 노동문제와 같은 각종 사회문제가 터져나왔고 그런 생산량이 전투력에 악용되어 제2차 세계대전에서는 수많은 인류의 죽음을 우린 목격해야했다.
찰리채플린과 Modern times(산업혁명 블랙코미디 영화)
프로그래밍에서도 cpu가 늘고 분업과 관련된 동시성 프로그래밍들이 발전하면서 lock기법이 발전했고 race condition, deadlock등 다양한 문제들이 속출했다.</description>
    </item>
    
    <item>
      <title>Docker Debug 모드</title>
      <link>https://aidanbae.github.io/code/docker/docker-debug/</link>
      <pubDate>Thu, 09 Aug 2018 12:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-debug/</guid>
      <description>Why Docker의 디버그모드를 활용해서 트러블슈팅을 빠르게 진행할 수 있다.
Docker Debug Mode를 켜보자. 1. 데몬이 사용할 Configuration파일을 편집해야한다.
/etc/docker에 위치한 daemon.json파일 없다면 직접 만들어봅시다.
 /etc/docker/daemon.json on Linux C:\ProgramData\docker\config\daemon.json on Window  2. 아래 컨텐츠를 추가합니다
{ &amp;quot;debug&amp;quot;: true }  ps. 만약 파일이 이미 존재했다면 debug 프로퍼티를 추가하고 true값을 적어줍니다.
3. HUP signal을 데몬에게 보내서 configuration을 다시 reload하도록 합니다.
리눅스에서는 다음 명령어를 사용합니다:
$ sudo kill -SIGHUP $(pidof dockerd)  윈도우에서는 도커를 재시작하세요.</description>
    </item>
    
    <item>
      <title>Docker client와 Docker server</title>
      <link>https://aidanbae.github.io/code/docker/docker-overview/</link>
      <pubDate>Thu, 09 Aug 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/docker/docker-overview/</guid>
      <description>Why GoCD에서 AWS ECR로 이미지 빌드, 푸시 pipeline을 구축하면서
Docker의 구조에 대해서 좀더 자세히 알게된 점을 정리한다.
아키텍쳐를 이해함으로서 도커 통신과 관련된 이슈를 좀더 정확하게 해결할 수 있다.
Docker 공식문서는 자주보았는데 Docker Overview는 그냥 슭 훑고 지나갔었다. 한국어로 치면 개요(?) 정도 이겠다. 그 곳에 있는 핵심내용을 정리해본다.
Basic 로컬에서 Docker를 사용할때 우리는 아주 손쉽게 docker ps, docker images 등의 명령어를 쳤기때문에 Docker 엔진의 작동방식을 잘 모르고 지나가는 경우가 많다. 간단하게 살펴보자.</description>
    </item>
    
    <item>
      <title>벌크업인가 다이어트인가</title>
      <link>https://aidanbae.github.io/article/bulkup/</link>
      <pubDate>Fri, 03 Aug 2018 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/bulkup/</guid>
      <description>혼자 자취하면서
오늘도 빨래하느라 고생했네
오늘도 더운데 청소하느라 고생했네
나에게 주는 선물로
주말에 치킨뜯다보니 살이쪘다&amp;hellip;
위기 의식을 느끼고 헬스장에 갔다.
사내 헬스장 트레이너님이 나보고
벌크업하니까 보기좋네라고 하셨다.
그 이후 벌크업 이라는 단어에 꽂혔다.
고중량 운동으로 루틴도 바꿨다.
그리고 나는 합리화 장인이 되었다.
먹고싶은 메뉴가 눈 앞에 있을 때는 벌크업기간이 되고
줄넘기를 하고 싶을 땐 다이어트기간이 된다.
헬스장을 거의 매일가니까 뭐 이랫든 저랫든 건강엔 +중이다.
살이찌면 근육량이 늘었다 생각하고.
살이 빠지면 기초대사량이 늘어가지고 그렇구나 생각한다.</description>
    </item>
    
    <item>
      <title>Golang과 websocket을 활용한 서버 프로그래밍 (장애 없는 서버 런칭 도전기)</title>
      <link>https://aidanbae.github.io/gallery/golang-meetup/</link>
      <pubDate>Mon, 30 Jul 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/gallery/golang-meetup/</guid>
      <description>Intro 2018, 7월 25일 제1회 golang meetup이 열렸다.
그간 golang korea 커뮤니티에서 눈팅으로 이득을 취한 나&amp;hellip; 장애없이 런칭한 Golang 스낵게임서버를 개발할 때에도 수많은 golang 블로그에서 도움을 받았기때문에 이번 meetup에서 그분들을 만나뵙고 이야기를 나눌 수 있으면 좋겠다 생각해서 참가를 신청했다. 발표자가 없어 존폐위기까지 거론하셔서 발표를 하는 방향으로 결정
작은 토즈방에서 20명정도 모여서 소근소근 토론하는 자리가 될줄 알았는데 160명이나!!
개발인생 첫 발표인데 많은 사람이 와주셔서 감사한 마음으로 준비했다.
GopherCon Talks Golang Korea에서 주최하는 밋업, 세미나 및 컨퍼런스의 발표 자료들을 모아두는 저장소이다.</description>
    </item>
    
    <item>
      <title>논쟁은 필요할까</title>
      <link>https://aidanbae.github.io/article/meeting/</link>
      <pubDate>Sun, 29 Jul 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/meeting/</guid>
      <description>논쟁은 필요하다?
나도 상대방을 설득시키고 관철시키는 것이 한 때 목표였던 적이 있다. 20대 자유를 만끽하고자 할 때 아버지와의 논쟁이 그랬고 내가 들어간 사회학과만큼 상대방의 논리적인 허점을 이용해 토론 점수를 얻어내는 학과도 많지않았다. 이기고 나서 남는 것은 학점이라는 점수, 내 탑을 공고히 쌓아 상대를 관철시키고 얻은 자신감, 아버지에게 내 뜻은 관철시켰지만 우리는 서로 다름을 인정하며 멀어졌다. 사실 논쟁을 이기고 남는 것은 많지 않았다.
일을 하다보면 동료간 또는 부서간 서로 다른 의견 충돌로 자주 논쟁이 난다.</description>
    </item>
    
    <item>
      <title>Hope(feat.vankushuma) - OrO</title>
      <link>https://aidanbae.github.io/audio/hope/</link>
      <pubDate>Sun, 15 Jul 2018 16:12:47 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/audio/hope/</guid>
      <description>Inside 가사는 따로 제공되지 않네요.
PostScript 코딩할 때 랜덤리스트로 듣게되었는데 그땐 왜 그랬는지 악기소리도 잘들린다고 생각해서
주말에 카피해봐야지 하고 찜해뒀다.
0:15초쯤 천천히 백그라운드에서 볼륨업되는 사운드가 있다.
래퍼의 훅 목소리다. 최고의 악기는 목소리라는 말은 definitely agree
로직 덕분에 대충 어디쯤 음이겠구나 하지만 절대음감이 전혀 없는지라 두세번 듣고 찍는데도 잘안된다. 매일 작업하다보면 귀도 트인다는데 꾸준히 하질 않으니 이번생은 글러먹었다. 망할&amp;hellip;
비트가 생각보다 어렵기도 했고
랩퍼목소리를 빼니 내 카피는 너무 허하다.
혹시나해서 녹음해보고 들어봤는데 눈 두번정도 깜빡이고 침착하게 헤드셋을 내려놨다.</description>
    </item>
    
    <item>
      <title>Say Yes - 정준일 (세로라이브)</title>
      <link>https://aidanbae.github.io/video/sayyes/</link>
      <pubDate>Wed, 20 Jun 2018 16:23:40 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/video/sayyes/</guid>
      <description>정준일에게 이런모습이&amp;hellip; 올해 잠깐 스쳐지나간 인연이 추천해줬던 노래
호소력이 짙은 그의 보이스에 심쿵한다&amp;hellip;
내용은 조금 우울하다. 넌 피할 수 있어로 개사해주고싶다.ㅎㅎ
가사 다 말하려해도 다하지 못한 건
할 말이 없어서 그런게 아니야
다 볼 수 있지만 두 눈을 감은 건
용기가 없어서 그런게 아니야
시간이 멈춰도 불행이라는 건
마치 소년의 성장과도 같아서
아무리 주먹을 세게 휘둘러 봐도
네게 다가올 불행을 넌 피할 수 없어.
Yes I know know know know&amp;hellip;</description>
    </item>
    
    <item>
      <title>이별 때문에 힘든 사람들에게</title>
      <link>https://aidanbae.github.io/video/2byul/</link>
      <pubDate>Mon, 11 Jun 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/video/2byul/</guid>
      <description>사랑이라는 가치는 수많은 예술작품들에서 등장하는 중요한 가치이다.
우리가 즐겨듣는 멜론차트의 상단에 탑텐에도 거의 대부분이 사랑이다.
그러나 아이러니하게도 교육시스템상 학창 시절에 배우기 힘든 주제이다.
어쩌면 20대 청춘들은 관계형성에 대해 미숙한 것이 당연하고
상처를 주고 받으며 아픈 사랑을 겪게 된다.
나 역시 사랑에 대해 뒤돌아보면 지우고 싶은 길이 많았고,
아직도 잘 모르지만 가장 나를 성장시킨 가치임이 분명해
잘 모른다는 이유만으로 글을 쓰는 것을 피하고 싶지만은 않았다.
그리고 내가 힘들 때 이런 글을 보았다면 하는 아쉬운 마음도 있고</description>
    </item>
    
    <item>
      <title>블로그에 생각을 옮겨 적는 이유</title>
      <link>https://aidanbae.github.io/article/whyimhere/</link>
      <pubDate>Wed, 23 May 2018 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/whyimhere/</guid>
      <description>후배 중 한 명에게 내가 적은 글이 모여있는 브런치 작가의 서랍을 보여줬는데
나보고 작가님 아니냐며 비행기를 태워줬다.(브런치 작가신청 많이 떨어졌다)
사실 에버노트에 적은 단편적인 내 생각들은 어린 생각들이 많다.
그리고 이 곳에 옮겨온 생각들은 좀 더 많은 시간을 고민한 결과물이다.
하지만 그 생각들이 나의 성숙함을 뜻하지 않는다.
오히려 부족한 내 자신을 다그치는 다짐정도 겠다.
다시 실수하지 않도록 되새기고 그래서 나약한 내 자신을 채찍질 할 수 있다.
블로그에서 기술글은 내 블로그에서 메인이 아니다.</description>
    </item>
    
    <item>
      <title>감정제어</title>
      <link>https://aidanbae.github.io/article/emotion/</link>
      <pubDate>Sun, 20 May 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/emotion/</guid>
      <description>&amp;ldquo;아, 일 더럽게 못하네!!&amp;rdquo; 군생활 때 만났던 한 간부는
자신을 따르는 장병들에게
열같이 화를 냈다.
작은 실수를 할 때면
얼탄다며 꾸지람을 쏟았고
나중에 그 장병이 소심해질 때면
간식을 주며 자신이 화낸 이유를 정당화하는
군인의 자세와 관련된 과외를 했다.
장병들과 함께 근무 설 때
난 넌지시 그들의 마음을 물었고
보급지원관에 대한 불만을 나에게 털어놓곤 했다.
부하 군인들이 전역 전까지는 그의 남성성에 끌려 못 이기듯 따르긴 했으나
대부분은 정을 끊었다.
그는 공허함을 자주 만난다.</description>
    </item>
    
    <item>
      <title>Golang Benchmark Test 사용하기</title>
      <link>https://aidanbae.github.io/code/golang/benchmark/</link>
      <pubDate>Sun, 13 May 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang/benchmark/</guid>
      <description>Intro 코딩을 하다보면 내가 짠 함수의 성능이 좋은지 안좋은지 궁금할때가 많다. Golang에서는 testing 라이브러리를 기본적으로 제공하면서 유닛테스트를 지원하면서도 성능을 측정할 수 있는 벤치마크 테스트도 제공한다. 게임 쪽을 개발하다보면 최적화의 과정이 필요하기 때문에 benchmark test는 유용하게 사용된다.
Why golang benchmark test 사용법을 익혀 자신 스스로와 팀원들을 설득할 수 있다.
Usage 간단하게 두 수를 더하는 함수를 짜고 성능을 측정해보겠다.
package main import ( &amp;quot;testing&amp;quot; ) func Sum(a, b int) int { return a + b } func BenchmarkSum (b *testing.</description>
    </item>
    
    <item>
      <title>Hugo로 github page에 블로그 배포하기</title>
      <link>https://aidanbae.github.io/code/hugo/deploytutorial/</link>
      <pubDate>Mon, 23 Apr 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/hugo/deploytutorial/</guid>
      <description>Why? Hugo 공식사이트를 보다보면 뭔가 친절한듯 하지만 영어다.
테마 설정때문에 에러를 겪으시는 분들이 많아
쉽게 디렉팅해서 여러분들의 시간을 아껴주고싶다.
hugo 설치하기 Install hugo
hugo quickstart QuickStart 이거 따라하시면된다.
여기 Step3를 보면 git clone 대신 git submodule을 사용중이다. 님은 둘중 하나를 선택할 수 있는데 submodule을 쓰는 편이 암에서 해방되는 길이긴하다. 하지만 나처럼 이미 clone을 선택해서 테마를 받았다면 themes 디렉토리를 .gitignore에 추가해야한다.
echo &#39;themes/&#39; &amp;gt;&amp;gt; .gitignore  config.toml파일을 수정하자 config.toml 파일에서 baseURL을 수정하자:</description>
    </item>
    
    <item>
      <title>Gravity(feat.Ripley) - WHO$ x pac odd</title>
      <link>https://aidanbae.github.io/audio/gravity/</link>
      <pubDate>Thu, 05 Apr 2018 16:12:47 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/audio/gravity/</guid>
      <description>Logic으로 작곡을 공부하면서 싸클에서 활동하는 여러 인디작곡가들을 팔로잉했다.
Who$, pac odd 두 분 다 멋진 아티스트다.
마음이 생긴다면 직접 싸클을 찾아가서 다른 음악들도 들어보길 추천한다.
19초 쯤 시작되는 인트로사운드는 정말 신비롭다.
가사 구성도 지루할 틈 없이 참 좋다.
실제 아티스트 자신의 구차했던 바람이 녹여진거같다. (사실 사랑에 구차한건 없다고 생각한다ㅎ)
재킷이미지처럼 보랏빛 밤하늘에 어울리는 노래
&amp;ldquo;나를 지치게 했던 해는 어느새 달로 변해가고&amp;rdquo;
가사 Verse 1)WHO$
나를 지치게 했던 해는
어느새 달로 변해 가고</description>
    </item>
    
    <item>
      <title>Fever(열병) feat.rangpark - ATOMIC</title>
      <link>https://aidanbae.github.io/audio/fever/</link>
      <pubDate>Thu, 22 Mar 2018 16:12:47 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/audio/fever/</guid>
      <description>Logic으로 작곡을 공부하면서 싸클에서 활동하는 여러 인디작곡가들을 팔로잉했다.
Respect하는 인디아티스트 중에서 ATOMIC의 나의 롤모델이다.
깔끔한 훅구성에 귀에 쏙쏙박히는 Feat까지 완벽하다.
딱 이정도만 작곡할 수 있으면 세상을 다가진듯 할텐데ㅠㅠ 부럽고 존경한다.
곡의 인트로와 아웃트로는 드라마 사랑의온도 에서 짤라온 것
가사 텅 비어버린 방을 둘러봐
엄습하는 외로움을 피해 작지만 선명한 기억들을 뒤지며
하루가 갔지 난, 난 네게 어떤 사람일지도 알지만
넌 네게 어떤 의미였는지 아니
지옥 같았던 지난 밤을 아니
밤새 흘렸었던 눈물에 가치</description>
    </item>
    
    <item>
      <title>문제풀이</title>
      <link>https://aidanbae.github.io/article/quiz/</link>
      <pubDate>Sun, 18 Mar 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/quiz/</guid>
      <description>I&amp;rsquo;m not a perfect person,,,
&amp;ldquo;the reason&amp;rdquo;- Hoobastank 가사 인트로
 인간관계 속에서 문제를 맞이 했을 때
많은 사람들이
상대방에 대해 문제라고 생각하고
문제풀이를 접근한다.
이는 그 사람에 대해
부정적인 감정이 앞서게 만들고
이성적인 판단을 흐리게 한다.
마음의 크기는 생각의 크기에 영향을 미친다
그 사람이 문제라고 생각하지 말고
그 사람에게 자신이 고민하는 바를 공유하고
함께 고민해서 어떻게 풀어나갈지를
이야기한다면 좋은 방향으로 풀어볼 수 있다
건강한 대화는 문제 해결의 시발점이다</description>
    </item>
    
    <item>
      <title>young and beautiful - Lana Del Rey (위대한 개츠비)</title>
      <link>https://aidanbae.github.io/video/youngandbeautiful/</link>
      <pubDate>Wed, 14 Mar 2018 16:23:40 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/video/youngandbeautiful/</guid>
      <description>가사내용 사랑하는 연인에게 앞으로도 계속 자신이 늙고 예쁘지 않아도 그 사랑이 계속 될지 걱정하는 내용이다. 어떤 면에서 사 후에도 변치않는 영원한 사랑을 갈구하는듯하다.
&amp;ldquo;Will you still love me? when i&amp;rsquo;m no longer beautiful&amp;rdquo; - outro hook
가사 I&amp;rsquo;ve seen the world, done it all
온 세상을 다 돌았지, 모든 걸 다 끝냈고
Had my cake now
내 케이크도 먹었지
Diamonds, brilliant, and Bel Air now
다이아몬드, 눈부셔, 그리고 이제 Bel Air야</description>
    </item>
    
    <item>
      <title>한숨 - 이하이</title>
      <link>https://aidanbae.github.io/video/hansum/</link>
      <pubDate>Thu, 01 Mar 2018 16:23:40 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/video/hansum/</guid>
      <description>한 숨의 의미를 설명할 힘조차 없던,
철저하게 내가 무너졌던,
하루하루가 무서웠던,
내 스스로가 너무 싫었던,
그 때 힘이 되고 위로받은 노래</description>
    </item>
    
    <item>
      <title>메소스 마라톤(Mesos Marathon) 어플리케이션 사용하기 - 2</title>
      <link>https://aidanbae.github.io/code/devops/mesosmarathon/marathon2/</link>
      <pubDate>Thu, 15 Feb 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/mesosmarathon/marathon2/</guid>
      <description>Marathon Application Deployment 
마라톤 어플리케이션 배포
마라톤에서 어플리케이션 또는 그룹의 정의가 변경 될 때마다 배포가 수행됩니다. 배포는 다음 작업을 수행 할 수 있는 일련의 작업입니다.
 하나 이상의 어플리케이션을 시작 또는 중지 하나 이상의 어플리케이션을 업그레이드 하나 이상의 어플리케이션을 스케일조정  배포에는 시간이 걸리고 즉시 사용할 수 없습니다.
성공적으로 마칠 때까지 마라톤에서 배포가 활성된 것으로 간주.
종속성 종속성이 없는 어플리케이션은 제한없이 순서에 상관없이 배포할 수 있습니다. 하지만 있는 경우에는 필요한 순서로 배치 작업이 수행됩니다.</description>
    </item>
    
    <item>
      <title>메소스 마라톤(Mesos Marathon) 어플리케이션 사용하기 - 1</title>
      <link>https://aidanbae.github.io/code/devops/mesosmarathon/marathon1/</link>
      <pubDate>Sun, 11 Feb 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/devops/mesosmarathon/marathon1/</guid>
      <description>Mesos Marathon - Application Basic 어플리케이션은 마라톤의 필수 기능입니다. 각 어플리케이션은 일반적으로 여러 호스트에서 실행되는 많은 인스턴스가있는 long-running service를 나타냅니다. 어플리케이션 인스턴스를 Task라고 부릅니다. Application Definition은 작업을 유지하고 시작하는데 필요한 모든것을 설명하는 녀석입니다.
주의사항 &amp;gt; Marathon은 어플리케이션 이름에 점(.)을 허용하지만 점으로 표시된 이름은 적절한 서비스 검색 동작을 방해 할 수 있습니다. 서비스 검색 매커니즘을 사용하려는 경우, 응용프로그램 이름에 점을 넣으면 안됩니다.
정식 사이트에서는 Hello Marathon을 띄워보는 인라인쉘 스크립트를 소개하는데요.</description>
    </item>
    
    <item>
      <title>조언의 적정선</title>
      <link>https://aidanbae.github.io/article/advice/</link>
      <pubDate>Tue, 30 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/advice/</guid>
      <description>마음을 다하되
확인하려 하지 말고
최선을 다하되
나를 버리지 말것
내 인생을 담아 말하되
상대방의 인생을 억누르지 말 것
요즘 드는 생각이다.
애쓰지 않아도 저절로 이루어진다.
그녀의 인생도 당신의 인생도
당신은 조언을 하고 답답해 하지않아도 된다.
당신의 조언은 상대방의 행동에 영향을 주었다는것에 만족해라.
상대방은 선택하고 행동한다.
자신이 길을 만들고 걸어간다.
그에 결과가 생기고 직접 느낄 수 있다.
시행착오 역시 좋은 경험이다.
&amp;lsquo;무위이화&amp;rsquo;
인생은 늘 시기가 되면 꽃피우니
너무 억누르지말자</description>
    </item>
    
    <item>
      <title>Javascript Console 활용</title>
      <link>https://aidanbae.github.io/code/javascript/console/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/console/</guid>
      <description>Intro 자바스크립트를 쓰면서 웹어플리케이션을 만들다보면 Debug를 위해 console객체를 자주 사용하게됩니다. 간혹 잘못 사용해서 잘못된 정보를 본다면&amp;hellip; 삽질의 시작이죠
Why Console 객체의 주의해야할 점과 좋은 활용법을 터득해 즐거운 디버깅을 해봅시다.
console.log 자바스크립트 개발자라면 너무 친숙한녀석이죠.
console.log(obj1 [, obj2, ..., objN]); console.log(msg [, subst1, ..., substN]);  보시는 것처럼 객체와 메세지 등 다양한 인자값을 출력하는데 사용합니다.
주의할점은 객체를 로깅할때입니다. 우선 string 변수를 로깅해봅시다.
var sangik = &amp;quot;상익아 뭐하니&amp;quot; console.log(sangik); // 상익아 뭐하니 sangik = &amp;quot;what are you doing?</description>
    </item>
    
    <item>
      <title>Python 연산자 오버로딩을 활용하기</title>
      <link>https://aidanbae.github.io/code/python/pythonspecialmethod/</link>
      <pubDate>Wed, 24 Jan 2018 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/python/pythonspecialmethod/</guid>
      <description>Intro Top of Tower GameServer(이하 tot)를 Python + Django 스택으로 구현하면서
가을과 겨울 사이에 Mason과 같이 공부한 Fluent Python을 프로젝트에 녹여볼려고 했다.
파이썬을 파볼 생각이라면 강력 추천
Mason과 Fluent Python(전문가를 위한 파이썬) 스터디를 진행하면서 Chapter13에서 연산자 오버로딩을 만났다. 사실 우리는 연산자를 숫자연산에만 사용하는 경향이 있다. 연산자는 논리표현 중 하나고 우리는 논리 표현으로서 더 새롭게 정의할 수 있다. 행렬의 곱이 숫자의 곱과 방식이 조금 다르듯, 게임 캐릭터에 써보는게 좋겠다는 이야기가 나왔다.</description>
    </item>
    
    <item>
      <title>진심의 변심</title>
      <link>https://aidanbae.github.io/article/waterbottle/</link>
      <pubDate>Fri, 15 Dec 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/article/waterbottle/</guid>
      <description>스승과 제자가 있었다.
스승은 제자에게 물병을 들어 보라 하였다.
“물병이 무거우냐?”
제자가 웃으며 말했다. “하하 가볍습니다,”
5분 뒤 스승이 물었다.
“지금은 어떤가? 아직도 가벼운가?”
제자는 살짝 찡그리며 대답했다.
“조금 힘들지만 괜찮습니다.”
20분 뒤 스승이 물었다.
“물병이 무겁게 느껴지느냐”
제자는 울상이 되어 대답했다.
“정말 힘듭니다.”
&amp;lt;새는 날아가면서 뒤돌아보지 않는다 - 류시화&amp;gt; 본문 내용 중
이 일화는 나에게 진심과 관련된 영감을 준다.
이 글을 보는 여러분의 인생에서는 다른 의미로 해석될 수 있다.</description>
    </item>
    
    <item>
      <title>Just Jerk BodyRock 2015</title>
      <link>https://aidanbae.github.io/video/justjerk/</link>
      <pubDate>Sat, 02 Dec 2017 16:23:40 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/video/justjerk/</guid>
      <description>대학생때 흑인음악동아리(Tru-hz)를 했었는데, 옆 중앙댄스동아리(Lah)와 콜라보를 할일이 있었다.
비트, 악기에 대한 이해도는 당연히 우리동아리가 더 뛰아나다고 생각했는데 실제로 이야기해보니 음악동아리인 우리보다 더 선율과 가사를 깊게 이해하고 안무를 구성하는 모습을 보았다. 가사쓰기 급급했던 나보다 더 음악을 잘 이해하고 있어 놀랐던 기억이 있다.
정말 좋아하는 댄스팀 just jerk 감정을 음악으로 표현하는 것도 대단하지만
음악을 몸짓으로 풀어 해석하는 것도 어렵고 아름다운 일이다.
이 영상은 BodyRock이라는 힙합그룹댄스 대회에서 훌륭한 퍼포먼스로 이슈가 된 just jerk의 공연무대다.</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Bridge</title>
      <link>https://aidanbae.github.io/code/golang-design/bridge/</link>
      <pubDate>Fri, 03 Nov 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/bridge/</guid>
      <description>브릿지 패턴 Bridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.
두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.
제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데 이해가 더 어렵다고 생각해 좋은 예제를 찾다가
게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바) http://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4
여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다.
위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다. 의존관계는 이 인터페이스들 간에만 존재합니다.</description>
    </item>
    
    <item>
      <title>성숙해지기 프로젝트</title>
      <link>https://aidanbae.github.io/quote/ques/</link>
      <pubDate>Wed, 01 Nov 2017 13:01:14 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/quote/ques/</guid>
      <description>지금까지 살아오면서 지나온 길을 되돌아보면
지우고 싶은 길도 많았다.
좀 더 현명한 선택을 위해서, 또 같은 실수를 되풀이하지 않도록</description>
    </item>
    
    <item>
      <title>Golang Design Pattern - Command</title>
      <link>https://aidanbae.github.io/code/golang-design/command/</link>
      <pubDate>Wed, 01 Nov 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/golang-design/command/</guid>
      <description>그림판이나 Photoshop을 사용해본 경험이 있다면!
Ctrl+z키라는 마법의 주문 으로 우리는 우리가 했던 액션들을 취소해본 경험 유! 요구사항에 대한 캡슐화와
요구사항을 큐에 저장하거나 기록,취소 할수 있다는 장점!
 명령패턴 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴 그땐 왜이렇게 어렵게 느껴졌었는지..
 유저의 요청사항(명령) 캡슐화! 요청사항과 큐를 이용해서 작업내역을 관리!  그냥 가볍게 위 두가지만 생각하면 편하다. 우선 Command Interface를 구현해보자. 스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없다. 실수가 많은 나는 Ctrl+z의 광팬, 도전해보자.</description>
    </item>
    
    <item>
      <title>쉘 스크립트(shell script) - read, echo_back</title>
      <link>https://aidanbae.github.io/code/shell/bash1/</link>
      <pubDate>Mon, 11 Sep 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/shell/bash1/</guid>
      <description>유닉스 리눅스 쉘스크립트 공부 서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는
생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해
진다는 것은 팩트. 레츠 Do
https://opentutorials.org/course/2598/14204
생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움
echo $0 // 결과: -bash  터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다. Bash도 일종의 프로그램입니다. 우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - reduce, findIndex, find</title>
      <link>https://aidanbae.github.io/code/javascript/array2/</link>
      <pubDate>Wed, 12 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array2/</guid>
      <description>저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.
이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.
reduce 이 녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다. 집중해서 내껄로 만들어보죠.
reduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해 하나의 값으로 줄입니다. 누적 계산값이라는 단어가 포인트!
arr.reduce(callback[, initialValue])  우선 파라미터부터 알아볼까요
 첫번째 인자 callback(accumulator, currentValue, currentIndex, array) 두번째 인자 initialValue // optional  콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.</description>
    </item>
    
    <item>
      <title>Javascript Array - forEach, map, filter</title>
      <link>https://aidanbae.github.io/code/javascript/array1/</link>
      <pubDate>Tue, 11 Jul 2017 09:31:27 +0100</pubDate>
      
      <guid>https://aidanbae.github.io/code/javascript/array1/</guid>
      <description>HTML5 게임들을 만들면서 가장 유용하고 자주 사용한 자료구조 배열입니다.
push pop shift unshift등의 기본 함수들을 사용해 손쉽게 데이터를 조작할 수 있습니다.
더 나아가 멋지게 배열들을 다룰 수 있는 중급 내장함수들을 만나보겠습니다.
 기본으로 제공되는 함수를 배움으로서 생산성이 향상됩니다.
자바스크립트는 Array객체를 제공합니다.
배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.
전역객체인 Array를 쉽게 다루기 위한 표준내장함수 들을 공부해봅시다.
 forEach 해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.
array.forEach(callback [, thisArg])  첫번째 인자 callback(item, index, array)</description>
    </item>
    
  </channel>
</rss>