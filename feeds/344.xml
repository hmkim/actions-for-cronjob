<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Do-it-yourselfer</title>
    <description>Dreaming Maker</description>
    <link>https://blog.psangwoo.com/</link>
    <atom:link href="https://blog.psangwoo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Dec 2018 15:37:10 +0000</pubDate>
    <lastBuildDate>Thu, 06 Dec 2018 15:37:10 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>IFTTT를 사용할 수 있는 장비들</title>
        <description>&lt;p&gt;AI 스피커에 반드시 따라나오는 것이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그래서 AI 스피커로 뭘 할 수 있는데?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;많은걸 할 수 있다고 이야기 하지만 정작 눈에 보이는건 잘 없습니다.&lt;/p&gt;

&lt;p&gt;해봐야 날씨 물어보기, 알람 맞추기정도.&lt;/p&gt;

&lt;p&gt;제대로 사용하려면 눈에 보이는 액추에이터, 조명이나 장치등이 있어야 합니다.&lt;/p&gt;

&lt;p&gt;서로 연동이 되는 장치들이라면 간단하게 사용할 수 있지만 아닌 경우도 많습니다.&lt;/p&gt;

&lt;p&gt;그래서 찾다보면 IFTTT(이프트)가 보이는 제품들이 있습니다.&lt;/p&gt;

&lt;p&gt;IFTTT(If this, than that)는&lt;/p&gt;

&lt;p&gt;홈페이지에 들어가 살펴봤습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ifttt.com/services&quot;&gt;https://ifttt.com/services&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;스피커중에선 Alexa, Google Assistant, Clova가 보이고&lt;/p&gt;

&lt;p&gt;눈에 직접 보이는걸로는 필립스의 휴, 브로드링크등이 보입니다.&lt;/p&gt;

&lt;p&gt;서비스 이름으로만 나와있어 이걸 가지고 뭘 할 수 있는지 알 수가 없습니다.&lt;/p&gt;

&lt;p&gt;그래서 해외 쇼핑몰을 돌아다니며 IFTTT를 검색해 보았습니다.&lt;/p&gt;

&lt;p&gt;나온 제품들을 적당히 분류별로 묶어보니 아래와 같이 나왔습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
스마트 플러그(콘센트형, 케이블 직접 연결형)

문열림 센서(서랍등의 소형부터 대문등의 대형까지)

IR, RF 발신기

조명(LED Strip, 소켓 직접연결형, 추가 소켓형)

벽면 스위치(주로 조명)

모션센서(PIR 센서)

스위치 봇(Switch Bot, 스위치를 눌러주는 장치)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;가지고 있는 디바이스도 있고 이야기만 들어본 디바이스도 있습니다.&lt;/p&gt;

&lt;p&gt;내년안에 각 분류별로는 하나이상씩 가지고 테스트 해 보려고 합니다.&lt;/p&gt;

&lt;p&gt;테스트 과정은 전부 블로그에 올라갈 예정이니 기대해 주세요.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/chat/making/2018/12/06/ifttt_device_list.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/chat/making/2018/12/06/ifttt_device_list.html</guid>
        
        
        <category>chat</category>
        
        <category>making</category>
        
      </item>
    
      <item>
        <title>RPI로 KT gigagenie AI 스피커 키트 만들기 - 4편</title>
        <description>&lt;p&gt;RPI로 KT Gigagenie AI 스피커 키트 만들기 - 4편&lt;/p&gt;

&lt;p&gt;저번 시간에는 기본적으로 제공되는 예제들을 구동해 봤습니다.&lt;/p&gt;

&lt;p&gt;이번 시간에는 기본 예제를 이용한 GPIO 출력 응용을 해보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;gpio-출력하기&quot;&gt;GPIO 출력하기&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pip3 install RPi.GPIO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;python으로 GPIO를 제어하기 위해 RPi.GPIO를 설치합니다.&lt;/p&gt;

&lt;h4 id=&quot;gpio_output_testpy&quot;&gt;gpio_output_test.py&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)
GPIO.setup(31, GPIO.OUT)

while True :
    GPIO.output(31, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(31, GPIO.LOW)
    time.sleep(0.5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드를 이용하여 GPIO의 OUTPUT이 작동하는지 확인합니다.&lt;/p&gt;

&lt;p&gt;0.5초 간격으로 버튼의 LED가 깜빡입니다.&lt;/p&gt;

&lt;p&gt;종료는 Ctrl+C를 눌러주면 됩니다.&lt;/p&gt;

&lt;p&gt;예제 2번을 응용하여 LED 제어를 해 보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;예제2번-응용하기&quot;&gt;예제2번 응용하기&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$cd ~/ai-makers-kit/python
$cp ex2_getVoice2Text.py led_with_voice.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;python 예제폴더에서 ex2~ 파일을 led_with_voice.py로 복사합니다.&lt;/p&gt;

&lt;p&gt;이제 led_with_voice.py 파일을 수정해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CLIENT_ID = CLIENT ID값
CLIENT_KEY = CLIENT KEY값
CLIENT_SECRET = CLIENT SECRET값
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;19~21번 줄에 있는 ID, KEY, SECRET 값을 넣어줍니다.&lt;/p&gt;

&lt;p&gt;이 값은 2번째 시간에 받은 &lt;strong&gt;clientKey.json&lt;/strong&gt;파일 안에 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import RPi.GPIO as GPIO
import time
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gpio와 time 관련 라이브러리를 import 해줍니다.&lt;/p&gt;

&lt;p&gt;아직 time을 사용하진 않지만 나중을 위해서 해주었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if resultText.find('켜줘') &amp;gt;= 0 :
    GPIO.output(31, GPIO.HIGH)
elif resultText.find('불꺼') &amp;gt;= 0 :
    GPIO.output(31, GPIO.LOW)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과 텍스트에서 &lt;strong&gt;켜줘&lt;/strong&gt; 혹은 &lt;strong&gt;불꺼&lt;/strong&gt;가 있으면 LED를 조작합니다.&lt;/p&gt;

&lt;p&gt;한글을 입력하기 위해 상단의 키보드모양을 누르면 태극문양으로 바뀌며 한글 입력이 가능합니다.&lt;/p&gt;

&lt;p&gt;한번 더 누르면 다시 키보드모양으로 돌아옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GPIO.setmode(GPIO.BOARD)
GPIO.setup(31, GPIO.OUT)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GPIO의 모드와 31번 핀을 출력으로 설정해 줍니다.&lt;/p&gt;

&lt;p&gt;main 함수 안에서 해주었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$python3 led_with_voice.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정한 파일을 python3를 이용해 실행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력받은 텍스트가 나오며 &lt;strong&gt;켜줘&lt;/strong&gt;라고 말하면 LED가 켜지게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4_gpio/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 텍스트가 나오며 &lt;strong&gt;불꺼&lt;/strong&gt;가 입력되면 LED를 끕니다.&lt;/p&gt;

&lt;p&gt;이상으로 4편 GPIO조작편을 마치도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/rpi/making/coding/2018/11/27/kt_speaker_kit_4.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/rpi/making/coding/2018/11/27/kt_speaker_kit_4.html</guid>
        
        
        <category>rpi</category>
        
        <category>making</category>
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>RPI로 KT gigagenie AI 스피커 키트 만들기 - 3편</title>
        <description>&lt;p&gt;RPI로 KT Gigagenie AI 스피커 키트 만들기 - 3편&lt;/p&gt;

&lt;p&gt;저번 시간에는 예제 구동을 위해 회원가입과 키 값 가져오기를 해봤습니다.&lt;/p&gt;

&lt;p&gt;이번 시간에는 기본 예제들을 구동해 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;KT Ai Gigaginie 키트는 Node js와 python 2가지로 예제가 제공됩니다.&lt;/p&gt;

&lt;p&gt;먼저 Python을 사용해 보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;python-예제-사용-준비하기&quot;&gt;python 예제 사용 준비하기&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo apt-get install libasound-dev
$sudo apt-get install libportaudio0 libportaudio2 libportaudiocpp0 portaudiol9-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사운드 관련 라이브러리를 설치해 줍니다.&lt;/p&gt;

&lt;p&gt;마지막의 portaudio19-dev의 1은 &lt;strong&gt;숫자 1&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo apt-get install python3-pyaudio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python으로 audio를 사용하기 위한 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo pip3 install grpcio grpcio-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gprc를 사용하기 위해 pip3를 이용하여 설치해 줍니다.&lt;/p&gt;

&lt;p&gt;pip만 사용하면 python2버전으로 설치되니 주의해 주시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$sudo python3 -m easy_install ktkws-1.0.1-py3.5-linux-armv7l.egg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;easy_install을 이용하여 ktkws를 설치해 줍니다.&lt;/p&gt;

&lt;p&gt;이상으로 python3로 예제 구동을 하기 위한 준비가 끝났습니다.&lt;/p&gt;

&lt;h3 id=&quot;예제-1번-기가지니-부르기&quot;&gt;예제 1번 기가지니 부르기&lt;/h3&gt;

&lt;p&gt;예제 1번은 &lt;strong&gt;기가지니&lt;/strong&gt;를 호출하는 예제입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$cd ~/ai-makers-kit/python
$python3 ex1_kwstest.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;python 예제가 있는 폴더로 이동하여 예제1번 &lt;strong&gt;ex1_kwstest.py&lt;/strong&gt;를 실행시켜 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기가지니&lt;/strong&gt;라고 부르면 효과음을 내며 &lt;strong&gt;detect rc = 200&lt;/strong&gt;과 함께 종료됩니다.&lt;/p&gt;

&lt;h3 id=&quot;예제-2번-stt-기능-사용하기&quot;&gt;예제 2번 STT 기능 사용하기&lt;/h3&gt;

&lt;p&gt;Sound To Text(STT)를 사용하는 예제입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;텍스트에디터를 이용하여 &lt;strong&gt;CLIENT_ID, KEY, SECRET&lt;/strong&gt; 값을 넣어줍니다.&lt;/p&gt;

&lt;p&gt;이 값은 2번째 시간에 받은 &lt;strong&gt;clientKey.json&lt;/strong&gt;파일 안에 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$python3 ex2_getVoice2Text.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제 2번을 실행시켜 줍니다.&lt;/p&gt;

&lt;p&gt;실행하면 ALSA 라이브러리가 실행되며 장치를 찾습니다.&lt;/p&gt;

&lt;p&gt;에러가 아니므로 안심하셔도 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;말한 단어가 나오며 종료됩니다.&lt;/p&gt;

&lt;p&gt;처음에 왜 말하기가 나가기로 인식되었는지 모르겠네요.&lt;/p&gt;

&lt;p&gt;아무튼 잘 인식되는걸 볼 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;예제-3번-text---voice-변환-url-가져오기&quot;&gt;예제 3번 Text - Voice 변환 Url 가져오기&lt;/h3&gt;

&lt;p&gt;입력한 텍스트를 소리로 들을 수 있는 Url을 반환하는 예제입니다.&lt;/p&gt;

&lt;p&gt;바로 4번으로 넘어가도 되지만 다른곳에 사용할 수 있으니 해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2번 예제와 마찬가지로 &lt;strong&gt;CLIENT_ID, KEY, SECRET&lt;/strong&gt;를 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$python3 ex3_getText2VoiceUrl.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제를 실행하면 Url이 하나 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 인터넷 브라우저를 열어 붙여넣어줍니다.&lt;/p&gt;

&lt;p&gt;소리 파일이 실행되며 기본으로 설정되어있던 &lt;strong&gt;안녕하세요. 반갑습니다.&lt;/strong&gt;가 재생됩니다.&lt;/p&gt;

&lt;h3 id=&quot;예제-4번-text---voice-파일로-저장하기&quot;&gt;예제 4번 Text - Voice 파일로 저장하기&lt;/h3&gt;

&lt;p&gt;예제 3번의 업그레이드 버전입니다.&lt;/p&gt;

&lt;p&gt;입력된 텍스트를 소리 파일로 변환하는 예제입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어김없이 &lt;strong&gt;CLIENT_ID, KEY, SECRET&lt;/strong&gt;를 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;밑으로 내려 &lt;strong&gt;안녕하세요. 반갑습니다.&lt;/strong&gt;라고 되어있던 부분을 다른 텍스트로 바꿔주었습니다.&lt;/p&gt;

&lt;p&gt;한글 입력의 경우 우측 상단의 키보드 모양을 누르면 태극문양으로 바뀌며 한글 입력이 가능합니다.&lt;/p&gt;

&lt;p&gt;저는 &lt;strong&gt;텍스트를 소리로.&lt;/strong&gt;를 넣고 저장해 주었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$python3 ex4_getText2VoiceStream.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제 4번을 실행시켜 줍니다.&lt;/p&gt;

&lt;p&gt;200 코드와 함께 Audio Stream이 나왔다면 성공한 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 목록중 &lt;strong&gt;testtts.wav&lt;/strong&gt;라는 파일이 생성된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aplay testtts.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;aplay&lt;/strong&gt; 명령어를 이용하여 소리 파일을 실행시켜 줍니다.&lt;/p&gt;

&lt;p&gt;입력했던 텍스트가 소리로 바뀌어 재생되는 것을 들을 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;예제-5번-텍스트로-query문-보내기&quot;&gt;예제 5번 텍스트로 query문 보내기&lt;/h3&gt;

&lt;p&gt;AI 스피커라면 전부 가지고 있는 query문(질문하기)이 나왔습니다.&lt;/p&gt;

&lt;p&gt;텍스트로 질문을 보내면 텍스트로 답하는 예제입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CLIENT_ID, KEY, SECRET&lt;/strong&gt;를 넣는 과정은 생략하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$python3 ex5_queryText.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제 5번을 실행시키면 기본 query문인 &lt;strong&gt;안녕&lt;/strong&gt;이 실행됩니다.&lt;/p&gt;

&lt;p&gt;응답으로는 &lt;strong&gt;안녕하세요~~~&lt;/strong&gt;가 온 것을 볼 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;예제-6번-소리로-query문-보내기&quot;&gt;예제 6번 소리로 query문 보내기&lt;/h3&gt;

&lt;p&gt;6번은 소리를 통해 query문을 보내는 예제입니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;CLIENT_ID, KEY, SECRET&lt;/strong&gt;를 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$python3 ex6_queryVoice.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제 6번을 실행시켜줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3_example/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력한 소리에 따라 &lt;strong&gt;*&lt;/strong&gt;가 나오게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;몇시야&lt;/strong&gt;라는 질문을 해봤습니다. 대답이 잘 나오는걸 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이상으로 python으로 예제 실행하기 편을 마치도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/rpi/making/coding/2018/11/27/kt_speaker_kit_3.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/rpi/making/coding/2018/11/27/kt_speaker_kit_3.html</guid>
        
        
        <category>rpi</category>
        
        <category>making</category>
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>RPI로 KT gigagenie AI 스피커 키트 만들기 - 2편</title>
        <description>&lt;p&gt;RPI로 KT Gigagenie AI 스피커 키트 만들기 - 2편&lt;/p&gt;

&lt;p&gt;저번 시간에는 AI 스피커를 사용하기 위한 기본 설정을 마쳤습니다.&lt;/p&gt;

&lt;p&gt;이번 시간에는 예제 구동을 위해 회원가입과 키 값 가져오기를 해보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;스피커-및-마이크-테스트&quot;&gt;스피커 및 마이크 테스트&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;바탕화면에 보면 &lt;strong&gt;Check Audio&lt;/strong&gt;라는 파일이 있습니다.&lt;/p&gt;

&lt;p&gt;이를 더블클릭하여 실행시켜 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음 실행 후 엔터를 누르면 띠리리리링 하는 소리가 납니다.&lt;/p&gt;

&lt;p&gt;만약 들리지 않을 경우 스피커와 관련 부분을 확인해 주세요.&lt;/p&gt;

&lt;p&gt;소리가 잘 난다면 y를 입력하고 엔터를 눌러 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음으로 엔터를 누르면 녹음을 시작합니다.&lt;/p&gt;

&lt;p&gt;약 5초간 녹음을 하며 녹음된 소리가 다시 재생됩니다.&lt;/p&gt;

&lt;p&gt;스피커는 정상이나 녹음한 소리가 안나온다면 마이크를 확인해 주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정상이라면 y를 입력하고 엔터를 눌러 다음으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;한번 더 엔터를 누르면 창이 종료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왼쪽 상단의 지구본모양을 눌러 인터넷 브라우저를 켠 후 아래 링크를 입력합니다.&lt;/p&gt;

&lt;p&gt;https://apilink.kt.co.kr/sdpapply/console/index.do&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아이디, 비밀번호, SMS 인증을 완료하고 로그인을 해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/65.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우측 상단 창에서 &lt;strong&gt;Console&lt;/strong&gt;버튼을 눌러 콘솔창으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왼쪽 메뉴에서 &lt;strong&gt;GiGA Genie - My Service&lt;/strong&gt;를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key 보기&lt;/strong&gt;를 눌러 키 값을 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JSON 다운로드를 눌러 키 값, ID등이 저장된 파일을 다운로드합니다.&lt;/p&gt;

&lt;p&gt;이 파일이 있으면 권한 대부분을 사용할 수 있으므로 주의해 주시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2_login/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Downloads 폴더 안에 &lt;strong&gt;clientKey.json&lt;/strong&gt;파일이 있는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 파일을 직접 사용하기도 하고 파일 안의 clientID, Key값등을 직접 넣어서 사용하기도 합니다.&lt;/p&gt;

&lt;p&gt;이상으로 2편을 마치도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/rpi/making/coding/2018/11/21/kt_speaker_kit_2.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/rpi/making/coding/2018/11/21/kt_speaker_kit_2.html</guid>
        
        
        <category>rpi</category>
        
        <category>making</category>
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>RPI로 KT gigagenie AI 스피커 키트 만들기 - 1편</title>
        <description>&lt;p&gt;RPI로 KT Gigagenie AI 스피커 키트 만들기 - 1편&lt;/p&gt;

&lt;p&gt;이번 시간에는 AI 스피커를 만들어 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;AI 스피커는 구글에서 나온 Google Home, 아마존의 Echo, 네이버의 Clova, 카카오의 mini등이 있습니다.&lt;/p&gt;

&lt;p&gt;그 중 KT의 기가지니를 사용한 AI 스피커 키트가 있어 이를 사용해 보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;기가지니-사용하기&quot;&gt;기가지니 사용하기&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사이트에 들어가면 우측 상단에 &lt;strong&gt;로그인&lt;/strong&gt;과 &lt;strong&gt;회원가입&lt;/strong&gt;버튼이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;약관에 동의를 누른 후&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;휴대폰이나 이메일로 인증한 후 다음을 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이름, 닉네임등등 기본 정보를 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;회원가입이 완료되면 &lt;strong&gt;서비스 - GiGA Genie&lt;/strong&gt;를 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Service SDK - 이용 신청 하기&lt;/strong&gt;를 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;API LINK 사이트로 넘어왔습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서비스 등록하기 - 3rd Party Device List&lt;/strong&gt;를 클릭해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AI MAKERS Kit (DEV)&lt;/strong&gt;를 선택하고 3개의 리소스를 전부 선택한 뒤 서비스명을 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;신청을 누르고 3~5초 뒤 새로고침을 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Service - OS Image&lt;/strong&gt;의 다운로드를 눌러 Raspberry Pi의 이미지파일을 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;받은 파일의 압축을 풀어 img파일을 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Win32 Disk Imager 혹은 Etcher를 이용하여 이미지를 USB에 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/kt_voice_kit/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 화면이 나오면 이미지가 잘 들어간 것입니다.&lt;/p&gt;

&lt;p&gt;이상으로 1편을 마치도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/rpi/making/coding/2018/11/20/kt_speaker_kit.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/rpi/making/coding/2018/11/20/kt_speaker_kit.html</guid>
        
        
        <category>rpi</category>
        
        <category>making</category>
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>python으로 telegram bot 활용하기 - 4 Inline Keyboard편</title>
        <description>&lt;p&gt;텔레그램 봇 만들기 4편(Telegram bot - 4 Inline Keyboard)&lt;/p&gt;

&lt;p&gt;텔레그램 봇은 계속 업데이트됩니다.&lt;/p&gt;

&lt;p&gt;이번 시간에는 Inline Keyboard를 만들어 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.psangwoo.com/coding/2016/12/08/python-telegram-bot-1.html&quot;&gt;1편 기본 설정편 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.psangwoo.com/coding/2016/12/11/python-telegram-bot-2.html&quot;&gt;2편 채널편 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.psangwoo.com/coding/2018/01/09/python-telegram-bot-3.html&quot;&gt;3편 챗봇편 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inline Keyboard는 선택지를 보여줌으로써 쉽게 선택할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-inline-keyboard-만들기&quot;&gt;1. Inline Keyboard 만들기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;/get&lt;/strong&gt; 커맨드를 보내면 on,off로 응답하는 형태입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

my_token = 'token'

updater = Updater(my_token)

def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu

def get_command(bot, update):
    print(&quot;get&quot;)
    show_list = []
    show_list.append(InlineKeyboardButton(&quot;on&quot;, callback_data=&quot;on&quot;)) # add on button
    show_list.append(InlineKeyboardButton(&quot;off&quot;, callback_data=&quot;off&quot;)) # add off button
    show_list.append(InlineKeyboardButton(&quot;cancel&quot;, callback_data=&quot;cancel&quot;)) # add cancel button
    show_markup = InlineKeyboardMarkup(build_menu(show_list, len(show_list) - 1)) # make markup

    update.message.reply_text(&quot;원하는 값을 선택하세요&quot;, reply_markup=show_markup)

get_handler = CommandHandler('get', get_command)
updater.dispatcher.add_handler(get_handler)

updater.start_polling(timeout=1, clean=True)
updater.idle()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;/get&lt;/strong&gt; 커맨드를 보내면 아래와 같이 응답합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/telegram/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-callback-추가하기&quot;&gt;2. callback 추가하기&lt;/h3&gt;

&lt;p&gt;Inline Keyboard만 있을 경우 버튼을 눌러도 아무런 응답이 없습니다.&lt;/p&gt;

&lt;p&gt;응답을 위해 callback 추가해 주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def get_command(bot, update):
    print(&quot;get&quot;)
    show_list = []
    show_list.append(InlineKeyboardButton(&quot;on&quot;, callback_data=&quot;on&quot;)) # add on button
    show_list.append(InlineKeyboardButton(&quot;off&quot;, callback_data=&quot;off&quot;)) # add off button
    show_list.append(InlineKeyboardButton(&quot;cancel&quot;, callback_data=&quot;cancel&quot;)) # add cancel button
    show_markup = InlineKeyboardMarkup(build_menu(show_list, len(show_list) - 1)) # make markup

    update.message.reply_text(&quot;원하는 값을 선택하세요&quot;, reply_markup=show_markup)

def callback_get(bot, update):
    print(&quot;callback&quot;)
    bot.edit_message_text(text=&quot;{}이(가) 선택되었습니다&quot;.format(update.callback_query.data),
                              chat_id=update.callback_query.message.chat_id, message_id=update.callback_query.message.message_id)
    
get_handler = CommandHandler('get', get_command)
updater.dispatcher.add_handler(get_handler)
updater.dispatcher.add_handler(CallbackQueryHandler(callback_get))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;/get&lt;/strong&gt; 커맨드를 보낸 후 on을 선택하면 다음과 같이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/telegram/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-여러개의-callback-사용하기&quot;&gt;3. 여러개의 callback 사용하기&lt;/h3&gt;

&lt;p&gt;callback이 한번만에 끝나면 좋지만 아닌 경우도 많습니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 InlineKeyboardButton 함수를 보면 callback_data 라는 변수가 있습니다.&lt;/p&gt;

&lt;p&gt;callback시 돌아오는 데이터로 보여지는 버튼의 이름과 다를 수 있습니다.&lt;/p&gt;

&lt;p&gt;update.callback_query.data로 접근할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;,(콤마)&lt;/strong&gt;로 callback data를 구분하여 지속적으로 저장하고, 새로운 callback이 있을 때 마다 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build_button&lt;/strong&gt; 이라는 함수를 만들어 주었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def build_button(text_list, callback_header = &quot;&quot;) : # make button list
    button_list = []
    text_header = callback_header
    if callback_header != &quot;&quot; :
        text_header += &quot;,&quot;

    for text in text_list :
        button_list.append(InlineKeyboardButton(text, callback_data=text_header + text))

    return button_list

def get_command(bot, update):
    print(&quot;get&quot;)
    button_list = build_button([&quot;on&quot;, &quot;off&quot;, &quot;cancel&quot;]) # make button list
    show_markup = InlineKeyboardMarkup(build_menu(button_list, len(button_list) - 1)) # make markup
    update.message.reply_text(&quot;원하는 값을 선택하세요&quot;, reply_markup=show_markup) # reply text with markup

def callback_get(bot, update):
    data_selected = update.callback_query.data
    print(&quot;callback : &quot;, data_selected)
    if len(data_selected.split(&quot;,&quot;)) == 1 :
        button_list = build_button([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;cancel&quot;], data_selected)
        show_markup = InlineKeyboardMarkup(build_menu(button_list, len(button_list) - 1))
        bot.edit_message_text(text=&quot;상태를 선택해 주세요.&quot;,
                              chat_id=update.callback_query.message.chat_id,
                              message_id=update.callback_query.message.message_id,
                              reply_markup=show_markup)

    elif len(data_selected.split(&quot;,&quot;)) == 2 :
        bot.edit_message_text(text=&quot;{}이(가) 선택되었습니다&quot;.format(update.callback_query.data),
                              chat_id=update.callback_query.message.chat_id,
                              message_id=update.callback_query.message.message_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;선택한 값이 누적되어 나오는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/telegram/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-cancel-추가하기&quot;&gt;4. cancel 추가하기&lt;/h3&gt;

&lt;p&gt;cancel 버튼은 계속 있었지만 cancel처럼 동작하지 않았습니다.&lt;/p&gt;

&lt;p&gt;cancel을 cancel답게 해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def callback_get(bot, update):
    data_selected = update.callback_query.data
    print(&quot;callback : &quot;, data_selected)
    if data_selected.find(&quot;cancel&quot;) != -1 :
        bot.edit_message_text(text=&quot;취소하였습니다.&quot;,
                              chat_id=update.callback_query.message.chat_id,
                              message_id=update.callback_query.message.message_id)
        return

    if len(data_selected.split(&quot;,&quot;)) == 1 :
        button_list = build_button([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;cancel&quot;], data_selected)
        show_markup = InlineKeyboardMarkup(build_menu(button_list, len(button_list) - 1))
        bot.edit_message_text(text=&quot;상태를 선택해 주세요.&quot;,
                              chat_id=update.callback_query.message.chat_id,
                              message_id=update.callback_query.message.message_id,
                              reply_markup=show_markup)

    elif len(data_selected.split(&quot;,&quot;)) == 2 :
        bot.edit_message_text(text=&quot;{}이(가) 선택되었습니다&quot;.format(update.callback_query.data),
                              chat_id=update.callback_query.message.chat_id,
                              message_id=update.callback_query.message.message_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;callback_query.data를 참조하여 &lt;strong&gt;cancel&lt;/strong&gt;이 있으면 함수를 종료합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/telegram/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상으로 &lt;strong&gt;Inline Keyboard&lt;/strong&gt;편을 마치도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/coding/2018/08/20/python-telegram-bot-4.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/coding/2018/08/20/python-telegram-bot-4.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>함수의 평균을 이용하여 메모리 절약하기</title>
        <description>&lt;h2 id=&quot;use-mean-of-a-function-for-memory-saving&quot;&gt;Use mean of a function for memory saving&lt;/h2&gt;

&lt;p&gt;센서값을 입력받다 보면 엄청난 양의 값을 평균 내야 할 때가 있습니다.&lt;/p&gt;

&lt;p&gt;변수 선언 시 크기를 지정하는 언어의 경우 long long 같은 엄청난 크기를 잡을 수도 있지만, 한계가 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 함수의 평균을 이용하여 메모리를 절약해 보기로 하였습니다.&lt;/p&gt;

&lt;p&gt;함수의 평균(mean)은 아래와 같습니다.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\bar{y}  =  \frac{y_1 + y_2 + \cdots + y_n}{n}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n\bar{y} = y_1 + y_2 + \cdots + y_n&lt;/script&gt;

&lt;p&gt;여기에 &lt;script type=&quot;math/tex&quot;&gt;y_{n+1}&lt;/script&gt;이 추가되면 아래와 같습니다.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\bar{y}  =  \frac{y_1 + y_2 + \cdots + y_n + y_{n+1}}{n+1}&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;y_1 + y_2 + \cdots + y_n&lt;/script&gt; 는 &lt;script type=&quot;math/tex&quot;&gt;n\bar{y}&lt;/script&gt;와 같으므로&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\bar{y}  =  \frac{n\bar{y} + y_{n+1}}{n+1}&lt;/script&gt;

&lt;p&gt;이를 C++로 구현해 보았습니다.&lt;/p&gt;

&lt;p&gt;1~1000의 랜덤한 값을 50번 더해서 함수의 평균값과 실제 값을 비교해 보았습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;stdafx.h&quot;
#include &quot;stdlib.h&quot;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main()
{
	int mean = 0;
	int size = 0;
	long long mean_added = 0;

	srand(time(NULL));

	for (int i = 0; i &amp;lt; 50; i++) {
		int random_number = rand() % 1000 + 1;
		mean_added += random_number;
		mean = (mean * size + random_number) / (size + 1);
		size += 1;

		cout &amp;lt;&amp;lt; size &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; mean * size &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; mean_added &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; mean*size - mean_added &amp;lt;&amp;lt; endl;
	}
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/mean_of_a_function/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제 코드로 돌려보면 &lt;script type=&quot;math/tex&quot;&gt;n\bar{y}&lt;/script&gt; 와 실제 값&lt;strong&gt;&lt;em&gt;(mean_added)&lt;/em&gt;&lt;/strong&gt;이 다른 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;곱하고 나누는 과정에서 수식처럼 딱 떨어지지 않고 버려지는 값이 오차로 누적되는 것입니다.&lt;/p&gt;

&lt;p&gt;오차가 있더라도 메모리를 아끼는 것이 더 중요한 환경(임베디드등)이라면 사용할만 하다고 생각합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/coding/2018/05/08/mean_of_a_function.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/coding/2018/05/08/mean_of_a_function.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>깃헙 페이지 이미지를 aws s3에서 호스팅하기</title>
        <description>&lt;h3 id=&quot;github-page-image-host-on-aws-s3&quot;&gt;github page image host on AWS s3&lt;/h3&gt;

&lt;p&gt;깃헙 페이지를 통해 블로그를 운영하면서 이미지 호스트를 많이 바꿔왔습니다.&lt;/p&gt;

&lt;p&gt;처음엔 구글 드라이브를 사용했으나 구글이 막힌 곳이 많아 이미지가 안보이는 경우가 생겼습니다.&lt;/p&gt;

&lt;p&gt;그래서 github에 페이지와 동시에 img 폴더를 만들어 호스팅하기 시작했습니다.&lt;/p&gt;

&lt;p&gt;막힌 곳도 없었고 집에서 잘 보였기에 신경 쓰지 않고 있었습니다.&lt;/p&gt;

&lt;p&gt;어느날 외부에서 usb 테더링으로 블로그를 볼 일이 생겼는데 속도가 너무 느려 이미지가 로딩되는데 1분이 넘게 걸렸습니다.&lt;/p&gt;

&lt;p&gt;그래서 aws s3를 이용하여 이미지 호스팅을 해보기로 하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/s3/&quot;&gt;aws s3 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;aws s3로 이동하여 &lt;strong&gt;Get started with Amazon S3&lt;/strong&gt;를 클릭합니다.&lt;/p&gt;

&lt;p&gt;aws 아이디가 있다면 로그인을, 없다면 계정을 생성해 줍니다.&lt;/p&gt;

&lt;p&gt;로그인이 완료되면 bucket 목록이 보일 것입니다.&lt;/p&gt;

&lt;p&gt;bucket은 파일, 폴더들을 저장하는 최상위 폴더라고 생각하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create bucket을 눌러 bucket을 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bucket name은 이미지 주소에 사용되므로 알기 쉽도록 작성합니다.&lt;/p&gt;

&lt;p&gt;Region은 서버가 존재하는 지역으로 Asia Pacific (Seoul)을 선택합니다.&lt;/p&gt;

&lt;p&gt;입력이 완료되면 Create를 눌러 생성해 줍니다.&lt;/p&gt;

&lt;p&gt;새 Bucket이 생성되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 Bucket을 클릭하고 Permissions 탭으로 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하단에 Public access의 Everyone을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List objects에 체크해준 뒤 Save를 눌러 저장합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This bucket has public access&lt;/strong&gt;라는 문구가 나옵니다.&lt;/p&gt;

&lt;p&gt;bucket에 아무나 접속(objects를 읽는 권한만 주었습니다)할 수 있다는 주의 문구입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overview로 돌아와 Upload를 눌러 이미지를 업로드합니다.&lt;/p&gt;

&lt;p&gt;폴더나 이미지를 끌어다 놓아도 되고 Add files를 클릭하여 추가해도 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;업로드 된 폴더(혹은 이미지)를 클릭하고 우클릭(혹은 상단의 More클릭) - Make public을 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오브젝트에 대해 &lt;strong&gt;아무나 읽기 가능&lt;/strong&gt;권한을 부여한다는 의미입니다.&lt;/p&gt;

&lt;p&gt;Make public을 눌러 아무나 읽을 수 있도록 해줍니다.&lt;/p&gt;

&lt;p&gt;이로써 아무나 파일을 읽을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;업로드 한 파일중 하나를 클릭하여 들어갑니다.&lt;/p&gt;

&lt;p&gt;하단에 Link 라는 주소가 보이는데 이것이 이미지의 주소입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 주소창에 넣으면 이미지가 나오게 됩니다.&lt;/p&gt;

&lt;p&gt;주소의 일부를 깃헙 페이지의 변수로 만들어 markdown에서 이미지 링크를 추가해 보겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 변수로 만들 bucket의 주소를 찾습니다.&lt;/p&gt;

&lt;p&gt;이미지의 주소중 bucket name까지 복사해 줍니다.&lt;/p&gt;

&lt;p&gt;저는 &lt;strong&gt;https://s3.ap-northeast-2.amazonaws.com/img.psangwoo.com&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;깃헙 페이지 폴더로 이동하여 &lt;strong&gt;_config.yml&lt;/strong&gt;파일을 열어줍니다.&lt;/p&gt;

&lt;p&gt;메모장이나 vim등 텍스트 에디터를 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;맨 아래에 아래와 같이 추가해 줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;img_url: &quot;https://s3.ap-northeast-2.amazonaws.com/img.psangwoo.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;img_url 변수에 주소값을 저장합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ site.img_url }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;중괄호 + site.변수명&lt;/strong&gt;을 이용하여 변수를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 아래 이미지의 주소는 s3_hosting 폴더 안의 sample.png 사진입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/s3_hosting/sample.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![]({{ site.img_url }}/s3_hosting/sample.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이상으로 &lt;strong&gt;이미지를 aws s3에서 호스팅하기&lt;/strong&gt;를 마칩니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/coding/2018/04/03/img_s3_hosting.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/coding/2018/04/03/img_s3_hosting.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>STM32L4 B-L475E-IOT01A 보드 사용하기 - I2C, HTS221편</title>
        <description>&lt;h4 id=&quot;이번-시간부터-중급-강의로-넘어갑니다&quot;&gt;이번 시간부터 &lt;strong&gt;중급 강의&lt;/strong&gt;로 넘어갑니다.&lt;/h4&gt;

&lt;p&gt;이번 시간부터는 B-L475E-IOT01A 보드를 사용합니다.&lt;/p&gt;

&lt;p&gt;STM32L4 기반 보드이며 각종 센서, 무선 모듈을 탑재한 Discovery Kit입니다.&lt;/p&gt;

&lt;p&gt;$53의 저렴한 가격으로 여러 가지 센서부터 무선 통신까지 사용해볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이번 시간에는 HTS221이라는 온습도 센서를 사용해 보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;stm32cube&quot;&gt;STM32Cube&lt;/h3&gt;

&lt;p&gt;STM32L475BGTx로 프로젝트를 만들어 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PA7번을 USART1_RX, PA6번을 USART1_TX로, USART1번을 Asynchronous로 설정해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PB10번을 I2C2_SCL, PB11번을 I2C2_SDA로, I2C2를 I2C로 설정해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configuration - USART1에서 Baud Rate를 9600으로, Word Length를 8bits로 설정해 줍니다.&lt;/p&gt;

&lt;p&gt;이는 Serial 통신 설정에 맞춰주면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NVIC Settings로 이동하여 USART1 global interrupt의 Enabled에 체크해 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I2C쪽은 따로 설정해줄 것이 없으므로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;톱니바퀴를 눌러 코드를 생성해 줍니다.&lt;/p&gt;

&lt;p&gt;여전히 Toolchain / IDE는 MDK-ARM V5를 사용합니다.&lt;/p&gt;

&lt;h3 id=&quot;uvision5&quot;&gt;uVision5&lt;/h3&gt;

&lt;p&gt;printf 함수와 직접 만든 함수 2개를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* USER CODE BEGIN 0 */

int fputc(int ch, FILE *f)
{
	uint8_t temp[1] = {ch} ;
	
	HAL_UART_Transmit(&amp;amp;huart1, temp, 1, 50) ;
	
	return(ch) ;
}

void reset_buffer(unsigned char *buffer, int buffer_size) {
	for (int i = 0; i &amp;lt; buffer_size; i++) {
		buffer[i] = 0 ;
	}
}

unsigned char read_register(unsigned char slave_address, unsigned char read_register) {
	unsigned char buffer[1] = {read_register} ;
	HAL_I2C_Master_Transmit(&amp;amp;hi2c2, slave_address, buffer, 1, 100) ;
	HAL_Delay(20) ;
	HAL_I2C_Master_Receive(&amp;amp;hi2c2, slave_address, buffer, 1, 200) ;
	return buffer[0] ;
}

/* USER CODE END 0 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;reset_buffer는 배열을 0으로 초기화할 때 사용합니다.&lt;/p&gt;

&lt;p&gt;read_register는 i2c 통신에서 메모리의 값(1byte)을 읽을 때 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* USER CODE BEGIN 1 */
	
	unsigned char buffer[5] ;
	double O2C, datum_temp ;
	int16_t T0c, T1c, T0o, T1o ;
	reset_buffer(buffer, 5) ;

/* USER CODE END 1 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각종 변수들을 선언해 주고 reset_buffer 함수를 이용하여 초기화 해 줍니다.&lt;/p&gt;

&lt;p&gt;O2C는 읽은 온도센서 값(아날로그 값)을 섭씨로 바꾸는 데 사용됩니다.&lt;/p&gt;

&lt;p&gt;datum_temp는 기준이 되는 온도값 입니다.&lt;/p&gt;

&lt;p&gt;T0c ~ T1o는 추후 서술할 calibration에 사용되는 변수입니다.&lt;/p&gt;

&lt;p&gt;선언 후 reset_buffer 함수를 이용하여 buffer 배열을 초기화합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* USER CODE BEGIN 2 */
	
//check i2c work
buffer[0] = read_register(0x5F &amp;lt;&amp;lt; 1, 0x0F) ;

if (buffer[0] == 0xBC) {  // Who am I(0x0F) return 0xBC
	//write sensor on
	printf(&quot;find HTS221\n&quot;) ;
	reset_buffer(buffer, 5) ;
	buffer[0] = 0x20;
	buffer[1] = 0x80 | 0x01 ;  // power on and 1Hz data configure

	HAL_I2C_Master_Transmit(&amp;amp;hi2c2, 0x5F &amp;lt;&amp;lt; 1, buffer, 2, 100) ;	
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;0x5F는 hts221의 I2C 주소값입니다.&lt;/p&gt;

&lt;p&gt;HAL_I2C_Master 계열 함수를 사용할 때 주소값을 7비트 값을 사용하기 때문에 왼쪽으로 1번 시프트합니다.&lt;/p&gt;

&lt;p&gt;stm32l4xx_hal_i2c.c 파일에 나와있습니다.&lt;/p&gt;

&lt;p&gt;0x0F는 WHO_AM_I register입니다.&lt;/p&gt;

&lt;p&gt;Read-Only register이며 0xBC 값을 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;0xBC로 판단되면(HTS221이 확인되면) 0x20 register에 0x80, 0x01을 써줍니다.&lt;/p&gt;

&lt;p&gt;0x20은 CTRL_REG1 register로 전원, data update에 관하여 설정할 수 있습니다.&lt;/p&gt;

&lt;p&gt;기본값은 0으로 0x80은 전원을 active mode로, 0x01은 1 Hz의 속도로 데이터를 업데이트합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//32 T0_degC_x8
//33 T1_degC_x8
//35 T1/T0 msb
//3C 3D T0_OUT
//3E 3F T1_OUT

unsigned char start_reg = 0x32 ;
unsigned char end_reg = 0x3F ;
unsigned char now_reg = start_reg ;

//for (int now_reg = start_reg; now_reg &amp;lt;= end_reg; now_reg++) {
while(now_reg &amp;lt;= end_reg) {
	unsigned char reg_value = read_register(0x5F &amp;lt;&amp;lt; 1, now_reg) ;
	switch (now_reg) {
		case 0x32 :
			T0c = reg_value ;
			break ;
		case 0x33 :
			T1c = reg_value ;
			now_reg += 1 ;
			break ;
		case 0x35 :
			T0c |= (reg_value &amp;amp; 0x03) &amp;lt;&amp;lt; 8 ;
			T1c |= ((reg_value &amp;gt;&amp;gt; 2) &amp;amp; 0x03) &amp;lt;&amp;lt; 8 ;
			now_reg += 6 ;
			break ;
		case 0x3C :
			T0o = reg_value ;
			break ;
		case 0x3D :
			T0o |= reg_value &amp;lt;&amp;lt; 8 ;
			break ;
		case 0x3E :
			T1o = reg_value ;
			break ;
		case 0x3F :
			T1o |= reg_value &amp;lt;&amp;lt; 8 ;
			break ;
	} // end switch
	now_reg += 1 ;
} // end while

O2C = (double)(T1c - T0c) / (double)(8.0 * (T1o - T0o)) ;
datum_temp = (double)(T0c / 8.0) ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CTRL_REG1 설정이 끝났으면 바로 밑에(if문 안에) calibration 과정을 넣어줍니다.&lt;/p&gt;

&lt;p&gt;calibration에 필요한 변수 값들을 먼저 받아옵니다.&lt;/p&gt;

&lt;p&gt;T0_degC(T0c), T1_degC(T1c), T0_out(T0o), T1_out(T1o) 값이 있습니다.&lt;/p&gt;

&lt;p&gt;0x35번 register에는 T0_degC의 9, 10번째 값, T1_degC의 9, 10번째 값이 들어있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그래프를 참조하여 O2C 값을 찾습니다. O2C는 output 값을 섭씨로 바꾸는데 사용됩니다.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{TOc}{8} = aT0o + b&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{T1c}{8} = aT1o + b&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{(T1c - T0c)}{8} = a(T1o - T0o)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Tc = \frac{T0c}{8} + a(To-T0o)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Tc = \frac{T0c}{8} + \frac{(To-T0o)(T1c-T0c)}{8(T1o-T0o)}&lt;/script&gt;

&lt;p&gt;여기서 &lt;script type=&quot;math/tex&quot;&gt;\frac{T0c}{8}&lt;/script&gt;는 datum_temp에&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{T1c-T0c}{8(T1o-T0o)}&lt;/script&gt;는 O2C에 저장합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (1) {
	reset_buffer(buffer, 5) ;
	buffer[0] = 0x27 ;
	buffer[0] = read_register(0x5F &amp;lt;&amp;lt; 1, buffer[0]) ;
	HAL_Delay(50) ;
	
	if (buffer[0] == 0x03) {
		buffer[0] = 0x2B ;
		buffer[1] = 0x2A ;
		buffer[0] = read_register(0x5F &amp;lt;&amp;lt; 1, buffer[0]) ;
		buffer[1] = read_register(0x5F &amp;lt;&amp;lt; 1, buffer[1]) ;
		int16_t To = buffer[0] &amp;lt;&amp;lt; 8 | buffer[1] ;
		
		double Tc = datum_temp + O2C * (double)(To - T0o) ;
		printf(&quot;Tc = %5.2f\n&quot;, Tc) ;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;while문을 이용하여 무한반복합니다.&lt;/p&gt;

&lt;p&gt;통신 프로그램을 이용하여 확인해보면 아래와 같이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;손으로 눌러 온도를 조금 올려보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2k4c07bmdw2ki.cloudfront.net/l475e/i2c/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상입니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/making/2018/03/27/B-L475E-IOT01A_i2c_hts221.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/making/2018/03/27/B-L475E-IOT01A_i2c_hts221.html</guid>
        
        
        <category>making</category>
        
      </item>
    
      <item>
        <title>무선 통신 주파수 목록</title>
        <description>&lt;p&gt;우리가 무선통신(정확히는 RF 통신)을 할 때 사용하는 주파수에는 여러 대역이 있습니다.&lt;/p&gt;

&lt;p&gt;주로 어떤 대역을 사용하며 주파수별 간단한 특징을 알아보았습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-433mhz-대역&quot;&gt;1. 433MHz 대역&lt;/h3&gt;

&lt;p&gt;HAM이라 불리는 아마추어 무선 통신에서 주로 사용하는 대역입니다.&lt;/p&gt;

&lt;p&gt;모듈이 싸고 구하기 쉽습니다.&lt;/p&gt;

&lt;h3 id=&quot;2-9xxmhz-대역&quot;&gt;2. 9xxMHz 대역&lt;/h3&gt;

&lt;p&gt;900MHz 대역 초반부(930MHz 미만)가 주로 사용되고 있습니다.&lt;/p&gt;

&lt;p&gt;국내 K 모사의 LTE가 이 대역을 사용하며 RFID도 이 대역을 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;IEEE 802.11ah에 해당하며 IOT 쪽에서도 관심을 보이는 대역입니다.&lt;/p&gt;

&lt;h3 id=&quot;3-24ghz-대역&quot;&gt;3. 2.4GHz 대역&lt;/h3&gt;

&lt;p&gt;아마 제일 익숙한 주파수 대역이 아닐까 싶습니다.&lt;/p&gt;

&lt;p&gt;블루투스(IEEE 802.15.1), 와이파이(IEEE 802.11b,g,n)에서 사용하는 주파수 대역입니다.&lt;/p&gt;

&lt;h3 id=&quot;4-5xghz-대역&quot;&gt;4. 5.xGHz 대역&lt;/h3&gt;

&lt;p&gt;5G 와이파이로 알려진 대역입니다.&lt;/p&gt;

&lt;p&gt;IEEE 802.11.a, ac에 해당합니다.&lt;/p&gt;

&lt;h3 id=&quot;5-60ghz-대역&quot;&gt;5. 60GHz 대역&lt;/h3&gt;

&lt;p&gt;와이기그(IEEE 802.11ad)에서 사용하는 대역입니다.&lt;/p&gt;

&lt;p&gt;매우 높은 주파수로 빠른 속도를 자랑합니다.&lt;/p&gt;

&lt;h3 id=&quot;주의점&quot;&gt;※주의점&lt;/h3&gt;

&lt;p&gt;많은 주파수가 있지만, 우리 마음대로 사용할 수 있는 것은 아닙니다.&lt;/p&gt;

&lt;p&gt;ISM 대역(Industrial Scientific and Medical band) 및 관련 규제, 법을 찾아보고 사용하는 것이 필요합니다.&lt;/p&gt;

&lt;p&gt;아니면 어느 날 경찰이 찾아올지도 모릅니다. (진짜)&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://blog.psangwoo.com/making/2018/03/18/list_of_frequency.html</link>
        <guid isPermaLink="true">https://blog.psangwoo.com/making/2018/03/18/list_of_frequency.html</guid>
        
        
        <category>making</category>
        
      </item>
    
  </channel>
</rss>
