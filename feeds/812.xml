<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Incoding-Enpoet</title>
<link>https://dailykul.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 02:43:13 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>DailyKul</managingEditor>
<image>
<title>Incoding-Enpoet</title>
<url>http://cfile3.uf.tistory.com/image/2513404B54C085F30FA10C</url>
<link>https://dailykul.tistory.com</link>
<description></description>
</image>
<item>
<title>Haskell 하스켈에서 유니코드(한글) 출력하기</title>
<link>https://dailykul.tistory.com/17</link>
<description>&lt;p&gt;Windows 위에서 돌아가는 Haskell은&lt;/p&gt;&lt;p&gt;Windows의 세팅과 GHC 세팅의 충돌(?)로 인해 유니코드 출력에 난항을 겪을 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 때에는 다음 두 줄을 Import하고&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;border-style: double; border-width: 3px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot; class=&quot;txc-textbox&quot;&gt;&lt;pre&gt;import GHC.IO.Encoding
import System.Win32.Console
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음 두 줄을 IO 전에 사용해주면 된다. (모두 IO () 타입이다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;border-style: double; border-width: 3px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot; class=&quot;txc-textbox&quot;&gt;&lt;pre&gt;&lt;p&gt;  setLocaleEncoding utf8
  setConsoleOutputCP 65001
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이들을 추가하면 정상적으로 출력이 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;다음은 간단한 예시 프로그램이다. cmd에 한글 글꼴이 적용되어 있지 않을 수도 있기에 (외국 윈도우의 경우가 그렇다) 한글이 아닌 화살표를 출력하는 것으로 작성해 놓았다.&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;border-style: double; border-width: 3px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot; class=&quot;txc-textbox&quot;&gt;&lt;pre&gt;main :: IO ()
main = do
  setLocaleEncoding utf8
  setConsoleOutputCP 65001
  putStrLn &quot;→&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;P.S. 만일 문제가 있다면 사용환경(윈도우 버전, GHC 버전 등)과 함께 에러메시지를 댓글로 알려주기를 바란다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;P.S.2. 위 해법은 &lt;b&gt;GHCI에서는 동작하지 않는다.&lt;/b&gt; GHC로 컴파일하는 프로그램에서만 동작한다.&lt;/p&gt;&lt;p&gt;GHCI에서 위 방법을 사용할 경우 아래와 같은 에러 메시지를 보게 될 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;*** Exception: &amp;lt;stdout&amp;gt;: hPutChar: invalid argument (invalid character)&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Coding-Study-Haskell</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/17</guid>
<comments>https://dailykul.tistory.com/17#entry17comment</comments>
<pubDate>Sat, 09 Jul 2016 19:59:16 +0900</pubDate>
</item>
<item>
<title>Ruby Keywords (루비 키워드) 정리</title>
<link>https://dailykul.tistory.com/16</link>
<description>&lt;p&gt;http://ruby-doc.org/docs/keywords/1.9/&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위 사이트에 잘 정리되어있다.&lt;/p&gt;&lt;p&gt;대부분은 직관적이거나 익숙한 키워드들이기 때문에,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;elsif, ensure, rescue, yield 정도만 주의해서 보면 되겠다.&lt;/p&gt;&lt;p&gt;(if 등도 state-modifier 사용되는 것이 익숙하지 않기는 하지만, 그건 그래도 함수형 등에서 조건 거는 것과 비슷하니....)&lt;br /&gt;&lt;/p&gt;</description>
<category>Coding-Study-Others</category>
<category>RUBY</category>
<category>루비</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/16</guid>
<comments>https://dailykul.tistory.com/16#entry16comment</comments>
<pubDate>Sat, 19 Dec 2015 04:32:21 +0900</pubDate>
</item>
<item>
<title>처음부터 써보는 C (2)</title>
<link>https://dailykul.tistory.com/15</link>
<description>이어서 써보도록 하자.&lt;div&gt;&lt;p&gt;우선, 저번 글(&lt;a href=&quot;http://dailykul.tistory.com/14&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://dailykul.tistory.com/14&lt;/a&gt;)에서 제대로 짚고 넘어가지 않은 부분부터 짚고 넘어갈까 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;이 글에서는 모든 구상을 Top-down 방식으로 진행할 것이다. 물론 매우 세부적인 기능들에 대해서는 라이브러리의 기능을 빌려오거나, 작은 것을 먼저 구현하기도 할 수 있으므로, 완전한 Top-down이라고 말할 수 없을지는 모른다. 하지만 되도록이면 더 큰 그림을 먼저 그리려고 할 것이며, 먼저 쓴 글에서 이후에 쓰는 내용을 요구하는 방식을 반복하는 것으로 진행될 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그러면 다시 코드의 이야기로 돌아와서, 이번에는 Calcode.h와 Eqlib.h를 정리해보았다.&lt;/p&gt;&lt;p&gt;즉, 저번 글에서 어떤 함수들과 타입들이 필요한지 대략적으로 나열해보았다면,&lt;/p&gt;&lt;p&gt;이번 글에서는 구체적으로 어떤 타입 선언을 가지는지, 그리고 어떤 함수 선언을 가지는지를 작성해보았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우선, Calcode.h는 다음과 같다.&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border: 1px solid rgb(203, 203, 203); padding: 10px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;ol style=&quot;margin: 0px; padding: 0px 0px 0px 48px; color: rgb(172, 172, 172); font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace, serif; line-height: 21px; background-color: rgb(248, 248, 248);&quot;&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#ifndef CALCODE_H_ //#ifndef CALCODE_H_ start&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#define CALCODE_H_ //CALCODE_H_ definition&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#define NORMSTR 0x00000000 //Prefix constant for normal condition&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#define COMPSTR 0x00010000 //Prefix constant for computational error&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#define MATHSTR 0x00020000 //Prefix constant for mathematical error&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#define EDITSTR 0x00040000 //Prefix constant for linguistic error&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;typedef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;kw2&quot; style=&quot;font-weight: bold;&quot;&gt;enum&lt;/span&gt;&amp;nbsp;Errcode_t&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; NORMAL_STATE&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;NORMSTR&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;co1&quot; style=&quot;color: rgb(102, 102, 102); font-style: italic;&quot;&gt;//NORMAL&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; OVERFLOW&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;COMPSTR&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;co1&quot; style=&quot;color: rgb(102, 102, 102); font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; DIVIDE_ZERO&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;MATHSTR&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;NEGATIVE_SQRT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; NOT_NUMBER&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;EDITSTR&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;NOT_MATCH_BIG_LEFT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;NOT_MATCH_BIG_RIGHT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; NOT_MATCH_MIDDLE_LEFT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;NOT_MATCH_MIDDLE_RIGHT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;NOT_MATCH_SMALL_LEFT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; NOT_MATCH_SMALL_RIGHT&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; QUIT&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;nu12&quot; style=&quot;color: rgb(32, 128, 128);&quot;&gt;0xFFFFFFFF&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;}&lt;/span&gt;&amp;nbsp;Errcode_t&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;typedef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;struct&lt;/span&gt;&amp;nbsp;Err_t&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Errcode_t errcode&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;int&lt;/span&gt;&amp;nbsp;line_num&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;int&lt;/span&gt;&amp;nbsp;char_num&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;}&lt;/span&gt;&amp;nbsp;Err_t&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;typedef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;char&lt;/span&gt;&amp;nbsp;Eq_Unit_t&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;typedef&lt;/span&gt;&amp;nbsp;Eq_Unit_t&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;*&lt;/span&gt;&amp;nbsp;Eq_t&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;typedef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;double&lt;/span&gt;&amp;nbsp;Num_t&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#endif //#ifndef CALCODE_H_ end&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우선 에러들을 네 가지로 구분해 놓았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;1. Normal state&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;이 경우는 에러가 아니다. 당연하게도.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;속하는 경우는 단 한 가지(NORMAL_STATE)밖에 없다.&lt;/p&gt;&lt;p&gt;2. Computational error&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;컴퓨터 계산 상의 한계로 나오는 에러를 뜻한다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;당장은 OVERFLOW 한 가지 뿐이지만, 더 추가될 수 있다.&lt;/p&gt;&lt;p&gt;3. Mathematical error&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;수학적으로 계산할 수 없거나 난해한 것들로 인해 나오는 에러를 뜻한다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;0으로 나누기,&amp;nbsp;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;그리고 아직 복소수를 제외하고 있기에 제곱근 안에 음수가 있는 경우&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;등등에 발생하는 에러를 위한 범주이다.&lt;/p&gt;&lt;p&gt;4. Edit error&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;Typo가 있을 때에 발생할 수 있는 에러들을 뜻한다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;숫자가 아닌 값에 대한 계산(함수는 제외한다), 좌/우 괄호의 비대칭 등이 여기에 포함된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 각각의 구분을 위해서 상위&amp;nbsp;16비트를 에러 범주 플래그로 사용하고, 이후의 16비트를 에러의 종류를 구분하는 플래그로 사용하는 열거형을 만들었다.&lt;/p&gt;&lt;p&gt;그리고, Errcode의 특수 플래그로 종료코드(QUIT = 0xFFFFFFFF)을 만들어두었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 열거형은 typedef을 사용해 이름만으로 사용 가능하게 했다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 실제로 사용할 Err_t 형을 만드는데, 저번 글에서 말했듯 이 타입은 에러의 종류, 에러의 위치를 나타낼 것이므로&lt;/p&gt;&lt;p&gt;Errcode_t 형 변수 하나와 int 형 변수 두 개가 필요하므로, 그런 구조체를 선언하였다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 Eq_t 타입을 만들어야 하는데,&lt;/p&gt;&lt;p&gt;수식은 값 하나로 끝나지 않고 어떤 값들의 배열이므로, 어떤 값의 타입을 Eq_Unit_t라고 하면, 그를 가리키는 포인터가 될 것이다.&lt;/p&gt;&lt;p&gt;Eq_Unit_t는 지금은 char형으로, 입력의 편의를 위해 설정하였다. 이후 구현에 문제가 생기면 어떤 구조체로 바뀔 수도 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;마지막으로, Num_t 타입은, 수를 표현하는 타입이므로 double의 별칭으로 해 놓았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이렇게 Calcode.h를 구성하고 나면, 이제 이 타입들의&amp;nbsp;선언을 사용할 함수들을 선언할 수 있게된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 함수들의 선언을 포함하는, Eqlib.h를 보도록 하자.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border: 1px solid rgb(203, 203, 203); padding: 10px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;ol style=&quot;margin: 0px; padding: 0px 0px 0px 48px; color: rgb(172, 172, 172); font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace, serif; line-height: 21px; background-color: rgb(248, 248, 248);&quot;&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#ifndef EQLIB_H_ //#ifndef EQLIB_H_ start&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#define EQLIB_H_ //EQLIB_H_ definition&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#include &quot;Calcode.h&quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;Err_t eq_read&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;Eq_t&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;*&lt;/span&gt;to_equation&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;Err_t eq_cal&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;Eq_t equation&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;Num_t&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;*&lt;/span&gt;result&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;void&lt;/span&gt;&amp;nbsp;eq_print&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;Eq_t equation&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;Err_t err&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;Num_t result&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#endif //#ifndef EQLIB_H_ end&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;비교적 간단하다. Calcode.h를 포함해 기본적인 타입 선언들은 모두 가진 상태에서,&lt;/p&gt;&lt;p&gt;각 함수가 어떻게 작동해야하는지만 생각해보자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;eq_read는 Eq_t 타입에 주소를 할당해야하기 때문에&amp;nbsp;Eq_t 타입 자체의 값을&amp;nbsp;바꿔야 하므로 Eq_t의 포인터를 매개변수로 사용한다. 또, Eq_t를 읽어오면서 발생하는 문제들을 반환해야하므로, Err_t 타입을 리턴한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;eq_cal은 Eq_t 타입의 값을 읽어오기만 하면 되므로 Eq_t 를, 그리고 결과 값을 돌려주어야 하므로 Num_t의 포인터를 매개변수로 사용한다. 또, 계산 과정에서 발생하는 문제들을 반환해야하므로, Err_t 타입을 리턴한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;eq_print는 Eq_t 타입, Err_t 타입, Num_t 타입의 값만을 읽어오면 되므로 각각을 매개변수로 사용한다. 리턴할 값은 (아직) 필요 없다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이렇게 코드를 작성하였으면 이제 이들 선언에 해당하는 구현을 만들어야 할 것이다.&lt;/p&gt;&lt;p&gt;즉, (가칭) Eqlib.c를 만들어야 할 것이다.&lt;/p&gt;&lt;p&gt;Eqlib.c의 구현을 대강 생각해보면&lt;/p&gt;&lt;p&gt;eq_read, eq_print는 복잡하지 않으니 넘어간다고 치더라도,&lt;/p&gt;&lt;p&gt;eq_cal은 계산식들의 우선순위를 분석하고 함수를 사용하기 위해서는 적지는 않은 함수들이 필요할 것이고,&lt;/p&gt;&lt;p&gt;이들 함수들을 모두 한 파일에 구현하기보다는 적절하게 쪼개서 구현하는 것이 더 확장하기 좋을 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;따라서 미리 간단한 디렉토리 트리를 구성해 보려고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;구조는 다음과 같다.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border: 1px solid rgb(203, 203, 203); padding: 10px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;p&gt;Cal&lt;/p&gt;&lt;p&gt;├── Eqlib&lt;/p&gt;&lt;p&gt;└── include&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; └── Eqlib&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Cal/에는 CalEqulator.c (main함수를 포함한 소스 파일)가 있으며,&lt;/p&gt;&lt;p&gt;Cal/include/에는 Calcode.h가, Cal/include/Eqlib/에는 Eqlib.h가 포함되어있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Eqlib.c의 구현은 Cal/Eqlib/에서 이루어질 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음 글은 Eqlib.c를 구현하고, 트리 구조를 보다 간편히 빌드하기 위해서 Makefile을 만드는 것으로 하려 한다.&lt;/p&gt;</description>
<category>Coding-Study-C</category>
<category>c</category>
<category>CalEqulator</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/15</guid>
<comments>https://dailykul.tistory.com/15#entry15comment</comments>
<pubDate>Sun, 10 May 2015 21:00:52 +0900</pubDate>
</item>
<item>
<title>처음부터 써 보는 C (1)</title>
<link>https://dailykul.tistory.com/14</link>
<description>&lt;p&gt;이 글을 통해서 C 계산기를 처음부터 짜 보려고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;초기 구상은 다음과 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;1. 복잡한 수식을 입력할 수 있을 것&lt;/p&gt;&lt;p&gt;2. 수식에는 간단한 수학 함수가 포함될 수 있을 것&lt;/p&gt;&lt;p&gt;3. 이전 계산 값을 참조하여 계산할 수 있을 것&lt;/p&gt;&lt;p&gt;4. 괄호, 수학 함수의 잘못된 타이핑 등의 에러가 포함될 경우, 에러의 위치를 명기할 수 있을 것&lt;/p&gt;&lt;p&gt;(5. 복잡한 함수들을 다룰 수 있도록 확장 가능할 것)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우선 main함수를 작성해보도록 하자.&lt;/p&gt;&lt;p&gt;자세한 구현들은 아직 모두 밝히지 않고, 계산기보다 가벼운 기능을 하는 여러 함수들을 불러와서 처리할 수 있는 구조를 만들어보자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;main함수의 구조는 다음과 같다.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border: 1px solid rgb(203, 203, 203); padding: 10px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;ol style=&quot;margin: 0px; padding: 0px 0px 0px 48px; color: rgb(172, 172, 172); font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace, serif; line-height: 21px; background-color: rgb(248, 248, 248);&quot;&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#include &quot;Eqlib.h&quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;co2&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;#include &quot;Calcode.h&quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;int&lt;/span&gt;&amp;nbsp;main&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot; style=&quot;color: rgb(153, 51, 51);&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Eq_t p&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Err_t err&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Num_t result&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;kw1&quot; style=&quot;color: rgb(177, 177, 0);&quot;&gt;while&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;err.&lt;span class=&quot;me1&quot; style=&quot;color: rgb(32, 32, 32);&quot;&gt;errcode&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;!=&lt;/span&gt;&amp;nbsp;QUIT&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; err&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;eq_read&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;&amp;amp;&lt;/span&gt;p&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;kw1&quot; style=&quot;color: rgb(177, 177, 0);&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;err.errcode&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;==&lt;/span&gt;&amp;nbsp;NORMAL_STATE&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; err&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;=&lt;/span&gt;&amp;nbsp;eq_cal&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;&amp;amp;&lt;/span&gt;result&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eq_print&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;err&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;,&lt;/span&gt;&amp;nbsp;result&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li1&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de1&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;kw1&quot; style=&quot;color: rgb(177, 177, 0);&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;nu0&quot; style=&quot;color: rgb(0, 0, 221);&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sy0&quot; style=&quot;color: rgb(51, 153, 51);&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;li2&quot; style=&quot;-webkit-user-select: none;&quot;&gt;&lt;div class=&quot;de2&quot; style=&quot;-webkit-user-select: text; padding: 0px 5px; vertical-align: top; color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); margin: 0px 0px 0px -7px; position: relative; background: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;br0&quot; style=&quot;color: rgb(0, 153, 0);&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;타입들을 살펴보면,&lt;/p&gt;&lt;p&gt;Eq_t는 수식을 담을 수 있는 타입(이 경우, char *),&lt;/p&gt;&lt;p&gt;Err_t는 에러코드와 에러의 위치를 담고 있는 타입(이 경우, struct)&lt;/p&gt;&lt;p&gt;Num_t는 숫자를 담을 수 있는 타입(이 경우, double)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이들 타입들과 타입에 관련된 코드(에러코드)들은 Calcode.h에 저장되어있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각 함수를 살펴보면,&lt;/p&gt;&lt;p&gt;eq_read함수는 p에 알맞은 길이의 메모리를 할당하고, p에 읽어온 수식 값을 입력한다. 이때, 입력에러등의 에러코드를 리턴한다.&lt;/p&gt;&lt;p&gt;eq_cal함수는 수식을 받아, 수식을 분석하고 결과값을 계산한다. 이때, 값 계산 과정에서 발생한 에러코드를 리턴한다.&lt;/p&gt;&lt;p&gt;eq_print함수는 수식, 에러, 결과값을 받아 출력한다. 에러가 있다면 수식의 어떤 위치에서 에러가 발생하였는지, 결과값이 얻어졌다면 어떤 수식의 결과 어떤 결과가 얻어졌는지를 표기하여야 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이들 함수들은 Eqlib.h에 선언되어있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 외에,&amp;nbsp;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;while문은&lt;/span&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;에러변수의 에러코드가 QUIT(종료를 뜻하는 에러코드)가 아닐 경우 계속 계산을 반복하도록 요청하는 역할을 한다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;자, 이렇게 계산기의 틀을 잡았다.&lt;/p&gt;&lt;p&gt;다음 글에서는 Calcode.h와 Eqlib.h를 작성하고, 폴더의 구조를 정리해보려 한다.&lt;/p&gt;</description>
<category>Coding-Study-C</category>
<category>c</category>
<category>CalEqulator</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/14</guid>
<comments>https://dailykul.tistory.com/14#entry14comment</comments>
<pubDate>Thu, 07 May 2015 23:14:43 +0900</pubDate>
</item>
<item>
<title>Hamming Code</title>
<link>https://dailykul.tistory.com/13</link>
<description>&lt;p&gt;해밍 코드(Hamming Code)는 Error Correction을 위해 사용되는 검증방식이다.&lt;/p&gt;&lt;p&gt;설명을 위해서는 [7,4] (4비트를 전송하기 위해서 총 7비트를 사용하는) Hamming Code가 주로 사용되는데.&lt;/p&gt;&lt;p&gt;Form은 다음과 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/233F543B5546C9382E&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%201%20%7D%20%5C%5C%20m_%7B%202%20%7D%20%5C%5C%20m_%7B%203%20%7D%20%5C%5C%20m_%7B%204%20%7D%20%5C%5C%20m_%7B%205%20%7D%20%5C%5C%20m_%7B%206%20%7D%20%5C%5C%20m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%3D%5Cbegin%7B%20bmatrix%20%7D%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%5C%5C%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%201%20%5C%5C%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%201%20%5C%5C%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%5Cend%7B%20bmatrix%20%7D%5Cbegin%7B%20bmatrix%20%7D%20d_%7B%201%20%7D%20%5C%5C%20d_%7B%202%20%7D%20%5C%5C%20d_%7B%203%20%7D%20%5C%5C%20d_%7B%204%20%7D%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;206&quot; height=&quot;192&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기서 d는 데이터, m은 전달할 메시지를 뜻한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;새로 추가된 비트들은&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/234B67445546C98226&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%205%20%7D%2C%5Cquad%20m_%7B%206%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;120&quot; height=&quot;27&quot;&gt;로, 각각을 보면, 각각&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2457493B5546CA0323&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%202%20%7D%2C%5Cquad%20d_%7B%203%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;101&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;을,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2661F7355546CA2D3F&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%201%20%7D%2C%5Cquad%20d_%7B%203%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;100&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;을,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2657C33B5546CA7F25&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%201%20%7D%2C%5Cquad%20d_%7B%202%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;101&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;을 사용해 만들어졌다는 것을 볼 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다른 말로는,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/234B67445546C98226&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%205%20%7D%2C%5Cquad%20m_%7B%206%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;120&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;은&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2457493B5546CA0323&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%202%20%7D%2C%5Cquad%20d_%7B%203%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;101&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2661F7355546CA2D3F&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%201%20%7D%2C%5Cquad%20d_%7B%203%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;100&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2657C33B5546CA7F25&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%201%20%7D%2C%5Cquad%20d_%7B%202%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;101&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;을 검증하는데에 사용할 수 있다는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;만일&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/243C1A375546CAD230&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%201%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;29&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;만이 에러가 있다면,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/21093E4C5546CAE92C&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%206%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;76&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;이 변화가 생길 것이고,&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/247D464D5546CB0F23&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%202%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;29&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;만이 에러가 있다면,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/221DAE335546CB232E&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%205%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;76&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;이 변화가 생길 것이고,&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어떤 데이터에 에러가 있던지 간에&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/234B67445546C98226&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%205%20%7D%2C%5Cquad%20m_%7B%206%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;120&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;의 서로 다른 부분집합만이 문제가 생긴다.&lt;/p&gt;&lt;p&gt;만일 에러가&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/234B67445546C98226&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%205%20%7D%2C%5Cquad%20m_%7B%206%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;120&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&amp;nbsp;중 하나에 생긴다고 하더라도, 7비트 전체에 에러가 1개 뿐이라면,&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/24470B3D5546CB8511&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28d_%7B%201%20%7D%2C%5Cquad%20d_%7B%202%20%7D%2C%5Cquad%20d_%7B%203%20%7D%2C%5Cquad%20d_%7B%204%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;136&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;는 정상이므로 원하는 데이터는 모두 얻을 수 있다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;즉, 위의 [7,4]Hamming Code를 사용하면, 7비트 중 1비트의 에러가 발생할 경우에는 언제든지 이를 교정할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;교정법에 대해서 보다 체계적으로 알아보자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;물론 어떤 에러가 생겨난 위치를 논리적으로 확인할 수도 있을 것이다.&lt;/p&gt;&lt;p&gt;그러나, 행렬을 사용하면 이 방법을 체계화할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위의&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/233F543B5546C9382E&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%201%20%7D%20%5C%5C%20m_%7B%202%20%7D%20%5C%5C%20m_%7B%203%20%7D%20%5C%5C%20m_%7B%204%20%7D%20%5C%5C%20m_%7B%205%20%7D%20%5C%5C%20m_%7B%206%20%7D%20%5C%5C%20m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%3D%5Cbegin%7B%20bmatrix%20%7D%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%5C%5C%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%201%20%5C%5C%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%201%20%5C%5C%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%5Cend%7B%20bmatrix%20%7D%5Cbegin%7B%20bmatrix%20%7D%20d_%7B%201%20%7D%20%5C%5C%20d_%7B%202%20%7D%20%5C%5C%20d_%7B%203%20%7D%20%5C%5C%20d_%7B%204%20%7D%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;206&quot; height=&quot;192&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;식에서, 데이터(d)에 곱해지는 행렬을 G라 하자. 그러면,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2739DC355546CC5219&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%201%20%7D%20%5C%5C%20m_%7B%202%20%7D%20%5C%5C%20m_%7B%203%20%7D%20%5C%5C%20m_%7B%204%20%7D%20%5C%5C%20m_%7B%205%20%7D%20%5C%5C%20m_%7B%206%20%7D%20%5C%5C%20m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%3D%5Cquad%20G%5Cquad%20%5Cbegin%7B%20bmatrix%20%7D%20d_%7B%201%20%7D%20%5C%5C%20d_%7B%202%20%7D%20%5C%5C%20d_%7B%203%20%7D%20%5C%5C%20d_%7B%204%20%7D%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;151&quot; height=&quot;192&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;와 같이 표현할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 메시지(m)을 수신했다고 해 보자. 우리는 메시지의 에러를 확인하기 위해서 다음과 같은 식을 사용할 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2778E14D5546CDE232&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28%5Cbegin%7B%20bmatrix%20%7D%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%5C%5C%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%5Cend%7B%20bmatrix%20%7D%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%201%20%7D%20%5C%5C%20m_%7B%202%20%7D%20%5C%5C%20m_%7B%203%20%7D%20%5C%5C%20m_%7B%204%20%7D%20%5C%5C%20m_%7B%205%20%7D%20%5C%5C%20m_%7B%206%20%7D%20%5C%5C%20m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%3D%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%202%20%7D+m_%7B%203%20%7D+m_%7B%204%20%7D+m_%7B%205%20%7D%20%5C%5C%20m_%7B%201%20%7D+m_%7B%203%20%7D+m_%7B%204%20%7D+m_%7B%206%20%7D%20%5C%5C%20m_%7B%201%20%7D+m_%7B%202%20%7D+m_%7B%204%20%7D+m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;383&quot; height=&quot;192&quot;&gt;&lt;/p&gt;&lt;p&gt;뒤의 수식을 보자.&amp;nbsp;&lt;/p&gt;&lt;p&gt;처음에&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/234B67445546C98226&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m_%7B%205%20%7D%2C%5Cquad%20m_%7B%206%20%7D%2C%5Cquad%20m_%7B%207%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;120&quot; height=&quot;27&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;를 만들 때와 같은 수식들에, 자기 자신을 더한 식들이다.&lt;/p&gt;&lt;p&gt;여기서 +는 xor을 뜻한다고 하면,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;A xor A = 0이기 때문에, 이 행렬 계산의 값은 0이 나와야 정상이다.&lt;/p&gt;&lt;p&gt;즉, 위 식에서 메시지(m)에 곱해지는 행렬을 H라고 할 때,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2226F93E5546CFA21D&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28H%5Cquad%20%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%201%20%7D%20%5C%5C%20m_%7B%202%20%7D%20%5C%5C%20m_%7B%203%20%7D%20%5C%5C%20m_%7B%204%20%7D%20%5C%5C%20m_%7B%205%20%7D%20%5C%5C%20m_%7B%206%20%7D%20%5C%5C%20m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%3DHm%3D%5Cbegin%7B%20bmatrix%20%7D%20m_%7B%202%20%7D+m_%7B%203%20%7D+m_%7B%204%20%7D+m_%7B%205%20%7D%20%5C%5C%20m_%7B%201%20%7D+m_%7B%203%20%7D+m_%7B%204%20%7D+m_%7B%206%20%7D%20%5C%5C%20m_%7B%201%20%7D+m_%7B%202%20%7D+m_%7B%204%20%7D+m_%7B%207%20%7D%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;308&quot; height=&quot;192&quot;&gt;&lt;/p&gt;&lt;p&gt;는 0이 나와야만 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;메시지(m)의 식을 데이터(d)와 전달 시에 발생하는&amp;nbsp;에러(e)의 식으로 바꾸면,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/236B53335546CF3313&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28m%3DGd+e%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;88&quot; height=&quot;24&quot;&gt;이므로, 교정에 사용할 위의 3비트를&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2577D0435546CFB122&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28s%3DHm%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;63&quot; height=&quot;24&quot;&gt;라고 하면,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2278C5455546CFFA11&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28s%3DHm%3DH%28Gd+e%29%3DHGd+He%3D0+He%3DHe%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;344&quot; height=&quot;24&quot;&gt;임을 알 수 있다. 왜냐하면,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2228DA445546D01714&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28HG%3D0%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;63&quot; height=&quot;24&quot;&gt;이기 때문이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;따라서&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2577D0435546CFB122&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28s%3DHm%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;63&quot; height=&quot;24&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;을 계산하면, 이것은 곧&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/245388495546D09613&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28He%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;35&quot; height=&quot;24&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;를 계산한 것과 마찬가지이다.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;또,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/235A563A5546DEBB01&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28H%5Cbegin%7B%20bmatrix%20%7D%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%5Cend%7B%20bmatrix%20%7D%3D%5Cbegin%7B%20bmatrix%20%7D%200%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%5C%5C%200%20%26amp%3B%201%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%201%20%26amp%3B%200%20%26amp%3B%200%20%26amp%3B%201%20%5Cend%7B%20bmatrix%20%7D%3D%5Cbegin%7B%20bmatrix%20%7D%20%5Cbegin%7B%20matrix%20%7D%200%20%5C%5C%200%20%5C%5C%200%20%5Cend%7B%20matrix%20%7D%20%26amp%3B%20%7C%20%26amp%3B%20H%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;471&quot; height=&quot;176&quot;&gt;&lt;/p&gt;&lt;p&gt;즉, n번째 비트에 오류가 있다면, s는 H의 n번째 열이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;거꾸로, s가 H의 n번째 열과 똑같다면, 즉&amp;nbsp;&lt;img class=&quot;txc-formula&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/2164C24C5546E0D01C&quot; historydata=&quot;%3Cflashrichtext%20version%3D%221%22%3E%0A%20%20%3Ctextformat%20font%3D%22Dotum%22%20size%3D%2216%22%20color%3D%222236962%22%20bold%3D%22false%22%20italic%3D%22false%22%20underline%3D%22false%22%20url%3D%22%22%20target%3D%22transparent%22%20align%3D%22left%22%20leftMargin%3D%2225%22%20rightMargin%3D%2225%22%20indent%3D%220%22%20leading%3D%220%22%20blockIndent%3D%220%22%20kerning%3D%22true%22%20letterSpacing%3D%220%22%20display%3D%22block%22%3E%28%5Cbegin%7B%20bmatrix%20%7D%200%20%5C%5C%200%20%5C%5C%200%20%5Cend%7B%20bmatrix%20%7D%29%3C/textformat%3E%0A%3C/flashrichtext%3E%2C%0A14%2C%0A0xFFFFFF&quot; width=&quot;45&quot; height=&quot;77&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;가 아니라면, 오류가 있다는 것이고, 그 위치는 n번째 비트라는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이를 확장하면,&lt;/p&gt;&lt;p&gt;n비트에 대해서 1개의 오류가&amp;nbsp;아닌,&lt;/p&gt;&lt;p&gt;n비트에 대해서 m개의 오류를 확인할 수 있는 코드를 만들 수도 있다.&lt;/p&gt;&lt;p&gt;이를 BCH code라고 하며, 이에 대해서는 (만일 다룬다면,) 다음 글에서 다뤄보도록 하겠다.&lt;/p&gt;</description>
<category>Coding-Study-Others</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/13</guid>
<comments>https://dailykul.tistory.com/13#entry13comment</comments>
<pubDate>Mon, 04 May 2015 12:04:50 +0900</pubDate>
</item>
<item>
<title>코딩은 아니지만 ORPG 정보</title>
<link>https://dailykul.tistory.com/11</link>
<description>&lt;p&gt;Roll20&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;기본적으로 제공해주는 툴도 많고,&lt;/p&gt;&lt;p&gt;그림도 검색해서 사용 가능하고,&lt;/p&gt;&lt;p&gt;돈만 있다면(?) 구매해서 진행하는 것도 가능하니 매우 좋은 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;매크로들을 익히는 것이 문제라면 문젠데,&lt;/p&gt;&lt;p&gt;간단한 매크로 /r과&lt;/p&gt;&lt;p&gt;태그 매크로 정도만 익히면 충분히 GM 할 것 같다.&lt;/p&gt;</description>
<category>Coding-Game-Others</category>
<category>Game</category>
<category>orpg</category>
<category>Roll20</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/11</guid>
<comments>https://dailykul.tistory.com/11#entry11comment</comments>
<pubDate>Tue, 17 Feb 2015 07:59:25 +0900</pubDate>
</item>
<item>
<title>Haskell 도전기 - 3</title>
<link>https://dailykul.tistory.com/10</link>
<description>&lt;p&gt;저번에 짰던 회문 코드를 메인코드를 제외하고 다른 방식으로 만들어 보았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;pallin str = (*) 2.pallinMax $ str&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;pallinMax str = maximum.pallinList 1 $ str&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;pallinList _ [] = [0]&lt;/p&gt;&lt;p&gt;pallinList num str&lt;/p&gt;&lt;p&gt;&amp;nbsp; | num &amp;lt; length str = (pallinSub num str):pallinList (num+1) str&lt;/p&gt;&lt;p&gt;&amp;nbsp; | otherwise = [0.5]&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;pallinSub num str =&lt;/p&gt;&lt;p&gt;&amp;nbsp; let rstr = reverse str&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; abbCut = (`cuttingPallin` num)&lt;/p&gt;&lt;p&gt;&amp;nbsp; in let i = (howManyRepeated str rstr num)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;in case i of&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;1 -&amp;gt; pallinChkSub (abbCut str) [] 1&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0 -&amp;gt; 0.5&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;_ -&amp;gt; pallinChkSub (abbCut str) (abbCut rstr) 2&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;pallinChkSub [] _ 1 = 0.5&lt;/p&gt;&lt;p&gt;pallinChkSub str _ 1 = 1 + pallinMax str&lt;/p&gt;&lt;p&gt;pallinChkSub str1@(_:_) str2@(_:_) 2 = 1 + max (pallinMax str1) (pallinMax str2)&lt;/p&gt;&lt;p&gt;pallinChkSub _ _ 2 = 1&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;howManyRepeated str rstr len = length $ filter (`elem` (take len str)) (take len rstr)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;cuttingPallin str len =&lt;/p&gt;&lt;p&gt;&amp;nbsp; let h1 = head.dropWhile (`notElem` (take len str)).reverse $ str&lt;/p&gt;&lt;p&gt;&amp;nbsp; in drop 1.dropWhile (/=h1).reverse.drop 1.dropWhile (/=h1) $ str&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;더 길어졌나도 싶지만, 그래도 함수 하나하나는 간결해진 것 같다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;사실 어디는 .$스타일, 어디는 ()스타일로 작성해서 좀 난잡하다. 어떻게 하면 깔끔히 할 수 있을까...&lt;/div&gt;&lt;div&gt;고민은 많이 되는데, 딱히 해법은 안 보인다&lt;/div&gt;&lt;div&gt;(사실 위의 코드도 상당히 계속 바꾸고 바꿨다...)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;반복되거나, 사용되지않는 코드들은 다 요약하고 지운 것 같은데, 혹시나 또 남아있을지는 모르겠다...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;다음 번에는, 수식(괄호 포함)을 입력받아, 전위/중위/후위식으로 출력하고 그 값을 계산해주는 프로그램을 짜 보아야겠다.&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Coding-Study-Haskell</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/10</guid>
<comments>https://dailykul.tistory.com/10#entry10comment</comments>
<pubDate>Sun, 15 Feb 2015 18:01:26 +0900</pubDate>
</item>
<item>
<title>Haskell 도전기 - 2</title>
<link>https://dailykul.tistory.com/9</link>
<description>&lt;p&gt;이번엔 저번 글에서 예고했던 바와 같이&lt;/p&gt;&lt;p&gt;회문의 길이를 찾아내는 코드를 작성해 보았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;코드는 다음과 같다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;main = do&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; print &quot;Input (String) : &quot;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; s &amp;lt;- getLine&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; print (&quot;Length of pallindrom : &quot; ++ (show (pallin s)))&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; print (&quot;Radius of pallindrom : &quot; ++ (show (div ((pallin s)+1) 2)))&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallin str = 2*(maximum (map (pallinsub str) [1..(2*(length str)-1)]))-1&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinsub str m&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | odd m = case (splitAt (div (m+1) 2) str) of&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; (str1, str2) -&amp;gt; 1 + maximum [(pallinrace (drop 1 (reverse str1)) str2 0 (minimum [(length str1), (length str2)])), (pallinrace str2 (drop 1 (reverse str1)) 0 (minimum [(length str1), (length str2)]))]&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | even m = case (splitAt (div m 2) str) of&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; (str1, str2) -&amp;gt; maximum [(pallinrace (reverse str1) str2 0 (minimum [(length str1), (length str2)])), (pallinrace str2 (reverse str1) 0 (minimum [(length str1), (length str2)]))]&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinrace [] _ _ _ = 0&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinrace _ [] _ _ = 0&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinrace str1 str2 len lim&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | len &amp;lt;= lim = if any (`elem` (take (len+1) str1)) (take (len+1) str2)&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;then let strcust2 = (dropWhile (`notElem` (take (len+1) str1)) str2)&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; strcust1 = (dropWhile (/= (head strcust2)) str1)&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; in 1 + maximum [(pallinrace (tail strcust2) (tail strcust1) 0 (minimum [(length strcust1), (length strcust2)])), (pallinrace (tail strcust1) (tail strcust2) 0 (minimum [(length strcust1), (length strcust2)]))]&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;else pallinrace str1 str2 (len + 1) lim&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | otherwise = 0&lt;/strike&gt;&lt;/p&gt;&lt;div&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/div&gt;&lt;div&gt;&lt;strike&gt;색상강조고 뭐고 하나도 없으니까 알아보기 참 힘들다.&lt;/strike&gt;&lt;/div&gt;&lt;div&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/div&gt;&lt;div&gt;&lt;strike&gt;하나 하나 나눠서 보면,&lt;/strike&gt;&lt;/div&gt;&lt;div&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/div&gt;&lt;div&gt;&lt;strike&gt;우선 main 함수&lt;/strike&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;strike&gt;main = do&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; print &quot;Input (String) : &quot;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; s &amp;lt;- getLine&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; print (&quot;Length of pallindrom : &quot; ++ (show (pallin s)))&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; print (&quot;Radius of pallindrom : &quot; ++ (show (div ((pallin s)+1) 2)))&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;가 있다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;그리고, main 함수가 호출하는 함수,&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallin str = 2*(maximum (map (pallinsub str) [1..(2*(length str)-1)]))-1&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;이 있다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;이 pallin 함수는 또 pallinsub라는 함수를 호출하는데, (정확히는 직접 호출하지는 않고, map으로 [1..(2*(length str)-1)]의 리스트에 넘겨준다.) pallinsub는 다음과 같이 생겼다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinsub str m&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | odd m = case (splitAt (div (m+1) 2) str) of&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; (str1, str2) -&amp;gt; 1 + maximum [(pallinrace (drop 1 (reverse str1)) str2 0 (minimum [(length str1), (length str2)])), (pallinrace str2 (drop 1 (reverse str1)) 0 (minimum [(length str1), (length str2)]))]&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | even m = case (splitAt (div m 2) str) of&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; (str1, str2) -&amp;gt; maximum [(pallinrace (reverse str1) str2 0 (minimum [(length str1), (length str2)])), (pallinrace str2 (reverse str1) 0 (minimum [(length str1), (length str2)]))]&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;마지막으로, pallinsub가 사용하는 함수인 pallinrace가 있다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinrace [] _ _ _ = 0&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinrace _ [] _ _ = 0&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;pallinrace str1 str2 len lim&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | len &amp;lt;= lim = if any (`elem` (take (len+1) str1)) (take (len+1) str2)&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;then let strcust2 = (dropWhile (`notElem` (take (len+1) str1)) str2)&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; strcust1 = (dropWhile (/= (head strcust2)) str1)&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; in 1 + maximum [(pallinrace (tail strcust2) (tail strcust1) 0 (minimum [(length strcust1), (length strcust2)])), (pallinrace (tail strcust1) (tail strcust2) 0 (minimum [(length strcust1), (length strcust2)]))]&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;else pallinrace str1 str2 (len + 1) lim&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&amp;nbsp; | otherwise = 0&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;사실 별로 최적화되지 않은 알고리즘인 것 같다. pallinrace를 보면, 'maximum'함수로, 두 가지 경우 중 최고의 경우를 뽑아내고 있다. 이건 만약&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;strike&gt;pallinrace (tail strcust2) (tail strcust1) 0 (minimum [(length strcust1), (length strcust2)])와,&lt;/strike&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strike&gt;pallinrace (tail strcust1) (tail strcust2) 0 (minimum [(length strcust1), (length strcust2)])가,&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;동일한 값을 가진다면 매우 의미없는 오버헤드만을 불러일으킨다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;이 두 값이 동일한지 아닌지의 여부는, 사실 판단하기가 간단하지는 않은데(C등의 언어였다면 직관적으로 만들 수 있지만, 하스켈에서는 그렇지 않은 것 같다...),&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;그렇다고 둘 중 한 값만 쓰면 잘못된 값이 나와버리기에 안된다... ㅠㅠ&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;자세한 설명이나, 알고리즘에 대한 개선점은 있다가 정신 차리고 해야겠다. 새벽은 언제나 정신건강에 안 좋다.&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p&gt;위 코드는 그냥 잘못 완성했던 코드였다.&lt;/p&gt;&lt;p&gt;조금 제정신일 때 다시 돌려보니, 너무나도 단순한 문제가 있었다.&lt;/p&gt;&lt;p&gt;;;;;&lt;/p&gt;</description>
<category>Coding-Study-Haskell</category>
<category>Haskell</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/9</guid>
<comments>https://dailykul.tistory.com/9#entry9comment</comments>
<pubDate>Thu, 05 Feb 2015 06:17:17 +0900</pubDate>
</item>
<item>
<title>Haskell 도전기 - 1</title>
<link>https://dailykul.tistory.com/8</link>
<description>&lt;p&gt;Haskell은 함수형 언어다.&lt;/p&gt;&lt;p&gt;함수형이 뭐냐?&lt;/p&gt;&lt;p&gt;다 함수란 얘기다.&lt;/p&gt;&lt;p&gt;특히, 순수 함수형 언어다. 즉, 같은 값을 넣으면 같은 값만이 나오는 언어이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;간단한 프로그램을 먼저 작성해보았다.&lt;/p&gt;&lt;p&gt;fib a b = a&amp;nbsp;: fib b (a+b)&lt;/p&gt;&lt;p&gt;fibonacci n = (fib 1 1)!!n&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;두 줄 짜리 소스코드지만, 피보나치 수열의 n번째 항을 얻어낼 수 있는 대화형 프로그램이다.&lt;/p&gt;&lt;p&gt;인터프리터가 아니라 컴파일러를 사용하도록 작성하면,&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;main = do&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;print &quot;which value of&amp;nbsp;fibonacci sequence will be calculated?&quot;&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;n &amp;lt;- getLine&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;putStr n&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;putStr &quot; th fibonacci sequence is&amp;nbsp;&amp;nbsp;&quot;&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;print (fibonacci (read n))&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;fib a b = a&amp;nbsp;: fib b (a+b)&lt;/p&gt;&lt;p&gt;fibonacci n = (fib 1 1)!!n&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이다.&lt;/p&gt;&lt;p&gt;물론 여기에는 순수하지 않은 함수가 들어가 있다. 즉, 매번 아무런 인자 없이 main을 실행시키지만, 나오는 값은 멋대로라는 거다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래도 사실 다른거 다 필요없고, 그냥 코드가 간결해서 좋은 것 같다.&lt;/p&gt;&lt;p&gt;앞으로는 이보다는&amp;nbsp;복잡한 프로그램에 도전해보고, 새롭게 배운 것들을 정리해볼 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;일단 다음으로는,&lt;/p&gt;&lt;p&gt;n개의 문자열을 입력받았을 때, 그 안에서 가장 긴&amp;nbsp;회문의 길이를&amp;nbsp;찾아내는 코드를 작성해 보려고 한다.&lt;/p&gt;&lt;p&gt;(ex. &quot;aabacdacdaadb&quot; -&amp;gt; &quot;aacdcaa&quot; -&amp;gt; 7 개)&lt;/p&gt;</description>
<category>Coding-Study-Haskell</category>
<category>Haskell</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/8</guid>
<comments>https://dailykul.tistory.com/8#entry8comment</comments>
<pubDate>Tue, 03 Feb 2015 21:47:21 +0900</pubDate>
</item>
<item>
<title>Makefile - make tool의 기초 (2)</title>
<link>https://dailykul.tistory.com/7</link>
<description>&lt;div style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;big&gt;&lt;span style=&quot;font-size: 12pt; font-family: Dotum, 돋움;&quot;&gt;1. 지난 글&lt;/span&gt;&lt;/big&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;make tool! 그것은 빌드 구조를 자동화해주는 툴이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;Makefile은? 그 설정을 해주는 파일이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;좀 더 상세히는,&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;target : dependency&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] commands&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;의 구조를 가진다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;확장자 규칙이란, .SUFFIXES에 의해 지정되고,  확장자들에게 일반화된 규칙을 적용시키는 것을 말한다. 이런 일반화된 규칙에는 물론 기본적으로 지정된 규칙도 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이제, 또 다른 유용한 도구인 '매크로'에 대해 알아보자!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;big&gt;&lt;span style=&quot;font-size: 12pt; font-family: Dotum, 돋움;&quot;&gt;2. 매크로 겉핥기&lt;/span&gt;&lt;/big&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로란 무엇인가?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;프로그래머들에겐 이렇게 설명하는게 가장 좋을 것 같다. 변수!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;OBJ = main.o&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이라고 해 놓으면,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;$(OBJ)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;는 main.o와 동일한 값을 가진다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로를 부르는 방법은 $이름, $(이름), ${이름}이 가능하다. 이 중, $(이름)이 자주 쓰인다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이전 글의 예제 빌드 트리 &lt;/span&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 1-2-4&lt;/span&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;를 다시 생각해보자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;program : main.o calculate.o readData.o writeData.o&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] gcc -o program main.o calculate.o readData.o writeData.o&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;main.o : main.c calculate.h readData.h writeData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;calculate.o : calculate.c calculate.h readData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;readData.o : readData.c readData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;writeData.o : writeData.c writeData.h readData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-2-1 &lt;/span&gt;&lt;span style=&quot;color:#5369be;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;(1-2-4)&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;program 부분을 보자. program과, main.o calculate.o readData.o writeData.o가 반복되는 것을 볼 수 있다. 잘 알다시피, &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;반복은 귀찮다&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;. 이것을 간단하게 매크로로 바꾸면 어떻게 될까?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TARGET = program&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;OBJC = main.o calculate.o readData.o writeData.o&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;$(TARGET)&lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt; : $(OBJC)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] gcc -o $(TARGET) $(OBJC)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;main.o : main.c calculate.h readData.h writeData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;calculate.o : calculate.c calculate.h readData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;readData.o : readData.c readData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;writeData.o : writeData.c writeData.h &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;readData.h&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-2-2&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-2-1&lt;/span&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;에서의 반복되는 구문이 간결하게 줄어들고, 파일은 훨씬 알아보기 쉬워졌다. 물론 관리하기도 훨씬 편해졌다. 만일 추가해야하는 object파일이 있다면, 그냥 맨 위의 OBJC 매크로에 추가해주면 된다. 모든 program 관련 커맨드에 일일히 입력해줄 필요가 사라진다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;target도 마찬가지다. 갑자기 결과 파일의 이름을 program이 아니라 project로 바꾸고 싶어졌다면? 모든 program 부분을 찾아 바꾸기로 바꿀 수 있을 지 모르지만, 그러다가 쓸데없는 부분(에코 메시지, 주석 등)도 바꾸어버릴 수 있다. 매크로를 사용하면 걱정을 던다. TARGET 매크로만 바꾸어주면 되기 때문이다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;자, 그럼 이 매크로에 대해서 차근차근 더 알아보자!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;big&gt;&lt;span style=&quot;font-size: 12pt; font-family: Dotum, 돋움;&quot;&gt;3. 매크로 파고들기&lt;/span&gt;&lt;/big&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로에 대해서 상세히 알아보려면, 다음과 같은 것들을 생각해 보아야 할 것이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt; 첫째, 매크로를 정의하는 방법은 뭘까?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt; 둘째, 매크로를 재정의할 수 있나?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt; 셋째, make가 기본적으로 제공하는 매크로가 있을까?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;조금 균형이 맞지 않아보이지만, 첫째와 둘째의 내용은 3.1절과 3.2절에서, 셋째의 내용은 다음의 글에서 다뤄볼 것이다. 내용의 양을 보면, 왜 이렇게 배치했는지 이해하시리라 믿는다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;big&gt;&lt;span style=&quot;font-size: 12pt; font-family: Dotum, 돋움;&quot;&gt;3.1. 매크로의 정의&lt;/span&gt;&lt;/big&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로를 정의하는 방법은 몇 가지가 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;우선, 매크로 정의의 구조에 대해서 알아본 다음, 정의구두점인 =와 :=,::= 그리고 !=와 ?=에 대해서 알아보자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로의 정의는&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로 이름 [정의구두점] 매크로 값(들)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;로 주어진다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;예를 들어, GAME이라는 이름의 매크로에 game.c와 physics.c를 넣고 싶다면,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;GAME = game.c physics.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;라고 하면 된다. 값들의 사이는 ' ' (띄어쓰기)로 구분된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이게 정의하는 방법이다. 이렇게 정의된 매크로를 사용하는 방법은 위에서 말했듯, $(매크로 이름)이다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;그러면 매크로 이름은 어떻게 만들까? 매크로 이름으로 가능한 문자는, ':', '#', '='을 포함하지 않는 모든 아스키 문자들이다. 그러나 '.'으로 시작하는 매크로들은 make에서 사용할 수도 있기 때문에, 되도록이면 A-Z, a-z, 0-9, _만 쓰도록 하자. 또, 매크로 이름은 대소문자를 구별한다. 실수로 I(아이)를 l(엘)대신에 입력한다거나 하지 않도록 하자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;그렇다면 이제, [정의구두점]의 자리에 들어갈 수 있는 녀석들에 대해서 알아보자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;=는 매우 간단하게도, 재귀 확장 정의를 말한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;간단하게도??? 지금 장난하나?? 싶을지도 모르니, 차근차근 설명해보자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR = $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;MAR = make.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR = main.c $(MAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all :&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(VAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(MAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all이라는 타겟이 등장했지만, 이 내용은 다음 글(후에 링크를 추가하도록 할 것이다.)에서 다루기로 하고, 우선은 이하의 내용은 그냥 실행되는 것(@는 단순히 실행하는 커맨드를 보여주지 않도록 하는 Makefile의 기능이다.)이라고 생각하고 위 Makefile을 보자. 매크로들을 위에서부터 순서대로 풀어나가려고 하면, 문제가 발생한다. 일단, 처음에는 TAR이 정의되어있지 않다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;그러면, 아래서부터 순서대로 풀어나가면 괜찮을까? 아니다. 마찬가지로, 맨 아래에서는 MAR이 정의되어있지 않다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;그러나 =로 정의한 매크로들은 반복해서 확장을 시도한다. 따라서 VAR에는 $(TAR)이 아니라 main.c make.c가 들어있게되고, TAR또한 main.c make.c사 들어있게 되는 것이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;따라서&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR = main.c $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-2&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;과 같이, =로 자기 호출을 하는 매크로는 절대 만들어서는 안된다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;자, 그러면 :=와 ::=는 무엇일까? 이들은 단순 확장 정의이다. 이건 무얼까? 짐작하겠지만, 재귀 확장 정의와는 반대되는 것이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;(여기서 주의 하나! 단순 확장 정의는 gnu make 확장 기능이다. 다시 말해, 다른 make 버전에서는 작동하지 않을 수 있다. 주의하자.)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR := main.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;MAR := $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR := make.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all :&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(MAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-3&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이 파일을 돌리게 되면, MAR은 main.c, TAR은 make.c를 가지게 된다. 즉, 순서대로 확장될 뿐이지, 이미 확장된 것을 반복해서 다시 확장하지 않는다는 것이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이 특징은 자기 자신으로 정의되는 매크로에서 가장 분명히 나타난다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR := main.c $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;와 같이, 자기 자신으로 정의된 매크로는, 단순히 이 정의 이전에 정의되어있던 TAR에 main.c를 추가할 뿐이다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;물론 지금까지의 내용으로는 다음과 같은 의문이 생길 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;small&gt;&lt;span style=&quot;font-size: 8pt; font-family: Dotum, 돋움;&quot;&gt;&quot;그래서 확장되고 하는게 뭐 순서가 어떻다구요??? 저거 둘이 섞여있으면 어쩌라구요? 뭐가 순서대로 확장되고 뭐가 계속 확장되는 거에요?&quot;&lt;/span&gt;&lt;/small&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;자, 그러면 조금만 더 복잡한 예제를 보고 두 내용을 정리해보도록 하자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR = main.c $(VAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR = make.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;MAR := $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR := make.c $(VAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all :&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(MAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(VAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;여기서 각 매크로들의 값은 무엇일까?&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;차근차근 생각해보자.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;우선 정의되는 수순을 생각해보자.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR은 VAR을 포함한다. 하지만 아직 VAR은 정의되지 않았으므로, 공백이라고 생각하면 된다. 따라서 TAR은 main.c이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR은 make.c이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;MAR은 $(TAR)이다. 이전에 정의된 TAR은 재귀 확장 매크로이므로 이 시점에서 TAR이 재 확장되는데, 이 때 VAR이 정의되었으므로 TAR = main.c make.c가 된다. 따라서 TAR은 main.c make.c이고, MAR도 main.c make.c이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;마지막 VAR은 make.c $(VAR)이다. 이전에 정의된 VAR이 재귀 확장 매크로이므로, 이 시점에서 다시 확장을 시도한다. 그러나 이전에 정의된 VAR은 그냥 make.c이므로, 더 확장될 것이 없다. 그대로 대입되면, 새로운 VAR은 make.c make.c이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;(주의! 매크로 내에서 중복은 얼마든지 허용된다! 그렇기 때문에 MAR = main.c $(MAR)과 같은 정의가 잘못된 것이다!)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이제 각각의 매크로의 사용을 생각해보자. TAR을 부르면 어떻게 될까? TAR은 다시 확장을 시도한다. 그런데 이것은 VAR을 부르기 때문에, VAR의 확장 여부를 확인해야한다. 그런데 VAR은 이제 단순 확장 매크로이다. (자세한 내용은 뒤의 재정의에서 다룰 것이다.) 따라서 더이상의 확장은 없다. 현재 VAR은 make.c make.c이기 때문에, TAR은 main.c make.c make.c가 된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR을 부르면 어떻게 될까? VAR은 이제 단순 확장 매크로이기 때문에 VAR은 더 이상 확장되지 않는다. 따라서 make.c make.c가 된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;MAR을 부르면? 마찬가지로 확장되지 않고, main.c make.c가 얻어진다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이상을 요약하면, &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;재귀 확장 &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;정의는 정의될 때를 포함하여, 매 번 불려질 때마다 (현재의 매크로 환경에서) 다시 확장을 시도한다.&lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt; &lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;반면에, &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;단순 확장 정의는 처음 정의될 때에만 확장을 시도한다.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이제 다음 구두점들을 알아보자. 다른 것들은 상대적으로 훨씬 가볍다. 심지어 예제조차 필요 없을 정도이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;!= : 값을 shell에서 실행하고, 그 결과값을 매크로에 넣는다. find등의 shell명령어를 사용할 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;?= : 매크로가 정의되지 않았을 때만 정의한다. 즉, 전에 정의한 값을 절대 지우지 않는다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이 정도이다. 간단하지 않은가? 그래도 한 번 예제를 보기는 하자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR != find *.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR ?= $(MAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;TAR ?= nothing&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all :&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(VAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(TAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-6&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;위 예제에서 VAR값은 현재 디텍토리의 모든 .c파일, TAR값은 nothing이라는 것을 쉽게 알 수 있을 것이다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;big&gt;&lt;span style=&quot;font-size: 12pt; font-family: Dotum, 돋움;&quot;&gt;3.2. 매크로의 재정의&lt;/span&gt;&lt;/big&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;매크로를 어떻게 다시 정의할 수 있을까?&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;답은 간단하다. 다시 정의하면 된다. &lt;/span&gt;&lt;/b&gt;&lt;/b&gt;&lt;br /&gt;&lt;small&gt;&lt;span style=&quot;font-size: 8pt; font-family: Dotum, 돋움;&quot;&gt;&quot;언제 예전 매크로를 일일이 써? 귀찮아 죽겠는데!&quot;&lt;/span&gt;&lt;/small&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;물론 그렇다. 예전의 내용을 유지해야 할 때도 있고, 예전의 내용을 일부만 바꾸어야 할 때도 있다. 그런 때에는 어떻게 할 수 있을 지를 포함해서, 하나하나 살펴보도록 하자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;우선, VAR을 정의했다가, 재정의하고 싶다고 하자. 이 때에는 다음과 같이 다시 정의하면 된다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR = main.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR = daRunGeo.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all :&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(VAR)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-7&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이러면 VAR은 daRunGeo.c를 내용으로 가질 것이다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt; &lt;/span&gt;&lt;br /&gt;&lt;small&gt;&lt;span style=&quot;font-size: 8pt; font-family: Dotum, 돋움;&quot;&gt;&quot;아까 단순확장이랑 반복확장을 서로 바꿔서 재정의하는 경우도 알려준다면서요?&quot;&lt;/span&gt;&lt;/small&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;물론 그렇게 교차해서 정의할 수 있다.(당연히 남용하지는 말자. 좋은 생각은 아니다.) 이 경우, 마지막으로 정의된 속성이 그 매크로의 속성이 된다. &lt;/span&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-5&lt;/span&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;를 다시보면, VAR이 재귀 확장 매크로에서 단순 확장 매크로로 바뀐 것을 알 수 있을 것이다. (혹시나 직접 확인해보고 싶거든, @echo $(VAR)대신에 $(info $(flavor VAR))을 사용해보아라.)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;자, 완전히 재정의하는 방법은 배웠다. 그렇다면 매크로에 내용을 추가하는 방법은 무엇이 있을까?&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;small&gt;&lt;span style=&quot;font-size: 8pt; font-family: Dotum, 돋움;&quot;&gt;&quot;그냥 VAR = 추가할 거 $(VAR)처럼 하면 되잖아?&quot;&lt;/span&gt;&lt;/small&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;물론 그렇지만, 매크로명이 길어지게 되면 똑같은 매크로명을 두 번 쳐줘야 추가할 내용을 넣을 수 있다는 단점이 있다. 또 다른 방법은, 새로운 정의 구두점인 +=을 쓰는 것이다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;아, 물론 별로 새롭지 않다... C와 엮인 언어를 써보신 분들이라면 한 번씩은 만나봤을 연산자다. 그런 분들께서는 아마 다음과 같은 정의가 무슨 뜻인지 파악하실 것이다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;VAR += new.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;생각하신대로, 원래 VAR매크로의 내용에 &quot;new.c&quot;를 추가하는 정의이다. 원래 VAR매크로의 내용이 있었다면, 구분자의 역할을 하는 띄어쓰기도 또한 추가된다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이제 매크로를 완전히 새로 쓰는 법, 그리고 이전의 매크로에 무언가를 추가하는 법을 배웠다. 그렇다면 이전의 매크로를 조금 바꾸는 방법(예를 들면 매크로 내용에 있는 파일들의 확장자를 바꾼다거나...)은 무엇이 있을까? 여기에는 비슷해보이지만 약간 다른 두 방법이 있다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;1. $(VAR:.o=.c)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;2. $(VAR:%.o=%.c)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;첫번째 방법은 모든 .o텍스트를 .c로 바꾸는 것이다. 예를들어 VAR에 is.output이라는 내용이 있었다면, is.cutput으로 바뀌게 된다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;두번째 방법은 살짝 복잡한데, (함수형 언어들에서) '패턴 매칭'이라고 부르는 것을 수행하는 것이다. 정확히 (어떤텍스트들).o의 형태를 가진 것만이, (어떤텍스트들).c로 전환되는 것이다. 따라서 위의 예제에서 is.output은 (어떤텍스트들).o(어떤텍스트들)이기 때문에 is.cutput으로 바뀌지 않는다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;자, 그러면 예제를 보자.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;SRCS = main.c hello.c world.c&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;OBJC = $(SRCS:%.c=%.o)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;all :&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(SRCS)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;[TAB] @echo $(OBJC)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(83, 105, 190); font-family: Dotum, 돋움;&quot;&gt;Makefile 2-3-8&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;OBJC 매크로의 내용은 뻔하지 않은가?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;big&gt;&lt;span style=&quot;font-size: 12pt; font-family: Dotum, 돋움;&quot;&gt;4. 마치며&lt;/span&gt;&lt;/big&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Dotum, 돋움;&quot;&gt;이번 글에서는 비교적 무의미한 예제들만을 다루었던 것 같다. 다음 글에서 이전 글의 예제를 조금 더 활용해 볼 것이다. 다음 글을 기다려보자.&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Coding-Study-Linux</category>
<category>makefile</category>
<author>DailyKul</author>
<guid>https://dailykul.tistory.com/7</guid>
<comments>https://dailykul.tistory.com/7#entry7comment</comments>
<pubDate>Sat, 31 Jan 2015 11:25:14 +0900</pubDate>
</item>
</channel>
</rss>