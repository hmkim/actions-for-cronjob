<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Thomas Jang on Medium]]></title>
        <description><![CDATA[Stories by Thomas Jang on Medium]]></description>
        <link>https://medium.com/@axisj?source=rss-1394c533dcdd------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*u9UU8RHBY7tPpA8WdZVRSw.jpeg</url>
            <title>Stories by Thomas Jang on Medium</title>
            <link>https://medium.com/@axisj?source=rss-1394c533dcdd------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 04:23:00 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@axisj" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Why did we choose React and TypeScript for QueryPie?]]></title>
            <link>https://medium.com/querypie/why-did-we-choose-react-and-typescript-for-querypie-56c9b2ab352?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/56c9b2ab352</guid>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[english]]></category>
            <category><![CDATA[querypie]]></category>
            <category><![CDATA[typescript]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Thu, 21 Feb 2019 09:20:15 GMT</pubDate>
            <atom:updated>2019-02-21T10:42:20.832Z</atom:updated>
            <content:encoded><![CDATA[<h4>QueryPie development #8: Background on Front-end Developing</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sj6wCPhOSbXopKIF1rApAA.png" /></figure><p>📑한국어(Korean Version)- <a href="https://medium.com/p/111d03597510/">https://medium.com/p/111d03597510/</a></p><p>The fastest thing in the world is time. It feels like just yesterday when I started my first Sprint. I was so excited about what was going to happen in the future!</p><p>And now the third sprint is already over.</p><p>After wrapping up my second blog, it suddenly occurred to me that the start of the development subject was wrong.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8B4mQOAHdnJVVB33r9PjhA.png" /><figcaption>Version Report of the QueryPie Development Team, which is working incredibly hard</figcaption></figure><blockquote>“Why did I write this before the launch? Shouldn’t I have written about the background of how I developed this application?”</blockquote><p>In fact, developing QueryPie was a job that could not be planned, designed and developed as quickly as creating a customer’s homepage or ERP (Outsourcing service or SI) that I have made in the past. So I thought it would be nice to write down the difficult problems and new discoveries I experienced while developing. I also want to talk about the development background.</p><p>So today, I want to go back in time and tell you where all this started.</p><h3>Start of Open Source Activity</h3><h4>AXISJ Project</h4><p>I started doing open source and outside activities with my own JavaScript UI Component, which I created in 2013. It was an open source project named <a href="http://www.axisj.com">AXISJ</a>. I’d never before worked so hard on something that didn’t make me money. I even had to spend more of my own money!</p><ul><li>The <a href="http://www.axisj.com">AXISJ</a> project has been renewed and reborn as a project called <a href="http://ax5.io">AX5UI</a>.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RKQRcWDJhntIolLPfDfOzA.png" /><figcaption><a href="http://ax5.io">ax5.io</a></figcaption></figure><blockquote>“I wanted to work hard on open source and become famous.”</blockquote><p>I don’t know why I wanted to be famous. Probably because I wanted to get attention from the people in my life. I was never a genius, but I was able to continue to achieve results because I was confident in my ability to work harder than anyone else. So I joined several developer contests and finally felt like a very useful person after winning some awards.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*W3_0fExbkfH0TtnE_fBKvA.png" /><figcaption>Competition Award Certificates in the office</figcaption></figure><p>But there were more struggles than enjoyment. The distance between doing what I enjoyed and making money from it didn’t get any shorter, and it wasn’t easy to maintain a positive outlook. Of course I never regretted my choice, and being able to meet amazing people through my experience with open source made it all worth it.</p><p>In fact I want to briefly talk about the people I met and how we came together.</p><h4>New Partners and the beginning of CHEQUER:</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/721/1*-x6c8xO9VSV3cp_KvB7RAA.png" /><figcaption>From the left: Benjamin, Brant, Woo</figcaption></figure><p>When I had just started working with open source, it was <strong>Benjamin </strong>who first connected with me. He was a developer and the CEO of a database management tool called SQLGate. His affinity was beyond my imagination. Due to his openness, I felt more inclined to encourage everyone who sponsored the AXISJ project to help me. Thanks to Benjamin, I had many opportunities to meet good people.</p><p>Next came <strong>Brant</strong>. I had never met someone like him before. He was interested in computer programming since he was an elementary school student. But he dropped out of high school to continue studying on his own. He was a gifted programmer that joined KAKAO(a very well-known software company in South Korea) as a software engineer and later got his Master’s Degree at KAIST (a prestigious college in South Korea). After working with KAKAO for a few years, he left the company to start his own. I joined him, and together the two of us created <a href="https://medium.com/chequer">CHEQUER</a>.</p><p>Because the 2 CHEQUER founders were developers, we were more focused on how we would develop rather than <strong><em>what</em></strong> we would develop. Shortly after the company was created, Benjamin offered to join us. He was ready to stake everything on this new company, and brought SQLGate with him. The three of us became the founders of a company that planned to make SQLGate the number one software used by developers and data analysts around the world.</p><p>Then came <strong>Woo</strong>, who played a crucial role in our development with React and TypeScript. Before I met him, I always thought about learning new development languages such as React, VueJS, and AngularJS due to limitations I experienced when developing. Woo was also an open source developer, and his advice was of great help to me. He was like an encyclopedia! He helped me find my footing and showed me that <strong>React was better for my style of developing</strong>. Encouraged by him, I studied React tutorials and made DataGrid.</p><blockquote>“Our background story is pretty long, but I tried my best to make it short. As I write this and think back on my experiences, I wonder, ‘What was the purpose of all that alcohol we drank together?’“</blockquote><h3>Making a prototype for SQLGate 5</h3><p>SQLGate was a software that only worked on Windows. But in my mind, it should have been a cross-platform application to become software used world-wide. So I had to think about how to <strong>create new software</strong> that worked on any OS.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*MmziCwAtOaTIW_77.jpg" /><figcaption>SQLGate 실행화면 (<a href="https://www.sqlgate.com/product/main-features">주요기능 보기</a>)</figcaption></figure><p>I thought that by using <a href="https://nwjs.io/">NodeWebkit</a> or <a href="https://www.teamdev.com/jxbrowser">JXBrowser</a> we could make the software we wanted. We used WebView as a Render, which frees the View portion of the application from OS dependency and can be developed by utilizing the experience of Web technology. In fact, such a method of development is not hard to find today. Several software such as Slack, VSCode, Atom, and GitKraken use this method to support multiple Operating Systems.</p><blockquote>“In the past, these hybrid types of applications did not receive much attention because they were slow to respond to UI and did not effectively handle OS resources. But these days, they are overcoming performance issues since hardware performance has accelerated.”</blockquote><p>Even if we used WebView to develop, we knew it was impossible to replicate the capabilities of the existing SQLGate functions in our newly created software with the resources available to us. For me, it was also a priority to see how efficient it was to develop in this manner.</p><h4>So I decided to make a prototype under the name of SQLGate 5:</h4><p>I wanted to create a prototype for two months and see how we could orient ourselves in the future. I needed to check if we had the right idea. With the back-end developed using JAVA as the base, front-end used jQuery and my own AX5UI. In this way, I created an application compatible with JAVA using JXBrowser.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FnehZNne36I8%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DnehZNne36I8&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FnehZNne36I8%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/3263552f2d319ef436665750050ae677/href">https://medium.com/media/3263552f2d319ef436665750050ae677/href</a></iframe><p>After finishing the prototype, the result was rather good. But as a front-end developer, I was worried. If I lived as an application developer, I would worry about it until I died. But I have come to the conclusion that the current application has some goals to achieve, and these top-three concerns have caused me some sleepless nights:</p><ol><li>Can you make changes to the application as quickly as desired at any time?</li><li>Can we make DOM controls more convenient and secure?</li><li>Can we check if there is a problem in real time?</li></ol><h4>Problem 1. Complexity of Adding and Changing Features</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yY4_9xI5uZihXwtf3l_hXg.png" /><figcaption>Process flow for simple applications</figcaption></figure><p>For simple applications, it is often effective to create components (like Search Toolbar and Contents as shown in the image above). If the component is bundled with features that are expected to be user actions, it can easily configure a high-completion screen when making a new screen in application, or making a new application. This can be done by pasting the code, transferring or importing inputs to the component, and aligning the event handler that occurs within the component.</p><p>Although this method of component-focused screen development was familiar and comfortable, the situation was different with our prototype.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hhtn7IuK_x4AQU9lpz0qxQ.png" /><figcaption>Process flow of complex applications</figcaption></figure><p>The types and number of components were different from the websites and web-admin systems that we used to create, and so was the function of processing the actions of the components.</p><p>The problem of large numbers was overcome with honed and experienced development skills. But it became like a web of interaction between functions and components, and I was afraid that <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effect</a>s would occur whenever I added or changed functions.</p><blockquote>“The side effect problem can be overcome by using the test code.. but correcting the error was so complicated and difficult that I felt like I was trying to re-draw the Tokyo subway map in my head every time.”</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*ealvmIg8FNolxSOL.jpg" /><figcaption>Tokyo Subway Map</figcaption></figure><h4>Problem 2. Poor DOM Control</h4><p>Since the software we create is a tool that can look up various information in the database and send queries to view results that users want, we naturally have to do a lot of work to change the DOM.</p><p>That’s a lot of data being printed out.</p><p>The quickest way to add/change/delete DOM Nodes is by using VanillaJS (developer slang for using Standard APIs without Framework or libraries). But this way is rather unproductive in a real development environment. The best way to use standard APIs without frameworks or libraries is to create screens without the help of template engines in the real development environment.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*pn1HAodXMR9GxDLjPay_og.png" /><figcaption>Framework DOM Operation Performance (<a href="https://krausest.github.io/js-framework-benchmark/current.html">https://krausest.github.io/js-framework-benchmark/current.html</a>)</figcaption></figure><p>So we had to find a good and easy-to-handle template engine and manage it so that the template codes needed for each screen were not wasted. Unfortunately, getting a list of templates in a design document and keeping them in your head has limits.</p><p>And the bigger problem was that after converting the template code into template engine, there was a flickering phenomenon in DOM Node. In addition, the events bound to DOM Node had a problem of unbinding before the screen was re-drawn and then binding again.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I7CY1zuY10Fc07UBBOM25g.png" /><figcaption>Template Engine Process</figcaption></figure><p>In the meantime, we worried about whether <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">Garbage collection</a> was doing well and if there was a memory leak, but it was impossible to check every single aspect in a short time.</p><p>I thought I could overcome this problem if I split and managed as many targets as I could, but I couldn’t find the perfect balance.</p><h4>Problem 3. Lack of Error Reports</h4><p>If the owner of a newly opened restaurant is able to know and understand everything the customer feels, then that restaurant will be a huge success. But it is not easy to gauge the satisfaction level of customers from different backgrounds when it comes to aspects like the taste of food, enjoyment of atmosphere, cleanliness, music and service.</p><p>But I wanted to make it possible to know as much as possible in the applications that we created. And as a creator, I wanted to know whether there were any errors or inconveniences during usage. But since I couldn’t ask users directly, I had to rely on the errors delivered to the server using the window.onerror handler.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4f75441fa7560abec27c6c6b057b5dea/href">https://medium.com/media/4f75441fa7560abec27c6c6b057b5dea/href</a></iframe><p>After running into these problems, we considered a new development environment. That’s how QueryPie was born.</p><h3>Switching to React &amp; Typescript</h3><h4>jQuery: developed for 10 years</h4><p>I have used jQuery since 2009. Because web browser fragmentation was so severe at that time, jQuery was used by many people.</p><p>It was really hard to conclude that we should stop using jQuery, which has been around for nearly a decade. In my case, I made AX5UI alone for about a year by using jQuery! So I was anxious about leaving my comfort zone to switch to a new environment.</p><p>But due to the problems encountered while making the prototype, and after some discussion with <strong>Woo</strong>, I realized there was need for a change.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*knVEeIsK_lwDfmYwafc9BA.png" /><figcaption>AX5UI Commit Graph</figcaption></figure><p>So I began to consider using React to develop. At first I used the existing UI components to operate in React, but that meant that I would have to use jQuery in the React code (which is just unbearable as a developer) or I had to recreate all the existing UI components.</p><p>Of course, the basic UI components needed to configure the application could be resolved by choosing a well-crafted UI Framework for React. But I wanted to <strong>personally</strong> make <strong>DataGrid </strong>myself.</p><h3>DataGrid after Refactoring Three Times</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-aRdyqExGCnXf2TqUsABig.png" /><figcaption>axui-datagrid (<a href="https://axui-datagrid.jsdev.kr/introduction">https://axui-datagrid.jsdev.kr/</a>)</figcaption></figure><p>DataGrid has undergone a total of three refactoring sessions. The <strong>first </strong>time, I recreated all the codes with the introduction of TypeScript. The <strong>second </strong>time, I removed the Redux and turned it into a dependent component using ContextAPI. And finally the <strong>third </strong>time, I organized the internal state and external props.</p><h3>Making QueryPie with React &amp; Typescript</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*T2_iPtYMb0bLcaVXgXdM0Q.png" /><figcaption>QueryPie Prototype</figcaption></figure><p>So let’s move on to the main topic, and look at how the three concerns that I encountered before can be resolved by using React.</p><h4>Solution 1. Flexibility of Adding and Changing Functions</h4><p>Let’s consider the situation of adding functionality to applications while developing with React and TypeScript. Suppose that with a particular screen created, the requirements change and that you need to add search criteria to the list.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*o3qelNtffTDm4o7wo6gwPQ.png" /><figcaption>Screen with a List</figcaption></figure><p>In this case, you can add a separate Filter component without adding a search UI to the existing List component, and then use a combination of List and Filter. The code in the picture above is a simple form that is only a few lines, but the components we actually meet can be huge and tricky.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ZUpidRxgnnIFpay5nlxiPg.png" /></figure><p>So you have to modify Filter to receive Filter Props from the List component and create a new filter component so that the filter value entered in the Filter is transmitted to the List component. In List, you can output the List according to the Filter without considering what happens outside the List.</p><p>This method of development can minimize the dependence of the component. And when adding or changing the function, you can create more flexible and less ‘side-effect’ code.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2F9yyqwvp8xr&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2F9yyqwvp8xr&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2F9yyqwvp8xr%2Fscreenshot.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codesandbox" width="1000" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/0776179b0e7dcad6e9288ff0d0896817/href">https://medium.com/media/0776179b0e7dcad6e9288ff0d0896817/href</a></iframe><p>With the addition of new features, changes in the existing code List component are minimized as shown below and are not dependent on the newly added Filter component, so even if the future List is combined with other components (in most cases) it can be reused without major problems.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*879ZlZrKhSfgtsz12gEXHg.png" /></figure><p>The benefits of module coding from using Reacts are even greater with the use of ES6 and TypeScript. The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructuring assignment</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow function</a> added from ES6 allow the JSX code to be concise. TypeScript allows the specifications of the Props and Arguments used by the components and functions to be used without having to study them separately.</p><p>The QueryPie development team uses Mobx and <a href="https://github.com/mobxjs/mobx-state-tree">MST</a>. If the model and component are separated, the model and API communicate to change the Store of the model, and the component can proceed with development only by looking at the data contained in the model.</p><p>For more information, check out Woo’s article <a href="https://medium.com/querypie/4b7af8b7d28f"><strong>here</strong></a><strong>.</strong></p><h4>Solution 2. Convenient and Secure DOM Control</h4><p>As we can see from the <a href="https://krausest.github.io/js-framework-benchmark/current.html">Framework DOM</a> operation performance mentioned above, controlling the rendering using React is not the only way to increase the rendering speed.</p><p>But the difference in speed is much smaller than the blink rate (100~150ms on average), and I think the UX experience is more important than the arithmetic value.</p><p>I’m sure everyone has heard how React <a href="https://reactjs.org/docs/faq-internals.html">Virtual DOM</a> is effective because of its fast rendering. It’s hard to explain in detail because I didn’t create Virtual DOM, and I don’t know much about the internal principles and structures (though I hope one day I’ll be able to). So I’ll discuss the difference between using React to develop versus my old method.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fzv2uue4zyV0%3Fstart%3D16%26feature%3Doembed%26start%3D16&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dzv2uue4zyV0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fzv2uue4zyV0%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/89316084c75df91551f952ebc081473b/href">https://medium.com/media/89316084c75df91551f952ebc081473b/href</a></iframe><p>As you can see in the video above, scrolling shows that the element to be printed is being rebuilt in the table. There are also flickering phenomenon when scrolling quickly. This is because browsers such as IE do not direct the landing as the wheel is scrolled, but instead perform a throttled process to solve the slow scrolling issue.</p><p><strong>So how is the DataGrid made in React any different?</strong></p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fwe6zFAU9C4s%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dwe6zFAU9C4s&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fwe6zFAU9C4s%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/0930ea884171fa57da5a85fc2e5a6885/href">https://medium.com/media/0930ea884171fa57da5a85fc2e5a6885/href</a></iframe><p>React finds and changes each part of the DOM to be changed every time it scrolls. Developing with React allows the user to feel that the data is changing more naturally and smoothly since the structure of the DOM doesn’t change, and only the contents or attributes change.</p><p>Since the developer does not directly control the speed of which React’s render function runs, there is no need to worry about frequent changes in the data.</p><p>React is already being used in many global services, so many people around the world have been testing it. Even though we haven’t met them personally, we are <strong>sure </strong>that the react development teams are using so many resources for their project.</p><h4>Solution 3. Improving Error Reports</h4><p>Before we discuss error reports, let’s talk about when and what error is generated by the developer.</p><blockquote>“Actually, we’re still working on our error reports so it’s hard to go into too much detail. Sorry. :( ”</blockquote><p>Most of the errors that pop up during developing are due to simple mistakes. You might stumble on many errors in one day, and find out eventually that most are due to small typos.</p><p>We could definitely save a lot of time if typos didn’t exist. And using TypeScript was the most satisfying method I’ve ever tried that prevents typos.</p><h4>(1) VSCode + TypeScript</h4><p>Six months ago, I was an IntelliJ user. IntelliJ is a powerful tool still used by many developers, but it is considered as an inconvenient tool at least for front-end developers who use React and TypeScript.</p><p>When developing with VScode, components used for JSX tags, component properties, functions, and factors of functions can be developed as pop-ups.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bTGSmcnZU3aQj9iY57qYdg.png" /><figcaption>AntD Tree Component Information Check</figcaption></figure><p>When using UI Framework such as AntD, the most difficult aspect is memorizing which attributes you have and how to use them, because you don’t use your own code. (*I‘m not sure if there are different methods these days, but the old people memorized it all…)</p><p>This method can be convenient because VSCode is easy to identify and helps reduce errors.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eixtc_szgARDvakMBW3Rqg.png" /><figcaption>AntD Tree component auto completion</figcaption></figure><h4>(2) Shared code: All variables and functions can be defined</h4><p>Many people have successfully developed with JavaScript for a long time, and what sets those people apart is their excellent application. It’s a key factor in developing JavaScript by ES5.</p><p>Though there are many ways to make Class, and other styles of coding are all different for each developer.</p><p>But the <strong>era of craftsmen</strong> where outstanding individuals produced everything is over. Teamwork is more important now. In the future, software will become more complex and capable of doing more, so the method to a code must be understood and created by a group. This is easy to do if we can export the code we create into a module and let other developers use it.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/67e9a15745e2965d5da9cbab2039c92b/href">https://medium.com/media/67e9a15745e2965d5da9cbab2039c92b/href</a></iframe><p>The code above is part of the type definition file of axui-datagrid. When this definition and build is given the criteria declaration:true, a d.ts file is created.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/740a377f61612ea69a2d33c697a00594/href">https://medium.com/media/740a377f61612ea69a2d33c697a00594/href</a></iframe><p>Developing this way leads to less need to organize documents separately for the developed work. In fact, 90 percent of development documents record which factors the function uses and which results it returns. Though if the documents are not updated properly, they will be useless.</p><h4>(3) Error Tracking</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aEr91tCFhcJfsCpBJxH-4Q.png" /><figcaption><a href="https://sentry.io/for/react/">Sentry</a></figcaption></figure><p>In fact, after a certain understanding of how React works, I believed error tracking would be possible to any extent. I thought this way because all Rendering is happening in React.Component Class(but I’ve never attached it).</p><p>Rather than going further into detail about error tracking here, I’ll wrap up my own loose ends by sharing a <a href="https://sentry.io/for/react/">link</a> recommended by <strong>Woo</strong>.</p><h3>Wrap-up: Let’s be flexible with changes</h3><p>It’s really difficult and painful to change old familiar habits and explore new methods. But there is no such thing as <em>permanent </em>in the field of software where new technology always replaces old technology.</p><p>What we like and are familiar with now will one day be replaced with a new and more convenient way. So what should we do? Go with the flow! Don’t stop just because your favorite trendy rhythm has changed. Accept the change as a new joy to explore instead of a burdensome procedure to learn.</p><p>SQLGate is now trying to start a new journey with QueryPie. I am happy to be able to contribute a little bit at the beginning, and I sincerely hope that more people will use our work.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=56c9b2ab352" width="1" height="1"><hr><p><a href="https://medium.com/querypie/why-did-we-choose-react-and-typescript-for-querypie-56c9b2ab352">Why did we choose React and TypeScript for QueryPie?</a> was originally published in <a href="https://medium.com/querypie">QueryPie</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[QueryPie는 왜 React & Typescript를 선택하게 되었나]]></title>
            <link>https://medium.com/querypie/querypie%EB%8A%94-%EC%99%9C-react-typescript%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EA%B2%8C-%EB%90%98%EC%97%88%EB%82%98-111d03597510?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/111d03597510</guid>
            <category><![CDATA[react]]></category>
            <category><![CDATA[querypie]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[typescript]]></category>
            <category><![CDATA[korean]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Thu, 21 Feb 2019 09:18:35 GMT</pubDate>
            <atom:updated>2019-02-21T10:44:41.360Z</atom:updated>
            <content:encoded><![CDATA[<h4>QueryPie 개발기 #8: Front-end 개발 배경에 대해서</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sj6wCPhOSbXopKIF1rApAA.png" /></figure><p>“세상에서 가장 빠른 것은 아마도 시간이 아닐까 싶다.”</p><p>첫 번째 스프린트를 시작하면서 앞으로 일어날 일들에 대한 기대로 마냥 설레였던게 어제 같은데 벌써 3번째 스프린트가 끝났다. 그런데 두 번째 글을 마치고, 다음 내용을 고민하다가 개발기의 시작이 잘못된 건 아닐까라는 생각이 들었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8B4mQOAHdnJVVB33r9PjhA.png" /><figcaption>엄청나게 열심히 개발 중인 QueryPie 개발팀의 버전보고서</figcaption></figure><blockquote>개발기가 시작되기 전에 왜 이런 글을 쓰게 되었는지, 그리고 내가 왜 이렇게 개발하게 되었는지를 이야기해야하지 않았을까?</blockquote><p>사실 QueryPie를 개발하는 일은 그동안 수 없이 만들었던 고객사의 홈페이지나 ERP(외주용역 or SI) 등을 만드는 일처럼 서둘러 기획하고 디자인 및 개발할 수 없는 일이었다. 그래서 개발하면서 겪었던 어려운 문제나 새로운 발견들을 글로 엮어내면 좋겠다고 생각했고, 개발 배경에 대해서는 반드시 한 번 이야기하고 넘어가고 싶다. 오늘은 다시 시간을 거슬러 어디에서부터 이 모든 것이 시작되었는지 이야기하려고 한다.</p><h3>오픈소스(Open Source) 활동의 시작</h3><h4>AXISJ 프로젝트</h4><p>나는 2013년부터 직접 만든 Javascript UI component를 오픈소스를 발표하고 외부활동을 하기 시작했다. AXISJ라는 이름의 오픈소스 프로젝트였다. 내 인생을 통틀어 돈이 되지 않는 일을 그렇게 열심히 해본적이 없었다. 심지어는 내 돈을 더 써야 했다. (지금 <a href="http://www.axisj.com">AXISJ</a> 프로젝트는 리뉴얼을 거쳐 <a href="http://ax5.io">AX5UI</a>라는 프로젝트로 재탄생하였다.)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Ruwf_ISH0LnGh8YmwBbOeA.png" /><figcaption><a href="http://ax5.io">ax5.io</a></figcaption></figure><p><strong>‘오픈소스를 열심히 해서 유명해지고 싶었다.’</strong></p><p>왜 유명해지고 싶은지는 몰랐지만 이번 인생에서 사람들에게 한 번쯤은 주목받고 싶었던 것 같다. 천재적인 재능이 있는 스타일은 아니었지만 누구보다 꾸준하고 열심히 하는 일에는 자신이 있었기에 어느 정도 성과를 낼 수 있었다. 개발자 대회에 몇 차례 나가서 상도 받게 되고 대단히 쓸모 있는 사람이 된 것 같은 기분이 들었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*W3_0fExbkfH0TtnE_fBKvA.png" /><figcaption>사무실에 있는 대회 상장피켓들</figcaption></figure><p>하지만 즐거움보다는 힘든 일이 더욱 많았다. 하고 싶은 일과 돈을 버는 일 사이에 밸런스를 유지하는 고통스러운 시간이 계속 되었고 그 속에서 점점 떨어지는 체력을 유지하는 일은 쉽지 않았다. 물론 후회해본 적은 단연코 절대 없다. 그리고 오픈소스 활동에 대한 보상으로 좋은 사람들을 알게 되어서 모든 고통을 잊을 수 있었다.</p><p>사실 지금 어떻게 개발하고 있는지는 그 동안 만났던 사람들의 이야기를 빼놓을 수 없으므로 간략하게 그 역사를 이야기하고자 한다.</p><h4>CHEQUER로 함께하게 된 인연들</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/721/1*-x6c8xO9VSV3cp_KvB7RAA.png" /><figcaption>왼쪽에서부터 Benjamin, Brant, Woo</figcaption></figure><p>우선 <strong>Benjamin</strong>은 오픈소스를 막 시작한 나에게 무턱대고 와서 친해질 것을 요구했다. 그는 SQLGate라는 데이터베이스 관리 툴을 만드는 개발자이자 CEO였다. 특유의 친화력으로 AXISJ 프로젝트에 후원했던 모든 사람들에 나를 도와주라고 권유했고, 그 덕분에 좋은 사람을 만날 기회가 더욱 많아졌다.</p><p><strong>Brant </strong>역시 평생 만나본 적 없는 특별한 사람이었는데, 초등학교 때부터 컴퓨터 프로그래밍에 빠져 고등학교 입학 한달 만에 자퇴하고 독학으로 대학 진학을 했다. 그 후 KAKAO의 소프트엔지니어로 입사하고 KAIST에 입학한 인재였다. Brant와는 카카오 퇴사 후에도 계속 연락을 하며 지냈고 함께 회사를 설립하기로 했다. 그 회사가 <a href="https://medium.com/chequer">CHEQUER</a>다.</p><p>CHEQUER는 이렇듯 개발자 2명이 세운 회사이기 때문에 우리가 어떤 비즈니스를 할 지보다 개발을 어떻게 잘 할 것인가에 관심이 많았다. 그러던 중 회사가 만들어지고 얼마 안되어서 Benjamin이 CHEQUER에 입사하겠다고 했다. 본인이 가진 모든 것을 걸테니 함께하자는 제안이었다. 우리는 SQLGate를 전 세계인이 사용하는 소프트웨어로 만들자는데 뜻이 통했고 함께하기로 했다.</p><p>그리고 후에 만난 <strong>Woo</strong>는 내가 React &amp; Typescript로 개발하는 데 결정적인 역할을 한 사람이다. 뒤에서 다시 언급하겠지만 개발을 하면서 겪는 한계로 React, VueJS, AngularJS 등의 새로운 개발 언어를 두고 고민을 하고 있었고, 역시 오픈소스 활동을 하면서 만나게 된 인연인 Woo의 조언이 큰 도움이 되었다. 그는 백과사전같은 사람이었는데, <strong>React가 나에게 더 맞는다</strong>고 이야기했고 그 말에 힘을 얻은 나는 React 튜토리얼을 학습하고 관련 공부와 React로 DataGrid를 만드는 일을 병행했다.</p><blockquote>배경 이야기가 너무 길어서 짧게 쓰려고 엄청 신경쓰며 적었다. 막상 정리해서 적고 돌아보니 간단하게 느껴지는게 ‘그동안 마셨던 소주들은 무슨 의미 였을까’ 라는 생각을 하게 된다.</blockquote><h3>SQLGate 5의 시제품을 만들면서</h3><p>드디어 본론으로 들어가면 SQLGate는 윈도우에서만 작동되는 소프트웨어였다. 위에서 언급한 것처럼 전 세계인이 사용하는 소프트웨어가 되려면 OS를 가리지 않고 작동할 수 있어야 한다고 생각했고, <strong>새로운 소프트웨어를 만드는 방법을 </strong>고민해야 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*MmziCwAtOaTIW_77.jpg" /><figcaption>SQLGate 실행화면 (<a href="https://www.sqlgate.com/product/main-features">주요기능 보기</a>)</figcaption></figure><p>그래서 <a href="https://nwjs.io/">NodeWebkit</a>이나 <a href="https://www.teamdev.com/jxbrowser">JXBrowser</a>를 이용하면 우리가 원하는 소프트웨어를 만들 수 있다고 생각했다. 이들은 WebView를 Renderer로 사용하는데 이렇게 하면 애플리케이션의 View부분이 OS 의존성에서 자유로워질 수 있고 만드는 방법도 웹기술의 경험을 살려서 개발할 수 있다. 사실 이런 개발방법은 오늘날 그리 어렵지 않게 접할 수 있다. Slack, VSCode, Atom, GitKraken 등 많은 소프트웨어들이 이런 방법을 이용하여 멀티 OS를 지원하는 서비스를 하고있다.</p><blockquote>과거에는 이런 하이브리드 형태의 애플리케이션이 UI 반응속도가 떨어지고 OS 자원을 효과적으로 다루지 못해 많은 관심을 받지 못했지만 요즘은 하드웨어의 성능이 좋아지면서 성능이슈를 극복해가고 있다.</blockquote><p>WebView를 이용하여 개발을 한다고 해도 새로 만드는 소프트웨어에 기존 SQLGate의 기능을 모두 반영하는 것은 현재 우리가 가진 리소스로는 불가능하다는 판단을 했다. 그리고 이런 방법으로 개발하는 것이 얼마나 효율적인지 확인하는 것이 우선이라고 생각했다.</p><p><strong>그래서 일단 SQLGate 5라는 이름으로 시제품을 만들어 보기로 했다.</strong></p><p>2달 동안 시제품을 만들어보고 앞으로 방향을 어떻게 잡아야 할지, 우리의 생각이 맞는 생각인지 확인해보고 싶었다. Back-end는 JAVA를 베이스로 개발하고, Front-end는 jQuery와 직접 만든 AX5UI를 이용했으며 JAVA와 궁합이 좋은 JXBrowser를 이용하여 애플리케이션을 만들었다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FnehZNne36I8%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DnehZNne36I8&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FnehZNne36I8%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/3263552f2d319ef436665750050ae677/href">https://medium.com/media/3263552f2d319ef436665750050ae677/href</a></iframe><p>시제품을 만들고나니 결과는 꽤 괜찮았지만, Front-end 개발자로서 고민이 많아졌다. 애플리케이션 개발자로 산다면 배포가 되고난 후 걱정은 죽을 때까지 해야겠지만 그 중 세 가지 고민이 내 발목을 잡았다. 그리고 현재의 애플리케이션은 몇 가지 아쉬운 점을 가지고 있다는 결론에 이르렀다.</p><ol><li>애플리케이션을 언제든지 원하는대로 빠르게 변경할 수 있을까?</li><li>DOM 컨트롤을 좀 더 편리하고 안전하게 만들 수 있을까?</li><li>문제가 있는지 실시간으로 확인할 수 있을까?</li></ol><h4>문제 1. 기능 추가 및 변경의 복잡성</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yY4_9xI5uZihXwtf3l_hXg.png" /><figcaption>간단한 애플리케이션의 프로세스 흐름</figcaption></figure><p>간단한 애플리케이션을 제작하는 경우는 컴포넌트(위 그림에서 Search ToolBar, Contents와 같은)중심으로 제작하는 방법이 효율적일 때가 많다. 컴포넌트에 사용자의 행동으로 예상되는 기능들을 담아서 번들링해두면 애플리케이션의 다른 화면 혹은 다른 애플리케이션을 제작할 때에 코드를 붙여넣고 컴포넌트에 입력값을 전달하거나 가져오는 작업, 그리고 컴포넌트 안에서 발생되는 이벤트 핸들러를 맞춰주어 손쉽게 완성도 높은 화면을 구성할 수 있기 때문이다.</p><p>이렇게 컴포넌트 중심의 화면개발 방식이 익숙하고 편했지만 우리가 만드는 시제품에서는 상황이 달랐다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hhtn7IuK_x4AQU9lpz0qxQ.png" /><figcaption>복잡한 애플리케이션의 프로세스 흐름</figcaption></figure><p>컴포넌트의 종류와 개수가 평소에 만들던 웹사이트나 웹어드민 시스템들과는 차원이 다르게 많았고, 컴포넌트의 액션을 처리하는 함수 또한 그랬다.</p><p>개수가 많은 문제는 오랜 개발구력으로 극복할 수 있었지만 함수들과 컴포넌트들 간에 상호작용이 엉킨 실타래 처럼 되어버려서 기능을 추가하거나 변경할 때마다 사이드 이펙트(<a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">Side effect</a>)가 발생할까 두려웠다.</p><blockquote>사이드이펙트 문제는 테스트 코드를 활용하여 극복할 수도 있다지만, 발견된 에러를 수정하는 일은 머리속에 ‘도쿄 지하철 노선도’를 매 번 다시 그려야 할 정도로 복잡하고 어려운 일이었다.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*ealvmIg8FNolxSOL.jpg" /><figcaption>Tokyo Subway Map</figcaption></figure><h4>문제 2. 깔끔하지 못한 DOM 컨트롤</h4><p>우리가 만드는 소프트웨어가 데이터베이스의 각종 정보를 조회하고 사용자가 원하는 쿼리를 요청하여 결과를 보는 툴이다 보니 자연스레 DOM을 변경해야 하는 작업을 많이 해야 한다. 그것도 아주 많은 양의 데이터를 출력하면서 말이다.</p><p>DOM Node를 추가/변경/삭제하는 가장 빠른 방법은 VanillaJS(개발자들이 부르는 일종의 은어. 프레임워크나 라이브러리 없이 표준 API만을 이용하는 방법)가 가장 빠르다. 하지만 실제 개발환경에서 템플릿 엔진의 도움없이 화면을 만드는 일은 원시적이고 비생산적이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*pn1HAodXMR9GxDLjPay_og.png" /><figcaption>Framework dom 조작 성능 <a href="https://krausest.github.io/js-framework-benchmark/current.html">https://krausest.github.io/js-framework-benchmark/current.html</a></figcaption></figure><p>그래서 성능 좋고 다루기 편리한 템플릿 엔진을 찾아서 각 화면들에 필요한 템플릿 코드들이 쓸데없이 만들어지지 않도록 잘 관리해야만 했다. 하지만 아쉽게도 설계 문서에 템플릿들의 목록을 잘 정리하고 머리 속에 담아두는 일은 금방 한계를 드러냈다.</p><p>그리고 더욱 큰 문제는 템플릿 코드를 템플릿 엔진으로 변환한 후에 변경이 적용될 DOM Node가 출력할 때 깜박이는 현상이 있다는 것이었다. 또 DOM Node에 바인딩해둔 이벤트들은 화면이 다시 그려지기 전에 unbinding하고 다시 그린 뒤에 binding 해줘야는 문제점이 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I7CY1zuY10Fc07UBBOM25g.png" /><figcaption>템플릿 엔진 프로세스</figcaption></figure><p>그 사이에 가비지 컬렉션(<a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">Garbage collection</a>)은 잘 되고 있는지 메모리 누수(Memory Leak) 현상은 없는지 우려가 되었지만 짧은 시간동안 일일이 확인 하는 일은 불가능 했다.</p><p>다시 랜더링되어야 하는 타겟을 할 수 있는 만큼 잘게 쪼개고 관리한다면 이런 문제는 극복할 수 있을 거라 생각했지만, 이렇게 만든 애플리케이션을 사용했을 때 느껴지는 미세한 이질감은 어떻게 할 수 없는 문제였다.</p><h4>문제 3. 부족한 에러 리포트</h4><p>만약 새로 오픈한 식당 주인이 손님이 느끼는 모든 것을 알 수 있다면 그 집은 반드시 맛집으로 대박이 날 것이다. 음식의 맛에서부터 분위기, 청결, 음악, 서비스까지 어디에서 만족하고 불만족하는지를 모두 알기란 참으로 쉽지 않은 일이다.</p><p>하지만 우리가 만드는 애플리케이션에 있어서는 최대한 그런 것들을 알 수 있게끔 만들고 싶었다. 사용 중 에러 혹은 불편한 점은 없었는지, 사실 만드는 사람의 입장에서는 모든 것을 알고 싶기 마련이다. 그렇지만 현실은 window.onerror 핸들러를 이용하여 서버로 에러 내용을 전달하는 일이 전부였다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4f75441fa7560abec27c6c6b057b5dea/href">https://medium.com/media/4f75441fa7560abec27c6c6b057b5dea/href</a></iframe><p>이렇게 문제점들을 보고나니 새로운 개발 환경을 고려하게 되었고, 이것이 지금의 QueryPie가 탄생하게 된 배경이다.</p><h3>React &amp; Typescript로의 전환</h3><h4>10년 간 써왔던 jQuery</h4><p>나는 jQuery를 2009년부터 사용했다. 그 당시에는 브라우저 파편화(Web Browser Fragmentation)가 심했기 때문에 jQuery는 굉장히 많은 사람들이 사용했고 나 역시 그랬다.</p><p>10여년 가까이 써온 정든 jQuery를 이제 그만써야 한다는 결론을 내리기는 정말 어려웠다. 더욱이 나의 경우엔 AX5UI를 1년 가량 혼자 만들어왔기 때문에 새로운 환경으로 전환을 결정하는 일은 너무 두려웠다. 하지만 앞서 시제품을 만들면서 부딪혔던 문제점, 그리고 결정적으로 Woo와의 이야기를 통해 변화가 필요하다는 생각이 들었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*knVEeIsK_lwDfmYwafc9BA.png" /><figcaption>AX5UI Commit Graph</figcaption></figure><p>그래서 React로 개발을 고려하기 시작했고, 기존에 만들어오던 UI 컴포넌트들을 React에서 작동하도록 감싸서 사용하거나 (하지만 이렇게 하면 React코드 안에 jQuery가 함께 담기게 된다. 이런 일은 개발자로서 도저히 참을 수 없는 일이다.) 기존에 만들어 오던 UI 컴포넌트들을 React로 다시 만들어야 했다.</p><p>물론 애플리케이션을 구성하는데 필요한 기본적인 UI 컴포넌트들은 잘 만들어진 React용 UI Framework를 선택해서 해결할 수도 있지만 <strong>DataGrid는 꼭 직접 만들어야한다고 생각했다.</strong></p><h4>세 번의 리팩토링을 거친 DataGrid</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-aRdyqExGCnXf2TqUsABig.png" /><figcaption>axui-datagrid (<a href="https://axui-datagrid.jsdev.kr/introduction">https://axui-datagrid.jsdev.kr/</a>)</figcaption></figure><p>이렇게 만들기 시작한 DataGrid는 총 3번의 리팩토링을 거쳐왔다. <strong>첫 번째</strong>는 TypeScript를 도입하면서 코드를 전부 다시 만들었을 때이고, <strong>두 번째</strong>는 Redux를 걷어내고 ContextAPI를 사용하면서 의존성이 없는 컴포넌트로 변신하면서, 그리고 <strong>마지막</strong>으로는 내부에서 사용되는 state와 외부에서 전달받는 props을 정리하면서다.</p><h3>React &amp; Typescript로 만드는 QueryPie</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*T2_iPtYMb0bLcaVXgXdM0Q.png" /><figcaption>디자인이 되지 않은 QueryPie (이 정도는 프론트엔드 개발자가 혼자 만듬, 디자인되면 감당할 수 없을 것!)</figcaption></figure><p>그렇다면 오늘 글을 쓰게 되었던 진짜 주제로 넘어가서, 앞서 부딪혔던 3가지 고민들을 React를 사용하면 어떻게 달라지는지 살펴보자.</p><h4>해결 1. 기능 추가 및 변경의 유연성</h4><p>React &amp; Typescript로 개발하면서 애플리케이션에 기능을 추가하는 상황을 생각해보자. 특정 화면을 만들어 둔 상태에서 요구사항이 변경되어 목록의 검색조건을 추가해야한다고 가정해보겠다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*o3qelNtffTDm4o7wo6gwPQ.png" /><figcaption>목록이 나오는 화면</figcaption></figure><p>이럴 때는 기존에 만들어져 있는 List 컴포넌트에 검색 UI를 추가하지 않고 별도의 Filter컴포넌트를 추가한 후 List와 Filter를 조합하여 사용할 수 있다. 위 그림의 코드는 몇 줄 안되는 간단한 형태이지만 우리가 실제 만나게 되는 컴포넌트들은 거대하고 까다로울 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ZUpidRxgnnIFpay5nlxiPg.png" /></figure><p>그래서List 컴포넌트에서 filter Prop을 받을 수 있도록 수정하고 새로운 Filter컴포넌트를 만들어서 Filter에서 입력받은 filter값을 List컴포넌트에 전달되도록 해주어야 한다. List에서는 List밖에서 일어나는 일들에대해서는 고려하지 않고 filter에 따라 목록이 출력되도록 할 수 있다.</p><p>이런 방법으로 개발할 수 있기 때문에 컴포넌트의 의존성을 최소화 할 수 있고 기능을 추가 하거나 변경할 때 좀 더 유연하고 ‘사이드이펙트’가 적은 코드를 작성할 수 있게 된다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2F9yyqwvp8xr&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2F9yyqwvp8xr&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2F9yyqwvp8xr%2Fscreenshot.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codesandbox" width="1000" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/0776179b0e7dcad6e9288ff0d0896817/href">https://medium.com/media/0776179b0e7dcad6e9288ff0d0896817/href</a></iframe><p>새로운 기능이 추가되면서 기존 코드인 List컴포넌트의 변경은 아래와 같이 최소화되고 새로 추가된 Filter컴포넌트에 의존성이 없기 때문에 향후 List가 다른 컴포넌트와 조합이 된다고 해도 (대부분의 경우) 큰 문제없이 재사용이 가능하다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*879ZlZrKhSfgtsz12gEXHg.png" /></figure><p>이렇게 React를 이용하면서 얻게되는 모듈 코딩의 장점은 ES6와 TypeScript를 사용하면 그 효과가 더욱 극대화 된다.</p><p>ES6부터 추가된 <strong>구조 분해 할당(</strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructuring assignment</a>)과 <strong>화살표 함수</strong>(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow function</a>)등은 JSX코드를 간결하게 만들수 있게 해주고 TypeScript는 컴포넌트와 함수들이 사용하는 Props과 Argument의 스펙을 따로 학습하지 않아도 사용할 수 있게 해주기 때문이다.</p><p>그리고 QueryPie 개발팀의 경우 Mobx와 <a href="https://github.com/mobxjs/mobx-state-tree">MST</a>를 사용하고 있는데, 모델과 컴포넌트를 분리하면 모델과 API가 통신하여 모델의 Store를 변경하고 컴포넌트는 모델에 담겨있는 데이터만 보면서 개발을 진행 할 수 있다.</p><p>보다 자세한 내용은 Woo Gim이 <a href="https://medium.com/querypie/typescript%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-fullstack-development-501835592b1d">작성한 글</a>에서 얻을 수 있습니다.</p><h4>해결 2. 편리하고 안전한 DOM 컨트롤</h4><p>앞서 이야기했던 <a href="https://krausest.github.io/js-framework-benchmark/current.html">Framework dom 조작 성능</a>에서 볼 수 있듯이 React를 이용하여 랜더링을 제어하는 것만이 랜더링 속도를 높일 수 있는 방법은 아니다.</p><p>하지만 속도의 차이라고 해봤자 눈 깜박이는 속도(평균 100~150ms)보다 훨씬 짧은 시간이고 UX경험은 산술적인 수치보다는 사용자가 느끼는 감정이 더욱 중요하다고 생각한다.</p><p>React <a href="https://reactjs.org/docs/faq-internals.html">Virtual DOM</a>을 만들어 랜더링하기 때문에 효율적이라는 이야기는 아마도 다들 들어봤을 것 같다. 물론 내가 Virtual DOM을 만들지도 않았고 내부의 작동 원리와 구조에 대해서는 잘 알지 못하기 때문에 자세히 설명하는 것은 어렵다고 생각한다.(언젠가는 할 수 있겠지만) 그렇지만 React로 만들었을 때와 기존에 내가 사용하던 방식으로 만들었을 때의 차이에 대해서는 이야기 할 수 있다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fzv2uue4zyV0%3Fstart%3D16%26feature%3Doembed%26start%3D16&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dzv2uue4zyV0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fzv2uue4zyV0%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/89316084c75df91551f952ebc081473b/href">https://medium.com/media/89316084c75df91551f952ebc081473b/href</a></iframe><p>위에서 볼 수 있듯이 스크롤을 하면 출력할 엘리먼트를 table부터 다시 만들어주고 있는 것을 확인할 수 있다. 또 빠르게 스크롤 할 때 깜박이는 현상도 있다. 이는 IE와 같은 브라우저에서 스크롤 속도가 느린 문제를 해결하기 위해 휠 이벤트가 발생될 때마다 랜더링을 다이렉트로 하지 않고 Throttled 처리를 해주고 있기 때문이다.</p><p><strong>그렇다면 React로 만든 Datagrid는 어떻게 다를까?</strong></p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fwe6zFAU9C4s%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dwe6zFAU9C4s&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fwe6zFAU9C4s%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/0930ea884171fa57da5a85fc2e5a6885/href">https://medium.com/media/0930ea884171fa57da5a85fc2e5a6885/href</a></iframe><p>React로 만들었기 때문에 스크롤이 될 때마다 변경해야 할 DOM의 각 부분을 React가 찾아내어 변경해주고 있다.</p><p>React로 개발하면 DOM의 구조가 변경되지 않고 내용이나 속성만 변경되기때문에 사용자가 느끼기에 더욱 자연스럽고 부드럽게 데이터가 변경되고 있다는 생각이 들게 해준다.</p><p>그리고 React의 render 함수가 실행되는 속도를 개발자가 직접 제어하지 않기 때문에 데이터에 잦은 변경이 일어나도 걱정할 필요가 없다. React는 이미 많은 글로벌 서비스에서 사용되고 있기 때문에 전 세계인이 테스트를 대신 해주었다고 할 수 있고, React 개발진을 직접 만나보지는 못했지만 적어도 우리 팀원들의 몇 배 이상의 자원을 이 프로젝트에 쓰고 있음은 확실하기 때문이다.</p><h4>해결 3. 에러 리포트 개선</h4><p>에러 리포트를 이야기하기 전에 개발자가 언제 어떤 에러를 많이 내는지 이야기 해보자.</p><blockquote>사실 에러리포트와 관련한 작업은 아직 준비 중에 있기 때문에 자세한 경험기는 쓰기 어렵습니다. 죄송합니다. ㅜ.ㅜ;</blockquote><p>개발자가 만들어 내는 대부분의 에러는 ‘오타’ 때문이다. 주변에서 하루종일 에러를 찾았는데 결국은 오타 때문이었다는 이야기는 익히 들었을 것이다.</p><p>그렇다. 사실 오타만 없어도 우리는 많은 시간을 절약할 수 있을 것이다. 오타를 방지하는 방법 중에 TypeScript를 사용하는 것은 내가 경험한 방법들 중에 가장 만족스러운 방법 이었다.</p><h4>(1) VSCode + TypeScript</h4><p>6개월 전만 해도 나는 IntelliJ유저였다. IntelliJ는 강력한 툴이고 여전히 주변의 많은 개발자가 사용 중이지만 적어도 React와 TypeScript로 개발하는 Front-end 개발자에게는 불편한 도구라 생각된다.</p><p>VScode로 개발을 하면 JSX태그에 쓰는 컴포넌트, 컴포넌트 속성, 함수, 함수의 인자 등을 팝업으로 확인하면서 개발할 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bTGSmcnZU3aQj9iY57qYdg.png" /><figcaption>AntD Tree Component 정보조회</figcaption></figure><p>AntD와 같은 UI Framework를 사용할 때 가장 어려운 점은 직접 만든 코드를 사용하는 것이 아니기 때문에 어떤 속성이 있는지, 또 속성은 어떻게 사용해야하는지 암기하는 것이다.(요즘에는 모르겠지만 옛날 사람들은 전부 외워서 해결했다…) 이런 점도 VSCode를 사용하면 쉽게 확인할 수 있기 때문에 편리하고, 에러를 줄이는 데 훨씬 도움이 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eixtc_szgARDvakMBW3Rqg.png" /><figcaption>AntD Tree component auto completion</figcaption></figure><h4>(2) 공유할 수 있는 코드: 모든 변수와 함수는 정의할 수 있다</h4><p>자바스크립트를 오랜 시간 개발하고 잘하는 분들이 주변에 많은 편이다. 그 분들의 특징은 응용력이 뛰어나다는 것이다. ES5까지 자바스크립트를 개발하려면 그래야했다. Class를 만드는 방법도 여러가지이고 그 외에 코딩을 하는 스타일도 개발자마다 모두 제 각각이었다.</p><p>하지만 뛰어난 개인이 모든 것을 다 만들어내는 <strong>장인의 시대 </strong>끝났다.<strong> </strong>이제는 팀워크가 더욱 중요하다. 앞으로 소프트웨어는 점점 더 복잡해지고 더욱 많은 일을 할 수 있어야하기 때문에 코딩하는 방법도 집단이 함께 이해하고 만들어 갈 수 있어야 한다. 만약 우리가 만든 코드를 모듈로 내보내어 다른 개발자가 사용하게 한다면 위와 같이 할 수 있다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/67e9a15745e2965d5da9cbab2039c92b/href">https://medium.com/media/67e9a15745e2965d5da9cbab2039c92b/href</a></iframe><p>위 코드는 axui-datagrid의 타입정의파일의 일부분이다. 이렇게 정의하고 빌드할 때 declaration:true 조건을 주면 d.ts파일이 만들어진다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/740a377f61612ea69a2d33c697a00594/href">https://medium.com/media/740a377f61612ea69a2d33c697a00594/href</a></iframe><p>이렇게 개발한다면 개발한 작업물에 대해 문서를 따로 정리할 필요가 줄어들 것이다. 사실 개발문서의 90%는 함수가 어떤 인자를 사용하고 어떤 결과를 리턴하는지 기록하는 것이다. 물론 문서가 제대로 업데이트되지 않는다면 무용지물이 되기 십상이다.</p><h4>(3) Error Tracking</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aEr91tCFhcJfsCpBJxH-4Q.png" /><figcaption><a href="https://sentry.io/for/react/">Sentry</a></figcaption></figure><p>사실 React 작동 방식에 대해 어느 정도 이해를 한 후에 에러 트랙킹은 얼마든지 가능할 것이라고 생각했다. 모든 Rendering이 React.Component Class에서 일어나고 있기 때문에 가능할 것이라 생각했다.(하지만 붙여본적은 없음)</p><p>그래서 여기에서 더욱 자세한 이야기를 하기보다는 Woo에게 추천 받은 <a href="https://sentry.io/for/react/">링크</a>를 투척하는 것으로 Error Tracking 관련 이야기를 마치겠다.</p><h3>맺음말: 모든 변화에 유연하게 대처하자</h3><p>기존의 익숙한 방식을 새로운 방식으로 바꾸는 일은 정말 어렵고 고통이 따른다. 하지만 소프트웨어 분야에서 영원한 것은 없고 언제나 새로운 기술이 오래된 기술을 대체한다.</p><p>지금 우리가 좋아하고 익숙한 것은 또 언젠가 새롭고 더욱 편리한 방식으로 대체 될 것이다. 그렇다면 우리는 무엇을 해야 할까? 우리는 리듬에 몸을 맡기고 즐겨야 한다. 좋아하는 유행가의 리듬이 바뀌었다고 멈추어서는 안된다. 변화를 귀찮고 힘든 것이 아니라 기존에 알지 못했던 새로운 기쁨으로 받아들일 자세만 있으면 된다.</p><p>SQLGate는 이제 QueryPie라는 새로운 희망으로 그 생명을 연장하려고 하고있다. 그 시작에 작은 힘이나마 보탤 수 있어서 기쁘고, 보다 많은 사람들이 우리의 작업물을 이용하게 되기를 간절히 바란다.</p><p>📑영어(English Version)- <a href="https://medium.com/p/56c9b2ab352/">https://medium.com/p/56c9b2ab352/</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=111d03597510" width="1" height="1"><hr><p><a href="https://medium.com/querypie/querypie%EB%8A%94-%EC%99%9C-react-typescript%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EA%B2%8C-%EB%90%98%EC%97%88%EB%82%98-111d03597510">QueryPie는 왜 React &amp; Typescript를 선택하게 되었나</a> was originally published in <a href="https://medium.com/querypie">QueryPie</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Drag and Resize in React App]]></title>
            <link>https://medium.com/querypie/drag-and-resize-in-react-app-49f62ccbf3c?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/49f62ccbf3c</guid>
            <category><![CDATA[english]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[resize]]></category>
            <category><![CDATA[drag-and-drop]]></category>
            <category><![CDATA[frontend]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Thu, 07 Feb 2019 09:57:46 GMT</pubDate>
            <atom:updated>2019-02-08T02:20:10.239Z</atom:updated>
            <content:encoded><![CDATA[<h3>Drag &amp; Drop, Resize in React App</h3><h4>QueryPie Development #5: Implementing Query Tabs and a Result Panel</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lI-Jy-mQuZAFfZWBAALBEg.png" /></figure><p>한국어- <a href="https://medium.com/p/fd6a61c80d89/">https://medium.com/p/fd6a61c80d89/</a></p><p>The second sprint is finished.</p><p>We had several days off during this Sprint because it fell in the timeline of Christmas and New Years. But having only 6 working days during the two-week Sprint period meant there were relatively few tasks to address. And since the number of tasks was small, it was less burdensome. It was also very comforting to think that if I didn’t have enough time to finish a task, I could address it over the holidays!</p><p>Sadly, these comforting circumstances didn’t last long.</p><h3>The main Goal of this Sprint:</h3><ol><li>Manage multiple tabs in the query panel</li><li>Run queries in the Query Panel Editor to show results</li></ol><h4>Modeling tabs for the query panel with ReactDOM</h4><p>We set key goals and started working on them. The issue at hand was how to manage the query panel with multiple tabs, which we needed to model prior to beginning development.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*w3nit1xNKwC-3pu8P-KiFQ.png" /><figcaption>image 1. Switch-based DOM Structure</figcaption></figure><p>The structure shown above shows the status of the <strong>active </strong>tab by placing a tab bar at the top (or bottom) and labeling the tab. The inactive tabs are prepared and grayed out below, so the user can easily change the status of which tab is active by clicking on the label.</p><p>This is efficient when the contents of components is not in the same format because each tab can be selected and displayed individually. On the other hand, a major disadvantage is that as the number of tabs increases, WebView has to cope with the increasing number of DOM elements. These areas need to be carefully conceived since they might not be problems while developing but can become big issues later on.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xUK_NWnKnTPxct8dTwBf-A.png" /><figcaption>image 2. Injection-based DOM Structure</figcaption></figure><p>Another way to think about it is to configure the Tab content panel as shown in Image 2 and inject the content of the tab as the active tab changes. It is more suitable when the contents of the tab doesn’t change much and can be predicted beforehand because it needs to be injected into a given structure. But a great advantage of the DOM Element is that it doesn’t grow much in file size.</p><p>Out of the two approaches, we eventually took the approach shown in Image 2. We thought the approach where the tab content was fixed and the number of tabs could increase significantly was more appropriate with QueryPie.</p><h3>Add / Delete / Align Tab Labels</h3><p>After setting up the DOM configuration, specifically Adding, Deleting, and Aligning of tab labels began to be implemented. Adding tabs allows the user to create a query panel model on QueryPanelStore and add it to the QueryPanelStore.panels.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/940/1*EYeNN6T0MWapZoldmGj86g.png" /><figcaption>QueryPie Panel Creation Code</figcaption></figure><p>However it was not that simple. I wanted to add a query panel named Untitled-{n} if an added query panel is not saved, similar to VSCode.</p><p>We needed to know the number of panels that were not saved in the query panel. So, we broke down the code writing process like this:</p><ol><li>Add a new Panel and at the same time label it ‘UntitleSeq 1’</li><li>When the Panel with the ’n’ value equal to the storage value of ‘UntitleSeq’ is deleted, reduce the value of ‘UntitleSeq’ by 1</li><li>When adding a new Panel, add 1 to the UntitleSeq value if the Panel with the same n value as UnitleSeq has not been deleted</li></ol><p>The contents of the panel have been changed to check the state of the panel that needs to be saved and the contents of the panel can be saved to a file on your computer and opened as a .sql or .txt file.</p><p>There were so many issues that needed to be sorted out.</p><h4>📌Considerations for Managing Tab Panels</h4><ul><li>Process unsaved panel counts when adding panels</li><li>Manage the status to see if the contents of the panel have changed</li><li>Save panel contents</li><li>Open file (not just import; check file content encoding type when loading file)</li><li>Scroll to the position of the active tab when the panel is added and the number of panels is high</li><li>Reorder panels by dragging them</li><li>Prompt user to save file if changes are made when closing a panel</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/928/1*ugXoHbo7SOKvWCvwhPYdpw.gif" /><figcaption>Query Panel Tab Implementation View</figcaption></figure><p>Eventually, all of the above issues were resolved. The above figure is a screenshot of the developed tab panels. It looks so simple when taking a screen capture like this because the output of developed application is already out in the world. But when I think about how we started and how we struggled, I am so happy with the result and proud of every stroke of code. This was the satisfying feeling of developing.</p><p>I’ll skip over how we dealt with the other considerations because there are tons of solutions on the internet by talented people on how to address them. I’d rather focus on the UI issues which is my favorite area.</p><h3>Drag &amp; Drop Tab Panel:</h3><p>I had a fear of working with drag &amp; drop because I had little experience creating web applications with React. When I was developing with jQuery, I really hated the experience because I thought I had to go through it piece by piece, and working with the fragmented browser was torture. That’s why instead of using drag &amp; drop, we usually used mousedown, mousemove and mouseup.</p><p>But this time, we only needed Chrome support for our WebView so drag &amp; drop was a good option for us. More importantly, my development skills have risen in recent years so I wasn’t as fearful as before.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FkRQBDIdp2EyA0Psya6rQw.png" /><figcaption>Tab JSX</figcaption></figure><p>It was very simple to write the code. I just gave the draggable attribute to JSX and added onDragStart, end, and over. Over and start were only used to identify the indexes in which the dragging started and the indexes in progresses. The most complex code in practice was dragEnd. Although it might seem complicated, it’s rather simple to implement.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2a23a737c8418d987e9d6bcfbce52568/href">https://medium.com/media/2a23a737c8418d987e9d6bcfbce52568/href</a></iframe><p>I created a sortPanel action on the queryPanelStore and implemented a code that inserts the dragTabIndex into position by sending the dragTabIndex and the dragoverTabIndex at the end of the drag.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1136766fb06097c7045a35ce49315b45/href">https://medium.com/media/1136766fb06097c7045a35ce49315b45/href</a></iframe><p>I used the <strong>splice API</strong> to send fromIndex items over to toIndex. There is a way to combine slices twice, but I think the splice API is a little cleaner.</p><p>In the code that changed the order of the array, we could write a single line of code by ‘returning’ the item that the splice deleted without creating a variable called movePanel. But our project was using <strong>mobx </strong>and <strong>MST</strong>, so we needed two more lines of code.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/868/1*9aqYOe5r2ML2jE0WVqpznA.gif" /><figcaption>Drag and Drop in Object Panel</figcaption></figure><h3>To output Query Execution results:</h3><p>Once we solved the issue of managing the query panel, we had more important execution outputs: if the query execution result was recording data, the data had to be output into the data grid.</p><p>Below is an example of a multi-query run on SQLGate. Where most other query execution tools output only one result at a time, SQLGate provides the advantage of showing the results of multiples queries run in the same panel.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1008/0*5iKW5yT1_37f8Wxd.png" /><figcaption>Result of multiple SQL queries run in SQLGate</figcaption></figure><p>In fact, Koreans like to see <strong><em>everything </em></strong>at a glance.</p><p>So even before development began, we decided that users should be able to stack multiple SQL results either side-by-side or above-below each other to view them comfortably.</p><p>Users may not know how much time developers spend or how much trouble they go through to accommodate these types of features. When we started implementing this <em>everything at a glance</em> method, unexpected issues began emerging again.</p><h4>Issue 1. Unexpectedly Complex Data Structure ( 💀💀💀)</h4><p>It‘’s simple to deliver query statements written in the Query Editor to the API.</p><p>Because each change in the status of the query editor resulted in a change to the queryPanel model, everything was done just by executing the following command when running the query:</p><pre>queryPanelStore.activePanel.execute();</pre><p>But the return result was beyond expectations.</p><p>The QueryPie back-end and middle-ware development team informed me of a very complex form of data structure, taking into account all the worst situations that could occur when the query is executed.</p><p>So parsing was used to analyze the sentence and make it into several sentences before query execution. Each request result data-sets was parallelized so that it could be processed several times before the query was executed.</p><p>As a seasoned developer, I don’t hate well-organized data structures. But when I came back to being a naive front-end developer for QueryPie, I couldn’t understand why I was giving myself such a challenging task.</p><h4>Issue 2. Resize Query Results Panel ( 💀💀💀💀💀 )</h4><p>I thought that I could easily show the results of the query executions, but adjusting the size of each query panel ended up being very bothersome.</p><ol><li>If the user does not resize the panel, resize the entire screen, or resize the ambient panel to change the size of the result set, the size must be automatically set to 1/n</li><li>If a user adjusts one of the multiple results panels, the size of that panel should be maintained even if the other result sets are resized</li><li>Components inside the result panel must be able to determine the size of the result panel (because the data grid components must be attached inside the component)</li><li>Adjust the size of the result panel at the end of the result set so that the scroll position is appropriate</li></ol><p>As we developed QueryPie, resizing other parts was developed in such a way that the position of the Resizer is determined by using the height and width value of the object to be resized.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RTtT-wItL5gOMjdm8YfYTA.png" /><figcaption>Editor and Result Panel Code</figcaption></figure><p>So you can pass the value of resizerTop to the style.top property of the resizer. When developing this method, it is necessary to detect when a mousedown event occurs in a resizer, when to bind the mousemove and mouse down event to the window/document, and when to unbind it at the time when the Resizer movement ends.</p><p>In this case, the code for event binding/unbinding management and mouse position becomes dirty. So recently we have created a function called mouseEventSubscribe.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0a6f1ce8c055b5b9f85ada6e154c444a/href">https://medium.com/media/0a6f1ce8c055b5b9f85ada6e154c444a/href</a></iframe><p>The mouseEventSubscribe is a simple function that runs the callBack function when mouse movement occurs. It has the advantage of being able to easily compare the location before and after the start of the EventSubscribe.</p><p>As mentioned earlier, it is easy to approach resizing with width or height values. After writing the development log, callback function processed throttle in the mouseEventSubscribe function to improve UI performances.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/928/1*Q7elyPMXEPNQdcgkr-YESw.gif" /><figcaption>Resizing the Result Panel</figcaption></figure><p>Let’s go back to the issue of resizing the query result panel and look at the size of the result panel. Because it is necessary to resize vertically or horizontally stacked panels, if the Resizer is expressed as an absolute value, it is necessary to recalculate the position of each Resizer.</p><p>It is convenient for the Resizer to position the size of the panel to be changed without creating such unnecessary code. So the panel and the Resizer are printed out using the <strong>css flex</strong> so that the position is not set separately, and the relative changes from the position of the Resizer are measured once it’s moved.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IXDB2dmbkOP9XTKJaHURLw.png" /><figcaption>Result Panel Code</figcaption></figure><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/70453638f92b10ad9717e750db84e8ea/href">https://medium.com/media/70453638f92b10ad9717e750db84e8ea/href</a></iframe><p>Finally, when the Resizer moves out of the Scroll Container, scrolling is possible.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/930/1*dIW-32jEL85xsdDk8x1J5A.gif" /><figcaption>Resizing and Scrolling in Result Panel</figcaption></figure><h3>Wrap-up:</h3><p>At the end of the twists and turns, the second Sprint is over and the third Spring is underway. Every member of the QueryPie team is working hard every day, and all the CHEQUER crew including the design team, planning team, and marketing team. I am also doing my best to develop QueryPie and make it into something great.</p><p>In this development blog, I discussed the subject of drag and resizing. I apologize for not including more examples and reference materials in my article, but I’ve been documenting as I develop so I didn’t have time to look up references. The contents that I discussed today are being posted as a record of the ups and downs of our QueryPie development journey.</p><p>Until next time~</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=49f62ccbf3c" width="1" height="1"><hr><p><a href="https://medium.com/querypie/drag-and-resize-in-react-app-49f62ccbf3c">Drag and Resize in React App</a> was originally published in <a href="https://medium.com/querypie">QueryPie</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Application에서 drag&drop과 resize]]></title>
            <link>https://medium.com/querypie/react-application%EC%97%90%EC%84%9C-drag%EC%99%80-resize-fd6a61c80d89?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/fd6a61c80d89</guid>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[resize]]></category>
            <category><![CDATA[drag-and-drop]]></category>
            <category><![CDATA[korean]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Thu, 07 Feb 2019 09:53:07 GMT</pubDate>
            <atom:updated>2019-02-07T23:52:07.866Z</atom:updated>
            <content:encoded><![CDATA[<h4>QueryPie 개발기#5: 쿼리 작성 패널 탭 기능과 쿼리 실행 결과 패널 구현</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lI-Jy-mQuZAFfZWBAALBEg.png" /></figure><p>두 번째 스프린트가 끝났다. 이번 스프린트 기간 중에는 크리스마스와 해가 바뀌는 것 때문에 휴일이 많았다.</p><p>스프린트 기간 2주 동안 업무 일수는 6일. 업무 일수가 적기 때문에 처리해야 할 이슈도 상대적으로 적었다. 이슈의 개수가 적다보니 부담이 덜 했고, 혹시 시간이 부족하다면 휴일을 활용하여 문제를 해결하면 된다고 생각하니 마음이 편했다.</p><p>하지만 이런 기대가 사라지기까지 오랜 시간이 필요하지는 않았다.</p><h3>이번 스프린트의 핵심목표</h3><ol><li>다중 탭으로 QueryPanel (쿼리 구문 작성 패널)관리</li><li>QueryPanel 에디터에서 쿼리를 실행하면 결과를 보여주기</li></ol><h4>QueryPanel 탭 DOM 구성</h4><p>핵심 목표를 정하고 작업을 착수하기 시작했다. 해결해야 할 이슈는 다중 탭으로 QueryPanel을 관리하는 것이었는데 개발에 앞서 모델을 구상할 필요가 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*w3nit1xNKwC-3pu8P-KiFQ.png" /><figcaption>1안. Switch 방식 탭 DOM 구조</figcaption></figure><p>우선 위의 그림과 같은 구조는 상단(또는 하단)에 탭 바를 두어 탭의 라벨을 표시해주고 그 아래 (또는 위)에 미리 준비된 탭의 컨텐츠들 중에서 선택한 탭의 상태를 active로 변경하여 보여주는 방식이다.</p><p>1안은 개별 탭을 선택해서 보여줄 수 있기 때문에 각 탭의 컨텐츠 구성을 예상할 수 없을 때 효율적이다. 반면 큰 단점이 있다면, 탭의 개수가 늘어남에 따라 WebView가 점점 늘어나는 DOM Element 수를 감당해야 하는 문제가 생긴다는 것이다. 이런 부분들은 막상 개발할 때에는 문제라고 생각하지 못했다가 이후에 이슈가 될 수 있어 모델을 구상할 때부터 고려할 필요가 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xUK_NWnKnTPxct8dTwBf-A.png" /><figcaption>2안. Injection 방식 탭 DOM 구조</figcaption></figure><p>다음으로 생각할 수 있는 방법은 위의 2안으로 Tab content Panel을 구성하고 액티브 탭이 변경되면 탭의 상태를 주입(inject)하는 방법이다. 탭의 내용 구성이 크게 변경 되지 않고 미리 예상할 수 있는 구조일 때 적합하다. 정해진 구조 안에 주입하는 방식이므로 첫 번째 방법에 비해 DOM Element의 크기가 많이 커지지 않는다는 장점이 있다.</p><p>두 가지 방식 중에서 결국 Injection 방식의 2안을 선택하였다. QueryPie는 Tab content의 구성이 어느 정도 정해져 있고 작업하면서 탭의 개수가 많이 늘어날 수 있다는 점에서 injection 방식이 더 적절하다고 판단했다.</p><h4>탭 라벨 추가/삭제/정렬</h4><p>DOM 구성 방식을 정하고 나서는 구체적으로 탭 라벨의 추가, 삭제 및 정렬을 구현하기 시작했다. 여기에서는 탭을 추가 하면 QueryPanelStore에 QueryPanel모델을 생성하고 QueryPanelStore.panels에 추가하게 해주었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/940/1*EYeNN6T0MWapZoldmGj86g.png" /><figcaption>QueryPanel 생성 시 이름 Untitled-{n} 부여 코드</figcaption></figure><p>하지만 말처럼 간단한 문제가 아니었다. VSCode에서처럼 저장되지 않는 QueryPanel을 추가하면 Untitled-{n}이란 이름을 부여하고 싶었다. 이를 위해서 아래와 같은 과정으로 코드를 작성 하였다.</p><ol><li>새로 Panel을 추가하며 동시에 ‘UntitleSeq’ 1을 부여한다.</li><li>‘UntitleSeq’의 저장값과 같은 n 값을 가진 Panel이 삭제 될 때, ‘UntitleSeq’ 값을 1만큼 줄인다.</li><li>새로운 Panel을 추가될 때, UntitleSeq와 같은 n 값을 가진 Panel이 삭제되지 않았으면 UntitleSeq값에 1을 더해준다.</li></ol><p>그리고 Panel의 내용이 변경되어 저장이 필요한 상태를 체크해야 했고, 또 Panel의 내용을 사용자 컴퓨터에 파일로 저장하거나 사용자 컴퓨터에 있는 .sql, .txt파일을 열 수 있어야 했다.</p><p>이렇듯 예상보다 너무 많은 이슈가 있어서 정리할 필요가 있었다.</p><p>📌<strong>Tab Panel 관리할 때 고려사항</strong></p><ul><li>Panel을 추가할 때 저장되지 않은 Panel 숫자 세기</li><li>Panel의 내용이 변경이 되었는지 알 수 있는 상태 관리</li><li>Panel 내용 자동 저장</li><li>파일 불러오기 (단순 불러오기가 아니라, 파일을 불러올 때 파일 내용 인코딩 타입 체크)</li><li>Panel이 추가되고 Panel의 개수가 많아 스크롤이 필요해지면 활성화된 탭의 위치로 스크롤</li><li>Panel을 드래그하여 순서 변경하기</li><li>Panel을 닫을 때 Panel 내용이 변경되었다면 파일을 저장할 지 사용자에게 물어보기</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/928/1*ugXoHbo7SOKvWCvwhPYdpw.gif" /><figcaption>Query Panel 구현 모습</figcaption></figure><p>결국 위에서 언급한 모든 이슈는 해결되었고, 위의 그림은 개발이 완료된 Tab Panel을 캡쳐한 것이다. 이렇게 다 만든 뒤에 스크린 캡쳐를 하면 참 쉽게 느껴진다. 하지만 처음 개발에 착수하고 한땀 한땀 코딩을 할 때를 생각하면 어떻게 이런 결과물을 만들어 냈는지 참 뿌듯하고 행복하다. 이 맛에 개발을 하는 것 같다.</p><p>다른 이슈들의 처리 방법은 고수들이 넘쳐나는 인터넷 세상에 수 많은 해결방법들을 찾을 수 있기에 생략하고, 내가 좋아하는 UI 관련 이슈에 대해서 간단히 다루고 넘어가면 좋겠다.</p><p><strong>Drag &amp; Drop Tab Panel</strong></p><p>React로 웹애플리케이션 만든 경험이 아주 많은 편이 아니기 때문에 Drag &amp; Drop에 대해 막연한 두려움을 가지고 있었다. 기존에 jQuery로 개발을 할 때에는 정말 이벤트를 한땀한땀 입혀야 한다고 생각해서 싫었고, 또 파편화된 브라우저가 정말 싫었다. 그래서 가급적이면 Drag &amp; Drop을 사용하기 보다 Mousedown &amp; Mousemove &amp; Mouseup을 이용했었다.</p><p>하지만 이번에는 생각을 처음부터 다시 할 수 있었다. WebView는 Chrome만 지원하면 되는 상황이라 비교적 간단했고, 무엇보다 나의 개발 스킬이 최근 몇 년간 상승되었기 때문이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FkRQBDIdp2EyA0Psya6rQw.png" /><figcaption>Tab JSX</figcaption></figure><p>그래서 막상 코드를 짜고 보니 너무 간단했다. JSX에 draggable 속성을 주고 onDragStart, end, over를 추가하면 된다. over와 start는 드래깅이 시작된 인덱스와 드래깅이 진행중인 인덱스를 파악하기 위해 사용될 뿐이고 실제 가장 복잡한 코드는 dragEnd였다. 가장 복잡했다고는 하지만 이 역시 코드를 보면간단하다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2a23a737c8418d987e9d6bcfbce52568/href">https://medium.com/media/2a23a737c8418d987e9d6bcfbce52568/href</a></iframe><p>queryPanelStore에 sortPanel액션을 만들고 드래그 종료 시점에 dragTabIndex와 dragOverTabIndex를 보내면 dragTabIndex를 위치로 삽입시켜주는 코드를 액션 안에 구현하였다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1136766fb06097c7045a35ce49315b45/href">https://medium.com/media/1136766fb06097c7045a35ce49315b45/href</a></iframe><p>fromIndex의 아이템을 toIndex로 보내기 위해서는 splice API 이용하는 방법을 사용할 수 있다. slice를 2번해서 합치는 방법도 있지만 splice가 좀 더 깔끔하다고 생각한다.</p><p>기존에 array의 순서를 변경하는 코드에서는 movePanel이라는 변수를 만들지 않고 splice가 삭제한 아이템을 return하는 것을 이용하면 한 줄로 코드를 짤 수 있었지만 우리 프로젝트는 mobx &amp; MST를 사용하고 있었기 때문에 2줄의 코드가 더 필요했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/868/1*9aqYOe5r2ML2jE0WVqpznA.gif" /><figcaption>개체 패널 내에서 Drag &amp; Drop</figcaption></figure><h4>쿼리 실행 결과 출력하기</h4><p>QueryPanel 관리에 대한 이슈를 해결하자 더욱 중요한 실행 결과 출력이 남아있었다. 쿼리 실행 결과가 레코드 데이터라면 데이터 그리드로 데이터를 출력해야했다.</p><p>아래는 SQLGate에서 멀티 쿼리를 실행했을 때의 모습인데 대부분의 다른 쿼리 실행 툴이 한 번에 한 개의 데이터를 출력하는데 비해 SQLGate는 쿼리 실행 결과를 한 번에 Panel로 쌓아서 보여주는 형태를 강점으로 가지고 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1008/0*5iKW5yT1_37f8Wxd.png" /><figcaption>SQLGate의 쿼리 실행 결과 (가로/세로 보기)</figcaption></figure><p>사실 한국인들은 무엇이든 한 눈에 보는걸 좋아한다. 무엇이든… 그래서 QueryPie 역시 개발 전부터 쿼리 실행결과를 여러 개 출력해야 할 때 실행 결과를 위 아래로 쌓거나 좌우로 펼쳐서 볼 수 있게 만들겠다고 마음 먹었다.</p><p>하지만 개발자들이 이런 요구를 수용하기 위해 얼마나 많은 고민과 시간을 써야하는지 사용자들은 알지 못할 것 같다. 여기서도 역시 생각지 못한 이슈들이 발생하기 시작했다.</p><p><strong>Issue 1. 예상과 다르게 복잡한 데이터 구조 (</strong> 💀💀💀)</p><p>쿼리에디터에서 작성한 쿼리문을 API에 전달하는 것까지는 간단했다.</p><p>쿼리에디터의 상태가 변경 될 때마다 QueryPanel 모델을 변경해주도록 만들었기 때문에 쿼리를 실행할 때엔 그저 아래의 명령을 실행하는 것으로 모든 일이 끝났다.</p><pre>queryPanelStore.activePanel.execute();</pre><p>하지만 돌아오는 결과는 예상을 뛰어넘었다.</p><p>QueryPie 백엔드와 미들웨어 개발팀은 쿼리 실행결과를 가져올 때 발생할 수 있는 최악의 상황들을 모두 고려하여 매우 복잡한 형태의 데이터 구조를 나에게 알려주었다.</p><p>그래서 쿼리 실행 전에 파싱을 통해 구문을 분석하여 여러 개의 문장으로 만들어 쿼리를 실행하고, 각각의 요청 결과 데이터셋은 병렬화되어 여러 번에 나누어 처리 될 수 있게 만들어주었다.</p><p>물론 개발자의 한 사람인 나로서도 잘 짜여진 데이터 구조를 싫어하지 않는다. 하지만 순박한 프론트엔드 개발자로 돌아와 생각하면 왜 나에게 이런 시련을 주는 것인지 이해 할 수 없었다.</p><p><strong>Issue 2. Result Panel(쿼리 실행 결과 패널) 크기조정 (</strong> 💀💀💀💀💀)</p><p>쿼리 실행 결과는 잘 말아서 표현하면 된다고 생각했지만 각 Result Panel들의 크기를 조정하는 일은 고민이 많았다.</p><ol><li>사용자가 Panel의 크기를 조정하지 않은 상태에서 화면 전체를 리사이즈하거나, 주변 Panel의 크기를 조정하여 결과셋의 크기가 변경되면 크기가 1/n의 크기로 자동조정 되어야 함</li><li>사용자가 여러 개의 Result Panel 중에 한 개의 크기를 조정하면, Result Set의 크기가 변경되어도 사용자가 변경한 Result Panel의 크기는 유지 되어야 함</li><li>Result Panel 내부의 컴포넌트들에서 Result Panel의 크기를 알 수 있어야 함 (컴포넌트 안쪽에 데이터 그리드 컴포넌트를 붙여야하기 때문)</li><li>Result Set의 마지막에 있는 Result Panel의 크기를 조정하면 스크롤 포지션이 그에 맞도록 따라가야 함</li></ol><p>QueryPie를 개발하면서 다른 부분들에 대한 리사이징은 리사이징 할 개체의 너비값이나 높이값을 이용하여 Resizer의 위치를 결정하는 방식으로 개발되었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RTtT-wItL5gOMjdm8YfYTA.png" /><figcaption>에디터와 결과패널 코드</figcaption></figure><p>그렇기 때문에 resizer의 style.top 속성으로 resizerTop의 값을 전달해주면 된다. 이런 방법으로 개발할 때엔 resizer에 마우스 다운 이벤트가 발생 될 때를 감지하여 mouseMove와 mouseDown이벤트를 window나 document에 binding 했다가 resizer moving이 종료되는 시점에 unbinding해주는 방식으로 개발하면 된다.</p><p>이 때, 이벤트 binding, unbinding 관리와 마우스의 포지션을 구하는 코드가 지저분해지기 때문에 최근에는 mouseEventSubscribe라는 함수를 만들어 사용하고 있다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0a6f1ce8c055b5b9f85ada6e154c444a/href">https://medium.com/media/0a6f1ce8c055b5b9f85ada6e154c444a/href</a></iframe><p>mouseEventSubscribe는 마우스 이동이 일어나면 callBack 함수를 실행하는 간단한 함수인데, mouseEventSubscribe를 사용하는 쪽의 코드가 간결해지는데다 EventSubscribe 시작 전의 위치와 변경 후 위치 비교를 손쉽게 할 수 있는 장점이 있다.</p><p>앞서 이야기했듯이 리사이징을 너비나 높이 값으로 처리하는 일은 쉽게 해결이 가능하다. (개발기가 작성된 후에 UI성능을 높이기 위해 mouseEventSubscribe함수 안에서 callback함수 실행을 throttle처리 하였다. <a href="https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa">내용 참고</a>)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/928/1*Q7elyPMXEPNQdcgkr-YESw.gif" /><figcaption>Result Panel (쿼리 실행 결과 패널) 리사이징</figcaption></figure><p>다시 Result Panel의 리사이즈로 돌아와서 보면 Result Panel의 리사이즈는 가로 또는 세로로 쌓여있는 Panel을 리사이즈 해주어야 하기 때문에 Resizer가 절대값으로 표현되면 각각의 Resizer의 위치를 재계산 해주어 하는 문제가 생긴다.</p><p>그런 불필요한 코드를 작성하지 않고 변경될 Panel의 크기로 Resizer가 위치를 잡는 것이 편리하다. 그래서 css flex를 이용하여 Panel과 Resizer를 출력하여 위치를 따로 정하지 않도록 하고, Resizer를 이동할 때 Resizer의 위치로부터 상대적 변화를 측정하여 Panel의 크기를 결정하도록 만들었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IXDB2dmbkOP9XTKJaHURLw.png" /><figcaption>Result Panel (쿼리 실행 결과 패널) 코드</figcaption></figure><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/70453638f92b10ad9717e750db84e8ea/href">https://medium.com/media/70453638f92b10ad9717e750db84e8ea/href</a></iframe><p>끝으로 Resizer가 이동할 때 Scroll Container 밖으로 나갈 경우 Scroll Container의 스크롤 위치를 조정해주도록 하였다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/930/1*dIW-32jEL85xsdDk8x1J5A.gif" /><figcaption>Result Panel (쿼리 실행 결과 패널) 리사이징 &amp; 스크롤</figcaption></figure><h3>마치면서</h3><p>우여곡절 끝에 두 번째 스프린트가 끝나고 이제 세 번째 스프린트가 진행중이다. QueryPie 팀원 모두가 하나되어 매일 열심히 개발하며 디자인, 기획 등 모든 CHEQUER 크루들 역시 QueryPie를 위해 함께 애쓰고 있다. 그렇기에 나 역시 한 눈 팔 새도 없이 하루하루를 보낸다.</p><p>이번에는 리사이즈와 드래그를 주제로 개발기를 썼지만 개발과 동시에 회고를 하느라 좀 더 많은 예제와 참고 자료를 글에 포함하지 못해 아쉽다. 오늘 다루었던 내용들은 QueryPie 개발이 완료되면 좀 더 정리해보고 싶다는 생각을 남기며 이번 개발기를 마친다.</p><p>영어- <a href="https://medium.com/p/49f62ccbf3c">https://medium.com/p/49f62ccbf3c</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fd6a61c80d89" width="1" height="1"><hr><p><a href="https://medium.com/querypie/react-application%EC%97%90%EC%84%9C-drag%EC%99%80-resize-fd6a61c80d89">React Application에서 drag&amp;drop과 resize</a> was originally published in <a href="https://medium.com/querypie">QueryPie</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React로 만드는 Electron 웹 애플리케이션; 레이아웃, AntD Customization]]></title>
            <link>https://medium.com/querypie/react%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-electron-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-antd-customization-817bb2cf1d4b?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/817bb2cf1d4b</guid>
            <category><![CDATA[react]]></category>
            <category><![CDATA[ant-design]]></category>
            <category><![CDATA[electron]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[korean]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Wed, 23 Jan 2019 06:02:52 GMT</pubDate>
            <atom:updated>2019-01-24T01:13:35.266Z</atom:updated>
            <content:encoded><![CDATA[<h4>QueryPie 개발기 #4: 프론트엔드 개발을 시작하며</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kzJHcvV6hdjyQ7pHPyKF3w.jpeg" /></figure><p>지난 1년간 머리 속에서 떠나지 않는 생각이 있다.<br>그것은 바로 새로운 웹 애플리케이션을 만들어야 한다는 것이다.</p><p>새로운 웹 애플리케이션, 정확히는 데이터베이스 쿼리를 Windows, Mac, Linux에서 모두 실행할 수 있고 최신 웹 기술 기반으로 개발되어 예쁘고 섹시한 애플리케이션이다.</p><p>오랜 시간 프론트엔드 개발자로 살아오면서 든 생각은 앞으로 HTML/CSS/ES가 가장 오래 살아남는 주류가 될 것이라는 점이다. 요즘의 흐름을 보면 웹 기술을 응용 프로그램 부분에 접목하는 일이 너무나 자연스러워지고 있고, 나 역시 그 방향으로 나아가야 한다고 생각하고 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*99ndZjvCC2ZOPZK9znI2eg.png" /><figcaption>Electron으로 제작된 App들 (출처: <a href="https://electronjs.org/">https://electronjs.org/</a>)</figcaption></figure><p>그리고 이런 생각이 들기 시작하자 요즘 가장 주목받는 <a href="https://electronjs.org/">Electron</a>을 이용하여 Webview를 렌더러로 사용하고 그 위에 React로 제작된 컴포넌트들을 Webpack으로 번들링하여 SPA(Single Page Application)로 만들어야겠다는 그림이 그려졌다.</p><p>이 새로운 애플리케이션의 이름은 <a href="https://medium.com/querypie/querypie-%EC%83%88%EB%A1%AD%EA%B2%8C-%EC%A0%9C%EC%95%88%ED%95%98%EB%8A%94-sql-ide-6757cf2ec18">QueryPie</a>로 정해졌고, QueryPie 개발팀은 애플리케이션 개발에 필요한 이슈들을 계획한 뒤 2주일 동안 할 수<strong> </strong>있는 일들을 묶어 <a href="https://medium.com/querypie/%ED%8C%80%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%84%B1%EC%9E%A5%ED%95%98%EB%8A%94-agile-scrum-cfaa4b71c263">스프린트 단위</a>로 관리하기로 했다. 그리고 각 스프린트가 끝날 때마다 스프린트 동안의 경험을 모아서 회고의 글을 쓰기로 했다.</p><p>오늘은 그 중에서도 가장 기본이 되는 QueryPie의 레이아웃이 어떻게 탄생했는지에 대해 이야기하려고 한다.</p><h3>QueryPie 레이아웃의 발전 과정</h3><h4>첫 번째 레이아웃: Slack 스타일</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MxgcoBtswclV4llpbJXuwA.png" /><figcaption>Slack과 유사한 첫 번째 레이아웃 안</figcaption></figure><p>첫 레이아웃을 그려보기 시작했다. 위 이미지는 새로운 애플리케이션을 만들기로 했을 때 처음으로 기획했던 레이아웃 안이다. 왼쪽부터 접속 정보, 데이터베이스와 개체 정보, Query 에디터, 실행 결과의 순으로 배치하면 좋겠다고 생각했다. 보이는 것처럼 구조를 단순화하고 간단한 SQL문장을 작성하고 결과를 보는데 큰 문제가 없게 구성했다.</p><p>하지만 만들어놓고 나니 많은 부분 <a href="https://slack.com/">Slack</a>과 비슷한 느낌이 난다. 이 때 당시 Electron 애플리케이션 중에 성공한 Slack의 레이아웃에 빠져 있던것 같다. 간결한 스타일은 좋았지만 데이터베이스 툴에서 중요한 테이블, 뷰, 트리거, 함수 등의 개체 정보 등을 확인하기 위한 공간의 배려가 부족하다는 생각이 들었다.</p><h4>두 번째 레이아웃: Sequel Pro 스타일</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1t1lxwksW6N9x645L6tF0Q.png" /><figcaption>두 번째 레이아웃 참고안: Sequel Pro</figcaption></figure><p>두 번째로 고려했던 레이아웃 안은 <a href="https://www.sequelpro.com/">Sequel Pro</a> 스타일이다(크루들 중 <em>Brant</em>가 특히나 이 레이아웃을 좋아했다). 이 레이아웃을 선택하게 되면 테이블(개체) 단위로 구조, 내용, 관계, 트리거, 정보를 직관적으로 볼 수 있는 장점이 있다.</p><p>이런 직관성을 극대화하기 위해서 왼쪽 개체 목록을 트리가 아닌 리스트 형태로 보여주고 있고, 상단바의 큰 아이콘을 배치하여 선택 테이블의 원하는 정보를 웹사이트의 메뉴처럼 볼 수 있게 해주었다.</p><p>솔직히 이 레이아웃을 보고 든 첫 느낌은 어색함이었다. 오랜 기간 Windows 애플리케이션의 UX에 길들여진 탓인지 이런 구성은 다소 생소하게 느껴졌다. 하지만 차근차근 시간을 두고 살펴 볼 수록 나쁘지 않다는 생각을 하게 되었다.</p><p>그 이유 중 하나는 데이터베이스 관리 프로그램도 점점 더 간결한 디자인으로 가는 추세이기 때문이다. 직군에 따라 차이는 있을 수 있지만, 데이터베이스 관리 프로그램에 접속해서 하는 일 중 대부분은 테이블이나 개체의 정보를 확인하는 일들이고 많은 양의 SQL 문장을 작성하는 일은 상대적으로 적다고 생각했다.</p><p>복잡한 애플리케이션의 경우에는 ORM(Object-Relational Mapping)을 이용하여 길거나 어려운 SQL 문장을 만드는 일이 줄어들고 있고, 간단한 애플리케이션 개발의 경우 테이블 간의 관계가 거의 없는 경우가 많기 때문이다.</p><p>하지만 여전히 단점이 존재했는데, SQL 문장을 작성하면서 개체 정보를 확인하는 일이 어렵고 Query를 동시에 여러 개 작성할 수 없어서 불편하다는 것이다. 또한 상단 바의 크기가 커서 공간을 많이 차지 하고 있다는 느낌을 지울 수 없었다.</p><h4>세 번째 레이아웃: QueryPie 스타일</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QI-VZdNGNzZ2oLYMGV4epg.png" /><figcaption>세 번째 레이아웃 안: QueryPie 가안</figcaption></figure><p>이런 생각들을 바탕으로 세 번째 레이아웃을 만들게 되었다. 위에서 살펴본 2가지 레이아웃 외에도 수 많은 애플리케이션을 벤치마킹하고 레이아웃을 수십 차례 다시 그려야 했다. 현재도 완전히 확정된 안은 아니지만, 이전 안들과 비교해보면 훨씬 더 완성도가 높다고 할 수 있다.</p><p>이 레이아웃의 경우는 우선 쿼리를 중앙에 배치하고 탭으로 관리할 수 있도록해서 SQL 작성이 편하도록 했다. 또 개체 정보는 우측 개체 정보창에 원하는 만큼 모아둘 수 있게 하였다. 사실 세 번째 안이 정해지기 전에 어느 정도 프론트엔드 작업이 진행되고 있었기 때문에 많은 부분을 재작업 해야 했지만, React 컴포넌트를 재구성하기만해도 되는 부분이 있었기에 변경에 많은 시간이 필요하지는 않았다.</p><p>아직 세 번째 레이아웃에 대한 단점은 따로 언급하지 않기로 하겠다. 완벽하다는 의미가 아니라 우리가 선택한 레이아웃이 은하계에서 가장 잘 설계된 레이아웃이라고 생각해야 남은 개발이 즐거울 것 같기 때문이다.</p><p>다만 앞으로 더 나은 UI/UX를 위해 최선의 노력(기획/디자인팀에서 수 많은 실험과 고민을 해나가고 있고)을 계속해 나아갈 것이고 CHEQUER의 최강 프론트엔드 개발팀은 유연하게 변화를 수용하고 어떤 레이아웃이든 편리하고 아름답게 개발할 수 있다고 자신한다.</p><h3>Ant Design 커스터마이징: Modal과 FormItem Validation</h3><p>효율적인 Front-end 개발을 위해서는 잘 짜여진 UI Framework가 꼭 필요하다. 특히나 React 개발자라면 Framework의 중요성에 대해 다시 말할 필요가 없다. 하지만 세상에는 너무나 많은 UI Framework가 존재한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9MvERZgJJgq_Db1c2H8Jlg.png" /><figcaption>그리고 나 역시 언젠가는 전세계인이 사용하는 완벽하고 어디에나 쓰일 수 있는 UI Framework를 만드는 것이 소박한 꿈이다.</figcaption></figure><p>Framework로는 주로 Ant Design을 활용했는데, 이전 글에도 Ant Design에 대한 이야기를 한 적이 있어서 선택 이유에 대해서는 <a href="https://medium.com/chequer/theme-in-react-js-dbf5377d0890">링크</a>로 대체하기로 한다.</p><p>어쨌든 프로젝트를 시작하면서 자연스럽게 $ npm i antd 하고 시작했다.</p><p>한 동안은 본격적인 작업보다 준비 작업을 주로 했기 때문에 큰 문제가 없었다. 하지만 계획대로 될 리가 없었다. 디테일하게 변경해야 하는 부분이 생기고 문제를 해결하기 위해 많은 부분을 수정해야 했다. 겪었던 다양한 문제들 중에 AntD Modal Animation과 FormItem Validation에 관련된 내용들을 공유하고 싶다.</p><h4>AntD Modal Animation; Slidedown</h4><p>AntD Modal Animation은 사용자의 액션이 발생한 곳에서 시작하여 최종 목적지까지 점점 제자리를 찾아가는 방식이다. 이 애니메이션은 구현하려면 손이 많이 가고 어려운데, 이미 잘 만들어진 애니메이션이기 때문에 지금까지는 큰 불만없이 사용하고 있었다. 그런데 이번 프로젝트에서는 왠지 딴 생각이 들기 시작했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RntKpRPSaRKV4ZSTzwLdRQ.gif" /><figcaption>AntD Modal Animation</figcaption></figure><p>딴 생각은 VSCode에서 출발했다. VSCode에서는 사실 Modal이 없는 것과 다름 없지만 많은 UI 요소들이 위에서 아래로 슬라이딩 되고 있었다. 그러자 “슬라이딩 방식으로 변경 할 수 없을까?” 라는 생각이 들었다. UI/UX 측면에서도 애플리케이션에서 같은 기능을 하는 창이 항상 같은 곳에서 떨어진다고 기대하게 하는 편이 사용자에게 편안함을 줄 수 있다고 생각했기 때문이다.</p><p>이런 생각을 하게 된 또 다른 이유는 내가 아는 한 가장 디테일한 UI Framework가 이 정도 수준의 사용자 배려조차 하지 않았을리가 없다고 생각했다.</p><blockquote>아마 어딘가에 Animation을 설정할 수 있을꺼야</blockquote><p><a href="https://ant.design/components/modal/#API">AntD Modal의 API문서</a>를 정독했다. 개발을 16년 넘게 하고 있지만 API를 정독하는 일은 늘 어렵다. 그런데 아무리 찾아봐도 Animation의 Ani도 없었다. 매우 난감한 일이었다.</p><p>힌트를 찾아야 했다. 일단 AntDesign 저장소를 뒤져봤다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7ma53fLm--9SwrPS7DWTiQ.png" /><figcaption><a href="https://github.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L49">https://github.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L49</a></figcaption></figure><blockquote>중국어로 달린 주석을 보면서 코드에 한글로 주석 달지 말아야 겠다는 다짐을 하게 된다. 하지만 주석은 역시 한글로 달아야 제 맛이다.</blockquote><pre>import Dialog from &#39;rc-dialog&#39;;</pre><p>그 결과 AntD Modal은 rc-dialog를 이용하여 작동한다는 사실과 transitionName이란 속성이 있다는 것을 찾을 수 있었다.</p><p>하지만 곧 내가 알아낸 사실들이 빙산의 일각에 불과하다는 것을 깨닫는다. React에서 animation을 사용하기 위해서는 애니메이션의 상태를 관리해야 하는데, 여기에는 여러가지 방법들이 있다는 것이었다. 예를 들어 ‘React animation’ 이란 검색어로 구글에 검색하면 수 많은 글이 있고 <a href="https://bashooka.com/coding/20-useful-react-animation-libraries/">수 많은 라이브러리들</a>이 존재함을 알게 된다.</p><p>그들 중 rc-dialog 라이브러리는 ‘react-transition-group’ (React팀에서 개발한)과 비슷한 작동원리로 개발되었다는 것을 파악했고, 따라서 CSS에서 ‘enter, appear, leave’의 class를 어디서 구현했는지 찾으면 된다고 생각했다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ed5bb2a060efb0495f8aad5824c1f97e/href">https://medium.com/media/ed5bb2a060efb0495f8aad5824c1f97e/href</a></iframe><p>그리고 어렵지 않게 찾을 수 있었다. Modal transitionName값을slidedown으로 정하고 less 파일에 위의 코드를 추가해주었다. transitionName으로 시작하는 각각의 상태에 해당하는 css class들을 재정의 해주니 아래 영상과 같이 Modal 등장 애니메이션이 변경되었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*HxczyeyqwMI4gQH2fyEBMQ.gif" /><figcaption>QueryPie New Connection</figcaption></figure><blockquote>해결하고 나서 돌아보면 “참 별것 아닌 문제인데 고민을 했구나” 하게 된다. 하지만 역시 다양한 애니메이션 요소를 추가하기 위해서는 끊임없는 공부가 필요하다고 생각하게 된다.</blockquote><h4>AntD Form Item Validation</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wfzjsMkVuxKrIHz_QKMdrA.png" /><figcaption>파일 선택 도구와 Validation</figcaption></figure><p>다음으로 해결한 문제는 파일 선택과 Validation 문제이다. AntD에서 Form을 만들고 FormItem값의 입력을 확인하기 위해서는 fileDecorator를 이용할 수 있다. 여기에서 rules 옵션을 추가해주면 form이 submit될 때, rule이 추가된 FormItem값이 비어 있는지 자동으로 체크해주고 편리하게 메세지를 출력해준다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*gScf0Vs3NJ3pu87NyeByUw.png" /></figure><p>하지만 문제는 체크해야 할 입력도구가 일반 Input이나 Select가 아니라는 점 이었다. 여기에서는 파일을 선택하고 선택된 파일을 전송해야 하는데, file input은 그 디자인이 정말 마음에 들지 않았다.</p><p>그래서 별도의 FileSelect 입력도구 컴포넌트를 만들기로 했다.</p><blockquote>FileSelect컴포넌트는 Button에서 click이벤트가 발생하면 참조된 input file엘리먼트에 click이벤트를 발생시켜주고, input file 엘리먼트에 change이벤트를 감지하여 사용자가 선택한 파일을 폼에서 사용하는 방식으로 개발했다.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/930/1*pnrz80qqzYiKU6hYvb3O_Q.png" /></figure><p>이렇게 만든 FileSelector를 FormItem아래에 두고 onChange이벤트를 받았고, setFieldsValue를 이용하여 FileSelector에서 받은 값을 FormItem 값으로 전달하여 문제를 해결하였다. 파일 선택은 FileSelector 컴포넌트에서 처리하고, 입력값에 대한 존재 여부는 fieldDecorator가 담당하여 FileSelector 아래에서 마치 한 몸 인 것처럼 출력하게 해주었다.</p><h3>맺음말</h3><p>이렇게 QueryPie의 초기 레이아웃 발전 과정부터 Ant Design을 활용해서 Modal과 FormItem Validation을 어떻게 구현했는지 살펴보았다.</p><p>수 많은 어려움과 의사결정 과정을 거쳐 지금 새로운 애플리케이션 개발에 착수 하게 되었고 첫 스프린트를 마치고 이렇게 회고의 글을 쓰게 되어 매우 기쁘다. 앞으로 수 많은 스프린트를 쉼없이 해결해 나가며 원하는 목표를 달성해 나갈 것이다.</p><p>새로운 분야에 대한 도전은 언제나 설레고 즐겁다. 물론 그 과정 속에서 겪는 어려움들은 많지만 결과로 얻게되는 성취감은 중독성이 너무 강해서 일하면서 힘들었던 순간들은 모두 머리속에서 지워지게 된다.</p><p>오늘도 이런 생각으로 열심히 개발 중이고, 언젠가 QueryPie 프로젝트를 완성하고 회고의 글을 쓸 수 있는 날을 상상하며 첫번째 글을 조촐하게 마무리하겠다.</p><p>이어지는 개발기에서는 과거와 요즘의 트렌드를 살펴보며 애플리케이션 내 Resizing 및 Drag&amp;Drop 구현 방법을 다뤄 볼 예정이다.</p><p>영어-<a href="https://medium.com/p/890ac7db6cfe/">https://medium.com/p/890ac7db6cfe/</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=817bb2cf1d4b" width="1" height="1"><hr><p><a href="https://medium.com/querypie/react%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-electron-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-antd-customization-817bb2cf1d4b">React로 만드는 Electron 웹 애플리케이션; 레이아웃, AntD Customization</a> was originally published in <a href="https://medium.com/querypie">QueryPie</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Electron Web App made with React ; Layout, AntD Customization]]></title>
            <link>https://medium.com/querypie/electron-web-app-made-with-react-layout-antd-customization-890ac7db6cfe?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/890ac7db6cfe</guid>
            <category><![CDATA[ant-design]]></category>
            <category><![CDATA[english]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[electron]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Wed, 23 Jan 2019 05:33:13 GMT</pubDate>
            <atom:updated>2019-01-24T01:12:55.964Z</atom:updated>
            <content:encoded><![CDATA[<h3>Electron Web App made with React ; Layout, AntD Customization</h3><h4>QueryPie Development #4: Starting with Front-end Development</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kzJHcvV6hdjyQ7pHPyKF3w.jpeg" /></figure><p>한국어: <a href="https://medium.com/p/817bb2cf1d4b/">https://medium.com/p/817bb2cf1d4b/</a></p><p>I’ve had an idea stuck in my head for the past year.</p><p>That idea was to create a new web application.</p><p>A new web application that can run precise database queries on Windows, Mac and Linux. It would be a beautiful application developed with the latest web technology.</p><p>Being a front-end developer for the better half of my life, I’ve always been a firm believer that HTML/CSS/ES would be the longest surviving core technologies. Nowadays we use web technology so much with applications that I knew pursuing that path was the right way to go.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hy3CnSVT4-MkfonHhtZdiQ.png" /><figcaption>Apps made using Electron (source: <a href="https://electronjs.org/">https://electronjs.org/</a>)</figcaption></figure><p>To begin my journey with web technology and application development, I started using the popular open-source framework <a href="https://electronjs.org/"><strong>Electron</strong></a>. In this framework, I used Webview as a renderer and bundled components made from React into a Webpack to create a Single Page Application (SPA).</p><p>The new application was named <a href="https://medium.com/@sqlgate.ch/2b0eff6e3ff">QueryPie</a>.</p><p>The QueryPie development team decided to plan the issues needed for application development and manage them on a <a href="https://medium.com/@engross/89272d85d2ce">Sprint basis</a>, bundling up tasks into 2 week segments. At the end of each Sprint, we decided to write a review of our experiences during the Sprint.</p><p>Today, I want to talk about how the most basic layout of QueryPie was born.</p><h3>Process of QueryPie Layout development:</h3><h4>First Layout: Slack Style</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MxgcoBtswclV4llpbJXuwA.png" /><figcaption>Our first design was very similar to the Slack layout</figcaption></figure><p>The above image is the layout we decided on when the new application was first proposed. When I drew this first layout, I thought it would be better to arrange windows from left to right in order of access information, database and object information, Query editor, and finally execution results. As you can see this design has a simple structure, which has components to enable smooth writing of SQL queries and easy viewing of the results.</p><p>But after I made it, I realized that it felt a lot like <a href="https://slack.com/">Slack</a>. At that point in time, Slack was one of the most successful applications on Electron. I admired the design so much that I had unknowingly followed it. And although I liked the simple style, I felt that there was a lack of space to check important object information for a database tool; like tables, views, triggers, and functions. So it was time for some revisions.</p><h4>Second Layout: Sequel Pro Style</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1t1lxwksW6N9x645L6tF0Q.png" /><figcaption>Second Layout Reference: Sequel Pro</figcaption></figure><p>The second layout we considered was the <a href="https://www.sequelpro.com/">Sequel Pro</a> style. Our CEO, Brant Hwang, favored this style the most. Choosing this type of layout had the advantage of intuitive viewing of structures, content, relationships, triggers, and information in terms of tables (objects).</p><p>To maximize this intuition, the list of objects on the left is presented in a list rather than in a tree. A large icon on the top bar is placed so that the desired information in the selection table can be viewed like a menu on a website.</p><p>To be honest, the first impression I got from this layout was that it was <em>awkward</em>. This configuration seemed strangely offbeat, perhaps because I was so accustomed to the UX in Windows software. But the more I looked at it, the more it grew on me.</p><p>Database management programs are also adopting increasingly simple designs. While there may be differences between the jobs that require accessing and working on databases, the biggest common factor is the need to access data in a table or object. Writing a complex or long SQL query appears to be a relatively smaller percentage of the work.</p><p>This is because for complex applications, Object-Relational Mapping (ORM) is less likely to be used to create long or difficult SQL sentences. For simple application development there is often little relationship between tables.</p><p>However, there are still disadvantages with this design. It is difficult to verify object information while writing SQL sentences, and it’s inconvenient because multiple queries cannot be written at the same time. The size of the top bar was also so large that I couldn’t help but feel like it was taking up a lot of space. So we moved onto the next idea.</p><h4>Third Layout: QueryPie Style</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QI-VZdNGNzZ2oLYMGV4epg.png" /><figcaption>Third Layout: QueryPie</figcaption></figure><p>After considering all the positive and negative points of the previous designs, the third layout was created. Numerous versions of this layout had to be bench-marked and re-painted dozens of times. We really went through <em>so many</em> variants until we settled on this one. And although it is not yet fully established, it is much more solid than the previous proposals.</p><p>In this layout, the SQL editor was placed in the middle and managed as a tab to make writing SQL easier. Object information is collected and easily viewable in the window on the right side. Many of the front-end work had to be reworked because it had already been underway before the third plan was determined. Thankfully, the changes didn’t take much time because only the React components needed to be reconstructed.</p><p>I can’t pinpoint the disadvantages of the third layout. That doesn’t mean that it’s perfect, but we need to believe that the design we chose is the best one in the galaxy in order to enjoy the development period. So we do: it’s <em>the best</em>!</p><p>However, I am confident that I will continue to make the best efforts for better UI/UX. The planning/design team is experimenting a lot to find the correct balance for QueryPie. And CHEQUER’s powerful front-end development team is ready to flexibly accommodate changes and develop any layout conveniently and beautifully.</p><h3>Ant Design Customizing: Modal and Form Item Validation</h3><p>A well-planned UI framework is essential for efficient front-end development. Especially for the React Developer, there is no need to reiterate the importance of Framework. But there are so many UI frameworks in the world.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/1*nZlpJPYNcjIOeAVf-ZodpQ.png" /><figcaption>I also dream of creating a perfect and ubiquitous UI framework that can someday be used by people all over the world.</figcaption></figure><p>Our Framework mainly utilizes Ant Design. I’ve mentioned in a previous posting the reasons we chose Ant Design, which you can check out <a href="https://medium.com/chequer/100ccb334bcb">here</a>.</p><p>So naturally, I started our project with $ npm i antd.</p><p>For a while there were no major problems because I prepared everything in earnest, better than I ever had before. But it didn’t go as planned. There were parts that had to be changed in detail, and we needed a lot of modifications to solve the problems.</p><p>Among the various problems I experienced, I want to share the contents related to AntD Modal and Form Item Validation.</p><h3>AntD Modal Animation; Slidedown</h3><p>AntD Modal Animation is a way to view where a user’s action occurs and how it gradually finds its place to the final destination. This animation takes a lot of work to implement, but it has been used without many complaints since it is already a well-made animation. This project gave me a different idea.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RntKpRPSaRKV4ZSTzwLdRQ.gif" /><figcaption>AntD Modal Animation</figcaption></figure><p>I was inspired when I started using Visual Studio Code (VSCode). Many UI elements were sliding down from top to bottom in VSCode, even when there was no actual modal. It was then that I thought to myself, “Can’t we change it to sliding mode?” From the UI/UX perspective, it would be much more comfortable for users to see windows that function the same in an application would always fall from the same location.</p><p>Another reason for this thought was that as far as I know, the most detailed UI Framework could not have given this level of consideration to its users.</p><p>Was there an animation setting somewhere in <strong>AntD</strong>?</p><p>Eager to find some answers, I read AntD Modal’s <a href="https://www.google.com/search?q=split+movie&amp;oq=split+movie&amp;aqs=chrome..69i57j0l5.1112j0j7&amp;sourceid=chrome&amp;ie=UTF-8">API document</a>. Although I have been developing software for more than 16 years, it is still difficult for me to read APIs carefully. And no matter how hard I looked, there was no information about Animation.</p><p>I had to find a hint. So I searched the AntDesign store first for answers.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7ma53fLm--9SwrPS7DWTiQ.png" /><figcaption><a href="https://github.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L49">https://github.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L49</a></figcaption></figure><blockquote>While looking at the AntD annotations for better understanding, I found myself frustrated because most of the comments were written in Chinese. So when I wrote my own annotations for QueryPie I was determined not to write them in Korean. I didn’t want another developer to become frustrated like I had been. But… Korean is easy for me while English can be a struggle, so I finally understood where they were coming from! :(</blockquote><pre>import Dialog from &#39;rc-dialog&#39;;</pre><p>As a result, I found that the AntD Modal has characteristics like ‘transitionName’ which you can find by using rc-dialog.</p><p>But soon I realized that what I found was just the tip of the iceberg. In order to use animations in React, we need to be able to manage the state of animations. There are many ways to go this. If you search ‘React Animation’ in any search engine, you will find tons of helpful articles and <a href="https://bashooka.com/coding/20-useful-react-animation-libraries/">libraries</a>.</p><p>Among them, the rc-dialog library we found had developed a similar operating principle as ‘react-transition-group’ (developed by the React Development team) so we figured we could implement the class of enter, appear, and leave in CSS.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ed5bb2a060efb0495f8aad5824c1f97e/href">https://medium.com/media/ed5bb2a060efb0495f8aad5824c1f97e/href</a></iframe><p>Thankfully, it was easy to find. The Modal transitionName value is set to slidedown and the code above is added to the <strong>less </strong>file. When we redefined the CSS classes for each condition starting with transitionName, the Modal appearance animation was changed as shown in the image below.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*HxczyeyqwMI4gQH2fyEBMQ.gif" /></figure><blockquote>When I look back this process, I think to myself: “Oh, it’s not a big deal. I really overthought such a simple process.” But I also feel that I need to continue studying to add a variety of animation elements in the future.</blockquote><h3>AntD Form Item Validation</h3><p>My next challenge was file selection and validation. To create a form in AntD and check the input of the FormItem Value, fileDecorator can be used. If you add the rules option here, the rule automatically checks if the added FormItem value is empty and conveniently outputs the message.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*gScf0Vs3NJ3pu87NyeByUw.png" /></figure><p>However, the problem was that the input tools to be checked were not normal Input or Select. Here you have to select a file and then transfer the selected file, but the file input did not really like the design.</p><p>So we decided to create a separate FileSelect input tool component.</p><blockquote>When the Button is clicked, the FileSelect component generates an event in the referenced input file element. The change event in the input file element is detected and develops a user-selected file in a new form.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/930/1*pnrz80qqzYiKU6hYvb3O_Q.png" /></figure><p>We left this created FileSelector under FormItem and received an onChange event. Using setFieldsValue, we passed the value from FileSelector to the FormItem value to solve the problem. The file selection is handled by the FileSelector component, and the existence of the input value is handled by the fieldDecorator. The fileSelector is responsible for printing it as if it were one body.</p><h3>Closing Remarks:</h3><p>From this initial process of developing the layout of QueryPie, we looked at how we implemented Modal and FormItem Validation using Ant Design.</p><p>After many difficulties and decision-making processes, we are now embarking on a new application development. We are very happy to end our first <a href="https://medium.com/querypie/89272d85d2ce">Sprint</a> and write a review. In the future, we will continue to solve many Sprints without a break and achieve our goals.</p><p>Tackling new challenges and new fields is always exciting for me. Personally, I find challenging myself enjoyable. Of course, there are many difficulties in the process, but the resulting sense of accomplishment is so addictive that all the hard times are usually lost beneath the memories of success.</p><p>Even know I’m focusing on that thought. I want to wrap up this development log by imaging a day when I can finish the QueryPie project and see it succeed.</p><p>📃 Our next developer’s log will look at past and current trends to discuss how to implement in-application Resizing and Drag&amp;Drop.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=890ac7db6cfe" width="1" height="1"><hr><p><a href="https://medium.com/querypie/electron-web-app-made-with-react-layout-antd-customization-890ac7db6cfe">Electron Web App made with React ; Layout, AntD Customization</a> was originally published in <a href="https://medium.com/querypie">QueryPie</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Themes in React.js (for Vietnam friends)]]></title>
            <link>https://medium.com/chequer/themes-in-react-js-for-vietnam-friends-100ccb334bcb?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/100ccb334bcb</guid>
            <category><![CDATA[themes]]></category>
            <category><![CDATA[reactjs]]></category>
            <category><![CDATA[styled-components]]></category>
            <category><![CDATA[fbdevcircle-hanoi]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Sun, 14 Oct 2018 15:58:30 GMT</pubDate>
            <atom:updated>2019-01-18T06:17:44.692Z</atom:updated>
            <content:encoded><![CDATA[<h3>Themes in React.js</h3><h3>Hello!</h3><blockquote>My name is Thomas. People usually call me Tom. I have worked as a web developer for more than 16 years in South Korea and I really enjoy programming. That’s also why I love open source. I have created and operated several open source projects.</blockquote><p>In this blog, I want to share my experience and opions on Themes in React.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I1zSvMqYgTq0fgnjJaYPgQ.png" /></figure><p>I’ve been developing with jQuery for over 10 years, and with it I’ve built many websites and libraries. But now I’ve fallen in love with React. There are many reasons why I love React. But today I’d like to share the top two reasons:</p><p>1️⃣ First, React makes developing enjoyable and using JSX is plain fun. Hot Module Replacement is the best function to use, in my opinion. With HRM, you can save a lot of time as you can run your application without refreshing. You can also exchange, add and remove modules while the app is running.</p><p>2️⃣ The second reason is the great UI components made with React. Many useful components can conveniently be found at <a href="https://www.npmjs.com/">NPM</a>, so that speeds up development drastically.</p><h3>Using JSX and Styled Components</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*PrZMMKZSGgYWmQLLAUYKXg.png" /></figure><p>Let’s look at how to develop using JSX and Styled Components.</p><p>Without Styled Components, you need to enter className in the node when styling. And to create or modify a <strong>CSS Class</strong> you will need to open the CSS file.</p><p>But what happens? Usually there are so many files already open on your screen and it’s just chaotic to open another one. You can try adding the <strong>style</strong> property in the next line, but it generally ends up looking messy.</p><p>I think it is better to avoid complicating the body of the render function.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*JQ2vLbtZAvpVGC5FwAogeA.png" /></figure><p>Then what if we just used <strong>Styled Components</strong>?</p><p>We can just create a <strong>Styled</strong> function that can be used directly in JSX with the <strong>styled-component</strong> syntax and use it according to the JSX syntax in the render. And If you use VSCode you can also use a <strong>styled-component</strong> plugin which auto-completes the CSS.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eINJprDJCY3R3x-VAFHUQg.png" /></figure><p>If you have a <strong>Styled-Component</strong> that needs to be re-used or needs to be redefined, you can define it in a separate file and export it.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TSn25_P-y6ovFzpmgbzHog.png" /></figure><p>I like to make image assets into styled components as well. Usually each image is defined in a different style, but that allows me to manage image assets efficiently.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hggyxAWleU4vAvnLswQosw.png" /></figure><p>Like this, you can import the exported components to the specific location that you want and use JSX in your render. It’s very simple and easy to follow! So I like to code semantically in the render with no attributes unless it is really necessary.</p><h3>Awesome Ecosystem</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/752/1*7jtwP8PL8cJ5sgtCfWk8xg.png" /><figcaption>The State of JavaScript Frameworks, 2017</figcaption></figure><p><a href="https://www.npmjs.com/npm/state-of-javascript-frameworks-2017-part-1#">https://www.npmjs.com/npm/state-of-javascript-frameworks-2017-part-1#</a></p><p>This is a graph from the NPM annual report in 2017. As you can see React is growing rapidly every year, and has beaten all the other framework.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*b8DI0gaaUwUlSsKejmnC8Q.png" /></figure><p>You can find almost all the components free for your development if you use React. Creating UI for sites like these components by yourself can be very time-consuming, but if you install NPM you can apply these components to your projects easily by importing them.</p><p>I think the reason why so many great components are available is because of the well-made life cycle of React and JSX.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/626/1*Z0n1vnpi-Cgju9GNc9-M5g.png" /><figcaption>axui-datagrid (<a href="https://github.com/jsdevkr/datagrid">https://github.com/jsdevkr/datagrid</a>)</figcaption></figure><p>And I am also making and distributing some React components myself. <br>One of my components is named <a href="https://github.com/jsdevkr/datagrid"><strong>Datagrid</strong></a>.</p><p><a href="https://github.com/jsdevkr/datagrid"><strong>Datagrid</strong></a><strong> </strong>is designed to print only parts of data that are represented in tables. This way you can print, scroll, and modify data very quickly.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/630/1*VctID4x3_l7aYC_MqsPlxw.png" /><figcaption>react-multi-email (<a href="https://github.com/jsdevkr/react-multi-email">https://github.com/jsdevkr/react-multi-email</a>)</figcaption></figure><blockquote>Thanks in advance for clapping for my blog.. You’ll clap, won’t you? :)</blockquote><h4>Ant Design</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/806/1*mmLJYf5qoVapF3-CCdjZxQ.png" /></figure><p>Okay, back to React. One of the most powerful UI frameworks in recent years is Ant Design. I have tried Bootstrap, Materialize and Semantic UI. But Ant is the most enjoyable to use so far. Here are a few reasons why:</p><p><strong>First</strong>, it’s made of React and Typescript.</p><p><strong>Second</strong>, the variety of components available and its excellent features make it easy to create complex and large web applications.</p><p><strong>Third</strong>, Ant Design has no problem using <strong>Styled Components</strong>. (Style components are not usually available for components that don’t support className props.)</p><p><strong>Fourth</strong>, it is well documented and has many examples.</p><p><strong>And last</strong>, it has more than thirty-four thousand stars on Github.</p><h4>Theme</h4><p>Now let’s get to the main point.</p><p>If you’re a front-end developer working on a web application, you might be thinking about how to create a theme. But themes are hard to make and even harder to maintain.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*VUmLPyNJs9xyzREOAfl5tg.png" /></figure><p>As I mentioned earlier, I like to use Styled Components and Ant Design. To manage Themes using these two, you need to use “LESS” to change the theme for AntD and use the “ThemeProvider” for Styled Components.</p><p>So if you want to change the “primaryColor” value, you must change both the “theme.less” file and the “theme.ts” files. Even if you don’t use AntD, you will have similar issues when you are using Styled Components on other frameworks.</p><blockquote>So how can you change the primaryColor value in one go?</blockquote><p>This would be the main problem if you work in a team with others. I’ve tried many ways to solve the issue, and today I want to share 3 of them with you.</p><h3>First Method: Using the LESS file</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5CyforhzdkYYjywWSi4qiA.png" /></figure><p>In the CSS module loader, you can use the export selector in the LESS file. The CSS-module allows variables in export to be used as variables in JS. In this example, I defined primary_color and info_color.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lmenQ8kTbUQ1sTPvizVfFQ.png" /></figure><p>Then import the LESS file as a theme variable. After that… create ‘<strong>styled</strong>’ and ‘<strong>ThemeProvider</strong>’ according to the Styled Component theme guide.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cADRCm9gCg69t40MF56A3g.png" /></figure><p>Wrap it with a <strong>ThemeProvider </strong>that has theme props.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AIv18minBGOrgnPZZOdJXA.png" /></figure><p>Now you can use the theme variable when you use <strong>styled</strong> on a component.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wKlqoq668h8TbL2-GvSFFQ.png" /></figure><p>To summarize, in the theme in file ‘antd-theme.less’ is exported to ‘<strong>ThemeProvider</strong>’ from ‘<strong>styledComponents</strong>’. This way the components that are wrapped in the ThemeProvider can use the value of the theme. And there is nothing to change in Ant Design!</p><p>The advantage of this method is being able to use the color value from the Theme variable value as a function of LESS. For example, you can use color functions such as lighten, darken, and fade-in with LESS.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*CF_1cHE6N2-QkxP1WKnPfA.png" /></figure><p>But there is a small problem with this method. IDE doesn’t support auto-completion because it doesn’t know the type of the theme that I brought from the LESS file. (To resolve this issue, you must create a d.ts file of the LESS file. I tried to create a d.ts. file every time the LESS file was changed, but it wasn’t a smooth transition.)</p><p>While it is usable, I wasn’t satisfied with it since I use Typescript. <br>So I tried something else.</p><h3>Second Method: Building a LESS file with a TS file</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uqqu7tThKGHmEY6OaslKcA.png" /></figure><p>First, make a “theme.ts” file. Then create a theme object and add primary_color and info_color keys. Export!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Ua2dtp5YAEccS2W9Q3fqww.png" /></figure><p>Now make the ‘theme.ts’ file as a theme variable. Follow this method to create a ThemeProvider as well.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cNTpsoZgM_sFN4Hym-toeA.png" /></figure><p>Create a “theme.ts” file and when you update it, the “theme-vars.less” file is also updated. So styled-components uses the “theme.ts file” as the theme, and Ant uses the “theme-vars.less file” as the theme.</p><p>The most difficult part is how to watch your files.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*afgeK5Ft89OsOWlpAMjuOw.png" /></figure><p>So I decided to use a node. Define the source path to the TS file and the target path to the LESS file.</p><p>Next, create a function called “buildLessVar”. Have the function read the “theme.ts” file and replace it with a dash from underscore to create the file.</p><p>Use “watchFile” in the “nodeJS” to run the “buildLessVar” function whenever the “theme.ts” file updates.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*iKYkFg-tCxJQco_0vH0VSg.png" /></figure><p>Then create a script to run the “package.json” file when NPM starts. We used “ts-node” since we have a TS file.</p><p>So if you enter the “NPM start” command into the terminal, “build-watch” and “WEBPACK services” will be running simultaneously and go on standby.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QRi-kxy9Hl6Tq7qPDrpWuw.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zl32KJjKelhtV7rPvVGYpA.png" /></figure><p>This is what it looks like when the “theme-vars.less” file is created. Once you import from “index.less”, the theme for Ant is resolved.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*D5XEJeONh43ALq_oHr9g2w.png" /></figure><p>Nice! Now you can use AutoComplete with Styled Components.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cfsBNz0YBdnFmuHsl-wPFQ.png" /></figure><p>Not only is AutoComplete available, but TypeScript also gives a notification when the developer accidentally uses the wrong variable name. This really helps avoid mistakes. Convenient, isn’t it? :)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GKGbtLHG6AKHxrw1dIImxg.png" /></figure><p><a href="https://github.com/thomasJang/styling-reactjs-demo">thomasJang/styling-reactjs-demo</a></p><p>Alright, let’s take a look at the demo.</p><p>The source code for this demo can be found in more detail <a href="https://github.com/thomasJang/styling-reactjs-demo">here</a>.</p><p>Enter the “NPM start” command in the terminal to start the server. Let’s open the “theme.ts” file and change the value of primary_color. As you can see, the color of all the controls have changed.</p><p>If you look closely, you will see the color of the title differs from the label color of Form control. And the text-color on the bottom is inverted according to the background color.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*G5dhhuflgjgb1x_IVgaP_Q.png" /></figure><p>To allow color representation to be detailed, we used the color function from the “npm plugin” to modify the color values defined in the theme. Because the way of the color function is a little longer, it would be cleaner to make it simple like in the second line.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*YK-t11mIc9eCzKxKLiowtQ.png" /></figure><p>Finally, the text at the bottom of the page is inverted by determining if the background color is a Dark color.</p><p>This will allow any color to respond to the background color.</p><h3>Third Method: Creating a theme using only CSS</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MoLVQJdu66YphtWNH6dXkQ.png" /></figure><p>Make the variable in the theme into CSS custom properties. You can create a color variable using a keyword in :root selector.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*VuampVZCfqsXDJV-9FSFcQ.png" /></figure><p>Then use the “VAR” function where it’s needed. You can use this feature with any modern browsers except Internet Explorer.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*X6RM5AKbTC405W44_q0G-A.png" /></figure><p>As you can see, CSS overrides AntD.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bWgV_TV8GL52_zGr2sxpLA.png" /></figure><p>Earlier, we used a function to modify the color values. The problem will be solved if you use the “color-mod” that is defined to CSS4 spec.</p><p>Sadly no browsers are supporting this feature yet. But it’s only a matter of time before we can use this feature because it’s rapidly being developed.</p><p>Ok then…. let’s look at a demo of a theme that was created this way.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F5tEL0-VzVOI%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D5tEL0-VzVOI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F5tEL0-VzVOI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/2b962f83117d9649ca0106c6ede45e04/href">https://medium.com/media/2b962f83117d9649ca0106c6ede45e04/href</a></iframe><p>It’s still challenging to use this technology, but it has a promising future.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Us_l6EXx0gRuTVKFLD7r2Q.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*hKmqly7Suy-i5Uv8cu2vdw.png" /><figcaption><a href="https://www.sqlgate.com/product/download?utm_source=medium&amp;utm_medium=contents_eng&amp;utm_campaign=chequer">Click to Download SQLGate Free Version</a></figcaption></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=100ccb334bcb" width="1" height="1"><hr><p><a href="https://medium.com/chequer/themes-in-react-js-for-vietnam-friends-100ccb334bcb">Themes in React.js (for Vietnam friends)</a> was originally published in <a href="https://medium.com/chequer">CHEQUER</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[감사합니다. 화이팅 하세요~]]></title>
            <link>https://medium.com/@axisj/%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%99%94%EC%9D%B4%ED%8C%85-%ED%95%98%EC%84%B8%EC%9A%94-fe4fd7573bf1?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/fe4fd7573bf1</guid>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Sun, 07 Oct 2018 15:06:06 GMT</pubDate>
            <atom:updated>2018-10-07T15:06:06.680Z</atom:updated>
            <content:encoded><![CDATA[<p>감사합니다. 화이팅 하세요~</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fe4fd7573bf1" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Theme in React JS]]></title>
            <link>https://medium.com/chequer/theme-in-react-js-dbf5377d0890?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/dbf5377d0890</guid>
            <category><![CDATA[themes]]></category>
            <category><![CDATA[development]]></category>
            <category><![CDATA[styled-components]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[ant-design]]></category>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Sat, 29 Sep 2018 15:54:45 GMT</pubDate>
            <atom:updated>2018-11-01T12:47:05.246Z</atom:updated>
            <content:encoded><![CDATA[<p>최근 인터넷에서 남자와 여자의 색상 구별법에 대해 읽은 적이 있었다. 여성이 남성보다 색깔의 더 세분화하여 인지한다는 내용이었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*i6pn1opf1EyZYG7DsAaAeQ.png" /></figure><p>나는 웹 개발자로 16년간 일하고 있다.</p><p>최근 10여 년간은 프런트엔드 분야에서 일하고 있다. 프런트엔드는 백엔드개발자와 디자이너 사이에서 일하게 되는 경우가 많다.</p><p>그러다 보니 자연스럽게 남자와 여자 간의 색상 민감도 차이를 백엔드 개발자에게서 느끼고 있다. 그렇다고 백엔드 개발자를 비난하고자 하는 의도는 아니다.</p><p>다만 프론트엔드 개발자가 고민하는 것에 대해 일종의 존중을 해주었으면 하는 생각이 들었다.</p><p>프론트엔드 개발자라면 색상에 대해 민감해질 수 밖에 없다. 사용자가 웹 애플리케이션 혹은 웹사이트(편의상 웹애플리케이션이라 하자)를 구별하는 핵심요소는 Layout(레이아웃), Color(색상), Font(글꼴)라 말할 수 있기 때문이다. 최근에는, HTML에서 다양한 애니메이션 효과를 가미하는 일이 어렵지 않아 져서 핵심요소로 애니메이션도 포함할 수 있지만 여기서는 접어 두기로 하겠다.</p><h3>Color</h3><p>그중에서도 Color(색상)는 가장 중요하다고 말할 수 있다. 색상에 따라 웹 애플리케이션의 성격이 결정되고 때로는 서비스의 성패가 결정될 수도 있다.</p><p>다음의 이미지에서 보듯이 브랜드가 나타내려 하는 핵심가치와 Identity를 색상에서 찾는 사례는 손쉽게 찾을 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/690/1*3Ivsk-ZSNrp6sDkyZ3lNDA.png" /><figcaption>출처 : <a href="https://www.helpscout.net/blog/psychology-of-color/">https://www.helpscout.net/blog/psychology-of-color/</a></figcaption></figure><p>이렇게 중요한 색상을 웹 애플리케이션에서 다루기 위해서는 CSS를 이용하는 것이 가장 효과적이다. 대부분의 웹 애플리케이션은 HTML 을 이용하여 개발하게 되는데. HTML 노드의 스타일을 다루는 데에 가장 좋은 방법은 CSS이고 상상하는 거의 모든 스타일을 표현할 수 있다. (안 되는 거 빼곤 다 된다.)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cC9Z2Ep2lrizukJlGlRfyg.png" /><figcaption>CSS로 그린 호머심슨 출처 : <a href="https://nedbatchelder.com/blog/200805/css_homer_animated.html">https://nedbatchelder.com/blog/200805/css_homer_animated.html</a></figcaption></figure><h3>CSS, SASS</h3><p>CSS는 매우 잘 만들어진 뷰시스템이다. 하지만 프론트엔드개발자, 백엔드개발자, 디자이너를 포함한 모든 IT 종사자들은 웬만한 근성 없이는 CSS를 완벽히 만들 수 없다는 사실을 잘 알고 있다.</p><p>CSS에서 변수나 함수를 사용할 수 없으므로 반복적인 타이핑의 수가 많아지고 수정을 해야 할 때 많은 변경을 해야 하기 때문이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/1*NxYNnMDDdJp-ZSP1QDs0NA.png" /><figcaption>출처 : <a href="https://orezytivarg.github.io/css-evolution-from-css-sass-bem-css-modules-to-styled-components/">https://orezytivarg.github.io/css-evolution-from-css-sass-bem-css-modules-to-styled-components/</a></figcaption></figure><p>우리 인류는 이런 어려움을 해결하는 방법을 고안해냈다. 바로 SASS, SCSS, LESS와 같은 전처리기들이다. 나의 경우엔 2013년 무렵 처음 이러한 기술에 대해 알게 되었고 열광했다. CSS를 만드는데 변수, 함수 더 나아가 반복문을 사용할 수 있다니. 그냥 가능하다는 사실만으로도 행복했다. 처음에는 LESS를 이용해보고 그다음엔 SCSS로 갈아타게 되었다. 나는 LESS나 SCSS를 2014년부터 현재까지 계속 사용하고 있고 앞으로도 사용할 것 같다. 아마도 극히 예외적인 상황을 제외하고는 CSS를 직접 사용하는 일은 없을 것 같다.</p><h3>Styled Components</h3><p>하지만 웹 애플리케이션 개발환경의 변화는 추억을 남겨둘 시간을 허락하지 않았다. 영원할 줄만 알았던 jQuery 통일시대는 갑작스러운 AngularJS의 출현과 그 뒤를 이어 탄생한 ReactJS로 인해 jQuery는 점점 쇠락의 길을 걷게 되었다. 나의 경우엔 ReactJS를 사용하기로 했다. VueJS나 AngularJS도 훌륭하지만 개발하는 동안의 만족감이나 트랜드를 보아 ReactJS를 사용하기로 결정하였다. (작년 이맘때 썼던 글에서도 한번 이야기했었다. <a href="https://medium.com/chequer/vanillajs-es6-reactjs-typescript-2de2e7a764a5)">https://medium.com/chequer/vanillajs-es6-reactjs-typescript-2de2e7a764a5)</a></p><p>ReactJS의 가장 매력적인 부분 중에 하나는 로직과 템플릿(뷰)를 통합 개발한다는 점이다. 과거에는 분리해서 개발하는 것이 미덕이었지만. 템플릿의 각 DOM 요소를 컴포넌트로 만들어 배치하는 방법으로 개발을 하다 보면 자연스럽게 생각이 바뀌게 된다. 아무튼, ReactJS로 컴포넌트를 개발하다 보면 컴포넌트 안에 해당 컴포넌트에 필요한 모든 요소를 담아두고 패킹하고 싶어진다. 또한, 실 서비스 배포 시 bundle에 사용되지 않는 요소를 제거하고 필요한 내용만 담는 (Tree Shaking) 작업을 위해서도 컴포넌트를 깔끔하게 패킹하는 일은 필요하다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/794/1*m6pZLsLFM_nTTJKzc6wTrg.png" /><figcaption>styled-components 사용예</figcaption></figure><p>Styled Components를 이용하여 컴포넌트를 만들면 render 함수 안에서 JSX 태그를 마치 HTML dom과 같이 작성할 수 있어 컴포넌트 스타일링작업이 편리하고 깔끔해져서 개발자의 만족감이 높아지게 된다.</p><p>게다가 <a href="https://www.styled-components.com/docs/advanced#theming">https://www.styled-components.com/docs/advanced#theming</a> 에서 확인할 수 있듯이 Theme을 이용할 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/827/1*fO8uH8BD2DMOzGqpycMIFQ.png" /><figcaption>theme.js</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/653/1*M_dM6xhsiOac4KYJ_3Ic9A.png" /><figcaption>Styled Components Theme Provider</figcaption></figure><p>theme.js 파일을 만들고 ThemeProvider의 props으로 전달하면 styled 컴포넌트 선언부에서 props.theme.primary_color로 사용할 수 있게 된다.</p><h3>Theme</h3><p>서론에서 언급했듯이 프런트엔드 개발자의 가장 큰 고민 중에 하나는 웹 애플리케이션의 Theme를 어떻게 만들 것 인가이다. 그중에서도 Theme Color를 어떻게 선언하고 그것에 맞게 개발을 하는 것이 좋을까?</p><p>Styled Components에서 이미 Theme 사용법을 알려주고 있기 때문에 웹애플리케이션을 Styled Components만으로 만든다면 고민할 필요가 없다. 프론트엔드 개발자는 색상의 이름을 어떻게 결정할지 작명소에 다녀오는 것으로 필요한 일이 끝났다고 할 수 있다.</p><p>하지만 웹 애플리케이션을 개발하는데 모든 컴포넌트를 다 직접 만들 필요는 없다. 세상에는 개인의 만들 수 없을 만큼 훌륭한 UI Framework들이 너무도 많기 때문이다.</p><p>Bootstrap, Material-UI, Semantic UI, AntDesign 등의 UI Framework들을 이용하면 프런트엔드 개발자는 많은 시간을 절약할 수 있고 게다가 대부분은 직접 만든 것보다 품질이 우수하다.</p><p>나의 경우에 앞서 언급한 UI Framework들을 모두 경험해 보았고 현재는 AntDesign을 이용하고 있고 앞으로도 이용할 생각이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GCerIQrb4_vrMEuhCmpr5Q.png" /><figcaption><a href="https://ant.design/">https://ant.design/</a></figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*3bANSX3h7slG4UZDxwuPHA.png" /><figcaption><a href="https://ant.design/components/date-picker/">https://ant.design/components/date-picker/</a></figcaption></figure><h4>Ant Design을 선택한 이유</h4><p>그렇다면 많은 UI Framework들중에서 Ant Design(줄여서 antd라고 하자)를 선택하게 되었을까?</p><ul><li>ReactJS + Typescript로 개발되어 있다.</li><li>제공되는 컴포넌트의 종류가 다양하고 기능이 다양해서 복잡한 웹 애플리케이션 개발이 가능하다.</li><li>Styled Components와 함께 사용하는데에 문제가 없다.</li><li>문서화가 잘 되어 있다.</li><li>벌써 Star수가 34,000개 이상이다.</li></ul><h4>Ant Design theme system</h4><p>antd는 LESS를 기본 CSS 시스템으로 테마를 제공하고 있다. 아쉽게도 Styled Components를 사용하고 있지 않다. 범용적으로 사용되는 UI Framework가 Styled Components를 사용하기는 쉽지 않았을 것으로 예상된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*m5vbdrgOlpgMFx7XNP2lMw.png" /><figcaption>antd-theme.less</figcaption></figure><h3>테마 변수의 통합관리</h3><p>Styled Components와 antd를 함께사용하면서 테마를 사용하려면 테마변수가 분리되어 있어서 너무도 불편하다. theme.js 파일의 “primary_color”와 antd-theme.less 파일의 “@primary-color”는 같은 색상인데 색상을 변경하기 위해 2번의 작업을 해주어야 하기 때문이다.</p><blockquote>사실 겨우 2번의 작업 이면 되는일이다.</blockquote><p>과거의 나라면 근성으로 매번 변경이 있을 때마다 2번씩 파일을 고치고 있을 것 같다. 하지만 현재의 나에겐 용납할 수 없는 일이다.</p><p>그럼 어떻게 1번의 변경으로 변수를 변경할 수 있게 할 수 있을까?</p><p>처음에는 less파일에 css-moduls에서 지원하는 :export를 이용하여 ThemeProvider에서 이용할 수 있는 변수를 만들어 사용하는 방법을 시도 했다가. 지저분한 몇가지의 상황을 겪게되어 다음의 방법을 결정 하게 되었다.</p><p>theme.js(ts로 나중에 변경) 파일이 변경 될 때마다 node를 이용하여 less파일을 만들어 LESS에서 변수를 변경 하도록 하는 방식이다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a183ede3312137cc733a831c3e7ab9b0/href">https://medium.com/media/a183ede3312137cc733a831c3e7ab9b0/href</a></iframe><p>generate-less-var.ts를 만들고 package.json scripts에 몇줄을 추가해 주었다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/dca3ef9671202e25dcf5eaf22eefc46f/href">https://medium.com/media/dca3ef9671202e25dcf5eaf22eefc46f/href</a></iframe><p>이렇게 해두고 npm start해주면 시작할 때 한번 theme.js 파일을 theme-vars.less파일로 만들어주고 theme.js 파일은 fs.watchFile에 의해 감시되다가 변경이 되면 theme-vars.less파일로 만들어 주게 된다.</p><p>React Component에서는 Styled Component를 이용하면서 테마변수를 다음과 같이 사용 할 수 있게되고</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5253e2cabd6025973414a229f11233df/href">https://medium.com/media/5253e2cabd6025973414a229f11233df/href</a></iframe><p>antd에서는 theme-vars.less 파일에서 정의된 테마변수로 CSS가 빌드 되어 테마를 변경하게 된다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F5tEL0-VzVOI%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D5tEL0-VzVOI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F5tEL0-VzVOI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/2b962f83117d9649ca0106c6ede45e04/href">https://medium.com/media/2b962f83117d9649ca0106c6ede45e04/href</a></iframe><p>마지막으로 Styled Components안에서 theme의 색상사용을 좀더 유연하게 하기 위해서 LESS나 SCSS에서 처럼 색상을 조절하는 방법에 대해 소개하고 글을 마감하려 한다.</p><p>“#000000” 이 테마에서 결정한 색상이라면 컴포넌트 안에서 색을 그대로 사용하지 않고 약간 밝게 또는 약간 어둡게 변경해서 사용하고 싶을 때가 있다. 이럴 때 color(https://www.npmjs.com/package/color)를 이용하면 좋다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/743/1*Ak_gAaQjODhIQ261LXXVdw.png" /></figure><p>color 패키지를 기본으로 사용하면 다소 장황하게 되는데. color-util을 만들어서 래핑하여 사용하면 더욱 간결하게 이용할 수도 있다.</p><h3>끝으로</h3><p>이 글에서는 다루고 있지 않지만. CSS Custom Properties(<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">https://developer.mozilla.org/en-US/docs/Web/CSS/--*</a>)를 이용하는 방법으로 테마를 만드는 실험도 해 보았다. 하지만 IE에서 사용할 수 없는 문제와 antd 의 CSS를 모두 재작성해야 하는 문제로 포기하게 되었다. 하지만 멀지 않은 미래에는 가능할 것으로 생각된다. 하루빨리 환경이 변해서 좀 더 역동적이게 테마를 변경할 수 있게 되기를 바래본다.</p><blockquote>다음글 : <a href="https://medium.com/chequer/themes-in-react-js-for-vietnam-friends-100ccb334bcb">https://medium.com/chequer/themes-in-react-js-for-vietnam-friends-100ccb334bcb</a> 맨 아래쪽을 보시면 CSS만으로 테마를 변경하는 데모를 보실 수 있습니다.</blockquote><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dbf5377d0890" width="1" height="1"><hr><p><a href="https://medium.com/chequer/theme-in-react-js-dbf5377d0890">Theme in React JS</a> was originally published in <a href="https://medium.com/chequer">CHEQUER</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why did you limit yourself?]]></title>
            <link>https://medium.com/@axisj/why-did-you-limit-yourself-7152ec778779?source=rss-1394c533dcdd------2</link>
            <guid isPermaLink="false">https://medium.com/p/7152ec778779</guid>
            <dc:creator><![CDATA[Thomas Jang]]></dc:creator>
            <pubDate>Sat, 10 Mar 2018 05:58:10 GMT</pubDate>
            <atom:updated>2018-03-10T05:58:10.006Z</atom:updated>
            <content:encoded><![CDATA[<blockquote>모처럼의 휴일이 찾아왔다. 휴일이 되었다고 해서 특별한 무언가를 하지는 않는 편이지만 휴식은 언제나 기다려진다. 그날은 별다른 이벤트가 없는 날이기에 오전에는 간단히 아침을 먹고 잠시 코딩을 즐기다. 낮잠을 청하기로 했다.</blockquote><p>낮잠을 자게 되면 가끔 꿈을 꿀 때가 있다. 이런 경험 누구나 있을 것 같다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*u7HXR1wMeX4xaRtLWXY4OQ.png" /></figure><p>꿈속에서 나는 축구장에서 공을 향해 달려가고 있었다. 그런데 아무리 달려도 공을 잡지 못하고 계속해서 뛰어야만 했다. ‘헉헉’ 숨이 너무 차고 심장이 터져버릴 것 같았다.</p><blockquote>“내가 저공을 잡을 수 있을까?”</blockquote><p>포기하면 그만일 텐데 알 수 없는 이유로 꼭 저 공을 잡아야 했다. 그러다 가슴 통증이 너무 심해서 잠이 깨고 말았다. ‘헉헉’ 정말 힘들다.</p><p>나는 금세 이상하다는 것을 느꼈다. 모든 것은 꿈이고 상상 속의 상황일 뿐인데 실제로 고통을 느끼다니? (사실 잠이 깬 후에도 한동안 숨을 골라야 했다) 그리고 정확히 어느 정도의 거리를 달리기했는지는 알 수 없지만, 일정 거리 이상 달리기를 하고 숨이 차고 통증을 느끼게 되었는데. 이런 내 몸의 한계치는 누가 정한 것일까?</p><p>지금껏 달리기할 때마다 나는 내 몸이 가진 한계 때문에 나는 달리기를 잘 하지 못한다는 생각을 해왔다. 자동차엔진이 정해진 한계 이상의 힘을 낼 수 없듯이 내 몸이 가진 한계치에 다다르면 고통이라는 시그널이 켜지고 그에 따라 한계를 넘지 않도록 속도를 줄이거나 달리기를 그만두었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*rov7Svn351KDOyuqt0BQNw.png" /></figure><p>그런데 이건 내 꿈속이지 않은가. 꿈속에서 나는 하늘을 자유롭게 날 수도 있고 돌고래처럼 바닷속을 자유롭게 달릴 수도 있다. 그뿐인가 꿈속에서라면 나는 우주 공간을 빛처럼 날아 또 다른 태양계를 찾아 신이 될 수도 있다.</p><p>지금도 기억이 생생한 국민학교 시절에 꿈속에서 나는 당시 초등학교 건물 위를 자유롭게 날아다닌 기억이 난다. 그다음 날 기말고사 보는 날이었는데 당시 나는 그 꿈을 꾸고 모든 과목 100점을 받았던 기억이 난다.(한 개 틀렸었나?)</p><blockquote>그런데 지금은 어떤가? 고작 달리기 조금에도 금세 한계를 느끼다니!!</blockquote><p>이런 생각을 하게 되니 모든 일이 스스로 내가 정한 나의 한계를 넘지 않도록 행동했다는 생각을 하게 되었다. 한 번에 내가 정한 한계를 바꾸려면 많은 시간이 필요하겠지만 한 번에 하나씩 지금 눈에 보이는 내 앞의 한계 하나를 치워 버리는 노력을 해야겠다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7152ec778779" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>