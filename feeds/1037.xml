<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kirade의 코딩로그</title>
    <description>Web Developer using python</description>
    <link>https://kirade.github.io/</link>
    <atom:link href="https://kirade.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 08 Apr 2019 00:49:37 +0000</pubDate>
    <lastBuildDate>Mon, 08 Apr 2019 00:49:37 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>[Python] 객체 복사하기 (copy, deepcopy)</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a = 'python'&lt;/code&gt;과 같이 파이썬이 변수에 어떤 객체를 할당 할 때에는 객체의 사본을 만들지 않고 이름만 연결을 하게됩니다. 따라서, 만약 할당되는 객체가 변경할 수 없는 객체(Immutable)라면 일반적인 할당으로도 의도한대로 동작합니다.&lt;/p&gt;

&lt;p&gt;반면, 변경 가능한 객체 또는 변경 가능한 객체의 컬렉션을 다룰 때는 단순히 할당문을 이용하여 할당을 할 경우 의도한대로 코드가 동작하지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;코드들을 프로그래머가 의도한 대로 동작시키기 위해서는 파이썬에서 객체들을 어떻게 객체 복사 방식을 이해할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;파이썬에서는 크게 복사 방식을 얕은 복사(copy)와 깊은 복사(deepcopy)로 나눌 수 있습니다. 이번 포스팅에서는 파이썬의 얕은 복사(copy)와 깊은 복사(deepcopy)의 동작을 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h4 id=&quot;얕은-복사copy-깊은-복사deepcopy&quot;&gt;얕은 복사(copy), 깊은 복사(deepcopy)&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new_list = list(original_list)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;new_dict = dict(original_dict)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;new_set = list(original_set)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 변경 가능한(Mutable) 내장 컬렉션은 팩터리함수에 기존 컬랙션을 전달하여 복사할 수 있습니다. 이는 앞서 언급한 일반적인 할당 방식으로 앞서 언급한 복사 방식 중 &lt;strong&gt;얕은 복사&lt;/strong&gt; 방식 입니다.&lt;/p&gt;

&lt;p&gt;얕은 복사는 ‘한 단계 깊이’까지 객체를 복사하게 됩니다. 즉 위의 예제의 할당 방식으로 객체를 복사하게 되면 한 단계 깊이의 객체는 복사되지만 그 객체가 가지고 있는 자식들은 복사되지 않습니다.&lt;/p&gt;

&lt;p&gt;반면, 깊은 복사는 얕은 복사 방식에서 추가적으로 자식들을 재귀적으로 복사하는 동작을 수행하여 변경 가능한 객체들의 자식들까지 복사할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;얕은-복사본&quot;&gt;얕은 복사본&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;일반적인 할당방식으로 자식으로 리스트 객체를 가지고있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;리스트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;변수에 컬렉션 팩토리를 이용하여 복사하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;따라서, 다음 변수들을 호출해보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;가 같은 내용을 가지고 있는것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;만약, &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;리스트에 새로운 엘리먼트를 추가하게 되면 어떻게 될까요?&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'new sublist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'new sublist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;예상했던 대로, &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;에만 새로 추가한 엘리먼트가 추가되었습니다.&lt;/p&gt;

&lt;p&gt;처음에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;의 원본 자식 객체에 대한 얕은 복사를 하여 원본이 처음 가지고있던 자식 객체들에 대한 참조만 들고 있기 떄문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;에서 자식을 추가하여도 &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;에서는 변화가 없습니다.&lt;/p&gt;

&lt;p&gt;그렇다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;로부터 복사해혼 &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;의 자식들의 변경이 일어나면 어떨까요?&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'new sublist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;의 자식을 변경했을 뿐인데, &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;가 가지고있는 자식도 변경되었습니다. 이는 앞서 언급했듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;의 자식들을 복사한것이 아니라 참조를 그대로 들고있기 때문입니다.&lt;/p&gt;

&lt;p&gt;얕은 복사는 이와같이 동작합니다.&lt;/p&gt;

&lt;h4 id=&quot;깊은-복사본&quot;&gt;깊은 복사본&lt;/h4&gt;

&lt;p&gt;앞서 얕은 복사본에서는 ‘한 단계 깊이’의 객체만 복사되고 자식 객체들은 복사되지 않는 다는것을 확인했습니다.&lt;/p&gt;

&lt;p&gt;앞으로 소개할 얕은 복사와 다르게 자식객체들까지 복사 할 수 있는 깊은 복사는  파이썬 표준 라이브러리인 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; 모듈을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;deepcopy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;앞의 얕은 복사와 다른 점은 일반적인 팩토리를 사용한 할당이 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy.deepcopy&lt;/code&gt;를 사용하여 할당했다는 점입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;내용을 출력해보면 얕은 복사와 동일하게 표시됩니다. 하지만 깊은 복사를 사용하게 되면 자식 객체들까지 복사가 된다고 했습니다. 따라서, 앞서 얕은 복사에서 했던 자식객체를 변경하는 실험을 했을 때 얕은 복사와 다른 결과가 나오리라는 것을 예상할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;의 자식 객체의 내용이 변화했는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;copy.deepcopy&lt;/code&gt;로 복사한 &lt;code class=&quot;highlighter-rouge&quot;&gt;zs&lt;/code&gt;는 그대로 자신의 자식 객체를 유지하고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;정리&quot;&gt;정리&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;객체의 얕은 복사본을 만들면 자식 객체는 복사되지 않습니다. 따라서 사본은 원본과 완전히 독립적이지 않습니다.&lt;/li&gt;
  &lt;li&gt;깊은 복사는 재귀적으로 원본의 자식 객체들을 복사합니다. 따라서 사본이 원본과 독립적입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Python Tricks The Book - 댄 베이더&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 Apr 2019 09:07:00 +0000</pubDate>
        <link>https://kirade.github.io/python/2019/04/08/python-%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0-copy-deepcopy/</link>
        <guid isPermaLink="true">https://kirade.github.io/python/2019/04/08/python-%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0-copy-deepcopy/</guid>
        
        <category>Python</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>[Python] Lambda 함수의 사용</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;이 글은 Python Tricks The Book 이라는 책 3장에 소개되는 Lambda 함수에 관한 내용을 정리했습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h4 id=&quot;일급-객체&quot;&gt;일급 객체&lt;/h4&gt;

&lt;p&gt;lambda 함수를 이해하기 위해선, 파이썬의 특징 중 하나인 일급 객체에 대한 이해가 필요합니다.&lt;/p&gt;

&lt;p&gt;파이썬에서 함수가 일급 객체라는 사실은 파이썬의 중요한 특징 중 하나입니다. 이 때문에 함수를 변수에 할당하거나 다른 함수의 인자로 전달하는 등의 동작이 가능해집니다.&lt;/p&gt;

&lt;p&gt;예제 코드를 한 번 살펴보시기 바랍니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yell&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WOW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yell&lt;/code&gt;이라는 함수를 정의해두고 &lt;code class=&quot;highlighter-rouge&quot;&gt;bark&lt;/code&gt;라는 변수에 할당한 뒤, &lt;code class=&quot;highlighter-rouge&quot;&gt;bark&lt;/code&gt;를 호출하니 &lt;code class=&quot;highlighter-rouge&quot;&gt;yell&lt;/code&gt; 함수에 정의된 함수가 실행이 되었습니다. 이런 특징들은 파이썬을 활용하여 코드를 작성하는데 있어서 다양하게 활용됩니다.&lt;/p&gt;

&lt;h4 id=&quot;lambda-함수&quot;&gt;Lambda 함수&lt;/h4&gt;

&lt;p&gt;Lambda 함수는 lambda 키워드를 사용하여 만든 작은 익명의 함수입니다.&lt;/p&gt;

&lt;p&gt;일반적으로 함수를 정의할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; 키워드를 사용하여 함수를 정의하는데, 이와 동일하게 작동합니다. 또한 함수 객체가 필요할 때마다 즉석에서 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들면 다음과 같이 lambda 함수를 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;를 이용하여 정의한 다음 코드 블럭의 내용과 정확히 같은 동작을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 알 수 있는 lambda 함수의 특징 중 하나는 익명 함수라는점 입니다. 즉, 익명의 함수로써 함수 객체를 이름에 바인딩할 필요가 없다는 뜻입니다.&lt;/p&gt;

&lt;p&gt;이는 함수 객체를 미리 정의해두고 호출할 필요없이, 필요한 순간에 lambda 함수를 정의하고 즉시 평가하여 결과를 얻을 수 있다는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;lambda는-언제-사용하는가&quot;&gt;Lambda는 언제 사용하는가?&lt;/h4&gt;
&lt;p&gt;기술적으로는 함수 객체가 제공되어야 할 때 람다 표현식을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;가장 흔하게 보는 경우는, 리스트 정렬시 키 함수를 제공할 때 입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 key를 lambda 함수를 이용하여 각 튜플의 두 번째 값으로 목록을 정렬할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;labmda-함수를-자제하는-경우&quot;&gt;Labmda 함수를 자제하는 경우&lt;/h4&gt;
&lt;p&gt;lambda 함수를 사용하는 방식이 유지 보수의 측면에서 좋지 않을 경우에는 지양하는 것이 좋다. 코드를 작성하는 사람 스스로는 편할 수 있겠지만, 다른 사람들에게 가독성이 좋지 못해 유지보수가 어려워 질 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들면 다음과 같은 경우입니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 두 가지 방식 모두 동일한 결과를 반환합니다. 하지만 가독성 측면에서 굳이 lambda를 사용하기보단 list comprehension을 사용하여 작성한 것이 더 깔끔하고 가독성이 높아보입니다.&lt;/p&gt;

&lt;p&gt;길게보면 코드를 작성할 때 lambda 함수를 써서 타이핑을 줄이는것보다 간결하고 가독성이 높은 코드를 작성하는것이 더 바람직 합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Mar 2019 00:05:00 +0000</pubDate>
        <link>https://kirade.github.io/python/2019/03/26/python-lambda-%ED%95%A8%EC%88%98%EC%9D%98-%EC%82%AC%EC%9A%A9/</link>
        <guid isPermaLink="true">https://kirade.github.io/python/2019/03/26/python-lambda-%ED%95%A8%EC%88%98%EC%9D%98-%EC%82%AC%EC%9A%A9/</guid>
        
        <category>Python</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>[Python] Assert 구문 사용하기</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;이 글은 Python Tricks The Book 이라는 책 2장에 소개되는 파이썬의 Assertion 에 관한 내용을 정리했습니다.&lt;/p&gt;

&lt;p&gt;파이썬을 사용한 프로젝트를 진행하거나 코드를 읽다보면 종종 Assertion 구문을 만나곤 합니다. 정확하게 이 구문이 언제 사용되는지 혹은 어떻게 사용해야 하는지 알지 못하고 넘어가곤 했습니다.&lt;/p&gt;

&lt;p&gt;읽은 책의 내용을 토대로 Assertion 구문을 &lt;strong&gt;언제&lt;/strong&gt; 그리고 &lt;strong&gt;어떻게&lt;/strong&gt; 사용하는지 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h4 id=&quot;assertion&quot;&gt;Assertion&lt;/h4&gt;
&lt;p&gt;Assertion 구문은 어떤 조건을 테스트하는 &lt;strong&gt;디버깅 보조 도구&lt;/strong&gt; 라는 것이 핵심입니다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 assert 가 사용되는 예시입니다.&lt;/p&gt;

&lt;p&gt;온라인 쇼핑몰에서 할인 쿠폰 기능을 시스템에 추가하고, 다음과같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply_discount&lt;/code&gt; 함수를 작성했습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_discount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;의도대로라면, 이 함수로 계산된 가격은 0원보다 낮을 수 없고, 할인되었기 때문에 원래의 가격보다 높으면 안됩니다.&lt;/p&gt;

&lt;p&gt;일반적인 경우라면, 할인율(&lt;code class=&quot;highlighter-rouge&quot;&gt;discount&lt;/code&gt;)이 0이상 1이하의 범위일 것입니다. 이런 경우에는 당연하게도 할인된 가격이 assert 구문의 조건을 참으로 만들게 됩니다.&lt;/p&gt;

&lt;p&gt;하지만, 할인율(&lt;code class=&quot;highlighter-rouge&quot;&gt;discount&lt;/code&gt;)이 0이상 1이하의 범위가 아니라면 어떨까요? 예를들면 할인율이 2가 되면, price는 음수가 될 것입니다. 즉, 상품을 사는 고객에게 돈을 더 줘야 됩니다.&lt;/p&gt;

&lt;p&gt;다행히도 assert 구문에서는 이런 경우에 assert 구문의 조건이 거짓이 되므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;AssertionError&lt;/code&gt;라는 예외가 발생하게 됩니다.&lt;/p&gt;

&lt;p&gt;만약 자신이 이 코드를 작성한 프로그래머라고 가정해 보겠습니다. 이 함수내에 Assertion 구문이 없었다면, 쇼핑몰을 운영하는 도중 문제가 발생했을 때, 디버깅 하는것이 생각보다 쉽지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;반대로, Assertion 구문을 적절하게 위치시켜 버그 상황시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AssertionError&lt;/code&gt; 예외가 발생한다면 위치에 대한 스택트레이스(stacktrace)를 확인하여 버그를 쉽게 디버깅 할 수 있을것입니다.&lt;/p&gt;

&lt;p&gt;이것이 Assertion 구문이 가지는 힘입니다.&lt;/p&gt;

&lt;h4 id=&quot;일반-예외처리와-무엇이-다른가&quot;&gt;일반 예외처리와 무엇이 다른가?&lt;/h4&gt;

&lt;p&gt;Assertion 구문은 일반적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;구문 &lt;code class=&quot;highlighter-rouge&quot;&gt;try - except&lt;/code&gt; 구문을 사용한 예외처리와 다른 역할을 합니다. 예를 들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;File-Not-Found&lt;/code&gt;와 같은 예상되는 에러 조건을 검사하기 위해 사용되는것은 올바른 활용 방식이 아닙니다.&lt;/p&gt;

&lt;p&gt;이 구문은 예상하지 않은 프로그램의 상태를 확인하기 위해 활용해야 합니다. 구문의 조건을 만족하지 않으면 프로그램이 정상적으로 실행되지 않고 종료되는데, 이는 프로그램의 버그가 있다는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;이런 특징으로 비추어 볼 때, Assertion 구문이 런타임 환경이 아닌 &lt;strong&gt;디버깅 환경&lt;/strong&gt; 에 도움을 주는 역할을 한다는 것을 알 수 있습니다. 개발자는 이를 토대로 개발환경에서 편안하게 디버깅하게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;문법&quot;&gt;문법&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;assert_stmt ::= &quot;assert&quot; expression1 [&quot;,&quot;, expression2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expression1&lt;/code&gt;은 테스트 조건이고, 뒤의 &lt;code class=&quot;highlighter-rouge&quot;&gt;expression2&lt;/code&gt;는 테스트 조건이 거짓일 때, 예외의 메시지로 전달할 메시지입니다.&lt;/p&gt;

&lt;h4 id=&quot;주의-사항&quot;&gt;주의 사항&lt;/h4&gt;

&lt;p&gt;위의 문법을 인터프리터가 해석하는 방식을 간단한 토막코드로 만들게되면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__debug__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expression2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드를 보면, 앞서 설명했던 런타임 환경이 아닌 디버깅 환경에 도움을 주는 역할을 해야만 하는 이유를 이해할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Assertion 구문은 &lt;code class=&quot;highlighter-rouge&quot;&gt;__debug__&lt;/code&gt;라는 전역변수를 검사를 합니다. 이 전역변수는  일반적인 상황에서는 항상 참이지만 최적화가 필요한 경우에는 거짓이 되게 됩니다.&lt;/p&gt;

&lt;p&gt;따라서, Assertion 구문을 예외처리에 잘못 활용하게된다면, 코드가 의도한대로 동작하지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를들면 데이터 유효성 검증을 하는데 Assertion 구문을 사용하게 된다면 어떨까요?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Must Be Admin'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Unknown product'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;일반적인 경우라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;__debug__&lt;/code&gt; 전역변수는 참이므로 사용자에 대한 권한 확인과 제품이 존재하는지 확인하는 과정이 올바르게 진행될 것입니다.&lt;/p&gt;

&lt;p&gt;반면, &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONOPTIMIZE&lt;/code&gt;와 같은 환경변수 설정으로 인해 Assertion 구문이 비활성화가 된다면 위의 함수는 의도와 동작하지 않게 될 것이고 이는 큰 장애로 귀결될 수 있습니다.&lt;/p&gt;

&lt;p&gt;결국, 이런 문제를 회피하기 위해서는 데이터 유효성 검증시에 Assertion 구문을 절대 사용하지 말아야 합니다. 대신 유효성 검사에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 구문 등을 사용하여 처리하고 예외를 발생시켜야 합니다.&lt;/p&gt;

&lt;p&gt;또한, 절대 실패하지 않는 단언문을 주의해야합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'This should fail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 단언문은 절대 실패하지 않습니다.&lt;/p&gt;

&lt;p&gt;왜냐하면, 튜플은 비어있지 않는이상 항상 조건이 참이 되기 때문입니다. 이런 직관적이지 못한 동작 때문에 실수를 하는 경우가 종종 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'It should ave counted all the items'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 여러 줄에 걸쳐서 Assertion 구문을 작성하게 되면, 잘못된 구문이라는 것을 알기가 더 어려워 질 수도 있습니다. 따라서 이 구문을 사용할 때 튜플을 사용하는것에 주의를 해야 합니다.&lt;/p&gt;

&lt;p&gt;이런 주의사항들이 있더라도 파이썬의 Assertion 구문은 적재적소에 재대로 사용하기만 한다면 디버깅하는 과정에 많은 도움을 주어 생산성을 늘리는것은 물론 유지 보수가 쉬운 프로그램을 작성할 수 있을것입니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Mar 2019 21:37:00 +0000</pubDate>
        <link>https://kirade.github.io/python/2019/03/23/python-assert-%EA%B5%AC%EB%AC%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
        <guid isPermaLink="true">https://kirade.github.io/python/2019/03/23/python-assert-%EA%B5%AC%EB%AC%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
        
        <category>Python</category>
        
        <category>Assertion</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>[Tutorial] 장고 시작하기 #2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 포스트는 공식 장고문서의 튜토리얼을 번역헀습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;기본적인 투표 어플리케이션을 제작해보면서 튜토리얼을 진행해 나가겠습니다.&lt;/p&gt;

&lt;p&gt;튜토리얼은 다음 두 가지 기능을 가지도록 만듭니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;사람들이 투표를 볼 수 있고, 투표를 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;관리자용 사이트가 있어서 직접 표를 추가, 변경, 삭제를 할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;p&gt;시작에 앞서 장고가 올바르게 설치되었는지 확인합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;설치가 되지 않았다면 &lt;a href=&quot;https://kirade.github.io/django/2019/01/20/tutorial-%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/&quot;&gt;이전 포스트&lt;/a&gt;를 따라서 개발환경을 만들어주세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;장고-프로젝트-생성&quot;&gt;장고 프로젝트 생성&lt;/h3&gt;

&lt;p&gt;장고는 간단한 명령어를 통해서 프로젝트 기본 구조를 갖춘 파일들을 생성해 줍니다.&lt;/p&gt;

&lt;p&gt;장고를 설치한 가상환경 내에서, 다음 명령어를 실행하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt;라는 이름의 장고 프로젝트를 생성합니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startproject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt;는 임의로 지정할 수 있습니다. 단, &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;와 같은 파이썬이나 장고 내장 키워드와 겹치는 단어는 사용하지 않아야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 명령어가 실행되면 다음과 같은 구조를 가진 프로젝트가 생성됩니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;최상위 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt; : 프로젝트의 이름입니다. 장고의 작동과 이것의 이름은 상관이 없으므로 이름을 원하는대로 바꾸어도 상관없습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt; : 장고의 프로젝트의 여러가지 커맨드라인 기능들을 사용할 수 있도록 해주는 유틸리티 입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;안쪽의 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt; : 프로젝트의 실제 파이썬 패키지 입니다. 따라서 안의 내용을 import 할 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite.urls&lt;/code&gt;와 같이 명시해 주어야합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysite/__init__.py&lt;/code&gt; : 이 파일을 가지고 있는 폴더가 파이썬 패키지임을 명시해주는 파이썬 파일입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysite/settings.py&lt;/code&gt; : 프로젝트를 위한 설정들을 담고있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysite/wsgi.py&lt;/code&gt; : WSGI 호환 웹서버가 프로젝트를 작동시키기 위한 진입점입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;개발-서버&quot;&gt;개발 서버&lt;/h3&gt;

&lt;p&gt;장고는 자체적인 개발 서버를 로컬 환경에서 구동시켜줍니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runserver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 실행하고 웹 브라우저의 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt;으로 진입하면 장고 개발서버가 작동하고 있음을 볼 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;polls-앱-생성&quot;&gt;Polls 앱 생성&lt;/h3&gt;

&lt;p&gt;이번에는 장고 프로젝트를 구성하는 앱을 만들어봅니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;장고의 ‘프로젝트’는 여러개의 ‘앱’으로 구성될 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이전에 설명드렸듯 &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt;라는 커맨드라인 유틸리티를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;polls&lt;/code&gt;라는 앱을 장고 프로젝트 안에 생성하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;$ python manage.py startapp polls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실행 후에는 다음과 같은 구조의 &lt;code class=&quot;highlighter-rouge&quot;&gt;polls&lt;/code&gt;라는 앱이 생성된 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이런 앱들은 장고 프로젝트를 구성하는 요소로서 여러개의 앱들이 각각 프로젝트의 ‘어떤 기능’을 담당하고 있다고 볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;현재까지 생성된 전체 프로젝트의 구조는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt;라는 프로젝트 아래에, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;polls&lt;/code&gt;라는 앱이 보입니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysite
├── db.sqlite3
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── polls
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;view-생성&quot;&gt;View 생성&lt;/h3&gt;

&lt;p&gt;일반적으로 장고는 View를 통해서 받은 요청에 대한 처리를 수행하고 응답합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;polls/views.py&lt;/code&gt;에 다음과같이 입력하여, Index 페이지에 접근시 응답할 내용을 입력해봅니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# polls/views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world. You're at the polls index.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;View에 내용을 입력을 완료했습니다. 이제 앞서 만든 View를 호출하기 위한 로직을 추가합니다.
장고에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;라는 파일을 통해서 URL과 View 함수를 매핑합니다.&lt;/p&gt;

&lt;p&gt;기존에는 없었지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;polls&lt;/code&gt;앱 내에 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;계속해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에는 다음과 같은 로직을 작성합니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# polls/urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음으로는 프로젝트 단위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;를 설정합니다.
이 파일은 프로젝트 디렉토리 바로 아래인 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite/urls.py&lt;/code&gt;에 위치해 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# mysite/urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'polls/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'polls.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'admin/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; 함수를 통해 여러 앱에 들어있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;를 자유자재로 추가할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이제 다음 명령어를 입력하여 개발 서버를 실행시킵니다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 웹 브라우저에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000/polls&lt;/code&gt;로 진입하면, 이전에 만든 View 함수가 실행되는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/intro/tutorial01/&quot;&gt;장고 튜토리얼 Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 18:59:00 +0000</pubDate>
        <link>https://kirade.github.io/django/2019/01/20/tutorial-%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/</link>
        <guid isPermaLink="true">https://kirade.github.io/django/2019/01/20/tutorial-%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/</guid>
        
        <category>Django</category>
        
        <category>Python</category>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>[Tutorial] 장고 시작하기 #1 - 개발환경 만들기</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1&quot;&gt;Django 공식문서&lt;/a&gt;의 튜토리얼을 따라가면서 장고가 어떻게 동작하는지 정리합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h3 id=&quot;개발환경&quot;&gt;개발환경&lt;/h3&gt;

&lt;h4 id=&quot;파이썬&quot;&gt;파이썬&lt;/h4&gt;

&lt;p&gt;장고는 파이썬 기반의 프레임워크 이므로 파이썬이 기본적으로 설치되어있어야 합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;장고에서는 파이썬3 버전을 쓰는것을 권장합니다. &lt;a href=&quot;https://docs.djangoproject.com/en/2.1/faq/install/#faq-python-version-support&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://kirade.github.io/python/2017/12/09/python-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0/&quot;&gt;파이썬 개발환경 세팅 가이드&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;가상환경에 진입한 뒤, 다음과 같이 입력하여 파이썬이 올바르게 설치되었는지 확인합니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;데이터베이스&quot;&gt;데이터베이스&lt;/h4&gt;

&lt;p&gt;웹서비스를 만들기 위해서는 일반적으로 데이터를 저장하고 활용할 수 있는 공간을 만들어주는 데이터베이스가 필요합니다. 그러나 장고는 기본적으로 SQLite라는 데이터베이스를 제공하기 때문에, 튜토리얼 수준의 프로젝트 에서는 따로 데이터베이스를 설치하지 않아도 괜찮습니다.&lt;/p&gt;

&lt;h4 id=&quot;장고&quot;&gt;장고&lt;/h4&gt;

&lt;p&gt;pip를 통해 장고를 설치합니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 설치된 장고 버전 확인&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/intro/install/&quot;&gt;Django Quick Install Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 18:04:00 +0000</pubDate>
        <link>https://kirade.github.io/django/2019/01/20/tutorial-%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/</link>
        <guid isPermaLink="true">https://kirade.github.io/django/2019/01/20/tutorial-%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/</guid>
        
        <category>Python</category>
        
        <category>Django</category>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>[세미나] 5월 파이썬 격월 세미나</title>
        <description>&lt;h1 id=&quot;2018년-5월-파이썬-격월-세미나&quot;&gt;2018년 5월 파이썬 격월 세미나&lt;/h1&gt;

&lt;h3 id=&quot;파이썬-개발환경-끝판왕-docker-compose-김승호님&quot;&gt;파이썬 개발환경 끝판왕 Docker Compose (김승호님)&lt;/h3&gt;
&lt;h5 id=&quot;블로그--raccoonys-cave&quot;&gt;@블로그 : raccoony’s cave&lt;/h5&gt;

&lt;h4 id=&quot;배경&quot;&gt;배경&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;파이썬 개발환경을 세팅할 때, pip과 같은 것으로 설정하고 설치할때 여러가지 오류들을 만나게 된다.&lt;/li&gt;
  &lt;li&gt;개발 환경과 배포환경이 달라서 이런 문제를 여러번 겪을 수 있다.&lt;/li&gt;
  &lt;li&gt;왜 이런 경험이 생기는가? -&amp;gt; 소프트웨어가 성장하고, 의존성을 가진 패키지가 늘어나 문제가 발생할 지점이 많아진다.&lt;/li&gt;
  &lt;li&gt;이런 상황 때문에, 새로 들어오는 사람들이 개발환경을 설정하는데 어려움이 많다.&lt;/li&gt;
  &lt;li&gt;따라서 Docker Compose를 제시한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;도커는 프로그램, 설정들을 추상화하여 컨테이너로 만들어 둠&lt;/li&gt;
  &lt;li&gt;프로그램, 서버를 규격화 해서 만들어 둔다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;도커의-실행과정&quot;&gt;도커의 실행과정?&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;도커의 이미지를 통해 도커 컨테이너를 만든다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -it python:3&lt;/code&gt;는 python3이미지를 통해 컨테이너를 만듬&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker logs 4bs093018&lt;/code&gt;에서 나오는 해쉬는 컨테이너이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;웹-서버-실행에-필요한것&quot;&gt;웹 서버 실행에 필요한것?&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;서버, 코드, 명령어, 환경변수, 서버 환경구성, 의존 패키지 설치&lt;/li&gt;
  &lt;li&gt;이런것들을 모두 Docker에서 제공하고있다.&lt;/li&gt;
  &lt;li&gt;Dockerfile에서 나만의 이미지를 만들 수 있도록 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;docker-compose-1&quot;&gt;Docker Compose&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;docker 를 사용해서 개발 환경을 세팅할 때, 여러가지 세팅에 대한 복잡한 명령어가 많다.&lt;/li&gt;
  &lt;li&gt;이를 docker-compose는 yml 설정파일에 설정값들을 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker-compose up&lt;/code&gt;명령어를 통해 간결하게 실행된다.&lt;/li&gt;
  &lt;li&gt;이 방식의 장점은, yml 에 이력이 남아서 이력이 남고 추적하기 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;명령어&quot;&gt;명령어&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker-compose up&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker-compose up -d&lt;/code&gt; : 데몬방식&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker-compose ps&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker-compose exec django bash&lt;/code&gt; : django 컨테이너의 bash 접속&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker-compose down&lt;/code&gt; : 컨테이너들 종료&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;qna&quot;&gt;QnA&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;sudo pip 는 root권한으로 패키지가 설치되어, 권한과 관련된 문제가 발생할 여지가 많다.&lt;/li&gt;
  &lt;li&gt;Docker를 실서비스에 잘 사용되고 있다. (구글, 페이스북 등 사용하고있는것으로 생각 )&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;django-channels-11x---20으로-옮기기-임혜연님&quot;&gt;Django Channels 1.1x -&amp;gt; 2.0으로 옮기기 (임혜연님)&lt;/h3&gt;

&lt;h5 id=&quot;목적-애플리케이션&quot;&gt;목적 애플리케이션&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;웹애서 서버 작업 결과물을 지속적으로 관찰하고 싶었다.&lt;/li&gt;
  &lt;li&gt;websocket?&lt;/li&gt;
  &lt;li&gt;장고 integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;channels-소개&quot;&gt;Channels 소개&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;asgi(Asynchronous Server Gateway Interface)&lt;/li&gt;
  &lt;li&gt;htp, websocket 지원&lt;/li&gt;
  &lt;li&gt;django 통합 기본으로 지원한다.&lt;/li&gt;
  &lt;li&gt;django view로 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1x-개념-구현-데&quot;&gt;1.x: 개념, 구현, 데&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;채널 : 메시지 큐
    &lt;ul&gt;
      &lt;li&gt;일반 채널 : 서버가 처리할 이벤트에 대응&lt;/li&gt;
      &lt;li&gt;응답 채널 : 클라이언트에 대응&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consumer
    &lt;ul&gt;
      &lt;li&gt;채널로 들어온 메시지를 처리하고 응답 채널로 메시지 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multiplexer / Demultiplexer
    &lt;ul&gt;
      &lt;li&gt;하나의 연결에서 여러 개의 논리적 스트림을 처리할 수 있게 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Group
    &lt;ul&gt;
      &lt;li&gt;여러개의 응답 채널을 관리하며 직접 메시지 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2x--마이그레이션-배경-개념-구현-데모&quot;&gt;2.x : 마이그레이션 배경, 개념, 구현, 데모&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;process supervisor 도입 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;문서를 꼼꼼하게 읽어야 한다.&lt;/li&gt;
  &lt;li&gt;문서가 놓친 부분은 코드를 직접 살펴볼 수 있어야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;웹-디버깅시-유용하게-쓸-수-있는-도구들-김슬님&quot;&gt;웹 디버깅시 유용하게 쓸 수 있는 도구들 (김슬님)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Quick &amp;amp; Dirty 한 작업을 할때 유용한 도구들&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;django-extensions&quot;&gt;Django Extensions&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;runserver_plus 를 통해 디버깅을 할때, 에러페이지에서 해당 context 중간에 콘솔 진입이 가능하다. ( 검은 콘솔 아이콘 클릭 )&lt;/li&gt;
  &lt;li&gt;원하는 지점에 오류를 내고 싶다? -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;1/0&lt;/code&gt;을 넣자 (ㅋㅋㅋ)&lt;/li&gt;
  &lt;li&gt;shell_plus는 장고 모델들, 자주쓰이는 db 관련 기능들 자동 import 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;django-debug-toolbar&quot;&gt;Django Debug Toolbar&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Middleware, Installed apps에 추가하면 간편하게 사용 가능&lt;/li&gt;
  &lt;li&gt;IP 설정해서 개발자만 허용하기도 가능&lt;/li&gt;
  &lt;li&gt;SQL과 같은 것들을 보여준다. 최적화 필요한 부분 표시해줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;ngrok&quot;&gt;Ngrok&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;public 한 도메인을 만들어 두어, 로컬 개발 서버로 포팅해준다.&lt;/li&gt;
  &lt;li&gt;4040과 같은 포트로 접근하면 로그를 기록해 준다. 접속 내역 이력 추적 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;pyjog&quot;&gt;pyjog&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;2주에 한번 주말에 모여서 가볍게 코딩 스터디 하는 모임&lt;/li&gt;
  &lt;li&gt;매 6회 마다 ‘육회’를 먹음&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 26 May 2018 21:52:00 +0000</pubDate>
        <link>https://kirade.github.io/python/2018/05/26/%EC%84%B8%EB%AF%B8%EB%82%98-5%EC%9B%94-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B2%A9%EC%9B%94-%EC%84%B8%EB%AF%B8%EB%82%98/</link>
        <guid isPermaLink="true">https://kirade.github.io/python/2018/05/26/%EC%84%B8%EB%AF%B8%EB%82%98-5%EC%9B%94-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B2%A9%EC%9B%94-%EC%84%B8%EB%AF%B8%EB%82%98/</guid>
        
        <category>Docker</category>
        
        <category>Python</category>
        
        <category>Django</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>2018-03-05 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Django
    &lt;ul&gt;
      &lt;li&gt;장고 Admin site의 Search 필드는 일반적인 인덱스를 설정해서는 작동하지 않는다.&lt;/li&gt;
      &lt;li&gt;Admin 사이트에 보여지는 내용은 admin 클래스에서 get_queryset 메서드를 오버라이드해서 보여줄 수 있다.&lt;/li&gt;
      &lt;li&gt;테스트를 작성할 때에는 이 후에 보기 좋도록, 가독성이 좋게 작성하는 것이 권장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two Scoops Of Django&lt;/li&gt;
  &lt;li&gt;일취월장 독서&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Mon, 05 Mar 2018 22:11:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/03/05/2018-03-05-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/03/05/2018-03-05-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-03-04 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Database
    &lt;ul&gt;
      &lt;li&gt;Index란 어떤것인가?&lt;/li&gt;
      &lt;li&gt;postgres 명령어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Book
    &lt;ul&gt;
      &lt;li&gt;일취월장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two Scoops Of Django&lt;/li&gt;
  &lt;li&gt;일취월장 독서&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mee2ro.tistory.com/1&quot;&gt;인덱스란&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lalwr.blogspot.kr/2016/02/db-index.html&quot;&gt;DB Index 란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Mar 2018 21:35:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/03/04/2018-03-04-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/03/04/2018-03-04-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>[Django] 데이터베이스 Null=True로 컬럼 만들기</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;장고를 사용하면서 많은 데이터를 가지고 있는 테이블에 새로운 컬럼을 추가할 때 발생한 이슈를 정리합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;데이터베이스 테이블에 새로운 모델 인스턴스가 추가될 때 만들어지는 ID값을 이용해 만들어진 값을 새로 추가하는 모델 필드에 추가하려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ID 필드의 값은 데이베이스에 쿼리를 하고 나서 생성되는 값이기 때문에, 장고 어플리케이션단에서 ID값을 미리 알 수 없다. 따라서, 데이터베이스에 접근하여 저장한 뒤 ID에 접근하여 이를 토대로 새로운 필드에 들어갈 값을 만들어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실제 서비스 되고 있는 서비스이기 때문에, 데이터베이스에 새로운 필드를 추가하거나 데이터를 갱신할 때, 테이블 락이 걸려 다른 서비스에 문제가 발생할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;p&gt;가장 먼저, 새로운 컬럼을 만들 때에는 장고 모델 클래스 내의 필드로 정의한 내용을 토대로 마이그레이션 파일을 만들고 마이그레이션을 진행하게 된다. 이 때, 새롭게 추가되는 필드에 &lt;code class=&quot;highlighter-rouge&quot;&gt;null=True&lt;/code&gt; 옵션을 주고 추가한다. 여기에는 몇 가지 이유가 있다.&lt;/p&gt;

&lt;p&gt;데이터베이스 쪽에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;null=True&lt;/code&gt; 옵션으로 인해 필드 내의 ‘값’을 추가하지 않아도 된다. 따라서 새로운 컬럼을 만드는 작업이 빠르게 진행된다.&lt;/p&gt;

&lt;p&gt;또한 로직으로 보자면 새롭게 추가되는 필드는 새로 생성되는 ID필드 값을 통해서 다시 Save되는 필드이다. 따라서 새로운 필드를 생성한 직후에는 그 값을 알 수 없으므로 기본옵션인 &lt;code class=&quot;highlighter-rouge&quot;&gt;null=False&lt;/code&gt;였다면 오류가 발생할 여지가 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 장고 어플리케이션 쪽에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;null=False&lt;/code&gt;를 주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;blank=True&lt;/code&gt; 옵션을 줄 수있다고 생각할 수 있다. 로직에서 당장 할당되지 않는 새로운 필드의 문제점을 보완하는 방법일 수 있다. 하지만, 장고에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;blank=True&lt;/code&gt;옵션은 데이터베이스의 데이터베이스의 Null과 유사한 의미의 파이썬의 None을 넘겨주지 않는다. 문자라면 빈 스트링 숫자라면 0을 넘겨준다. 이는 분명히 존재하는 ‘값’이기 때문에 새로운 필드를 만들고 값을 갱신하는 시간이 오래걸릴 수 있을 뿐더러, 이 후 데이터베이스의 값이 사용될 때, 빈 스트링, 0 이라는 값의 의미가 프로그래머가 의도한 의미와 다를 수 있다는 문제점이 있다.&lt;/p&gt;

&lt;p&gt;두 번째 문제는, 많은 데이터가 있는 테이블을 작업할때 발생하는 테이블 락을 줄여야하는 이슈이다. 일반적인 장고의 migration은 한 개의 트랜젝션으로 이루어진다. 따라서, 마이그레이션 내에서 많은 쿼리가 발생하게 된다면 해당 데이터에 접근하지 못하는 테이블 락의 시간이 굉장히 길 것이다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서 장고는 마이그레이션 내의 &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic=False&lt;/code&gt;라는 옵션을 제공한다. 이를 통해 하나의 트랜잭션으로 이루어지는 마이그레이션 파일이 작게 쪼개져서 실행되므로 마이그레이션 중간에도 데이터에 대한 접근이 가능하게 된다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dba.stackexchange.com/questions/60965/has-postgresql-a-fast-add-column-optimization&quot;&gt;Add column fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 03 Mar 2018 17:00:00 +0000</pubDate>
        <link>https://kirade.github.io/django/2018/03/03/django-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-null-true%EB%A1%9C-%EC%BB%AC%EB%9F%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
        <guid isPermaLink="true">https://kirade.github.io/django/2018/03/03/django-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-null-true%EB%A1%9C-%EC%BB%AC%EB%9F%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
        
        <category>Django</category>
        
        <category>Database</category>
        
        <category>Postgres</category>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>2018-03-03 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Blog
    &lt;ul&gt;
      &lt;li&gt;Signal의 대안&lt;/li&gt;
      &lt;li&gt;Django의 Null = True&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two Scoops Of Django&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Sat, 03 Mar 2018 16:25:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/03/03/2018-03-03-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/03/03/2018-03-03-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-03-02 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two Scoops of django
    &lt;ul&gt;
      &lt;li&gt;Signal과 대안&lt;/li&gt;
      &lt;li&gt;Save 메서드 내의 구현, Manager를 통한 구현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Django
    &lt;ul&gt;
      &lt;li&gt;작업이 오래걸리는 트랜젝션에서 발생하는 긴 시간의 테이블락을 피하는 방법
        &lt;ul&gt;
          &lt;li&gt;하나의 트랜잭션으로 처리되는 migration에서 atomic=False 옵션&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;마이그레이션 내의 RunPython 메서드와 그 인자
        &lt;ul&gt;
          &lt;li&gt;code, reverse_code, noop&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two Scoops Of Django&lt;/li&gt;
  &lt;li&gt;배운 내용 정리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Fri, 02 Mar 2018 16:24:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/03/02/2018-03-02-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/03/02/2018-03-02-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-28 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Django
    &lt;ul&gt;
      &lt;li&gt;Two Scoops of Django
        &lt;ul&gt;
          &lt;li&gt;Ch11~ : form 유효성검사에 관한 내용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Signal
        &lt;ul&gt;
          &lt;li&gt;post_save, app.py의 ready메서드와 import&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;모델 인스턴스의 id값(자동으로 생성되는 pk)는 저장되기 이전에는 None&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TSD 공부&lt;/li&gt;
  &lt;li&gt;Signal 테스팅&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Wed, 28 Feb 2018 22:19:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/28/2018-02-28-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/28/2018-02-28-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-27 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Git, Postgres 명령어 공부&lt;/li&gt;
  &lt;li&gt;Django
    &lt;ul&gt;
      &lt;li&gt;Two Scoops of Django&lt;/li&gt;
      &lt;li&gt;forms.Form 과 forms.ModelForm 비교&lt;/li&gt;
      &lt;li&gt;FormView와 다른 CreateView, UpdateView 비교 정리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TSD 공부&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Tue, 27 Feb 2018 22:39:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/27/2018-02-27-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/27/2018-02-27-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-25 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AskDjango
    &lt;ul&gt;
      &lt;li&gt;파이썬 차근차근 기초강의 마무리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nomade.kr/vod/python/94/&quot;&gt;AskDjango VOD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Feb 2018 17:43:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/25/2018-02-25-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/25/2018-02-25-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-24 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AskDjango
    &lt;ul&gt;
      &lt;li&gt;CBV강의 수강&lt;/li&gt;
      &lt;li&gt;파이썬 차근차근 기초강의 수강&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nomade.kr/vod/cbv/140/&quot;&gt;AskDjango VOD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Feb 2018 15:10:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/24/2018-02-24-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/24/2018-02-24-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>[Dev] 오프라인 API 문서 검색 - Dash</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;웹 서핑중 우연하게 알게된 툴을 소개합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;
&lt;p&gt;개발을 하는 과정에서 사용하는 언어 혹은 프레임워크의 공식 문서는 개발자와는 뗄레야 뗄 수 관계입니다. 일반적으로 개발하면서 웹 브라우저를 통해서 공식문서를 다운받거나 혹은 검색을 하곤합니다.&lt;/p&gt;

&lt;p&gt;개발 중에 웹 브라우저를 통해 일일히 검색하고 찾아보는 것은 가끔 반복적이고 비효율적인 작업일 때가 있습니다. 지금 소개드리는 &lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;라는 macOS 전용 프로그램은 다양한 언어와 프레임워크의 공식 문서를 다운로드 받아 일괄적으로 관리할 수 있게 합니다.&lt;/p&gt;

&lt;h3 id=&quot;기능&quot;&gt;기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;필요한 언어, 프레임워크의 공식문서를 선별적으로 접근 가능&lt;/li&gt;
  &lt;li&gt;통합 검색을 통해 여러 공식문서를 동시에 검색할 수 있음&lt;/li&gt;
  &lt;li&gt;공식문서를 직접 다운로드 받기 때문에 오프라인에서 문서에 접근이 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-및-실행&quot;&gt;설치 및 실행&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;의 Download 버튼을 통해 다운로드&lt;/li&gt;
  &lt;li&gt;앱을 실행 시키고, 표시되는 언어 혹은 프레임워크 리스트들 중 필요한 것들을 다운로드 클릭&lt;/li&gt;
  &lt;li&gt;다운로드 된 공식문서를 확인하고 사용&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 23 Feb 2018 20:11:00 +0000</pubDate>
        <link>https://kirade.github.io/dev/2018/02/23/dev-%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8-api-%EB%AC%B8%EC%84%9C-%EA%B2%80%EC%83%89-dash/</link>
        <guid isPermaLink="true">https://kirade.github.io/dev/2018/02/23/dev-%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8-api-%EB%AC%B8%EC%84%9C-%EA%B2%80%EC%83%89-dash/</guid>
        
        
        <category>Dev</category>
        
      </item>
    
      <item>
        <title>2018-02-23 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이삿짐 정리&lt;/li&gt;
  &lt;li&gt;Blog
    &lt;ul&gt;
      &lt;li&gt;Dash&lt;/li&gt;
      &lt;li&gt;멀티 쓰레드, 멀티 프로세스&lt;/li&gt;
      &lt;li&gt;비동기 작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AskDjango CBV 강의 마무리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Fri, 23 Feb 2018 17:30:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/23/2018-02-23-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/23/2018-02-23-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-21~22 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이사 및 짐정리&lt;/li&gt;
  &lt;li&gt;서류, 은행, 동사무소&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정리한 내용 포스팅
    &lt;ul&gt;
      &lt;li&gt;멀티 쓰레드, 멀티 프로세스, 비동기작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AskDjango CBV 강의 마무리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Thu, 22 Feb 2018 13:08:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/22/2018-02-21-22-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/22/2018-02-21-22-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-20 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;서울 이사 준비&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정리한 내용 포스팅
    &lt;ul&gt;
      &lt;li&gt;멀티 쓰레드, 멀티 프로세스, 비동기작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AskDjango 필기 정리&lt;/li&gt;
  &lt;li&gt;AskDjango CBV 강의 마무리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Tue, 20 Feb 2018 23:43:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/20/2018-02-20-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/20/2018-02-20-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>[Django] 쿼리셋은 언제 계산되는가?</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 내용은 장고 공식문서의 QuerySet API 의 일부분을 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;
&lt;p&gt;장고에서는 QuerySet에 대한 Lazy Evaluation을 시행한다. 이 말뜻은 실제 값이 필요하기 이전까지 최대한 데이터베이스에 대한 쿼리를 지연시킨다는 의미이다. 이를 통해 불필요하게 중복되는 쿼리를 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;이를 잘 활용하기 위해서는 언제 장고가 QuerySet을 실제 모델 인스턴스로 evaluate 하는지 알 필요성이 있다.&lt;/p&gt;

&lt;h3 id=&quot;언제-쿼리셋이-계산되는가&quot;&gt;언제 쿼리셋이 계산되는가?&lt;/h3&gt;

&lt;p&gt;내부적으로, 쿼리셋은 실제 데이터베이스에 쿼리하지 않고 만들어지거나, 필터링되거나, 잘려지거나, 전달된다. 즉 쿼리셋을 실제 계산하기 전까지는 어떤 데이터베이스 활동이 없다.&lt;/p&gt;

&lt;p&gt;다음과 같은 방식으로 쿼리셋의 실제 인스턴스들을 얻어올 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Iteration&lt;/li&gt;
  &lt;li&gt;Slicing&lt;/li&gt;
  &lt;li&gt;Pickling / Caching&lt;/li&gt;
  &lt;li&gt;repr()&lt;/li&gt;
  &lt;li&gt;len()&lt;/li&gt;
  &lt;li&gt;list()&lt;/li&gt;
  &lt;li&gt;bool()&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;iteration&quot;&gt;Iteration&lt;/h3&gt;
&lt;p&gt;쿼리셋은 순회가능한 객체이다. 그래서 가장 처음 순회를 시작할 때, 데이터베이스에 쿼리를 한다. 다음은 예시이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;노트 : 단지 결과가 존재하는지에 대한 여부를 알아내기 위해 이와 같은 코드를 작성하는 것은 비효율적이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;exists()&lt;/code&gt;를 사용하는 것이 더 바람직하다.&lt;/p&gt;

&lt;h3 id=&quot;slicing&quot;&gt;Slicing&lt;/h3&gt;
&lt;p&gt;쿼리셋은 파이썬 배열-slicing 문법을 활용할 수 있다. Slicing은 대개 전과 같이 계산되지 않은 쿼리셋을 반환한다. 하지만, Slicing 구문의 step 인자가 주어지게 된다면 계산된 리스트를 반환한다. 또한, 이미 계산된 쿼리셋을 Slicing하는것 또한 계산된 리스트를 반환하게 된다.&lt;/p&gt;

&lt;p&gt;또 알아두어야 할 것은, 계산되지 않은 쿼리셋을 slicing하면 전과 같이 계산되지 않은 쿼리셋을 만들어내지만, 이를 더 수정하는 작업은 허용되지 않는다. 왜냐하면 이 작업을 SQL로 바꾸는 것은 명확한 의미를 가지지 않고 SQL로 바꾸기 쉽지 않기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;pickling--caching&quot;&gt;Pickling / Caching&lt;/h3&gt;

&lt;p&gt;결과값이 데이터베이스로부터 읽어오게 된다.&lt;/p&gt;

&lt;h3 id=&quot;repr&quot;&gt;repr()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repr()&lt;/code&gt;메서드를 호출하게 되면 쿼리를 수행하여 결과값을 가져오게 된다. 이는 파이썬 인터프리터와 상호작용의 편의성을 위함이다. 실제로 인터프리터로 쿼리셋을 입력하면 결과를 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;len&quot;&gt;len()&lt;/h3&gt;

&lt;p&gt;쿼리셋에 대한 길이를 알기 위해 이 메서드를 호출하면, 쿼리를 수행하고 계산 결과로 나온 인스턴스 리스트에 대한 길이를 반환한다..&lt;/p&gt;

&lt;p&gt;노트 : 단순히 레코드의 갯수를 알기 위해서라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;len()&lt;/code&gt; 보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt;를 사용하는 것이 더 효율적이다.&lt;/p&gt;

&lt;h3 id=&quot;list&quot;&gt;list()&lt;/h3&gt;

&lt;p&gt;쿼리셋을 리스트 메서드의 인자로 호출하면 계산한 결과를 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;entry_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bool&quot;&gt;bool()&lt;/h3&gt;

&lt;p&gt;참 거짓을 반환하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bool()&lt;/code&gt;메서드는 쿼리셋을 계산한 결과에 하나 이상의 레코드가 존재한다면 참을 반환한다. 그렇지 않으면 거짓을 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;There is at least one Entry with the headline Test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/models/querysets/&quot;&gt;QuerySet API - docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Feb 2018 00:12:00 +0000</pubDate>
        <link>https://kirade.github.io/django/2018/02/20/django-%EC%BF%BC%EB%A6%AC%EC%85%8B%EC%9D%80-%EC%96%B8%EC%A0%9C-%EA%B3%84%EC%82%B0%EB%90%98%EB%8A%94%EA%B0%80/</link>
        <guid isPermaLink="true">https://kirade.github.io/django/2018/02/20/django-%EC%BF%BC%EB%A6%AC%EC%85%8B%EC%9D%80-%EC%96%B8%EC%A0%9C-%EA%B3%84%EC%82%B0%EB%90%98%EB%8A%94%EA%B0%80/</guid>
        
        <category>Django</category>
        
        <category>QuerySet</category>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>2018-02-19 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AskDjango
    &lt;ul&gt;
      &lt;li&gt;CBV 강의 수강&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이사 준비 시작&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정리한 내용 포스팅
    &lt;ul&gt;
      &lt;li&gt;멀티 쓰레드, 멀티 프로세스, 비동기작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AskDjango 필기 정리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nomade.kr/vod/cbv/140/&quot;&gt;AskDjango VOD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 19 Feb 2018 19:30:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/19/2018-02-19-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/19/2018-02-19-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-18 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인터뷰 준비&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정리한 내용 포스팅
    &lt;ul&gt;
      &lt;li&gt;멀티 쓰레드, 멀티 프로세스, 비동기작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Sun, 18 Feb 2018 13:38:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/18/2018-02-18-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/18/2018-02-18-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2018-02-17 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;MultiThread, MultiProcess, GIL&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Django
    &lt;ul&gt;
      &lt;li&gt;QuerySet Document&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정리한 내용 포스팅&lt;/li&gt;
  &lt;li&gt;면접 준비&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/models/querysets/&quot;&gt;QuerySet API docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Feb 2018 12:19:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/17/2018-02-17-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/17/2018-02-17-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>[CS] 프로세스와 메모리</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;이번 포스팅은 프로세스와 메모리를 공부하면서 한 이해를 바탕으로 프로세스가 실행될때 할당되는 메모리와 관련된 내용을 담았습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h3 id=&quot;기억장치&quot;&gt;기억장치&lt;/h3&gt;
&lt;p&gt;프로세스와 메모리의 관계를 이해하기 위해서는 몇 가지 사전 지식들이 필요합니다. 그 중 가장 기초가 되는것은 주기억장치와 보조기억장치라는 용어입니다.&lt;/p&gt;

&lt;p&gt;주기억장치는 크게 ROM과 RAM으로 나뉘어 집니다. ROM의 특징은 Read-Only-Memory로서 메모리에 로드되어 있는 정보들을 읽는것만 가능하고 비휘발성이라 컴퓨터가 종료되어도 데이터가 손실되지 않는 특징이 있습니다.&lt;/p&gt;

&lt;p&gt;반대로 RAM은 Random-Access-Memory로서 ROM과 다르게 전력 공급이 없어지면 가지고 있던 내용을 잃는 휘발성 메모리입니다. 또한, 읽고 쓰는 작업이 가능합니다. RAM이라는 기억장치가 바로 컴퓨터 사양에 스펙으로 자주 등장하는 메모리입니다.&lt;/p&gt;

&lt;p&gt;보조기억장치는 일반적으로 알려진 디스크 형태의 기억장치 입니다. 이전에 사용하던 플로피 디스크부터 HDD, SSD에 이르기까지 주 기억장치에 비해 큰 용량을 가지지만 상대적으로 느린 처리속도를 가지고있는 기억장치입니다.&lt;/p&gt;

&lt;h3 id=&quot;프로세스와-쓰레드의-메모리&quot;&gt;프로세스와 쓰레드의 메모리&lt;/h3&gt;
&lt;p&gt;프로세스가 실행되면 프로그램이 동작하는데 필요한 정보를 저장하기 위한 공간을 할당 받는다. 이 공간은 각각의 프로세스별로 코드, 데이터, 스택, 힙 영역으로 나뉘어 관리되어집니다. 즉, 다른 프로세스와는 서로 자원을 공유하지 않습니다. 하지만 프로세스 안에 여러개가 존재할 수 있는 쓰레드는 스택 영역을 제외한 메모리를 다른 쓰레드와 공유하여 사용할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;논리-메모리-물리-메모리&quot;&gt;논리 메모리, 물리 메모리&lt;/h3&gt;
&lt;p&gt;프로세스가 메모리에 할당 된다면 각각의 프로세스는 동일한 크기의 메모리를 할당 받습니다. 또한 각 프로세스 별로 0x00000000 ~ 0xFFFFFFFF 범위의 메모리 영역을 사용합니다. 즉, A 프로세스에서 0x12345678 메모리 영역에 변수를 할당하고, 다른 프로세스인 B 프로세스에서도 0x12345678에 변수를 할당할 수 있습니다. 여기서 프로세스가 가진 주소가 논리 메모리의 주소입니다. 반면, 물리 주소는 실제 메모리의 주소입니다.&lt;/p&gt;

&lt;p&gt;결국, 프로세스는 일정 영역의 메모리를 할당 받고 사용하지만 사용하는 메모리의 주소는 실제 메모리의 주소와는 다릅니다. 따라서, 주소가 다른 문제점이 발생하는데 이것을 각 프로세스별로 가지고있는 논리 메모리와 물리메모리 매핑 테이블을 통해 해결합니다.&lt;/p&gt;

&lt;h3 id=&quot;가상-메모리&quot;&gt;가상 메모리&lt;/h3&gt;
&lt;p&gt;일반적으로 프로세스에 공간이 할당 된다면 32비트 운영체제에서는 4GB, 64비트 프로세스는 16EB를 각각의 프로세스가 가질 수 있도록 합니다. 하지만 4GB, 16EB라는 크기는 하나의 프로세스가 다 사용하기에는 굉장히 큰 수치입니다. 만약 32비트 컴퓨터에 8GB 메모리가 꽂혀있다고하면, 잘해봐야 2개의 프로세스를 실행할 수 있을 것입니다. 논리 메모리는 굉장히 크지만 사용할 수 있는 물리 메모리의 크기는 굉장히 제한적입니다. 바로 이런 한계를 극복하기 위한 기술이 가상 메모리 입니다.&lt;/p&gt;

&lt;p&gt;가상 메모리는 프로세스에서 필요한 부분만 메모리로 올리는 Demand-Paging 기법을 사용합니다. 또한 나머지 부분들은 디스크 공간을 가상의 메모리처럼 활용하여 데이터를 저장하게 됩니다. 이를 통해 각각의 프로세스는 독립된 메모리 공간을 가지게되고 한정된 물리 메모리의 한계를 극복하여 실행되는 프로세스에 여유로운 메모리 공간을 주게됩니다.&lt;/p&gt;

&lt;h3 id=&quot;page&quot;&gt;Page&lt;/h3&gt;
&lt;p&gt;페이지란 가상 메모리를 사용하는 단위입니다. 윈도우 에서는 4KB를 기준으로 정해두었습니다. 만약 페이지라는 단위가 없었을 경우에 디스크에서 메모리로 데이터를 로드할 때, 데이터의 크기가 제각각이므로 중간중간 비는 공간(Fragmentation)이 발생합니다. 따라서 이를 줄이기 위해 페이지라는 단위를 사용합니다.&lt;/p&gt;

&lt;h3 id=&quot;demand-paging&quot;&gt;Demand-Paging&lt;/h3&gt;
&lt;p&gt;앞서 가상 메모리에서 소개한 Demand-Paging이라는 것은 메모리에 실제 필요한 Page를 가져오는 방식을 말합니다. 필요한 Page에 접근하려면 가상 메모리 주소 즉, 논리 메모리주소를 물리 메모리 주소로 변환하는 과정이 필요합니다. 이를 페이지 테이블을 통해 수행합니다.&lt;/p&gt;

&lt;p&gt;페이지 테이블을 참조하여 페이징을 수행할 때 크게 두 가지 경우가 발생할 수 있습니다. valid bit를 통해 물리 메모리에 있다면 문제없이 필요한 작업을 수행합니다. 하지만 필요한 페이지가 물리 메모리에 존재하지 않는다면, 가상 메모리 기법을 통해 디스크로 옮겨져 있던 페이지를 가져옵니다.&lt;/p&gt;

&lt;p&gt;하지만, 이 경우에도 문제가 발생할 여지가 있습니다. 만약 물리 메모리가 가득차서 더이상 페이지를 넣을 공간이 없다면 어떻게 할 것인가에 관한 문제입니다. 이런 문제는 여러 Page replacement algorithm 중의 하나로 해결합니다. FIFO, LRU, LRU Approximate 등 다양한 알고리즘이 존재하지만 LRU Approximate가 효율이 좋다고 알려져 있습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sweeper.egloos.com/2988689&quot;&gt;Virtual Mememory - egloos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 16 Feb 2018 18:19:00 +0000</pubDate>
        <link>https://kirade.github.io/computer%20science/2018/02/16/cs-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%94%EB%AA%A8%EB%A6%AC/</link>
        <guid isPermaLink="true">https://kirade.github.io/computer%20science/2018/02/16/cs-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%94%EB%AA%A8%EB%A6%AC/</guid>
        
        <category>Process</category>
        
        <category>Memory</category>
        
        <category>OS</category>
        
        <category>System</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>[CS] 메모리 구조</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;프로그램이 실행되기 위해서는 프로그램의 정보를 메모리에 로드를 해야 합니다. 이 포스팅에서는 로드되는 메모리는 어떤 구조를 가지고 있는지, 또한 각각은 어떤 정보를 담고 있는지 정리합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;
&lt;p&gt;컴퓨터에서 동작하는 프로그램은 하나의 프로세스로서, 각각은 메모리의 고유한 영역을 할당 받습니다. 여기서 메모리란, 주기억장치인 RAM을 의미합니다. RAM은 프로그램을 실행시키기위해 프로그램의 정보가 로드되는 하드웨어 입니다.&lt;/p&gt;

&lt;p&gt;프로그램의 정보 즉, 프로세스가 로드 될 때 할당받은 영역은 다음과같이 나뉘어 서로 고유한 역할을 담당합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;코드 영역&lt;/li&gt;
  &lt;li&gt;데이터 영역&lt;/li&gt;
  &lt;li&gt;스택 영역&lt;/li&gt;
  &lt;li&gt;힙 영역&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;코드-영역code&quot;&gt;코드 영역(Code)&lt;/h3&gt;
&lt;p&gt;코드 영역은 말 그대로 프로그램의 코드가 올라가는 영역입니다. 프로그램을 짤 때 사용된 코드가 저장되어 있어 텍스트 영역으로 불리기도 하며, CPU에서는 이 공간에서 명령어를 하나씩 찾아 수행합니다.&lt;/p&gt;

&lt;h3 id=&quot;데이터-영역data&quot;&gt;데이터 영역(Data)&lt;/h3&gt;
&lt;p&gt;데이터 영역은 프로그램이 동작하는 전반에 걸쳐 사용되는 데이터를 저장하는 공간입니다. 이 데이터는 프로그램이 사용하는 전역(Global)변수와 정적(Static) 변수가 포함됩니다. 프로그램이 시작할 때, 할당되며 종료 시 자동으로 소멸되는 특징을 가집니다.&lt;/p&gt;

&lt;h3 id=&quot;스택-영역stack&quot;&gt;스택 영역(Stack)&lt;/h3&gt;
&lt;p&gt;자료구조 스택과 같이 LIFO의 동작을 취하는 메모리 영역 입니다. 주로 함수와 관계가 되어있습니다. 함수가 호출될 때 할당되는 지역 변수, 매개 변수가 저장되어 함수가 실행되는 동안 유지되다가 함수가 끝나면 소멸하는 특징을 갖습니다.&lt;/p&gt;

&lt;h3 id=&quot;힙-영역heap&quot;&gt;힙 영역(Heap)&lt;/h3&gt;
&lt;p&gt;힙 영역은 스택과 다르게 프로그래머가 직접 관리하고 사용하는 영역입니다. 예를 들면 동적 할당으로 변수를 만들어 값을 저장하면 힙 영역에 저장이됩니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tcpschool.com/c/c_memory_structure&quot;&gt;메모리 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 16 Feb 2018 16:56:00 +0000</pubDate>
        <link>https://kirade.github.io/computer%20science/2018/02/16/cs-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/</link>
        <guid isPermaLink="true">https://kirade.github.io/computer%20science/2018/02/16/cs-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/</guid>
        
        <category>Memory</category>
        
        <category>OS</category>
        
        <category>System</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>2018-02-16 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Computer Science
    &lt;ul&gt;
      &lt;li&gt;Process &amp;amp; Memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;Thread, Process, GIL&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;설 명절 지내기&lt;/li&gt;
  &lt;li&gt;배운내용 포스팅 ( MultiThread, MultiProcess, GIL)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Fri, 16 Feb 2018 00:27:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/16/2018-02-16-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/16/2018-02-16-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>[Python] Iterables, Iterator, Generator</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;파이썬에서 사용되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Generator&lt;/code&gt;를 사용하면 리스트에 비교하여 어떤 상황에서 더 효율적으로 작동하는 코드를 작성할 수 있다. 예를들면 1부터 1,000,000까지 숫자를 하나씩 출력하려고 할 때, 리스트 객체를 이용하면 1부터 1,000,000만 까지의 숫자들이 포함된 리스트를 만들어 for문을 순회하며 내용을 출력할 수 있다. 하지만 이런 방법은 메모리에 100만개의 데이터를 가지고있어야 하므로 메모리 사용성 측면에서 보았을 떄는 비효율적일 수 있다. 반면, 제너레이터는 이런 상황에서 좋은 대안이 될 수 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;
&lt;p&gt;제너레이터를 이해하기 위해서는 3가지 키워드에 대한 이해가 뒷받침되어야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iterable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;iterable&quot;&gt;iterable&lt;/h3&gt;
&lt;p&gt;영어 단어의 뜻 그대로 ‘순회할 수 있는것들’이라고 이해할 수 있다. 파이썬에서는 ‘객체의 멤버를 한번에 하나씩 반환할 수 있는 객체’라고 정의하고 있다. 예를들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;와 같은 것들이 포함된다.&lt;/p&gt;

&lt;p&gt;이런 특징을 가진 객체들은 주로 for구문과 같이 순회를 하는 구문에서 자주 사용된다. 이런 구문에 사용되기 위해서는 객체가 &lt;code class=&quot;highlighter-rouge&quot;&gt;iter()&lt;/code&gt;라는 빌트인 메서드를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt;라는 형태의 객체가 되어야하는데 이는 이어 설명하겠다. 추가하자면 for 구문에서는 이런 작업을 내부적으로 수행해 주기 때문에 iterable한 객체를 따로 변환하지 않고 넣어도 잘 동작한다.&lt;/p&gt;

&lt;h3 id=&quot;iterator&quot;&gt;iterator&lt;/h3&gt;
&lt;p&gt;앞서 설명한 iterable한 객체들을 빌트인 메서드인 &lt;code class=&quot;highlighter-rouge&quot;&gt;iter()&lt;/code&gt;를 통해 호출하게 되면 비로호 순회가능한 객체인 iterator 객체가 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# iter 메서드&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentinel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iter()&lt;/code&gt;메서드가 정상적으로 작동하기 위해서는 객체 내에 iteration 프로토콜인 &lt;code class=&quot;highlighter-rouge&quot;&gt;__iter__&lt;/code&gt; 메서드가 정의되거나 sequence 프로토콜인 &lt;code class=&quot;highlighter-rouge&quot;&gt;__getitem__&lt;/code&gt;메서드가 정의되어 있어야 한다. 또한, sentinel 인자가 주어진 경우 객체는 반드시 callable이어야 하며, 순회를 할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;__next__&lt;/code&gt;메서드를 호출하면서 값을 반환한다. 순회중, sentinel에서 주어진 값과 같은 값이 반환될 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;StopIteration&lt;/code&gt;예외를 발생시킨다.&lt;/p&gt;

&lt;p&gt;for 구문은 iterable한 객체를 받아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;StopIteration&lt;/code&gt;예외가 발생하기 전까지 순회를 돌고 종료하는 것을 내부적으로 구현하고 있다.&lt;/p&gt;

&lt;p&gt;간단한 구현을 직접 해보았다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleIterables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopIteration&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SampleIterables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 결과&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleIterables&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10809a7f0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;yield&quot;&gt;yield&lt;/h3&gt;
&lt;p&gt;앞에서 iterable, iterator에 대한 이해가 되었다면 generator를알아볼 준비가 되었다.&lt;/p&gt;

&lt;p&gt;generator의 구현은 함수의 형태로 구현된다. yield는 generator를 구현하는 함수 안에서 사용되는 키워드이다. 이 키워드를 통해 함수가 generator라는 것을 나타내고 객체가 호출될 때마다 return 과 같이 값을 반환한다.&lt;/p&gt;

&lt;p&gt;python2에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;xrange()&lt;/code&gt;, python3에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt;가 generator이다.&lt;/p&gt;

&lt;p&gt;다음은 generator의 구현 예시이다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gen_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 결과&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;generator object foo_generator at 0x10805ff10&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;499500&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막으로 generator는 list comprehension으로도 나타낼 수 있다. 일반적인 리스트를 만들 때 대괄호를 사용한다면, generator는 소괄호를 사용하여 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;simple_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;simple_generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#iter&quot;&gt;iter() - Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/glossary.html&quot;&gt;iterable - Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.python.org/moin/Generators&quot;&gt;generator - Python Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 16:57:00 +0000</pubDate>
        <link>https://kirade.github.io/python/2018/02/15/python-iterables-iterator-generator/</link>
        <guid isPermaLink="true">https://kirade.github.io/python/2018/02/15/python-iterables-iterator-generator/</guid>
        
        <category>Python</category>
        
        <category>Syntax</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>2018-02-15 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Book
    &lt;ul&gt;
      &lt;li&gt;import 키워드 파트 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;Generator&lt;/li&gt;
      &lt;li&gt;Default Value in python function
        &lt;ul&gt;
          &lt;li&gt;mutable, immutable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;설 명절 지내기&lt;/li&gt;
  &lt;li&gt;배운내용 포스팅 ( MultiThread, MultiProcess, GIL)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kirade.github.io/python/2018/02/15/python-%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92-default-parameter-value/&quot;&gt;함수의 기본값(Default Parameter) - Kirade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 12:17:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/15/2018-02-15-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/15/2018-02-15-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>[Python] 함수 인자의 기본값 (Default Parameter Value)</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;파이썬에서 함수를 정의할 때, 기본값을 정해줄 수 있다. 하지만 기본값으로 정해준 인자들이 새로 초기화 되어 함수에서 사용되지 않고 공유되는 현상이 발생하는 경우가 있다.&lt;/p&gt;

&lt;h2 id=&quot;study&quot;&gt;Study&lt;/h2&gt;

&lt;h3 id=&quot;문제&quot;&gt;문제&lt;/h3&gt;

&lt;p&gt;파이썬에서는 정의에 따라 immutable한 객체들(Numbers, Strings, Tuples, None)은 변화하지 않습니다. 반면 mutable한 객체들(dictionaries, lists, class)은 변화합니다. 이러한 특징 때문에 여러 상황에서 혼란이 발생할 여지가 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 특징 때문에 함수 안의 인자의 기본값을 정의할 때, immutable객체를 정의할 때와, mutable한 객체를 정의할 때 동작이 다르게 나타납니다.&lt;/p&gt;

&lt;p&gt;일반적인 경우에 프로그래머는 함수 인자의 기본값을 정의할 때, 함수 내에서 함수가 호출될 때마다 인자를 받지 않았을 때, 인자를 기본값으로 초기화 시키려는 의도를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;따라서 다음과 같은 코드를 실행하였을때는 의도와 맞는 결과를 출력합니다. 여기서는 immutable 객체 중 하나인 Number 객체를 기본값으로 주었습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample_immutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sample_immutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_immutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_immutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 결과&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반면, immutable 객체인 클래스를 기본값으로 지정하였을 때에는 프로그래머의 의도와 다른 출력이 표시됩니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample_mutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sample_mutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_mutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 결과&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;37.293205&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;37.293205&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중간에 2초를 쉬었음에도 불구하고 함수가 출력한 시간은 이전에 기본값으로 정의되었던 값을 그대로 유지하고 있습니다. 왜나하면 이전에 정의된 기본값이 mutable 객체였기 때문입니다.&lt;/p&gt;

&lt;h3 id=&quot;해결방법&quot;&gt;해결방법&lt;/h3&gt;
&lt;p&gt;immutable 객체를 기본값으로 지정하였을 때에는 문제가 없어보였지만, mutable 객체를 지정하였을 경우 최초에 호출된 기본값을 참조하는 문제가 발생하였습니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서는 파이썬 공식문서에서는 mutable 객체의 경우 기본값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;으로 두고, 함수 내에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;여부를 검사하여 기본값을 정의하는 방식을 취하는 방식을 취하라고 권고합니다.&lt;/p&gt;

&lt;p&gt;이런 방식으로 코딩을하면 정상적으로 작동하는 것을 알 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample_solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sample_solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 결과&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;54.477672&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.480266&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;memoization&quot;&gt;Memoization&lt;/h3&gt;
&lt;p&gt;위와 같은 mutable 객체 기본값은 함수 내에서의 caching을 구현할 경우 유용하게 사용될 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 공식문서에서 제시한 활용 예제 입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;_cache&lt;/code&gt;라는 mutable 객체 기본값을 활용하여 함수가 수행될 때마다 앞 두 가지 인자에 대한 수행결과를 가지고 있는지 검사합니다. 이 과정을 통해 이미 수행되었던 경우라면 연산없이 빠르게 결과값을 만들어 낼 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expensive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Calculate the value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expensive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# Store result in the cache&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/faq/programming.html?highlight=default%20parameter#why-are-default-values-shared-between-objects&quot;&gt;Python3 docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 00:21:00 +0000</pubDate>
        <link>https://kirade.github.io/python/2018/02/15/python-%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92-default-parameter-value/</link>
        <guid isPermaLink="true">https://kirade.github.io/python/2018/02/15/python-%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92-default-parameter-value/</guid>
        
        <category>Python</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>2018-02-14 TIL</title>
        <description>&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h2&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I Did&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Book
    &lt;ul&gt;
      &lt;li&gt;현재까지 진행한 내용 검토 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;multithread, multiprocess, GIL&lt;/li&gt;
      &lt;li&gt;iterables, iterator, generator, yield&lt;/li&gt;
      &lt;li&gt;mutable, immutable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;to-do&quot;&gt;To-Do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two Scoops Of Django&lt;/li&gt;
  &lt;li&gt;tourblog 개발 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 22:53:00 +0000</pubDate>
        <link>https://kirade.github.io/til/2018/02/14/2018-02-14-til/</link>
        <guid isPermaLink="true">https://kirade.github.io/til/2018/02/14/2018-02-14-til/</guid>
        
        <category>TIL</category>
        
        
        <category>TIL</category>
        
      </item>
    
  </channel>
</rss>
