<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Harry The Great on Medium]]></title>
        <description><![CDATA[Stories by Harry The Great on Medium]]></description>
        <link>https://medium.com/@herryhan2435?source=rss-8fcd041d697e------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*VtavpKk4GP7wyNXNgbcn5w.jpeg</url>
            <title>Stories by Harry The Great on Medium</title>
            <link>https://medium.com/@herryhan2435?source=rss-8fcd041d697e------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 08:35:43 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@herryhan2435" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Gradle에서 Dependency Conflict 해결하기]]></title>
            <link>https://medium.com/harrythegreat/gradle%EC%97%90%EC%84%9C-dependency-conflict-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-57dbba3a3231?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/57dbba3a3231</guid>
            <category><![CDATA[android]]></category>
            <category><![CDATA[mobile]]></category>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Fri, 10 May 2019 23:49:51 GMT</pubDate>
            <atom:updated>2019-05-10T23:49:51.081Z</atom:updated>
            <content:encoded><![CDATA[<p>의외로 처음 안드로이드 개발을 하게되면 마주하는 가장 짜증내는 문제가 의존성끼리의 충돌입니다. 그리고 생각보다 관련한 글이 많이 없기에 작성하게되었습니다. 일반적으로 그래들에서의 의존성끼리 충돌은 서로 동일한 라이브러리를 사용하고있지만 서로 다른 버전을 사용할때 일어납니다. 이경우 그래들에서는 사용자가 어떤 버전을 사용할지 모르기때문에 에러메세지를 띄웁니다.</p><h3>문제를 먼저 찾자</h3><pre>./gradlew app:dependencies<br>./gradlew app:dependencies --dependency modulename //모듈과함께<br>./gradlew app:dependencies --configuration compile //의존성 구성값과함께</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/620/1*tHtfGpho08_LChNKGljDvA.png" /></figure><p>먼저 문제가 되는 라이브러리를 알아야합니다. 위 커맨드를 이용하면 각각의 라이브러리들을 알 수 있기때문에 충돌하는 라이브러리들을 검색하여 확인할 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/840/1*VG_CqK5sESPPXdL0tXcWWw.png" /></figure><p>사실 안드로이드 스튜디오에서 프로젝트 구성을 열어보면 GUI를 통해 현재 문제가되는 플러그인과 새로 버전이 있는 의존성들을 보여주기는하지만 일반적으로 개인 개발이 아니라면 versions 그래들파일이나 dependency 그래들파일과같은 파일에 변수로 선언을하는데 변수로 선언한경우 프로젝트 구성에서 인식을 하지못합니다( 그래들 사이트도 역시…) 혹시 할 수 있는 방법이 있는데 제가 모르는거라면 댓글 꼭 부탁드립니다..!</p><p>만약 라이브러리들이 많다면 눈감짝할사이에 화면이 슉슉 넘어가버리게됩니다. 따라서 따로 텍스트파일로 저장하고싶으면</p><pre>./gradlew app:dependencies &gt; 경로/dependency.txt</pre><p>혹은 HTML파일과같은 형태로 보고싶다면</p><pre>apply plugin: &#39;project-report&#39;</pre><p>빌드스크립트 상단에 플러그인을 선언해주고</p><pre>./gradlew htmlDependencyReport</pre><p>report를 만드는 그래들 명령어를 입력해줍니다.</p><h3>이제 해결을 해봅시다!</h3><h4>직접선언하기</h4><pre>implementation &quot;org.hamcrest:hamcrest:버전명&quot;</pre><p>가장 간단명료한 방법은 그래들이 어떤 버전을 모를때 직접 gradle파일에 라이브러리를 선언하는 방법이 있습니다. 혹시 어떤 버전을 해야할지 모르신다면 경험상 높은버전이 더 좋았습니다.</p><h4>문제가 되는 라이브러리에서 해당 모듈을 빼기</h4><pre>implementation(&quot;org.hamcrest:hamcrest:버전명&quot;){</pre><pre>      exclude group: &quot;org.hamcrest&quot;, module: &#39;hamcrest&#39;</pre><pre>}</pre><p>implementation DSL 형식의 문법으로 그룹명과 모듈명으로 가져오지 않을 라이브러리를 명싷바니다.</p><h4>충돌할경우 어떻게할지 명시하기</h4><pre>android{<br> configurations.all{<br>    exclude group: &#39;org.hamcreset&#39;, module: &#39;hamcrest&#39;<br>    resolutionStrategy{<br>        forcedModules = [&#39;asm:asm-all:3.3.1&#39;]</pre><pre>     }<br>}</pre><p>resolutionStrategy에서 force 혹은 forceModuels 값을 주게되면 해당 버전명으로 가져옵니다. 하지만 이와같이 configuration.all을 이용하여 전역으로 설정하게되면 문제가 발생할 가능성이 높 으니 되도록 직접 라이브러리별로 선언하거나 혹은 configuration의 scope를 설정하여 사용하는편이 좋습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=57dbba3a3231" width="1" height="1"><hr><p><a href="https://medium.com/harrythegreat/gradle%EC%97%90%EC%84%9C-dependency-conflict-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-57dbba3a3231">Gradle에서 Dependency Conflict 해결하기</a> was originally published in <a href="https://medium.com/harrythegreat">해리의 유목코딩</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lambda에서 Sequalize.js 삽질기]]></title>
            <link>https://medium.com/harrythegreat/lambda%EC%97%90%EC%84%9C-sequalize-js-%EC%82%BD%EC%A7%88%EA%B8%B0-399ddfae421?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/399ddfae421</guid>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[rdb]]></category>
            <category><![CDATA[servers]]></category>
            <category><![CDATA[sequelize]]></category>
            <category><![CDATA[cloud]]></category>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Thu, 09 May 2019 11:58:44 GMT</pubDate>
            <atom:updated>2019-05-09T12:16:34.917Z</atom:updated>
            <content:encoded><![CDATA[<h4>고통과 번뇌의 삽질</h4><h3>왜 람다에서 RDBMS인가?</h3><p>요즘들어 점점 더 많은분들이 Serverless와 Container 기반으로 개발을 하시는것같습니다. 일반적인 온프로미스 환경과달리 람다는 아주 짧은 시간동안만 컴퓨팅 파워를 쓰기때문에 MongoDB나 RDB같은 풀기반의 데이터베이스 환경보다 API 기반의 데이터베이스가 더 궁합이 맞습니다. 하지만… 궁합이 맞는것과 실제로 개발의 편의성은 다른 이야기입니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FPFiH1DdSOiYO-vHfudwzQ.png" /><figcaption>Datagrip못 잃어! Workbench못 잃어! SQL 못 잃어!</figcaption></figure><p>Lambda에서는 DynamoDB를 쓰면 정말 편하지만 데이터를 체크하고 관리하기가 무척이나 힘듭니다. SQL을 사용할때는 우리에게 Workbench(혹은 Datagrip)이라는 궁극의 툴이 있습니다. 또한 데이터를 좀 더 유연하게 쿼리할 수 있기때문에 Lambda에서 RDBMS를 사용하기로 결정했습니다.</p><h3>ORM vs Raw SQL</h3><p>RDBMS를 사용하기로해도 문제가 있습니다. ORM을 통한 class 맵핑을 자동으로 할당해줄지 아니면 로우한 SQL 쿼리를 직접 질의할지입니다. 후자의경우는 사용이 크게 어렵지 않습니다. 핸들러 블록 내에서 connection을 설정하고 질의를 한 후 close 메서드를 이용해 연결만 끊어주게된다면 문제가 없습니다.</p><h3>callbackWaitsForEmptyEventLoop</h3><p>혹시라도 사용하는 라이브러리에서 Timeout에러가 난다면 callbackWaitsForEmptyEventLoop옵션을 설정해주어야합니다. Lambda 함수에서는 callback(async일경우 return)이 호출되어도 람다가 끝나지않고 이벤트루프에있는 작업들이 끝나기를 기다립니다.</p><h4>데이터베이스 풀문제</h4><p>데이터베이스에서 풀이란 보통 연결상태를 끊지않고 계속 연결하는것을 말합니다. 일반적인 온프로미스환경에서는 서버가 계속해서 HTTP Request를 기다리는 [대기]상태이기때문에 항상 풀이 연결된 상태를 유지합니다.</p><p>하지만 문제는 람다에서도 풀이 계속 연결된 상태를 유지하기때문에 람다에서는 아직 이벤트루프에 작업들이 진행중이기때문에 람다함수의 종료를 보류합니다. 이로인해 요청한 클라이언트에서는 수초이상 응답을 받지 못했기때문에 Timeout에러가 발생하게됩니다. 이때 context.callbackWaitsForEmptyEventLoop에 true값을 주어 callaback이 실행됨과 동시에 람다함수가 종료되도록 설정해주어야합니다.</p><h3>Sequalize.js</h3><p>단순한 형태의 테이블이라면 로우한 SQL를 질의해도 되지만 모델클래스가 필요하고 데이터의 후가공과 테이블의 관계가 복잡해진다면 ORM은 사용하지 않을수 없습니다. Node의 RDBMS진영에서 가장 유명한 라이브러리는 <a href="https://github.com/sequelize/sequelize">Sequalize.js</a> 입니다. Sequalzie v3버전을 사용하기까지는 큰 문제가 없었지만 v4 버전부터는 connection 에러가 간간히 발생하게되었습니다.</p><h4>generic-pool 라이브러리 문제</h4><p>v3버전까지 node-pool 라이브러리에서는 문제가 발생하지 않았으나 sequalize.js의 v4버전부터 사용하는 generic-pool의 경우 람다함수가 끝났음에도 pool을 계속해서 가지고있는 문제가 발생했습니다. 이로인해 최근 출시된 v5버전부터는 connection 문제가 해소되었습니다. <a href="https://github.com/sequelize/sequelize/issues/8468">관련 Github Issue글</a></p><h4>커넥션 idle 타임</h4><p>sequalize.js에서 풀을 사용하지 않는다면 pool옵션을 따로 설정해주어야합니다. v3까지는 pool옵션에 false를 주어 사용하지 않을 수 있었지만 v4버전부터는 풀을 강제하게됩니다. 이로인해 아래와같은 코드로 pool을 설정하지 않을 수 있습니다.</p><pre>Sequelize.addHook(&#39;afterInit&#39;, function(sequelize) {<br>  sequelize.options.handleDisconnects = false;<br><br>  // Disable pool completely<br>  sequelize.connectionManager.pool.clear();<br>  sequelize.connectionManager.pool = null;<br>  sequelize.connectionManager.getConnection = function getConnection() {<br>    return this._connect(sequelize.config);<br>  };<br>  sequelize.connectionManager.releaseConnection = function releaseConnection(connection) {<br>    return this._disconnect(connection);<br>  };<br>})</pre><h3>체크해볼 문제점들</h3><h4>딜레이시간</h4><p>람다에서 pool을 사용하지않고 데이터를 가져올경우 약 500ms의 딜레이시간이 발생합니다. 람다가 콜드스타팅될경우 더 많은 시간이 딜레이 발생하게됩니다. 람다가 콜드스타팅되지 않을경우 딜레이시간이 크게 느껴지지는 않지만 만약 Lambda함수가 RDS와함께 VPC내에서 구축되어있다면 Lambda의 Network EMI를 붙이는 딜레이시간이 약 500ms~ 800ms 또 발생하게됩니다.</p><h4>Max Connection</h4><p>Lambda에서 커넥션을 아주 짧은 시간만 유지하지만 유저가 몰린다면 단시간내에 엄청나게 많은 커넥션풀이 발생하게됩니다. 이를 방지하기위해 데이터베이스의 Max Connection값을 넉넉하게 잡아두어야하며 맥스값 관리에 주의가 필요합니다.</p><h3>Typescript에서 구축하기</h3><p>sequalzie와 typescript를 검색해보면 sequalize-typescript라는 라이브러리가 있습니다. 아직 프로젝트가 성숙되지 못해서인지 람다환경에서 구현하는데 자잘한 문제가 상당히 많았습니다. 다행히 v5버전부터는 typescript를 구현하는 <a href="http://docs.sequelizejs.com/manual/typescript.html">샘플코드를 제공</a>하고있습니다.</p><h4>Define 형태로 ORM을 정의했다면?</h4><p>이전까지 사용해오던 define 형태의 모델정의가 아닌 class 형식의 모델 정의를 사용하기때문에 이전의 define 형태를 타입스크립트로 마이그레이션한다면 <a href="https://michalzalecki.com/using-sequelize-with-typescript/">이 포스트</a>에서 예제를 확인할 수 있습니다.</p><h4>마치며</h4><p>다른경우라면 Sequalize.js를 Lambda에서 사용하는데 크게 문제가 될것같진 않지만 API Server에서 풀을 이용한 데이터베이스를 사용할때 대용량 처리에 관련해서는 다소 걱정이 되기는합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=399ddfae421" width="1" height="1"><hr><p><a href="https://medium.com/harrythegreat/lambda%EC%97%90%EC%84%9C-sequalize-js-%EC%82%BD%EC%A7%88%EA%B8%B0-399ddfae421">Lambda에서 Sequalize.js 삽질기</a> was originally published in <a href="https://medium.com/harrythegreat">해리의 유목코딩</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[정말 좋은 고급팁 감사합니다.]]></title>
            <link>https://medium.com/@herryhan2435/%EC%A0%95%EB%A7%90-%EC%A2%8B%EC%9D%80-%EA%B3%A0%EA%B8%89%ED%8C%81-%EC%82%AC%E3%85%82%E3%84%B4%E3%85%A3%EB%8B%A4-a5a8af62ea90?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/a5a8af62ea90</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Mon, 22 Apr 2019 00:31:16 GMT</pubDate>
            <atom:updated>2019-04-22T00:31:55.626Z</atom:updated>
            <content:encoded><![CDATA[<p>정말 좋은 고급팁 감사합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a5a8af62ea90" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[데일리 데브블로그라는걸 오늘 처음알았네요. 저도 구독신청했습니다~! 감사합니다.]]></title>
            <link>https://medium.com/@herryhan2435/%EB%8D%B0%EC%9D%BC%EB%A6%AC-%EB%8D%B0%EB%B8%8C%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%9D%BC%EB%8A%94%EA%B1%B8-%EC%98%A4%EB%8A%98-%EC%B2%98%EC%9D%8C%EC%95%8C%EC%95%98%EB%84%A4%EC%9A%94-%EC%A0%80%EB%8F%84-%EA%B5%AC%EB%8F%85%EC%8B%A0%EC%B2%AD%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-a4ad52a5d027?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/a4ad52a5d027</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Sun, 14 Apr 2019 17:51:57 GMT</pubDate>
            <atom:updated>2019-04-14T17:51:57.885Z</atom:updated>
            <content:encoded><![CDATA[<p>데일리 데브블로그라는걸 오늘 처음알았네요. 저도 구독신청했습니다~! 감사합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a4ad52a5d027" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[AWS] 로드밸런싱 알아보기]]></title>
            <link>https://medium.com/harrythegreat/aws-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-9fd0955f859e?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/9fd0955f859e</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Sun, 31 Mar 2019 07:20:40 GMT</pubDate>
            <atom:updated>2019-03-31T08:46:27.569Z</atom:updated>
            <content:encoded><![CDATA[<h4>비전공자도 이해할 수 있는 로드밸런싱</h4><p>저는 주로 안드로이드와 IOS앱을 개발하기때문에 주변에 클라이언트 개발자분들이 많습니다. 저를 포함해서 클라이언트 위주로만 하다보면 서버쪽 이해에 어려움을 간간히 느끼게되는것같습니다. 다른분들은 조금 더 이해가 쉬었으면 하여 최대한 그림위주로 블로깅을 해보았습니다.</p><h3>로드밸런싱이 필요한 이유</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ycw_PI8686Y45ElrBBa8XA.png" /><figcaption>로드밸런싱을 쓰지 않는다면?</figcaption></figure><p>로드밸런싱을 쓰지 않는다면 우리는 각 EC2 인스턴스에 고정된 아이피를 부여해야합니다. 문제는 하나의 인스턴스에 하나의 도메인만 연결할 수 밖에 없는데 버에서 많은 사람들이 몰린다면 서버의 사양을 올리는 스케일업 서버의 개수를 늘리는 스케일아웃을 고려해야합니다. 스케일업 경우 인스턴스를 업데이트하는동안 서비스를 할 수 없습니다. 스케일아웃을 한다면 서버가 늘어날때마다 도메인이 새로 필요합니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*A-9IUJ9yRpvdRY-EqsrNUw.png" /></figure><p>로드밸런싱은 위 그림처럼 한곳의 엔드포인트로 들어오는 트래픽을 각 인스턴스에 분산시켜줍니다. 이러한 로드밸런싱은 크게 클래식 로드밸런서와 어플리케이션 로드밸런서 두가지로 나눌 수 있습니다.</p><h3>로드밸런서의 종류</h3><p>로드밸런서는 레이어4계층에서 작동하는 클래식 로드밸런서와 레이어7계층에서 작동하는 애플리케이션 로드 밸런서가 있습니다. 조금 쉽게 풀어 이야기하면 레이어 4계층은 라우터 스위치등 물리적인 하드웨어 영역이기때문에 데이터를 변경/수정 할 수 없고 레이어 7계층은 애플리케이션 계층이기때문에 포트나 헤더등이 수정 가능하다정도만 이해해도 충분합니다.</p><h4>클래식 로드 밸런서(ELB)</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1009/1*oxj9qIwD3_6RzjbUvV487Q.png" /></figure><p>먼저 타겟그룹이란 EC2 인스턴스를 오토스케일링 할 수 있는 단위로 사용됩니다. 클래식 로드밸런서의 단점은 서버의 기본주소가 바뀌면 로드밸런서를 새로 생성해야하며 하나의 주소에 하나의 대상그룹으로 보내게됩니다. 또한 레이어 4계층에서 작동하기때문에 데이터를 수정, 변경할 수 없기때문에 포트나 헤더를 변경할 수 없습니다.</p><p>이러한 구조의 문제점은 서버의 구성이 비대해지고 마이크로 아키텍쳐를 구성하기 어렵습니다. 또한 회원모듈을 처리하는 인스턴스와 쇼핑모듈을 인스턴스가 따로 존재한다면 2개의 로드밸런서가 필요하고 비용도 2배로 들어가게됩니다.</p><h4>애플리케이션 로드 밸런서(ALB)</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7GrsoeGa8zbAB5BZ_f2pzw.png" /></figure><p>반면 ALB는 패스나 포트등에 따라 다른 대상그룹으로 맵핑할 수 있습니다. 특히 포트단위로 연결해줄 수 있는것은 도커컨테이너 환경에서 아주 유용하게 작동할 수 있고 하나의 대상그룹에 더 많은 컨테이너를 넣어 비용을 최적화할 수 있습니다. 뿐만 아니라 대상을 EC2 인스턴스, 람다, IP로도 연결이 가능하며 특정한 요청에 대해서는 서버없이 직접 응답메세지를 작성할 수 있기때문에 마이크로아키텍쳐를 구성하기에 좋습니다.</p><h3>로드밸런싱 용어설명</h3><h4>상태확인</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DtdL926oTLgJAGd9JmaU5Q.png" /></figure><p>로드밸런서에는 상태확인을 할 수 있습니다. 상태확인은 대상그룹에 원하는 경로와 포트를 설정하여 정상적으로 원하는 HTTP 응답이 오는지 확인하게해줍니다. 만약 정상적으로 응답이 오지 않는 인스턴스가 있다면 비정상상태의 인스턴스를 제외한 다른 인스턴스로만 트래픽을 분산합니다.</p><h4>대상그룹</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/892/1*94bC8nEL2USxM6dMqUxncg.png" /></figure><p>대상그룹 혹은 타겟그룹은 일반적으로 오토스케일링을 위한 단위입니다. 각각의 대상그룹에 있는 인스턴스들은 정의된 상태검사를 수행합니다.</p><h3>ALB를 위한 용어설명</h3><p>이전 클래식 로드밸런서는 단순한 형태이기때문에 요청을 어느 대상그룹으로 보낼지정도만 알면 되지만 애플리케이션 로드밸런서는 다소 복잡합니다. 각각의 포트에따라 다르게 구성할 수 있으며 동일한 포트라도 패스등에 따라 다르게 분기할 수 있습니다. ALB에 추가되는 용어에 대해 알아보겠습니다.</p><h4>리스너와 룰</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hzn9pJ8HgIOXBtfU2gE1nw.png" /></figure><p>ALB에는 리스너를 포트와 프로토콜별로 분기처리할 수 있습니다. 하단에 있는 룰은 패스별 혹은 AWS_ARN별로 다른 분기를 처리할 수 있습니다.</p><h3>마치며</h3><p>용어로만 배우면 항상 어려운게 많아 최대한 이미지를 많이 활용하였습니다. 조금이라도 이해에 도움이 되었으면 좋겠습니다. 로드밸런서는 VPC 설정이 필수적이므로 헷갈린신다면 이전에 작성한 VPC글과 함께 보시면 더 좋습니다.</p><p><a href="https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098">[AWS] 가장쉽게 VPC 개념잡기</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9fd0955f859e" width="1" height="1"><hr><p><a href="https://medium.com/harrythegreat/aws-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-9fd0955f859e">[AWS] 로드밸런싱 알아보기</a> was originally published in <a href="https://medium.com/harrythegreat">해리의 유목코딩</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[설정을 한걸로 기억이 없는데 포스트에 paywall 설정이 붙어있었던것같습니다. paywall 설정은 다 해제하였습니다.]]></title>
            <link>https://medium.com/@herryhan2435/%EC%84%A4%EC%A0%95%EC%9D%84-%ED%95%9C%EA%B1%B8%EB%A1%9C-%EA%B8%B0%EC%96%B5%EC%9D%B4-%EC%97%86%EB%8A%94%EB%8D%B0-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-paywall-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%B6%99%EC%96%B4%EC%9E%88%EC%97%88%EB%8D%98%EA%B2%83%EA%B0%99%EC%8A%B5%EB%8B%88%EB%8B%A4-paywall-%EC%84%A4%EC%A0%95%EC%9D%80-%EB%8B%A4-%ED%95%B4%EC%A0%9C%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4-45c9b67db560?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/45c9b67db560</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Fri, 29 Mar 2019 11:20:26 GMT</pubDate>
            <atom:updated>2019-03-29T11:20:26.352Z</atom:updated>
            <content:encoded><![CDATA[<p>설정을 한걸로 기억이 없는데 포스트에 paywall 설정이 붙어있었던것같습니다. paywall 설정은 다 해제하였습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=45c9b67db560" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[코틀린의 더블콜론(::) 참조]]></title>
            <link>https://medium.com/harrythegreat/%EC%BD%94%ED%8B%80%EB%A6%B0%EC%9D%98-%EB%8D%94%EB%B8%94%EC%BD%9C%EB%A1%A0-%EC%B0%B8%EC%A1%B0-73ff25484586?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/73ff25484586</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Fri, 29 Mar 2019 11:17:08 GMT</pubDate>
            <atom:updated>2019-03-29T11:18:16.469Z</atom:updated>
            <content:encoded><![CDATA[<p>평소 더블콜론을 사용할때 자바의 클래스참조로 쓰이는 리플렉션과 같은 용도로 사용한다고만 이해하고 사용하는경우가 많았습니다.이번에 한번 더 정리를 하고자 작성하였습니다.</p><h4>리플렉션(Reflection)이란</h4><p>코틀린에서 더블콜론(::)은 리플렉션을 위해 사용합니다. 리플렉션이란 코드를 작성하는 시점에는 런타임상 컴파일된 바이트코드에서 내가 작성한 코드가 어디에 위치하는지 알 수 없기때문에 바이트코드를 이용해 내가 참조하려는 값을 찾기위해 사용합니다. 개인적으로 리플렉션이라는 단어가 반사,투영이라는 의미가 있기때문에 바이트코드를 통해서 투영된 코드를 참조한다는 뜻이 아닐까 싶습니다.</p><h4>자바에와 코틀린에서의 리플렉션</h4><blockquote>SomeClass.class //클래스 그 자체를 리플렉션<br>someInstance.getClass() //인스턴스에서 클래스를 리플렉션</blockquote><p>자바에서는 클래스를 참조할때 위와같이 사용합니다.</p><blockquote>SomeClass::class<br>someInstance::class</blockquote><p>코틀린에서는 더블콜론을 리플렉션을 위해 사용하며 위와같은 형태로 사용합니다. 하지만 우리가 액티비티를 넘길때는 SomeClass::class.java와 같이 끝에 .java가 붙는것을 볼 수 있습니다. 그 이유는 자바에서 쓰는 클래스와 코틀린에서 쓰는 클래스가 다르기 떄문입니다. 자바에서의 ‘SomeClass.class’는 Class를 리턴하고 반면 코틀린에서는 SomeClass::Class를하면 KClass를 리턴합니다. 그렇기때문에 KClass를 Class로 바꾸어주어야하는데 이때 ‘.Java’를 이용하여 자바클래스 값을 받습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/621/1*En7Pum8iLBdvpqUdPnxewQ.png" /></figure><p>KClass 안의 java의 getter는 위 그림과 같이 확장함수 형태로 되어있으며 KClass에서 자바의 클래스 타입을 반환합니다.</p><h3>코틀린에서의 함수참조</h3><p>코틀린에서 SomeClass::class와 같이 클래스를 참조할수도 있지만 SomeClass:Method와같이 클래스 내의 메서드도 참조할 수 있고 ::Function형식의 함수도 참조할 수 있습니다.</p><pre>fun isOdd(x:Int):Boolean{<br> return x % 2 != 0<br>}<br>//단축형 <br>//fun isOdd(x: Int) = x % 2 != 0</pre><p>홀수를 체크하는 함수는 위 코드와같이 표현할 수 있고 람다식으로 표현한다면 정수를 받아 불을 리턴하는 <strong>(Int) -&gt; Boolean </strong>와 같이 표현할 수 있습니다. 만약 isOdd를 Filter를 이용해 사용한다면 아래 그림과 같이 사용할 수 있습니다.</p><pre>val numbers = listOf(1, 2, 3)<br>println(numbers.filter(::isOdd))<br>//출력 [1,3]</pre><p>혹시 이해가 가지 않는다면 필터의 원형을보면 쉽습니다.</p><pre>inline fun IntArray.filter(<br> predicate:(Int) -&gt; Boolean<br>)</pre><p>필터의 원형은 IntArray에서 Int값을받아 Boolean을 리턴하는 인라인함수입니다. 마찬가지로 Int를 받아 Boolean을 리턴하기때문에 함수를 참조하여 동일한 형식인 isOdd를 사용할 수 있습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=73ff25484586" width="1" height="1"><hr><p><a href="https://medium.com/harrythegreat/%EC%BD%94%ED%8B%80%EB%A6%B0%EC%9D%98-%EB%8D%94%EB%B8%94%EC%BD%9C%EB%A1%A0-%EC%B0%B8%EC%A1%B0-73ff25484586">코틀린의 더블콜론(::) 참조</a> was originally published in <a href="https://medium.com/harrythegreat">해리의 유목코딩</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[AWS] 가장쉽게 VPC 개념잡기]]></title>
            <link>https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/71eef95a7098</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Fri, 22 Mar 2019 14:44:32 GMT</pubDate>
            <atom:updated>2019-03-24T15:41:42.491Z</atom:updated>
            <content:encoded><![CDATA[<p>주요 VPC개념을 중점으로</p><p>개발하며 머리끝까지 화가난건 손에 꼽는것같습니다. 수십번도 더 설정한 VPC인데… 네트워크 구조를 설명못한걸로 보안그룹은아냐 서브넷은아냐 소리를 들으며 순간 살의를 느껴봤습니다. 최소한 다른사람들은 저처럼 기분나쁜일은 없으면해서 최대한 쉽게 VPC를 설명해보고싶습니다.</p><h3>VPC보다 VPN(Virtual Private Network) 먼저</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-oRY4UNumWGfnmsCrgSTOg.png" /><figcaption>회사 내부의 네트워크</figcaption></figure><p>VPN은 한국어로 “가상사설망&quot;이라합니다. 앞에 “가상&quot;이라는 단어에서 알 수 있듯 실제 사설망이 아닌 <strong>가상의 사설망입니다. 만약 </strong>위 그림과같이 회사의 네트워크가 구성되어있고 보안상의 이유로 직원간 네트워크를 분리하고싶다면 기존 인터넷선 선공사도 다시해야하고 건물의 내부선을 다 뜯어고쳐야하며 다시 전용선을 깔아주어야합니다. 이를위해 가상의 망 VPN을 사용하게됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5ewVo87W9HPO_0csubAMOQ.png" /><figcaption>VPN을 구축한 네트워크</figcaption></figure><p>VPN은 네트워크A와 네트워크B가 실제로 같은 네트워크상에 있지만 논리적으로 다른네트워크인것처럼 동작합니다. 이를 우리는 ‘가상사설망&#39;이라고합니다.</p><h3>VPC(Virtual Private Network)</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1021/1*hZGJeN-4F6fLtus5XBJC_w.png" /><figcaption>VPC가 없는구조</figcaption></figure><p>VPC가 없다면 EC2 인스턴스들이 서로 거미줄처럼 연결되고 인터넷과 연결됩니다. 이런 구조는 시스템의 복잡도를 엄청나게 끌어올릴뿐만 아니라 하나의 인스턴스만 추가되도 모든 인스턴스를 수정해야하는 불편함이 생깁니다. 마치 인터넷 전용선을 다시까는것과 같습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/982/1*Ehn4uEQMtbmdPsU6MxVc3Q.png" /><figcaption>VPC가를 적용한구조</figcaption></figure><p>VPC를 적용하면 위 그림과같이 VPC별로 네트워크를 구성할 수 있고 각각의 VPC에따라 다르게 네트워크 설정을 줄 수 있습니다. 또한 각각의 VPC는 완전히 독립된 네트워크처럼 작동하게됩니다.</p><h3>VPC를 구축하는 과정</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Bjb_sU3iu7_Z9Djeh3Zwdw.png" /></figure><p>VPC를 구축하기위해서는 VPC의 아이피범위를 RFC1918이라는 사설아이피대역에 맞추어 구축해야합니다. 사설아이피란 무엇일까요? 인터넷을 위해 사용하는것이 아닌 우리끼리 사용하는 아이피주소 대역입니다. 예를들어보겠습니다. 누군가 “안방에서 리모컨좀 가져다달라”하면 저는 옆집을 가는게 아닌 우리집에 있는 “안방”으로 찾아갑니다. 안방이 프라이빗아이피(사설아이피) 우리집 주소가 퍼블릭아이피입니다.</p><p>옆집도에서의 안방은 옆집내에 있는 안방 우리집 내에도 안방이 있습니다. 누군가 자신의 집주소를 안방이라고하면 “우편을 안방으로 보내주세요” 하는순간 엄청난 혼돈이 생깁니다. 왜냐면 우리집에도 안방이 존재하기떄문에 이를 피하기위해 “안방”, “작은방”, “큰방”처럼 내부에서 쓰는 아이피가 존재하고 이 대역을 사설아이피 대역이라고하며 아래와같은 형식을 사용합니다.</p><p>- 10.0.0.0 ~ 10.255.255.255(10/8 prefix)</p><p>- 172.16.0.0 ~ 172.31.255.255(182.16/12 prefix)</p><p>- 192.168.0.0 ~ 192.168.255.255(192.168/16 prefix)</p><p>한번 설정된 아이피대역은 수정할 수 없으며 각 VPC는 하나의 리전에 종속됩니다. 각각의 VPC는 완전히 독립적이기때문에 만약 VPC간 통신을 원한다면 VPC 피어링 서비스를 고려해볼 수 있습니다.</p><h4>서브넷</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WCucO_PRVCShRY2Swe1HGQ.png" /></figure><p>VPC를 만들었다면 이제 서브넷을 만들 수 있습니다. 서브넷은 VPC를 잘개 쪼개는 과정입니다. 서브넷은 VPC안에 있는 VPC보다 더 작은단위이기때문에 연히 서브넷마스크가 더 높게되고 아이피범위가 더 작은값을 갖게됩니다. 서브넷을 나누는 이유는 더 많은 네트워크망을 만들기 위해서입니다.</p><p>각각의 서브넷은 가용영역안에 존재하며 서브넷안에 RDS, EC2와같은 리소스들을 위치시킬 수 있습니다.</p><h4>라우팅 테이블과 라우터</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*C_j93s0KB4JwfLgck5YFug.png" /></figure><p>네트워크 요청이 발생하면 데이터는 우선 라우터로 향하게됩니다. 라우터란 목적지이고 라우팅테이블은 각 목적지에 대한 이정표입니다 데이터는 라우터로 향하게되며 네트워크 요청은 각각 정의된 라우팅테이블에따라 작동합니다. 서브넷A의 라우팅테이블은 172.31.0.0/16 즉 VPC안의 네트워크 범위를 갖는 네트워크 요청은 로컬에서 찾도록 되어있습니다. 하지만 그 이외 외부로 통하는 트래픽을 처리할 수 없습니다.이때 인터넷 게이트웨이를 사용합니다.</p><h4>인터넷게이트웨이</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I_3RxWyOPMj9lQs1xhEebg.png" /></figure><p>인터넷게이트웨이는 VPC와 인터넷을 연결해주는 하나의 관문입니다. 서브넷B의 라우팅테이블을 잘보면 0.0.0.0/0으로 정의되어있습니다. 이뜻은 모든 트래픽에 대하여 IGA(인터넷 게이트웨이) A로 향하라는뜻입니다. 라우팅테이블은 가장 먼저 목적지의 주소가 172.31.0.0/16에 매칭되는지를 확인한 후 매칭되지 않는다면 IGA A로 보냅니다.</p><p>인터넷과 연결되어있는 서브넷을 퍼블릭서브넷, 인터넷과연결되어있지않는 서브넷을 프라이빗서브넷이라고합니다.</p><h4>네트워크 ACL과 보안그룹</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hyUQHofL7FkFtJ3FnZ1IJA.png" /></figure><p>네트워크 ACL과 보안그룹은 방화벽과 같은 역활을 하며 인바운드 트래픽과 아웃바운드 트래픽 보안정책을 설정할 수 있습니다. 먼저 보안그룹은 Stateful한 방식으로 동작하는 보안그룹은 모든 허용을 차단하도록 기본설정 되어있으며 필요한 설정은 허용해주어야합니다. 또한 네트워크ACL과 다르게 각각의 보안그룹별로도 별도의 트래픽을 설정할 수 있으며 서브넷에도 설정할 수 있지만 각각의 EC2인스턴스에도 적용할 수 있습니다.</p><p>네트워크 ACL은 Stateless하게 작동하며 모든 트래픽을 기본설정되어있기때문에 불필요한 트래픽을 도디로고 적용해야합니다. 서브넷단위로 적용되며 리소스별로는 설정할 수 없습니다. 네트워크ACL과 보안그룹이 충돌한다면 보안그룹이 더 높은 우선순위를 갖습니다.</p><h3>NAT 게이트웨이</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jS8gNWRUH1SFi1XAHFU0aQ.png" /></figure><p>NAT 게이트웨이는 프라이빗서브넷이 인터넷과 통신하기위한 아웃바운드 인스턴스입니다. 프라이빗 네트워크가 외부에서 요청되는 인바운드는 필요없더라도 인스턴스의 펌웨어나 혹은 주기적인 업데이트가 필요하여 아웃바운드 트래픽만 허용되야할 경우가 있습니다. 이때 퍼블릭 서브넷상에서 동작하는 NAT 게이트웨이는 프라이빗서브넷에서 외부로 요청하는 아웃바운드 트래픽을 받아 인터넷게이트웨이와 연결합니다.</p><h3>마치며</h3><p>VPC의 목적은 다양할 수 있지만 일반적으로 보안을위해 AWS 리소스간 최소한의 허용하는 목적으로 사용합니다.이외에도 독립적인 VPC간 네트워크 통신을 위한 VPC피어링, 기존 사용하는 온프레미스와 VPC를 연결하는 AWS Diarect Connect, VPC에서 발생하는 로그를 기록하는 VPC FLow Logs와같은 서비스가있습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=71eef95a7098" width="1" height="1"><hr><p><a href="https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098">[AWS] 가장쉽게 VPC 개념잡기</a> was originally published in <a href="https://medium.com/harrythegreat">해리의 유목코딩</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Awsome Explations and very practical. thx!]]></title>
            <link>https://medium.com/@herryhan2435/awsome-explations-and-very-practical-thx-6b0becdb95fe?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/6b0becdb95fe</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Sun, 24 Feb 2019 07:26:39 GMT</pubDate>
            <atom:updated>2019-02-24T07:26:39.198Z</atom:updated>
            <content:encoded><![CDATA[<p>Awsome Explations and very practical. thx!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6b0becdb95fe" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[감사합니다! SPM은 아직 ios프로젝트에는 쓸 수 없는것같네요.. ㅠㅠ깃헙에 올려주신 rxswift 내용도 정말 잘보고있어요!]]></title>
            <link>https://medium.com/@herryhan2435/%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-spm%EC%9D%80-%EC%95%84%EC%A7%81-ios%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EB%8A%94-%EC%93%B8-%EC%88%98-%EC%97%86%EB%8A%94%EA%B2%83%EA%B0%99%EB%84%A4%EC%9A%94-%E3%85%A0%E3%85%A0%EA%B9%83%ED%97%99%EC%97%90-%EC%98%AC%EB%A0%A4%EC%A3%BC%EC%8B%A0-rxswift-%EB%82%B4%EC%9A%A9%EB%8F%84-%EC%A0%95%EB%A7%90-%EC%9E%98%EB%B3%B4%EA%B3%A0%EC%9E%88%EC%96%B4%EC%9A%94-a09497d9f90a?source=rss-8fcd041d697e------2</link>
            <guid isPermaLink="false">https://medium.com/p/a09497d9f90a</guid>
            <dc:creator><![CDATA[Harry The Great]]></dc:creator>
            <pubDate>Thu, 21 Feb 2019 10:49:29 GMT</pubDate>
            <atom:updated>2019-02-21T10:49:29.547Z</atom:updated>
            <content:encoded><![CDATA[<p>감사합니다! SPM은 아직 ios프로젝트에는 쓸 수 없는것같네요.. ㅠㅠ깃헙에 올려주신 rxswift 내용도 정말 잘보고있어요!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a09497d9f90a" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>