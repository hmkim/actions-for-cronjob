<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><description>Scala developer</description><title>All that Simplicity</title><generator>Tumblr (3.0; @debop)</generator><link>https://debop.tumblr.com/</link><item><title>Major Features: Postgres 9.6</title><description>&lt;a href="http://momjian.us/main/writings/pgsql/features.pdf"&gt;Major Features: Postgres 9.6&lt;/a&gt;: &lt;p&gt;Postgres 9.6 부터는 병렬처리가 가능하군요&lt;/p&gt;</description><link>https://debop.tumblr.com/post/151729741291</link><guid>https://debop.tumblr.com/post/151729741291</guid><pubDate>Thu, 13 Oct 2016 10:44:32 +0900</pubDate><category>Postgres</category><category>parallel</category></item><item><title>NoSQL Data Stores in Research and Practice - ICDE 2016 Tutorial - Ext…</title><description>&lt;a href="http://de.slideshare.net/felixgessert/nosql-data-stores-in-research-and-practice-icde-2016-tutorial-extended-version"&gt;NoSQL Data Stores in Research and Practice - ICDE 2016 Tutorial - Ext…&lt;/a&gt;</description><link>https://debop.tumblr.com/post/150853776081</link><guid>https://debop.tumblr.com/post/150853776081</guid><pubDate>Sat, 24 Sep 2016 16:33:21 +0900</pubDate></item><item><title>OpenAI technical goals</title><description>&lt;a href="https://openai.com/blog/openai-technical-goals/"&gt;OpenAI technical goals&lt;/a&gt;</description><link>https://debop.tumblr.com/post/150853753611</link><guid>https://debop.tumblr.com/post/150853753611</guid><pubDate>Sat, 24 Sep 2016 16:32:24 +0900</pubDate></item><item><title>Scala vs Kotlin</title><description>&lt;a href="https://agilewombat.com/2016/02/01/scala-vs-kotlin/"&gt;Scala vs Kotlin&lt;/a&gt;: &lt;p&gt;Scala vs Kotlin 두 언어 비교&lt;/p&gt;</description><link>https://debop.tumblr.com/post/149548058286</link><guid>https://debop.tumblr.com/post/149548058286</guid><pubDate>Sat, 27 Aug 2016 18:50:23 +0900</pubDate></item><item><title>OpenStreetMap city blocks as GeoJSON polygons</title><description>&lt;a href="https://peteris.rocks/blog/openstreetmap-city-blocks-as-geojson-polygons/"&gt;OpenStreetMap city blocks as GeoJSON polygons&lt;/a&gt;</description><link>https://debop.tumblr.com/post/149547981626</link><guid>https://debop.tumblr.com/post/149547981626</guid><pubDate>Sat, 27 Aug 2016 18:46:40 +0900</pubDate></item><item><title>Kotlin Sequences</title><description>&lt;a href="https://agilewombat.com/2016/02/06/kotlin-sequences/"&gt;Kotlin Sequences&lt;/a&gt;: &lt;p&gt;Kotlin Sequence는 Scala의 Strem 과 기능이 유사합니다. 무한의 데이터를 생성할 수 있고, 요소를 지연생성하기 때문입니다.&lt;/p&gt;

&lt;p&gt;Kotlin 1.0 이상에서는 generateSequence {} 메소드를 사용하면 됩니다.&lt;/p&gt;</description><link>https://debop.tumblr.com/post/149547913441</link><guid>https://debop.tumblr.com/post/149547913441</guid><pubDate>Sat, 27 Aug 2016 18:43:22 +0900</pubDate></item><item><title>Kotlin: Having Fun with Delegation</title><description>&lt;a href="http://cypressious-blog.appspot.com/post/5649391675244544"&gt;Kotlin: Having Fun with Delegation&lt;/a&gt;: &lt;p&gt;요즘 모든 개발을 Kotlin 으로 하고 있습니다.
Java, Scala, C# 을 섞어놓은 듯합니다. 편하고 개발생산성이 좋다고 생각됩니다.&lt;/p&gt;</description><link>https://debop.tumblr.com/post/149547866406</link><guid>https://debop.tumblr.com/post/149547866406</guid><pubDate>Sat, 27 Aug 2016 18:40:59 +0900</pubDate></item><item><title>HikariCP for Java 8 2.4.x 와 Hibernate 사용 시 주의점</title><description>&lt;p&gt;아오!!!
HikariCP 2.3.x 사용하다가 2.4.x 로 Upgrade 하고나서 Connection 에러가 나는데, 원인을 못찾아서 헤메고 헤맸습니다&amp;hellip; ㅠ.ㅠ&lt;/p&gt;

&lt;p&gt;결국 제가 안쓴다고 생각한 설정을 Hibernate 이 충실히 가져다가 설정을 마구 해버려서 생긴 문제이긴 합니다만 &amp;hellip;&lt;/p&gt;

&lt;p&gt;왜 HikariCP 에서 이 부분을 Deprecated 시켰는지 &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; @Override
 public Connection getConnection(String username, String password) throws SQLException
 {
  throw new SQLFeatureNotSupportedException();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 떡 하니, 기존코드에서 SQLFeatureNotSupportedException 을 발생시키는 것으로 변경해 버렸습니다&amp;hellip;&lt;/p&gt;

&lt;p&gt;이건 뭐  HikariCP 의 문제는 아니구요&amp;hellip;&lt;/p&gt;

&lt;p&gt;제가 말이죠&amp;hellip; 그동안 Hibernate 를 Java config로 모두 설정하는데, hibernate-redis 라는 hibernate second level cache provider 를 만들면서 테스트를 only hibernate 로 하다보니 hibernate.properties 를 사용하고 있었다는 것입니다.&lt;/p&gt;

&lt;p&gt;hibernate.properties 에 떡하니 username, password 지정해줬거든요 ㅠ.ㅠ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# NOTE: 이상하게 HikariCP 사용 시 여기에 username 과 password 를 정의하면 예외가 발생합니다.
# NOTE: HikariCP 2.4 이상부터 username, password 로 Connection 을 생성하는 것에 예외를 발생시킵니다.
hibernate.connection.username=sa
hibernate.connection.password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 설정한 정보를 Hibernate 는 기본적으로 로딩해서 미리 설정해 버리니 &amp;hellip;   username 과 password 로 connection 을 얻도록 HikariCP 에 요청했던 것이고, HikariCP 는 예외를 던진 것이였네요 &amp;hellip;&lt;/p&gt;

&lt;p&gt;결국 hibernate.properties 에서 username, password 를 comments 로 막아버리니 제대로 동작합니다&amp;hellip;&lt;/p&gt;

&lt;p&gt;아오 ~~~~&lt;/p&gt;

&lt;p&gt;쓸데없는 정보는 미리미리 제거하는 게 답이네요&amp;hellip;.&lt;/p&gt;</description><link>https://debop.tumblr.com/post/139347053971</link><guid>https://debop.tumblr.com/post/139347053971</guid><pubDate>Mon, 15 Feb 2016 17:31:07 +0900</pubDate><category>HikariCP</category><category>Hibernate</category></item><item><title>SnappyDataInc/snappydata</title><description>&lt;a href="https://github.com/SnappyDataInc/snappydata"&gt;SnappyDataInc/snappydata&lt;/a&gt;</description><link>https://debop.tumblr.com/post/138919707131</link><guid>https://debop.tumblr.com/post/138919707131</guid><pubDate>Mon, 08 Feb 2016 20:24:26 +0900</pubDate></item><item><title>gs-collections 를 scala lambda expression 으로 사용하기</title><description>&lt;p&gt;gs-collections 는 골드만 삭스에서 제작한 java 용 collection 라이브러리입니다. 
기존 java 용 컬레션이나, scala 용 컬렉션보다 성능이 월등히 좋아 제가 애용하고 있습니다.&lt;/p&gt;

&lt;p&gt;특히 java8 용 lambda expression 을 지원하여, 다양한 collection 관련 메소드들을 적은 코드로 보기좋게 만들 수도 있습니다.&lt;/p&gt;

&lt;p&gt;다만, java 용 lambda expression만 가능하므로, scala 에서 사용하려면 어쩔 수 없이 기존 java 7 처럼 interface method 를 생성하여 처리해야 했습니다.&lt;/p&gt;

&lt;p&gt;즉 다음과 같이 interface method 를 재정의하여 사용하였습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val fastlist = FastList.newListWith[Int](1, 2, 3, 4, 5)

val collected = fastlist.collect(new Function[Int, Int] {
  override def valueOf(obj: Int): Int = obj * obj
})
collected should contain allOf(1, 4, 9, 16, 25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;결국 scala 에서 제공하는 함수는 사용도 못하는 것이지요&amp;hellip;
그래서 scala implicit 기능을 이용하여, scala 함수를 gs-collection 의 function interface 로 변환하는 코드를 미리 정의하여 사용하도록 했습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;implicit def functionToGsFunction[T, V](func: T =&amp;gt; V): Function[T, V] = {
  new Function[T, V] {
    override def valueOf(obj: T): V = func(obj)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 정의한 후, scala 의 lambda 식을 이용하여, gs-collection 을 사용하면&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val implicited = fastlist.collect((x: Int) =&amp;gt; x * x)
implicited should contain allOf(1, 4, 9, 16, 25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;흠 이렇게 하면 됩니다..&lt;/p&gt;

&lt;p&gt;gs-collection에서 제공하는 interface function 중 Reference Type은 8개 정도이고, primitive type 은 엄청 많습니다.&lt;/p&gt;

&lt;p&gt;gs-collections 를 사용하는 가장 큰 동기 중에 하나가 primitive type collection 을 아주 효율적으로 지원하기 때문인데, 관련해서 변환해야 할 함수가 너무 많은 것이 작업하는데 부담이 되기는 합니다. ㅎㅎ&lt;/p&gt;

&lt;p&gt;그래도 scala 의 generic 에는 @Specialized 라는 놈이 있어 그런 대로 좋은 성능을 낼 수 있으니 이 부분은 차후  성능 비교를 해 본 다음에 변환해보려고 합니다.&lt;/p&gt;</description><link>https://debop.tumblr.com/post/137467896211</link><guid>https://debop.tumblr.com/post/137467896211</guid><pubDate>Sun, 17 Jan 2016 17:25:27 +0900</pubDate><category>gs-collections</category><category>scala</category><category>lambda-expression</category></item><item><title>파이썬 역설 The Python Paradox</title><description>&lt;p&gt;&lt;a class="tumblr_blog" href="http://yisangwook.tumblr.com/post/135318004099" target="_blank"&gt;yisangwook&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;2004년 8월 Paul Graham 의 “The Python Paradox” 라는 제목의 글

&lt;ul&gt;&lt;li&gt;원문: &lt;a href="http://paulgraham.com/pypar.html" target="_blank"&gt;http://paulgraham.com/pypar.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;최근에 있었던 강연에서 나는 많은 사람들을 화나게하는 말을 했다:

&lt;ul&gt;&lt;li&gt;그것은 “Java 프로젝트로 일을 하는 것 보다, Python 프로젝트로 일하는 것이 더 smarter 한 프로그래머들을 get 할 수 있다&amp;quot;고 말한 것이다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Java 프로그래머들은 바보다” 라는 의미로 말한것이 아니었다.

&lt;ul&gt;&lt;li&gt;내 말은 Python 프로그래머들이 smart 하다는 의미였다.&lt;/li&gt;
&lt;li&gt;새로운 언어를 배우는 것은 많은 노력이 필요하다.&lt;/li&gt;
&lt;li&gt;그리고 사람들은 job 을 얻기위한 목적으로 Python 을 공부하지 않는다.&lt;/li&gt;
&lt;li&gt;그들은 순수하게 프로그래밍을 좋아하기 때문에, 그리고 이미 알고 있는 언어에 대한 불만족 때문에 Python 을 공부한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;회사가 고용해야 하는 프로그래머는 이러한 사람들이다.

&lt;ul&gt;&lt;li&gt;더 좋은 이름을 찾지 못해서 나는 이것을 “Python paradox” 라고 부르겠다.&lt;/li&gt;
&lt;li&gt;Python paradox:

&lt;ul&gt;&lt;li&gt;만약 회사가 소프트웨어를 만드는데 비교적 esoteric(소수만 이해할 수 있는, 난해한)한 언어를 사용하면, 그 회사는 더 좋은 프로그래머를 고용할 수 있다.&lt;/li&gt;
&lt;li&gt;왜냐하면 그러한 언어를 공부했을 정도로 열정적인 사람만 모이기 때문이다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;그리고 프로그래머에게는 이 역설이 더욱 선명하게 나타난다.

&lt;ul&gt;&lt;li&gt;좋은 job 을 얻기 위해 공부해야 하는 언어는, 사람들이 단지 job 을 얻기 위해 공부하는 언어가 아니어야 한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이러한 사실을 깨달을 정도로 smart 한 회사는 몇 개 없다.

&lt;ul&gt;&lt;li&gt;하지만 이곳에도 선택은 일어나고 있다.

&lt;ul&gt;&lt;li&gt;그리고 이러한 것을 아는 회사는 프로그래머가 가장 일하고 싶어하는 회사가 된다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;예를 들어, Google.&lt;/li&gt;
&lt;li&gt;그들은 Java programming jobs 의 채용공고를 낼때도 Python 경험을 원한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;내 친구 중 하나는 넓게 사용되는 대부분의 언어를 거의 모두 알고 있는데, 개인 프로젝트는 모두 Python 을 사용한다.

&lt;ul&gt;&lt;li&gt;그가 Python 을 좋아하는 가장 큰 이유는 소스 코드의 모양을 좋아하기 때문이라고 한다.&lt;/li&gt;
&lt;li&gt;이것은 언어를 선택하는데 경솔한 이유로 보일지 모른다.&lt;/li&gt;
&lt;li&gt;하지만 그렇게 경솔하지도 않다:

&lt;ul&gt;&lt;li&gt;당신이 프로그래밍을 할 때, 당신은 대부분의 시간을 코드 작성 보다 코드 읽는데 쓴다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;당신은 조각가가 clay 의 blobs 을 push 하는 것 처럼, 소스코드의 blobs 를 push 한다.&lt;/li&gt;
&lt;li&gt;그래서 조각가가 clay full of lumps 를 질색하는 것 처럼, ugly 한 소스코드를 만드는 언어는 exacting 한 프로그래머를 미치게한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ugly 한 소스코드 언급을 보고 사람들은 Perl 을 생각할 것이다.

&lt;ul&gt;&lt;li&gt;하지만 Perl 의 외견상의 ugliness 는 내가 말하는 그 의미가 아니다.&lt;/li&gt;
&lt;li&gt;Real ugliness 는 거칠어 보이는 문법(harsh-looking syntax)이 아니라, 잘못된 개념으로 프로그램을 build 해야함에 있다.&lt;/li&gt;
&lt;li&gt;Perl 은 만화캐릭터가 욕을 하는 것 처럼 보이지만($!@#%!!), 개념적으로 Python 보다 더 나은 부분이 있다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;아직까진 그렇단 얘기다.

&lt;ul&gt;&lt;li&gt;두 언어 모두 움직이고 있다.&lt;/li&gt;
&lt;li&gt;중요한 것은 Python, Perl, Ruby (and Icon, and Joy, and J, and Lisp, and Smalltalk) 모두 프로그래밍을 정말 좋아하는 사람들이 만들었고, 사용되고 있다는 점이다.&lt;/li&gt;
&lt;li&gt;그리고 그러한 사람들이 더 잘 하는 경향이 있다는 점이다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;내 생각&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;이 글은 2004년 당시의 글이고, 지금의 Python 은 당시와 많이 다르다.&lt;/li&gt;
&lt;li&gt;내가 아주 좋아하는 글이지만, 오랜만에 이 글을 다시 보고 옮긴 이유는 사실은 무엇인가를 홍보하기 위함이다.&lt;/li&gt;
&lt;li&gt;좋아하는 국회의원에게 10만원을 후원하면 연말정산때 돌려 받는다는 사실을 알리고 싶었다. (정확히는 세액공제 됨)

&lt;ul&gt;&lt;li&gt;아래의 선관위 사이트에서 선호하는 당을 선택해서 찾기를 누르면 국회의원이 모두 나오고 골라서 후원하면 된다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.give.go.kr/portalnew/donation/donation_sup.jsp" target="_blank"&gt;https://www.give.go.kr/portalnew/donation/donation_sup.jsp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;사실은 정치와 사회 문제에 관심이 많아서 내가 할 수 있는 일이 없을까 고민했던 적이 많았지만.&lt;/li&gt;
&lt;li&gt;최근 몇년간 무력감을 느끼고, 할 수 있는게 거의 없다는 생각이 들었다.&lt;/li&gt;
&lt;li&gt;왜냐하면 선거제도가 가장 문제인데.

&lt;ul&gt;&lt;li&gt;정당 지지율이 10% 라면 10%의 국회 의석을 차지해야 정상이다.&lt;/li&gt;
&lt;li&gt;하지만 지역구의 1등만 뽑히는 소선거구제, 단순다수제 에서는 거대정당이 지지율 이상의 의석을 차지하는 구조이다.

&lt;ul&gt;&lt;li&gt;비례대표가 일부 보완하고 있지만 비율이 낮다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;그리고 이 선거제도의 수혜자(여당이든 제1야당이든 모두 수혜자다)가 선거제도를 만드는 한 &lt;/li&gt;
&lt;li&gt;이 선거제도를 고칠 동기는 지지율 보다 적은 의석을 차지하는 제3당 밖에 없다.&lt;/li&gt;
&lt;li&gt;동기가 없으면 선거제도는 바뀌기 어렵고,&lt;/li&gt;
&lt;li&gt;선거제도가 바뀌지 않으면 아마 변화는 힘들 것이다. (아마 안 될꺼야…)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;그래도 이 글로 1명이라도 더 후원을 하고, 자본을 기반으로 조금 더 내 자식 세대가 살기 좋은 나라가 되었으면 좋겠다.

&lt;ul&gt;&lt;li&gt;(10만원 까지는 전액 세액공제가 되니 부담도 없다.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;

&lt;p&gt;Python 보다 Scala 가 더 맞지 않을까 하는 &amp;hellip;&lt;/p&gt;</description><link>https://debop.tumblr.com/post/135912793251</link><guid>https://debop.tumblr.com/post/135912793251</guid><pubDate>Sat, 26 Dec 2015 00:45:02 +0900</pubDate></item><item><title>Nexus 사용하기</title><description>&lt;h1&gt;Nexus에 라이브러리 배포하기&lt;/h1&gt;

&lt;h2&gt;1. Nexus 설치&lt;/h2&gt;

&lt;p&gt;회사의 nexus 에 배포하기 위해서는 nexus를 다운 받아 설치해야 한다.&lt;/p&gt;

&lt;p&gt;mac 에서는 &lt;code&gt;brew install nexus&lt;/code&gt; 로 간단히 설치할 수 있고, Linux 에서는 &lt;a href="http://lesstif.com/pages/viewpage.action?pageId=13631508" target="_blank"&gt;Sonatype Nexus 설치 및 설정&lt;/a&gt; 을 참고하면 된다.&lt;/p&gt;

&lt;h3&gt;1.1 Nexus 환경 설정&lt;/h3&gt;

&lt;h5&gt;참고 : &lt;a href="http://stove99.tistory.com/75" target="_blank"&gt;Sonatype Nexus 설정 및 maven 연결하기&lt;/a&gt;&lt;/h5&gt;

&lt;ol&gt;&lt;li&gt;Nexus 설치 후 브라우저에서 &lt;a href="http://127.0.0.1:8081/nexus" target="_blank"&gt;http://127.0.0.1:8081/nexus&lt;/a&gt; 에 들어가서 admin 으로 로그인 한다. (id: admin, pwd: admin123) ** 보안을 위해 비밀번호를 변경하는 것을 추천합니다 **&lt;/li&gt;
&lt;li&gt;좌측 메뉴으ㅔ서 Repositories 를 선택 -&amp;gt; 메인화면 상단의 &amp;ldquo;Public Repositories&amp;rdquo; 선택 -&amp;gt; 하단의 Configuration Tab 선택 -&amp;gt; Ordered Group Repositories 에 &amp;ldquo;Central&amp;rdquo;, &amp;ldquo;Releases&amp;rdquo;, &amp;ldquo;Snapshots&amp;rdquo; 이 있도록 선택한다.&lt;/li&gt;
&lt;li&gt;상단 &amp;ldquo;Cental&amp;rdquo; Repository 를 선택한 후, 하단 &amp;ldquo;Configuration&amp;rdquo; 탭을 선택한다. 아래 설정 중 &amp;ldquo;Download Remote Indexes&amp;rdquo; 를 False 에서 True 로 변경한 후 저장한다.&lt;/li&gt;
&lt;li&gt;좌측 메뉴 &amp;ldquo;Administration&amp;rdquo; &amp;gt; &amp;ldquo;Scheduled Tasks&amp;rdquo; 를 선택하면, Remote Index 를 다운받는 Task 가 실행되고 있을 것이다. (완료까지 10여분이 걸린다.)&lt;/li&gt;
&lt;li&gt;Repositories 중 Public Repositories 를 선택한 후 하단 &amp;ldquo;Browse Index&amp;rdquo; 탭을 선택하고, Refresh를 해보면, Remote 서버에 있는 파일들의 index 들을 보여준다. (실제 파일들을 다운받는 것은 아니다)&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;2. Nexus Repository 사용하기&lt;/h2&gt;

&lt;p&gt;설치된 Repository 를 사용하면, Remote에 접근할 필요없이 빠르게 사용할 수 있다.&lt;/p&gt;

&lt;h3&gt;2.1 Maven에서 사용하기&lt;/h3&gt;

&lt;p&gt;maven 프로젝트의 pom.xml 에 다음과 같이 repositories 를 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;repositories&amp;gt;
    &amp;lt;repository&amp;gt;
      &amp;lt;id&amp;gt;shbae repo&amp;lt;/id&amp;gt;
      &amp;lt;url&amp;gt;http://127.0.0.1:8081/nexus/content/groups/public&amp;lt;/url&amp;gt;
      &amp;lt;releases&amp;gt;
        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
      &amp;lt;/releases&amp;gt;
      &amp;lt;snapshots&amp;gt;
        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
      &amp;lt;/snapshots&amp;gt;
    &amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;local repository (.m2/repository) 에 다운받지 않은 라이브러리인 경우 nexus 에서 다운받아 제공하게 된다.
Nuxus 웹에서 &amp;ldquo;Public Repositories&amp;rdquo; 를 선택하고, &amp;ldquo;Browse Storage&amp;rdquo; 탭을 선택하면, 새롭게 다운받은 라이브러리를 볼 수 있다.&lt;/p&gt;

&lt;h3&gt;2.2 sbt에서 사용하기&lt;/h3&gt;

&lt;p&gt;sbt 에는 resolvers 에 로컬 nexus 를 추가하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val localNexus = "Local Nexus" at "http://127.0.0.1:8081/nexus/content/groups/public"
val customResolvers = Seq(
    localNexus,
    Resolver.mavenLocal,
    Resolver.sonatypeRepo("releases"),
    Resolver.sonatypeRepo("snapshots")
)

resolvers ++= CustomResolvers.customResolvers

&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;3 배포&lt;/h2&gt;

&lt;p&gt;다음은 자신이 만든 프로젝트의 결과물을 회사 Nexus 에 배포하는 방법에 대해 설명합니다. 배포할 때에는 계정정보 (Credentials)가 필요합니다. Nexus admin 계정을 사용할 수도 있지만 되도록 deploy 전용 계정을 사용하는 것이 좋습니다.&lt;/p&gt;

&lt;h3&gt;3.1 Maven으로 배포하기&lt;/h3&gt;

&lt;p&gt;maven에서 배포하기 위해서는 pom.xml 에 distributionManagement element 를 project 바로 밑에 정의합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;project&amp;gt;
    ...
  &amp;lt;distributionManagement&amp;gt;
    &amp;lt;repository&amp;gt;
      &amp;lt;id&amp;gt;Local.Repo&amp;lt;/id&amp;gt;
      &amp;lt;name&amp;gt;Local Release Repository&amp;lt;/name&amp;gt;
      &amp;lt;url&amp;gt;http://127.0.0.1:8081/nexus/content/repositories/releases&amp;lt;/url&amp;gt;
    &amp;lt;/repository&amp;gt;
    &amp;lt;snapshotRepository&amp;gt;
      &amp;lt;id&amp;gt;Local.Repo.Snapshot&amp;lt;/id&amp;gt;
      &amp;lt;name&amp;gt;Local Snapshot Repository&amp;lt;/name&amp;gt;
      &amp;lt;url&amp;gt;http://127.0.0.1:8081/nexus/content/repositories/snapshots&amp;lt;/url&amp;gt;
    &amp;lt;/snapshotRepository&amp;gt;
  &amp;lt;/distributionManagement&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다음으로는 project/build/plugins 에 배포를 위한 plugin 을 정의합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;project&amp;gt;
  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-deploy-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;inherited&amp;gt;false&amp;lt;/inherited&amp;gt;
      &amp;lt;/plugin&amp;gt;
      ...
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;마지막으로 ~/.m2/ 폴더에 nuxus 로그인 계정을 정의해야 합니다. ~/.m2/settings.xml 파일을 만들고, 로그인 정보를 작성합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      &lt;a href="http://maven.apache.org/xsd/settings-1.0.0.xsd" target="_blank"&gt;http://maven.apache.org/xsd/settings-1.0.0.xsd&lt;/a&gt;"&amp;gt;
  &amp;lt;servers&amp;gt;
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;Local.Repo&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;deployer&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;deployer_password&amp;lt;/password&amp;gt;
    &amp;lt;/server&amp;gt;
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;Local.Repo.Snapshot&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;deployer&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;deployer_password&amp;lt;/password&amp;gt;
    &amp;lt;/server&amp;gt;
  &amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pom의 distributionManagement repository 의 Id와 settings.xml의 server Id 가 일치해야 제대로 배포가 됩니다.&lt;/p&gt;

&lt;p&gt;설정이 다 되었으면 &lt;code&gt;mvn deploy&lt;/code&gt; 를 실해하면, 버전에 &lt;code&gt;SNAPSHOT&lt;/code&gt;이 있으면 snapshots 에 배포되고, 없으면 &lt;code&gt;releases&lt;/code&gt;에 배포됩니다.&lt;/p&gt;

&lt;p&gt;배포 되었는지 확인을 위해, Nexus 웹에서 &lt;code&gt;Snapshots&lt;/code&gt; Repository를 선택하고, 하단의 &lt;code&gt;Browse Storage&lt;/code&gt; 탭을 선택하여 Refresh를 수행하고, 목록을 보시기 바랍니다. 제대로 배포가 되었다면 관련 jar 등이 배포가 되었을 것입니다.&lt;/p&gt;

&lt;h3&gt;3.2 sbt 로 배포하기&lt;/h3&gt;

&lt;p&gt;sbt로 배포하기 위해서는 &lt;a href="http://www.scala-sbt.org/0.13/docs/Publishing.html" target="_blank"&gt;sbt 배포 (sbt 공식사이트)&lt;/a&gt;를 참고하면 쉽습니다.
다만 보안과 관련된 부분에 대해서만 조금 조심하면 됩니다.&lt;/p&gt;

&lt;h5&gt;PublishTo 정의&lt;/h5&gt;

&lt;p&gt;우선 sbt 에서 배포하기 위해서는 settings 항목에 publishTo 를 지정해 주어야 합니다. 프로젝트의 버전에 SNAPSHOT이 붙어있으면, snapshots repository로 아니면 release repository 로 지정하도록 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  publishTo &amp;lt;&amp;lt;= version { v: String =&amp;gt; getMavenRepository(v) }


  def getMavenRepository(v: String): Some[MavenRepository] = {
    val nexus = "http://127.0.0.1:8081/nexus/"
    if (v.trim.endsWith("SNAPSHOT"))
      Some("Local Snapshots" at nexus + "content/repositories/snapshots/")
    else
      Some("Local Releases" at nexus + "content/repositories/releases/")
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Credentials&lt;/h5&gt;

&lt;p&gt;nexus 에 접근하기 위한 계정 정보를 정의해야 하는데, 프로젝트 내에 정의하게 되면 보안 유출 문제가 발생할 소지가 있습니다.
이를 방지하기 위해 ~/.sbt/0.13/sonatype.sbt 파일을 만들고, 계정 정보를 입력하면, sbt 가 publish 시에 자동으로 이 파일을 읽어들여 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.sbt/0.13/sonatype.sbt&lt;/code&gt; 파일 내용&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;credentials += Credentials("Sonatype Nexus Repository Manager", "127.0.0.1", username, password)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;로 정의하면 됩니다. &lt;strong&gt;이때 &lt;code&gt;"Sonatype Nexus Repository Manager"&lt;/code&gt; 명칭은 변경하면 안되고, Nexus 설치 서버도 port 명 없이 IP만 지정해야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;Modify the generated POM&lt;/h5&gt;

&lt;p&gt;sbt 명령어 중 &lt;code&gt;publishM2&lt;/code&gt; 를 이용하여 local maven repository 에 배포할 수 있고, &lt;code&gt;publishLocal&lt;/code&gt;을 통해 local ivy2 repository 애 배포하게 됩니다. 위의 nexus 서버에 배포하기 위해서는 &lt;code&gt;publish&lt;/code&gt; 나 &lt;code&gt;+publish&lt;/code&gt; 를 수행하면 됩니다.&lt;/p&gt;

&lt;p&gt;여기서 maven style 로 pom 을 생성하기 위해서는 sbt의 settings 에 다음과 같이 정보를 추가로 설정하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    scalacOptions in Test ++= Seq("-Yrangepos"),
    publishMavenStyle := true,
    publishArtifact in Test := false,
    pomIncludeRepository := { _ =&amp;gt; false },
    pomExtra :=
      &amp;lt;url&amp;gt;https://github.com/debop/debop4s&amp;lt;/url&amp;gt;
      &amp;lt;scm&amp;gt;
        &amp;lt;url&amp;gt;git@github.com:debop/debop4s.git&amp;lt;/url&amp;gt;
        &amp;lt;connection&amp;gt;scm:git:git@github.com:debop/debop4s.git&amp;lt;/connection&amp;gt;
      &amp;lt;/scm&amp;gt;
        &amp;lt;developers&amp;gt;
          &amp;lt;developer&amp;gt;
            &amp;lt;id&amp;gt;debop&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Sunghyouk Bae&amp;lt;/name&amp;gt;
            &amp;lt;url&amp;gt;http://debop.tumblr.com&amp;lt;/url&amp;gt;
          &amp;lt;/developer&amp;gt;
        &amp;lt;/developers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pomExtra 에 프로젝트와 관련된 부가 정보를 지정해주면 됩니다.&lt;/p&gt;</description><link>https://debop.tumblr.com/post/123533386696</link><guid>https://debop.tumblr.com/post/123533386696</guid><pubDate>Wed, 08 Jul 2015 16:14:05 +0900</pubDate><category>Nexus maven sbt deploy</category></item><item><title>Generic OPTIONS HTTP Method Handling With akka-http</title><description>&lt;p&gt;&lt;a href="http://hacking-scala.org/post/122084354623/generic-options-http-method-handling-with" class="tumblr_blog" target="_blank"&gt;hacking-scala&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
  &lt;p&gt;The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style="text-align: right"&gt;— &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.2" target="_blank"&gt;HTTP/1.1 Spec&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Sounds like pretty helpful HTTP method to use and implement, especially for the REST API. Unfortunately, not many people decide implement it for
their own API. I think partly we should thank for this our web frameworks and libraries. In past I tried to implement generic &lt;code&gt;OPTIONS&lt;/code&gt; method
handler in many different frameworks (like &lt;a href="https://www.playframework.com/" target="_blank"&gt;Play&lt;/a&gt;, &lt;a href="http://unfiltered.databinder.net/Unfiltered.html" target="_blank"&gt;Unfiltered&lt;/a&gt;
or some java frameworks), but unfortunately my experience was very frustrating to say the least (I really don’t want to write this logic manually for every single resource in my API). In most cases you ether required to use reflection
or speculatively try all methods against routing black box in order to find out which HTTP methods are handled and which are not.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://doc.akka.io/docs/akka-stream-and-http-experimental/current/scala.html" target="_blank"&gt;akka-http&lt;/a&gt; is the first HTTP library in my experience that
provides right set of abstractions for this problem. I was able to implement &lt;code&gt;Options&lt;/code&gt; handler with it in very natural way and in just few lines
of code, so without further ado let me show you how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://hacking-scala.org/post/122084354623/generic-options-http-method-handling-with" target="_blank"&gt;더 보기&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><link>https://debop.tumblr.com/post/122395672911</link><guid>https://debop.tumblr.com/post/122395672911</guid><pubDate>Thu, 25 Jun 2015 13:41:23 +0900</pubDate><category>Akka</category><category>akka-http</category></item><item><title>Popular Modules - AngularJS Modules, Plugins and Directives</title><description>&lt;a href="http://ngmodules.org/"&gt;Popular Modules - AngularJS Modules, Plugins and Directives&lt;/a&gt;: &lt;p&gt;AngularJS Module Repository&lt;/p&gt;</description><link>https://debop.tumblr.com/post/119936474301</link><guid>https://debop.tumblr.com/post/119936474301</guid><pubDate>Tue, 26 May 2015 22:37:01 +0900</pubDate><category>AngularJS</category></item><item><title>AngularStrap</title><description>&lt;a href="http://mgcrea.github.io/angular-strap/"&gt;AngularStrap&lt;/a&gt;: &lt;p&gt;AngularJS 1.2+ 와 Bootstrap 3 을 통합해서 사용할 수 있는 라이브러리&lt;/p&gt;</description><link>https://debop.tumblr.com/post/119936215821</link><guid>https://debop.tumblr.com/post/119936215821</guid><pubDate>Tue, 26 May 2015 22:31:54 +0900</pubDate><category>AngularJS</category><category>Bootstrap</category></item><item><title>Reactor Guide</title><description>&lt;a href="http://projectreactor.io/docs/reference/"&gt;Reactor Guide&lt;/a&gt;: &lt;p&gt;Reactor is a foundational library for building demanding, realtime Data-Streaming applications and micro, nano, or pico-services that must exhibit Low-Latency and be Fault-Tolerance.&lt;/p&gt;

&lt;p&gt;Play + Akka + Akka Streams, Vert.x 등에서 영감을 얻어 만든 Reactive Programming 용 Framework&lt;/p&gt;</description><link>https://debop.tumblr.com/post/119635690501</link><guid>https://debop.tumblr.com/post/119635690501</guid><pubDate>Sat, 23 May 2015 08:16:11 +0900</pubDate><category>Reactor</category><category>Reactive Programming</category></item><item><title>Docker 로 Heroku 에 배포하기</title><description>&lt;a href="http://yisangwook.tumblr.com/post/118418331034/docker-heroku"&gt;Docker 로 Heroku 에 배포하기&lt;/a&gt;: &lt;p&gt;&lt;a href="http://yisangwook.tumblr.com/post/118418331034/docker-heroku" class="tumblr_blog" target="_blank"&gt;yisangwook&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;figure class="tmblr-full" data-orig-height="324" data-orig-width="540" data-orig-src="https://66.media.tumblr.com/7125e6bbea1a644561eead81097e3518/tumblr_inline_no0iu5Ur9j1r7z9vf_540.jpg"&gt;&lt;img src="https://66.media.tumblr.com/08f80f9c9d859a5439c20bde31a0bd45/tumblr_inline_p8buozTfbb1s6jr0z_540.jpg" alt="" data-orig-height="324" data-orig-width="540" data-orig-src="https://66.media.tumblr.com/7125e6bbea1a644561eead81097e3518/tumblr_inline_no0iu5Ur9j1r7z9vf_540.jpg"/&gt;&lt;/figure&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;며칠 전 5월 5일, 유명 PaaS 인 Heroku 가 Docker 로 배포하는 도구를 발표했다. [1]&lt;/li&gt;
&lt;li&gt;요즘 회사에서, 사내 개발자들을 위한 PaaS (Heroku 또는 AWS Beanstalk 와 비슷) 를 만들고 있고, Docker 에도 관심이 많기 때문에 한 번 살펴봤다. &lt;ul&gt;&lt;li&gt;(내가 안 하면 아무도 안 해줄것 같기도 하고)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;살펴본 결론은: &lt;ul&gt;&lt;li&gt;아무 Docker 이미지나 Heroku 에 올려서 돌릴 수 있는건 아니다. &lt;ul&gt;&lt;li&gt;Heroku 가 자동으로 만들어 주는 Dockerfile 을 사용하거나.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;</description><link>https://debop.tumblr.com/post/118690042956</link><guid>https://debop.tumblr.com/post/118690042956</guid><pubDate>Mon, 11 May 2015 20:53:30 +0900</pubDate></item><item><title>Connecting People With Knowledge</title><description>&lt;a href="https://www.kifi.com/"&gt;Connecting People With Knowledge&lt;/a&gt;: &lt;p&gt;Pinterest 가 사진 위주의 저장 정보라면, Kifi 는 웹 페이지를 분류별로 저장하고, SNS 처럼 following 할 수 있는 서비스입니다.&lt;/p&gt;

&lt;p&gt;기존 Pocket 의 SNS 버전이라 보시면 될 듯&lt;/p&gt;</description><link>https://debop.tumblr.com/post/118671024106</link><guid>https://debop.tumblr.com/post/118671024106</guid><pubDate>Mon, 11 May 2015 13:20:20 +0900</pubDate><category>kifi</category><category>developer</category><category>scala</category></item><item><title>Visualizing back pressure and reactive streams with akka-streams, statsd, grafana</title><description>&lt;p&gt;&lt;a href="http://letitcrash.com/post/117696662422/visualizing-back-pressure-and-reactive-streams" class="tumblr_blog" target="_blank"&gt;hakkers&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A &lt;a href="http://www.smartjava.org/content/visualizing-back-pressure-and-reactive-streams-akka-streams-statsd-grafana-and-influxdb" target="_blank"&gt;blog post&lt;/a&gt; by &lt;a href="https://twitter.com/josdirksen" target="_blank"&gt;@josdirksen&lt;/a&gt; on visualizing backpressure while processing data using akka-streams.&lt;/p&gt;&lt;/blockquote&gt;</description><link>https://debop.tumblr.com/post/118342564566</link><guid>https://debop.tumblr.com/post/118342564566</guid><pubDate>Thu, 07 May 2015 13:49:56 +0900</pubDate></item><item><title>Comparison of Scala Observable and Java Observable</title><description>&lt;a href="http://reactivex.io/rxscala/comparison.html"&gt;Comparison of Scala Observable and Java Observable&lt;/a&gt;: &lt;p&gt;RxJava 와 RxScala 의 Observable 비교.
.NET 용 RxExtensions 를 4년 전쯤에 사용했었는데, 늦은 감이 있지만 …&lt;/p&gt;</description><link>https://debop.tumblr.com/post/116693889291</link><guid>https://debop.tumblr.com/post/116693889291</guid><pubDate>Sat, 18 Apr 2015 11:55:03 +0900</pubDate></item></channel></rss>
