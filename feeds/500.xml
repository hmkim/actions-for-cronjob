<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gracefullight Blog</title>
    <link>https://gracefullight.dev/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>풀스택 개발자를 꿈꾸며</description>
    <pubDate>Wed, 08 May 2019 16:03:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>DEV 도메인과 Github Pages 연결하기</title>
      <link>https://gracefullight.dev/2019/05/06/connecting-a-DEV-domain-to-github-pages/</link>
      <guid>https://gracefullight.dev/2019/05/06/connecting-a-DEV-domain-to-github-pages/</guid>
      <pubDate>Mon, 06 May 2019 15:10:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;도메인-구입&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#도메인-구입&quot;&gt;&lt;/a&gt; 도메인 구입&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://domains.google.com/m/registrar/search&quot; rel=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="도메인-구입"><a class="markdownIt-Anchor" href="#도메인-구입"></a> 도메인 구입</h1><p><a href="https://domains.google.com/m/registrar/search" rel="external nofollow noopener noreferrer" target="_blank">Google Domains</a> 에서 구입한다.</p><ul><li>미국 주소가 있어야된다는 말이 나오는데, 무시하고 구매하기를 하자.</li><li>도메인 기관에서 연락이 갈 수 있다는 내용에 주소를 대한민국으로 변경 후 입력해주고</li><li>결제지 우편번호는 대충 쓰고 미국으로 하고 넘어가면 쉽게 구매할 수 있다.</li></ul><h1 id="dns-설정"><a class="markdownIt-Anchor" href="#dns-설정"></a> DNS 설정</h1><p><strong>DNS &gt; 맞춤 리소스 레코드</strong> 탭에서 Github Domain IP 를 A 레코드로 추가한다.</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><h2 id="http-예외"><a class="markdownIt-Anchor" href="#http-예외"></a> http 예외</h2><p>http 로 서빙하는 경우가 있다면 www.gracefullight.dev 도 사용할 수 있게 CNAME 을 등록하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www CNAME 1h gracefullight.github.io.</span><br></pre></td></tr></table></figure><p>물론 HSTS 를 적용하는 경우 필요없다.</p><h2 id="cname-파일-추가"><a class="markdownIt-Anchor" href="#cname-파일-추가"></a> CNAME 파일 추가</h2><p>public 경로 아래 CNAME 파일을 생성 후 도메인을 적는다.</p><figure class="highlight plain"><figcaption><span>CNAME</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gracefullight.dev</span><br></pre></td></tr></table></figure><h1 id="github-pages-설정"><a class="markdownIt-Anchor" href="#github-pages-설정"></a> github pages 설정</h1><p><a href="http://github.com/gracefullight/gracefullight.github.io/settings" rel="external nofollow noopener noreferrer" target="_blank">github.com/gracefullight/gracefullight.github.io/settings</a> 의 <strong>GitHub Pages</strong> 탭으로 이동해<br><strong>Custom domain</strong> 에 설정할 도메인을 넣고, <strong>Enforce HTTPS</strong> 를 체크한다.</p><p>아래 문구가 보이면 성공한 것이다.</p><blockquote><p>Your site is published at <a href="https://gracefullight.dev/">https://gracefullight.dev/</a></p></blockquote><h1 id="웹마스터-설정"><a class="markdownIt-Anchor" href="#웹마스터-설정"></a> 웹마스터 설정</h1><h2 id="google"><a class="markdownIt-Anchor" href="#google"></a> Google</h2><p>구글 검색에서 도메인 변경을 다시 인덱싱해주기 위해 마이그레이션이 필요하다.<br>새로운 사이트를 등록해 준 뒤 이전 버전의 서치콘솔에서 기존 사이트의 설정버튼을 누르면 바로 설정이 가능하다.</p><p><img src="https://i.imgur.com/ao5p5uZ.png" alt="주소 변경"></p><h2 id="기타"><a class="markdownIt-Anchor" href="#기타"></a> 기타</h2><p>네이버와 빙은 같은 site verification 코드가 나와서 사이트만 추가해주면 되는데,<br>얀덱스의 경우는 코드를 변경하고 빌드해줘야한다.</p><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>CNAME 변경하면 Github setting의 Custom domain이 빠지기 때문에 다시 등록해줘야하는 번거로움이 있다.</li><li>애널리틱스는 도메인만 바꿔주면 바로 연동된다.</li><li>애드센스가 도메인 승인이 2주가 걸려서 그전까진 애드-프리 사이트가 될 듯하다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/05/06/connecting-a-DEV-domain-to-github-pages/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS의 모든 것</title>
      <link>https://gracefullight.dev/2019/04/30/RxJS%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</link>
      <guid>https://gracefullight.dev/2019/04/30/RxJS%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</guid>
      <pubDate>Tue, 30 Apr 2019 05:12:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;rxjs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rxjs&quot;&gt;&lt;/a&gt; RxJS&lt;/h1&gt;&lt;p&gt;리액티브 프로그래밍은 개인적으로 비동기 프로그래밍과 함수형 프로그래밍의 종착지라고 생각한다.&lt;br&gt;&lt;a href=&quot;htt
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="rxjs"><a class="markdownIt-Anchor" href="#rxjs"></a> RxJS</h1><p>리액티브 프로그래밍은 개인적으로 비동기 프로그래밍과 함수형 프로그래밍의 종착지라고 생각한다.<br><a href="https://github.com/tc39/proposal-observable" rel="external nofollow noopener noreferrer" target="_blank">Stage1 Draft</a>로 제안되어 더 이상 피할 수 없는 <strong>Observable</strong> 을 알아보자.</p><h2 id="정의"><a class="markdownIt-Anchor" href="#정의"></a> 정의</h2><p><a href="https://en.wikipedia.org/wiki/Reactive_programming" rel="external nofollow noopener noreferrer" target="_blank">위키피디아</a>에선 다음과 같이 정의되어있다.</p><blockquote><p>reactive programming is a declarative programming paradigm concerned with data streams and the propagation of change.<br>데이터 스트림과 변화의 전파에 중점을 둔 프로그래밍 패러다임</p></blockquote><p>2011년 태초에 RX 의 개념을 만든 MS 문서에서는 <a href="https://docs.microsoft.com/en-us/previous-versions/dotnet/reactive-extensions/hh242985(v=vs.103)" rel="external nofollow noopener noreferrer" target="_blank"><strong>Reactive eXtensions</strong></a> 다음과 같다.</p><blockquote><p>Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators.<br>옵져버블 시퀀스와 링큐 쿼리 연산자를 사용하는 비동기, 이벤트 기반 프로그래밍 라이브러리</p></blockquote><p>조금 더 디테일하게 말하면 데이터스트림을 Pulling 방식의 이터레이터 패턴인 <code>IEnumerable&lt;T&gt;/IEnumerator&lt;T&gt;</code> 로 만들어 Pushing 방식의 옵저버 패턴인 <code>IObservable&lt;T&gt;/IObserver&lt;T&gt;</code>로 전파/구독하는 것이다.</p><p>Rx를 모두 이해한 뒤 이 정의를 보면 어쩜 이렇게 깔끔하게 한 줄로 이 내용을 다 담았을까? 란 생각이 드는데, 처음보는 입장에선 <em>비동기인 건 알겠네</em> 정도로만 이해가 되는 듯하다.<br>어려운 게 당연하다. 멀티쓰레드 프로그래밍을 처음 배울 때의 감정을 생각해보자.</p><h2 id="용어"><a class="markdownIt-Anchor" href="#용어"></a> 용어</h2><ul><li>비동기 프로그래밍: 이 문서를 볼 정도면 설명이 필요 없을 것 같다.</li><li>함수형 프로그래밍: 함수를 FirstClass 로 취급해 파라미터, 리턴, 변수에 할당 가능하며 함수 합성이 가능하고 원하는 시점에 호출이 쉽다.</li><li>데이터스트림: file stream, event stream, http stream 의 친구로 data 식 표현</li><li>이터레이터: 설명 필요 없을 듯.</li><li>옵져버: 디자인패턴 책의 옵져버패턴 단원 참조, 자바스크립트에선 이미 이벤트리스너가 옵져버 패턴이다.</li><li>옵져버블: 특정 객체를 관찰하는 옵저버에게 여러 이벤트나 값을 전파하는 역할</li><li>풀: 데이터를 받을지 결정</li><li>푸쉬: 데이터를 보낼지 결정</li><li>싱글: 하나의 값이나 이벤트를 다룸</li><li>멀티플: 여러 개의 값이나 이벤트를 다룸</li></ul><p>이 모든 용어를 하나의 표로 정리하면 다음과 같다.</p><table><thead><tr><th></th><th>싱글</th><th>멀티플</th></tr></thead><tbody><tr><td>풀</td><td>함수</td><td>이터레이터</td></tr><tr><td>푸쉬</td><td>프로미스</td><td>옵져버블</td></tr></tbody></table><h2 id="패턴"><a class="markdownIt-Anchor" href="#패턴"></a> 패턴</h2><ul><li>옵져버블의 변수 스타일은 이름 뒤에 <code>const click$</code> 처럼 <code>$</code>을 뒤에 붙혀주는게 정형화되어있다.</li><li><code>subscribe</code> 는 <code>next, error, complete</code>를 파라미터로 받는다.</li></ul><h2 id="마블-다이어그램"><a class="markdownIt-Anchor" href="#마블-다이어그램"></a> 마블 다이어그램</h2><p>마블 다이어그램은 연산자를 쉽게 이해하기 위해, 옵져버블을 테스트하기위해 도식화된 다이어그램이다.<br>타이밍과 값의 변화를 한 눈에 파악할 수 있다.</p><p><img src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/map.png" alt="map"></p><ul><li>위에 줄은 input 이고 연산자를 만나고나면 아래 줄에서 output 이 어떻게 바뀌는지 보여진다.</li><li>가로 줄은 하나의 옵져버블이다.</li><li>줄의 | 파이프는 구독 완료를 나타낸다.</li></ul><h1 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h1><h2 id="생성"><a class="markdownIt-Anchor" href="#생성"></a> 생성</h2><p>가장 간단한 옵져버블을 만들고 확인해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Observable &#125; = <span class="built_in">require</span>(<span class="string">'rxjs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test$ = Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'create'</span>);</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test$.subscribe(</span><br><span class="line">  item =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'complete'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">complete</span></span><br><span class="line"><span class="comment">done</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>간단하지만 이터레이터이면서 구독가능하다는 걸 확인할 수 있다.</p><h2 id="구독해제"><a class="markdownIt-Anchor" href="#구독해제"></a> 구독해제</h2><p>옵져버블의 리턴함수로 구독해제 콜백을 지원한다, 콜백이 필요하지 않다면 <code>unsubscribe()</code> 를 호출해주기만 하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test$ = Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subscription = test$.subscribe();</span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><h2 id="파이퍼블-연산자"><a class="markdownIt-Anchor" href="#파이퍼블-연산자"></a> 파이퍼블 연산자</h2><p>Pipeable 연산자는 옵져버블 인스턴스를 pipe 함수 안에서 다룰 수 있는 연산자이다.<br>기본적으로 <strong>rxjs/operators</strong> 라이브러리 안에 들어있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; map &#125; = <span class="built_in">require</span>(<span class="string">'rxjs/operators'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test$ = Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test$.pipe(</span><br><span class="line">  map(<span class="function"><span class="params">value</span> =&gt;</span> value * <span class="number">2</span>)</span><br><span class="line">).subscribe(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>소스 옵져버블에서 발행된 값을 원하는대로 바꿀 수 있다.</p><h2 id="연산자"><a class="markdownIt-Anchor" href="#연산자"></a> 연산자</h2><h3 id="of"><a class="markdownIt-Anchor" href="#of"></a> of</h3><p>args 순서대로 값을 반환한다.</p><h3 id="from"><a class="markdownIt-Anchor" href="#from"></a> from</h3><ul><li>Observable</li><li>Array</li><li>Promise</li><li>Iterable</li><li>String</li><li>ArrayLike</li></ul><p>위 타입을 옵져버블로 변환해준다.</p><h3 id="fromevent"><a class="markdownIt-Anchor" href="#fromevent"></a> fromEvent</h3><p>EventEmitter 클래스의 객체와 조합하거나 브라우저의 이벤트를 옵져버블로 바꿀 때 사용한다.</p><h3 id="defer"><a class="markdownIt-Anchor" href="#defer"></a> defer</h3><p>팩토리 함수로 옵져버블을 생성한 후 구독한느 시점에 팩토리 함수를 호출해 이미 생성한 옵져버블을 리턴받아 구독한다.</p><p>from 과의 차이는 다름과 같다.</p><ul><li>from<ul><li>프로미스 내부 구현부가 언제 실행되던지 상관 없을 때</li><li>이미 실행 중이거나 완료한 프로미스를 옵져버블로 만들 때</li></ul></li><li>defer<ul><li>옵져버블을 구독하는 시점에 프로미스를 생성해 구현부가 실행되어야할 때</li><li>프로미스 객체 생성 시점이 구독하는 시점이여야할 때</li></ul></li></ul><h3 id="range"><a class="markdownIt-Anchor" href="#range"></a> range</h3><p>범위 지정 후 그 값을 순서대로 발행한다. 반복문이 필요할 때 사용된다.</p><h3 id="interval"><a class="markdownIt-Anchor" href="#interval"></a> interval</h3><p>ms 단위로 값을 발행한다.</p><h3 id="timer"><a class="markdownIt-Anchor" href="#timer"></a> timer</h3><p>파라미터가 하나일 경우 ms 이후에 한 번 값을 발행하고,<br>두 개일 경우 ms 이후에 두번 째 파라미터만큼 주기적으로 값을 발행한다.</p><h3 id="empty"><a class="markdownIt-Anchor" href="#empty"></a> empty</h3><p>값 발행 후 중간에 멈춰야하는 상황에 사용한다. 이 함수만 사용하지는 않고 다른 함수나 연산자와 조합해서 complete 함수를 호출해야 할 때 사용된다.<br>즉, 바로 구독을 완료해야될때 사용된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 상수로 사용된다.</span></span><br><span class="line"><span class="keyword">const</span> &#123; EMPTY &#125; = <span class="built_in">require</span>(<span class="string">'rxjs'</span>);</span><br></pre></td></tr></table></figure><h3 id="never"><a class="markdownIt-Anchor" href="#never"></a> never</h3><p>아무 것도 하지 않고 옵져버블 생성이 필요할 때 사용된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 상수로 사용된다.</span></span><br><span class="line"><span class="keyword">const</span> &#123; NEVER &#125; = <span class="built_in">require</span>(<span class="string">'rxjs'</span>);</span><br></pre></td></tr></table></figure><h3 id="throwerror"><a class="markdownIt-Anchor" href="#throwerror"></a> throwError</h3><p>옵져버블로 값을 발행하다가 에러를 발생시키고 종료해야하는 상황에 사용한다.</p><h3 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter</h3><p>주로 파이퍼블 연산자와 연결해서 사용된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; filter &#125; = <span class="built_in">require</span>(<span class="string">'rxjs/operators'</span>);</span><br><span class="line"><span class="comment">// 1~10 중 짝수 필터</span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">10</span>).pipe(</span><br><span class="line">  filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><h3 id="first"><a class="markdownIt-Anchor" href="#first"></a> first</h3><p>처음으로 일치하는 값을 발행한다. 두 번째 인자로 기본 값을 줄 수 있다.</p><h3 id="last"><a class="markdownIt-Anchor" href="#last"></a> last</h3><p>마지막으로 일치하는 값을 발행한다. 두 번째 인자로 기본 값을 줄 수 있다.</p><h3 id="take"><a class="markdownIt-Anchor" href="#take"></a> take</h3><p>정해진 갯수만큼 구독하고 구독을 해제한다.<br>interval 과 같이 무한 반복이 실행되는 연산자와 같이 쓰면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; take &#125; = <span class="built_in">require</span>(<span class="string">'rxjs/operators'</span>);</span><br><span class="line"></span><br><span class="line">interval(<span class="number">1000</span>).pipe(</span><br><span class="line">  take(<span class="number">3</span>)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="takeuntil"><a class="markdownIt-Anchor" href="#takeuntil"></a> takeUntil</h3><p>특정 이벤트가 발생할 때까지 옵져버블을 구독해야할 때 사용한다.<br>예시로 보는 게 빠르다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span><br><span class="line">  take(<span class="number">100</span>),</span><br><span class="line">  takeUntil(fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>), <span class="string">'click'</span>))</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><h3 id="takewhile"><a class="markdownIt-Anchor" href="#takewhile"></a> takeWhile</h3><p>take 와 filter 가 합쳐진 연산자이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span><br><span class="line">  takeWhile(<span class="function"><span class="params">x</span> =&gt;</span> x &lt;= <span class="number">10</span>)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><h3 id="takelast"><a class="markdownIt-Anchor" href="#takelast"></a> takeLast</h3><p>Last 의 파라미터 수 만큼 저장해뒀다가 구독 완료시에 일괄적으로 발행한다.<br>발행하는 값이 <code>[0, 2, 4, 6, 8, 10]</code> 일 때 <code>takeLast(3)</code> 일 경우 내부에 저장된 값은 다음과 같다.</p><table><thead><tr><th>발행값</th><th>내부배열</th></tr></thead><tbody><tr><td>0</td><td>[0]</td></tr><tr><td>2</td><td>[0, 2]</td></tr><tr><td>4</td><td>[0, 2, 4]</td></tr><tr><td>6</td><td>[6, 2, 4]</td></tr><tr><td>8</td><td>[6, 8, 4]</td></tr><tr><td>10</td><td>[6, 8, 10]</td></tr></tbody></table><h3 id="skip"><a class="markdownIt-Anchor" href="#skip"></a> skip</h3><p>이름 그대로 n 개만큼의 발행을 건너 뛴다.</p><h3 id="skipuntil"><a class="markdownIt-Anchor" href="#skipuntil"></a> skipUntil</h3><p>takeUntil 과의 반대로 옵져버블이 실행될 때까지 건너 뛴다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> time = <span class="number">1000</span>;</span><br><span class="line">interval(time).pipe(</span><br><span class="line">  skipUntil(interval(time * <span class="number">5</span>)),</span><br><span class="line">  take(<span class="number">2</span>)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="skipwhile"><a class="markdownIt-Anchor" href="#skipwhile"></a> skipWhile</h3><p>조건을 만족하지 않는 순간부터 값을 발행한다.</p><h3 id="debounce"><a class="markdownIt-Anchor" href="#debounce"></a> debounce</h3><p>많이 사용하진 않지만, 디바운스할 옵져버블을 계산값을 리턴해주는 함수를 파라미터로 주면 된다.</p><h3 id="debouncetime"><a class="markdownIt-Anchor" href="#debouncetime"></a> debounceTime</h3><p>로대쉬나 다른 라이브러리의 debounce 와 같다.</p><h3 id="distinct"><a class="markdownIt-Anchor" href="#distinct"></a> distinct</h3><p>중복은 제거하고 발행한다. 값 비교에는 === 연산자가 사용된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">of</span>(</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;</span><br><span class="line">).pipe(</span><br><span class="line">  distinct(<span class="function"><span class="params">data</span> =&gt;</span> data.id),</span><br><span class="line">  map(<span class="function"><span class="params">data</span> =&gt;</span> data.id)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>두번째 파라미터로 <code>flush</code> 조건을 옵져버블로 넘겨 중복 조건을 초기화시킬 수 있다.</p><h3 id="distinctuntilchanged"><a class="markdownIt-Anchor" href="#distinctuntilchanged"></a> distinctUntilChanged</h3><p>중복값이 연속으로 발행된 경우만 제거한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>).pipe(</span><br><span class="line">  distinctUntilChanged()</span><br><span class="line">).subcribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>첫번째 파라미터로는 비교함수 (prev, next 를 파라미터로 받는)를 넣어 연속 비교조건을 변경할 수 있다.</p><p>두번째 파라미터로는 비교할 값 셀렉터를 변경해줄 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">of</span>(</span><br><span class="line">  &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">10</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">10</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">20</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">30</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">30</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">20</span>&#125;</span><br><span class="line">).pipe(</span><br><span class="line">  distinctUntilChanged(<span class="literal">null</span>, data =&gt; data.a)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><h3 id="sample"><a class="markdownIt-Anchor" href="#sample"></a> sample</h3><p>이건 마블 다이어그램으로 이해하는 게 빠르다.</p><p><img src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/sample.png" alt="sample"></p><p>notifier 옵져버블(x 옵져버블)이 발행되면 이전 최근 값을 발행한다.<br>값 c 처럼 소스 옵져버블에 새로운 값이 없을 경우 값을 중복으로 발행하지 않는다.</p><h3 id="sampletime"><a class="markdownIt-Anchor" href="#sampletime"></a> sampleTime</h3><p>일정 간격 사이에 있는 최근 값을 발행한다.</p><h3 id="pluck"><a class="markdownIt-Anchor" href="#pluck"></a> pluck</h3><p>기본 map 연산자는 뻔하기에 적지 않았다.<br>map 처럼 동작하지만 소스 옵져버블에서 객체를 리턴할 때 객체의 property 를 뽑아낸다.</p><h3 id="mergemap"><a class="markdownIt-Anchor" href="#mergemap"></a> mergeMap</h3><h3 id="switchmap"><a class="markdownIt-Anchor" href="#switchmap"></a> switchMap</h3><h3 id="concatmap"><a class="markdownIt-Anchor" href="#concatmap"></a> concatMap</h3><h3 id="scan"><a class="markdownIt-Anchor" href="#scan"></a> scan</h3><h3 id="partition"><a class="markdownIt-Anchor" href="#partition"></a> partition</h3><h3 id="groupby"><a class="markdownIt-Anchor" href="#groupby"></a> groupBy</h3><h3 id="buffer"><a class="markdownIt-Anchor" href="#buffer"></a> buffer</h3><h3 id="buffercount"><a class="markdownIt-Anchor" href="#buffercount"></a> bufferCount</h3><h3 id="window"><a class="markdownIt-Anchor" href="#window"></a> window</h3><h3 id="windowcount"><a class="markdownIt-Anchor" href="#windowcount"></a> windowCount</h3><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>RxJS 의 장점은 이벤트 구독을 취소하고, 모든 이벤트를 하나의 스트림으로 제어할 수 있는 것이라고 생각한다.</li><li>이해하는데 상당한 기간이 소요되었지만, 다음과 같은 상황에서만 사용될 것 같다.<ul><li>SPA</li><li>에디터와 같이 많은 컴포넌트끼리 통신이 필요할 때</li></ul></li><li>위 상황에서도 앵귤러가 아닌 스토어 기반의 리액트, 뷰를 사용한다면 <strong>RxJS를 쓸거야</strong> 라고 보여주기 위해 사용하는 느낌일 것 같다.</li><li>모두가 같이 가기엔 꽤 어려운 개념이다.</li><li>싱글 스레드 기반의 백엔드에서 더 유용하게 쓰일 수 있을 듯</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/30/RxJS%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ansible 정리</title>
      <link>https://gracefullight.dev/2019/04/28/Ansible-%EC%A0%95%EB%A6%AC/</link>
      <guid>https://gracefullight.dev/2019/04/28/Ansible-%EC%A0%95%EB%A6%AC/</guid>
      <pubDate>Sun, 28 Apr 2019 14:32:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;앤서블&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#앤서블&quot;&gt;&lt;/a&gt; 앤서블&lt;/h1&gt;&lt;p&gt;서버 구성 관리 자동화 프로그램&lt;/p&gt;&lt;h2 id=&quot;용어&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#용
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="앤서블"><a class="markdownIt-Anchor" href="#앤서블"></a> 앤서블</h1><p>서버 구성 관리 자동화 프로그램</p><h2 id="용어"><a class="markdownIt-Anchor" href="#용어"></a> 용어</h2><ul><li>애드훅: 일회성 실행</li><li>플레이북: yaml 로 재사용</li></ul><h2 id="cmdb"><a class="markdownIt-Anchor" href="#cmdb"></a> CMDB</h2><ul><li>Configuration Management DataBase (구성 관리 데이터베이스)</li><li>분산 설치된 서버, 스토리지, 네트워크 장비 등의 CPU, 메모리, 디스크 등의 하드웨어 정보와 OS, 응용프로그램 종류 등의 소프트웨어 정보 관리</li><li>다양한 시스템의 정보를 한 번에 파악 가능하고, 각 장비 간 연관 관계 파악이 쉬워 예방, 장애 파악, 유지보수에 좋음</li><li>앤서블 CMDB 는 앤서블 호스트 파일 또는 지정된 인벤토리를 통해 설정 관리 대상 시스템의 정보를 setup 모듈을 통해 수집, 저장</li><li>앤서블 vault 로 중요 정보 암호화 가능</li><li>Device42, servicenow 등이 지원</li><li>ansible-cmdb 를 사용해 간단한 대시보드로 볼 수 있다.</li></ul><h1 id="최적화"><a class="markdownIt-Anchor" href="#최적화"></a> 최적화</h1><h2 id="pipelining"><a class="markdownIt-Anchor" href="#pipelining"></a> pipelining</h2><ul><li>앤서블 실행 단계를 한 단계로 줄일 수 있음</li><li>플레이북 내에서는 ansible_ssh_pipelining 으로 설정 가능</li><li>/etc/ansible/ansible.cfg 에서 설정 가능</li></ul><h2 id="forks"><a class="markdownIt-Anchor" href="#forks"></a> forks</h2><ul><li>한 번에 실행할 수 있는 노드의 수 제어 (default: 5)</li><li>serial 은 단순히 전체 노드에서 어느 정도를 실행할 것인지를 설정하는 거라 forks 와는 다르다.</li></ul><h2 id="async"><a class="markdownIt-Anchor" href="#async"></a> async</h2><ul><li>태스크 별 지정된 주기에 체크하고 모든 노드의 동일 태스크가 완료되어야 다음 태스크 실행</li><li>주기를 0으로 설정하면 상태 체크 없이 다음 태스크가 진행된다.</li></ul><h2 id="strategy-free"><a class="markdownIt-Anchor" href="#strategy-free"></a> strategy free</h2><ul><li>상태 체크는 하지만 다른 노드의 진행을 기다리지 않고 각 노드 간 독립적으로 태스크 진행</li><li>빠르게 작업이 끝나는 노드가 생기므로 forks 수의 제한을 가능한 늘려줘야한다.</li></ul><h2 id="설정-확인"><a class="markdownIt-Anchor" href="#설정-확인"></a> 설정 확인</h2><p><code>ansible-config dump --only-changed</code> 로 변경된 설정 확인 가능</p><h2 id="블록"><a class="markdownIt-Anchor" href="#블록"></a> 블록</h2><ul><li><code>with_items, with_nested, with_dict, with_file</code>을 사용해 여러 개의 태스크를 한 번에 실행 가능</li></ul><h2 id="fact_caching"><a class="markdownIt-Anchor" href="#fact_caching"></a> fact_caching</h2><ul><li>기본적으로 앤서블의 fact 는 실행 시마다 수집되는데, 이 옵션을 설정으로 디스크 또는 메모리에 캐싱해 fact 수집 시간을 단축시킴</li><li>기본 값은 24시간</li></ul><h2 id="ansible-vault"><a class="markdownIt-Anchor" href="#ansible-vault"></a> ansible-vault</h2><ul><li>평문 파일을 <code>aes256</code>으로 암복호화</li></ul><h2 id="no_log"><a class="markdownIt-Anchor" href="#no_log"></a> no_log</h2><ul><li>플레이북 실행시 <code>-v, -vv, -vvv</code>의 옵션으로 암호화 파일의 유추가 가능한데, <code>no_log</code> 옵션을 줘서 해결 가능</li></ul><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>설정이 많고, 모듈도 많아서 사용할 때 홈페이지를 참고해가며 삽질해야할 듯</li><li>Docker 설치 전 <strong>물리적인 서버</strong>의 설정을 맞춰줄 때나 디버깅할 때 필수로 보인다.</li><li>시스템 관리자가 아니거나 AWS 쓴다면 사용할 일이 거의 없을 것 같다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/28/Ansible-%EC%A0%95%EB%A6%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac 에서 포트 접근 확인하기</title>
      <link>https://gracefullight.dev/2019/04/26/Mac%EC%97%90%EC%84%9C-%ED%8F%AC%ED%8A%B8-%EC%A0%91%EA%B7%BC-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2019/04/26/Mac%EC%97%90%EC%84%9C-%ED%8F%AC%ED%8A%B8-%EC%A0%91%EA%B7%BC-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 26 Apr 2019 03:37:42 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;윈도우의 경우에는 telnet-client 를 켜주면 되고, 맥에서도 &lt;code&gt;brew&lt;/code&gt; 로 설치하면 되지만 더 좋은 내장 툴이 있다.&lt;/p&gt;&lt;h1 id=&quot;네트워크-유틸리티&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
        
      
      </description>
      
      <content:encoded><![CDATA[<p>윈도우의 경우에는 telnet-client 를 켜주면 되고, 맥에서도 <code>brew</code> 로 설치하면 되지만 더 좋은 내장 툴이 있다.</p><h1 id="네트워크-유틸리티"><a class="markdownIt-Anchor" href="#네트워크-유틸리티"></a> 네트워크 유틸리티</h1><p><strong>네트워크 유틸리티 &gt; 포트 스캔</strong> 을 사용하자.</p><p><img src="https://i.imgur.com/AEcJ2oJ.png" alt="Network Utility"></p><p>IP 를 입력하고 테스트할 포트 범위를 입력 후 스캔 버튼을 누르면 된다.</p><p>Ping, DNS, Netstat, Traceroute (MTR), Whois 등의 기능이 있어서 유용하게 사용할 것 같다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/26/Mac%EC%97%90%EC%84%9C-%ED%8F%AC%ED%8A%B8-%EC%A0%91%EA%B7%BC-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>jQuery 프로토타입 오염 취약점 (CVE-2019-11358)</title>
      <link>https://gracefullight.dev/2019/04/24/jQuery-Prototype-Pollution-Vulnerability/</link>
      <guid>https://gracefullight.dev/2019/04/24/jQuery-Prototype-Pollution-Vulnerability/</guid>
      <pubDate>Wed, 24 Apr 2019 13:25:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;프로토타입-오염&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로토타입-오염&quot;&gt;&lt;/a&gt; 프로토타입 오염&lt;/h1&gt;&lt;p&gt;이 공격은 &lt;code&gt;JSON.parse&lt;/code&gt; 와 &lt;code&gt;Object.deepCopy&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="프로토타입-오염"><a class="markdownIt-Anchor" href="#프로토타입-오염"></a> 프로토타입 오염</h1><p>이 공격은 <code>JSON.parse</code> 와 <code>Object.deepCopy</code> 를 사용하는 <a href="https://medium.com/intrinsic/javascript-prototype-poisoning-vulnerabilities-in-the-wild-7bc15347c96" rel="external nofollow noopener noreferrer" target="_blank">모든 로직에서 발생</a>할 수 있다.</p><p>2019-04-17 에 발표된 이 취약점은 <code>$.extends</code> 구문 상에서 프로토타입 XSS 공격이 가능하다.</p><h1 id="예시"><a class="markdownIt-Anchor" href="#예시"></a> 예시</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = <span class="string">'&#123;"myProperty" : "a", "__proto__" : &#123; "isAdmin" : true &#125; &#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> newObject = $.extend(<span class="literal">true</span>, &#123;&#125;, <span class="built_in">JSON</span>.parse(myObject));</span><br><span class="line"><span class="built_in">console</span>.log(newObject.isAdmin); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(temp.isAdmin); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="패치"><a class="markdownIt-Anchor" href="#패치"></a> 패치</h1><p>취약점 패치는 아래 부분을 변경해준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 사이 로직 생략</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                src = target[name];</span><br><span class="line">                copy = options[name];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// [AS-IS]</span></span><br><span class="line">                <span class="comment">// if (target === copy) &#123;</span></span><br><span class="line">                <span class="comment">// [TO-BE]</span></span><br><span class="line">                <span class="keyword">if</span> (name === <span class="string">"__proto__"</span> || target === copy) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    deep &amp;&amp;</span><br><span class="line">                    copy &amp;&amp;</span><br><span class="line">                    (jQuery.isPlainObject(copy) ||</span><br><span class="line">                        (copyIsArray = jQuery.isArray(copy)))</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (copyIsArray) &#123;</span><br><span class="line">                        copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                        clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    target[name] = jQuery.extend(deep, clone, copy);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    target[name] = copy;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/24/jQuery-Prototype-Pollution-Vulnerability/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NARS 직구하기</title>
      <link>https://gracefullight.dev/2019/04/18/NARS-%EC%A7%81%EA%B5%AC%ED%95%98%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2019/04/18/NARS-%EC%A7%81%EA%B5%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 18 Apr 2019 12:25:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;nars-cosmetics&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nars-cosmetics&quot;&gt;&lt;/a&gt; NARS Cosmetics&lt;/h1&gt;&lt;p&gt;François Nars가 런칭한 프랑스발 유명 색조 브랜드 나스는
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="nars-cosmetics"><a class="markdownIt-Anchor" href="#nars-cosmetics"></a> NARS Cosmetics</h1><p>François Nars가 런칭한 프랑스발 유명 색조 브랜드 나스는 남자라도 갖고 싶게하는 매력있는 디자인을 가진 제품들이 많다.<br>한국에 들어오면 1.5배정도 가격이 뛰던지, 한정판은 들어오자마자 못 구한다.<br>이번 2019 Orgasm Collection 도 마찬가질 것 같다.</p><p><img src="https://i.imgur.com/JGikQSO.png" alt="2019 Orgasm Collection"></p><p>특히 립스틱 4개를 모아야 하나의 NARS 문구로 완성 되는 건 상술이지만 아름답다.</p><h2 id="이름의-유래"><a class="markdownIt-Anchor" href="#이름의-유래"></a> 이름의 유래</h2><p>나스 화장품 명칭은 대부분 섹슈얼한데 주된 명칭은 다음과 같다.</p><ul><li>오르가즘 '99 에 런칭된 베스트셀러이다.</li><li>슈퍼오르가즘</li><li>섹스어필</li><li>섹스판타지</li><li>쓰리썸</li><li>게이어티</li><li>패티쉬즈드</li><li>딥쓰롯</li></ul><p>왜 이런 이름을 지었는지에 대해 궁금해져서 <em>여성도 성에 당당해지자</em> 라는 카더라가 있는데, 카더라는 꺼무위키처럼 제껴두고 <a href="https://www.vogue.com/article/planet-nars-an-intimate-q-a-with-one-of-beautys-biggest-icons" rel="external nofollow noopener noreferrer" target="_blank">나스가 보그와 한 인터뷰</a>를 확인해보자.</p><blockquote><p><strong>Q: I think it’s safe to say your products have some of the all-time best names—Orgasm, Jungle Red, Belle de Jour, Chinatown, Schiap. How do you name them?</strong></p></blockquote><p>네이밍은 상품에 개성을 부여하는 것과 같다고 생각했기에, 여성들이 뭔가 특별한 것을 입고 있는 것처럼 느끼게 하고 싶었습니다. 메이크업은 섹시 악세사리라고 생각하기 때문에 재밌있게, 섹시하게 만들길 원했습니다. 여성들은 섹시해보기 위해, 섹시함을 느끼기 위해 이걸 사용합니다.</p><blockquote><p>A: You know, I always said we were either going to give them numbers, or interesting names. I didn’t want to go with boring names like Pink Peach. <strong>It had to be almost like giving each product its own personality, so that women could dream, could connect to the product, could feel like they were wearing something special. I wanted it to be fun. And sexy, too. Because makeup is a sexy accessory—women use it to look sexy and to feel sexy, for themselves and for the world.</strong> It gets difficult, because, you can imagine, we’ve been copied a lot. I have those little Hermès agendas, and 24 hours a day I keep writing names that come to my mind from books that I read, exhibits I go to, movies, places. I keep writing names. That’s how it works. I usually think about the name first, and then a color matches that name. Nothing is really planned.</p></blockquote><h1 id="구매하기"><a class="markdownIt-Anchor" href="#구매하기"></a> 구매하기</h1><h2 id="공홈"><a class="markdownIt-Anchor" href="#공홈"></a> 공홈</h2><p><a href="https://www.narscosmetics.com/" rel="external nofollow noopener noreferrer" target="_blank">NARS 공식 홈페이지</a>는 한국인이 한국카드를 쓰거나 배대지를 이용할 경우 구매 취소가 되어버린다.<br>이 것에 대해 카드, 페이팔, 배대지 변경까지 세 번의 도전을 모두 실패하고 결국 문의를 해서 이런 답변을 받았다.</p><blockquote><p>Please be aware that at this time <a href="http://NARScosmetics.com" rel="external nofollow noopener noreferrer" target="_blank">NARScosmetics.com</a> can only bill and ship within the U.S. and both billing and shipping must be made to a U.S. residential address.</p></blockquote><p>의역하면 <strong>응 안돼~</strong> 가 되시겠다.<br>사은품도 많고, 정품 패키지도 엄청 예쁜데 구매하려면 미국 친구나 미국 공구를 알아봐야한다.</p><p>이 문제는 나에게 <code>High Priority</code> 이슈로 등록되어서 대안을 마련해야만 했다.</p><h2 id="sephora"><a class="markdownIt-Anchor" href="#sephora"></a> Sephora</h2><p>편집숍인 <a href="https://www.sephora.com/brand/nars" rel="external nofollow noopener noreferrer" target="_blank">세포라</a>엔 나스 신상이 바로바로 입고되고 있었다.</p><p>가입 후 <a href="https://www.2fasts.com/" rel="external nofollow noopener noreferrer" target="_blank">배대지 주소</a>를 넣어주고, 오르가즘 컬렉션을 추가한 뒤 <a href="https://www.sephora.com/beauty/beauty-offers" rel="external nofollow noopener noreferrer" target="_blank">사은품</a>도 꼭꼭 챙기자.</p><table><thead><tr><th>블러셔</th><th>립</th></tr></thead><tbody><tr><td><img src="https://www.sephora.com/productimages/sku/s2165215-main-Sgrid@2x.jpg" alt="Orgasm Blush Jumbo"></td><td><img src="https://www.sephora.com/productimages/sku/s2063758-main-Sgrid@2x.jpg" alt="Orgasm Afterglow Lip Balm"></td></tr><tr><td><img src="https://www.sephora.com/productimages/sku/s2196343-main-Sgrid@2x.jpg" alt="Endless Orgasm Palette"></td><td><img src="https://www.sephora.com/productimages/sku/s2165207-main-Sgrid@2x.jpg" alt="Orgasm Oil-Infused Lip Tint"></td></tr></tbody></table><p>자주 이용할 듯 싶다.</p><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li>도착하면 이 컬렉션을 한국의 어떤 뷰티 유튜버보다도 빨리 리뷰할 수 있을 것 같다.</li><li>시놀로지 나스도 구매도 해야하는데</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/18/NARS-%EC%A7%81%EA%B5%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pi-hole과 라즈베리파이로 모든 광고 차단하기</title>
      <link>https://gracefullight.dev/2019/04/17/Install-Pi-Hole-on-Raspberry-Pi-3-b/</link>
      <guid>https://gracefullight.dev/2019/04/17/Install-Pi-Hole-on-Raspberry-Pi-3-b/</guid>
      <pubDate>Wed, 17 Apr 2019 14:07:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;앞서&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#앞서&quot;&gt;&lt;/a&gt; 앞서&lt;/h1&gt;&lt;p&gt;유튜브 광고가 많아졌다. 명색이 프로그래머인데 AdGuard를 정액제로 사용하고 싶지 않았다.&lt;br&gt;이 문서엔 없지만 피캡을 구현해
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="앞서"><a class="markdownIt-Anchor" href="#앞서"></a> 앞서</h1><p>유튜브 광고가 많아졌다. 명색이 프로그래머인데 AdGuard를 정액제로 사용하고 싶지 않았다.<br>이 문서엔 없지만 피캡을 구현해보고 싶었다.</p><h2 id="기기-구매"><a class="markdownIt-Anchor" href="#기기-구매"></a> 기기 구매</h2><p>라즈베리파이3 B+ 스타터킷을 구매한다. 아래 재료가 있을 경우 빼고 구매해도 된다.</p><ul><li>SD 카드 리더기</li><li>5핀 충전기</li><li>라즈베리파이용 방열판</li><li>라즈베리파이 케이스</li></ul><h1 id="환경설정"><a class="markdownIt-Anchor" href="#환경설정"></a> 환경설정</h1><h2 id="포맷"><a class="markdownIt-Anchor" href="#포맷"></a> 포맷</h2><p>SD 카드를 비워주기위해 파워쉘이나 CMD를 관리자 모드로 접근한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; diskpart</span><br><span class="line"></span><br><span class="line">DISKPART &gt; list disk</span><br><span class="line">DISKPART &gt; select disk $&#123;SD_CARD_DRIVE_NUMBER&#125;</span><br><span class="line"></span><br><span class="line">DISKPART &gt; clean</span><br></pre></td></tr></table></figure><h2 id="라즈비안"><a class="markdownIt-Anchor" href="#라즈비안"></a> 라즈비안</h2><p>운영체제인 <a href="https://www.raspberrypi.org/downloads/raspbian/" rel="external nofollow noopener noreferrer" target="_blank">Raspbian Stretch Lite</a> 버전을 다운로드한다.<br>데비안 기반이다.</p><h2 id="etcher"><a class="markdownIt-Anchor" href="#etcher"></a> etcher</h2><p>컴퓨터에 SD 카드용 이미지 굽는 <a href="https://github.com/balena-io/etcher" rel="external nofollow noopener noreferrer" target="_blank">프로그램</a>을 설치한다.</p><p>다운로드된 라즈비안과 etcher로 이미지를 굽는다.<br>직관적이라 1, 2, 3 선택하듯이 설치하면 된다.<br>도중에 깨질 경우 다시 포맷한다.</p><h2 id="ssh-접근"><a class="markdownIt-Anchor" href="#ssh-접근"></a> ssh 접근</h2><p>이미지 설치 후 다시 USB 를 인식시키면 Boot drive 가 보이는데 접근 후 루트에 <strong>ssh</strong> 란 이름의 터치파일을 만들어준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch ssh</span><br></pre></td></tr></table></figure><p>이 파일이 있어야 ssh 접근이 가능하다. 공유기에 꼽고 내부아이피 확인하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh 접근</span></span><br><span class="line">$ ssh pi@YOUR_RASPBERRY_INTERAL_IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기 비밀번호는 raspberry 이다.</span></span><br></pre></td></tr></table></figure><h1 id="패키지-설치"><a class="markdownIt-Anchor" href="#패키지-설치"></a> 패키지 설치</h1><p>부팅 후 <code>apt-get</code> 을 사용할 시간이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get upgrade -y &amp;&amp; sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="vim"><a class="markdownIt-Anchor" href="#vim"></a> vim</h2><p>vim 도 없다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim</span><br></pre></td></tr></table></figure><h2 id="oh-my-zsh"><a class="markdownIt-Anchor" href="#oh-my-zsh"></a> oh-my-zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install zsh</span><br><span class="line">$ chsh -s $(<span class="built_in">which</span> zsh)</span><br><span class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p><strong>agnoster theme</strong>, <strong>zsh-syntax-highlighting</strong>, <strong>zsh-autosuggestion</strong> 세팅해주자.</p><h1 id="pi-hole"><a class="markdownIt-Anchor" href="#pi-hole"></a> pi-hole</h1><p>이제 파이홀을 설치할 수 있다.</p><p>라즈베리파이를 유선연결했으니 <strong>eht0</strong> 인터페이스만 잘 체크해주면, 나머진 기본옵션으로 다음 다음만 해주면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -sSL https://install.pi-hole.net | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비밀번호 변경</span></span><br><span class="line">$ sudo pihole -a -p</span><br></pre></td></tr></table></figure><h2 id="dns-encrypt"><a class="markdownIt-Anchor" href="#dns-encrypt"></a> dns-encrypt</h2><p>이왕 DSN 가로채는 거 암호화도 해주자.<br><a href="https://github.com/pi-hole/pi-hole/wiki/DNSCrypt-2.0" rel="external nofollow noopener noreferrer" target="_blank">매뉴얼</a> 내용을 정리했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치</span></span><br><span class="line">$ sudo wget https://github.com/jedisct1/dnscrypt-proxy/releases/download/2.0.22/dnscrypt-proxy-linux_arm-2.0.22.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 폴더 생성</span></span><br><span class="line">$ sudo tar -xf dnscrypt-proxy-linux_arm-2.0.22.tar.gz</span><br><span class="line">$ sudo mv linux-arm dnscrypt-proxy &amp;&amp; <span class="built_in">cd</span> dnscrypt-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기본 설정 복사</span></span><br><span class="line">$ sudo cp example-dnscrypt-proxy.toml dnscrypt-proxy.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설정 변경</span></span><br><span class="line">$ sudo vi dnscrypt-proxy.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이 세 옵션을 찾아서 변경해준다.</span></span><br><span class="line">server_names = [<span class="string">'dnscrypt.nl-ns0'</span>]</span><br><span class="line"><span class="comment"># 기본 53번 포트는 pi-hole에서 쓰고 있다.</span></span><br><span class="line">listen_address = [<span class="string">'127.0.0.1:54'</span>, <span class="string">'[::1]:54'</span>]</span><br><span class="line">require_dnssec = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 서비스 등록</span></span><br><span class="line">$ sudo ./dnscrypt-proxy -service install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시작</span></span><br><span class="line">$ sudo ./dnscrypt-proxy -service start</span><br></pre></td></tr></table></figure><p><a href="https://dnscrypt.nl/" rel="external nofollow noopener noreferrer" target="_blank">dnscrypt.nl-ns0</a> Public DNSCrypt 서버이다.<br>다른 서버는 <a href="https://github.com/dyne/dnscrypt-proxy/blob/master/dnscrypt-resolvers.csv" rel="external nofollow noopener noreferrer" target="_blank">여기</a>를 참조하자. 일본이나 싱가폴 쪽에 있으면 좋을텐데 아쉽다.</p><h2 id="upstream-dns-변경"><a class="markdownIt-Anchor" href="#upstream-dns-변경"></a> Upstream DNS 변경</h2><p>관리자 화면의 <strong>Settings &gt; DNS &gt; Upstream DNS Servers</strong> 탭에서 <code>'127.0.0.1:54', '[::1]:54'</code>를 넣어주고 저장한다.</p><h2 id="primary-dns-address-변경"><a class="markdownIt-Anchor" href="#primary-dns-address-변경"></a> Primary DNS Address 변경</h2><p>공유기 설정에 들어가서 라즈베리파이 내부 아이피를 기본 DNS 주소로 설정한다.<br>IPTIME 의 경우 <strong>고급 설정 &gt; 네트워크 관리 &gt; 인터넷 설정 정보</strong> 에 있다.</p><h1 id="blocklists"><a class="markdownIt-Anchor" href="#blocklists"></a> BlockLists</h1><p><strong>Settings &gt; Blocklists</strong> 에서 추가하고 <strong>Save and Update</strong> 하면 차단할 주소가 추가된다. 아래는 참고할만한 링크다.</p><ul><li><a href="https://www.reddit.com/r/pihole/comments/9oekfe/good_blocklists_for_pihole/" rel="external nofollow noopener noreferrer" target="_blank">레딧</a></li><li><a href="https://discourse.pi-hole.net/t/update-the-best-blocking-lists-for-the-pi-hole-alternative-dns-servers-2019/13620" rel="external nofollow noopener noreferrer" target="_blank">Best blocking lists</a></li></ul><h2 id="확인"><a class="markdownIt-Anchor" href="#확인"></a> 확인</h2><p><a href="https://www.cloudflare.com/ssl/encrypted-sni/" rel="external nofollow noopener noreferrer" target="_blank">Cloudflare Browsing Experience Security Check</a>서 체크하자.</p><p>DNSSEC, TLS1.3에 초록불 들어오면 된다.<br>그리고 유튜브를 쾌적하게 즐기자.</p><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><ul><li><strong>Query Log</strong> 메뉴에서 어느 도메인을 확인하려는지 알 수 있다.</li><li>Instagram 광고 차단 필터를 찾아봐야겠다.</li><li>정작 내 블로그엔 애드센스 달려있는데…</li><li>세팅비 2만원 받아도 되지않을까? 😄</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/17/Install-Pi-Hole-on-Raspberry-Pi-3-b/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RecursiveDirectoryIterator 사용하기</title>
      <link>https://gracefullight.dev/2019/04/12/RecursiveDirectoryIterator-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2019/04/12/RecursiveDirectoryIterator-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 12 Apr 2019 10:42:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;앞서&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#앞서&quot;&gt;&lt;/a&gt; 앞서&lt;/h1&gt;&lt;p&gt;보통 디렉토리 순회를 한다고하면 무슨 메소드를 쓸까?&lt;/p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="앞서"><a class="markdownIt-Anchor" href="#앞서"></a> 앞서</h1><p>보통 디렉토리 순회를 한다고하면 무슨 메소드를 쓸까?</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 쉘실행하고?</span></span><br><span class="line">exec(<span class="string">'find dir'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아니면 for문과 scandir?</span></span><br><span class="line">scandir(<span class="string">'dir'</span>);</span><br></pre></td></tr></table></figure><p>위 방법은 간단하지만 <code>/home/gracefullight/tmp/**/*.bak</code> 와 같은 중첩된 디렉토리 파일의 데이터를 가져오려면 엄청난 <code>if/else</code> 처리가 들어갈 것이다.</p><h1 id="recursiveiterator"><a class="markdownIt-Anchor" href="#recursiveiterator"></a> RecursiveIterator</h1><h2 id="recursivedirectoryiterator"><a class="markdownIt-Anchor" href="#recursivedirectoryiterator"></a> RecursiveDirectoryIterator</h2><p>오토로딩을 하기 위해 필수로 들어가있는 <a href="https://www.php.net/manual/en/book.spl.php" rel="external nofollow noopener noreferrer" target="_blank">Standard PHP Library</a>엔 파일 순회에 사용할 수 있는 이터레이터 클래스가 들어가 있다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $path 하위를 가져오고 .. 와 . 는 제외한다.</span></span><br><span class="line">$directory = <span class="keyword">new</span> RecursiveDirectoryIterator($path, RecursiveDirectoryIterator::SKIP_DOTS);</span><br><span class="line">$iterator = <span class="keyword">new</span> RecursiveIteratorIterator($directory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($iterator <span class="keyword">as</span> $file) &#123;</span><br><span class="line">    $file-&gt;getPathname();</span><br><span class="line">    $file-&gt;getMTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$file</code>은 <a href="https://www.php.net/manual/en/class.splfileinfo.php" rel="external nofollow noopener noreferrer" target="_blank">SplFileInfo</a> 이다.</p><h2 id="recursivefilteriterator"><a class="markdownIt-Anchor" href="#recursivefilteriterator"></a> RecursiveFilterIterator</h2><p>위의 <code>foreach</code> 문 안에서 조건을 줘서 필터링할 수 있지만 다른 깔끔한 방법이 있다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFilterIterator</span> <span class="keyword">extends</span> <span class="title">RecursiveFilterIterator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $FILTERS = [</span><br><span class="line">        <span class="string">'txt'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 순회하기위해 자식 트리가 있을 경우 true</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasChildren()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $current = <span class="keyword">$this</span>-&gt;current();</span><br><span class="line">        <span class="keyword">if</span> (!$current-&gt;isFile()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 확장자가 txt 인 파일만 필터링</span></span><br><span class="line">        <span class="keyword">return</span> in_array($current-&gt;getExtension(), <span class="keyword">self</span>::$FILTERS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 감싸주면 끝난다.</span></span><br><span class="line">$iterator = <span class="keyword">new</span> RecursiveIteratorIterator(</span><br><span class="line">    <span class="keyword">new</span> TextFilterIterator($directory),</span><br><span class="line">    <span class="comment">// 이 옵션은 하위 폴더만 순회하게 해준다.</span></span><br><span class="line">    RecursiveIteratorIterator::LEAVES_ONLY,</span><br><span class="line">    <span class="comment">// 이 옵션은 Read 에 실패할 경우 오류를 스킵한다.</span></span><br><span class="line">    RecursiveIteratorIterator::CATCH_GET_CHILD</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="recursivecallbackfilteriterator"><a class="markdownIt-Anchor" href="#recursivecallbackfilteriterator"></a> RecursiveCallbackFilterIterator</h2><p>콜백으로 만들어 더 예쁘게 짤 수 있다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$FILTERS = [<span class="string">'txt'</span>];</span><br><span class="line"></span><br><span class="line">$textFilterIterator = <span class="keyword">new</span> RecursiveCallbackFilterIterator(</span><br><span class="line">    $directory,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">($current, $key, $iterator)</span> <span class="title">use</span> <span class="params">($FILTERS)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($iterator-&gt;hasChildren()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$current-&gt;isFile()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> in_array($current-&gt;getExtension(), $FILTERS);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$iterator = <span class="keyword">new</span> RecursiveIteratorIterator($textFilterIterator);</span><br></pre></td></tr></table></figure><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><p>쓸 수 있다면 <a href="https://packagist.org/packages/symfony/finder" rel="external nofollow noopener noreferrer" target="_blank">symfony/finder</a> 쓰자.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/12/RecursiveDirectoryIterator-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac에서 Kubernetes is starting이 지속되는 현상</title>
      <link>https://gracefullight.dev/2019/04/12/Mac%EC%97%90%EC%84%9C-Kubernetes-is-starting%EC%9D%B4-%EC%A7%80%EC%86%8D%EB%90%98%EB%8A%94-%ED%98%84%EC%83%81/</link>
      <guid>https://gracefullight.dev/2019/04/12/Mac%EC%97%90%EC%84%9C-Kubernetes-is-starting%EC%9D%B4-%EC%A7%80%EC%86%8D%EB%90%98%EB%8A%94-%ED%98%84%EC%83%81/</guid>
      <pubDate>Fri, 12 Apr 2019 10:30:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;원인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#원인&quot;&gt;&lt;/a&gt; 원인&lt;/h1&gt;&lt;p&gt;모하비 문제인지 최근 엣지 버전 Docker for Mac 이 문제인지 잘 모르겠지만,&lt;br&gt;부팅시에 &lt;strong&gt;Kubernat
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="원인"><a class="markdownIt-Anchor" href="#원인"></a> 원인</h1><p>모하비 문제인지 최근 엣지 버전 Docker for Mac 이 문제인지 잘 모르겠지만,<br>부팅시에 <strong>Kubernates is starting</strong> 문구가 지속되며 CPU의 온도를 90도까지 올려버린다.</p><p>맥북이 트랜스포머가 되어 곧 제트기가 될 것처럼 굉음이 나는데 해결해보자.</p><h1 id="해결"><a class="markdownIt-Anchor" href="#해결"></a> 해결</h1><ul><li><strong>Docker &gt; Prefereneces &gt; Reset</strong> 에서 Reset to factory defaults 로 공장 초기화를 진행한다.<br>-<code>~/.kube</code> 폴더를 강제로 삭제한다.</li><li>다시 쿠버네티스를 실행한다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/04/12/Mac%EC%97%90%EC%84%9C-Kubernetes-is-starting%EC%9D%B4-%EC%A7%80%EC%86%8D%EB%90%98%EB%8A%94-%ED%98%84%EC%83%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>querySelectorAll 로 배열만들기</title>
      <link>https://gracefullight.dev/2019/03/30/querySelectorAll-%EB%A1%9C-%EB%B0%B0%EC%97%B4%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2019/03/30/querySelectorAll-%EB%A1%9C-%EB%B0%B0%EC%97%B4%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <pubDate>Sat, 30 Mar 2019 13:11:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;document.querySelectorAll(&#39;.class&#39;)&lt;/code&gt; 와 같이 엘레먼트를 받았는데, &lt;code&gt;for&lt;/code&gt;문을 돌리면 오류가 발생한다.&lt;/p&gt;&lt;h1 id=&quot;해결&quot;&gt;&lt;a class=&quot;markdownIt-An
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>document.querySelectorAll('.class')</code> 와 같이 엘레먼트를 받았는데, <code>for</code>문을 돌리면 오류가 발생한다.</p><h1 id="해결"><a class="markdownIt-Anchor" href="#해결"></a> 해결</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 방법이나</span></span><br><span class="line"><span class="keyword">let</span> classes = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.class'</span>));</span><br><span class="line"><span class="comment">// 이렇게 가능하다</span></span><br><span class="line">classes = [...document.querySelectorAll(<span class="string">'.class'</span>)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 구버전 브라우저를 지원해야한다면</span></span><br><span class="line">classes = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.class'</span>));</span><br></pre></td></tr></table></figure><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><p>puppeteer 로 크롤링할 때 항상 헷갈린다.<br>삽질로 찾았는데 stackoverflow 에 정리된 게 있는 듯…</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/03/30/querySelectorAll-%EB%A1%9C-%EB%B0%B0%EC%97%B4%EB%A7%8C%EB%93%A4%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PWA 홈 설치의 모든 것 (A2HS)</title>
      <link>https://gracefullight.dev/2019/02/17/PWA-A2HS/</link>
      <guid>https://gracefullight.dev/2019/02/17/PWA-A2HS/</guid>
      <pubDate>Sun, 17 Feb 2019 12:39:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;PWA의 캐싱과 푸쉬 기능은 익히 알려져 있지만, 홈 설치에 대해선 제대로 되어있는 문서가 거의 없다.&lt;br&gt;기능은 기존 바로가기의 전체화면 버전이라 간단해보이지만 구현해보면 &lt;strong&gt;빙산의 일각&lt;/strong&gt;인 걸 절실히 깨닫게 된다.&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>PWA의 캐싱과 푸쉬 기능은 익히 알려져 있지만, 홈 설치에 대해선 제대로 되어있는 문서가 거의 없다.<br>기능은 기존 바로가기의 전체화면 버전이라 간단해보이지만 구현해보면 <strong>빙산의 일각</strong>인 걸 절실히 깨닫게 된다.</p><h1 id="a2hs"><a class="markdownIt-Anchor" href="#a2hs"></a> A2HS</h1><blockquote><p>Add To Home Screen, 홈 설치, 웹 앱 설치</p></blockquote><h2 id="사전지식"><a class="markdownIt-Anchor" href="#사전지식"></a> 사전지식</h2><p>아래 사전지식이 없으면 이 문서가 읽기 힘들 수 있다.</p><ul><li>es6</li><li>서비스워커</li><li>캐싱 전략</li></ul><h2 id="조건"><a class="markdownIt-Anchor" href="#조건"></a> 조건</h2><p>홈 설치가 되려면 다음과 같은 조건이 필요하다.<br>크롬 측 설명인데 다른점이 많아서 하나씩 까보자.</p><ul><li>HTTPS</li><li>서비스워커 설치</li><li>start_url 이 오프라인 사용가능</li><li>최소 192px 아이콘 지원</li><li>manifest.json 에 name 과 short_name 값 등록</li></ul><h3 id="https"><a class="markdownIt-Anchor" href="#https"></a> HTTPS</h3><p>HTTPS 를 통해 서비스가 제공되어야한다고 나오는데,<br>도메인 뿐아니라 페이지의 모든 리소스가 HTTPS 프로톨콜로 전송되어야한다.</p><h3 id="서비스워커-설치"><a class="markdownIt-Anchor" href="#서비스워커-설치"></a> 서비스워커 설치</h3><p>PWA 를 시작하는데 필수 요소니 자세한 설명은 생략</p><h3 id="start_url-오프라인-사용가능"><a class="markdownIt-Anchor" href="#start_url-오프라인-사용가능"></a> start_url 오프라인 사용가능</h3><p>어느 캐싱전략을 사용해도 상관없으나 오프라인 모드로 연결이 되어야한다.<br>국내 서비스일 경우 크게 느리지 않으므로 Network First Strategy 로 캐싱하는 걸 추천한다.<br>국외 서비스일 경우 로드되는 리소스까지 캐싱전략을 세워야될 수 있다.</p><p>여기서 start_url 에 querystring 을 추가해 사용하는 경우가 대부분일텐데 캐싱되는 URL 은 querystring 이 없다는 걸 감안해야한다.</p><p>예를 들어보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 보통 fetch request 로 접근되는 경로는 다음과 같다.</span></span><br><span class="line">start_url: <span class="string">'/'</span>,</span><br><span class="line"><span class="comment">// 검색 파라미터가 달려있다면 이런 모양일 것이다.</span></span><br><span class="line">start_url: <span class="string">'/?NaPm='</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 하지만 manifest.json 에 들어있는 경로는 다음과 같을 것이다.</span></span><br><span class="line">start_url: <span class="string">'/?pwa=1&amp;utm_source=pwa'</span></span><br></pre></td></tr></table></figure><p>유저가 접근시 <code>['NaPm', 'pwa', 'utm_source']</code> 등의 파라미터를 제거해야 경로가 캐시처리되며 오프라인 접근이 될 것이다.</p><h3 id="아이콘-지원"><a class="markdownIt-Anchor" href="#아이콘-지원"></a> 아이콘 지원</h3><p>크롬에선 최소 192px 의 아이콘을 지원하라고 나와있지만 스플래시 스크린에서 사용되는 아이콘은 <strong>512px</strong> 이 우선이다. 게다가 엣지 등의 다른 브라우저는 512px 도 있어야한다.</p><p>큰 사이즈의 이미지가 있을 경우 설치시에 네이티브 코드에서 이미지를 리사이징해서 아이콘을 만드므로 512px 하나만 있어도 되지만 홈 설치 시간이 느려지는 원인이 되므로 <strong>최소 192px, 512px 두 개</strong>는 지원해주자.</p><p>여력이 된다면 더 많은 사이즈의 이미지를 지원해줘도 된다. 이미지 업로드 하는 페이지의 리사이징 비용과 이미지별 트래픽 비용도 추가되겠지만 항상 유저의 속도가 중요한 것 아닌가?</p><p>이미지가 많을 경우 아래 쪽에 언급할 compatible 기능에서 문제가 생길 수 있다.</p><h3 id="앱-이름"><a class="markdownIt-Anchor" href="#앱-이름"></a> 앱 이름</h3><p>name 속성은 스플래시 스크린에 사용되며, short_name 은 바로가기 앱 명에 사용된다.<br>name 속성에 빈 값이 들어갈 경우 (빈 값엔 space 및 ‘ㄱ’ 한자 1키도 포함된다.) short_name 으로 대체된다.<br>두 속성이 모두 빈 값일 경우 홈 설치가 비활성화 된다.</p><p>이 기능은 스펙에 명시되어 있어서 변경 불가능하다.</p><p>크롬에선 스플래시 스크린 하단에 앱 이름이 노출되며 기타 브라우저에선 중앙에 노출된다.<br>최근에 하단으로 변경된 것으로 보인다.</p><h2 id="고려-대상"><a class="markdownIt-Anchor" href="#고려-대상"></a> 고려 대상</h2><p>필수 조건에는 없지만 고려해야할 대상들은 아래와 같다.</p><ul><li>background_color</li><li>theme_color</li><li>display</li><li>related_applications</li></ul><h3 id="background_color"><a class="markdownIt-Anchor" href="#background_color"></a> background_color</h3><p>이 속성은 스플래시 스크린의 배경색을 담당하는데, 배경색은 스플래시 스크린 상의 앱 이름 (name 속성)의 색상에 영향을 미친다.</p><p>앱 이름은 배경색이 거므스름한지의 여부에 따라 흰색 또는 검정색으로 노출된다.<br>이 공식은 <a href="https://www.w3.org/TR/WCAG20/#contrast-ratiodef" rel="external nofollow noopener noreferrer" target="_blank">contrast ratio</a> 란 스펙으로 정의되어 있으며, 안드로이드 내부에 구현되어있는 소스는 <a href="https://cs.chromium.org/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/util/ColorUtils.java" rel="external nofollow noopener noreferrer" target="_blank">다음</a>과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> CONTRAST_LIGHT_ITEM_THRESHOLD = <span class="number">3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculates the contrast between the given color and white,</span></span><br><span class="line"><span class="comment"> * using the algorithm provided by</span></span><br><span class="line"><span class="comment"> * the WCAG v2 in http://www.w3.org/TR/WCAG20/#contrast-ratiodef.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getContrastForColor</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> bgR = Color.red(color) / <span class="number">255f</span>;</span><br><span class="line">    <span class="keyword">float</span> bgG = Color.green(color) / <span class="number">255f</span>;</span><br><span class="line">    <span class="keyword">float</span> bgB = Color.blue(color) / <span class="number">255f</span>;</span><br><span class="line"></span><br><span class="line">    bgR = (bgR &lt; <span class="number">0.03928f</span>) ? bgR / <span class="number">12.92f</span> : (<span class="keyword">float</span>) Math.pow((bgR + <span class="number">0.055f</span>) / <span class="number">1.055f</span>, <span class="number">2.4f</span>);</span><br><span class="line">    bgG = (bgG &lt; <span class="number">0.03928f</span>) ? bgG / <span class="number">12.92f</span> : (<span class="keyword">float</span>) Math.pow((bgG + <span class="number">0.055f</span>) / <span class="number">1.055f</span>, <span class="number">2.4f</span>);</span><br><span class="line">    bgB = (bgB &lt; <span class="number">0.03928f</span>) ? bgB / <span class="number">12.92f</span> : (<span class="keyword">float</span>) Math.pow((bgB + <span class="number">0.055f</span>) / <span class="number">1.055f</span>, <span class="number">2.4f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> bgL = <span class="number">0.2126f</span> * bgR + <span class="number">0.7152f</span> * bgG + <span class="number">0.0722f</span> * bgB;</span><br><span class="line">    <span class="keyword">return</span> Math.abs((<span class="number">1.05f</span>) / (bgL + <span class="number">0.05f</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check whether lighter or darker foreground elements (i.e. text, drawables etc.)</span></span><br><span class="line"><span class="comment"> * should be used depending on the given background color.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> backgroundColor The background color value which is being queried.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Whether light colored elements should be used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldUseLightForegroundOnBackground</span><span class="params">(<span class="keyword">int</span> backgroundColor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getContrastForColor(backgroundColor) &gt;= CONTRAST_LIGHT_ITEM_THRESHOLD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="theme_color"><a class="markdownIt-Anchor" href="#theme_color"></a> theme_color</h3><p>이 속성은 주소창의 색상 또는 standalone 모드 시의 상단 상태바의 색상으로 노출된다.<br>하지만 IOS Safari 에서는 <code>['black', 'black-translucent']</code> 두 가지 색상으로만 선택이 가능하다.</p><p>이 것도 위의 Contrast 알고리즘을 활용해 거므스름한 여부에 따라 설정하면 된다.</p><h3 id="display"><a class="markdownIt-Anchor" href="#display"></a> display</h3><p>크롬 문서엔 standlone, fullscreen, minimal-ui 모두 A2HS 의 기능을 활용할 수 있다고 설명되어 있으나, 실제로는 앞의 두 속성만 가능하다.<br>삼성브라우저는 minimal-ui 속성을 지원하지 않는다.</p><h3 id="related_applications"><a class="markdownIt-Anchor" href="#related_applications"></a> related_applications</h3><p>앱을 가지고 있을 경우 앱 다운로드를 유도할 수 있는데, manifest 에 아래 속성만 넣으면 된다.<br>id 는 apk 업로드할 때 그 것과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"prefer_related_applications"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"related_applications"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="string">"platform"</span>: <span class="string">"play"</span>,</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"com.google.samples.apps.iosched"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="install-banner"><a class="markdownIt-Anchor" href="#install-banner"></a> Install Banner</h1><p><strong>App Install Prompt</strong> 또는 각각 브라우저마다 불리는 용어가 다른 이 기능은 PWA 접속시 홈 화면에 추가하라는 유도 배너를 말한다. 이 기능은 브라우저별로 이벤트 및 노출 유무가 천차만별이다.</p><h2 id="스펙"><a class="markdownIt-Anchor" href="#스펙"></a> 스펙</h2><table><thead><tr><th></th><th>배너</th><th>설치아이콘</th><th>배너재노출일</th><th>브라우저아이콘</th></tr></thead><tbody><tr><td>Chrome</td><td>노출</td><td>-</td><td>~3 months</td><td>-</td></tr><tr><td>Firefox</td><td>-</td><td>노출</td><td>-</td><td>표시</td></tr><tr><td>Samsung</td><td>노출</td><td>노출</td><td>~2 weeks</td><td>표시</td></tr><tr><td>Edge</td><td>노출</td><td>-</td><td>?</td><td>표시</td></tr><tr><td>UC</td><td>?</td><td>-</td><td>?</td><td>?</td></tr><tr><td>Opera</td><td>노출</td><td>-</td><td>?</td><td>표시</td></tr><tr><td>Whale</td><td>?</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>크롬 빼고는 지원되는 브라우저에서 홈 설치시에 브라우저 아이콘이 모두 노출된다.<br>이러면 웹 푸쉬를 받을 시에 원래 브라우저에 뱃지가 생긴다고 보면 된다.</p><p>배너를 닫을 시에 재노출 기간이 비상식적으로 길다.<br>배너는 <code>prompt()</code> 메소드로 강제 노출이 불가능하며, 버튼을 클릭하는 액션이 있어야만 한다.<br>재노출일을 초기화할 시에는 브라우저의 데이터를 모두 삭제해야한다.<br>(서비스워커 삭제로 불가능, 계정 또는 브라우저에 저장되는 값으로 추정됨)</p><p>UC 브라우저는 문서도 있고 설치가 되었던 것 같은데 최근 설치가 되지 않는다.<br>Whale 는 크로미움 기반이라 설치가 되었던 것 같은데 최근 설치가 되지 않는다.</p><h1 id="ios-safari"><a class="markdownIt-Anchor" href="#ios-safari"></a> IOS Safari</h1><p>모바일계의 IE인 사파리는 <a href="https://webkit.org/status/#?search=manifest" rel="external nofollow noopener noreferrer" target="_blank">Web App Manifest</a> 기능을 아직 개발 중에 있다.<br>그리고 <a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" rel="external nofollow noopener noreferrer" target="_blank">매우 불친절한 개발자 문서1</a> 와 <a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html" rel="external nofollow noopener noreferrer" target="_blank">불친절한 개발자 문서2</a>만 가지고 있다.</p><h2 id="버그"><a class="markdownIt-Anchor" href="#버그"></a> 버그</h2><p>사파리에서만 나타나는 크리티컬한 버그가 몇 가지 있다.</p><h3 id="oauth-인증-불가"><a class="markdownIt-Anchor" href="#oauth-인증-불가"></a> OAuth 인증 불가</h3><p>정확히 말하면 타 도메인 또는 새 창을 사용하는 SSO 와 OAuth 인증이 불가능하다.<br>사파리 자체 버그로 IOS 12.2.0 버전에 수정될 예정이다.</p><h3 id="제스처-사용-불가"><a class="markdownIt-Anchor" href="#제스처-사용-불가"></a> 제스처 사용 불가</h3><p>뒤로가기 제스처 사용이 불가능하다.<br>이를 위해 하이브리드 웹앱처럼 하단 네비게이션 바를 만들어줄 수 있다.<br>이 버그도 IOS 12.2.0 버전에 수정될 예정이다.</p><h2 id="전용-속성"><a class="markdownIt-Anchor" href="#전용-속성"></a> 전용 속성</h2><p>홈 화면 아이콘과 스플래시 스크린, 테마 색상을 <code>meta</code>, <code>link</code> 태그로 만들어줘야한다.<br>이를 위해 manifest.json 의 값을 가져와 canvas 를 통해 프론트에서 이미지를 만들어야한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"AppTitle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"touch-icon-iphone.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"icon.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="compatible"><a class="markdownIt-Anchor" href="#compatible"></a> Compatible</h1><p>Chrome, Safari, Edge 등 호환성을 맞추다보면 머리에 쥐가 날지도 모른다.<br>이럴 때 브라우저별 호환성을 맞춰주는 google 에서 제공되는 라이브러리가 있다.</p><p><a href="https://github.com/GoogleChromeLabs/pwacompat" rel="external nofollow noopener noreferrer" target="_blank">pwa.compat</a> 으로 다음과 같이 로드하면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"path/to/pwacompat.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>다음과 같은 호환성이 해결된다.</p><ul><li>Safari 전용 속성</li><li>Safari 홈 화면 아이콘과 스플래시 이미지</li><li>Edge, IE 전용 속성</li><li>meta 태그로 추가되지 않은 manifest.json 속성</li></ul><h2 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h2><p>manifest.json 과 icon 배열의 수만큼 request 수가 증가한다.<br>static resource 이므로 HTTP Cache 로 해결 가능하다.</p><h1 id="통계"><a class="markdownIt-Anchor" href="#통계"></a> 통계</h1><p>홈 설치를 한 뒤에 유저가 얼마나 설치했을지 통계를 내는 것 또한 중요한데,<br><code>beforeInstallPrompt</code> 나 <code>appInstalled</code> 이벤트는 브라우저 호환성이 되지 않는다.</p><p>따라서 위 이벤트로 로깅하는 건 무의미하고, start_url 에 들어온 파라미터로 통계를 내면 된다.</p><h1 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h1><p>크롬 개발자도구의 <strong>application &gt; Manfiest &gt; Add to homescreen</strong> 으로 이벤트를 발생시킬 수 있다고 하나 잘 되진 않는다.</p><p>홈 설치 조건을 만족시킬 경우, 크롬 설정 아이콘에서 “앱 명 추가” 라는 설정 메뉴가 하나 더 보이는데 이 기능으로 조건을 만족하는지와 브라우저 PWA 정도는 테스트 가능하다.</p><p>모바일 디버깅용으론 <a href="https://github.com/liriliri/eruda" rel="external nofollow noopener noreferrer" target="_blank">eruda</a>를 사용하자.</p><h1 id="여담"><a class="markdownIt-Anchor" href="#여담"></a> 여담</h1><p>IE7-8 호환성 맞추던 시절이 떠올랐다.<br>아직 픽스될 버그가 많으며, 안정될 때까지 최소 1년은 더 필요할 것으로 보인다.<br>추가되고 고쳐져야할 기능도 몇 가지 있다.</p><ul><li>브라우저 호환성 (주소창 옆 아이콘으로 통일될 듯)</li><li>이벤트 호환성</li><li>manifest href 에 blob 형태 지원 (현재 json decode 하면서 경로 오류 발생)</li><li>manifest가 변경될 경우 업데이트알림 (<a href="https://github.com/w3c/manifest/issues/446" rel="external nofollow noopener noreferrer" target="_blank">이슈</a>)</li></ul><p>개인 홈페이지에 적용할 경우 <a href="https://tomitm.github.io/appmanifest/" rel="external nofollow noopener noreferrer" target="_blank">Web App Manifest Generator</a> 를 이용하는게 속 편하다.</p><p><a href="https://docs.microsoft.com/ko-kr/microsoft-edge/progressive-web-apps/microsoft-store" rel="external nofollow noopener noreferrer" target="_blank">Desktop PWA</a> 나 <a href="https://developer.android.com/reference/android/support/customtabs/TrustedWebUtils" rel="external nofollow noopener noreferrer" target="_blank">TWA</a> 는 다루지 않았다.</p><h1 id="레퍼런스"><a class="markdownIt-Anchor" href="#레퍼런스"></a> 레퍼런스</h1><ul><li><a href="https://www.w3.org/TR/appmanifest/" rel="external nofollow noopener noreferrer" target="_blank">W3C Spec</a></li><li><a href="https://abookapart.com/products/progressive-web-apps" rel="external nofollow noopener noreferrer" target="_blank">Progressive Web Apps Book</a></li><li>브라우저별<ul><li><a href="https://developers.google.com/web/updates/2018/06/a2hs-updates" rel="external nofollow noopener noreferrer" target="_blank">Chrome</a>, <a href="https://developers.google.com/web/fundamentals/app-install-banners/" rel="external nofollow noopener noreferrer" target="_blank">App Install Prompt</a></li><li><a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" rel="external nofollow noopener noreferrer" target="_blank">Safari</a>, <a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html" rel="external nofollow noopener noreferrer" target="_blank">Safari App Banners</a></li><li><a href="https://developer.samsung.com/internet/android/web-guide" rel="external nofollow noopener noreferrer" target="_blank">Samsung</a></li><li><a href="https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps" rel="external nofollow noopener noreferrer" target="_blank">Edge</a></li><li><a href="https://developer.mozilla.org/ko/docs/Apps/Progressive/Installable_PWAs" rel="external nofollow noopener noreferrer" target="_blank">Firefox</a></li><li><a href="https://plus.ucweb.com/docs/pwa/welcome-to-pwa/pwa" rel="external nofollow noopener noreferrer" target="_blank">UC</a></li><li><a href="https://dev.opera.com/blog/web-app-install-banners/" rel="external nofollow noopener noreferrer" target="_blank">Opera</a></li></ul></li><li>웹문서<ul><li><a href="https://medium.com/@firt/progressive-web-apps-on-ios-are-here-d00430dee3a7" rel="external nofollow noopener noreferrer" target="_blank">Progressive Web Apps on iOS are here</a></li><li><a href="https://medium.com/@firt/pwas-on-ios-12-2-beta-the-good-the-bad-and-the-not-sure-yet-if-good-a37b6fa6afbf" rel="external nofollow noopener noreferrer" target="_blank">PWAs on iOS 12.2 beta</a></li><li><a href="https://ng-chicago.github.io/2018/06/18/add-2-home-screen/" rel="external nofollow noopener noreferrer" target="_blank">A2HS for PWAs Is Big</a></li></ul></li><li>github<ul><li><a href="https://github.com/PWA-POLICE/pwa-bugs" rel="external nofollow noopener noreferrer" target="_blank">github/pwa-bugs</a></li><li><a href="https://github.com/gokulkrishh/awesome-meta-and-manifest" rel="external nofollow noopener noreferrer" target="_blank">github/awesome-meta-and-manifest</a></li><li><a href="https://github.com/deanhume/pwa-tips-tricks" rel="external nofollow noopener noreferrer" target="_blank">github/pwa-tips-tricks</a></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/02/17/PWA-A2HS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>전세 자금 대출의 모든 것</title>
      <link>https://gracefullight.dev/2019/01/20/%EC%A0%84%EC%84%B8-%EC%9E%90%EA%B8%88-%EB%8C%80%EC%B6%9C%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</link>
      <guid>https://gracefullight.dev/2019/01/20/%EC%A0%84%EC%84%B8-%EC%9E%90%EA%B8%88-%EB%8C%80%EC%B6%9C%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/</guid>
      <pubDate>Sun, 20 Jan 2019 14:23:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;여기 저기 흩어져있는 전세자금 대출 정보를 하나로 모으고 싶었다.&lt;br&gt;필요한 서류도 엄청나고, 준비할 것도 많은데 다들 자기 할말만하고 끝나는 느낌이였다.&lt;br&gt;집 구하는 걸 무서워하지 말고 한 단계씩 실행해보자. 중고나라인데 집을 사는 것 뿐
        
      
      </description>
      
      <content:encoded><![CDATA[<p>여기 저기 흩어져있는 전세자금 대출 정보를 하나로 모으고 싶었다.<br>필요한 서류도 엄청나고, 준비할 것도 많은데 다들 자기 할말만하고 끝나는 느낌이였다.<br>집 구하는 걸 무서워하지 말고 한 단계씩 실행해보자. 중고나라인데 집을 사는 것 뿐이다.</p><h1 id="사전-작업"><a class="markdownIt-Anchor" href="#사전-작업"></a> 사전 작업</h1><p>먼저 회사에 요청해 <strong>원천징수영수증</strong>과 <strong>재직증명서</strong>를 발급받는다.<br>둘 다 직인이 찍혀있는 서류여야한다.</p><p>원천징수영수증에 연봉이 <strong>3500만</strong> 이하면서 <strong>중소기업</strong>에 취업중이면 어마어마한 저리(低利)로 대출을 받을 수 있다.<br>이 조건에 들 경우, <code>중소기업취업청년 전월세보증금대출</code> 대출을 받을 수 있는데 된다면 무조건 대출받아야한다.<br>조건이 안 되면 차선책으로 <code>버팀목 전세자금 대출</code>이 있다.</p><p>중소기업 여부는 <a href="http://nhuf.molit.go.kr/FP/FP05/FP0502/FP05020604.jsp" rel="external nofollow noopener noreferrer" target="_blank">여기</a>서 확인할 수 있다.<br>법인 번호는 <a href="http://www.dnbreport.co.kr/kcs/search.do" rel="external nofollow noopener noreferrer" target="_blank">여기</a>서 찾을 수 있다.</p><h2 id="주소-확인"><a class="markdownIt-Anchor" href="#주소-확인"></a> 주소 확인</h2><p>어차피 문 밖의 전단지 매물은 허위매물이니 부동산에 들어가 다음과 같이 말한다.</p><blockquote><p>전세집을 찾고 있고, 어느정도의 금액을 생각하고 있다. 대출 한도를 확인하려하니 주소를 하나 알려주시오.</p></blockquote><p>그럼 <strong>공실클럽</strong> 이란 중개업자용 직방 웹에서 매물을 찾아서 보여주고 주소를 알려줄 것이다.<br>안 보여준다면 주소만 하나 알아오면 된다. 혹시 부동산과 연결되어있는 은행이 있는지 확인하고 나온다.</p><p>불친절하다면 다음에 온다고 말하고 바로 나오자 시간 아깝다.<br>어차피 원룸촌이라면 그 지역 매물 다 거기서 거기이다.</p><p><s>근린시설, 다중주택, 다세대주택</s>이 아닌지를 꼭 확인한다. 대출이 안 나올 수 있다.</p><h2 id="대출-한도-확인"><a class="markdownIt-Anchor" href="#대출-한도-확인"></a> 대출 한도 확인</h2><p>주거래 은행이 아니여도 상관없다. 월급 통장이 있는 은행일 경우 빠른 처리가 가능하고,<br>우리은행이 주택도시기금의 주 거래은행이라 빠른 서류처리가 된다. 부동산에서 추천한 은행이 제일 좋긴하다.</p><p>은행에 가서 대출상담창구로 간 뒤 전세자금 대출을 한도 확인하러 왔다고 말한 뒤<br>원천징수영수증과 재직증명서, 그리고 주소를 준다.<br><code>원천징수영수증 + 재직증명서 + 주소 &lt;=&gt; 한도</code> 로 교환한다고 보면 된다.</p><p>나의 한도를 확인하고 다시 부동산에 방을 보러간다.</p><h2 id="방-확인"><a class="markdownIt-Anchor" href="#방-확인"></a> 방 확인</h2><p>전세자금대출이 가능하며, 버팀목 대출일 경우 미리 전입신고가 가능한 방만 보여달라고 한다.<br>한도에 맞는 방을 보고, 중개업자와 함께 돌아다닌다.<br>사진보다 실물로 봐야 훨씬 방이 크니 꼭 그 집에 가보자.</p><p>내가 생각하는 집의 조건은 다음과 같다.</p><ul><li>낑긴 층</li><li>창문 및 결로현상 확인</li><li>가벽 여부 확인</li><li>온수 확인</li><li>수압 및 물샘 확인</li><li>에어컨, 인덕션, 세탁기, 냉장고, 전자레인지 옵션 확인</li><li>가스, 수도, 전기가 개별요금인지 확인</li><li>집 냄새 확인</li><li>장판 및 벽지 들추고 곰팡이 확인</li><li>엘리베이터 확인</li></ul><p>최소 5군데 이상은 돌아보자. 2년 살 집이다.</p><h1 id="계약서-작성"><a class="markdownIt-Anchor" href="#계약서-작성"></a> 계약서 작성</h1><p>집을 선택하고 건물주의 <strong>등기부등본</strong>을 확인한다.<br>이건 건물주가 빚이 얼마나 있는지, 실제 판매하면 얼마정도로 가격을 받을 수 있는지가 나오며<br>내 전세자금이 안전할 수 있는지에 대한거라 꼭 확인이 필요하다.</p><p>그리고 부동산이 <strong>보증보험증권</strong>에 가입되어있는지도 확인한다.</p><p>마음에 드는 집이 있다면 <strong>전세가격의 5% 를 계약금</strong>으로 걸고, 계약서를 쓴다.<br>대출이 생각보다 길어질 수 있으므로 넉넉하게 3주 이상으로 잡자.</p><h1 id="대출-사전-작업"><a class="markdownIt-Anchor" href="#대출-사전-작업"></a> 대출 사전 작업</h1><h2 id="중소기업취업청년-전월세보증금대출"><a class="markdownIt-Anchor" href="#중소기업취업청년-전월세보증금대출"></a> 중소기업취업청년 전월세보증금대출</h2><ul><li>나이제한: 만 19세 ~ 만 34세</li><li>연봉제한: <strong>3500</strong></li><li>세대주제한: <strong>없음</strong></li><li>평수제한: 25평</li><li>금액제한: 1억</li><li>이자: <strong>1.2%</strong></li></ul><p>1억을 빌려도 한달 이자가 10만원인 대출이다. 10만원이 비싸다고 생각하면, 월급쟁이가 10년 일해야 1억모은다는 걸 생각해보자.</p><h2 id="버팀목-전세자금-대출"><a class="markdownIt-Anchor" href="#버팀목-전세자금-대출"></a> 버팀목 전세자금 대출</h2><ul><li>나이제한: <strong>만 25세 ~</strong></li><li>연봉제한: 5000</li><li>세대주제한: <strong>세대주만 가능</strong></li><li>평수제한: 25평</li><li>금액제한: 1.2억</li><li>이자: <strong>2.5~2.9%</strong></li></ul><p>1억을 빌리면 한달 이자가 30만원 언저리로 나온다. 관리비를 포함한다면 월세집을 사는 게 나을 수 있다.</p><h3 id="세대주-작업"><a class="markdownIt-Anchor" href="#세대주-작업"></a> 세대주 작업</h3><p>버팀목 전세자금의 경우 <strong>무주택 세대주</strong>여야한다. 조부모님 사촌, 친구을 활용해 전입신고를 하자.<br>그렇게 못한다면 내가 집의 세대주가 되거나 세대 분리로 세대주가 되어야하는데,<br>세대주 변경의 경우 부모님 명의로 된 집이 있다면 대출 조건에서 걸린다.<br>부모님 집의 명의를 돌리고 돌려서, 무주택자 부모님 밑에서 사는 서류가 된다 하더라도<br>대출시 은행으로 부모님이 직접 가서 무주택자라고 자필 서명을 해야한다.</p><p>세대 변경은 부모님 공인인증서와 내 공인인증서 설치가 모두 있는 경우에 한해 온라인으로 가능하고, 아니면 부모님의 도장으로 서류를 작성해야한다.<br>세대 분리는 동사무소에 전화해서 분리하고 싶다고 문의를 할 수 있는데, 상담해주시는 분에 따라 케바케라 힘들다고 보면 된다.</p><p>결국 집을 구할 때 이사 전 <strong>전입 신고가 가능한 집주인</strong>을 찾아보는 게 속 편하다.<br>그리고 등본을 발급하기 전 이사할 집에 전입신고를 한다.</p><h1 id="서류-작업"><a class="markdownIt-Anchor" href="#서류-작업"></a> 서류 작업</h1><p>공인인증서와의 긴 싸움이 시작된다.</p><ul><li>확정일자가 있는 전세계약서</li><li>계약금 납입 영수증</li><li>가족관계증명서</li><li>4대보험가입내역확인서</li><li>건강보험자격득실확인서</li><li>주민등록등본<ul><li>버팀목의 경우 세대주로 찍혀야함</li><li>주민번호 뒷자리까지 모두 노출</li></ul></li><li>주민등록초본<ul><li>태어날 때부터 모든 주소변경이력 포함</li></ul></li></ul><p>위 서류에 중소기업 대출일 경우 아래 서류가 추가로 필요하다.</p><ul><li>사업자등록증 사본</li><li>주업종코드확인서</li><li>고용보험피보험자격이력내역서</li></ul><p>서류 준비가 완료되면 대출심사를 진행하고 (보통 3영업일 이상)<br>전세계약서를 들고 이사할 지역의 동사무소를 찾아가 <strong>전입 확정일자</strong>를 찍어달라고 말한다. (600원 필요)</p><h1 id="대출-확인"><a class="markdownIt-Anchor" href="#대출-확인"></a> 대출 확인</h1><p>대출심사 진행 중 은행에서 해당 건물이 진짜 원룸인지 확인을 나간다.<br>다 될 경우 어마어마한 대출 서류에 싸인한 뒤 대출 보증세, 이자, 중도상환에 대해 확인한다.</p><p>그러면 계약일에 집주인 계좌로 은행에서 바로 송금을 해준다.<br>계약일이 주말일 경우 이전 영업일에 송금되니 참고하자.</p><h1 id="이사"><a class="markdownIt-Anchor" href="#이사"></a> 이사</h1><h2 id="이삿짐-센터-확인"><a class="markdownIt-Anchor" href="#이삿짐-센터-확인"></a> 이삿짐 센터 확인</h2><p>원룸 이사를 용달로 할 경우 견적전화를 돌리고, 모든 게 있는 풀옵션일 경우 자차로 이사할지에 대해 정한다.<br>인건비는 명 당 십만원 정도로 생각하자.</p><h2 id="입주"><a class="markdownIt-Anchor" href="#입주"></a> 입주</h2><p>박스를 구해다가 포장하고 이삿날에 잘 입주하기만 하면 된다.<br>굳이 계약날이 입주일은 아니여도 된다.</p><h1 id="팁"><a class="markdownIt-Anchor" href="#팁"></a> 팁</h1><p>입주 후 생필품을 사는데에 100만원정도 지출이 필요할 수 있다.<br>그리고 가능하다면 대출한도를 전부 대출받아 청약 당첨이나 재계약등에 대비할 수 있다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/01/20/%EC%A0%84%EC%84%B8-%EC%9E%90%EA%B8%88-%EB%8C%80%EC%B6%9C%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google Analytics Javascript API 사용하기</title>
      <link>https://gracefullight.dev/2019/01/14/google-analytics-javascript-api-usage/</link>
      <guid>https://gracefullight.dev/2019/01/14/google-analytics-javascript-api-usage/</guid>
      <pubDate>Mon, 14 Jan 2019 12:42:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;ga-client-js-api&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ga-client-js-api&quot;&gt;&lt;/a&gt; GA Client JS API&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developers.goo
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="ga-client-js-api"><a class="markdownIt-Anchor" href="#ga-client-js-api"></a> GA Client JS API</h1><p><a href="https://developers.google.com/analytics/devguides/reporting/core/v4/quickstart/web-js" rel="external nofollow noopener noreferrer" target="_blank">문서</a>가 있는데 생각보다 사용하기가 어렵다. 하나하나 시작해보자.</p><h2 id="인증-토큰-발급"><a class="markdownIt-Anchor" href="#인증-토큰-발급"></a> 인증 토큰 발급</h2><p><a href="https://console.developers.google.com/apis/credentials" rel="external nofollow noopener noreferrer" target="_blank">Cridentials page</a>에서 Create credentials 를 눌러 OAuth Client ID 를 발급받는다.</p><h2 id="예제"><a class="markdownIt-Anchor" href="#예제"></a> 예제</h2><p>받은 Client ID 를 메타태그에 넣어준다.</p><figure class="highlight html"><figcaption><span>example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Analytics Reporting API V4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-signin-client_id"</span> <span class="attr">content</span>=<span class="string">"OAuth 2.0 Client ID"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-signin-scope"</span> <span class="attr">content</span>=<span class="string">"https://www.googleapis.com/auth/analytics.readonly"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Analytics Reporting API V4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-signin2"</span> <span class="attr">data-onsuccess</span>=<span class="string">"queryReports"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- The API response will be printed here. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"20"</span> <span class="attr">id</span>=<span class="string">"query-output"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Replace with your view ID.</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> VIEW_ID = <span class="string">'136416454'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Query the API and print the results to the page.</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">queryReports</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">    gapi.client.request(&#123;</span></span><br><span class="line"><span class="actionscript">      path: <span class="string">'/v4/reports:batchGet'</span>,</span></span><br><span class="line"><span class="actionscript">      root: <span class="string">'https://analyticsreporting.googleapis.com/'</span>,</span></span><br><span class="line"><span class="actionscript">      method: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="undefined">      body: &#123;</span></span><br><span class="line"><span class="undefined">        reportRequests: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="undefined">            viewId: VIEW_ID,</span></span><br><span class="line"><span class="undefined">            dateRanges: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="actionscript">                startDate: <span class="string">'7daysAgo'</span>,</span></span><br><span class="line"><span class="actionscript">                endDate: <span class="string">'6daysAgo'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="undefined">            metrics: [</span></span><br><span class="line"><span class="undefined">              &#123;</span></span><br><span class="line"><span class="actionscript">                expression: <span class="string">'ga:sessions'</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">    &#125;).then(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> formattedJson = <span class="built_in">JSON</span>.stringify(response.result, <span class="literal">null</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">'query-output'</span>).value = formattedJson;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apis.google.com/js/client:platform.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="파라미터-확인"><a class="markdownIt-Anchor" href="#파라미터-확인"></a> 파라미터 확인</h2><p>문서의 내용을 확인하기 보다 <a href="https://ga-dev-tools.appspot.com/query-explorer/" rel="external nofollow noopener noreferrer" target="_blank">Query Explorer</a>에서 테스트 후에 그 값들을 Body 로 옮겨 적는 게 확인하기 쉽다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/01/14/google-analytics-javascript-api-usage/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows와 Mac에서 세계시간 설정하기</title>
      <link>https://gracefullight.dev/2019/01/06/Windows-and-Mac-world-clock-setting/</link>
      <guid>https://gracefullight.dev/2019/01/06/Windows-and-Mac-world-clock-setting/</guid>
      <pubDate>Sun, 06 Jan 2019 07:32:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;윈도우&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#윈도우&quot;&gt;&lt;/a&gt; 윈도우&lt;/h1&gt;&lt;h2 id=&quot;날짜시간-설정&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#날짜시간-설정&quot;&gt;&lt;/a&gt; 날짜/시간 
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="윈도우"><a class="markdownIt-Anchor" href="#윈도우"></a> 윈도우</h1><h2 id="날짜시간-설정"><a class="markdownIt-Anchor" href="#날짜시간-설정"></a> 날짜/시간 설정</h2><ul><li><strong>Window + R</strong> 키로 실행 창을 띄운다.</li><li><code>timedate.cpl</code> 을 입력한 뒤 <strong>날짜/시간 설정</strong>에 들어간다.</li><li><strong>추가시계</strong> 탭에서 시계 표시를 체크한 뒤 시간대를 설정한다.</li><li>시계표시줄에 세계 시간이 추가된 걸 확인할 수 있다.</li></ul><h1 id="맥"><a class="markdownIt-Anchor" href="#맥"></a> 맥</h1><h2 id="알림-목록"><a class="markdownIt-Anchor" href="#알림-목록"></a> 알림 목록</h2><p>우측 상단 시리 옆의 알림 목록에서 설정할 수 있다.<br>알림 목록의 편집 버튼을 클릭하면 세계시계 위젯을 추가할 수 있다.</p><h2 id="clocker"><a class="markdownIt-Anchor" href="#clocker"></a> Clocker</h2><blockquote><p>설치할 때 굳이 도시 추가를 안하지 않아도 설치 후에 더 직관적으로 추가할 수 있다.</p></blockquote><ul><li><a href="https://itunes.apple.com/app/clocker/id1056643111" rel="external nofollow noopener noreferrer" target="_blank">Clocker</a> 앱을 다운받는다.</li><li>실행하고 원하는 도시를 추가한다.</li><li>설치시에 권한은 따로 주지 않아도 시계는 볼 수 있다.</li><li>설정의 ON/OFF 모양의 아이콘에서 세계 시간 설정이, 티셔츠 모양 아이콘에서 세부 표시 설정이 가능하다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2019/01/06/Windows-and-Mac-world-clock-setting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hyper-V Virtual Eternet 네트워크 제거</title>
      <link>https://gracefullight.dev/2018/12/23/remove-hyper-v-virtual-network/</link>
      <guid>https://gracefullight.dev/2018/12/23/remove-hyper-v-virtual-network/</guid>
      <pubDate>Sun, 23 Dec 2018 13:43:37 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;windows RS4, RS5 업데이트 이후로 Hyper-V 가 켜있으면 블루스크린이 발생한다.&lt;br&gt;에러 내용은 &lt;code&gt;vmswitch.sys driver_irql_not_less_or_equal&lt;/code&gt; 또는 &lt;code&gt;kernel s
        
      
      </description>
      
      <content:encoded><![CDATA[<p>windows RS4, RS5 업데이트 이후로 Hyper-V 가 켜있으면 블루스크린이 발생한다.<br>에러 내용은 <code>vmswitch.sys driver_irql_not_less_or_equal</code> 또는 <code>kernel security check failed</code> 였다.</p><p>간헐적으로 발생되는 거라 시한폭탄을 들고 있는 거와 같다고 느껴져서,<br>이번 기회에 가상화는 맥북에서만 이용하려고 Hyper-V 를 모두 제거해봤다.</p><h1 id="hyper-v-제거"><a class="markdownIt-Anchor" href="#hyper-v-제거"></a> Hyper-V 제거</h1><h2 id="docker-for-windows-제거"><a class="markdownIt-Anchor" href="#docker-for-windows-제거"></a> Docker for Windows 제거</h2><p>Docker for Windows 를 먼저 제거한다.</p><h2 id="남아있는-가상서비스-제거"><a class="markdownIt-Anchor" href="#남아있는-가상서비스-제거"></a> 남아있는 가상서비스 제거</h2><p>Hyper-V 관리자에서 남아있는 가상 컴퓨터를 모두 삭제한다.</p><h2 id="기능-제거"><a class="markdownIt-Anchor" href="#기능-제거"></a> 기능 제거</h2><p>윈도우 실행에서 <strong>OptionalFeatures</strong>를 치면 바로 <strong>Windows 기능 켜기/끄기</strong> 메뉴로 들어가진다.<br>Hyper-V 를 Disable 시키고 재부팅 2번을 기다리자.</p><h1 id="네트워크-초기화"><a class="markdownIt-Anchor" href="#네트워크-초기화"></a> 네트워크 초기화</h1><h2 id="가상-네트워크-제거"><a class="markdownIt-Anchor" href="#가상-네트워크-제거"></a> 가상 네트워크 제거</h2><p>위의 상태로 제거해도 <strong>네트워크 &gt; 속성 &gt; 어댑터 설정</strong> 에는 Hyper-V virtual Eternet 이 보이는데,<br><strong>장치관리자 &gt; 네트워크 어댑터</strong> 에서 직접 삭제해주면 된다.</p><p>장치관리자는 윈도우 실행에서 <strong>devmgmt.msc</strong> 치면 바로 들어갈 수 있다.</p><h2 id="이더넷-재설정"><a class="markdownIt-Anchor" href="#이더넷-재설정"></a> 이더넷 재설정</h2><p>가상 스위치를 제거하면 인터넷이 아예 끊겨버리는데, 이더넷을 원래 상태로 복원하면 된다.<br>이더넷 설정에서 <strong>Hyper-V Extensible Virtual Switch</strong> 를 체크 해제하고 확인 버튼을 누른다.</p><img src="https://i.imgur.com/WgGtGF2.png"><p>재부팅하고 클린한 네트워크 환경을 맞아보자.</p><h1 id="이슈"><a class="markdownIt-Anchor" href="#이슈"></a> 이슈</h1><p>systeminfo 입력 후 OS 버전이 17763 버전일 경우 Docker for windows의 설치가 아예 되지 않는 듯 싶다.</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1 &gt; systeminfo</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2018/12/23/remove-hyper-v-virtual-network/#disqus_thread</comments>
    </item>
    
    <item>
      <title>카카오 카풀 후기 (베타 리뷰)</title>
      <link>https://gracefullight.dev/2018/12/17/reviews/kakao-carpool-review/</link>
      <guid>https://gracefullight.dev/2018/12/17/reviews/kakao-carpool-review/</guid>
      <pubDate>Mon, 17 Dec 2018 11:33:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;사용후기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#사용후기&quot;&gt;&lt;/a&gt; 사용후기&lt;/h1&gt;&lt;h2 id=&quot;호출&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#호출&quot;&gt;&lt;/a&gt; 호출&lt;/h2&gt;&lt;p&gt;카카오
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="사용후기"><a class="markdownIt-Anchor" href="#사용후기"></a> 사용후기</h1><h2 id="호출"><a class="markdownIt-Anchor" href="#호출"></a> 호출</h2><p>카카오 T 앱을 켜고 카풀 탭에서 위치를 선택한다.<br>배차가 되면 취소 위약금 3,000원이 나가니 꼭 필요한 경우에만 호출하자.</p><img src="https://i.imgur.com/A4u8Cp0.png"><h2 id="배차"><a class="markdownIt-Anchor" href="#배차"></a> 배차</h2><p>배차가 되면 탑승 위치에서 기다리면 된다.<br>차종과 카풀 운전자 (크루) 명, 색상 등을 알 수 있다.</p><img src="https://i.imgur.com/JZJ7h8x.png"><h2 id="탑승"><a class="markdownIt-Anchor" href="#탑승"></a> 탑승</h2><p>탑승 후엔 크루가 탑승을 눌러주고, 그 이후부터 편하게 타고가면 된다.</p><img src="https://i.imgur.com/8ZINxGI.png"><p><strong>실시간으로 내 위치를 볼 수 없다는 게 너무 불편했다.</strong></p><p>남의 차를 타는 것도 안전에 대해 확인할 수 없는데,<br>내가 어디를 가고 있는지도 다른 지도 앱을 켜야 알 수 있다는 건 웃긴 일이다.</p><h2 id="하차"><a class="markdownIt-Anchor" href="#하차"></a> 하차</h2><p>목적지에 도달해서 하차하면 크루를 평가할 수 있는 화면이 나온다.</p><img src="https://i.imgur.com/amxnE8O.png"><h1 id="총평"><a class="markdownIt-Anchor" href="#총평"></a> 총평</h1><p>내가 이동한 거리는 택시비로 33,500원이 나오는 거리지만 카카오 카풀로는 17,500원이 나왔다.<br>더 이상 무슨 말이 필요할까?</p><p>그렇지만 개선점은 많은 것 같다.<br>미국에서 우버를 이용했을 땐 정말 편리했다.</p><ul><li>호출 전 주변 우버 차량의 위치를 확인할 수 있고</li><li>이동시간 내내 차의 위치를 지도에서 실시간으로 확인이 가능하고</li><li>결제 후에도 이동거리와 비용에 대한 내역이 메일로 곧바로 온다.</li></ul><p>아직 카카오 카풀엔 이런 편의 기능들이 제공되지 않는다.</p><p>출퇴근 시에만 이용가능하다고 하는데, 사용해보니 편법의 테두리에서 우버랑 똑같은 서비스라고 본다.</p><p>카카오에서 제공하는 보험 1억5천까지는 보상 받을 수 있지만, 보험사에서 돈을 받을 수는 없다.<br><a href="https://www.youtube.com/watch?v=W-jLxWx06Kc&amp;t=6m31s" rel="external nofollow noopener noreferrer" target="_blank">여기</a>에서 변호사 분의 말을 참조하자.</p><p>여럿이서 타는데엔 <strong>타다</strong>가 좋고, 혼자 타기엔 <strong>카카오 카풀</strong>이 좋은 듯 싶다.</p><h1 id="팁"><a class="markdownIt-Anchor" href="#팁"></a> 팁</h1><ul><li>위치 선택시에 조금만 걸으면 되는 거리로 옮기면 2~3천원이 저렴해 지는 경우가 많다.</li><li>아직 베타기간이라서 그런지 차량이 많이 없고 잡히면 먼 곳에 있다. 적어도 출발 15분 전에는 호출하자</li><li><s>연말까지 1회 3만원에 한해 무료 이벤트가 추가되었다.</s> 몇 시간만에 철회되었다.</li></ul>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2018/12/17/reviews/kakao-carpool-review/#disqus_thread</comments>
    </item>
    
    <item>
      <title>넷플릭스 - 디스인챈트 리뷰</title>
      <link>https://gracefullight.dev/2018/12/17/reviews/netflix-disenchantment-review/</link>
      <guid>https://gracefullight.dev/2018/12/17/reviews/netflix-disenchantment-review/</guid>
      <pubDate>Mon, 17 Dec 2018 11:24:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;디스인챈트&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#디스인챈트&quot;&gt;&lt;/a&gt; 디스인챈트&lt;/h1&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Y
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="디스인챈트"><a class="markdownIt-Anchor" href="#디스인챈트"></a> 디스인챈트</h1><div class="video-container"><iframe src="//www.youtube.com/embed/YESPJGPMDFk" frameborder="0" allowfullscreen></iframe></div><p>심슨 느낌이 물씬나는 그림체다.<br>실제로도 심슨 제작자가 만든 애니메이션이라고 한다.</p><h2 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h2><ul><li>호머의 몸집에 모의 성격을 가진 왕</li><li>바트의 성격을 가진 빈 공주</li><li>밀하우스 같은 엘포</li><li>정체를 알 수 없는 악마</li><li>그리고 왕비들</li></ul><p>이 조합이 신선했지만 심슨이 더 재밌긴 하다.<br>이쯤에선 재밌게 행동해도 될 것 같은데, 결국 아동용 애니메이션처럼 착하게(?) 끝난다.</p><p>20부작으로 제작되었는데, 시즌1 마지막화인 10화에서 너무 큰 떡밥을 풀어서 기다리기 힘들다.</p><h2 id="줄거리"><a class="markdownIt-Anchor" href="#줄거리"></a> 줄거리</h2><p>중세시대를 풍자한 그런 느낌이다.</p><h2 id="스포일러"><a class="markdownIt-Anchor" href="#스포일러"></a> 스포일러</h2><p>마지막화가 반전의 전부이다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2018/12/17/reviews/netflix-disenchantment-review/#disqus_thread</comments>
    </item>
    
    <item>
      <title>카카오 계정 변경하기</title>
      <link>https://gracefullight.dev/2018/11/29/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EA%B3%84%EC%A0%95-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2018/11/29/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EA%B3%84%EC%A0%95-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 29 Nov 2018 12:13:07 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;카카오 계정의 메일 주소를 바꾸는 방법을 알아보자.&lt;/p&gt;&lt;h1 id=&quot;해결방법&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#해결방법&quot;&gt;&lt;/a&gt; 해결방법&lt;/h1&gt;&lt;p&gt;먼저 카카오 측에서 회신이 온 메일 내용을 보자.&lt;/p&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>카카오 계정의 메일 주소를 바꾸는 방법을 알아보자.</p><h1 id="해결방법"><a class="markdownIt-Anchor" href="#해결방법"></a> 해결방법</h1><p>먼저 카카오 측에서 회신이 온 메일 내용을 보자.</p><figure class="highlight plain"><figcaption><span>변경약관</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">계정 보안 강화를 위해 카카오계정 이메일 주소를 인증한 사용자의 경우</span><br><span class="line">이메일 주소를 직접 변경하실 수 없습니다.</span><br><span class="line"></span><br><span class="line">다만, 메일 서비스 탈퇴 및 종료 등으로 인해 이메일을 정상적으로 수신할 수 없는 경우에 한하여</span><br><span class="line">해당 카카오계정에 연결되었던 휴대폰 번호의 이용계약증명서 및</span><br><span class="line">메일 사용현황에 대한 확인 과정 진행 후 이메일 주소 변경을 지원해 드릴 수 있습니다.</span><br></pre></td></tr></table></figure><p>이메일을 정상적으로 수신할 수 없는 경우에 한해 휴대폰 이용계약증명서를 가지고 오면 확인 후 변경이 가능하단다. 조건을 만들어보자.</p><h2 id="기존-아이디-탈퇴"><a class="markdownIt-Anchor" href="#기존-아이디-탈퇴"></a> 기존 아이디 탈퇴</h2><p>예를 들어 <code>gracefullight@email.com</code> 의 이메일을 카카오 계정으로 사용하고 있다면<br>먼저 이메일 계정의 사이트에 들어가 탈퇴를 진행해야한다. (카카오 계정 탈퇴가 아니다!)</p><h2 id="비밀번호-찾기"><a class="markdownIt-Anchor" href="#비밀번호-찾기"></a> 비밀번호 찾기</h2><p>메일 탈퇴 후 <a href="https://accounts.kakao.com" rel="external nofollow noopener noreferrer" target="_blank">카카오 홈페이지</a> 우측 로그인화면 하단의 <strong>비밀번호 찾기</strong> 를 해 탈퇴된 메일로 비밀번호 찾기 메일이 보내지게 만든다.</p><p>내부적으로 없는 메일주소로 메일을 보내는 오류 확인이 필요한 것 같다.</p><h2 id="문의"><a class="markdownIt-Anchor" href="#문의"></a> 문의</h2><p><a href="https://cs.kakao.com/requests?category=19&amp;locale=ko&amp;node=30657&amp;service=8" rel="external nofollow noopener noreferrer" target="_blank">카카오 문의하기</a> 에서 <strong>일반문의 &gt; 기타문의</strong> 를 선택하고 정보들을 입력한다.</p><p>문의내용엔 다음과 비슷한 내용으로 적는다.</p><figure class="highlight plain"><figcaption><span>문의내용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">기존 메일 서비스 이용 불가로 카카오 계정을 변경하고 싶습니다.</span><br><span class="line"></span><br><span class="line">기존: as-is@email.com</span><br><span class="line">변경: to-be@email.com</span><br></pre></td></tr></table></figure><p>첨부파일엔 통신사 사이트에 로그인해 <strong>가입증명원</strong> 을 첨부해야한다.<br>KT의 경우 <strong>마이페이지 &gt; 조회/변경 &gt; 가입정보</strong> 중앙에 <strong>가입증명원 인쇄</strong> 메뉴로 접근 후 PDF 저장을 활용하자.</p><h2 id="메일-인증번호-확인"><a class="markdownIt-Anchor" href="#메일-인증번호-확인"></a> 메일 인증번호 확인</h2><p>문의등록 후 1~2영업일 후에 메일 인증번호를 입력해 재문의하라는 회신이 온다.</p><figure class="highlight plain"><figcaption><span>인증번호확인</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">고객님께서 변경 요청하신 [ to-be@email.com ] 이메일 주소로 인증번호를 보내드렸습니다.</span><br><span class="line"></span><br><span class="line">번거로우시겠지만, &apos;이메일 재설정 인증 코드&apos; 8자리를</span><br><span class="line">문의 내용에 기재하시어 재문의 주시면 확인 후 이메일 주소 변경을 도와드리겠습니다.</span><br><span class="line"></span><br><span class="line">다만, 인증코드를 다르게 기재하여 보내주실 경우 처리가 어려우므로</span><br><span class="line">정확하게 기재하여 재문의 부탁드립니다.</span><br></pre></td></tr></table></figure><p>별도로 전송된 인증번호로 일반문의를 이용해 재문의하고 조금 더 기다린다.</p><h2 id="비밀번호-변경"><a class="markdownIt-Anchor" href="#비밀번호-변경"></a> 비밀번호 변경</h2><p>최종으로 변경되었다는 회신이 온 뒤 비밀번호를 변경해주자.</p><figure class="highlight plain"><figcaption><span>최종변경</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">고객님의 [ as-is@email.com ] 계정 이메일 주소가 [ to-be@email.com ]으로 변경 되었습니다.</span><br><span class="line"></span><br><span class="line">로그인 버튼 하단의 &apos;이메일 주소 또는 비밀번호를 잊으셨나요?&apos; 링크를 누르신 뒤</span><br><span class="line">[ to-be@email.com ] 계정의 비밀번호를 찾아 로그인 부탁드립니다.</span><br></pre></td></tr></table></figure><p>비밀번호 변경 후엔 예전 쓰던 데이터 그대로 새로운 메일 계정으로 이용이 가능하다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2018/11/29/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EA%B3%84%EC%A0%95-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git GUI 클라이언트 분석 (windows)</title>
      <link>https://gracefullight.dev/2018/11/20/Best-Git-GUI-clients-for-win/</link>
      <guid>https://gracefullight.dev/2018/11/20/Best-Git-GUI-clients-for-win/</guid>
      <pubDate>Tue, 20 Nov 2018 12:43:03 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Git 고수들은 CLI 만 사용한다지만&lt;br&gt;난 Rebase 와 Squash 를 하다보면 몇 개의 문서를 다시 열어보는지 모르겠다.&lt;/p&gt;&lt;p&gt;그래서 &lt;a href=&quot;https://git-scm.com/download/gui/windows&quot; re
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Git 고수들은 CLI 만 사용한다지만<br>난 Rebase 와 Squash 를 하다보면 몇 개의 문서를 다시 열어보는지 모르겠다.</p><p>그래서 <a href="https://git-scm.com/download/gui/windows" rel="external nofollow noopener noreferrer" target="_blank">공식 GUI Clients</a>에서 무료 Git 클라이언트를 파해쳐봤다.</p><h1 id="분석"><a class="markdownIt-Anchor" href="#분석"></a> 분석</h1><p>21세기 디자인이면서 커밋 그래프가 제공되고 git flow가 가능하며 쉬운 rebase 가 지원되는 클라이언트는 <strong><a href="https://www.gitkraken.com/" rel="external nofollow noopener noreferrer" target="_blank">git kraken</a></strong> 과 <strong><a href="https://git-fork.com/" rel="external nofollow noopener noreferrer" target="_blank">git fork</a></strong> 였다.</p><p>나머진 다음과 같은 단점이 있었다.</p><ul><li>SourceTree<ul><li>윈도우즈에서 UI 가 너무 후지다.</li><li>인증이 왜 이렇게 어려운지 모르겠다.</li><li>느리다.</li></ul></li><li>Github Desktop<ul><li>딱 깃헙용이다.</li><li>되는 기능이 많지 않다.</li><li>커밋 그래프도 없다.</li></ul></li><li>Tortoise Git<ul><li>왠지 SVN이 떠올라서 패스했다.</li></ul></li><li>Git Extensions<ul><li>21세기 디자인은 아닌 것 같다.</li></ul></li><li>GitEye<ul><li>솔직히 Git Clients 의 끝인 듯 싶다.</li><li>하지만 워크벤치 쓰는 듯한 느낌이라 직관적이진 않다.</li></ul></li><li>gitg<ul><li>너무 간단하다.</li></ul></li><li>ungit<ul><li>너무 간단하다.</li></ul></li><li>git-cola<ul><li>cli를 옮겨놓은 느낌이다.</li></ul></li><li>Cyeligent Git Tool<ul><li>free 인데 라이센스를 물어본다.</li><li>설치 폴더를 설정할 수 없다.</li></ul></li><li>Aurees<ul><li>좋아보였으나 바이러스가 감염됨으로 다운로드 불가능하다.</li></ul></li><li>CodeReview<ul><li>diff 용이다.</li></ul></li><li>gmaster<ul><li>non-commercial use 이고,</li><li>그래프가 너무 느리게 그려진다.</li></ul></li><li>GitAhead<ul><li>좋아보이지만 non-commercial use</li></ul></li><li>Guitar<ul><li>diff 용</li></ul></li><li>RepoZ<ul><li>애드온 같은 느낌이다.</li></ul></li></ul><h2 id="git-kraken"><a class="markdownIt-Anchor" href="#git-kraken"></a> Git Kraken</h2><ul><li>느렸는데 최근 빨라졌다.</li><li>근데 아직도 느리다. 일렉트론 기반이라 그런 것 같다.</li><li>예쁜 그래프가 있다.</li><li>쉬운 rebase 를 제공한다.</li><li>git flow 가능하다.</li><li>검은색 테마가 가능하다.</li><li>non-commercial use 라 회사에서 못 쓴다.</li></ul><h2 id="git-fork"><a class="markdownIt-Anchor" href="#git-fork"></a> Git Fork</h2><ul><li>빠르고 직관적이다.</li><li>그래프가 지원된다.</li><li>쉬운 rebase 가 가능하다.</li><li>검은 테마가 가능하다.</li><li>완전한 무료이다.</li><li>지속적인 버전 업데이트가 되고 있다.</li><li>구글에서 git fork를 검색하면 정말 fork 하는 방법만 나오고 검색이 되지 않는다.</li></ul><h1 id="결론"><a class="markdownIt-Anchor" href="#결론"></a> 결론</h1><p><strong><a href="https://git-fork.com/" rel="external nofollow noopener noreferrer" target="_blank">GitFork</a></strong> 를 쓰자.<br>첫 실행 시에 <code>git config</code> 설정 UI 가 뜨는데 제대로 입력해줘야한다.</p><p>그리고 <code>workspace</code> 를 설정하는 란엔 사용하는 workspace 만을 등록하자.<br>전체를 등록할 경우 모든 폴더의 <code>.git</code> 디렉토리를 읽어오는 것 같다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2018/11/20/Best-Git-GUI-clients-for-win/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Javascript로 리소스 체크</title>
      <link>https://gracefullight.dev/2018/11/20/Javascript%EB%A1%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</link>
      <guid>https://gracefullight.dev/2018/11/20/Javascript%EB%A1%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 20 Nov 2018 11:42:17 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;페이지나 리소스가 있는지 체크하는 방법은 서버사이드에선 엄청 간단하다.&lt;br&gt;단 두 가지 기능만 있으면 해결된다. 심지어 certinfo 값 안에선 인증서 만료일까지 확인할 수 있다.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD 메소드&lt;/li&gt;&lt;li&gt;CURL&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>페이지나 리소스가 있는지 체크하는 방법은 서버사이드에선 엄청 간단하다.<br>단 두 가지 기능만 있으면 해결된다. 심지어 certinfo 값 안에선 인증서 만료일까지 확인할 수 있다.</p><ul><li>HEAD 메소드</li><li>CURL</li></ul><p>하지만 수 백개의 리소스를 동시에 체크해야할 경우는 어떨까?<br>리소스가 있는 서버에선 DDoS 공격으로 오인할 수 있고, 심지어 내 서버가 차단될 가능성도 있다.</p><p>클라이언트에서 리소스를 확인할 수 있는 방법이 있을까?</p><h1 id="삽질"><a class="markdownIt-Anchor" href="#삽질"></a> 삽질</h1><h2 id="ajax"><a class="markdownIt-Anchor" href="#ajax"></a> ajax</h2><ul><li>당연하지만 크로스도메인 XHR 은 CORS 가 없는 이상 막힌다.</li><li>HEAD 메소드도 똑같다.</li><li>fetch 도 똑같다.</li></ul><h2 id="script"><a class="markdownIt-Anchor" href="#script"></a> script</h2><ul><li>script tag 를 DOM 에 렌더링하는 것이므로 XSS 공격이 가능하다.</li><li>스크립트 태그에 한해서 onLoad 와 onError 로 체크가 가능하다.</li></ul><h2 id="image"><a class="markdownIt-Anchor" href="#image"></a> image</h2><ul><li>이미지 태그에 한해서 onLoad 와 onError 로 체크가 가능하다.</li></ul><h2 id="link"><a class="markdownIt-Anchor" href="#link"></a> link</h2><ul><li>css 일 경우 onLoad 와 onError 로 체크가 가능하다.</li><li>DOM 에 렌더링하는 것이므로 UI가 틀어질 수 있다.</li><li>html 등의 페이지도 체크가 가능하지만 firefox 등의 브라우저에서 일관성이 없다.</li><li>IE와 Edge 브라우저에서 없는 css 인 경우에도 onError 이벤트가 발생하지 않았다.</li></ul><p>마지막 이슈는 크리티컬했는데, 다행히 에러를 만들어 낼 수 있었다.<br><strong>cssRules</strong> 는 스타일시트가 없을 경우 접근할 수 없는 내부 값이기에 에러를 던진다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">link.onload = <span class="function"><span class="params">loadEvent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ie, edge 체크</span></span><br><span class="line">  <span class="keyword">const</span> isIE = <span class="regexp">/MSIE|Trident|Edge/i</span>.test(navigator.userAgent)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sheet 는 현재 로드 된 스타일시트 엘레먼트</span></span><br><span class="line">  <span class="keyword">if</span> (isIE &amp;&amp; loadEvent.target.sheet) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 강제로 시트 내의 cssRuls 값에 접근한다.</span></span><br><span class="line">      <span class="keyword">let</span> temp = loadEvent.target.sheet.cssRules</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// onError 와 같은 이벤트 처리</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="video"><a class="markdownIt-Anchor" href="#video"></a> video</h2><ul><li>없는 영상에 대해 onError 가 동작하지 않는다.</li></ul><h2 id="기타"><a class="markdownIt-Anchor" href="#기타"></a> 기타</h2><ul><li>embed 나 iframe 은 <em>X-Frame-Options</em> 헤더에 차단되거나 XSS 공격이 가능하다.</li><li>onError 이벤트의 일관성이 없다.</li></ul><h1 id="해결"><a class="markdownIt-Anchor" href="#해결"></a> 해결</h1><p>삽질의 결과로 js (script), css (link), image (img) 에 한해서 리소스 체크가 가능한 걸 확인했다.<br>하지만 js 와 css 의 렌더링으로 인해 페이지가 틀어지는 걸 어떻게 방지할 수 있을까?</p><p>불현듯 샌드박스란 단어가 떠올랐다.</p><h2 id="sandbox"><a class="markdownIt-Anchor" href="#sandbox"></a> sandbox</h2><p>보이지 않는 샌드박스 프레임을 만들고, 거기에서 위험한 일을 하면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"sandbox"</span> <span class="attr">src</span>=<span class="string">"about:blank"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>만들고</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$sandbox.contentDocument.write(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;script&gt;</span></span><br><span class="line"><span class="string">      여기에 프레임간 메세징과 리소스별 onLoad, onError 체크 로직을 넣는다.</span></span><br><span class="line"><span class="string">      &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure><p>넣고</p><p>메인 프레임에선 샌드박스 메소드를 <code>postMessage</code> 하면 된다.</p>]]></content:encoded>
      
      <comments>https://gracefullight.dev/2018/11/20/Javascript%EB%A1%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
