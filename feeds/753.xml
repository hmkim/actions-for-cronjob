<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Chinseok Lee on Medium]]></title>
        <description><![CDATA[Stories by Chinseok Lee on Medium]]></description>
        <link>https://medium.com/@allieuslee?source=rss-315f096daae6------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*S8WrA5rY1SWLxBaGpD8aFA.jpeg</url>
            <title>Stories by Chinseok Lee on Medium</title>
            <link>https://medium.com/@allieuslee?source=rss-315f096daae6------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 16:12:19 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@allieuslee" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[static 파일은 배포 시에 manage.py]]></title>
            <link>https://medium.com/@allieuslee/static-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%97%90-manage-py-2837e1bdfa7c?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/2837e1bdfa7c</guid>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Wed, 04 Jan 2017 06:16:20 GMT</pubDate>
            <atom:updated>2017-01-04T06:16:20.336Z</atom:updated>
            <content:encoded><![CDATA[<p>static 파일은 배포 시에 manage.py collectstatic 명령으로 한 디렉토리에 copy하여, 이 디렉토리를 apache/nginx 를 통해 직접 서빙하시면 됩니다.</p><p>settings.STATIC_ROOT 에 명시한 디렉토리로 카피됩니다.</p><p><a href="https://docs.djangoproject.com/en/1.10/howto/static-files/#deployment">https://docs.djangoproject.com/en/1.10/howto/static-files/#deployment</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2837e1bdfa7c" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[파이썬에서의 올바르게 Instance Variable 선언하기]]></title>
            <link>https://medium.com/python-with-askdjango/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-instance-variable-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0-5668e399bd0e?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/5668e399bd0e</guid>
            <category><![CDATA[제대로알고씁시다]]></category>
            <category><![CDATA[python]]></category>
            <category><![CDATA[파이썬]]></category>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Wed, 04 Jan 2017 03:52:03 GMT</pubDate>
            <atom:updated>2017-01-04T03:56:49.831Z</atom:updated>
            <content:encoded><![CDATA[<p>파이썬 클래스의 멤버함수를 아래와 같이 선언하지 않습니다. 일단 샘플코드를 보실까요?</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/59e2a952f3db97bed69f2810e5a0d443/href">https://medium.com/media/59e2a952f3db97bed69f2810e5a0d443/href</a></iframe><p>위 코드를 실행하면, 예상과는 다른 실행결과가 나옵니다. user2 의 articles 출력이 뭔가 이상하죠? [&#39;c&#39;, &#39;d&#39;] 만 나와야할터인데, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] 가 나옵니다.</p><p>이는 instance variable 선언방식이 잘못 되었기 때문입니다. 위 User 클래스에서의 articles 선언은 Class Variable 입니다. Instance Variable 선언이 아닙니다. 파이썬의 Instance Variable 선언문법은 Java나 C++ 에서의 그것과 다릅니다. 다음과 같이 클래스를 변경하시면 잘 동작합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4ccf9cb94d79196617671920a2696ada/href">https://medium.com/media/4ccf9cb94d79196617671920a2696ada/href</a></iframe><p>이제 다시 실행해보면 다음과 같이 의도한 대로 user 에서 [‘c&#39;, ‘d&#39;] 만 출력이 되는 것을 확인하실 수 있습니다.</p><p>다른 언어와 헷갈리지마세요. :)</p><p>AskDjango — <a href="http://facebook.com/groups/askdjango">http://facebook.com/groups/askdjango</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5668e399bd0e" width="1" height="1"><hr><p><a href="https://medium.com/python-with-askdjango/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-instance-variable-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0-5668e399bd0e">파이썬에서의 올바르게 Instance Variable 선언하기</a> was originally published in <a href="https://medium.com/python-with-askdjango">Python with AskDjango</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chapter 6. 가상 환경 사용하기 — 새롭게 정리]]></title>
            <link>https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-6-%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%83%88%EB%A1%AD%EA%B2%8C-%EC%A0%95%EB%A6%AC-30d5940de012?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/30d5940de012</guid>
            <category><![CDATA[장고]]></category>
            <category><![CDATA[파이썬]]></category>
            <category><![CDATA[django]]></category>
            <category><![CDATA[python]]></category>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Tue, 20 Dec 2016 04:12:17 GMT</pubDate>
            <atom:updated>2016-12-20T05:01:11.545Z</atom:updated>
            <content:encoded><![CDATA[<p>파이썬에서는 한 라이브러리에 대해서, 하나의 버전만 설치가 가능합니다. Django 를 예를 들어보죠. 현재 최신버전인 1.10.4 와 함께, LTS 버전인 1.8.17 을 같이 설치할 수 없습니다. 1.8.17 버전을 설치할려면 1.10.4 버전을 제거한 후에 다시 설치해야합니다. 다음 명령을 입력하면, 다른 버전의 Django 라이브러리를 제거한 후에, 지정된 버전을 새로이 설치합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/6fb7286c8abae547be9499ddf23854e9/href">https://medium.com/media/6fb7286c8abae547be9499ddf23854e9/href</a></iframe><p>한 컴퓨터에서 한 개의 프로젝트만 하는 것이 아니라, 다수의 프로젝트를 개발하게 됩니다. 고로 다수의 라이브러리 버전을 쓸 수 밖에 없게 되죠. 그런데 이런 제약이 … :-(</p><p>이를 해결하기 위해 가상환경이 필요합니다. “격리된 별도의 라이브러리 설치 디렉토리&quot; 를 뜻합니다. 다음 4가지 단계, 시나리오로 쓰시면 됩니다.</p><ol><li>새로운 가상환경을 생성합니다.</li><li>생성된 가상환경을 활성화합니다.</li><li>활성화된 가상환경 내에서 필요한 라이브러리를 설치하고, 개발을 진행합니다.</li><li>현재 활성화된 가상환경을 비활성화합니다.</li></ol><p>대개 가상환경은 관리 편의성을 위해 프로젝트 별로 하나씩 생성하시는 것이 좋습니다.</p><h3>virtualenv — 써드파티 라이브러리</h3><p>파이썬2에서는 가상환경 라이브러리가 기본 제공되지 않았기 때문에, 써드파티 라이브러리인 virtualenv 라이브러리가 필수입니다. 하지만 파이썬3에서는 <a href="https://docs.python.org/3/library/venv.html">venv</a> 라는 가상환경 라이브러리가 기본제공되기 때문에, virtualenv 를 쓰지 않으셔도 됩니다.</p><p>각 단계는 총 6단계로 구분할 수 있겠습니다. 간략한 설명은 아래에 있으며, 그 아래에 실제 명령 예시도 같이 준비해봤습니다.</p><p>단계1) virtualenv 라이브러리 설치</p><ul><li>pip 명령을 통해 virtualenv 라이브러리를 설치합니다.</li></ul><p>단계2) virtualenv 명령을 통한, 가상환경 생성</p><ul><li>virtualenv 라이브러리를 설치하면, virtualenv 명령행 프로그램이 설치됩니다.</li><li>가상환경을 생성하면, 명령을 수행한 디렉토리에 지정한 이름의 디렉토리가 생성이 됩니다. 가상환경 별로 디렉토리가 1개씩 생성이 됩니다.</li></ul><p>단계3) 생성된 가상환경 활성화</p><ul><li>가상환경 디렉토리를 생성만 해서는 그 가상환경을 쓸 수 없습니다. 활성화를 시켜줘야 합니다. “가상환경디렉토리/bin/activate” 스크립트를 통해 활성화시켜주실 수 있습니다. 이때 맥/리눅스 환경과 윈도우 환경에서는 명령이 다릅니다. 아래 예시를 참고해주세요.</li></ul><p>단계4) pip 명령을 통해, 필요한 라이브러리 설치</p><ul><li>pip 명령을 통해 필요한 라이브러리를 설치하는 것은 가상환경 사용유무에 상관없이 동일합니다. 단지 가상환경을 쓰면, 라이브러리가 가상환경 내에 설치가 된다는 것이 다릅니다.</li></ul><p>단계5) 현 가상환경 내에서 프로젝트 개발</p><ul><li>이제 가상환경도 셋업이 되었으니, 다른 프로젝트와 라이브러리 버전 충돌 걱정잆이, 열심히 개발하면 되겠죠? :D</li><li>개발 개발, Go~ Go~</li></ul><p>단계6) deactivate 명령으로 현재 가상환경 비활성화</p><ul><li>deactivate 명령으로 현재 가상환경을 비활성화시킬 수 있습니다. 비활성화시키면, 원래 기본 파이썬 환경으로 돌아옵니다.</li></ul><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d86dfb4184258f861ce931b1236d5349/href">https://medium.com/media/d86dfb4184258f861ce931b1236d5349/href</a></iframe><h3>venv — 파이썬3 기본제공 라이브러리</h3><p>virtualenv 와 비교해서, 가상환경 생성 명령만 다를 뿐, 활성화/설치/비활성화 부분은 동일합니다. 파이썬3에서는 pyvenv 명령이 맥/리눅스에서만 기본제공될 뿐, 윈도우에서는 pyvenv 명령을 제공되고 있지 않습니다. 대신 “python3 -m venv” 명령으로 동일하게 명령을 수행하실 수 있습니다. 이는 맥/리눅스에서도 사용가능한 명령입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ce91cbf7488687056d3d1b046d96400c/href">https://medium.com/media/ce91cbf7488687056d3d1b046d96400c/href</a></iframe><p>위와 같이 새로운 가상환경 디렉토리를 생성하신 후에는, 위의 virtualenv, 단계3 부터 동일하게 사용하시면 됩니다.</p><h3>가상환경 내에서 필요한 라이브러리 설치</h3><p>책에서 vDjBook 라는 이름의 가상환경을 만들었네요. 같이 만들어봅시다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/537/1*ZFMlbuq1rRbKxz6TvxOoBg.png" /><figcaption>윈도우에서 venv를 통해 vDjBook 가상환경 생성 및 활성화</figcaption></figure><p>윈도우에서 vDjBook 가상환경을 생성하고, 활성화시켰습니다. 각 명령행 앞에 <strong>(vDjBook)</strong> 가 붙으신 것을 확인하실 수 있습니다. deactivate 명령 (비활성화) 을 입력하시면, (vDjBook) 이 사라집니다.</p><p>이제 필요한 라이브러리를 설치해봅시다. 책에서 다음 라이브러리를 설치하네요.</p><ul><li>django</li><li>pytz</li><li>django-tagging</li><li>django-disqus</li><li>pillow</li></ul><p>위 라이브러리를 개별로 설치하셔도 되구요. 한 번의 명령으로 설치하실 수있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0ecSydHq1KDC3LpF7jik3Q.png" /><figcaption>pip install 명령에 다수의 팩키지명을 나열하여 설치</figcaption></figure><p>매번 프로젝트 세팅할 때마다 직접 pip install 명령에 팩키지를 일일이 나열하는 것이 너무 번거롭습니다. 이럴때에는 팩키지 명을 파일에 나열해두고 명령 한 번으로 설치하실 수 있습니다.</p><p>먼저 아래 내용으로 requirements.txt 파일을 생성합니다. 1줄에 팩키지명 하나씩 써주세요. 파일명은 다른 어떤 이름이 되어도 상관없습니다만, 일반적으로 많이 쓰이는 네이밍이 requirements.txt 입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ad0d35421b12e04ba40f35057bba3e5b/href">https://medium.com/media/ad0d35421b12e04ba40f35057bba3e5b/href</a></iframe><p>이제 “pip install -r requirements.txt” 명령으로 한 번에 필요한 팩키지를 설치하실 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*oz_2W_UYF2i_cgoUJ5-CGw.png" /><figcaption>설치할 팩키지를 파일에 나열한 후, 일괄 설치</figcaption></figure><h3>설치된 팩키지 목록을 표준출력으로 찍어보기</h3><p>가상환경과 무관하게, pip 에서는 현재 환경내에 설치된 팩키지 목록을 표준출력해주는 명령을 제공하고 있습니다. pip list 와 pip freeze 입니다.</p><p>pip 내 help 도움말 설명은 아래와 같습니다.</p><ul><li>pip list : List installed packages.</li><li>pip freeze : Output installed packages in requirements format.</li></ul><p>pip freeze 는 위 requirements.txt 에 바로 담을 수 있는 포맷으로 표준출력을 내어줍니다. 그러므로 “pip freeze &gt; requirements.txt” 명령으로 현재 라이브러리 목록을 requirements.txt 에 담아서, 나중에 “pip install -r requirements.txt” 명령으로 현재 라이브러리 버전과 동일한 환경을 구성하실 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/443/1*ROzzCIxJ2AA4AbLXBsloDA.png" /><figcaption>pip list 명령에 대한 출력결과</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/473/1*wUfstt7BccmmkvwXWhMO2w.png" /><figcaption>pip freeze 명령에 대한 출력결과</figcaption></figure><p>파이썬/장고 질문은 <a href="http://facebook.com/groups/askdjango">http://facebook.com/groups/askdjango</a> 를 통해 풀어가세요. <a href="http://festi.kr/youtube/">유튜브 채널</a>에도 놀러오세요. ;)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=30d5940de012" width="1" height="1"><hr><p><a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-6-%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%83%88%EB%A1%AD%EA%B2%8C-%EC%A0%95%EB%A6%AC-30d5940de012">Chapter 6. 가상 환경 사용하기 — 새롭게 정리</a> was originally published in <a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD">도서 — 파이썬 웹프로그래밍 실전편 (요약)</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[about]]></title>
            <link>https://medium.com/@allieuslee/about-52266b11f5c1?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/52266b11f5c1</guid>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Mon, 12 Dec 2016 01:18:42 GMT</pubDate>
            <atom:updated>2016-12-12T01:18:42.657Z</atom:updated>
            <content:encoded><![CDATA[<p>안녕하세요. Ask Django 를 운영하고 있는 이진석입니다. 주력으로 Django 개발을 하고 있으며, 서브로 Android/iOS 앱도 개발하고 있습니다.</p><ul><li>어썸마트 CTO</li><li>AskDjango Operator</li></ul><h3>운영 중인 서비스</h3><p>어썸마트</p><ul><li><strong>신선제품</strong> 위주의 1시간내 즉시 마트 배달 서비스. 기존 오프라인 마트들과 연계하여, 앱을 통한 장보기 서비스를 제공하고 있습니다. 마트 내 모든 물건을 앱을 통해 편리하게 장을 보실 수 있어요. :-)</li><li><a href="http://festi.kr/a/e5ab/">럭키할인마트 역삼점</a> (서비스 중), 럭키할인마트 방배점 (준비 중), 럭키할인마트 봉천점 (준비 중), 올스타마트 잠실 5개지점 (준비 중)</li></ul><p>Festi</p><ul><li><a href="https://festi.kr/festi/">Festi</a> : 개발 커뮤니티 플랫폼 서비스. 주로 Google Developer Group 의 행사를 지원하고 있습니다.</li></ul><p><a href="https://festi.kr/zlack/">Zlack</a> : 슬랙 초대장 발송 서비스</p><p>AskDjango : 파이썬/장고 교육 서비스</p><h3>강의 이력</h3><ul><li>2017. 01. 피로그래밍, 파이썬/장고 강의 : 6기 (예정)</li><li>2016. 11. 네이버 <a href="http://www.nits-corp.com/nit_110.html">NIT Service</a> 파이썬/장고 강의 (60시간)</li><li>2016.10. 서울대학교 피로그래밍 안드로이드 소모임 강의 (2학기, 60시간, 진행 중)</li><li>2016.09. <a href="http://nabi.or.kr/">아트센터 나비</a>. 2016 튜링 아카데미 생존 코딩 파이썬 (33시간, 진행 중)</li><li>2016.09. 서울대학교, 벤처경영학 연합전공, 파이썬 강의 (2학기, 진행 중)</li><li>2016.07. <a href="https://www.facebook.com/p.rogramming3k/">피로그래밍</a>, Django 강의 : 5기 (7주)</li><li>2016.06. <a href="http://nabi.or.kr/">아트센터 나비</a>. 2016 튜링 아카데미 생존 코딩 파이썬 (32시간)</li><li>2016.07. 한국 Microsoft, 한국컴퓨터학회 하계 워크샵. 파이썬/장고 강의 (16시간)</li><li>2016.07. AskDjango 서비스 차근차근 시작하기 : 1기 (3주)</li><li>2016.06. 한국 Microsoft, Django/Azure 세미나 (6시간) — <a href="https://www.facebook.com/MicrosoftDeveloper.Korea/posts/840075202763476">관련공지</a>, <a href="https://www.facebook.com/askdjango/posts/632936303536094">사진기록</a>, <a href="https://www.facebook.com/askdjango/videos/634463410050050/">Azure WebApp 배포 실습영상</a></li><li>2016.06. AskDjango 장고 차근차근 시작하기 : 4기 (4주)</li><li>2016.06. 장고걸스, Django Girls Seoul. 메타코치</li><li>2016.06. AskDjango 파이썬 차근차근 시작하기 : 3기 (12시간)</li><li>2016.05. AskDjango 아임포트와 함께 장고로 쇼핑몰 만들기 : 1기 (16시간)</li><li>2016.04. AskDjango 장고 차근차근 시작하기 : 3기 (4주)</li><li>2016.04. AskDjango 파이썬 차근차근 시작하기 : 2기 (12시간)</li><li>2016.03. 한국 Microsoft, 멜팅팟 세미나 “응답하라 파이썬”, Django 세션 진행 (<a href="https://www.facebook.com/askdjango/posts/599904070172651">녹화 동영상 확인하기</a>)</li><li>2016.03. 서울대학교, 벤처경영학 연합전공, 벤처창업 웹프로그래밍 2 강의 (2016년 1학기, 지속)</li><li>2016.03. AskDjango 장고 차근차근 시작하기 : 2기 (4주)</li><li>2016.02. AskDjango 파이썬 차근차근 시작하기 : 1기 (12시간)</li><li>2016.01. 피로그래밍, Django 강의 : 4기 (6주)</li><li>2016.01. AskDjango 장고 차근차근 시작하기 : 1기 (4주)</li><li>2015.10. 장고걸스, Django Girls Seoul. 메타코치</li><li>2015.07. 패스트캠퍼스 웹서비스개발 CAMP : 3기 강의 (8주)</li><li>2015.07. 피로그래밍, Django 강의 : 3기 (8주)</li><li>2015.04. 한국은행 파이썬 강의 (6주)</li><li>2014.12. 경북대 장고캠프 강의 (3일)</li></ul><h3>Ask Django</h3><p>장고 개발질문은 <a href="http://facebook.com/groups/askdjango">AskDjango 그룹</a>을 통해 해주세요.</p><p>AskDjango 소식은 <a href="http://facebook.com/askdjango">AskDjango 페이지</a>를 통해서 받아보실 수 있습니다.</p><p>여러분의 Python/Django PaceMaker 가 되어드리겠습니다. 감사합니다. :-)</p><p>문의 : ask@festi.kr</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=52266b11f5c1" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Android Firebase Realtime Database (작성 중)]]></title>
            <link>https://medium.com/askdjango-android/android-firebase-realtime-database-%EC%9E%91%EC%84%B1-%EC%A4%91-ce3d321b0655?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/ce3d321b0655</guid>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Fri, 02 Dec 2016 18:22:36 GMT</pubDate>
            <atom:updated>2016-12-02T18:22:36.549Z</atom:updated>
            <content:encoded><![CDATA[<p>이번 시간에는 Firebase Realtime Database를 활용하여 간단한 채팅 기능을 만들어보겠습니다. <a href="https://codelabs.developers.google.com/codelabs/firebase-android/">Firebase Android Codelab</a> 문서를 참고했습니다.</p><ul><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/fa3bcdb0d87bc4f763fb699768f0f64d7b06f633">MainActivity 레이아웃 개선 · askdjango/AndroidFirebaseSample@fa3bcdb</a></li><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/8b44a238522a0c70a356d17d74b6625c264f9521">MainActivity 레이아웃을 채팅 스타일로 변경 · askdjango/AndroidFirebaseSample@8b44a23</a></li><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/e152b185ae06db35d50c37d2fb745659d1bc6dc4">Firebase Realtime Database 의 /chat_messages 경로와 RecyclerView 연동 · askdjango/AndroidFirebaseSample@e152b18</a></li><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/36ae4a838a825324f4fe407068920a2f95e24266">새로운 채팅 메세지를 Firebase Realtime Database의 /chat_messages 경로에 추가 · askdjango/AndroidFirebaseSample@36ae4a8</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ce3d321b0655" width="1" height="1"><hr><p><a href="https://medium.com/askdjango-android/android-firebase-realtime-database-%EC%9E%91%EC%84%B1-%EC%A4%91-ce3d321b0655">Android Firebase Realtime Database (작성 중)</a> was originally published in <a href="https://medium.com/askdjango-android">Android Firebase</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Firebase Cloud Messaging 과 함께 푸쉬 지원]]></title>
            <link>https://medium.com/askdjango-android/firebase-cloud-messaging-%EA%B3%BC-%ED%95%A8%EA%BB%98-%ED%91%B8%EC%89%AC-%EC%A7%80%EC%9B%90-717fa1945d2?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/717fa1945d2</guid>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Fri, 02 Dec 2016 15:24:10 GMT</pubDate>
            <atom:updated>2016-12-02T15:24:10.772Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://medium.com/askdjango-android/firebase-auth-와-함께-구글-페이스북-로그인-6ce65c124e5">Firebase Auth 와 함께 구글/페이스북 로그인</a>에 이은 포스팅입니다. FCM (Firebase Cloud Messaging) 을 적용하여 앱에 푸쉬를 지원해봅시다.</p><p><a href="https://firebase.google.com/docs/cloud-messaging/android/client?hl=en">Set Up a Firebase Cloud Messaging Client App on Android</a> 문서를 참고했습니다.</p><h3>About FCM Message</h3><p><a href="https://firebase.google.com/docs/cloud-messaging/concept-options?hl=en">About FCM Message</a> 문서를 참고했습니다.</p><ul><li>notification 키를 설정할 때 : FCM 이 앱을 대신하여 앱이 백그라운드 상태일 때에만 메세지를 자동으로 표시합니다. 포그라운드 상태일 때에는 FirebaseMessagingService 의 onMessageReceived 콜백이 호출됩니다.</li><li>data 키를 설정할 때 : 클라이언트 앱에서 직접 데이터 메세지를 처리토록 합니다. 백그라운드/포그라운드 여부에 상관없이 FirebaseMessagingService 의 onMessageReceived 콜백이 호출됩니다. data 키만 설정하셔야 합니다. notification 키를 같이 설정하시면 콜백이 호출되지 않습니다.</li></ul><h3>앱 구현</h3><p>주요 변경내역은 다음과 같습니다.</p><ul><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/a7d2872ab9af4420afc97707078574bb511eb7af">Firebase 노티를 받아, Toast 메세지를 띄움 · askdjango/AndroidFirebaseSample@a7d2872</a></li><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/9cc0e2bc088f429c892998acd80771bf084d40cf">FCM data key 에 알림메세지를 보냈을 때에도 Toast 메세지를 띄우도록 변경 · askdjango/AndroidFirebaseSample@9cc0e2b</a></li><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/b1a6ae3c19e9976afa4933069b128d94f69e6dbf">FCM Token 이 변경될 때, 로그메세지로 출력 · askdjango/AndroidFirebaseSample@b1a6ae3</a></li></ul><p>Firebase Cloud Messaging 의 주요 클래스는 다음 2가지입니다.</p><ul><li><em>FirebaseMessagingService</em> : FCM 메세지를 받을 때 <em>onMessageReceived</em> 콜백이 호출됩니다. Service 이므로 <em>AndroidManifest.xml</em> 에 등록이 필요합니다.</li><li><em>FirebaseInstanceIdService</em> : FCM Token 이 변경될 때 <em>onTokenRefresh</em> 콜백이 호출됩니다. 토큰은 <em>FirebaseInstanceId.getInstance().getToken()</em> 을 통해 획득할 수 있습니다.</li></ul><h3>푸쉬 요청하기</h3><p>Firebase Console 에서 푸쉬를 전송하면 필히 notification key 를 설정할 수 밖에 없습니다. 그래서 앱이 실행 중 (Foreground) 일 때에만 onMessageReceived 콜백을 받을 수 있습니다.</p><p>직접 파이썬을 통해 푸쉬 요청을 해보겠습니다. 다음은 requests 라이브러리를 활용한 푸쉬요청 예제입니다. 예제의 server_key 는 Firebase Console 의 Project Settings &gt; CLOUD MESSAGING 탭에서 확인하실 수 있습니다. token 은 유저별 토큰이며, 앱을 실행하시면 디버그 콘솔을 통해 확인하실 수 있습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5a3d34af4fcc38620bd6bb9465c930ce/href">https://medium.com/media/5a3d34af4fcc38620bd6bb9465c930ce/href</a></iframe><p>코드에 server_key, token 값을 설정하시고, message_body 에 전송하고자 하는 메세지를 넣어주세요. 앱 실행 여부에 상관없이 Toast 로 메세지가 출력됨을 확인하실 수 있습니다.</p><p>보다 자세한 FCM 프로토콜은 <a href="https://firebase.google.com/docs/cloud-messaging/http-server-ref">Firebase 클라우드 메세징 HTTP 프로토콜</a> 문서를 참고해보세요.</p><h3>Toast 메세지 스타일 개선</h3><p>기본 Toast 메세지는 스타일이 너무 밋밋하므로 tastytoast 라이브러리를 통해 스타일을 개선해보겠습니다.</p><p><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/8ce04fabb1a132ce3a9b6bc60ef661f6e443b59a">tastytoast 라이브러리를 통해 푸쉬 Toast 스타일 개선 · askdjango/AndroidFirebaseSample@8ce04fa</a></p><p>백그라운드에서 다음과 같이 Toast 로 푸쉬가 잘 뜹니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/732/1*nUC2Q_JymLnPdtCwTZFX_Q.png" /><figcaption>tastytoast 를 통해 푸쉬 메세지를 보여줍니다.</figcaption></figure><p>감사합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=717fa1945d2" width="1" height="1"><hr><p><a href="https://medium.com/askdjango-android/firebase-cloud-messaging-%EA%B3%BC-%ED%95%A8%EA%BB%98-%ED%91%B8%EC%89%AC-%EC%A7%80%EC%9B%90-717fa1945d2">Firebase Cloud Messaging 과 함께 푸쉬 지원</a> was originally published in <a href="https://medium.com/askdjango-android">Android Firebase</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Firebase Auth 와 함께 구글/페이스북 로그인]]></title>
            <link>https://medium.com/askdjango-android/firebase-auth-%EC%99%80-%ED%95%A8%EA%BB%98-%EA%B5%AC%EA%B8%80-%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B6%81-%EB%A1%9C%EA%B7%B8%EC%9D%B8-6ce65c124e5?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/6ce65c124e5</guid>
            <category><![CDATA[askdjango]]></category>
            <category><![CDATA[android]]></category>
            <category><![CDATA[firebase]]></category>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Fri, 02 Dec 2016 10:52:47 GMT</pubDate>
            <atom:updated>2016-12-02T14:59:26.495Z</atom:updated>
            <content:encoded><![CDATA[<p>Google Firebase 에서는 Auth SDK 를 제공해주고 있습니다. 페이스북 로그인과 Firebase Auth 를 연동해보도록 하겠습니다. 공식문서인 <a href="https://firebase.google.com/docs/auth/android/facebook-login?hl=en">Authenticate Using Facebook Login on Android</a>를 참고했습니다.</p><p>적용 시나리오는 다음과 같습니다.</p><ol><li>앱에 구글/페이스북 로그인 적용</li><li>구글/페이스북 로그인이 되면, 관련 Credential 정보를 Firebase Auth 로 넘겨서 인증처리</li></ol><p>본 문서의 전체 소스코드는 <a href="https://github.com/askdjango/AndroidFirebaseSample">https://github.com/askdjango/AndroidFirebaseSample</a> 에서 확인하실 수 있습니다.</p><p>자. 이제 시작해볼까요? ;)</p><h3>안드로이드 프로젝트 생성</h3><p>Android Studio 를 통해 새로운 프로젝트를 생성해주세요. 페이스북 로그인 지원을 위해 Minimum SDK 는 API 15 이상으로 해주세요. 생성한 프로젝트의 팩키지명을 메모해두세요.</p><h3>Firebase Console 에서 새 프로젝트 생성하기</h3><p>먼저 다음 명령으로 안드로이드 디버그 keystore에 대한 sha1 fingerprint (인증서 지문) 와 키해시를 확인해주세요.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2c9c4ad4d0febc310bbdfb48ddd8c92d/href">https://medium.com/media/2c9c4ad4d0febc310bbdfb48ddd8c92d/href</a></iframe><p>sha1 FingerPrint 는 <em>1A:5B:24:BD:EF:FE:6D:23:A5:DA:62:6A:2C:95:78:2D:77:63:E7:F7</em> 과 같은 형식을 가지고 있으며, 키해시는 <em>Glskve/+bSOl2mJqLJV4LXdj5/c=</em> 와 같은 값을 가지고 있습니다. 각자 이 값이 다릅니다. 제 값을 카피해서 쓰지마세요. 로그인이 제대로 수행되지 않을 것입니다.</p><blockquote>윈도우에서는 위 명령을 수행하기 위해 openssl 프로그램을 따로 설치하셔야 합니다. 혹은 <a href="https://gist.github.com/allieus/5b6397058296e42775f494bff752d89f">제가 직접 만든 파이썬 스크립트</a>를 통해서도 확인이 가능합니다.</blockquote><p>이제 <a href="https://console.firebase.google.com/">https://console.firebase.google.com/</a> 에서 “새 프로젝트 만들기&quot; 를 수행해주세요. 프로젝트 이름과 국가/지역을 요구합니다. 저는 “AndroidFirebaseSample” 과 “대한민국 (South Korea)&quot;을 입력했습니다.</p><p>AndroidFirebaseSample 프로젝트에 대한 Firebase Console 에서 Overview 의 “Add Firebse to your Android app” 메뉴를 선택해주세요. 다음 창에서 Package Name 과 Debug singing certificate SHA-1 을 요구합니다. Package Name 에는 위에서 생성한 안드로이드 프로젝트의 팩키지명을 써주세요. 저는 kr.festi.androidfirebasesample 를 입력했습니다. 그리고 Debug singing certificate SHA-1 에는 위 FingerPrint 값을 적용해주세요. 저는 1A:5B:24:BD:EF:FE:6D:23:A5:DA:62:6A:2C:95:78:2D:77:63:E7:F7 을 입력했습니다. 이제 Add App 을 클릭하시면, 화면이 전환되며 google-services.json 파일이 다운로드됩니다. 이 파일은 안드로이드 프로젝트 내 app 디렉토리로 복사해주세요.</p><p>안드로이드 프로젝트에 구글서비스 관련 플러그인을 추가해봅시다. build.gradle 과 app/build.gradle 파일을 <a href="https://github.com/askdjango/AndroidFirebaseSample/commit/36b5480a5442c52068fae8e514e06771e955cca2#diff-c197962302397baf3a4cc36463dce5eaR9">링크</a>에서 같이 수정해주세요.</p><h3>구글 로그인 통합하기</h3><p><a href="https://firebase.google.com/docs/auth/android/google-signin?hl=en">Authenticate Using Google Sign-In on Android</a> 문서와 <a href="https://developers.google.com/identity/sign-in/android/sign-in?hl=ko">Integrating Google Sign-in into Your Android App</a> 문서를 참고했습니다.</p><p>Firebase Console 의 인증 (Authentication) 섹션 로그인 방법 (SIGN-IN METHOD) 탭에서 Google 로그인을 활성화 (Enabled) 시켜주세요.</p><p>관련 코드는 다음 변경내역에서 확인하실 수 있습니다.</p><ul><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/2b856ad618314ad4776141407d2b249caeaf629f">Firebase Auth를 통해 로그인 여부 체크 · askdjango/AndroidFirebaseSample@2b856ad</a></li><li><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/1cb5f776fe889a91b60b2242db31925f8aa8d782">구글로그인을 Firebase Auth와 연동 · askdjango/AndroidFirebaseSample@1cb5f77</a></li></ul><p>다음 순서로 이뤄집니다.</p><ol><li>Firebase Auth 라이브러리 및 구글 플레이서비스 Auth 라이브러리 추가 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/2b856ad618314ad4776141407d2b249caeaf629f#diff-39e7d8c00954e920b98e7636f0ac30b2R29">소스</a>)</li><li>MainActivity 의 onCreate 에서 Firebase Auth 인증여부를 검사 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/2b856ad618314ad4776141407d2b249caeaf629f#diff-93f9dab269cfc581fa1f35866f1acecc">소스</a>)</li><li>Android Studio 의 Empty Activity 템플릿으로 SignInActivity 추가</li><li>MainActivity 에서 로그인이 필요할 때, SignInActivity 를 띄웁니다. (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/1cb5f776fe889a91b60b2242db31925f8aa8d782#diff-93f9dab269cfc581fa1f35866f1aceccR61">소스</a>)</li><li>SignInActivity 의 레이아웃에 구글 로그인 버튼을 배치합니다. (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/1cb5f776fe889a91b60b2242db31925f8aa8d782#diff-e9f9b5cf3b0a66eb79e3234f31dbe113">소스</a>)</li><li>SignInActivity 코드에서 구글 로그인과 Firebase Auth 인증을 연동합니다. (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/1cb5f776fe889a91b60b2242db31925f8aa8d782#diff-1ebbb02e472f9a3898658a40235daabf">소스</a>) 로그인이 되면 SignInActivity 를 종료하고 MainActivity 를 다시 띄웁니다.</li></ol><h3>페이스북 로그인 통합하기</h3><p><a href="https://firebase.google.com/docs/auth/android/facebook-login?hl=en">Authenticate Using Facebook Login on Android</a> 문서와 <a href="https://developers.facebook.com/docs/facebook-login/android">Android용 Facebook 로그인</a> 문서를 참고했습니다.</p><p><a href="https://developers.facebook.com/">Facebook for developers</a> 사이트에서 다음 순서로 새로운 페이스북 앱을 생성/설정해주세요.</p><ol><li>새로운 앱을 생성해주세요. 표시 이름, 이메일, 카테고리를 입력해주세요.</li><li>앱 설정 -&gt; 기본 설정에서 앱ID와 앱시크릿코드를 메모해두세요. Firebase Console 에서 페이스북 로그인 설정화면에서 입력할 것입니다.</li><li>앱 설정 &gt; 기본 설정 &gt; 플랫폼 추가 &gt; Android 를 선택해주세요. 조금 전에 생성한 안드로이드 프로젝트의 팩키지이름과 메인 액티비티의 이름, 그리고 위에서 조사한 키해시를 입력해주세요. SSO 옵션도 필히 켜주셔야 합니다. 변경내용저장을 눌러주세요.</li><li>아직 안드로이드 앱을 Google Play 스토어에 올리지않았기 때문에, 이 팩키지이름을 사용할 것인지 물어보는 확인창이 뜰 것입니다. “이 팩키지 이름 사용&quot; 을 선택해주세요.</li><li>개발자 이외에 다른 사람들이 앱을 이용할 수 있도록 할려면, 앱 검수 페이지에서 앱을 공개상태로 전환해주세요.</li></ol><p>Firebase Console 의 인증 (Authenciation) 섹션 로그인 방법 (SIGN-IN-METHOD) 탭에서 Facebook 로그인에서 페이스북 앱ID와 앱시크릿코드을 입력하시고 활성화 (Enabled) 시켜주세요.</p><p>이제 Android Studio로 돌아가서, 페이스북 로그인 관련 설정을 해줍시다. 주요 변경내역은 다음과 같습니다.</p><p><a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346">페이스북 로그인을 Firebase Auth와 연동 · askdjango/AndroidFirebaseSample@456e0a3</a></p><p>다음 순서로 이뤄집니다.</p><ol><li>app/build.gradle 에 facebook sdk 라이브러리 추가 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-39e7d8c00954e920b98e7636f0ac30b2R31">소스</a>)</li><li>페이스북 앱ID를 strings.xml 리소스에 추가 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-01dafb3fd0217441330103cfc8300094R3">소스</a>)</li><li>방금 추가한 앱ID를 페이스북 SDK에서 사용할 수 있도록 AndroidManifest.xml 파일에 meta-data 추가 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-c8cc2dd42271f2bf39c6aa81eb6a5529R21">소스</a>)</li><li>커스텀 Application 에서 페이스북 SDK 초기화 수행 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-6f4a7d7abc4cc50ced7b0ca5b5b1470c">소스</a>)</li><li>커스텀 Application 을 현재 앱의 Application 으로 지정 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-c8cc2dd42271f2bf39c6aa81eb6a5529R11">소스</a>)</li><li>SignInActivity 의 레이아웃에 페이스북 로그인 버튼 배치 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-e9f9b5cf3b0a66eb79e3234f31dbe113">소스</a>)</li><li>SignInActivity 내에서 페이스북 로그인 관련 처리 및 Firebase Auth 와 연동 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-1ebbb02e472f9a3898658a40235daabf">소스</a>)</li><li>페이스북 로그아웃 처리 추가 (<a href="https://github.com/askdjango/AndroidFirebaseSample/commit/456e0a366a23eea8990dde95e63986a97d08a346#diff-93f9dab269cfc581fa1f35866f1aceccR48">소스</a>)</li></ol><h3>유저 프로필 이미지 띄우기</h3><p>인증의 마지막 단계로 로그인한 유저의 프로필 이미지가 있을 경우, glide 라이브러리를 이용하여 이미지를 띄워보겠습니다. 소스코드는 짧으니 <a href="https://github.com/askdjango/AndroidFirebaseSample/commit/18608d3ddd7f476d417b74d5992824cb458e6d92">링크</a>를 참고해서 띄워보세요.</p><p>본 문서에 이어, 다음에는 Firebase Realtime Database 를 다뤄보겠습니다. 감사합니다.</p><p>—</p><p>파이썬/장고관련 궁금증은 <a href="http://facebook.com/groups/askdjango">http://facebook.com/groups/askdjango</a> 를 통해 풀어가세요. <a href="http://festi.kr/youtube">유튜브 채널</a>에도 놀러오세요. ;)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6ce65c124e5" width="1" height="1"><hr><p><a href="https://medium.com/askdjango-android/firebase-auth-%EC%99%80-%ED%95%A8%EA%BB%98-%EA%B5%AC%EA%B8%80-%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B6%81-%EB%A1%9C%EA%B7%B8%EC%9D%B8-6ce65c124e5">Firebase Auth 와 함께 구글/페이스북 로그인</a> was originally published in <a href="https://medium.com/askdjango-android">Android Firebase</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chapter 3. 실전 프로그램 개발 — Blog 앱]]></title>
            <link>https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-3-%EC%8B%A4%EC%A0%84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C-blog-%EC%95%B1-24c8ba54cdf8?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/24c8ba54cdf8</guid>
            <category><![CDATA[장고]]></category>
            <category><![CDATA[django]]></category>
            <category><![CDATA[python]]></category>
            <category><![CDATA[파이썬]]></category>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Thu, 01 Dec 2016 12:11:41 GMT</pubDate>
            <atom:updated>2016-12-02T10:57:12.184Z</atom:updated>
            <content:encoded><![CDATA[<p>새롭게 blog앱을 생성하고, 포스팅을 등록하고 조회하는 기능을 만들어봅니다.</p><h3>blog 앱 생성 및 모델/마이그레이션</h3><p>다음 순서로 진행합니다.</p><ul><li>blog 앱 생성 및 settings.py 에 등록</li><li>blog.models.Post 모델을 작성하고 admin 에 등록</li><li>blog 앱에 대해서 마이그레이션을 수행하여, 데이터베이스에 반영</li></ul><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/36d96362ab2c8fce1aa9c47f49655788/href">https://medium.com/media/36d96362ab2c8fce1aa9c47f49655788/href</a></iframe><p>Post모델에 대해 다음 총 4가지 필드가 사용되었습니다.</p><ul><li>models.CharField : 길이제한이 있는 문자열</li><li>models.TextField : 길이제한이 없는 문자열. 기본위젯으로 여러줄 문자열을 입력할 수 있는 textarea가 지정됩니다.</li><li>models.SlugField : Slug는 핵심 키워드 만을 조합해서 긴 제목을 간단하게 만드는 것을 뜻합니다. 검색에 용이한 URL을 만들기위해 많이 쓰입니다. SlugField는 CharField를 상속받았으며, <a href="http://django/core/validators/">slug</a> (정규표현식 패턴 : ^[-a-zA-Z0–9_]+\Z)혹은 <a href="https://github.com/django/django/blob/master/django/core/validators.py#L251">unicode_slug</a> (정규표현식 : ^[-\w]+\Z)유효성검사 루틴이 적용된 필드입니다.</li><li>models.DateTimeField : 특정 날짜/시간</li></ul><p>책에서는 Post 모델의 Meta 정보에 verbose_name, verbose_name_plural, db_table 정보가 추가로 더 등록이 되어있습니다. 이 설정은 디폴트값을 이용하셔도 무방합니다. ordering 은 기본정렬필드를 지정하는 것입니다. 다수 필드를 지정하여 1차정렬기준, 2차정렬기준 등을 설정할 수 있습니다. ‘-modify_date’ 로 지정하였으므로 modify_date 필드에 대해 내림차순 정렬이 기본 정렬이 됩니다. 이 정렬은 차후 QuerySet 의 order_by 를 통해 변경할 수 있습니다.</p><p>PostAdmin에서는 다음 4가지 옵션이 사용되었습니다.</p><ul><li><a href="https://docs.djangoproject.com/en/1.10/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display">list_display</a> : admin 목록화면에서 출력될 필드를 지정합니다. 주로 관련 모델의 필드를 지정하며, 모델의 멤버함수 혹은 Admin 의 멤버함수를 지정할 수도 있습니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter">list_filter</a> : admin 목록화면에서 필터링 옵션으로 주어질 필드를 지정합니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields">search_fields</a> : 목록화면에서 검색에 쓰일 필드를 지정합니다. 이는 데이터베이스에서 ILIKE 쿼리로 수행됩니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/contrib/admin/#django.contrib.admin.ModelAdmin.prepopulated_fields">prepopulated_fields</a> : 생성/수정폼에서 javascript를 통해 지정필드로부터 값을 자동생성하여 채워줍니다.</li></ul><h3>URLConf 골격 만들기</h3><p>현재 “프로젝트/urls.py” 에 있는 각 장고앱에 대한 URL 정의를 앱 별로 분기시켜봅시다. 이때 django.conf.urls.include 를 사용하며, url name 중복/충돌을 막기위해 namespace도 지정합니다.</p><p>장고앱별로 뷰/모델/템플릿/static 등이 다 나눠져있는데, URLConf만 따로 있는 것은 어울리지 않습니다. 뷰와 URLConf는 한쌍이므로, 앱 안에 같이 모아두는 것이 보다 재사용성높은 (Reusable) 장고앱이 될 것입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8681c41e8daf6ac73e022a069e1e8e32/href">https://medium.com/media/8681c41e8daf6ac73e022a069e1e8e32/href</a></iframe><p>장고 내 빌트인 CBV API 는 <a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/">Built-in class based views API</a>를 통해 확인하실 수 있습니다.</p><p><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/">Generic display views</a>는 다음 2가지입니다. 관련 링크의 API문서에 자세한 설명이 있으니, 꼭 열어보세요.</p><ul><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#listview">ListView</a> : 지정 모델에 대한 전체 목록을 조회할 수도 있으며, get_queryset 멤버함수를 재정의하여, 특정조건의 목록만 조회할 수도 있습니다. paginate_by 옵션을 주어 페이징처리도 가능합니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_list.html” 입니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#detailview">DetailView</a> : 지정 모델에 대한 pk를 인자로 받으며, 지정 pk의 모델 인스턴스에 대한 Detail 내용을 보여줍니다. get_queryset 멤버함수를 재정의하여, QuerySet 조건을 엄격하게 지정할 수도 있습니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_detail.html” 입니다.</li></ul><p><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/">Generic date views</a>는 다음 7가지 입니다. 관련 링크의 API문서에 자세한 설명이 있으니, 꼭 열어보세요.</p><ul><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#archiveindexview">ArchiveIndexView</a> : 지정 날짜필드 역순으로 정렬된 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive.html” 입니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#yeararchiveview">YearArchiveView</a> : 관련 URL Rule에서 year 인자를 받아, 지정 년도에 해당되는 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive_year.html” 입니다. 템플릿에 previous/next year 값을 제공해줍니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#montharchiveview">MonthArchiveView</a> : 관련 URL Rule 에서 year/month 인자를 받아, 지정 년/월에 해당되는 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive_month.html” 입니다. 템플릿에 previous/next year/month 값을 제공해줍니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#weekarchiveview">WeekArchiveView</a> : 책에서 언급되지 않았습니다. 관련 URL Rule 에서 year/week 인자를 받아, 지정 년/주에 해당되는 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive_week.html” 입니다. 템플릿에 previous/next year/week 값을 제공해줍니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#dayarchiveview">DayArchiveView</a> : 관련 URL Rule 에서 year/month/day 인자를 받아, 지정 년/월/일에 해당되는 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive_day.html” 입니다. 템플릿에 previous/next year/month/day 값을 제공해줍니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#todayarchiveview">TodayArchiveView</a> : 오늘 날짜에 해당되는 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive_day.html” 입니다.</li><li><a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#datedetailview">DateDetailView</a> : 특정 날짜에 해당되는 목록을 보여줍니다. 디폴트 템플릿경로는 “앱이름/모델명소문자_archive_date.html” 입니다.</li></ul><p>3장의 주요내용을 모두 살펴봤습니다.</p><p>감사합니다.</p><p>파이썬/장고 질문은 <a href="http://facebook.com/groups/askdjango">http://facebook.com/groups/askdjango</a> 를 통해 풀어가세요. <a href="http://festi.kr/youtube/">유튜브 채널</a>에도 놀러오세요. ;)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=24c8ba54cdf8" width="1" height="1"><hr><p><a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-3-%EC%8B%A4%EC%A0%84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C-blog-%EC%95%B1-24c8ba54cdf8">Chapter 3. 실전 프로그램 개발 — Blog 앱</a> was originally published in <a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD">도서 — 파이썬 웹프로그래밍 실전편 (요약)</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chapter 5. 기존 앱 개선하기 — Bookmark 앱, Blog 앱]]></title>
            <link>https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-5-%EA%B8%B0%EC%A1%B4-%EC%95%B1-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-bookmark-%EC%95%B1-blog-%EC%95%B1-4aaa35ba7327?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/4aaa35ba7327</guid>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Thu, 01 Dec 2016 11:57:24 GMT</pubDate>
            <atom:updated>2016-12-02T10:57:30.208Z</atom:updated>
            <content:encoded><![CDATA[<p>Chapter 4 에서 home.html 템플릿에 대한 부모 템플릿 base.html 템플릿을 bookmark/blog 앱에도 적용해봅시다. 이를 위해 bookmark/blog 앱 내 템플릿들이 base.html 템플릿을 상속받도록 변경하시면 됩니다.</p><p>장고 관련해서 특별한 내용은 없습니다. 각 구성에 맞춰 템플릿 마크업을 수정하시면 되겠습니다. 책을 참고하여 완성해보세요.</p><p>감사합니다.</p><p>파이썬/장고 질문은 <a href="http://facebook.com/groups/askdjango">http://facebook.com/groups/askdjango</a> 를 통해 풀어가세요. <a href="http://festi.kr/youtube/">유튜브 채널</a>에도 놀러오세요. ;)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4aaa35ba7327" width="1" height="1"><hr><p><a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-5-%EA%B8%B0%EC%A1%B4-%EC%95%B1-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-bookmark-%EC%95%B1-blog-%EC%95%B1-4aaa35ba7327">Chapter 5. 기존 앱 개선하기 — Bookmark 앱, Blog 앱</a> was originally published in <a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD">도서 — 파이썬 웹프로그래밍 실전편 (요약)</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chapter 4. 프로젝트 첫 페이지 만들기]]></title>
            <link>https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%B2%AB-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0-50a181dc6796?source=rss-315f096daae6------2</link>
            <guid isPermaLink="false">https://medium.com/p/50a181dc6796</guid>
            <dc:creator><![CDATA[Chinseok Lee]]></dc:creator>
            <pubDate>Thu, 01 Dec 2016 11:50:50 GMT</pubDate>
            <atom:updated>2016-12-02T10:57:21.329Z</atom:updated>
            <content:encoded><![CDATA[<p>사이트 첫 페이지를 HomeView CBV를 통해 만들어봅시다.</p><p>다음과 같이 코딩하여 / 경로에 대해 HomeView CBV에서 처리토록 해봅시다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/02da98c0e4b394367940983af31af062/href">https://medium.com/media/02da98c0e4b394367940983af31af062/href</a></iframe><p>위 코드를 통해 / 로 접근하면 HomeView CBV 가 요청을 처리하게 되며, 이때 home.html 템플릿이 쓰여지게 됩니다.</p><p>Django Template 에서는 상속 (Inheritance) 기능이 있습니다. 여러 템플릿에 걸쳐 중복된 내용이 있을 때, 이를 상속 기능을 통해 중복을 없앨 수 있습니다.</p><p>base.html 템플릿을 먼저 만들어서 home.html 에서 상속받도록 해보겠습니다. 템플릿 상속에서는 부모 템플릿을 상속받은 자식 템플릿은 부모의 block 영역에 대해서 재정의만 가능합니다. 부모의 block 이외에 새로운 block 을 만든다거나 block 밖의 코드는 무시됩니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ac9006a0b4546d39749c74035e911d27/href">https://medium.com/media/ac9006a0b4546d39749c74035e911d27/href</a></iframe><p>base.html 파일에 대해 static Template Tag 를 쓰기 위해 {% load staticfiles %} 를 먼저 수행했습니다. 이는 파이썬에서의 import 와 유사합니다. 그리고 static 파일에 대한 URL를 생성하기 위해 static Template Tag를 호출했습니다 static Template Tag 에서는 내부적으로 인자로 넘긴 문자열 앞에 settings.STATIC_URL 을 Prefix 로 붙여줍니다.</p><p>새롭게 css/base.css 파일을 생성했으며, 간단히 웹사이트 배경색은 노랑색으로 적용을 해봤습니다.</p><p>4장에 대한 기본 개념 설명이 끝났습니다. 이외에는 장고 외적으로 html/css 부분입니다. 책을 참고하시어 완성해보시기 바랍니다.</p><p>감사합니다.</p><p>파이썬/장고 질문은 <a href="http://facebook.com/groups/askdjango">http://facebook.com/groups/askdjango</a> 를 통해 풀어가세요. <a href="http://festi.kr/youtube/">유튜브 채널</a>에도 놀러오세요. ;)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=50a181dc6796" width="1" height="1"><hr><p><a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD/chapter-4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%B2%AB-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0-50a181dc6796">Chapter 4. 프로젝트 첫 페이지 만들기</a> was originally published in <a href="https://medium.com/%EB%8F%84%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%A4%EC%A0%84%ED%8E%B8-%EC%9A%94%EC%95%BD">도서 — 파이썬 웹프로그래밍 실전편 (요약)</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>