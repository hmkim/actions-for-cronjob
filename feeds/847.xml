<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-5736677393037461528</id><updated>2019-01-27T18:25:17.064+09:00</updated><category term="agile"/><category term="Cloud"/><category term="개발문화"/><category term="DevOps"/><category term="Java"/><category term="InfoQ"/><category term="함수형언어"/><category term="DDD"/><category term="모던자바"/><category term="BigData"/><category term="TDD"/><category term="coding tip"/><category term="서평"/><category term="Modeling"/><category term="QCon"/><category term="Scaling"/><category term="Docker"/><category term="JavaEE"/><category term="Machine Learning"/><category term="TiDD"/><category term="jenkins"/><category term="scrum"/><category term="데이터베이스"/><category term="데이터베이스 튜닝"/><category term="반복형개발"/><category term="스킬업"/><category term="원격관리"/><category term="BDD"/><category term="CI"/><category term="Consul"/><category term="Framework"/><category term="SI이노베이션"/><category term="Scala"/><category term="Terraform"/><category term="android"/><category term="ios"/><category term="kotlin"/><category term="microservice"/><category term="mob programming"/><category term="pair programming"/><category term="startup"/><category term="swift"/><category term="개발자의 공부법"/><category term="병렬처리"/><category term="보안"/><category term="영어공부"/><category term="인공지능"/><category term="자연어처리"/><category term="자체개발"/><category term="잡담"/><category term="초보 개발자"/><category term="회고"/><title type='text'>MORE AGILE</title><subtitle type='html'>보다 나은 개발자의 삶을 위하여</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://www.moreagile.net/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default?start-index=26&amp;max-results=25'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>66</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-8845984590238051862</id><published>2019-01-27T09:26:00.001+09:00</published><updated>2019-01-27T09:43:14.402+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="개발문화"/><category scheme="http://www.blogger.com/atom/ns#" term="스킬업"/><title type='text'>소프트웨어 엔지니어 육성법으로서 패턴 언어의 가능성</title><content type='html'>&lt;h4&gt;디자인 패턴의 기원&lt;/h4&gt;일반적으로 GoF의 디자인 패턴이라는 이름으로 잘 알려진 디자인 패턴은 원래 건축가 크리스토퍼 알렉산더가 설계자와 사용자의 단절을 해체하기 위해 도입한 패턴 언어에 그 뿌리를 두고 있다.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;여러 단어들이 모여 한 문장이 되고, 여러 문장들이 모여 하나의 글이 되듯이, 여러 패턴이 모여 하나의 패턴 언어가 되어 사람들이 기분 좋다고 느끼는 환경에 대한 분석을 가능하게 한다. 크리스토퍼 알렉산더에 의하면 각각의 패턴은 세계 각국의 아름다운 도시 및 주거 공간에 공통적으로 적용되는 보편적인 것으로, 예전에는 누구나 알고 있었던 것이지만 급격한 근대화로 인한 현대 도시 계획이 진행되면서 점차 잊혀져 버린 것이라고 한다. 각각의 패턴은 현대 도시 계획의 발상과는 정반대의 발상을 갖고 있으며, 인간적 척도 요소가 중시되고 있다.&lt;br /&gt;바람직한 사회 전체를 한 번에 설계 및 건설 하는 것은 불가능하지만, 각각의 패턴에 따라 하나 하나의 진행되는 과정에서 일종의 커뮤니티를 형성하여 간다. 이러한 각각의 패턴을 찾아내는 것은 해당 도시 및 주거 공간에 거주하는 주민 자신이며, 건축가는 그들이 패턴을 찾아가는 것을 도와주고, 실제 모양이 되도록 설계 및 시공 감리를 하는 역할을 맡는다. &amp;nbsp; &amp;nbsp; 출전: &lt;a href=&quot;http://xn--ko-hw7j.wikipedia.org/wiki/%ED%8C%A8%ED%84%B4_%EC%96%B8%EC%96%B4&quot; target=&quot;_blank&quot;&gt;위키백과 패턴 언어페이지&lt;/a&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;크리스토퍼 알렉산더는 오늘날의 건축이 사용자를 위한 건축이 아닌 시공자를 위한 건축이 되어버린 원인을 설계에 대한 모든 권한이 건축가에게 일임 되는 건축설계 과정에서 발생하는 불완전한 커뮤니케이션에서 찾았고, 이를 해소하기 위해 일반인인 사용자를 건축의 설계에 참여시키기 위한 아이디어로서 패턴 언어를 생각해 내었다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;건축에 있어서 디자인 패턴은 이러한 패턴 언어를 지원하기 위해 과거 이루어졌던 건축이나 도시설계를 분석하여 패턴을 수집 하고 이를 바탕으로 패턴 언어를 구축하기 위한 어휘들을 지칭한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;크리스토퍼 알렉산더의 이러한 주장은 건축분야에서는 큰 반향을 일으키지 못했지만 여기에서 영감을 받은 소프트웨어 개발자들의 연구에 의해 등장한 디자인패턴으로 소프트웨어 개발에 있어서는 큰 반향을 불러일으키게 된다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;프로그래밍에서의 패턴언어&lt;/h4&gt;소프트웨어 개발에 있어서 프로그래머 개개인간에 엄청난 생산성의 차이가 존재하는것은 익히 알려진 사실인데, 이러한 차이의 상당부분은 경험의 차이에서 오고 있다. &lt;br /&gt;1994년 애릭감마를 포함한 네명의 저자에 의해 발표된 [&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4_(%EC%B1%85)&quot; target=&quot;_blank&quot;&gt;디자인 패턴: 재활용 가능한 객채 지향 요소&lt;/a&gt;]는 소프트웨어 장인이라 불리우는 저자들의 수많은 성공과 실패의 경험속에서 축적된 노하우를 정제하여 스물세가지 패턴을 제시하였다. 초판 발간으로부터 20년이 흐른 오늘날에도 이 스물세가지 패턴은 꾸준히 이용되고 있으며, 오늘날에 와서는 이러한 패턴들을 기반으로 하여 앤터프라이즈 어플리케이션, 멀티스래드, UI, 데이터 구조, 아키텍쳐에 이르기까지 다양한 분야로 패턴을 확장하려는 노력이 꾸준히 시도되고 있다.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-N8gli4YvHLw/U2az4wX_EeI/AAAAAAAADI0/9dghdLEEwk0/s1600/%ED%83%9C%EA%B7%B97%EC%9E%A5.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;255&quot; src=&quot;https://1.bp.blogspot.com/-N8gli4YvHLw/U2az4wX_EeI/AAAAAAAADI0/9dghdLEEwk0/s1600/%ED%83%9C%EA%B7%B97%EC%9E%A5.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;태권도 품새&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;디자인패턴을 익히고 사용하는것은 태권도에 있어서 품새을 익히고 사용하는 것과 동일하다. 태권도의 품새는 수많은 실전을 겪은 고안자가 수비와 방어 이동등에 있어서 이상적인 몸의 움직임을 정리하고 이를 패턴화 시켜 초보자가 이를 따라 함으로서 혼자서도 쉽게 익힐 수 있도록 한 것이다. 하지만 실전이나 겨루기에서는 품새의 형태대로 싸우지는 않으며, 그때그때 상황에 맞추어 대응하지만 기본이 되는것은 평소에 익혀둔 품새가 바탕이 된다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;패턴 랭귀지 3.0의 등장&lt;/h4&gt;물리적인 건축에서 시작된 패턴 랭귀지는 버전 2.0으로 불리우는 추상적인 소프트웨어의 디자인 패턴을 거쳐 교육이나 협력에 있어서 개인의 경험을 효과적으로 공유하기 위해 인간 행동을 대상으로 하는 버전 3.0이 등장하였다.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-uWbc6sIzCsg/UuSm7R2SS4I/AAAAAAAABgM/N_Y8ULU8tek/s1600/Slide2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;150&quot; src=&quot;https://1.bp.blogspot.com/-uWbc6sIzCsg/UuSm7R2SS4I/AAAAAAAABgM/N_Y8ULU8tek/s1600/Slide2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;출전 : &amp;nbsp;패턴랭귀지:창조적인 미래를 만들기 위한 언어(Iba Takashi, 2014)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;소프트웨어 개발자라면 디자인패턴의 유용성에 대해 잘 알고 있을것이다. 패턴 랭귀지는 대상을 소프트웨어 구현에서 인간 행동으로 확장 함으로서 개인의 경험을 효율적으로 공유하고 커뮤니테이션을 돕는 것을 목적으로 한다.&lt;br /&gt;&lt;br /&gt;사실 패턴 랭귀지에서 다루는 패턴 그 자체는 대부분 전혀 새로울것이 없이 이미 존재하고 사용해 오고 있는 것 들이다. &lt;b&gt;패턴 랭귀지는 존재하는 패턴을 찾아내어 이름을 붇이고 일반적으로 적용하기 쉽게끔 언어를 정제하는 작업을 거친후에 마지막으로 각각의 패턴들간의 연관성을 찾고 연결함으로서 하나의 맵을 만드는 과정을 통해 완성된다.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;프로그래머의 육성과 패턴 랭귀지&lt;/h4&gt;필자는 오래전부터 소프트웨어 개발자의 육성에 있어서의 패턴의 역할에 주목했다. 베테랑 개발자의 모든 습관에는 그 나름의 이유가 있으며 이를 패턴으로 정립하여 신입개발자들이 익혀서 따라해 볼 수 있게 한다면 이른바 도제 방식의 개발자 양성을 넘어 개발자 육성에 좀 더 효과적이지 않을까? 태권도의 품새와 같이 얼마간의 연습 기간을 통해 익히게 한 후 이것들이 일과 생활에서 효울적으로 사용 될 수 있도록 하면 효과적이지 않을까? 달인이라 불리우는 사람들이 저술한 설계와 구현, 매니지먼트 패턴은 이미 여러 책을 통해 세상에 나왔고 충분히 검증된 상태이다. 하지만 이 외에도 좀 더 패턴들이 있지 않을까?&lt;br /&gt;&lt;br /&gt;예를 들자면 다음과 같은것들이 있다&lt;br /&gt;&lt;br /&gt;학습패턴 : 우수한 개발자들은 끊임없이 변화하는 기술트렌드에서 뒤처지지 않게 나름의 학습패턴을 지니고 있다. &lt;br /&gt;커뮤니케이션 패턴 : 주석을 포함한 문서화나 각종 메일, 프레젠테이션, SNS, 블로그 뿐만 아니라 일상의 대화나 회의등이 여기에 속한다.&lt;br /&gt;네고시에이션 패턴 : 작업범위조정, 일정조정, 예산조정등 개발과 관련된 사항들에 대한 이해관계자들과의 조정능력.&lt;br /&gt;품질 관리 패턴: 우수한 프로그래머들은 코드를 포함해 문서화등의 품질을 관리하는 나름의 방법론을 확립한 경우가 많다. 정밀 코드 레뷰나 믿을 만한 동료를 이용한 크로스 체크등 다양한 품질 관리의 패턴이 존재한다.&lt;br /&gt;이 밖에도 일정관리/추정, 문서작성등은 물론이요 식사나 운동 습관, 구직/이직과 같은 사실상 인간 생활의 모든 분야에서 패턴을 찾을 수 있을것이다.&lt;br /&gt;&lt;br /&gt;이러한 패턴을 찾아낸다면 그 다음엔 이름을 붙이고 사람들과 공유하고 토의해 보자. 아직도 세상에는 수많은 이름 없는 패턴들이 이름을 붙여주길 기다리고 있다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/8845984590238051862/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2019/01/pattern-language-for-developer.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/8845984590238051862'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/8845984590238051862'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2019/01/pattern-language-for-developer.html' title='소프트웨어 엔지니어 육성법으로서 패턴 언어의 가능성'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-N8gli4YvHLw/U2az4wX_EeI/AAAAAAAADI0/9dghdLEEwk0/s72-c/%ED%83%9C%EA%B7%B97%EC%9E%A5.jpg" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-2201189337977151775</id><published>2016-04-26T06:01:00.000+09:00</published><updated>2016-04-26T07:01:16.604+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="개발문화"/><category scheme="http://www.blogger.com/atom/ns#" term="회고"/><title type='text'>회고에 대한 고찰 - KPT 진행의 노하우에 대하여</title><content type='html'>&lt;div dir=&quot;ltr&quot; style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; line-height: 20.24px; white-space: pre-wrap;&quot;&gt;&lt;a href=&quot;http://qna.iamprogrammer.io/&quot; target=&quot;_blank&quot;&gt;나프다Q&amp;amp;A&lt;/a&gt;에 동료에게 피드백을 주고받는 좋은 방법에 대해서 문의하는 질문이 올라왔다. &lt;a href=&quot;http://qna.iamprogrammer.io/t/topic/51&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;h4 style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; line-height: 20.24px; white-space: pre-wrap;&quot;&gt;&lt;a href=&quot;http://qna.iamprogrammer.io/t/topic/51&quot; target=&quot;_blank&quot;&gt;동료에게 피드백을 주고 받는 좋은 방법은 무엇입니까?&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;div dir=&quot;ltr&quot; style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; line-height: 20.24px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;결론부터 말하자면 동료에게 좋은 피드백을 주기 위해서는 진심으로 동료를 아끼고 배려하는 마음이 가장 중요하다. 좋은 약은 입에 쓰다는 오래된 속담만 믿고 거친 말로 자극을 주려 하면 오히려 마음의 담만 쌓게 될 수도 있다. 이해하고 받아들일 수 있을 적절한 방법과 타이밍을 찾아내는것이 중요하고, 그 이전에 나의 말에 상대방이 귀 기울일 수 있도록 평소에 쌓아 놓은 신뢰관계가 무엇보다 필요하다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;이제 본론으로 들어가서 오늘은 회고에 대해서 이야기를 해 보자. &lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; line-height: 20.24px; white-space: pre-wrap;&quot;&gt;피드백에 대한 질문으로 회고에 대한 이야기를 시작한것은 회고야 말로 피드백을 가장 부담없이 그리고 효괴적으로 전달 할 수 있는 이벤트 이기 때문이다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;하지만 안타깝게도 많은 조직에서 회고를 실시하고 있지만 제대로된 회고를 진행하는곳을 찾아보기 어렵다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;회고 자체가 어려운것이 아니라 회고에서 다루어야 할 포인트를 잘못 짚고 있기 때문인데 오늘은 그에 대한 좋은 두개의 글을 소개해 볼까 한다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 20.24px; white-space: pre-wrap;&quot;&gt;맨 먼저 &lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;경영컨설턴트이신 유정식님의 글을 소개한다. 정말 좋은 글 이기 때문에 직접 링크를 따라가 본문을 꼭 읽어 볼 것을 권한다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 1.38; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h2 style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;a href=&quot;http://www.yonhapmidas.com/article/131115232609_199971&quot; style=&quot;font-family: Arial; font-size: 18.6667px; line-height: 1.38; text-decoration: none; white-space: pre-wrap;&quot;&gt;조용하다고 당신의 조직이 건강한가&lt;/a&gt;&lt;/h2&gt;&lt;br /&gt;이 글의 결론은 다음과 같다.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;조직이 사람들로 이뤄진 이상 크고 작은 실수가 생기지 않을 리 없다. 그러므로 실수와 문제가 없는 조직일수록 무언가 감추는 것이 많다고 생각해야 옳다. 시끄러울 정도로 실수를 드러내고 지적하는 조직이 조용한 조직보다 성과가 높을뿐더러 높은 성과가 오래도록 유지된다. 실수를 ‘실패’로 보지 않고 환경에 적응해 가는 ‘진화’의 과정으로 인식하기 때문이다. &lt;/span&gt;&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;그렇기 때문에 조직의 건강성은 무결점의 ‘정적인 상태’가 아니라 문제를 끊임없이 제기하고 그것을 고쳐 나가려는 동적인 과정에서 찾아야 한다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;조용한 조직은 성과를 높일 수 있는데도 그렇게 하지 못하는 조직이다. 조용한 조직은 성과 향상이 끊임없는 ‘학습과 적응’을 통해서만 가능하다는 것을 알지 못한다. 사실, 조용한 조직은 위험한 조직이다. 그들이 억누르고 있는 실수가 언제 큰 파국으로 번질 지 모를 일이다.&lt;/span&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;공자는 말했다. “지혜란 무엇을 아는지 그리고 무엇을 모르는지를 아는 것이다.” &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;이 말은 실수는 잘못이나 죄가 아니라, 모르는 게 무엇인지 깨닫는 과정이라는 뜻으로 해석될 수 있다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;실수를 용인하고 권장한다는 말이 더 이상 듣기 좋은 구호로 끝나지 않도록 실천에 옮기는 것이 지혜로운 리더의 의무다. 당신의 조직은 조용한가, 아니면 시끄러운가? &lt;/span&gt;&lt;/blockquote&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;다음은 CTO파견업이라는 비즈니스 모델로 일본에서 주목받고 있는 일본 소닉가든의 CEO이신 &lt;a href=&quot;http://www.sonicgarden.jp/kuranuki&quot; target=&quot;_blank&quot;&gt;쿠라누키&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; line-height: 20.24px; white-space: pre-wrap;&quot;&gt;(倉貫義人)&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;씨가 쓴 &lt;a href=&quot;http://kuranuki.sonicgarden.jp/2013/05/kpt.html&quot; target=&quot;_blank&quot;&gt;&quot;자율적으로 현장을 개선해 나갈 수 있는 회고의 진행방식 - KPT 진행에 대한 노하우&quot;&lt;/a&gt;를&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; 번역하여 소개해 본고자 한다. &lt;/span&gt;&lt;span style=&quot;line-height: normal;&quot;&gt;기사의 번역을 흔쾌히 허락해 주신 쿠라누키씨에게 감사의 말씀을 드린다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(여담이지만 필자는 쿠라누키씨의 &lt;a href=&quot;http://qcontokyo.com/YoshihitoKuranuki_2015.html&quot; target=&quot;_blank&quot;&gt;QCon Tokyo 2015강연&lt;/a&gt;에서 사회를 담당한 인연이 있다.)&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;자율적으로 현장을 개선해 나갈 수 있는 회고의 진행방식 - KPT 진행에 대한 노하우&lt;/h2&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;현장의 운영을 개선하기 위해 먼저 착수한다면 뭔가? 고 물으면 항상 ‘회고’ 부터 시작하자 라고 대답 합니다. 과거에 카오스상태의 프로젝트에 들어 갔을 때 에도 가장 먼저 시작한 것은 &#39;회고&#39;에서 였습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;‘회고’는 말 그대로 현장의 활동을 되돌아보고 개선 작업을 생각하는 것입니다. 반성 회처럼도 보이지만, 모든 것이 끝나고 나서 반성하는 것은 아니고, 현상 분석을 실시하고, 잘 계속하기의 미래를 향한 활동입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;이 기사에서는 ‘회고’라는 문화, 그리고 회고를 실천함에 있어서 진행 방식과 포인트를 소개합니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;411&quot; src=&quot;https://lh6.googleusercontent.com/1Edh48uQZASt1VXftBzogcWW98ZdX-XtFhWa1diBES6jRVQsGNTjZfb4jJTp7Q6Se9o1feHAJxRkVcvDkRzWQKqSJrS4m-fiCTXmJhDE2mJ8AW4bpHQF4YBO_0SnNxiLtywyvys&quot; style=&quot;-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);&quot; width=&quot;602&quot; /&gt;&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고의 진행 방식 &quot;KPT&quot;에 대해서&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;위의 사진은 우리 소닉 가든에서 ‘회고’를하고있는 모습입니다. 소닉 가든에서는 도제식 사원 육성 제도를 실시하고 있는데, 이 광경은 사수와 부사수(역자주:군대용어라서 죄송)가 참여하는 회고의 풍경입니다. 이처럼 특별한 도구는 아무것도 필요하지 않습니다. 필요한 것은 화이트 보드 하나면 충분합니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;역자주) 소닉가든은 CTO 파견업이라는 비즈니스 모델을 가진 일본의 회사입니다. 나중에 기회가 된다면 자세히 소개를 하겠지만 혼자서 프로젝트를 진행하는 사원을 1대1 도제식 교육으로 5년에 걸쳐 육성하는 것을 목표로 한다 합니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;사진 속 화이트 보드를 보면 그 회고의 내용이 적혀 있습니다. 3 개의 지역으로 나누어 져있는 것이 보이시나요? 소닉 가든에서 실시하고 있는 회고 방법은 &quot;KPT&quot;라고하는 것으로, 회고에서 주로 쓰이는 방법 입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;KPT는 Keep / Problem / Try의 약자로, 「Keep = 좋았던것」 &amp;nbsp;「Problem = 나빴던 것」 「Try = 다음 시도 할」의 &amp;nbsp;세 가지 프레임워크로 나누어 생각하는 방법입니다. 방금 보신 화이트 보드는 3 개의 구역인 Keep와 Problem와 Try으로 나누어 져 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;화이트 보드를 좌우로 나누고, 그 왼쪽을 더 아래로 나눕니다. 왼쪽을 Keep 왼쪽 하단을 Problem 오른쪽 절반을 Try를 내보낼 장소로 제공합니다. 자 우선 회고 시작해 봅시다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;역자주) T에 가장 큰 영역을 할당하고 있는것에 주목합시다.&lt;/span&gt;&lt;/div&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고 &quot;KPT&quot;의 구체적인 진행 방식&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고의 논의 대상은 &#39;일하는 방식&#39;에 대해서 입니다. 일의 진행 상황과 보고는 여기서 논하지 않습니다. 평소의 일을 할 때보다 조금 관점을 바꾸어 자신들의 업무 방식을 제3자 입장에서 객관적인 시선으로 보는 느낌을 가지고 진행합니다. 따라서 진척 회의는 별도로 가져가는 것이 좋습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;역자주) 진척회의와 회고를 분리해야 합니다. &lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;먼저하는 것은 Keep와 Problem을 명확이 하는 것 입니다. 이 둘의 원천은 이전에 진행하였던 KPT의 Try입니다. Keep와 Problem을 정리할 때 중요한 것은 일어난 사건 자체 뿐만 아니라 좋았거나 나빴던 일에 이르는 과정에 대해 쓰는 것이 좋습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;이 때 중요한 것은 일단 논의를 뒤로 하고 생각 나는 것을 모두 꺼내 놓는것 입니다. 하나 하나 논의를 하고 있자면 끝이 없습니다. 우선 모두 발언하여 칠판에 적어나갑니다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;이렇게 화이트 보드에 꺼내 놓음으로써 비로서 개인 안고 있던 K와 P가 팀 K와 P로 변화하게 됩니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Keep와 Problem이 모두 나온 다음은, 나온 것 들을 일단 팀과 공유 한 후 Try(개선책)에 대해서 생각합니다. Try을 고려할 때 포인트는 구체적인 액션에 까지 구체화 시키는 것이 중요합니다. 예를 들자면 &quot;○○를 조심&quot; 이라고 하는 것은 Try가 될 수 없습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&quot;조심&quot;이 왜 안 되는가? 그것이 구체적으로 무엇을 할 것인지, 다음 KPT의 때 제대로 할 수 있었는지 여부를 판정 할 수 있는 것이 아니면 안 되기 때문입니다. Try라는 정도이므로 이게 정답 이라는 게 나오기 힘들기 때문에 가설을 설정해서 이야기 합니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고 기간과 그 효과&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고는 1 주일 단위 정도에서 실시하면 좋습니다. 첫 회고의 경우 전회의 &amp;nbsp;Try도 없을 뿐더러 지금까지 진행해 온 방식도 있기 때문에, 길어지리라고 생각 합니다만, 1 주일 단위가 정착하면 회고 자체를 짧은 시간에 할 수 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고을 지속적으로 진행시켜 나가면 서서히 회고 방법 자체도 능숙해 지게 됩니다. 지난주보다 이번주, 이번주보다 다음주에 점점 더 잘 하게 되는 것 입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고는 혼자 해도 효과는 있지만, 기본적으로는 팀 임 함께 하는 것이 더욱 좋습니다. 개개인이 자신의 내면에 가지고 있던 &quot;좋았던 것&quot; 과 &amp;nbsp;&quot;나빴던 것&quot;을 팀원들과 공유하여 함께 &quot;다음 시도”에 대해 생각한다는 것은 팀워크에도 큰 도움이 됩니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;함께 팀을 개선하기 위한 아이디어를 생각하는 것을 계속하는 것을 통해 멤버들이 한 팀이 되어가는 느낌을 가질 수 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;또한 만약 팀에 새로 들어온 멤버가 있었다 하면, 그 멤버에 문화를 전하는 가장 효과적인 방법이 이’회고&#39;가 되는 것이 아닐까 라고 생각합니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고의 &#39;습관화&#39;에서 &#39;일상화&#39;를 목표로&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고을 계속 이어 가면, 팀은 스스로 현장을 개선해 나갈 것이다라는 의식이 싹 트게 됩니다. 그렇게되면, 스스로 회고을 실시하고 &amp;nbsp;개선을 거듭해 나갈 수 있게 됩니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;정기적 인 &#39;회고&#39;를 습관화 한다. 이것이 목표로 1 단계입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;다음 단계가 되면, 회고 자체가 당연하게 되어, 일상 업무 속에서 항시적으로 할 수 있게 됩니다. 평소의 일에서 뭔가가 진행되거나 변화가 필요하다고 생각되는 시점에서 자연스럽게 조금씩 회고를 하게 됩니다. 이 단계까지 가능해 지면 일주일이라는 기간은 의미가 사라집니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;즉, 일부러 일주일에 한 번 타이밍까지 기다릴 필요가 없게 됩니다. 이렇게 일상 속에서 회고를 할 수 있는 단계에 이르면, KPT를 해도 아무것도 나오지 않게 될 것입니다. 그렇게 ‘회고 &#39;를 일상화 해 버리는 것이 두 번째 단계입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고가 정기적 이벤트에서 상시화 되는 것 입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;소닉 가든은 평상시는 이벤트로서 회고를 하지는 않습니다. 잘게 나누어 모두가 당연하게 일상적으로 회고를 하고 있기 때문입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;그러나 중도 입사 한 사원에게는 멘토가 붙어 이벤트로 회고을 정기적으로 실시합니다. 이는 습관화 된 일상으로 회고을 할 수있게 될 때까지 계속됩니다. 소닉 가든은 정해진 규칙 등은 없지만, 회고을 한다는 것이 거의 유일한 룰 입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고을 하면 사람도 팀도 성장할 수 있습니다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고을 익힌 사람이나 팀은 자율적으로 성장해 나갈 수있을 것 입니다. 성장이 없는 일을 계속하는 것은 평생 같은 일을 계속하는 것입니다. 글을 읽는 여러분도 회고를 통해 조금씩 이라도 성장 해 나갈 수 있으면 좋겠습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;덤 : 회고에서 일어나는 일반적인 문제&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고을 시작하여 익숙해지기 전에는 여러가지 문제가 발생합니다. 그리고 이러한 문제들은 &amp;nbsp;대체로 비슷한 고민을 안고 있습니다. 여기서 덤으로 회고 진행시에 자주 발생하는 문제를 사례별로 소개하고 대응 방법을 생각해 보겠습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&quot;Keep이 나오지 않는다&quot;&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자신의 프로젝트에 좋은 점은 하나도 없고, 문제 투성이 라는 것입니다. 이상이 너무 높거나 너무 금욕적인 것 인지도 모릅니다. 그러나 이전 진행했던 회고에서 Keep이 나오지 않는 것은 심각한 문제 입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;원래 이전 회고에서 나온 Try이 모든 잘못했다는한다면 Try 버리는 방법도 맛이 없었던 것입니다. 거기에서 개선하도록합시다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&quot;Problem 고민 상담&quot;&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Problem을 낼 때 그냥 고민하고 있는지를 내더라도 Try 낼 수 없습니다. 실제로 일어나지도 않은 문제를 걱정 할  필요는 없습니다. 엉켜 버린 문제를 &quot;나빴던 일&quot;로 내면 좋을 것입니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&quot;Try가 구체적이지 않다&quot;&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Try를 생각할 때 &quot;기분&quot;을 반영시켜 버리는 것은 해서는 안될 일 입니다. 기분에 의존해서 진행 하다 보면 다음에 무얼 해야 할지를 모르게 되어버립니다. 무엇보다 다음 KPT의 회고때 무엇이 되어 있고 무엇이 안되어 있는지 명확하게 판정 할 수 없습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Try는 &quot;시도하는 것&quot;이​​므로, 그것이 반드시 정답이 아니어도 좋습니다. 다음 회고까지 시도하여 좋은 것이라면 계속하면 되고, 좋지 않다면 방법을 바꿔야 합니다. 이를 위해서는 Try의 내용이 구체적인 조치 이어야만합니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&quot;생산성을 따져보자”&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Problem를 발행 할 때 자주있는 것이 「늦었다」 「잔업했다」같은 것입니다. 그 자체가 엉켜 버린 문제이기 때문에 Problem에 올리는 것은 좋습니다. 그러나 회고의 Try에서 생산성을 따져서는 안됩니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;만약 본인이 한껏 노력한 과정에서 늦게까지 작업을 한 것 이었다 하면 놀면서 한게 아니기 때문에 더 이상의 극적인 생산성 향상은 기대하기 어렵습니다. 이 경우는 시간을 들여서 생산성을 높일 수 밖에 없습니다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;본인의 노력이 아닌 프로세스와 방법에 있어서의 개선안을 생각합시다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;또한 비슷한 이야기로​​ &quot;일정을 낙관했다&quot;도 NG입니다. 일정은 원래 낙곽적이 되기 쉽습니다만 &amp;nbsp;만약 문제 자체를 &quot;일정의 낙관”&#39;탓으로 돌려 버리기 시작하면 해결책으로는 일정에 대한 버퍼를 쌓게 되는 것이 되어버리고 결국 그 앞에는 지옥이 기다리고 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 4pt; margin-top: 16pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #434343; font-family: &amp;quot;arial&amp;quot;; font-size: 18.666666666666664px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&quot;진척 회의가 되어 버린다&quot;&lt;/span&gt;&lt;/h3&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고를 진행하다보면 왕왕 진적회의로 변질되어 버리는 경우가 있습니다. 그러나 회고 라는 것은 &amp;nbsp;&quot;어떤 의식으로 일을 수행하고 있는가?&quot; &quot;어떻게하면 효율적으로 일할 수있는 것인가?” 라는 일의 진행 방식에 대해 논하는 것 입니다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;진척 회의는 반드시 별도로 진행 합시다&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;!&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;또한, 자칫 Problem을보고, 리더가 설교에 들어가 버릴 수 있지만, 그것도 좋지 않습니다.&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;회고에서 목표로하고 싶은 것은 스스로 회고을 하고 스스로 개선해 나가는이라는 의식을 갖게하는 것입니다. &lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;설교를 하고 정답을 말해 버리면 스스로 생각할 없게 되어 버리고, 결국은 발전도 성장도 기대할 수 없게 됩니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/2201189337977151775/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2016/04/kpt.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/2201189337977151775'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/2201189337977151775'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2016/04/kpt.html' title='회고에 대한 고찰 - KPT 진행의 노하우에 대하여'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-3994565819518067939</id><published>2016-02-13T00:35:00.000+09:00</published><updated>2016-02-13T09:34:58.839+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="개발자의 공부법"/><title type='text'>어려운 것을 쉽게 배우는 방법 : 슈퍼 파워를 장착하기 위한 3단계 학습법</title><content type='html'>이번 포스팅에서는 노르웨이의 개발자인&amp;nbsp;Per Harald Borgen (&lt;a href=&quot;https://medium.com/@oslokommuneper&quot; target=&quot;_blank&quot;&gt;미디엄&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;https://www.facebook.com/perhb&quot; target=&quot;_blank&quot;&gt;페이스북&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/OsloKommunePer&quot; target=&quot;_blank&quot;&gt;트위터&lt;/a&gt;, &lt;a href=&quot;https://github.com/perborgen&quot; target=&quot;_blank&quot;&gt;깃헙&lt;/a&gt;, &lt;a href=&quot;https://no.linkedin.com/in/per-harald-borgen-b3901327&quot; target=&quot;_blank&quot;&gt;링크드인&lt;/a&gt;)이 미디엄에 공개한 &quot;&lt;a href=&quot;https://medium.com/learning-new-stuff/a-simple-technique-to-learn-hard-stuff-ffaa7879bf7c#.6girgsf9x&quot; target=&quot;_blank&quot;&gt;The Easy Way To Learn Hard Stuff :Three steps to gain a new superpower.&lt;/a&gt; (어려운 것을 쉽게 배우는 방법 : 슈퍼 파워를 장착하기 위한 3단계 학습법)이란 글을 번역하여 소개하고자 한다. 그의 &amp;nbsp;미디엄에는 다른 멋진 글들이 가득하므로 꼭 한번 들러보길 추천한다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;글을 시작하기에 앞서 이 멋진 글의 번역을 흔쾌히 허락해준&amp;nbsp;Borgen씨에게 감사의 말을 전한다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;어려운 것을 쉽게 배우는 방법&lt;/h2&gt;&lt;h3&gt;슈퍼 파워를 장착하기 위한 3단계 학습법&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;지난 몇 년 동안 저는 많은 시간을 웹 개발과 머신 러닝을 독학하는데 많은 시간을 써 왔습니다.&lt;br /&gt;학습의 테마는 자바스크립트, NodeJS, React에서 Python, Scikit-learn 그리고 신경망 프로그래밍에 이르기까지 다양했지만 이 모든것을 저는 일관된 방식으로 공부해 왔습니다.&lt;br /&gt;&lt;br /&gt;제가 사용한 이 공부법은 3단계로 진행이 되는데 진부하다고 말해도 될 정도로 단순합니다. 하지만 &lt;a href=&quot;https://medium.com/learning-new-stuff/from-non-technical-to-hired-in-5-months-d010f601b1bc#.6l8tcfjne&quot; target=&quot;_blank&quot;&gt;웹 개발에 완전히 문외한 이었던 제가 단 5개월만에 스스로 프로라고 느끼는 것이 가능할 정도가 된 것&lt;/a&gt;은 이 공부법의 효과 덕분이라고 생각합니다.&lt;br /&gt;&lt;br /&gt;저는 이 학습법이 다른 사람에게도 도움이 될지 모른다고 생각하여 이 기사를 써 보기로 마음먹었습니다.&lt;br /&gt;&lt;br /&gt;이 기사는 아무 것도 모른채 무작정 도전을 시작한 2012년 당시의 제 자신을 가르친다는 마음가짐으로 작성하였습니다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;1단계: 배우기전에 익숙해져라&lt;/h3&gt;새로운 기술을 배우기 위해서 가장 먼저 실행하는 첫 단계는, 머리로 이론을 학습 하려 하지 말고 어찌되었든 손을 움직여서 사용해 보는 것 입니다. 이러한 방식이야 말로 이론부터 머리속에 넣는 방법보다 훨씬 뛰어납니다.&lt;br /&gt;&lt;br /&gt;그렇다고는 해도 배우고자 하는 테마에 대해서 아무 것도 모르는 상태 이므로 자력으로는 뭘 어찌 해 볼 도리가 없습니다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;iframe allowfullscreen=&quot;&quot; class=&quot;YOUTUBE-iframe-video&quot; data-thumbnail-src=&quot;https://i.ytimg.com/vi/d1UyEc6zIlw/0.jpg&quot; frameborder=&quot;0&quot; height=&quot;266&quot; src=&quot;https://www.youtube.com/embed/d1UyEc6zIlw?feature=player_embedded&quot; width=&quot;320&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Justine Michel의 Django 강좌는 완벽하게 &quot;배우기전에 익숙해져라&quot;라는 방식으로 진행이 됩니다.&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;그래서 우리가 맨 먼저 할 일은 작은 뭔가를 더미로서 만드는 과정을 개략적으로 설명해주는 튜토리얼 영상을 찾는것 입니다. 저자가 설치부터 &lt;b&gt;한 줄 한 줄 &lt;/b&gt;끝까지 코드를 설명해 주는 튜토리얼을 찾아 &lt;b&gt;비디오를 보며 여러분도 똑같이 코딩&lt;/b&gt;해 보세요. 그 연습용 프로젝트가 제대로 작동하는 것을 확인하며 한줄 한줄 쫓아가는 겁니다.&lt;br /&gt;&lt;br /&gt;10분정도의 영상이라고 한다면 여러분이 그것을 끝까지 쫓아 하는데에는 1시간정도 걸린다고 생각해 두세요.&lt;br /&gt;&lt;br /&gt;또한 MOOC 코스보다는 숙련된 아마추어가 YouTube에 올린 영상쪽이 오히려 공부하기가 쉬울지도 모릅니다. MOOC를 지금 단계에서 보기엔 너무 부담스러운 경우도 있기 때문입니다.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;이 방법의 정 반대되는 접근방법은 그 주제에 대한 책을 읽고 이론부터 배워 나가는 것 입니다. 다만, 그 방법은 제게는 잘 맞지 않았습니다. 다 읽기도 전에 질려버리기 때문입니다. 초보자를 위한 책 조차도 대게는 너무 자세하기 때문입니다. 그래서 저는 책이나 문서를 처음 단계에서는 절대 보지 않으려고 합니다.&lt;/blockquote&gt;튜토리얼 비디오를 따라하는 과정속에서, 자신이 지금 무얼 하고 있는지 알 수가 없어 불안하게 느낄 수도 있습니다. 하지만 그런건 신경쓰지 마세요. 이해 할 수 없는 것은 일단 메모를 해 두고 2단계에서 다시 살펴 봅니다.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;이 단계의 핵심은 혼란 스럽거나 지식이 부족하더라도 일단 끝까지 튜토리얼을 한번은 쫓아가는것 입니다.&lt;/blockquote&gt;&lt;br /&gt;이러한 방식의 단점을 넘어서는 장점은 다음과 같습니다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;1. 첫날부터 일단 뭔가 만들어 본다&lt;/h4&gt;첫날부터 실제로 뭔가를 만들기 때문에, 이론만 읽고 공부만 하는것 보다 만족감을 맛볼 수 있습니다. 그리고 이러한 만족감은 학습을 계속하려고 하는 의욕으로 연결됩니다.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-j4b125a_MIo/Vr3swuA4yuI/AAAAAAAAKek/lqPXy4NPdyE/s1600/1-EK01uygPyaJT9hz_ZooKQw.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;184&quot; src=&quot;https://4.bp.blogspot.com/-j4b125a_MIo/Vr3swuA4yuI/AAAAAAAAKek/lqPXy4NPdyE/s640/1-EK01uygPyaJT9hz_ZooKQw.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;제가 맨 처음 만든 Node.js서버 입니다. 두고두고 많은 참고가 되어 주었습니다.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h4&gt;2. 샘플코드를 얻을 수 있다&lt;/h4&gt;&lt;br /&gt;게다가 학습과정에서 언제든지 참고할 수 있는 샘플코드들이 여러분의 수중에 남게 됩니다. 이 단계에서 만들어진 샘플 코드들은 이후 단계에서 매우 유용하게 쓰여지게 됩니다.&lt;br /&gt;&lt;br /&gt;저는 배우고자 하는 테마에 대한 이해가 깊어졌다고 실감 할 때마다 과거에 만들어둔 예제 코드를 여러번 반복해서 살펴 봄으로서 기억을 새롭게 하고 있습니다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;3. 자신이 무엇을 모르는지 파악 할 수 있게된다&lt;/h4&gt;&lt;br /&gt;또한, 제 자신은 스스로 공부해 나가는 중에 특히 어느 부분을 신경써서 공부해야 하는지를 발견하는데 있어서 이 방법이 가장 빠르다는것을 깨달았습니다.&lt;br /&gt;&lt;br /&gt;학습을 시작하기 전에는 무엇을 아는지 모르는지도 알 수 없는 상태이기 때문에, 배우고자 하는 기술의 어떤 부분에 신경을 써야 하는지, 어느 부분이 까다로운 지를 알 방법이 없습니다. 그렇기 때문에 특히 주의가 필요합니다. 이러한 부분은 가능한 한 빨리 파악해 두는것이 필요 합니다만 이것이 하나의 장벽이 되지 않도록 이해하는 것은 나중에 천천히 해도 됩니다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;아래의 목록은 제가 다양한 테마를 배우기 시작하는데 있어서 많은 도움을 받은 튜토리얼들 입니다.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Sentdex: &lt;a href=&quot;https://www.youtube.com/playlist?list=PLQVvvaa0QuDd0flgGphKCej-9jp-QdzZ3&quot; target=&quot;_blank&quot;&gt;Machine learning for investing&lt;/a&gt; (ML)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://egghead.io/&quot;&gt;Egghead.io&lt;/a&gt;: React Fundamentals (React.js)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/justinmitchel&quot; target=&quot;_blank&quot;&gt;Justin Mitchel&lt;/a&gt;: &lt;a href=&quot;https://www.codingforentrepreneurs.com/&quot; target=&quot;_blank&quot;&gt;Coding for Entrepreneurs&lt;/a&gt; (Django)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;2단계: 난관에 도전하라&lt;/h3&gt;&lt;br /&gt;1단계에서 언급한 교제를 적어도 한번 끝까지 마치고 나면 배우고자 하는 기술의 전체적인 구조에 대한 감을 잡을 수 있게 됩니다. 하지만 분명 아직까지는 머리속이 뒤죽박죽일 껍니다. 그래서 다음 단계는 이러한 혼란을 해소하는 것 입니다.&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;br /&gt;React.js를 배우고 있다면, 그것은 상태와 속성의 차이가 무엇인지를 제대로 파악하는 것 일 겁니다. (참고로 &lt;a href=&quot;https://medium.com/learning-new-stuff/learn-react-js-in-7-min-92a1ef023003#.sl1yxfy7w&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;를 읽어보시면 이해하실 수 있을것으로 생각합니다.)&lt;/blockquote&gt;&lt;br /&gt;이 단계에서는 사실 구체적으로 추천할 수 있는 무언가가 없습니다. 기본적으로는 상황에 맞춰서 책, 공식문서, 스텍오버플로등 어떤 것이라도 살펴볼 필요가 있습니다.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;지난번 제가 이것을 경험한 것은 &lt;a href=&quot;https://medium.com/learning-new-stuff/how-to-learn-neural-networks-758b78f2736e#.tb2zozn04&quot; target=&quot;_blank&quot;&gt;신경망의 코딩 방법을 공부&lt;/a&gt; 할 때 였습니다. 코세라 과정을 수강하고 알았지만 신경망의 전체를 이해할 수 있으려면 로지스틱 회귀를 이해할 필요가 있었던 겁니다. 그래서 로지스틱 회귀에 대한 기본적인 공부를 우선 마친 후에 다시 신경망에 대한 학습에 임한 결과 이번에는 훨씬 더 쉽게 이해할 수 있었습니다.&lt;/blockquote&gt;&lt;br /&gt;&lt;h3&gt;3단계: 뭔가 만들어 본다&lt;/h3&gt;1단계와 2단계는 절대 건너 뛸 수 없는것 이지만 사실은 3단계를 위한 디딤돌에 지나지 않습니다. 새로운 기술을 배우고 싶다는 것은 그 기술로 뭔가를 만든다는 것 입니다. 드디어 이번 단계에서 이러한 목적을 실행에 옮깁니다.&lt;br /&gt;&lt;br /&gt;스스로 새로운 뭔가를 만들 수 있게 되었다면 즉시 있는 힘껏 부딧쳐 봅시다.&lt;br /&gt;&lt;br /&gt;왜냐구요? 실제로 무언가를 만드는 것이야 말로 진정한 의미에서의 배움의 완성이기 때문입니다.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;b&gt;기술을 배우고 나서도 무언가를 만들지 않는다면 그건 진정한 배움이라 할 수 없습니다.&lt;/b&gt;&lt;/blockquote&gt;&lt;br /&gt;1단계와 2단계는 대충 넘길 수 있지만 3단계는 그럴 수가 없습니다. (여기서 말하는 만들기는 단순히 코드를 복사하고 붙여넣기가 아닙니다)&lt;br /&gt;&lt;br /&gt;만들것은 평소에 관심을 가지고 있는것과 연결 시키는 것이 좋습니다. 예를들면, HTML과 CSS를 배우는 와인 애호가라면 와인 시음에 대한 웹사이트의 프로토 타입을 만들어보면 좋을겁니다. 머신러닝에 대해 배우고자 하는 의사라면 건강관련 데이터세트부터 시작해 보는것이 어떨까요?&lt;br /&gt;&lt;br /&gt;제가 초기에 수행한 프로젝트에서는 다음과 같은 것을 만들었습니다.&lt;br /&gt;어디가서 자랑할 수준은 아니지만 저에게는 많은 공부가 되었습니다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Ajax — &lt;a href=&quot;https://github.com/foundry-matrix/The-Guardian&quot; target=&quot;_blank&quot;&gt;The Guardian API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;React — &lt;a href=&quot;https://github.com/foundry-matrix/NoteTakingApp&quot; target=&quot;_blank&quot;&gt;Note Taking App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Neural Networks —&lt;a href=&quot;https://github.com/perborgen/NeuralNetworkNoob&quot; target=&quot;_blank&quot;&gt; Predictiong College Admissions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-NwdvGBVqVtE/Vr34CFWGz-I/AAAAAAAAKe0/gBJo69DnAF0/s1600/1-df-jHb-jSAc0dx6Oj7nO5g.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;314&quot; src=&quot;https://1.bp.blogspot.com/-NwdvGBVqVtE/Vr34CFWGz-I/AAAAAAAAKe0/gBJo69DnAF0/s640/1-df-jHb-jSAc0dx6Oj7nO5g.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;제가 만든 최초의 Ajax프로젝트 입니다. 2014년 초순경에 &lt;a href=&quot;http://www.foundersandcoders.com/&quot; target=&quot;_blank&quot;&gt;Founders&amp;amp;Coders&lt;/a&gt;&amp;nbsp;팀으로서 구축에 참여하였습니다.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;마지막으로 말씀드리고 싶은것은, 위에서 언급한 3단계는 때때로 얽혀 있기도 하여, 이 기사에서 적은것 처럼 순차적으로 진행되기만 하는것은 아니라는 점 입니다.&lt;br /&gt;&lt;br /&gt;저는 반드시 1단계부터 시작해 3단계로 마무리를 하지만, 학습 도중 이전 단계로 돌아가는 일도 자주 있습니다.&lt;br /&gt;&lt;br /&gt;중요한것은 이 세 단계가 각각 새로운 기술을 배우는 것 만큼이나 중요한 요소라는 사실 입니다.&lt;br /&gt;&lt;br /&gt;여러분의 성공을 기원합니다!&lt;br /&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;역주: 혹시 이 기사가 마음에 드신다면 &lt;a href=&quot;https://medium.com/learning-new-stuff/a-simple-technique-to-learn-hard-stuff-ffaa7879bf7c#.6girgsf9x&quot; target=&quot;_blank&quot;&gt;원문&lt;/a&gt;으로 가셔서 하트(미디엄의 좋아요)를&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;b&gt;꼭&amp;nbsp;&lt;/b&gt;&lt;b&gt;눌러 주시기 바랍니다. 그리고 영어가 되신다면 댓글도 남겨주신다면 고맙겠습니다. ^_^&lt;/b&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/3994565819518067939/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2016/02/learning-new-stuff.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/3994565819518067939'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/3994565819518067939'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2016/02/learning-new-stuff.html' title='어려운 것을 쉽게 배우는 방법 : 슈퍼 파워를 장착하기 위한 3단계 학습법'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://img.youtube.com/vi/d1UyEc6zIlw/default.jpg" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-6487094348155183014</id><published>2016-01-18T16:45:00.002+09:00</published><updated>2016-01-18T17:08:43.990+09:00</updated><title type='text'>고성능 비동기 처리 구현을 위한 Java web 프레임워크 - Ratpack</title><content type='html'>스마트 기기로의 권력 이양이 순조롭게 진행되고 있는 지금, 시대는 바야흐로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; target=&quot;_blank&quot;&gt;Single-page Application&lt;/a&gt;(SPA)의 전성시대이다.&lt;br /&gt;필자가 속한 엔터프라이즈 어플리케이션 개발 영역에서도 반응형 웹앱 개발에 대한 요구가 점차 강해지는 가운데 안정성이 검증된 자바 생태계 위에 SPA를 도입하려는 움직임이 점차 본격화 되고 있다.&lt;br /&gt;&lt;br /&gt;이번 포스팅에서는 SPA의 구현에 있어서 본좌라고 할 수 있는 node.js와 유사한 처리모델과 고성능 비동기 처리의 실현, 그리고 심플한 구현을 특징으로 하는 자바 웹 프레임워크인 &lt;a href=&quot;https://ratpack.io/&quot; target=&quot;_blank&quot;&gt;Ratpack&lt;/a&gt;을 소개해 보고자 한다.&lt;br /&gt;&lt;br /&gt;포스트의 내용은 Ratpack의 &lt;a href=&quot;https://ratpack.io/manual/current/&quot; target=&quot;_blank&quot;&gt;메뉴얼&lt;/a&gt;,&amp;nbsp;infoq의 기사인&amp;nbsp;&lt;a href=&quot;http://www.infoq.com/news/2015/09/ratpack10&quot; target=&quot;_blank&quot;&gt;Ratpack 1.0 Launches Aiming to make Asynchronous Programming Easier on the JVM&lt;/a&gt;&amp;nbsp;그리고&amp;nbsp;역시 infoq의 기사인&amp;nbsp;&lt;a href=&quot;http://www.infoq.com/articles/Ratpack-and-Spring-Boot&quot; target=&quot;_blank&quot;&gt;Build High Performance JVM Microservices with Ratpack &amp;amp; Spring Boot&lt;/a&gt;에 기반하여 작성되었다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-7eYFsJsiwG4/VpyVmBE89PI/AAAAAAAAKUM/KuYH1qDdv_Q/s1600/ratpack.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-7eYFsJsiwG4/VpyVmBE89PI/AAAAAAAAKUM/KuYH1qDdv_Q/s1600/ratpack.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Ratpack이란?&lt;/h3&gt;Ratpack의 핵심 기능들은 Java8으로 작성되어 있고 빌드 시스템은 Gradle 2.6을 채용하고 있다. 처리 베이스는 non-blocking형 이벤트 구동 네트워크 엔진인 Netty를 사용하여 비동기처리를 구현하고 있다.&lt;br /&gt;&lt;br /&gt;Ratpack은 마이크로서비스의 개발을 특별히 의식하여 디자인이 되어 있다. 대표적으로 JSON과 같이 특정 언어에 비 종속적인 프로토콜을 최 우선적으로 서포트하고 있으며, 옵션으로 넷플릭스의 서킷 브레이커 라이브러리인 &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot;&gt;Hystrix&lt;/a&gt;나 레포팅을 위한 &lt;a href=&quot;https://dropwizard.github.io/metrics/3.1.0/&quot; target=&quot;_blank&quot;&gt;Dropwizard Matrics&lt;/a&gt;를 지원하고 있다. 설정정보관리는 YAML과 JSON 그리고 Java프로퍼티가 사용 가능하다.&lt;br /&gt;Ratpack은 오픈소스 프로젝트로서 개발이 진행되고 있으며, 아파치 라이센스를 사용하고 있다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;span style=&quot;font-size: small; font-weight: normal;&quot;&gt;Ratpack은 2015년 9월에 1.0이 발표되었으나 사실은 제법 긴 스토리를 가지고 있다. 2010년 Groovy의 DLS구현체로서 출발하여 얼마 후에는 JVM상의&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.sinatrarb.com/&quot; style=&quot;font-size: medium; font-weight: normal;&quot; target=&quot;_blank&quot;&gt;Sinatra&lt;/a&gt;&lt;span style=&quot;font-size: small; font-weight: normal;&quot;&gt;&amp;nbsp;클론으로 프로젝트의 성격이 바뀌었고 2012년부터는 NIO를 이용한 고성능 비동기/non-blocking 어플리케이션 구현을 위한 프레임워크로 변경되어 오늘날에 이르렀다.&amp;nbsp;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style=&quot;font-size: small; font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;Ratpack의 개발 목표&lt;/h3&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;매뉴얼에 기재된 Ratpack이 표방하는 &lt;a href=&quot;https://ratpack.io/manual/current/intro.html#goals&quot; target=&quot;_blank&quot;&gt;개발 목표&lt;/a&gt;는 다음과 같다.&lt;/span&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;빠르고, 확장가능하며, 고효율이어야 한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;응용프로그램을 성능저하 없이 복잡하게 발전시킬 수 있어야 한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;non-blocking 프로그래밍의 장점을 활용하면서도 비용을 절감시킬 수 있어야 한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;다른 툴과 라이브러리들과 통합함에 있어서 유연하고 개방적이어야 한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;응요 프로그램을 쉽고 완벽하게 테스트 할 수 있어야 &lt;/span&gt;한다.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div&gt;반면 다음의 사항들에 대해서는 지양하고 있음을 밝히고 있다.&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;완벽하게 통합된 &quot;풀스텍&quot; 솔루션&lt;/li&gt;&lt;li&gt;필요한 모든 기능을 제공하는 &quot;만능 칼&quot;&lt;/li&gt;&lt;li&gt;&quot;비즈니스 로직&quot;을 위한 프레임웍 혹은 아키텍처&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;심플한 비동기 처리의 구현&lt;/h3&gt;Ratpack의 가장 큰 특징은 뭐니뭐니해도 심플한 비동기 처리의 구현이다. JVM위에서 비동기 처리라는 과제에 도전하고 있다는 점 에서 자주&amp;nbsp;&lt;a href=&quot;http://akka.io/&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt;와 비교되곤 하는데, 코딩스타일에 있어서 자바8을 기반으로 한 만큼 모나딕을 전면적으로 도입하고 있는것이 메뉴얼에서 잘 드러난다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;아래 예제는 Ratpack의 메뉴얼에 실려있는 RESTful HTTP API 헨들러 체인의 구현이다.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot; language-java&quot; style=&quot;background: rgb(245, 242, 240); border: 1px solid rgb(232, 232, 232); clear: none; direction: ltr; font-family: Consolas, Monaco, &#39;Andale Mono&#39;, &#39;Ubuntu Mono&#39;, monospace; font-size: 14px; line-height: 21px; margin-bottom: 0.5em; margin-top: 0.5em; overflow: auto; padding: 0.5em; position: relative; tab-size: 4; text-shadow: white 0px 1px; width: 597.797px; word-break: normal; word-wrap: normal; z-index: 1000;&quot;&gt;&lt;code class=&quot; language-java&quot; style=&quot;border: 0px; direction: ltr; font-family: Consolas, Monaco, &#39;Andale Mono&#39;, &#39;Ubuntu Mono&#39;, monospace; line-height: 1.5; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-break: normal; word-spacing: normal; word-wrap: normal; z-index: 1000;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;package&lt;/span&gt; springpack&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;import&lt;/span&gt; ratpack&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;RatpackServer&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;border: 0px; color: #0077aa; margin: 0px; padding: 0px;&quot;&gt;throws&lt;/span&gt; Exception &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    RatpackServer&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;spec &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; spec&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;chain &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;border: 0px; color: #990055; margin: 0px; padding: 0px;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;border: 0px; color: #669900; margin: 0px; padding: 0px;&quot;&gt;&quot;api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;,&lt;/span&gt; pchain &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;pchain&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;border: 0px; color: #990055; margin: 0px; padding: 0px;&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;ctx &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;border: 0px; color: #990055; margin: 0px; padding: 0px;&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;byMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;method &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;border: 0px; color: #990055; margin: 0px; padding: 0px;&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;border: 0px; color: #669900; margin: 0px; padding: 0px;&quot;&gt;&quot;Received GET request&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;border: 0px; color: #669900; margin: 0px; padding: 0px;&quot;&gt;&quot;Received POST request&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;border: 0px; color: #669900; margin: 0px; padding: 0px;&quot;&gt;&quot;Received PUT request&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;background: rgba(255 , 255 , 255 , 0.498039); border: 0px; color: #a67f59; margin: 0px; padding: 0px;&quot;&gt;&amp;gt;&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;border: 0px; color: #dd4a68; margin: 0px; padding: 0px;&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;border: 0px; color: #669900; margin: 0px; padding: 0px;&quot;&gt;&quot;Received DELETE request&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;border: 0px; color: #999999; margin: 0px; padding: 0px;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;처리모델&lt;/h3&gt;Ratpack의 처리 모델은 node.js의 그것과 닮아 있다. 다음 그림은 4코어 시스템에서 동작하는 Ratpack의 처리 모델의 개요를 나타내고 있다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-KHOhmITHSw8/VpufQf750qI/AAAAAAAAKTU/u0289f8tVjM/s1600/1ratpack-processing-model.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-KHOhmITHSw8/VpufQf750qI/AAAAAAAAKTU/u0289f8tVjM/s1600/1ratpack-processing-model.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Ratpack은 기동과 함께 지정한 코어 수 만큼의 이벤트 루프가 바인딩 된다. Ratpack은 Netty를 이용해 &quot;이벤트 루프 그룹&quot;을 생성하고 사용 가능한 CPU코어에 각각의 단일 스레드로 동작하는 이벤트 루프를 바인딩 한다. 각각의 이벤트 루프는 응용 프로그램에서 도착하는 non-blocking 네트워크 요청을 처리한다. 즉, 하나의 비동기처리 요구에 대하여 하나의 CPU에 바인딩 되도록 하는 처리 방식을 통해 고성능 비동기 처리를 실현하려 하고 있는데, 최근 실시한 벤치마크에서는 단순 Hello World의 경우 32코어 머신에서 초당 1억 리퀘스트를 단일 JVM인스턴스로 처리 할 수 있는 것으로 알려져 있다.&lt;br /&gt;비동기 &amp;amp; non-blocking에 대한 보다 상세한 내용은 &lt;a href=&quot;https://ratpack.io/manual/current/async.html#asynchronous__non_blocking&quot; target=&quot;_blank&quot;&gt;Ratpack의 메뉴얼&lt;/a&gt;을 참고하기 바란다.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/6487094348155183014/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2016/01/ratpack.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/6487094348155183014'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/6487094348155183014'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2016/01/ratpack.html' title='고성능 비동기 처리 구현을 위한 Java web 프레임워크 - Ratpack'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-7eYFsJsiwG4/VpyVmBE89PI/AAAAAAAAKUM/KuYH1qDdv_Q/s72-c/ratpack.png" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-8643263084069891828</id><published>2016-01-17T20:09:00.002+09:00</published><updated>2016-01-18T00:16:18.678+09:00</updated><title type='text'>TDD, BDD를 넘어서 - 검증 주도 개발(Verification-Driven Development,VDD)에 대하여</title><content type='html'>최근 진행한 &lt;a href=&quot;https://iamprogrammer.io/&quot; target=&quot;_blank&quot;&gt;나는 프로그래머다&lt;/a&gt; 녹음에서는 서울대학교 컴퓨터 공학부의 &lt;a href=&quot;http://cse.snu.ac.kr/professor/%EC%9D%B4%EA%B4%91%EA%B7%BC&quot; target=&quot;_blank&quot;&gt;이광근 교수님&lt;/a&gt;을 모시고 최근 저술하신 책 - &lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=59715228&quot; target=&quot;_blank&quot;&gt;컴퓨터과학이 여는 세계&lt;/a&gt;와 학문으로서의 컴퓨터 과학을 주제로 방송을 진행하였다. 임작가님이 3연휴를 희생하여 편집에 의욕을 보여 주신 덕분에 빠르게 공유될 수 있지 않을까 기대해 본다. (블로그 글을 작성하고 있는 도중에 편집본이 도착했다 ^^)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;방송 말미에 앞으로 교수님께서 주목하고 있는 언어 관련 최신 동향에 대해서 소개를 부탁드려 봤는데 그때 말씀해 주신것이 지금부터 소개하려 하는 정확한 검증(&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot; target=&quot;_blank&quot;&gt;formal verification&lt;/a&gt;)이다. 아직은 학문적 영역에 머물러 있지만 조만간(이교수님 말씀으로는 5년) 우리 앞에 모습을 드러 낼 수 있을것으로 보이기에 어떠한 것인지를 현업 개발자의 시선에서 설명해 보고자 한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;정확한 검증(formal verification) 과 정확한 사양(formal specification)&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;정확한 검증이란, &amp;nbsp;하드웨어 및 소프트웨어 시스템에서 정형기법과 같은 수학 논리를 이용하여 어떤 정확한 사양 기술 및 속성에 비추어 시스템이 올바른지를 증명 하거나 반대로 잘못된 것을 증명하는 것을 말한다. 구현하고자 하는 대상을 정확한 검증이 가능하도록 기술하는 것을 명세 언어(Specification language)라 하는데 대표적인 명세언어는 우리가 개발에서 흔히 사용하는 UML이 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;정확한 검증이 도입되면 대상 시스템이 명세 언어로 작성된 사양에 비추어 올바른지 여부를 자동으로 판정하는 것이 가능해진다. 이를 통해 개발 과정에서 구현과 동시에 사양에 대한 검증을 실시하는것이 가능해 진다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;정확한 검증의 필요성은 설계 (또는 구현)의 &#39;정당성&#39;은 그 자체만으로 확인할 수 없다는 점에서 출발한다. 정당성은 주어진 사양과의 검증을 통해 처음으로 확인 가능하며, 정확한 사양의 표기가 해결해야 할 문제를 제대로 설명 할 수 있는지 여부는 또 다른 문제이다. 이것 또한 어려운 문제이며, 비 형식적인 실제 문제를 추상화 된 형식적인 사양 기술에서 제대로 설명해야 하는 문제에 귀착한다. 이러한 요약(abstraction)은 증명이 불가능하다. 그러나 사양에 대한 정리 를 증명할 수 있다면, 사양의 무결성을 검증하는 것은 가능하다.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-Zo-dPDD90kQ/VprfBl66KpI/AAAAAAAAKTA/VwbfeSK2VWk/s1600/overview.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;222&quot; src=&quot;http://3.bp.blogspot.com/-Zo-dPDD90kQ/VprfBl66KpI/AAAAAAAAKTA/VwbfeSK2VWk/s320/overview.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&amp;nbsp;검증에 대한 개요. 구현과 사양의 개발이 함께 진행되고 최종적으로는 툴에 의한 검증이 이루어 진다는 점에 주목하자. &amp;nbsp;이미지 출처: &lt;a href=&quot;http://usenix.org/legacy/event/hotos05/final_papers_backup/tuch/tuch_html/index.html&quot; target=&quot;_blank&quot;&gt;OS Verification -- Now!&amp;nbsp;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;예를 들자면, &lt;a href=&quot;http://www.sse-tubs.de/~rumpe/publications/papers/EFLR98d/EFLR98d.html&quot; target=&quot;_blank&quot;&gt;UML로 기술된 프로그램 사양을 통해 만들어진 프로그램이 올바로 동작하는지를 자동으로 검증&lt;/a&gt;할 수 있게 되는 것이다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;현재 현업 개발현장에서 사용되고 있는 일반적인 자동화 검증 기법은 다음과 같은 것 들이 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;단위 테스트(Unit test) : 함수(또는 메소드)단위로 테스트 코드를 작성하여 실시하는 자동화 테스트. 반복개발 프로세스 안에서 단위 테스트를 구현과 묶어서 개발 하는 방법론을 테스트 주도 개발(&lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot;&gt;Test-Driven Development&lt;/a&gt;,TDD)이라 부른다.&lt;/li&gt;&lt;li&gt;행위 테스트(Behavior test) : 테스트 범위를 함수 단위에서 기능단위로 확장시킨 테스트형태를 말하며 테스트가 사양 명세(Specification) 그 자체가 되는것을 목표로 하기때문에 테스트 코드의 작성에는&amp;nbsp;자연 언어에 가까운&amp;nbsp;&lt;a href=&quot;http://domain-specific%20language/&quot; target=&quot;_blank&quot;&gt;도메인 고유 언어&lt;/a&gt;(DSL)가 선호된다. &amp;nbsp;TDD와 마찬가지로 개발 프로세스에 행위 테스트 작성을 프로세스의 일부로서 도입한 개발 형태를 행위 주도 개발(&lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot; target=&quot;_blank&quot;&gt;Behavior-Driven Development&lt;/a&gt;,BDD)이라 부른다.&lt;/li&gt;&lt;li&gt;End-To-End 테스트(e2e test): 독립적으로 작동하고 Mock와 Stub를 사용하는 BDD 나 단위 테스트와는 반대로, &amp;nbsp;End-to-End 테스트는 가능한 한 실제 시스템의 사용자에 가깝게 에뮬레이션하려고한다. 대표적인 툴 로는&amp;nbsp;&lt;a href=&quot;http://www.seleniumhq.org/&quot; target=&quot;_blank&quot;&gt;Selenium&lt;/a&gt;&amp;nbsp;이 있다.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;자동화 테스트와의 차이&lt;/h3&gt;&lt;div&gt;&amp;nbsp;위에서 소개한 자동화 테스트들이 정해진 숫자의 테스트 케이스만을 소화해 내는 형태인데 비해 정확한 검증은 구현된 로직 자체가 사양과 일치 하는지를 검증해 내고자 한다. 실제로 TDD를 이용해 개발을 해 본 개발자라면 사람이 예상한 테스트 케이스와 실제 동작에서 발생하는 경우의 수 사이에 늘 차이가 존재 할 수 밖에 없다는 사실에 동의할 것이다. 설사 많은 노력을 투입하여 모든 경우의 수를 커버하는 테스트 케이스를 작성한다 할 지라도 그것이 애초에 구현하고자 한 대상과 동일한 것이라는 사실을 보장해 주지 못한다. 이상적인 정확한 검증의 구현은 사양 자체가 검증과 일체화 되기 때문에 구현에 대한 버그가 발생하게 될 여지가 존재하지 않는다. 이러한 점은 BDD가 이루고자 하는 목표와도 일치한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;정확한 검증 방법&lt;/h3&gt;&lt;div&gt;정확한 검증은 크게 두 가지로 분류된다.&lt;/div&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;br /&gt;모델 검사&lt;/h4&gt;&lt;div&gt;첫 번째 방법인 모델 검사는 수학적 모델을 통해 체계적이고 철저하게 검증하는 것을 말한다. 여기서 말하는 모델은 유한 상태 모델을 지칭 하지만 무한의 상태를 가지는 모델도 추상화를 통해 유한 표현으로 전환이 가능하다면 확인 가능한 모델로 취급한다. 일반적으로 모델의 전체 상대와 전체 상태 전환의 검증을 포함하며, 연산 시간을 줄이기 위해 영역고유의 추상화 기법을 이용하여 효율화를 도모한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;다만, 모델 검사는 하드웨어 설계에 적용되는 경우가 많고 소트웨어에 대한 모델 검사는 결정 불능이므로 알고리즘적인 방법만으로는 완전하지 않고, 증명도 반증도 할 수 없는 경우가 있다. 모델검사에 사용되는 방법으로는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_temporal_logic&quot; target=&quot;_blank&quot;&gt;선형시상논리&lt;/a&gt;(Linear Temporal Logic,LTL)나 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B3%84%EC%82%B0_%ED%8A%B8%EB%A6%AC_%EB%85%BC%EB%A6%AC&quot; target=&quot;_blank&quot;&gt;계산 트리 논리&lt;/a&gt;(Computational Tree Logic, CTL)가 있다. (솔직히 나 자신은 이 글을 작성 하면서도 위의 링크를 눌러 볼 엄두가 안난다.)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;논리적 추론&lt;/h4&gt;두 번째 방법은 논리적 추론이다. 일반적으로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Automated_theorem_proving&quot; target=&quot;_blank&quot;&gt;엄밀한 논리 추론을 돕는 자동도구&lt;/a&gt;(Automated Theorem Proving, ATP) 소프트웨어를 사용하여 시스템에 관한 정확한 추론을 실시한다. 이 기술은 완전 자동화 되어있지 않은것이 일반적이었으나 최근들어&amp;nbsp;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_Developer&quot; target=&quot;_blank&quot;&gt;Perfect Developer&lt;/a&gt;와 &lt;a href=&quot;http://www.eschertech.com/products/ecv.php&quot; target=&quot;_blank&quot;&gt;Escher C Verifier&lt;/a&gt;와 같은 도구가 등장하여 증명에 대한 완전 자동화를 시도하고 있다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Java Modeling Language(JML)과 Spec#&lt;/h3&gt;&lt;div&gt;학교와 연구소에서 벗어난 정확한 검증이 우리 앞에 어떠한 모습으로 나타날까? Java Modeling Language(JML)과 Spec#은 논리적 추론을 통해 정확한 검증을 구현하려는 프로젝트이다. 어노테이션에 검증을 위한 사양을 JMS 사양 이라는 표기법으로 기술한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이해를 돕기 위해 위키사전에 실려 있는 JML 의 예제를 살펴보자.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;background-color: #f9f9f9; border: 1px solid rgb(221, 221, 221); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em; tab-size: 4; white-space: pre-wrap;&quot;&gt;&lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot; style=&quot;color: blue; font-weight: bold;&quot;&gt;BankingExample&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BALANCE&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color: #666666;&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;cm&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;/*@ spec_public @*/&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;cm&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;/*@ spec_public @*/&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocked&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt; &lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ public invariant balance &amp;gt;= 0 &amp;amp;&amp;amp; balance &amp;lt;= MAX_BALANCE;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ assignable balance;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ ensures balance == 0;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color: blue;&quot;&gt;BankingExample&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color: #7d9029;&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color: #666666;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ requires 0 &amp;lt; amount &amp;amp;&amp;amp; amount + balance &amp;lt; MAX_BALANCE;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ assignable balance;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ ensures balance == \old(balance) + amount;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color: blue;&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color: #7d9029;&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ requires 0 &amp;lt; amount &amp;amp;&amp;amp; amount &amp;lt;= balance;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ assignable balance;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ ensures balance == \old(balance) - amount;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color: blue;&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color: #7d9029;&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ ensures isLocked == true;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color: blue;&quot;&gt;lockAccount&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color: #7d9029;&quot;&gt;isLocked&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@   requires !isLocked;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@   ensures \result == balance;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@ also&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@   requires isLocked;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;c1&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;//@   signals_only BankingException;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;cm&quot; style=&quot;color: #408080; font-style: italic;&quot;&gt;/*@ pure @*/&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color: blue;&quot;&gt;getBalance&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BankingException&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color: #7d9029;&quot;&gt;isLocked&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color: #7d9029;&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;else&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BankingException&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;o&quot; style=&quot;color: #666666;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;cucumber나 RSpec을 접해본 독자라면 위와 같은 표기법이 낮설지 않을것이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이번에는 마이크로소프트의 연구소에서 연구중인 Spec#의 예제를 살펴보자. 아래 예제는 C#에 기술된 Spec#이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;background-color: #f9f9f9; border: 1px solid rgb(221, 221, 221); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em; tab-size: 4; white-space: pre-wrap;&quot;&gt;&lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color: blue;&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;![]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot; style=&quot;color: #666666;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot; style=&quot;color: #b00040;&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color: green; font-weight: bold;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&#39;requires args.Length &amp;gt; 0;&#39;이 Spec#의 구문으로 자바에서 흔히보는&amp;nbsp;Assertion과 흡사하다. 위 예제는 설명을 위해 단순한 값에 대한 검증만을 기술하고 있지만 API레벨에서 이뤄지는 복잡한 동기화에 대한 기술도 가능하다.&lt;/div&gt;&lt;div&gt;Spec#에 대해 좀 더 자세히 알고 싶으신분은 &lt;a href=&quot;http://research.microsoft.com/en-us/projects/specsharp/&quot; target=&quot;_blank&quot;&gt;공식 사이트&lt;/a&gt;를 방문해 보시길 권한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;멀티코어,비동기, 동시성, 함수형 그리고 검증 주도 개발(Verification-Driven Development,VDD)&lt;/h3&gt;&lt;div&gt;필자가 정확한 검증에 주목하는 이유는 유닛테스트나 e2e테스트와 같은 기존의 테스트 패러다임으로는 동시성과 관련하여 발생하는 오류를 찾아내기가 힘들기 때문이다. 오늘날의 컴퓨팅 한경은 멀티코어가 일반화 됨에 따라 이에 대응하기 위한 비동기, 동시성 프로그래밍 패러다임이 출연하였다. 그리고 이를 보다 효과적으로 구현하기 위한 함수형 프로그래밍은 본격적으로 하나의 큰 흐름을 시작하고 있는 단계이다. 비동기 프로그래밍의 가장 큰 난관으로 꼽히는 것은 테스트의 어려움이다. 발생할 수 있는 경우의 수에 대한 파악도 어렵고 재현도 어렵기 때문이다. 이제 막 보급되기 시작한 이러한 새로운 개발 패러다임 에는 테스트의 복잡도 제어와 효율적인 검증이라는 큰 숙제가 여전히 남겨져 있는 상태인 것이다.&lt;br /&gt;하지만 만약에 코드 자체가 스스로의 완전성을 보장해 준다면 어떨까?&lt;br /&gt;정확한 검증이 그 대안이 되어 줄 수 있지 않을까? 꿈같은 이야기로 들릴지 모르지만 어차피 지금 우리들이 사용하는 기술들은 과거엔 마법같이 여겨지던 것들이다.&lt;br /&gt;이교수님의 말씀처럼 가까운 실일내에 정확한 검증 기술이 상용 코드에 적용 가능한 수준으로 성숙된다면 BDD를 넘어서서 검증 주도 개발(VDD)이라는 패러다임이 등장할 수도 있다는 것이 필자의 생각이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;필자의 의견으로는 지금 현업에 있는 대부분의 프로그래머에게 있어 당장 정확한 검증을 익혀두거나 도입을 서두를 필요는 없을것이라 본다. 다만, &lt;a href=&quot;https://cucumber.io/&quot; target=&quot;_blank&quot;&gt;Cucumber&lt;/a&gt;와 같이 트레이드 오프에 대한 검증이 끝난 BDD 프레임웍의 도입은 DevOps시대를 맞이하여 효율적인 품질관리와 생산성 증대를 위해서라도 살펴봐 두는 자세가 필요할 것이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;참고 문헌 &amp;amp; 관련 링크&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2014/03/beahvior-driven-development.html&quot; target=&quot;_blank&quot;&gt;테스트 주도 개발(TDD)을 넘어서 - 동작 지향 개발(behavior driven development; BDD)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://usenix.org/legacy/event/hotos05/final_papers_backup/tuch/tuch_html/index.html&quot; target=&quot;_blank&quot;&gt;OS Verification -- Now!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%98%95%EC%8B%9D_%EC%96%B8%EC%96%B4&quot; target=&quot;_blank&quot;&gt;형식 언어&lt;/a&gt;&amp;nbsp;- 위키백과&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E4%BB%95%E6%A7%98%E8%A8%98%E8%BF%B0&quot; target=&quot;_blank&quot;&gt;形式仕様記述&lt;/a&gt;&amp;nbsp;- 위키백과&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot; target=&quot;_blank&quot;&gt;Behavior-driven development&lt;/a&gt;&amp;nbsp;- 위키백과&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model_checking&quot; target=&quot;_blank&quot;&gt;Model checking&lt;/a&gt; - 위키백과&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Acceptance_test-driven_development&quot; target=&quot;_blank&quot;&gt;Acceptance test-driven development&lt;/a&gt; - 위키백과&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/cc194885.aspx?f=255&amp;amp;MSPPError=-2147217396&quot; target=&quot;_blank&quot;&gt;End-to-End Testing for SOA-Based Systems&lt;/a&gt;&amp;nbsp;- MSDN&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://video.mit.edu/watch/lecture-11-formal-verification-of-control-logic-in-the-reveal-system-karem-sakallah-8113/&quot; target=&quot;_blank&quot;&gt;Formal Verification of Control Logic in the Reveal System (Karem Sakallah)&lt;/a&gt;&amp;nbsp;- MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=zGpo4yUyKQw&quot; target=&quot;_blank&quot;&gt;Assertion-based Formal Verification ( with Mentor Graphics Questa Verification Platform )&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://googletesting.blogspot.jp/2015/04/just-say-no-to-more-end-to-end-tests.html&quot; target=&quot;_blank&quot;&gt;Just Say No to More End-to-End Tests&lt;/a&gt;&amp;nbsp;- Google&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19378183/difference-between-system-testing-and-end-to-end-testing&quot; target=&quot;_blank&quot;&gt;Difference between system testing and end to end testing?&lt;/a&gt;&amp;nbsp;- StackOverflow&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/projects/specsharp/&quot; target=&quot;_blank&quot;&gt;Spec#&lt;/a&gt; - Microsoft Research&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eecs.ucf.edu/~leavens/JML//index.shtml&quot; target=&quot;_blank&quot;&gt;The Java Modeling Language (JML)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://cucumber.io/&quot; target=&quot;_blank&quot;&gt;Cucumber&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://ujihisa.blogspot.jp/2010/09/rspec-for-java.html&quot; target=&quot;_blank&quot;&gt;RSpec for Java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;※이광근 교수님의 피드백을 받아 학술 용어의 번역에 대해서 수정을 하였습니다.(2016.1.17)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/8643263084069891828/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2016/01/vdd.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/8643263084069891828'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/8643263084069891828'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2016/01/vdd.html' title='TDD, BDD를 넘어서 - 검증 주도 개발(Verification-Driven Development,VDD)에 대하여'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-Zo-dPDD90kQ/VprfBl66KpI/AAAAAAAAKTA/VwbfeSK2VWk/s72-c/overview.png" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-6232926785722888677</id><published>2015-12-18T14:24:00.001+09:00</published><updated>2015-12-25T07:45:55.579+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Consul"/><category scheme="http://www.blogger.com/atom/ns#" term="DevOps"/><category scheme="http://www.blogger.com/atom/ns#" term="InfoQ"/><category scheme="http://www.blogger.com/atom/ns#" term="Terraform"/><title type='text'>Terraform과 Consul을 이용한 DevOps</title><content type='html'>&lt;br /&gt;오늘은 InfoQ에 올라온 기사를 번역해 소개해 보고자 한다. &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;&lt;a href=&quot;http://www.infoq.com/news/2015/05/hashimoto-modern-datacenter&quot;&gt;Automating the Modern Datacenter with Terraform and Consul&lt;/a&gt;&lt;/h4&gt;&lt;br /&gt;이 기사에는 DevOps와 관련해서 중요한 개념들을 알기 쉽게 설명하고 있다. 영어에 어느정도 자신이 있고Terraform과&amp;nbsp; Consul에 대해서 좀 더 깊이있게 알아보고자 한다면 아래 링크를 통해 Hashimoto의 강연을 직접 보시길 권한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;&lt;a href=&quot;http://www.ustream.tv/recorded/61446237&quot; target=&quot;_blank&quot;&gt;Mitchell Hashimoto (HashiCorp) - Automating the Modern Datacenter, Development to Production&lt;/a&gt;&lt;/h4&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2015/craftconf/&quot;&gt;CraftConf 2015&lt;/a&gt; 에서 &lt;a href=&quot;https://www.linkedin.com/in/mitchellh&quot;&gt;Mitchell Hashimoto&lt;/a&gt; 는 대중적으로 사용되고 있는 프로비저닝 및 구성 도구에 대해 &#39;현재의 데이터 센터&#39;를 관리하기에는 적합하지 않은 것이라고 평했다. 오늘날의 데이터 센터에는 민첩하고 탄력성이 요구된다. 그리고 컴퓨팅리소스나 DNS, CDN 등 응용 프로그램의 배포에 필요한 &#39;서비스&#39;는 다양한 공급 업체가 제공하는 이기종 플랫폼이 조합될 가능성이 있다. 이러한 과제를 안고 있는 오늘날의 비즈니스 환경에서 자동화를 제공하는 방법으로 그는 Hashicorp의 &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; 과 &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; 두 가지 도구를 소개했다. &lt;br /&gt;&lt;br /&gt;Hashimoto는 &lt;a href=&quot;https://hashicorp.com/&quot;&gt;Hashicorp&lt;/a&gt; 의 창업자이며, &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; 와 &lt;a href=&quot;https://www.packer.io/&quot;&gt;Packer&lt;/a&gt; 의 프로젝트 리더이기도하다. 그의 강연은 데이터 센터 기술의 역사를 설명하는 것으로부터 시작되었다. 기업의 관점에서 데이터 센터의 이용은 하나의 물리적 서버에서 발전하여 여러 베어 메탈 서버로 옮겨 결국 여러 가상화 인스턴스에 도달하고있다. 그리고 이 진화의 최신 트렌드가 바로 &lt;a href=&quot;http://en.wikipedia.org/wiki/LXC&quot;&gt;컨테이너화&lt;/a&gt; 의 움직임이다. 이러한 진화에 따라 프로비저닝 및 배포, 유지 보수 등의 작업은 복잡해지고 자동화에 요구는 급박한 과제가되었다. 초기에 이러한 요구 사항을 충족하기 위해 나타난 것이 &lt;a href=&quot;http://cfengine.com/&quot;&gt;CFEngine&lt;/a&gt; 과 &lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;Chef&lt;/a&gt; , &lt;a href=&quot;https://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; , &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; 과 같은 툴들이다.&lt;br /&gt;&lt;br /&gt;공용 및 사설 클라우드 기술의 보급으로 우리는 지금 새로운 도전을 안고 &#39;모던 데이터 센터&#39;를 운영하고 계속하고 있다고 Hashimoto 는 설명했다. 일단 핵심 인프라 스택에 통합 된 DNS와 CDN 또는 데이터베이스와 같은 기술이 현재는 서버 기반 제품으로 전환하고있다. 또한 기업 측에서도 서로 다른 벤더를 사용하여 인프라 플랫폼을 개발하는 것이 많아졌다. 이러한 두 가지 변화에 따라 기존의 프로비저닝은 새로운 복잡한 레이어를 추가하고있다. 이러한 요구에 대해 앞에서 언급한 툴들로는 요구를 충족시킬수 없다는 것이 Hashimoto 의 주장이다. &lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;설치하고자하는 응용 프로그램의 하나 하나에 Chef 나 Puppet의 자동화를 제공 할 수는 있을 것입니다. 그렇지만 만약 필요한 서비스 모든 설정을 자동화하는 방법이 없다고한다면 무슨 일이 벌어질까요? 즉, 응용 프로그램이 동작하지 않는 상황이 발생하는 겁니다 ...&lt;/blockquote&gt;&lt;br /&gt;데이터 센터에서 벌어지는 활동의 중심은 서버와 데이터 저장소,로드 밸런서 등 자원의 취득(acquisition), 제공(provision), 업데이트(update), 폐기(destruction) 등의 작업으로 구성되는 경우가 많다. 일단 이러한 과정은 느리고, 그 결과 또한 어느쪽인가 하면 정적이라 할 수 있었지만, 현재는 이러한 활동이 점차 빨라지고 출력도 탄력적으로 확장 가능하게 되는 추세이다. 이러한 예는 컴퓨팅 리소스의 프로비저닝이라 볼 수 있을것이다. 기존의 데이터 센터라면 서버를 구입하고 물리적 랙에 담아 프로비저닝 한 후 고정적인 단위로 배치하는 것이었다. 그러나 현대적 데이터 센터에서 컴퓨팅 인스턴스는 API 호출을 통해 획득 도고 기동시에 구성이 지정된다. 인스턴스를 그 자리에서 수평적으로 확장하거나 혹은 수평적 확장을 위해 인스턴스를 추가하는 것도 매우 간단하다. &lt;br /&gt;&lt;br /&gt;오늘날의 데이터 센터에서 제공하는 작업 속도와 유연성은 수작업으로는 불가능한 것이라고 Hashimoto는 말하고 있다. 즉, 자동화는 필수인 것이다. 현대 데이터 센터를 자동화하기위한 요건으로서 그는 다음과 같은 요소를 꼽았다. &lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;제로상태로부터 단 하나의 명령으로 모든 자원의 배치가 가능 &lt;/li&gt;&lt;li&gt;분산 시스템에 의한 고장내성 &lt;/li&gt;&lt;li&gt;자동 확장 및 자동 복구 &lt;/li&gt;&lt;li&gt;체계화 된 지식에 의한 팀워크 향상&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Hashimoto는 여러 데이터 센터 나 서로 다른 벤더에 걸쳐저 있는 인프라를 효율적으로 구축, 조합, 출시한다는 요구 사항을 충족 할 수있는 도구로 Hashicorp의 &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; 을 소개했다. 예를 들어, &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;Amazon Web Service&lt;/a&gt; (AWS)의 &lt;a href=&quot;http://aws.amazon.com/ec2/&quot;&gt;EC2&lt;/a&gt; 컴퓨팅 인스턴스와 &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt; 의 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet-virtual-server&quot;&gt;Droplet&lt;/a&gt; 컴퓨팅 인스턴스를 구성하고, &lt;a href=&quot;http://dyn.com/dns/&quot;&gt;Dyn DNS&lt;/a&gt; 서비스를 통해 그들에게 접근을 설정하는 작업이 Terraform에서 가능하다. 또한 Terraform는 인간 친화적 인 텍스트 형식으로 인프라의 선언으로 정의 할 수있다. 특정한&amp;nbsp; 저수준의 설정 작업을 수행하는 Terraform 모듈을 생성하는 것도 가능하다. &lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-F73Tg802ppg/VnOZIhvhyNI/AAAAAAAAKKE/u6pznBGoaMk/s1600/small-a17be924.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;http://3.bp.blogspot.com/-F73Tg802ppg/VnOZIhvhyNI/AAAAAAAAKKE/u6pznBGoaMk/s200/small-a17be924.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Terraform은 &#39;terraform apply&#39;명령 하나로 시작한다. &#39;terraform plan&#39;명령으로 apply가 할 활동을 미리 볼 수도 있다. plan 명령을 실행하면 현재의 인프라 상태에서 요구 된 선언적 정의에 대해 실행될 변경 내용이 정렬 된 목록으로 출력된다. 변경이 즉시 실행 가능한 것인가, 파괴적인 성격의 것인가 (서버 재부팅처럼)도 그 안에서 나타나고있다. 어떠한 조작을 수행한다고 가정했을때, 이러한 정보가 메인터넌스 윈도우에 표시됨으로서 적절한 판단을 내리는데 도움을 준다. &lt;br /&gt;&lt;br /&gt;plan 명령의 출력을 파일에 저장하여 후이있을 인프라의 변경에 고정적으로 적용시키는것도 가능하다. 인프라의 변화를 미리 볼 수있는 것은 Terraform의 가장 중요한 기능 중 하나 다라고 Hashimoto 는 한다. 인프라 코드의 변경과 그 결과로 인한 프로비저닝 계획의 조합은 개발워크플로(역자주:아마도 Git-Flow와 같은 형태의)에 대해 Pull-Request에 대한 변경사항을 차등으로 검토하고 변경을 수용할 것인지 등에 사용할 수있다. &lt;br /&gt;&lt;br /&gt;Terraform 등장 이전에는, 운영팀은 프로덕션 시스템의 스택 관리에 대해 믿을 수 없을 정도로 과중한 책음을 지고 있었다 라고 Hashimoto는 말한다. 서비스중인 여러종류의 클라우드 플랫폼을 깊이 이해 한 후에 인프라 상태를 확인하고 상태 전환 결과를 계산해야했던 것이다. 오래전 많은 개발자가 &lt;a href=&quot;http://en.wikipedia.org/wiki/Assembly_language&quot;&gt;어셈블리 언어&lt;/a&gt; 에서 &lt;a href=&quot;http://en.wikipedia.org/wiki/Third-generation_programming_language&quot;&gt;제 3 세대 프로그래밍 언어&lt;/a&gt; 로 전환한 사례와 같이, 운용 담당자와 DevOps기술자들 가운데에는 &#39;스택을 위쪽으로 이동&#39;시키고 Terraform 같은 도구를 이용해 목표를 달성하기를 원하고 있을지도 모른다고 그는 강연에서 말하고 있다. &lt;br /&gt;&lt;blockquote&gt;코어 운영자 및 애플리케이션 운영자의 차이점은 여기에 있다고 나는 생각합니다. 어떤 기업도 고가용성 데이터베이스 클러스터를 구축하는 방법을 이해하는 운영자와 이해하지 못했지만, 고 가용성 데이터베이스 클러스터를 원하는 운영자가있는 것입니다. 그들을 교육하고 이해시키는것은 가능하며, (Terraform처럼) 추상화하여 제공하는것도 가능합니다.&lt;/blockquote&gt;프레젠테이션의 2부에서는 Hashicorp의 &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; 도구가 소개되었다. 서비스 검색 및 구성 오케스트레이션 등의 기능을 데이터 센터에 걸쳐 가용성이 높은 방식으로 제공하는 도구이다. 기업 인프라의 &#39;서비스X는 어디에 있는가&#39;, &#39;서비스Y의 상태는 어떤가&#39;, &#39;현재 실행중인 것은 무엇인가&#39;, &#39;사비스Z의 구성은 어떻게되어 있는지&#39;, 또는 &#39;나의 플랫폼에서 작업 A를 실행하는 사람이 있는지&#39;등의 질문에 Consul를 사용하여 대답 할 수있다고 Hashimoto 는 말한다. &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-zzZQfZnsLg8/VnOZIlYcZwI/AAAAAAAAKKI/2MLSq00_7-E/s1600/consul.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;198&quot; src=&quot;http://2.bp.blogspot.com/-zzZQfZnsLg8/VnOZIlYcZwI/AAAAAAAAKKI/2MLSq00_7-E/s200/consul.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Consul은 DNS 또는 HTTP API를 통해 복수의 데이터 센터에서 복합적으로 동작하는 서비스 감지가 가능한 &lt;a href=&quot;https://www.consul.io/#features&quot;&gt;서비스 검색&lt;/a&gt;기능을 제공한다. 쉘 스크립트로 구현 된 상태 점검 기능은 자신의 서비스 검증 프로토콜을 구현할 수있다. 또한 고 가용성의 kwy-value 타입의 데이터 저장소도 제공하고 있어, 일관성을 갖춘 정보를 배포 할 수 있는 능력을 갖추고있다. 이것을 이용하면, 구성 관리 도구를 실행할 필요 없이 구성 매개 변수의 &#39;튜닝&#39;을 할 수있다. 조정 가능한 예로는 서비스 위치 지정 및 시스템 유지 보수 모드 공지 및, 서비스의 &lt;a href=&quot;http://en.wikipedia.org/wiki/Quality_of_service&quot;&gt;QoS&lt;/a&gt; 파라미터 설정 등이있다. &lt;br /&gt;&lt;br /&gt;Cosul의 또 다른 기능으로서 그는 오케스트레이션과 관련된 기능의 제공뿐만 아니라, UDP를 통해 데이터 센터 전체에 비동기로 브로드 캐스트를 하는 &#39;event&#39;와 TCP를 사용하여 특정 컴퓨터에서 동시에 작업을 수행하는 &#39; exec &#39;, 그리고 event와 exec의 장기적인 폴링 처리를 가능하게 한 &#39;watch &#39;를 언급했다. &lt;br /&gt;&lt;br /&gt;Mitchell Hashimoto의 CraftConf 강연 &#39; &lt;a href=&quot;http://www.ustream.tv/recorded/61446237&quot;&gt;Automating the Modern Datacenter, Development to Production&lt;/a&gt; &#39;에 대한 영상 등 더 자세한 자료는 컨퍼런스의 Web 사이트에서 확인 가능하다. &lt;a href=&quot;https://hashicorp.com/blog/terraform-0-5.html&quot;&gt;Terraform v0.5&lt;/a&gt; 은 &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform.io&lt;/a&gt; 웹 사이트에서 Consul v5.0은 &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul.io&lt;/a&gt; 웹 사이트에서 각각 다운로드 할 수있다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/6232926785722888677/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2015/12/Automating-the-Modern-Datacenter-with-Terraform-and-Consul.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/6232926785722888677'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/6232926785722888677'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2015/12/Automating-the-Modern-Datacenter-with-Terraform-and-Consul.html' title='Terraform과 Consul을 이용한 DevOps'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-F73Tg802ppg/VnOZIhvhyNI/AAAAAAAAKKE/u6pznBGoaMk/s72-c/small-a17be924.png" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-4480371352674980826</id><published>2015-12-14T11:20:00.000+09:00</published><updated>2016-05-03T20:43:49.139+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="Cloud"/><category scheme="http://www.blogger.com/atom/ns#" term="DevOps"/><category scheme="http://www.blogger.com/atom/ns#" term="SI이노베이션"/><category scheme="http://www.blogger.com/atom/ns#" term="개발문화"/><category scheme="http://www.blogger.com/atom/ns#" term="자체개발"/><title type='text'>일본경제신문 자체개발 전환사례 소개</title><content type='html'>&amp;nbsp;오늘날 모든 기업활동과 사회활동에서 IT는 이미 핵심 영역으로 자리를 잡은지 오래이다. 특히 2010년대에 들어서며 등장한 스마트폰은 IT를 생활과 완전히 한 묶음으로 만들어 버렸다. 그 결과, 과거의 IT가 기업활동이나 공공서비스의 핵심영역을 보조해주는 역할에 불과했다면, 오늘날에는 비즈니스 핵심영역과 결합되거나 아예 핵심영역 그 자체가 되어버린 경우도 쉽게 찾아볼 수 있다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;특히 TV와 라디오, 신문, 잡지, 출판과 같은 미디어 영역은 스마트폰이나 타블렛과 같은 인터넷과 결합된 스마트 기기가 빠르게 생활속에 자리잡아감에 따라 플랫폼 자체를 변화 시켜야만 하는 선택의 기로에 놓여있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&amp;nbsp;이러한 가운데 주목받고 있는 흐름이 바로 인하우스 개발(=자체개발)로의 회귀이다.&lt;br /&gt;&amp;nbsp;초창기 기업들의 IT시스템은 자체개발로 시작한 곳이 많았으나 점차 전문 IT서비스 기업들이 등장함에 따라 비 IT기업들은 비용과 전문성, 지속성의 문제로 시스템 개발을 외주에 의존하여 개발하는것이 서서히 일반화 되었다. 하지만 최근들어서 속도와 품질, 그리고 비용이라는 측면에서 IT부서의 규모를 확대하고 개발자를 사원으로 채용하려 하는 움직임이 표면화 되기 시작한 것이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이번 포스팅에서는 일본의 대표적인 경제전문 미디어인 일본경제신문사(이하 닛케이)의 디지털 편성국에서 근무하는&amp;nbsp;&lt;a href=&quot;https://twitter.com/yosukep&quot; target=&quot;_blank&quot;&gt;스즈키 요스케씨&lt;/a&gt;가 2015년 8월 15일 BPStudy에서 발표한 &amp;nbsp;&lt;a href=&quot;http://bpstudy.connpass.com/event/17069/&quot; target=&quot;_blank&quot;&gt;인하우스 개발 전환 사례&lt;/a&gt;를 통해 자체개발로의 전환에 필요한 요소들과 주의해야 할 위험 요소들에 대해 살펴보고자 한다. 포스팅의 내용은 Speaker Deck에 올라온 슬라이드에 기반하고 있으며, 한국내 개발자들이 이해하기 쉽도록 약간의 해설을 가미하였다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;본격적으로 이야기에 들어가기 앞서 번역을 허락해 주신 닛케이의 스즈키 요스케씨께 감사의 말씀을 전한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;닛케이전자판의 자체개발화에의 도전&lt;/h2&gt;&lt;div&gt;원문:&amp;nbsp;&lt;a href=&quot;https://speakerdeck.com/yosukesuzuki/nikkei-web-development-2015&quot; target=&quot;_blank&quot;&gt;日経電子版　開発内製化の取り組み&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;자기소개&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;스즈키 요스케(鈴木陽介)&lt;/li&gt;&lt;li&gt;일본경제신문사 디지털편성국 소속&lt;/li&gt;&lt;li&gt;2001년 입사&lt;/li&gt;&lt;li&gt;NIKKEINET의 컨텐츠 운영, 산업부기자, 인터넷판 컬럼의 편집자등을 거쳐 2009년경 부터 디지털판 기획/개발 담당&lt;/li&gt;&lt;li&gt;Python을 중심으로, JavaScript(Coffee), Go등을 일과 개인적인 용도로 사용하고 있습니다. &lt;a href=&quot;https://www.pebble.com/&quot; target=&quot;_blank&quot;&gt;Pebble&lt;/a&gt;로도 즐기고 있습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;앱 자체개발에 대한 이야기를 공개했었습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/natsuz/ri-jing-dian-zi-ban-apurinei-zhi-kai-fa-falsewu-tai-li&quot; target=&quot;_blank&quot;&gt;닛케이디지털판 자체개발 비화&lt;/a&gt;&amp;nbsp;by Natsuki Akama&lt;/li&gt;&lt;li&gt;특히 신문 업계의 반향이 엄청났습니다&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;일본경제신문(닛케이)에 대해서&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;1876년 설립, 2016년으로 140주년을 맞이하는 미디어 전문회사&lt;/li&gt;&lt;li&gt;1000명 이상의 기자와 편집자가 근무&lt;/li&gt;&lt;li&gt;(역자주) 특히 인터넷과 IT에 관련한 신문,잡지,서적등의 출판을 활발히 펼치는 미디어로서 일본내에서 독보적인 위치에 있음.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;닛케이디지털판에 대해서&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;40만명이 넘는 유료회원&lt;/li&gt;&lt;li&gt;유료 뉴스서비스로서 세계4위&lt;/li&gt;&lt;li&gt;아이폰과 안드로이드에 대응하는 모바일 서비스를 강화&lt;/li&gt;&lt;li&gt;서비스계의 개발부문은 약 40명 정도가 근무&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;닛케이의 시스템개발 역사&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;1972년 세계최초의 신문제작 시스템을 개발&lt;/li&gt;&lt;li&gt;1984년 데이터베이스 서비스 &#39;닛케이텔레콘&#39; 개시&lt;/li&gt;&lt;li&gt;1996년 인터넷 서비스인 NIKKEINET개시&lt;/li&gt;&lt;li&gt;2010년 닛케이전자판 창간&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;NIKKEINET시절에는 내부개발이 주로 이뤄졌었습니다&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;영문기자출신이신분이 비주얼 베이직으로 만든 CMS가 애용되고 있었습니다&lt;/li&gt;&lt;li&gt;Perl로 억세스로그의 집계,분석 툴을 개발&lt;/li&gt;&lt;li&gt;CloudFusion으로 서비스용 서버어플리케이션 제작&lt;/li&gt;&lt;ul&gt;&lt;li&gt;PHP와 비슷한 녀석입니다&lt;/li&gt;&lt;li&gt;의외로 성능이 좋았습니다&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;결국 사람에 의존한 개발 체제였기 때문에 점차 외주개발로 바뀌어가게 됩니다&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;(역자주) 사내의 개발에 열정을 지닌 사람들이 시작한 프로젝트였으나 퇴사나 근무처 이동등에 의해 지속성을 지니기 힘든 구조였을듯 합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;닛케이전자판의 개발(창간무렵까지)&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;초거대SI업체가 대거 참여하여 개발&lt;/li&gt;&lt;li&gt;성능(레스폰스)는 좋았음&lt;/li&gt;&lt;li&gt;변경 비용이 증대&lt;/li&gt;&lt;ul&gt;&lt;li&gt;테스트는 기본적으로 수동, 테스트 비용의 증가로 예산이 오버되어 계획이 실현 되지 않았던 경우도 있었음&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;내부개발화로의 흐름&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;2010년 당시&lt;/li&gt;&lt;li&gt;자그마한 변경에도 꾀나 번거롭고 시간과 돈이 들어가는 구조&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-FOGn50dSwSs/VmpvXhQyVjI/AAAAAAAAKG0/Bh1hv_zt9us/s1600/capture2.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;229&quot; src=&quot;https://3.bp.blogspot.com/-FOGn50dSwSs/VmpvXhQyVjI/AAAAAAAAKG0/Bh1hv_zt9us/s320/capture2.PNG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;버튼 하나 추가에 2주의 기간과 수십만엔의 비용이 발생하는 비효율적인 구조&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;기획을 올려도 아주 작은부분만이 실제 구현되었음&amp;nbsp;&lt;/li&gt;&lt;li&gt;이대로 괜찮은건가? 라고 초보처럼 생각했다&lt;br /&gt;(이러저러한 이유가 있었으나 당시엔 알지 못했음)&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;거의 맘대로 두사람으로 개발을 시작해 보았다&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;처음에는 PHP+Ruby+MySQL로 사내 서버를 만들었다&lt;/li&gt;&lt;ul&gt;&lt;li&gt;2010년 여름경&lt;/li&gt;&lt;li&gt;성능은 그저그랬음&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;PC판의 일부 페이지ㅡ를 구현함&lt;/li&gt;&lt;ul&gt;&lt;li&gt;1개월 반정도 소요&lt;/li&gt;&lt;li&gt;UI는 바꿔 보았다&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;결국 이 버전은 창고행으로...&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;스마트폰 브라우저 버전(베타)의 개발&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;창고에 넣어 두었던 버전은 존재의미가 그다지 없었다&lt;/li&gt;&lt;li&gt;2011년 당시, 스마트폰 브라우저 버전이 없었던 관계로 그것을 만들어 보기로 함&lt;/li&gt;&lt;li&gt;Google App Engin(이하GAE)을 사용해서 인프라를 포함해 단 두명이 만들었음&lt;/li&gt;&lt;li&gt;HTML5의 기능을 풍성하게 집어넣은 엣지있는 서비스가 만들어졌다&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-6ANDigeZry8/Vmpu5-h3D2I/AAAAAAAAKGs/gRKCvDJD4J0/s1600/capture1.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-6ANDigeZry8/Vmpu5-h3D2I/AAAAAAAAKGs/gRKCvDJD4J0/s320/capture1.PNG&quot; width=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;자체개발한 서비스가 정식으로 서비스됨&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;2012년에 윈도우8용 앱을 자체 개발&lt;/li&gt;&lt;li&gt;2013년에 인프라, 프론트엔드 모두 새로만든 모바일 브라우저 버전을 공개&lt;/li&gt;&lt;ul&gt;&lt;li&gt;프론트엔드의 자바스크립트는 당시 신입사원이 자체 개발했다&lt;/li&gt;&lt;li&gt;지금은 다른 신입사원이 개발중&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;도급형이 아닌, 외부 개발자가 사내에 상주하며 개발하는 스타일도 늘었다&lt;/li&gt;&lt;li&gt;아직 주류는 아니지만 자체 개발에 대한 분위기가 슬슬 나오기 시작함&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;좀 더 모던한 개발이 하고싶다!&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;자체 개발을 좀 더 발전시켜보고 싶었음&lt;/li&gt;&lt;li&gt;2013년 12월경 한 스터디 모임에서&amp;nbsp;&lt;a href=&quot;http://qiita.com/naoya@github&quot; target=&quot;_blank&quot;&gt;naoya&lt;/a&gt;씨(역자주:일본의 유명 개발자로 AB테스트 플랫폼인 &lt;a href=&quot;https://kaizenplatform.com/en/&quot; target=&quot;_blank&quot;&gt;Kaizen platform&lt;/a&gt;의 개발자로 유명)에게 기술고문을 부탁했더니 OK해 주셨습니다!&lt;/li&gt;&lt;li&gt;이걸로 삐까뻔쩍모던한 개발이 바로 시작될줄 알았으나...&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;하지만, 기술이 문제가 아니었다!&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;우선 개발팀의 체제를 변경&lt;/li&gt;&lt;ul&gt;&lt;li&gt;눈이 튀어나올것 같은 엑셀 어사인표에 직면&lt;/li&gt;&lt;li&gt;여러 업무에 대한 겸임을 가능한 해소함&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;자체 개발의 범위를 좁힘&lt;/li&gt;&lt;ul&gt;&lt;li&gt;우선은 프론트엔드를 중심으로&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;개선팀을 만들어 적극적으로 활동&lt;/li&gt;&lt;li&gt;정보를 공유함&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;회의 아젠다를 시간을 들여 작성함&lt;/li&gt;&lt;li&gt;회의 참석 인원은 최소한으로&lt;/li&gt;&lt;li&gt;맴버들의 자기 주장이 부족함&lt;/li&gt;&lt;li&gt;&lt;b&gt;등등, 나오야씨에게는 기본적인것에서 많이 꾸중을 듣기도 했습니다만&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;내부의 인원만으로는 타성에 젖기 쉬웠으므로 감사한 마음으로 받아들였습니다&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;개선팀의 운영에 도전한 결과&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt;&lt;ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;정보공유&lt;/li&gt;&lt;li&gt;엔지니어 채용&lt;/li&gt;&lt;li&gt;GitHub&amp;amp;Pull Request도입&lt;/li&gt;&lt;li&gt;프로퍼티 자동화&lt;/li&gt;&lt;li&gt;자동 테스트&lt;/li&gt;&lt;li&gt;&lt;b&gt;내부적으로는 문제에 대처해 나가면서, 매번 테마를 정해 naoya씨와 토론을 진행해 나갔습니다&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;커뮤니케이션 툴의 도입&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;슬랙&lt;/li&gt;&lt;ul&gt;&lt;li&gt;사내외 맴버를 포함해 270명이 넘는 인원이 사용&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Qiita:Team(역자주: 일본에서 인기있는 개발자대상 정보공유 플랫폼인 Qiita의 기업용 버전. Markdown을 지원하며 코드를 손쉽게 글 안에 포함시킬 수 있는것이 특징임. 아틀라시안의 컨풀루언스와 마찬가지로 KM플랫폼으로 주로 사용되고 있음)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;사내외의 100명이 넘는 인원이 참가&lt;/li&gt;&lt;li&gt;회의에서 &#39;Qiita에 적혀져 있습까?&#39;라고 말해지는 경우가 늘어났다&lt;/li&gt;&lt;li&gt;1000개가 넘는 게시물이 등록!&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;처음에는 좀체로 사용해 주시지 않았습니다만&amp;nbsp;끈질기게 침투시켰습니다&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;합숙 워크샵을 개시&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;3~4개월에 한번씩 합숙워크샵을 개최&lt;/li&gt;&lt;li&gt;로드맵등을 공유&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-IbVhSLyKaEc/VmqIuE-iU7I/AAAAAAAAKHI/WcqeLdj_txo/s1600/capture3.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;301&quot; src=&quot;https://1.bp.blogspot.com/-IbVhSLyKaEc/VmqIuE-iU7I/AAAAAAAAKHI/WcqeLdj_txo/s400/capture3.PNG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;몰입적 사고를 위한 진지한 워크샾을 통해 성공에 대한 이미지를 공유&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;GitHub&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;자체개발을 진행하고 있는 팀과 프론트엔드 주변 팀의 도입은 거의 완료&lt;/li&gt;&lt;li&gt;모바일앱, 인프라의 Ansible Playbook, Django의 API개발은 Pull Request로 개발&lt;/li&gt;&lt;li&gt;디자이너도 Pull Request를 이용하고 있음&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;CI와 테스트자동화&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;GitHub에 대한 push를CircleCI와 연동&lt;/li&gt;&lt;li&gt;모바일 앱의 유닛&amp;amp;&lt;a href=&quot;http://www.tutorialspoint.com/software_testing_dictionary/end_to_end_testing.htm&quot; target=&quot;_blank&quot;&gt;e2e테스트&lt;/a&gt; 실시&lt;/li&gt;&lt;li&gt;인프라의&lt;a href=&quot;http://serverspec.org/&quot; target=&quot;_blank&quot;&gt;serverspec&lt;/a&gt;실행&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;채용 블랜딩&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;스터디 모임에서 발표한다&lt;/li&gt;&lt;ul&gt;&lt;li&gt;지금 이 자료&lt;/li&gt;&lt;li&gt;iOS 자체 개발담&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;스터디 모임의 회장 포스트를 이용&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Gocon(Go언어 개발자 컨퍼런스)&lt;/li&gt;&lt;li&gt;Rebuild Meetup&lt;/li&gt;&lt;li&gt;Ansible Meetup&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;해커톤&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Cookpad와 공동으로 개최&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-cevc8lGm3dI/VmqZ59Wxq5I/AAAAAAAAKHY/2-RMHOmva1w/s1600/capture4.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-cevc8lGm3dI/VmqZ59Wxq5I/AAAAAAAAKHY/2-RMHOmva1w/s1600/capture4.PNG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h3&gt;&lt;ul&gt;&lt;li&gt;돌이켜 보니 중요했던 부분들&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;비전을 내걸고 그곳을 향해 팀을 개혁한다&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;특히 오래된 조직은 움직임이 느리고 방해가 끼어들기 쉬움&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;하지만 모두들 효율이 나쁜것을 하고싶다고 생각하지는 않음&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;열의를 가지고 이상을 향해 노력한다&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;생각하는 방식은 모두 다를 수 밖에 없다. 반복해서 정보를 발신한다&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Qiita등을 이용해 이러저러한 내용을 적으면, 제대로 읽고 건설적으로 코맨트를 해 주는 사람도 많았음&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;모던 기술의 도입도 중요하지만, 그것을 모두를 위해 실시하는것이 중요함&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;일단 시작해 본다!&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;생각만 하고 있으면 앞으로 나갈 수 없다&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;타사의 사례같은것을 모아도 그것만으로는 진행 할 수 없다&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;어떻게 하면 가능한가? 가아니라 일단 시작 해 보자&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;우선은 손을 움직여서 실적을 만들어 내는것도 중요&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;무언가 만들어 자체개발이 가능한것을 증명했다&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;두사람만 있어도 의외로 가능하다&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;코드는 엉망이어도 우선 가능하다는것을 보여준다&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;사내 체제가 자체개발이 가능하게 되면 그때부터 코드리뷰를 도입한다&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;오히려 세세한걸 모르는 덕에 가능한것도 있다&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;왜 자체개발을 하려는지 제대로 설명한다&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt; &lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;목적과 수단은 거꾸로되기 쉽다&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/PDCA&quot; target=&quot;_blank&quot;&gt;PDCA사이클&lt;/a&gt;을 고속으로 반복할 수 있는것이 자체개발의 강점임!&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;외주작업으로는 이것이 가장 어려움&lt;/li&gt;&lt;li&gt;사양검토-&amp;gt;견적-&amp;gt;발주작업등등&lt;/li&gt;&lt;li&gt;엔드유저의 의견이 다이렉트로 오는 프론트엔드를 우선적으로 자체개발 대상으로&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;사내에 노하우가 쌓인다&lt;/li&gt;&lt;li&gt;비용이 줄어든다&lt;/li&gt;&lt;ul&gt;&lt;li&gt;쓸데없는 회의가 줄어듦&lt;/li&gt;&lt;li&gt;낮시간에는 회의만 줄창 하다 저녁이 되어서야 작업하는 상황이 사라짐&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;맨토를 부른다&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;노하우가 없는 상태에서 자력으로 모든것을 개발하는것은 무리임&lt;/li&gt;&lt;ul&gt;&lt;li&gt;하지만, 통채로 외주를 해 버리면 사원에게는 노하우가 쌓이지 않음&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;naoya씨의 &#39;외부인의 의견을 듣는다&#39;에서&lt;/li&gt;&lt;ul&gt;&lt;li&gt;외부인의 시각을 통해 무의식적으로 해 왔던 것들에 대해 수정/개선하는것이 가능해짐&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;UI나기술에 대해서도&lt;/li&gt;&lt;ul&gt;&lt;li&gt;앱의 UI에 대해서는 fladdict씨&lt;/li&gt;&lt;li&gt;파이선의 개발에 대해서는 hirokiky씨&lt;/li&gt;&lt;li&gt;그외, 과거에 몇번인가 멘토를 불렀었음&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;어쨋거나 진흙탕은 피할 수 없다!&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;프론트엔드부터 한다&lt;/li&gt;&lt;ul&gt;&lt;li&gt;특히 모바일쪽&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;새로운것 부터 한다&lt;/li&gt;&lt;ul&gt;&lt;li&gt;새로운API군&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;뜯어 고치는 것 부터 한다&lt;/li&gt;&lt;ul&gt;&lt;li&gt;인프라의 AWS 이행시에 Ansible을 도입&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;운용을 강화&lt;/li&gt;&lt;ul&gt;&lt;li&gt;내부개발화에는 역시 우수한 엔지니어가 필요함&lt;/li&gt;&lt;li&gt;엔지니어 대상의 브랜드이미지를 개선한다&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;상층부와 이미지를 공유&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;닛케이전자판((닛케이본사)는 엔지니어 채용중!&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;편안한 마음으로 사내 견학도 OK!&lt;/li&gt;&lt;li&gt;dg_lab@nex.nikkei.co.jp 으로 연락 주세요.&lt;/li&gt;&lt;li&gt;학생분들은 hack.nikkei.com으로 인턴 응모도 가능합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;&lt;ul&gt;&lt;li&gt;닛케이전자판팀의 좋은점은?&lt;/li&gt;&lt;/ul&gt;&lt;/h4&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-gjTAfsAZJEE/Vm4ixNtKWrI/AAAAAAAAKIE/afZGxvfeowg/s1600/capture5.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;252&quot; src=&quot;https://2.bp.blogspot.com/-gjTAfsAZJEE/Vm4ixNtKWrI/AAAAAAAAKIE/afZGxvfeowg/s400/capture5.PNG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/4480371352674980826/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2015/12/nikkei-inhouse-development.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/4480371352674980826'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/4480371352674980826'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2015/12/nikkei-inhouse-development.html' title='일본경제신문 자체개발 전환사례 소개'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-FOGn50dSwSs/VmpvXhQyVjI/AAAAAAAAKG0/Bh1hv_zt9us/s72-c/capture2.PNG" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-8080217400382537689</id><published>2015-12-10T11:13:00.002+09:00</published><updated>2015-12-10T11:13:49.085+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java"/><category scheme="http://www.blogger.com/atom/ns#" term="모던자바"/><category scheme="http://www.blogger.com/atom/ns#" term="함수형언어"/><title type='text'>모던 자바의 역습(5) 섹시한 자바 개발자로 거듭나기</title><content type='html'>&lt;span style=&quot;font-family: Arial; line-height: 1.38; white-space: pre-wrap;&quot;&gt;이번 포스팅은  김대우 님(http://lekdw.blogspot.kr/)과 함께 진행한 동명의 웨비너의 발표 내용에 바탕을 두고 작성되었습니다. 세상에 나온지 어느덧 20년. 오랜동안 프로그래밍 언어의 절대 강자로서 세상을 호령하던 자바를 둘러싼 진실 혹은 거짓말 그리고 과거와 미래에 대하여 알아봅니다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-family: Arial; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;웨비너 영상 : &lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BlUvz7toT1A&quot; style=&quot;line-height: 1.38; text-decoration: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;https://www.youtube.com/watch?v=BlUvz7toT1A&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: Arial; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;슬라이드 : &lt;/span&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; line-height: 1.38; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/andrewdohyunjung/ss-49894453&quot; style=&quot;line-height: 1.38; text-decoration: none;&quot;&gt;http://www.slideshare.net/andrewdohyunjung/ss-49894453&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;스크롤의 압박을 피하기 위해 이번 포스팅은 다섯 파트로 나누어 연재합니다.&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava1.html&quot; target=&quot;_blank&quot;&gt;프로그래밍 언어 자바&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava2.html&quot; target=&quot;_blank&quot;&gt;자바를 둘러싼 진실 혹은 거짓말&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava3.html&quot; target=&quot;_blank&quot;&gt;자바 코딩 스타일 변천사&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava4.html&quot; target=&quot;_blank&quot;&gt;모던 자바의 등장 - Java8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava5.html&quot; target=&quot;_blank&quot;&gt;섹시한 자바 개발자로 거듭나기&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;모던 자바의 역습&amp;nbsp;&lt;/span&gt;&lt;/h2&gt;&lt;h2 style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;/h2&gt;&lt;h1 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 21.3333px; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;5. 섹시한 자바 개발자로 거듭나기&lt;/span&gt;&lt;/h1&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;결론에 이르기 전에 다시 한 번 자바 8의 장점을 정리해봅시다.  &lt;/span&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;font-family: Arial; font-size: 14.6667px; list-style-type: disc; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;함수형 프로그래밍 패러다임 지원 : 손쉬워진 병렬 프로그래밍&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;font-family: Arial; font-size: 14.6667px; list-style-type: disc; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;더 간결해진 문법(그루비, 스칼라 같은 모던 언어에 더욱 가까운 형태의 코드 구현 가능)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;font-family: Arial; font-size: 14.6667px; list-style-type: disc; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;주요 라이브러리와 프레임워크들의 자바 8 지원 완료&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;font-family: Arial; font-size: 14.6667px; list-style-type: disc; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;잘 정비된 개발 환경&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;font-family: Arial; font-size: 14.6667px; list-style-type: disc; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;20년간 조성된 거대한 자바 생태계를 그대로 이용 가능&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 17.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자바의 단점을 보완하는 전략 - 폴리그랏 프로그래밍&lt;/span&gt;&lt;/h2&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자바 8에 이르러서는 행사코드가 많이 줄어든 것은 사실이나 아직도 다른 모던 언어에 비해 부족한 것이 사실입니다. 여기에는 하위버전 코드들에 대한 호환성을 유지하기 위해 어쩔 수 없는 부분들도 있습니다. 더 높은 생산성과 함수형 프로그래밍을 원한다면 JVM 언어를 만나보는 것은 어떨까요? JVM 언어는 자바 가상 머신에서 동작하는 언어들로 대표적으로 스칼라,그루비, 클로저, JRuby, JPython 그리고 젯브레인즈가 만든 코틀린(Kotlin)을 들 수 있습니다. 이들 JVM 언어들은 자바와 API 레벨에서 호환성을 지니고 있을 뿐만 아니라 자바와 함께 코드를 작성할 수도 있어 자바와 적절하게 섞어쓴다면 생산성이나 품질 향상에 크게 기여할 수 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;더 빠른 성능을 원한다면 C나 C++와 함께 섞어쓰는 방법도 있습니다. 이들 언어는 자바 자체가 원래 C/C++ 언어와 문법적으로 닮은 부분이 많은 만큼 자바 개발자가 익히기 쉽습니다. 포인터나 메모리 관리 등 몇몇 익히기 까다로운 개념이 있기는 하지만 요즘은 개발 환경도 상당히 세련되어졌고 오랜시간 프로그래머들에게 사랑받은 언어인 만큼 풍부한 라이브러리와 레퍼런스를 자랑합니다. 자바 개발자로서 C나 C++ 언어를 익히고 이를 자바와 연결시키는 JNI까지 구현 가능하다면 그야말로 영화 메트릭스에서 메트릭스의 본질을 볼 수 있게 된 네오와도 같이 엄청난 힘을 손에 넣는다고 할 수 있습니다. &lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;249px;&quot; src=&quot;https://lh5.googleusercontent.com/cLWkDEaY83a7qOt_15su5qDkNPOTIDL8fFRzZUt6B5xgXBxbkDbhUX-B0tmVAsXiBd-LeZVo9bb2G46xqZKc1pKuGEHWTcaz0isWHtqHbgA1KTn0N7Zfo9tCr5cD9bT6j75Sjg&quot; style=&quot;border: none; transform: rotate(0rad);&quot; width=&quot;602px;&quot; /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;요런 느낌?&lt;/span&gt;&lt;/div&gt;&lt;h2 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 17.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자바 8의 도입, 더 미룰 이유가 없다!&lt;/span&gt;&lt;/h2&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자바 8의 최초 구현인 OpenJDK 8이 공개된 시점은 2012년 4월이었습니다. 벌써 햇수로 3년이 지났고 오라클에서 자바 8을 발표한 지도 1년이 지났습니다. 대부분의 라이브러리들은 자바 8의 지원을 완료한 상태이며 특히 웹 프레임워크로 인기가 높은 스프링이나 아카 라이브러리 최신 버전은 이미 자바 8의 지원을 마친 상태입니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;일단 자바 8을 도입하는 데 있어서 JavaEE 기반의 애플리케이션을 개발하는 경우가 아니라면 더 이상 도입을 미룰 이유는 딱히 찾아보기 어렵습니다. 하지만 호환성 문제 이외에도 자바 8은 문법적으로 이전 자바와는 크게 이질적인 부분이 있어 개발자들의 진입이 그리 쉽지만은 않을 전망입니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;특히 문법보다도 함수형 프로그래밍이라는 패러다임은 앞으로 상당 기간 프로그래머를 나누는 한 가지 기준으로 작용할 것으로 보입니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;기본적으로는 자바 8을 도입하는 전략도 부록 A.3절에서 설명한 ‘새로운 코딩 스타일에 적응하기’와 크게 다르지 않습니다. 단지 코딩 스타일뿐만이 아니라 제대로 함수형 프로그래밍 패러다임을 이해하고 사용하기 위해서는 사내 워크숍이나 웨비너를 통해 새로운 패러다임을 맞이할 준비를 해야만 합니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 17.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자바 개발자에서 모던 자바 개발자로&lt;/span&gt;&lt;/h2&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;일각에서는 자바 8의 함수형 패러다임 도입이 너무 늦어 그 시기를 놓친 것이 아닌가 하는 우려의 목소리도 있습니다. 이미 함수형 프로그래밍이 필요한 분야에서는 자바 8보다는 스칼라나 얼랭(ErLang)과 같은 함수형 언어를 도입했다는 소문도 들려옵니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;하지만 멀티프로세싱 시대는 이제 막 시작했을 뿐입니다. 앞으로 더 많은 수의 코어들로 동작하는 기기들이 속속 우리 앞에 모습을 드러낼 것이고 그러한 기기에서 제대로 성능을 뽑아내는 프로그램을 만들기 위해서 함수형 프로그래밍은 선택이 아닌 필수 요소로 자리 잡을 것입니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;아직 자바 8에 대해서 유보적인 입장을 취하는 개발자께 이 글이 조금이라도 보탬이 되었으면 하는 바램으로, 모던 자바라는 단어를 처음으로 필자에게 제안한 구글의 소프트웨어 엔지니어 염재현 님의 말을 소개하는 것으로 글을 마치고자 합니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot; style=&quot;line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;color: #666666; font-family: &#39;Trebuchet MS&#39;; font-size: 17.3333px; font-style: italic; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;“흔히들 이력서에 자바 엔지니어라고만 적어넣습니다. 버전까지 명기하는 경우는 없지요. 하지만 이제부터는 Java 8 이후의 함수형 프로그래밍과 그 이전의 자바를 구분하여 부를 필요가 있지 않을까요? C++를 C++11 이후 모던 C++라고 부르는 것과 마찬가지로요.”&lt;/span&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;모던자바의 역습&lt;/div&gt;&lt;h1 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;ol style=&quot;font-size: medium; font-weight: normal; line-height: normal;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava1.html&quot; target=&quot;_blank&quot;&gt;프로그래밍 언어 자바&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava2.html&quot; target=&quot;_blank&quot;&gt;자바를 둘러싼 진실 혹은 거짓말&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava3.html&quot; target=&quot;_blank&quot;&gt;자바 코딩 스타일 변천사&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava4.html&quot; target=&quot;_blank&quot;&gt;모던 자바의 등장 - Java8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava5.html&quot; target=&quot;_blank&quot;&gt;섹시한 자바 개발자로 거듭나기&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/h1&gt;&amp;nbsp;</content><link rel='replies' type='application/atom+xml' href='http://www.moreagile.net/feeds/8080217400382537689/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.moreagile.net/2015/12/modernjava5.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/8080217400382537689'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5736677393037461528/posts/default/8080217400382537689'/><link rel='alternate' type='text/html' href='http://www.moreagile.net/2015/12/modernjava5.html' title='모던 자바의 역습(5) 섹시한 자바 개발자로 거듭나기'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-5736677393037461528.post-7126824802666239752</id><published>2015-12-10T11:13:00.001+09:00</published><updated>2015-12-10T11:13:37.041+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java"/><category scheme="http://www.blogger.com/atom/ns#" term="모던자바"/><category scheme="http://www.blogger.com/atom/ns#" term="함수형언어"/><title type='text'>모던 자바의 역습(4) 모던 자바의 등장 - Java8</title><content type='html'>&lt;span style=&quot;font-family: Arial; line-height: 1.38; white-space: pre-wrap;&quot;&gt;이번 포스팅은  김대우 님(http://lekdw.blogspot.kr/)과 함께 진행한 동명의 웨비너의 발표 내용에 바탕을 두고 작성되었습니다. 세상에 나온지 어느덧 20년. 오랜동안 프로그래밍 언어의 절대 강자로서 세상을 호령하던 자바를 둘러싼 진실 혹은 거짓말 그리고 과거와 미래에 대하여 알아봅니다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-family: Arial; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;웨비너 영상 : &lt;/span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BlUvz7toT1A&quot; style=&quot;line-height: 1.38; text-decoration: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;https://www.youtube.com/watch?v=BlUvz7toT1A&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: Arial; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;슬라이드 : &lt;/span&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; line-height: 1.38; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/andrewdohyunjung/ss-49894453&quot; style=&quot;line-height: 1.38; text-decoration: none;&quot;&gt;http://www.slideshare.net/andrewdohyunjung/ss-49894453&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;스크롤의 압박을 피하기 위해 이번 포스팅은 다섯 파트로 나누어 연재합니다.&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava1.html&quot; target=&quot;_blank&quot;&gt;프로그래밍 언어 자바&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava2.html&quot; target=&quot;_blank&quot;&gt;자바를 둘러싼 진실 혹은 거짓말&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava3.html&quot; target=&quot;_blank&quot;&gt;자바 코딩 스타일 변천사&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava4.html&quot; target=&quot;_blank&quot;&gt;모던 자바의 등장 - Java8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/12/modernjava5.html&quot; target=&quot;_blank&quot;&gt;섹시한 자바 개발자로 거듭나기&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;모던 자바의 역습&amp;nbsp;&lt;/span&gt;&lt;/h2&gt;&lt;h2 style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;/h2&gt;&lt;h2 style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 21.3333px; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;4. 모던 자바의 등장 - Java 8&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 21.3333px; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;제네릭과 메타데이터 프로그래밍 패러다임이 도입된 자바 5 이후 거의 10년 만에 함수형 프로그래밍 패러다임을 들고 등장한 자바 8! C와 C++의 관계처럼 완전히 다른 언어는 아니지만 이전 버전과는 분명하게 선이 그어지는 프로그래밍 패러다임을 지닌 자바 8에 대해서 살펴보겠습니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 17.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;함수형 프로그래밍은 왜 필요한가?&lt;/span&gt;&lt;/h2&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;오랜 세월 대학원 연구실에서나 볼 수 있었던 함수형 프로그래밍 패러다임이 이처럼 주목 받게 된 것은 CPU의 멀티코어화가 일반화됨에 따라 더 간편하게 병렬처리를 구현할 수 있는 프로그래밍 방식이 필요해졌기 때문입니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;함수형 프로그래밍 패러다임은 간단히 말해 처리 자체를 데이터와 완전히 분리하는 것으로, 함수를 다른 함수의 인자값으로 넘겨줌으로써 병렬 처리 구현이 매우 손쉽게 이루어 집니다. 이때, 병렬처리를 위해서 값은 스트리밍으로 처리될 필요성이 있으며, 이 스트리밍 처리와 관련된 API야 말로 자바 8의 핵심이라 할 수 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;아래 예제는 Collection.parallelStram()을 이용해 숫자 배열 중 짝수의 합을 구하는 프로그램 입니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; integerList &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;7&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;9&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;});&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; sum &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; integerList&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;parallelStream&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;filter&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;i &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; i &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006666; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;0)&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;mapToInt&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;i &lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; i)&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;sum&lt;/span&gt;&lt;span style=&quot;color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;();&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;만약 자바 8 이전 버전의 자바로 병렬 처리를 구현하려면 ExecutorService나 Fork/Join 프레임워크를 사용해야만 하는데, 이 경우 적어야 하는 코드양이 최소 네다섯 배는 많아집니다.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;패러럴 스트림을 이용할 경우 이점은 코딩의 편리함 이외에, 속도에 있어서도 이득을 보는 경우가 있습니다. 아래 벤치마크 결과는 8코어 머신으로 세 가지 병렬 처리 모델을 실행 시켰을 때 속도를 측정한 것으로 16스레드로 움직였을 때 전체 테스트 중 가장 좋은 결과를 내고 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;261px;&quot; src=&quot;https://lh3.googleusercontent.com/6kQDHIzb2tksmVRSCG6fHjriY5cKTAh3xjyoWC0dAikN9QygajYydq4HNX4xFQhcLWH7haS7blZ2GoqR-eeNaxuv0ft8iFuasWk3umX03M5VSe-CJu8umpjP3NwnevGzYMJuMA&quot; style=&quot;border: none; transform: rotate(0rad);&quot; width=&quot;602px;&quot; /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;ExecutorService vs. Fork/Join Framework vs. Parallel Streams&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 14.6667px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;출처: http://blog.takipi.com/forkjoin-framework-vs-parallel-streams-vs-executorservice-the-ultimate-benchmark/&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;&quot;&gt;&lt;span style=&quot;font-family: &#39;Trebuchet MS&#39;; font-size: 17.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;자바 8의 주요 신 기능&lt;/span&gt;&lt;/h2&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: white; font-family: &#39;Trebuchet MS&#39;; font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;아래 내용은 캘리포니아에 있는 소프트웨어 개발사인 TechEmpower의 블로그에 올라온 ‘Everything about Java 8’의 일부를 발췌하여 정리한 것입니다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: white; font-family: &#39;Trebuchet MS&#39;; font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;출처 : &lt;/span&gt;&lt;a href=&quot;http://www.techempower.com/blog/2013/03/26/everything-about-java-8/&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: white; color: #1155cc; font-family: &#39;Trebuchet MS&#39;; font-size: 13.3333px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;http://www.techempower.com/blog/2013/03/26/everything-about-java-8/&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 dir=&quot;ltr&quot; style=&quot;line-height: 1.6632; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;color: #666666; font-family: &#39;Trebuchet MS&#39;; font-size: 16px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;인터페이스 개선&lt;/span&gt;&lt;/h3&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: white; color: #666666; font-family: &#39;Trebuchet MS&#39;; font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;인터페이스에 static 메소드를 정의하는 것이 가능해졌습니다. java.util.Comparator에 추가된 static naturalOrder 메소드를 살펴봅시다.&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.85625; margin-bottom: 8pt; margin-top: 8pt;&quot;&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;T &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Comparable&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; T&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Comparator&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;T&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; naturalOrder&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br class=&quot;kix-line-break&quot; /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #000088; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Comparator&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;T&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #660066; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Comparators&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #666600; font-family: Consolas; font-size: 12px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f4f4f4; color: #660066; font-family: Consolas; font-size: 12