<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>blog</title>
        <description>스스로 엔지니어라고 부르고 싶은 쪼렙 개발자(라고 쓰고 코더라고 읽는다) 의 본격 삽질 노트</description>
        <link>https://blog.sangyoung.me/</link>
        <atom:link href="https://blog.sangyoung.me/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Sat, 16 Feb 2019 03:08:51 +0000</pubDate>
        <lastBuildDate>Sat, 16 Feb 2019 03:08:51 +0000</lastBuildDate>
        <generator>Jekyll v3.7.4</generator>
        
        <item>
            <title>[VUE x TDD] 0. 테스트 주도 개발, 뭐가 좋은데?</title>
            <description>&lt;h2 id=&quot;신기능-추가와-수정의-두려움&quot;&gt;신기능 추가와 수정의 두려움&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;잘 돌아가는 시스템 건드리는 것 아니다?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;개발자라면 누구나 더 간결하고 의도대로 잘 동작하는 코드에 대한 니즈가 있지만, 현실 세계에서 리펙토링은 부담스럽다. 개발을 업으로 하면서 가장 두려움을 느끼는 순간이 잘 돌아가고 있는 &lt;strong&gt;레거시 프로젝트&lt;/strong&gt;에 어쩔 수 없이 손을 대야할 때이다. 방대한 기능과 코드량, 그리고 수많은 복붙 코드들.. 새로운 기능을 추가한다거나 수정을 하려고 할 때, 과연 이 코드가 전체 제품에 어떤 영향을 미칠지를 파악하기 위해 많은 시간을 쏟게 된다.&lt;/p&gt;

&lt;p&gt;코드 수정에 대한 두려움은 규모가 커진 시스템에서 흔히 볼 수 있는 부작용 중 하나다. 좋든 싫든 현실 세계의 소프트웨어(웹이든 네이티브 앱이든, OS 든 모든 종류의 소프트웨어)는 예상치 못한 변경 가능성을 내포하고 있다. 이런 상황에서 부담감(혹은 두려움) 없이, 신뢰할 수 있는 방식으로 시스템 규모를 키우려면 어떻게 해야할까?&lt;/p&gt;

&lt;h2 id=&quot;두려움-없이-변경하는-방법&quot;&gt;두려움 없이 변경하는 방법&lt;/h2&gt;
&lt;p&gt;누구나 예상할 수 있는 답이지만, 코드 변경의 두려움을 덜어주는 것은 자동화된 테스트이다. 예상치 못한 변화에 안전하게 대처하는 방법은 배포전 모든 요구사항을 테스트하는 것이다. 하지만 매번 사람의 손으로 테스트하는 것은 비효율적일 뿐더러 실수할 확률을 배제할 수 없다. 이럴 때 모든 요구사항에 대해서 자동화된 회귀 테스트가 존재한다면? 코드를 추가하거나 수정하는 데 부담감을 획기적으로 낮출 수 있다.&lt;/p&gt;

&lt;p&gt;테스트를 좋아하는 개발자는 없다. 코딩하기도 바쁜 데, 테스트 코드 작성에 시간을 빼앗기다니? 이런 상황을 근본적으로 뒤집자는 것이 테스트 주도 개발(TDD)이다. 쉽게 말해서 테스트 코드를 먼저 작성한 후 그에 맞게 코딩을 하자는 것이다. TDD를 처음 접하는 개발자의 머릿속에는 여러가지 의문이 든다. &lt;em&gt;‘테스트할 코드가 없는 데? 테스트를 먼저 하라니?’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;여러 의문은 뒤에 이야기하고, 우리는 무엇을 얻을 수 있는가?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;작업에 대한 인수 조건이 명확해진다.&lt;/li&gt;
  &lt;li&gt;코드가 하는 일에 대해 실행 가능한 명세가 생긴다.&lt;/li&gt;
  &lt;li&gt;완전한 회귀 테스트 스위트&lt;/li&gt;
  &lt;li&gt;코드 변경에 대한 자신감 → 기술 부채를 갚을 수 있는 기반&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TDD 를 창시했거나 혹은 재발견했다고 알려진 &lt;a href=&quot;https://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;켄트벡&lt;/a&gt;은 테스트 주도 개발을 한 문장으로 요약했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실패하는 테스트 없이는 한 줄도 작성하지 말라.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tdd-기본-프로세스&quot;&gt;TDD 기본 프로세스&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/VUExTDD/unit_test.png&quot; alt=&quot;TDD 기본 프로세스&quot; /&gt;&lt;/p&gt;

&lt;p&gt;켄트백이 반쯤 농담식으로 말하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;빨간 불 → 녹색 불 → 리펙터링&lt;/code&gt; 이 세 과정이 프로세스의 전부이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;실패하는 유닛테스트 작성&lt;/li&gt;
  &lt;li&gt;테스트 통과하는 코드 작성&lt;/li&gt;
  &lt;li&gt;리펙토링&lt;/li&gt;
  &lt;li&gt;1로 돌아기기&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트의-종류&quot;&gt;테스트의 종류&lt;/h2&gt;
&lt;p&gt;테스트는 크게 다음의 세 가지 종류의 나눌 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인수 테스트: 전체 시스템이 잘 동작하는가?&lt;/li&gt;
  &lt;li&gt;통합 테스트: 변경할 수 없는 외부 라이브러리와 함께 잘 동작하는가?&lt;/li&gt;
  &lt;li&gt;유닛 테스트: 객체/컴포넌트가 제대로 동작하는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인수 테스트는 전구간 테스트 &lt;code class=&quot;highlighter-rouge&quot;&gt;End-to-End Test&lt;/code&gt; 를 말한다. 고객 혹은 기획 조직에서 넘어온 요구 사항에 시스템이 부합하는 지 여부와 전체 시스템이 원하는 방식으로 작동하는 가를 테스트한다. 인수 테스트는 가능한 모든 요구사항에 대해서, 시스템 내부에서 코드로 호출하지 않고 오직 사용자 인터페이스를 통해서 테스트한다.&lt;/p&gt;

&lt;p&gt;통합 테스트는 기능이 API 서버와 같은 외부 시스템과 연동하는 테스트이다. 작은 규모의 프로젝트에서는 인수 테스트로 충분할 수도 있다. 시스템 규모가 커지면 많은 시간이 소요되는 인수 테스트 대신 기능 단위의 통합 테스트를 작성하는 게 필요할 수도 있다.&lt;/p&gt;

&lt;p&gt;유닛 테스트는 인수 테스트와 통합 테스트가 커버하지 못하는 컴포넌트의 상세 스펙을 정의한다.&lt;/p&gt;

&lt;h2 id=&quot;무엇을-테스트할-것인가-tdd-큰-그림-그리기&quot;&gt;무엇을 테스트할 것인가? TDD 큰 그림 그리기&lt;/h2&gt;

&lt;p&gt;TDD를 처음 접할 때 허허벌판에 홀로 서있는 것 처럼 막막함을 느꼈다. 대체 어디서 부터 시작해야할지? 무엇을 테스트해야하는 건지. &lt;code class=&quot;highlighter-rouge&quot;&gt;xUnit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mocha&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; 등 여러가지 도구의 사용법은 많이들 알려주는데, 정작 어디서 부터 시작해야할지는 알려주는 글은 찾아보기 어렵다. 어디서 부터 시작해야할까?&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;테스트 없이는 코드를 작성하지 말라&lt;/code&gt; 는 황금률에 따라야겠다. 황금률은 우리가 코드를 어디서 부터 작성하고, 어디서 끝낼지를 알려준다. 우선 프로젝트 요구사항 중 &lt;strong&gt;가장 작은 단위의 동작하는 골격부터 시작하는 것이다.&lt;/strong&gt; 가장 작은 기능의 인수 테스트를 작성하는 것으로 TDD 개발의 첫 발을 뗄 수 있다. 그리고 인수 테스트를 통과하는 것이 우리가 코딩을 멈추는 목표점이 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/VUExTDD/unit_test.png&quot; alt=&quot;TDD 큰 그림 그리기&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개인적으로 사용할 간단한 가계부 어플리케이션을 만들어 보려고한다. 가계부 앱으로 요구 사항은 다음과 같다.&lt;/p&gt;

&lt;h4 id=&quot;간단한-가계부-요구사항&quot;&gt;간단한 가계부 요구사항&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 사용자는 지출 내역을 저장할 수 있다.
2. 사용자는 지출 내역을 날짜별로 조회할 수 있다.
3. 사용자는 지출 내역을 수정할 수 있다.
4. 사용자는 지출 내역을 삭제할 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1번 요구사항을 분석해서 가장 작은 단위의 동작하는 앱, 인수 테스트를 도출해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 사용자는 지출 내역을 저장할 수 있다.
  1-1. 금액을 입력하지 않으면 저장할 수 없다.
  1-2. 제목없이 저장할 수 없다.
  1-3. 날짜를 입력하지 않으면 오늘 날짜로 저장한다.
  1-4. 제목, 금액, 날짜를 저장한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 1-1번을 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;금액을 입력하지 않으면 지출 내역 저장을 실패하는 테스트&lt;/code&gt;를 작성하고 드디어 코딩을 시작할 수 있다. 다음 포스트부터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue-cli&lt;/code&gt; 를 통해 실제 개발 환경을 구성하고 테스트를 통과하는 코드를 작성해 볼 예정이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;참고 자료:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/24/goods/12246033&quot;&gt;테스트 주도 개발 (켄트백 저)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/24/goods/9008455?scode=032&amp;amp;OzSrank=1&quot;&gt;테스트 주도 개발로 배우는 객체 지향 설계와 실천(스티브 프리먼, 냇 프라이스 저)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Sun, 27 Jan 2019 18:20:00 +0000</pubDate>
            <link>https://blog.sangyoung.me/2019/01/27/vue-tdd-00/</link>
            <guid isPermaLink="true">https://blog.sangyoung.me/2019/01/27/vue-tdd-00/</guid>
            
            <category>Javascript</category>
            
            <category>Vue.js</category>
            
            <category>TDD</category>
            
            
            <category>VUE x TDD</category>
            
        </item>
        
        <item>
            <title>Electron, 웹기술로 크로스플랫폼 데스크톱 앱 만들기</title>
            <description>&lt;p&gt;IT 분야 중 웹(Web)은 가장 역동적으로 발전하고 있는 분야 중 하나다. 그 중에서도 최근 가장 HOT한 언어를 꼽으라면 가장 먼저 생각나는 것이 &lt;strong&gt;Javascript&lt;/strong&gt; 다! HTML5 등장 이후로 웹 개발에서 프론트엔드의 비중이 높아졌고, Javascript 의 생태계는 비약적으로 발전했다.&lt;/p&gt;

&lt;p&gt;나는 거의 매일 Javascript 코드를 작성하지만, 그동안 해왔던 작업을 반복했을 뿐 제대로 공부해본 적이 없다. Node.js 가 등장하고 Javascript 로 백엔드 작업이 가능해져도 Java, PHP, Python, Ruby 등으로도 충분히 가능한 데 구지 배울 필요가 있을까하는 마음에(&lt;em&gt;사실 새로 배우기 귀찮아서&lt;/em&gt;) 지나쳤다. Angular.js, React.js, Vue.js 등의 UI 프레임워크들이 나오고 트렌드를 주도했지만 그냥 하던 방식대로 편하게(&lt;em&gt;jQuery 로도 잘 되는데 뭘..&lt;/em&gt;) 작업했다.&lt;/p&gt;

&lt;h2 id=&quot;javascript-어디까지-해봤니&quot;&gt;Javascript 어디까지 해봤니?&lt;/h2&gt;

&lt;p&gt;Javascript 에 관심이 전혀 없던 나의 생각을 고쳐준 것은 협업툴 &lt;strong&gt;Slack&lt;/strong&gt; 과 &lt;strong&gt;Atom&lt;/strong&gt; 에디터였다. 둘 다 굉장히 예쁜 UI를 가진 데스크톱 앱(&lt;em&gt;Java 의  Swing 으로 만든 UI는 정말 안예쁘다&lt;/em&gt;)이었는데, 이게 웹기술로 만들었다는 충격적인 사실을 알게되었다. 웹기술이라니.. 내가 항상 쓰던 HTML5, CSS, Javascript 로도 데스크톱 앱을 만들 수 있다니! Javascript 로 브라우저를 벗어나 서버를 만들더니 이젠 데스크톱 앱까지 만들 수 있다. 한계가 어디까지인지 모를 일이다.&lt;/p&gt;

&lt;h2 id=&quot;electron-소개&quot;&gt;Electron 소개&lt;/h2&gt;

&lt;p&gt;Electron 은 깃헙(Github)에서 Atom 에디터를 만들기 위해 만든 것이다. Atom 은 HTML5, CSS, Javascript 등 순수하게 웹기술로 구현되었는데, 프레임워크를 따로 분리해서  Atom-shell 이라는 이름으로 공개했다. 후에 Electron 이라는 명칭으로 변경했다. 내부적으로 &lt;strong&gt;&lt;em&gt;Main Process 는 Node.js 로, Renderer Process 는 구글의 오픈소스 브라우져인 크로미움을 기반으로 되어있다.&lt;/em&gt;&lt;/strong&gt; 모두 웹기술이며, 크로스 플랫폼이 가능한 스택이다. 멋지지 않은가?&lt;/p&gt;

&lt;p&gt;Electron 개발 경험은 아직 걸음마 단계여서 깊이 있는 내용을 제시하지는 못하지만 겉으로 보이는 측면들을 살펴보면 다음과 같다.&lt;/p&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;순수 웹기술로 데스크톱 앱 제작&lt;/li&gt;
  &lt;li&gt;Mac, Windows, Linux 를 아우르는 크로스플랫폼 앱을 손쉽게 제작&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;문서화 부족. Github 에 한글화까지 되어있지만 다소(많이) 불친절&lt;/li&gt;
  &lt;li&gt;Reference 부족. 내가 올바른 방향으로 개발하고 있는 지 판단하기 어렵다.&lt;/li&gt;
  &lt;li&gt;한국 커뮤니티의 부재. 참고자료 찾기 힘듦&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;대표적인-앱&quot;&gt;대표적인 앱&lt;/h3&gt;

&lt;h4 id=&quot;atom&quot;&gt;Atom&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;깃헙이 만든 오픈소스 텍스트 에디터&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;https://atom.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-business.discourse.org/uploads/github_atom/487/cda7a1c2ac02fd3d.png&quot; alt=&quot;&quot; title=&quot;Atom&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;slack&quot;&gt;Slack&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;웹훅과 봇 등 다양한 API 를 제공해서 업무 효율성을 높여주는 협업 메신저&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;https://slack.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://inteamwetrust.files.wordpress.com/2016/05/slack-logo.jpg&quot; alt=&quot;&quot; title=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;마이크로소프트가 내어놓은 가장 IDE에 근접한 텍스트 에디터&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://2434zd29misd3e4a4f1e73ki.wpengine.netdna-cdn.com/wp-content/uploads/2015/05/VS_rgb_Purple_D-800x227.png&quot; alt=&quot;&quot; title=&quot;Visual Studio Code&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;덧. 첫번째 작업은 유구한 전통에 따라 Hello World 를 찍어보겠다&lt;/em&gt;&lt;/p&gt;

</description>
            <pubDate>Thu, 19 Jan 2017 20:20:00 +0000</pubDate>
            <link>https://blog.sangyoung.me/2017/01/19/introducing-electron/</link>
            <guid isPermaLink="true">https://blog.sangyoung.me/2017/01/19/introducing-electron/</guid>
            
            <category>Javascript</category>
            
            <category>Electron</category>
            
            <category>Node.js</category>
            
            
            <category>JAVASCRIPT</category>
            
        </item>
        
        <item>
            <title>안드로이드 BadTokenException 의 원인과 해결방법</title>
            <description>&lt;p&gt;안드로이드 앱을 테스트하다보면 UI를 핸들링할 때, 가끔 BadTokenException 발생하는 것을 볼 수가 있다. 보통 빌드 시에는 알 수 없고, 런타임 시점에서 발생하는 점에서 약간 골치가 아프다. 특히 안드로이드의 초보인 나는 평소에는 잘 구동되던 다이얼로그 창에서 오류를 발생하는 것을 보고 적잖이 당황했다. 더구나 내가 구현하지도 않은 나쁜 토큰(Bad Token) 때문에 발생한 오류라니.. 좀 더 명확한 이유를 알고 싶었다. 내가 접한 예외 메시지는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;android.view.WindowManager$&lt;strong&gt;BadTokenException&lt;/strong&gt;: Unable to add window – token android.os.BinderProxy@40b47bd8 is not valid; is your activity running?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;발생-원인&quot;&gt;발생 원인&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;BadTokenException이&lt;/strong&gt; 발생한 원인을 파악하기 위해 오류를 재현하던 중, 같은 코드라도 쓰레드 위치나 라이프 사이클 상의 시점에 따라 간헐적으로 발생하는 것을 발견했다. 쓰레드 위치는 Main Thread가 아닌 Background Thread에서, 주로 AsyncTask의 &lt;code class=&quot;highlighter-rouge&quot;&gt;onPostExecute()&lt;/code&gt; 메소드에서 다이얼로그 창을 통해 사용자에게  무엇인가를 알려주려고 시도하는 경우 간헐적으로 발생한다. 발생하는 시점은 Background Thread의 작업이 모두 종료되기 전에 뒤로가기 버튼을 누르거나 명시적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;finish()&lt;/code&gt;메소드를 호출할 때이다.
&lt;strong&gt;BadTokenException의&lt;/strong&gt; 이유를 한문장으로 정리하면 , 예외 메시지에 &lt;em&gt;”is your activity running?”&lt;/em&gt; 이라고 명시되어 있듯 종료된 Activity의 context를 인자로 다이얼로그 창을 표시하려고 할 때 발생한다. 다이얼로그 창을 표시할 Activity가 없기 때문에 안드로이드 런타임이 나쁜 토큰(Bad Token1))이라는 예외를 던진다.&lt;/p&gt;

&lt;p&gt;예를 들어보자면, 다음 코드와 같이 앱에 일정시간마다 사용자가 작업한 내용을 서버로 전송해서 자동 저장해주는 기능을 구현했다고 생각해보자. 서버 API는 수행결과를 JSON 형태의 메시지로 전송하고, 그 내용을 다이얼로그 창으로 사용자에게 전달하는 간단한 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoSaveTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doInBackground&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;c1&quot;&gt;// 데이터 저장 요청 코드...&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPostExecute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
                &lt;span class=&quot;c1&quot;&gt;// 서버로 부터 받은 메시지를 다이얼로그 창으로 띄움.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThisActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ThisActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 자동 저장 기능은 사용자가 자의든 타의든 뒤로가기 버튼이나 홈 버튼을 누를 때도 호출되면 아주 좋을 것 같다. 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;onPause()&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;onDestroy()&lt;/code&gt; 메소드를 오버라이딩해서 자동저장 기능 호출하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;finish()&lt;/code&gt;로 Activity를 종료했다. 이제 사용자는 자신이 입력하던 데이터를 보호해주는 훌륭한 앱을 얻었다. 하지만 동시에 크래쉬가 발생해 앱이 종료되는 상황에 직면할 것이다.
안드로이드 라이프 사이클에 익숙한 개발자들에게는 간단한 문제일지 모르겠지만, 초보 개발자인 나에게는 어떨 때는 잘되고, 어떨 때는 크래쉬를 일으켜서 앱을 종료시켜버리는 상황이 난감했다. 어느 시점에 오류가 발생하는지 테스트해보니 백버튼을 눌렀을 때마다 크래쉬가 발생하는 것을 발견했다. 안드로이드 시스템에서 뒤로가기 버튼을 눌렀을 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;onDestroy()&lt;/code&gt; 메소드가 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Activity가 Destroy되는 시나리오들은:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 뒤로가기 버튼을 눌렀을 때&lt;/li&gt;
  &lt;li&gt;Activity 안에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;finish()&lt;/code&gt; 함수를 호출하여 명시적으로 종료할 때&lt;/li&gt;
  &lt;li&gt;Stop된 상태에서 오랫동안 사용하지 않을 때&lt;/li&gt;
  &lt;li&gt;Stop된 상태에서 전면에 있는 Activity에 더 많은 리소스를 필요할 때&lt;/li&gt;
  &lt;li&gt;사용자가 화면을 회전 시켰을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상기 예제 코드같은 경우는 뒤로가기 버튼을 눌러서 &lt;code class=&quot;highlighter-rouge&quot;&gt;onDestroy()&lt;/code&gt; 메소드가 호출하면 , 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncTask&lt;/code&gt;를 호출하고 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;super.onDestroy()&lt;/code&gt;를 호출해서 Activity를 종료시킨다. 그렇게되면 Background Thread에서 AsyncTask가 실행되고 있는데 Main Thread가 종료되는 상황이다. 이렇게 되면, AsyncTask에서 다이얼로그 창을 열면서 인자로 넘겨주는 context는 이미 종료된 Activity의 것이 된다. 또한 가능성은 적지만, Background Thread(주로 AsyncTask)에서 UI를 핸들링하는 부분이 실행되기 전에 안드로이드 런타임에 의해 Activity가 정리될(위 시나리오 중 3, 4 번째에 해당) 경우에도 &lt;strong&gt;BadTokenException&lt;/strong&gt;이 발생할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;해결법&quot;&gt;해결법&lt;/h2&gt;

&lt;p&gt;원인을 정확히 알았으니 해결법은 간단하다. 해당 UI들을 사용할 때, Activity가 종료되었는 지를 확인하면된다. 만약 종료되었다면 다이얼로그 창을 열지 않으면 그만이다. 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;isFinishing()&lt;/code&gt; 메소드를 사용하면 Activity의 종료 여부를 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThisActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFinishing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThisActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;1) Token : Window Token을 말한다. Window는 Activity가 자신의 레이아웃을 그리는 고유한 창이다. 윈도우 토큰은 안드로이드 시스템에서 윈도우 매니저가 윈도우를 식별하는 데 사용하는 유일무이한 토큰이다. 윈도우 토큰은 악성 어플리케이션이 다른 어플리케이션에 윈도우에 화면을 그릴 수 없게 보호하는 등 보안에 매우 중요한 역할을 한다. 만약 이 토큰이 일치하지 않는 경우 윈도우 매니저는 요청을 거부하고 BadTokenException을 던진다.&lt;/p&gt;

</description>
            <pubDate>Wed, 28 Dec 2016 14:50:00 +0000</pubDate>
            <link>https://blog.sangyoung.me/2016/12/28/BadTokenException/</link>
            <guid isPermaLink="true">https://blog.sangyoung.me/2016/12/28/BadTokenException/</guid>
            
            <category>Android</category>
            
            <category>Exception</category>
            
            <category>BadTokenException</category>
            
            
            <category>ANDROID</category>
            
        </item>
        
        <item>
            <title>소프트웨어 엔지니어로 Reboot</title>
            <description>&lt;p&gt;코믹스에 등장하는 슈퍼 히어로들은 시리즈가 &lt;strong&gt;리부트&lt;/strong&gt;되면, 새로운 세계(페레럴 월드, 평행 우주)에서 새로운 역사를 시작한다. 본질적인 캐릭터 자체는 유지하지만 외모나 성장 배경 등의 설정들이 바뀌면서 시대의 흐름에 맞는 새로운 이야기가 전개되는 것이다.&lt;/p&gt;

&lt;p&gt;나에게도 &lt;strong&gt;리부트&lt;/strong&gt;는 새로운 시작, 새로운 역사를 의미한다. 회사에서 나의 역할은 황송하게도 &lt;strong&gt;Software Engineer&lt;/strong&gt; 이지만, 사실은 그냥 &lt;strong&gt;비전공 개발자&lt;/strong&gt;(&lt;em&gt;라고 쓰고 코더라고 읽는다&lt;/em&gt;) 나부랭이에 불과하다. 그저 동작하는 수준의 코드에만 천착해왔던 내가 스스로 엔지니어로 거듭나기 위한 노력을 하려고 한다. 그래서 거창하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Re:boot&lt;/code&gt;이라 규정하고 변화해 나가기 위한 과정을 기록하려 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ytimg.com/vi/kie_UNYUSWU/0.jpg&quot; alt=&quot;MARVEL REBOOT&quot; title=&quot;MARVEL REBBOOT&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;be-전공자&quot;&gt;Be 전공자?&lt;/h2&gt;
&lt;p&gt;누군가는 &lt;em&gt;”우린 전공자만 우대합니다.”&lt;/em&gt;라고 하고 다른 누군가는 &lt;em&gt;“전공자들도 다 알고 일하는 사람없다”&lt;/em&gt;고도 말한다. 이런 말에 동조할 생각도 좌절할 생각도 없고, 그들과 비교하거나 경쟁할 생각은 더욱 없다. 단지 스스로를 &lt;em&gt;코더&lt;/em&gt;나 &lt;em&gt;비전공자&lt;/em&gt;가 아닌 &lt;strong&gt;엔지니어&lt;/strong&gt;로 소개할 수 있다면 좀 괜찮은 개발자가 될 수 있지 않을까하는 마음으로 나 자신을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Re:boot&lt;/code&gt;한다. 비록 출발점은 다르지만 조금씩 멈추지않고 걷다보면 언젠가 앞서갈 내 모습을 상상하며.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once you stop learning, you start dying.&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Albert Einstein&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
            <pubDate>Thu, 08 Sep 2016 11:15:00 +0000</pubDate>
            <link>https://blog.sangyoung.me/2016/09/08/reboot/</link>
            <guid isPermaLink="true">https://blog.sangyoung.me/2016/09/08/reboot/</guid>
            
            <category>reboot</category>
            
            <category>개발자</category>
            
            <category>엔지니어</category>
            
            
            <category>DIARY</category>
            
        </item>
        
    </channel>
</rss>