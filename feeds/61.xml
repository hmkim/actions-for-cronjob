<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>프로그래밍 요람에서 무덤까지</title>
<link>https://web-front-end.tistory.com/</link>
<description>Web Front-End 개발자</description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 01:32:38 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>권윤학</managingEditor>
<image>
<title>프로그래밍 요람에서 무덤까지</title>
<url>http://cfile9.uf.tistory.com/image/2739CD3B583EA49B0CAFE3</url>
<link>https://web-front-end.tistory.com</link>
<description>Web Front-End 개발자</description>
</image>
<item>
<title>[ Provisioning ] 프로비저닝 의 의미</title>
<link>https://web-front-end.tistory.com/104</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;프로비저닝&lt;/b&gt; 은 인프라 에서 자주 나오는 용어로 사전적인 의미로는 &lt;b&gt;공급, 준비, 대비, 식량&lt;/b&gt; 이란 의미로 IT 에서&amp;nbsp;의미는 특정 서비스를 제공받기 위하여 서비스 실행부터 시작해 서비스를 제공받기 전 단계까지 처리되는 일련의 절차를 말한다.(&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%8B%9D&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;위키백과&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;즉 사용자 혹은 비지니스 요구사항에 맞게 할당, 배치, 배포하여 시스템을 사용가능하도록 준비하는 절차를 뜻합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;프로비저닝은 아래의 내용으로&amp;nbsp;구분됩니다.&lt;/p&gt;&lt;h4&gt;서버 자원 프로비저닝&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;서버의 CPU, Memory 등의 자원을 할당 또는 적절하게 배치하여 운영이 가능하도록 준비하는걸 서버 자원 프로비저닝이라고 합니다.&lt;/p&gt;&lt;h4&gt;OS 프로비저닝&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;OS 를 서버에 설치하고, 구성 작업을 해서 OS가 동작 가능하도록 준비해두는걸 OS 프로비저닝이라고 합니다.&lt;/p&gt;&lt;h4&gt;소프트웨어 프로비저닝&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;소프트웨어(WAS, DBMS, 어플리케이션 등) 를 시스템에 설치 배포하고 필요한 구성 셋팅 작업을 해서 실행 가능하도록 준비하는걸 소프트웨어 프로비저닝이라고 합니다.&lt;/p&gt;&lt;h4&gt;스토리지 프로비저닝&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;낭비되거나 사용되지 않는 스토리지를 식별하고 공통 풀에서 옴긴 후 스토리지에 대한 요구가 접수 되면 관리자는 공통 풀에서 스토리지를 꺼내 사용 효율성을 높일 수 있는 인프라 구축 가능하도록 하는걸 스토리지 프로비저닝이라고 합니다.&lt;/p&gt;&lt;h4&gt;계정 프로비저닝&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;신입사원이 입사하거나 조직내에서 인사 이동을 하거나 직무변경이 발생해 사용자가 접근하는 자원(Resource)의 범주가 변경되었을 때 HR담당자와 IT관리자는 승인절차 밟은 후 e-mail ,그룹웨어 ,ERP등 다양한 어플리케이션에 필요한계정을 생성하거나 접근권한을 변경해주데, 이러한 일련의 과정을 계정 프로바이저닝이라고 합니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>개발이야기</category>
<category>Provisioning</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/104</guid>
<comments>https://web-front-end.tistory.com/104#entry104comment</comments>
<pubDate>Sat, 14 Jul 2018 15:25:19 +0900</pubDate>
</item>
<item>
<title>[ Docker ] dangling image ( 이름 없는 이미지 / none 이미지 / &lt;none&gt;:&lt;none&gt; 이미지) 제거</title>
<link>https://web-front-end.tistory.com/102</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F99C348355B2A51FE1E9639&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99C348355B2A51FE1E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-06-20 오후 10.08.07.png&quot; height=&quot;185&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Docker 를 사용하다 보면 위와 같이 &amp;lt;none&amp;gt;:&amp;lt;none&amp;gt; 이미지들이 쌓이는데 ( 이미지 생성과정에서 에러가 발생되면 쓸모없는 none 이미지가 남게됩니다. ) 이러한 이미지들을 한번에 정리할려고 하면 아래와 같이 명령어를 입력하면 됩니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;docker rmi $(docker images -f &quot;dangling=true&quot; -q)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;혹은 단 prune 를 사용할 경우 &lt;b&gt;-a&lt;/b&gt; 옵션을 붙이면 &lt;b&gt;사용하지 않는 이미지&lt;/b&gt;를 &lt;b&gt;전부 삭제&lt;/b&gt;하기 때문에 &lt;b&gt;-a&lt;/b&gt; 옵션 주의하시기 바랍니다.&lt;/p&gt;&lt;p&gt;또한 &lt;b&gt;prune&lt;/b&gt; 명령어는 &lt;b&gt;Docker API 1.25 이상&lt;/b&gt;부터 &lt;b&gt;지원&lt;/b&gt;됩니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;docker image prune&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Docker</category>
<category>docker</category>
<category>docker image</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/102</guid>
<comments>https://web-front-end.tistory.com/102#entry102comment</comments>
<pubDate>Wed, 20 Jun 2018 22:18:24 +0900</pubDate>
</item>
<item>
<title>[ AWS Lambda ] AWS Lambda 에서 Timezone 설정</title>
<link>https://web-front-end.tistory.com/101</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F997508445B1E5DA2138FA0&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/997508445B1E5DA213&quot; filemime=&quot;image/jpeg&quot; filename=&quot;aws-lambda.jpg&quot; height=&quot;340&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;AWS Lambda 에서 현재 시간 혹은 현재 날짜를 이용할려면&amp;nbsp;Timezone 을 변경해야하는데, Lambda 는 기본적으로 Timezone 이&amp;nbsp;&lt;b&gt;UTC&lt;/b&gt; 시간 입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;만약 Asia/Seoul 로 변경하고 싶다면 아래와 같이 처리하면 됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;nodejs&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;process.env.TZ = 'Asia/Seoul';&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;golang&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt; os.Setenv(&quot;TZ&quot;, &quot;Asia/Seoul&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;python&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;python&quot;&gt;os.environ['TZ'] = 'Asia/Seoul'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Lambda</category>
<category>AWS</category>
<category>aws lambda</category>
<category>lambda</category>
<category>serverless</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/101</guid>
<comments>https://web-front-end.tistory.com/101#entry101comment</comments>
<pubDate>Mon, 11 Jun 2018 21:02:00 +0900</pubDate>
</item>
<item>
<title>[ Electron ] Tray Menu 가 사라지는 현상</title>
<link>https://web-front-end.tistory.com/100</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F99A6093E5B1D3CAC0DC549&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99A6093E5B1D3CAC0D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;electron.jpg&quot; height=&quot;461&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Electron 으로 Desktop 앱을 만드는 과정에서 자꾸 &lt;b&gt;Tray&lt;/b&gt; 아이콘이 사라지는 현상이 발생하는 경우가 있는데, 이런 경우는 아래와 같이 수정하면 대부분 해결됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;해당 코드를...&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;const {app, Tray} = require('electron');
app.on('ready', () =&amp;gt; {
  const tray = new Tray('/path/to/icon.png');
  tray.setTitle('hello world');
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;아래와 같이 수정&lt;/b&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;const {app, Tray} = require('electron');
let tray = null;
app.on('ready', () =&amp;gt; {
  tray = new Tray('/path/to/icon.png');
  tray.setTitle('hello world');
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;tray 변수&lt;/b&gt;가 &lt;b&gt;가비지 컬렉터&lt;/b&gt;로 인하여 &lt;b&gt;메모리 정리&lt;/b&gt;되어 발생하는 과정이라는데,&amp;nbsp;애초에 예시 코드를 두번째 처럼 줬으면 저 현상으로 많은 사람들이 삽질을 안했을 것 같은데 왜 예시를 수정 안하는지는 모르겠다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 내용은 &lt;a href=&quot;https://electronjs.org/docs/faq#my-apps-windowtray-disappeared-after-a-few-minutes&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;electron FAQ&lt;/a&gt; 에 있는 내용입니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Electron</category>
<category>ELECTRON</category>
<category>electron tray</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/100</guid>
<comments>https://web-front-end.tistory.com/100#entry100comment</comments>
<pubDate>Mon, 11 Jun 2018 00:13:48 +0900</pubDate>
</item>
<item>
<title>[ Elasticsearch ] keyword 와 text (string 타입)</title>
<link>https://web-front-end.tistory.com/98</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:311px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile5.uf.tistory.com%2Fimage%2F9955D9475B125EA02633FD&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9955D9475B125EA026&quot; filemime=&quot;image/jpeg&quot; filename=&quot;elasticsearch.png&quot; height=&quot;162&quot; width=&quot;311&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Elasticsearch&lt;/b&gt; 에는 여러 데이터 타입이 있지만, 그 중 &lt;b&gt;String&lt;/b&gt; 타입은 5.0 부터 &lt;b&gt;text&lt;/b&gt; 와 &lt;b&gt;keyword&lt;/b&gt; 로 분리되었습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;text&lt;/b&gt;: 설명 혹은 길이가 긴 텍스트가 있는 필드에서 &lt;b&gt;전문 검색(full-text)&lt;/b&gt; 가 필요한 경우이며, 색인 전에 분석(analyze)을 거쳐 &lt;b&gt;전문 검색(full-text)&lt;/b&gt; 에 활용됩니다.&lt;/p&gt;&lt;p&gt;- &lt;b&gt;keyword&lt;/b&gt;: 문자열 필드 분석(analyze)이 가능한 타입이며, 해당 타입은 정렬 / 필터링 / 집계 기능을 지원합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각각 데이터 타입은 5.0 이전 버전에서는 &lt;b&gt;analyzed&lt;/b&gt; 와 &lt;b&gt;not_analyzed&lt;/b&gt; 로 지원되던 기능입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;version &amp;lt; 5.0&lt;/b&gt; (이전)&amp;nbsp;&amp;nbsp;&lt;b&gt;text&lt;/b&gt; 타입&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;foo&quot;: {
    &quot;type&quot; &quot;string&quot;,
    &quot;index&quot;: &quot;analyzed&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;version &amp;gt;= 5.0&lt;/b&gt; (이후)&amp;nbsp;&lt;b&gt;text&lt;/b&gt; 타입&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;foo&quot;: {
    &quot;type&quot; &quot;text&quot;,
    &quot;index&quot;: true
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;version &amp;lt; 5.0&lt;/b&gt; (이전)&amp;nbsp;&lt;b&gt;keyword&lt;/b&gt; 타입&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;json&quot;&gt; {
  &quot;foo&quot;: {
    &quot;type&quot; &quot;string&quot;,
    &quot;index&quot;: &quot;not_analyzed&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;version &amp;gt;= 5.0&lt;/b&gt; (이후)&amp;nbsp;&lt;b&gt;keyword&lt;/b&gt; 타입&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;foo&quot;: {
    &quot;type&quot; &quot;keyword&quot;,
    &quot;index&quot;: true
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;전문 검색&lt;/b&gt;(full-text) 이 필요 없는 필드는 되도록 &lt;b&gt;keyword&lt;/b&gt;&amp;nbsp;타입으로 사용하는게 좋습니다. (되도록 필드는 직접 매핑)&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Elastic Stack</category>
<category>DevOps</category>
<category>elasticsearch</category>
<category>Elk</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/98</guid>
<comments>https://web-front-end.tistory.com/98#entry98comment</comments>
<pubDate>Sat, 02 Jun 2018 18:35:14 +0900</pubDate>
</item>
<item>
<title>[ Laravel ] Laravel 5.6 에서 변경되는 사항</title>
<link>https://web-front-end.tistory.com/92</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:560px;width: 560px; height: 383px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F997413365A7B9E8324B9FB&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/997413365A7B9E8324&quot; filemime=&quot;image/jpeg&quot; filename=&quot;다운로드.png&quot; height=&quot;383&quot; style=&quot;width: 560px; height: 383px;&quot; width=&quot;560&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Laravel 의 새로운&amp;nbsp;major 버전인&amp;nbsp;5.6 버전이&amp;nbsp;한국시간 2018-02-08 새벽 0시 36분에 Release 되었습니다. 이번 버전에는 어떠한 변경사항들이 있는지 살펴보도록 하겠습니다. 모든 변경사항은&amp;nbsp;&lt;a href=&quot;https://github.com/laravel/framework/blob/5.6/CHANGELOG-5.6.md&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;changelog&lt;/a&gt;(Github) 를 참고하시기 바랍니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;또한 5.6 버전으로 업데이트를 하실 경우 Laravel 공식 홈페이지에 있는 &lt;a href=&quot;https://laravel.com/docs/5.6/upgrade&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;마이그레이션 가이드&lt;/a&gt;를 참고하시기 바랍니다.&lt;/p&gt;&lt;h3&gt;PHP 지원 버전 변경&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;Laravel 5.6 버전부터는 &lt;b&gt;PHP 7.1.3&lt;/b&gt; 버전 이상만 지원하도록 변경되었습니다. 지난 Laravel 5.5 버전부터 PHP 7 버전 이상부터 지원하도록 변경되었으며, 버전 변경 이유는&amp;nbsp;뒤에 소개하겠지만 의존하는&amp;nbsp;&lt;a href=&quot;https://github.com/symfony/symfony&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;sympony&lt;/a&gt; 프레임워크의 버전업데이트로 발생한듯 합니다.&lt;/p&gt;&lt;h3&gt;의존성 패키지 변화&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;Laravel 프레임워크는 여러 패키지 의존하여 만들어졌습니다.&lt;/p&gt;&lt;h4&gt;- Symfony ~4.0&lt;/h4&gt;&lt;p&gt;대표적인 의존성 패키지로 &lt;a href=&quot;https://github.com/symfony/symfony&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Symfony&lt;/a&gt; 프레임워크가 있습니다. Laravel 에서 사용하는 &lt;b&gt;Symfony&lt;/b&gt; 버전이 &lt;b&gt;~4.0&lt;/b&gt; 으로 변경되었습니다. 이러한 이유로 &lt;b&gt;Laravel 5.6&lt;/b&gt; 으로 마이그레이션을 하실 때 프로젝트에서 &lt;b&gt;Symfony&lt;/b&gt; 프레임워크를 직접 포함시켜 사용하고 있다면 버전을 변경해야합니다. &lt;b&gt;Symfony&lt;/b&gt; 프레임워크 &lt;b&gt;4.*&lt;/b&gt; 의 자세한 변경사항은 &lt;a href=&quot;https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;에서 확인가능합니다.&lt;/p&gt;&lt;h4&gt;- PHPUnit ~7.0&lt;/h4&gt;&lt;p&gt;&lt;b&gt;PHPUnit&lt;/b&gt; 은 프레임워크에 상관없이 많은 프로젝트에서 테스트를 위해 사용하고 있습니다. Laravel 5.6 부터는 phpunit ~7.0 버전을 사용합니다.&lt;/p&gt;&lt;h4&gt;- cron-expression ~2.0&lt;/h4&gt;&lt;p&gt;&lt;b&gt;cron-expression&lt;/b&gt;&amp;nbsp;은 PHP 에서 Crontab 설정을 읽어 이전에 실행한 시간과 다음에 실행될 시간을 계산하여 Cron의 실행여부 등을 판단 할 수 있도록 도와주는 패키지입니다. Laravel 에서 사용되던 cron-expression 이 1.* -&amp;gt; 2.* 으로 변경되었습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그외에 Laravel 에서 관리하는 패키지들의 버전 변경사항이 아래와 같이 발생되었습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://github.com/laravel/dusk&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Dusk&lt;/a&gt; (&lt;b&gt;~3.0&lt;/b&gt; 로 업그레이드)&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://github.com/laravel/passport&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Passport&lt;/a&gt; (&lt;b&gt;~5.0&lt;/b&gt; 로 업그레이드)&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://github.com/laravel/scout&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Scout&lt;/a&gt; (&lt;b&gt;~4.0&lt;/b&gt; 로 업그레이드)&lt;/p&gt;&lt;h3&gt;Artisan Command&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;Laravel 에서 제공되는 &lt;b&gt;Artisan&lt;/b&gt; 명령어에도 일부 변경사항이 있습니다.&lt;/p&gt;&lt;h4&gt;- optimize 커맨드 삭제&lt;/h4&gt;&lt;p&gt;아래의 그림처럼 Laravel 5.4 까지 존재하던 optimize 커맨드가 5.5 에서 deprecated 되었으며, 5.6 에서 완전히 삭제되었습니다.&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F99BDF13C5A7BB0AB1E6387&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99BDF13C5A7BB0AB1E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-02-08 오전 11.06.07.png&quot; height=&quot;363&quot; style=&quot;text-align: center;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;만약 위와 같이 &lt;b&gt;composer.json&lt;/b&gt; 에 &lt;b&gt;php artisan optimize&lt;/b&gt; 명령어가 포함되어 있으면 삭제를 하셔야합니다.&lt;/p&gt;&lt;h4&gt;- make:controller 커맨드에 --api 옵션 추가&lt;/h4&gt;&lt;p&gt;controller 생성 커맨드에 &lt;b&gt;--api&lt;/b&gt; 옵션이 추가되었습니다. 이전에 사용되던 &lt;b&gt;--resource&lt;/b&gt; 옵션 대신 생겼으며, 해당 옵션으로 생성시 아래와 같이 controller가 생성됩니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class ApiController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Blade&lt;/h3&gt;&lt;div&gt;&lt;hr&gt;&lt;p&gt;Blade 는 라라벨에서 제공되는 View 용 template 입니다. Blade 는 총 3가지의 변경사항 있습니다.&lt;br /&gt;&lt;/p&gt;&lt;h4&gt;- @csrf / @method directive 추가&lt;/h4&gt;&lt;div&gt;Laravel 5.5 까지는&amp;nbsp;제공되는 &lt;b&gt;csrf 토큰&lt;/b&gt;과 form 전송시 &lt;b&gt;hidden 값으로 method&lt;/b&gt; 명을 보내기 위해 아래와 같이 사용했었습니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;form&amp;gt;
  {{ csrf_field() }}
  {{ method_field('PUT') }}
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;하지만 Laravel 5.6 부터는 아래와 같이 사용이 가능합니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;form&amp;gt;
  @method('put')
  @csrf
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;- component aliases 추가&lt;/h4&gt;&lt;div&gt;컴퍼넌트를 쉽게 불러올 수 있도록 별칭기능이 추가되었습니다.&amp;nbsp;&lt;b&gt;resources/views/components/alert.blade.php&lt;/b&gt; 에 Blade 파일이 존재할때 &lt;b&gt;AppServiceProvider&lt;/b&gt; 의 &lt;b&gt;boot&lt;/b&gt; 메서드 안에 아래와 같이 작성할 경우&amp;nbsp;&lt;b&gt;components.alert&lt;/b&gt; 를 &lt;b&gt;alert&lt;/b&gt; 지정하여 불러올 수 있습니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;php&quot;&gt;Blade::component('components.alert', 'alert');&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;지정된 별칭을 이용하여 렌더링이 가능합니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;php&quot;&gt;@component('alert')
    You are not allowed to access this resource!
@endcomponent
// 혹은 component 안에 slot 이 없는 경우는 아래와 같이 directive로 사용이 가능합니다.
@alert
    You are not allowed to access this resource!
@endalert&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;- double_encode 기본값 true 로 변경&lt;/h4&gt;&lt;div&gt;`&lt;b&gt;e&lt;/b&gt;` helper method 와 Blade 표현식에서&amp;nbsp;&lt;b&gt;htmlspecialchars&lt;/b&gt; 함수 double_encode 설정의 기본값을 &lt;b&gt;false&lt;/b&gt;에서 &lt;b&gt;true&lt;/b&gt; 로 변경하였습니다. 이 내용은 이중 인코딩이 된다는 의미이며, 아래의 코드를 보시면 htmlspecialchars 함수의 double_encode 값에 따라 어떻게 인코딩되는지 확인 가능합니다.&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F9953284F5A7BD0C822B396&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9953284F5A7BD0C822&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-02-08 오후 1.23.12.png&quot; height=&quot;196&quot; style=&quot;text-align: center;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;만약 이전버전&amp;nbsp;처럼 double encode 를&amp;nbsp;안하길 원하면 서비스프로바이더에 아래와 같이&amp;nbsp;&lt;b&gt;Blade::withoutDoubleEncoding()&lt;/b&gt;를 실행시켜주시면 됩니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;?php

namespace App\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Blade::withoutDoubleEncoding();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Logging&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;hr&gt;&lt;p&gt;이번 Laravel 5.6 변경사항 중 가장 큰 변경사항이라고 생각듭니다.&amp;nbsp; laravel/framework 에서 Log 디렉토리를 살펴보면 아래와 같이 버전간의 차이점이 존재합니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div&gt;5.5&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:512px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F9903413D5A8112E7073C35&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9903413D5A8112E707&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-02-12 오후 1.06.00.png&quot; height=&quot;230&quot; width=&quot;512&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;5.6&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:496px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile25.uf.tistory.com%2Fimage%2F9932383D5A8112CE2ADF39&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9932383D5A8112CE2A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-02-12 오후 1.06.13.png&quot; height=&quot;264&quot; width=&quot;496&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;- config/logging.php 추가&lt;/h4&gt;&lt;p&gt;Laravel 5.5 까지 log에 대한 설정은 &lt;b&gt;config/app.php&lt;/b&gt; 위치에 있는&amp;nbsp;&lt;b&gt;log&lt;/b&gt; 와&amp;nbsp;&lt;b&gt;log_level&lt;/b&gt; 설정뿐이였습니다. Laravel 5.6 부터는 &lt;b&gt;config/logging.php&lt;/b&gt; 파일로 별도로 설정하도록 변경되었습니다. &lt;b&gt;logging.php&lt;/b&gt; 파일은 기본적으로 &lt;a href=&quot;https://github.com/laravel/laravel/blob/develop/config/logging.php&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;다음&lt;/a&gt;과&amp;nbsp;같습니다.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F99FDCA3A5A7BA8192F56C8&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99FDCA3A5A7BA8192F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-02-08 오전 10.29.24.png&quot; height=&quot;1298&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;-&amp;nbsp;Illuminate\Log\Writer 클래스 변경&lt;/h4&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;Illuminate\Log\Writer&lt;/b&gt; 클래스가&amp;nbsp;&lt;b&gt;Illuminate\Log\Logger&lt;/b&gt; 클래스로 변경되었습니다. 만약 기존에 Writer 클래스를 Type Hint로 사용하고 있었다면&amp;nbsp;&lt;b&gt;Psr\Log\LoggerInterface&lt;/b&gt; 클래스로 변경하셔야합니다.&lt;/p&gt;&lt;h4&gt;-&amp;nbsp;Illuminate\Contracts\Logging\Log Interface&amp;nbsp;제거&lt;/h4&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;Illuminate\Contracts\Logging\Log Interface&lt;/b&gt; 가 제거되었습니다. 만약 기존에 &lt;b&gt;Log Interface&lt;/b&gt; 를 &lt;b&gt;Type Hint&lt;/b&gt; 로 사용하고 있었다면,&amp;nbsp;&lt;b&gt;Psr\Log\LoggerInterface&lt;/b&gt;&amp;nbsp;클래스로 변경하셔야합니다.&lt;/p&gt;&lt;h3&gt;Argon2i 암호 Hash 기능 추가&lt;/h3&gt;&lt;hr&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Argon2&lt;/a&gt; 은 2015 년&amp;nbsp;&lt;a href=&quot;https://password-hashing.net/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;PHC&lt;/a&gt;(Password Hashing Competition) 우승 알고리즘입니다.&amp;nbsp;Argon2 은 아래의 3가지 버전이 존재한다고 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;-&amp;nbsp;Argon2d : &lt;b&gt;GPU 크래킹 공격&lt;/b&gt;에&amp;nbsp;초첨을 맞춘 버전입니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;- Argon2i :&amp;nbsp;&lt;b&gt;측면 채널 공격&lt;/b&gt;에 저항 할 수 있도록 최적화되어 있습니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;- Argon2id : &lt;b&gt;Argon2d&lt;/b&gt; 와 &lt;b&gt;Argon2i&lt;/b&gt; 의 하이브리드 버전입니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;2017 년 11월 Release 된 &lt;b&gt;PHP 7.2&lt;/b&gt; 에 &lt;b&gt;Argon2d&lt;/b&gt; 와 &lt;b&gt;Argon2i&lt;/b&gt; 가 추가되었으나, Laravel 5.6 에서는 &lt;b&gt;Argon2d &lt;/b&gt;가&amp;nbsp;&lt;b&gt;Password Hash&lt;/b&gt;&amp;nbsp;기능으로는 적합하지 않아&amp;nbsp;&lt;b&gt;Argon2i&lt;/b&gt;&amp;nbsp;만&amp;nbsp;&lt;b&gt;Password Hash&lt;/b&gt; 기능으로&amp;nbsp;추가되었다고 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;Argon2 Hash&amp;nbsp;&lt;/b&gt;를 사용할려면 새로 추가된 &lt;b&gt;config/hashing.php&lt;/b&gt; 에서 설정을 변경하시면 됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F99ABC83C5A8140782B0666&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99ABC83C5A8140782B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-02-12 오후 4.20.58.png&quot; height=&quot;383&quot; style=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;그외의 변경사항들&lt;/h3&gt;&lt;hr&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;그 외에 여러가지 변경사항이 존재합니다. 자세한 사항은 &lt;a href=&quot;https://github.com/laravel/laravel/blob/master/CHANGELOG.md&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Laravel CHANGELOG&lt;/a&gt; 와 &lt;a href=&quot;https://laravel.com/docs/5.6/upgrade&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Laravel 5.6 Upgrade &lt;/a&gt;&lt;a href=&quot;https://laravel.com/docs/5.6/upgrade&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Guide&lt;/a&gt; 그리고 &lt;a href=&quot;https://laravel-news.com/laravel-5-6&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Laravel News&lt;/a&gt; 에서 확인 가능합니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Laravel</category>
<category>laravel</category>
<category>Laravel 5.6</category>
<category>php</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/92</guid>
<comments>https://web-front-end.tistory.com/92#entry92comment</comments>
<pubDate>Thu, 08 Feb 2018 10:30:09 +0900</pubDate>
</item>
<item>
<title>[ 개발도서 ] 개발자가 반드시 정복해야 할 객체 지향과 디자인 패턴</title>
<link>https://web-front-end.tistory.com/91</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:307px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F994567395A7566122F6414&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/994567395A7566122F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;26650301.jpg&quot; height=&quot;400&quot; width=&quot;307&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;도서정보&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;저자&lt;/b&gt; : 최범균&lt;/p&gt;&lt;p&gt;&lt;b&gt;출판일&lt;/b&gt;:&amp;nbsp;2013-07-05&lt;/p&gt;&lt;p&gt;&lt;b&gt;페이지&lt;/b&gt;: 264&amp;nbsp;쪽&lt;/p&gt;&lt;p&gt;&lt;b&gt;ISBN&lt;/b&gt;: 9788969090010 (8969090010)&lt;/p&gt;&lt;p&gt;&lt;b&gt;도서소개&lt;/b&gt; [&lt;a href=&quot;http://intobooks.co.kr/xe/10747&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;](인투북스)&lt;/p&gt;&lt;h3&gt;리뷰&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;이 책은 객체지향을 공부해야한다면&amp;nbsp;추천되는 책 중 하나입니다. 저는 객체지향과 거리가 먼&amp;nbsp;개발자 중 한명입니다. 실무와 개인 프로젝트 그리고 공부를 하는 과정에서 객체지향 개념을 다시(대학교 이후 관심없었음) 공부해야겠다는 생각이 들어 최근에 구매하였습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;신입 자바&amp;nbsp;개발자&lt;/b&gt;분들은 반드시 읽길 추천드리며, 또한 &lt;b&gt;객체지향에 대해 입문&lt;/b&gt;을 하고 싶은 분들에게도 추천드립니다. 이 책에는 &lt;b&gt;Gof Design Pattern&lt;/b&gt; 에 나오는 디자인 패턴 중 11개의 디자인 패턴만 소개하고 있어 만약 &lt;b&gt;객체지향이 목적이 아니라&lt;/b&gt; &lt;b&gt;디자인 패턴을 자세히 공부&lt;/b&gt;하고자 구매하시는 분들은 이 책과 다른 책 한권 더 구매를 하셔야 할듯 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;책에서 소개되는 소스코드는 &lt;b&gt;자바 코드&lt;/b&gt;이지만 &lt;b&gt;자바를 잘 몰라도&lt;/b&gt;(저 같은 분들)&amp;nbsp;&lt;b&gt;어느정도 이해가 되는&amp;nbsp;코드&lt;/b&gt;라고 생각합니다.&lt;/p&gt;&lt;p&gt;이 책을 읽는다고 객체지향적인 코드를 작성을 하긴 어렵겠지만, 적어도 객체지향적인 사고를 시도할 수 있도록 많은 도움을 주는 책이라고 생각합니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>개발도서 리뷰</category>
<category>개발도서</category>
<category>객체지향</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/91</guid>
<comments>https://web-front-end.tistory.com/91#entry91comment</comments>
<pubDate>Sat, 03 Feb 2018 16:30:57 +0900</pubDate>
</item>
<item>
<title>[ 번역으로 배우는 영어 ] non-exhaustive list</title>
<link>https://web-front-end.tistory.com/85</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;h1&gt;non-exhaustive list&lt;/h1&gt;&lt;p&gt;exhaustive 는 사전적인 의미로 &lt;b&gt;철저한&lt;/b&gt; 이라는 의미다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;철저하지 않은 목록? 불완전한 목록? 어색해서 조금 찾아보니 &lt;b&gt;대략적인 목록&lt;/b&gt; 이라는 해석이 제일 무난해 보인다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>번역 하면서 정리</category>
<category>번역 영어</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/85</guid>
<comments>https://web-front-end.tistory.com/85#entry85comment</comments>
<pubDate>Fri, 22 Dec 2017 23:43:31 +0900</pubDate>
</item>
<item>
<title>[ 번역으로 배우는 영어 ] out of the box</title>
<link>https://web-front-end.tistory.com/84</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;h1&gt;out of the box&lt;/h1&gt;&lt;p&gt;번역을 하다보면 간혹 보이는 문장인데,&amp;nbsp;아래와 같이 크게 두가지 의미가 존재합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;1. &lt;b&gt;기존 틀을 깨는 사고&lt;/b&gt;(생각) / 아이디어&lt;/p&gt;&lt;p&gt;2. 설정(설치) 없이 &lt;b&gt;즉시 사용&lt;/b&gt;이 가능한&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Out-of-the-box features include:&lt;/p&gt;&lt;p&gt;(기본 제공 기능은 다음과 같습니다.)&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>번역 하면서 정리</category>
<category>번역 영어</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/84</guid>
<comments>https://web-front-end.tistory.com/84#entry84comment</comments>
<pubDate>Fri, 22 Dec 2017 23:36:08 +0900</pubDate>
</item>
<item>
<title>[ Docker ] Laradock 프로젝트를 이용하여 Laravel 로컬 개발 환경 구축</title>
<link>https://web-front-end.tistory.com/83</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F994716455A3A5E672B1974&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/994716455A3A5E672B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;laravel-docker.png&quot; height=&quot;358&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 글은&amp;nbsp;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Docker&lt;/a&gt;와 &lt;a href=&quot;https://docs.docker.com/compose/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;docker-compose&lt;/a&gt;를 알고 있다는 전제하에 설명을 하고 있습니다.&lt;/p&gt;&lt;p&gt;Docker 가 생소하다면&amp;nbsp;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;여기&lt;/a&gt;&amp;nbsp;김충섭 님의 글을 먼저 읽어 보시길 추천합니다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Docker 는 리눅스 컨테이너 기반의 오픈소스 가상화 플랫폼입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Docker 를 이용하면 로컬 개발 환경을 다른 사람과 동일하게 구성할 수 있으며, 이걸 그대로 서비스에 올릴 수 있다는게 가장 큰 장점 뽑을 수 있습니다. Laravel은 이러한 로컬 개발 환경을 위해 &lt;a href=&quot;https://laravel.kr/docs/5.5/homestead&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;H&lt;/a&gt;&lt;a href=&quot;https://laravel.kr/docs/5.5/homestead&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;omestead&lt;/a&gt; / &lt;a href=&quot;https://laravel.kr/docs/5.5/valet&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Valet&lt;/a&gt; 같은 환경을 같이 제공해 줍니다. 즉 Docker 를 사용하지 않아도 훌륭한 로컬 개발 환경을 구축 할 수 있습니다. 하지만 실제 서비스 환경까지 생각한다면 Docker 는 좋은 선택이 될 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Laravel 로 프로젝트를 진행하게 되면&amp;nbsp;기술 스택은 다양하게 구성이 가능합니다.&lt;/p&gt;&lt;p&gt;DB같은 경우도 MYSQL 를 쓸수도 있고 mariaDB&amp;nbsp;를 사용할 수 있으며, 아니면 NOSQL인 mongodb 를 사용 할 수도 있습니다. 서버 또한 NGINX or Apache 같은 선택 사항이 있으며, 세션을 위해 redis 같은 메모리 기반 NOSQL 사용해야 할 수 도 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이러한 사유로 Docker를 이용할려고 환경 작업하던 중 잘만들어진&amp;nbsp;오픈 소스 프로젝트가 있지 않을까 라는 생각으로 레퍼런스용으로 찾아보니&amp;nbsp;&lt;a href=&quot;http://laradock.io/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Laradock&lt;/a&gt;&amp;nbsp;이라는 프로젝트가 눈에 띄었습니다.&lt;/p&gt;&lt;div&gt;&lt;h2&gt;Laradock 프로젝트 특징&lt;/h2&gt;&lt;/div&gt;&lt;p&gt;우리는 바퀴를 모두 만들&amp;nbsp;필요가 없습니다. 잘 만들어진 프로덕트가 있다면 그걸 잘 활용하는 것도 중요하기에 Laradock 프로젝트를 살펴보았습니다.&amp;nbsp;다양한 설정이 가능하도록 구성이 되어있으며, 관련하여 &lt;a href=&quot;http://laradock.io/getting-started/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;문서&lt;/a&gt;도 잘 준비되어 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Laradock은 아래 사항들을 지원하고 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Database Engines&lt;/b&gt;: MySQL - MariaDB - Percona - MongoDB - Neo4j - RethinkDB - MSSQL - PostgreSQL - Postgres-PostGIS.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Database Management&lt;/b&gt;: PhpMyAdmin - Adminer - PgAdmin&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Cache Engines&lt;/b&gt;: Redis - Memcached - Aerospike&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;PHP Servers&lt;/b&gt;: NGINX - Apache2 - Caddy&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;PHP Compilers&lt;/b&gt;: PHP FPM - HHVM&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Message Queueing&lt;/b&gt;: Beanstalkd - RabbitMQ - PHP Worker&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Queueing Management&lt;/b&gt;: Beanstalkd Console - RabbitMQ Console&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Random Tools&lt;/b&gt;: HAProxy - Certbot - Blackfire - Selenium - Jenkins - ElasticSearch - Kibana - Grafana - Mailhog - MailDev - Minio - Varnish - Swoole - Laravel Echo…&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이렇게 다양한 환경을 작동시키기 위해 여러가지 설정들이 존재합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;php Xdebug 모듈을 설치할지 여부라던가 workspace에 Composer를 설치여부 /&amp;nbsp;Node.js를 설치여부 /&amp;nbsp;Yarn 패키지 매니저를 설치여부&amp;nbsp;등을 작업자에 맡게 설정이 가능하게끔 &lt;b&gt;.env&lt;/b&gt; 파일과 &lt;b&gt;docker-compose.yml&lt;/b&gt; 그리고 각 컨테이너의 &lt;b&gt;Dockerfile&lt;/b&gt;에 반영이 되어 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;예를들어&amp;nbsp;&lt;b&gt;Xdebug&lt;/b&gt;의 경우 아래와 같이 반영되어 있습니다.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;## .env file
### XDEBUG 사용여부 ##########################
USE_XDEBUG=true&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;yaml&quot;&gt;## docker-compose.yml
workspace:
  build:
    context: ./php-fpm
    args:
      - INSTALL_XDEBUG=${USE_XDEBUG}
php-fpm:
  build:
    context: ./php-fpm
    args:
      - INSTALL_XDEBUG=${USE_XDEBUG}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;# Dockerfile (php-fpm / workspace)
# xDebug:

ARG INSTALL_XDEBUG=false
RUN if [ ${INSTALL_XDEBUG} = true ]; then \
    # Install the xdebug extension
    pecl install xdebug &amp;amp;&amp;amp; \
    docker-php-ext-enable xdebug \
;fi

COPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;workspace 컨테이너 같은 utility 컨테이너 제공&lt;/b&gt;: workspace 라는 컨테이너를 통해 composer 명령이나 npm 명령들을 node.js 와 php / composer 설치 없이 가능하도록 제공하고 있습니다. 그리고 workspace 에서 자주 사용될&amp;nbsp;command를&amp;nbsp;&lt;b&gt;alias&lt;/b&gt;&amp;nbsp;로 적용하기 위해 shell script를 추가되어 있습니다.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;# aliases.sh
alias artisan=&quot;php artisan&quot;
alias migrate=&quot;php artisan migrate&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;# Dockerfile (workspace)
COPY ./aliases.sh /home/user/aliases.sh
USER root
RUN echo &quot;&quot; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
echo &quot;# Load Custom Aliases&quot; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
echo &quot;source /home/user/aliases.sh&quot; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
echo &quot;&quot; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
sed -i 's/\r//' /home/user/aliases.sh &amp;amp;&amp;amp; \
sed -i 's/^#! \/bin\/sh/#! \/bin\/bash/' /home/user/aliases.sh&amp;nbsp;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;xdebug&lt;/b&gt;&amp;nbsp;/&amp;nbsp;&lt;b&gt;phpcs&lt;/b&gt;&amp;nbsp;&lt;b&gt;원격 설정 사용 &lt;/b&gt;: phpstorm에서 &lt;b&gt;ssh 접속&lt;/b&gt;을 이용하여 &lt;b&gt;xdebug 원격 설정&lt;/b&gt;을 위해 ssh key를 미리 생성해두고 해당 ssh key를 workspace 컨테이너에 등록이 가능하도록 되어 있습니다.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;# Dockerfile (workspace)
# ssh:

ARG INSTALL_WORKSPACE_SSH=false
ENV INSTALL_WORKSPACE_SSH ${INSTALL_WORKSPACE_SSH}

ADD insecure_id_rsa /tmp/id_rsa
ADD insecure_id_rsa.pub /tmp/id_rsa.pub

RUN if [ ${INSTALL_WORKSPACE_SSH} = true ]; then \
    rm -f /etc/service/sshd/down &amp;amp;&amp;amp; \
    cat /tmp/id_rsa.pub &amp;gt;&amp;gt; /root/.ssh/authorized_keys \
        &amp;amp;&amp;amp; cat /tmp/id_rsa.pub &amp;gt;&amp;gt; /root/.ssh/id_rsa.pub \
        &amp;amp;&amp;amp; cat /tmp/id_rsa &amp;gt;&amp;gt; /root/.ssh/id_rsa \
        &amp;amp;&amp;amp; rm -f /tmp/id_rsa* \
        &amp;amp;&amp;amp; chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \
    &amp;amp;&amp;amp; chmod 400 /root/.ssh/id_rsa \
;fi&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 부분은 로컬 PC에 PHP를 설치 안하고도&amp;nbsp;Xdebug와 php_cs를 phpstorm 같은 ide랑 연결이 가능하기 위해 추가되어있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;source volume&amp;nbsp;사용&lt;/b&gt;: 여러개의 컨테이너에서 source code가 필요합니다. (Worker 에서도 소스가 필요하고 NGINX 에서도 소스가 필요)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이러한 경우 docker voulme 을 만들어서 컨테이너에 마운트하여 공유하는 방법도 있지만,&lt;/p&gt;&lt;p&gt;voulmes_from 옵션을 이용하여 컨테이너의 마운트된 볼륨을 공유하는 방법이 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;laradock은 이러한 방식을 사용하고 있습니다. (voulmes_from 컨테이너로 많이 쓰이는&amp;nbsp;tianon/true 이미지 사용)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;대략 아래와 같은 개념으로 마운트를 한다고 생각하시면 됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile23.uf.tistory.com%2Fimage%2F9929933A5A3A8B922928D6&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9929933A5A3A8B9229&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-21 오전 1.07.15.png&quot; height=&quot;690&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;PHP 버전를 동적으로 변경가능&lt;/b&gt;: 사용할 PHP의 버전을 언제든지 변경이 가능하도록 아래와 같이 설정되어 있습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;yaml&quot;&gt;# docker-compose.yml
php-fpm:
    build:
      context: ./php-fpm
      dockerfile: &quot;Dockerfile-fpm-${PHP_VERSION}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;shell&quot;&gt;## 폴더구조 
+php-fpm
  Dockerfile-fpm-71
  Dockerfile-fpm-70
  Dockerfile-fpm-56&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;## .env
### PHP version ################
# 사용가능한 값: 71 - 70 - 56
PHP_VERSION=71
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그외에 다양한 환경을 제공하고 있습니다. 자세한 사항은 &lt;a href=&quot;http://laradock.io/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;laradock 문서&lt;/a&gt;에서 확인 가능합니다.&lt;/p&gt;&lt;h2&gt;Laradock 적용하기&lt;/h2&gt;&lt;p&gt;Laradock 으로&amp;nbsp;프로젝트를 띄우는 방법으로 크게 2가지 경우가 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- 단일 프로젝트에 적용하기&lt;/p&gt;&lt;p&gt;- 여러개의 프로젝트에 적용하기&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Application Container(Source volume)의 볼륨 마운트 경로를 설정이 가능하도록 되어있어 단일 프로젝트이든 여러개의 프로젝트이든 보통 프로젝트 구조는 아래처럼 설정을 하게됩니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;shell&quot;&gt;+ project
+ laradock
## or
+ projectA
+ projectB
+ laradock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Application Container의 경로 설정은 &lt;b&gt;.env&lt;/b&gt; 파일에 보면 아래와 같이 변경이 가능합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;만약 &lt;b&gt;.env&lt;/b&gt; 파일이 없으시면&amp;nbsp;&lt;b&gt;env-example&lt;/b&gt; 파일을 복사하여 &lt;b&gt;.env&lt;/b&gt;파일로 생성해주세요.(&lt;b&gt;.env&lt;/b&gt;파일은 &lt;b&gt;docker-compose&lt;/b&gt;에서 기본적으로 환경설정 파일로 사용됩니다.)&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;APPLICATION=../&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그 이후&amp;nbsp;&lt;b&gt;nginx/sites&lt;/b&gt; 경로에 nginx 가상호스팅 설정 파일을 추가하여 프로젝트에 해당하는 가상 도메인들을 설정하시면 됩니다.&lt;/p&gt;&lt;p&gt;이때 설정하는 가상호스트에 &lt;b&gt;.dev&lt;/b&gt; 도메인을 사용하지 않는 편이 좋습니다.(chrome 63 버전 이후부터 .dev 도메인은 강제로 https로 전환됩니다. &lt;a href=&quot;https://ma.ttias.be/chrome-force-dev-domains-https-via-preloaded-hsts/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;관련링크&lt;/a&gt;)&lt;/p&gt;&lt;h2&gt;docker 실행&lt;/h2&gt;&lt;p&gt;Laradock은 docker-compose 파일을 제공해주고 있어서 docker-compose 명령을 이용하여 여러개의 컨테이너를 쉽게 실행 시킬 수 있습니다.&lt;/p&gt;&lt;p&gt;만약 nginx와 mariadb를 실행시킬거면 아래와 같이만 명령하시면 됩니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;docker-compose up -d nginx mariadb&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;반대로 실행시켰던 컨테이너들을 종료시키기 위해선 아래의 명령으로 종료가 가능합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;docker-compose down&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;마무리&lt;/h2&gt;&lt;p&gt;Laradock은 정말 편리합니다. 하지만 마치 &lt;b&gt;네가 무엇을 좋아하는지 몰라서&amp;nbsp;전부 준비해봤어&lt;/b&gt; 라는 느낌이 강해서&amp;nbsp;프로젝트와 상관없는 내용이 많다보니 불필요한 내용 그리고 불편했던 사항들이 제법 많았습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음 글에는 현재 프로젝트에 적용하기 위해 변경하고 수정했던 내용을 적어볼까 합니다.&lt;/p&gt;&lt;p&gt;(사실 다 적고보니 굉장히 두서없는 글이 나와버려서 당분간 포스트 수정부터 하지 않을까 싶습니다.)&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Laravel</category>
<category>docker</category>
<category>laradock</category>
<category>laravel</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/83</guid>
<comments>https://web-front-end.tistory.com/83#entry83comment</comments>
<pubDate>Thu, 21 Dec 2017 01:29:07 +0900</pubDate>
</item>
<item>
<title>[ Angular ] Angular 에 Parcel bundler 를 적용해 보았다.</title>
<link>https://web-front-end.tistory.com/82</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F99D09B355A33F0D910DF33&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99D09B355A33F0D910&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-16 오전 12.48.08.png&quot; height=&quot;877&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;최근 프론트엔드 커뮤니티에서 엄청나게 뜨거운 녀석이 등장했습니다. 1주 동안( 12. 10 ~ 12. 16) github star 4000개 이상을 받은 번들러가 등장한 것인데요.&lt;/p&gt;
&lt;p&gt;바로 &lt;a href=&quot;https://parceljs.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;b&gt;parcel&lt;/b&gt;&lt;/a&gt; 입니다. (글 작성한 2017-12-15 일 기준으로 parceljs 사이트가 한글 번역&amp;nbsp;되었습니다.)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:797px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile25.uf.tistory.com%2Fimage%2F990C61455A33F49E131335&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/990C61455A33F49E13&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-16 오전 1.02.00.jpg&quot; height=&quot;128&quot; width=&quot;797&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;[github trend에서 1주 기준 모습] 무려 4163스타를 한주동안 받았다고 합니다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:393px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F991615415A33F2DB16607B&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/991615415A33F2DB16&quot; filemime=&quot;image/jpeg&quot; filename=&quot;CLdFZ5rUYAEf7le.jpg&quot; height=&quot;288&quot; width=&quot;393&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Grunt&lt;/b&gt; 에서 &lt;b&gt;Gulp&lt;/b&gt;로 그리고 최근에는 &lt;b&gt;Webpack&lt;/b&gt; 을 쓰고 있는데 또?? 라는 생각이 제일 먼저 들기 시작했습니다.&lt;/p&gt;
&lt;p&gt;어떤놈인지 찾아보니 &lt;b&gt;설정없이&lt;/b&gt; &lt;b&gt;Webpack&lt;/b&gt;보다 &lt;b&gt;빠른 번들러&lt;/b&gt;라고 소개하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;설정이 필요없다고?? 알아서 bundle이 되는건가??&lt;/p&gt;
&lt;p&gt;궁금한 생각에 한번 angular-cli 로 생성되는 app을 &lt;b&gt;parcel&lt;/b&gt;로 작업해보았습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;문서를 읽어봤을때는 &lt;b&gt;Typescript&lt;/b&gt;에 대한 내용이 전혀 없었으며, 따로 플러그인이 있다는 내용도 없어서 찾아보니 &lt;a href=&quot;https://github.com/fathyb/parcel-plugin-typescript&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;b&gt;typescript plugin&lt;/b&gt;&lt;/a&gt;이 있었습니다.&lt;/p&gt;
&lt;p&gt;그럼 Angular를 작동시키는데는 문제가 없다 판단하여 작업을 시작하였습니다.&lt;/p&gt;&lt;h4&gt;1. 프로젝트 생성&lt;/h4&gt;&lt;p&gt;먼저 &lt;b&gt;angular-cli&lt;/b&gt;를 이용해서 angular 프로젝트를 생성하였습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng new angular-parcel-example --style=scss --routing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;angular-cli로 프로젝트를 생성하는 이유는 설정 없이도 angular-cli 에서 제공되는 기능과 얼마나 비슷하게 사용할 수 있을지 궁금했습니다.&lt;/p&gt;&lt;h4&gt;2. parcel bundler 설치&lt;/h4&gt;&lt;p&gt;그 다음은 parcel를 설치해야 합니다. 전역 설치를 해도 되지만 저는 local 설치로 진행하였습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;yarn add parcel-bundler parcel-plugin-typescript@0.2.0-angular.0 --dev
or
npm i parcel-bundler parcel-plugin-typescript@0.2.0-angular.0 --save-dev&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;3. package.json의 script 명령어 수정&lt;/h4&gt;&lt;p&gt;angular-cli로 serve 및 build를 하던 명령어들을 parcel로 변경해야합니다. 아래와 같이 변경하시면 됩니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&quot;scripts&quot;: {
  &quot;ng&quot;: &quot;ng&quot;,
  &quot;parcel&quot;: &quot;parcel&quot;,
  &quot;start&quot;: &quot;parcel ./src/index.html&quot;,
  &quot;build&quot;: &quot;parcel build ./src/index.html&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;4. index.html 수정&lt;/h4&gt;&lt;p&gt;parcel은 웹앱의 진입점(여기선 &lt;b&gt;index.html&lt;/b&gt;)에서&amp;nbsp; 상대경로로 불러오는 파일들을 자동으로 bundle하는 방식입니다. 그렇기 때문에&amp;nbsp;&lt;b&gt;.angular-cli.json&lt;/b&gt; 파일에서 설정되었던 &lt;b&gt;main.ts&lt;/b&gt;와 &lt;b&gt;polyfills.ts&lt;/b&gt;를 &lt;b&gt;index.html&lt;/b&gt;에서 불러오는 처리를 추가해야 합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;{
  &quot;$schema&quot;: &quot;./node_modules/@angular/cli/lib/config/schema.json&quot;,
  &quot;project&quot;: {
    &quot;name&quot;: &quot;angular-parcel&quot;
  },
  &quot;apps&quot;: [
    {
      &quot;root&quot;: &quot;src&quot;,
      &quot;outDir&quot;: &quot;dist&quot;,
      &quot;assets&quot;: [
        &quot;assets&quot;,
        &quot;favicon.ico&quot;
      ],
      &quot;index&quot;: &quot;index.html&quot;,
      &quot;main&quot;: &quot;main.ts&quot;,
      &quot;polyfills&quot;: &quot;polyfills.ts&quot;,
      ...
    }
  ],
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래와 같이 &lt;b&gt;index.html&lt;/b&gt;를 수정해주세요.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;AngularParcel&amp;lt;/title&amp;gt;
  &amp;lt;base href=&quot;/&quot;&amp;gt;

  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
  &amp;lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;
  &amp;lt;!--해당 부분이 추가--&amp;gt;
  &amp;lt;script src=&quot;polyfills.ts&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&quot;main.ts&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;여기까지 작업이 되었다면 실행이 가능합니다.&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;yarn start
or
npm start&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:774px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F9996C6345A33FF720A3A9A&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9996C6345A33FF720A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-16 오전 1.58.28.png&quot; height=&quot;216&quot; width=&quot;774&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;문제 없이 성공하였다면 &lt;b&gt;localhost:1234&lt;/b&gt;로 접속하여 확인하시면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile5.uf.tistory.com%2Fimage%2F99260D355A33FFD6291702&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99260D355A33FFD629&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-16 오전 2.00.44.png&quot; height=&quot;581&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;parcel&lt;/b&gt;도 &lt;b&gt;webpack&lt;/b&gt;과 마찬가지로 &lt;b&gt;hmr&lt;/b&gt;이 지원되고 있습니다. &lt;b&gt;hmr&lt;/b&gt;의 경우 아무런 설정없이 적용이 되고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile3.uf.tistory.com%2Fimage%2F99CB724A5A349C6A349C46&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99CB724A5A349C6A34&quot; filemime=&quot;image/gif&quot; filename=&quot;angular-parcel-hmr.gif&quot; height=&quot;513&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;여기까지 봤을때는 확실히 &lt;b&gt;parcel&lt;/b&gt; 이 주장하는 &lt;b&gt;빠른 빌드&lt;/b&gt;와 &lt;b&gt;zero&amp;nbsp;config(설정없는)&lt;/b&gt; 번들러가 충분히 매력적입니다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;하지만 &lt;b&gt;angular-cli&lt;/b&gt; 에서는 다양한 기능을 제공해주고 있습니다. ( serviceWorker / e2e test / generate / enviroment 등) 이러한 기능들을 그대로 설정없이는 무리가 있어보입니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그럼 &lt;b&gt;angular-cli&lt;/b&gt;에서 &lt;b&gt;webpack&lt;/b&gt; 대신 &lt;b&gt;parcel&lt;/b&gt;로 변경하면 좋지 않나!? 싶은 생각에 찾아봤습니다.&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile2.uf.tistory.com%2Fimage%2F9926784D5A349FC109C3DF&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9926784D5A349FC109&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-16 오전 12.55.40.png&quot; height=&quot;689&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;네 지금 당장은 없다고 합니다.&lt;/p&gt;
&lt;p&gt;저는 사실 &lt;b&gt;webpack&lt;/b&gt;의 빌드 속도가 느릴만큼 큰 프로젝트를 진행하고 있지 않으니 괜찮습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;parcel&lt;/b&gt;의 비교대상은 &lt;b&gt;webpack&lt;/b&gt; 이지 &lt;b&gt;angular-cli&lt;/b&gt; 는 아니긴 합니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;webpack&lt;/b&gt; 과 비교하면 처음 &lt;b&gt;webpack&lt;/b&gt;이 어렵게 느껴졌던 설정 부분 없이도 쉽게 bundle이 가능하고 속도 또한 눈에 띄게 빠르다는 점은 매우 좋은 것 같습니다.&lt;/p&gt;
&lt;p&gt;하지만 아직 나온지 얼마안되서 문서가 비약한점은 아쉽네요. 특히 플러그인쪽 문서는 너무 빈약합니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;angular가 아닌 다른 프레임워크나 환경을 구성하는 프로젝트가 있으면 parcel로 다시 작업을 해봐야겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이 포스팅의 예시는 &lt;a href=&quot;https://github.com/tienne/angular-parcel&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;github 저장소&lt;/a&gt;에 공개된 상태입니다. 관련하여 피드백은 언제나 환영입니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Angular 2</category>
<category>angular</category>
<category>Parcel</category>
<category>parceljs</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/82</guid>
<comments>https://web-front-end.tistory.com/82#entry82comment</comments>
<pubDate>Sat, 16 Dec 2017 00:48:26 +0900</pubDate>
</item>
<item>
<title>[ TypeScript ] TS6133 컴파일 에러 ( noUnusedLocals / noUnusedParameters )</title>
<link>https://web-front-end.tistory.com/81</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile25.uf.tistory.com%2Fimage%2F991357335A265E4419569E&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/991357335A265E4419&quot; filemime=&quot;image/jpeg&quot; filename=&quot;typescript.jpg&quot; height=&quot;424&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;TypeScript로&amp;nbsp;프로젝트를 진행하다보면 처음엔 tsconfig의 컴파일 옵션때문에 당황할때가 많이 있습니다. ( 저만 그런가요^^?;;)&lt;/p&gt;&lt;p&gt;발생되는 에러코드로 검색해보면 원인을 찾아 볼 수 있지만, 워낙 컴파일 옵션이 많아 에러 코드와 함께 하나씩 정리할려고 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;오늘 확인할 에러는 TS6133:'x' is declared but never used. 에러입니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile3.uf.tistory.com%2Fimage%2F9945CD335A2CD6AC28AAEB&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9945CD335A2CD6AC28&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-12-10 오후 3.38.55.png&quot; height=&quot;75&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 에러와 연관된 TypeScript Compiler Option은 아래와 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;let noUnusedLocals: boolean = '사용되지 않은 지역 변수가 있으면 알려줍니다.';
let noUnusedParameters: boolean = '사용되지 않은 메서드 파라미터가 있으면 알려줍니다.';&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기본값은 &lt;b&gt;false&lt;/b&gt;입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;많이 사용할만한 옵션은 아닌 것 같지만 필요없는 변수를 할당하여 메모리 낭비를 막을 수 있는 좋은 옵션인 것 같습니다.&lt;/p&gt;&lt;p&gt;만약 해당 옵션이 필요없으신 경우 &lt;b&gt;tsconfig.json&lt;/b&gt;의&amp;nbsp;&lt;b&gt;compilerOptions.noUnusedLocals&lt;/b&gt; 와 &lt;b&gt;compilerOptions.noUnusedParameters&lt;/b&gt; 항목을 지워주시거나 &lt;b&gt;false&lt;/b&gt;로 변경하시면 됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>ES6 &amp; TypeScript</category>
<category>TypeScript</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/81</guid>
<comments>https://web-front-end.tistory.com/81#entry81comment</comments>
<pubDate>Tue, 05 Dec 2017 17:52:24 +0900</pubDate>
</item>
<item>
<title>[ Docker ] Docker for Windows 를 이용하여 Docker 사용시 이슈정리</title>
<link>https://web-front-end.tistory.com/79</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F99BF773359F85C8436FDA4&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99BF773359F85C8436&quot; filemime=&quot;image/jpeg&quot; filename=&quot;docker-logo.png&quot; height=&quot;732&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;최근 사내에&amp;nbsp;서버 개발환경을 Docker를 이용하여 로컬 개발방식으로 변경하는 작업을 했었는데, Docker for Windows 를 사용했을때 많은 이슈가 발생되었습니다. Window에서 Docker를 이용할 경우 어떠한 이슈사항들이 있는지 정리해 보았습니다.&lt;/p&gt;&lt;h3&gt;필수사항&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;Docker for Windows를 사용시 발생했던 이슈들은 아래와 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- Hyper-V 사용가능 (Windows 10 Professional or&amp;nbsp;Enterprise 64-bit 만 사용 가능)&lt;/p&gt;&lt;p&gt;- CPU 가상화 사용가능(BIOS에서 활성화 해야함)&lt;/p&gt;&lt;p&gt;- Docker Client에서 사용하는 포트 방화벽 해제&lt;/p&gt;&lt;p&gt;- Windows 사용자명에 한글이 있는 경우&lt;/p&gt;&lt;h4&gt;1. Hyper-V 사용가능한 윈도우 버전&lt;/h4&gt;&lt;p&gt;기본적으로 Docker는&amp;nbsp;리눅스에서만 동작하다보니&amp;nbsp;OSX나 Windows에서는 가상머신으로 Docker Host를 띄워서 사용하도록 되어있습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;이러한점을 Docker for windows에서는 Hyper-V를 이용하여 해결하고 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 Hyper-V는 Windows Server 2008에 추가되었던 하이퍼바이저 기반 가상화 시스템으로 Windows 8 프로 버전부터 일반 개인용 윈도우에 포함되기 시작했습니다. Docker for Windows 다운로드시 아래와 같은 문구가 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;* Requires Microsoft Windows 10 Professional or Enterprise 64-bit For previous versions get Docker Toolbox&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Windows 10 프로버전 혹은 엔터프라이즈 64비트가 필요합니다. 이전버전의 윈도우 사용자분들은 Docker Toolbox를 이용하여 Docker를 사용해야합니다.&lt;/p&gt;&lt;p&gt;이 글에서는 Docker Toolbox를 이용한 Docker 사용(VirtualBox)에 대해 다루지 않고있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Windows 10에서 Hyper-V를 활성화 시킬려면 제어판 -&amp;gt; 프로그램 추가/제거 -&amp;gt; Windows 기능 켜기/끄기 에서 Hyper-V를 포함 하위 항목을 모두 체크해 주세요.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:415px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile25.uf.tistory.com%2Fimage%2F998ABB335A2CDA75014E8F&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/998ABB335A2CDA7501&quot; filemime=&quot;image/jpeg&quot; filename=&quot;windows10_hyper_v.jpg&quot; height=&quot;368&quot; width=&quot;415&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4&gt;2. CPU 가상화 사용가능한지 여부&lt;/h4&gt;&lt;div&gt;윈도우 버전이 Hyper-V를 지원하더라도 사용하고 있는 CPU와 메인보드가 가상화를 지원하는지 확인해야 합니다.&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Windows 부팅시 BIOS 셋팅에 가시면 아래와 같이 가상화 활성화 여부가 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F99DC2E335A2571A82340E3&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99DC2E335A2571A823&quot; filemime=&quot;image/jpeg&quot; filename=&quot;virtualization_setting.jpg&quot; height=&quot;402&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 설정을 활성화(Enabled)로 변경하신 후 저장해주시기 바랍니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4&gt;3.&amp;nbsp;Docker Client에서 사용하는 포트 방화벽 해제&lt;/h4&gt;&lt;p&gt;Docker는 기본적으로 linux에서만 작동이 가능하다보니 docker for windows / docker for mac 등은 리눅스 가상머신을 설치한 후 리눅스에 Docker daemon을 설치하는 방식으로 구동됩니다. (아래 그림 참고)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span id=&quot;docs-internal-guid-fd44deb2-3f3b-4a8c-0efd-3bf5d5c99a95&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/hGeHrEInkY1h4bj5sSjpG0480HnxaHb4PGvXlCRf9utt0oSnt5nA4uUCGD4HOu-UfVvjsWpI0DGS067RhaYkseVxUG2L74tW0ZiathhITBZrKShWaGGFhwbzLJGuWGJ3z5yAWdDQS28&quot; width=&quot;316px;&quot; height=&quot;401px;&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/L2FmU0fUM3L5HKbNT5BuMK6G6LriMxNyoOOep5adAbW3mq53SqtUe00JjARhBB0-F-mvIouhfgniNnitmuDqBeubEjU7TF2wKp4F3EV2B47fCzZbht-6Jk7chhjgK78naMWokBNMFG0&quot; width=&quot;322px;&quot; height=&quot;401px;&quot; alt=&quot;windows.PNG&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;이러한 방식을 이용하다보니 Docker client에서 docker host과 통신이 필요한데 여기에서 사용되는 포트가 방화벽으로 막아둘 경우 아래와 같은 에러가 발생될 수 있습니다.(docker file sharing이 안되는 경우)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:691px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F999C1B335A2CDCA3128CF9&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/999C1B335A2CDCA312&quot; filemime=&quot;image/jpeg&quot; filename=&quot;drive_sharing_firewall_blocked.png&quot; height=&quot;254&quot; width=&quot;691&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;기본적으로는 445 port를 사용하고 있기때문에 windows 방화벽에서 455 port를 차단했는지 확인하셔야 합니다.&lt;/p&gt;&lt;h4&gt;4. Windows 사용자명에 한글이 있는 경우&lt;/h4&gt;&lt;p&gt;이건 docker for windows 문제이기 보다 dockerToolbox의 문제입니다.&lt;/p&gt;&lt;p&gt;(사실 사용자명이 한글이면 문제되는 프로그램이 한둘이 아니기 때문에 왠만해선 사용자명은 영어로 사용하세요.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;dockerToolbox는 python으로 만들어졌는데 사용자 계정 폴더가 한글이 포함될 경우 문제가 발생된다. 이 경우는 마소에서도 관리자 계정을 영어로 새로 생성하라고 할 정도로 골치 아픕니다. 구글에서 찾아보면 여러가지 방식이 나오는데 마소에서 정식으로 권고하는 내용이 아니다보니 이 내용은 기재하지 않겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;* 앞으로 계속 사용하면서 발생되는 이슈들은 포스팅에 업데이트 될 내용이며, 만약이외 다른 이슈가 있다면 댓글로 피드백 주시면 감사하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Docker</category>
<category>docker</category>
<category>docker for windows</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/79</guid>
<comments>https://web-front-end.tistory.com/79#entry79comment</comments>
<pubDate>Tue, 31 Oct 2017 23:58:49 +0900</pubDate>
</item>
<item>
<title>[ Jetbrains ] WebStorm / PHPStorm / Intellij 버벅거릴때 성능(속도) 향상 시키기</title>
<link>https://web-front-end.tistory.com/78</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile29.uf.tistory.com%2Fimage%2F998CE93359F85281275045&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/998CE93359F8528127&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-31 오후 7.37.00.png&quot; height=&quot;606&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;최근 사무PC를 변경하여 PhpStorm을 새로 설치하였는데, Docker 컨테이너를 띄우니 버벅거리는 현상이 발생하였습니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;?? PC 사양이 안좋나? 하고 생각하던 찰나 Jetbrains IDE가 JVM에서 작동하다보니 JVM 관련 설정을 빼먹은게&amp;nbsp;생각나 블로그 포스팅으로 남길려고합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;상단 메뉴에 Help -&amp;gt; Edit Custom VM Options에 들어가면 아래와 같이 설정을 수정 할 수 있는데&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F9920B53359F8540608BCD7&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9920B53359F8540608&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-31 오후 7.43.28.png&quot; height=&quot;513&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기에 아래의 값을 입력하면 됩니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;-Dawt.java2d.opengl=true&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;- Dsun.java2d.opengl=true&lt;/h4&gt;&lt;p&gt;OpenGL을 지원하는 hardware-accelerator 에서 Java 2D 가 OpenGL가속을 사용하도록 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;적용하고나니 버벅거림 현상이 해결되었습니다. 이런 IDE 셋팅은 한번 해두면 건드리지 않는편이다보니 자주 깜빡하는것 같습니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>개발이야기</category>
<category>intellij</category>
<category>PHPStorm</category>
<category>webstorm</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/78</guid>
<comments>https://web-front-end.tistory.com/78#entry78comment</comments>
<pubDate>Tue, 31 Oct 2017 19:51:28 +0900</pubDate>
</item>
<item>
<title>[ PHP ] Modern PHP 란?</title>
<link>https://web-front-end.tistory.com/75</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:640px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F9935D83359DAE67901EC31&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9935D83359DAE67901&quot; filemime=&quot;image/jpeg&quot; filename=&quot;modernphp.png&quot; height=&quot;250&quot; width=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;프로그래밍 언어를 공부하다보면 Modern이라는 키워드가 자주&amp;nbsp;등장합니다. 사전적인 의미로 &lt;b&gt;현대적인&lt;/b&gt; 라는 의미로 최신이라는 의미가 내포되어 있습니다. 현대적인 라는 말은 과거 / 현재의 비교가 필요합니다. 즉 before &amp;amp; after가 필요하다는 얘기입니다. 그럼 현재 얘기되고 있는 Modern PHP란 무엇일까요?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 글은 아래의 내용들을 참고하여 작성하였습니다.(피드백은 언제나 환영입니다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://modernpug.github.io/php-the-right-way/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;PHP&lt;/a&gt;&lt;a href=&quot;http://modernpug.github.io/php-the-right-way/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;nbsp;THE&amp;nbsp;RIGHT&amp;nbsp;&lt;/a&gt;&lt;a href=&quot;http://modernpug.github.io/php-the-right-way/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;WAY&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://wani.kr/posts/2016/08/10/modern-php/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;2016&lt;/a&gt;&lt;a href=&quot;http://wani.kr/posts/2016/08/10/modern-php/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;nbsp;&lt;/a&gt;&lt;a href=&quot;http://wani.kr/posts/2016/08/10/modern-php/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;GDG Incheon 8월 전창완님 발표자료&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B8778782784&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Modern PHP&lt;/a&gt;(도서)&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://www.modernpug.org/wiki/%EB%AA%A8%EB%8D%98%EC%9D%98-%EC%9D%98%EB%AF%B8&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;ModernPUG &lt;/a&gt;&lt;a href=&quot;http://www.modernpug.org/wiki/%EB%AA%A8%EB%8D%98%EC%9D%98-%EC%9D%98%EB%AF%B8&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;wiki - 모던의 의미&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;PHP의 과거와 현재&lt;/h3&gt;&lt;p&gt;앞서 Modern이라는 용어를 얘기하기 위해서는 과거와 현재가 비교되어야 한다고 했었습니다.&lt;/p&gt;&lt;p&gt;그래서 아주 간단하게 PHP의 변화에 대하여&amp;nbsp;간단하게 알아보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;iframe-wrap&quot;&gt;&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;https://time.graphics/embed?v=1&amp;amp;id=11222&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;PHP 업데이트 날짜 및 주요 변경사항과 프레임워크들에 대한 TimeLine입니다. (틀린사항이 있으면 피드백 언제든지 환영합니다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;PHP는 20년 가까이 많은변화를 겪었으며, 각각 큰변화들이였지만 TimeLine에서 보면 PHP 5.4가 출시되는 2012년부터 본격적으로 활발한 변화가 생겼습니다. HHVM 의 등장&amp;nbsp; / composer의 추가 / 표준권고 추가(PSR) 등이 PHP를 더욱 빠르게 변화시켰습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;PHP의 문제로 얘기되던 성능은 HHVM / HACK 같은 경쟁상대의 등장으로 개선되었으며, composer의 등장으로 컴포넌트 기반으로 작업이 가능해졌습니다. 표준이 없어 각자의 스타일대로 작성되던 코드들이 호환성있고 읽기 쉬워진 코드들로 변화하였습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;또한 기존의 PHP가 코드 결과를 예측하기 어려웠던 점을 타입힌팅(Type Hinting)의 강화로 엄격한 코드를 작성하여 예측하기 쉽고 리팩토링이 편한 코드를 작성 할 수 있게 되었습니다.&lt;/p&gt;&lt;h3&gt;Modern PHP의 조건&lt;/h3&gt;&lt;p&gt;이러한 내용들을 봤을때 저는 Modern PHP를 지향하기 위해서는 아래의 조건들이 성립해야한다고 생각합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- 최신버전의 PHP&lt;/p&gt;&lt;p&gt;- PSR(표준권고) 준수&lt;/p&gt;&lt;p&gt;- 패키지 매니저&lt;/p&gt;&lt;h4&gt;최신버전의 PHP&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F99EEE03359DB74CF01C35E&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99EEE03359DB74CF01&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-09 오후 10.08.14.png&quot; height=&quot;198&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위의 사진은 PHP의 버전별로 지원 그래프입니다. 주황색으로 표기된 영역은 보안 지원기간입니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;5.6까지는 보안지원에 포함되어있습니다. 되도록이면 5.6 미만의 PHP를 사용하고 계시다면 5.6까지는 버전업을 하시는게 좋을 듯 합니다.&lt;/p&gt;&lt;p&gt;버전만 올려도 속도가 빠르다고 하니 &lt;a href=&quot;http://php.net/manual/en/appendices.php&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;공식문서&lt;/a&gt;를 통해서 버전 마이그레이션하시길 바랍니다.&lt;/p&gt;&lt;h4&gt;PSR(PHP Standards Recommendations) PHP 표준 권고사항 준수&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;PSR은 PHP-FIG(PHP Framework Interop Group)에서 재정하는 표준권고 사항으로 PSR-1, PSR-2 같은 코딩 스타일 가이드 부터 PSR-3, PSR-6, PSR-7 같은 기능별 인터페이스 그리고 PSR-4 같은 오토로딩 같은 내용까지 포함하고 있습니다. PSR-1, PSR-2의 경우 IDE에서 코드를&amp;nbsp;검사하여 코딩 스타일을 통일감있게 만들어주며 PSR-4는 composer를 이용할때 이용됩니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;PSR에 대한 자세한 내용은 제 &lt;a href=&quot;http://web-front-end.tistory.com/37&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;블로그에 있는 글&lt;/a&gt;과 &lt;a href=&quot;http://www.php-fig.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;PHP-FIG&lt;/a&gt; 사이트 그리고 &amp;nbsp;&lt;a href=&quot;http://modernpug.github.io/php-the-right-way/#code_style_guide&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;PHP THE RIGHT WAY&lt;/a&gt;에서 확인이 가능합니다.&lt;/p&gt;&lt;h4&gt;패키지매니저(composer)&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;패키지 매니저는 소프트웨어의 버전 및 의존성을 관리해 주고 설치 / 업데이트 / 삭제 등을 쉽게 해주는 시스템을 말합니다. PHP에는 &lt;a href=&quot;https://getcomposer.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Composer&lt;/a&gt;라는 패키지 매니저가 있으며, 다른언어 들도 다음과 같은 패키지 매니저들이 존재합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- node(NPM, YARN)&lt;/p&gt;&lt;p&gt;- ruby(Gem)&lt;/p&gt;&lt;p&gt;- C#(NuGet)&lt;/p&gt;&lt;p&gt;- java(Jpm)&lt;/p&gt;&lt;p&gt;- python(pip)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;패키지 매니저를 이용하면 다른사람이 작성한 코드를 쉽게 갔다 쓸 수 있으며, 이 패키지들의 버전 및 의존성 관리도 쉬워지고 작성한 코드들을 컴퍼넌트 단위로 배포도 가능해집니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Http 통신 처리를 해야한다면&amp;nbsp;&lt;a href=&quot;https://github.com/guzzle/guzzle&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;guzzle&lt;/a&gt;를 사용하면되고 Log처리를 해야한다면 &lt;a href=&quot;https://github.com/Seldaek/monolog&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Monolog&lt;/a&gt; 를 사용하면 됩니다.&lt;/p&gt;&lt;p&gt;이걸 어디서 찾냐고요?&amp;nbsp;&lt;a href=&quot;https://packagist.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://packagist.org/&lt;/a&gt;에서 검색하여 쇼핑하듯 composer로 불러오기만 하면됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위에서 말했던 패키지들은 각각&amp;nbsp;PSR-7(HTTP message interfaces), PSR-3(Logger Interfaces)를 준수한 패키지들입니다.&lt;/p&gt;&lt;p&gt;PSR를 준수한 수많은 패키지들이 있으며, 저희는 가장 적합한 컴퍼넌트 혹은 프레임워크를 사용하면 됩니다.&lt;/p&gt;&lt;h3&gt;마무리&lt;/h3&gt;&lt;p&gt;사실 Modern PHP에 대한 해답은&amp;nbsp;&lt;a href=&quot;http://modernpug.github.io/php-the-right-way/#code_style_guide&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;PHP THE RIGHT WAY&lt;/a&gt;에 잘 정리 되어있다고 생각합니다. 그러나 내용도 많으며, 조금 야매적인(?)&amp;nbsp;요약이 필요하다고 생각해서 이 포스트를 작성하기 시작하였습니다. PHP가 비록 우리나라에서 안좋은 시선이&amp;nbsp;많지만, Modern PHP는 나쁘지 않다고 생각합니다. 언어라는건 결국 도구이기때문에 적합한 곳에 자기에게 맞는 도구를 사용하는게 중요하다고 생각합니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>PHP</category>
<category>composer</category>
<category>modern php</category>
<category>ModernPHP</category>
<category>php</category>
<category>PSR</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/75</guid>
<comments>https://web-front-end.tistory.com/75#entry75comment</comments>
<pubDate>Sat, 07 Oct 2017 21:22:40 +0900</pubDate>
</item>
<item>
<title>[ AWS ] Amazon Web Service(AWS)의 용어 정리</title>
<link>https://web-front-end.tistory.com/74</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F9907B13359D300E22C1A93&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9907B13359D300E22C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;amazon-web-services.png&quot; height=&quot;299&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;AWS에는 많은 용어(키워드 / 약어)들은 Network에 지식이 있지 않거나 혹은 관련 지식이 있어도 약어들이 너무 많아 AWS를 처음 접하시는 사람에겐 어렵게 느껴집니다. 저 또한 아직 모르는 내용이 많기에 정리하고자 합니다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F99A24E3359D3029B05A936&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99A24E3359D3029B05&quot; filemime=&quot;image/jpeg&quot; filename=&quot;aws_global_infra_7_19_17.png&quot; height=&quot;465&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile24.uf.tistory.com%2Fimage%2F9925A03359D302DC2F539E&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9925A03359D302DC2F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-03 오후 12.23.49.png&quot; height=&quot;344&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: right;&quot;&gt;[&lt;a href=&quot;https://aws.amazon.com/ko/about-aws/global-infrastructure/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;AWS 공식홈 글로벌인프라&lt;/a&gt;](17년.7월 19일 기준)&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;가장 많이 나오는 용어로는 &lt;b&gt;리전&lt;/b&gt;(&lt;b&gt;Region&lt;/b&gt;)과 &lt;b&gt;가용영역&lt;/b&gt;(&lt;b&gt;Availability Zone&lt;/b&gt; 줄여서 &lt;b&gt;AZ&lt;/b&gt;) 그리고 &lt;b&gt;엣지로케이션&lt;/b&gt;(&lt;b&gt;Edge Location&lt;/b&gt;)이 있습니다. 이 용어들은 AWS의 각 서비스 전반적으로 나오는 용어입니다.&lt;/p&gt;&lt;h4&gt;리전(Region)&lt;/h4&gt;&lt;div&gt;&lt;hr&gt;&lt;/div&gt;&lt;p&gt;리전은 AWS의 서비스들이 제공되는 &lt;b&gt;서버의 물리적인 위치(지역)&lt;/b&gt;을 의미합니다. 위의 그림에 보면 AWS의 리전 분포를 알 수 있는데요.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이렇게 여러개의 리전을 두는 이유는 &lt;b&gt;네트워크 속도&lt;/b&gt;가 가장 큰 이유입니다. 우리나라 서버에 있는 서비스를 미국에서 접속하면 아무래도 속도가 느려질 수 밖에 없는데 만약 미국에 서비스해야한다면 미국쪽 리전에 서버를 생성하여 서비스하면 속도면에서 빠르겠죠?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;두번째 이유로는 &lt;b&gt;큰 재해를 대비&lt;/b&gt;하기 위함이라고 합니다. AWS에서는 기본적으로 장애라는건 발생가능하다고 판단하여 그 장애에 대응하기 위한 여러 서비스들을 제공하고 있습니다. 장애란건 여러가지가 있겠지만 재해(전쟁, 지진, 화재)도 포함이 됩니다. 리전을 여러곳에 둔것도 이러한 재해시 다른 리전으로 서비스가 가능하게끔이라고 하네요.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우리나라에도 서울리전이 2016년 1월에 추가되었으며, 서울리전에는 2개의 가용영역(AZ)이 포함되어 있습니다.&lt;/p&gt;&lt;h4&gt;가용영역(Availability Zone - AZ)&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;위에서 잠깐 언급했던 가용영역은 &lt;b&gt;리전안에 있는 IDC(데이터센터)&lt;/b&gt;를 의미합니다. 기본적으로 AWS의 각 리전안에는 2개 이상의 가용영역을 가지고 있으며, 서울리전에는 2개의 가용영역을 가지고 있다는 말은 2개의 독립적인 IDC를 운영하고 있다는 얘기입니다. 이 IDC의 위치는 AWS 내부직원들도 모르며, 각각 위치는 멀리 떨어져서 각종 재해 발생시 다른 가용영역에 서비스를 계속 할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;AWS에서는 여러개의 가용영역에 서버를 올려 사용하여 로드밸런싱을 통하여 트래픽을 분산시켜 한쪽 가용영역이 작동을 안하더라도 무중단 서비스를 제공하도록 권장하고 있습니다.&lt;/p&gt;&lt;h4&gt;엣지 로케이션(Edge Location)&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;엣지 로케이션은 리전과 가용영역과 별게로 AWS의 CDN 서비스인 &amp;nbsp;&lt;b&gt;CloudFront&lt;/b&gt;과 AWS의 DNS 서비스인&amp;nbsp;&lt;b&gt;Route 53&lt;/b&gt;의 &lt;b&gt;캐시 서버&lt;/b&gt;를 의미합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;CDN과 DNS같은 서비스들의 서버들은 리전과 별게로 여러개의 엣지 로케이션에 적용되어 서비스되고 있으며, 아래는 현재(2017. 10. 04) 기준 엣지로케이션 분포도입니다.(우리나라에는 3개의 엣지 로케이션이 있습니다.)&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile6.uf.tistory.com%2Fimage%2F995F443359D47A6E05AC12&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/995F443359D47A6E05&quot; filemime=&quot;image/jpeg&quot; filename=&quot;aws_Cloudfront_Map.png&quot; height=&quot;465&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;북미&lt;/b&gt;&lt;/p&gt;&lt;p&gt;버지니아주 애슈번(3), 조지아주 애틀랜타(3), 일리노이주 시카고(3), 텍사스주 댈러스/포트워스(3), 캘리포니아주 헤이워드, 플로리다주 잭슨빌, 캘리포니아주 로스앤젤레스(2), 플로리다주 마이애미, 미네소타주 미니애폴리스, 퀘벡주 몬트리올, 뉴욕주 뉴욕(3), 뉴저지주 뉴어크, 캘리포니아주 팔로알토, 펜실베이니아주 필라델피아, 캘리포니아주 산호세, 워싱턴주 시애틀(2), 인디애나주 사우스벤드, 미주리주 세인트루이스, 온타리오주 토론토&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;리전별 엣지 캐시: 버지니아, 오하이오, 오레곤&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;유럽&lt;/b&gt;&lt;/p&gt;&lt;p&gt;네덜란드 암스테르담(2), 독일 베를린, 아일랜드 더블린, 독일 프랑크푸르트(6), 영국 런던(4), 스페인 마드리드, 프랑스 마르세유, 이탈리아 밀라노, 독일 뮌헨, 프랑스 파리(3), 체코 공화국 프라하, 스웨덴 스톡홀름(2), 오스트리아 비엔나, 폴란드 바르샤바, 스위스 취리히&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;리전별 엣지 캐시: 독일 프랑크푸르트, 영국 런던&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;아시아&lt;/b&gt;&lt;/p&gt;&lt;p&gt;인도 첸나이, 중국 홍콩(3), 말레이시아 쿠알라룸푸르, 인도 뭄바이(2), 필리핀 마닐라, 인도 뉴델리, 일본 오사카, 대한민국 서울(3), 싱가포르(2), 대만 타이베이, 일본 도쿄(4)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;리전별 엣지 캐시: 인도 뭄바이, 싱가포르, 대한민국 서울, 일본 도쿄&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;호주&lt;/b&gt;&lt;/p&gt;&lt;p&gt;호주 멜버른, 호주 시드니&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;리전별 엣지 캐시: 호주 시드니&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;남아메리카&lt;/b&gt;&lt;/p&gt;&lt;p&gt;브라질 상파울루(2), 브라질 리우데자네이루&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;리전별 엣지 캐시: 브라질 상파울루&lt;/p&gt;&lt;h3&gt;AWS의 주요 서비스 용어 및 약어&lt;/h3&gt;&lt;p&gt;AWS에는 많은 서비스가 있으며, 이 서비스들중 주요 서비스(개인적인 의견)들 위주로 정리해보았습니다.&lt;/p&gt;&lt;h4&gt;Computing&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;- &lt;b&gt;EC2(Elastic Compute Cloud)&lt;/b&gt;: 클라우드 서버 인스턴스, AWS의 가장 대표적인 서비스중 하나입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;ECS(EC2 Container Service)&lt;/b&gt;: 클라우드 서버인 EC2를 Docker 컨테이너로 관리 가능하도록 나온 서비스(17년 10월 5일 서울리전 출시하였습니다. 갓마존 감사합니다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;EB(Elastic Beanstalk)&lt;/b&gt;: 웹 어플리케이션용 클라우드 플랫폼 서비스(배포, 모니터링, 확장, 관리) 주로 간단한 서비스 배포용으로 사용합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;AWS Lambda&lt;/b&gt;: AWS의 클라우드 Function 서비스 서버 없이 작성한 프로그래밍 코드를 실행하는 환경을 제공하는 서비스입니다.(serverless 아키텍쳐 구현에 사용)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;ELB(Elastic Load Balancing)&lt;/b&gt;:L4 서비스(load balancing) 트래픽을 분산해주는 역활을 하여 고가용성 서비스를 구축할 수 있도록 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;Auto Scaling&lt;/b&gt;: 트래픽에 따라 EC2 인스턴스들을 확장해주는 서비스 위의 ELB와 함께 사용되는 기능으로 특정 트래픽을 초과시 자동으로 EC2 인스턴스를 생성하고 다시 트래픽이 줄어들면 추가 생성하였던 EC2 인스턴스들을 삭제하는 유연한 서비스를 구축할 수 있도록 도와주는 서비스입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;AMI(Amazon Machine Images)&lt;/b&gt;: AWS에서 제공되는 가상머신 이미지(AWS에서 기본으로 제공하는 이미지일수도 있으며, 다른 유저 혹은 벤더들이 만들어놓은 머신 이미지도 많습니다.)&lt;/p&gt;&lt;h4&gt;Storage&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;- &lt;b&gt;S3&lt;/b&gt;(Simple Storage Service): HTTP 프로토콜과 연동되는 스토리지 정적 사이트를 호스팅하는데 사용할 수도 있습니다. 이미지 파일이나 웹 사이트 정적 요소 관리등을 할 수 있으며, 파일 마다 버전관리가 가능합니다.(AWS의 최초&amp;nbsp;서비스)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;Glacier&lt;/b&gt;: 데이터 보관 및 백업용도를 위한 저렴한 스토리지, S3와 다르게 저장에만 특화되어있는 저렴한 스토리지 서비스로 저장하고 꺼내는데 3시간-5시간 걸린다는 특징을 가지고 있다. S3에서 -&amp;gt; Glacier로 백업을 자동 생성하도록 설정이 가능합니다..&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;EBS(Elastic Block Store)&lt;/b&gt;: EC2 인스턴스에 가상하드를 달아주는 서비스로 EC2 인스턴스는 종료되고 재생성될때 기존의 데이터가 유지가 안되지만 EBS를 연결하여 EBS에 파일을 저장한다면 EC2 인스턴스와 관계 없이 영구적으로 보관이 가능합니다.&lt;/p&gt;&lt;h4&gt;Networking&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;- &lt;b&gt;CloudFront&lt;/b&gt;: AWS의 CDN&amp;nbsp;서비스, 리전에 상관없이 엣지 로케이션 기준으로 가장 가까운 곳에서 파일 캐시를 가져오기 때문에 속도도 빠르며 비용도 EC2 혹은 S3로 서비스를 제공하는것 보다 더 저렴하다고 합니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;Route 53&lt;/b&gt;: AWS의 DNS 서비스,&amp;nbsp; EC2 / ELB 같은 서비스와 결합하여 사용이 가능하며 Route 53으로 L4 혹은 GSLB(Global Server Load Balancing)를 구축 할 수 있다고 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;VPC(Virtual Private Cloud)&lt;/b&gt;: 클라우드 가상 네트워크 구축 서비스로서 내부망(VPN)을 구축하거나 서브넷을 나눠 네트워크를 용도별로 관리가 가능하도록 제공합니다.&lt;/p&gt;&lt;h4&gt;Database&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;- &lt;b&gt;DynamoDB&lt;/b&gt;: AWS의 NoSQL 데이터베이스 서비스&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;RDS(Relational Database Service)&lt;/b&gt;:&amp;nbsp; RDBMS 클라우드 서비스 Amazon Aurora, MySQL, MariaDB, PostgreSQL, Oracle, SQL Server등을 지원하고 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;-&amp;nbsp;&lt;b&gt;ElastiCache&lt;/b&gt;: Database Caching 서비스.Memcached, Redis 호환을 지원하고 있습니다.&lt;/p&gt;&lt;h4&gt;Management Tools&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;- &lt;b&gt;CloudWatch&lt;/b&gt;: AWS 서비스들을 모니터링하거나 알람을 받는 설정들을 할 수 있는 서비스입니다. 특정 금액 초과할 경우 알람을 받거나 EC2의 CPU 사용률등의 알람도 가능합니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;CloudFormation&lt;/b&gt;: AWS 서비스 생성 및 배포 자동화 템플릿 서비스, AWS의 다양한 서비스들을 이용하여 아키텍쳐 구현시 미리 만들어놓은 템플릿(JSON)을 이용하여 생성하거나 직접 템플릿을 작성하여 관리가 가능하도록 하는 서비스입니다.&lt;/p&gt;&lt;h3&gt;AWS 가격 정책 관련용어&lt;/h3&gt;&lt;p&gt;AWS에서&amp;nbsp;인스턴스 과금 방식을 설명할때 나오는 용어가 영어이다보니 이게 무슨말이야? 할때가 많은 것 같습니다. 이러한 과금 정책들도 한번 정리하였습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;On-Demand(온디맨드) Instance&lt;/b&gt;: 기본적으로 사용하는 과금 방식으로, 사용한 시간 만큼 비용을 지불하는 형태입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;Reserved(예약) Instance&lt;/b&gt;: 일정 기간 인스턴스 사용을 약속하고, 그에 대한 할인을 적용받는 방식입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;Spot(스팟)&amp;nbsp;Instance&lt;/b&gt;: 입찰 방식의 사용방법으로&amp;nbsp;사용자가 입찰 가격을 제시해놓으면, 아마존에서 남는 인스턴스들에 대해서 Spot 가격을 책정하는데, 이 가격이 입찰가격 내로 들어오면 인스턴스가 기동되는 방식&amp;nbsp;입찰 가격이 넘어가면 자동으로 Spot Instance는 다시 종료 됩니다. 항상 실행시키는 업무가 아닌 특정 작업 배치 돌릴 서버용도로 사용이 적합하다고 합니다.&lt;/p&gt;&lt;h3&gt;Cloude 관련용어 정리&lt;/h3&gt;&lt;p&gt;AWS에 관련된 자료를 보다보면 클라우드에 관련된 용어들이 많이 나옵니다. &lt;b&gt;고가용성&lt;/b&gt;, &lt;b&gt;장애허용&lt;/b&gt;, &lt;b&gt;온프레미스&lt;/b&gt;(&lt;b&gt;On-premise&lt;/b&gt;) 같은 용어들이 특히 저는 자주 접했던것 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;고가용성(high availabilit)&lt;/b&gt;: 짧은 다운타음 동안 자동으로 오류를 복구하는 시스템을 의미합니다. (장애가 발생하더라도 아주 짧은 시간이며, 자동으로 복구)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;장애허용&lt;/b&gt;: 고가용성과 다르게 장애가 발생하더라도 서비스의 중단없이 계속 서비스되는 시스템을 의미합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;b&gt;온프레미스(On-premise)&lt;/b&gt;: 클라우드 같은 환경이 아닌 자체 전산실에 직접 설치하여 운영하는 환경을 의미합니다. 반대로 클라우드 같은 환경을 &lt;b&gt;오프프레미스(Off-premises)&lt;/b&gt;라고 합니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>AWS</category>
<category>AWS</category>
<category>AWS 용어</category>
<category>Cloud</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/74</guid>
<comments>https://web-front-end.tistory.com/74#entry74comment</comments>
<pubDate>Fri, 06 Oct 2017 01:24:24 +0900</pubDate>
</item>
<item>
<title>[ 도서리뷰 ] 그럼에도 불구하고 너무나 인간적인 - 대한민국 개발자로 산다는 것</title>
<link>https://web-front-end.tistory.com/72</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:320px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile3.uf.tistory.com%2Fimage%2F99083B3359BDE54A18A3EF&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99083B3359BDE54A18&quot; filemime=&quot;image/jpeg&quot; filename=&quot;그럼에도불구하고.jpg&quot; height=&quot;464&quot; width=&quot;320&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4&gt;도서정보&lt;/h4&gt;&lt;hr&gt;&lt;p style=&quot;clear: none; float: none;&quot;&gt;&lt;b&gt;출간일&lt;/b&gt;: 2017년 09월 05일&lt;/p&gt;&lt;p style=&quot;clear: none; float: none;&quot;&gt;&lt;b&gt;쪽수,무게,크기&lt;/b&gt;: 336쪽 | 140*203*30mm&lt;/p&gt;&lt;p style=&quot;clear: none; float: none;&quot;&gt;&lt;b&gt;ISBN13&lt;/b&gt;: 9791186710173&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;ISBN10&lt;/b&gt;: 1186710179&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;엄태형 작가님 브런치 페이지&lt;/b&gt;:&lt;a href=&quot;https://brunch.co.kr/@taebari#articles&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; &lt;/a&gt;&lt;a href=&quot;https://brunch.co.kr/@taebari#magazines&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://brunch.co.kr/@taebari#articles&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://brunch.co.kr/@taebari&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&lt;h4&gt;도서리뷰&lt;/h4&gt;&lt;hr&gt;&lt;p&gt;이 책은 새로운 기술을 알려주거나 개발을 잘하는 방법 혹은 개발방법론등을 제시하는 개발 기술서적이 아닙니다.&lt;/p&gt;&lt;p&gt;그러한 기술도 중요하지만 무엇보다 중요한건 우리의 삶이라고 생각합니다. 이 책은&amp;nbsp;&lt;b&gt;개발자(직장인)로서&lt;/b&gt;&amp;nbsp;&lt;b&gt;더 나은 삶&lt;/b&gt;을 위한 기술서적입니다.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;우리는&amp;nbsp;무엇을 위해 일을 하고 새로운 기술에 열광하고&amp;nbsp;습득할려고 했는지 잊고 살았던것 같습니다.&amp;nbsp;이 책은 그러한 해답을 작가님의 경험과 생각을 바탕으로 제시하는 책이라고 생각합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;저는 이 책을 읽는 내내 좋은 기분을 감출 수 없었습니다.&lt;/p&gt;&lt;p&gt;그 이유는&amp;nbsp;평생 개발자로 살아가기 위해 노력하면서도&amp;nbsp;왜 평생 개발자로 살아가고 싶은지, &amp;nbsp;왜 새로운 기술을 습득에 노력했는지에 대한 스스로의 질문에 대답을 명확히 못하고 있었는데, 이 책을 통해 해답을 찾았기 때문입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;요즘처럼 하루가 멀다하고 새로운 기술이 쏟아져 나오는 시기 한번쯤 읽으면 좋은 도서입니다. 개발자뿐만 아니라 개발자분들과 연계해서 업무하시는 분들도 읽으면 좋을 것 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;누군가가 작성한 소스코드를 보면 그 사람이 보인다.&lt;/p&gt;&lt;p&gt;개발자는 코드를 공유하고 리뷰하며 소통한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;내가 던진 농담에 웃어줄 수 있는 사람이 향기롭다.&lt;/p&gt;&lt;p&gt;나와 가치관이 통하고 같은 공간을 공유하는 것이 즐거움으로 다가오는 사람과의 만남은 언제나 가슴 벅찬일이다.&lt;/p&gt;&lt;p&gt;자신에게 한번 물어보자. 나는 누군가와 쉽게 코드가 맞는 사람인가?&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;u&gt;&lt;span style=&quot;font-size: 8pt;&quot;&gt;그럼에도 불구하고 너무나 인간적인 p.185&lt;/span&gt;&lt;/u&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>개발도서 리뷰</category>
<category>개발도서</category>
<category>루비페이퍼</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/72</guid>
<comments>https://web-front-end.tistory.com/72#entry72comment</comments>
<pubDate>Sun, 17 Sep 2017 12:40:00 +0900</pubDate>
</item>
<item>
<title>[ Angular / Rxjs ] Angular에서 unsubscribe(구독취소)은 언제 어떻게 해야하는가?</title>
<link>https://web-front-end.tistory.com/71</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:500px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F9904773359BA7D1F01658F&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9904773359BA7D1F01&quot; filemime=&quot;image/jpeg&quot; filename=&quot;rxjs_angular.png&quot; height=&quot;500&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;RxJs에서는 &lt;b&gt;Observable&lt;/b&gt;를 구독(&lt;b&gt;subscribe&lt;/b&gt;) 함으로서 스트림을 통해 데이터를 주고 받고 하고 있습니다. 하지만 &lt;b&gt;Observable&lt;/b&gt;를 더 이상 관찰할 필요가 없을 경우 구독취소(&lt;b&gt;unsubscribe&lt;/b&gt;)를 해야합니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그럼 RxJs를 도입한 Angular(Angular 4)에서는 구독취소(&lt;b&gt;unsubscribe&lt;/b&gt;)를 언제 어떻게 해야할까요?&lt;/p&gt;&lt;p&gt;오늘 얘기할 내용은 바로 이 구독취소를 언제, 어떻게, 왜 해야하는지에 대해 얘기하고자 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2017. 09. 15 Update&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- takeUntil 내용 추가&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;ps)&amp;nbsp;글에 피드백을 주신분들께 감사드립니다.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;왜 구독취소를 해야할까요?&lt;/b&gt;&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;이 얘기를 하기위해서는 &lt;b&gt;Observable&lt;/b&gt;이 언제 실행되는지 알아야합니다. 기본적으로 &lt;b&gt;Observable&lt;/b&gt;은 &lt;b&gt;subscribe&lt;/b&gt;(구독)을 했을때 실행을 합니다. 그 이후 들어오는 스트림(데이터)은 &lt;b&gt;subscribe&lt;/b&gt; 메서드 안에서 처리가 됩니다. 그리고 구독을 취소하거나 구독이 완료(&lt;b&gt;complated&lt;/b&gt;)되기전까지 계속 동작하게되어 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그러다보니 구독취소(&lt;b&gt;unsubscribe&lt;/b&gt;)를 안하는경우 계속해서 관찰하게 되어 메모리 낭비가 되거나 혹은 로직이 잘못될 수 있습니다.&lt;/p&gt;&lt;h2&gt;그럼 언제 구독을 취소해야하나요?&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;일반적으로 Angular에서 &lt;b&gt;unsubscribe&lt;/b&gt;(구독취소)하는 위치는 &lt;b&gt;ngOnDestroy&lt;/b&gt;이 실행될 때 입니다.&amp;nbsp;이건 &lt;b&gt;Component&lt;/b&gt;나 &lt;b&gt;Directive&lt;/b&gt; 둘다 동일합니다.&lt;/p&gt;&lt;p&gt;여기서 예외는 &lt;b&gt;Async&lt;/b&gt; &lt;b&gt;Pipe&lt;/b&gt;(파이프)입니다. Async Pipe는 내부적으로 &lt;b&gt;subscribe&lt;/b&gt;(구독)과&amp;nbsp;&lt;b&gt;unsubscribe&lt;/b&gt;(구독취소) 처리를 알아서&amp;nbsp;하고 있습니다.&lt;/p&gt;&lt;h2&gt;그래서 어떻게 구독 취소를 해야할까요?&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;오늘 얘기할 내용중 가장 핵심인 내용입니다. 가장 기본적인 방법은 아래와 같이 &lt;b&gt;unsubscribe&lt;/b&gt; 메서드를 호출 하는것 입니다.&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;ngOnDestroy() {
  this.productsSubscription.unsubscribe();
  this.categorysSubscription.unsubscribe();
  this.userInfoSubscription.unsubscribe();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사실 &lt;b&gt;unsubscribe&lt;/b&gt;&amp;nbsp;메서드는 &lt;b&gt;subscribe&lt;/b&gt; 메서드의 리턴값인 &lt;b&gt;Subscription&lt;/b&gt; 객체에 존재합니다. 그러다보니 여러개의 &lt;b&gt;Observable&lt;/b&gt;이 있는경우 &lt;b&gt;ngOnDestroy&lt;/b&gt; 코드가 위와 같이 반복되기 쉽습니다. 또한 저 &lt;b&gt;Subscription&lt;/b&gt; 객체를 내부에 선언해야한다는 불편함도 있습니다.&lt;/p&gt;&lt;h4&gt;take Method&lt;/h4&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F997D983359BA8B6804950D&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/997D983359BA8B6804&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-09-14 오후 10.59.22.png&quot; height=&quot;295&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;그래서 RxJs에서는 &lt;b&gt;take&lt;/b&gt; 같은 구독 취소를 편하게 할 수 있는 &lt;b&gt;operator&lt;/b&gt;(연산자)들이 존재합니다.&lt;/p&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;this.productions$
  .take(1)
  .subscribe(products =&amp;gt; {
    //.. code
  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 소스에서 &lt;b&gt;take(1)&lt;/b&gt;&amp;nbsp;는 한번 실행 후 자동으로 구독이 취소됩니다. ajax 호출같은 스트림을 처리할 때 유용한 &lt;b&gt;unsubscribe&lt;/b&gt;(구독취소) 패턴입니다.&lt;/p&gt;&lt;h4&gt;takeWhile&lt;/h4&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F99F6553359BA8BA230F5B0&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99F6553359BA8BA230&quot; filemime=&quot;image/jpeg&quot; filename=&quot;takeWhile.png&quot; height=&quot;391&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;그럼 이벤트를 다루는 스트림에서는 어떻게 해야할까요? 이벤트는 이벤트 관찰이 필요한 경우 계속 구독해야하는 경우가 대다수일텐데요.&lt;/p&gt;&lt;p&gt;이럴 경우는 &lt;b&gt;takeWhile&lt;/b&gt; 라는 연산자(&lt;b&gt;operator&lt;/b&gt;)를 이용하면 편리합니다. 이 패턴은 제가 주로 사용합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;alive = true;

ngOnInit() {
  this.filterChange$
    .takeWhile(() =&amp;gt; this.alive)
    .subscribe(filter =&amp;gt; {
      // 필터가 변경되었을때의 처리
    });

  this.keywordChange$
    .takeWhile(() =&amp;gt; this.alive)
    .subscribe(keyword =&amp;gt; {
      // 키워드가 변경되었을때의 처리
    });
}

ngOnDestroy() {
  this.alive = false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;subscribe&lt;/b&gt; 전에 &lt;b&gt;takeWhile&lt;/b&gt; 연산자를 이용해 &lt;b&gt;this.alive&lt;/b&gt;가 &lt;b&gt;true&lt;/b&gt;일때만 구독하도록 처리하고 &lt;b&gt;ngOnDestory&lt;/b&gt;에서 &lt;b&gt;this.alive&lt;/b&gt; 값을 &lt;b&gt;false&lt;/b&gt;로 변경함으로 구독취소 처리를 하는 방식입니다. 이 패턴을 사용하면 구독시 매번 &lt;b&gt;Subscription&lt;/b&gt; 객체를 선언할 필요가 없습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2017. 09. 15 Update&lt;/b&gt;&lt;/p&gt;&lt;h4&gt;takeUntil&lt;/h4&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile3.uf.tistory.com%2Fimage%2F99591B3359BB22561F61F7&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99591B3359BB22561F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-09-15 오전 9.42.35.png&quot; height=&quot;355&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;또 다른 방법으로는 &lt;b&gt;takeUntil&lt;/b&gt; 연산자를 이용하는 방법이 있습니다. &lt;b&gt;takeUntil&lt;/b&gt;은 연산자에 &lt;b&gt;Observable&lt;/b&gt;를 넘겨 미러링을 한뒤 넘겨준 &lt;b&gt;Observable&lt;/b&gt;이 데이터를 받거나 완료처리가 되면 미러링을 중단하고 처음 &lt;b&gt;Observable&lt;/b&gt;은 구독취소가 됩니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;예시를 보면 거의 &lt;b&gt;takeWhile&lt;/b&gt;과 방식이 비슷합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;unsubscribe: Subject&lt;void&gt; = new Subject(void);

public ngOnInit() {
  this.tagService.getTags({category: 'keyword'})
    .takeUntil(this.unsubscribe)
    .subscribe(tags =&amp;gt; {
      this.tags = tags;
    });
}

public ngOnDestroy() {
  this.unsubscribe.next();
  this.unsubscribe.complete();
}&lt;/void&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;정리&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;그럼 어떤 방식이 제일 좋을까요?? &lt;b&gt;async&lt;/b&gt; 파이프(&lt;b&gt;pipe&lt;/b&gt;)를 사용하면 일단 Angular 자체에서 구독과 취소처리를 하기 때문에 가장 좋은 방법이라고 할 수 있겠습니다만 그게 불가능한 상황일 경우 위에서 얘기한 어떠한 방법을 사용해도 사실 크게 상관은 없습니다. 편한 방식을 선택하시면 될 것 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하지만 명시적으로 unsubscribe를 이용하여 구독취소를 하는것 보다 operator(연산자)를 이용하여 구독취소 처리를 해주는게 스트림의 흐름을 파악하기 편리하기때문에 되도록이면 operator를 활용하시는 편이 좋을것 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;참고한 사이트:&amp;nbsp;&lt;a href=&quot;http://reactivex.io/documentation/operators&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://reactivex.io/documentation/operators&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Angular 2</category>
<category>angular</category>
<category>angular 2</category>
<category>Angular 4</category>
<category>angular2</category>
<category>angular4</category>
<category>rxjs</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/71</guid>
<comments>https://web-front-end.tistory.com/71#entry71comment</comments>
<pubDate>Thu, 14 Sep 2017 22:56:39 +0900</pubDate>
</item>
<item>
<title>[ TypeScript / Angular ] export interface was not found in</title>
<link>https://web-front-end.tistory.com/70</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;Angular2(이하 Angular)&amp;nbsp;개발시 Service에 선언한 Interface를 export를 하고 다른 컴퍼넌트에서 import를 할려고하니 아래와 같은 에러 메세지가 발생하였습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;WARNING in ./src/app/core/sidenav/sidenav-item/sidenav-item.component.ts&lt;/p&gt;&lt;p&gt;21:83-92 &quot;export 'ISideItem' was not found in '../sidenav.service'&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at HarmonyImportSpecifierDependency._getErrors (/Users/david/work/resume/client/node_modules/webpack/lib/dependencies/HarmonyImportSpecifierDependency.js:65:15)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at HarmonyImportSpecifierDependency.getWarnings (/Users/david/work/resume/client/node_modules/webpack/lib/dependencies/HarmonyImportSpecifierDependency.js:39:15)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at Compilation.reportDependencyErrorsAndWarnings (/Users/david/work/resume/client/node_modules/webpack/lib/Compilation.js:677:24)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at Compilation.finish (/Users/david/work/resume/client/node_modules/webpack/lib/Compilation.js:535:9)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at applyPluginsParallel.err (/Users/david/work/resume/client/node_modules/webpack/lib/Compiler.js:512:17)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at /Users/david/work/resume/client/node_modules/tapable/lib/Tapable.js:289:11&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at _addModuleChain (/Users/david/work/resume/client/node_modules/webpack/lib/Compilation.js:481:11)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at processModuleDependencies.err (/Users/david/work/resume/client/node_modules/webpack/lib/Compilation.js:452:13)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at _combinedTickCallback (internal/process/next_tick.js:67:7)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; at process._tickCallback (internal/process/next_tick.js:98:9)&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile23.uf.tistory.com%2Fimage%2F9975DB3359A6354E130E4A&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9975DB3359A6354E13&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-08-30 오후 12.46.26.png&quot; height=&quot;141&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;ISideItem&lt;/b&gt; 을 &lt;b&gt;sidenav.service&lt;/b&gt;에서 찾을 수 없다는데 &lt;b&gt;export&lt;/b&gt; 잘 선언되어있고 작동도 잘하고 있었습니다.&lt;/p&gt;&lt;p&gt;waring이지만 뭔가 찜찜합니다. 일단 문제되던 코드를 살펴보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;//sidenav-item.component.ts
import {Component, Input, OnInit} from '@angular/core';
import {ISideItem, SideItemTypes} from '../sidenav.service';

@Component({
  selector: 'app-sidenav-item',
  templateUrl: './sidenav-item.component.html',
  styleUrls: ['./sidenav-item.component.scss']
})
export class SidenavItemComponent implements OnInit {
  @Input('item') item: ISideItem;
  @Input('index') index: number;

  menuTypes = SideItemTypes;

  constructor() {}

  ngOnInit() {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래는 sidenav.service.ts 입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';

/**
 * sidenav 메뉴 type
 * (link/dropDown/icon/separator/extLink)
 */
export enum SideItemTypes {
  link,
  dropDown,
  icon,
  separator,
  extLink
}
/**
 * sidenav 메뉴 인터페이스
 */
export interface ISideItem {
  type: SideItemTypes;              // menu의 type:
  name?: string;                    // menu 노출될 이름
  path?: string;                    // 라우터 경로
  icon?: string;                    // 메뉴 아이콘
  tooltip?: string;                 // 메뉴 툴팁
  disabled?: boolean;               // 메뉴 숨김여부
  sub?: ISideSub[];                 // 하위 메뉴(Array&lt;isidesub&gt;)
}

/**
 * sidenav 하위 메뉴
 */
export interface ISideSub {
  name: string;                     // 하위메뉴 이름
  path: string;                     // 라우터 경로
}

@Injectable()
export class SidenavService {
  constructor() { }
  menu: ISideItem[] = [
    //....
  ];
  // 메뉴 subject
  menuItems = new BehaviorSubject&lt;isideitem[]&gt;(this.menu);
  // 메뉴 스트림
  menuItems$ = this.menuItems.asObservable();
}

&lt;/isideitem[]&gt;&lt;/isidesub&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;분명히 Interface들이 선언이 잘되어있습니다. 구글링을 조금 해보니 해당 &lt;a href=&quot;https://github.com/angular/angular-cli/issues/2034#issuecomment-302666897&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이슈&lt;/a&gt;가 발견되었습니다.&lt;/p&gt;&lt;p&gt;그리고 기존의 다른 개발자분들은 interface를 어떻게 export하고 import하고 있는지 확인해봤습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/src/app/navigation/navigation.service.ts#L15~L16&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;angular.io/src/app/navigation/navigation.service.ts&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// Import and re-export the Navigation model types
import { CurrentNodes, NavigationNode, NavigationResponse, NavigationViews, VersionInfo } from './navigation.model';
export { CurrentNodes, CurrentNode, NavigationNode, NavigationResponse, NavigationViews, VersionInfo } from './navigation.model';&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Interface용 파일을 별도로 빼서 service에서 export로 from 구문으로 내보내고 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래서 아래와 같이&amp;nbsp;수정하였습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;//sidenav.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
// import 하고 export하는 이유는 https://github.com/angular/angular-cli/issues/2034#issuecomment-302666897 참고
import { ISideItem, SideItemTypes} from './sidenav.model';
export { ISideItem, ISideSub, SideItemTypes } from './sidenav.model';

@Injectable()
export class SidenavService {
  constructor() { }
  menu: ISideItem[] = [
    //...
  ];
  // 메뉴 subject
  menuItems = new BehaviorSubject&lt;isideitem[]&gt;(this.menu);
  // 메뉴 스트림
  menuItems$ = this.menuItems.asObservable();
}
&lt;/isideitem[]&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// sidenav.model.ts
/**
 * sidenav 메뉴 type
 * (link/dropDown/icon/separator/extLink)
 */
export enum SideItemTypes {
  link,
  dropDown,
  icon,
  separator,
  extLink
}
/**
 * sidenav 메뉴 인터페이스
 */
export interface ISideItem {
  type: SideItemTypes;              // menu의 type:
  name?: string;                    // menu 노출될 이름
  path?: string;                    // 라우터 경로
  icon?: string;                    // 메뉴 아이콘
  tooltip?: string;                 // 메뉴 툴팁
  disabled?: boolean;               // 메뉴 숨김여부
  sub?: ISideSub[];                 // 하위 메뉴(Array&lt;isidesub&gt;)
}

/**
 * sidenav 하위 메뉴
 */
export interface ISideSub {
  name: string;                     // 하위메뉴 이름
  path: string;                     // 라우터 경로
}&lt;/isidesub&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Interface 선언용 파일 sidenav.model.ts를 별도로 분리하여 serivce에서 불러와 포함시키도록 하니 waring이 사라졌습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Typescript에서 @(Decorator)를 사용한 경우 발생되는 문제라고 하니 참고하시면 좋을듯 합니다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 336*280 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:336px;height:280px&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;1393802613&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Angular 2</category>
<category>angular</category>
<category>angular2</category>
<category>angular4</category>
<category>TypeScript</category>
<author>권윤학</author>
<guid>https://web-front-end.tistory.com/70</guid>
<comments>https://web-front-end.tistory.com/70#entry70comment</comments>
<pubDate>Wed, 30 Aug 2017 13:20:23 +0900</pubDate>
</item>
<item>
<title>[ Angular ] angular2를 이용하여 HNPWA 만들기 ( 1. Angular 프로젝트 작업 )</title>
<link>https://web-front-end.tistory.com/67</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6567618332114449&quot;
     data-ad-slot=&quot;3149737413&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile23.uf.tistory.com%2Fimage%2F994F2733598BF6CF38597B&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/994F2733598BF6CF38&quot; filemime=&quot;image/jpeg&quot; filename=&quot;ng2-hn.png&quot; height=&quot;661&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://hnpwa.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;HNPWA&lt;/a&gt;(Hacker News readers as Progressive Web Apps)은&amp;nbsp;Google I/O 2017 에서 소개된적이 있으며&amp;nbsp;TodoMVC와 같은 다양한 자바스크립트 프레임워크를 이용하여&amp;nbsp;한가지 앱을 구현한 프로젝트입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이름에도 나와있든 이 프로젝트는&amp;nbsp;Progressive Web App (PWA) 기술을&amp;nbsp;이용하여 Hacker News&amp;nbsp;앱을 구현한 프로젝트이며, 이중에서 &lt;b&gt;angular2(이하 angular)&lt;/b&gt;를 이용하여 구현한 angular2-hn에는 rxjs, firebase,&amp;nbsp;workboxjs 등의 기술들이 포함되어있어, angular로 pwa를 구현하기전에 참고하기 좋은 프로젝트입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 글의 원문은&amp;nbsp;rangle.io&amp;nbsp;개발자인&amp;nbsp;Houssein Djirdeh의&amp;nbsp;블로그(&lt;a href=&quot;https://houssein.me&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://houssein.me&lt;/a&gt;)에 있는&amp;nbsp;&lt;a href=&quot;https://houssein.me/angular2-hacker-news&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;building hacker news with angular 2 cli, rxjs and webpack&lt;/a&gt; 입니다. 저자에게 허락을 받고&amp;nbsp;번역합니다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;(This article's origin is here[&lt;/b&gt;&lt;a href=&quot;https://houssein.me/angular2-hacker-news&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;&quot;&gt;https://houssein.me/angular2-hacker-news&lt;/a&gt;&lt;b&gt;] Thank you Houssein Djirdeh for allowing me to translate)&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;추가 내용이 필요하거나 일부(http -&amp;gt; httpclient) 내용은 수정하였습니다.&lt;/p&gt;&lt;p&gt;번역 글 작성시 사용된 &lt;b&gt;angular-cli&lt;/b&gt; 버전은&amp;nbsp;&lt;b&gt;1.2.7&lt;/b&gt;이며,&amp;nbsp;&lt;b&gt;angular-core&lt;/b&gt; 버전은 &lt;b&gt;4.3.3&lt;/b&gt; 입니다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Angular를 이용하여&amp;nbsp;프로젝트를 설정하고 구축해본적이 있으신분들은&amp;nbsp;이러한 작업들이 상당한 시간이 소요됨을 알고 계십니다.&amp;nbsp;해당 문제를 개선하고자 Angular 팀에서는 &lt;a href=&quot;https://cli.angular.io/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Angular CLI&lt;/a&gt;를 출시하였습니다.&amp;nbsp;Angular CLI는 명령 줄 인터페이스로, Angular 프로젝트를 쉽게 구축할 수 있도록 도와줍니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 글에서는 Angular CLI, RxJS Observables 및 Webpack을 모듈 로더로&amp;nbsp;사용하여 &lt;a href=&quot;https://news.ycombinator.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;해커 뉴스&lt;/a&gt; 클라이언트를 구축 할 것이며, 다음 글에서는 추가적으로 PWA를 만들어 볼 예정입니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/tienne/angular2-hn/tree/version1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;소스보기&lt;/a&gt; / &lt;a href=&quot;https://angular2-hn.firebaseapp.com/news/1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;결과물 보기&lt;/a&gt;&lt;/b&gt;&lt;/h4&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;이 글에서는 해커 뉴스 페이지를 만들기 위한 단계별로 설명할 예정이며, 작업 단계에서 발생한 문제와 해결방법에 대해 설명이 포함되어있습니다.&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;아래의 단계로 작업을 진행할 예정입니다.&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li&gt;&lt;p&gt;먼저 Hacker News의 첫 페이지를 작업합니다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;그 후 해당 페이지에 Observable Data Service를 래핑하여 데이터를 비동기적으로 불러옵니다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;사용자가 서로 다른 페이지와 스토리 유형을 탐색 할 수 있도록 &lt;a href=&quot;https://angular.io/guide/router&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Angular Component Router&lt;/a&gt;를 사용하여 라우팅을 추가합니다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;마지막으로 사용자&amp;nbsp;항목 설명 및 사용자 프로필로 이동할 수있는 경로를 추가합니다.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;이 튜토리얼을 통해 angular의 작은 모듈부터 처음부터 끝까지 작업을 해보며, 아래의 중요한 내용들을 간단히 살펴보며 실제 프로젝트에 적용되는지 이해가 가능합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li&gt;The NgModule decorator&lt;/li&gt;&lt;li&gt;View Encapsulation&lt;/li&gt;&lt;li&gt;RxJS&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Getting Started&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;먼저 node.js를 이용하여 angular-cli를 전역 설치합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;npm install -g @angular/cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;angular-cli 설치가 끝난 이후에는 angular 프로젝트를 아래의 명령어로 생성 및 실행이 가능합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng new angular2-hn --style=scss
cd angular2-hn
ng serve&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ng new 명령어는 angular-cli를 이용하여 프로젝트를 생성하는 명령이며 --style 옵션은 프로젝트의 style 코드를 선택하는 옵션으로 이 튜토리얼에서는 scss를 사용합니다.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;ng serve를 이용하여 프로젝트를 실행하면 &lt;b&gt;https://localhost:4200/&lt;/b&gt;에 접속하여 확인이 가능합니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile2.uf.tistory.com%2Fimage%2F998E0533598C0608398E56&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/998E0533598C060839&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-08-10 오후 4.06.05.png&quot; height=&quot;668&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;멋지지 않습니까? Angular-cli는 원래 &lt;a href=&quot;https://github.com/systemjs/systemjs&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;SystemJs&lt;/a&gt;를 이용하여 모듈을 번들 및&amp;nbsp;로드하고&amp;nbsp;있었으나 SystemJs는 번들 시간이 오래걸리고 3rd&amp;nbsp;party library를 추가할때 불편하는등의 단점이 있어 Angular Cli팀은 &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/Upgrading-from-Beta.10-to-Beta.12&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;SystemJs에서 Webpack으로 변경&lt;/a&gt;하였습니다.&amp;nbsp;&lt;/p&gt;&lt;h2&gt;NgModule&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;Cli를 이용하여 Angular 프로젝트 생성 및 실행 시 Angular의 최신 릴리스 버전을 사용합니다.&amp;nbsp;우리는 먼저 @NgModule 데코레이터 살펴 보겠습니다. NgModule 데코레이터는 app.module.ts 파일에서 사용되는 것을 볼 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.module.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;데코레이터(Decorator) 는 ES7에 제안된 내용이지만 최근 발표된 ES7에는 포함되지 않았으며&amp;nbsp;현재 &lt;a href=&quot;https://github.com/tc39/proposal-decorators&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;stage-2&lt;/a&gt;에 포함된 내용으로 @로 시작하며 클래스나 프로퍼티에 역활을 표기해주는 언어적 장치입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;@NgModule 데코레이터는 그 밑에 AppModule 클래스가 NgModule용 클래스라는걸 꾸며주는 역활을 합니다. Angular에는 여러가지 데코레이터가 존재하는데 (Component, Directive,&amp;nbsp;Input&amp;nbsp;등) 각각 Angular의 구성요소를 표기해주는 역활을 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실제로 작동하는 방식은 아래의 예시를 보시면 이해하기 쉬울듯 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;TypeScript로 작성한 모듈 소스&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;@NgModule({
  imports: [BrowserModule],
  declarations: [HelloWorldComponent],
  bootstrap: [HelloWorldComponent]
})
export class AppModule {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Es5로 작성된 모듈 소스&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;(function(app) {
  app.AppModule =
    ng.core.NgModule({
      imports: [ng.platformBrowser.BrowserModule],
      declarations: [app.HelloWorldComponent],
      bootstrap: [app.HelloWorldComponent]
    }).Class({
      constructor: function() {}
    });
})(window.app || (window.app = {}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다시 app.module.ts로 돌아와서 보면 cli로 생성된 module 소스에는 기본적으로 AppComponent 및 BrowserModule등이 포함되어있습니다. 해당 소스를 &lt;b&gt;FormsModule&lt;/b&gt;과 angular 4.3.0에 추가된 &lt;a href=&quot;https://angular.io/guide/http&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;HttpClientModule&lt;/a&gt;를 아래처럼 추가하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }&lt;font face=&quot;Gulim, 굴림&quot;&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;
&lt;/span&gt;&lt;/font&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Let’s get ready to rumble&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;이 글에서는 위에 언급한거와 같이 scss를 사용할 예정입니다. 만약 angular-cli로 프로젝트 생성시 --style 옵션으로 scss 설정을 안하셨다면 아래의 명령어를 이용하여 변경해주시기 바랍니다. (scss는 sass 3 부터 sass 주문법이 되었습니다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng set defaults.styleExt scss&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 명령어를 입력 후에는 .angular-cli.json의 defaults 속성이 아래처럼 변경되어있습니다. ( angular-cli.json의 schma에 대해 궁금하시면 해당 &lt;a href=&quot;http://web-front-end.tistory.com/64&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;에서 확인)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;&quot;defaults&quot;: {
    &quot;styleExt&quot;: &quot;scss&quot;,
    &quot;component&quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기까지 설정이 완료되었다면 첫번째 컴퍼넌트인 &lt;b&gt;HeaderComponent&lt;/b&gt;를 추가하겠습니다. 아래의 명령어를 터미널에 입력해주세요.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng generate component Header&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;app/header 폴더안에 아래의 파일들이 생성된것을 확인하실 수 있습니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;header.component.scss&lt;/li&gt;&lt;li&gt;header.component.html&lt;/li&gt;&lt;li&gt;header.component.ts&lt;/li&gt;&lt;li&gt;header.component.spec.ts&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:500px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F99262833598C35553856D9&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99262833598C355538&quot; filemime=&quot;image/jpeg&quot; filename=&quot;unit_test.jpg&quot; height=&quot;281&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위의 이미지는 농담입니다. 실제 서비스되는 어플리케이션에서는 UNIT TEST는 매우 중요합니다. 이 튜토리얼에서는 단위테스트는 다루지 않으므로 &lt;b&gt;spec&lt;/b&gt; 파일은 주석하거나 삭제하셔도 됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;app.module.ts&lt;/b&gt;를 보면&amp;nbsp;추가한 HeaderComponent가 포함되어있는걸 확인하실 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.module.ts

// ...
import { AppComponent } from './app.component';
import { HeaderComponent } from './header/header.component';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent
  ],
//...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;header.component.ts를 살펴보면 component의 선택자가 아래와 같이 app-header임을 알 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;추가한 HeaderComponent를 root component인 app.component.ts에 추가해 보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- app.component.html --&amp;gt;

&amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 ng serve 명령어를 이용하여 어플리케이션 실행 시 header component가 정상적으로 추가되었음을 확인 가능합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F99C46033598C3A3234D07E&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99C46033598C3A3234&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-08-10 오후 7.48.52.png&quot; height=&quot;550&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;좋습니다. 이제 html 마크업과 스타일 코드를 추가해 보도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- app.component.html --&amp;gt;

&amp;lt;div id=&quot;wrapper&quot;&amp;gt;
  &amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;app.component.scss도 수정합니다. 원문에서는 github &lt;a href=&quot;https://github.com/housseindjirdeh/angular2-hn/blob/initial-setup/src/app/app.component.scss&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;로 제공되고 있는 스타일 코드입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;@import url(https://fonts.googleapis.com/css?family=Open%20Sans);

$mobile-only: &quot;only screen and (max-width : 768px)&quot;;

body {
  margin-bottom: 0;

  @media #{$mobile-only} {
    margin: 0;
  }
}

#wrapper {
  background-color: #F6F6EF;
  position: relative;
  width: 85%;
  min-height: 80px;
  margin: 0 auto;
  font-family: 'Open Sans', sans-serif;
  font-size: 15px;
  height: 100%;

   @media #{$mobile-only} {
    width: 100%;
    background-color: #fff;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 다음 header를 수정하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- header.component.html --&amp;gt;

&amp;lt;header id=&quot;header&quot;&amp;gt;
  &amp;lt;a class=&quot;home-link&quot; href=&quot;/&quot;&amp;gt;
    &amp;lt;img class=&quot;logo&quot; src=&quot;https://i.imgur.com/J303pQ4.png&quot;&amp;gt;
  &amp;lt;/a&amp;gt;
  &amp;lt;div class=&quot;header-text&quot;&amp;gt;
    &amp;lt;div class=&quot;left&quot;&amp;gt;
      &amp;lt;h1 class=&quot;name&quot;&amp;gt;
        &amp;lt;a href=&quot;/&quot;&amp;gt;Angular 2 HN&amp;lt;/a&amp;gt;
      &amp;lt;/h1&amp;gt;
      &amp;lt;span class=&quot;header-nav&quot;&amp;gt;
        &amp;lt;a href=&quot;&quot;&amp;gt;new&amp;lt;/a&amp;gt;
        &amp;lt;span class=&quot;divider&quot;&amp;gt;
          |
        &amp;lt;/span&amp;gt;
        &amp;lt;a href=&quot;&quot;&amp;gt;show&amp;lt;/a&amp;gt;
        &amp;lt;span class=&quot;divider&quot;&amp;gt;
          |
        &amp;lt;/span&amp;gt;
        &amp;lt;a href=&quot;&quot;&amp;gt;ask&amp;lt;/a&amp;gt;
        &amp;lt;span class=&quot;divider&quot;&amp;gt;
          |
        &amp;lt;/span&amp;gt;
        &amp;lt;a href=&quot;&quot;&amp;gt;jobs&amp;lt;/a&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;info&quot;&amp;gt;
      Built with &amp;lt;a href=&quot;https://cli.angular.io/&quot; target=&quot;_blank&quot;&amp;gt;Angular CLI&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;header.component.scss도 아래와 같이 수정해줍니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;$mobile-only: &quot;only screen and (max-width : 768px)&quot;;

#header {
  background-color: #b92b27;
  color: #fff;
  padding: 6px 0;
  line-height: 18px;
  vertical-align: middle;
  position: relative;
  z-index: 1;
  width: 100%;

  @media #{$mobile-only} {
    height: 50px;
    position: fixed;
    top: 0;
  }

  a {
    display: inline;
  }
}

.home-link {
  width: 50px;
  height: 66px;
}

.logo {
  width: 50px;
  padding: 3px 8px 0;

  @media #{$mobile-only} {
    width: 45px;
    padding: 0 0 0 10px;
  }
}

h1 {
  font-weight: bold;
  display: inline-block;
  vertical-align:middle;
  margin: 0;
  font-size: 16px;

  a {
    color: #fff;
    text-decoration: none;
  }
}

.name {
  margin-right: 30px;
  margin-bottom: 2px;

  @media #{$mobile-only} {
    display: none;
  }
}

.header-text {
  position: absolute;
  width: inherit;
  height: 20px;
  left: 10px;
  top: 27px;

  @media #{$mobile-only} {
    top: 22px;
  }
}

.left {
  position: absolute;
  left: 60px;
  font-size: 16px;

  @media #{$mobile-only} {
    width: 100%;
    left: 0;
  }
}

.header-nav {
  display: inline-block;

  @media #{$mobile-only} {
    float: right;
    margin-right: 20px;
  }

  a {
    color: #fff;
    text-decoration: none;

    &amp;amp;:hover {
      font-weight: bold;
    };
  }
}

.info {
  position: absolute;
  right: 20px;
  font-size: 16px;

  @media #{$mobile-only} {
    display: none;
  }

  a {
    color: #fff;
    font-weight: bold;
    text-decoration: none;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기까지 작업하신 후 어플리케이션 화면을 보면 아래와 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F99B90333598C49DB0E713C&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99B90333598C49DB0E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;header_complete.png&quot; height=&quot;106&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;View Encapsulation&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;이 어플리케이션은 반응형 페이지로 만들고 있기 때문에 가능하다면 다른 크기의 디바이스에서 보여지는 모습을 체크하는 것도 중요합니다. 뷰포트를 조정하여 모바일 장치에서 어떻게 보이는지 확인해겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:390px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F99406933598C4B272C99EA&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99406933598C4B272C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;mobile_view.png&quot; height=&quot;683&quot; width=&quot;390&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;대부분의&amp;nbsp;최신 브라우저는 &lt;b&gt;body&lt;/b&gt; 태그에 &lt;b&gt;margin&lt;/b&gt; 값을 가지고 있기때문에 가장 자리들이 여백이 발생되고 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F99F06233598C562C026EE8&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99F06233598C562C02&quot; filemime=&quot;image/jpeg&quot; filename=&quot;body_devtool.png&quot; height=&quot;393&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하지만 app.component.scss를 보면 화면 크기가 768px보다 작은 경우 margin : 0로 설정하고 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;$mobile-only: &quot;only screen and (max-width : 768px)&quot;;

body {
  margin-bottom: 0;

  @media #{$mobile-only} {
    margin: 0;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;왜 이렇게 rendering이 되는지 이유를 살펴보면 Angular Conponent의 스타일 캡슐화 방식 때문입니다. 이 튜토리얼에서 Component의 캡슐화에 대해 자세히 다루지 않겠지만, 간략하게 각 방식에 대해 설명을 하자면 아래와 같습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;None: 캡슐화를 하지 않습니다.&amp;nbsp;Shadow DOM이 없으며, 스타일을 추가하거나 변경하면 전체 HTML 문서에 적용됩니다.&lt;/li&gt;&lt;li&gt;Emulated: Angular에서 지원하는 Shadow DOM을 사용합니다. (기본값)&lt;/li&gt;&lt;li&gt;Native:브라우저의&amp;nbsp;Shadow&amp;nbsp;DOM을 사용합니다 .(이 기능을 &lt;a href=&quot;http://caniuse.com/#feat=shadowdom&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;지원하는 브라우저 확인&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;app.component.scss는 app.component.ts의 selector에 적용되도록 캡슐화가 되어있습니다. 그러다보니 해당 scss에서 body를 수정할려고해도 적용이 안되는 문제가 발생된것이며 이에 대한 해결책은 두가지정도 방법이 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li&gt;캡슐화 방식을 변경&lt;/li&gt;&lt;li&gt;app.component.scss가 아닌 styles.scss에 코드 적용&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;이 튜토리얼은 먼저 캡슐화 방식을 변경해보도록 하겠습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.component.ts

import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector: 'app-root',
  encapsulation: ViewEncapsulation.None,
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})

export class AppComponent {
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;app.component.ts에&amp;nbsp;&amp;nbsp;encapsulation: ViewEncapsulation.None 항목을 추가하고 다시 어플리케이션을 실행하면 스타일코드가 적용된걸 확인 하실 수 있습니다. 위에 설명드린거와 같이 ViewEncapsulation.None으로 설정시 캡슐화를 하지않고 문서 전체 대상으로 적용되기 때문입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:391px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile28.uf.tistory.com%2Fimage%2F99C08333598C759A066E51&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99C08333598C759A06&quot; filemime=&quot;image/jpeg&quot; filename=&quot;ViewEncapsulation-None.png&quot; height=&quot;685&quot; width=&quot;391&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사실 이러한 경우는 첫번째 방법보다 두번째 방법이 더 단순하고 올바른 방법입니다. &lt;b&gt;src&lt;/b&gt; 디렉토리 안에보면 &lt;b&gt;styles.scss&lt;/b&gt; 파일이 있습니다. 이 파일에는 전역 스타일 코드를 작성하는 파일이며 우리가 작성했던 body 코드는 이 부분에 넣어주기만 하면 끝납니다. 아래 코드 처럼 말이죠&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;@import url(https://fonts.googleapis.com/css?family=Open%20Sans);

$mobile-only: &quot;only screen and (max-width : 768px)&quot;;

body {
  margin-bottom: 0;

  @media #{$mobile-only} {
    margin: 0;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이러한 삽질 덕분에 우리는 캡슐화에 대해 알 수 있었습니다 :)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:500px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile29.uf.tistory.com%2Fimage%2F99F9B433598C7F8B215382&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99F9B433598C7F8B21&quot; filemime=&quot;image/jpeg&quot; filename=&quot;WtE1S58.jpg&quot; height=&quot;324&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Multiple Components&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;그 다음으로 Stories와 Footer라는 두개의 Component를 추가로 만들어 보겠습니다. Stories는 Hacker News의 게시물을 지정된 순서대로 노출을 위한&amp;nbsp;뼈대에 해당합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g component Stories&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// stories.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-stories',
  templateUrl: './stories.component.html',
  styleUrls: ['./stories.component.scss']
})

export class StoriesComponent implements OnInit {
  items: number[];

  constructor() {
    this.items = Array(30);
  }

  ngOnInit() {
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- stories.component.html --&amp;gt;

&amp;lt;div class=&quot;main-content&quot;&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li *ngFor=&quot;let item of items; let i = index&quot; class=&quot;post&quot;&amp;gt;
      Story #{{i}}
    &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
  &amp;lt;div class=&quot;nav&quot;&amp;gt;
    &amp;lt;a href=&quot;&quot; class=&quot;prev&quot;&amp;gt;
      ‹ Prev
    &amp;lt;/a&amp;gt;
    &amp;lt;a href=&quot;&quot; class=&quot;more&quot;&amp;gt;
      More ›
    &amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;/* stories.component.scss */
$mobile-only: &quot;only screen and (max-width : 768px)&quot;;

a {
  color: #b92b27;
  text-decoration: none;
  font-weight: bold;

  &amp;amp;:hover {
    text-decoration: underline;
  };
}

ol {
  padding: 0 40px;
  margin: 0;

  @media #{$mobile-only} {
    box-sizing: border-box;
    list-style: none;
    padding: 0 10px;
  }

  li {
    position: relative;
    -webkit-transition: background-color .2s ease;
    transition: background-color .2s ease;
  }
}

.list-margin {
  @media #{$mobile-only} {
    margin-top: 55px;
  }
}

.main-content {
  position: relative;
  width: 100%;
  min-height: 100vh;
  -webkit-transition: opacity .2s ease;
  transition: opacity .2s ease;
  box-sizing: border-box;
  padding: 8px 0;
  z-index: 0;
}

.post {
  padding: 10px 0 10px 5px;
  transition: background-color 0.2s ease;
  border-bottom: 1px solid #CECECB;

  .itemNum {
    color: #696969;
    position: absolute;
    width: 30px;
    text-align: right;
    left: 0;
    top: 4px;
  }
}

.item-block {
  display: block;
}


.nav {
  padding: 10px 40px;
  margin-top: 10px;
  font-size: 17px;

  a {
    @media #{$mobile-only} {
      color: #B92B27;
      text-decoration: none;
    }
  }

  @media #{$mobile-only} {
    margin: 20px 0;
    text-align: center;
    padding: 10px 80px;
    height: 20px;
  }

  .prev {
    padding-right: 20px;

    @media #{$mobile-only} {
      float: left;
      padding-right: 0;
    }
  }

  .more {
    @media #{$mobile-only} {
      float: right;
    }
  }
}

.job-header {
  font-size: 15px;
  padding: 0 40px 10px;

  @media #{$mobile-only} {
    padding: 60px 15px 25px 15px;
    border-bottom: 2px dotted #b92b27;
  }
}

.loader {
  background: #B92B27;
  -webkit-animation: load1 1s infinite ease-in-out;
  animation: load1 1s infinite ease-in-out;
  width: 1em;
  height: 4em;
  &amp;amp;:before, &amp;amp;:after {
    background: #B92B27;
    -webkit-animation: load1 1s infinite ease-in-out;
    animation: load1 1s infinite ease-in-out;
    width: 1em;
    height: 4em;
  }
  &amp;amp;:before, &amp;amp;:after {
    position: absolute;
    top: 0;
    content: '';
  }
  &amp;amp;:before {
    left: -1.5em;
    -webkit-animation-delay: -0.32s;
    animation-delay: -0.32s;
  }
}

.loading-section {
    height: 70px;
    margin: 40px 0 40px 40px;

  @media #{$mobile-only} {
    display: block;
    position: relative;
    margin: 45vh 0;
  }
}

.loader {
  color: #B92B27;
  text-indent: -9999em;
  margin: 20px 20px;
  position: relative;
  font-size: 11px;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation-delay: -0.16s;
  animation-delay: -0.16s;
  &amp;amp;:after {
    left: 1.5em;
  }

  @media #{$mobile-only} {
    margin: 20px auto;
  }
}

@-webkit-keyframes load1 {
  0%,
    80%,
    100% {
    box-shadow: 0 0;
    height: 2em;
  }
  40% {
    box-shadow: 0 -2em;
    height: 3em;
  }
}

@keyframes load1 {
  0%,
    80%,
    100% {
    box-shadow: 0 0;
    height: 2em;
  }
  40% {
    box-shadow: 0 -2em;
    height: 3em;
  }
}

@media #{$mobile-only} {
  @-webkit-keyframes load1 {
    0%,
      80%,
      100% {
      box-shadow: 0 0;
      height: 4em;
    }
    40% {
      box-shadow: 0 -2em;
      height: 5em;
    }
  }

  @keyframes load1 {
    0%,
      80%,
      100% {
      box-shadow: 0 0;
      height: 3em;
    }
    40% {
      box-shadow: 0 -2em;
      height: 4em;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 다음&amp;nbsp;Footer Component를 추가하도록 하겠습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g component Footer&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- footer.component.html --&amp;gt;

&amp;lt;div id=&quot;footer&quot;&amp;gt;
    &amp;lt;p&amp;gt;Show this project some ❤ on
      &amp;lt;a href=&quot;https://github.com/housseindjirdeh/angular2-hn&quot; target=&quot;_blank&quot;&amp;gt;
        GitHub
      &amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;/* footer.component.scss */

$mobile-only: &quot;only screen and (max-width : 768px)&quot;;

#footer {
  position: relative;
  padding: 10px;
  height: 60px;
  border-top: 2px solid #b92b27;
  letter-spacing: 0.7px;
  text-align: center;

  a {
    color: #b92b27;
    font-weight: bold;
    text-decoration: none;

    &amp;amp;:hover {
      text-decoration: underline;
    }
  }

  @media #{$mobile-only} {
    display: none;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;추가한 Component들을 app.component에 추가하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- app.component.html --&amp;gt;

&amp;lt;div id=&quot;wrapper&quot;&amp;gt;
  &amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;
  &amp;lt;app-stories&amp;gt;&amp;lt;/app-stories&amp;gt;
  &amp;lt;app-footer&amp;gt;&amp;lt;/app-footer&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기까지 작업한 내용으로 어플리케이션을 실행하면 아래와 같이 됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile23.uf.tistory.com%2Fimage%2F99AB3433598C89DD33B41B&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99AB3433598C89DD33&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stories_footer.png&quot; height=&quot;638&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;글이나 항목에는 각각의 속성들이 있으므로, 이 부분도 Component로 작성하면 좋습니다. 이 튜토리얼에서는 글에 대한 컴퍼넌트를 Item Component로 지정하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g component Item&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실제 데이터가 들어오면 story component 자식 component로 item 이 사용되며 해당 식별 index는&amp;nbsp;&lt;b&gt;itemID&lt;/b&gt;로 지정됩니다.&lt;/p&gt;&lt;p&gt;먼저 작업했던 stories.component에 item component를 추가하도록 하겠습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- stories.component.html --&amp;gt;

&amp;lt;div class=&quot;main-content&quot;&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li *ngFor=&quot;let item of items; let i = index&quot; class=&quot;post&quot;&amp;gt;
      &amp;lt;item class=&quot;item-block&quot; itemID=&quot;{{ i + 1 }}&quot;&amp;gt;&amp;lt;/item&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
  &amp;lt;div class=&quot;nav&quot;&amp;gt;
    &amp;lt;a href=&quot;&quot; class=&quot;prev&quot;&amp;gt;
      ‹ Prev
    &amp;lt;/a&amp;gt;
    &amp;lt;a href=&quot;&quot; class=&quot;more&quot;&amp;gt;
      More ›
    &amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;추가했던 Item Component들을 수정하겠습니다. 아래의 component에서 selector와 @Input 데코레이터를 눈여겨 봐주시기 바랍니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// item.component.ts

import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'item',
  templateUrl: './item.component.html',
  styleUrls: ['./item.component.scss']
})
export class ItemComponent implements OnInit {
  @Input() itemID: number;

  constructor() { }

  ngOnInit() {
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- item.component.html --&amp;gt;

&amp;lt;p&amp;gt;Story #{{itemID}}&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어플리케이션 재실행 시 위에서 추가한 @Input 데코레이터를 통해 ItemComponent에 itemID가 전달되며, 전달받은 itemID를 표기하고 있습니다.&lt;/p&gt;&lt;p&gt;지금까지 어플리케이션 기본 구조를 작업했으며, 작업한 소스에 대한 내용은 해당 &lt;a href=&quot;https://github.com/housseindjirdeh/angular2-hn/tree/initial-setup&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;에 있습니다.&lt;/p&gt;&lt;h2&gt;RxJS and Observables&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;실제 데이터를 가져오기전에 RxJs 및&amp;nbsp;observables 에 대해 알아보도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Angular의 &lt;a href=&quot;https://angular.io/guide/http&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Http client&lt;/a&gt;를 이용하면 원하는 위치에서 서버와 통신이 가능하며,&amp;nbsp;서버에서 데이터를 가져 오려면 가장 먼저 할 일은 &lt;b&gt;http.get&lt;/b&gt; 에 리소스 URL을 넘겨 호출해야합니다. 이때의 리턴값이 무엇일까요?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Angular에서는 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;RxJs&lt;/a&gt; 라이브러리를 사용하여&amp;nbsp;&lt;b&gt;Observable&lt;/b&gt; 또는 비동기 데이터 스트림을 반환합니다. 여러분들은 이미 Promise의 개념과 이를 이용하여 비동기를 처리하는 방식에 대해서는 잘 알고 있을 것입니다. Observables는 Promise처럼 데이터를 얻지 만, 데이터 스트림을 subscribe하고 특정 데이터 변경 내용에 응답 할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:512px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile26.uf.tistory.com%2Fimage%2F996F2E33598D3C2D06720B&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/996F2E33598D3C2D06&quot; filemime=&quot;image/jpeg&quot; filename=&quot;reactive_programming.png&quot; height=&quot;261&quot; width=&quot;512&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div&gt;위의 diagram은 사용자가 버튼을 클릭 할때 발생하는 이벤트에 대해 보여지고 있습니다. 스트림이 값을 전달하는 방법을 보면(클릭 이벤트를 뜻함) 완료된 이벤트뿐만 아니라 오류도 전달하고 있습니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이러한 방식의 어플리케이션에서 Observables를 사용하는 개념을 &lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Reactive Programming&lt;/a&gt;라고 합니다.&lt;/div&gt;&lt;h2&gt;Observable Data Service&lt;/h2&gt;&lt;div&gt;&lt;hr&gt;&lt;p&gt;이제 실제 데이터를 처리하기 위해 Observable Data Service를 만들어서 의존성 주입을 해보도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g service hackernews-api&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;생성된 서비스파일을 설정하기 전에&amp;nbsp;Hacker News API가 어떻게 작동하는지 확인해보도록 하겠습니다. 공식 &lt;a href=&quot;https://github.com/HackerNews/API&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;문서&lt;/a&gt;를 살펴보면 모든 항목 (투표, 댓글, 기사, 작업)은 id 값을&amp;nbsp;통해 구별 하고있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;// https://hacker-news.firebaseio.com/v0/item/2.json?print=pretty

{
  &quot;by&quot; : &quot;phyllis&quot;,
  &quot;descendants&quot; : 0,
  &quot;id&quot; : 2,
  &quot;kids&quot; : [ 454411 ],
  &quot;score&quot; : 16,
  &quot;time&quot; : 1160418628,
  &quot;title&quot; : &quot;A Student's Guide to Startups&quot;,
  &quot;type&quot; : &quot;story&quot;,
  &quot;url&quot; : &quot;https://www.paulgraham.com/mit.html&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;스토리 유형에 따라 다른 url(엔드포인트)에 접근해야합니다.&amp;nbsp;예를들어&amp;nbsp;상위 랭킹 뉴스는 아래와 같이 접근해서 조회할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;// https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty

[ 12426766, 12426315, 12424656, 12425725, 12426064, 12427341, 12425692, 12425776, 12425324, 12425750, 12425135, 12427073, 12425632, 12423733, 12425720, 12427135, 12425683, 12423794, 12424987, 12423809, 12424738, 12425119, 12426759, 12425711, 12422891, 12424731, 12423742, 12424131, 12424184, 12422833, 12424421, 12426729, 12423373, 12421687, 12427437 ...]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;따라서 첫 페이지에 상위랭킹 뉴스를 노출할려면 이 url를 페이지별로 순차적으로 접근해야합니다. 어플리케이션 전체적으로 이 서비스가 필요하기 때문에 app.module &lt;b&gt;NgModule&lt;/b&gt; 메타데이터 속의 &lt;b&gt;provider&lt;/b&gt;에&amp;nbsp;포함시키도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.module.ts

//...
import { HackerNewsAPIService } from './hackernews-api.service';

@NgModule({
  declarations: [
    ...
   ],
  imports: [
    ...
  ],
  providers: [HackerNewsAPIService],
  bootstrap: [AppComponent]
})
export class AppModule { }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 HackerNewsAPIService에 요청 메서드를 구현하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// hackernews-api.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

@Injectable()
export class HackerNewsAPIService {
  baseUrl: string;

  constructor(private http: HttpClient) {
    this.baseUrl = 'https://hacker-news.firebaseio.com/v0';
  }

  fetchStories(): Observable&lt;any&gt; {
    return this.http.get(`${this.baseUrl}/topstories.json`);
  }
}&lt;/any&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이전에서&amp;nbsp;언급한거와 같이&amp;nbsp;&lt;b&gt;http.get&lt;/b&gt;은 Observable이 리턴됩니다. &lt;b&gt;fetchStories&lt;/b&gt; 메서드를&amp;nbsp;보시면 Observable를 넘겨주고있습니다. component에서 이 Observable를 어떻게 처리하는지 보시겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// stories.component.ts

import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs/Observable';

import { HackerNewsAPIService } from '../hackernews-api.service';

@Component({
  selector: 'app-stories',
  templateUrl: './stories.component.html',
  styleUrls: ['./stories.component.scss']
})

export class StoriesComponent implements OnInit {
  items;

  constructor(private _hackerNewsAPIService: HackerNewsAPIService) {}

  ngOnInit() {
    this._hackerNewsAPIService.fetchStories()
                    .subscribe(
                      items =&amp;gt; this.items = items,
                      error =&amp;gt; console.log('Error fetching stories'));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Component가 초기화때 발생되는 이벤트인 &lt;b&gt;ngOnInit&lt;/b&gt;에 데이터 스트림을 &lt;b&gt;subscribe&lt;/b&gt;하고 해당 리턴값을 item 속성에 설정합니다. 뷰에서 설정해야하는 것은 &lt;b&gt;SlicePipe&lt;/b&gt;에 보여질 값이 500개가 아닌 30개씩만 노출되도록 수정하는 것 뿐입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- stories.component.html --&amp;gt;

&amp;lt;div class=&quot;main-content&quot;&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li *ngFor=&quot;let item of items | slice:0:30&quot; class=&quot;post&quot;&amp;gt;
      &amp;lt;item class=&quot;item-block&quot; itemID=&quot;{{ item }}&quot;&amp;gt;&amp;lt;/item&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 어플리케이션을 다시 실행하면 리스트 항목에 인기순으로 노출되는 ID목록이 보입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F9951B03359902172248493&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9951B0335990217224&quot; filemime=&quot;image/jpeg&quot; filename=&quot;ranking_ids.png&quot; height=&quot;666&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Item의 ID 항목을&amp;nbsp;Component에 전달하였으니 이번에는 Item의 상세 내용을&amp;nbsp;가져오는 Observable&amp;nbsp;subscription를 서비스에 작성하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// hackernews-api.service.ts

//...
  
fetchItem(id: number): Observable&lt;any&gt; {
  return this.http.get(`${this.baseUrl}/item/${id}.json`);
}&lt;/any&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 다음 Item Component view에 사용할 pipe들을 먼저 처리하고 수정하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;우리가 사용할 pipe는 크게 2가지입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;먼저 해커 뉴스의 시간 데이터는&amp;nbsp;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Unix&lt;/a&gt; format으로 넘어오기 때문에 사람이 이해 할 수 있는 형식으로 변환이 필요합니다. 이 튜토리얼에서는 &lt;a href=&quot;https://momentjs.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;moment.js&lt;/a&gt;의 구현체인 &lt;a href=&quot;https://github.com/urish/angular2-moment&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;angular2-moment&lt;/a&gt; 라이브러리를 사용합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;npm install --save angular2-moment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;angular2-moment를 npm으로 설치한 이후 app.module에 포함시켜줍니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;import { MomentModule } from 'angular2-moment';

@NgModule({
  imports: [
    MomentModule
  ]
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;모듈을 불러오고 나면 우리는&amp;nbsp;&lt;b&gt;amFromUnix&lt;/b&gt;와&amp;nbsp;&lt;b&gt;amTimeAgo&lt;/b&gt; pipe를 사용 할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;두번째로 처리할 pipe는 링크가 있는 항목을 도메인만 표시해주기 위해 domain이라는 pipe를 사용할 예정입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng generate pipe domain&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'domain'
})
export class DomainPipe implements PipeTransform {

  transform(url: any, args?: any): any {
    if (url) {
      const domain = '(' + url.split('/')[2] + ')';
      return domain ? domain.replace('www.', '') : '';
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pipe 처리가 추가가 완료되면 item component를 약간 수정하도록 하겠습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// item.component.ts

import { Component, Input, OnInit } from '@angular/core';

import { HackerNewsAPIService } from '../hackernews-api.service';

@Component({
  selector: 'item',
  templateUrl: './item.component.html',
  styleUrls: ['./item.component.scss']
})
export class ItemComponent implements OnInit {
  @Input() itemID: number;
  item;

  constructor(private _hackerNewsAPIService: HackerNewsAPIService) {}

  ngOnInit() {
    this._hackerNewsAPIService.fetchItem(this.itemID).subscribe(data =&amp;gt; {
      this.item = data;
    }, error =&amp;gt; console.log('Could not load item' + this.itemID));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- item.component.html --&amp;gt;

&amp;lt;div *ngIf=&quot;!item&quot; class=&quot;loading-section&quot;&amp;gt;
  &amp;lt;!-- You can add a loading indicator here if you want to :) &amp;lt;/i&amp;gt; --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div *ngIf=&quot;item&quot;&amp;gt;
  &amp;lt;div class=&quot;item-laptop&quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;a class=&quot;title&quot; href=&quot;{{item.url}}&quot;&amp;gt;
        {{item.title}}
      &amp;lt;/a&amp;gt;
      &amp;lt;span class=&quot;domain&quot;&amp;gt;{{item.url | domain}}&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;div class=&quot;subtext-laptop&quot;&amp;gt;
      {{item.score}} points by
      &amp;lt;a href=&quot;&quot;&amp;gt;{{item.by}}&amp;lt;/a&amp;gt;
      {{ (item.time | amFromUnix) | amTimeAgo }}
      &amp;lt;a href=&quot;&quot;&amp;gt;
        &amp;lt;span *ngIf=&quot;item.descendants !== 0&quot;&amp;gt;
          {{item.descendants}}
          &amp;lt;span *ngIf=&quot;item.descendants === 1&quot;&amp;gt;comment&amp;lt;/span&amp;gt;
          &amp;lt;span *ngIf=&quot;item.descendants &amp;gt; 1&quot;&amp;gt;comments&amp;lt;/span&amp;gt;
        &amp;lt;/span&amp;gt;
        &amp;lt;span *ngIf=&quot;item.descendants === 0&quot;&amp;gt;discuss&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;item-mobile&quot;&amp;gt;
    &amp;lt;!-- Markup that shows only on mobile (to give the app a
    responsive mobile feel). Same attributes as above
    nothing really new here (but refer to the source
    file if you're interested) --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;scss&quot;&gt;/* item.component.scss */

$mobile-only: &quot;only screen and (max-width : 768px)&quot;;
$laptop-only: &quot;only screen and (min-width : 769px)&quot;;

p {
  margin: 2px 0;

  @media #{$mobile-only} {
    margin-bottom: 5px;
    margin-top: 0;
  }
}

a {
  color: #000;
  cursor: pointer;
  text-decoration: none;
}

.title {
  font-size: 16px;
}

.subtext-laptop {
  font-size: 12px;
  color: #696969;
  font-weight: bold;
  letter-spacing: 0.5px;

  a {
    color: #b92b27;

    &amp;amp;:hover {
      text-decoration: underline;
    };
  }
}

.subtext-palm {
  font-size: 13px;
  color: #696969;
  font-weight: bold;
  letter-spacing: 0.5px;

  a {
    color: #b92b27;

    &amp;amp;:hover {
      text-decoration: underline;
    };
  }

  .details {
    margin-top: 5px;

    .right {
      float: right;
    }
  }
}

.domain {
  color: #696969;
  font-weight: bold;
  letter-spacing: 0.5px;
}

.item-laptop {
  @media #{$mobile-only} {
    display: none;
  }
}

.item-mobile {
  @media #{$laptop-only} {
    display: none;
  }
}

.item-details {
  padding: 10px;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 어플리케이션을 실행하면 해커 뉴스 첫 페이지가 나타납니다. 지금까지 작업된 내용을 보실려면 해당 &lt;a href=&quot;https://github.com/tienne/angular2-hn/tree/first-page&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;에서 확인해 주시기 바랍니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile9.uf.tistory.com%2Fimage%2F99DCFF3359902CEC265D14&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99DCFF3359902CEC26&quot; filemime=&quot;image/jpeg&quot; filename=&quot;items_subscript.png&quot; height=&quot;661&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Things are kinda slow though&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;어플리케이션 로드시 요청 데이터들을 한번 살펴보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:758px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile24.uf.tistory.com%2Fimage%2F99292E3359902DA233CB63&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99292E3359902DA233&quot; filemime=&quot;image/jpeg&quot; filename=&quot;items_network.png&quot; height=&quot;761&quot; width=&quot;758&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;31 개 요청 및 20.8KB 전송 546ms 요청 횟수가 너무 많으며, 첫 페이지 불러오는 시간의&amp;nbsp;5배가 소요됩니다. 단일 게시물을 확인할때 댓글이 많다면 심각한 문제가 될수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;2000개의 코멘트가 있는 글을 불러올때 어떤일이 발생하는지 해당 &lt;a href=&quot;https://media.giphy.com/media/3o6Zt9ZBEDjwiPDjz2/giphy.gif&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;를 누르면 gif파일로 확인이 가능합니다.(&lt;b&gt;약 1.5MB의&amp;nbsp;&lt;/b&gt;&lt;b&gt;741건 요청이 &lt;/b&gt;&lt;b&gt;90초 정도 걸립니다.&lt;/b&gt;) 저러면 실제 사용 서비스는 불가능해보입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;참고용으로 github에 이 버전의 어플리케이션을 가지고 있습니다. 해당 &lt;a href=&quot;https://houssein.me/angular2-hn/item/12445994&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;에서 코멘트가 불러와지는 시간을 직접 확인 가능합니다.&lt;/p&gt;&lt;h2&gt;Let’s switch things up&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;우리는 이제 여러번의 요청을 통해 데이터를 가져오는게 좋지 않다는걸 경험하였습니다. 조금 찾아본 결과 단일 요청으로 세부정보까지 제공해주는 &lt;a href=&quot;https://github.com/cheeaun/node-hnapi&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;비공식 API&lt;/a&gt;가 있다는걸 알아냈습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;예를들어 상위랭킹 뉴스 목록의 응답은 아래와 같습니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;js&quot;&gt;// https://node-hnapi.herokuapp.com/news?page=1

[
  {
    &quot;id&quot;: 12469856,
    &quot;title&quot;: &quot;Owl Lisp – A purely functional Scheme that compiles to C&quot;,
    &quot;points&quot;: 57,
    &quot;user&quot;: &quot;rcarmo&quot;,
    &quot;time&quot;: 1473524669,
    &quot;time_ago&quot;: &quot;2 hours ago&quot;,
    &quot;comments_count&quot;: 9,
    &quot;type&quot;: &quot;link&quot;,
    &quot;url&quot;: &quot;https://github.com/aoh/owl-lisp&quot;,
    &quot;domain&quot;: &quot;github.com&quot;
  },
  {
    &quot;id&quot;: 12469823,
    &quot;title&quot;: &quot;How to Write Articles and Essays Quickly and Expertly&quot;,
    &quot;points&quot;: 52,
    &quot;user&quot;: &quot;bemmu&quot;,
    &quot;time&quot;: 1473524142,
    &quot;time_ago&quot;: &quot;2 hours ago&quot;,
    &quot;comments_count&quot;: 6,
    &quot;type&quot;: &quot;link&quot;,
    &quot;url&quot;: &quot;https://www.downes.ca/post/38526&quot;,
    &quot;domain&quot;: &quot;downes.ca&quot;
  },
  ...
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;응답데이터를 보면 &lt;b&gt;domain&lt;/b&gt;&amp;nbsp;항목이 따로 있을뿐만 아니라&amp;nbsp;&lt;b&gt;time_ago&lt;/b&gt; 같은 속성도 있습니다. 멋지네요 앞에서 만든 &lt;b&gt;domain.pipe.ts&lt;/b&gt;와 &lt;b&gt;angular2-moment&lt;/b&gt; 라이브러리를 제거해도 문제 없을 것 같습니다. HackerNewService에서 변경해야할 사항을 살펴보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// hackernews-api.service.ts

@Injectable()
export class HackerNewsAPIService {
  baseUrl: string;

  constructor(private http: HttpClient) {
    this.baseUrl = 'https://node-hnapi.herokuapp.com';
  }

  fetchStories(storyType: string, page: number): Observable&lt;any&gt; {
    return this.http.get(`${this.baseUrl}/${storyType}?page=${page}`);
  }
}&lt;/any&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;데이터 응답시 500개의 최상위 뉴스들이 조회가 되지 않기때문에 페이지 번호가 추가적으로 필요합니다. &lt;b&gt;storyType&lt;/b&gt;를 end-point(url)에 넘기고 있어 사용자가 이동하는 주제에 맞춰 해당 주제의 뉴스를 노출 할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이번에는 stories component에 변경사항을 살펴보겠습니다. 최상위 뉴스를 얻기 위해 'news' 값과 페이지 값에 1를 넘겨 조회하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// stories.component.ts

export class StoriesComponent implements OnInit {
  items;

  constructor(private _hackerNewsAPIService: HackerNewsAPIService) {}

  ngOnInit() {
    this._hackerNewsAPIService.fetchStories('news', 1)
                              .subscribe(
                                items =&amp;gt; this.items = items,
                                error =&amp;gt; console.log('Error fetching stories'));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template 파일은 아래처럼 변경합니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- stories.component.html --&amp;gt;

&amp;lt;div class=&quot;loading-section&quot; *ngIf=&quot;!items&quot;&amp;gt;
  &amp;lt;!-- You can add a loading indicator here if you want to :) --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div *ngIf=&quot;items&quot;&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li *ngFor=&quot;let item of items&quot; class=&quot;post&quot;&amp;gt;
      &amp;lt;item class=&quot;item-block&quot; [item]=&quot;item&quot;&amp;gt;&amp;lt;/item&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
  &amp;lt;div class=&quot;nav&quot;&amp;gt;
    &amp;lt;a class=&quot;prev&quot;&amp;gt;
      ‹ Prev
    &amp;lt;/a&amp;gt;
    &amp;lt;a class=&quot;more&quot;&amp;gt;
      More ›
    &amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;더 이상 item component에서 비동기로 개별적으로 데이터를 불러오지 않고 stories component에 로딩 표시용 section을 추가합니다. 그리고 item의 데이터를 자식 component에 전달만 하면 됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;즉&amp;nbsp;&lt;b&gt;item.component.ts&lt;/b&gt;에 더 이상 &lt;b&gt;HackerNewsService&lt;/b&gt;가 필요 없어지고 부모로부터 Item 객체를 가져오기 때문에 &lt;b&gt;ItemComponent&lt;/b&gt;는 깨끗해집니다.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// item.component.ts

export class ItemComponent implements OnInit {
  @Input() item;

  constructor() {}

  ngOnInit() {

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;item.component.html&lt;/b&gt;은 크게 변경사항이 없지만 item 객체가 있는지 확인하는 *ngif구문을 없애도 되며(부모에서 해당 처리를 수행함),&amp;nbsp;또한 각 매개변수들은 새로운 API&amp;nbsp;데이터의 속성을 참고합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- item.component.html --&amp;gt;

&amp;lt;div class=&quot;item-laptop&quot;&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;a class=&quot;title&quot; href=&quot;&quot;&amp;gt;
      {{item.title}}
    &amp;lt;/a&amp;gt;
    &amp;lt;span *ngIf=&quot;item.domain&quot; class=&quot;domain&quot;&amp;gt;({{item.domain}})&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;div class=&quot;subtext-laptop&quot;&amp;gt;
    &amp;lt;span&amp;gt;
      {{item.points}} points by
      &amp;lt;a href=&quot;&quot;&amp;gt;{{item.user}}&amp;lt;/a&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
      {{item.time_ago}}
      &amp;lt;span&amp;gt; |
        &amp;lt;a href=&quot;&quot;&amp;gt;
          &amp;lt;span *ngIf=&quot;item.comments_count !== 0&quot;&amp;gt;
            {{item.comments_count}}
            &amp;lt;span *ngIf=&quot;item.comments_count === 1&quot;&amp;gt;comment&amp;lt;/span&amp;gt;
            &amp;lt;span *ngIf=&quot;item.comments_count &amp;gt; 1&quot;&amp;gt;comments&amp;lt;/span&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span *ngIf=&quot;item.comments_count === 0&quot;&amp;gt;discuss&amp;lt;/span&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;item-mobile&quot;&amp;gt;
  &amp;lt;!-- Markup that shows only on mobile (to give the app a
    responsive mobile feel). Same attributes as above
    nothing really new here (but refer to the source
    file if you're interested) --&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 변경된 소스를 어플리케이션 실행하여 확인해 보자&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F99AE893359903D300B3264&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99AE893359903D300B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;unoffice.png&quot; height=&quot;661&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 훨씬 빠르게 로드되는걸 확인 할 수 있습니다. 지금까지의 단계의 소스는 해당 &lt;a href=&quot;https://github.com/tienne/angular2-hn/tree/first-page-final&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;링크&lt;/a&gt;에서 확인 가능합니다.&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;Routing&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;우리는 꽤 먼 길을 걸어왔지만, 계속하기전에&amp;nbsp;어플리케이션의 전체 component 구조를&amp;nbsp;그려보도록 하겠습니다. 제 부족한 파워포인트 실력은 양해부탁드립니다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F990A0233599042CB0EF44C&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/990A0233599042CB0E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;structure_of_application.png&quot; height=&quot;662&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;또한 comment가 표시되는 페이지 component의 구조도 살펴보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile24.uf.tistory.com%2Fimage%2F994B2B33599043263405BB&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/994B2B335990432634&quot; filemime=&quot;image/jpeg&quot; filename=&quot;comment_map.png&quot; height=&quot;647&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사용자가 이러한 페이지를 접근 할&amp;nbsp;수 있도록 하려면 애플리케이션에 routing을 포함시켜야 합니다. routi ng 생성하기 이전에 ItemComments component를 생성하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g component ItemComments&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 다음&amp;nbsp;&lt;b&gt;app.routes.ts&lt;/b&gt; 파일을 &lt;b&gt;src/app&lt;/b&gt; 폴더안에 생성합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.routes.ts

import { Routes, RouterModule } from '@angular/router';

import { StoriesComponent } from './stories/stories.component';
import { ItemCommentsComponent } from './item-comments/item-comments.component';

const routes: Routes = [
  {path: '', redirectTo: 'news/1', pathMatch : 'full'},
  {path: 'news/:page', component: StoriesComponent, data: {storiesType: 'news'}},
  {path: 'newest/:page', component: StoriesComponent, data: {storiesType: 'newest'}},
  {path: 'show/:page', component: StoriesComponent, data: {storiesType: 'show'}},
  {path: 'ask/:page', component: StoriesComponent, data: {storiesType: 'ask'}},
  {path: 'jobs/:page', component: StoriesComponent, data: {storiesType: 'jobs'}},
  {path: 'item/:id', component: ItemCommentsComponent}
];

export const routing = RouterModule.forRoot(routes);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;앞으로 우리가 진행할 작업에 대한 개요입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li&gt;우리는 상대경로를 가진 특정 Component에 맵핑된 route의 배열을 생성했습니다.&lt;/li&gt;&lt;li&gt;&lt;b&gt;news&lt;/b&gt;, &lt;b&gt;newest&lt;/b&gt;, &lt;b&gt;show&lt;/b&gt;, &lt;b&gt;ask&lt;/b&gt; 그리고&amp;nbsp;&lt;b&gt;jobs&lt;/b&gt;등의 다양한 메뉴들을&amp;nbsp;상단 링크에 라우팅 할 예정이며 이러한 경로들은&amp;nbsp;&lt;b&gt;StoriesComponent&lt;/b&gt;에 맵핑됩니다.&lt;/li&gt;&lt;li&gt;기본 root 경로를 최상위 &lt;b&gt;news&lt;/b&gt;&amp;nbsp;목록으로 리다이렉트되도록 처리하였습니다.&lt;/li&gt;&lt;li&gt;&lt;b&gt;StorietComponent&lt;/b&gt;에 연결할때 &lt;b&gt;data&lt;/b&gt;&amp;nbsp;속성을 통해 &lt;b&gt;storiesType&lt;/b&gt;를 매개 변수로 전달합니다. 이를 통해 각 경로에 관련된 뉴스&amp;nbsp;유형을 가질 수 있습니다(데이터 서비스를 사용하여 뉴스&amp;nbsp;목록을 가져올 때 필요함).&lt;/li&gt;&lt;li&gt;&lt;b&gt;: page&lt;/b&gt;가 토큰으로 사용되어 &lt;b&gt;StoriesComponent&lt;/b&gt;가 특정 페이지의 뉴스&amp;nbsp;목록을 가져올 수 있습니다.&lt;/li&gt;&lt;li&gt;: id는 I&lt;b&gt;temCommentsComponent&lt;/b&gt;가 특정 item에 대한 모든 comment를&amp;nbsp;얻을 수 있도록 사용됩니다.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;라우팅으로 할 수 있는 일은 훨씬 많지만, 우리에게 필요한건 이러한 기본설정뿐입니다. 이제&amp;nbsp;&lt;b&gt;app.module.ts&lt;/b&gt;를 열어 라우팅을 등록해보겠습니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// app.module.ts

// ...
import { routing } from './app.routes';

@NgModule({
  declarations: [
    //...
  ],
  imports: [
    //...
    routing
  ],
  providers: [HackerNewsAPIService],
  bootstrap: [AppComponent]
})
export class AppModule { }&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Angular에서 route에서 Component를 불러오게 알려주기 위해선 &lt;b&gt;RouterOutlet&lt;/b&gt;를 사용해야 합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- app.component.html --&amp;gt;

&amp;lt;div id=&quot;wrapper&quot;&amp;gt;
  &amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;
  &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
  &amp;lt;app-footer&amp;gt;&amp;lt;/app-footer&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Story Navigation&lt;/h2&gt;&lt;div&gt;&lt;hr&gt;&lt;p&gt; &lt;b&gt;HeaderComponent&lt;/b&gt;에 링크에 해당하는 경로로 바인딩 하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- header.component.html --&amp;gt;

&amp;lt;header&amp;gt;
  &amp;lt;div id=&quot;header&quot;&amp;gt;
    &amp;lt;a class=&quot;home-link&quot; routerLink=&quot;/news/1&quot;&amp;gt;
      &amp;lt;img class=&quot;logo&quot; src=&quot;https://i.imgur.com/J303pQ4.png&quot;&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;div class=&quot;header-text&quot;&amp;gt;
      &amp;lt;div class=&quot;left&quot;&amp;gt;
        &amp;lt;h1 class=&quot;name&quot;&amp;gt;
          &amp;lt;a routerLink=&quot;/news/1&quot; class=&quot;app-title&quot;&amp;gt;Angular 2 HN&amp;lt;/a&amp;gt;
        &amp;lt;/h1&amp;gt;
        &amp;lt;span class=&quot;header-nav&quot;&amp;gt;
          &amp;lt;a routerLink=&quot;/newest/1&quot;&amp;gt;new&amp;lt;/a&amp;gt;
          &amp;lt;span class=&quot;divider&quot;&amp;gt;
            |
          &amp;lt;/span&amp;gt;
          &amp;lt;a routerLink=&quot;/show/1&quot;&amp;gt;show&amp;lt;/a&amp;gt;
          &amp;lt;span class=&quot;divider&quot;&amp;gt;
            |
          &amp;lt;/span&amp;gt;
          &amp;lt;a routerLink=&quot;/ask/1&quot;&amp;gt;ask&amp;lt;/a&amp;gt;
          &amp;lt;span class=&quot;divider&quot;&amp;gt;
            |
          &amp;lt;/span&amp;gt;
          &amp;lt;a routerLink=&quot;/jobs/1&quot;&amp;gt;jobs&amp;lt;/a&amp;gt;
        &amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;info&quot;&amp;gt;
        Built with &amp;lt;a href=&quot;https://cli.angular.io/&quot; target=&quot;_blank&quot;&amp;gt;Angular CLI&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;RouterLink&lt;/b&gt;&amp;nbsp;directive는&amp;nbsp;특정 element에&amp;nbsp;경로를&amp;nbsp;바인딩합니다. 이제 &lt;b&gt;StoriesComponent&lt;/b&gt;를 업데이트합시다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// stories.component.ts

import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { ActivatedRoute } from '@angular/router';

import { HackerNewsAPIService } from '../hackernews-api.service';

@Component({
  selector: 'app-stories',
  templateUrl: './stories.component.html',
  styleUrls: ['./stories.component.scss']
})

export class StoriesComponent implements OnInit {
  typeSub: any;
  pageSub: any;
  items;
  storiesType;
  pageNum: number;
  listStart: number;

  constructor(
    private _hackerNewsAPIService: HackerNewsAPIService,
    private route: ActivatedRoute
  ) {}

  ngOnInit() {
    this.typeSub = this.route
      .data
      .subscribe(data =&amp;gt; this.storiesType = (data as any).storiesType);

    this.pageSub = this.route.params.subscribe(params =&amp;gt; {
      this.pageNum = +params['page'] ? +params['page'] : 1;
      this._hackerNewsAPIService.fetchStories(this.storiesType, this.pageNum)
                              .subscribe(
                                items =&amp;gt; this.items = items,
                                error =&amp;gt; console.log('Error fetching' + this.storiesType + 'stories'),
                                () =&amp;gt; this.listStart = ((this.pageNum - 1) * 30) + 1);
    });
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우리가 추가한 내용을 살펴보겠습니다. 먼저 현재 route 정보를 접근할 수 있는 &lt;b&gt;ActivatedRoute&lt;/b&gt; 서비스를 의존성에 추가하였습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;import { ActivatedRoute } from '@angular/router';

@Component({
  //...
})

export class StoriesComponent implements OnInit {
//..

constructor(
  private route: ActivatedRoute
) {}
//...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;ngOnInit&lt;/b&gt;에서 &amp;nbsp;route의 data 속성에서 &lt;b&gt;storiesType&lt;/b&gt;을 component 속성에 저장합니다. Component의 storiesType 속성으로 설정시 any type으로 방법을 주목하시기 바랍니다. 이렇게하면 타입검사에 벗어나는 간단한 방법이며, 그렇지 않으면 data에 &lt;b&gt;storiesType&lt;/b&gt; 속성이 없다고 에러가 발생될 수도 있습니다.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;ngOnInit() {
  this.typeSub = this.route
    .data
    .subscribe(data =&amp;gt; this.storiesType = (data as any).storiesType);

// ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;마지막으로 route 매개변수를&amp;nbsp;subscribe하여 페이지 번호를 가져옵니다.&amp;nbsp;그런 다음 데이터 서비스를 사용하여 뉴스&amp;nbsp;목록을 가져옵니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;ngOnInit() {
  // ...

  this.pageSub = this.route.params.subscribe(params =&amp;gt; {
    this.pageNum = +params['page'] ? +params['page'] : 1;
      this._hackerNewsAPIService.fetchStories(this.storiesType, this.pageNum)
        .subscribe(
          items =&amp;gt; this.items = items,
          error =&amp;gt; console.log('Error fetching' + this.storiesType + 'stories'),
          () =&amp;gt; {
            this.listStart = ((this.pageNum - 1) * 30) + 1;
            window.scrollTo(0, 0);
          });
    });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;완료 처리를&amp;nbsp;위해 우리는 &lt;b&gt;onCompleted&lt;/b&gt;(subscribe 3번째 파라미터)를 사용하여 목록의&amp;nbsp;첫번째&amp;nbsp;값을 나타내는&amp;nbsp;&lt;b&gt;listStart&lt;/b&gt; 변수를 업데이트하고(아래의 stories.component.html 에서 확인 가능) 사용자가 페이지를 전환하려고 할 때 페이지 맨 아래에 멈추지 않도록 창 위쪽으로 스크롤합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- stories.component.html --&amp;gt;

&amp;lt;div class=&quot;main-content&quot;&amp;gt;
  &amp;lt;div class=&quot;loading-section&quot; *ngIf=&quot;!items&quot;&amp;gt;
    &amp;lt;!-- You can add a loading indicator here if you want to :) --&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div *ngIf=&quot;items&quot;&amp;gt;
    &amp;lt;ol start=&quot;{{ listStart }}&quot;&amp;gt;
      &amp;lt;li *ngFor=&quot;let item of items&quot; class=&quot;post&quot;&amp;gt;
        &amp;lt;item class=&quot;item-block&quot; [item]=&quot;item&quot;&amp;gt;&amp;lt;/item&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ol&amp;gt;
    &amp;lt;div class=&quot;nav&quot;&amp;gt;
      &amp;lt;a *ngIf=&quot;listStart !== 1&quot; [routerLink]=&quot;['/' + storiesType, pageNum - 1]&quot; class=&quot;prev&quot;&amp;gt;
        ‹ Prev
      &amp;lt;/a&amp;gt;
      &amp;lt;a *ngIf=&quot;items.length === 30&quot; [routerLink]=&quot;['/' + storiesType, pageNum + 1]&quot; class=&quot;more&quot;&amp;gt;
        More ›
      &amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기까지 목록의 상단 &lt;a href=&quot;https://media.giphy.com/media/l3vR4zR3rCMX76Pm0/giphy.gif&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;네비게이션&lt;/a&gt;&lt;a href=&quot;https://media.giphy.com/media/l3vR4zR3rCMX76Pm0/giphy.gif&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;nbsp;및 페이징&lt;/a&gt;&amp;nbsp;처리까지 완료하였습니다. 어플리케이션을 실행하여 변경된 페이지를 확인해보시기 바랍니다.&lt;/p&gt;&lt;h2&gt;Item Comments&lt;/h2&gt;&lt;div&gt;&lt;hr&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;거의 다 끝났습니다. comment 페이지의 Component들을&amp;nbsp;추가하기 전에 &lt;b&gt;ItemComponent&lt;/b&gt;의 링크를 업데이트하여 라우팅에&amp;nbsp;포함시켜 보겠습니다.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

&lt;pre class=&quot;&quot; code=&quot;&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- item.component.html --&amp;gt;

&amp;lt;div class=&quot;item-laptop&quot;&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;a class=&quot;title&quot; href=&quot;{{item.url}}&quot;&amp;gt;
      {{item.title}}
    &amp;lt;/a&amp;gt;
    &amp;lt;span *ngIf=&quot;item.domain&quot; class=&quot;domain&quot;&amp;gt;({{item.domain}})&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;div class=&quot;subtext-laptop&quot;&amp;gt;
    &amp;lt;span&amp;gt;
      {{item.points}} points by
      &amp;lt;a href=&quot;&quot;&amp;gt;{{item.user}}&amp;lt;/a&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;
      {{item.time_ago}}
      &amp;lt;span&amp;gt; |
         &amp;lt;a [routerLink]=&quot;['/item', item.id]&quot;&amp;gt;
          &amp;lt;span *ngIf=&quot;item.comments_count !== 0&quot;&amp;gt;
            {{item.comments_count}}
            &amp;lt;span *ngIf=&quot;item.comments_count === 1&quot;&amp;gt;comment&amp;lt;/span&amp;gt;
            &amp;lt;span *ngIf=&quot;item.comments_count &amp;gt; 1&quot;&amp;gt;comments&amp;lt;/span&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span *ngIf=&quot;item.comments_count === 0&quot;&amp;gt;discuss&amp;lt;/span&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;item-mobile&quot;&amp;gt;
  &amp;lt;!-- Markup that shows only on mobile (to give the app a
    responsive mobile feel). Same attributes as above,  
    nothing really new here (but refer to the source
    file if you're interested) --&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;어플리케이션을 실행하고 뉴스 항목의 comment 부분을 클릭하여 주시기 바랍니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile5.uf.tistory.com%2Fimage%2F993253335992A1EC0FA61E&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/993253335992A1EC0F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;item_comments_init.png&quot; height=&quot;151&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;멋집니다. 우리는 &lt;b&gt;ItemCommentsComponent&lt;/b&gt;로 라우팅이 되었음을 확인 할 수 있습니다. 이제 나머지 component들도 추가해 보겠습니다.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g component CommentTree&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;bash&quot;&gt;ng g component Comment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우리는 hackernews.api 서비스에 새로운 GET 요청을 추가하여 comment를&amp;nbsp;가져와야 합니다.&amp;nbsp;component를 수정하기전에 먼저&amp;nbsp;살펴보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// hackernews.api.service.ts

//...

fetchComments(id: number): Observable&lt;any&gt; {
  return this.http.get(`${this.baseUrl}/item/${id}`);
}&lt;/any&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;item-comments.component도 수정하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;typescript&quot;&gt;// item-comments.component.ts

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

import { HackerNewsAPIService } from '../hackernews-api.service';

@Component({
  selector: 'app-item-comments',
  templateUrl: './item-comments.component.html',
  styleUrls: ['./item-comments.component.scss']
})
export class ItemCommentsComponent implements OnInit {
  sub: any;
  item;

  constructor(
    private _hackerNewsAPIService: HackerNewsAPIService,
    private route: ActivatedRoute
  ) {}

  ngOnInit() {    
    this.sub = this.route.params.subscribe(params =&amp;gt; {
      const itemID = +params['id'];
      this._hackerNewsAPIService.fetchComments(itemID).subscribe(data =&amp;gt; {
        this.item = data;
      }, error =&amp;gt; console.log('Could not load item' + itemID));
    });
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;StoriesComponent&lt;/b&gt;에서 처리했던거와 비슷하게 라우트&amp;nbsp;매개변수를 subscribe하여 itemID를 확인 후 해당 뉴스의 comment들을 조회합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- item-comments.component.html --&amp;gt;

&amp;lt;div class=&quot;main-content&quot;&amp;gt;
  &amp;lt;div class=&quot;loading-section&quot; *ngIf=&quot;!item&quot;&amp;gt;
    &amp;lt;!-- You can add a loading indicator here if you want to :) --&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div *ngIf=&quot;item&quot; class=&quot;item&quot;&amp;gt;
    &amp;lt;div class=&quot;mobile item-header&quot;&amp;gt;
     &amp;lt;!-- Markup that shows only on mobile (to give the app a
    responsive mobile feel). Same attributes as below,
    nothing really new here (but refer to the source
    file if you're interested) --&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;laptop&quot; [class.item-header]=&quot;item.comments_count &amp;gt; 0 || item.type === 'job'&quot; [class.head-margin]=&quot;item.text&quot;&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;a class=&quot;title&quot; href=&quot;{{item.url}}&quot;&amp;gt;
        {{item.title}}
        &amp;lt;/a&amp;gt;
        &amp;lt;span *ngIf=&quot;it