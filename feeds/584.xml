<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>길은 가면, 뒤에 있다.</title>
<link>https://12bme.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 13:06:33 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>12bme</managingEditor>
<item>
<title>[대용량데이터] 대용량 처리 컨셉 오버뷰</title>
<link>https://12bme.tistory.com/451</link>
<description>&lt;p&gt;예전에는 여러대의 장비에서 데이터 필터링/서칭 등이 필요하면, 큰 하나의 파일을 n개로 나눠서 n개의 장비에 두고, 각 장비별로 filter/grep/join 등의 작업을 수행하는 방식이였다. (데이터가 있는 장비에서 필요한 작업은 데이터있는 장비에서 수행)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이런 경우. 장비에 장애가 났을때 원상태로 복원하는데까지 시간이 오래걸릴 수 밖에 없었다. 데이터 복사, 작업을 위한 데이터 정제. (MTTR 시간 지연)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;현재는 계산 노드가 데이터를 갖고있는것이 아니라 각 노드가 무슨일을 하고 있는지 일을하는데 필요한 데이터를 그때그때 fetch하는 방식이다. 따라서 장애가 나더라도 장애난 노드의 역할을 다른 노드의 위임하는 방식으로 MTTR에 대한 이슈를 해결했다. 이를 내결함성(fault-tolerance)라고 말한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;대용량데이터 오픈소스환경에서 데이터 처리를 한다는 말은 즉슨, 데이터를 어떻게 key/value로 만들거고 만들어진 key/value를 가지고, 어떻게 원하는 최종의 데이터 결과(key, value 형태)를 만들어낼 것인가에 대한 문제이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;맵리듀스의 컨셉을 이해하면 데이터처리 중 계산 프로세스의&amp;nbsp;간명한 이해에&amp;nbsp;도달할수 있다. &quot;1. 맵은 key/value의 집합이며, 그 출력은 key/value의 리스팅 형태가 될것이다.&quot; &quot;2. 리듀스는 같은 key를 가지고있는 애들을 하나로 묶어주는 역할을 한다&quot;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하둡의 전체구성을 살펴보면, &quot;저장인프라(Hadoop Components: NameNode, DataNode) / 분산환경 계산수행(mapReduce Components: JobTracker/TaskTracker)&quot; 두부분으로 나눌수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;map/reduce에 각각 입력/출력을 어떻게 가져갈지에 대한 부분에 대한 고민은 개발자의 몫이다. 가볍게보면, 개발자가 개발을 할때는 분산의 개념은 캡슐화되버린다. &lt;span style=&quot;color: rgb(152, 0, 0);&quot;&gt;&lt;b&gt;데이터를 어떻게 가져오고, 어떻게 처리해야하는지(e.g. 쿼리로 데이터 fetch: hive / parquet 데이터 활용) 가 심도있는&amp;nbsp;고민의 영역이&amp;nbsp;될수 있다.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;map-side join? reduce-side join?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[HDFS 컴포넌트 : 분산데이터 저장 컴포넌트]&lt;/p&gt;&lt;p&gt;Name node: HDFS의 모든 메타데이터를 관리(전역 네임스페이스)&lt;/p&gt;&lt;p&gt;Data node: 실제 블록이 저장되는&amp;nbsp;노드(주기적으로 네임노드에게 heartbeat와 block reporting을 보냄)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[MapReduce 컴포넌트 : 계산 컴포넌트]&lt;/p&gt;&lt;p&gt;Job tracker: Hadoop에 등록된 job 스케줄링을 관리하고 모니터링&lt;/p&gt;&lt;p&gt;Task tracker: Job tracker에서 작업을 요청받아 map task, reduce task를 진행. Job tracker에게 작업의 수행상태를 알림.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;작업은 여러개의 task로 이루어져 있다. 예로 들면 WordCount를 한다면 수행되어야 할 작업에는 Map Task/Reduce Task 등이 있을 수 있다. MapTask는 다시 토큰라이징하는 작업 입력이 1TB면, 여러 노드에서 도는 것이 당연히 속도가 빠르기때문에&amp;nbsp;여러 작업 관리가 필요하게 된다. 버전1에서는 이러한 모든 작업을 jobTracker에서 했으나 1000단위 이상의 클러스터 규모에서는 JobTracker를 스케일링하는 것만으로는 문제해결이 쉽지 않아 신규컨셉이 도출된 것이다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;jobTracker가 하던 Task 관리를 AM에게 위임하였고, 이때. AM은 사용자 혹은 클러스터 운영자가 관리하는게 아니라 작업 자체가 하나의 컨테이너의 task로 수행이 된다. 해서, 각각의 task들은 작업상황을 jobTracker에게 알렸지만, 지금은 각자의 job담당하는 AM에게 알리게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[InputFormat: 입력파일의&amp;nbsp;분할이나 읽는 방식]&lt;/p&gt;&lt;p&gt;TextInputFormat(reads lines of text files)&lt;/p&gt;&lt;p&gt;KeyValueTextInputFormat(Parses lines into key,val pairs)&lt;/p&gt;&lt;p&gt;SequenceFileInputFormat(A Hadoop-specific high-performance binary foramt)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[OutputFormat: 작업의 결과.&amp;nbsp;출력을 어떻게 보관할지를 정의]&lt;/p&gt;&lt;p&gt;TextOutputForamt(Writes &quot;key val\n&quot; strings to output file)&lt;/p&gt;&lt;p&gt;SequenceFileOutputFormat(Uses a binary format to pack (k, v) pairs)&lt;/p&gt;&lt;p&gt;MultipleTextOutputFormat(하나의 Task에서 여러개의 파일 출력)&lt;/p&gt;&lt;p&gt;NullOutputFormat(Discards output)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>빅데이터</category>
<author>12bme</author>
<guid>https://12bme.tistory.com/451</guid>
<comments>https://12bme.tistory.com/451#entry451comment</comments>
<pubDate>Sun, 13 Jan 2019 19:24:26 +0900</pubDate>
</item>
<item>
<title>[개발용어] 가용성</title>
<link>https://12bme.tistory.com/450</link>
<description>&lt;p&gt;서버와 네트워크, 프로그램 등의 정보 시스템이 정상적으로 사용가능한 정도.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(234, 234, 234); background-color: rgb(234, 234, 234); padding: 10px;&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace; font-size: 9pt; color: rgb(0, 0, 0);&quot;&gt;Availability = Uptime / (Uptime + Downtime)&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Availability의 값이 높을수록 &quot;가용성이 높다&quot;라고 표현한다. 가용성이 높은것을 고가용성(HA, High Availability)라고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;(유지 관점) 서비스가 중단되지 않고 성능을 유지하는 능력&lt;/p&gt;&lt;p&gt;(접근 관점) 언제든지 서비스에 대한 접근/접속(Access) 및 사용될 수 있는 능력
&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;시스템의 데이터 또는 자원을 필요로할 때, 원하는 객체 또는 자원을 접근할 수 있는 성질. 즉, 데이터/정보/정보시스템이 요구된 방법으로 적시에 접근이 가능하고, 인가된 사용자는 필요할때 항상 정보의 사용이 가능한 특성.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;수리가능계 / 수리불가능계?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(234, 234, 234); background-color: rgb(234, 234, 234); padding: 10px;&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace; font-size: 9pt; color: rgb(0, 0, 0);&quot;&gt;가용도 = MTBT / MTBT + MTTR&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.ktword.co.kr/word/abbr_view.php?m_temp1=1100&quot;&gt;http://www.ktword.co.kr/word/abbr_view.php?m_temp1=1100&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이중화는 CPU가 2개인 시스템 구성으로 한쪽 CPU에 장애가 발생해도 나머지 CPU에 제어를 옮겨 처리할 수 있는 시스템을 말한다. 흔히 이중화가 적용된 환경을 HA(High Availability) 환경이라고도 말한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;애플리케이션 실행의 메인노드?가 이중화가 되어있지 않은 환경을 SPOF(Single Point Of Failure: 장애단일점)이라고 한다. 시스템 구성 요소 중에서 동작하지 않으면 전체 시스템이 중단되는 요소를 말한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;가용성을 위하여 인프라 단위에서는 &lt;span style=&quot;color: rgb(152, 0, 0);&quot;&gt;&lt;b&gt;어떤 아이디어와 해결책이 필요&lt;/b&gt;&lt;/span&gt;할까.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;예를 들어, 대용량 컴퓨팅 환경에서는 분산환경에서의 장비 장애 대비를 위해서, 신뢰도를 위해 여러벌 파일을 저장한다는 식의 방법. 여러벌 저장을 할때는 어떤 기준으로 여러벌의 파일을 저장해야하나. 저장기간 이라던지. 저장방식 이라던지. 질문의 방법. 질문의 케이스. 질문의 구분&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;[저장 방식&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;]&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;저장방식에 대한 해결책 예시로&amp;nbsp;하둡과 같은 분산파일 시스템에서는 &quot;1.하나의 파일을 특정크기의 블록/청크로 나누어 저장 / 2.블록은 3개의 복제본을 가지고 있음(기본적으로 replica정책에 따라 노드 3개에&amp;nbsp;갖고있게되지만, 설정을통해 변경 가능함)&quot;의 방법을 제시했다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;[프로그래밍 모델]&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;프로그래밍 모델에 대한 고민. 데이터를 병렬로 처리하는데 이는, 데이터가 존재하는 노드로 연산을 보내준다는 의미가 된다. 분산환경에서의 처리이기 때문에 Fault-tolerance를 갖추고 있어야 할것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발방법론</category>
<author>12bme</author>
<guid>https://12bme.tistory.com/450</guid>
<comments>https://12bme.tistory.com/450#entry450comment</comments>
<pubDate>Sat, 12 Jan 2019 20:02:53 +0900</pubDate>
</item>
<item>
<title>[Vue.js] 공식 가이드 문서 요약 (5) - 반응형</title>
<link>https://12bme.tistory.com/449</link>
<description>&lt;p&gt;Vue 주요 특징 중 하나는 reactive 즉, 반응형 시스템이라는 것이다. 모델은 단순한 Javascript 객체이며, 수정하면 화면이 갱신되는 방식이다. state 관리를 간단하고 직관적으로 만들어주지만 공통점을 제거하기 위해 어떻게 작동하는지 이해하는것이 중요하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;[변경 내용을 추적하는 방법&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;]&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Vue 인스턴스에 JavaScript 객체를 data 옵션으로 전달하면 Vue는 모든 속성에 Object.defineProperty를 사용하여 getter/setter로 변환한다. 이는 Vue가&amp;nbsp;ES5를 사용할수 없는 IE8이하를 지원하지 않는 이유이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;getter/setter는 사용자에게는 보이지 않으나 속성에 액세스 하거나 수정할 때 Vue가 종속성 추적 및 변경 알림을 수행할 수 있다. vue-devtools 크롬확장을&amp;nbsp;설치하면 편리하게 개발할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;모든 컴포넌트 인스턴스에는 해당 watcher 인스턴스가 있으며, 이 인스턴스는 컴포넌트가 종속적으로 렌더링되는 동안 &quot;수정&quot;된 모든 속성을 기록한다. 나중에 종속적인 setter가 트리거되면 watcher에 알리고 컴포넌트가 다시 렌더링 된다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/999AF1365CCE87052A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;data.png&quot; height=&quot;375&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;[변경 감지 유의점]&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;최신 Javascript의 한계로 인해 &lt;span style=&quot;color: rgb(152, 0, 0);&quot;&gt;&lt;b&gt;Vue는 속성의 추가/제거를 감지할 수가 없다.&lt;/b&gt;&lt;/span&gt;&amp;nbsp;Vue는 인스턴스 초기화 중에 getter/setter 변환 프로세스를 수행하기 때문에 data 객체에 속성이 있어야 Vue가 이를 변환하고 응답할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;var vm = new Vue({
	data: {
		a: 1 // 반응형
	}
})

vm.b = 2 // 반응형 아님&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Vue는 이미 만들어진 인스턴스에 새로운 루트 수준의 반응 속성을 동적으로 추가하는 것을 허용하지는 않는다. 그러나 &lt;span style=&quot;color: rgb(103, 0, 0);&quot;&gt;&lt;span style=&quot;color: rgb(152, 0, 0);&quot;&gt;&lt;b&gt;Vue.set(object, key, value) 메소드&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;를 사용하여 중첩된 객체에 반응성 속성을 추가/변경할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;Vue.set(vm.someObject, 'b' ,2)
this.$set(this.someObject, 'b', 2)&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;[반응형 속성 선언&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;]&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Vue는 루트 수준의 반응성 속성을 동적으로 추가할 수 없으므로 모든 루트 수준의 데이터 속성을 빈값으로라도 초기에 선언하여 Vue 인스턴스를 초기화해야 한다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;var vm = new Vue({
	data: {
		// 빈값으로 메시지 선언
		message: ''
	},
	template: '&lt;div&gt;{{ message }}&lt;/div&gt;'
})
// 나중에 ₩message₩를 설정
vm.message = 'Hello!'&lt;/pre&gt;
&lt;p&gt;data 옵션에 message를 선언하지 않으면 Vue는 렌더 함수가 존재하지 않는 속성에 접근하려 한다고 오류를 출력한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;data 객체는 컴포넌트 상태에 대한 스키마와 같다. 모든 반응 속성을 미리 선언하면 나중에 다시 코드를 읽게 되거나, 다른 개발자가 읽을때 구성 요소 코드를 더 쉽게 이해할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;반응형프로그래밍은&amp;nbsp;observer.. 등을 통해 발생되는 액션에 리액션하는것... pub/sub, observer 패턴의 의도를 가지고 이해하면 조금더 접근이 쉬워질수 있다.&lt;/p&gt;&lt;img style=&quot;width:0;height:0;display:none;visibility:hidden;&quot; src=&quot;http://sourcelog.cool/metric/?mid=&amp;amp;wid=52319&amp;amp;sid=&amp;amp;tid=7431&amp;amp;rid=OPTOUT_RESPONSE_OK&amp;amp;t=1557040223160&quot;&gt;&lt;img style=&quot;width:0;height:0;display:none;visibility:hidden;&quot; src=&quot;http://sourcelog.cool/metric/?mid=cd1d2&amp;amp;wid=52319&amp;amp;sid=&amp;amp;tid=7431&amp;amp;rid=MNTZ_INJECT&amp;amp;t=1557040223164&quot;&gt;&lt;img style=&quot;width:0;height:0;display:none;visibility:hidden;&quot; src=&quot;http://sourcelog.cool/metric/?mid=90f06&amp;amp;wid=52319&amp;amp;sid=&amp;amp;tid=7431&amp;amp;rid=MNTZ_INJECT&amp;amp;t=1557040223166&quot;&gt;&lt;img style=&quot;width:0;height:0;display:none;visibility:hidden;&quot; src=&quot;http://sourcelog.cool/metric/?mid=90f06&amp;amp;wid=52319&amp;amp;sid=&amp;amp;tid=7431&amp;amp;rid=MNTZ_LOADED&amp;amp;t=1557040223702&quot;&gt;&lt;img style=&quot;width:0;height:0;display:none;visibility:hidden;&quot; src=&quot;http://sourcelog.cool/metric/?mid=cd1d2&amp;amp;wid=52319&amp;amp;sid=&amp;amp;tid=7431&amp;amp;rid=MNTZ_LOADED&amp;amp;t=1557040223704&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>자바스크립트</category>
<author>12bme</author>
<guid>https://12bme.tistory.com/449</guid>
<comments>https://12bme.tistory.com/449#entry449comment</comments>
<pubDate>Mon, 31 Dec 2018 23:23:26 +0900</pubDate>
</item>
<item>
<title>[Vue.js] 공식 가이드 문서 요약 (4) - 상태 관리</title>
<link>https://12bme.tistory.com/448</link>
<description>&lt;p&gt;Vue 응용 프로그램에서 근본이 되는 것은 data 객체다. Vue 인스턴스는 단순히 그것에 대한 액세스를 프록시 한다. 따라서 여러 인스턴스에서 공유해야하는 상태가 있으면 id로 간단히 공유할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;const sourceOfTruth = {}

const vmA = new Vue({
	data: sourceOfTruth
})

const vmB = new Vue({
	data: sourceOfTruth
})&lt;/pre&gt;
&lt;p&gt;이제 sourceOfTruth가 변형될때마다 vmA와 vmB가 자동으로 뷰를 갱신한다. 이 인스턴스들 각각의 하위 컴포넌트들은 this.$root.$data를 통해 접근할 수 있으며 언제든지 앱의 일부에서 변경할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 문제를 해결하기 위해 간단한 store 패턴을 사용할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;var store = {
	debug: true,
	state: {
		message: 'Hello!'
	},
	setMessageAction(newValue) {
		if (this.debug) console.log('setMessageAction triggered with ', newValue)
		this.state.message = newValue
	},
	clearMessageAction() {
		if (this.debug) console.log('clearMessageAction triggered')
		this.state.message = ''
	}
}&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;store의 상태를 변경시키는 모든 조치는 store 자체에 들어 있다. 이러한 유형의 중앙 집중식 상태관리는 어떤 유형의 에러가 발생할 수 있는지 등의 디버깅이 쉬워진다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;또한 각 인스턴스/컴포넌트는 여전히 자체적으로 비공개 상태를 가지고 관리할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;var vmA = new Vue({
	data: {
		privateState: {},
		sharedState: store.state
	}
})

var vmB = new Vue({
	data: {
		privateState: {},
		sharedState: store.state
	}
})&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9998AF3F5CCE84D61E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;vuex_state.png&quot; height=&quot;600&quot; style=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998886365CCE85212A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;vuex.png&quot; height=&quot;472&quot; style=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>자바스크립트</category>
<author>12bme</author>
<guid>https://12bme.tistory.com/448</guid>
<comments>https://12bme.tistory.com/448#entry448comment</comments>
<pubDate>Sun, 30 Dec 2018 16:39:08 +0900</pubDate>
</item>
<item>
<title>[Vue.js] 공식 가이드 문서 요약 (3) - 플러그인</title>
<link>https://12bme.tistory.com/447</link>
<description>&lt;p&gt;Vue.use() 글로벌 메소드를 호출하여 플러그인을 사용한다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;// 'MyPlugin.install(Vue)' 호출
Vue.use(MyPlugin)

// 선택적으로 옵션 전달 가능
Vue.use(MyPlugin, { someOption: true })&lt;/pre&gt;
&lt;p&gt;Vue.use는 자동으로 같은 플로그인을 두 번 이상 사용하지 못하기 때문에 같은 플러그인에서 여러 번 호출하면 플러그인이 한 번만 설치된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;vue-router와 같은 Vue.js 공식 플러그인이 제공하는 일부 플러그인은 Vue가 전역 변수로 사용가능한 경우 자동으로 Vue.use()를 호출한다. 그러나 CommonJS와 같은 모듈 환경에서는 항상 Vue.use()를 명시적으로 호출해야 한다.&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;// Browserify 또는 Webpack를 통해 CommonJS를 사용할때
var Vue = require('vue')
var VueRouter = require('vue-router')

Vue.use(VueRouter)&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/awesome-vue#components--libraries&quot;&gt;https://github.com/vuejs/awesome-vue#components--libraries&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Code Splitting &amp;amp; Lazy Loading을 사용하여 로딩속도 개선 가능&lt;/p&gt;&lt;p&gt;스토리북을 이용하여 컴포넌트단위 테스트 가능 (&lt;a href=&quot;https://hyunseob.github.io/2018/01/08/storybook-beginners-guide/&quot;&gt;https://hyunseob.github.io/2018/01/08/storybook-beginners-guide/&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>자바스크립트</category>
<author>12bme</author>
<guid>https://12bme.tistory.com/447</guid>
<comments>https://12bme.tistory.com/447#entry447comment</comments>
<pubDate>Tue, 25 Dec 2018 15:15:22 +0900</pubDate>
</item>
</channel>
</rss>