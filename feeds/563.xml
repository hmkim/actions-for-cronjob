<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://mindgitrwx.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mindgitrwx.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-01-07T20:35:23+09:00</updated><id>https://mindgitrwx.github.io/feed.xml</id><title type="html">mindgit</title><subtitle>mindgit
</subtitle><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><entry><title type="html">Main</title><link href="https://mindgitrwx.github.io/2019/01/05/main.html" rel="alternate" type="text/html" title="Main" /><published>2019-01-05T00:00:00+09:00</published><updated>2019-01-05T00:00:00+09:00</updated><id>https://mindgitrwx.github.io/2019/01/05/main</id><content type="html" xml:base="https://mindgitrwx.github.io/2019/01/05/main.html">&lt;p&gt;every posts on Archive&lt;/p&gt;

&lt;h2 id=&quot;skills&quot;&gt;Skills&lt;/h2&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">every posts on Archive Skills</summary></entry><entry><title type="html">deeplearning 4j 라이브러리 자체를 인텔리제이를 이용해서 돌려보기. 2 - 테스팅 환경 설정</title><link href="https://mindgitrwx.github.io/softwareengineering/2018/05/02/how-to-run-dl4j-on-intellij2.html" rel="alternate" type="text/html" title="deeplearning 4j 라이브러리 자체를 인텔리제이를 이용해서 돌려보기. 2 - 테스팅 환경 설정" /><published>2018-05-02T22:13:07+09:00</published><updated>2018-05-02T22:13:07+09:00</updated><id>https://mindgitrwx.github.io/softwareengineering/2018/05/02/how-to-run-dl4j-on-intellij2</id><content type="html" xml:base="https://mindgitrwx.github.io/softwareengineering/2018/05/02/how-to-run-dl4j-on-intellij2.html">&lt;p&gt;다음 사진의 순서를 따라간다&lt;/p&gt;

&lt;p&gt;처음 썼던 포스트와 가장 큰 차이점은 pom.xml 에서 activebydefalt 를 트루로 바꾸는 내용이다.&lt;/p&gt;

&lt;p&gt;처음 인텔리제이를 켤 때 부터 다음과 같이 진행한다. 만약 이미 프로젝트가 켜져 있었다면, File - close project를 누른 다음, 다음 사진들의 과정을 그대로 따라간다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img100.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img106.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img107.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img108.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 하나하나 체크한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img109.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img110.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img111.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img112.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img113.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래의 주소에서 jar 라이브러리 파일을 다운받아 준다.&lt;/p&gt;

&lt;p&gt;https://jar-download.com/?detail_search=a%3A%22deeplearning4j-core%22&amp;amp;a=deeplearning4j-core
에 들어가서, Downlaod deeplearning4j-core.jar를 받는다. 압축은 처음에 클론시켰던 dl4j의 폴더에 풀어주는 것이 좋다&lt;/p&gt;

&lt;p&gt;deeplearning4j의 의존성 jar 파일들을 프로젝트 폴더에 추가하고 나서는 다음 사진의 과정을 통해 그 jar폴더를  통째로 jar를 class path에 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img016.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img114.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img115.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img116.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img117.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img118.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img119.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 pom.xml 파일을 프로젝트에서 찾는다. 그 후 id 가 test-nd4j-native 인 곳에서 activeByDefault의 값을 true로 바꿔줘야 한다. 그렇지 않으면 ND4J백엔드와 의존성을 가진 클래스들이 동작하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img120.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왜 추가되어있는지는 정확히 모르겠지만 추상클래스를 implement하지 않은 소스가 있다. 그냥 단순히 implement해도 정상적으로 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img121.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img122.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 아무 클래스의 테스트 케이스를 돌려보면 다음과 같이 정상적으로 동작함을 알 수 있다.
&lt;img src=&quot;/assets/img123.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">다음 사진의 순서를 따라간다 처음 썼던 포스트와 가장 큰 차이점은 pom.xml 에서 activebydefalt 를 트루로 바꾸는 내용이다. 처음 인텔리제이를 켤 때 부터 다음과 같이 진행한다. 만약 이미 프로젝트가 켜져 있었다면, File - close project를 누른 다음, 다음 사진들의 과정을 그대로 따라간다. 다음과 같이 하나하나 체크한다. 아래의 주소에서 jar 라이브러리 파일을 다운받아 준다. https://jar-download.com/?detail_search=a%3A%22deeplearning4j-core%22&amp;amp;a=deeplearning4j-core 에 들어가서, Downlaod deeplearning4j-core.jar를 받는다. 압축은 처음에 클론시켰던 dl4j의 폴더에 풀어주는 것이 좋다 deeplearning4j의 의존성 jar 파일들을 프로젝트 폴더에 추가하고 나서는 다음 사진의 과정을 통해 그 jar폴더를 통째로 jar를 class path에 추가한다. 이제 pom.xml 파일을 프로젝트에서 찾는다. 그 후 id 가 test-nd4j-native 인 곳에서 activeByDefault의 값을 true로 바꿔줘야 한다. 그렇지 않으면 ND4J백엔드와 의존성을 가진 클래스들이 동작하지 않는다. 왜 추가되어있는지는 정확히 모르겠지만 추상클래스를 implement하지 않은 소스가 있다. 그냥 단순히 implement해도 정상적으로 동작한다. 이제 아무 클래스의 테스트 케이스를 돌려보면 다음과 같이 정상적으로 동작함을 알 수 있다.</summary></entry><entry><title type="html">Test</title><link href="https://mindgitrwx.github.io/layouttest/2018/04/12/test.html" rel="alternate" type="text/html" title="Test" /><published>2018-04-12T20:00:07+09:00</published><updated>2018-04-12T20:00:07+09:00</updated><id>https://mindgitrwx.github.io/layouttest/2018/04/12/test</id><content type="html" xml:base="https://mindgitrwx.github.io/layouttest/2018/04/12/test.html">&lt;p&gt;Welcome to my blog! :earth_asia: :earth_africa: :earth_americas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello! blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;skills&quot;&gt;Skills&lt;/h2&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">Welcome to my blog! :earth_asia: :earth_africa: :earth_americas: (() =&amp;gt; console.log('hello! blog'))(); Skills</summary></entry><entry><title type="html">genetic algorithm</title><link href="https://mindgitrwx.github.io/ai/2018/04/09/admissible-consistent.html" rel="alternate" type="text/html" title="genetic algorithm" /><published>2018-04-09T04:02:07+09:00</published><updated>2018-04-09T04:02:07+09:00</updated><id>https://mindgitrwx.github.io/ai/2018/04/09/admissible-consistent</id><content type="html" xml:base="https://mindgitrwx.github.io/ai/2018/04/09/admissible-consistent.html">&lt;p&gt;자연선택 (natural selection)
자연선택 (natural selection)
Optimization Problem&lt;/p&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">자연선택 (natural selection) 자연선택 (natural selection) Optimization Problem</summary></entry><entry><title type="html">휴리스틱이 consistent하면 반드시 admissible함을 증명하기</title><link href="https://mindgitrwx.github.io/ai/2018/04/09/geneticalgorithm.html" rel="alternate" type="text/html" title="휴리스틱이 consistent하면 반드시 admissible함을 증명하기" /><published>2018-04-09T04:02:07+09:00</published><updated>2018-04-09T04:02:07+09:00</updated><id>https://mindgitrwx.github.io/ai/2018/04/09/geneticalgorithm</id><content type="html" xml:base="https://mindgitrwx.github.io/ai/2018/04/09/geneticalgorithm.html">&lt;p&gt;Welcome to my blog! :earth_asia: :earth_africa: :earth_americas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello! blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;skills&quot;&gt;Skills&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;집에 쓰잘때기없는 모니터 더 사기&lt;/li&gt;
  &lt;li&gt;누워서 음악듣기&lt;/li&gt;
  &lt;li&gt;크롬에다 확장프로그램 덕지덕지 붙이기&lt;/li&gt;
  &lt;li&gt;밤새기&lt;/li&gt;
&lt;/ul&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">Welcome to my blog! :earth_asia: :earth_africa: :earth_americas: (() =&amp;gt; console.log('hello! blog'))(); Skills 집에 쓰잘때기없는 모니터 더 사기 누워서 음악듣기 크롬에다 확장프로그램 덕지덕지 붙이기 밤새기</summary></entry><entry><title type="html">deeplearning 4j 라이브러리 자체를 인텔리제이를 이용해서 돌려보기. 1 - 설치 과정</title><link href="https://mindgitrwx.github.io/softwareengineering/2018/04/08/how-to-run-dl4j-on-intellij.html" rel="alternate" type="text/html" title="deeplearning 4j 라이브러리 자체를 인텔리제이를 이용해서 돌려보기. 1 - 설치 과정 " /><published>2018-04-08T22:13:07+09:00</published><updated>2018-04-08T22:13:07+09:00</updated><id>https://mindgitrwx.github.io/softwareengineering/2018/04/08/how-to-run-dl4j-on-intellij</id><content type="html" xml:base="https://mindgitrwx.github.io/softwareengineering/2018/04/08/how-to-run-dl4j-on-intellij.html">&lt;p&gt;Deeplearning4J 라는  거대한 프로젝트를 리팩토링해보는 것을 이번 학기의 주제로 잡았다. &lt;a href=&quot;https://deeplearning4j.org/&quot;&gt;dl4j&lt;/a&gt; 로 불리는 이 프로젝트는 텐서플로우와 유사한 딥러닝 프레임워크인데 , 코드의 상태도 좋지 못해 보였고, 그 코드에 딸려 있는 주석의 상태도 좋지 않았다.&lt;/p&gt;

&lt;p&gt;IDE나 에디터를 통해서 프로젝트 전체 탐색을 이용, Todo를 검색하면 아직 해야할 일이 많이 남아있었다.&lt;/p&gt;

&lt;p&gt;deepleanring4J example 도 아니고 쌩 deeplearning4J 를 리팩토링하는거라 많은 난항이 예상되지만 그래도 얼마 안되는 테스트 케이스를 추가 할 수 있었다.&lt;/p&gt;

&lt;p&gt;다음 과정들은 그 테스트 케이스를 추가하기 전 까지의 intelliJ의 환경설정 과정이다.&lt;/p&gt;

&lt;p&gt;처음에 인텔리제이가 돈을 지불해야 쓸 수 있는 거라고 알고 있어서 불안했는데,&lt;/p&gt;

&lt;p&gt;자바 프로젝트를 돌릴 때는 Community Edition 으로 충분했다.
화살표의 다운로드를 누르고 다음과 같이 진행해 나가면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img002.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Space 용량이 많은 디스크로 경로를 바꿔서 설치해준다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img003.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 체크를 하고 설치를 진행한다. 설치가 끝나고 나서 처음 실행하면, 여러 플러그인들을 설치하라고 할 것이다.
Vim에 익숙할시 Vim을 체크해주고, 아니면 체크를 안하고 넘어가주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img004.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 사진과 같은 방식으로 git에서 Dl4j를 클론할 차례다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img005.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;밑의 주소는 다음과 같다. 주소를 복사해서 사진처럼 붙여준다.
&lt;a href=&quot;https://github.com/mindgitrwx/deeplearning4j&quot;&gt;https://github.com/mindgitrwx/deeplearning4j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img006.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img008.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;큰 프로젝트라 시간이 좀 걸릴 것이다. 인텔리제이의 하단 바에 진행상황이 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img009.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;maven 프레임워크를 적용시켜야 한다. 왼쪽의 프로젝트 창에서, 제일 상위 폴더에 오른쪽 클릭한 뒤 다음 과정을 따라간다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img010.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img011.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img012.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 파일을 파고들어갔을 때, Project SDK is not defined 문구가 아래 처럼 뜨면 setup sdk 를 눌러준 다음, 시키는 대로 한다. jdk, jre가 깔려있으면 잘 진행된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img015.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https://jar-download.com/?detail_search=a%3A%22deeplearning4j-core%22&amp;amp;a=deeplearning4j-core
에 들어가서, Downlaod deeplearning4j-core.jar를 받는다. 압축은 처음에 클론시켰던 dl4j의 폴더에 풀어주는 것이 좋다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img016.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img017.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;받았던 jar파일을 아래 사진과 같은 과정을 따라가 라이브러리로 만든다. 
오른쪽 버튼을 클릭하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add as Libarary...&lt;/code&gt; 라는 버튼이 나올 텐데, 그걸 클릭하면 Create Library 창이 뜰 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img025.png&quot; alt=&quot;Itellij&quot; /&gt;
&lt;img src=&quot;/assets/img022.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러고 나서도 프로젝트를 실행시키면 오류가 3개정도 뜰 텐데, 바로 다음 사진에 나오는 오류는 implement해주고, (Deprecated가 아님), 마지막 오류줄은 그냥 지워버려도 무관하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img023.png&quot; alt=&quot;Itellij&quot; /&gt;
&lt;img src=&quot;/assets/img024.png&quot; alt=&quot;Itellij&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 과정을 거치면, 이 라이브러리 전체를 테스팅하는데는 문제가 없을 것으로 보인다. 이 테스팅 한 것들을 토대로, 앞으로 하게 될 리팩토링을 진행한다.&lt;/p&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">Deeplearning4J 라는 거대한 프로젝트를 리팩토링해보는 것을 이번 학기의 주제로 잡았다. dl4j 로 불리는 이 프로젝트는 텐서플로우와 유사한 딥러닝 프레임워크인데 , 코드의 상태도 좋지 못해 보였고, 그 코드에 딸려 있는 주석의 상태도 좋지 않았다. IDE나 에디터를 통해서 프로젝트 전체 탐색을 이용, Todo를 검색하면 아직 해야할 일이 많이 남아있었다. deepleanring4J example 도 아니고 쌩 deeplearning4J 를 리팩토링하는거라 많은 난항이 예상되지만 그래도 얼마 안되는 테스트 케이스를 추가 할 수 있었다. 다음 과정들은 그 테스트 케이스를 추가하기 전 까지의 intelliJ의 환경설정 과정이다. 처음에 인텔리제이가 돈을 지불해야 쓸 수 있는 거라고 알고 있어서 불안했는데, 자바 프로젝트를 돌릴 때는 Community Edition 으로 충분했다. 화살표의 다운로드를 누르고 다음과 같이 진행해 나가면 된다. Space 용량이 많은 디스크로 경로를 바꿔서 설치해준다 다음과 같이 체크를 하고 설치를 진행한다. 설치가 끝나고 나서 처음 실행하면, 여러 플러그인들을 설치하라고 할 것이다. Vim에 익숙할시 Vim을 체크해주고, 아니면 체크를 안하고 넘어가주면 된다. 이제 사진과 같은 방식으로 git에서 Dl4j를 클론할 차례다. 밑의 주소는 다음과 같다. 주소를 복사해서 사진처럼 붙여준다. https://github.com/mindgitrwx/deeplearning4j 큰 프로젝트라 시간이 좀 걸릴 것이다. 인텔리제이의 하단 바에 진행상황이 보인다. maven 프레임워크를 적용시켜야 한다. 왼쪽의 프로젝트 창에서, 제일 상위 폴더에 오른쪽 클릭한 뒤 다음 과정을 따라간다. 프로젝트 파일을 파고들어갔을 때, Project SDK is not defined 문구가 아래 처럼 뜨면 setup sdk 를 눌러준 다음, 시키는 대로 한다. jdk, jre가 깔려있으면 잘 진행된다. https://jar-download.com/?detail_search=a%3A%22deeplearning4j-core%22&amp;amp;a=deeplearning4j-core 에 들어가서, Downlaod deeplearning4j-core.jar를 받는다. 압축은 처음에 클론시켰던 dl4j의 폴더에 풀어주는 것이 좋다 받았던 jar파일을 아래 사진과 같은 과정을 따라가 라이브러리로 만든다. 오른쪽 버튼을 클릭하면 Add as Libarary... 라는 버튼이 나올 텐데, 그걸 클릭하면 Create Library 창이 뜰 것이다. 그러고 나서도 프로젝트를 실행시키면 오류가 3개정도 뜰 텐데, 바로 다음 사진에 나오는 오류는 implement해주고, (Deprecated가 아님), 마지막 오류줄은 그냥 지워버려도 무관하다. 이 과정을 거치면, 이 라이브러리 전체를 테스팅하는데는 문제가 없을 것으로 보인다. 이 테스팅 한 것들을 토대로, 앞으로 하게 될 리팩토링을 진행한다.</summary></entry><entry><title type="html">first post</title><link href="https://mindgitrwx.github.io/jekyll/update/2018/04/08/welcome-to-jekyll.html" rel="alternate" type="text/html" title="first post" /><published>2018-04-08T21:59:07+09:00</published><updated>2018-04-08T21:59:07+09:00</updated><id>https://mindgitrwx.github.io/jekyll/update/2018/04/08/welcome-to-jekyll</id><content type="html" xml:base="https://mindgitrwx.github.io/jekyll/update/2018/04/08/welcome-to-jekyll.html">&lt;p&gt;java markup test&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isSatisfied&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IterationHistory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterationHistory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterationHistory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIterationCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterationHistory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIterationCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterationHistory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIterationInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClusterSetInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPointDistanceFromClusterVariance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;variation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterationHistory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIterationInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClusterSetInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPointDistanceFromClusterVariance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;variation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterationHistory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIterationInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClusterSetInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPointDistanceFromClusterVariance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varianceVariationCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jonghyeon-yeo</name><email>jonghyeon.rw@gmail.com</email></author><summary type="html">java markup test public boolean isSatisfied(IterationHistory iterationHistory) { if (iterationHistory.getIterationCount() &amp;lt;= period) return false; for (int i = 0, j = iterationHistory.getIterationCount(); i &amp;lt; period; i++) { double variation = iterationHistory.getIterationInfo(j - i).getClusterSetInfo() .getPointDistanceFromClusterVariance(); variation -= iterationHistory.getIterationInfo(j - i - 1).getClusterSetInfo() .getPointDistanceFromClusterVariance(); variation /= iterationHistory.getIterationInfo(j - i - 1).getClusterSetInfo() .getPointDistanceFromClusterVariance(); if (!varianceVariationCondition.apply(variation)) return false; } return true; }</summary></entry></feed>