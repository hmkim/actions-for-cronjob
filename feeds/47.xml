<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>SW 개발이 좋은 사람</title>
<link>https://forest71.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 02:32:26 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>forest71</managingEditor>
<item>
<title>상용 웹에디터 - damoEDITOR</title>
<link>https://forest71.tistory.com/194</link>
<description>&lt;p&gt;퇴사하면서,&lt;/p&gt;
&lt;p&gt;내가&amp;nbsp;만든&amp;nbsp;웹&amp;nbsp;에디터(damoEDITOR)가&amp;nbsp;잘되었으면&amp;nbsp;하는 마음으로 이&amp;nbsp;글을 작성한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://damonet.com/damoEDITOR.dmn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;영업자의 마인드로 된 소개서&lt;/a&gt;가 있지만&lt;/p&gt;
&lt;p&gt;여기서는 개발자의 마인드로, 한가지 차이점을 중심으로 정리한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/kOQiq/btquaQCzTOm/3UHdD3sr1EtgjdX6gxt2V0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/kOQiq/btquaQCzTOm/3UHdD3sr1EtgjdX6gxt2V0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FkOQiq%2FbtquaQCzTOm%2F3UHdD3sr1EtgjdX6gxt2V0%2Fimg.png' data-filename=&quot;image1.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;웹&amp;nbsp;에디터는&amp;nbsp;웹&amp;nbsp;브라우저에서&amp;nbsp;별도의&amp;nbsp;설치&amp;nbsp;없이&amp;nbsp;문서를&amp;nbsp;작성하게&amp;nbsp;하는&amp;nbsp;프로그램으로,&lt;/p&gt;
&lt;p&gt;제법&amp;nbsp;많은&amp;nbsp;제품들이&amp;nbsp;있지만&lt;/p&gt;
&lt;p&gt;오픈&amp;nbsp;소스로는&amp;nbsp;CKEditor와&amp;nbsp;NicEditor등이 대표적이고,&lt;/p&gt;
&lt;p&gt;상용&amp;nbsp;제품으로&amp;nbsp;나모,&amp;nbsp;Dext5,&amp;nbsp;태그프리&amp;nbsp;등의&amp;nbsp;3개&amp;nbsp;기업&amp;nbsp;제품이&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://forest71.tistory.com/category/JavaScript/NicEdit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NicEditor는&amp;nbsp;본&amp;nbsp;블로그에서 정리&lt;/a&gt;한&amp;nbsp;적이&amp;nbsp;있지만, 현재는 관리되지&amp;nbsp;않는&amp;nbsp;것&amp;nbsp;같다.&lt;/p&gt;
&lt;p&gt;다양한&amp;nbsp;기능을&amp;nbsp;제공하는&amp;nbsp;CKEditor와&amp;nbsp;tinyMCE등의&amp;nbsp;오픈&amp;nbsp;소스&amp;nbsp;제품이&amp;nbsp;무료로&amp;nbsp;제공되어&amp;nbsp;폭넓게&amp;nbsp;사용되지만,&lt;/p&gt;
&lt;p&gt;국내&amp;nbsp;공공&amp;nbsp;기관이나&amp;nbsp;대기업들에서는&amp;nbsp;상용&amp;nbsp;제품을&amp;nbsp;많이&amp;nbsp;사용한다.&lt;/p&gt;
&lt;p&gt;상용이&amp;nbsp;조금&amp;nbsp;더&amp;nbsp;많은&amp;nbsp;기능을&amp;nbsp;제공하는&amp;nbsp;것도&amp;nbsp;있겠지만&amp;nbsp;기술&amp;nbsp;지원&amp;nbsp;등의&amp;nbsp;문제로&amp;nbsp;선호하는&amp;nbsp;것&amp;nbsp;같다.&lt;/p&gt;
&lt;p&gt;상용은&amp;nbsp;나모,&amp;nbsp;Dext5,&amp;nbsp;태그프리의&amp;nbsp;3개&amp;nbsp;기업&amp;nbsp;제품이&amp;nbsp;주도하는데,&lt;/p&gt;
&lt;p&gt;아주&amp;nbsp;뒤늦게&amp;nbsp;우리&amp;nbsp;회사도 웹 에디터 시장의 한&amp;nbsp;귀퉁이를&amp;nbsp;파고&amp;nbsp;들면서 판매를 시작하였다.&lt;/p&gt;
&lt;p&gt;(실제로는&amp;nbsp;자사&amp;nbsp;기업용&amp;nbsp;솔루션에서&amp;nbsp;사용하는&amp;nbsp;웹&amp;nbsp;에디터로&amp;nbsp;사용하였다.)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;이&amp;nbsp;제품의&amp;nbsp;이름은&amp;nbsp;&lt;b&gt;damoEDITOR&amp;nbsp;&lt;/b&gt;(이름은&amp;nbsp;별로..)로&amp;nbsp;기존&amp;nbsp;상용&amp;nbsp;제품들과&amp;nbsp;거의&amp;nbsp;동일한&amp;nbsp;기능을&amp;nbsp;제공한다.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;http://damonet.com/damoEDITOR.dmn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;기본 정보는 여기에서&lt;/a&gt; 확인할 수 있다.)&lt;/p&gt;
&lt;p&gt;기존 상용 제품과 비교해 핵심 기능들은 동일하지만, 부가적인 기능에서&amp;nbsp;2%&amp;nbsp;부족하다.&lt;/p&gt;
&lt;p&gt;이미지(IMG) 태그를 예로 들면,&lt;/p&gt;
&lt;p&gt;기존 제품은 이미지 추가시 이미지 크기를 같이 입력해서 지정하지만,&lt;/p&gt;
&lt;p&gt;damoEDITOR는 이미지를 추가하고 난 뒤에 마우스로 조절한다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #f41a18;&quot;&gt;하지만 damoEDITOR는 &lt;b&gt;한가지&amp;nbsp;차이를&amp;nbsp;가지고&amp;nbsp;제작되었고, 이&amp;nbsp;차이로&amp;nbsp;인해&amp;nbsp;몇&amp;nbsp;가지&amp;nbsp;장점이&amp;nbsp;있다&lt;/b&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;대부분의&amp;nbsp;웹&amp;nbsp;에디터는(특히&amp;nbsp;상용은&amp;nbsp;모두)&amp;nbsp;IFrame을&amp;nbsp;이용해서&amp;nbsp;제작되었다.&lt;/p&gt;
&lt;p&gt;IFrame은&amp;nbsp;Inline&amp;nbsp;Frame이라는&amp;nbsp;의미로&amp;nbsp;하나의&amp;nbsp;HTML문서내에서&amp;nbsp;다른&amp;nbsp;HTML문서를&amp;nbsp;보여주기&amp;nbsp;위해&amp;nbsp;사용한다.&lt;/p&gt;
&lt;p&gt;IFrame은&amp;nbsp;웹&amp;nbsp;보안등의&amp;nbsp;문제로&amp;nbsp;사용을&amp;nbsp;제한하는&amp;nbsp;추세이지만,&lt;/p&gt;
&lt;p&gt;오래&amp;nbsp;전에&amp;nbsp;개발된&amp;nbsp;웹&amp;nbsp;에디터는&amp;nbsp;IFrame으로&amp;nbsp;제작하는&amp;nbsp;것&amp;nbsp;외에는&amp;nbsp;방법이&amp;nbsp;없었다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;최근에는&amp;nbsp;IFrame&amp;nbsp;대신에 DIV로&amp;nbsp;개발하는&amp;nbsp;것이&amp;nbsp;추세가&amp;nbsp;되고&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;DIV로&amp;nbsp;제작할&amp;nbsp;경우&amp;nbsp;반응형&amp;nbsp;웹(Responsive&amp;nbsp;Web)&amp;nbsp;페이지에&amp;nbsp;대응할&amp;nbsp;수&amp;nbsp;있는&amp;nbsp;장점이&amp;nbsp;있다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;이것이 damoEDITOR의 첫번째 장점이다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;웹&amp;nbsp;페이지(웹브라우저)의&amp;nbsp;크기에&amp;nbsp;따라&amp;nbsp;웹&amp;nbsp;에디터의 크기가&amp;nbsp;변하게&amp;nbsp;제작할&amp;nbsp;수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;반면,&amp;nbsp;IFrame을 기반으로 제작된 웹 에디터들은 크기&amp;nbsp;변화에&amp;nbsp;대응하는&amp;nbsp;것이&amp;nbsp;쉽지&amp;nbsp;않다.&lt;/p&gt;
&lt;p&gt;최근(?)에&amp;nbsp;제작된&amp;nbsp;오픈소스&amp;nbsp;웹&amp;nbsp;에디터는 DIV를 이용하여 반응형&amp;nbsp;웹용으로&amp;nbsp;많이 제작되었다.&lt;/p&gt;
&lt;p&gt;다만,&amp;nbsp;이&amp;nbsp;웹&amp;nbsp;에디터들은 제공되는&amp;nbsp;기능이&amp;nbsp;몇&amp;nbsp;가지&amp;nbsp;없다.&lt;/p&gt;
&lt;p&gt;damoEDITOR는 다음 그림(우측 상단)에서&amp;nbsp;보는&amp;nbsp;것처럼&lt;/p&gt;
&lt;p&gt;웹&amp;nbsp;브라우저의&amp;nbsp;크기에&amp;nbsp;따라&amp;nbsp;변할&amp;nbsp;뿐&amp;nbsp;아니라&amp;nbsp;제공되는&amp;nbsp;기능&amp;nbsp;버튼의&amp;nbsp;위치까지&amp;nbsp;변한다.&lt;/p&gt;
&lt;p&gt;웹 에디터의 너비가&amp;nbsp;작아지면서 가려지는&amp;nbsp;버튼들을&amp;nbsp;보조&amp;nbsp;툴바를&amp;nbsp;이용해서 메뉴처럼&amp;nbsp;보여준다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bif6mh/btqubSNmv1v/v7k8IhVSkHb9MugyxIhlH1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bif6mh/btqubSNmv1v/v7k8IhVSkHb9MugyxIhlH1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fbif6mh%2FbtqubSNmv1v%2Fv7k8IhVSkHb9MugyxIhlH1%2Fimg.png' data-filename=&quot;image2.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;다음 그림과 같이 더 작아지면 메인 툴바를 한줄만 남기고,&lt;/p&gt;
&lt;p&gt;가려진 버튼들은 모두 보조 툴바에서 사용 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cTNjKk/btqud6jiYO4/lKkrt3uLrMcpNlTvXzuhj0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cTNjKk/btqud6jiYO4/lKkrt3uLrMcpNlTvXzuhj0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcTNjKk%2Fbtqud6jiYO4%2FlKkrt3uLrMcpNlTvXzuhj0%2Fimg.png' data-filename=&quot;image2_1.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그림과 같이 모바일 전용으로 사용할 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bqmJbO/btqt9BMGlKS/0xvFbDB0kMblyRCqBek1qk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bqmJbO/btqt9BMGlKS/0xvFbDB0kMblyRCqBek1qk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbqmJbO%2Fbtqt9BMGlKS%2F0xvFbDB0kMblyRCqBek1qk%2Fimg.png' data-filename=&quot;image3.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;두&amp;nbsp;번째&amp;nbsp;장점은 작성한&amp;nbsp;데로&amp;nbsp;보는&amp;nbsp;것이다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;IFrame내에서&amp;nbsp;호출되는&amp;nbsp;HTML은&amp;nbsp;IFrame&amp;nbsp;외부의&amp;nbsp;HTML과&amp;nbsp;격리되어&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;이&amp;nbsp;두&amp;nbsp;개의&amp;nbsp;HTML은&amp;nbsp;별개의&amp;nbsp;페이지로&amp;nbsp;전혀&amp;nbsp;다른&amp;nbsp;CSS가&amp;nbsp;사용된다.&lt;/p&gt;
&lt;p&gt;즉,&amp;nbsp;IFrame&amp;nbsp;외부의&amp;nbsp;HTML은&amp;nbsp;웹&amp;nbsp;에디터를&amp;nbsp;구매해서&amp;nbsp;사용하려는&amp;nbsp;기업의&amp;nbsp;웹&amp;nbsp;페이지이고,&lt;/p&gt;
&lt;p&gt;IFrame 내부의&amp;nbsp;HTML은&amp;nbsp;웹&amp;nbsp;에디터의&amp;nbsp;영역으로&amp;nbsp;독립적인&amp;nbsp;영역이다.&lt;/p&gt;
&lt;p&gt;따라서&amp;nbsp;두&amp;nbsp;개의&amp;nbsp;CSS가&amp;nbsp;사용되어 사용자에게&amp;nbsp;혼란을&amp;nbsp;야기한다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;HTML&amp;nbsp;&amp;lt;a&amp;gt;&amp;nbsp;태그를&amp;nbsp;예로&amp;nbsp;하면,&lt;/p&gt;
&lt;p&gt;웹&amp;nbsp;에디터에서 한&amp;nbsp;문장을&amp;nbsp;&amp;lt;a&amp;gt;&amp;nbsp;태그로&amp;nbsp;지정하면&amp;nbsp;밑줄(underline)이&amp;nbsp;생긴다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/wgBUS/btqubCjDLmW/qnqeuxxpChluEh5vP3FNk0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/wgBUS/btqubCjDLmW/qnqeuxxpChluEh5vP3FNk0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FwgBUS%2FbtqubCjDLmW%2FqnqeuxxpChluEh5vP3FNk0%2Fimg.png' data-filename=&quot;image6.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;만약, 사이트 전체에 &amp;lt;a&amp;gt;&amp;nbsp;태그의 CSS를&amp;nbsp;밑줄이&amp;nbsp;아닌&amp;nbsp;색상을&amp;nbsp;사용하도록&amp;nbsp;지정하면&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;웹&amp;nbsp;에디터로&amp;nbsp;작성한&amp;nbsp;내용을&amp;nbsp;글&amp;nbsp;읽기로&amp;nbsp;볼&amp;nbsp;때, 다음 그림과 같이 다른&amp;nbsp;화면을&amp;nbsp;보게&amp;nbsp;된다.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;(웹&amp;nbsp;에디터가&amp;nbsp;사용되던&amp;nbsp;초기에&amp;nbsp;이러한&amp;nbsp;문제로&amp;nbsp;클레임이&amp;nbsp;많았던&amp;nbsp;것으로&amp;nbsp;기억한다.)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/BwjcC/btquaQo94z9/L48WqZSrTxUv53J6LyV810/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/BwjcC/btquaQo94z9/L48WqZSrTxUv53J6LyV810/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FBwjcC%2FbtquaQo94z9%2FL48WqZSrTxUv53J6LyV810%2Fimg.png' data-filename=&quot;image7.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;위 그림은 일반 텍스트는 회색, 링크는 검은색으로 지정해서 사용한 사이트의 예제이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;DIV로&amp;nbsp;개발한&amp;nbsp;제품은&amp;nbsp;&lt;/p&gt;
&lt;p&gt;사용하는&amp;nbsp;웹&amp;nbsp;페이지의&amp;nbsp;CSS를&amp;nbsp;상속받아서&amp;nbsp;사용하기&amp;nbsp;때문에&amp;nbsp;이러한&amp;nbsp;문제가&amp;nbsp;생기지&amp;nbsp;않는다.&lt;/p&gt;
&lt;p&gt;작성 화면과&amp;nbsp;조회&amp;nbsp;화면이&amp;nbsp;동일하게&amp;nbsp;보이는&amp;nbsp;것이다.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;기존 제품들은 이문제를 해결하기 위해 웹에디터의 CSS에 자사 웹 페이지의 CSS를 수정해야 한다.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;고려하지 못한 유사한 문제가 생길 경우&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;damoEDITOR는 damoEditor.css에서 수정하면 해당 기업의 CSS와 동일하게 맞출수 있다.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;사용하는&amp;nbsp;웹&amp;nbsp;페이지가&amp;nbsp;&amp;lt;a&amp;gt;&amp;nbsp;태그에&amp;nbsp;밑줄도&amp;nbsp;색상도&amp;nbsp;아무것도&amp;nbsp;지정하지&amp;nbsp;않으면&lt;/p&gt;
&lt;p&gt;웹&amp;nbsp;에디터&amp;nbsp;작성시&amp;nbsp;&amp;lt;a&amp;gt;&amp;nbsp;태그에&amp;nbsp;아무것도&amp;nbsp;나오지&amp;nbsp;않아&amp;nbsp;문제가&amp;nbsp;되기도&amp;nbsp;했다.&lt;/p&gt;
&lt;p&gt;(링크에 아무런 표시를 하지 않는 사이트라면 UI에 대해서 고민을...)&lt;/p&gt;
&lt;p&gt;이&amp;nbsp;경우&amp;nbsp;damoEditor.css에서 다음과 같이 지정해&amp;nbsp;주면&amp;nbsp;간단하게&amp;nbsp;해결된다.&lt;/p&gt;
&lt;pre id=&quot;code_1554595496453&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;.damoEditor a {
    text-decoration: underline 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다른&amp;nbsp;웹&amp;nbsp;에디터를&amp;nbsp;많이&amp;nbsp;사용해본&amp;nbsp;사람들에게는&lt;/p&gt;
&lt;p&gt;이러한&amp;nbsp;기능이&amp;nbsp;오히려&amp;nbsp;혼동을&amp;nbsp;주기도&amp;nbsp;해서&lt;/p&gt;
&lt;p&gt;&lt;u&gt;기존&amp;nbsp;방식처럼&amp;nbsp;CSS가 별도로 운영되는 &lt;b&gt;IFrame&amp;nbsp;방식&lt;/b&gt;도&amp;nbsp;제공한다.&amp;nbsp;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;세&amp;nbsp;번째&amp;nbsp;장점은&amp;nbsp;제품에&amp;nbsp;포함된&amp;nbsp;damoEditor.css&amp;nbsp;파일을 수정해서&lt;/p&gt;
&lt;p&gt;&lt;b&gt;damoEDITOR를&amp;nbsp;사용하는&amp;nbsp;기업에서&amp;nbsp;마음&amp;nbsp;데로&amp;nbsp;디자인을&amp;nbsp;수정하고&amp;nbsp;개선할&amp;nbsp;수&amp;nbsp;있다는 것이다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;이것은&amp;nbsp;damoEDITOR만의&amp;nbsp;고유한&amp;nbsp;기능으로&amp;nbsp;CSS를 조금이라도 아는&amp;nbsp;사람(퍼블리셔)이&amp;nbsp;있다면,&lt;/p&gt;
&lt;p&gt;자신의&amp;nbsp;웹&amp;nbsp;사이트에&amp;nbsp;맞춰서&amp;nbsp;다양하게&amp;nbsp;정의해서&amp;nbsp;사용할&amp;nbsp;수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;이것은&amp;nbsp;damoEDITOR를&amp;nbsp;구성하는&amp;nbsp;거의&amp;nbsp;모든&amp;nbsp;디자인이&amp;nbsp;damoEditor.css에&amp;nbsp;있기&amp;nbsp;때문에&amp;nbsp;가능하다.&lt;br /&gt;&lt;br /&gt;대부분의&amp;nbsp;웹&amp;nbsp;에디터에서 테마를&amp;nbsp;제공하지만,&amp;nbsp;&lt;/p&gt;
&lt;p&gt;몇&amp;nbsp;가지&amp;nbsp;색상만&amp;nbsp;제공하기 때문에&amp;nbsp;&lt;/p&gt;
&lt;p&gt;사이트 디자인과 웹에디터의 디자인이 맞지 않는 문제가 많이 있다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;더욱이 웹 에디터들은 딱딱한 기본 구성으로 제공되는데,&lt;/p&gt;
&lt;p&gt;damoEDITOR는 사용하는 기업에 맞춰서 다양하게 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;다음 그림은 기본제공되는 사각형 색상 팔렛트를 간단한 CSS 수정을 통하여 원형으로 바꿔서 사용한 예제이다.&lt;/p&gt;
&lt;p&gt;사용법은 개발자 메뉴얼에 정리되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/deFZIe/btqudsNS1IC/Nwe0L2YVb2Sk14eTVdXajK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/deFZIe/btqudsNS1IC/Nwe0L2YVb2Sk14eTVdXajK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FdeFZIe%2FbtqudsNS1IC%2FNwe0L2YVb2Sk14eTVdXajK%2Fimg.png' data-filename=&quot;image4.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/na4P4/btquasWizcJ/BdyZs5zcdap7JtDcp0Yti1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/na4P4/btquasWizcJ/BdyZs5zcdap7JtDcp0Yti1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fna4P4%2FbtquasWizcJ%2FBdyZs5zcdap7JtDcp0Yti1%2Fimg.png' data-filename=&quot;image5.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;차후에는 이렇게 사용자 정의로 작성된 다양한 디자인을 정리해서 판매 옵션으로 넣는다면 좋을 것 같다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;이상으로&amp;nbsp;damoEDITOR의&amp;nbsp;세가지&amp;nbsp;장점을&amp;nbsp;정리하였다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://damonet.com/de_List.dmn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;제품에&amp;nbsp;대한&amp;nbsp;설명과&amp;nbsp;체험은&amp;nbsp;여기에서&amp;nbsp;할&amp;nbsp;수&amp;nbsp;있다.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;나름&amp;nbsp;GS&amp;nbsp;인증까지&amp;nbsp;받은&amp;nbsp;이&amp;nbsp;제품이 정말 많이&amp;nbsp;팔리기를&amp;nbsp;기원한다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
<category>기타</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/194</guid>
<comments>https://forest71.tistory.com/194#entry194comment</comments>
<pubDate>Mon, 08 Apr 2019 07:54:05 +0900</pubDate>
</item>
<item>
<title>블로그 주요 내용</title>
<link>https://forest71.tistory.com/86</link>
<description>&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Java/%EA%B2%8C%EC%8B%9C%ED%8C%90%EA%B8%B0%EB%B3%B8&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;게시판 (Java)&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- Spring 4 + MyBatis 3 + MariaDB&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/category/Java/%EA%B2%8C%EC%8B%9C%ED%8C%90%201&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;게시판 1단계 ~ 4단계: 초급&lt;/a&gt;&lt;/p&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Java/%EA%B2%8C%EC%8B%9C%ED%8C%90%205:%20%EB%8C%93%EA%B8%80&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;- 게시판 4단계 이상: 중급 이상&lt;/a&gt;&lt;br /&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/category/Java/%EA%B2%8C%EC%8B%9C%ED%8C%90%20%EA%B8%B0%ED%83%80:%20%ED%92%88%EC%A7%88%20%EB%93%B1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;품질 관리 예제&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Java/JPetStore&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;JPetStore(Java)&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- Spring 4 + MyBatis 3+ HSQLDB + ETC&lt;/p&gt;&lt;p&gt;- 다양한 Java 관련 기술을 적용한 쇼핑몰 예제&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/78&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;프로젝트 9&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/78&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; (Java)&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- Spring 4 + MyBatis 3 + MariaDB&lt;/p&gt;&lt;p&gt;- 실제 프로젝트 템플릿, 중급 이상&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/93&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;과제 관리 시스템(PMS 9)&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- Spring 4 + MyBatis 3 + MariaDB&lt;/p&gt;&lt;p&gt;- Project 9을 응용한 예제, 중급 이상&lt;/p&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Java/PMS9&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;★&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Java/PMS9&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 개발 과정: 쉽게 개발하는 방법 정리&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/163&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;그룹웨어 (Groupware 9)&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- Spring 4 + MyBatis 3 + MariaDB&lt;/p&gt;&lt;p&gt;- Project 9을 응용한 예제, 초중급 연습용&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Java/PMS9&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;/a&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Database/SQL%20%EC%97%B0%EC%8A%B5&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://forest71.tistory.com/category/Database/SQL%20%EC%97%B0%EC%8A%B5&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;데이터 베이스(MariaDB)&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- SQL 실습 4(SubQuery): 초급&lt;/p&gt;&lt;p&gt;- SQL 연습 이후: 중급 이상&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Node.JS&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 기초: &lt;a href=&quot;http://forest71.tistory.com/142&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;게시판 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/147&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;nineBatis (9batis)&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/category/Node.js/Angular%20JS&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: Angular 간단 게시판 &lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/165&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: Firebase 기반 간단 게시판&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/186&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;응용: Firebase 기반 메신저 앱 - DirectTalk9 (Web과 PC 버전)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;React&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/183&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: React 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: React + Redux 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/189&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: React(Redux) + Firebase 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;자바스크립트&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/129&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: 테이블 정렬(table sorting)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/132&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기초: 테이블 컬럼 이동(Drag and Drop Table Columns)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/70&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;guupload&lt;/a&gt;: 파일 업로드 라이브러리&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/category/JavaScript/NicEdit&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;웹에디터(NicEdit)로 배우는 자바스크립트 객체지향 프로그래밍&lt;/a&gt;: 중급 이상&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/category/JavaScript/TreeGrid&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;TreeGrid&lt;/a&gt;: 초급 이상&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/category/JavaScript/%EC%95%84%EB%82%A0%EB%A1%9C%EA%B7%B8%20%EC%8B%9C%EA%B3%84&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;아날로그 시계&lt;/a&gt;(Canvas, SVG, D3): 초급 이상&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/113&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;CD9: Chart Design Tool for C3 (D3)&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/110&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;D3&lt;/a&gt;&lt;a href=&quot;http://forest71.tistory.com/110&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; 기반 차트 제작&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/133&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;두개의 테트리스 (Tetris)&lt;/a&gt;: 초급 이상&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/156&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이미지 편집기(PaintWeb) 사용법&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;검색 엔진&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/151&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Spring + SolrJ + Solr (Lucene) 기반 게시판&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Android&lt;/p&gt;&lt;p&gt;- 기초: &lt;a href=&quot;http://forest71.tistory.com/159&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Android로 계산기 만들기&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/172&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase 기반 메신저&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/175&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;예제 분석 1: Firebase realtime database&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://forest71.tistory.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Android Immortal Service (죽지않는 서비스) 구현&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<author>forest71</author>
<guid>https://forest71.tistory.com/86</guid>
<comments>https://forest71.tistory.com/86#entry86comment</comments>
<pubDate>Wed, 23 Jan 2019 22:41:33 +0900</pubDate>
</item>
<item>
<title>React 학습자료</title>
<link>https://forest71.tistory.com/192</link>
<description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;ES6(ECMAScript6) &lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://web-front-end.tistory.com/21&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://web-front-end.tistory.com/21&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://cimfalab.github.io/deepscan/2016/07/ecmascript-6&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://cimfalab.github.io/deepscan/2016/07/ecmascript-6&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.w3schools.com/js/js_es6.asp&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.w3schools.com/js/js_es6.asp&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.w3schools.com/js/js_es5.asp&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.w3schools.com/js/js_es5.asp&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;React &amp;amp; &lt;/b&gt;&lt;b&gt;&lt;b&gt;Redux&lt;/b&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://velopert.com/3613&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://velopert.com/3613&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.inflearn.com/course/react-%ea%b0%95%ec%a2%8c-velopert/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.inflearn.com/course/react-%ea%b0%95%ec%a2%8c-velopert/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.inflearn.com/course/reactjs-web/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; https://www.inflearn.com/course/reactjs-web/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://reactjs.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://medium.com/@whatauseless/%EC%95%84%EB%A7%88-%EC%9D%B4%EA%B2%8C-%EC%A0%9C%EC%9D%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B8%EA%B1%B8%EC%9A%94-react-redux-%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-1585e911a0a6&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React + Redux 플로우의 이해&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Router &lt;/b&gt;(특히 로그인 상태에 따른 처리)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://reacttraining.com/react-router/web/guides/quick-start&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://reacttraining.com/react-router/web/guides/quick-start&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Firebase &lt;/b&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://firebase.google.com/docs/?hl=ko&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://firebase.google.com/docs/?hl=ko&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;React, Redux &amp;amp; Firebase &lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://chanspark.github.io/2017/12/06/Firebase-%EA%B3%B5%EB%B6%80.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://chanspark.github.io/2017/12/06/Firebase-%EA%B3%B5%EB%B6%80.html&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=mwNATxfUsgI&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.youtube.com/watch?v=mwNATxfUsgI&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=z0QpTl5-0Bk&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.youtube.com/watch?v=z0QpTl5-0Bk&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(9, 0, 255);&quot;&gt;이상의 기초를 가지고 만든 CRUD 게시판&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/183&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;1. React 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;2. &lt;/a&gt;&lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React + Redux 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&amp;nbsp;&amp;nbsp; &lt;a href=&quot;https://forest71.tistory.com/189&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;3. React(Redux) + Firebase 게시판(CRUD) 만들기&lt;/a&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;디자인&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://material-ui.com/&lt;/a&gt; or &lt;a href=&quot;https://material-ui.com/premium-themes/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://material-ui.com/premium-themes/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;- material-ui로 만든 템플릿 &lt;a href=&quot;https://github.com/gujc71/project9_react&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/gujc71/project9_react&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://react-toolbox.io/#/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://react-toolbox.io/#/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;이상의 기초를 가지고 만든 응용 웹&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://forest71.tistory.com/186?category=667022&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase 기반 메신저 앱 - DirectTalk9 (Web과 PC 버전)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;분석해 보면 좋을 예제&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://github.com/firebase/friendlyeats-web&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/firebase/friendlyeats-web&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://github.com/web-pal/react-trello-board&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/web-pal/react-trello-board&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://react.rocks/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://react.rocks/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;라이브러리&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://github.com/brillout/awesome-react-components&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/brillout/awesome-react-components&lt;/a&gt;&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;http://khan.github.io/react-components/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://khan.github.io/react-components/&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>React</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/192</guid>
<comments>https://forest71.tistory.com/192#entry192comment</comments>
<pubDate>Wed, 23 Jan 2019 22:22:55 +0900</pubDate>
</item>
<item>
<title>오만과 편견 또는 게으름</title>
<link>https://forest71.tistory.com/190</link>
<description>&lt;p&gt;HTML의 VIDEO 태그로 지정한 동영상이 모바일 기기에서 재생되지 않는다는 연락을 SI 개발팀으로 부터 받았다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;1년전쯤 인터넷에서 검색하여 정리한 자료에 따르면, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;웹브라우저에서 동영상을 제대로 보려면 웹브라우저에서 해당 동영상의 압축 코덱을 지원해야 한다는 것이었다.&lt;/p&gt;&lt;p&gt;안드로이드의 크롬에서는 문제가 없었다.&lt;/p&gt;&lt;p&gt;안드로이드의 삼성 브라우저에서는 MP4 파일을 H264로 생성할 때 baseline 1.3으로 해야 한다고 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;아이폰의 사파리에서는 플레이가 되어야 했지만 되지 않았다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;다시 인터넷으로 자료를 찾아보니 또 다른 방식으로 작성해야 한다고 했다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;문제의 동영상을 확인하니 baseline 2.0으로 생성한 파일이라, 다시 작성하라고 말했다.&lt;/p&gt;&lt;p&gt;그리고, 아이폰은 안되는 것 같으니 국내에서 많이 사용하는 안드로이드를 선택하라고 말했다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;둘다 지원되려면 미디어 서버를 구축하거나 두개의 동영상을 생성해서 처리하라고 말했다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:282px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99687E345BF5322E33&quot; filemime=&quot;image/png&quot; filename=&quot;image1.png&quot; height=&quot;282&quot; width=&quot;282&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;SI 개발팀 팀장이 이해가 되지 않는다며 해당 동영상을 코덱별로 테스트 해보고, 좀더 찾아보겠다고 했다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고, 다음날 직접 접근하면 코덱과 관계없이 안드로이드와 아이폰에서 재생된다는 것을 찾았다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;보안을 위해 첨부한 파일은 웹 폴더가 아닌 다른 폴더에 저장하고&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Java 프로그램에서 해당 파일을 읽어서 전송해 주는 방식에 문제가 있다는 것이었다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 파일을 웹으로 직접 접근하면 문제가 없었다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;내가 틀린 것이었다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:448px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F9854D5BF5322E34&quot; filemime=&quot;image/jpeg&quot; filename=&quot;image2.jpg&quot; height=&quot;299&quot; width=&quot;448&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;일을 하다 보면 틀릴 수도 있고, 맞을 수도 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하지만 회사 내에서 나름 기술을 책임지고 있는 사람이 틀린 것이고, 나태한 태도에 부끄러웠다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;SI 개발팀 팀장의 접근법은 원래 내가 사용하던 방법이다.&lt;/p&gt;&lt;p&gt;뭔가 문제가 생겼을 때는 누군가 맞다고 이야기해도, 전에 내가 해 봤어도 처음부터 하나씩 해봐야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;동영상 코덱은 웹브라우저에서 지원해야 한다는 편견으로 제대로 테스트 해보지 않고, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;간단한 검색만 하고, 원래 안되라며 넘어갔다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;더욱이 검색한 자료에 아이폰의 사파리는 H264를 지원한다고 직접 정리했는데 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;Baseline 3.1으로 해야 한다는 다른 검색 결과를 보고 그냥 안 된다고 말한 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;상반되는 결과가 있으면 한 번 더 확인해야 했었고, 맘에 걸렸지만 넘어갔다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;삼성 웹 브라우저도 삼성 매뉴얼에서 확인했지만 1년이 지난 내용이었다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;1년전에 정리했지만, 조사한 자료가 몇 년 된 것들이었다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;바빠서 자료를 제대로 조사하지 않았었고 나중에 보강해야 지라며 넘어갔었던 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Java로 파일을 읽어서 다운로드 하는 것도, 혹시 라는 생각만 하고 이런 저런 일로 핑계대며 확인하지 않은 것이다.&lt;/p&gt;&lt;p&gt;코덱에만 신경을 썼다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:458px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99410B3C5BF5322E07&quot; filemime=&quot;image/jpeg&quot; filename=&quot;image3.jpg&quot; height=&quot;257&quot; width=&quot;458&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;결과는 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;잔뜩 흐린 날 혼자 부끄러운 하루를 보내는 것이었다.&lt;/p&gt;&lt;p&gt;하루 종일 흥겨워하며 돌아다니는 누군가를 봐야했다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발 이야기</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/190</guid>
<comments>https://forest71.tistory.com/190#entry190comment</comments>
<pubDate>Fri, 23 Nov 2018 22:18:01 +0900</pubDate>
</item>
<item>
<title>React(Redux) + Firebase 게시판(CRUD) 만들기</title>
<link>https://forest71.tistory.com/189</link>
<description>&lt;p&gt;React로 작성한 이전 예제는 게시판 데이터를 배열에 저장하기 때문에 다른 사람은 볼 수 없고, 웹 브라우저를 갱신(F5)하면 초기화 되었다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;a href=&quot;https://firebase.google.com/docs/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase를 &lt;/a&gt;이용하여 실제 게시판처럼 데이터를 서버에 저장해서 데이터가 사라지지 않고 다른 사람과 공유할 수 있도록 구현한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p&gt;&lt;b&gt;여기서 정리한 내용은 React 게시판 만들기 시리즈의 세번째 내용이다.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/183&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;1. React 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;2. &lt;/a&gt;&lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React + Redux 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp; 3. React(Redux) + Firebase 게시판(CRUD) 만들기&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Firebase는 구글에서 제공하는 서버 관련 기능들로 gmail계정으로 간편하게 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;NodeJS에서 Firebase를 사용하는 방법은 &lt;a href=&quot;http://forest71.tistory.com/category/Node.js/Firebase&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이 문서&lt;/a&gt;에 정리되어 있다.&lt;/p&gt;
&lt;p&gt;Firebase의 콘솔 사용법도 같이 정리 되었으니 &lt;a href=&quot;http://forest71.tistory.com/165&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이전 문서를&lt;/a&gt; 확인하고,&lt;/p&gt;
&lt;p&gt;여기서는 Firebase의 여러 서비스 중 데이터를 저장하는 Cloud FireStore를 이용한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;여기서 만드는 게시판은 로그인기능이 없기 때문에 아무나 글을 쓰고 저장할 수 있도록 Cloud FireStore를 테스트 모드로 설정하고, 관련 설정은 &lt;a href=&quot;http://forest71.tistory.com/167&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이 문서를 참고하면&lt;/a&gt; 된다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;배열이 아닌 Cloud FireStore에 사용자가 작성한 게시물을 저장한다.&lt;/p&gt;
&lt;p&gt;이외에 Firebase에 대한 사용법은 &lt;a href=&quot;https://firebase.google.com/docs&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase 문서&lt;/a&gt;를 참고하고, &lt;a href=&quot;https://firebase.google.com/docs/web/setup&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이 문서 중에서 Cloud FireStore 관련 문서&lt;/a&gt;(데이터 가져오기, 데이터 저장등)를 읽어 보는 것이 좋다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;React로 작성한 &lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이전 게시판 예제&lt;/a&gt;와 &lt;a href=&quot;http://forest71.tistory.com/165?category=667022&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Nodejs 기반으로 작성한 Firebase 게시판 예제&lt;/a&gt;를 합치는 것으로,&lt;/p&gt;
&lt;p&gt;다음과 같이 App_reduce.js 파일의 내용만 Firebase에 맞추어 조금만 수정하면 작성할 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그전에 다음과 같이 Firebase와 미들웨어를 설치 한다.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;npm install --save &lt;b&gt;firebase&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;npm install --save &lt;b&gt;redux-thunk&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;redux-thunk를 설치하고, redux-thunk를 사용할 수 있도록 다음과 같이 index.js 파일을 수정한다. &lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;import thunk from 'redux-thunk';&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(140, 140, 140);&quot;&gt;import App from './App';&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(140, 140, 140);&quot;&gt;import board_reducer from './App_reducer';&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;let store = createStore(board_reducer&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; , window.__REDUX_DEVTOOLS_EXTENSION__ &amp;amp;&amp;amp; window.__REDUX_DEVTOOLS_EXTENSION__()&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;, applyMiddleware(thunk)&lt;/span&gt; );&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_firestore/blob/master/src/index.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;index.js&lt;/a&gt; &lt;/p&gt;&lt;p&gt;그리고, Firestore.js 파일을 생성하여 다음과 같이 작성한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import firebase from 'firebase';&lt;br /&gt;&lt;br /&gt;var &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;config &lt;/span&gt;= {&lt;br /&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; apiKey: &quot;AIzaSyDbsU_&quot;,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; authDomain: &quot;fir-example-.firebaseapp.com&quot;,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; databaseURL: &quot;https://fir-example-.firebaseio.com&quot;,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; projectId: &quot;fir-example-&quot;,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; storageBucket: &quot;fir-example-.appspot.com&quot;,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; messagingSenderId: &quot;&quot;&lt;/span&gt;&lt;br /&gt;};&lt;br /&gt;firebase.initializeApp(config);&lt;br /&gt;var firestore = firebase.firestore();&lt;br /&gt;&lt;br /&gt;const settings = {timestampsInSnapshots: true};&lt;br /&gt;firestore.settings(settings);&lt;br /&gt;&lt;br /&gt;export default &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;firestore&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_firestore/blob/master/src/Firestore.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firestore.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;React에서 Firestore에 접속하기 위한 정보로 config의 내용을 채워야 한다.&lt;/p&gt;
&lt;p&gt;config의 내용은 Firebase 콘솔에서 가져올 수 있고, 가져오는 방법은&lt;a href=&quot;http://forest71.tistory.com/165&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; 이전 문서&lt;/a&gt;를 참고하면 된다. &lt;/p&gt;
&lt;p&gt;Firestore에 접속한 연결은 firestore로 외부로 보내지고 (export ),&lt;/p&gt;
&lt;p&gt;다음 코드에서처럼 firestore로 사용된다 [라인 2, 7, 23, 32, 40].&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;다음과 같이 App_reduce.js에 firebase_board_list, firebase_board_remove, firebase_board_save 3개의 함수를 추가한다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/c7cad2112f4f189c51d1030050b52aee.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;3 개의 파일은 Firebase(FireStore)의 게시판 데이터를 가지고 오는 리스트, 선택한 게시물을 삭제하는 삭제, 게시글을 수정하거나 새로 등록하는 글 저장 함수이다. &lt;br /&gt;&lt;br /&gt;먼저, firebase_board_list()는 FireStore에서 데이터를 가지고 와서 기존의 state.boards에 넣어주는 기능을 한다 [라인 5].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;작성된 날짜(brddate)를 기준으로 최근 데이터가 먼저 오게(desc) 데이터들을 가지고 와서 (get) [라인7 ]&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;데이터의 개수 만큼 반복(forEach)해서 별도의 배열(rows)에 넣어주고 [라인 10],&lt;/p&gt;
&lt;p&gt;화면에 출력하기 위해 board_list() 함수를 호출해서 Redux로 보관한다 [라인 15].&lt;/p&gt;
&lt;p&gt;데이터의 개수 만큼 반복하는 것은 전송 받은 데이터 리스트 구조가 JSon 배열이라 필요한 정보만 추출(doc.data() – 게시물 하나)해서 보관하기 위한 것이다 [라인 11].&lt;/p&gt;
&lt;p&gt;전송 받은 데이터를 그대로 배열에 넣어서 사용해도 된다 (대신 관련한 코드를 좀더 수정해야 한다.).&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;이전 예제에서는 board_list()함수를 사용하지 않았는데, 여기서는 state.boards에 데이터를 저장하는 역할을 한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;개념상 &lt;/span&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;Redux로 저장된 state.boards의 데이터를 가지고 오는 것이 되어야 할 것 같지만 반대로 저장하는 역할을 한다.&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;즉, firebase_board_list()로 서버에서 데이터를 가지고 오고, board_list()로 state에 저장하는 구조이다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;firebase_board_remove()는 주어진 글번호로(brdno) FireStore에 있는 데이터를 삭제(delete)하는 명령어를 실행한다 [라인 20].&lt;/p&gt;
&lt;p&gt;삭제하고 나면(then) [라인 23],&lt;/p&gt;
&lt;p&gt;화면에 출력하기 위해 데이터를 가지고 있는 state.boards에서 제거하기 위해 board_remove() 함수를 호출한다 [라인 24].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_remove()는 기존 코드와 동일하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;firebase_board_save()함수는 수정인지 신규 등록인지 구분해서 [라인 31]&lt;/p&gt;
&lt;p&gt;수정이면 update [라인 10], &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;신규 등록이면 set으로 데이터를 저장한다 [라인 35].&lt;/p&gt;
&lt;p&gt;수정이든 신규등록이든 저장하고 나면(&lt;b&gt;then&lt;/b&gt;), board_save() 함수를 호출해서 state.boards의 값을 수정하여 화면에 반영되게 한다 [라인 37, 41].&lt;/p&gt;
&lt;p&gt;board_save()의 코드도 기존 코드와 동일하다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사용자가 행을 선택하면 호출하는 board_read()는 데이터 변경이 없기 때문에 수정없이 그대로 사용한다.&lt;/p&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;initialState 에서 선언했던 최대 글번호(maxNo)를 제거한다 [라인 47].
&lt;p&gt;Firestore에 저장하기 때문에 Firestore에서 제공하는 문서 번호(id)를 글번호로 사용한다 [라인 33].&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상으로 App_reducer.js 파일을&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt; 이렇게 수정한 뒤, &lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;기존에 각 컴포넌트에서 사용한 board_remove(), board_save() 함수를 사용한 각 컴포넌트에서 firebase_ 을 앞에 붙여 추가한 3개의 함수를 사용하도록 하고,&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;글 리스트의 경우에는 state.boards 를 사용하기 전에 firebase_board_list()를 호출하도록 수정한다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;글리스트(BoardList) 먼저 수정하면 다음과 같다.&lt;p&gt;App.js에 작성했던 리스트 코드를 분리하여 별도의 컴포넌트로 제작하였다.&lt;/p&gt;&lt;p&gt;이해를 위해 App.js에 그대로 작성했지만, React에서는 기능별로 세분화해서 컴포넌트로 사용하는 것이 권장된다.&lt;br /&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/77723b6aac6bd171284f327b86473366.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 리스트를 구현 할 것이기 때문에 Reducer에 작성해 놓은 firebase_board_list()를 사용한다고 선언한다(import) [라인 2].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;컴포넌트가 생성되는 시점에 발생하는 이벤트인 componentDidMount에서 firebase_board_list()를 실행한다 [라인 6].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;firebase_board_list()를 호출하면 Reducer의 state.boards에 게시글들이 채워지고&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이것을 바라보고 있는 this.props.boards에 전달되면서 화면에 출력된다 [라인 9].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;this.props.boards는 앞서 정리한 데로 mapStateToProps으로 연결하였다 [라인 16~23].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각 게시물을 출력하는 BoardItem은 데이터 삭제를 위해 board_remove() 대신에 firebase_board_remove()를 호출한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import { board_read, &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;firebase_board_remove &lt;/span&gt;} from './App_reducer'&lt;br /&gt;&lt;br /&gt;const BoardItem = ({row, inx, board_read, firebase_board_remove}) =&amp;gt; (&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;tr&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;td&amp;gt;{inx}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;td&amp;gt;&amp;lt;a onClick={() =&amp;gt; { board_read(row.brdno) } }&amp;gt;{row.brdtitle}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;td&amp;gt;{row.brdwriter}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;td&amp;gt;{row.brddate}&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;td&amp;gt;&amp;lt;a onClick={() =&amp;gt; { &lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;firebase_board_remove&lt;/span&gt;&lt;/b&gt;(row.brdno) }}&amp;gt;X&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/tr&amp;gt;&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;const &lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;mapDispatchToProps &lt;/span&gt;= dispatch =&amp;gt; ({&lt;br /&gt;&amp;nbsp; board_read: brdno =&amp;gt; dispatch(board_read(brdno)),&lt;br /&gt;&amp;nbsp; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;firebase_board_remove: brdno =&amp;gt; dispatch(firebase_board_remove(brdno))&lt;/span&gt;&lt;br /&gt;})&lt;br /&gt;&lt;br /&gt;export default connect(null, &lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;mapDispatchToProps&lt;/span&gt;)(BoardItem)&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_firestore/blob/master/src/App_BoardItem.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;BoardItem.js&lt;/a&gt; &lt;/p&gt;&lt;p&gt;코드의 다양성을 보여 주기 위해 BoardItem에서는 기존과 다른 방법으로 App_reducer의 함수를 호출하도록 했다.&lt;/p&gt;&lt;p&gt;BoardList 컴포넌트에서는 import문에서 사용할 함수를 선언하고 다음과 같이 사용했다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;b&gt;this.props.dispatch&lt;/b&gt;(firebase_board_list());&lt;br /&gt;&lt;/p&gt;&lt;p&gt;firebase_board_remove도 이렇게 사용해도 되지만 &lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;mapDispatchToProps &lt;/span&gt;를 사용해서&lt;/p&gt;&lt;p&gt;App_reducer에서 사용할 함수를 다시 선언하고 BoardItem에 연결(connect)할 때 파라미터를 넘기는 방식으로 사용한다.&lt;/p&gt;&lt;p&gt;이렇게 사용하면 this.props.dispatch를 생략하고 firebase_board_remove() 함수만 호출해서 사용할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[ 참고 ] connect에서 첫번째 파라미터는 mapStateToProps로 컴포넌트에서 사용할 변수들을 선언한다. BoardItem에서는 사용할 변수가 없어서 null로 지정하였다. mapDispatchToProps 는 사용할 함수를 선언하는 것이다. &lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;글 쓰기 폼(BoardForm)에서는 board_save() 대신에 firebase_board_save로 바꾸어 주면 된다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import { &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;firebase_board_save&lt;/span&gt; } from './App_reducer'&lt;br /&gt;&lt;br /&gt;class BoardForm extends Component {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; handleSave = () =&amp;gt; {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.props.dispatch(&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;firebase_board_save&lt;/span&gt;(this.state));&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.setState (this.initialSelectedBoard);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_firestore/blob/master/src/App_BoardForm.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;BoardForm.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;BoardForm에서는 this.props.dispatch로 호출했다.&lt;/p&gt;&lt;p&gt;mapDispatchToProps와 this.props.dispatch 중 적절한 방식으로 작성하면 되지만 mapDispatchToProps가 많이 사용된다.&lt;/p&gt;&lt;p&gt;(개인적으로 귀찮아서...)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이상으로 간단하게 Redux 예제를 Firebase Cloud Firestore로 구현하였다.&lt;/p&gt;
&lt;p&gt;기존 코드에 Firestore의 CRUD를 처리하는 함수를 추가하는 것으로 간단하게 구현하였다.&lt;/p&gt;
&lt;p&gt;즉, React(Redux)로 사용자의 PC에서 화면에 데이터를 출력하고 관리하는 기능을 하도록 하고,&lt;/p&gt;
&lt;p&gt;Firestore로 서버에 데이터를 저장하고 관리하는 기능을 하도록 서로의 역할을 나눠서 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;다른 브라우저로 접속해서 데이터가 동일하게 출력되는 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Firestore(Cloud Firestore)는 Realtime database와 같이 실시간 데이터베이스 이다.&lt;/p&gt;
&lt;p&gt;서버의 데이터에 변경이 생기면 현재 접속한 클라이언트에 실시간으로 데이터가 보내진다.&lt;/p&gt;
&lt;p&gt;실시간으로 동기화 된다는 것으로, 이 기능을 이용하여 많은 예제들이 Fireabse 기반 메신저를 제작하였다.&lt;/p&gt;
&lt;p&gt;상세한 설명은 &lt;a href=&quot;https://firebase.google.com/docs/firestore/query-data/listen?hl=ko&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase 문서에서 &lt;/a&gt;확인할 수 있다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;b&gt;이번에는 앞서 작성한 예제를 실시간 데이터 방식으로 작성한다. &lt;/b&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;소스는 &lt;a href=&quot;https://github.com/gujc71/react_firestore/blob/step2/src/App_reducer.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github의 step2 브랜치&lt;/a&gt;에서 받을 수 있다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/7d22cd7e001167f246032df2c9bb4aac.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;변경 방법을 간단하게 정리하면, 데이터 변경 사항을 글 리스트에서 받아서 state.boards에 반영하여 보여주는 식으로 작성한다.&lt;/p&gt;
&lt;p&gt;코드에서 보듯이 글 리스트(firebase_board_list)에서 거의 모든 기능이 구현된다.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;이전에는 get() 메소드를 사용했지만, onSnapshot()을 사용하고 [라인 4],&lt;/p&gt;
&lt;p&gt;전송 받은 데이터의 개수(forEach) 만큼 반복했다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이전과 가장 큰 차이는 전송된 데이터의 종류(change.type)이다 [라인 7, 11, 14].&lt;/p&gt;
&lt;p&gt;현재 데이터(행)가 신규 추가인지(add), 수정 인지(modified), 삭제  인지를(removed) 나타낸다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이 종류에 따라 board_save()나 [라인 9, 12] board_remove()를 호출해서[라인 15] state.boards의 데이터를 관리한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그리고, firebase_board_remove(), firebase_board_save()에서 &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;처리 후 콜백(then)으로 board_save()나 board_remove()를 호출할 필요가 없어져 제거한다 [라인 25, 35, 37].&lt;/p&gt;
&lt;p&gt;이 코드들을 모두 리스트에 작성하였다  [라인 9, 12, 15] .&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그리고 onSnapshot으로 호출된 콜백 함수는 함수가 종료 되어도 계속 실행되기 때문에 서버의 데이터 변경 정보를 계속 수신해서 반영한다.&lt;/p&gt;
&lt;p&gt;다른 사람이 작성한 것도 모두 실시간으로 제공된다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;주의&amp;nbsp;&lt;/span&gt; onSnapshot으로 호출된 콜백 함수는 계속 실행되기(Listening) 때문에 필요하지 않을 경우에는 사용을 중지해야 한다. &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;중지 방법은 &lt;a href=&quot;https://firebase.google.com/docs/firestore/query-data/listen?hl=ko&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firestore 문서에서 [리스너 분리]&lt;/a&gt;항목을 참조하면 된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;이상으로 React, Redux, Firebase 순으로 기초적인 게시판 만들기를 정리하였다.&lt;/p&gt;
&lt;p&gt;이해를 위해 Table 테그로 디자인 없이 작성하였는데,&lt;/p&gt;
&lt;p&gt;그림과 같이 &lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Material-ui&lt;/a&gt;와 같은 React용 디자인 라이브러리를 사용하면 제법 쓸만한 SPA(Single Page Application) 웹사이트를 만들 수 있다.&lt;/p&gt;
&lt;p&gt;게시판에 대한 개념이 이해가 되었으면, &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://material.io/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Google's Material Design&lt;/a&gt;을 준수하는  &lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Material-ui&lt;/a&gt;등의 디자인 라이브러리를 적용하여 다음과 같이 사용하면 된다.&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9962AC4C5BDDA2571B&quot; filemime=&quot;image/png&quot; filename=&quot;screenshot.png&quot; height=&quot;399&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이상의 게시판에 기능을 보강하고&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/auth/?hl=ko&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Fireabse 인증(로그인) 기능&lt;/a&gt;, &lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Material-ui&lt;/a&gt; 등을 추가하여 &lt;a href=&quot;https://github.com/gujc71/project9_react&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Project9 &lt;/a&gt;템플릿을 제작하였다.&lt;/p&gt;
&lt;p&gt;실제 프로젝트를 쉽게 할 수 있도록 만든 템플릿으로 (작성된 코드를 Copy &amp;amp; Paste 하여 개발하기 위한 예제들)&lt;/p&gt;
&lt;p&gt;이상의 개념을 가지고 응용하는 방법을 이해하는데 도움을 줄 수 있으니 확인해보면 도움이 될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gujc71/project9_react&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Project9 &lt;/a&gt;템플릿을 기반으로 &lt;a href=&quot;http://forest71.tistory.com/186&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;DirectTalk9 &lt;/a&gt;이라는 실시간 메신저를&lt;a href=&quot;https://github.com/gujc71/DirectTalk9_web&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; 웹 버전&lt;/a&gt;으로 제작하였고,&lt;/p&gt;
&lt;p&gt;다시 이것을 &lt;a href=&quot;https://github.com/gujc71/DirectTalk9_pc&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Electron을 이용하여 PC 버전&lt;/a&gt;으로 제작하였다.&lt;/p&gt;
&lt;p&gt;React Native를 쓰면 모바일까지….&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>React</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/189</guid>
<comments>https://forest71.tistory.com/189#entry189comment</comments>
<pubDate>Sun, 04 Nov 2018 21:57:03 +0900</pubDate>
</item>
<item>
<title>React + Redux 게시판(CRUD) 만들기</title>
<link>https://forest71.tistory.com/184</link>
<description>&lt;p&gt;&lt;a href=&quot;http://forest71.tistory.com/183&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;앞서서 정리한 React 기반 게시판&lt;/a&gt;을 Redux로 구현한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;React 기반 게시판에서 글을 수정할 경우,&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;사용자가 선택한 행을 부모에게 알리고, 부모는 이것을 받아서 입력 폼으로 전송하는 방식으로 구현하였다.&lt;br /&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;u&gt;사용자가 &lt;/u&gt;입력을 완료하고 저장하면, 다시 입력한 내용을 부모에게 전송해서 부모의 state 변수에 저장한다.&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;정리하면, 데이터 저장소(state)가 부모(App.js)에게 있기 때문에 항상 부모를 거쳐서 모든 기능이 구현되어야 한다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p&gt;&lt;b&gt;여기서 정리한 내용은 React 게시판 만들기 시리즈의 두번째 내용이다.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/183&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;1. React 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; 2. React + Redux 게시판(CRUD) 만들기&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/189&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;3. React(Redux) + Firebase 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;데이터 저장소와 데이터를 관리하는(CRUD) 기능(함수)등을 한 곳에 두고&lt;/span&gt;&lt;br /&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;각 컴포넌트들은 각자의 기능에 맞추어, 이 함수만 호출하도록 작성한다면 깔끔하고 쉬운 프로그램을 개발 할 수 있을 것이다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;이러한 기능을 제공하는 라이브러리 중에 많이 사용하는&lt;b&gt; Redux&lt;/b&gt;로 앞서 제작한 게시판을 간단하게 구현한다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Redux 기본 문법과 이해는 자료가 많으니 검색해 보길 바라고, 여기서는 Redux로 구현하면서 사용법을 간단하게 정리한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gujc71/redux_board&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;소스는 Github&lt;/a&gt;에서 받을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;먼저, create-react-app로 새로운 프로젝트를(redux_board) 생성하거나 &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;앞서 정리한 예제를 수정하면서 따라한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt;-react-app redux_board&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;line&quot;&gt;cd &lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;line&quot;&gt;redux_board&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Redux를 설치한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;npm install --save redux react-redux&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;create-react-app로 생성된 index.js 파일을 열어서 다음과 같이 문장을 추가한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import React from 'react';&lt;br /&gt;import ReactDOM from 'react-dom';&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;import { createStore } from 'redux';&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;import { Provider } from 'react-redux';&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;import App from './App';&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;import board_reducer from './App_reducer';&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;let store = createStore(&lt;b&gt;board_reducer&lt;/b&gt;, window.__REDUX_DEVTOOLS_EXTENSION__ &amp;amp;&amp;amp; window.__REDUX_DEVTOOLS_EXTENSION__());&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;ReactDOM.render(&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;Provider store={store}&amp;gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;App /&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; &amp;lt;/Provider&amp;gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById('root')&lt;br /&gt;);&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/redux_board/blob/master/src/index.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;index.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;데이터 입출력과 관련된 모든 기능은 &lt;b&gt;App_reducer.js&lt;/b&gt; 파일에 구현&lt;/u&gt;되어 있고,&lt;/p&gt;
&lt;p&gt;이상의 코드는 이 App_reducer.js 파일을 Redux의 문법에 맞추어 App 전체에서 사용할 수 있도록 등록하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;App_reducer.js 파일은 Redux의 reducer로 다음과 같이 데이터 관리와 관련된 기능을 구현해 둔다.&lt;br /&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/be73c29599012ea5b40b692f7eda6e1e.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Reducer에는 지켜야 하는 형식이 있어서 복잡해 보이는데,&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;중요한 것은 데이터를 저장하는 state와 이를 관리하는 board_reducer 함수 이다 [라인 42]&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;state는 별도로 선언하지 않고,&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_reducer 함수 파라미터에서 initialState[라인 23]로 초기값을 지정하면서 사용한다 [라인 42].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;initialState는 Json으로 구성되어 앞서의 React 게시판에서 데이터를 저장하는 state 구조와 동일하다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;최대 글 번호를 가지는 maxNo, 게시물 데이터를 보관하는 boards, 데이터를 수정하기 위해 현재 선택한 글 정보를 가지는 selectedBoard로 구성하였다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_reducer 함수에 대해서 정리하면 &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_reducer 함수에서 모든 처리가 이루어지고,&lt;/p&gt;
&lt;p&gt;파라미터로 제공되는 action의 종류(type)에 따라 어떤 처리(CRUD)를 할 것 인지를 구현한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;action 종류(type)는 4가지의 상수로(const)로 구현되어 있다 [라인 1~4].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 리스트를 제공하는 BOARD_LIST [라인 4], &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;사용자가 신규로 작성하거나 수정한 내용을 저장하는 BOARD_SAVE [라인 1],&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;수정하기 위해 글을 선택하는 BOARD_READ [라인 3],&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글을 삭제하는 BOARD_REMOVE로 CRUD를 구성하였다 [라인 2].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;App_reducer.js 파일 외부에서는 board_reducer 함수를 호출하는 것이 아니고,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;액션 종류에 따른 각각의 함수 board_list, board_save, board_read, board_remove를 호출해서 사용한다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;이 함수를 호출하면 지정된 action type이 같이 파라미터와 같이 제공된다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;board_list는 그냥 전체 글 리스트를 반환 하기 때문에 파라미터 없이 action type만 지정한다 [라인 21].&lt;br /&gt;(의미상 선언한 것으로 사용하지 않는다.)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;board_save은 파라미터로 저장할 게시글 정보(data)가 필요하고 [라인 6~9],&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_read와 board_remove은 수정하거나 삭제할 글번호(brdno)가 필요하다 [라인 11~14, 16~19].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;따라서 각각 라인처럼 필요한 정보를 파라미터로 지정하고&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_reducer에서는 action.data, action.brdno로 파라미터 값을 가지고 와서 사용한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;board_reducer에서 구현한 각 액션의 기능은 &lt;b&gt;모두 각 컴포넌트에서 사용한 코드&lt;/b&gt;들을 모은 것이다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;게시물과 관련된 CRUD 코드들을 board_reducer에 모아서 사용하는 것이다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;좀더 상세하게 정리하면,&lt;/p&gt;
&lt;p&gt;글 리스트는 CRUD 개념상 정의한 것으로 여기서는 사용하지 않으니 넘어간다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;글 리스트 구현은 함수로 뭔가를 처리하는 것이 아니고,&lt;/p&gt;&lt;p&gt;state의 boards 변수의 전체 값을 가지고 와서 출력하는 것이기 때문에 구현하지 않는다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;글 저장은(BOARD_SAVE) 글 번호(brdno)의 값이 있으면 수정이니&amp;nbsp;
&lt;p&gt;boards의 모든 행을 검사해서(map), 글 번호가 같은 게시물이면 새로운 게시물(data)를 반환하고 그렇지 않으면 기존 게시물(row)을 반환해서 새로운 배열을 생성한다 [라인 52] .&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;선택한 행은(selectedBoard) {}로 초기화 하고, 기존 state 값(…state)과 같이 반환한다 [라인 52] .&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;state에 변수가 3개 있으니, maxNo를 같이 반환하는 것과 같다 [라인 52] .&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이 코드는 다음과 같이 작성해도 된다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;maxno: state.maxno&lt;/span&gt;, boards: boards.map(생략), selectedBoard: {} }; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;변수가 많을 경우 이와 같이 모든 변수를 나열하는 것 보다 ...state로 작성하는 것이 좋다 (버그 방지).&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 번호(brdno)의 값이 없으면 [라인 49],&lt;/p&gt;
&lt;p&gt;신규라 기존 게시물 데이터(boards)에 새로운 게시물을(data) 추가(concat)해주고, 글 번호(maxNo)를 1 증가 시켜 놓는다 [라인 50] .&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 삭제는(BOARD_REMOVE)는 게시물 데이터 (boards)에서 삭제할 글 번호에 해당하는 행을 찾아서 지우는 방식이 아니고,&lt;/p&gt;&lt;p&gt;삭제할 게시글이 아닌 게시물만 모아서(fiter) 배열로 다시 생성하는 방식으로 구현한다 [라인 54] .&lt;/p&gt;&lt;p&gt;조건에 부합하는 데이터(fiter)만 모아서 다시 배열을 만드는 방식이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;성능 등의 여러가지 이유로 이 방식이 권장되고 있다.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 수정을 위한 선택(BOARD_READ)은 주어진 글번호(brdno)에 맞는 게시글을 찾아서(find) selectedBoard로 지정하면 된다 [라인 58] .&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;나머지(maxNo, boards)는 ...state로 지정해서 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;React로 작성된 코드를 Redux로 바꾸는 것은 &lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;지금까지 정리한 App_reducer.js의 내용이 핵심이고, 다른 컴포넌트에서는 호출해서 사용만 하면 된다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;App_reducer.js에서는 저장할 데이터(state)의 초기값 지정(initialState)과 역할별 기능을 board_reducer에 구현하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;데이터와 데이터를 관리하는 기능들을 모두 리듀서 파일에 작성하기 때문에 App.js 파일에서는 다음과 같이 깔끔하게 정리된 코드를 볼 수 있다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/fbc061e4f62efbf35601887cd2fa624d.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;데이터를 저장하고, 삭제하고, 선택하는 기능들이 모두 리듀서 파일로 이동하고,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;App.js에서는 게시글 리스트를 적절하게 출력하고, 주요 컴포넌트를 호출한다 [라인 14, 25].&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;코드 하단에 있는 mapStateToProps에서는 App 컴포넌트에서 사용할 변수 (데이터)를 선언한다 [라인 35~39].&lt;/p&gt;
&lt;p&gt;여기서는 게시물 데이터만 가져와서 출력하기 때문에 &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Reducer의 state.boards를 boards로 받아서[라인 37] App 컴포넌트로 넘겨 준다(connect) [라인 41].&lt;/p&gt;
&lt;p&gt;Reducerr에 있는 변수(boards)를 가지고 올 때에는 이런식으로 선언해서 가시고 오고 [라인 35~41]&lt;/p&gt;
&lt;p&gt;this.props(.boards)로 해당 변수를 이용한다 [라인 9].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;다음으로 글 항목(BoardItem)을 살펴보면, 코드는 다음과 같다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/cf9a27078f84d5dd646c3533ac6fdd40.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;부모로부터 받은 게시물 하나(this.props.row)를 TR 테그를 생성해서 적절하게 값을 출력한다.&lt;/p&gt;
&lt;p&gt;글 항목(BoardItem)은 게시글을 출력하고,&lt;/p&gt;
&lt;p&gt;사용자가 행을 선택하면(Click) 선택된 행 정보를 알려주는 역할만 하기 때문에 기존에도 코드가 별로 없었고, Redux에서도 큰 변경이 없다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;수정사항이 별로 없어서, 자바스크립트 문법을 다양하게 적용해 봤다.&lt;/p&gt;
&lt;p&gt;제목을 클릭하면 글 수정, 삭제(X) 버튼을 클릭하면 삭제하도록 이벤트 핸들러를 작성한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;기존에는 각각의 onClick에 [this.함수]방식으로 작성해서 Click 이벤트에 이벤트 핸들러를 연결했다.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;이번에는 이벤트 핸들러를 화살표(=&amp;gt;) 함수로 작성하고, &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;화살표 함수에서 다른 함수를 호출하는 방식으로 구현했다 [라인 17, 20].&lt;/p&gt;&lt;p&gt;HTML에서 자바스크립트 함수를 직접 작성하는 것으로,&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;제목을 클릭하면 화살표 함수로 작성된 이벤트 핸들러에서 글번호(brdno)를 파리미터로 handleUpdateForm 함수를 호출한다 [라인 17].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;handleUpdateForm 함수에서 실제로 데이터를 저장하는 리듀스(App_reducer)에 있는 board_read를 호출한다 [라인 7].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 삭제는 이러한 과정을 생략하고 리듀스(App_reducer)에 있는 board_remove를 호출해서 데이터를 삭제한다 [라인 20].&lt;/p&gt;
&lt;p&gt;하나는 함수를 거쳐서 실행한 것이고 하나는 직접적으로 실행한 것이다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;코드를 다양하게 구현할 수 있다는 걸 보여주기 위해 작성한 코드이다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;이상에서 주의해야 할 것은 기존의 기능들이 사라지고,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 리듀스(App_reducer)에 구현해 놓은 함수 중에서 필요한 것을(board_read, board_remove) 선택해서 선언하고 [라인 4], &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;필요에 따라 호출하면 된다는 것이고 [라인 8, 20], &lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;그냥 함수를 호출하는 것이 아니고, 부모에게서 받았다는 의미로 &lt;u&gt;this.props.dispatch를 이용해서 호출&lt;/u&gt;한다는 것이다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;BoardForm에서는 글쓰기와 글 수정 기능이 구현되었다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/d5ee6eaaab5cbf677257f3fa19212ae3.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;앞서의 예제에서 하나로 정리하지 않고 2가지 방식으로 정리한 글쓰기 코드(App5, App6)를 여기에서 정리하였다.&lt;/p&gt;&lt;p&gt;따라서 글쓰기 코드와 설명이 앞서 예제의 내용과 조금 더 차이가 있다 (둘을 겹합).&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;먼저, 사용자가 입력한 글 제목(brdtitle)과 작성자 이름(brdwriter)은 onChange 이벤트를 이용하여BoardForm 컴포넌트의 자체 state에 저장한다 [라인 15~17].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;사용자가 저장 버튼을 클릭하면 [라인 33], 리듀서(App_reducer)에 구현해 놓은 board_save()함수를 호출하여 저장한다 [라인 19].&lt;/p&gt;&lt;p&gt;호출할때, 사용자가 입력한 값을 가지고 있는 내부 state 변수를 파라미터로 넘기고,&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;리듀서의 board_save()에서 boards 배열에 이 파라미터를 새로운 행으로 추가하면 관련 컴포넌트가 갱신되면서 행(TR-BoardItem)이 추가되어 화면에 출력된다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;입력 상자(input)가 내부 state 변수의[라인 7] 값을 바라보고 있기 때문에 [라인 31, 32]&lt;/p&gt;
&lt;p&gt;setState로 각 변수의 빈 값을 가진 initialSelectedBoard를 지정해서 초기화 시켰다.&lt;/p&gt;&lt;p&gt;입력 상자의 값이 지워진다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 수정은 사용자가 수정할 행을 선택하면 board_read 함수가 실행되면서 selectedBoard에 선택된 행의 정보가 저장된다 [라인 39~43].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;BoardForm에서는 mapStateToProps를 이용해서 리듀서(App_reducer)의 selectedBoard를 가지고 와서 화면에 출력한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;BoardItem에서와 동일하게 mapStateToProps에서는 컴포넌트에서 사용할 리듀서의 변수들을 선언해서 사용한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;사용할 때에는 this.props.selectedBoard로 사용하면 되고, &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;여기서는 props가 바뀔 때 발생하는 이벤트인 componentWillReceiveProps 를 이용해서 작성했다 [라인 24].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;사용자가 선택할 때 마다 selectedBoard의 내용이 바뀌고, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;이때마다 selectedBoard를 바라보고 있는 BoardForm의 componentWillReceiveProps의 이벤트가 실행된다 [라인 24].&lt;/p&gt;
&lt;p&gt;componentWillReceiveProps에서 현재 선택된 행을(selectedBoard) 내부 state에 넣어주면 [라인 25], &lt;br /&gt;&lt;/p&gt;&lt;p&gt;state를 바라보고 있는 입력상자에 값들이 출력되어 사용자가 수정하게 된다 [라인 31, 32 ].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그리고, 내부 state에 있는 글번호(brdno) 값의 유무로 글 수정과 새 글쓰기가 구분되어 처리 되도록 리듀서에 작성하였다.&lt;/p&gt;&lt;p&gt;수정일 경우에는 selectedBoard의 글번호를 받아서 내부 state에 글번호가 있게 되고  [라인 25],&lt;/p&gt;&lt;p&gt;신규일 경우에는 initialSelectedBoard로 초기화 되어 글번호가 없다 [라인 21].&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;이상으로 Redex 사용 예제를 정리하였다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;앞서서 React만으로 구현한 예제 코드와 비교하면서 살펴보면 Redex가 얼마나 좋은지 쉽게 이해 될 것이다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;한마디로 다시 정리하면, 코드 복잡도가 줄어들어 버그나 유지 보수에 많은 이점이 있다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;그리고, 이번에는 이 편리한 것을 더 편리하게 사용하게 해주는 redux-actions을 적용한다.&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;리듀스에서 함수 선언시 역할(type)과 사용할 파라미터를 지정하는 것은 불편한 작업이고,&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;board_reducer함수에서 switch문의 사용은 여러가지 문제로 사용이 추천되지 않고 있다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이것을 수정하는 것으로, 먼저 다음과 같이 redux-actions를 설치한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;소스는 &lt;a href=&quot;https://github.com/gujc71/redux_board/tree/step2&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github의 step2 브랜치(branch)&lt;/a&gt;를 다운로드 받으면 된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;&lt;span class=&quot;line&quot;&gt;npm install --save &lt;/span&gt;redux-actions&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;설치한 redux-actions에서 사용할 createAction, handleActions 함수를 가지고 온다.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;import { createAction, handleActions } from 'redux-actions';&lt;/span&gt;

&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;const BOARD_SAVE = 'SAVE';
const BOARD_REMOVE = 'REMOVE';
const BOARD_READ = 'READ';
const BOARD_LIST = 'LIST';
&lt;/span&gt;
export const board_save = &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;createAction&lt;/span&gt;(BOARD_SAVE);
export const board_remove = &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;createAction&lt;/span&gt;(BOARD_REMOVE, &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;brdno =&amp;gt; brdno&lt;/span&gt;);
export const board_read = &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;createAction&lt;/span&gt;(BOARD_READ);
export const board_list = &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;createAction&lt;/span&gt;(BOARD_LIST);

const initialState = {
  ~~생략 ~~
};

export default &lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;handleActions&lt;/span&gt;&lt;/b&gt;({
    &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;[BOARD_SAVE]:&lt;/span&gt; (state, { &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;payload&lt;/span&gt;: data }) =&amp;gt; {
        &lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;let boards = state.boards;&lt;/span&gt;
         ~~생략 ~~
    },
    &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;[BOARD_REMOVE]: &lt;/span&gt;(state, { &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;payload&lt;/span&gt;: brdno }) =&amp;gt; {
        &lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;let boards = state.boards;&lt;/span&gt;
        return {...state, boards: boards.filter(row =&amp;gt; row.brdno !== brdno), selectedBoard: {} };
    },
    &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;[BOARD_READ]:&lt;/span&gt; (state, { &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;payload&lt;/span&gt;: brdno }) =&amp;gt; {
        &lt;span style=&quot;color: rgb(0, 85, 255);&quot;&gt;let boards = state.boards;&lt;/span&gt;
        return {...state, selectedBoard: boards.find(row =&amp;gt; row.brdno === brdno)
        };
    }
}, initialState);&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/redux_board/blob/step2/src/App_reducer.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App_reducer.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;createAction은 이상의 코드에서 작성된 것과 같이 그냥 역할(type)만 지정해서 호출하면 해당 역할을 하는 함수가 생성된다.&lt;/p&gt;&lt;p&gt;글번호(brdno)를 파라미터로 받는 경우 board_remove에서 사용한 것처럼 표시해도 되고, 다른 함수들처럼 생략해도 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;board_reducer 함수는 handleActions으로 바꾸고&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Switch 문 대신에 Json 형식으로 각 역할에 따라 화살표(=&amp;gt;) 함수를 지정해 주면 된다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;데이터가 저장된 state는 파라미터로 제공받고, &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;글 저장을 위해 필요한 게시글 정보(data),&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;삭제와 선택을 위해 필요한 게시글 번호(brdno)와 같은 파라미터는 payload 변수의 멤버로 받아서 사용한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;기존에는 하나의 함수에서 SWITCH문으로 각각의 기능을 처리해서 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;하나의 boards만 선언하면 되었지만,&lt;/p&gt;&lt;p&gt;handleActions에서는 각각의 함수로 구현하기 때문에 let boards = state.boards가 모든 함수에 사용되었다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그 외의 코드는 모두 동일하다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;전체 코드(&lt;a href=&quot;https://github.com/gujc71/redux_board/blob/step2/src/App_reducer.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App_reducer.js&lt;/a&gt;)를 보면 훨씬 간단하게 작성된 것을 알 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>React</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/184</guid>
<comments>https://forest71.tistory.com/184#entry184comment</comments>
<pubDate>Sun, 04 Nov 2018 21:55:30 +0900</pubDate>
</item>
<item>
<title>개발자가 하면 안 좋은 일</title>
<link>https://forest71.tistory.com/188</link>
<description>&lt;p&gt;개발자가 하면 안 좋은 일 중에 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;가장 첫번째는 준비 되지 않은 개발자가 팀장이 되는 것 일 것이다.&lt;/p&gt;&lt;p&gt;개발을 잘 하는 것과 좋은 리더 (팀장)이 되는 것은 당연이 다른 것이고, 많은 사람들이 말하는 것이다.&lt;/p&gt;&lt;p&gt;배틀스타 갤럭티카(Battlestar Galactica)라는 미드를 보면(시즌 2, 에피소드 17 -The Captain's Hand 참고)&lt;/p&gt;&lt;p&gt; 유능한 엔지니어(개발자)가 준비 없이 리더가 되면 조직을 어떻게 말아 먹는지를 잘 보여준다.&lt;/p&gt;그래도 현실에서는 나이 순, 입사순, 직책 순으로 한번 쯤 하게 되는 것 같다.&lt;br /&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:324px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995388365C02901C0F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;998A4D3C5B1FDCEE2C.jpg&quot; height=&quot;216&quot; width=&quot;324&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음으로, 하지 말아야 하지만 가장 흔하게 하는 일이 신입 개발자 교육인 것 같다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;중소업체에서는 신입 개발자 교육을 관련 업무의 선배가 진행하게 되는데, 도제식으로 진행하는 경우가 많다.&lt;/p&gt;&lt;p&gt; 군대의 사수/부사수처럼 진행하는 경우가 가장 흔할 것 같다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:380px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A944445C0290FF03&quot; filemime=&quot;image/jpeg&quot; filename=&quot;800px-DM-ST-84-08849.JPEG&quot; height=&quot;243&quot; width=&quot;380&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;모든 것이 낮선 신입에게 어떤 것을 가르쳐도 큰 효과가 없고, 여러가지 이유로 아예 기억 조차 못 하는 경우가 허다하다.&lt;/p&gt;&lt;p&gt;그러다 보면,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&quot;아까 말해줬는데&quot;, &quot;어제 말해줬는데&quot;, &quot;왜 아직도 못하냐&quot;, &quot;이런 것도 못하냐&quot;며 짜증을 내게 되고 점점 감정이 격해진다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;가르치는 개발자는 짜증내는 빈도가 늘어나고,&lt;/p&gt;&lt;p&gt;교육 받는 개발자는 반감이 늘어나거나 기가 죽는 것을 많이 봤다.&lt;/p&gt;&lt;p&gt;그리고, 가르치는 사람의 입장에서는 아주 많은 지식을 전달하거나 어려운 지식을 전달하는 것이 아니라고 생각하기 때문에 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&quot;이런것도 못해요&quot;, &quot;생각 좀 해요&quot; 등의 언어 폭력이 발생한다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:438px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991C29405C02903421&quot; filemime=&quot;image/jpeg&quot; filename=&quot;training-3185170_640.jpg&quot; height=&quot;377&quot; width=&quot;438&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;개발을 잘 하는 것과 잘 가르치는 것은 아주 다르다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;전문 교육자가 가르쳐도 제대로 받아들이는 학생이 몇 명 없는데, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;비교육자인 개발자가 어떻게 잘 가르칠 수 있을까?&lt;/p&gt;&lt;p&gt;개발자 컨퍼런스나 세미나에 가면 쉽게 볼 수 있는 장면이 전문 용어만 남발하며 혼자서 발표하는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;한 교수님이 후배 교수나 학생들에게 자주 하신 말씀이 있다.&lt;/p&gt;&lt;p&gt;강의 내용을 학생들이 이해하지 못하면 그건 내용을 제대로 설명하지 못한 교수 잘못이라고 하셨다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 분 말씀대로 모두 교수 잘못은 아니겠지만, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;상대가 제대로 이해 하지 못했다면 내 설명에 문제가 없는지 고민해봐라는 뜻일 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;교육에서 가장 중요한 건 자존감이라고 한다.&lt;/p&gt;&lt;p&gt;스스로 찾아서 노력할 수 있는 자존감이 중요하다고 하는데, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 자존감도 무너뜨리고, 회사에 대한 마음도 무너뜨리는 것이 아닐까한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;교육에 미숙한 선배와 업무에 미숙한 신입끼리 진행되는 교육속에 서로에 대한 부정적인 생각만 커지는 것 같다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;적응하지 못하고 떠난 1년차 개발자와&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;떠난 개발자를 대신해 입사한 신입 개발자를 교육하는 모습을 보며 &lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발 이야기</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/188</guid>
<comments>https://forest71.tistory.com/188#entry188comment</comments>
<pubDate>Sun, 28 Oct 2018 18:19:36 +0900</pubDate>
</item>
<item>
<title>React 게시판(CRUD) 만들기 1</title>
<link>https://forest71.tistory.com/183</link>
<description>&lt;p&gt;React는 페이스북에서 제안된 사용자 인터페이스 제작을 위한 자바스크립트 라이브러리의 하나로,&lt;/p&gt;&lt;p&gt;싱글 페이지(SPA-Sigle Page Applications)나 모바일 애플리케이션의 개발에 유용하다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 React를 익히기 위해서 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;React를 이용하여 데이터 입출력(CRUD) 기능을 가진 게시판을 구현한다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;데이터베이스에 연결해서 구현하지 않고, 배열에 데이터를 저장하고 출력하는 방식으로 게시판을 구현한다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;React 기초 문법은 따로 정리하지 않으니, &lt;a href=&quot;https://velopert.com/3613&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;관련 자료&lt;/a&gt;를 읽어보는 것을 좋다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기서 구현한 소스는 &lt;a href=&quot;https://github.com/gujc71/react_board&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github&lt;/a&gt;에서 다운로드 받을 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p&gt;&lt;b&gt;여기서 정리한 내용은 React 게시판 만들기 시리즈의 첫번째 내용이다.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; 1. React 게시판(CRUD) 만들기&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; 2. &lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React + Redux 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; 3. &lt;a href=&quot;http://forest71.tistory.com/189&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React(Redux) + Firebase 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;React 게시판(CRUD) 만들기는 React 설치와 Github 예제를 실행해 보는 방법(만들기 1)과&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실제로 이 게시판(CRUD) 예제를 만드는 과정(만들기 2)으로 정리한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; React 게시판(CRUD) 만들기 1&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/187&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React 게시판(CRUD) 만들기 2&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;먼저, NodeJS가 설치되어 있어야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;yarn이나 npm중 편리한 것을 사용하면 되고, 여기에서는 npm으로 작성한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;NodeJS와 npm 설치는 관련 자료가 많기 때문에 찾아보면 되고&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기서는 React 설치부터 시작한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;운영체제 콘솔창(여기서는 윈도우 CMD)에서 다음 명령어로 create-react-app를 설치한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;npm install -g create-react-app&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://eunvanz.github.io/react/2018/06/05/React-create-react-app%EC%9C%BC%EB%A1%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;create-react-app&lt;/a&gt;는 React 프로젝트를 쉽게 시작할 수 있도록 필요한 설정을 해주는 도구이다.&lt;/p&gt;&lt;p&gt;create-react-app를 설치한 뒤에 다음과 같이 create-react-app로 제작할 프로젝트를 생성한다.&lt;/p&gt;&lt;p&gt;여기에서는 react_board라는 이름으로 프로젝트를 생성하였다.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt;-react-app react_board&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;create-react-app으로 React 앱 프로젝트를 생성하면 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음 그림과 같이 간단한 사용법이 출력된다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:668px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/996C47455BA8A2A70E&quot; filemime=&quot;image/png&quot; filename=&quot;image1.png&quot; height=&quot;431&quot; width=&quot;668&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;yarn을 설치한 경우 npm이란 단어 대신 yarn으로 출력된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각 사용법은 따로 익혀두고 그림 하단의 2가지 명령어를 실행한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;먼저, 생성한 프로젝트 폴더로 이동해서 (&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;cd react_board&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;웹 서버를 가동하면(&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;npm start&lt;/span&gt;) 다음과 같이 웹 페이지가 실행된다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:588px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99ED344D5BC5E37E2A&quot; filemime=&quot;image/png&quot; filename=&quot;image2.png&quot; height=&quot;470&quot; width=&quot;588&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;웹 페이지에 설명되어 있듯이&lt;br /&gt;&lt;/p&gt;&lt;p&gt;src 폴더의 App.js 파일을 편집기로 열어서 다음 코드를 확인한다.&lt;/p&gt;&lt;p&gt;(Edit src/App.js and save to reload.)&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;color: #d4d4d4;background-color: #1e1e1e;font-family: Consolas, 'Courier New', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;React&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;, { &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; } &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'react'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;logo&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./logo.svg'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App.css'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa;&quot;&gt;render&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;() {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; (&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;className&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;className&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;App-header&quot;&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;img&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;logo&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;className&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;App-logo&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;alt&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;logo&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            Edit &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;code&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;src/App.js&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;code&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; and save to reload.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;a&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;className&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;App-link&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;https://reactjs.org&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;target&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;rel&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;noopener noreferrer&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            Learn React&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;          &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;header&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;    );&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;  }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;HTML 태그와 Javascript, React로 작성된 코드를 볼 수 있다.&lt;/p&gt;&lt;p&gt;Edit src/App.js and save to reload. 문장에서 글자를 원하는데로 수정하고 저장한 뒤에 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;웹브라우저로 확인하면 수정된 내용이 반영된 것을 확인할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여기까지 React를 실행하는 방법을 간단하게 정리하였다.&lt;/p&gt;&lt;p&gt; 기초 문법은 따로 정리하지 않으니, &lt;a href=&quot;https://velopert.com/3613&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;관련 자료&lt;/a&gt;를 읽어보는 것을 좋다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;구현할 게시판 예제는 다음과 같이 단계별로 제작한다.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. 데이터 출력 (글 리스트)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. 형식에 맞춰서 출력 (글 리스트)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3. 데이터 입력 (새 글 작성)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4. 데이터 수정과 삭제 (글 수정 / 삭제)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5. 기능(컴포넌트)별 파일 구성&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상의 내용을 App.js 파일에 작성하면 되지만&lt;/p&gt;&lt;p&gt;작성 과정을 각각의 예제 파일로 남기기 위해 App1.js ~ App6.js 파일로 구성하고 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;react-router-dom을 이용하여 별도의 url로 제작하였다.&lt;/p&gt;&lt;br /&gt;&lt;div style=&quot;color: #d4d4d4;background-color: #1e1e1e;font-family: Consolas, 'Courier New', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;React&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;, { &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; } &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'react'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; { &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;BrowserRouter&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;Router&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; } &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'react-router-dom'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App1&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App1'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App2&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App2'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App3&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App3'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App4&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App4'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App5&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App5'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App6&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;'./App6'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #6a9955;&quot;&gt;// simple list&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;extends&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa;&quot;&gt;render&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;() {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; (&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Router&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App1&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/App1&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App1&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/App2&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App2&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/App3&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App3&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/App4&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App4&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/App5&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App5&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                    &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Route&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;exact&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ce9178;&quot;&gt;&quot;/App6&quot;&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;component&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App6&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #569cd6;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #4ec9b0;&quot;&gt;Router&lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;        );&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;export&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #c586c0;&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe;&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_board/blob/master/src/App.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각 컴포넌트는 웹브라우저에서 다음과 같이 컴포넌트 이름으로 접속하여 실행할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; http://localhost:3000/App1 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ... &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; http://localhost:3000/App6&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:661px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BF72445BD31FDE06&quot; filemime=&quot;image/png&quot; filename=&quot;image3.png&quot; height=&quot;221&quot; width=&quot;661&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상으로 React 설치와 Github 예제를 실행해 보는 방법을 정리하였고,&lt;/p&gt;&lt;p&gt;다음으로 실제로 이 &lt;a href=&quot;http://forest71.tistory.com/187&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;게시판(CRUD) 예제를 만드는 과정&lt;/a&gt;을 정리한다.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; React 게시판(CRUD) 만들기 1&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://forest71.tistory.com/187&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React 게시판(CRUD) 만들기 2&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>React</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/183</guid>
<comments>https://forest71.tistory.com/183#entry183comment</comments>
<pubDate>Sun, 28 Oct 2018 17:08:11 +0900</pubDate>
</item>
<item>
<title>React 게시판(CRUD) 만들기 2</title>
<link>https://forest71.tistory.com/187</link>
<description>&lt;p&gt;React를 쉽게 익히기 위해서 데이터 입출력(CRUD) 기능을 가진 게시판을 구현한다.&lt;br /&gt;&lt;br /&gt;React 만으로 구현하기 위해 배열에 데이터를 저장하고 출력하는 방식으로 게시판을 구현한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p&gt;&lt;b&gt;여기서 정리한 내용은 React 게시판 만들기 시리즈의 첫번째 내용이다.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; 1. React 게시판(CRUD) 만들기&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; 2. &lt;a href=&quot;http://forest71.tistory.com/184&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React + Redux 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; 3. &lt;a href=&quot;http://forest71.tistory.com/189&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React(Redux) + Firebase 게시판(CRUD) 만들기&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;앞서 &lt;a href=&quot;http://forest71.tistory.com/186&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;간단한 설치와 사용법을&lt;/a&gt; 정리하였고, 여기서는 다음과 같이 단계별로 제작한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;소스는 &lt;a href=&quot;https://github.com/gujc71/react_board&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github에서 &lt;/a&gt;받을 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. 데이터 출력 (글 리스트)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. 형식에 맞춰서 출력 (글 리스트)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3. 데이터 입력 (새 글 작성)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4. 데이터 수정과 삭제 (글 수정 / 삭제)&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5. 기능(컴포넌트)별 파일 구성&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:661px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99045C395BD321C93D&quot; filemime=&quot;image/png&quot; filename=&quot;image1.png&quot; height=&quot;221&quot; width=&quot;661&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;개인적으로 React는 아주 쉽게 (?) 배울 수 있는 라이브러리 이지만&lt;/p&gt;&lt;p&gt;자바스크립트(JavaScript), 특히 ES5 (ECMAScript 5) 이상(ES6)의 문법을 모른다면 배우기 아주 어려운 라이브러리라고 생각한다.&lt;/p&gt;&lt;p&gt;ES5와 ES6의 특징 정도는 알고 있는 것이 좋으니 웹 문서들을 찾아보길 바란다.&lt;/p&gt;&lt;p&gt;여기에서는 별도로 정리하지 않지만 쉽게 React를 익히기 위해 단계별로 가장 쉬운 것 부터 시작한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;먼저, 주어진 배열의 내용을 출력하는 글 리스트부터 작성한다 (&lt;/b&gt;&lt;b&gt;&lt;b&gt;App1.js, &lt;/b&gt;&lt;/b&gt;&lt;b&gt;&lt;b&gt;&lt;b&gt;App2.js&lt;/b&gt;&lt;/b&gt;).&lt;/b&gt;&lt;/p&gt;&lt;p&gt;앞서서 create-react-app로 생성하고 정리한 예제에서 App.js 파일의 내용을 지우고 다음과 같이 작성한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Github에서 다운받은 파일에서는 App1.js로 작성되어 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;작성 과정을 각각의 예제 파일로 남기기 위해 단계별로 진행한 내용을 App1.js ~ App6.js 파일로 작성하였지만,&lt;br /&gt;&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;따라 할 때에는 App.js에 코드를 추가하는 방식으로 작성하면 된다.&lt;/u&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/c2e2b7e02a8decbe336287731d73cc8b.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;코드를 살펴보면 state 변수를 가장 먼저 선언하였다 [라인 4].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;state 변수는 게시판 데이터를 배열로 가지는 boards 배열을 구성원(Json)으로 가지고 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;boards는 글번호(brdno), 작성자(brdwriter), 글제목(brdtitle), 작성일자(brddate)로 구성되고 2개의 데이터가 등록되어 있다 [라인 7~16].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;데이터 베이스로 보면 4개의 필드와 2개의 행이 있는 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 데이터(state)를 render()에서 출력한다 [라인 21~33].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;render()는 React에서 화면을 생성하기 위해 실행하는 이벤트이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;App 컴포넌트(Component)에 있는 state [라인 4]을 render()에서 사용하기 위해 this.state로 지정한다 [라인 22].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;this는 자바스크립트에서 자기 자신(Component)을 의미한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;this.state에 있는 것 중에서 하나를 가지고 올 때 사용하는 것이 대괄호({})로state에 있는 데이터(boards)를 boards에 저장한다 [라인 22].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;대괄호({})는 state에 변수가 많을 때 편하게 사용하는 코드로 다음과 같이 사용해도 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { boards } = this.state;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boards = this.state. boards;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;주의&amp;nbsp;&lt;/span&gt; const, let, var의 차이는 찾아보길……&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;가지고 온 데이터(boards)를 map() 메서드를 이용하여 2개 행의 글번호와 작성자를 묶어서 하나의 문자열(list)로 작성하였다 [라인 23~25].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 값을 화면에 출력한다 [라인 29]. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;주의&amp;nbsp;&lt;/span&gt; &lt;u&gt;값을 출력할 때 대괄호({})가 사용되었다. 대괄호는 자바스크립트에서 함수의 범위가 되기도 하고 Json이기도 하지만, 변수내의 수 많은 변수 중 일부를 빼내서 사용하거나 [라인 22], React의 문법으로 태그&lt;/u&gt;&lt;u&gt;&lt;u&gt;(div)&lt;/u&gt; 사이에서 값을 출력할 때에도 사용된다. 여러 가지 의미로 사용되니 잘 기억해야 한다.&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실행 결과는 다음과 같다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:661px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995348485BD32B9502&quot; filemime=&quot;image/png&quot; filename=&quot;image2.png&quot; height=&quot;221&quot; width=&quot;661&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;정리하면,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;render() 시작부터 return 이전(라인 22~6)까지는 자바스크립트의 영역이고&lt;br /&gt;&lt;/p&gt;&lt;p&gt;return 내부는 HTML (React 정의라 조금 다름) 영역으로 볼 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;HTML영역에서 자바스크립트를 사용할 때에는 대괄호({})를 사용한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상의 코드는 다음과 같이 작성 할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; render() {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { boards } = this.state;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boards.map(function(row){ &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return row.brdno + row.brdwriter ;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }) &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_board/blob/master/src/App2.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App2.js&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이전과 동일하게 글 번호와 작성자를 묶어서 출력하는 코드이다.&lt;/p&gt;&lt;p&gt;자바스크립트 코드 위치가 바뀌었고 대괄호({})를 사용한다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;데이터를 출력하는 코드는 render와 return 사이보다 return의 HTML 사이에서 많이 사용한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;두번째 단계로 테이블(table) 테그로 게시판 리스트처럼 출력한다 (App3.js).&lt;/b&gt;&lt;/p&gt;&lt;p&gt;DIV 테그를 사용하는 것이 좋지만 CSS 설정 등으로 불필요한 코드 작성이 필요해, 다음과 같이 테이블 테그로 간단하게 작성하였다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/a24c811e050b411855526a69ea3d8ee2.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;기존 코드에 테이블 테그를 사용하여 리스트 헤드 [라인 7~14]를 작성한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고, boards에 있는 데이터를 행(tr)으로 출력하도록 작성하였다 [라인 16~18].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다만, 각 행을 BoardItem이라는 컴포넌트를 이용하여 출력하게 작성한다 [라인 27]. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;BoardItem 컴포넌트에 row라는 변수로 boards의 행(row)을 하나씩 지정해서 넘겨주고 [라인 17]&lt;br /&gt;&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;BoardItem 컴포넌트에서는 이 row를 this.props로 받아서 사용한다.&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;주의&amp;nbsp;&lt;/span&gt; 컴포넌트 자신이 사용하는 것은 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;state&lt;/span&gt;이고, 부모로부터 받은 것은 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;props&lt;/span&gt;이다. 이 개념을 잘 이해하면 React의 주요 개념 절반을 이해한 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;BoardItem 컴포넌트를 사용하는 것은 React의 특징으로 React에서는 모든 기능을 컴포넌트로 구현하여 사용한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상으로 글 리스트 기능을 구현하면서 React의 컴포넌트 개념을 사용하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;React는 기능을 세분화해서 컴포넌트로 구현하는 특징이 있다.&lt;br /&gt;&lt;/p&gt;그리고, 부모(호출하는) 컴포넌트가 자식(호출 받는) 컴포넌트에 값을 넘겨주고 받는 방법을 정리하였다.&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&lt;b&gt;세번째로 값을 입력받아서 저장하는 글 쓰기 기능을 구현한다 (App4.js).&lt;/b&gt;&lt;/p&gt;&lt;p&gt;글쓰기에서는 그림과 같이 글 제목과 작성자를 입력하고 저장(save) 버튼을 누르면 입력한 내용이 baords 배열에 저장되도록 구현한다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:661px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9997BB425BD50E2C23&quot; filemime=&quot;image/png&quot; filename=&quot;image3.png&quot; height=&quot;221&quot; width=&quot;661&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;글쓰기 기능을 구현하기 위해서는 HTML 컨트롤과 이벤트가 React와 연동되는 방법을 알아야 한다.&lt;/p&gt;&lt;p&gt;React(특히 이 예제)에서 가장 어려운 부분이라고 생각하니 코드의 의미에 대해서 제대로 이해하고 넘어가야 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/d4399afeff639920d7960afa2d05fe7f.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;글쓰기 기능을 구현할 BoardForm 컴포넌트를 생성하고 [라인 21],&lt;/p&gt;글쓰기에서 사용할 state 변수와 handleChange, handleSubmit 이벤트 핸들러를 작성하였다.&lt;br /&gt;
&lt;p&gt;1 라인에 선언된 state는 App 컴포넌트에서 사용하는 state 이고, 22 라인에서 선언한 state는 BoardForm내부에서 사용하는 state이다.&lt;/p&gt;&lt;p&gt;state는 컴포넌트 내부에서 사용할 변수로 이름이 고정되어 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;두 이벤트 핸들러는 화살표(=&amp;gt;) 함수로 작성하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;화살표 함수가 아닌 전통적인 함수로 작성하면 bind등의 제법 복잡한 처리를 해야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;handleChange는 사용자가 값을 입력할 때 마다(onChange 이벤트) 입력하는 값을 받아서 state 변수에 각 컨트롤의 이름(brdtitle, brdwriter)으로 저장한다 [라인 24].&lt;/p&gt;&lt;p&gt;handleChange핸들러의 e는 자바스크립트의 change 이벤트에서 파라미터로 넘어오는 Event를 의미하고 e.target은 현재 이벤트가 발생한 개체, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;즉 값을 입력하는 입력상자를 의미한다.&lt;/p&gt;&lt;p&gt;두 개의 입력상자가 각각 brdtitle, brdwriter로 지정되어 있기 때문에 [라인 39, 40] 각각의 이름으로 변수가 생성되어 사용자가 입력한 값이 저장된다.&lt;/p&gt;&lt;p&gt;입력 받는 값이 글 제목(brdtitle)과 작성자(brdwriter)이므로, brdtitle, brdwriter로 저장된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;즉,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; state = {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; brdtitle: 값,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; brdwriter: 값&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;으로 저장된다.&lt;/p&gt;&lt;p&gt;저장시 &quot;this.state.brdwriter=값&quot; 이나 &quot;this.state[brdwriter]=값&quot; 으로 저장하지 않고 &lt;a href=&quot;https://www.vobour.com/%ED%95%A8%EC%88%98%ED%98%95-setstate%EA%B0%80-%EB%A6%AC%EC%95%A1%ED%8A%B8-react-%EC%9D%98-%EB%AF%B8%EB%9E%98%EC%9D%B4%EB%8B%A4-functiona&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;setState 함수&lt;/a&gt;를 사용하여 저장한다 [라인 25].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;React의 규칙이니 준수해야 하고, 이렇게 하지 않으면 웹 브라우저 콘솔 등에 경고가 출력된다 (다음 그림과 전후 설명 참조).&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;라인 39 와 40 에서 입력 상자와 handleChange를 연결하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;연결시 handleChange에 this를 붙여 사용하는데, 컴포넌트 내의 변수나 함수(이벤트 핸들러)를 참조할 때에는 this를 붙여야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;handleSubmit은 Form 태그가 값을 서버로 전송할 때 발생하는 이벤트를 처리하기 위한 핸들러이다 [라인 38].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;즉, 사용자가 값을 입력하고 저장할 때 발생한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실제로 서버로 보낼 것이 아니기 때문에 preventDefault로 이벤트를 중지한다 [라인 22].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고 onSaveData 함수를 호출하여 데이터를 저장한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;onSaveData()는 BoardForm 컴포넌트에 있지 않고 [라인 32], &lt;br /&gt;&lt;/p&gt;&lt;p&gt;부모인 App 컴포넌트에 있기 때문에 this.props.onSaveData()로 사용한다 [라인5, 15].&lt;/p&gt;&lt;p&gt;onSaveData()는 부모로 부터 파라미터(this.props)로 받았다 [라인 15].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;부모로부터 받은 것은 값이든 함수이든 항상 props를 사용해야 한다 [라인 32].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고 저장할 값은 stae에 있으니 함수를 호출하면서 this.state를 넘겨준다  [라인 32].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;부모 (호출하는) App 컴포넌트에서는 값을 입력 받을 적당한 위치에 BoardForm 컴포넌트를 생성한다 [라인 15].&lt;/p&gt;&lt;p&gt;컴포넌트의 생성은 HTML 태그처럼 &amp;lt;BoardForm/&amp;gt;로 작성하면 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;BoardForm를 생성하면서 파라미터로 handleSaveData() 함수를 onSaveData()라는 이름으로 넘겨준다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이것을 자식(호출받는) BoardForm에서는 this.props.onSaveData()로 호출한다 [라인 32].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;호출 받은 부모의 handleSaveData()에서는 setState를 이용하여 [라인 6] state에 있는 baords배열에 값을 추가(concat)한다 [라인 7].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;baords배열에 concat으로 추가하고 이것을 baords라는 이름으로 저장하는 방식으로 작성한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;저장시 글 번호(brdno)와 작성일자(brddate)을 생성한다[라인 7].&lt;br /&gt;
&lt;p&gt;작성일자는 자바스크립트 Date 클래스로 현재 날짜를 입력하고, 글 번호는 state에 추가한 변수 maxNo의[라인 2] 값을 사용한다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;기본적으로 baords에 데이터 2 건이 있으므로 maxNo은 3의 값을 가지고 있고, 글을 추가한 후에 1 증가(++) 한 값(다음 글번호)을 저장한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;주의&amp;nbsp;&lt;/span&gt; 웹 브라우저에서 이상의 예제인 App4를 실행하면 다음과 같은 경고를 볼 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:721px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BAEB475BD526450A&quot; filemime=&quot;image/png&quot; filename=&quot;image4.png&quot; height=&quot;276&quot; width=&quot;721&quot;/&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 경고는 state에 값을 바로 대입한 코드를[라인 7] setState 함수로 수정하라는 것으로 다음과 같이 작성 한다.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.setState({&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;maxNo: this.state.maxNo+1&lt;/span&gt;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; boards: boards.concat({brdno: this.state.&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;maxNo&lt;/span&gt;, brddate: new Date(), ...data })&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;게시물(boards)을 추가하듯이 [라인 7],&lt;/p&gt;&lt;p&gt;maxNo의 값을 증가시키고, maxNo라는 이름으로 setState함수를 이용하여 저장한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실행해서 새로운 글이 잘 작성되는지 확인한다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;React의 값을 주고 받는 방식도 잘 기억해야 하지만,&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;자식(BoardForm)에서 작성한 값을 부모에게 보내어 저장하는 구조도 잘 기억해야 한다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;부모(App)의 state에 있는 boards에 모든 값을 저장하기 때문에 부모에게 사용자가 입력한 값을 전송한다.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;부모의 state에 값을 저장하고,&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;이 state에 변경이 생기면 &lt;/span&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;state(&lt;/span&gt;&lt;/b&gt;boards)의 값을 참조하는 또 다른 자식인 &lt;u&gt;BoardItem에 값들이 자동으로 보내어져 추가된 글이 화면에 출력된다.&lt;/u&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;이 것이 React의 특징 중 하나이다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:691px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9984DA365BD529CD16&quot; filemime=&quot;image/png&quot; filename=&quot;image5.png&quot; height=&quot;87&quot; width=&quot;691&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;일반적인 프로그래밍에서는 데이터를 추가하거나 수정하면 화면 갱신을 하도록 별도의 처리를 해야 하지만&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;React에서는 state에 변경사항이 생기면 관련 내용이 자동으로 반영된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;익숙하지 않은 사람에게는 아주 헷갈리는 기능일 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;네 번째로 데이터를 수정하고 삭제하는 기능을 구현한다 (App5.js).&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;삭제 기능은 글을 추가하는 것과 같은 원리로 구현되니 상세한 설명은 생략하고 개념만 정리한다.&lt;/p&gt;&lt;p&gt;(직접 해보는 것이 실력 향상에 도움이 된다.)&lt;/p&gt;&lt;p&gt;삭제는 다음 그림처럼 글 리스트의 각 항목(BoardItem)에 삭제 버튼을 두고 [라인 37], &lt;br /&gt;&lt;/p&gt;&lt;p&gt;사용자가 삭제 버튼을 클릭하면 부모에 저장된 boards에서 해당 글을 삭제한다 [라인 3].&lt;/p&gt;&lt;p&gt;삭제 할 때는, 사용자가 선택한 글 번호(brdno)에 해당하는 글을 찾아서 삭제한다.&lt;/p&gt;&lt;p&gt;배열에서 값을 삭제하는 것은 fiter 사용이 권장된다 [라인 5].&lt;/p&gt;&lt;p&gt;다음 코드에서 handleRemove를 따라 다니면 보다 쉽게 코드를 이해 할 수 있을 것이다. (라인 37 &amp;gt; 24 &amp;gt; 26 &amp;gt; 17 &amp;gt; 3 &amp;gt; 5 순)&lt;br /&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/d2aa67f7b31995cd9cf62713c76c3c08.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;b&gt;글 수정&lt;/b&gt;은 글 항목(행)들 중에 하나를 선택하면(handleSelectRow)&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;선택된 행의 값들을 사용자가 수정할 수 있도록 입력상자(BoardForm)에 뿌려주고,&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;
&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;사용자가 수정 후 저장 버튼을 클릭하면, 글번호의 값이 있으면 수정, 없으면 신규 등록으로 구현한다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:693px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99727B3D5BD5309411&quot; filemime=&quot;image/png&quot; filename=&quot;image6.png&quot; height=&quot;201&quot; width=&quot;693&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;개념은 새글 작성과 동일하지만 글 수정은 제법 많은 변경과 추가가 이루어져 모든 코드를 글로 정리하기 어렵다. (실제로는 가장 어려운 부분이 여기다)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;정리하더라도 읽으면서 혼란해지기 때문에 주요 코드와 개념만 정리한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;나머지는 … (이 부분은 이해되지 않는 경우 넘어가도 된다. Redux에서 좀더 쉽고 간단하게 구현한다.)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;handleSelectRow함수를 중심으로 살펴 보면, 그나마 보다 쉽게(?) 코드를 이해 할 수 있을 것이다.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/gujc71/8ff04eff352d22ef0eff070296b4e331.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;사용자가 글 항목(행)들 중에 하나를 선택하면(handleSelectRow) [라인 58 =&amp;gt; 50 =&amp;gt; 30]&lt;br /&gt;&lt;/p&gt;&lt;p&gt;선택된 행의 값들을 사용자가 수정할 수 있도록 입력상자에 뿌려주어야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;입력상자는 BoardForm에 있기 때문에 BoardForm을 부모(App) 컴포넌트가 알고 있어야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;즉, 자식(BoardForm)의 핸들러를 가지고 있어야 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각 컴포넌트의 핸들을 가지고 오는 속성 ref를 this.child에 보관하는 방법을 사용한다 [라인 34].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;부모는 선택한 행의 데이터를 자식 (this.child)의 handleSelectRow를 호출하면서 파라미터로 넘겨준다 [라인 26].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;입력 폼(BoardForm)에서는 부모로부터 받은 값을 그대로 state 변수에 넣어준다 [라인 76].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;파라미터로 받은 값의 구조가 Json이기 때문에 이전처럼[라인 83~85] “변수: 값”의 구조로 지정하지 않고 한번에 넣어 준다 [라인 76].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 state의 변수를 입력상자가 바로 보고 있도록 수정해서 [라인 92, 93] state 값이 변경되면 자동으로 바뀌도록 작성했다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;BoardItem과 같은 원리이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사용자가 수정 후 저장 버튼을 클릭하면 [라인 79]&lt;br /&gt;&lt;/p&gt;&lt;p&gt;부모로 데이터를 보내서 [라인 81]&lt;br /&gt;&lt;/p&gt;&lt;p&gt;글 번호(brdno)가 있으면 [라인 11] 수정, 없으면 신규 등록으로 구현한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;신규 등록은 앞서 정리했고, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;수정은 글 번호가 같은 행을 찾아서 (data.brdno === row.brdno) 행을 바꾸는 방식으로 구현한다 [라인 18].&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;마지막으로 사용자가 입력한 값은 지워 주는데&lt;br /&gt;&lt;/p&gt;&lt;p&gt;BoardForm에서 state 변수내의 값 변수들 값을 지워주면 화면에서도 지워진다.&lt;/p&gt;&lt;p&gt;BoardItem과 같은 원리로 입력 상자들이 state를 바라보고 있기 때문에 가능한 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;React에서는 HTML 태그들이 자바스크립트에 바인드(Bind) 된 것처럼 작동한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상으로 React의 기본적인 사용법을 게시판 예제로 정리하였다.&lt;/p&gt;&lt;p&gt;React 자체는 state, props만 알면 그렇게 어렵지 않지만&lt;/p&gt;&lt;p&gt;모든 기능을 세분화해서 컴포넌트로 작성하고, 값이 컴포넌트를 오가면서 코드가 아주 복잡해 지고 개념이 어려워 진다.&lt;/p&gt;&lt;p&gt;(App 컴포넌트의 리스트 부분도 BoardList로 별도로 제작해야 한다. 직접 해보길…)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;값을 한 곳에 넣고 처리할 수 있도록 함수를 작성해 두고&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;이 함수만 각 컴포넌트에서 호출한다면 아주 쉽고 깔끔하게 코드를 작성 할 수 있을 것이다.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;이러한 기능을 제공하는 라이브러리 중에 하나가 &lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Redux&lt;/span&gt;&lt;/b&gt;로 &lt;a href=&quot;http://forest71.tistory.com/187&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Redux예제는 별도로 작성&lt;/a&gt;하였기 때문에 여기에 정리하지 않는다.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;마지막 예제는 각 컴포넌트를 별도의 파일로 작성하는 것이다 (App6.js).&lt;/b&gt;&lt;/p&gt;&lt;p&gt;코드 양이 많기 때문에 컴포넌트는 각각의 파일로 작성하고 export 를 이용하여 다른 파일에서 사용할 수 있도록 한다.&lt;/p&gt;&lt;p&gt;각 컴포넌트를 사용할 컴포넌트에서는 import로 가져와서 사용한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;메인 컴포넌트인 App을 포함해서, BoardItem(BoardRow)과 BoardForm의 총 3개의 컴포넌트가 사용되었다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;따라서, 다음과 같이 각각의 파일을 작성하였다. &lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import React, { Component } from 'react';&lt;br /&gt;&lt;br /&gt;class BoardRow extends Component {&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;export &lt;/span&gt;default BoardRow;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_board/blob/master/src/App6_BoardItem.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App6_BoardItem.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import React, { Component } from 'react';&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class BoardForm extends Component {&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;export &lt;/span&gt;default BoardForm;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_board/blob/master/src/App6_BoardForm.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App6_BoardForm.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;import React, { Component } from 'react';&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;import BoardForm from './App6_BoardForm';&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;import BoardItem from './App6_BoardItem';&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;class App6 extends Component {&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; render() {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { boards, selectedBoard } = this.state;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;BoardForm &lt;/span&gt;selectedBoard={selectedBoard} onSaveData={this.handleSaveData}/&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;table border=&quot;1&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boards.map(row =&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (&amp;lt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;BoardItem &lt;/span&gt;key={row.brdno} row={row} onRemove={this.handleRemove} onSelectRow={this.handleSelectRow} /&amp;gt;)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; )&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/tbody&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/table&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;export default App6;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;https://github.com/gujc71/react_board/blob/master/src/App6.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;App6.js&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;주의 - BoardItem은 파일에서는 BoardRow로 작성하고, import 할 때에는 BoardItem로 이름 붙여 사용했다. 이렇게 사용해도 된다는 의미로 사용한 것이다.&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;마지막 예제에는 컴포넌트 별로 각각의 파일을 작성한 것 외에 몇 가지 React 기능을 더 추가해서 작성했다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;네 번째 예제(App5)는 React의 특징을 제대로 표현하지 못하였고, 값이 여러 컴포넌트를 오고 가면서 상당히 헷갈리는 예제다.&lt;/p&gt;&lt;p&gt;이 예제를 state를 이용하여 구현하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;부모(App6)에서 수정된 코드는 다음과 같다.&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;class App6 extends Component {&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; state = {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxNo: 3,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boards: [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;selectedBoard&lt;/span&gt;:{}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; handleSelectRow = (row) =&amp;gt; {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.setState({&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;selectedBoard&lt;/span&gt;:row});&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ~~ 생략 ~~&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; render() {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { boards, &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;selectedBoard &lt;/span&gt;} = this.state;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;BoardForm &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;selectedBoard={selectedBoard}&lt;/span&gt; onSaveData={this.handleSaveData}/&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ~~ 생략 ~~&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;}&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;행이 선택되면 handleSelectRow에서 선택된 행의 값을 모두 state의 selectedBoard에 저장한다.&lt;/p&gt;&lt;p&gt;이 selectedBoard을 입력폼(BoardForm)으로 전달한다.&lt;/p&gt;&lt;p&gt;선택된 행(selectedBoard)을 입력폼(BoardForm)의 shouldComponentUpdate 이벤트에서 처리하는 방식으로 구현한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt; &lt;/p&gt;&lt;p&gt;이전 방식은 React의 특징인 state를 이용하여 컨트롤에 값을 보여주고,&lt;/p&gt;&lt;p&gt;사용자가 입력한 값을 state에 저장해서 구현했고, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;이번에는 다음과 같이 shouldComponentUpdate 이벤트와 입력 상자에 대한 컨트롤(ref)을 이용해서 구현한다.&lt;/p&gt;&lt;script src=&quot;https://gist.github.com/gujc71/f2d052aea931610ca05fc1c7396ab25f.js&quot;&gt;&lt;/script&gt;&lt;p&gt;입력폼(BoardForm)에서는 컴포넌트가 업데이트 될때 발생하는 shouldComponentUpdate 이벤트에서 전달 받은 selectedBoard의 값을 화면에 출력한다 [라인 5].&lt;/p&gt;&lt;p&gt;shouldComponentUpdate와 같은 React의 &lt;a href=&quot;https://velopert.com/1130&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이벤트는 이 문서를 참조하면&lt;/a&gt; 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;shouldComponentUpdate 이벤트에서 글 번호의 값이 있으면 [라인 7]&lt;/p&gt;&lt;p&gt;글 수정 상황이니 selectedBoard의 값을 입력상자에 넣어주고 [라인 13, 14]&lt;/p&gt;&lt;p&gt;값이 없는 것은 초기화 상태이니 입력 상자에 빈 문자열을 넣어준다 [라인 8, 9].&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사용자가 값을 입력하면 이전에는 Chang 이벤트에서 값을 state에 보관해서 처리했지만 이번에는 ref를 사용하여 컨트롤을 참조하는 방식으로 구현했다 [라인 35, 36].&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;주의&amp;nbsp;&lt;/span&gt; 이 방식은 추천하는 방식이 아니지만 React의 이해(ref)를 위해 사용한 코드이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;저장 버튼을 누르면 사용자가 입력한 값을 저장할 구조에 맞추어 Json 형식으로 생성한다 [라인 21~28].&lt;/p&gt;&lt;p&gt;글 번호(selectedBoard.brdno)가 있으면 수정이니 기존 데이터(selectedBoard)에서 글 번호와 작성일자를 가져오고 [라인 26, 27],&lt;/p&gt;&lt;p&gt;없으면 신규이니 사용자만 입력한 값만 Json으로 저장하면 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상으로 React를 이용한 게시판 제작을 5 단계로 구현하였다.&lt;/p&gt;&lt;p&gt;React는 특이한 방식으로 개발하여 익히는데 혼란을 주지만 개념을 잘 잡으면 쉽게 웹 개발을 할 수 있다.&lt;/p&gt;&lt;p&gt;더욱이 멀티 OS 개발을 쉽게 하는 React Native의 기본 문법이라 더욱 매력적이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>React</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/187</guid>
<comments>https://forest71.tistory.com/187#entry187comment</comments>
<pubDate>Sun, 28 Oct 2018 17:05:13 +0900</pubDate>
</item>
<item>
<title>Firebase 기반 메신저 앱 - DirectTalk9 (Web과 PC 버전)</title>
<link>https://forest71.tistory.com/186</link>
<description>&lt;p&gt;DirectTalk9 Web과 PC 버전은 이전에 작성한 &lt;a href=&quot;http://forest71.tistory.com/172&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Android &lt;/a&gt;버전을(Firebase Firestore 예제) 변환한 예제로,&lt;/p&gt;&lt;p&gt;Web은 &lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React &lt;/a&gt;(&lt;a href=&quot;https://redux.js.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Redux&lt;/a&gt;)을 익히기 위해서&lt;/p&gt;&lt;p&gt;PC 버전은 &lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Electron&lt;/a&gt;을 학습하기 위한 예제로 제작하였다.&lt;/p&gt;&lt;p&gt;특히, PC 버전은 Web 버전과 동일한 코드로 작성되었지만 PC 환경에 맞추어 수정하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;현재는 기본적인 채팅 기능 위주로 구현되었고, 계속 버그 수정 및 기능을 보강할 예정(?)이다.&lt;/p&gt;&lt;p&gt;디자인은 능력이 되지 않아서 Google's Material Design 가이드를 준수하는 &lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;material-ui.com&lt;/a&gt;을 사용하였다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;먼저, Web 버전을 설치하기 위해서는 NodeJS와 git이 설치되어 있어야 한다.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;b&gt;NodeJS와 git 설치는 찾아보길 바라고 여기에서 정리하지 않는다. &lt;/b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;DirectTalk9 Web 버전은 다음과 같이 5 단계의 과정으로 설치를 진행한다.&lt;/b&gt;  &lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p&gt;1. 소스 다운로드: &lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;git clone https://github.com/gujc71/DirectTalk9_web.git&lt;/span&gt;&lt;br /&gt;2. 관련 라이브러리 설치: &lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;npm install&lt;/span&gt;&lt;br /&gt;3. Firestore.js에 접속 정보 입력&lt;br /&gt;4. Firebase 관련 서비스 (Authentication, Storage, Firestore) 활성화&lt;br /&gt;5. 실행: &lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;npm start&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;상세하게 정리하면, 콘솔(cmd) 창에서 github의 소스를 다운로드 받는다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;git clone https://github.com/gujc71/DirectTalk9_web.git&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;소스를 다운로드 받은 폴더로 이동(cd DirectTalk9_web) 해서 필요한 라이브러리들을 설치한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;npm install&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;DirectTalk9 Web 버전은 React, Redux, Material-ui, ImageTool (image Resize)등이 사용되었고,&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gujc71/DirectTalk9_web/blob/master/package.json&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;package.json&lt;/a&gt; 파일에서 설치된 라이브러리를 확인할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:651px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DECB3E5BD2DCC90D&quot; filemime=&quot;image/png&quot; filename=&quot;image8.png&quot; height=&quot;296&quot; width=&quot;651&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;설치한 폴더(DirectTalk9_web) 하위의 src\reducer 폴더에 있는 &lt;a href=&quot;https://github.com/gujc71/DirectTalk9_web/blob/master/src/reducer/Firestore.js&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firestore.js&lt;/a&gt; 파일에 &lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음 그림과 같이 Firebase 설정 정보를 채워준다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;Firebase 설정 정보를 가져오는 방법은 &lt;a href=&quot;https://firebase.google.com/docs/web/setup?hl=ko&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이 문서나 문서&lt;/a&gt;내의 우측에 있는 &lt;a href=&quot;https://www.youtube.com/watch?time_continue=77&amp;amp;v=k1D0_wFlXgo&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;동영상을 &lt;/a&gt;참고 하면 된다.&lt;/p&gt;&lt;p&gt;이전에 작성된 &lt;a href=&quot;http://forest71.tistory.com/category/Node.js/Firebase&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;NodeJs 예제 문서&lt;/a&gt;를 참고해도 된다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99FE46435BD1C33E0F&quot; filemime=&quot;image/png&quot; filename=&quot;image1.png&quot; height=&quot;519&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음으로 &lt;a href=&quot;https://console.firebase.google.com/?pli=1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;F&lt;/a&gt;&lt;a href=&quot;https://console.firebase.google.com/?pli=1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;irebase console&lt;/a&gt;에 접속해서 Authentication, Storage, Firestore를 사용할 수 있도록 해야 한다.&lt;/p&gt;&lt;p&gt;Firebase는 Gmail 계정만 있으면 사용할 수 있다.&lt;/p&gt;&lt;p&gt;웹 브라우저에서 &lt;a href=&quot;https://console.firebase.google.com/?pli=1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;F&lt;/a&gt;&lt;a href=&quot;https://console.firebase.google.com/?pli=1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;irebase console&lt;/a&gt;에 접속해서 Gmail 계정으로 로그인하면 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;로그인을 위한 인증(Authentication)은 다양한 방식이 제공되는데&lt;/p&gt;&lt;p&gt;, &quot;이메일/비밀번호&quot;을 사용할 수 있도록 하고, 설정 방법은 이전에 작성한 &lt;a href=&quot;http://forest71.tistory.com/168?category=667022&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase 설정 문서를 참고&lt;/a&gt;하면 된다.&lt;/p&gt;&lt;p&gt;데이터를 저장할 Cloud Firestore는 [테스트 모드로 시작]을 선택하면 되고, 설정 방법은 이전에 작성한 &lt;a href=&quot;http://forest71.tistory.com/167?category=667022&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Firebase 설정 문서를 참고&lt;/a&gt;한다.&lt;/p&gt;&lt;p&gt;파일을 저장할 Storage는 그림과 같이 콘솔의 왼쪽 메뉴에서 Storage를 선택하고, 화면 중앙에 나타나는 [시작하기] 버튼을 눌러주면 된다. &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997DC74D5BD1CB170C&quot; filemime=&quot;image/png&quot; filename=&quot;image5.png&quot; height=&quot;573&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;설정을 마쳤으면 콘솔 창에서 NodeJS 서버를 실행한다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(238, 238, 238); background-color: rgb(238, 238, 238); padding: 10px;&quot;&gt;&lt;p&gt;npm start&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;웹 브라우저에서 다음과 같은 화면이 실행된다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:575px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DBDA465BD1C62D12&quot; filemime=&quot;image/png&quot; filename=&quot;image2.png&quot; height=&quot;716&quot; width=&quot;575&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;처음에는 가입된 회원이 없으니 계정으로 사용할 이메일과 비밀번호를 입력하고,&lt;/p&gt;&lt;p&gt;&quot;Create Account&quot; 버튼을 눌러서 회원 가입을 하면 된다.&lt;/p&gt;&lt;p&gt;테스트 용이기 때문에 이메일 주소는 꼭 사용하는 이메일일 필요는 없다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;user1@test.com 와 같이 입력해도 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;로그인을 하고 나면 사용자 리스트(UserList) 화면이 나타난다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993067335BD1C16A1D&quot; filemime=&quot;image/png&quot; filename=&quot;screenshot1.png&quot; height=&quot;350&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;왼쪽 메뉴에서 채팅방 리스트(Rooms)를 실행한다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9912F5475BD1C16B31&quot; filemime=&quot;image/png&quot; filename=&quot;screenshot2.png&quot; height=&quot;280&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;몇 개의 계정을 생성하고, 대화 상대를 선택해서 채팅을 하면 된다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BB46465BD1C16B35&quot; filemime=&quot;image/png&quot; filename=&quot;screenshot3.png&quot; height=&quot;391&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;브라우저의 크기를 줄이면 반응형으로 변하는 화면을 볼 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:592px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9955FF425BD1C7D30A&quot; filemime=&quot;image/png&quot; filename=&quot;image3.png&quot; height=&quot;592&quot; width=&quot;592&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:592px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A71A425BD1C7D332&quot; filemime=&quot;image/png&quot; filename=&quot;image4.png&quot; height=&quot;592&quot; width=&quot;592&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;다음으로, PC 버전을 설치하는 방법은 Web 방식과 거의 유사하다.&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p&gt;1. 소스 다운로드: &lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;git clone https://github.com/gujc71/&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;DirectTalk9_&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;pc&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;.git&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;2. 관련 라이브러리 설치: &lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;npm install&lt;/span&gt;&lt;br /&gt;3. Firestore.js에 접속 정보 입력&lt;br /&gt;4. Firebase 관련 서비스 (Authentication, Storage, Firestore) 활성화&lt;br /&gt;5. 실행:&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;npm run dev&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다운로드 받는 주소가 DirectTalk9_&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;web&lt;/span&gt;&lt;/b&gt;에서 DirectTalk9_&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;pc&lt;/span&gt;&lt;/b&gt;로 바뀌고&lt;br /&gt;&lt;/p&gt;&lt;p&gt;라이브러리 설치 등은 모두 동일하다 (Electron 설치로 라이브러리 설치 시간이 더 많이 걸린다).&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Firebase 서비스를 사용하기 위해 콘솔에서 지정하는 설정은 Web 버전에서 진행한 경우 별도로 지정하지 않아도 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Web 버전과 가장 큰 차이점은 실행 방식이다.&lt;/span&gt;&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Web 버전은 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;npm start&lt;/span&gt;로 시작하지만&lt;br /&gt;&lt;/p&gt;&lt;p&gt;PC 버전은 다운로드 받은 설정이 npm run dev로 실행하게 되어 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;npm run dev&lt;/span&gt;로 실행하면 웹과 응용프로그램이 동시에 실행되고,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;npm run build로 빌드를 진행하고&lt;br /&gt;&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;npm run electron을 실행하면 응용프로그램만 실행된다.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;참고&amp;nbsp;&lt;/span&gt; React (특히 create-react-app)와 Electron을 같이 실행하는 방법은 설정이 복잡하다.&lt;/p&gt;&lt;p&gt;여기에서는 &lt;a href=&quot;https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Christian Sepulveda&lt;/a&gt;이 제시한 방법을 사용했으니, 상세한 설정은 관련 자료를 읽어보면 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;실행 화면은 다음과 같다.&lt;/p&gt;&lt;p&gt;Web 버전에서는 왼쪽 메뉴로 구성했던 사용자, 채팅방, 계정 정보를&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그림과 같이 탭(Tab)으로 제작하였다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:760px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/990FB23B5BD2D4F506&quot; filemime=&quot;image/png&quot; filename=&quot;image6.png&quot; height=&quot;593&quot; width=&quot;760&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;사용법은 웹 버전과 동일하지만 다음 그림처럼 대화 상대별로 채팅창을 실행할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:438px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9961EC4E5BD2D4F52C&quot; filemime=&quot;image/png&quot; filename=&quot;image7.png&quot; height=&quot;593&quot; width=&quot;438&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Web 버전에서는 웹 브라우저내의 다이알로그로 구성했기 때문에 하나의 채팅창만 실행할 수 있고,&lt;/p&gt;&lt;p&gt;PC 버전에서는 별창(new Window)으로 구현하여 동시에 여러 채팅창을 실행 할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이상으로 DirectTalk9의 Web버전과 PC 버전을 설치하는 방법을 정리하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Android 버전과는 채팅 할 수 없다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Android 버전은 메시지 전송 시간을 서버 시간을 사용하고(serverTimestamp),&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Web과 PC 버전은 클라이언트(JS의 new Date) 시간을 사용하기 때문에 오류가 발생한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Web과 PC 버전에서 서버 시간을 사용하도록 작성하면 되지만 Firebase 설치와 설정이 필요해서 제외하였다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이외에도 몇 가지 버그가 있고, 구현해야 될 기능도 많지만 제법 그럴듯하게 작동하는 예제(?)로,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;응용해서 사용한다면 개발에 도움이 될 것 같다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;작성된 데이터 Cloud Firestore에 저장하고, 구조는 &lt;a href=&quot;http://forest71.tistory.com/172&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Android 버전과 &lt;/a&gt;동일하다.&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99562D3F5B8BC8D81D&quot;&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;먼저 사용자(users)와 채팅방(rooms) 정보를 저장하는 컬렉션(collection)으로 구성하였다.&lt;/p&gt;&lt;p&gt;사용자(users)에는 사용자 고유 식별값(uid)과 계정(이메일, userid), 상태 메시지(usermsg), 사용자 이름(usernm)으로 구성한 일종의 회원 테이블이다.&lt;/p&gt;&lt;p&gt;토큰(token)은 Firebase에서 제공하는 것으로 FCM(Firebase Cloud Message)을 사용하기 위해 필요한 필드로&lt;/p&gt;&lt;p&gt;Andoid 버전에서는 사용하지만 Web과 PC 버전에서는 아직 구현하지 않아서 사용하지 않는다.&lt;/p&gt;&lt;p&gt;로그인과 회원에 대한 기본 정보는 Firebase 인증(Authentication)으로 처리하지만&lt;br /&gt;&lt;/p&gt;Firebase 인증으로 처리되지 않는 정보들을 users 컬렉션에서 저장하고 관리한다.&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;채팅방(rooms)은 채팅 정보를 관리하는 컬렉션으로,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;마지막 메시지(lastmessage), 채팅방 참여자(users)의 필드로 구성된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;메시지(messsge)는 사용자가 작성한 메시지로 각 채팅방의 하위&amp;nbsp; 컬렉션으로 작성되고,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;메시지 문장(msg), 메시지 종류(텍스트, 이미지, 파일), 작성시간(timestamp), 작성자(uid)로 구성했다.&lt;/p&gt;&lt;p&gt;메시지를 읽은 사용자(readusers)는 메시지별 안 읽은(unread) 사용자 수(참여자수-읽은 사용자수)를 보여주는데 사용한다.&lt;/p&gt;&lt;p&gt;마지막 메시지(lastmessage)와 관련된 필드는 메시지(messsge) 컬렉션과 동일한 구조를 가지고, &lt;br /&gt;&lt;/p&gt;&lt;p&gt;채팅방 리스트를 출력할 때 마지막 메시지 내용과 시간을 보여주기 위해 사용했다.&lt;/p&gt;&lt;p&gt;채팅방 참여자(users) 사용자의 고유값(uid) 값을 키(필드)로 사용한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Firebase</category>
<author>forest71</author>
<guid>https://forest71.tistory.com/186</guid>
<comments>https://forest71.tistory.com/186#entry186comment</comments>
<pubDate>Sun, 28 Oct 2018 17:03:49 +0900</pubDate>
</item>
</channel>
</rss>