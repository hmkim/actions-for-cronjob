<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Bluesh</title>
 <link href="http://bluesh55.github.io//atom.xml" rel="self"/>
 <link href="http://bluesh55.github.io//"/>
 <updated>2019-03-29T03:04:49+00:00</updated>
 <id>http://bluesh55.github.io/</id>
 <author>
   <name>오승환 | Seunghwan Oh</name>
   <email></email>
 </author>

 
 <entry>
   <title>[iOS] 그라데이션 원하는대로 만들기</title>
   <link href="http://bluesh55.github.io//2017/11/09/ios-gradient/"/>
   <updated>2017-11-09T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2017/11/09/ios-gradient</id>
   <content type="html">&lt;p&gt;뷰에 그라데이션 효과를 주고 싶을 땐 &lt;code class=&quot;highlighter-rouge&quot;&gt;CAGradientLayer&lt;/code&gt; 객체를 만들어서 뷰의 레이어 위에 올리면 된다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAGradientLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// gradient layer 설정...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSublayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그렇다면 원하는대로 그라데이션을 만들기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CAGradientLayer&lt;/code&gt;를 어떻게 설정해야하는지 알아보자.
이번 포스팅에서는 이런 그라데이션을 만들어 볼 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/gradient/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-방향&quot;&gt;1. 방향&lt;/h2&gt;

&lt;p&gt;먼저 그라데이션의 진행 방향을 정해보자. &lt;strong&gt;시작점&lt;/strong&gt;과 &lt;strong&gt;끝점&lt;/strong&gt;을 정해야하는데, 여기에 사용되는 좌표 체계는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(x,y)

0, 0-------------0.5, 0-----------------1, 0
|                   |                      |
|                   |                      |
|                   |                      |
|                   |                      |
|                   |                      |
|                   |                      |
0, 0.5-----------0.5, 0.5---------------1, 0.5
|                   |                      |
|                   |                      |
|                   |                      |
|                   |                      |
|                   |                      |
|                   |                      |
0, 1-------------0.5, 1-------------------1, 1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 아래로 진행되는 그라데이션을 만들기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;startPoint&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;endPoint&lt;/code&gt;속성을 다음과 같이 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Swift 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 좌표는 꼭 0.5 단위로 지정하지 않아도 된다.&lt;/p&gt;

&lt;h2 id=&quot;2-색상&quot;&gt;2. 색상&lt;/h2&gt;

&lt;p&gt;그라데이션은 반드시 2개 이상의 색상으로 이루어진다. &lt;code class=&quot;highlighter-rouge&quot;&gt;colors&lt;/code&gt; 속성에 2개 이상의 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIColor&lt;/code&gt;가 담긴 배열을 넘기면 된다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Swift 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Top&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Middle&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Bottom&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;진행 방향에 맞게 배열 순서를 정해야하는 것에 주의하자.&lt;/p&gt;

&lt;h2 id=&quot;3-변화-위치&quot;&gt;3. 변화 위치&lt;/h2&gt;

&lt;p&gt;마지막으로, 색상의 변화를 줄 지점을 정할 수 있다. 
설정하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;locations&lt;/code&gt; 속성에 위치 값을 배열로 넘기면 되고,
넘겨야하는 위치의 개수는 색상 개수와 같아야 한다.
필수 값은 아니라서 설정하지 않으면 다음과 같이 색상 개수대로 등분된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/gradient/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;눈을 크게 뜨고 보면 세로를 2등분하는 선이 보일 것이다. 이것은 다음과 같이 설정한 것과 같다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Swift 3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0 ~ 0.5 : Red ~ Green&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0.5 ~ 1 : Green ~ Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 정한 목표대로 만들기 위해서는 0.3 정도 주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Swift 3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0 ~ 0.3 : Red ~ Green&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0.3 ~ 1 : Green ~ Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/gradient/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Carrierwave 리사이징 옵션 정리</title>
   <link href="http://bluesh55.github.io//2017/11/07/carrierwave-resizing-options/"/>
   <updated>2017-11-07T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2017/11/07/carrierwave-resizing-options</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave&quot;&gt;Carrierwave&lt;/a&gt;는 루비 웹프레임워크에서 이미지 업로드를
손쉽게 할 수 있게 해주는 라이브러리다. &lt;strong&gt;Carrierwave&lt;/strong&gt;로 이미지를 업로드할 때 사용되는 총 4가지의 리사이징 옵션을 정리해봤다.&lt;/p&gt;

&lt;h3 id=&quot;1-resize_to_fitwidth-height&quot;&gt;1. resize_to_fit(width, height)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;비율 유지&lt;/li&gt;
  &lt;li&gt;잘림 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 옵션은 이미지의 비율을 유지하면서 사이즈를 변경한다. 가로 길이(width)와 세로 길이(height)를 입력 받는다.&lt;/p&gt;

&lt;p&gt;원본 이미지의 가로, 세로 중 큰 것이 입력받은 값에 도달할 때 까지 비율을 유지하며 리사이징한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 오른쪽 위를 잡고 비율을 유지하며 사이즈를 조절한다고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 이미지 사이즈가 어떻게 변하는지 밑의 이미지를 통해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;값을 가로와 세로 중 하나만 지정하면 무조건 지정한 쪽에 맞추게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-resize_to_limitwidth-height&quot;&gt;2. resize_to_limit(width, height)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;비율 유지&lt;/li&gt;
  &lt;li&gt;잘림 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resize_to_fit&lt;/code&gt; 옵션과 동일하지만 원본 이미지 크기가 입력받은 width, height보다 작을 경우에는
리사이징 하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-resize_to_fillwidth-height-gravity--center&quot;&gt;3. resize_to_fill(width, height, gravity = ‘Center’)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;비율 유지 안함&lt;/li&gt;
  &lt;li&gt;잘림 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;먼저 &lt;strong&gt;resize_to_fit&lt;/strong&gt;과 같이 비율로 리사이징을 한다. 다른점은 &lt;strong&gt;resize_to_fit&lt;/strong&gt;은 원본 이미지의 가로, 세로 중 큰 것을 기준으로 하지만,
이 옵션은 원본 이미지의 가로, 세로 중 작은 것을 기준으로 한다.&lt;/p&gt;

&lt;p&gt;그리고 비율을 유지하는 리사이징이 끝나면 입력된 width, height 크기에 맞게 잘라낸다(Crop).
잘라내는 위치는 &lt;strong&gt;gravity&lt;/strong&gt; 옵션으로 정할 수 있으며 다음과 같은 옵션들을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 값은 &lt;strong&gt;Center&lt;/strong&gt;로 설정된다.&lt;/p&gt;

&lt;p&gt;밑의 이미지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;:resize_to_fill =&amp;gt; [1024, 768, 'Center']&lt;/code&gt;를 실행했을 때 리사이징이 적용되는 과정이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 과정이 적용된 실제 이미지 리사이징 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-resize_and_padwidth-height-background--transparent-gravity--center&quot;&gt;4. resize_and_pad(width, height, background = :transparent, gravity = ‘Center’)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;비율 유지 안함&lt;/li&gt;
  &lt;li&gt;잘림 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 옵션은 조금 독특한 옵션인데, 이 옵션의 결과 이미지를 먼저 보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/carrierwave_resizing/sc-1-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지를 입력받은 width, height 사이즈로 만들지만, 원본 이미지를 변경하는  것이 아니라 여백을 채움으로써 사이즈를 맞춘다.&lt;/p&gt;

&lt;p&gt;세 번째 옵션으로 여백의 색상을 지정할 수 있으며 기본 값은 &lt;strong&gt;transparent(투명)&lt;/strong&gt;이다. 투명 옵션은 이미지 파일이
png 일 때 적용되고 그렇지 않다면 검은색으로 적용된다.&lt;/p&gt;

&lt;p&gt;네 번째 옵션은 사이즈가 원본 이미지보다 커졌을 때 원본 이미지가 위치할 방향이다. 다음과 같은 옵션을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 값은 &lt;strong&gt;Center&lt;/strong&gt;로 설정된다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SNS 뉴스피드 구현과 쿼리 튜닝</title>
   <link href="http://bluesh55.github.io//2017/05/11/first-sql-tuning-sns-newsfeed/"/>
   <updated>2017-05-11T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2017/05/11/first-sql-tuning-sns-newsfeed</id>
   <content type="html">&lt;p&gt;소셜 네트워킹 서비스를 개발하면서 SNS의 뉴스피드 기능을 만들게 되었다.
그런데 사람이 점점 늘어나면서 뉴스피드를 로딩하는 시간이 점점 길어지더니
한 페이지 로딩하는데 5초 정도 걸리기 시작했다.
데이터베이스 쿼리로 인한 속도 저하는 처음 겪어보는 일이라서 어떻게 해야할지 막막했지만
가만히 손 놓고 있을 수는 없었기 때문에 처음으로 쿼리 튜닝이라는 것을 해봤다.&lt;/p&gt;

&lt;p&gt;먼저 디비 구조는 다음과 같다. 필요 없는 컬럼은 생략했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
User
+----------------------------+--------------+------+-----+---------+----------------+
| Field                      | Type         | Null | Key | Default | Extra          |
+----------------------------+--------------+------+-----+---------+----------------+
| id                         | int(11)      | NO   | PRI | NULL    | auto_increment |
+----------------------------+--------------+------+-----+---------+----------------+
Index: id


Follow
+-------------+----------+------+-----+---------+----------------+
| Field       | Type     | Null | Key | Default | Extra          |
+-------------+----------+------+-----+---------+----------------+
| id          | int(11)  | NO   | PRI | NULL    | auto_increment |
| follower_id | int(11)  | YES  |     | NULL    |                |
| followed_id | int(11)  | YES  |     | NULL    |                |
+-------------+----------+------+-----+---------+----------------+
Index: id

Post
+----------------+--------------+------+-----+---------+----------------+
| Field          | Type         | Null | Key | Default | Extra          |
+----------------+--------------+------+-----+---------+----------------+
| id             | int(11)      | NO   | PRI | NULL    | auto_increment |
| user_id        | int(11)      | YES  | MUL | NULL    |                |
| content        | longtext     | YES  |     | NULL    |                |
| created_at     | datetime     | NO   |     | NULL    |                |
+----------------+--------------+------+-----+---------+----------------+
Index: id, user_id

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 기존의 뉴스피드 포스트 목록을 불러오기 위한 쿼리는 다음과 같았다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`posts`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`posts`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;`posts`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`follows`&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`follows`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`followed_id`&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`follows`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`follower_id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;`posts`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 초반에 잘 동작했지만 포스트와 팔로우의 레코드가 각각 1000단위로 쌓이자
점점 느려지기 시작했다. 그리로 현재 프로덕션 환경의 디비에는 포스트, 팔로우 각각 7000개씩 저장되어 있다.&lt;/p&gt;

&lt;p&gt;서비스에 영향을 주면 안되기 때문에 테스트는
동일한 환경에 포스트 6000, 팔로우 4000개로 셋팅한 다른 데이터베이스에서 진행했다.
그리고 쿼리의 분석과 소요 시간을 확인하기 위해 MySQL 내장 기능인 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW PROFILES&lt;/code&gt;를 사용했다.&lt;/p&gt;

&lt;p&gt;테스트 환경에서 위의 쿼리는 3.7초가 소요되는 것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW PROFILES&lt;/code&gt; 명령어를 통해 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Query_ID | Duration   | Query                                                                                                                                                                                                                   |
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|        1 | 3.78938800 | SELECT `posts`.* FROM `posts` WHERE (`posts`.`user_id` IN (SELECT `users`.`id` FROM `users` INNER JOIN `follows` ON `users`.`id` = `follows`.`followed_id` WHERE `follows`.`follower_id` = 1) OR `posts`.`user_id` = 1) |
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;으로 쿼리를 분석 해서 포스트와 팔로우 테이블을 풀스캔하는 것을 발견할 수 있었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+--------------------+---------+--------+------------------------+---------+---------+------+------+--------------------------------+
| id | select_type        | table   | type   | possible_keys          | key     | key_len | ref  | rows | Extra                          |
+----+--------------------+---------+--------+------------------------+---------+---------+------+------+--------------------------------+
|  1 | PRIMARY            | posts   | ALL    | index_posts_on_user_id | NULL    | NULL    | NULL | 6301 | Using where                    |
|  2 | DEPENDENT SUBQUERY | users   | eq_ref | PRIMARY                | PRIMARY | 4       | func |    1 | Using index                    |
|  2 | DEPENDENT SUBQUERY | follows | ALL    | NULL                   | NULL    | NULL    | NULL | 4801 | Using where; Using join buffer |
+----+--------------------+---------+--------+------------------------+---------+---------+------+------+--------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 팔로우의 풀스캔부터 없애보기로 했다. 팔로우 테이블이 조인되는 과정에서 발생하는 풀스캔을 없애기 위해
&lt;code class=&quot;highlighter-rouge&quot;&gt;follows.follower_id&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;follows.followed_id&lt;/code&gt;컬럼에 인덱스를 추가해봤다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+--------------------+---------+--------+-----------------------------------------------------------+------------------------------+---------+-------+------+--------------------------+
| id | select_type        | table   | type   | possible_keys                                             | key                          | key_len | ref   | rows | Extra                    |
+----+--------------------+---------+--------+-----------------------------------------------------------+------------------------------+---------+-------+------+--------------------------+
|  1 | PRIMARY            | posts   | ALL    | index_posts_on_user_id                                    | NULL                         | NULL    | NULL  | 6301 | Using where              |
|  2 | DEPENDENT SUBQUERY | follows | ref    | index_follows_on_follower_id,index_follows_on_followed_id | index_follows_on_follower_id | 5       | const |    1 | Using where              |
|  2 | DEPENDENT SUBQUERY | users   | eq_ref | PRIMARY                                                   | PRIMARY                      | 4       | func  |    1 | Using where; Using index |
+----+--------------------+---------+--------+-----------------------------------------------------------+------------------------------+---------+-------+------+--------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“ALL” 타입에서 “ref”타입으로 변경된 것을 볼 수 있다. 이것은 정상적으로 인덱스를 탄다는 것을 뜻한다.
이렇게 2개의 풀스캔 중 1개를 없애니 실행 속도가 3.7초에서 0.03초로 엄청나게 줄어들었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Query_ID | Duration   | Query                                                                                                                                                                                                                   |
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|        1 | 0.02776975 | SELECT `posts`.* FROM `posts` WHERE (`posts`.`user_id` IN (SELECT `users`.`id` FROM `users` INNER JOIN `follows` ON `users`.`id` = `follows`.`followed_id` WHERE `follows`.`follower_id` = 1) OR `posts`.`user_id` = 1) |
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로 포스트의 풀스캔을 없애기 위해 포스트와 팔로우를 직접 JOIN하도록 했다.&lt;/p&gt;

&lt;p&gt;이 과정에서 애를 좀 먹었는데 처음에 구상한 쿼리는 다음과 같았다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followed_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follower_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;쿼리 안에서 유저 테이블에 대한 참조를 없애고 포스트와 팔로우 테이블로만 표현했다.
이것으로 인해 포스트 테이블도 “ref” 타입으로 변경되었고, 팔로우 테이블은 “index_merge” 타입으로 변경되었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+----+-------------+---------+-------------+-----------------------------------------------------------+-----------------------------------------------------------+---------+---------------------------+------+-------------------------------------------------------------------------------------+
| id | select_type | table   | type        | possible_keys                                             | key                                                       | key_len | ref                       | rows | Extra                                                                               |
+----+-------------+---------+-------------+-----------------------------------------------------------+-----------------------------------------------------------+---------+---------------------------+------+-------------------------------------------------------------------------------------+
|  1 | SIMPLE      | follows | index_merge | index_follows_on_follower_id,index_follows_on_followed_id | index_follows_on_follower_id,index_follows_on_followed_id | 5,5     | NULL                      |    2 | Using union(index_follows_on_follower_id,index_follows_on_followed_id); Using where |
|  1 | SIMPLE      | posts   | ref         | index_posts_on_user_id                                    | index_posts_on_user_id                                    | 5       | vinup.follows.followed_id |   50 | Using where                                                                         |
+----+-------------+---------+-------------+-----------------------------------------------------------+-----------------------------------------------------------+---------+---------------------------+------+-------------------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 위의 쿼리에는 한 가지 문제가 있었다.&lt;/p&gt;

&lt;p&gt;뉴스피드에서는 팔로우한 유저들의 포스트 뿐만 아니라 자신의 포스트도 보여줘야 하기 때문에
WHERE 절에 &lt;code class=&quot;highlighter-rouge&quot;&gt;posts.user_id = 1&lt;/code&gt;을 추가했지만,
INNER JOIN의 ON 조건에 의해 자신의 포스트가 제외되어 버렸다.&lt;/p&gt;

&lt;p&gt;그리고 이 문제는 UNION을 사용해서 WHERE 절을 2개의 쿼리로 나누는 것으로 해결했다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followed_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follower_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;UNION으로 작성하니 포스트까지 “ref” 타입으로 변경되었고 실행 시간은 0.0006초로 더욱 더 빨라졌다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EXPLAIN
+----+--------------+------------+------+-----------------------------------------------------------+------------------------------+---------+---------------------------+------+-------------+
| id | select_type  | table      | type | possible_keys                                             | key                          | key_len | ref                       | rows | Extra       |
+----+--------------+------------+------+-----------------------------------------------------------+------------------------------+---------+---------------------------+------+-------------+
|  1 | PRIMARY      | follows    | ref  | index_follows_on_follower_id,index_follows_on_followed_id | index_follows_on_follower_id | 5       | const                     |    1 | Using where |
|  1 | PRIMARY      | posts      | ref  | index_posts_on_user_id                                    | index_posts_on_user_id       | 5       | vinup.follows.followed_id |   61 | Using where |
|  2 | UNION        | posts      | ref  | index_posts_on_user_id                                    | index_posts_on_user_id       | 5       | const                     |    5 | Using where |
| NULL | UNION RESULT | &amp;lt;union1,2&amp;gt; | ALL  | NULL                                                      | NULL                         | NULL    | NULL                      | NULL |           |
+----+--------------+------------+------+-----------------------------------------------------------+------------------------------+---------+---------------------------+------+-------------+

Profile
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Query_ID | Duration   | Query                                                                                                                                                                                                                   |
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|        1 | 0.00066025 | SELECT posts.* FROM posts INNER JOIN follows ON posts.user_id = follows.followed_id WHERE follows.follower_id = 1 UNION SELECT posts.* FROM posts WHERE posts.user_id = 1                                               |
+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5초 =&amp;gt; 0.0006초, 아주 만족스러운 작업이었다 ^ㅇ^&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고 링크&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EXPLAIN 사용법 - &lt;a href=&quot;http://lovekmg.blogspot.kr/2008/08/mysql-explain%EB%B3%B4%EB%8A%94%EB%B2%95.html&quot;&gt;http://lovekmg.blogspot.kr/2008/08/mysql-explain%EB%B3%B4%EB%8A%94%EB%B2%95.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>[Rails] 배포 환경에서 발생하는 Auto loading 문제</title>
   <link href="http://bluesh55.github.io//2017/01/29/rails-autoload-in-production/"/>
   <updated>2017-01-29T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2017/01/29/rails-autoload-in-production</id>
   <content type="html">&lt;p&gt;레일즈는 소스 코드 파일을 로드하기 위해서
실제로 사용될 때 그제서야 파일을 로드하는 Auto loading&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;과
서버가 실행될 때 한 번에 모든 파일을 로드하는 Eager loading 두 가지 방식을 사용한다.&lt;/p&gt;

&lt;p&gt;며칠 전 까지만 해도 나는 Auto loading 방식만 대충 알고 있었고 Eager loading 방식에 대해서는 모르고 있었는데,
정말 우연한 계기로 두 방식을 상황에 맞게 적절히 사용하지 않으면 개발이나 테스트 환경이 아닌 &lt;strong&gt;배포 환경&lt;/strong&gt;에서
문제가 될 수 있다는 것을 알게 되었다. 이 문제를 통해 레일즈의 Auto loading 방식과 Eager loading 방식에 대해서 좀 더 자세히 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;1-어떤-문제가-있었는지&quot;&gt;1. 어떤 문제가 있었는지?&lt;/h3&gt;

&lt;p&gt;lib 디렉토리에 존재하는 파일을 읽지 못하는 문제였다.
lib 디렉토리에 선언된 클래스를 불러오지 못해서 클래스를 사용하려고 하면
&lt;code class=&quot;highlighter-rouge&quot;&gt;NameError: uninitialized constant&lt;/code&gt; 에러가 발생했다.&lt;/p&gt;

&lt;p&gt;그런데 이상했던 점은 개발, 테스트 환경에서는 정상적으로 불러오다가 스테이징, 프로덕션 환경에
배포하기만 하면 불러오지 못한다는 것이었다. 테스트도 모두 성공하고 콘솔로 테스트해봐도
제대로 불러오는데 배포환경만 되면 에러를 뿜어대니 돌아버릴 지경이었다.&lt;/p&gt;

&lt;h3 id=&quot;2-문제의-원인&quot;&gt;2. 문제의 원인&lt;/h3&gt;

&lt;p&gt;오랜 삽질과 검색 끝에 결국 원인을 찾아냈는데,
레일즈 4.2 버전에서 5.0으로 버전 업 될 때 production 환경에서 auto loading 기능을
비활성화 시키는 기능이 추가되었다.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
이게 왜 문제가 되냐면 이전에는 개발 환경이든 배포 환경이든 auto loading을 사용했기 때문에
app 디렉토리 이외의 디렉토리를 로드할 땐 다음과 같이 설정하는게 일반적이었다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoload_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 배포 환경에서 auto loading이 비활성화 되어버리니 위의 설정 코드가 무용지물이 되어버리고
lib 디렉토리를 참조할 수 없게 된 것이다.&lt;/p&gt;

&lt;h3 id=&quot;3-문제의-해결-방법은&quot;&gt;3. 문제의 해결 방법은?&lt;/h3&gt;

&lt;p&gt;해결 방법은 간단하다. 배포 환경에서는 Eager loading 방식을 사용하므로
배포 환경일 땐 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.eagerload_paths&lt;/code&gt;에 경로를 추가하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/application&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoload_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eager_load_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 실제로 오토 로딩되는 경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload_paths + eager_load_paths&lt;/code&gt;이기 때문에&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
설정 코드를 더 간단히 하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.eager_load_paths&lt;/code&gt;만 작성해도 된다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/application&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eager_load_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://collectiveidea.com/blog/archives/2016/07/22/solutions-to-potential-upgrade-problems-in-rails-5&quot;&gt;https://collectiveidea.com/blog/archives/2016/07/22/solutions-to-potential-upgrade-problems-in-rails-5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.arkency.com/2014/11/dont-forget-about-eager-load-when-extending-autoload/&quot;&gt;http://blog.arkency.com/2014/11/dont-forget-about-eager-load-when-extending-autoload/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Lazy loading이라는 용어가 있지만 레일즈에선 auto loading이라고 부른다. Ruby 언어에서 소스 파일을 lazy하게 불러올 때 사용되는 autoload 키워드에서 따온 것 같은데, Ruby의 autoload는 3.0 버전 이후 deprecated 될 수 있다고 한다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/upgrading_ruby_on_rails.html#autoloading-is-disabled-after-booting-in-the-production-environment&quot;&gt;업그레이드 가이드 문서 참조&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/v5.0.0/railties/lib/rails/engine.rb#L683&quot;&gt;Rails Engine 코드 참조&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>[Rails] 타임 헬퍼로 시간 테스트하기</title>
   <link href="http://bluesh55.github.io//2017/01/14/rspec-time-travel/"/>
   <updated>2017-01-14T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2017/01/14/rspec-time-travel</id>
   <content type="html">&lt;p&gt;테스트 코드를 실행할 때 현재 시간을 변경하고 싶을 때가 있다.
예를 들어 모임 시간을 가지는 모임(Meeting) 클래스가 있고 모임 시간이 지났을 때
종료 상태를 반환하는 메서드를 테스트한다고 해보자. 먼저 모임 클래스는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meeting&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finished?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모임의 시간은 임의로 정할 수 있지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.now&lt;/code&gt;가 반환하는 시간은
변경하기 까다롭다.
이럴 때 레일즈에서 제공하는 타임 헬퍼 모듈
(&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::Testing::TimeHelpers&lt;/code&gt;)을 사용하면 좋다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# spec/unit/meeting_spec.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Meeting&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeHelpers&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#finished?&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meeting_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;모임 시간이 지났을 때&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 현재 시간을 하루 뒤로 설정한다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;travel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finished?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;모임 시간이 지나지 않았을 때&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 현재 시간을 모임 시간 하루 전으로 설정한다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;travel_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meeting_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finished?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;나는 타임 헬퍼를 시간으로 정렬되는 것을 테스트할 때 사용하고 있다.
데이터베이스에 2개의 레코드를 생성한 뒤 정렬 결과를 확인하는 방식인데,
테스트 코드가 너무 빨리 실행되서인지 레코드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt;이 같아지는 바람에
정렬 테스트의 결과가 실행할 때 마다 달라지는 문제가 있었다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;최신순으로 정렬되어야 함&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;old_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# old_meeting과 new_meeting의 created_at이 같음!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 때 현재 시간을 1초 정도 딜레이 시켜주면 정상적으로 테스트할 수 있다.
물론 &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt; 값을 직접 설정해도 되지만 코드를 읽을 때 타임 헬퍼를 사용하는 것이
좀 더 직관적으로 보인다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# created_at 변경&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;최신순으로 정렬되어야 함&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;old_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# old_meeting과 new_meeting의 created_at이 1초 차이남&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 타임 헬퍼 사용&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;최신순으로 정렬되어야 함&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;old_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;travel&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# old_meeting과 new_meeting의 created_at이 1초 차이남&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 때 주의할 점은 테스트가 끝나도 현재 시간이 초기화되지 않는다는 것이다.
전체 테스트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;travel 1.second&lt;/code&gt; 코드를 300번 사용하면 현재 시간이 5분이 밀리게 된다.
이것 때문에 뜻밖의 오류가 발생할 수 있으니
반드시 테스트 종료 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;travel&lt;/code&gt; 메서드로 변경한 시간을 초기화 시키는
&lt;code class=&quot;highlighter-rouge&quot;&gt;travel_back&lt;/code&gt; 메서드를 실행시켜 주어야 한다. 이것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;rails_helper.rb&lt;/code&gt; 설정 파일에 작성할 수 있다.
(RSpec 기준)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# spec/rails_helper.rb&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeHelpers&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;travel_back&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails_helper.rb&lt;/code&gt; 파일에서 타임 헬퍼를 include 하면 모든 테스트 코드에서 사용할 수 있기 때문에
이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;meeting_spec.rb&lt;/code&gt;에서 include 코드를 작성할 필요는 없다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# spec/unit/meeting_spec.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Meeting&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# include ActiveSupport::Testing::TimeHelpers&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#finished?&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>logrotate로 리눅스 로그 관리</title>
   <link href="http://bluesh55.github.io//2016/12/10/logrotate/"/>
   <updated>2016-12-10T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/12/10/logrotate</id>
   <content type="html">&lt;p&gt;웹 서비스를 운영할 때 쉽게 놓칠 수 있는 것 중 하나가 로그 관리다.
로그를 관리하지 않아도 운영하는데는 문제가 없으며 운영 초반에는
로그를 관리해야할 정도로 트래픽이 발생하는 경우가 드물기 때문이다.&lt;/p&gt;

&lt;p&gt;하지만 시간이 점점 지나고 트래픽이 늘어나면 로그는 고스란히 디스크에 쌓이게 되고,
이를 그대로 방치해두면 엄청난 디스크 용량을 낭비하게 된다.&lt;/p&gt;

&lt;p&gt;끝도 없이 늘어나는 로그 파일을 관리하기 위해 리눅스에서는
&lt;strong&gt;logrotate&lt;/strong&gt;라는 프로그램을 사용하면 좋다.
logrotate는 정해진 시간마다 로그 파일을 백업시켜주는데,
로그 파일이 무작정 늘어나는 것을 방지하기 위해 로그 파일의 최대 개수를 정해놓으면
최대 개수를 초과했을 때 가장 오래된 로그 파일을 삭제하고 새로운 로그 파일을 생성하면서
rotating 해주는 툴이다.&lt;/p&gt;

&lt;p&gt;시스템에 설치되어있지 않다면 설치해준다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; logrotate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logrotate.conf&lt;/code&gt; 파일에 어떤 로그를 로테이팅할지 작성할 수 있다.
파일을 열어보면 기본으로 작성된 코드가 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# see &quot;man logrotate&quot; for details
# rotate log files weekly
weekly

# keep 4 weeks worth of backlogs
rotate 4

# create new (empty) log files after rotating old ones
create

# use date as a suffix of the rotated file
dateext

# uncomment this if you want your log files compressed
#compress

# RPM packages drop log rotation information into this directory
include /etc/logrotate.d

# no packages own wtmp and btmp -- we'll rotate them here
/var/log/wtmp {
    monthly
    create 0664 root utmp
        minsize 1M
    rotate 1
}

/var/log/btmp {
    missingok
    monthly
    create 0600 root utmp
    rotate 1
}

# system-specific logs may be also be configured here.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;include /etc/logrotate.d&lt;/code&gt;를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logrotate.d&lt;/code&gt; 디렉토리의 파일들을
전부 불러오는 것을 알 수 있다. 그럼 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logrotate.d&lt;/code&gt; 디렉토리에
새로운 설정 파일을 생성하고 레일즈 프로젝트의 로그를 관리하도록 작성해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /etc/logrotate.d/myproject

/home/ec2-user/myproject/log/production.log {
  weekly
  rotate 4
  missingok
  dateext
  postrotate
    touch /home/ec2-user/myproject/tmp/restart.txt
  endscript
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;weekly : 로그 파일을 1주일에 한 번 백업한다. 다른 옵션으로는 daily, monthly, yearly가 있다.&lt;/li&gt;
  &lt;li&gt;rotate 4 : 최대 로그 파일 개수를 4개로 제한한다.
weekly에 rotate 4면 최대 4주치의 로그만 기록되고 5주째부터는
1주차 로그가 삭제되고 2, 3, 4, 5주차 로그가 저장된다.&lt;/li&gt;
  &lt;li&gt;missingok : 로그 파일이 존재하지 않아도 에러를 발생시키지 않는다.&lt;/li&gt;
  &lt;li&gt;dateext : 로그 파일에 YYYYMMDD 형식의 확장자를 추가한다.&lt;/li&gt;
  &lt;li&gt;postrotate / endscript : rotate 이후에 실행될 명령어를 작성한다.
로그 파일이 백업된 후 서버를 재시작시켜서 새로운 로그 파일에 작성할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 설정한 뒤에 한 번 실행해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /usr/sbin/logrotate /etc/logrotate.d/myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음 실행했을 때는 아무 일도 일어나지 않는다.
왜냐면 logrotate는 실행될 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/logrotate.status&lt;/code&gt; 파일을 통해
정해진 기간이 지났는지 확인하는데 방금은 아무 정보가 없었기 때문이다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/logrotate.status&lt;/code&gt; 파일에 현재 날짜만 기록하고 로테이팅이 실행되지는 않았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /var/lib/logrotate.status

logrotate state -- version 2
&quot;/var/log/yum.log&quot; 2016-1-1
&quot;/home/ec2-user/myproject/log/production.log&quot; 2016-12-10
&quot;/var/log/dracut.log&quot; 2016-1-1
&quot;/var/log/wtmp&quot; 2015-12-1
&quot;/var/log/spooler&quot; 2016-12-4
&quot;/var/log/btmp&quot; 2016-12-1
&quot;/var/log/maillog&quot; 2016-12-4
&quot;/var/log/secure&quot; 2016-12-4
&quot;/var/log/messages&quot; 2016-12-4
&quot;/var/account/pacct&quot; 2015-12-1
&quot;/var/log/cron&quot; 2016-12-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;production.log 파일이 오늘 날짜(2016-12-10)로 실행되었다는 것이 저장되었다.
이제 12월 17일이 되어야 1주일이 지났다는 것을 인식하고 로테이팅이 실행될 것이다.&lt;/p&gt;

&lt;p&gt;지금 당장 확인해보려면 2016-12-10을 일주일 전인 2016-12-03으로 바꾼 뒤
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /usr/sbin/logrotate /etc/logrotate.d/myproject&lt;/code&gt;를 한번 더 실행해보면 된다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MVC 웹 프레임워크의 문제점</title>
   <link href="http://bluesh55.github.io//2016/11/26/rails-mvc/"/>
   <updated>2016-11-26T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/11/26/rails-mvc</id>
   <content type="html">&lt;p&gt;나는 2014년 10월에 레일즈를 처음 접했고 2년 동안 거의 모든 웹 프로젝트에 레일즈를 사용했다.&lt;/p&gt;

&lt;p&gt;그리고 레일즈를 배우면서 루비를 배웠다. 그 때의 나에게 루비는 “파이썬과 비슷한 동적 스크립트 언어” 그 이상도 이하도 아니었다.
C나 Java와는 달리 컴파일도 필요없고 변수에 타입도 없다. 딱 이 수준이었다.&lt;/p&gt;

&lt;p&gt;C, Java, Python을 조금씩 해봤기 때문에 변수, 반복문, 조건문 이런 기본적인 개념은 금방 익혔고
이 정도만 알아도 레일즈로 개발하는데는 큰 문제가 없었다.
웬만한 필요한 기능은 Gem으로 만들어져 있었고 막히는 부분은 가이드 문서나 튜토리얼 아니면 스택오버플로우를 찾아 봤다.
시간이 좀 지나고나니 웬만한건 레일즈로 만들어낼 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;프로젝트의 규모가 조금 커지자 문제가 발생했다. 기존의 기능을 수정하거나 새로운 기능을 추가하는 등 시스템에 변화가 생길 때마다
코드를 짜기가 너무 힘들어졌다. 비즈니스 로직들은 한 눈에 알아보기도 힘들 정도로 여기저기 흩어져 있어서
이 코드가 무슨 코드였는지 파악하기 위해 전체 코드들을 다 살펴봐야 했다.
대체 뭐가 문제였을까?&lt;/p&gt;

&lt;h2 id=&quot;mvc&quot;&gt;MVC&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;레일즈는 MVC 패턴을 적용한 웹 프레임워크이며 View는 사용자와, Model은 데이터베이스와 상호작용하며 Controller는 View와 Model 사이에서 다리 역할을 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;레일즈를 처음 접했을 때 한 번씩은 읽어봤을법한 MVC 패턴 설명이다. 레일즈는 완벽한 MVC 프레임워크이다.
모델은 ActiveRecord를 상속받아서 데이터베이스와 쉽게 통신할 수 있고, 뷰는 HTML으로 이루어져있으며
컨트롤러는 모델 객체를 활용하여 특정 기능을 수행한 뒤 사용자에게 뷰를 렌더한다.&lt;/p&gt;

&lt;p&gt;그렇다면 우리가 개발할 앱의 비즈니스 로직은 대체 어디에 들어가야할까?
Controller일까? 아니면 Model일까? (View는 당연히 아니다)&lt;/p&gt;

&lt;h3 id=&quot;1-controller&quot;&gt;1. Controller&lt;/h3&gt;

&lt;p&gt;다음은 Rails Tutorial에 작성된 로그인 코드다.
유저를 데이터베이스에서 찾아서 비밀번호를 검사하는 간단한 비즈니스 로직이 컨트롤러에 들어가있는 것을 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Log the user in and redirect to the user's show page.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Create an error message.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단일 책임 원칙(Single Responsibility Principle)이라는 객체지향 원칙이 있다.
이 원칙을 지키려면 “코드를 변경하는 이유”가 딱 한가지만 있으면 된다.
위 코드는 크게 2가지 이유로 변경될 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;로그인 처리 후 렌더링하는 페이지가 바뀔 경우&lt;/li&gt;
  &lt;li&gt;로그인 방식이 바뀔 경우(ex. 이메일이 아니라 이름으로 로그인)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;컨트롤러에는 고유의 책임이 이미 주어져 있다.
유저로부터 요청을 받아서 적당한 응답을 던져주는 것이 바로 컨트롤러의 책임이다.
이미 책임이 부여된 컨트롤러에 비즈니스 로직을 작성하는 것은
당연히 단일 책임 원칙을 위배하며 따라서 컨트롤러에 비즈니스 로직을 넣는 것은 좋은 방법이 아니다.&lt;/p&gt;

&lt;h3 id=&quot;2-model&quot;&gt;2. Model&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Skinny controllers, Fat models&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;레일즈 개발자라면 한 번쯤은 들어봤을만한 문장이다.
컨트롤러는 최대한 가볍게 유지하고, 웬만한 코드는 모델에 넣으라는 뜻이다.&lt;/p&gt;

&lt;p&gt;하지만 생각해보면 이것도 틀렸다는 것을 알 수 있다.
컨트롤러는 고유의 책임이 이미 존재해서 비즈니스 로직을 넣을 수 없었다.
그렇다면 모델은 주어진 책임이 없을까?
모델은 ActiveRecord를 상속받음으로써 데이터베이스와 통신할 수 있게되며
이 때 상속받는 메서드만 200개가 훨씬 넘는다고 한다.&lt;/p&gt;

&lt;p&gt;즉, 모델은 ActiveRecord를 상속받는 순간 Persistence layer의 책임을 갖게된다.
위의 로그인 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;User.find_by(...)&lt;/code&gt;가 바로 모델이 해야하는 일이다.
결국 모델도 비즈니스 로직을 담을만한 곳은 아니다.&lt;/p&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점?&lt;/h2&gt;

&lt;p&gt;레일즈에 비즈니스 로직을 넣을만한 곳이 없는 것이 문제일까?
레일즈는 프레임워크다. 프레임워크는 대부분의 일반적인 상황에서 사용할 수 있는 코드를 제공한다.
반면에 비즈니스 로직은 우리가 개발하는 애플리케이션에 specific하다.
따라서 프레임워크에 비즈니스 로직을 넣을 곳이 없는 것은 문제가 되지 않는다.
없으면 만들면 되기 때문이다.&lt;/p&gt;

&lt;p&gt;문제는 바로 프레임워크 위에 모든 코드를 작성하게 하는 가이드와 수많은 튜토리얼들,
가장 큰 문제는 그것을 이상하다고 여기지 않고 그대로 받아들였던 나 자신이다.
아마 프레임워크를 통해 언어를 배웠기 때문에 기본기가 부족해서 그러지 않았나 싶다.
뭐든지 기본기가 탄탄해야 한다는 것을 다시 한 번 배우게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;p&gt;몇 달 전부터 비즈니스 로직을 프레임워크로부터 분리시키는 방법을 찾으려고 했다.
이전에 번역한 [&lt;a href=&quot;https://bluesh55.github.io/2016/09/28/refactor-fat-active-record-model/&quot;&gt;[번역] 액티브레코드 모델을 리팩토링하는 7가지 방법&lt;/a&gt;]
도 그런 의도에서 작성한 것이었다.
몇 가지 종류의 Plain Old Ruby Objects를 작성해서 비즈니스 로직을 분리시킬 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 좋은 해결책이 될 수 있는 &lt;a href=&quot;https://www.youtube.com/watch?v=o_TH-Y78tt4&quot;&gt;밥 아저씨의 Clean Architecture 강의 영상&lt;/a&gt;을 찾았는데
다음 포스트에서는 이 영상을 다뤄봐야겠다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>[Rails] Rake task 사용하기</title>
   <link href="http://bluesh55.github.io//2016/10/23/rake-task/"/>
   <updated>2016-10-23T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/10/23/rake-task</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Rake&lt;/strong&gt;는 Ruby 개발 환경에서 사용되는 빌드 프로그램이다.
Unix에서 사용되는 &lt;strong&gt;Make&lt;/strong&gt;와 비슷한 용도로 사용되며 &lt;strong&gt;Makefile&lt;/strong&gt;과 비슷한
&lt;strong&gt;Rakefile&lt;/strong&gt;이 존재한다.&lt;/p&gt;

&lt;p&gt;Rake를 통해 실행되는 작업을 &lt;strong&gt;태스크(task)&lt;/strong&gt;라고 하며
태스크들은 레일즈 서버의 실행여부와 상관 없이 단독으로 실행된다.
레일즈를 설치하면 Rake 젬도 같이 설치되어서 바로 Rake 커맨드를
사용할 수 있다.&lt;/p&gt;

&lt;p&gt;레일즈로 개발해봤다면 rake 명령어를 써 본 경험이 있을텐데,
가장 익숙한 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake routes&lt;/code&gt;일 것이다.
이것들은 레일즈에 기본으로 탑재되어 있는 태스크다.&lt;/p&gt;

&lt;p&gt;실행할 수 있는 태스크 목록은 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake -T&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake --tasks&lt;/code&gt;를 실행하면 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/rake/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;task-만들기&quot;&gt;Task 만들기&lt;/h2&gt;

&lt;p&gt;기본적으로 제공하는 태스크 뿐만 아니라 원하는 태스크를 생성하고 실행시킬 수 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/tasks/my_task.rake&lt;/code&gt; 파일을 생성해서 첫 번째 태스크를 작성해보자.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/tasks/my_task.rake&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random_fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Kiwi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파일을 저장하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake random_fruit&lt;/code&gt; 명령을 입력하면 랜덤으로 과일 이름이 출력되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/rake/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 첫 번째와 마지막 과일을 출력해주는 태스크를 만들어 보자.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/tasks/my_task.rake&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Kiwi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random_fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/rake/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 비슷한 태스크들은 네임스페이스로 묶을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Kiwi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/rake/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금까지는 간단한 루비 코드로 태스크를 생성했는데 좀 더 복잡하게
레일즈 프로젝트의 실행 환경과 연동시킬 수도 있다.
다음 코드는 과일 목록으로 String array가 아닌 데이터베이스에 저장된
Fruit 모델을 사용하는 예제이다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드의 재사용성을 높이기 위해 자주 사용되는 코드를
메서드로 분리시킬 수 있다. 다음 예제는 중복 코드를 없애지는 않지만
메서드 사용을 보여주기 위해 작성했다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_fruit&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_fruit&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;last_fruit&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막으로, 정의된 모든 태스크 목록을 보기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake -T&lt;/code&gt; 명령어를 사용했었는데
다시 한번 명령어를 입력해보면 위에서 정의한 태스크는 목록에 나오지 않는 것을 볼 수 있다.
태스크 목록에 커스텀 태스크가 나오게 하기 위해서는 태스크 상단에 Description을 입력해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pick a item randomly&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pick the first item&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pick the last item&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_fruit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_fruit&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_fruit&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;last_fruit&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MYSQL에 이모티콘 저장하기</title>
   <link href="http://bluesh55.github.io//2016/10/11/mysql-emoji/"/>
   <updated>2016-10-11T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/10/11/mysql-emoji</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/img/blog/emoji/emojis.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MYSQL에 이모티콘을 저장하려 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Incorrect string value&lt;/code&gt; 에러가 발생하면서 저장되지 않는 문제가 발생했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&amp;gt; desc faqs;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| id         | int(11)      | NO   | PRI | NULL    | auto_increment |
| question   | varchar(255) | YES  |     | NULL    |                |
| answer     | text         | YES  |     | NULL    |                |
| created_at | datetime     | NO   |     | NULL    |                |
| updated_at | datetime     | NO   |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)

mysql&amp;gt; insert into faqs(question, answer, created_at, updated_at)
          values('This is question', 'This is answer 😎 ', NOW(), NOW());
ERROR 1366 (HY000): Incorrect string value: '\xF0\x9F\x98\x8E ' for column 'answer' at row 1

mysql&amp;gt; select * from faqs;
Empty set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;utf8 인코딩은 3바이트까지 지원하는데 이모티콘은 4바이트를 차지하기 때문에 문제가 발생한다고 한다.
이를 해결하기 위해 &lt;a href=&quot;https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-3.html&quot;&gt;MYSQL 5.5.3&lt;/a&gt; 부터
4바이트를 지원하는 &lt;strong&gt;utf8mb4&lt;/strong&gt;라는 캐릭터 셋이 추가되었다.
그러므로 이모티콘을 지원하기 위해서는 테이블의 캐릭터 셋을 utf8에서 utf8mb4로 변경하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;레일즈-프로젝트에서-마이그레이션-하기&quot;&gt;레일즈 프로젝트에서 마이그레이션 하기&lt;/h2&gt;

&lt;p&gt;기존 테이블들의 캐릭터 셋을 변경하는 마이그레이션 파일을 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails g migration ConvertCharsetToUtf8mb4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Raw SQL을 작성해서 원하는 테이블의 캐릭터 셋 속성을 변경해준다.
그리고 인덱싱되는 VARCHAR 형식의 컬럼이 있다면 최대 길이를 191로 변경해야 한다.
InnoDB 엔진의 인덱스 최대 길이는 767 bytes 이기 때문에 최대 글자 수는
3 bytes의 utf8은 255자, 4 bytes의 utf8mb4에서는 191자가 된다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConvertCharsetToUtf8mb4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ALTER TABLE table_name CHANGE column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt; 파일에 인코딩을 변경해준다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;collation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;utf8mb4_unicode_ci&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 마이그레이트를 실행하면 utf8 대신 utf8mb4가 적용되고 이모티콘이 잘 저장되는 것을 볼 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&amp;gt; insert into tags(name, created_at, updated_at) values (&quot;Emoji😎 &quot;, NOW(), NOW());
Query OK, 1 row affected (0.00 sec)
mysql&amp;gt; select * from tags;
+----+------------+---------------------+---------------------+
| id | name       | created_at          | updated_at          |
+----+------------+---------------------+---------------------+
|  1 | Emoji😎     | 2016-10-11 20:19:02 | 2016-10-11 20:19:02 |
+----+------------+---------------------+---------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;마이그레이트를 진행하면서
&lt;code class=&quot;highlighter-rouge&quot;&gt;Mysql2::Error: Specified key was too long; max key length is 767 bytes: CREATE UNIQUE INDEX&lt;/code&gt; 에러가 발생할 수도 있다.
이 문제는 이미 생성되어 있는 인덱스의 길이가 아직 255로 지정되어 있어서 발생하는 것 같다.
만약 이 문제가 발생한다면 마이그레이션 파일에 인덱스를 지우고 새로 만드는 코드를 작성해주자.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConvertCharsetToUtf8mb4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remove_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;unique: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;using: :btree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;length: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;column_name: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;191&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ALTER TABLE table_name CHANGE column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-링크&quot;&gt;참고 링크&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.arkency.com/2015/05/how-to-store-emoji-in-a-rails-app-with-a-mysql-database/&quot;&gt;http://blog.arkency.com/2015/05/how-to-store-emoji-in-a-rails-app-with-a-mysql-database/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>터미널 멀티플렉서 tmux를 배워보자</title>
   <link href="http://bluesh55.github.io//2016/10/10/tmux-tutorial/"/>
   <updated>2016-10-10T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/10/10/tmux-tutorial</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;tmux&lt;/strong&gt;는 터미널 화면을 여러개로 분할하고,
세션을 생성하여 attach/detach를 자유롭게 할 수 있는 터미널 멀티플렉서이다.
Vim과 tmux를 함께 사용하는 &lt;a href=&quot;https://www.youtube.com/watch?v=5r6yzFEXajQ&quot;&gt;동영상&lt;/a&gt;
을 계기로 tmux를 알게 되었는데, 좋은 영상이니 한 번쯤 보는 것을 추천한다.
초중반엔 Vim 튜토리얼, 후반엔 tmux 소개와 사용법을 설명한다.&lt;/p&gt;

&lt;p&gt;이전에 &lt;a href=&quot;https://bluesh55.github.io/dev/2016/10/09/vim-ide.html&quot;&gt;Vim을 IDE처럼 만드는걸&lt;/a&gt; 포스팅 했었는데
Vim만으로는 부족했던 부분을 tmux가 채워줄 수 있을 것 같다.
GUI 작업 환경을 별로 좋아하지 않아서 대부분의 작업을 터미널에서 하는 편인데
이걸 이제 알았다는게 아쉬울 정도로 좋다.
아직은 배우는 중이라 제대로 쓰고 있는 것 같지는 않지만
그럼에도 불구하고 굉장히 만족스럽게 사용하고 있다.&lt;/p&gt;

&lt;p&gt;tmux는 Vim과 마찬가지로 커스텀이 매우 자유로워서
많은 플러그인들이 이미 만들어져 있고 설치하기도 쉽다.
상태바에 현재 배터리 용량이나 CPU 사용율을 표시할 수도 있고
위의 동영상을 보면 애플 뮤직과 연동해서 현재 실행되는 음악의 제목을 표시하기도 한다.
이렇게 플러그인을 찾아서, 혹은 만들어서 하나 둘 씩 붙여가는게 나름 재미있다.&lt;/p&gt;

&lt;p&gt;사용법을 소개하기 전에 tmux를 사용하면 어떤 것을 할 수 있는지 알아보자.
먼저 tmux의 기본 기능은 &lt;strong&gt;화면 분할&lt;/strong&gt;이다.
하나의 터미널 화면을 여러 개의 터미널로 쪼갤 수 있고
쪼개진 화면의 크기를 자유자재로 조절할 수 있어서
나만의 레이아웃을 만들 수도 있다.
tmux를 사용하지 않았을 땐 여러 개의 터미널 탭을 켜놓고
이리저리 왔다갔다 했었지만 이젠 하나의 화면에서 모두 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/tmux/tmux-layout.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또 다른 장점은 터미널을 &lt;strong&gt;세션&lt;/strong&gt;으로 관리할 수 있다는 것이다.
터미널 환경을 하나의 세션으로 분리시켜서 언제든 attach/detach 할 수 있다.
하나의 분리된 세션이기 때문에 detach 되어도 백그라운드에서 계속 실행된다.
그리고 세션은 모두에게 공유되기 때문에 2명이 1개의 세션에 attach 해서
페어프로그래밍 하기에도 아주 좋다.
혼자 사용한다면 각 프로젝트별로 세션을 나누어서 작업 환경을 분리하기도 좋다.&lt;/p&gt;

&lt;p&gt;하지만 무엇보다도 터미널에서 간지가 난다는 것이 가장 큰 장점이다.&lt;/p&gt;

&lt;h2 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h2&gt;

&lt;p&gt;OS X의 Homebrew로 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux -V&lt;/code&gt;를 실행시켜 보자.
제대로 출력되면 성공이지만 이런 에러가 뜰 수도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dyld: Library not loaded: /usr/local/lib/libevent-2.0.5.dylib
...
Trace/BPT trap: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 문제는 아마도 설치되어 있는 libevent 라이브러리와
tmux가 필요로 하는 libevent의 버전이 달라서 생기는 문제인 것 같다.
해결 방법은 기존에 설치되어 있는 libevent를 제거하고 tmux를 설치하는 것이다.
tmux를 설치할 때 올바른 버전의 libevent가 같이 설치되기 때문이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew uninstall libevent
brew install tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;용어-설명&quot;&gt;용어 설명&lt;/h2&gt;

&lt;p&gt;본격적으로 사용법을 배우기 전에 몇 가지 용어를 알고 가야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프리픽스(prefix) : 단축키를 입력하기 전에 먼저 입력해야하는 키 조합이다.
tmux의 기본 프리픽스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + b&lt;/code&gt;이다. 단축키가 c라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + b + c&lt;/code&gt;를 입력해야 한다.&lt;/li&gt;
  &lt;li&gt;세션(session) : tmux가 관리하는 가장 큰 단위이다. 세션에 attach/detach가 이루어진다.
세션에서 detach 해도 세션은 백그라운드에서 계속 실행된다.&lt;/li&gt;
  &lt;li&gt;윈도우(window) : 세션 안에 존재하는 탭과 같은 기능이다. 하나의 세션에 여러 개의 윈도우를 가질 수 있다.
세션 안에서 윈도우를 만들고 전환할 수 있으며 탭을 이동할 때 처럼 전체 화면이 전환된다.&lt;/li&gt;
  &lt;li&gt;팬(pane) : 윈도우 안에 존재하는 화면 단위이다. 하나의 윈도우에 여러 개의 팬을 가질 수 있다.
전체 화면을 세로로 2등분 하면 2개의 팬이 생긴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;session&quot;&gt;Session&lt;/h2&gt;

&lt;p&gt;세션 실행&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 세션 생성(이름은 숫자로 정해짐)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux

or

&lt;span class=&quot;c&quot;&gt;# 세션 생성하며 이름 지정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux new &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; session_name
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux new-session &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; session_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세션 종료&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 세션 안의 마지막 팬에서 실행&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit

&lt;/span&gt;or

&lt;span class=&quot;c&quot;&gt;# 세션 바깥에서 특정 세션을 종료&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux kill-session &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; session_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세션 attach&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 특정 세션으로 진입하기&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux attach &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; session_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세션 detach&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 세션 빠져나오기&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 세션 안에서 실행&lt;/span&gt;
&amp;lt;prefix&amp;gt; + d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세션 목록 보기&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;window&quot;&gt;Window&lt;/h2&gt;

&lt;p&gt;윈도우와 관련된 명령어 &amp;amp; 단축키는 모두 세션 안에서 실행해야 한다.&lt;/p&gt;

&lt;p&gt;윈도우 생성&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; + c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;윈도우 이름 변경&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; + ,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전, 다음 윈도우 이동&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 다음 윈도우&lt;/span&gt;
&amp;lt;prefix&amp;gt; + n

&lt;span class=&quot;c&quot;&gt;# 이전 윈도우&lt;/span&gt;
&amp;lt;prefix&amp;gt; + p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 윈도우 리스트 보기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; + w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pane&quot;&gt;Pane&lt;/h2&gt;

&lt;p&gt;세로로 윈도우 분할&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; + %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;가로로 윈도우 분할&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; + &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;팬 이동&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; + q + 숫자

or

&amp;lt;prefix&amp;gt; + q + 방향키
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;줌&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 특정 팬을 전체화면으로 전환
# 한번 더 누르면 원상태 복구
&amp;lt;prefix&amp;gt; + z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 간단한 tmux 사용법을 알아봤다.
이제 세션, 윈도우, 팬을 자유롭게 생성하고 종료할 수 있을 것이다.
다음에는 tmux에 플러그인을 설치하고 설정파일을 커스텀하는 것을 배워보자.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Vim을 IDE처럼 사용하기</title>
   <link href="http://bluesh55.github.io//2016/10/09/vim-ide/"/>
   <updated>2016-10-09T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/10/09/vim-ide</id>
   <content type="html">&lt;p&gt;코드 편집기로 Vim을 사용한지 2주년 된 기념으로 Vim 포스팅을 하려고 한다.&lt;/p&gt;

&lt;p&gt;1년 넘게 특별한 플러그인 없이 Vim만 사용했었는데,
앱 개발을 위해 안드로이드 스튜디오를 써보니 단순 코드 편집뿐만 아니라
많은 기능을 지원해주는 IDE가 너무 편하고 좋았다.
하지만 안드로이드 스튜디오에서도 Vim 모드를 사용할 정도로 Vim을 좋아하기 때문에
다른 IDE를 사용하지 않고 Vim에 여러 플러그인들을 설치해보기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;vim-플러그인-설치-방식&quot;&gt;Vim 플러그인 설치 방식&lt;/h2&gt;

&lt;p&gt;Vim에서 플러그인을 설치하고 관리하는 방식은 대표적으로 2가지가 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Pathogen&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vundle&lt;/code&gt;인데 결론만 말하자면 Vundle이 더 좋다.
Pathogen과 Vundle에 대해서는 &lt;a href=&quot;https://kldp.org/node/125263&quot;&gt;여기&lt;/a&gt;를 참고하면 좋다.
이 포스팅에서는 모든 플러그인을 Vundle을 사용해서 설치할 것이다.&lt;/p&gt;

&lt;p&gt;Vundle도 마찬가지로 vim 플러그인인데 지금은 플러그인 관리를 하고 있지 않기 때문에 수동으로
&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Github&lt;/a&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/bundle/&lt;/code&gt; 디렉토리로 클론 받는다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vundle은 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt; 파일에서 플러그인을 관리한다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;를 열고 상단에 다음과 같이 설정코드를 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nocompatible              &quot; be iMproved&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; required
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; off                  &quot; required

&lt;span class=&quot;c&quot;&gt;&quot; set the runtime path to include Vundle and initialize&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; rtp&lt;span class=&quot;p&quot;&gt;+=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;bundle/Vundle&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; let Vundle manage Vundle, required&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'VundleVim/Vundle.vim'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;            &quot; required
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;    &quot; required
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치할 플러그인을 &lt;code class=&quot;highlighter-rouge&quot;&gt;call vundle#begin()&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;call vundle#end&lt;/code&gt; 사이에 작성한다.
Vundle 플러그인을 Vundle로 관리하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin 'VundleVim/Vundle.vim&lt;/code&gt;을 작성한 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;Vundle이 잘 설치되었는지 확인하기 위해 다른 플러그인을 하나 설치해보자.
&lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt;이라는 플러그인을 설치하기 위해
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin 'vim-airline/vim-airline'&lt;/code&gt;를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nocompatible              &quot; be iMproved&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; required
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; off                  &quot; required

&lt;span class=&quot;c&quot;&gt;&quot; set the runtime path to include Vundle and initialize&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; rtp&lt;span class=&quot;p&quot;&gt;+=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;bundle/Vundle&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; let Vundle manage Vundle, required&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'VundleVim/Vundle.vim'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'vim-airline/vim-airline'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;            &quot; required
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;    &quot; required
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Vim을 열고 &lt;code class=&quot;highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt; 명령을 실행하면 설정 파일에 작성한 플러그인들이 모두 설치된다.
플러그인을 삭제하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에서 삭제한 뒤에 Vim을 열어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;:PluginClean&lt;/code&gt; 명령을 실행하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;ide의-기본-파일트리-nerdtree&quot;&gt;IDE의 기본, 파일트리 “NERDTree”&lt;/h1&gt;

&lt;p&gt;IDE에는 파일트리가 빠질 수 없다.
NERDTree는 가장 유명한 파일트리 플러그인이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/nerdtree1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt; 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin 'scrooloose/nerdtree'&lt;/code&gt;를 추가하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt; 명령을 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'scrooloose/nerdtree'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;:NERDTree&lt;/code&gt; 명령으로 파일트리를 켤 수 있고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;:NERDTreeToggle&lt;/code&gt; 명령으로 on/off할 수 있다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 단축키를 세팅하면 더 편하게 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; NERDTree ON 단축키를 &quot;\nt&quot;로 설정&lt;/span&gt;
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;nt &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;NERDTree&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NERDTree 화면으로 커서를 옮기고 ‘m’ 키를 누르면 파일 추가, 삭제, 이동등을 실행할 수 있는 메뉴가 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/nerdtree2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;상태바를-더-간지나게-vim-airline&quot;&gt;상태바를 더 간지나게 “vim-airline”&lt;/h2&gt;

&lt;p&gt;Vim 화면 하단에 상태바에는 파일명, 시간, 커서 위치 등이 표시된다.
다소 밋밋할 수 있는 상태바를 간지나게 바꿔주는 것이 &lt;strong&gt;vim-airline&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;설치 전
&lt;img src=&quot;/public/img/blog/vim/airline1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 후
&lt;img src=&quot;/public/img/blog/vim/gitgutter2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin 'vim-airline/vim-airline'&lt;/code&gt;를 추가하면 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt; 명령을 잊지 말자.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'vim-airline/vim-airline'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim-airline&lt;/code&gt;의 장점은 많은 플러그인들과 쉽게 연동할 수 있다는 것이다.
&lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;Github&lt;/a&gt;소개에 따르면
20개 이상의 플러그인들과 연동할 수 있다고 한다.
다른 플러그인과 연동하면 상태바에 기능을 추가할 수 있는데,
예를 들어서 Git wrapper 플러그인 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim-fugitive&lt;/code&gt;를 연동하면 위 사진처럼 상태바에 현재 브랜치를 나타낼 수 있다.&lt;/p&gt;

&lt;p&gt;연동을 지원하는 플러그인을 설치하기만 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim-airline&lt;/code&gt;에 적용되니
꼭 다른 플러그인과 연동시켜 사용해보자.&lt;/p&gt;

&lt;h2 id=&quot;코드-변경-내역을-한눈에-vim-gitgutter&quot;&gt;코드 변경 내역을 한눈에 “vim-gitgutter”&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;vim-gitgutter&lt;/strong&gt;는 Git으로 관리하는 파일의 변경된 부분을
Vim에서 확인할 수 있는 플러그인이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/gitgutter1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &quot;airblade/vim-gitgutter&quot;&lt;/code&gt;를 추가하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt; 명령을 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'airblade/vim-gitgutter'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 플러그인을 설치하면 &lt;strong&gt;vim-airline&lt;/strong&gt; 플러그인과 자동으로 연동되며
상태바에 추가, 삭제, 변경 내역이 표시된다.
(+4 ~0 -0)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/gitgutter2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vim에서-git을-사용하기-vim-fugitive&quot;&gt;Vim에서 Git을 사용하기 “vim-fugitive”&lt;/h2&gt;

&lt;p&gt;Git 명령을 Vim에서 사용할 수 있게 Git을 래핑한 플러그인이다.
로그 보기, 체크아웃, 상태 보기 등 Git의 기능을 대부분 사용할 수 있다.
Git 기능을 안쓰더라도 설치만 해두면 &lt;strong&gt;vim-airline&lt;/strong&gt; 플러그인과 연동되어
상태바에 현재 브랜치를 띄울 수 있기 때문에 편리하다.&lt;/p&gt;

&lt;p&gt;설치하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &quot;tpope/vim-fugitive&quot;&lt;/code&gt;를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'tpope/vim-fugitive'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되면 하단 상태바에 현재 브랜치가 나타나는 것을 볼 수 있다.(master)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/gitgutter2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[참고]&lt;br /&gt;
브랜치 옆에 아이콘이 뜨지 않을 경우 &lt;a href=&quot;https://github.com/powerline/fonts&quot;&gt;Powerline font&lt;/a&gt;를 설치하고
사용 중인 터미널의 폰트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Meslo LG M DZ for Powerline&lt;/code&gt;으로 변경한다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt; 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;let g:airline_powerline_fonts = 1&lt;/code&gt; 설정을 추가하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;코드-문법-체크-syntastic&quot;&gt;코드 문법 체크 “syntastic”&lt;/h1&gt;

&lt;p&gt;이 플러그인은 코드의 문법 에러를 체크해주며 역시 &lt;strong&gt;vim-airline&lt;/strong&gt;과 연동할 수 있다.
연동하게 되면 상태바에 문법 에러가 발생한 줄 번호가 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/syntastic1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &quot;scrooloose/syntastic&quot;&lt;/code&gt;을 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'scrooloose/syntastic'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ide-필수-기능-파일찾기-ctrlp&quot;&gt;IDE 필수 기능 파일찾기 “ctrlp”&lt;/h2&gt;

&lt;p&gt;새로운 코드 파일을 열 때마다 파일트리로 이동해서 커서를 이동하며
파일을 찾다보면 굉장히 불편하다.
&lt;strong&gt;ctrlp&lt;/strong&gt;는 Vim에서 파일을 빠르게 찾을 수 있는 기능을 제공한다.
&lt;strong&gt;vim-airline&lt;/strong&gt;과 연동되긴 하지만 이 부분에 큰 메리트는 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/ctrlp1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &quot;ctrpvim/ctrlp.vim&quot;&lt;/code&gt;을 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'ctrlpvim/ctrlp.vim'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치한 뒤 파일 찾기를 실행하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Control + p&lt;/code&gt; 단축키를 누르면 된다.
실행 했을 때 화면이 멈추거나 속도가 느려질 수 있는데,
프로젝트 내의 써드파티 디렉토리나 .git 디렉토리 등 파일이 많은 곳을 인덱싱해서
생기는 현상이다.
속도 향상을 위해 이런 디렉토리를 무시할 수 있는 설정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:ctrlp_custom_ignore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dir'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'\.git$\|public$\|log$\|tmp$\|vendor$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\v\.(exe|so|dll)$'&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이외에도 여러가지 기능과 단축키가 많으니
&lt;a href=&quot;https://github.com/ctrlpvim/ctrlp.vim&quot;&gt;Github&lt;/a&gt;에서 참고하길 바란다.&lt;/p&gt;

&lt;h2 id=&quot;색상-테마-변경-color-scheme&quot;&gt;색상 테마 변경 “Color Scheme”&lt;/h2&gt;

&lt;p&gt;“Color Scheme”는 텍스트에 &lt;strong&gt;어떤 색&lt;/strong&gt;을 입힐지 설정한다.
일종의 테마라고 보면 되는데, 
“Color Scheme”라는 플러그인이 있는 것은 아니고
“Color Scheme” 역할을 하는 플러그인이 많이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vimcolors.com/&quot;&gt;vimcolors.com&lt;/a&gt;에 들어가면 400여개의
Color Scheme 목록을 볼 수 있고 이 중에서 하나를 고르면 된다.&lt;br /&gt;
이번 포스팅에서는 &lt;a href=&quot;http://vimcolors.com/1/jellybeans/dark&quot;&gt;jellybeans&lt;/a&gt; 테마를 적용시켜 볼 것이다.&lt;/p&gt;

&lt;p&gt;플러그인 설치를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &quot;nanotech/jellybeans.vim&quot;&lt;/code&gt;를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'nanotech/jellybeans.vim'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 완료했으면 색상을 적용하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;color jellybeans&lt;/code&gt;를 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt; jellybeans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Vim으로 파일을 열면 알록달록한 화면을 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;코드-하이라이트-syntax&quot;&gt;코드 하이라이트 “Syntax”&lt;/h2&gt;

&lt;p&gt;“Color Scheme”를 적용했어도 코드를 열었을 때 텍스트가 전부 흰색으로 나올 수 있다.
Vim이 해당 코드 파일 문법에 대한 정보를 가지고 있지 않아서 생기는 현상이다.
“Color Scheme”가 어떤 &lt;strong&gt;색상&lt;/strong&gt;을 입힐지 정하는 것이라면
“Syntax”는 어떤 &lt;strong&gt;텍스트&lt;/strong&gt;에 색상을 입힐지 정하는 것이다.&lt;/p&gt;

&lt;p&gt;웬만한 언어는 기본적으로 지원하지만
커피스크립트 문법은 지원하지 않기 때문에
커피스크립트 파일을 열어보면 다음과 같은 화면을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/syntax1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이럴 땐 문법에 맞는 플러그인을 설치해야 한다.
커피스크립트 Syntax 설치를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &quot;kchmck/vim-coffee-script&quot;&lt;/code&gt;를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; 추가&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;'kchmck/vim-coffee-script'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 완료하면 코드에 제대로 하이라이팅이 되어있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/blog/vim/syntax2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;몇 가지 유용한 플러그인들을 소개해봤는데 아직 IDE를 따라가기엔 한참 부족한 것 같다.
다음엔 터미널을 분할해서 IDE처럼 사용할 수 있도록 tmux에 대해 포스팅 해봐야 겠다.&lt;/p&gt;

&lt;h2 id=&quot;참고-링크&quot;&gt;참고 링크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kldp.org/node/125263&quot;&gt;Pathogen &amp;amp; Vundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5r6yzFEXajQ&quot;&gt;Vim + Tmux - OMG!Code 동영상&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;NERDTree Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;syntastic Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ctrlpvim/ctrlp.vim&quot;&gt;Ctrlp Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nanotech/jellybeans.vim&quot;&gt;jellybeans Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kchmck/vim-coffee-script&quot;&gt;vim-coffee-script Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>[번역] 액티브레코드 모델을 리팩토링하는 7가지 방법</title>
   <link href="http://bluesh55.github.io//2016/09/28/refactor-fat-active-record-model/"/>
   <updated>2016-09-28T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/09/28/refactor-fat-active-record-model</id>
   <content type="html">&lt;p&gt;2년 가까이 레일즈로 개발을 해오면서 OOP를 제대로 적용하지 못하고 있다는 것을 많이 느꼈다.
컨트롤러나 모델 클래스위에 모든 코드를 작성했고, 비즈니스 로직은 프로젝트 전역에 걸쳐서 퍼지게 되었다.
이대로 가면 안되겠다 싶어 Rails에서도 OOP를 적용할 수 있는 방법을 찾아보다가 Code Climate에서 작성한 글을 발견했다.
Fat model에 몰려있는 코드들을 여러 종류의 클래스로 만들어서 분리시키는 방법을 설명하고 있다.
2012년 글이지만 좋은 글인 것 같아서 메모해둘 겸 번역해봤다. 영어 실력이 부족해서 오역이 있을 수도 있다.&lt;/p&gt;

&lt;p&gt;원문 출처 : &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&quot;&gt;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여러 팀들이 레일즈 어플리케이션의 퀄리티를 향상시키기 위해 &lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt;(오픈 소스 코드 검사기)를 사용 하고 나서
모델에 모든 코드를 쑤셔 넣는 습관을 없애게 되었다.
“Fat model”은 앱이 커질수록 유지 보수를 어렵게 만든다.
컨트롤러를 도메인 로직으로 어지럽히는 것보다는 낫지만,
대부분은 &lt;strong&gt;단일 책임 원칙&lt;/strong&gt;을 지키지 못한다.
일단 유저의 행동이 개입되면 그것은 &lt;strong&gt;단일 책임 원칙&lt;/strong&gt;을 지키지 못한다.&lt;/p&gt;

&lt;p&gt;개발 초기에는 단일 책임 원칙을 지키기 쉽다.
ActiveRecord 모델 클래스는 persistence(영속성)와 associations(관계)만 관리하면 된다.
하지만 시간이 지날수록 클래스는 점점 커지게 된다.
본질적으로 persistence를 책임져야 하는 모델 클래스는 사실상 모든 비즈니스 로직도 같이 책임지게 되어버린다.
그리고 1년, 2년이 지나면 당신의 User 클래스는 500줄이 넘는 코드와 몇 백개의 퍼블릭 메서드를 갖게 될 것이다.
물론 Callback Hell은 덤이다.&lt;/p&gt;

&lt;p&gt;어플리케이션에 복잡한 무언가를 추가하려면 케이크 반죽을 팬의 바닥에 바를 때 처럼
작고 캡슐화된 객체들에 퍼트려야 한다.
그리고 “Fat model”은 당신이 반죽을 처음 부었을 때 볼 수 있는 커다란 반죽 덩어리와 같다.
“Fat model”을 분해하고, 로직을 고르게 펴 바르려면 리팩토링을 해야한다.
이 프로세스를 반복하다 보면 정의된 인터페이스를 기반으로 동작하는 간단한 객체들을 볼 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;레일즈에 OOP를 적용하기 어렵다고 생각할 수도 있다.
나도 처음엔 그렇게 생각했다. 하지만 계속 연구하다보니 레일즈 프레임워크에는 문제가 없다는 것을 깨달았다.
문제는 바로 레일즈의 쉽게 스케일링할 수 없는 “컨벤션”이다.
자세히 말하면 &lt;a href=&quot;http://martinfowler.com/eaaCatalog/activeRecord.html&quot;&gt;Active Record 패턴&lt;/a&gt;이 명쾌하게 처리할 수 있는 정도를
초과한 &lt;strong&gt;복잡성을 관리할만한 컨벤션&lt;/strong&gt;이 없기 때문이다.
하지만 운좋게도 우리는 레일즈가 제공하지 않는 부분에 객체 지향을 기반으로 하는 원칙들과 best practices를 적용시킬 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;모델에서-믹스인을-추출하지-말-것&quot;&gt;모델에서 믹스인을 추출하지 말 것&lt;/h2&gt;

&lt;p&gt;이것부터 먼저 얘기해보자.
나는 메서드 세트를 거대한 ActiveRecord 클래스에서 “concerns” 혹은 단 하나의 모델에만 사용되는 모듈로 옮기는 행위를 해서는 안된다고 생각한다.
한 번은 누군가 이런 얘기를 하는 것을 들었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Any application with an app/concerns directory is concerning (번역 불가).”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 나는 이것에 동의한다. 상속(inheritance)보다 구성(composition)을 더 선호한다.
(역주: OOP 개념의 inheritance와 composition을 말한다.)
믹스인을 이렇게 사용하는 것은 마치 어질러진 방을 청소할 때 물건들을 아무 서랍에나 쑤셔박는 것과 같다.
겉은 깨끗해 보이지만 어떤 물건이 어디에 있는지 바로 확인하기 어렵고, 필요한 물건을 찾으려고할 때 매우 힘들어질 것이다.&lt;/p&gt;

&lt;p&gt;자, 그럼 이제 리팩토링을 해보자!&lt;/p&gt;

&lt;h2 id=&quot;1-value-object&quot;&gt;1. Value Object&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?ValueObject&quot;&gt;Value Object&lt;/a&gt;는 비교 연산될 때 자신의 상태보다 &lt;strong&gt;값&lt;/strong&gt;에 의존하는 간단한 객체이다.
이것은 대부분 변경할 수 없는(immutable) 값이다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI&lt;/code&gt;, 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pathname&lt;/code&gt;은 루비 표준 라이브러리에 포함된 Value Object인데,
이것 뿐만 아니라 당신은 Value Object를 직접 정의할 수 있다(아니, 반드시 정의 해야한다).
ActiveRecord로부터 Value Object를 추출하는 것은 가장 쉬운 리팩토링 작업이다.&lt;/p&gt;

&lt;p&gt;레일즈에서는 자신과 연관되어 있는 로직을 가지는 속성(들)이 있을 때 Value Object를 만들면 좋다.
단순 텍스트나 숫자 값 이상의 그 어떤 것이든 Value Object의 대상이 될 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들어, 텍스트 메시징 어플리케이션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhoneNumber&lt;/code&gt; Value Object를 가질 수 있다.
e-커머스 어플리케이션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money&lt;/code&gt; 클래스가 필요할 것이다.&lt;br /&gt;
Code Climate에서는 간단히 A부터 F까지 각 클래스나 모듈이 받은 등급을 나타내는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rating&lt;/code&gt;이라는 Value Object를 만들었다.
Ruby의 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 클래스를 사용할 수 있었지만(실제로 사용해보기도 했다) &lt;code class=&quot;highlighter-rouge&quot;&gt;Rating&lt;/code&gt; 클래스를 사용하니 데이터와 기능을 결합시킬 수 있었다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rating&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comparable&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;better_than?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eql?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConstantSnapshot&lt;/code&gt; 클래스는 이제 Rating 객체를 퍼블릭 메서드로 노출시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstantSnapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rating&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConstantSnapshot&lt;/code&gt; 클래스의 코드를 줄이는 것 뿐만 아니라 몇 가지의 장점이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#worse_than?&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;#better_than?&lt;/code&gt; 메서드는 Ruby의 빌트인 오퍼레이터(e.g. &amp;gt;, &amp;lt;)보다 등급(rating)을 비교하는데 있어서 더 직관적이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#hash&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;#eql?&lt;/code&gt;을 정의하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rating&lt;/code&gt; 클래스를 해시 키로 사용할 수 있게 만든다.
Code Climate에서는 이것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumberable#group_by&lt;/code&gt;를 사용해서 등급으로 그룹을 만들 때 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#to_s&lt;/code&gt; 메서드를 사용하면 추가적인 작업 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rating&lt;/code&gt; 객체를 문자열이나 템플릿에 interpolating 할 수 있다. (역주: interpolating -&amp;gt; “Hello #{rating} World”)&lt;/li&gt;
  &lt;li&gt;별도의 클래스로 정의했기 때문에 주어진 “remediation cost”로부터 올바른 Rating 객체를 리턴하는 팩토리 메서드를 만들 수 있다.
(역주: &lt;code class=&quot;highlighter-rouge&quot;&gt;Rating.from_cost&lt;/code&gt; 메서드를 말하는 듯 하다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-service-object&quot;&gt;2. Service Object&lt;/h2&gt;

&lt;p&gt;시스템상에서 일어나는 몇몇 액션들은 Service Object로 캡슐화할 수 있다. 액션이 다음의 기준을 하나 이상 만족하면 Service Object를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;액션이 복잡하다 (e.g. 회계 기간이 끝날 때 결산하는 작업)&lt;/li&gt;
  &lt;li&gt;액션이 여러개의 모델을 사용한다 (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreditCard&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;를 사용하는 e-커머스 결제 시스템)&lt;/li&gt;
  &lt;li&gt;액션이 외부의 서비스와 상호작용한다 (e.g. SNS에 포스팅)&lt;/li&gt;
  &lt;li&gt;액션이 모델의 근본적인 핵심 기능이 아니다 (e.g. 정해진 기간이 끝난 데이터들을 모두 삭제하는 작업)&lt;/li&gt;
  &lt;li&gt;액션을 처리할 수 있는 여러가지 방법이 존재한다 (e.g. 액세스 토큰이나 비밀번호로 유저 인증)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;User#authenticate&lt;/code&gt; 메서드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserAuthenticator&lt;/code&gt;로 빼낼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAuthenticator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unencrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BCrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password_digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unencrypted_password&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionController&lt;/code&gt;는 이렇게 될 것이다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserAuthenticator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashboard_path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login failed.&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-form-object&quot;&gt;3. Form Object&lt;/h2&gt;

&lt;p&gt;다수의 ActiveRecord 모델이 하나의 폼에 의해 업데이트 될 때 Form Object는 서로 다른 데이터들을 캡슐화 할 수 있다.
이것은 (개인적으로 deprecated 되어야 한다고 생각하는)&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html&quot;&gt;accepts_nested_attributes_for&lt;/a&gt;
를 사용하는 것보다 훨씬 괜찮은 방법이다.
가장 일반적인 예제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Company&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;를 동시에 생성하는 회원가입 폼이다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Signup&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Naming&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conversion&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:company&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# … more validations …&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Forms are never themselves persisted&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persisted?&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;persist!&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persist!&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ActiveRecord와 같은 attribute 기능을 얻기 위해 &lt;a href=&quot;https://github.com/solnic/virtus&quot;&gt;Virtus&lt;/a&gt;를 사용했다.
Form Object는 ActiveRecord와 유사하게 동작할 것이고, 따라서 컨트롤러도 ActiveRecord를 사용하는 것 처럼 작성하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignupsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@signup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashboard_path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것은 위와 같이 간단한 경우에 잘 동작한다.
하지만 폼의 persistence 로직이 너무 복잡하다면 하나의 Service Object로 합칠 수도 있다.&lt;br /&gt;
As a bonus, since validation logic is often contextual, it can be defined in the place exactly where it matters instead of needing to guard validations in the ActiveRecord itself.&lt;br /&gt;
(역주: 해석하지 못했으나 Signup 클래스에서 validation 하는 것을 말하는 듯 합니다.)&lt;/p&gt;

&lt;h2 id=&quot;4-query-object&quot;&gt;4. Query Object&lt;/h2&gt;

&lt;p&gt;ActiveRecord 서브클래스(=스코프 혹은 클래스 메서드) 정의를 복잡하게 만드는 SQL 쿼리가 있으면 Query Object를 고려해봐야 한다.
각각의 Query Object는 비즈니스 규칙에 따라 결과셋을 반환하는 책임을 가진다.
예를 들어 시험 버전이 만료된 계정을 찾는 Query Object는 이렇게 작성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbandonedTrialQuery&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;plan: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;invites_count: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백그라운드 잡에서 이메일을 보내기 위해 이렇게 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;AbandonedTrialQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_offer_for_support&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt; 인스턴스는 Rails 3부터 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%BC%EA%B8%89_%EA%B0%9D%EC%B2%B4&quot;&gt;일급 객체&lt;/a&gt;이기
때문에 Query Object의 입력값으로 사용하기 좋다.
이렇게 하면 구성(composition)을 사용해서 쿼리를 결합할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;old_accounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;old_abandoned_trials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AbandonedTrialQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_accounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 클래스는 격리 상태로 테스트하지 않는 것이 좋다.
올바른 로우를 알맞은 순서로 리턴하는지, 조인이나 eager loading이 제대로 동작하는지 확인해야 하므로
객체와 데이터베이스를 함께 테스트 해야 한다.
(e.g. &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;N + 1 쿼리&lt;/a&gt; 방지)&lt;/p&gt;

&lt;h2 id=&quot;5-view-object&quot;&gt;5. View Object&lt;/h2&gt;

&lt;p&gt;만약 순전히 디스플레이 목적으로 필요한 로직이라면, 그것은 모델에 속하면 안된다.
자신에게 물어보라, &lt;strong&gt;“내가 만약 이 어플리케이션에 음석 인식 UI를 구현하고 있다면, 이게 필요한가?”&lt;/strong&gt;
만약 아니라면 Helper나 View Object에 작성하는것을 고려해봐야 한다.&lt;br /&gt;
(역주: 음성 인식 UI는 View가 없으니 “View가 없는 상태에서도 이 코드가 모델 클래스에 있어야 하는가?”를 묻는 것 같다.)&lt;/p&gt;

&lt;p&gt;예를 들어, Code Climate에서 도넛 차트는 코드베이스(e.g. &lt;a href=&quot;https://codeclimate.com/github/rails/rails&quot;&gt;Rails on Code Climate&lt;/a&gt;)
의 스냅샷을 기반으로 클래스 등급을 분해 하고, &lt;strong&gt;View&lt;/strong&gt;로 캡슐화 된다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DonutChart&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@snapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cache_key&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# pull data from @snapshot and turn it into a JSON structure&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;ERB (or Haml/Slim)&lt;/code&gt;템플릿 사이의 one-to-one 관계를 자주 볼 수 있었다.
이것 때문에 레일즈에 사용 가능한 &lt;a href=&quot;http://martinfowler.com/eaaCatalog/twoStepView.html&quot;&gt;Two Step View&lt;/a&gt; 패턴을
구현하는 방법을 찾아 봤지만, 아직 명확한 방법을 찾지는 못했다.&lt;/p&gt;

&lt;p&gt;Note: 레일즈 커뮤니티에서 “Presenter”라는 용어가 자주 보이는데, 나는 이 용어를 잘못 사용하지 않기 위해 사용을 피하는 편이다.
&lt;a href=&quot;http://blog.jayfields.com/2007/03/rails-presenter-pattern.html&quot;&gt;Jay Fields&lt;/a&gt;는 위에서 언급했던 “Form Object”를
설명하기 위해 “Presenter”라는 용어를 사용했다.
또한 레일즈에서는 “View”라는 용어를 “template”을 나타내기 위해 사용한다.
애매한 부분을 피하기 위해 가끔 View Object를 “View Model”로 표현하기도 한다.&lt;/p&gt;

&lt;h2 id=&quot;6-policy-object&quot;&gt;6. Policy Object&lt;/h2&gt;

&lt;p&gt;때때로 복잡한 읽기 명령에 필요한 객체를 받을 수 있는데, 
이런 경우에는 Policy Object를 사용할 수 있다.
이렇게 하면, 예를 들어 &lt;strong&gt;“유저가 분석 목적에 맞게 활성화 되어 있는지”&lt;/strong&gt;와 같은 모델과 관계 없는 로직이 모델 클래스에 들어가지 않게 할 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들어&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveUserPolicy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;active?&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email_confirmed?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last_login_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 Policy Object는 유저가 이메일 인증을 거쳤고, 최근 2주 안에 로그인 했을 때 active 상태로 간주한다는 비즈니스 규칙을 캡슐화한 것이다.
또한 유저가 액세스할 수 있는 데이터를 통제하는 Authorizer와 같은 그룹 규칙으로도 Policy Object를  사용할 수 있다.&lt;/p&gt;

&lt;p&gt;Policy Object는 Service Object와 비슷하지만 나는 무언가를 &lt;strong&gt;쓸 때&lt;/strong&gt; Service Object를 사용하고,
Policy Object는 &lt;strong&gt;읽을 때&lt;/strong&gt; 사용한다.&lt;br /&gt;
또한 Query Object와도 비슷할 수 있는데, Query Object는 결과를 반환하기 위해 SQL을 실행하는 것에 포커스 되어 있는 반면에
Policy Object는 이미 메모리에 로드된 모델 객체에서 실행된다.&lt;/p&gt;

&lt;h2 id=&quot;7-decorator&quot;&gt;7. Decorator&lt;/h2&gt;

&lt;p&gt;Decorator는 기존의 여러 작업들을 겹겹이 쌓을 수 있게 하며, 콜백과 비슷한 목적을 제공한다.
일부 상황에서만 실행되는 콜백이거나, 모델에 포함되어있는 콜백이 너무 많은 책임을 모델에 부여할 경우 Decorator를 사용하면 좋다.&lt;/p&gt;

&lt;p&gt;블로그 포스트에 댓글을 등록했을 때 등록한 댓글을 페이스북의 담벼락에도 등록되게 하고 싶지만
이 작업이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt; 클래스와 엮여있을 필요는 없다.
콜백에 너무 많은 책임을 추가하면 느리고 깨지기 쉬운 테스트가 되거나
전혀 무관한 테스트 케이스에 대해 부작용을 없애고 싶은 충동을 느낄 수 있다.&lt;/p&gt;

&lt;p&gt;페이스북 포스팅 로직을 Decorator로 만들면 이렇게 될 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FacebookCommentNotifier&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_to_wall&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_to_wall&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Facebook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컨트롤러에서는 다음과 같이 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommentsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FacebookCommentNotifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your comment was posted.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각 레이어가 기존의 인터페이스에 대한 책임을 지기 때문에 Decorator는 Service Object와 다르다고 할 수 있다.
Decorator를 만들면 사용하는 입장에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;FacebookCommentNotifier&lt;/code&gt; 인스턴스를 마치 &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt;를 사용하듯이 쓰면 된다.
루비는 표준 라이브러리로 &lt;a href=&quot;https://robots.thoughtbot.com/evaluating-alternative-decorator-implementations-in&quot;&gt;메타프로그래밍을 사용해 데코레이터를 쉽게 만드는&lt;/a&gt;
몇 가지의 기능들을 제공한다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;레일즈 어플리케이션에도 모델 레이어의 복잡성을 관리하는 많은 툴이 존재한다.
이것들은 당신이 레일즈를 버리는 것을 요구하지 않는다.
ActiveRecord는 환상적인 라이브러리지만, 어떤 패턴이든간에 그것에만 너무 의존하는 경우 문제가 생길 수 있다.
ActiveRecord가 persistence 기능만 수행하도록 제한하라.
모델에 있는 로직을 전체로 확산시키기 위해 이런 테크닉들을 적용하다 보면 좀 더 유지하기 쉬운 어플리케이션이 될 것이다.&lt;/p&gt;

&lt;p&gt;또한 당신이 알아야 할 것은 여기에 작성된 많은 패턴들은 상당히 간단하다는 것이다.
객체는 단지 “Plain Old Ruby Objects” (PORO)를 다른 방식으로 사용했고, 이것이 바로 핵심이자 OOP의 장점이다.
모든 문제들은 프레임워크나 라이브러리에 의해 해결될 필요가 없으며, 이름을 짓는 것도 매우 중요하다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>wrap_parameters</title>
   <link href="http://bluesh55.github.io//2016/09/25/rails-wrap-parameters/"/>
   <updated>2016-09-25T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/09/25/rails-wrap-parameters</id>
   <content type="html">&lt;p&gt;레일즈로 개발하다 보면 클라이언트에서 파라미터를 특정 엘리먼트로 래핑해서 보내야하는 경우가 있다.
예를 들어 Devise는 요청의 모든 파라미터들을 user로 감싸서 보내야한다.
하지만 클라이언트 입장에서는 이 작업이 번거롭고 불편하다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;example@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Nested&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;example@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_parameters&lt;/code&gt;를 사용할 수 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_parameters&lt;/code&gt;는 클라이언트의 요청이 서버에 전달되기전에 클라이언트와 서버 중간에서 파라미터를 특정 엘리먼트로 래핑해준다.
결과적으로 클라이언트와 서버 모두 각자 편한 방법으로 파라미터를 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;컨트롤러 상단에 작성할 수 있으며 어떤 엘리먼트로 감쌀지, 어떤 포맷의 요청에 처리할지 등을 지정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Devise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegistrationsController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;wrap_parameters&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url_encoded_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:multipart_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 Devise의 회원가입 컨트롤러에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_parameters&lt;/code&gt;를 사용한 것이다.&lt;/p&gt;

&lt;p&gt;이제 클라이언트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;email&quot;: &quot;example@gmail.com&quot;, &quot;password&quot;: &quot;12341234&quot;}&lt;/code&gt; 이렇게 요청을 보내도,&lt;br /&gt;
서버에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;user&quot;: {&quot;email&quot;: &quot;example@gmail.com&quot;, &quot;password&quot;: &quot;12341234&quot;}}&lt;/code&gt; 이렇게 받을 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_parameter&lt;/code&gt;는 몇 가지 옵션을 제공하는데, 특정 포맷의 요청에만 적용되도록 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url_encoded_form : Content-Type: Application/x-www-form-urlencode
multipart_form : Content-Type: multipart/formed-data
json : Content-Type: Application/json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 파라미터를 래핑할 것인지 혹은 어떤 파라미터는 래핑하지 않을 것인지에 대한 옵션도 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# whitelist&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wrap_parameters&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;include: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# blacklist&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wrap_parameters&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exclude: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참조-링크&quot;&gt;참조 링크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html&quot;&gt;http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Sidekiq 프로세스 2개 이상 실행하기</title>
   <link href="http://bluesh55.github.io//2016/09/24/multiple-sidekiq/"/>
   <updated>2016-09-24T00:00:00+00:00</updated>
   <id>http://bluesh55.github.io//2016/09/24/multiple-sidekiq</id>
   <content type="html">&lt;p&gt;레일즈에서 백그라운드 잡을 처리할 때 &lt;a href=&quot;https://github.com/mperham/sidekiq&quot;&gt;Sidekiq&lt;/a&gt;을 사용할 수 있는데, 
한 서버에 사이드킥을 사용하는 프로젝트를 2개 이상 돌리고 싶은 경우가 있다.
무작정 사이드킥 프로세스를 두 개 띄우면 서로 충돌이 난다.
이 문제를 해결하는 방법을 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis&lt;/h2&gt;

&lt;p&gt;먼저 사이드킥이 정상적으로 실행되기 위해서는 Redis가 필요하다.
Redis는 메모리에 key/value 형태로 값을 저장하는 Store 이다.&lt;/p&gt;

&lt;p&gt;사이드킥 프로세스를 두 개 띄웠을 때 충돌이 나는 이유는 바로 이 Redis 때문이다.
Redis는 여러 개의 데이터베이스로 나눠서 관리하는데,
사이드킥에 따로 Redis 설정을 하지 않으면 디폴트로 0번 데이터베이스를 사용하게 되어있다.
2개 이상의 프로세스에서 0번 데이터베이스를 같이 사용하려다 보니 충돌이 일어나는 것이다.&lt;/p&gt;

&lt;p&gt;이 문제를 해결하려면 각각 사용하는 데이터베이스를 다르게 해주면 된다.
Redis의 데이터베이스는 주소 뒤의 숫자로 구분하는데, 기본이 0번이니 나머지 하나는 1번을 사용하도록 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis://localhost:6379/0
redis://localhost:6379/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sidekiq-설정&quot;&gt;Sidekiq 설정&lt;/h2&gt;

&lt;p&gt;그래서 사이드킥은 접속할 Redis 주소를 지정할 수 있는 설정 옵션을 제공한다.
1번 데이터베이스를 사용할 프로젝트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/sidekiq.rb&lt;/code&gt; 설정파일을 생성하고
다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sidekiq.rb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 1번 데이터베이스로 접속 설정&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'redis://localhost:6379/1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 1번 데이터베이스로 접속 설정&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_client&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'redis://localhost:6379/1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;configure_server&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;configure_client&lt;/code&gt;를 둘 다 작성해야 한다.
이렇게 설정한 뒤에 사이드킥 프로세스를 띄워보면 충돌없이 실행된다.&lt;/p&gt;

&lt;h2 id=&quot;참고-링크&quot;&gt;참고 링크&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Using-Redis&quot;&gt;https://github.com/mperham/sidekiq/wiki/Using-Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;작성-날짜&quo