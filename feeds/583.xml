<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>밀레니얼 개발 블로그</title>
<link>https://millenial-dev.tistory.com/</link>
<description>90년대생 개발자가 하루하루 고뇌를 담아 쓰는 개발 블로그.
약간 밀레니얼 끝자락인데 이해해 줄 거죠?</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 10:14:43 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>내일선장</managingEditor>
<item>
<title>어쩌다 DDD 공부를 시작했다</title>
<link>https://millenial-dev.tistory.com/11</link>
<description>&lt;p&gt;주말 동안&amp;nbsp;&amp;lt;DDD Start!&amp;gt;를 공부하고, Apache Kafka와 AWS Kinesis에 대해서 조금 기술조사를 했다.&lt;/p&gt;&lt;p&gt;아직 어렵기만 하지만 곧 판단의 기준이 설 거라고 생각하고! 열심히 공부하고 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;오늘은 DDD를 공부하게 된 계기에 대해서 생각이 나 적어보려고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;어쩌다 만난 DDD&lt;/h2&gt;&lt;p&gt;팀 내 테크 리더님의 추천으로 DDD를 조금씩 공부하고 있다.&lt;/p&gt;&lt;p&gt;DDD를 공부하게 된 계기는 따로 있었는데...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;현재 우리가 만드는 서비스는 각 도메인별로 모듈화한 상태로 개발되고 있다.&lt;/p&gt;&lt;p&gt;즉 계정, 인증,&amp;nbsp;통계 등의 &lt;b&gt;문제&amp;nbsp;영역&lt;/b&gt; 별로&amp;nbsp;별도의 모듈 안에서 개발되고, 별도의 DB를 사용한다.&lt;/p&gt;&lt;p&gt;배포도 모듈 단위로, 서로 분리된 EC2 Auto Scaling Group를 통해&amp;nbsp;이루어진다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(140, 140, 140);&quot;&gt;-- 여기서부터 설명 어설픔 주의 --&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이렇게 하면 문제 영역 별로 의존성이 줄어들어, 모든 서버를 재배포하지 않고&lt;/p&gt;&lt;p&gt;인증 서버만 재배포하거나 통계 서버만 재배포하는 일이 가능해진다.&lt;/p&gt;&lt;p&gt;서로 비슷한 시점에 변경해야 하는 것들을 한데 모아두면서 더 작고 수월한 작업이 가능해진다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하지만 각 모듈을 외부로 노출시켜서 API 요청을 받는다고 하면,&lt;/p&gt;&lt;p&gt;클라이언트측에서는 어느 서버에 어떤 요청을 보내야 할지 알아야 하는 &lt;b&gt;수고로움&lt;/b&gt;이 생긴다.&lt;/p&gt;&lt;p&gt;가령 계정 서버에 보내야 하는 회원가입 요청을 통계 서버에 보냈다면 &lt;b&gt;404 Not Found&lt;/b&gt;가 뜰 수도 있다.&lt;/p&gt;&lt;p&gt;모듈화를 시키지 않았다면 모든 요청을 한 곳에 보낸다 해도 적절한 응답을 받았을 텐데 말이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;따라서 모든 API 요청을 받아, 이를&amp;nbsp;적절한 서버로 중계해 주는 &lt;b&gt;수문장&lt;/b&gt; 역할을 누군가 맡아야 한다.&lt;/p&gt;&lt;p&gt;또한 계정 서버라고 해서 한 대만 두지 않으므로, 과부하가 걸리지 않도록 API 요청을 여러 대에 &lt;b&gt;분배&lt;/b&gt;해야 하고,&lt;/p&gt;&lt;p&gt;EC2 인스턴스들의 &lt;b&gt;상태를 체크&lt;/b&gt;하면서&amp;nbsp;살아있는&amp;nbsp;친구에게만&amp;nbsp;요청을 중계할 필요도 있다.&lt;/p&gt;&lt;p&gt;또 암호화된 HTTPS 요청이 들어왔을 때는 &lt;b&gt;암호를 풀어줄&lt;/b&gt; 필요도 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;로드 밸런서 등장&lt;/h3&gt;&lt;p&gt;이런 복잡한 작업을 하는 것이 &lt;b&gt;Load Balancer&lt;/b&gt;이다.&lt;/p&gt;&lt;p&gt;그리고 우리&amp;nbsp;회사는 AWS를 쓰므로&amp;nbsp;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/userguide/what-is-load-balancing.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Elastic Load Balancing&lt;/a&gt;를 활용하고 있다.&lt;/p&gt;&lt;p&gt;그렇다면 ELB에서는 각 API 요청에 대해서 무엇을 근거로 계정, 인증, 통계 등의 각 서버에 분배할 수 있을까?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;복잡하게 요청의 본문을 보고... 그러면 처리가&amp;nbsp;늦어진다.&lt;/p&gt;&lt;p&gt;따라서 우리 팀이 현재 사용하는 ALB(Application Load Balancer)에서는 크게 두 가지만 보고 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;가령 누군가 이 블로그를 보다가 개발일지 카테고리로 들어갔을 때...&lt;/p&gt;&lt;p&gt;1. &lt;b&gt;Host&lt;/b&gt;가 미리 설정한 것과 일치하는지 본다: 여기서는&amp;nbsp;&lt;a href=&quot;http://millenial-dev.tistory.com/admin/entry/post/?type=post&amp;amp;returnURL=/manage/posts/&quot;&gt;millenial-dev.tistory.com&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2. &lt;b&gt;Path&lt;/b&gt;가 미리 설정한 것과 일치하는지 본다: 여기서는 /category/개발일지&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;따라서 계정, 인증, 통계 등 각 도메인별&amp;nbsp;API에 대해서 Host나 Path&amp;nbsp;둘 중 하나에는 공통적인 부분을 만들어야 한다.&lt;/p&gt;&lt;p&gt;우리는&amp;nbsp;&lt;b&gt;Path&lt;/b&gt;에 대해서 공통적인 부분을 만들기로 했다.&lt;/p&gt;&lt;p&gt;계정이면 /users/*, 인증이면 /auth/*, 통계면 /statistics/*로 시작하는 식으로...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;하나에 엄청 모여요!&lt;/h3&gt;&lt;div&gt;그렇게 만들어진 API 목록을 확인하다가 이상한 점을 발견했다.&lt;/div&gt;&lt;div&gt;가령 우리가 블로그를 만든다고 치자. 블로그의 각 게시물, 즉 &lt;b&gt;콘텐츠&lt;/b&gt;에 관련된&amp;nbsp;API를&amp;nbsp;/contents/* 라는 Path 하위에 모아두었다.&lt;/div&gt;&lt;div&gt;그런데 블로그를 만들다가 게시물별로&amp;nbsp;&lt;b&gt;태그&lt;/b&gt;를 지정할 수 있는&amp;nbsp;기능이 생겨, /contents/tags/* 라는 Path 하위에 많은 API가 생겼고,&lt;/div&gt;&lt;div&gt;결국 /contents/* 하위에는 다른 서버보다 &lt;b&gt;훨씬 많은&lt;/b&gt; API들이 생겨나게 되었다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;순간 &quot;한 곳에 몰려 있는데 이거 분리해야 하는 거 아냐?&quot;라는 생각이 들어서,&lt;/div&gt;&lt;div&gt;동료 개발자들에게 태그 관련 API들을 /tags/* 하위로 모아두고, 별도로 &lt;b&gt;태그 서버&lt;/b&gt;를 모듈화하는 게 어떻겠냐고 물어봤다.&lt;/div&gt;&lt;p&gt;그리고 대부분 부정적인 의견을 주었다. 이렇게...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&quot;아뇨, 이건 건드리지 않았으면 좋겠어요. 같은 도메인이니까요.&quot;&lt;/p&gt;&lt;p&gt;&quot;음...&amp;nbsp;제 생각은 달라요. 이건 같은 도메인에 속해요.&quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;근데 한 가지 못 알아듣는 부분이 있었다. 나 빼고 모두가 쓰고 있는 &lt;b&gt;도메인&lt;/b&gt;이라는 말...!&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&quot;같은 도메인이라는 게 무슨 말이지?&amp;nbsp;&lt;/p&gt;&lt;p&gt;콘텐츠와 태그는 저장하는 DB 테이블도 다른데, 같은 도메인이라고 하는 이유가 뭘까?&quot;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;라는 의문을 가지기 시작하자 거짓말처럼 알아챈 테크 리더님이&amp;nbsp;&lt;b&gt;Domain Driven Design&lt;/b&gt;에 대한 공부를 추천해 준 것이었다.&lt;/p&gt;&lt;p&gt;그리고 조금씩 공부를 하기 시작하면서, 왜 콘텐츠와 태그가 같은 도메인이라고 하는지 알게 된 것 같다.&lt;/p&gt;&lt;p&gt;(정확히는 같은 Aggregate에 속하는지)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;Aggregate?&lt;/h2&gt;&lt;p&gt;(하도 책마다 표기법이 다르길래... 애그리게이트, 애그리게잇, 애그리거트... 그냥 영어로 적기로 했다.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.popit.kr/aggregate%EB%A5%BC-%EC%95%A0%EA%B7%B8%EB%A6%AC%EA%B2%8C%EC%9E%87-%EB%8C%80%EC%8B%A0-%EC%A1%B0%EB%A6%BD%EB%AC%BC%EB%A1%9C-%EC%93%B4-%EC%82%AC%EC%97%B0/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;조립물&lt;/a&gt;이라는 번역어도 있는 듯하다)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;DDD를 공부하다 보면 Entity, Value, Aggregate, Bounded Context&amp;nbsp;등&amp;nbsp;새로운&amp;nbsp;개념들이 많이 등장한다.&lt;/p&gt;&lt;p&gt;이런 개념들을 한 문단 안에 담아내는 것은 무리라서 &lt;b&gt;Aggregate&lt;/b&gt;만 간단하게 설명하고,&lt;/p&gt;&lt;p&gt;이를 통해 콘텐츠와 태그가 같은 도메인인 이유를 설명해 보려고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;큰 그림으로 보기&lt;/h3&gt;&lt;p&gt;우리 회사의 직원 수는&amp;nbsp;현재 약 &lt;b&gt;1000명&lt;/b&gt; 정도가 된다. 1000명의 직원을 올림픽공원 평화의 문 앞에 모아두고,&lt;/p&gt;&lt;p&gt;각 직원들 사이의 업무 흐름을 파악하려고 하면 불가능할 것이다. 인간의 두뇌로는 한계가 있기 때문이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그렇다면 어떤 방법을 써야 전체적으로 회사가 돌아가는 모습을 파악할 수 있을까?&lt;/p&gt;&lt;p&gt;각 직원들이&amp;nbsp;하나의 팀에 소속되어 있다고 가정하고, &lt;b&gt;팀별로&lt;/b&gt; 원을 만들어 모인다면 한번 관계도를 그릴 시도는 해볼 수 있을 것이다.&lt;/p&gt;&lt;p&gt;이 팀은 저 팀의 API를 사용하고, 저 팀은 그 팀에게 법률 자문을 구하고, 등등...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;직원들을 팀으로 조망하듯이, 소프트웨어를 만드는 &lt;b&gt;여러 객체&lt;/b&gt;(회원, 콘텐츠, 태그, ...)를 관련된 것끼리 &lt;b&gt;묶은 것&lt;/b&gt;을 Aggregate라고 한다.&lt;/p&gt;&lt;p&gt;그런데 관련된 객체를 묶었다는 얘기는 하나마나한 얘기다. 결국 어떻게든 서로랑 연관이 있기 때문이다.&lt;/p&gt;&lt;p&gt;하나의 Aggregate를 구성하는 기준에는 좀 더 고려할 것이 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;일관성 유지&lt;/h3&gt;&lt;p&gt;우리 회사는 대부분의 팀이 일정한 주기로 사무실 층을 옮긴다.&lt;/p&gt;&lt;p&gt;블로그팀이 이번 달에&amp;nbsp;사무실을 8층에서 15층으로 옮겨야 한다고 치자.&amp;nbsp;블로그팀은 아직 이 사실을 모른다.&lt;/p&gt;&lt;p&gt;블로그팀의 누구에게 이야기하고 싶은가?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;아마 &lt;b&gt;팀장&lt;/b&gt;을 떠올릴 것이다. 팀장이라면 팀의 모두에게 전체공지를 하고 리마인딩을 하겠지만,&lt;/p&gt;&lt;p&gt;나한테&amp;nbsp;얘기하면&amp;nbsp;소심해서 팀의 모두에게 전달을 못할지도 모른다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;그러면 누군가는 미처 짐을 싸지 못하고 8층에 남는 &lt;b&gt;참사&lt;/b&gt;가 일어난다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;소프트웨어&amp;nbsp;또한 특정 작업에 대해서는 연관된 데이터의 &lt;b&gt;일관성&lt;/b&gt;을 유지해야 한다.&lt;/p&gt;&lt;p&gt;가령 태그별로&amp;nbsp;등록된 콘텐츠 개수를, 성능을 높이기 위해 태그&amp;nbsp;객체에 저장하고 있다고 해 보자.&lt;/p&gt;&lt;p&gt;이 경우 새로운 콘텐츠가 등록되었을 때는 태그&amp;nbsp;객체도 수정될 필요가 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이때 코드의 어딘가에서 &lt;b&gt;멋대로&lt;/b&gt; 새로운 콘텐츠를 생성하고 저장해버리면,&lt;/p&gt;&lt;p&gt;태그&amp;nbsp;객체에 저장된 콘텐츠 개수와 실제 콘텐츠 개수가 어긋나 버린다.&lt;/p&gt;&lt;p&gt;이런 상황이 바로 데이터의 일관성이 깨진 상태이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;데이터의 일관성을 유지할 수 있으려면 콘텐츠와 태그를 &lt;b&gt;하나로 묶어&lt;/b&gt; 관리해야 한다.&lt;/p&gt;&lt;p&gt;따라서 둘은 같은 Aggregate로 보는 것이 적절하다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;같은 생명 주기&lt;/h3&gt;&lt;div&gt;또한 태그가 언제 생기고, 언제 변경되는지를 살펴볼 필요가 있다.&lt;/div&gt;&lt;div&gt;연관 콘텐츠도 없는데 태그가 먼저 생길 수는 없다. 태그는 반드시 어떤 새로운 콘텐츠와 &lt;b&gt;같은 시점&lt;/b&gt;에 생겨난다.&lt;/div&gt;&lt;div&gt;그리고 콘텐츠가 등록되면 태그별로 등록된 콘텐츠 개수도 바뀌어야 한다. 즉 태그는 콘텐츠와 &lt;b&gt;같은 시점&lt;/b&gt;에 변경된다.&lt;/div&gt;&lt;div&gt;이렇듯 비슷한 시점에 생겨나고 변경되고 사라지는 객체들은 같은 Aggregate에 속하는 것이 적절하다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;반대의 예로&amp;nbsp;&lt;b&gt;회원&lt;/b&gt;과 &lt;b&gt;콘텐츠&lt;/b&gt;를 생각해 보자.&lt;/div&gt;&lt;div&gt;한 명의&amp;nbsp;회원이 여러 콘텐츠를&amp;nbsp;소유한다고 생각하면&amp;nbsp;같은 Aggregate로 볼 수도 있겠지만,&lt;/div&gt;&lt;div&gt;회원가입을 했다고 콘텐츠가 생겨나지는 않는다. 또 회원정보를 변경했다고, 회원을 탈퇴했다고 콘텐츠가 영향을 받지는 않는다.&lt;/div&gt;&lt;div&gt;따라서 회원과 콘텐츠는 다른 Aggregate로 보아야 할 필요성이 크다.&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;어떻게 공부하나&lt;/h2&gt;&lt;p&gt;이런 개념을 알고 나서는 DDD가 꽤 매력적이라는 생각을 하게 된 것 같다.&lt;/p&gt;&lt;p&gt;아직 끝판왕이라는 &lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=12174216&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;에릭 에반스의 책&lt;/a&gt;을 읽을 엄두는 안 나서&amp;nbsp;&lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=118099017&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;도메인 주도 설계 핵심&amp;gt;&lt;/a&gt;을 먼저 읽었고,&lt;/p&gt;&lt;p&gt;좋은 내용이지만 여전히 모호한 것 같아 &lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=84000742&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;DDD Start!&amp;gt;&lt;/a&gt;를 읽고 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&amp;lt;DDD Start!&amp;gt;&lt;/b&gt;는 선수 지식을 조금 요구하지만,&amp;nbsp;다행히 회사에서의 개발 경험을 통해 익숙하게 느끼는 부분들이 있어서 좋다.&lt;/p&gt;&lt;p&gt;특히 개발자를 이해시키는 데에는 코드만한 게 없는 것 같다. &lt;b&gt;코드 수준&lt;/b&gt;에서 설명을 보완하니까 바로바로 이해가 된다.&lt;/p&gt;&lt;p&gt;장단점이 있겠지만, 빠르게 이해할&amp;nbsp;수 있어서 지금으로서는 좋다고 느끼고 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 주말도 마무리해야 하고...&amp;nbsp;어떻게 하면 더 일을 잘할 수 있는지 고민스럽다.&lt;/p&gt;&lt;p&gt;블로깅도 그렇고 일을 잘 할 수 있는 방법을 고민하는 것도 소홀했는데,&lt;/p&gt;&lt;p&gt;다시 조금씩 발전할 수 있는 한 주가 되었으면 좋겠다.&lt;/p&gt;</description>
<category>개발일지</category>
<category>ddd</category>
<category>개발</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/11</guid>
<comments>https://millenial-dev.tistory.com/11#entry11comment</comments>
<pubDate>Mon, 25 Mar 2019 00:24:59 +0900</pubDate>
</item>
<item>
<title>해커톤 멘토링 돌아보기</title>
<link>https://millenial-dev.tistory.com/10</link>
<description>&lt;p&gt;회사에서 후원하고, 고등학생들이 참가하는&amp;nbsp;&lt;b&gt;해커톤&lt;/b&gt;에 멘토로 참가할 기회가 생겨 방금까지 참가하고 왔다.&lt;/p&gt;&lt;p&gt;최근 몇 주 동안은 업무에만 정신을 집중하는 며칠을 보냈고, 공부를 해도 일과 관련된 공부를 했었는데&lt;/p&gt;&lt;p&gt;해커톤 행사가 묘하게&amp;nbsp;숨 돌릴 틈을 만들어 준 것 같아 좋았다.&amp;nbsp;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;외부 행사 많이 참여해야겠다&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;더불어 내가 일하는 분야를&amp;nbsp;취미나 진로로 생각하는 사람들을 볼 수 있다는 것 자체가 고무되는 경험이기도 했다.&lt;/p&gt;&lt;p&gt;듣기로는  행사장에서 &lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;막 신&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;나서&lt;/span&gt; 얘기했다는 주변 분들의 제보를 들었는데...&lt;/p&gt;&lt;p&gt;신나게 얘기하는 와중에 아쉬운 점은 없었을까 싶어&amp;nbsp;간단히 적어보기로 했다.&lt;/p&gt;&lt;h2&gt;코드 밖에서 도움 주기&lt;/h2&gt;&lt;p&gt;해커톤 참가자들이 사용하는&amp;nbsp;기술 스택은 &lt;b&gt;매우 넓어&lt;/b&gt;,&amp;nbsp;개발자들이 코드 단위로 커버하기 어려울 가능성이 높다.&lt;/p&gt;&lt;p&gt;오늘만 해도 멘토링&amp;nbsp;세션이 4~5개였지만,&amp;nbsp;서버 개발자들이 커버할 수 있는 부분은 그중 1~2개 정도로 많지 않았다.&lt;/p&gt;&lt;p&gt;(한 세션에서는&amp;nbsp;&lt;b&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;React Native&lt;/a&gt;&lt;/b&gt; 질문을&amp;nbsp;받았는데, 다 같이 구글링하고 때려맞추며 디버깅하는 상황이 벌어지기도&amp;nbsp;했다...)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;대신 진로나 취업, 협업 방식, 테스트 코드 작성, 아키텍처에 대한 고민을 물어봤을 때는 더 많은 얘기를 해줄 수 있었던 것 같다.&lt;/p&gt;&lt;p&gt;짧은 멘토링 세션이&amp;nbsp;참가자들에게 더 각별하게 다가올 수 있으려면 이런 쪽을 많이 건드려야 할 것 같다.&lt;/p&gt;&lt;h2&gt;분위기&amp;nbsp;풀기&lt;/h2&gt;&lt;p&gt;기본적으로 멘토링 세션에서&amp;nbsp;&lt;b&gt;면접&amp;nbsp;분위기&lt;/b&gt;가 나지 않도록 노력했지만,&lt;/p&gt;&lt;p&gt;참가자 입장에서는 멘토라는 모르는 사람들이 모인 방에 들어가서 서비스 소개를 하는 게 부담스러운 일이었을 것이다.&lt;/p&gt;&lt;p&gt;질문하는 참가자들에게서 긴장하는 모습이 엿보인 세션도 몇 있었는데, 이럴 때는 분위기를 먼저 풀고 갔어야 한다는 생각이 든다.&lt;/p&gt;&lt;p&gt;잘&amp;nbsp;질문하는 것도 사실은 &lt;b&gt;기량&lt;/b&gt;이 필요한 일이고, 기량을 제대로 발휘하기 위해서는 우선 긴장을&amp;nbsp;풀어야 한다 :)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/Mm5Fp45FSs8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot;text-align: center;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;판소리의 목풀기 세션.&amp;nbsp;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;목풀기가 이렇게 본격적입니다&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;구체적으로는 개발과 &lt;b&gt;관련없는 이야기&lt;/b&gt;를 먼저 했으면 좋겠다는 생각을 한다.&lt;/p&gt;&lt;p&gt;서비스 소개, 아이디어를 떠올리게 된 이유, 팀원들 소개, 멘토들 소개 등등...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고&amp;nbsp;멘토들 앞에 치킨이나 도넛 등등&amp;nbsp;&lt;b&gt;간식&lt;/b&gt;이 많이 있었는데, 조금&amp;nbsp;활용했으면 좋았겠다는 생각을 한다.&lt;/p&gt;&lt;p&gt;너무&amp;nbsp;오래 말하지 않으면서, 한 템포 여유롭게&amp;nbsp;멘토링을 해줄 수 있었을 것 같다.&amp;nbsp;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;과자 먹으면서 멘토링하기&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;질문 끌어내기&lt;/h2&gt;&lt;p&gt;참가자가 막막한 상태에서 하는 질문은,&amp;nbsp;멘토가 답변하기도 꽤 막막할 수가 있다.&lt;/p&gt;&lt;p&gt;이럴 때는 멘토가 질문을 끌어내 주는 것도 괜찮을 것 같다. 때에 따라 아래와 같은 질문들이 도움이 될 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&quot;이런 아이디어를 어떻게 생각해냈는지&quot;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;-&amp;gt; 지금 이 기능을 왜 구현하려 하는지 실마리를 얻기 위해&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&quot;지금 가장 고민하고 있는 게 무엇인지?&quot;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;-&amp;gt; 참가자가 일의 우선순위를 정하는 데 도움을 주기 위해&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&quot;개인적으로 궁금한 건 없는지&quot;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;-&amp;gt; 팀원들이 같이 멘토링을 받는 경우, 말이 없던 참가자도 대화에 참여하도록 돕기 위해&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;참가자를 즐겁게 하기&lt;/h2&gt;&lt;p&gt;대부분 참가자들의 질문은&amp;nbsp;명확하지 않은 경우가 많고, 그게 자연스럽다.&lt;/p&gt;&lt;p&gt;현업에서 일하는 사람들이 모인다고 해도 서비스를 처음 만들 때는&amp;nbsp;모호함&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;의 끝&lt;/span&gt;을 달리는데,&lt;/p&gt;&lt;p&gt;해커톤 참가자들이 단기간에&amp;nbsp;생각해 낸 서비스면 아무래도 구멍이 많을 것이다.&lt;/p&gt;&lt;p&gt;당장 그 구멍을 메우기보다는, 가설을 세우고 검증하고, 무언가 예쁜 것을&amp;nbsp;만들고 발표하는&lt;/p&gt;&lt;p&gt;그 모든 과정에서&amp;nbsp;&lt;b&gt;즐거움&lt;/b&gt;을 얻는 게 해커톤의 가장 큰 의미가 될 거라고 생각한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;멘토링도 그 과정의 &lt;b&gt;일부&lt;/b&gt;로서 즐거움을 주어야 하지 않을까 싶다.&lt;/p&gt;&lt;p&gt;아직 구동되는 결과가 없다면 결과가 빠르게 나오는 방식으로 도움을 주고,&lt;/p&gt;&lt;p&gt;결과가 있다면 고도화하는 데 도움을 주거나, 아니면 평소에 궁금했던 것들을&amp;nbsp;알려주는&amp;nbsp;자리를 만드는 것도 좋을 것 같다.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;(오히려 그런 자리에서 멘토들이&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;일하는 재미를 느끼는지, 그냥 주말에 끌려나왔는지&amp;nbsp;엿볼 수 있을 것이다&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;서비스 기획이 조금 모호해도... 아키텍처가 갖춰져 있지 않아도...&lt;/p&gt;&lt;p&gt;우선 작동되는 것을 보면 다 같이 신나기 마련이고, 고도화하거나 개선하고 싶다는 열정도 생길 수 있을 것이다.&lt;/p&gt;&lt;h2&gt;내년에도 만났으면&lt;/h2&gt;&lt;p&gt;아쉬운 점이 있었더라도 멘토링을 하는 경험 자체는 다시 해보고 싶다.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;(오랜만에 &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;시간이 지나도 지치지 않는 경험을 했다)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;꼭 해커톤이 아니더라도 직업으로서 개발자의 삶을 희망하는 누군가를 만날 수 있을 텐데,&lt;/p&gt;&lt;p&gt;그때는 아쉬운 점들을 보완해서, 더 좋은 피드백을 줄 수 있었으면 좋겠다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고, 신입 개발자의 감정으로 이런 경험을 전달할 수 있는 날도 얼마 남지 않았다는 생각을 한다.&lt;/p&gt;&lt;p&gt;블로깅이든, 멘토링이든, 어떤 방식으로든 많은 것을 남겨두어야겠다.&lt;/p&gt;</description>
<category>조금 긴 생각</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/10</guid>
<comments>https://millenial-dev.tistory.com/10#entry10comment</comments>
<pubDate>Sun, 10 Feb 2019 04:16:21 +0900</pubDate>
</item>
<item>
<title>회사에 와서 보이는 지식이 있다</title>
<link>https://millenial-dev.tistory.com/9</link>
<description>&lt;p&gt;얼마 전에 &lt;a href=&quot;https://millenial-dev.tistory.com/5&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;기술 배우는 타이밍&lt;/a&gt;이 있다는 내용의 글을 쓴 적이 있는데, 그 내용의 연장선상에서 이 글을 쓰게 될 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;기술 배우는 타이밍에는 외부 환경이 큰 영향을 미친다.&lt;/p&gt;&lt;p&gt;이 때문에 학생 때 중요하게 느껴지는 지식과&amp;nbsp;회사에 와서 중요하게 느껴지는 지식이 많이 달라지는 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;특히나 회사에서 일하지 않았다면 그 가치를 체감하기&amp;nbsp;어려운 지식들이 있다.&lt;/p&gt;&lt;p&gt;오늘은 이런 지식들에 대해서 생각나는 대로 언급해 보려고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;밖에서 안 보이는 것들이 있다&lt;/h2&gt;&lt;p&gt;지금 다니는 회사에서는 운영 경험이 없는 상황에서 새로운 서비스를 만드는&amp;nbsp;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;(천재일우의)&lt;/span&gt; 기회를 얻었지만,&lt;/p&gt;&lt;p&gt;반대로 기존 서비스에 대한 운영 경험이 없다보니 자꾸 놓치는 부분이 생기곤 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;가령 &lt;b&gt;로그 분석&lt;/b&gt;은 지금도 프로세스가 머릿속에 명확하게 서지 않는 부분 중 하나다.&lt;/p&gt;&lt;p&gt;&quot;무엇을 로깅해야 하는가?&quot;&lt;/p&gt;&lt;p&gt;&quot;로그를 검색하고 저장하기 위해 Elasticsearch 등의 DB를&amp;nbsp;사용하는&amp;nbsp;이유는 무엇인가?&quot;&lt;/p&gt;&lt;p&gt;&quot;로그 분석을 통해 어떤 일을 할 수 있으며, 어떤 가치를 창출할 수 있는가?&quot;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;같은 질문에 대해서 아직 답을 알지 못하는 상태다.&lt;/p&gt;&lt;p&gt;운영 경험이 쌓이면 알&amp;nbsp;수 있을까.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;아키텍처&lt;/b&gt;도 그런 부분 중 하나인 것 같다.&lt;/p&gt;&lt;p&gt;&quot;하루 16만 건의&amp;nbsp;요청이 들어오는 서비스에서는 어떤 아키텍처를&amp;nbsp;사용해야 하는가?&quot;&lt;/p&gt;&lt;p&gt;&quot;어떠한 작업에서 Worker를 쓰면 성능이 높아지는가?&quot;&lt;/p&gt;&lt;p&gt;&quot;이 상황에서 DB 샤딩은 어떤 기준으로 해야 하는가?&quot;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;같은 질문에 대해서 어떻게 답할 수 있을까?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;인프라&lt;/b&gt;도 그렇다.&lt;/p&gt;&lt;p&gt;AWS만 해도 기껏해야 EC2, RDS, Lambda, CodeDeploy&amp;nbsp;정도만 존재의 사실을 알고 있었는데&lt;/p&gt;&lt;p&gt;VPC, IAM, Kinesis, CloudWatch 같은 서비스가 갑자기 매우 중요하게 느껴지기 시작한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;써놓고 보니까 거의 다네.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:400px;width: 400px; height: 225px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/996263345C489DFD31&quot; filemime=&quot;image/gif&quot; filename=&quot;pointing.gif&quot; height=&quot;225&quot; original=&quot;yes&quot; style=&quot;width: 400px; height: 225px;&quot; width=&quot;400&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:400px;&quot;&gt;교보문고죠? 여기부터 여기까지 주세요&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;일은 같이 해야 한다&lt;/h2&gt;&lt;p&gt;혼자 작성한 코드를 혼자 배포하고 혼자 운영했다면 협업 도구를 사용하지 않았겠지만,&lt;/p&gt;&lt;p&gt;회사에서는 협업을 위해서 사용하는 &lt;b&gt;도구&lt;/b&gt;가&amp;nbsp;다 따로 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;지금 다니는 회사에서는 &lt;b&gt;Jira&lt;/b&gt;를 통해&amp;nbsp;이슈를 등록·관리하고, 진행 상황을 서로에게 알리고 있다.&lt;/p&gt;&lt;p&gt;이 Jira는 사실 모두가 어려워하는 느낌이 있지만,&lt;/p&gt;&lt;p&gt;서로 업무 현황을 알리고 해야 할 일을 분배하는&amp;nbsp;데에는 분명 효율적인 부분이 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;git flow 등 &lt;b&gt;협업 방식&lt;/b&gt;이나 Jenkins 등 &lt;b&gt;배포&lt;/b&gt;에 관련된 &lt;b&gt;도구&lt;/b&gt;도 중요하다.&lt;/p&gt;&lt;p&gt;특히 내 경우 개인 프로젝트를 할 때는 별도 서버를 띄우는 부담이 있는 Jenkins보다는 Travis CI를 사용했었는데,&lt;/p&gt;&lt;p&gt;이 둘의 느낌이 상당히 다른 것 같았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;또 그냥 &lt;b&gt;커뮤니케이션&amp;nbsp;능력&lt;/b&gt;도 중요하다.&lt;/p&gt;&lt;p&gt;&quot;개발자는 다른 직업보다 커뮤니케이션에 대한 부담이 덜하지 않아?&quot;라고 누가 물어본다면 &quot;아니다&quot;라고 대답할 것 같다.&lt;/p&gt;&lt;p&gt;기획 파트와 소통하며 정책에 대해 이해하고, 디자인 파트와 소통하며 시안에 대해 이해하고,&lt;/p&gt;&lt;p&gt;API 설계 같은 작업을 맡는다면 클라이언트 개발자와도&amp;nbsp;매우 빈번하게 얘기해야 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;방금 일어난 회의, 대화에 따라 내가 개발해야 하는 범위가&amp;nbsp;급변하기도 하고,&lt;/p&gt;&lt;p&gt;커뮤니케이션이 원활하지 않으면 엉뚱한 곳에 노력을 쏟는 일이 일어나기도 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;미리 배울 수는 없을까&lt;/h2&gt;&lt;p&gt;문제는 이런 지식들이 다 실무에서는 중요한 지식들이라는 것이다.&lt;/p&gt;&lt;p&gt;그래서 신입으로 들어와서 동료 개발자들과의 커뮤니케이션에 참여하다 보면,&lt;/p&gt;&lt;p&gt;분명 이것저것 공부했는데&amp;nbsp;내가 너무 준비를 덜했나&amp;nbsp;싶은 생각을 하게 되는 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;입사 전에 이런 지식들을 미리 배울 수 있는 방법은 없었을까?&lt;/p&gt;&lt;p&gt;혹은 이런 지식들의 가치나 필요성을 와닿게 전달받고 전달할 수 있는 방법은 없는 걸까.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어떻게 하면 필요한 지식들을 효과적인 방법으로 배우고 전달할 수 있을지 생각해 보고 있다.&lt;/p&gt;&lt;p&gt;이런저런 생각이 많아지는 하루다  &lt;/p&gt;</description>
<category>개발일지</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/9</guid>
<comments>https://millenial-dev.tistory.com/9#entry9comment</comments>
<pubDate>Thu, 24 Jan 2019 02:04:44 +0900</pubDate>
</item>
<item>
<title>미안해하지 않을 방법</title>
<link>https://millenial-dev.tistory.com/8</link>
<description>&lt;p&gt;오늘 클라이언트 개발자분이 나에게 &lt;b&gt;미안하다고&lt;/b&gt; 말씀하시는 일이 있었다.&lt;/p&gt;&lt;p&gt;&quot;아녜요 전혀,&amp;nbsp;괜찮습니다&quot;라고 말했지만,&amp;nbsp;이후에도 여러가지 생각을 하게 되는 말이었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어쩌면 일하는 사람에게는 &quot;아녜요 괜찮습니다&quot;라는 대답이&amp;nbsp;&lt;b&gt;불충분한&lt;/b&gt; 것은 아닐까?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;괜찮아 보였지만 아니었다&lt;/h2&gt;&lt;p&gt;클라이언트 개발자분들이 본격적으로 작업을 시작하면서 매일매일 API 스펙에 대한 수정 요청을 받고 있다.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;개별 API에 대해서 이를 전적으로 사용하는&amp;nbsp;클라이언트 개발자분에게 피드백을 받다 보니&lt;/div&gt;&lt;div&gt;점차 불명확한 부분이 명확해지고 있고, 적어도 필드 구성은&amp;nbsp;정착된 느낌이 있는 것 같다.&lt;/div&gt;&lt;div&gt;서버 개발자들도 (아직&amp;nbsp;이견은 있지만) 논의 과정에 대해서는 어느 정도 공유를 하고 있는 상황인 듯하다.&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그런데 오늘은 클라이언트 개발자분의 뜻에 따라&amp;nbsp;예전에 주셨던&amp;nbsp;피드백을 되돌리는 일이 있었다.&lt;/p&gt;&lt;p&gt;이런 말씀과 함께....&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;제가 부족하네요, 미안합니다.&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;API 설계를 맡아 했던 나로서는&amp;nbsp;언제든 피드백을 받는 게 자연스럽다고 생각했고,&lt;/p&gt;&lt;p&gt;예전 버전으로 스펙을 되돌리는 데에 따른 불만사항은 없는 상태였다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래서 살짝 당황하면서, &lt;b&gt;&quot;아뇨 전혀요, 괜찮습니다.&quot;&lt;/b&gt;라고 대답했었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;대화가 이어지면서&amp;nbsp;클라이언트 개발자분은&amp;nbsp;API 설계 프로세스에 대한 &lt;b&gt;개선 방안&lt;/b&gt;을 말씀해 주셨다.&lt;/p&gt;&lt;p&gt;스펙 리뷰를 간략히 하고 나서, 각 API를 담당하는 클라이언트 개발자와 30분 정도 면담하며&lt;/p&gt;&lt;p&gt;의사결정을 하는&amp;nbsp;게 어떻겠냐는 말씀이었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;좋은 방안이라고 생각했다.&lt;/p&gt;&lt;p&gt;그리고 그때서야 프로세스에&amp;nbsp;문제가 있었다는 사실을 깨닫게 되었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;프로세스의 문제&lt;/h2&gt;&lt;div&gt;이전에 API 스펙 리뷰를 잡아 팀 내의 모든&amp;nbsp;개발자분들과 한번 살펴보려고 &lt;b&gt;시도한&lt;/b&gt; 적은 있었다.&lt;/div&gt;&lt;div&gt;하지만 논의가 필드의 데이터 타입이나 페이지네이션 등 세세한 부분에 집중되면서&lt;/div&gt;&lt;div&gt;공통 규격만 &lt;b&gt;30분&lt;/b&gt;을 논의하게 됐고, 나머지 스펙은 시간 부족으로 급하게 살펴보다 보니&lt;/div&gt;&lt;div&gt;충분한 의견 조율이 이루어지지 않았었다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그래서 위키 문서에 댓글을 달거나, 자리에서 5분 정도 이야기하는 방식으로 꾸준히 피드백을 받았지만&lt;/div&gt;&lt;div&gt;각자&amp;nbsp;구현 방식을 충분히 고민하며 깊게 스펙을 살펴볼 시간은 부족했던 것이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;더불어 프로세스에만 문제가 있지는 않았었던 것 같다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;작업 방식의 문제&lt;/h2&gt;&lt;p&gt;솔직히 말하자면&amp;nbsp;처음 만드는 API 스펙이라, 내용도 내용이지만&amp;nbsp;작업 방식에서도 개선할 부분이 많다.&lt;/p&gt;&lt;p&gt;Mock 데이터가 점점 시연용 데이터를 닮아감에도 불구하고 JSON을 &lt;b&gt;수동으로&lt;/b&gt; 작성하는 게 가장 큰 문제다.&lt;/p&gt;&lt;p&gt;(이건 빨리 서버 기반으로 고칠 예정이다.&amp;nbsp;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;밀레니얼 &lt;/span&gt;&lt;span style=&quot;color: rgb(189, 189, 189);&quot;&gt;개발자가... 수동으로 일하다니...&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그러다 보니 꽤 &lt;b&gt;번거로운 작업&lt;/b&gt;이 되었고,&amp;nbsp;변경에 대응하기 위해 시간을 쏟는 듯한 모습이 보였던 것 같다.&lt;/p&gt;&lt;p&gt;만약 코드 몇 줄만 고쳐서 5~10분 안에 Mock 데이터를 넘겨줄 수 있었다면,&lt;/p&gt;&lt;p&gt;그리고 사내 위키 문서를 열심히&amp;nbsp;수정하는 대신 &lt;a href=&quot;https://spring.io/projects/spring-restdocs&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Spring REST Docs&lt;/a&gt;로&amp;nbsp;바로 뽑아서 업데이트시킬 수 있었다면,&lt;/p&gt;&lt;p&gt;금방 하는 것처럼 보였을&amp;nbsp;텐데&amp;nbsp;조금 덜 미안하게 느껴지지 않았을까?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;상대방이 나에게 미안해한다면&lt;/h2&gt;&lt;p&gt;물론 일하는 사람들끼리 미안함을 느끼는 것이 나쁘다고 생각하지는&amp;nbsp;않는다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;서로가 서로의 작업에 의존하는 만큼 일하는 동안 감정이 발생하는 건 자연스럽고,&lt;/p&gt;&lt;p&gt;특히 미안함은 서로 존중하거나, 적당한 거리를 두기 위해 필요한 감정이 아닐까 싶기도&amp;nbsp;하다.&lt;/p&gt;&lt;p&gt;(적어도 미안함을&amp;nbsp;느끼는 쪽이 느끼지&amp;nbsp;못하는&amp;nbsp;쪽보다는 나은 것 같다)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하지만&amp;nbsp;&lt;b&gt;상대방이 나에게&lt;/b&gt; 어떤 일로 인해서 미안함을 느낀다면,&lt;/p&gt;&lt;p&gt;왜 그런 일이 발생했는지는&amp;nbsp;돌아볼 필요가 있는 것 같다.&lt;/p&gt;&lt;p&gt;어쩌면 내 자신이 부담을 느끼면서도&amp;nbsp;알게 모르게 괜찮은 척 &lt;b&gt;연기하는&lt;/b&gt; 것일 수도 있고,&lt;/p&gt;&lt;p&gt;&lt;b&gt;프로세스&lt;/b&gt;에&amp;nbsp;문제가 있어 상대방이 더&amp;nbsp;편하게&amp;nbsp;개발하지 못하고&amp;nbsp;미안함을 느껴야 하는 상황일 수도 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이런 평소와 다른 감정이 내 주변을 감싸고 있을 때는,&lt;/p&gt;&lt;p&gt;혹시 내가 지금 하는&amp;nbsp;업무에 문제가 없는지 살펴보는 것도 괜찮겠다는 생각이 든다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;다른 얘기&lt;/h2&gt;&lt;p&gt;5일 연속으로 블로그에 글을 올렸다.&lt;/p&gt;&lt;p&gt;투자하는 시간은 줄어들지 않고 있지만&amp;nbsp;  분명 가치를 느끼는 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;글을 쓰는 스케줄에 대해서 여러가지 생각을 하고 있는데, 일단 &lt;b&gt;주말은 쉬기로 했다.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;간혹 괜찮고 가치있는 기술이 있으면 글을 쓸 수도 있고,&lt;/p&gt;&lt;p&gt;책 읽으면서 기술 배우는 타이밍이 올 수도 있겠지만&amp;nbsp; &lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;아마 재충전이 1순위 작업이&amp;nbsp;될 것 같다.&lt;/p&gt;&lt;p&gt;다음 주는 더 스마트하게 일해야지.&amp;nbsp; &lt;/p&gt;</description>
<category>개발일지</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/8</guid>
<comments>https://millenial-dev.tistory.com/8#entry8comment</comments>
<pubDate>Fri, 18 Jan 2019 23:02:35 +0900</pubDate>
</item>
<item>
<title>일에서 배우고 기록한다</title>
<link>https://millenial-dev.tistory.com/7</link>
<description>&lt;p&gt;업무를 마치고 나서 매일매일 글을 쓰는 것은 쉽지 않다.&lt;/p&gt;&lt;p&gt;그제는 1시 반, 어제는 2시에 글을 올리고 잤었다. &lt;b&gt;수면 부채&lt;/b&gt;가 쌓이고 있다...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:500px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/999A733B5C40949F17&quot; filemime=&quot;image/gif&quot; filename=&quot;wake-up.gif&quot; height=&quot;281&quot; original=&quot;yes&quot; style=&quot;&quot; width=&quot;500&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:500px;&quot;&gt;아우 졸려...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;정기적으로 글을 쓰는 것도 처음인데, 매일 글을 쓰겠다고 다짐하고 나니&amp;nbsp;무언가&amp;nbsp;&lt;b&gt;희생&lt;/b&gt;해야 하는 것들이 있다는 걸 알게 됐다.&lt;/p&gt;&lt;p&gt;가장 먼저 희생되는 것은 &lt;b&gt;글의 퀄리티&lt;/b&gt;고(!) 최근에는 잔업이 많아지면서 여유 시간이나 공부 시간도 희생되기 시작했다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래서 엊그제는 이런 생각을 하기도 했다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;글&amp;nbsp;쓸 시간에 차라리 &lt;b&gt;개발서 한 챕터&lt;/b&gt;를 더 읽으면,&amp;nbsp;내일 API 설계를 더 잘할 수 있지 않을까?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;업무에서 배우는 것들이 있다&lt;/h2&gt;&lt;p&gt;분명 지금은 하나의 글을 쓰기 위해서&amp;nbsp;하루에&amp;nbsp;1~2시간을 투자하고 있고,&lt;/p&gt;&lt;p&gt;이는 웬만한 개발서 한 챕터를 읽거나, 페이스북 RSS 등에서 좋은 글 4~5개를&amp;nbsp;훑어볼 수 있는 시간이기도 하다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그럼에도 매일 글을 쓰는 것을 선택한 이유는, &lt;b&gt;신입의 입장&lt;/b&gt;에서 배운 것을 기록하기 위해서였다.&lt;/p&gt;&lt;p&gt;가령 오늘은 Mock 데이터를 계속 수정하면서 똑똑하게 일하는 법을 찾아야겠다는 생각을 더 강하게 느꼈고,&lt;/p&gt;&lt;p&gt;며칠&amp;nbsp;코드를 안 만졌다고&amp;nbsp;클래스명을 헷갈리는 자신을 돌아보면서 어떤 작업을 하더라도 코드와 멀어지지 말아야겠다는 생각을 했다.&lt;/p&gt;&lt;p&gt;(부끄럽지만&amp;nbsp;무슨 일이 있더라도 하루에 한 시간 이상은&amp;nbsp;코드를 보기로 했다)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;분명 매일매일의 업무에서&amp;nbsp;배움이 일어난다.&lt;/p&gt;&lt;p&gt;그 배움들을 글로 쓰기 위해 머릿속에서 정리하다 보면, 가설을 &lt;b&gt;지식&lt;/b&gt;으로, 자책을&amp;nbsp;&lt;b&gt;다짐&lt;/b&gt;으로 바꿀 수 있게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하루를 돌아보고,&amp;nbsp;무언가 배울 점을 찾아내어&amp;nbsp;&lt;b&gt;언어&lt;/b&gt;로 표현하고, 그 표현을&amp;nbsp;마음속에 담아둘 수 있다는 것,&lt;/p&gt;&lt;p&gt;그게 매일 글 쓰는 것의 가장 큰 의미가 아닐까 싶다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;무엇이든 타인과 공유하면 의미가 생긴다&lt;/h2&gt;&lt;p&gt;글을 쓰기 시작한지 얼마 되지 않은 날, 개발 블로그를 개설해 보라고 권해 주셨던&amp;nbsp;팀장님이&lt;/p&gt;&lt;p&gt;새벽감성이 담긴(ㅜㅜ) 내 글을 공유해 주시면서 이런 말씀을 덧붙여 주셨었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;평범한 글이라도 지식을 타인과 공유한다는 것이 특별함의 시작과 끝이 된다.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어쩌면 나만 모르는 지식이라도...&amp;nbsp;아니 그런 지식은 없다.&lt;/p&gt;&lt;p&gt;설령 모두가&amp;nbsp;알고 있는 지식이라도 글로 적으면, 독자가 잠깐 멈추고&amp;nbsp;상기하는 계기를 만들 수 있다.&lt;/p&gt;&lt;p&gt;설령 지식으로 보이지 않더라도 글로 적으면,&amp;nbsp;매일매일의 기록이 쌓이고 모여&amp;nbsp;자연스럽게 지식이 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:400px;width: 400px; height: 300px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993E7E3E5C40A15B02&quot; filemime=&quot;image/jpeg&quot; filename=&quot;승정원일기.jpg&quot; height=&quot;300&quot; original=&quot;yes&quot; style=&quot;width: 400px; height: 300px;&quot; width=&quot;400&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:400px;&quot;&gt;개발 블로그계의 승정원일기를 노리고 있다&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;그런 의미에서 하루 한 시간 블로그에 쏟는 것은 충분히 가치가 있는 일이라는 판단이 들었다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;다만 개발 블로그를 한다고 해서 자연히 좋은 개발자가 되는 것은 아니니,&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;바라건대 좋은 개발자로 성장하는 모습을 이 블로그에 보여줄 수 있었으면 좋겠다. 오늘도 스마트하게 일해야지.&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;그리고 개발서는... 주말에 읽기로 했다. 그래서 개발일지도 주말에는 쉽니다. :)&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:300px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998E58445C40A2F21E&quot; filemime=&quot;image/gif&quot; filename=&quot;rest.gif&quot; height=&quot;215&quot; original=&quot;yes&quot; style=&quot;&quot; width=&quot;300&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:300px;&quot;&gt;내일 만나요.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발일지</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/7</guid>
<comments>https://millenial-dev.tistory.com/7#entry7comment</comments>
<pubDate>Fri, 18 Jan 2019 00:53:38 +0900</pubDate>
</item>
<item>
<title>작명이 코드가 된다</title>
<link>https://millenial-dev.tistory.com/6</link>
<description>&lt;p&gt;사내 스터디의&amp;nbsp;일환으로 작년 10월부터 &lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=34083680&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;클린 코드&amp;gt;&lt;/a&gt;를 읽고 정리하고 느낀 점을 써 왔었다.&lt;/p&gt;&lt;p&gt;그리고 어제 드디어&amp;nbsp;&lt;b&gt;13장 동시성을 정리했다.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:300px;width: 300px; height: 225px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A4534C5C3F517B24&quot; filemime=&quot;image/gif&quot; filename=&quot;bart-waving.gif&quot; height=&quot;225&quot; original=&quot;yes&quot; style=&quot;width: 300px; height: 225px;&quot; width=&quot;300&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:300px;&quot;&gt;이예에&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;14장부터는&amp;nbsp;코드를 직접 살펴보기 때문에, 직접 정리할 수 있는 부분은 여기까지일 것 같다.&lt;/p&gt;&lt;p&gt;오늘은 한바탕 책을 읽은 기념으로 &amp;lt;클린 코드&amp;gt;에 관한 내용을 조금 언급하려고 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&amp;lt;클린 코드&amp;gt;에서 가장 재밌는 부분 중&amp;nbsp;하나는&amp;nbsp;&lt;b&gt;책의 순서&lt;/b&gt;다.&lt;/div&gt;&lt;div&gt;이 책은 가장 중요한 내용을 처음에 언급하는 경향이 있기 때문이다.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;1장의 제목은&amp;nbsp;&lt;b&gt;'깨끗한 코드'&lt;/b&gt; 그 자체다. 나쁜 코드가 발생시키는 비용을 언급하고,&lt;/div&gt;&lt;div&gt;코드를 대하는 전문 개발자의 자세는 어떠해야 하는지 짚고 넘어가는 장이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그러면&amp;nbsp;2장의 제목은 뭘까?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;작명이 코드가 된다&lt;/h2&gt;&lt;p&gt;바로&amp;nbsp;&lt;b&gt;'의미 있는 이름'&lt;/b&gt;이다. '클래스'도 '시스템'도 '단위 테스트'도 아니다. (이것들은&amp;nbsp;9장에 이르러서야&amp;nbsp;나온다)&lt;/p&gt;&lt;p&gt;깨끗한 코드를 언급하는 책에서 가장 먼저 &lt;b&gt;이름 짓기&lt;/b&gt;를 짚고 넘어간다는 것은 큰 의미를 가진다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;사실 프로그래머만큼 짧은 시간 안에 많은 양의 이름을 짓는 직업은 많지 않은 것 같다.&lt;/p&gt;&lt;p&gt;프로그래밍은&amp;nbsp;방금 따끈따끈하게 내어놓은 자신의 코드 덩어리에도 마땅한 이름을 지어주어야 하는 작업 특성이 있다.&lt;/p&gt;&lt;p&gt;따라서 작명이 코드의 기본이 되고,&amp;nbsp;코드는&amp;nbsp;나 혹은 동료 혹은 누군가가 지어놓은 이름으로 뒤덮이게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;특히 적절한 범위의 코드를 묶어 함수로 만들면, 함수명을 언급하는 것만으로도 원하는 작업이 무엇인지 사람의 언어에 가깝게 표현할 수 있다.&lt;/p&gt;&lt;p&gt;이를 밥 아저씨는 아래와 같은 문장으로 표현했는데, 개인적으로 마음에 들어서 기억해 두려고 하고 있다.  &lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;프로그래밍의 기술은 &lt;b&gt;언어를 설계하는 기술&lt;/b&gt;이다.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;정리되지 않은 코드는 작명하기&amp;nbsp;어렵다&lt;/h2&gt;&lt;div&gt;따라서 코드의 퀄리티와 작명의 속도 사이에는 연관관계가 생긴다.&lt;/div&gt;&lt;div&gt;함수명이든 클래스명이든 작명이 어려울 때는 코드가 깨끗하지 않다고&amp;nbsp;느낄 때가 많은 것 같다.&lt;/div&gt;&lt;div&gt;(클래스명이 좋다고 꼭 코드가 좋은 건 아니지만...)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;가령 코드 리뷰를 하면서 서비스단의 메서드 하나를 살펴볼 일이 있었는데,&lt;/div&gt;&lt;div&gt;해당 메서드가 의존하는 클래스 6개 중 &lt;b&gt;4개&lt;/b&gt;가 Request나 RequestInfo라는 단어로 끝나는 걸 본 적이 있다.&lt;/div&gt;&lt;div&gt;그래서 각각의 클래스가 이름만으로는 변별이 가지 않았고, 로직 자체도 이해하기가 쉽지 않았다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;어떤 느낌이냐면 특정 메서드에 ARequest를 넘기고&amp;nbsp;BRequestInfo를 반환받은&amp;nbsp;뒤,&lt;/div&gt;&lt;div&gt;다시 CRequest로 변환해서 DRequest의 필드에 삽입해&amp;nbsp;전달하는...&lt;/div&gt;&lt;div&gt;문장 몇 개로는 설명하기가 어려운 로직이었다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그래서 4개의 클래스를 찬찬히 뜯어보았는데,&lt;/div&gt;&lt;div&gt;그중 2개가 필드 구성이 동일하고 각각 final로 선언되었느냐 안 되었느냐의 차이만 있는 &lt;b&gt;중복 코드&lt;/b&gt;였다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;같은 내용을 두고 이름을 &lt;b&gt;두 번&lt;/b&gt;&amp;nbsp;지어야 했으니 당연히 이름 짓기가 어려웠을 것이다.&lt;/div&gt;&lt;div&gt;그래서 이 코드를 보고 나서는, 작명이 잘 안 되면&amp;nbsp;코드에 문제가 없는지 되돌아보려고 하고 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;글이 코드와 비슷하다면&lt;/h2&gt;&lt;p&gt;어쩌면 글을 쓸 때도, 제목을 정하기 어렵다면 글의 내용을 돌아봐야 하는 것 아닐까 싶다는 생각을 한다.&lt;/p&gt;&lt;p&gt;제목은 주제 의식을 반영하니, 제목이 잘 나오지 않는 상황은 주제 의식이 뚜렷하지 않은 상황,&lt;/p&gt;&lt;p&gt;코드로 치면 하나의 클래스에&amp;nbsp;관심사가 여러 개 들어 있는 상황과 닮은 것은 아닐까?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;매일매일 글을 써야 한다고 생각하다 보니 코드와 글의 유사성에 자꾸 생각이 이르는 것 같다.  &lt;/p&gt;&lt;p&gt;그러고보니 &lt;a href=&quot;https://millenial-dev.tistory.com/3&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&quot;Git Branching의 가치&quot;&lt;/a&gt;는 아예 제목을 달아놓고 글을 쓰기 시작했고, 글을 다 쓰고 나서도 고치치 않았었다.&lt;/p&gt;&lt;p&gt;반면 어제 오늘은 제목을 정하는 게 살짝 힘이 들었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래도 아주 고민하지는 않을 예정이다. 웬만하면 평일에 쓰는 글은 부담갖지 않고 적어보려고 하기 때문이다.&lt;/p&gt;&lt;p&gt;하루하루 느끼는 바를 꾸준하게 쓴다면,&amp;nbsp;블로그에 글을 남기는 것도 자기 전에 1시간씩 하는 일상적인 일이 될 거라고... 생각한다.&lt;/p&gt;&lt;p&gt;그랬으면 좋겠다. &lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;(일찍 자는 걸 원해요... 소근)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;clear: none; float: none; text-align: center;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:420px;width: 420px; height: 236px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9926153A5C3F60D413&quot; filemime=&quot;image/gif&quot; filename=&quot;stares.gif&quot; height=&quot;236&quot; original=&quot;yes&quot; style=&quot;width: 420px; height: 236px;&quot; width=&quot;420&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:420px;&quot;&gt;그렇겠죠 선생님? 그렇다고 해주세요&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발일지</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/6</guid>
<comments>https://millenial-dev.tistory.com/6#entry6comment</comments>
<pubDate>Thu, 17 Jan 2019 01:52:59 +0900</pubDate>
</item>
<item>
<title>기술 배우는 타이밍</title>
<link>https://millenial-dev.tistory.com/5</link>
<description>&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;잔업이랑 공부하면서 자정이 넘어갔다.&lt;/div&gt;&lt;div&gt;매일 글 쓰는 게 쉬운 일은 아니라고 생각했지만...  &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;최근에는 API 개발 전 Mock 데이터를 만들면서 일을 어떻게 하면 편하게 할 수 있을지 생각하고 있다.&lt;/div&gt;&lt;div&gt;오늘보다 내일 더 효율적으로 일하기 위해 하는 공부들.&lt;/div&gt;&lt;div&gt;셸 스크립트나 json schema나 git 같은 것들을 예로 들 수 있겠다.&lt;/div&gt;&lt;div&gt;&lt;h2&gt;기술마다&amp;nbsp;배우는&amp;nbsp;계기가 다르다&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;생각해 보면 &lt;b&gt;답답해서&lt;/b&gt; 공부하게 되는 기술들이 있다.&lt;/div&gt;&lt;div&gt;vi 명령어는 잘 모르지만 dd(한 줄 삭제), o(커서 바로 아랫줄에 삽입)는 안 쓰면 하도 불편해서 외웠다든지.&lt;/div&gt;&lt;div&gt;Mock 데이터에 필요한 파일 메타데이터를 손으로 만들다가 답답해서 셸 스크립트를 배웠다든지.&lt;/div&gt;&lt;div&gt;JSON 데이터를 일일이 손으로 고치다가 답답해서 JSON Schema를 사용하게 됐다든지... 다양한 예들이 있을 것 같다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이런 기술들은 필요한 상황에 부딪치기 전에는 좀처럼 배울 생각을 하지 못하지만, 배우고 나면 꽤 요긴하게 쓸 수 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;반면 특별한 계기 없이 공부해도 &lt;b&gt;생각의 범위를 넓혀주는&lt;/b&gt; 기술들이 있었던&amp;nbsp;것 같다.&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=65747649&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;RESTful Web API&amp;gt;&lt;/a&gt;를 읽을 때는 자기 서술적인 JSON 스키마를 누가 이미 생각해 냈다는 게 놀라웠고(Collection+JSON은 정말 매력적인 것 같다)&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=19505747&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;토비의 스프링&amp;gt;&lt;/a&gt;을 읽을 때는 단순하고 수동적인 코드를 결합해서 비즈니스 로직을 구성하게 해주는 스프링의 DI가 천재적이라고&amp;nbsp;생각했었다.&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://learngitbranching.js.org&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;Learn Git Branching&amp;gt;&lt;/a&gt;이라는 인터랙티브 튜토리얼을 통해서는 Git의 커밋이 불가역적인 것이 아니라 손쉽게 정리할 수 있는 대상이라는 것을 알게 되었다. Git을 &quot;완전 편하다&quot;고 생각하면서 쓰기 시작한 순간이었다.&lt;/div&gt;&lt;h2&gt;타이밍을 잡기 위해서는&lt;/h2&gt;&lt;div&gt;이런 헐거운 기준으로 무 자르듯 기술을 구분하려는 것은 아니다.&lt;/div&gt;&lt;div&gt;다만 어떤 기술은 몇 시간 동안 책을 펴놓고 진지하게 공부하는 게 어울리지 않을 수도 있다.&lt;/div&gt;&lt;div&gt;답답할 때 외우는 vi 명령어가 절실하게 느껴지는 것처럼, 기술마다 필요성을 느끼는 때가 따로 있는 것 같다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그래서 기술 공부의 필요성을 자주 느끼려면,&lt;/div&gt;&lt;div&gt;직접 일을 하며 답답함을 느끼는 &lt;b&gt;경험적 측면&lt;/b&gt;과,&lt;/div&gt;&lt;div&gt;주변에 좋은 책과 글을 권하고 공유하는 &lt;b&gt;문화적 측면&lt;/b&gt;이 모두 중요하지 않을까 싶다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;또 마치 생산자가 소비자에게 지금까지 몰랐던 수요를 알게 해 상호작용을 이끌어 내는 것처럼...&lt;/div&gt;&lt;div&gt;지식을 전달하기에 앞서 그 지식의 &lt;b&gt;필요성&lt;/b&gt;을 절절하게(?) 전달하는 것도 중요하지 않나 싶은 생각이 든다.&lt;/div&gt;&lt;div&gt;그런 글로 블로그를 채울 수 있다면 좋은 개발 블로그가 될 것 같다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;일 집중해서 하고 주말마다 책도 읽으며 그런 타이밍을 재 보아야겠다.&lt;/div&gt;&lt;div&gt;기술 배우는 타이밍이 곧 글쓰기의 타이밍이 되므로  &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발일지</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/5</guid>
<comments>https://millenial-dev.tistory.com/5#entry5comment</comments>
<pubDate>Wed, 16 Jan 2019 01:46:26 +0900</pubDate>
</item>
<item>
<title>요약으로 시작하면 어떨까</title>
<link>https://millenial-dev.tistory.com/4</link>
<description>&lt;p&gt;실 서비스의 코드는 복잡하다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;노장의 얼굴에 복잡한 주름이 지는 것처럼, 실 서비스의 코드는 다양한 장애와 문제 상황을 겪고 요구 사항을 추가하면서&lt;/p&gt;&lt;p&gt;미묘한 오류까지 해결하고&amp;nbsp;기워둔 상태로 남아 있을 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래서 어떤 개념을 소개할 때 인용하기에는&amp;nbsp;적절하지 않을 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;실 서비스의 코드는 복잡하다&lt;/h2&gt;&lt;p&gt;입사하고 며칠 후, 스프링의 ㅍ도 잘&amp;nbsp;모르는 상태에서 실제로 작동하는 서비스의 코드를 보고 이해해야 하는 일이 있었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;코드는 매우 복잡해 보였고, 클래스 하나에 인터페이스가 하나씩 달려 있는 등...&lt;/p&gt;&lt;p&gt;코드의 복잡성과 양에서 모두 버겁다는 느낌이 들었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어떤 클래스의 정의를 찾아 들어가려고 하면 다시 모르는 게 나오고, 또 모르는 게 나오고...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;마치 집을 나오다가 지갑을&amp;nbsp;잊어버려서 들어가고, 지갑을 찾다가 손을 다쳐서 반창고를 찾고,&lt;/p&gt;&lt;p&gt;반창고를 찾다가 옷이 망가져서 바늘과 실을 찾는, 끊임없이 후퇴하는&amp;nbsp;느낌을 받았었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이때 &lt;a href=&quot;https://spring.io/guides&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;스프링 공식 홈페이지&lt;/a&gt;에서 짧은&amp;nbsp;가이드를 보면서 도움을 많이 얻었었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;width: 600px; height: 398px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BFFE385C3C8B4235&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-14 오후 10.14.09.png&quot; height=&quot;398&quot; original=&quot;yes&quot; style=&quot;width: 600px; height: 398px;&quot; width=&quot;600&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:600px;&quot;&gt;별별 주제가 다 있다&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이런 가이드에서 제공하는 간단한 코드를 먼저 보고 나니,&amp;nbsp;복잡한 실 서비스의 코드가 점점 이해되는 경험을 할 수 있었다.&lt;/p&gt;&lt;p&gt;가장 먼저 @RestController나 @SpringBootApplication 같은 애너테이션이 보였고, build.gradle에서 의존성을 가져오는 부분이 서서히 보이기 시작했다.&lt;/p&gt;&lt;p&gt;어떤 클래스를 이용하면 원하는 JSON 응답을 생성해 내는지 알 수 있었고, 점차 핵심적인 작동 방식을 이해하게 되었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이는 &lt;b&gt;요약본&lt;/b&gt;을 먼저 보고 긴 글을 보았기 때문이라고 생각한다.&lt;/p&gt;&lt;p&gt;요약본은 중심적인 부분과 세밀한 부분을 분리해서 볼 수 있는 힘을 준다.&lt;/p&gt;&lt;p&gt;소설을 읽을 때&amp;nbsp;줄거리를 먼저 보면,&amp;nbsp;장면 묘사는 건너뛰고 핵심 사건만 볼 수 있게 되는 것처럼,&lt;/p&gt;&lt;p&gt;간단한 코드를 먼저 보면 보편적인 프레임워크 로직과 비즈니스 로직을 분리해서 볼 수 있는 힘이 생긴다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;어쩌면 대화를 할 때도&amp;nbsp;요약을 먼저 전달하는 게 덜 피곤한 방법이 아닐까 싶은 생각을 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;두괄식으로 대화할 수는 없을까&lt;/h2&gt;&lt;div&gt;개발자들과 어떤 주제로 대화할 때,&amp;nbsp;종종 산 넘고 물 건너서 결론에 도달하는 경우가 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;하나의 작업을 하기 위해서 연관되는&amp;nbsp;개념을 모두 설명한다거나,&lt;/div&gt;&lt;div&gt;하고 싶은 말을 한꺼번에 많이 하면서 정리가 되지 않는다거나...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이런 대화는&amp;nbsp;마치 &lt;b&gt;리팩토링이 시급한&amp;nbsp;코드&lt;/b&gt;와 닮아 있다는 생각이 든다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;전자는 마치 추상화 수준이 오르락내리락 하는 코드와 닮아 있다. 주제를 파악하기 위한 인지적 노력이 엄청 들어가고, 청자를 지치게 한다.&lt;/div&gt;&lt;div&gt;후자는 마치 관심사를 분리하지 못한 코드와 닮아 있다. 하나하나 필요한&amp;nbsp;말이지만 한 번에 전달하다 보니 맥락을 파악할 수가 없다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;밥 아저씨가 추상화 수준이 높게 시작해서 낮게 끝나는 코드를 쓰라고 했었는데,&lt;/div&gt;&lt;div&gt;대화도&amp;nbsp;처음은 요약으로 시작하고 세세한 이야기를 마지막에 하면 어떨까?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그러기 위해서는 말하기 전에 생각을 많이 다듬어야 하겠지만,&lt;/div&gt;&lt;div&gt;코드가 커뮤니케이션의 수단인 것처럼, 커뮤니케이션도 좋은 코드를 닮아가다 보면 좋아지지 않을까 하는 생각을 해 본다.  &lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발일지</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/4</guid>
<comments>https://millenial-dev.tistory.com/4#entry4comment</comments>
<pubDate>Mon, 14 Jan 2019 23:07:44 +0900</pubDate>
</item>
<item>
<title>Git Branching의 가치</title>
<link>https://millenial-dev.tistory.com/3</link>
<description>&lt;p&gt;git에 익숙하지 않으면 작업 내역을&amp;nbsp;커밋하는 데&amp;nbsp;애를 먹는 경우가 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;동료 개발자들과 커밋을&amp;nbsp;작업 단위로 쪼개자고 합의를 본 상태다. 나 또한 1000줄짜리 거대한 커밋을 보는 건 원치 않기 때문이다.&lt;/p&gt;&lt;p&gt;그런데 작업하다 보니 여기저기 손을 대면서 중복 코드도 없애고, 상속 구조도 바꾸고, 오타도 수정하고...&lt;/p&gt;&lt;p&gt;여러 가지 작업을 하고 말았다. 이제 이 작업들을 나눠서 커밋해야 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;git은 보니까 마지막 커밋만 --amend로 수정할 수 있던데... 잘못 커밋하면 되돌리지 못하는 것 같다.&lt;/p&gt;&lt;p&gt;파일 하나하나를 신중히 나눠 커밋하다 보니&amp;nbsp;커밋 정리만&amp;nbsp;&lt;b&gt;1시간&lt;/b&gt;을 하는 자신을 발견하게 되었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;남들도 이렇게 힘들게 작업하나 싶다.&amp;nbsp;다들 깔끔하게 커밋하던데 나만 힘든 것 같고 막...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;width: 800px; height: 500px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994FCB495C3AA3971A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오전 11.27.11.png&quot; height=&quot;500&quot; original=&quot;yes&quot; style=&quot;width: 800px; height: 500px;&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;쓰앵님 우리 예서가 커밋 정리하다 우는데 어떡하죠?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이렇게 공들여 작업하면 버전 관리가 짐처럼 느껴지게 된다.&lt;/p&gt;&lt;p&gt;솔직히 프로그래밍하는 것도 어려운데 &lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;(소근&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 166, 166);&quot;&gt;)&lt;/span&gt;&amp;nbsp;커밋 한 번 할 때마다&amp;nbsp;힘을 쏟아야&amp;nbsp;한다니...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그런 면에서 개발자를 위한 git 튜토리얼이라면, commit log diff만 알려주고 끝내면 안 된다고 생각한다.&lt;/p&gt;&lt;p&gt;코드 짜면서 실수를 많이 하는 초심자일수록 &lt;b&gt;merge branch rebase cherry-pick&lt;/b&gt;의 가치가 빛을 발한다.&lt;/p&gt;&lt;p&gt;입사하고 나서도 몰랐던 요 Branching의 가치에 대해서 언급하고자 한다. 잃어버린 업무 시간을 추억하면서... 또르르...&lt;/p&gt;&lt;h2&gt;우리 로컬에서는 편하게&amp;nbsp;커밋해요&lt;/h2&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:460px;width: 460px; height: 262px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F9854A5C3AF92B11&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git_commit_2x.png&quot; height=&quot;262&quot; original=&quot;yes&quot; style=&quot;width: 460px; height: 262px;&quot; width=&quot;460&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:460px;&quot;&gt;코드 받아라 얍 (출처: https://xkcd.com/1296/)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;git 커밋하는 법에 대해서 검색하면 보통 이런 이미지를 볼 수 있을 것이다. 뭔가&amp;nbsp;git 커밋 메시지를 대충 쓰지 말라고 하는 것 같다.&lt;/p&gt;&lt;p&gt;원격 저장소 작업 내역을 보아도 이렇게 커밋하는 사람은 없으니까.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;또 만약&amp;nbsp;회사에서 이슈 트래킹 도구를 쓴다면,&amp;nbsp;이슈 티켓 번호를 언급하는 것으로 커밋 메시지를 대체할 것이다.&lt;/p&gt;&lt;p&gt;그러면 아마 커밋 메시지가 더 깔끔해 보일 것이다. 전부&amp;nbsp;비슷하게 생겼으니까.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;근데 이거 다 원격 저장소 얘기다.&lt;/p&gt;&lt;h2&gt;로컬 저장소와 원격 저장소는&amp;nbsp;다르다&lt;/h2&gt;&lt;p&gt;작업 내역을 원격 저장소로 전송할 때 보통 이런&amp;nbsp;명령어들을&amp;nbsp;쓴다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;push&amp;nbsp;origin&amp;nbsp;master&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;push&amp;nbsp;upstream&amp;nbsp;develop&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;&lt;span style=&quot;font-size:9px; word-break:normal; background-color:#e5e5e5; color:white; border-radius:10px; padding:1px&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이는 'master'나 'develop'이라는 &lt;b&gt;한&amp;nbsp;브랜치&lt;/b&gt;에 내 작업 내역을 push하는 명령어다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;로컬에 'local/refactoring'이든,&amp;nbsp;'haaaaaaands'든, 'afjiofejiog'든... 어떤 브랜치를 만들어도 저 명령어로 푸시되지는&amp;nbsp;않는다.&lt;/p&gt;&lt;p&gt;손이 미끄러져서 'git push origin afjiofejiog'을 치지 않는다면 말이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;원격 저장소와의 연동은 마치 바탕 화면에 &lt;b&gt;공유 폴더&lt;/b&gt;를 하나 만드는 것과 같다.&lt;/p&gt;&lt;p&gt;공유 폴더를 제외한 나머지 바탕 화면은 내 마음대로 관리해도 되는 것처럼, 로컬 저장소에서 브랜치를 관리하는 것은 &lt;b&gt;각자의 몫&lt;/b&gt;이다.&lt;/p&gt;&lt;p&gt;그러니 자신이 필요한 관심사에 따라서 'refactoring', 'typo', 'debug', ... 편한 방식대로 만들어서 효율적으로 사용하면 된다.&lt;/p&gt;&lt;p&gt;내 컴퓨터 안 로컬 저장소에서&amp;nbsp;&lt;b&gt;git flow&lt;/b&gt;를 따르는 등, 타인을 의식할 필요가 없는 것이다.&lt;/p&gt;&lt;p&gt;(그렇다고&amp;nbsp;'AAAAAA' 같은 메시지로 커밋하면서 어질러 둔다면...&amp;nbsp;푸시하기 전에 좀&amp;nbsp;힘들겠지만...)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그런데 git branch만 알고 있으면, 나중에 master나 develop에 어떻게 커밋을 옮겨올지 몰라 branch를 거의 안 쓰게 된다.&lt;/p&gt;&lt;p&gt;그래서 커밋을 옮겨오는 방법을 살짝 소개만 해 보려고 한다.&lt;/p&gt;&lt;h2&gt;다른 브랜치의 커밋을 반영하는&amp;nbsp;merge&lt;/h2&gt;&lt;div&gt;가령 블로그 글을 쓰면서 git으로 버전 관리를 하는 상황을 가정해 보자.&lt;/div&gt;&lt;div&gt;&lt;b&gt;chapter1&lt;/b&gt;이라는 브랜치를 만들고, 한 문단씩 커밋하면서&amp;nbsp;글을 쓰는데 자꾸 이전 문단의 오타가 눈에 밟힌다.&lt;/div&gt;&lt;div&gt;문단 추가하는 작업 내역이랑 오타 수정하는 작업 내역을 분리하고 싶어서, 오타 수정할 때마다 별도의 브랜치를 만들었다.&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992CFB3A5C3AD11B11&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.17.39.png&quot; height=&quot;668&quot; original=&quot;yes&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;칠지도...?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;아마 이런 모습이 될 것이다. 이제 오타 수정 내역을&amp;nbsp;chapter1에 합치면 될 것 같다.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다른 브랜치의 수정 사항을 현재 브랜치에 반영하고 싶다면 &lt;b&gt;merge&lt;/b&gt;를 사용할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;merge&amp;nbsp;typo1&amp;nbsp;typo2&amp;nbsp;typo3&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;span style=&quot;text-decoration: none; color: white; font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;cs&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;커밋 메시지를 적절히 수정하고 커밋하면,&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992DD23D5C3AD19C13&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.20.04.png&quot; height=&quot;668&quot; original=&quot;yes&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;와웅&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;모든 커밋이 하나로 합쳐지는 것을 볼 수 있다.&lt;/p&gt;&lt;p&gt;그런데 커밋&amp;nbsp;히스토리에 뭔가 절지동물 같은 것이 만들어졌다. master에는 저 상태로 커밋하고 푸시하면 안 될 것 같다...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래서 chapter1의 수정 내역을 master에 &lt;b&gt;두 개의 커밋&lt;/b&gt;으로 깔끔하게 반영해&amp;nbsp;보려고 한다. &quot;1장 추가&quot;와 &quot;1장 오타 수정&quot;으로 :)&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;커밋의 순서를 바꾸고 합치는 rebase&lt;/h2&gt;&lt;div&gt;우선 &quot;1문단 추가&quot;부터 &quot;4문단 추가&quot;까지, 4개의 커밋을&amp;nbsp;&quot;1장 추가&quot;로&amp;nbsp;합치려고 한다.&lt;/div&gt;&lt;div&gt;git은 이전 커밋들의 순서를 바꾸거나, 특정 커밋을 빼거나, 커밋을 합칠 때 사용할 수 있는 &lt;b&gt;rebase -i&lt;/b&gt; 명령을 제공한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;master가&amp;nbsp;&quot;4문단 추가&quot;(d82ddfb)를 가리키게 하고 커밋 4개를&amp;nbsp;합쳐보자.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;checkout&amp;nbsp;master&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;reset&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;hard&amp;nbsp;d82ddfb&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;rebase&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;i&amp;nbsp;HEAD~&lt;span style=&quot;color:#0099cc&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;span style=&quot;text-decoration: none; color: white; font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;cs&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F9C1335C3AD4AA1F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.26.16.png&quot; height=&quot;575&quot; original=&quot;yes&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;꺄 이게 뭐지?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;복잡해 보이는 화면이지만 주석이 반 이상을 차지하고 있다.&amp;nbsp;익숙한 커밋 메시지도 보인다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;각 줄이 하나의 커밋을 나타낸다.&amp;nbsp;&lt;b&gt;위아래로 복사&amp;amp;붙여넣기하면&lt;/b&gt;&amp;nbsp;커밋의 순서를 바꿀 수 있고, 버리고 싶은&amp;nbsp;커밋이 있다면 그 줄을 &lt;b&gt;삭제&lt;/b&gt;하면 된다.&lt;/p&gt;&lt;p&gt;아래 Commands를 통해&amp;nbsp;더 정교한 작업을 할 수 있는데,&amp;nbsp;우리가 찾는 건 해당 커밋을 이전&amp;nbsp;커밋과 합치는&amp;nbsp;&lt;b&gt;squash&lt;/b&gt;다.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;첫 번째 커밋 아래 모든 커밋을&amp;nbsp;squash하고 에디터를 빠져나오면...&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B8C3455C3AD81709&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.26.51.png&quot; height=&quot;575&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;git이 모든 커밋 메시지를 합치려고 할 것이다. 전부&amp;nbsp;지워주고 &quot;1장 추가&quot;라고만 쓴 뒤 다시&amp;nbsp;빠져나오면...&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99731D4C5C3AD86C1B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.27.51.png&quot; height=&quot;668&quot; original=&quot;yes&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;깔끔한것...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;새로운 커밋이 생겼고, 4개&amp;nbsp;커밋의 수정 내용이 전부 반영된&amp;nbsp;것을 볼 수 있다.&lt;/p&gt;&lt;p&gt;rebase -i에는 이것 말고도&amp;nbsp;예전 커밋을 수정하거나 쪼개는 유용한 기능들이 있는데,&amp;nbsp;&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_changing_multiple&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Pro Git&lt;/a&gt;에서 이를 잘 설명하고 있다.&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;개별 커밋만 쏙 빼오기 위한 cherry-pick&lt;/h2&gt;&lt;div&gt;&lt;div&gt;그나저나&amp;nbsp;&quot;1장 오타 수정&quot;(bb852aa)도 가져와야 하는데... merge를 사용하면 저 절지동물을 원격 저장소로 내보내게 된다.&lt;/div&gt;&lt;div&gt;수정 내용만 쏙 가져오는 방법이 없을까?&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;git cherry-pick&lt;/b&gt;을 통해 복잡한 구조를 격리시키고&amp;nbsp;개별 커밋만&amp;nbsp;쏙 빼올 수 있다.&lt;/div&gt;&lt;div&gt;가져와 보면...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;cherry&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;pick&amp;nbsp;bb852aa&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;&lt;span style=&quot;font-size:9px; word-break:normal; background-color:#e5e5e5; color:white; border-radius:10px; padding:1px&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;-m&lt;/b&gt; 옵션이 설정되지 않았다는 에러가 난다.&amp;nbsp;왜지?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;git에서 개별&amp;nbsp;커밋의 변경 내용은&amp;nbsp;부모 커밋에&amp;nbsp;상대적인 특성을 가지고 있다.&lt;/div&gt;&lt;div&gt;&quot;1장 오타 수정&quot;은 부모 커밋을 여러 개 둔 merge 커밋이므로, 각각의 부모 커밋과 비교해 보면 변경된&amp;nbsp;내용이 다 다를 것이다.&lt;/div&gt;&lt;div&gt;아마 &quot;1문단 오타 수정&quot;의 입장에서 보면 &quot;1장 오타 수정&quot;은&amp;nbsp;2·3·4문단을&amp;nbsp;추가해주는 커밋이고,&lt;/div&gt;&lt;div&gt;&quot;3문단 오타 수정&quot;의 입장에서 보면 &quot;1장 오타 수정&quot;은 4문단을 추가해주는 커밋이 될 것이다.&lt;/div&gt;&lt;div&gt;cherry-pick으로서는 어떤 변경 내용을 가져올지 알 수 없기 때문에 에러를 내는 것이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&quot;1장 추가&quot;에는 &quot;4문단 추가&quot;의 변경 내용이 이미 반영되어 있으므로, &quot;4문단 추가&quot; 쪽을 부모 커밋으로&amp;nbsp;골라주면 될 것 같다.&lt;/div&gt;&lt;div&gt;잠깐 chapter1으로 돌아가서&amp;nbsp;커밋 히스토리를 보면...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$ git&amp;nbsp;checkout&amp;nbsp;chapter1&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$ git&amp;nbsp;log&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;span style=&quot;text-decoration: none; color: white; font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;cs&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:500px;width: 500px; height: 194px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BEAC3D5C3AE0532C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 3.52.39.png&quot; height=&quot;194&quot; original=&quot;yes&quot; style=&quot;width: 500px; height: 194px;&quot; width=&quot;500&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:500px;&quot;&gt;Merge가 네 개&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&quot;4문단 추가&quot;가 Merge 열의&amp;nbsp;왼쪽에서 첫 번째에 있는 것을 확인할 수 있다. -m 옵션 뒤에 몇 번째인지를 숫자로&amp;nbsp;적어주면 될 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$ git&amp;nbsp;checkout&amp;nbsp;master&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$ git&amp;nbsp;cherry&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;pick&amp;nbsp;bb852aa&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;m&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;&lt;span style=&quot;font-size:9px; word-break:normal; background-color:#e5e5e5; color:white; border-radius:10px; padding:1px&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;width: 800px; height: 668px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A6DE375C3ADA6920&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.33.16.png&quot; height=&quot;668&quot; original=&quot;yes&quot; style=&quot;width: 800px; height: 668px;&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;깔-끔&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;$&amp;nbsp;git&amp;nbsp;push&amp;nbsp;origin&amp;nbsp;master&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;span style=&quot;text-decoration: none; color: white; font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none; color:white&quot;&gt;cs&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:400px;width: 400px; height: 379px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99979D435C3AE76A27&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 2.34.10.png&quot; height=&quot;379&quot; original=&quot;yes&quot; style=&quot;width: 400px; height: 379px;&quot; width=&quot;400&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:400px;&quot;&gt;깃허브도 깔-끔&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;깔끔하게 수정 내용만 가져올 수 있었다. 절지동물은 내 컴퓨터에만 두는 것으로  &lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;사실 cherry-pick은&amp;nbsp;한 개뿐 아니라&amp;nbsp;&lt;b&gt;여러 개의 커밋&lt;/b&gt;을&amp;nbsp;&lt;b&gt;원하는 순서대로&lt;/b&gt; 빼오는 데 사용할 수 있다.&lt;/div&gt;&lt;div&gt;즉 하나의 브랜치 위에 있는 커밋만 cherry-pick하면 rebase -i와 비슷하게 쓰는 셈이 된다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;실제로 cherry-pick을 사용하지 않고 rebase -i만으로도&amp;nbsp;위&amp;nbsp;작업을 할 수&amp;nbsp;있다.&lt;/div&gt;&lt;div&gt;어느 쪽이든 기존 커밋과의 연결고리를 끊어버리므로 주의해서 사용할 필요가 있다.&lt;/div&gt;&lt;div&gt;(약간 흑마법 느낌이 있는 것 같다...)&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:800px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E68F385C3B389D0F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-13 오후 10.06.16.png&quot; height=&quot;575&quot; original=&quot;yes&quot; width=&quot;800&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:800px;&quot;&gt;한 방에 끝낼 수 있다&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;유의할 점이 있다&lt;/h2&gt;&lt;h3&gt;No newline at end of file&lt;/h3&gt;&lt;div&gt;이 모든 작업에서는 충돌이 발생할 가능성이 있다.&lt;/div&gt;&lt;div&gt;커밋을 합치거나 앞뒤로 옮기는 작업에서 충돌이 발생하면, 작업의 단계마다 수동으로 충돌을 해결해 주어야 한다.&lt;/div&gt;&lt;div&gt;그런 난감한 상황을 줄이기 위해서 꼭 지켜줘야 하는 것이 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;줄 단위로 변경 사항을 관리하는 git에서는&amp;nbsp;&lt;b&gt;파일 끝에 줄바꿈&lt;/b&gt;을 꼭! 해두는 게 좋다.&lt;/div&gt;&lt;div&gt;줄바꿈은 줄 끝에 개행 문자('\n')를 붙여&amp;nbsp;이루어지기 때문에, 만약 커밋하고 나서 파일 끝에 줄바꿈을 하고 내용을 덧붙이면&lt;/div&gt;&lt;div&gt;이전 내용의 마지막 줄까지 &lt;b&gt;같이 수정&lt;/b&gt;하게 된다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이렇게 내용을 덧붙여 가는 식으로 작업한다면 개별 커밋의 순서를 뒤바꾸거나, 분기한 브랜치를 합칠&amp;nbsp;때 전부 충돌이 나게 된다.&lt;/div&gt;&lt;div&gt;이걸 수동으로 수정하면서 merge rebase cherry-pick하다 보면... 참 힘들다...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그러므로 Redundant Code라고 생각되어도 꼭 파일 끝에는 &lt;b&gt;개행 문자&lt;/b&gt;를 붙여두자.&lt;/div&gt;&lt;h3&gt;이거 다 로컬 저장소 얘기다&lt;/h3&gt;&lt;div&gt;알다시피 원격 저장소에 푸시한 커밋은 rebase나 cherry-pick으로 순서를 조정할 수 없다.&lt;/div&gt;&lt;div&gt;(그러려면 원격 저장소를 버려야 한다. 징긋)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;푸시하기 전에&lt;/b&gt; 실수한 게 없는지 확인하는 습관을 들여야겠다.&lt;/div&gt;&lt;h2&gt;관심사를 분리하는 것이 중요하다&lt;/h2&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;우리들 대다수는 두뇌 용량에 한계가 있어 깨끗하고 체계적인 소프트웨어보다 돌아가는 소프트웨어에 초점을 맞춘다. 전적으로 올바른 태도다. &lt;b&gt;관심사를 분리하는 작업&lt;/b&gt;은 프로그램만이 아니라 &lt;b&gt;프로그래밍 활동&lt;/b&gt;에서도 마찬가지로 중요하다.&lt;/p&gt;&lt;p&gt;- 로버트 C. 마틴, &lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=34083680&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&amp;lt;클린 코드&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;작업을 하다 보면 알게 모르게 두 가지 일을 동시에 하면서 골머리를 앓는 경우가 있다.&lt;/p&gt;&lt;p&gt;버전 관리에서는 &quot;작업 내역을 저장해야지&quot;와 &quot;커밋 히스토리를 깔끔하게 만들어야지&quot;라는 두 관심사가 섞이게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;동시에 성취하려 할 필요가 없이, 간단하게 &lt;b&gt;하나씩만 집중&lt;/b&gt;하면 덜 머리 아프게 일할 수 있다고 생각한다.&lt;br /&gt;브랜치를 나누고 합치고 커밋을 떼오는 이런 명령어들이 분명 두 관심사의&amp;nbsp;분리에&amp;nbsp;도움을 줄 수 있을 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고 이 글보다 Git Branching을 훨씬 더 잘 알려주는&amp;nbsp;&lt;a href=&quot;https://learngitbranching.js.org&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;인터랙티브 튜토리얼&lt;/a&gt;이 있으니 꼭&amp;nbsp;참고해 보셨으면 좋겠다.&amp;nbsp; &lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:300px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9972A3465C3AE6D138&quot; filemime=&quot;image/gif&quot; filename=&quot;typing-cat.gif&quot; height=&quot;300&quot; original=&quot;yes&quot; width=&quot;300&quot;/&gt;&lt;span class=&quot;cap1&quot; style=&quot;display:block;max-width:100%;width:300px;&quot;&gt;로컬에는 편하게 커밋하자...
저 타자 치는 고양이처럼...&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>주제탐구</category>
<category>Git</category>
<category>개발</category>
<category>프로그래밍</category>
<author>내일선장</author>
<guid>https://millenial-dev.tistory.com/3</guid>
<comments>https://millenial-dev.tistory.com/3#entry3comment</comments>
<pubDate>Sun, 13 Jan 2019 16:47:59 +0900</pubDate>
</item>
</channel>
</rss>