<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Intelligence Convergence</title>
<link>https://mobicon.tistory.com/</link>
<description>Full Stacker, Application Architecter, KnowHow Dispenser and Bike Rider</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 02:18:03 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>윤영식</managingEditor>
<image>
<title>Intelligence Convergence</title>
<url>http://cfile9.uf.tistory.com/image/246BA83D558806A012B03E</url>
<link>https://mobicon.tistory.com</link>
<description>Full Stacker, Application Architecter, KnowHow Dispenser and Bike Rider</description>
</image>
<item>
<title>[Platform &amp; Plugin] 아키텍트 기술 검토 - 2</title>
<link>https://mobicon.tistory.com/569</link>
<description>두번째 Multi Application에 대한 Plugin 방식을 구성 테스트해 보자. Library기반 Plugin 파일 만들기 플랫폼에 있는 플러그인이 아니라 플랫폼과 별개의 서비스에서 운영되는 플로그인을 플랫폼상에 렌더링하기 위해서는 UMD(Universal Module Definition) 방식으로 플러그인이 번들링 되어야 한다. UMD에 대해서는 본 블로그의 글을 참조한다. $ ng g library plugin2 --publishable ..&lt;div style=&quot;text-align:right; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://mobicon.tistory.com/569&amp;amp;layout=button_count&amp;amp;show_faces=true&amp;amp;width=106&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:106px; height:30px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Architecture</category>
<category>@nrwl/schematics</category>
<category>angular</category>
<category>Platform</category>
<category>plugin</category>
<author>peter yun 윤영식</author>
<guid>https://mobicon.tistory.com/569</guid>
<comments>https://mobicon.tistory.com/569#entry569comment</comments>
<pubDate>Wed, 10 Apr 2019 16:35:15 +0900</pubDate>
</item>
<item>
<title>[Platform &amp; Plugin] 아키텍트 기술 검토 - 1</title>
<link>https://mobicon.tistory.com/568</link>
<description>플랫폼위에 필요에 따라 플러그인 파일을 동적으로 다운로드 받아 운영하는 방식에 대한 기술 검토를 한다. 하나는 Single Application이면서 필요시점에 파일을 다운로든 받는 방식과 두번째는 다른 애플리케이션의 파일을 다운로드 받아 처리하는 방식이다. 첫번째는 Single Application Plugin 방식으로 하나의 애플리케이션이 서비스되면서 필요시점에 파일을 다운로드 받아서 사용하는 방법이다. platform, shared 파일을 최초..&lt;div style=&quot;text-align:right; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://mobicon.tistory.com/568&amp;amp;layout=button_count&amp;amp;show_faces=true&amp;amp;width=106&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:106px; height:30px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Architecture</category>
<author>peter yun 윤영식</author>
<guid>https://mobicon.tistory.com/568</guid>
<comments>https://mobicon.tistory.com/568#entry568comment</comments>
<pubDate>Mon, 08 Apr 2019 17:45:53 +0900</pubDate>
</item>
<item>
<title>[Angular Architecture] 애플리케이션 구조 설계 - 3</title>
<link>https://mobicon.tistory.com/567</link>
<description>Nx Workspace와 NgRx/Platform을 연결한 boilerplate를 만들어 본다. - Nx Workspace 생성하기 - NgRx 개념이해 및 사용예 만들기 - 다음 3가지 문서와 동영상을 참조한다. + Nx Workspace 무료 동강 수강 + Nx Workspace 메뉴얼 + NgRx와 Nx Workshop 강좌 + State Management Type 정리 + Nx Workspace 기반 예제소스 Nx Workspace 생성 하..&lt;div style=&quot;text-align:right; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://mobicon.tistory.com/567&amp;amp;layout=button_count&amp;amp;show_faces=true&amp;amp;width=106&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:106px; height:30px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Architecture</category>
<category>angular 7</category>
<category>create-nx-workspace</category>
<category>effect</category>
<category>ngrx</category>
<category>ngrx/store</category>
<category>nwrl</category>
<category>nx workspace</category>
<category>Redux</category>
<category>store</category>
<category>리덕스</category>
<category>앵귤러</category>
<author>peter yun 윤영식</author>
<guid>https://mobicon.tistory.com/567</guid>
<comments>https://mobicon.tistory.com/567#entry567comment</comments>
<pubDate>Wed, 09 Jan 2019 18:26:32 +0900</pubDate>
</item>
<item>
<title>[Angular Architecture] 애플리케이션 구조 설계 - 2</title>
<link>https://mobicon.tistory.com/566</link>
<description>Angular CLI v6.* 이후 Multi Application을 위한 Workspace개념이 도입되었다. 공통 Module을 통해 하나의 폴더안에서 여러 애플리케이션을 만들 수 있는 방법에 대해 알아본다. Schematics 스케메틱스는 workflow 툴이다. - 프로젝트에 파일을 생성하고 - 기존 코드를 변경하고 - 환경 옵션을 추가하거나 프레임워크를 추가할 수 있다. 스케메틱스는 Angular CLI의 코드 스케폴딩에 사용하며 다음 목표를..&lt;div style=&quot;text-align:right; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://mobicon.tistory.com/566&amp;amp;layout=button_count&amp;amp;show_faces=true&amp;amp;width=106&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:106px; height:30px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Architecture</category>
<category>angluar</category>
<category>Angular CLI</category>
<category>apf</category>
<category>CLI</category>
<category>devkit</category>
<category>ng-packagr</category>
<category>nrwl</category>
<category>nx workspace</category>
<category>schematics</category>
<author>peter yun 윤영식</author>
<guid>https://mobicon.tistory.com/566</guid>
<comments>https://mobicon.tistory.com/566#entry566comment</comments>
<pubDate>Thu, 27 Dec 2018 15:27:48 +0900</pubDate>
</item>
<item>
<title>[Angular Architecture] 애플리케이션 구조 설계 - 1</title>
<link>https://mobicon.tistory.com/565</link>
<description>Angular 프로젝트를 위한 구조 설계 요건에 대해 알아본다. - 프레임워크 선택 고려 사항 - 개발 생산성과 유지 보수성을 높일 수 있는 방안 - 참조 문서와 소스 + Angular Enterprise Architecture pattern 문서 + 해당 문서의 예제 소스 프레임워크 선택 고려 사항 프레임워크는 잘 정돈된 놀이터와 같아 기구를 타고 놀면 된다. 하지만 라이브러리의 경우는 툴박스와 같아서 박스안에는 망치, 드라이버, 못같은 것만 있다..&lt;div style=&quot;text-align:right; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://mobicon.tistory.com/565&amp;amp;layout=button_count&amp;amp;show_faces=true&amp;amp;width=106&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:106px; height:30px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Architecture</category>
<category>angular</category>
<category>architecture</category>
<category>JavaScript</category>
<category>Meteor</category>
<category>react</category>
<category>vue</category>
<author>peter yun 윤영식</author>
<guid>https://mobicon.tistory.com/565</guid>
<comments>https://mobicon.tistory.com/565#entry565comment</comments>
<pubDate>Thu, 13 Dec 2018 16:39:14 +0900</pubDate>
</item>
</channel>
</rss>