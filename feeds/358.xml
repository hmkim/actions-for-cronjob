<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://bakyeono.net/" rel="alternate" type="text/html" /><updated>2018-06-13T19:37:10+09:00</updated><id>https://bakyeono.net/</id><title type="html">박연오</title><subtitle>Clojure, Common Lisp, Python, Javascript</subtitle><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/bakyeono" /><feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="bakyeono" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">[책소개] 『파이썬으로 데이터 주무르기』</title><link href="https://bakyeono.net/post/2018-03-28-book-review-manipulate-data-with-python.html" rel="alternate" type="text/html" title="[책소개] 『파이썬으로 데이터 주무르기』" /><published>2018-03-28T11:00:00+09:00</published><updated>2018-03-28T11:00:00+09:00</updated><id>https://bakyeono.net/post/book-review-manipulate-data-with-python</id><content type="html" xml:base="https://bakyeono.net/post/2018-03-28-book-review-manipulate-data-with-python.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#데이터-분석-과정을-보여주는-책" id="markdown-toc-데이터-분석-과정을-보여주는-책"&gt;데이터 분석 과정을 보여주는 책&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#실습하고-응용하며-배우기" id="markdown-toc-실습하고-응용하며-배우기"&gt;실습하고 응용하며 배우기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;페이스북 그룹 &lt;a href="https://www.facebook.com/groups/pythonkorea"&gt;‘Python Korea’&lt;/a&gt;에 데이터 분석 학습 모임 광고가 뜬 걸 보고 참가 신청했다. &lt;a href="https://www.facebook.com/groups/dastudy"&gt;‘데이터 분석 스터디’&lt;/a&gt;라는 페이스북 그룹의 모임이다. 지원자들이 스무 명 가까이 줄을 설 만큼 인기가 많았다. 나도 친구들과 함께 참가하고 싶었지만 모임에 빈 자리가 없어 혼자만 끼게 됐다. 이 모임에서 &lt;a href="http://pinkwink.kr/1070"&gt;『파이썬으로 데이터 주무르기』&lt;/a&gt;를 교재로 학습했다.&lt;/p&gt;

&lt;h2 id="데이터-분석-과정을-보여주는-책"&gt;데이터 분석 과정을 보여주는 책&lt;/h2&gt;

&lt;p&gt;&lt;img src="/img/book-manipulate-data-with-python.png" alt="파이썬으로 데이터 주무르기" /&gt;&lt;/p&gt;

&lt;p&gt;좋은 스토리를 쓰려면 설명하지 말고 보여주라고 했다. 저자가 그 격언에 따른 것인지, 이 책에는 설명이 별로 없는 대신 흥미진진한 예제로 가득하다. ‘저렴한 주유소 찾는 법’처럼 가벼운 일상 프로젝트부터 ‘인구 소멸 지역 분석’처럼 연구 주제로 다뤄볼만한 프로젝트까지, 데이터 분석가가 실제로 할 법한 중규모 프로젝트들을 보여준다.&lt;/p&gt;

&lt;p&gt;데이터 분석 전체 과정을 다루는만큼 소개하는 내용이 적지 않다. 수작업과 크롤링으로 데이터를 수집하는 과정, 수집한 데이터를 정리정돈하는 과정, 데이터의 특징을 요모조모 살펴보고 조작해보는 과정, 플롯팅·매핑 등 여러 가지 시각화해보는 과정 등이 소개된다. 실습에 쓰이는 도구도 많아서, 파이썬, &lt;a href="https://pandas.pydata.org"&gt;팬더스(Pandas)&lt;/a&gt;, &lt;a href="http://www.numpy.org"&gt;넘파이(NumPy)&lt;/a&gt;, &lt;a href="https://github.com/python-visualization/folium"&gt;폴리엄(Folium)&lt;/a&gt;, &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc"&gt;뷰티플 솝(Beautiful Soup)&lt;/a&gt;, &lt;a href="https://www.seleniumhq.org"&gt;셀레늄(Selenium)&lt;/a&gt;, 구글 맵스, &lt;a href="http://konlpy-ko.readthedocs.io"&gt;KoNLPy&lt;/a&gt; 등 여러 도구가 쉴새 없이 등장한다. 분량이 다소 많을 수 있으나, 진행 과정이 처음부터 끝까지 차례차례 나오므로 조금 노력하면 대부분의 사람들이 따라할 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;데이터 분석에 필요한 지식과 도구를 모두 익힌 뒤에 일을 하고자 한다면 엄두를 내기 어려울 것이다. 저자는 독자들이 세부 사항을 스스로 학습할 것이라고 믿고, 독자들이 데이터 분석 실무 과정을 체험하도록 하는 데 집중한다. 덕분에 입문자들이 전체 그림을 파악하기에 좋은 책이 된 것 같다. 데이터 분석을 시작해볼까 고민하는 분들, 어떻게 시작해야 할지 알고 싶은 분들이 보기 좋다. 나도 이 책을 학습하고는 팬더스와 통계학을 좀 더 공부해보고 싶은 마음이 생겼다. 함께 학습한 스터디 그룹에서도 다음에 학습할 책으로 &lt;a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B6540908288"&gt;『파이썬 라이브러리를 활용한 데이터 분석』&lt;/a&gt;이 선정되었다.&lt;/p&gt;

&lt;h3 id="실습하고-응용하며-배우기"&gt;실습하고 응용하며 배우기&lt;/h3&gt;

&lt;p&gt;1장부터 6장까지 책 내용에 따라 실습을 해 봤다. 설명이 많지 않아 스스로 고민하고 찾아 봐야 하는 부분도 적지 않지만, 전체적으로는 무난하게 실습이 가능했다. 7장과 8장은 읽어보기만 하고 실습은 생략했다.&lt;/p&gt;

&lt;p&gt;내가 진행한 실습 코드: &lt;a href="https://github.com/bakyeono/study-python-ds"&gt;https://github.com/bakyeono/study-python-ds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;데이터 분석을 파이썬으로만 하란 법은 없으니 책 내용을 응용해서 R, 클로저(Clojure), 자바스크립트 등 다른 언어로 해 보는 것도 재미있을 것 같다.&lt;/p&gt;

&lt;p&gt;미식가 친구 &lt;a href="http://kimdongwook.net"&gt;김동욱&lt;/a&gt; 씨가 “더본코리아 프랜차이즈 기업의 음식점들을 안내하는 지도가 필요하다”고 얘기하곤 했는데, 책에 나온 내용을 응용해 볼 겸 하여 지도에 매장을 표시해 봤다. 음식점 정보는 더본코리아 웹사이트에서 구할 수 있고, 파이썬 스크립트를 작성해 수집했다. 지도에 표시하는 것은 &lt;a href="http://leafletjs.com"&gt;리플릿(Leaflet)&lt;/a&gt; 라이브러리로 했다. 폴리엄도 이 라이브러리를 쓴다.&lt;/p&gt;

&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" /&gt;

&lt;script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"&gt;&lt;/script&gt;

&lt;div id="mapping1" style="height: 480px;"&gt;&lt;/div&gt;
&lt;script&gt;
      var i, len
      var thebornkorea_stores = [["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2923719, 127.04937769999992]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.0553985, 129.37705430000005]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.00082657398124, 127.11380090484613]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.2749049, 127.04444349999994]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.6631693, 127.50733500000001]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3628905, 126.71728710000002]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.942325, 128.56123860000002]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.323454, 127.12355300000002]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5191308, 126.85364349999998]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.6761688, 126.74826000000007]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.5419391, 129.42697729999998]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.8670824, 128.59860000000003]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4933785, 126.49156059999996]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5483312, 126.86734330000002]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [36.792923, 127.16062940000006]], ["\uc5ed\uc804\uc6b0\ub3d90410", [34.8861709, 128.6244501]], ["\ubcf8\uac00", [35.691335, 128.45342319999997]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3275024, 128.01146119999999]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.1248459, 128.3473583]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.5632078, 128.7001275]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.9927179, 127.10635130000003]], ["\ubc31's \ube44\uc5b4", [37.3456845, 127.93124799999998]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2808351, 127.4435856]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4120096, 127.12725610000007]], ["\uc131\uc131\uc2dd\ub2f9", [37.5422453, 127.07140670000001]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4988392, 126.93007030000001]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.56766200000001, 126.82947000000001]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5309639, 126.65155890000005]], ["\ubcf8\uac00", [35.2035201, 128.80579139999998]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6553244, 127.24681869999995]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3932795, 126.96315900000002]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5929425, 127.01851090000002]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.6450057, 126.62490189999994]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.8767334, 128.6291784]], ["\ud55c\uc2e0\ud3ec\ucc28", [34.79790609999999, 126.43158629999994]], ["\ubcf8\uac00", [37.4099707, 127.20214780000003]], ["\ubc31's \ube44\uc5b4", [37.3709525, 126.72810290000007]], ["\ubc31's \ube44\uc5b4", [37.43403199999999, 127.1363814]], ["\ud55c\uc2e0\ud3ec\ucc28", [33.4867374, 126.49128139999993]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.7456617, 127.10884090000002]], ["\ubc31\ucca0\ud3100410", [37.4949135, 127.0307206]], ["\ub3cc\ubc30\uae30\uc9d1", [37.2061916, 127.0748036]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.7971884, 127.06025410000007]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5477399, 126.83600879999995]], ["\uc6d0\ud0a4\uce5c", [37.4860508, 126.98260570000002]], ["\ubc31's \ube44\uc5b4", [37.4844484, 126.90059569999994]], ["\ubc31's \ube44\uc5b4", [36.13804820000001, 128.41860500000007]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.7161734, 127.42885999999999]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.6092795, 127.50327219999997]], ["\ubbf8\uc815\uad6d\uc2180410", [37.51990929999999, 126.93178319999993]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.1583011, 127.06067710000002]], ["\ubc31's \ube44\uc5b4", [36.634137, 127.46270789999994]], ["\ubc31's \ube44\uc5b4", [35.2341919, 129.0118235]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5694394, 127.07056319999992]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2749413, 127.04455439999992]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5764888, 126.8307466]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5251801, 126.87535930000001]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4981873, 127.05365529999995]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4584045, 126.68981429999997]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3377616, 126.81116900000006]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2679975, 127.21835399999998]], ["\ub3cc\ubc30\uae30\uc9d1", [35.322794, 129.17872169999998]], ["\ubcf8\uac00", [37.6931857, 126.77257179999992]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.2156082, 126.84627739999996]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3744239, 126.72947959999999]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5913614, 127.01767219999999]], ["\uc131\uc131\uc2dd\ub2f9", [37.5002493, 127.02751660000001]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5480716, 126.83537790000003]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1551384, 129.06126159999997]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.8673622, 128.59870290000003]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5820254, 127.08849809999992]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4076241, 126.67228009999997]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.8248389, 128.5256468]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.8787744, 127.72716889999992]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.2101695, 129.00779120000004]], ["\ub3cc\ubc30\uae30\uc9d1", [37.466121, 127.13978900000006]], ["\ub3cc\ubc30\uae30\uc9d1", [37.492494, 126.7252307]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.532556, 126.65290490000007]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1364058, 129.0995716]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4975512, 127.03296869999997]], ["\ub3cc\ubc30\uae30\uc9d1", [37.2686413, 127.00414619999992]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3217798, 127.09409779999999]], ["\ubcf8\uac00", [33.259574, 126.40603950000002]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4034281, 126.72342389999994]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.46152319999999, 126.68052510000007]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3995581, 126.97743330000003]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4862754, 126.98023269999999]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4929839, 127.01595520000001]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2059531, 127.07269739999992]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1706667, 129.17602910000005]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6389527, 127.02426349999996]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5368715, 126.96872080000003]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.46779799999999, 127.0413072]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3074958, 126.8166407]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.3614965, 127.34999859999994]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.877332388287805, 128.73220458626747]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.646663951203585, 127.12272377684712]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [36.3661878, 127.43706359999999]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4136212, 126.67628149999996]], ["\ubc31's \ube44\uc5b4", [37.4923531, 126.72579050000002]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4792536, 126.85373400000003]], ["\ud574\ubb3c\ub5a1\ucc1c0410", [37.510021, 127.08408310000004]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.491878, 126.72468140000001]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.483226062333216, 127.12187209416504]], ["\ubc31's \ube44\uc5b4", [37.4136579, 126.67811759999995]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5078301, 126.7356039]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.47702779999999, 126.9626283]], ["\ubc31's \ube44\uc5b4", [37.6123272, 127.03136770000003]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5538844, 126.85215840000001]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.6943206, 126.76809709999998]], ["\ubcf8\uac00", [34.8889288, 128.62700799999993]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.2621061, 128.87128039999993]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.0992806, 129.02708389999998]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5342794, 126.90040429999999]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2054958, 127.07263319999993]], ["\uc5ed\uc804\uc6b0\ub3d90410", [36.6375895, 127.46981359999995]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.2960066, 126.86280060000001]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.0915155, 129.04266370000005]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.6543814, 127.06366559999992]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2382511, 128.58316119999995]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.31128770000001, 126.83144049999999]], ["\ub3cc\ubc30\uae30\uc9d1", [37.7659082, 128.87788160000002]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1541921, 126.85443039999996]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3927168, 126.64570129999993]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.3358955, 129.02754449999998]], ["\ub3cc\ubc30\uae30\uc9d1", [37.64534883825562, 126.62610728567506]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.1994932, 126.83118869999998]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.9010133, 126.6462335]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4014752, 126.72205659999997]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4898456, 126.89104969999994]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.64413402017776, 126.62583906477357]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.72846403409005, 126.73542402684689]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.8117482, 128.75538219999999]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [34.8583666, 128.42630029999998]], ["\uc5ed\uc804\uc6b0\ub3d90410", [36.625757, 127.43354499999998]], ["\uc5ed\uc804\uc6b0\ub3d90410", [34.8070658, 126.37383869999996]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.531318, 126.8466889]], ["\ubcf8\uac00", [36.5184, 126.79999999999995]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.8335489, 127.13618919999999]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.838055056513426, 127.0566307939589]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [35.8657546, 128.58952120000004]], ["\ub3cc\ubc30\uae30\uc9d1", [35.0995844, 129.0266567]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.5568464, 128.7001616]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.69264725117326, 128.46067592855832]], ["\ubc31's \ube44\uc5b4", [35.9611247, 126.9571995]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.50531459999999, 126.67246649999993]], ["\ubc31\ucca0\ud3100410", [37.5999539, 127.14019970000004]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.9611247, 126.9571995]], ["\ubc31's \ube44\uc5b4", [37.5410882, 127.06931740000005]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.6911195, 128.47528799999998]], ["\ub3cc\ubc30\uae30\uc9d1", [37.752196, 126.76623240000004]], ["\ubc31\ucca0\ud3100410", [37.51302820000001, 126.94442100000003]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.3618157, 127.35051190000001]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.7775514, 127.00118070000008]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5143735, 127.10911020000003]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4630715, 126.6817661]], ["\ub3cc\ubc30\uae30\uc9d1", [36.6401989, 127.43054970000003]], ["\ubc31\ucca0\ud3100410", [37.6587754, 127.0684857]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1022259, 128.8118955]], ["\ubcf8\uac00", [35.9658994, 126.71678769999994]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.3381667, 129.02810239999997]], ["\ubc31's \ube44\uc5b4", [37.6015922, 126.65575020000006]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [34.9696155, 127.52342040000008]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.3263852, 127.42440569999997]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5727002, 127.01607209999997]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2646176, 127.03114789999995]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.4187357, 128.1546062]], ["\ub3cc\ubc30\uae30\uc9d1", [36.8327827, 127.13553639999998]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1916057, 126.82928679999998]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5985883, 126.66417150000007]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.6372695, 126.63132150000001]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.13773680000001, 128.41951330000006]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3207196, 127.11208720000002]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2521918, 127.07614510000008]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5411313, 126.83943610000006]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.6510283, 127.07722719999992]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4297367, 127.13048290000006]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5690353, 126.98704969999994]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.224793788732825, 128.58508286455685]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.0832651, 128.90394249999997]], ["\ud574\ubb3c\ub5a1\ucc1c0410", [37.50221990000001, 127.0272943]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4834102, 126.89970979999998]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.3070387, 126.98576379999997]], ["\ubc31's \ube44\uc5b4", [35.1639461, 128.9844671]], ["\ubc31\ucca0\ud3100410", [37.28395081740183, 127.4616150840302]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.973334, 129.3999506]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.4839339, 128.7519622]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1455348, 126.9168108]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.1994932, 126.8311887]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6152464, 126.7156325]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4000905, 126.9230311]], ["\ubc31's \ube44\uc5b4", [37.4834123, 126.9291608]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5023802, 126.7725447]], ["\ubc31's \ube44\uc5b4", [37.5253419, 126.8726779]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.6178665, 126.9194706]], ["\ub3cc\ubc30\uae30\uc9d1", [37.2136802, 127.0406912]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3595003, 126.9306542]], ["\ub9c8\uce74\uc624\ubc18\uc8100410", [35.5380178, 129.3483974]], ["\ubc31\ucca0\ud3100410", [37.3988884, 126.9233148]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3864229, 127.1259277]], ["\ud64d\ucf69\ubc18\uc8100410+", [34.9522217, 127.5176635]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.519376, 127.099376]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.9842153, 127.9400399]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1521117, 128.7029022]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5070996, 126.735882]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4426999532675, 126.79347038269043]], ["\ubc31's \ube44\uc5b4", [37.444494, 126.7016991]], ["\ubc31's \ube44\uc5b4", [37.5034537, 126.7622172]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5171257, 127.1020148]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2681687, 127.0027013]], ["\ubc31\ucca0\ud3100410", [35.1626379, 129.1593141]], ["\ubc31's \ube44\uc5b4", [37.4326822, 127.1305924]], ["\ud64d\ucf69\ubc18\uc8100410+", [34.8901336, 128.6235852]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1750317, 128.1485237]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.866731, 127.7535965]], ["\ubc31\ucca0\ud3100410", [37.5409158, 127.0698537]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3910464, 126.9538211]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.7404909, 127.0479989]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4140073, 126.6767243]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.77419562, 126.4495953]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4865038, 126.7815767]], ["\ubcf8\uac00", [37.5414539, 127.0648612]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.9972792, 127.1026]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.8335395, 127.1356423]], ["\ub3cc\ubc30\uae30\uc9d1", [37.067292, 127.0602499]], ["\uc5ed\uc804\uc6b0\ub3d90410", [36.9916914, 127.0863277]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.2683594, 127.0041634]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3989096, 126.922376]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.4798346, 126.8824997]], ["\ubc31\ucca0\ud3100410", [37.5921344, 127.0172261]], ["\ub3cc\ubc30\uae30\uc9d1", [36.3505664, 127.3886214]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1793115, 128.5589911]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5168004, 126.9067297]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.0990483, 129.0298142]], ["\ubcf8\uac00", [35.1168302, 128.9599638]], ["\ubcf8\uac00", [37.6509566, 126.6569857]], ["\ubcf8\uac00", [37.4952973, 126.7777721]], ["\ubcf8\uac00", [36.9873448, 127.9449925]], ["\ubcf8\uac00", [36.6240751, 127.4829192]], ["\ubcf8\uac00", [37.0591168, 127.0753566]], ["\ubcf8\uac00", [35.9520478, 128.5541697]], ["\ubcf8\uac00", [35.1995055, 126.8367922]], ["\ubcf8\uac00", [35.1266337, 129.1020668]], ["\ubcf8\uac00", [35.3169318, 129.1661425]], ["\ubcf8\uac00", [33.4850323, 126.5435562]], ["\ubcf8\uac00", [37.7578906, 126.7729094]], ["\ubcf8\uac00", [35.2409154, 128.9035965]], ["\ubcf8\uac00", [36.8312078, 127.1279306]], ["\ubcf8\uac00", [37.7415886, 127.0866357]], ["\ubcf8\uac00", [37.7233428, 126.7505133]], ["\ubcf8\uac00", [36.994601, 127.1388581]], ["\ubcf8\uac00", [37.3897865, 127.1098561]], ["\ubcf8\uac00", [36.7803697, 127.1271922]], ["\ubcf8\uac00", [35.1679675, 129.1687191]], ["\ubcf8\uac00", [36.1222729, 128.3494588]], ["\ubcf8\uac00", [37.5985883, 126.6641715]], ["\ubcf8\uac00", [36.1376277, 128.4205572]], ["\ubcf8\uac00", [37.6315601, 126.8310897]], ["\ubcf8\uac00", [36.0768678, 129.39664]], ["\ubcf8\uac00", [36.8982283, 126.6515053]], ["\ubcf8\uac00", [35.1547373, 129.020766]], ["\ubcf8\uac00", [37.5141796, 127.0185909]], ["\ubcf8\uac00", [37.5027322, 127.0372573]], ["\ubcf8\uac00", [35.1851707, 129.0940003]], ["\ubcf8\uac00", [37.4907123, 127.0867524]], ["\ubcf8\uac00", [33.4815133, 126.4905091]], ["\ubcf8\uac00", [37.5063572, 127.02409969999997]], ["\ubcf8\uac00", [37.4101131, 127.2593601]], ["\ubcf8\uac00", [37.6556645, 127.0645822]], ["\ubcf8\uac00", [37.4927153, 127.0585168]], ["\ubcf8\uac00", [37.6624033, 126.7669109]], ["\ubcf8\uac00", [37.517425, 126.8964798]], ["\ubcf8\uac00", [37.5153194, 127.1115967]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.6334485, 127.4598779]], ["\ubc31's \ube44\uc5b4", [37.44312, 126.79079790000003]], ["\ub3cc\ubc30\uae30\uc9d1", [37.6319254, 126.8311214]], ["\ubc31\ucca0\ud3100410", [36.3513049, 127.377003]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4979157, 127.053713]], ["\ub3cc\ubc30\uae30\uc9d1", [36.9921075, 127.1129451]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5106157, 127.0834978]], ["\ub3cc\ubc30\uae30\uc9d1", [37.6906188, 126.7621524]], ["\ub3cc\ubc30\uae30\uc9d1", [37.6566872, 126.7706105]], ["\ub3cc\ubc30\uae30\uc9d1", [37.2639529, 127.0351497]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3771852, 127.112148]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5031991, 127.022908]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1529151, 129.0583243]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3604357, 126.9318679]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3863669, 127.1248104]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4828856, 126.929304]], ["\ub3cc\ubc30\uae30\uc9d1", [37.2639529, 127.0351497]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3771852, 127.112148]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5031991, 127.022908]], ["\ub3cc\ubc30\uae30\uc9d1", [35.1529151, 129.0583243]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3604357, 126.9318679]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3863669, 127.1248104]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5309639, 126.6515589]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3913836, 126.9548553]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4450881, 126.7022211]], ["\ub3cc\ubc30\uae30\uc9d1", [37.3913836, 126.9548553]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5409175, 126.9492071]], ["\ub3cc\ubc30\uae30\uc9d1", [36.3505518, 127.3751685]], ["\ub3cc\ubc30\uae30\uc9d1", [37.6557243, 127.0635977]], ["\ub3cc\ubc30\uae30\uc9d1", [37.6557107, 127.1205764]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5996984, 127.1377814]], ["\ub3cc\ubc30\uae30\uc9d1", [37.48323, 126.9004813]], ["\ub3cc\ubc30\uae30\uc9d1", [37.4931863, 127.0163506]], ["\ub3cc\ubc30\uae30\uc9d1", [37.474826, 126.8694508]], ["\ub3cc\ubc30\uae30\uc9d1", [37.5354497, 126.7368371]], ["\ub3cc\ubc30\uae30\uc9d1", [37.6557243, 127.0635977]], ["\uc6d0\ud0a4\uce5c", [37.3799039, 127.132421]], ["\uc808\uad6c\ubbf8\uc9d1", [37.4770244, 126.8826848]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4951294, 127.1207629]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1547373, 129.020766]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.0808217, 128.9763421]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4924404, 126.7242726]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3835014, 127.12176210000007]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4108335, 127.1267763]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3683459, 127.1105569]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5034563, 127.0518801]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5109367, 127.0808617]], ["\ub300\ud55c\uad6d\ubc25", [37.4094099, 126.6783088]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.992297, 127.087035]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2159377, 127.0138617]], ["\ub300\ud55c\uad6d\ubc25", [36.1406257, 128.3091883]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2234693, 127.0616791]], ["\ubc31's \ube44\uc5b4", [37.268159, 127.0029416]], ["\ubc31's \ube44\uc5b4", [37.2130893, 127.0403844]], ["\ubc31's \ube44\uc5b4", [35.2054988, 129.0816184]], ["\ubc31's \ube44\uc5b4", [35.1538387, 129.0607343]], ["\ubc31's \ube44\uc5b4", [35.099054, 129.0307467]], ["\ubc31's \ube44\uc5b4", [37.558649, 126.9364345]], ["\ubc31's \ube44\uc5b4", [37.5172845, 126.9071525]], ["\ubc31's \ube44\uc5b4", [37.6194614, 126.9181893]], ["\ubc31\ucca0\ud3100410", [37.5528445, 126.9213279]], ["\ubc31's \ube44\uc5b4", [37.4628308, 126.6819128]], ["\ubc31's \ube44\uc5b4", [37.4748744, 126.629817]], ["\ubc31's \ube44\uc5b4", [35.8431006, 127.1278466]], ["\ubc31's \ube44\uc5b4", [35.8175513, 127.10876200000007]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5707627, 126.9873772]], ["\ubc31\ucca0\ud3100410", [35.1472365, 126.9151882]], ["\ubc31\ucca0\ud3100410", [37.2677878, 127.0019893]], ["\ubc31\ucca0\ud3100410", [37.4856189, 126.9807956]], ["\ubc31\ucca0\ud3100410", [35.2218578, 128.6847708]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5534566, 126.9231184]], ["\ubbf8\uc815\uad6d\uc2180410", [37.2527536, 127.0734351]], ["\ubbf8\uc815\uad6d\uc2180410", [37.2465778, 127.0568131]], ["\ubbf8\uc815\uad6d\uc2180410", [37.412155, 127.1298683]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2130893, 127.0403844]], ["\ubbf8\uc815\uad6d\uc2180410", [37.3799039, 127.132421]], ["\ubbf8\uc815\uad6d\uc2180410", [37.4012318, 127.108642]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5828631, 127.0014881]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5698037, 126.9845081]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5107691, 127.0816748]], ["\ubbf8\uc815\uad6d\uc2180410", [37.4934014, 127.0161069]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5009564, 127.0250917]], ["\ubbf8\uc815\uad6d\uc2180410", [37.5577105, 126.9364659]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5395537, 127.1272517]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.6336072, 127.46029720000001]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1448098, 126.9176906]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.9829061, 127.9402723]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.3503363, 127.3763568]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.0666469, 127.0609426]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.9917523, 127.0889681]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4450881, 126.7022211]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5599951, 127.0397615]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5449781, 126.6750258]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1626379, 129.1593141]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5104857, 127.0817281]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5692325, 126.9852551]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4631982, 126.6814146]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.2213623, 128.6847227]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.8326339, 127.1358946]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.41352, 126.6774671]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5207208, 126.9948731]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5186253, 126.909203]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.1590503, 127.0597041]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.1468973, 127.0754125]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.537879, 129.3352003]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.346842, 127.9321307]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.7374394, 127.0384317]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4856189, 126.9807956]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.44312, 126.7907979]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3457031, 126.7356168]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.6018392, 126.6550505]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4834622, 126.9294937]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5567009, 126.9365267]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.7700947, 127.0013076]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3183532, 126.8385212]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3990577, 126.9238003]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4747316, 126.6301222]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.662702, 126.7666057]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.237161, 128.5822833]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.3910464, 126.9538211]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.2053967, 129.0796249]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1634252, 128.9845717]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4927493, 126.725682]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1533219, 129.0582933]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.6210076, 126.7162383]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5141841, 127.1092098]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.6559745, 127.0649273]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2682005, 127.0038104]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5066789, 127.0245309]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.2652368, 127.0322628]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.8676836, 128.5984229]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5826952, 127.0025263]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5404707, 126.8372285]], ["\ud55c\uc2e0\ud3ec\ucc28", [34.8891503, 128.624267]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2138286, 126.9767039]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5336701, 126.7355649]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.6325293, 126.831871]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.4743485, 126.86927370000001]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.410375, 127.2588706]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1536003, 126.8533302]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1910714, 126.8297743]], ["\ud55c\uc2e0\ud3ec\ucc28", [35.1786851, 126.8945744]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5995281, 127.1386475]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.0945456, 128.4283421]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5378668, 127.0848594]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.5360803, 127.1368432]], ["\ud55c\uc2e0\ud3ec\ucc28", [36.1346986, 128.1193248]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5547481, 126.9236715]], ["\ud55c\uc2e0\ud3ec\ucc28", [37.552902, 126.8523126]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5600007, 127.0409001]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1628856, 129.1628201]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.561044422251264, 126.93285942077637]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1954404, 128.0827969]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2063477, 128.576138]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.221629, 128.6845777]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2236469, 128.6846402]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2355574, 127.2063495]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.8177597, 127.1561406]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.539058, 127.1265129]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.6309197, 127.4893668]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.8790201, 127.7270315]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3937118, 126.9629351]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.0768678, 129.39664]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.0291741, 129.3635322]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5338912, 127.0061366]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4630633, 126.6814351]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3230058, 127.12399]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5038148, 126.7616392]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4861005, 126.9810343]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5078246, 126.960673]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.9591346, 126.97655570000006]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4451525, 126.7015159]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.431977729190855, 126.72387543017976]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5082781, 126.7342753]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.392921, 126.646044]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5309639, 126.6515589]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.6557011, 126.7719572]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5617269, 127.0681643]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.8441601, 127.12490860000003]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.8197722, 127.14337160000002]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5695342, 126.988699]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5691376, 126.9858298]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5958202, 127.0621475]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.5401388, 129.3363184]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.5537119, 129.3198345]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.4980232, 129.426267]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3183017, 126.8395159]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3459014, 127.9292398]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3997714, 126.9219209]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3496474, 127.9507669]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4018045, 126.9554341]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.7418349, 127.04840390000004]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.525543, 127.0274856]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.31778658, 129.0018865]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5480588, 127.0723123]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5268991, 126.9166394]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4896239, 126.8176271]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.619209, 126.9197683]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4843796, 127.0116131]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.1527191, 127.07714039999996]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5637, 127.0322975]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4834339, 126.9277664]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.51827280000001, 127.02280989999997]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2785695, 127.0434914]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5793996, 126.9872263]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2951555, 126.8627547]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2680147, 127.0032491]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2507245, 127.0781594]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2647782, 127.0311486]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.2957492, 126.9941898]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.6360593, 127.0228193]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3209662, 127.0942249]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5580661, 126.9375418]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5443853, 126.96993040000007]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2215828, 126.8447106]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4990268, 126.9299874]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4691987, 126.9367807]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.50039758870085, 127.02898979187012]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4911643, 127.010897]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4572569, 127.1640592]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5920953, 127.0176263]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5042292, 126.7523467]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.515419, 127.1111991]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1728953, 129.1734726]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2445494, 129.2221542]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1078076, 128.9677283]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4851557, 126.7809462]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3507268, 127.1082992]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3774033, 127.1128218]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4714316, 126.9832228]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3596969, 126.9312711]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.15566, 129.061019]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2342044, 129.0109081]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1736775, 129.1292105]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1684247, 129.1168172]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1984277, 129.060399]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.3367764, 129.0281562]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1706794, 129.0698393]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1156261, 129.0395075]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4324467, 127.1304358]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.187895, 129.0815014]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5631978, 126.985192]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1684052, 129.1781146]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.482139, 126.9968963]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3907562, 126.9534327]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4911639, 126.9243844]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1367561, 129.1007986]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2038408, 129.0011218]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2330488, 129.0847985]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2101703, 129.0085556]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2038345, 129.1218034]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1562467, 129.057384]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2372177, 128.8672937]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5834599, 127.0003524]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4698257, 126.89753829999995]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.3534178, 127.3777204]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5815988, 127.0030708]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5353709, 126.8992817]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5682993, 127.00739569999996]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.2985735, 128.7440748]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.1042574, 129.0310089]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5306581, 126.8470237]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5131509, 126.9444408]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.3279693, 127.4286498]], ["\ud64d\ucf69\ubc18\uc8100410+", [36.3770612, 127.3328339]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.498884, 127.0626001]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5926514, 127.0526981]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5851374, 127.029698]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4786593, 126.9525782]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4790871, 126.85393999999997]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4756497, 126.8692869]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4927691, 127.0161311]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4829405, 126.901035]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5996936, 127.1402174]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5375201, 127.0851205]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.5410367, 127.0682748]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.3719472, 126.9427397]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4524516, 126.9070357]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.6193681, 126.7180063]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4966545, 127.0304097]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.6432397, 126.6702043]], ["\ud64d\ucf69\ubc18\uc8100410+", [34.8911104, 128.616421]], ["\ud64d\ucf69\ubc18\uc8100410+", [35.8927332, 128.6087687]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5309786, 126.6505033]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.7516118, 126.7682586]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.235746, 129.0126734]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.6327314, 126.8319052]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5897211, 127.0563847]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3113004, 126.8308131]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3174449, 126.8358546]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5270213, 127.0357939]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4855072, 126.8110185]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5175615, 126.9094289]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.279982, 127.1129967]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.5402032, 129.3377409]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.5542028, 129.319365]], ["\ud64d\ucf69\ubc18\uc8100410+", [37.4753403, 126.88593590000005]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5163816, 126.725951]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4451525, 126.7015159]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4937028, 126.7248686]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3799039, 127.132421]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3600685, 126.9310096]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.8184011, 128.5395945]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.1538387, 129.0607343]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4834621, 126.9742782]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5913614, 127.0176722]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5398315, 126.9433236]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.2726891, 127.0356703]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5229444, 126.8738458]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.6383595, 127.0247698]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.3908083, 127.1240709]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4826354, 126.9296355]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5011293, 126.9871614]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.48353, 126.9965566]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.2297531, 129.08895]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5101207, 126.7708801]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.504939, 126.7859443]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4854872, 126.78173]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5035622, 126.7614011]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.1500878, 126.9132835]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5359824, 126.9713509]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5119705, 126.9440367]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.8555354, 128.5095065]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5809501, 126.9996059]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.571546, 127.0112275]], ["\uc5ed\uc804\uc6b0\ub3d90410", [35.8687544, 128.598039]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4951564, 127.0302718]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5054942, 127.006719]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5405332, 127.0680762]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5358149, 126.7352662]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.5381182, 126.7380707]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.4518673, 126.6357303]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.427978, 126.9929248]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.4095964, 126.7283345]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.2635727, 127.0286009]], ["\uc5ed\uc804\uc6b0\ub3d90410", [37.4754134, 126.8696398]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.3454119, 127.1006434]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.2629988, 127.0313061]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.2629988, 127.0313061]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.3828027, 126.9616016]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.3314553, 127.119591]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.2096635, 127.0550717]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [34.8904997, 128.6198671]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [35.2236469, 128.6846402]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [36.3451008, 127.339087]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5516381, 127.1426937]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5041437, 126.9970518]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.4871249, 126.9844999]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5191905, 126.903395]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5722342, 127.0103411]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [36.50833402, 127.2623641]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.5035622, 126.7614011]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.8525564, 127.7440483]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.6310217, 126.8309464]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.0153299, 129.3545878]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.6705352, 126.7621233]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5600539, 127.0403678]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.4075471, 127.259827]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6137756, 126.8337015]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.6449061, 126.6695965]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5561608, 126.9258254]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2123783, 127.0393839]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.1307579, 126.9154256]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6324959, 126.8314236]], ["\uc6d0\uc870\uc308\ubc25\uc9d1", [37.3422186, 127.9201621]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.6327006, 127.4280308]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.6118397, 127.4716098]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.6084066, 127.50402]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5629342, 126.9918681]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.6326036, 127.4587902]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6904476, 126.7620622]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.368041, 127.1013246]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.39555514225201, 126.94907455297653]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4627953, 126.6813155]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.9925968, 127.0898163]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3201439, 127.1195436]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.1518424, 128.7022392]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6527305, 127.0491717]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.2236469, 128.6846402]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.2205029, 128.6841519]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.8183079, 127.1569483]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.392921, 126.646044]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4131583, 126.6775932]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5108929, 127.0839208]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5638763, 127.0671168]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5697121, 126.9888517]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2529118, 127.4904851]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4013192, 126.9756101]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.444494, 126.7016991]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4025097, 126.7229866]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4706342, 126.7007496]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.5380888, 129.3361896]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.4971763, 129.4270569]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3466843, 127.9321184]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.7354662, 127.0631911]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.7410943, 127.0480717]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4871098, 126.9803423]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5200985, 126.9287872]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5029067, 127.0371126]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4985522, 127.0346565]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5186937, 126.9073457]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5256665, 126.8747772]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5629522, 127.0342259]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2354865, 127.204645]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.5420338, 129.2599993]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.574772, 129.2405338]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5559193, 127.0110062]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4639964, 127.0347756]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [34.9543058, 127.5245153]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.44312, 126.7907979]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3434101, 126.7355469]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4785725, 126.9461416]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.515415, 127.0184921]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5179623, 127.0227427]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5558369, 126.9371354]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.307254, 126.8482669]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3996001, 126.9235]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5246971, 127.0291472]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3873713, 127.1219624]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3681268, 127.1063005]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5113524, 127.0565578]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.480378, 126.9534373]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.503291, 127.0514272]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4409415, 127.1449504]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [38.1936724, 128.5744452]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5607774, 126.809941]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3793971, 127.1160909]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2912228, 127.0130223]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2972913, 126.9702631]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.2519587, 127.074456]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5677909, 127.0078371]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.9034112, 127.0605075]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.522219, 129.1146944]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6688149, 126.7791456]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5399268, 126.9440103]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5617209, 126.9853909]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4314841, 127.1304028]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [34.797043, 126.4311319]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5671141, 126.9784467]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [34.8122927, 126.4622908]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3509458, 127.110457]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.498657, 126.7763524]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.503942, 126.7606687]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.8750425, 128.6286722]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.2985735, 128.7440748]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5921344, 127.0172261]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4773371, 126.9594764]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4863772, 127.0140938]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5127558, 126.9444871]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6555504, 127.0639444]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.9008568, 126.6452254]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.3262186, 127.4240393]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.3521621, 127.3737462]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.3395046, 127.3893239]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.3504069, 127.3894917]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.3554563, 127.3637122]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.3189584, 127.3933108]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4982025, 127.053862]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5957646, 127.0375638]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.6204637, 126.715935]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5195578, 127.0305772]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5532699, 126.8518747]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [34.8887296, 128.624196]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5414289, 127.0702513]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.1799356, 128.5599121]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.1363028, 129.099997]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.8543509, 129.2065951]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5345187, 126.736725]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [36.4704507, 127.1351177]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.1770726, 126.9134163]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.1342426, 126.8588136]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.2198354, 126.8437967]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [35.1449373, 126.9169328]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4844507, 126.8998765]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5381721, 127.0848398]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.3707128, 126.9425448]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4957086, 127.1204804]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4770244, 126.8826848]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.4942737, 127.0305394]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.5358142, 127.1368055]], ["\uc0c8\ub9c8\uc744\uc2dd\ub2f9", [37.766695, 128.8778511]]]

      var mapping1 = L.map('mapping1').setView([37.574515, 126.976930], 13)

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&amp;copy; &lt;a href="https://www.openstreetmap.org/copyright"&gt;OpenStreetMap&lt;/a&gt; contributors'
      }).addTo(mapping1)

      for (i = 0, len = thebornkorea_stores.length; i &lt; len; ++i) {
        L.marker(thebornkorea_stores[i][1]).addTo(mapping1).bindPopup(thebornkorea_stores[i][0])
      }
&lt;/script&gt;

&lt;p&gt;책을 눈으로만 보기보다는 이렇게 실습해보고, 응용도 해보는 편이 학습 효율이 좋다.&lt;/p&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="책소개" /><category term="파이썬" /><category term="데이터과학" /><summary type="html" /></entry><entry><title type="html">자바스크립트, 세미콜론을 써야 하나 말아야 하나</title><link href="https://bakyeono.net/post/2018-01-19-javascript-use-semicolon-or-not.html" rel="alternate" type="text/html" title="자바스크립트, 세미콜론을 써야 하나 말아야 하나" /><published>2018-01-19T02:29:00+09:00</published><updated>2018-01-19T02:29:00+09:00</updated><id>https://bakyeono.net/post/javascript-use-semicolon-or-not</id><content type="html" xml:base="https://bakyeono.net/post/2018-01-19-javascript-use-semicolon-or-not.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#요약" id="markdown-toc-요약"&gt;요약&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#문장-부호와-문장의-끝" id="markdown-toc-문장-부호와-문장의-끝"&gt;문장 부호와 문장의 끝&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#세미콜론의-필요성" id="markdown-toc-세미콜론의-필요성"&gt;세미콜론의 필요성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#세미콜론은-꼭-필요한가" id="markdown-toc-세미콜론은-꼭-필요한가"&gt;세미콜론은 꼭 필요한가?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#자바스크립트에서의-세미콜론" id="markdown-toc-자바스크립트에서의-세미콜론"&gt;자바스크립트에서의 세미콜론&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#asi로-인한-문제" id="markdown-toc-asi로-인한-문제"&gt;ASI로 인한 문제&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#세미콜론을-써야-한다는-주장" id="markdown-toc-세미콜론을-써야-한다는-주장"&gt;세미콜론을 써야 한다는 주장&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#세미콜론을-쓰지-않아도-된다쓰지-말아야-한다는-주장" id="markdown-toc-세미콜론을-쓰지-않아도-된다쓰지-말아야-한다는-주장"&gt;세미콜론을 쓰지 않아도 된다(쓰지 말아야 한다)는 주장&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#결론" id="markdown-toc-결론"&gt;결론&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#참고" id="markdown-toc-참고"&gt;참고&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#ps" id="markdown-toc-ps"&gt;P.S.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자바스크립트에서는 문장의 끝에 세미콜론을 써도 되고 안 써도 된다. 물론, 한 코드 안에서는 세미콜론을 쓰거나 안 쓰거나 한 방식으로 통일하는 것이 바람직하다. 그렇다면, &lt;strong&gt;어느 쪽으로 통일해야 할까?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="요약"&gt;요약&lt;/h2&gt;

&lt;p&gt;자바스크립트에서는 &lt;strong&gt;세미콜론을 굳이 넣지 않아도 된다&lt;/strong&gt;. 나는 앞으로는 세미콜론을 생략하는 스타일로 코드를 작성할 생각이다. 이것이 과감한 주장이나 허튼 소리처럼 느껴진다면, 계속 읽어봐 주시길.&lt;/p&gt;

&lt;h2 id="문장-부호와-문장의-끝"&gt;문장 부호와 문장의 끝&lt;/h2&gt;

&lt;h3 id="세미콜론의-필요성"&gt;세미콜론의 필요성&lt;/h3&gt;

&lt;p&gt;C 계열 언어에서는 문장의 끝을 나타내기 위해 세미콜론을 사용한다. 이 방식의 장점은 코드의 스타일을 프로그래머가 좀 더 자유롭게 구사할 수 있다는 것이다. 예를 들어, 다음과 같이 C 코드를 작성해도 문법적으로 문제가 없다.&lt;/p&gt;

&lt;p&gt;C 코드:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;int       i =
1; double j =
2.0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세미콜론은 국어 문법에서 마침표와 같은 기능을 한다. 한국어로 치면 다음과 비슷한 양식으로 글을 쓴 셈이다.&lt;/p&gt;

&lt;p&gt;한국어 글:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;밥을
먹었다. 똥을
쌌다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;개행이 제멋대로 된 탓에 둘 다 똥같은 코드와 글이지만, 우리는 이것들이 각각 세 개씩의 문장이 아니라 두 개씩의 문장으로 이루어졌다는 것을 알 수 있다. 세미콜론과 마침표라는 문장 부호 덕분에 말이다.&lt;/p&gt;

&lt;h3 id="세미콜론은-꼭-필요한가"&gt;세미콜론은 꼭 필요한가?&lt;/h3&gt;

&lt;p&gt;그런데 위의 예를 보면 알겠지만, 코드 작성 스타일이 자유로워진다는 장점은 곧, 나쁜 스타일이 허용된다는 단점도 동시에 의미한다. 그래서 C 계열 언어의 여러 스타일 가이드에서는 예외적인 경우를 제외하고는 한 행에 하나의 문장만을 작성하도록 하는 권고를 하고 있다. 그런 권고를 따른다면 위의 코드와 글은 다음과 같이 수정해야 한다.&lt;/p&gt;

&lt;p&gt;C 코드:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;int    i = 1;
double j = 2.0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한국어 글:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;밥을 먹었다.
똥을 쌌다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 행 하나에 문장 하나씩이 되도록 정리하면, 코드가 더 정돈되어 보이고 구조 파악이 쉽고 혼란도 덜하다. 그런데 정리하고 보니, 굳이 마침표나 세미콜론같은 문장 부호가 없더라도 어디서부터 어디까지가 한 문장인지를 알 수 있지 않은가? 행의 시작이 문장의 시작이고, 개행이 문장의 끝이니 말이다. 위 코드와 글에서 문장 부호를 빼 보자.&lt;/p&gt;

&lt;p&gt;C 코드:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;int    i = 1
double j = 2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한국어 글:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;밥을 먹었다
똥을 쌌다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정말로, 문장 부호가 없더라도 문제가 되지 않음을 알 수 있다. (물론, 세미콜론이 없어 C 컴파일러로 위의 코드를 컴파일 할 수는 없겠지만, 스타일에 관해서만 이야기하자.) 그런데 여기서 좀 더 생각을 발전시킬 수 있다. 굳이 별도의 문장 부호를 사용하기보다, 개행으로 문장의 끝을 나타내도록 약속한다면 어떨까? 어차피 스타일 권고안에 따라 모든 문장을 각각 한 행으로 기술한다면, 세미콜론은 과잉 정보 아닌가 말이다.&lt;/p&gt;

&lt;p&gt;이 점에 착안해 프로그래머가 특정한 스타일로 코드를 작성하도록 권하는 언어도 있다. 파이썬이 대표적이다. 파이썬은 기본적으로 문장을 한 행에 하나씩 작성하도록 한다.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; 즉, 파이썬에서는 개행이 곧 문장의 끝을 나타낸다.&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; 덕분에 파이썬 코드는 여러 사람이 작성하더라도 스타일이 대동소이하다.&lt;/p&gt;

&lt;p&gt;나는 문장 부호를 제공함으로써 스타일을 자유롭게 하는 것보다는, 파이썬처럼 개행으로 문장을 끝내도록 하여 스타일을 통일하는 편이 더 낫다고 생각한다.&lt;/p&gt;

&lt;h2 id="자바스크립트에서의-세미콜론"&gt;자바스크립트에서의 세미콜론&lt;/h2&gt;

&lt;p&gt;한편 자바스크립트에서도 문장의 끝에 세미콜론을 반드시 붙이지 않아도 된다. 하지만 파이썬의 방식과는 차이가 있다. 파이썬에서는 세미콜론을 붙이지 않는 것이 기본이지만, 자바스크립트에서는 세미콜론을 붙이는 것이 기본이다.&lt;/p&gt;

&lt;p&gt;자바스크립트에서는 엄연히 (개행이 아니라) 세미콜론으로 문장의 끝을 구별한다. 하지만 실제로는 세미콜론을 붙이지 않더라도 인터프리트 과정에서 구문 오류가 발생하지는 않는다. 그것은 인터프리터가 ‘문장의 끝이라고 생각되는 지점’에 세미콜론을 자동으로 붙여주기 때문이다. 이 기능을 세미콜론 자동 삽입(ASI, automatic semicolon insertion)이라고 한다. 이 기능을 만든 의도는 아마 초보 프로그래머들의 실수를 교정해주려는 배려였던 것 같다. 하지만 ASI는 규칙이 매우 복잡하고 동작을 예측하기 힘들어 말썽을 빚는다고 한다.&lt;/p&gt;

&lt;h3 id="asi로-인한-문제"&gt;ASI로 인한 문제&lt;/h3&gt;

&lt;p&gt;인터프리터가 ‘세미콜론을 빠트렸음직한 부분’이라고 판단하는 곳은 어디일까? 그냥 코드를 작성하고 싶을 뿐인데 이런 것을 고민해야 하는 것은 참 성가시다. 하지만 그것을 무시하고 코딩하자니 ASI의 동작을 예측하지 못해 곤란을 겪을 우려가 있다. 세미콜론 논쟁의 핵심은 이런 ASI로 인한 문제를 어떻게 피할 것인가에 있는 것 같다.&lt;/p&gt;

&lt;p&gt;세미콜론을 반드시 넣어야 한다는 사람들은 ASI의 동작을 예측하기 힘들기 때문에 모든 문장의 끝에 세미콜론을 넣으라고 한다. 반대로, 세미콜론을 넣지 않아도 된다(그리고 더 나아가 넣지 말라)고 주장하는 사람들은 ASI의 동작을 예측하기가 어렵지 않으며, 세미콜론을 명시적으로 붙이는 것과 ASI의 동작과는 관계가 없다고 한다. 각각의 주장을 따져보자.&lt;/p&gt;

&lt;h3 id="세미콜론을-써야-한다는-주장"&gt;세미콜론을 써야 한다는 주장&lt;/h3&gt;

&lt;p&gt;일단 자바스크립트의 기본 규칙은 문장의 끝에 세미콜론을 붙이는 것이다. 그래서인지, 과거에 나온 자바스크립트 교재를 보면 대부분 세미콜론을 넣는 것이 바람직하다고 설명하고 있다. 예를 들어, &lt;a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B5877628718"&gt;『읽기 좋은 자바스크립트 코딩 기법(Maintainable Javascript)』(니콜라스 자카스 지음, 김광호 옮김)&lt;/a&gt;에 다음과 같은 설명이 있다. 조금 길지만 해당 내용을 전체 인용해 본다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ASI는 코드에서 세미콜론이 필요한 자리를 찾고 없으면 세미콜론을 넣어주는데. 대부분 정확하게 찾아 문제가 없습니다. 그러나 ASI가 세미콜론을 찾는 규칙은 기억하기 어려울 정도로 복잡하므로 명시적으로 세미콜론을 넣기를 권장합니다. 디음과 같은 상황을 고려해 봅시다.&lt;/p&gt;

  &lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;// 원래 코드
function getData() {
    return
        {
            title: 'Maintainable Javascript',
            author: 'Nicholas C. Zakas'
        }
}

// 파서가 생각하는 코드
function getData() {
    return;
        {
            title: 'Maintainable Javascript',
            author: 'Nicholas C. Zakas'
        };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;이 예제에서 우리가 보기에 &lt;code class="highlighter-rouge"&gt;getData()&lt;/code&gt;는 데이터가 포함된 객체를 반환하는 힘수입니다. 하지만 ASI는 return 문 이후에 새로운 줄이 있으니 당연히 세미콜론을 삽입합니다. 따라서 &lt;code class="highlighter-rouge"&gt;getData&lt;/code&gt; 함수는 &lt;code class="highlighter-rouge"&gt;undefined&lt;/code&gt;를 반환합니다. 이 문장을 다음 예제처럼 return 문과 같은 줄에 중괄호를 표기하면 정상 값을 반환합니다.&lt;/p&gt;

  &lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;// 세미콜론은 빠졌지만 정상 동작합니다.
function getData() {
    return {
        title: 'Maintainable Javascript',
        author: 'Nicholas C. Zakas'
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;일반적으로 ASI가 수행되는 시나리오는 정해져 있습니다. 보통 두 가지 상황에서 ASI 에러가 발생하는데 ASI 동작 방식에 대한 이해 없이 코드를 작성하거나 ‘세미콜론이 없어도 ASI에서 알아서 넣어주겠지.’라는 안일한 생각으로 코드를 작성할 때입니다. 특히 경험이 부족한 개발자가 세미콜론을 빠뜨리는 실수를 자주 합니다.&lt;/p&gt;

  &lt;p&gt;더글라스 크락포드의 자바스크립트를 위한 코드 컨벤션, jQuery 코어 스타일 가이드, 구글 자바스크립트 스타일 가이드, Dojo 스타일 가이드에서도 모두 세미콜론 사용을 권장합니다. 또 JSLint와 JSHint 모두 기본적으로 세미콜론이 없으면 경고 메시지를 출력합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자카스가 지적하는 것처럼, ASI의 동작을 잘 모른 채로 특정한 스타일로 코드를 작성할 경우 ASI로 인한 오류를 겪을 수 있다. 그런데 곰곰이 따져 보면, 문제를 일으키는 스타일은 ‘세미콜론을 넣느냐 안 넣느냐’가 아니라, ‘어디에서 개행하느냐’라는 것을 알 수 있다. 자카스가 ASI 문제를 우회한 코드에서도 세미콜론은 붙이지 않았다. (“세미콜론은 빠졌지만 정상 동작합니다.”라는 주석은 원문에서 그대로 인용한 것.) 즉, 세미콜론을 모든 문장의 끝에 붙인다 하더라도 자카스가 소개한 ASI 문제는 그대로 겪을 수 있다는 말이다.&lt;/p&gt;

&lt;p&gt;결국 세미콜론을 넣느냐 마느냐는 기호의 문제이지, ASI 문제를 피하는 것과는 관계 없는 것 아닌가?&lt;/p&gt;

&lt;h3 id="세미콜론을-쓰지-않아도-된다쓰지-말아야-한다는-주장"&gt;세미콜론을 쓰지 않아도 된다(쓰지 말아야 한다)는 주장&lt;/h3&gt;

&lt;p&gt;내가 세미콜론에 대해 다시 생각하게 된 것은 유명 자바스크립트 라이브러리에서 세미콜론을 사용하지 않는 코드를 종종 봤기 때문이다. 그 전까지는 세미콜론을 전혀 넣지 않는 자바스크립트 코드는 생각해 본 적도 없었기에 이상하게 생각되었다. 고집스럽게 세미콜론을 계속 넣기보다는 고수들이 왜 세미콜론을 안 넣는지 찾아 봐야 했다.&lt;/p&gt;

&lt;p&gt;몇몇 블로그 글들을 읽어봤는데, &lt;a href="https://standardjs.com"&gt;JavaScript Standard Style&lt;/a&gt;(코드 형식 통일 프로그램)을 만든 Feross Aboukhadijeh의 글 &lt;a href="https://feross.org/never-use-semicolons"&gt;「Never Use Semicolons」&lt;/a&gt;이 가장 근거가 분명하고 이해하기 쉬웠다. 장황한 내 글보다 훨씬 간결하니 직접 읽어보셔도 좋다. 그의 논점을 간단히 요약하자면, ASI와 명시적 세미콜론 삽입 스타일은 연관이 없으며, 세미콜론을 붙이는 것보다는 ASI의 동작을 이해하는 것이 중요하다는 것이다.&lt;/p&gt;

&lt;p&gt;자카스도 지적했듯이, ASI는 대개는 적절한 위치를 추론하기 때문에 문제를 자주 일으키지는 않는다. 게다가 자카스가 든 예도 세미콜론을 명시적으로 붙여야 할 근거가 되기 보다는, ASI 문제가 특정한 코딩 스타일에서 발생한다는 것을 보여줄 뿐이다. ASI는 우리가 세미콜론을 명시적으로 넣든 안 넣든, 동작할 곳에서 동작한다. ASI 문제를 피하려면 ASI의 동작 원리를 이해하고 그에 맞게 코딩 스타일을 정립하는 것이 핵심이지, 세미콜론을 넣는 것을 강제할 필요는 없다.&lt;/p&gt;

&lt;p&gt;그런데 Aboukhadijeh는 세미콜론을 넣지 않아도 된다는 데서 더 나아가, 세미콜론을 쓰지 말아야 한다고 주장하는 데까지 나아간다. 그 근거는 “모든 문장에 세미콜론을 넣어라”라는 규칙이 생각보다 따르기가 쉽지 않다는 것이다. 예를 들어, 다음과 같이 세미콜론을 붙이면 안 되는 위치들이 있다. (&lt;a href="https://feross.org/never-use-semicolons"&gt;「Never Use Semicolons」&lt;/a&gt;에서 인용한 코드)&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;function foo () {
  return 42; // ok
};           // &amp;lt;– AVOID!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수 정의는 그나마 간단하지만 클래스 정의 구문에서는 더 성가시다. (역시 &lt;a href="https://feross.org/never-use-semicolons"&gt;「Never Use Semicolons」&lt;/a&gt;에서 인용한 코드)&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class Foo {
  constructor () {
    if (baz) {
      return 42; // ok
    };           // &amp;lt;– AVOID!
    return 12;   // ok
  };             // &amp;lt;– AVOID!
};               // &amp;lt;– AVOID!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론, 충분한 주의를 기울이고 편집기와 Lint 도구 등의 도움을 받으면 세미콜론을 찍을 위치와 안 찍을 위치를 가려내는 것이 크게 어렵지는 않다. 하지만 굳이 세미콜론을 고집해야 할까? 세미콜론을 아예 생략하기로 한다면 이런 성가신 문제를 전혀 신경쓰지 않아도 된다. 바로 이 순간, ASI가 일을 방해하는 기능에서 정말로 편의를 제공하는 기능으로 탈바꿈한다!&lt;/p&gt;

&lt;p&gt;게다가 Aboukhadijeh에 따르면, ASI가 일을 방해하지 않도록 하려면 딱 한 가지 규칙만 기억하면 된다고 한다. 그것은 바로 행의 시작을 &lt;code class="highlighter-rouge"&gt;[&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;(&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;으로 하지 않는 것이다. 꼭 그렇게 해야 한다면, 다음과 같이 세미콜론으로 행을 시작하면 된다고 한다.  (역시 &lt;a href="https://feross.org/never-use-semicolons"&gt;「Never Use Semicolons」&lt;/a&gt;에서 인용한 코드)&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;;[1, 2, 3].forEach(bar)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 이런 코드를 작성해야 할 경우는 거의 없을 것이니 안심해도 된다. 자바스크립트에서 식(expression)만을 덩그러니 써 놓는 코드를 쓸 일이 거의 없을 테니까 말이다. 즉, 대개는 &lt;code class="highlighter-rouge"&gt;let foo = [1, 2, 3].forEach(bar)&lt;/code&gt;, 또는 &lt;code class="highlighter-rouge"&gt;return [1, 2, 3].forEach(bar)&lt;/code&gt;와 같이 문을 나타내는 키워드를 먼저 쓰기 마련이다.&lt;/p&gt;

&lt;h2 id="결론"&gt;결론&lt;/h2&gt;

&lt;p&gt;자바스크립트에서는 세미콜론을 굳이 넣지 않아도 된다. 그 전까지는 세미콜론을 반드시 넣자는 것이 압도적 다수파였던 것 같지만, 현재는 세미콜론을 넣지 말자는 주장도 힘이 커지고 있다. 여전히 논쟁거리인 것 같긴 하다. 내가 보기에는 세미콜론을 넣지 않아도 된다는 주장이 좀 더 설득력 있게 느껴진다. 나는 앞으로는 세미콜론을 생략하는 스타일로 코드를 작성할 생각이다.&lt;/p&gt;

&lt;h2 id="참고"&gt;참고&lt;/h2&gt;

&lt;p&gt;니콜라스 자카스의 책 &lt;a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B5877628718"&gt;『읽기 좋은 자바스크립트 코딩 기법(Maintainable Javascript)』&lt;/a&gt;의 일부 내용을 비판하기는 했지만, 전체적으로 매우 훌륭한 책이다. 번역도 꼼꼼하게 잘 되어 있다. 나도 이 책에서 많은 도움을 받았고, 이 책에서 제시하는 코딩 스타일을 대부분 따르고 있다. 자바스크립트 코딩 스타일에 관심이 있다면 읽어봐도 좋다.&lt;/p&gt;

&lt;p&gt;세미콜론을 꼭 써야 한다고 생각하는 근거가 있거나, 내가 쓴 글에서 잘못된 내용이 있다면 알려주시기 바란다.&lt;/p&gt;

&lt;h2 id="ps"&gt;P.S.&lt;/h2&gt;

&lt;p&gt;그런데 간단히 정리하고 싶지만 또 그러기가 어려운 것이…&lt;/p&gt;

&lt;p&gt;TC39(ECMA 인터내셔널의 ECMA 스크립트 담당 기술 위원회)에서는 향후에 언어가 확장되면서 발생할 수 있는 문제를 방지하기 위해서, 세미콜론을 넣는 스타일을 권장하는 듯하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;관련 트위터 반응: &lt;a href="https://twitter.com/BrendanEich/status/951554266535141377"&gt;https://twitter.com/BrendanEich/status/951554266535141377&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나는 일단은 세미콜론 생략을 해 보려 하지만 나중에 가면 또 분위기가 변할 수도 있을 것 같다.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;원한다면 파이썬에서도 세미콜론으로 문장의 끝을 표시하여 한 행에 여러 문장을 서술할 수도 있지만, 가능하다는 것이지 권장사항은 아니다. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;값·식·문이 한 행에서 끝나지 않는 경우는 예외. 이와 관련된 구문 규칙은 합리적이고 파서가 잘 해석한다. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="자바스크립트" /><summary type="html" /></entry><entry><title type="html">[번역] 2차원 회문(사토르 마방진) 탐색</title><link href="https://bakyeono.net/post/2018-01-11-finding-magic-word-squares.html" rel="alternate" type="text/html" title="[번역] 2차원 회문(사토르 마방진) 탐색" /><published>2018-01-11T19:20:00+09:00</published><updated>2018-01-11T19:20:00+09:00</updated><id>https://bakyeono.net/post/finding-magic-word-squares</id><content type="html" xml:base="https://bakyeono.net/post/2018-01-11-finding-magic-word-squares.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#2차원-회문-탐색" id="markdown-toc-2차원-회문-탐색"&gt;2차원 회문 탐색&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#사토르-마방진" id="markdown-toc-사토르-마방진"&gt;사토르 마방진&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#파이썬으로-찾아-보자" id="markdown-toc-파이썬으로-찾아-보자"&gt;파이썬으로 찾아 보자&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#한국어-2차원-회문" id="markdown-toc-한국어-2차원-회문"&gt;한국어 2차원 회문&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="2차원-회문-탐색"&gt;2차원 회문 탐색&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글은 블라드스톤 필루(Wladston Filho)의 글 &lt;a href="https://code.energy/finding-magic-word-squares/"&gt;「Finding Magic Word Squares」&lt;/a&gt;를 허락을 구하여 번역한 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‘회문’에 관해서는 들어본 적이 있을 것이다. 회문은 그 속의 글자들을(대소문자 구별이나 문장 부호는 빼고) 앞에서부터 읽든, 뒤에서부터 읽든, 똑같은 문장으로 읽을 수 있다. 다음 회문들을 한번 앞뒤로 읽어 보시라.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Live not on evil.
Race fast, safe car!
Never odd or even.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="사토르-마방진"&gt;사토르 마방진&lt;/h3&gt;

&lt;p&gt;하지만 흔해 빠진 그냥 회문을 소개하려고 이 글을 쓰는 것은 아니다. 오늘 소개하려는 것은 두둥~ ‘2차원 회문’이라는 물건이다. 아래 그림은 ‘사토르 마방진’이라는 것으로, 고대 로마 시대에 만들어진 유명한 2차원 회문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/sator-rectangle.jpg" alt="고대 로마의 사토르 마방진" /&gt;&lt;/p&gt;

&lt;p&gt;그림: 고대 로마의 사토르 마방진&lt;/p&gt;

&lt;p&gt;이 사토르 마방진은 라틴어 표현 &lt;code class="highlighter-rouge"&gt;sator arepo tenet opera rotas&lt;/code&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;을 써 둔 것이다. 이 마방진의 대단한 점은 위에서 아래, 아래에서 위, 좌에서 우, 우에서 좌 어떤 방향으로든 읽을 수가 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/sator-square-read.png" alt="사토르 마방진 읽기" /&gt;&lt;/p&gt;

&lt;p&gt;그림: 사토르 마방진 읽기&lt;/p&gt;

&lt;p&gt;그야말로 궁극의 회문이다. 고대 로마인들은 이 마방진에 매료되어 이것을 집집마다, 신전마다, 온갖 비석에, 그리고 심지어 물그릇에까지 새겨두곤 했다. 완벽한 대칭 속에 잡귀를 쫓고 행운을 불러오는 힘이 있다고 믿었던 것이다.&lt;/p&gt;

&lt;p&gt;로마인들이 이런 2차원 라틴어 회문을 찾은 것은 굉장한 우연이었거나, 아니면 엄청난 수고를 들여 이뤄낸 일이었을 것이다. 2차원 회문의 존재를 알게 된 후, 나는 혹시 영어 단어 중에는 5x5 크기의 2차원 회문이 없을지 계속 고민해왔다.&lt;/p&gt;

&lt;h3 id="파이썬으로-찾아-보자"&gt;파이썬으로 찾아 보자&lt;/h3&gt;

&lt;p&gt;컴퓨터를 이용하면 쉽게 찾을 수 있지 않을까? 그래서 간단한 파이썬 프로그램을 짜 봤다. 처리과정을 소개해본다.&lt;/p&gt;

&lt;p&gt;먼저, 다섯 글자로 된 모든 영어 단어가 필요하다. 인터넷에 공개된 단어 목록을 활용하면 된다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;import urllib.request
src = "http://raw.githubusercontent.com"
src += "/codenrg/sator-square/master/words-en.txt"
fp = urllib.request.urlopen(src)
words = [str(line, 'utf-8').rstrip() for line in fp]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것을 실행하면 &lt;code class="highlighter-rouge"&gt;words&lt;/code&gt;에 모든 영어 단어의 리스트가 저장된다. 2차원 회문을 만들려면 다섯 글자로 된 단어만 필요하므로 그것들만 선별하자.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;words = filter(lambda x: len(x) == 5, words)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단어를 2차원 회문에서 쓸 수 있으려면 그것을 뒤집은 단어도 2차원 회문 속에 있어야 한다. 예를 들어, ‘stop’이라는 단어는 후보가 될 수 있다. 그것을 뒤집은 ‘pots’도 올바른 영어 단어이니까. 하지만 ‘coder’는 그렇지가 못하다. ‘redoc’은 올바른 영어 단어가 아니기 때문이다.&lt;/p&gt;

&lt;p&gt;뒤집었을 때 탈락하는 단어들을 걸러내자. 먼저 단어들을 모두 집합에 넣고, 각 단어마다 그것을 뒤집은 단어가 집합에 들어있는지 검사한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;words = set(words)
rev = lambda w: "".join(reversed(list(w)))
words = [w for w in words if rev(w) in words]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 후보가 될 수 있는 단어들은 다 추렸다. 이것들을 조합해 2차원 회문을 찾아보는 일만 남았다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;squares = []
for w1 in words:
    w2_match = lambda x: x[0] == w1[1] and x[-1] == w1[-2]
    for w2 in filter(w2_match, words):
        w3_match = lambda x: x[0] == w1[2] and x[1] == w2[2]
        for w3 in filter(w3_match, words):
            if w3 == rev(w3):
                square = [w1, w2, w3, rev(w2), rev(w1)]
                squares.append(square)

for x in squares:
    print("%s\n%s\n%s\n%s\n%s\n\n" % tuple(x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 뽑아낸 단어들을 이용해 2차원 회문을 세 개 발견할 수 있었다. 그 중 가장 그럴듯한 것을 소개한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;P A R T S
A P A R T
R A D A R
T R A P A
S T R A P
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다른 언어에서도 2차원 회문을 찾을 수 있는지 확인해봐주면 좋곘다. 코드에서 개선할 점도 환영한다. 깃허브(&lt;a href="https://github.com/codenrg/sator-square"&gt;https://github.com/codenrg/sator-square&lt;/a&gt;)에서 풀 요청을 보내주면 된다.&lt;/p&gt;

&lt;h2 id="한국어-2차원-회문"&gt;한국어 2차원 회문&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서부터는 내가 추가한 내용이다. -박연오&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;필로의 프로그램을 이용해 한국어로 2차원 회문을 만들 수 있는지 찾아 보자.&lt;/p&gt;

&lt;p&gt;먼저, 한국어 단어 목록이 필요하다. 나는 &lt;a href="http://konlpy-ko.readthedocs.io"&gt;KoNLPy (파이썬 한국어 NLP)&lt;/a&gt;에 포함된 ‘Hannanum 시스템 사전’을 사용했다. 이것은 다음과 같이 하여 다운로드할 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;import urllib.request
fp = urllib.request.urlopen('https://raw.githubusercontent.com/konlpy/konlpy/master/konlpy/java/data/kE/dic_system.txt')
words = [str(line, 'utf-8').rstrip() for line in fp]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다운로드한 사전을 확인해 보면 한글로 시작하지 않는 단어들이 있다. 이것들을 걸러내자.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;def is_hangul(ch):
    return '가' &amp;lt;= ch &amp;lt;= '힣'

def starts_with_hangul(word):
    return is_hangul(word[0])

words = [word for word in words if starts_with_hangul(word)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또, 사전에는 &lt;code class="highlighter-rouge"&gt;가치체계	ncn&lt;/code&gt;처럼 품사가 태그되어 있다. 품사를 제거하여 &lt;code class="highlighter-rouge"&gt;가치체계&lt;/code&gt;와 같이 단어만 남기자.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;def remove_tag(word):
    return word.split()[0]

words = [remove_tag(word) for word in words]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 한국어 단어 목록이 준비됐다. 나머지는 필로가 작성한 코드에 단어 목록을 적용해 2차원 회문을 찾아보는 것뿐이다.&lt;/p&gt;

&lt;p&gt;이렇게 해서 만든 한국어 2차원 회문 탐색 프로그램은 깃허브에 올려두었다. &lt;a href="https://github.com/bakyeono/sator-square/blob/master/find-sator-squares-in-korean.py"&gt;https://github.com/bakyeono/sator-square/blob/master/find-sator-squares-in-korean.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;하지만 아쉽게도 별 재미는 보지 못했다. 적어도 내가 사용한 사전에서는 다섯 글자로 된 2차원 회문은발견할 수 없었기 때문이다. 글자 제한을 조금 줄이면 더 나오지 않을까? 그래서 네 글자로 찾아 보니 “하하하하” 처럼 모두 같은 글자로 이루어진 단어들밖에 안 나왔다. 세 글자로 된 2차원 회문을 찾아보니 개수가 너무 많이 나오는데, 대부분 사람 이름이 섞여 있어 마음에 들지 않는다. 아래는 그 가운데 그나마 쓸만한 것을 몇 개 추린 것이다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;대구대
구로구
대구대

경성대
성장성
대성경

주사파
사회사
파사주

대전대
전격전
대전대

식용유
용불용
유용식
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;알파벳보다 글자수가 훨-씬- 많은 한글의 특성상 2차원 회문이 되기가 좀 더 어려운 것이 아닌가 싶다. 사전을 다른 것(인명이 포함되지 않고, 한국어 단어의 활용을 어느 정도 반영한 것)으로 하면 더 찾을 수 있을지도 모른다.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;적당히 번역하면 “농부 아레포가 쟁기(바퀴)로 작업한다”라는 뜻이라고 한다. (&lt;a href="https://en.wikipedia.org/wiki/Sator_Square"&gt;https://en.wikipedia.org/wiki/Sator_Square&lt;/a&gt;) &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Wladston Filho(hi@code.energy), 박연오(bakyeono@gmail.com)</name></author><category term="파이썬" /><category term="알고리즘" /><summary type="html" /></entry><entry><title type="html">[책소개] 『인크립션: 실용주의 암호화』</title><link href="https://bakyeono.net/post/2017-08-31-book-review-practical-encryption.html" rel="alternate" type="text/html" title="[책소개] 『인크립션: 실용주의 암호화』" /><published>2017-08-31T22:00:00+09:00</published><updated>2017-08-31T22:00:00+09:00</updated><id>https://bakyeono.net/post/book-review-practical-encryption</id><content type="html" xml:base="https://bakyeono.net/post/2017-08-31-book-review-practical-encryption.html">&lt;p&gt;혼자 일하거나 작은 회사에서 여러 역할을 맡는 프로그래머에게는 얕게라도 알아두어야 할 지식이 많다. 보안과 암호화도 그런 주제다. 웹 서비스나 모바일 앱을 개발한다면 사용자 개인정보를 안전하게 저장하기 위해 암호화를 고려해야 한다. 보안 HTTP 프로토콜을 이용하려면 SSL과 인증서에 대해 이해해야 한다. 하다못해 원격 작업의 필수 도구인 SSH만 해도 암호화된 프로토콜을 사용한다. (.ssh 설정법을 모르거나 키 파일에 퍼미션 설정 제대로 못 해서 SSH 접속할 때마다 직접 패스워드 입력하는 사람들 있을거다) 암호화는 대칭 키, 비대칭 키, 단방향 등 방식도 여러가지고 그런 방식을 지원하는 알고리즘도 여러가지다. 심지어 하나의 블록 알고리즘만 해도 운영 모드가 여러가지다. 암호화 한다고 데이터가 안전한 것인지 확신도 안 든다. 딱 필요한 만큼 얕게만 알고 싶은데 조금만 발을 담궈도 풍덩 빠져버릴 것 같다. 그때그때 필요한대로 공부하면서 여러 가지 암호화 알고리즘을 실무에 사용하고 있지만, 항상 내가 하는 방식이 과연 올바르고 안전한가 하는 불안이 있었고 찾아봐도 답이 쉽게 나오지 않는 찝찝한 의문(아래에 적은 것들)도 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java API 같은 미산 프로그램의 암호화 알고리즘에 미국 정부의 백도어 같은 건 들어있지 않는가?&lt;/li&gt;
  &lt;li&gt;국정원이 달려들어도 뚫지 못할 정도로 안전하려면 어떤 구성이 필요한가? 예를 들면, 어떤 알고리즘을 사용해야 하고 키 길이는 얼마나 돼야 하는가?&lt;/li&gt;
  &lt;li&gt;DB에 암호화를 하면 인덱스를 사용할 수 없을 텐데, 도대체 어떻게 개인정보를 암호화해야 하는가? 그걸 해준다는 값비싼 DB 암호화 서비스는 믿을만한가?&lt;/li&gt;
  &lt;li&gt;클라이언트(인터넷 사업자)가 암호화를 보안 사고 났을 때 면책하기 위한 형식적 조처쯤으로 여기는데, 뭐라고 말해주어야 할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;『인크립션: 실용주의 암호화』는 보안과 암호화에 관해 프로그래머(또는 기획자)가 알아야 할 최소한을 친절하게 설명해준다. 특히 여기저기 귀동냥으로 줏어듣는 것과 상상력으로 보안에 대한 학습을 대체했을 때 오해하기 쉬운 점들을 교정하려고 많은 노력을 기울인 것 같다. 이 책이 내가 궁금했던 의문을 다 풀어주지는 못하지만, (보안 교과서에 빠지지 않는 기초 보안 지식과 함께) 암호화의 기본 원리를 잘 설명해주어 적어도 어디서부터 출발해야할지를 깨닫게 해준다. 특히, DB 암호화와 인덱스 문제에 관해서는 한 챕터를 할당해 친절히 설명하고 있다. 이 책은 딱 실무 담당자에게 필요한 수준만큼만을 알려준다는 점이 장점이다. 암호의 핵심 원리와 다양한 구현물과 운용법을 소개하지만, 어려운 수학 알고리즘은 등장하지 않는다. 그래도 암호화 작업을 해 본 경험이나 배경 지식이 전혀 없다면 조금 어려울 듯하다. 책의 분량은 많지 않아서 전철 네 번 타는 동안 다 읽을 수 있을 정도였다.&lt;/p&gt;

&lt;p&gt;책 내용 중 나에게 도움이 된 부분을 몇 가지 추려 본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“Chapter 1. 암호화를 정확히 알고 있나요?”&lt;/strong&gt;, &lt;strong&gt;“Chapter 5. 암호 시스템, 원리를 알아야 전체가 보인다”&lt;/strong&gt;: 현대의 복잡한 암호화 알고리즘도 결국은 치환(substitution, 문자 바꾸기. 혼돈을 일으킨다.)과 대치(permutation, 순서 바꾸기. 확산을 일으킨다.), 이 전통적인 두 가지 방식을 조합한 것이라고 한다. 보안 교과서들이 항상 조악한 카이사르 암호를 설명하는 이유가 이거였구나.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Chapter 6. 적합한 운영 모드 고르기”&lt;/strong&gt;: AES 알고리즘을 사용할 때 오라클 자바 API에서는 운영 모드가 디폴트로 설정되었던 것 같은데, 나중에 C와 파이썬에서 사용했던 라이브러리에서는 운영 모드를 직접 지정해야 했다. 당시엔 정확한 개념을 모른 채 단순히 ECB보다 CBC가 안전하다는 얘기를 듣고 초기화 벡터를 지정해 CBC 방식으로 암호화했다. 그 경험때문에 이 챕터가 좀 더 눈에 들어왔다. 이 책은 ECB, CBC 뿐 아니라 다양한 운영 모드의 원리와 안전성을 그림과 함께 친절히 설명해주어 쉽게 이해할 수 있었다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Chapter 7. 국가에서 정할 만큼 중요한 키 길이”&lt;/strong&gt;: 마음같아선 키 길이를 무한정 길게 하고 싶지만 현실적으로 그러기가 어렵다. 이 챕터에서 키 길이가 얼마나 돼야 하는지를 유효기간과 함께 알려준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Chapter 8. 자칫하면 위험한 말, 느려지지 않게 OPE로 해 주세요, Chapter 9: 데이터베이스 암호화, 이 정도는 알아 둡시다”&lt;/strong&gt;: 데이터베이스에서 암호화를 할 때의 곤란함과 순서 유지 암호화(OPE)의 함정에 관해 설명한다. 단순히 어떤 제품군이 안전하다고 광고하니까 그냥 그걸 쓰면 안전하겠거니 하는 생각이 얼마나 위험한지 알 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Chapter 14. 정보보호 관련 법규와 암호화”&lt;/strong&gt;: 개인정보보호법이 비밀번호를 비대칭 암호화하여 저장하도록 정했다고 한다. (나는 비밀번호 해시 저장은 기술적으로 도의적으로 당연히 해야 하는 관례 정도로 받아들이고 있었다.) 그 외에도 관련 법령이 각종 개인정보의 암호화를 강제하고 있다. 그런데 데이터를 어떻게 안전하게 보호하도록 할 것인가에 대한 종합적인 규정이 없다. 아무래도 사업자들은 암호화를 면책을 위한 형식적 조처쯤으로 받아들이기 쉽지 않은가 하는 생각이 든다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="책소개" /><category term="암호화" /><summary type="html" /></entry><entry><title type="html">남는 LCD 패널로 서브 모니터를 만들어 보았다</title><link href="https://bakyeono.net/post/2017-07-29-i-made-a-monitor-with-salvaged-lce-panel.html" rel="alternate" type="text/html" title="남는 LCD 패널로 서브 모니터를 만들어 보았다" /><published>2017-07-29T20:00:00+09:00</published><updated>2017-07-29T20:00:00+09:00</updated><id>https://bakyeono.net/post/i-made-a-monitor-with-salvaged-lce-panel</id><content type="html" xml:base="https://bakyeono.net/post/2017-07-29-i-made-a-monitor-with-salvaged-lce-panel.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#재료" id="markdown-toc-재료"&gt;재료&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#작업과정" id="markdown-toc-작업과정"&gt;작업과정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#결과물" id="markdown-toc-결과물"&gt;결과물&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#평가" id="markdown-toc-평가"&gt;평가&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#장점" id="markdown-toc-장점"&gt;장점&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#단점" id="markdown-toc-단점"&gt;단점&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://tpholic.com/xe/ibmboard2/12133291"&gt;TP홀릭에도 공유&lt;/a&gt;한 내용이다.&lt;/p&gt;

&lt;p&gt;작년에 노트북(Thinkpad X220)의 LCD 패널을 IPS 패널로 교체했는데 원래 달려있던 TN 패널이 불량화소도 전혀 없고 색감도 좋은 것이라 그냥 버리기는 아까웠다. 혹시 노트북 화면이 고장나면 교체용으로 쓸 수 있었겠지만 장비를 사랑하는 나에게 그런 일은 일어나지 않았고 중고시장에 내놓아 보아도 아무도 사 가지 않았다. 이 계륵을 어떻게 처리해야 할까? 하는 생각을 하다 가벼운 서브모니터를 만들어 보게 되었다.&lt;/p&gt;

&lt;h2 id="재료"&gt;재료&lt;/h2&gt;

&lt;p&gt;LCD 패널이 모니터의 가장 중요한 구성요소곘지만, 모니터를 만들려면 이것 말고도 신호를 입력받고 패널을 제어하는 컨트롤러 보드와 AD/DC 전원 어댑터가 필요하다. 그리고 구성요소들을 조립해 모아둘 케이스도 있어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;패널: 노트북에서 적출한 TN 패널. 모델은 LP125WH2(TL)(B1)&lt;/li&gt;
  &lt;li&gt;컨트롤러/리모콘: 이베이(ebay)에서 주문. 배송비 포함 약 $30. 배송기간은 약 30일. 패널의 모델과 정확히 일치하는 컨트롤러를 구입해야 하며, 판매자에게 이를 분명히 요청해야 낭패를 보지 않을 것이다. 내가 주문한 제품은 &lt;a href="http://www.ebay.com/itm/For-LP125WH2-TL-B1-LCD-LED-controller-Driver-Board-TV-HDMI-VGA-CVBS/272660042660?ssPageName=STRK%3AMEBIDX%3AIT&amp;amp;_trksid=p2060353.m2749.l2649"&gt;이것&lt;/a&gt;인데, 자신이 가진 패널 모델과 맞는걸 사야 하므로 어디까지나 참고만 하도록 하자. 잘 찾아보면 컨트롤러를 국내에서도 구할 수 있다고 한다. 국내에서 살 수 있다면 그 편이 더 좋을 것이다.&lt;/li&gt;
  &lt;li&gt;어댑터: 국내 인터넷 쇼핑몰을 통해 표준 어댑터 구매. 가격은 1만원 정도. 컨트롤러 판매자가 같이 판매하지 않아서 따로 구입했다.&lt;/li&gt;
  &lt;li&gt;케이스: 다 쓴 노트의 내용물을 뜯어내고 표지와 스프링만 사용했다. 아크릴 판이나 유리 액자 등도 고려해 봤지만, 공구가 절대적으로 부족하고 내 솜씨도 모자라서 그런 것들은 무리일 것 같았다. 대단한 걸 만들 게 아니므로 노트 같은 가볍고 가공하기 편한 재료도 괜찮다.&lt;/li&gt;
  &lt;li&gt;케이스 조립 재료: 바느질 도구, 유리테이프&lt;/li&gt;
  &lt;li&gt;고무발: 조각접착제를 사용했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="작업과정"&gt;작업과정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;패널과 컨트롤러를 연결하여 테스트해 본다.&lt;/li&gt;
  &lt;li&gt;케이스(노트)에 컨트롤러와 패널을 고정한다. 적당히 붙이면 되는데 나는 여러 가닥의 실로 묶은 뒤 테이프로 마감했다.&lt;/li&gt;
  &lt;li&gt;미끄러짐을 방지하기 위해 케이스에 고무발을 달아준다. 점성이 있는 재료를 적당히 붙이면 된다.&lt;/li&gt;
  &lt;li&gt;완성. 잘 되는지 테스트해 본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;원래 블로그에 작업기를 쓸 생각이 없었던 터라 작업과정을 촬영하지는 못했다.&lt;/p&gt;

&lt;h2 id="결과물"&gt;결과물&lt;/h2&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-1.jpg" alt="모니터 사진 1" /&gt;&lt;/p&gt;

&lt;p&gt;오른쪽의 화면은 그냥 노트북이고, 왼쪽에 덮여 있는 노트가 내가 만든 모니터다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-2.jpg" alt="모니터 사진 2" /&gt;&lt;/p&gt;

&lt;p&gt;노트를 열면 이렇게 패널이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-3.jpg" alt="모니터 사진 3" /&gt;&lt;/p&gt;

&lt;p&gt;모니터를 사용할 때는 탁상달력처럼 세워서 사용한다. 사진의 모습은 아직 고무발을 달기 전이다. 그래도 잘 선다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-4.jpg" alt="모니터 사진 4" /&gt;&lt;/p&gt;

&lt;p&gt;화면이 선명하게 잘 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-5.jpg" alt="모니터 사진 5" /&gt;&lt;/p&gt;

&lt;p&gt;컨트롤러는 노트 뒷면에 실과 유리테이프를 이용해 고정해 두었다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-6.jpg" alt="모니터 사진 6" /&gt;&lt;/p&gt;

&lt;p&gt;노트에 미리 송곳으로 구멍을 뚫은 후 바느질했다. 튼튼하게 하기 위해 실을 네가닥씩 접어 바늘에 꿰었다. 나는 바느질을 잘 못하지만 이런 요령으로 작업하니 어렵지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-7.jpg" alt="모니터 사진 7" /&gt;&lt;/p&gt;

&lt;p&gt;고무발을 달고 세운 모습.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/diy-monitor-8.jpg" alt="모니터 사진 8" /&gt;&lt;/p&gt;

&lt;p&gt;고무발을 단 상태에서도 잘 접힌다.&lt;/p&gt;

&lt;h2 id="평가"&gt;평가&lt;/h2&gt;

&lt;p&gt;그냥 남는 패널 처리 겸 재미삼아 해 본 것인데 결과물이 생각보다 괜찮지 않은가. 재미로 해보고 실패하면 버릴 생각이었는데 기대 이상의 결과물이 나와 버렸다. 앞으로 사랑스럽게 사용할 것 같다.&lt;/p&gt;

&lt;h3 id="장점"&gt;장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;만드는 과정이 재미있다.&lt;/li&gt;
  &lt;li&gt;세상에 하나뿐인 나만의 모니터다.&lt;/li&gt;
  &lt;li&gt;남는 패널에 쓰임새를 부여했다.&lt;/li&gt;
  &lt;li&gt;딱 노트 크기다. 안 쓸 때는 책장에 꽂아 간편히 보관할 수 있다.&lt;/li&gt;
  &lt;li&gt;적당히 레트로하고 적당히 괴악한 디자인이 내 기호에 맞다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="단점"&gt;단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;조립이 부실하기 때문에 살살 소중히 다뤄야 한다. 그래서 휴대하기는 만만찮을 듯하다.&lt;/li&gt;
  &lt;li&gt;어댑터의 부피가 다소 크고, 모니터와 따로 보관해야 해 분실할 수 있다.&lt;/li&gt;
  &lt;li&gt;요즘 모니터 가격이 많이 내려서 재료비가 상대적으로 비싸다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="diy" /><summary type="html" /></entry><entry><title type="html">dd로 저장매체(HDD, SSD) 삭제하기</title><link href="https://bakyeono.net/post/2017-07-28-erase-disk-in-linux-with-dd.html" rel="alternate" type="text/html" title="dd로 저장매체(HDD, SSD) 삭제하기" /><published>2017-07-28T20:48:00+09:00</published><updated>2017-07-28T20:48:00+09:00</updated><id>https://bakyeono.net/post/erase-disk-in-linux-with-dd</id><content type="html" xml:base="https://bakyeono.net/post/2017-07-28-erase-disk-in-linux-with-dd.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#파일-삭제-포맷-파티션-삭제만으로는-부족" id="markdown-toc-파일-삭제-포맷-파티션-삭제만으로는-부족"&gt;파일 삭제, 포맷, 파티션 삭제만으로는 부족&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#dd로-삭제하기" id="markdown-toc-dd로-삭제하기"&gt;dd로 삭제하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#랜덤-데이터-덮어쓰기" id="markdown-toc-랜덤-데이터-덮어쓰기"&gt;랜덤 데이터 덮어쓰기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="파일-삭제-포맷-파티션-삭제만으로는-부족"&gt;파일 삭제, 포맷, 파티션 삭제만으로는 부족&lt;/h2&gt;

&lt;p&gt;저장매체(하드디스크, SSD)를 버리거나 타인에게 양도하려면 먼저 데이터를 삭제해야 한다. 저장매체가 포함된 장치(스마트폰, 데스크탑 PC, 노트북 등)를 취급할 때도 마찬가지다.&lt;/p&gt;

&lt;p&gt;이 때 데이터 삭제는 단순히 &lt;code class="highlighter-rouge"&gt;rm&lt;/code&gt; 명령이나 파일 관리 프로그램(pcmanfm, 윈도우 탐색기 같은)의 삭제 명령만으로는 불충분하다. 운영체제의 파일 삭제 기능은 데이터를 실제로 삭제하는 것이 아니라 파일 헤더에 ‘삭제됨’ 플래그를 기록하는 것이다. 파일 내용은 다른 데이터로 덮어씌어질 때까지 그대로 남는다. 해커나 정보기관은 물론, 컴퓨터를 조금 다룰 줄 아는 사람이면 그런 식으로 삭제한 파일을 되살릴 수 있다.&lt;/p&gt;

&lt;p&gt;저장매체를 포맷하거나 파티션 설정을 초기화하는 것도 마찬가지다. 이 역시 저장매체의 공간 분할과 파일체계 설정을 변경하는 것 뿐이지 실제 데이터를 삭제하는 것이 아니다.&lt;/p&gt;

&lt;p&gt;저장매체를 제대로 삭제하려면 저장매체 전체를 새로운 데이터로 덮어써야 한다.&lt;/p&gt;

&lt;h2 id="dd로-삭제하기"&gt;dd로 삭제하기&lt;/h2&gt;

&lt;p&gt;유닉스의 기본 디스크 복제 프로그램인 &lt;code class="highlighter-rouge"&gt;dd&lt;/code&gt;를 사용하면 저장매체에 새로운 데이터를 쉽게 덮어쓸 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;$ dd if=/dev/zero of=/dev/sd{X} status=progress bs=4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령을 실행하면 &lt;code class="highlighter-rouge"&gt;of&lt;/code&gt;에 지정한 저장매체가 초기화된다. 옵션을 살펴보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;if&lt;/code&gt;: 복사 원본. &lt;code class="highlighter-rouge"&gt;/dev/zero&lt;/code&gt;는 0의 비트 스트림이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;of&lt;/code&gt;: 복사 대상. 삭제할 저장매체를 지정한다. &lt;code class="highlighter-rouge"&gt;lsblk&lt;/code&gt; 명령으로 삭제할 저장매체의 경로를 미리 확인해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;status&lt;/code&gt;: 진행 상황을 확인하기 위해 &lt;code class="highlighter-rouge"&gt;progress&lt;/code&gt;로 지정.&lt;/li&gt;
  &lt;li&gt;&lt;code class="highlighter-rouge"&gt;bs&lt;/code&gt;: 버퍼 크기.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="랜덤-데이터-덮어쓰기"&gt;랜덤 데이터 덮어쓰기&lt;/h3&gt;

&lt;p&gt;저장매체를 삭제하려면 아무 데이터로나 덮어쓰면 된다. 가장 간단한 ‘아무 데이터’는 0(&lt;code class="highlighter-rouge"&gt;/dev/zero&lt;/code&gt;)이다. 그런데 좀 더 원래의 의미에 가까운 ‘아무 데이터’, 즉 랜덤 데이터가 필요할 때도 있다. 디스크 전체를 암호화하여 사용하려고 준비할 때가 대표적이다. 이 때는 &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt; 옵션을 &lt;code class="highlighter-rouge"&gt;/dev/urandom&lt;/code&gt;으로 지정하면 된다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;$ dd if=/dev/urandom of=/dev/sda status=progress bs=4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="dd" /><category term="리눅스" /><summary type="html" /></entry><entry><title type="html">람다(Ramda) 라이브러리를 이용해 자바스크립트에서 함수형 프로그래밍하기</title><link href="https://bakyeono.net/post/2017-07-11-javascript-fp-with-ramda.html" rel="alternate" type="text/html" title="람다(Ramda) 라이브러리를 이용해 자바스크립트에서 함수형 프로그래밍하기" /><published>2017-07-11T17:16:00+09:00</published><updated>2017-07-11T17:16:00+09:00</updated><id>https://bakyeono.net/post/javascript-fp-with-ramda</id><content type="html" xml:base="https://bakyeono.net/post/2017-07-11-javascript-fp-with-ramda.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#자바스크립트에서-함수형-프로그래밍하기" id="markdown-toc-자바스크립트에서-함수형-프로그래밍하기"&gt;자바스크립트에서 함수형 프로그래밍하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#공식-문서" id="markdown-toc-공식-문서"&gt;공식 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#설치--로드" id="markdown-toc-설치--로드"&gt;설치 &amp;amp; 로드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#기본-개념과-도구" id="markdown-toc-기본-개념과-도구"&gt;기본 개념과 도구&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#사상과-리덕션" id="markdown-toc-사상과-리덕션"&gt;사상과 리덕션&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#커리와-조합" id="markdown-toc-커리와-조합"&gt;커리와 조합&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#콜렉션-함수와-유틸리티-함수" id="markdown-toc-콜렉션-함수와-유틸리티-함수"&gt;콜렉션 함수와 유틸리티 함수&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#원소-참조" id="markdown-toc-원소-참조"&gt;원소 참조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#콜렉션-생성" id="markdown-toc-콜렉션-생성"&gt;콜렉션 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#콜렉션-필터-정렬" id="markdown-toc-콜렉션-필터-정렬"&gt;콜렉션 필터, 정렬&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#콜렉션-연결-분할-원소-추가-원소-제거" id="markdown-toc-콜렉션-연결-분할-원소-추가-원소-제거"&gt;콜렉션 연결, 분할, 원소 추가, 원소 제거&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#집합-연산" id="markdown-toc-집합-연산"&gt;집합 연산&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#논리-함수" id="markdown-toc-논리-함수"&gt;논리 함수&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#참고" id="markdown-toc-참고"&gt;참고&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#이-글을-쓸-때-참고한-자료" id="markdown-toc-이-글을-쓸-때-참고한-자료"&gt;이 글을 쓸 때 참고한 자료&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#추천-자료" id="markdown-toc-추천-자료"&gt;추천 자료&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#미주" id="markdown-toc-미주"&gt;미주&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;개요: 자바스크립트로 함수형 프로그래밍을 할 때 유용한 라이브러리 ‘람다’를 간단히 소개한다. 함수형 프로그래밍 자체를 설명하는 글은 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="자바스크립트에서-함수형-프로그래밍하기"&gt;자바스크립트에서 함수형 프로그래밍하기&lt;/h2&gt;

&lt;p&gt;자바스크립트는 함수형 패러다임을 위한 기반을 지원한다. ECMA스크립트 5판(2009년)에서 이미 &lt;code class="highlighter-rouge"&gt;Array.map()&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Array.reduce()&lt;/code&gt; 같은 콜렉션 조작 함수가 추가되었고 6판(2015년)에서 익명 함수를 간결하게 표현하는 ‘화살표 함수’도 추가되었다. 언제 추가된 건지 확실히는 모르곘지만 일급 함수와 클로저는 그 전부터 지원한 것 같다.&lt;/p&gt;

&lt;p&gt;이러한 자바스크립트의 기본 특성만으로도 함수형 패러다임을 제법 흉내낼 수 있다. 하지만 자바스크립트의 기본 문화가 함수형 패러다임이 아니어서 한계가 있다. 불변 데이터를 제대로 지원하지 않고, 콜렉션 조작 도구와 메타프로그래밍 도구도 부족하다. 자바스크립트로 함수형 표현을 작성하다보면 결국 이런 도구들을 직접 정의하게 된다. 자신만의 라이브러리를 만들어 보는 것도 좋지만 바쁜 현대인들은 나보다 뛰어난 프로그래머들이 잘 다듬어 놓은 도구를 잘 골라 쓰는 게 더 현명하다.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ramdajs.com"&gt;람다(Ramda)&lt;/a&gt;는 ECMA스크립트가 닦아 둔 기반 위에 제대로 된 함수형 프로그래밍을 위한 유틸리티 함수들을 추가해 준다. 이런 라이브러리로는 람다 말고도 &lt;a href="http://underscorejs.org"&gt;언더스코어(Underscore.js)&lt;/a&gt;, &lt;a href="https://lodash.com"&gt;로대시(Lodash)&lt;/a&gt; 같은 것들이 있고 람다는 꽤 나중에 나온 물건이다.&lt;/p&gt;

&lt;p&gt;람다는 경쟁 라이브러리들보다 좀 더 정석에 가까운 함수형 표현을 사용할 수 있도록 설계되었다고 한다. 나는 로대시는 안 써봤고 언더스코어는 조금밖에 써보지 않아서 다른 라이브러리들이 람다보다 못한지 어떤지는 모르겠다. 다만 람다가 클로저(Clojure)의 콜렉션 함수들과 상당히 유사해서 금방 적응할 수 있었고 꽤 맘에 들었다.&lt;/p&gt;

&lt;p&gt;함수형 프로그래밍에 익숙한 사람이라면 이들 중 하나를 익혀두면 자바스크립트 코딩이 한 결 수월해질 것이다. 함수형 프로그래밍을 하지 않더라도 콜렉션 조작 함수들을 유용하게 쓸 수 있다. 길고 쓸모없는 &lt;code class="highlighter-rouge"&gt;let i, len; for (i = 0, len = coll.length; i &amp;lt; len; ++i) { coll[i] = f(coll[i]); }&lt;/code&gt; 패턴을 &lt;code class="highlighter-rouge"&gt;coll = R.map(f, coll);&lt;/code&gt; 로 줄이는 것만 해도 어딘가.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고: 자바스크립트가 정말 싫거나 좀 더 제대로 함수형 프로그래밍을 하고 싶다면 &lt;a href="https://clojurescript.org"&gt;클로저스크립트(ClojureScript)&lt;/a&gt;를 써 보자. 리스프 문법으로 코딩하고 자바스크립트로 컴파일하는 방식이다. 하지만 자바스크립트를 타겟으로 빌드하는 언어보다는 자바스크립트 자체로 프로그래밍하는 것이 웹 클라이언트 개발의 정석이다. 다른 걸 하더라도 먼저 자바스크립트에 충분히 익숙해지는 것이 좋겠다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="공식-문서"&gt;공식 문서&lt;/h2&gt;

&lt;p&gt;람다의 공식 웹사이트는 &lt;a href="http://ramdajs.com"&gt;http://ramdajs.com&lt;/a&gt; 다. 이곳에서 설치법, 기본 사용법, 전체 함수 목록과 상세 설명을 열람할 수 있다.&lt;/p&gt;

&lt;h2 id="설치--로드"&gt;설치 &amp;amp; 로드&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com"&gt;npm&lt;/a&gt;으로 자바스크립트 라이브러리를 관리하는 경우, 프로젝트에 람다를 추가하려면 다음과 같이 한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;$ npm install ramda --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후의 예는 람다를 설치한 프로젝트에서, &lt;a href="https://nodejs.org"&gt;노드(Node.js)&lt;/a&gt;의 REPL(&lt;code class="highlighter-rouge"&gt;$ node&lt;/code&gt;로 실행) 위에서 실행해 보인 것이다. 노드를 사용할 여건이 되지 않는다면 웹 브라우저로 &lt;a href="http://ramdajs.com/repl"&gt;Try Ramda (웹 REPL)&lt;/a&gt;에 접속해 테스트해봐도 좋다.&lt;/p&gt;

&lt;p&gt;람다를 사용하려면 다음과 같이 &lt;code class="highlighter-rouge"&gt;ramda&lt;/code&gt; 모듈을 로드한 후 &lt;code class="highlighter-rouge"&gt;R&lt;/code&gt;에 바인딩 해준다. (노드 기준. 브라우저에서는 script 태그로 로드하면 된다.)&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; const R = require('ramda');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id="기본-개념과-도구"&gt;기본 개념과 도구&lt;/h2&gt;

&lt;h3 id="사상과-리덕션"&gt;사상과 리덕션&lt;/h3&gt;

&lt;h4 id="rmapf-coll"&gt;R.map(f, coll)&lt;/h4&gt;

&lt;p&gt;사상&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;은 지정한 함수를 콜렉션의 모든 원소에 각각 적용하여 새로운 콜렉션을 생산하는 것이다.&lt;/p&gt;

&lt;p&gt;자바스크립트의 기본 문법 기반인 C 스타일로 콜렉션에 사상을 적용하려면 다음과 같이 for를 사용한 패턴이 필요하다. (for in을 사용할 수도 있지만 이 구문은 객체의 모든 프로퍼티를 순회하도록 정의된 탓에 hasOwnProperty를 검사해야 해서 패턴이 더욱 지저분해진다.)&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let square = x =&amp;gt; x * x;
&amp;gt; let coll = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&amp;gt; let i, len, new_coll = [];
&amp;gt; for (i = 0, len = coll.length; i &amp;lt; len; ++i) {
... new_coll[i] = square(coll[i]);
... }
&amp;gt; new_coll;
[ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사실 자바스크립트는 사상 함수 &lt;code class="highlighter-rouge"&gt;Array.map()&lt;/code&gt;을 기본으로 제공하므로 사상을 위해 for 구문을 쓸 필요가 없다. 이 함수를 사용하면 사상을 훨씬 간결하게 나타낼 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; coll.map(square);
[ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문제는 자바스크립트가 객체지향과 함수형 패러다임을 버무려 놨다는 것이다. &lt;code class="highlighter-rouge"&gt;Array.map()&lt;/code&gt; 함수는 매개변수의 순서가 콜렉션-함수 순으로 되어 있다. 함수형 프로그래밍 언어의 사상 함수는 보통 &lt;code class="highlighter-rouge"&gt;(map f coll)&lt;/code&gt; 처럼 함수-콜렉션 순서로 인자를 매개변수에 넘기도록 정의되어 있다. 자바스크립트의 방식은 이 관습과 순서가 반대인 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고: 메소드 소유자 객체는 메소드 관점에서는 그저 첫번째 인자일 뿐이다. 위의 예에서 &lt;code class="highlighter-rouge"&gt;coll&lt;/code&gt;은 &lt;code class="highlighter-rouge"&gt;Array.map()&lt;/code&gt;에 전달되는 인자다. 반대로 말하면, &lt;code class="highlighter-rouge"&gt;Array.map()&lt;/code&gt; 메소드는 겉보기에는 함수 하나(&lt;code class="highlighter-rouge"&gt;square&lt;/code&gt;)만을 인자로 전달받는 체 하지만 실질적으로는 콜렉션(&lt;code class="highlighter-rouge"&gt;coll&lt;/code&gt;)과 함수(&lt;code class="highlighter-rouge"&gt;square&lt;/code&gt;)를 순서대로 전달받는 것이다. 콜렉션이 전달되지 않는다면 이 메소드는 제대로 실행될 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;람다의 사상 함수인 &lt;code class="highlighter-rouge"&gt;R.map()&lt;/code&gt;은 다음과 같이 함수-콜렉션 순으로 인자를 매개변수를 전달하도록 되어 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.map(square, coll);
[ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rapplyf-coll"&gt;R.apply(f, coll)&lt;/h4&gt;

&lt;p&gt;사상하려는 함수가 콜렉션이 아니라 가변 인자 배열(args)을 취할 때는 &lt;code class="highlighter-rouge"&gt;R.map()&lt;/code&gt; 대신 &lt;code class="highlighter-rouge"&gt;R.apply()&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.map(Math.max, coll);    // 부적절. Math.max([1, 2, 3, 4, 5, ...])
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
&amp;gt; R.apply(Math.max, coll);  // 적절. Math.max(1, 2, 3, 4, 5, ...)
10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rreducef-init-coll"&gt;R.reduce(f, init, coll)&lt;/h4&gt;

&lt;p&gt;리덕션은 콜렉션의 모든 원소를 하나의 값으로 축약하는 것이다. (예를 들면, 전체 콜렉션의 합, 또는 전체 콜렉션의 평균을 계산하는 것.) 리덕션에 사용되는 함수는 누적값과 콜렉션의 원소 하나를 매개변수에 전달받아 새로운 누적값을 생산한다. 이 함수에 콜렉션의 모든 원소를 순서대로 적용하면 하나의 값으로 누적되는 것이다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 리덕션 함수도 &lt;code class="highlighter-rouge"&gt;Array.reduce()&lt;/code&gt;으로 기본 제공한다. &lt;code class="highlighter-rouge"&gt;Array.map()&lt;/code&gt;과 마찬가지로 Array 프로토타입의 메소드로 정의되어 있다. 이 함수에는 두 번째 매개변수에 초기값을 지정할 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let plus = (a, b) =&amp;gt; a + b;
&amp;gt; coll.reduce(plus);
55
&amp;gt; coll.reduce(plus, 1000);
1055
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예에서 보듯이 이 함수의 매개변수 순서는 콜렉션-함수-초기값 순이다. 이 또한 일반적인 함수형 패러다임 관습 함수-초기값-콜렉션 순서와 어긋난다.&lt;/p&gt;

&lt;p&gt;람다의 리덕션 함수 &lt;code class="highlighter-rouge"&gt;R.reduce()&lt;/code&gt;는 매개변수가 함수-초기값-콜렉션 순이다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.reduce(plus, 1000, coll);
1055
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매개변수의 순서는 단순한 취향 문제만은 아니다. 함수를 조합하거나 커리할 때 매개변수의 순서가 중요한 요소가 된다.&lt;/p&gt;

&lt;h4 id="rsumcoll"&gt;R.sum(coll)&lt;/h4&gt;

&lt;p&gt;콜렉션의 합계를 구할 때는 직접 리덕션을 수행할 필요 없이 &lt;code class="highlighter-rouge"&gt;R.sum()&lt;/code&gt; 함수를 사용하면 된다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.sum(coll);
55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="커리와-조합"&gt;커리와 조합&lt;/h3&gt;

&lt;h4 id="rcurryf"&gt;R.curry(f)&lt;/h4&gt;

&lt;p&gt;커리&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;란 여러 매개변수를 가진 일반적인 함수가 있을 때, 그 함수의 일부 매개변수를 어떤 값으로 특정함으로써 더 구체적인 일을 하는 함수를 생산하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.curry()&lt;/code&gt;를 사용하면 함수가 커리 가능한 함수로 변한다. 커리 가능한 함수에 정의된 매개변수보다 적은 수의 인자를 전달하여 호출하면, 인자를 전달받은 매개변수가 그 인자로 고정되고 나머지 매개변수만을 갖는 새로운 함수가 반환된다. 다음은 정육면체의 부피를 구하는 함수를 커리한 예다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let volume_of_cube = R.curry((depth, w, h) =&amp;gt; depth * w * h);
&amp;gt; volume_of_cube(10, 20, 30);
6000
&amp;gt; volume_of_cube(10);  // 첫번째 매개변수를 10으로 고정한 함수
[Function]
&amp;gt; volume_of_cube(10)(20, 30);  // 그 함수에 20, 30을 전달
6000
&amp;gt; volume_of_cube(10)(20)(30);  // 연속 커리
6000
&amp;gt; let area_of_square = volume_oF_cube(1);  // 커리된 함수 바인딩
&amp;gt; area_of_square(3, 4);
12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보다시피 커리에서는 맨 앞의 매개변수부터 차례대로 고정되기 때문에 매개변수의 순서가 중요하다. 커리할 매개변수의 순서를 수정하고 싶다면 &lt;code class="highlighter-rouge"&gt;R.__&lt;/code&gt; 상수를 사용하여 빈자리를 나타낼 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let bin_to_dec = R.curry((d3, d2, d1) =&amp;gt; d3 * 4 + d2 * 2 + d1);
&amp;gt; bin_to_dec(1, 1, 1);
7
&amp;gt; let odd_bin = bin_to_dec(R.__, R.__, 0);
&amp;gt; odd_bin(1, 1);
6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;람다가 제공하는 함수들은 기본으로 커리가 적용되어 있는 듯하다.(확인 필요) 예를 들어 객체의 유형을(엄밀하게 말하면 생성자의 인스턴스 여부를) 검사하는 &lt;code class="highlighter-rouge"&gt;R.is()&lt;/code&gt; 함수를 다음과 같이 커리할 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.is(String, 'hello!');
true
&amp;gt; let is_string = R.is(String);
&amp;gt; is_string('hello!');
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rpipef1-f2--fn"&gt;R.pipe(f1, f2, …, fn)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.pipe()&lt;/code&gt; 함수로 함수 여러 개를 결합해서 새로운 함수를 정의할 수 있다. 결합된 함수는 왼쪽 것부터 오른쪽 순으로 실행된다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let sqrtstr = R.pipe(Math.sqrt, Math.round, String);
&amp;gt; sqrtstr(10);
'3'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rcomposef1-f2--fn"&gt;R.compose(f1, f2, …, fn)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.compose()&lt;/code&gt; 함수로 결합된 함수는 오른쪽 것부터 왼쪽 순으로 실행된다. &lt;code class="highlighter-rouge"&gt;R.pipe()&lt;/code&gt; 함수와 방향이 반대다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let sqrtstr2 = R.compose(String, Math.round, Math.sqrt);
&amp;gt; sqrtstr2(10);
'3'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id="콜렉션-함수와-유틸리티-함수"&gt;콜렉션 함수와 유틸리티 함수&lt;/h2&gt;

&lt;h3 id="원소-참조"&gt;원소 참조&lt;/h3&gt;

&lt;h4 id="rnthn-coll"&gt;R.nth(n, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.nth()&lt;/code&gt; 함수는 배열의 n번째 원소를 참조한다. 원소가 없으면 &lt;code class="highlighter-rouge"&gt;undefined&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.nth(5, coll);
6
&amp;gt; R.nth(10, coll);
undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rpropprop-obj"&gt;R.prop(prop, obj)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.prop()&lt;/code&gt; 함수는 객체의 프로퍼티를 참조한다. 프로퍼티가 없으면 &lt;code class="highlighter-rouge"&gt;undefined&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.prop('name', {name: 'bakyeono'});
'bakyeono'
&amp;gt; R.prop('email', {name: 'bakyeono'});
undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="콜렉션-생성"&gt;콜렉션 생성&lt;/h3&gt;

&lt;h4 id="rrangefrom-to"&gt;R.range(from, to)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.range()&lt;/code&gt; 함수를 사용하면 수열을 쉽게 생성할 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.range(20, 30);
[ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;시작값을 0으로 고정하고 싶다면 커리하면 된다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let range_to = R.range(0);
&amp;gt; range_to(10);
[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rrepeatitem-n"&gt;R.repeat(item, n)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.repeat()&lt;/code&gt; 함수는 지정한 원소를 n개 담은 콜렉션을 생성한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.repeat(0, 5);
[ 0, 0, 0, 0, 0 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="콜렉션-필터-정렬"&gt;콜렉션 필터, 정렬&lt;/h3&gt;

&lt;h4 id="rfilterpred-coll"&gt;R.filter(pred, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.filter()&lt;/code&gt; 함수는 콜렉션에서 조건 함수를 만족하는 원소만 남긴 콜렉션을 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.filter(x =&amp;gt; x % 2, coll);
[ 1, 3, 5, 7, 9 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rsortf-coll"&gt;R.sort(f, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.sort()&lt;/code&gt; 함수는 두 인자의 차를 구하는 함수를 콜렉션에 적용해 정렬한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.sort((a, b) =&amp;gt; a - b, [99, 23, 18.5, 36.99, 6, -50]);
[ -50, 6, 18.5, 23, 36.99, 99 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rreversecoll"&gt;R.reverse(coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.reverse()&lt;/code&gt; 함수는 콜렉션 또는 문자열의 순서를 반대로 한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.reverse(coll);
[ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ]
&amp;gt; R.reverse('안녕하세요');
'요세하녕안'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="콜렉션-연결-분할-원소-추가-원소-제거"&gt;콜렉션 연결, 분할, 원소 추가, 원소 제거&lt;/h3&gt;

&lt;h4 id="rconcatcoll1-coll2"&gt;R.concat(coll1, coll2)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.concat()&lt;/code&gt; 함수는 두 콜렉션 또는 문자열을 연결한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.concat(coll, [11, 12, 13]);
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ]
&amp;gt; R.concat('Hello, ', 'World');
'Hello, World'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rappendelm-coll"&gt;R.append(elm, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.append()&lt;/code&gt; 함수는 콜렉션 뒤에 원소를 추가한 콜렉션을 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.append(99, coll);
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rprependelm-coll"&gt;R.prepend(elm, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.prepend()&lt;/code&gt; 함수는 콜렉션 안에 원소를 추가한 콜렉션을 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.prepend(99, coll);
[ 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rheadcoll"&gt;R.head(coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.head()&lt;/code&gt; 함수는 콜렉션에서 첫번째 원소를 취하는 함수다. 리스프의 &lt;code class="highlighter-rouge"&gt;car&lt;/code&gt; 또는 &lt;code class="highlighter-rouge"&gt;first&lt;/code&gt;에 해당하는 함수다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.head(coll);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rtaken-coll"&gt;R.take(n, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.take()&lt;/code&gt; 함수는 콜렉션에서 처음부터 n개의 원소를 취한 콜렉션을 구한다. 
뒤에서부터 취하고 싶다면 &lt;code class="highlighter-rouge"&gt;R.takeLast()&lt;/code&gt; 를 사용한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.take(3, coll);
[ 1, 2, 3 ]
&amp;gt; R.takeLast(3, coll);
[ 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rdropn-coll"&gt;R.drop(n, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.drop()&lt;/code&gt; 함수는 콜렉션에서 처음부터 n개의 원소를 제거한 콜렉션을 구한다. 뒤에서부터 제거하고 싶다면 &lt;code class="highlighter-rouge"&gt;R.dropLast()&lt;/code&gt;다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.drop(3, coll);
[ 4, 5, 6, 7, 8, 9, 10 ]
&amp;gt; R.dropLast(3, coll);
[ 1, 2, 3, 4, 5, 6, 7 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rslicefrom-to-coll"&gt;R.slice(from, to, coll)&lt;/h4&gt;

&lt;p&gt;범위를 지정해 잘라낼 때는 &lt;code class="highlighter-rouge"&gt;R.slice()&lt;/code&gt;다. 상수 &lt;code class="highlighter-rouge"&gt;Infinity&lt;/code&gt;를 쓰면 끝까지 잘라낸다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.slice(3, 7, coll);
[ 4, 5, 6, 7 ]
&amp;gt; R.slice(-Infinity, Infinity, coll);
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rassock-v-obj"&gt;R.assoc(k, v, obj)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.assoc()&lt;/code&gt; 함수는 객체의 키/값(프로퍼티/값) 쌍을 갱신한 객체를 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let person = {name: 'bakyeono'};
&amp;gt; R.assoc('email', 'bakyeono@gmail.com', person);
{ name: 'bakyeono', email: 'bakyeono@gmail.com' }
&amp;gt; R.assoc('name', 'clojure', person);
{ name: 'clojure' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rdissock-obj"&gt;R.dissoc(k, obj)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.dissoc()&lt;/code&gt; 함수는 객체에서 키를 제거한 객체를 반환한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.dissoc('name', person);
{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="집합-연산"&gt;집합 연산&lt;/h3&gt;

&lt;h4 id="runioncoll1-coll2"&gt;R.union(coll1, coll2)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.union()&lt;/code&gt;함수는 두 콜렉션의 합집합을 구한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.union(R.range(0, 8), R.range(4, 12));
[ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rintersectioncoll1-coll2"&gt;R.intersection(coll1, coll2)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.intersection()&lt;/code&gt;함수는 두 콜렉션의 교집합을 구한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.intersection(R.range(0, 8), R.range(4, 12));
[ 4, 5, 6, 7 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rdifferencecoll1-coll2"&gt;R.difference(coll1, coll2)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.difference()&lt;/code&gt;함수는 두 콜렉션의 차집합을 구한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.difference(R.range(0, 8), R.range(4, 12));
[ 0, 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="논리-함수"&gt;논리 함수&lt;/h3&gt;

&lt;h4 id="risgenerator-obj"&gt;R.is(generator, obj)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.is()&lt;/code&gt; 함수는 앞에서도 언급했다. 객체가 생성자의 인스턴스인지 검사하는 함수다. 커리하여 특정 타입을 검사하는 함수를 만들기 좋다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.is(String, 'text');
true
&amp;gt; let is_number = R.is(Number);
is_number(Math.PI);
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rcomplementf"&gt;R.complement(f)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.complement()&lt;/code&gt; 함수는 인자로 넘긴 논리 함수의 반대의 결과를 내는 함수를 반환한다. 여집합 함수가 아니니 헷갈리지 말자.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let is_not_number = R.complement(is_number);
&amp;gt; is_not_number(Math.PI);
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rallpred-coll"&gt;R.all(pred, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.all()&lt;/code&gt; 함수는 콜렉션의 모든 원소가 조건 함수를 만족하는지 검사한다. 모두 참일 때만 &lt;code class="highlighter-rouge"&gt;true&lt;/code&gt;, 아니면 &lt;code class="highlighter-rouge"&gt;false&lt;/code&gt;다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.any(R.is(String), coll);
false
&amp;gt; R.all(R.is(Number), coll);
true
&amp;gt; R.all(x =&amp;gt; x &amp;lt; 10, coll);
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="ranypred-coll"&gt;R.any(pred, coll)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.any()&lt;/code&gt; 함수는 콜렉션의 원소 중 하나라도 조건 함수를 만족하는지 검사한다. 모두 거짓일 때만 &lt;code class="highlighter-rouge"&gt;false&lt;/code&gt;, 아니면 &lt;code class="highlighter-rouge"&gt;true&lt;/code&gt;다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.any(R.is(String), coll);
false
&amp;gt; R.any(R.is(Number), coll);
true
&amp;gt; R.any(x =&amp;gt; x &amp;lt; 10, coll):
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rt-rf-ralwaysobj"&gt;R.T(), R.F(), R.always(obj)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.T()&lt;/code&gt; 함수는 항진함수다. 매개변수는 없으며 언제나 &lt;code class="highlighter-rouge"&gt;true&lt;/code&gt;를 반환한다. 그 반대는 &lt;code class="highlighter-rouge"&gt;R.F()&lt;/code&gt; 함수다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; R.T();
true
&amp;gt; R.F();
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.always()&lt;/code&gt; 함수는 지정된 인자를 항상 반환하는 함수를 만든다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let emptiness = R.always(null);
&amp;gt; emptiness();
null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id="rcondcond1-f1-cond2-f2-"&gt;R.cond([cond1, f1], [cond2, f2], …)&lt;/h4&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;R.cond()&lt;/code&gt; 함수는 다중 if … else … 구문을 묶어 표현하는 함수다.&lt;/p&gt;

&lt;p&gt;나는 이 함수를 보고 입이 떡 벌어졌다. 거의 리스프의 매크로로 만든 듯한 느낌 아닌가. 물론 자바스크립트에 그런 게 있을 리 없고 실제로는 고차함수를 이용한 테크닉이다. 이걸 적절히 사용하면 지저분한 다중 if … else … 구문을 깔끔하게 정리할 수 있을 듯하다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;gt; let between = R.curry((from, to, x) =&amp;gt; (from &amp;lt;= x) &amp;amp;&amp;amp; (x &amp;lt; to));
&amp;gt; let month_to_season = R.cond([
... [between(3, 6),  R.always('봄')],      // 3-6:  봄
... [between(6, 9),  R.always('여름')],    // 6-9:  여름
... [between(9, 12), R.always('가을')],    // 9-12: 가을
... [R.T,            R.always('겨울')]]);  // else: 겨울
&amp;gt; R.map(month_to_season, R.range(1, 13));
[ '겨울', '겨울', '봄', '봄', '봄', '여름', '여름', '여름', '가을', '가을', '가을', '겨울' ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;캬. 우아하다.&lt;/p&gt;

&lt;p&gt;간단한 소개글을 쓸 생각이었는데 함수 몇개 소개하다보니 벌써 라이브러리 레퍼런스마냥 길어지고 있다. 이 정도로 정리해야겠다. 지금까지 소개한 함수는 전체 람다 라이브러리의 일부분일 뿐이다. 필요한 함수는 공식 문서를 통해 더 찾아보도록 하자.&lt;/p&gt;

&lt;h2 id="참고"&gt;참고&lt;/h2&gt;

&lt;h3 id="이-글을-쓸-때-참고한-자료"&gt;이 글을 쓸 때 참고한 자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://ramdajs.com/docs"&gt;Ramda 0.24.1 Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.sitepoint.com/functional-programming-with-ramda"&gt;「Hands-on Functional Programming with Ramda.js」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.yes24.com/24/goods/3907543"&gt;『프로그래밍 클로저』, 스튜어트 할로웨이 저, 인사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="추천-자료"&gt;추천 자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;자바스크립트를 꼼꼼이 살펴보고 싶다면 &lt;a href="http://www.yes24.com/24/Goods/3071412"&gt;『더글라스 크락포드의 자바스크립트 핵심 가이드』&lt;/a&gt;를 읽어보면 좋다.&lt;/li&gt;
  &lt;li&gt;함수형 프로그래밍에 입문해 볼 생각이라면 &lt;a href="http://www.yes24.com/24/Goods/4853907"&gt;『프로그램 디자인, 어떻게 할 것인가』&lt;/a&gt;을 교재로 학습하면 큰 도움이 된다. &lt;a href="/post/2013-09-28-lisp-books.html"&gt;이 책에 대한 내 간단한 리뷰&lt;/a&gt;도 있다. 이 책은 자바스크립트를 다룬 것은 아니고 리스프 교재다. 자바스크립트를 배우는 걸로는 함수형 패러다임을 배우기 힘들다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="미주"&gt;미주&lt;/h2&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;맵, 매핑 &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;수학자 해스켈 커리(Haskell Brooks Curry)의 이름에서 딴 용어. 카레가 아니다. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="자바스크립트" /><category term="ramda" /><category term="함수형-프로그래밍" /><summary type="html" /></entry><entry><title type="html">텍스트 파일 일괄 치환 스크립트</title><link href="https://bakyeono.net/post/2017-04-01-text-replace-script.html" rel="alternate" type="text/html" title="텍스트 파일 일괄 치환 스크립트" /><published>2017-04-01T23:11:00+09:00</published><updated>2017-04-01T23:11:00+09:00</updated><id>https://bakyeono.net/post/text-replace-script</id><content type="html" xml:base="https://bakyeono.net/post/2017-04-01-text-replace-script.html">&lt;p&gt;맞춤법을 지키는 것과 용어를 통일하는 것은 문서를 쓸 때 신경써야할 기본 사항이지만 한국어에서는 유독 틀리기가 쉬운 것 같다. 올바른 글 쓰기 훈련이 부족한 한국의 언어 환경도 원인이지만 한국어 어법이 너무나 까다로운 것도 문제다.&lt;/p&gt;

&lt;p&gt;다양한 저자의 원고를 받아 출간해 내는 출판사는 이런 문제로 골머리를 썩는 모양이다. 한 출판사의 편집자에게 들은 바로는 자주 틀리는 표현을 사전으로 저장해두고 일괄 치환한다고 한다. 문맥을 고려하지 않고 치환한다는 위험이 있을 것 같지만 조심해서 사용하면 편리할 것 같다. 문제는 이걸 손으로 하고 있다는 거다. 손이 아무리 빨라도 사전 목록이 길면 길수록 작업시간이 증가할 수밖에 없다.&lt;/p&gt;

&lt;p&gt;이런 작업을 해주는 Vim 플러그인이 혹시 있을까해서 찾아 봤지만 못 찾았다. 하지만 이런 건 파이썬으로 한시간 정도 투자하면 자동화할 수 있다. 나도 필요한 스크립트여서 만들어 보았다.&lt;/p&gt;

&lt;p&gt;내가 만든 스크립트는 여기서 다운로드할 수 있다.&lt;/p&gt;

&lt;p&gt;github: &lt;a href="https://github.com/bakyeono/maptext.py"&gt;https://github.com/bakyeono/maptext.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아쉽지만 용어 사전은 함께 제공하지 않는다. 자주 틀리는 표현과 고쳐야 할 표현을 아래와 같이 CSV 파일로 만들어 사용하면 된다. 파일 인코딩은 UTF-8만 지원한다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;src,dst
"파이선","파이썬"
"programing","programming"
"acheive","acheive"
"accross","across"
"comming","coming"
"freind","friend"
"lollypop","lollipop"
"politican","politician"
"sence","sense"
"suprise","surprise"
"threshhold","threshold"
"whereever","wherever"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="파이썬" /><summary type="html">맞춤법을 지키는 것과 용어를 통일하는 것은 문서를 쓸 때 신경써야할 기본 사항이지만 한국어에서는 유독 틀리기가 쉬운 것 같다. 올바른 글 쓰기 훈련이 부족한 한국의 언어 환경도 원인이지만 한국어 어법이 너무나 까다로운 것도 문제다.</summary></entry><entry><title type="html">극한탈출 9시간 9명 9의 문을 플레이하며</title><link href="https://bakyeono.net/post/2017-03-30-zero-escape-and-digital-root.html" rel="alternate" type="text/html" title="극한탈출 9시간 9명 9의 문을 플레이하며" /><published>2017-03-30T03:45:00+09:00</published><updated>2017-03-30T03:45:00+09:00</updated><id>https://bakyeono.net/post/zero-escape-and-digital-root</id><content type="html" xml:base="https://bakyeono.net/post/2017-03-30-zero-escape-and-digital-root.html">&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#배경" id="markdown-toc-배경"&gt;배경&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#규칙" id="markdown-toc-규칙"&gt;규칙&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#문을-나가는-방법" id="markdown-toc-문을-나가는-방법"&gt;문을 나가는 방법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#모두를-살리는-방법" id="markdown-toc-모두를-살리는-방법"&gt;모두를 살리는 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;극한탈출 9시간 9명 9의 문(Zero Escape: Nine Hours, Nine Persons, Nine Doors)이라는 전자오락을 플레이하고 있다. 주 장르는 방탈출 게임이지만 미스터리 소설이라고도 볼 수 있겠다. 플레이어의 선택에 따라 이야기의 진행과 등장인물들의 운명이 달라지는 것 같다. 나는 아직 초반부를 플레이 중이다. 이후의 전개가 어떻게 될지는 모르는 상태다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;내가 게임 전개를 모르기 때문에, 아마 이 글에는 스포일러가 없을 것이다.  그래도 혹시 모르니 스포일러에 주의하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="배경"&gt;배경&lt;/h2&gt;

&lt;p&gt;등장인물들은 알 수 없는 이유로 어떤 선박에 납치된 채 깨어난다. 선박에서 탈출하기 위해서는 여러 개의 문을 통과해 마지막에 9가 적힌 문을 나가야 한다. 서로 협력해도 모자랄 판에 의심과 갈등은 점차 커지고… 누가 목숨을 잃을지 모르는 극한의 상황이다.&lt;/p&gt;

&lt;p&gt;나는 모든 사람을 무사히 탈출시키고 싶다. 어떻게 해야 할까? 모든 선택에 그에 따른 결과가 있을 것이라는 점을 감안하면, 눈 앞에 닥친 문제를 해결하는 동시에 멀리까지 내다보아야 한다. 최선의 선택을 하기 위해 머리를 굴리다가 암산으로는 멀리 내다보기가 어려워서 프로그래밍까지 동원해 보았다.&lt;/p&gt;

&lt;h2 id="규칙"&gt;규칙&lt;/h2&gt;

&lt;p&gt;최종 목적지인 9가 적힌 문을 빠져 나가려면 누구를 살리고 누구를 포기해야 할지 판단해야 한다. 문을 통과할 때는 규칙이 있기 때문이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;선박에 갇혀 있는 사람은 8명인데 각기 1부터 8까지 번호가 부여되어 있다.&lt;/li&gt;
  &lt;li&gt;문을 통과할 때는 한 번에 3명, 4명, 또는 5명이 함께 통과해야 한다. 그 외의 조합으로는 통과할 수 없다.&lt;/li&gt;
  &lt;li&gt;문에는 수가 적혀있는데 문을 통과하려면 그 수와 문을 통과하는 사람들의 수의 합계의 디지털 루트가 같아야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Digital_root"&gt;디지털 루트&lt;/a&gt;란 자연수를 10진법 한자리 수로 줄이는 방법이다. 각 자리수의 수를 자리는 무시하고 수만 합하는 과정을 최종결과가 10 미만이 될때까지 반복한다. 파이썬으로 정의하면 다음과 같다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;def digital_root(n):
    if n &amp;lt; 10:
        return n
    else:
        return digital_root(n // 10 + n % 10)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 함수는 완벽하지는 않고 n &amp;lt; 100 일 때만 제대로 동작한다. 게임의 상황상 가장 큰 수를 가진 다섯 명이 함께 문을 통과해도 (4+5+6+7+8 = 30) 밖에 되지 않기 문제가 되지 않는다.&lt;/p&gt;

&lt;h2 id="문을-나가는-방법"&gt;문을 나가는 방법&lt;/h2&gt;

&lt;p&gt;그렇다면 모두 함께 9가 적힌 최종 관문을 통과할 수 있을지 생각해 보자. 사람이 여덟 명이기 때문에 모두가 탈출하려면 다섯 명이 먼저 통과하고 남은 세 명이 통과하거나, 네 명이 먼저 통과하고 남은 네 명이 통과하면 된다.&lt;/p&gt;

&lt;p&gt;문제는 어떤 조합으로 사람들을 통과시켜야 하는 것인가다. 이것을 미리 알고 있어야 누구를 반드시 살려야 하는지, 누구를 포기해야하는지 알 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 게임 참가자들을 3명씩, 4명씩, 5명씩 묶은 모든 조합을 구한다. 파이썬의 itertools.combinations 함수를 쓰면 중복을 제외하고(즉, 순서 구별 없이) 가능한 모든 조합을 구할 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;from itertools import combinations

# 참가자들
candidates = [1, 2, 3, 4, 5, 6, 7, 8]

# 3명, 4명, 5명으로 만들 수 있는 모든 조합
groups = list(combinations(candidates, 3)) +
         list(combinations(candidates, 4)) +
         list(combinations(candidates, 5))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;182개의 조합이 가능하다. 이 중 디지털 루트가 9가 되는 조합을 찾아야 한다.&lt;/p&gt;

&lt;p&gt;먼저, 각 그룹에 디지털 루트 값을 덧붙이고, 디지털 루트가 9인 것을 필터한다. 값을 덧붙이는 과정 없이 바로 필터해도 되지만, 값을 덧붙여두면 다른 문을 통과할 때도 참고할 수 있을 것 같다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# 각 조합에 디지털 루트 계산결과를 덧붙임
groups = [(group, digital_root(sum(group))) for group in groups]

# 디지털 루트가 9인 조합 찾기
groups_for_9 = list(filter(lambda group: group[1] == 9, groups))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;통과할 수 있는 모든 조합을 구했다. 다음 조합이 9를 통과할 수 있다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;(1, 2, 6)
(1, 3, 5)
(2, 3, 4)
(3, 7, 8)
(4, 6, 8)
(5, 6, 7)
(1, 2, 7, 8)
(1, 3, 6, 8)
(1, 4, 5, 8)
(1, 4, 6, 7)
(2, 3, 5, 8)
(2, 3, 6, 7)
(2, 4, 5, 7)
(3, 4, 5, 6)
(1, 2, 3, 4, 8)
(1, 2, 3, 5, 7)
(1, 2, 4, 5, 6)
(1, 5, 6, 7, 8)
(2, 4, 6, 7, 8)
(3, 4, 5, 7, 8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id="모두를-살리는-방법"&gt;모두를 살리는 방법&lt;/h2&gt;

&lt;p&gt;9를 통과할 수 있는 조합은 20가지다. 이들을 두 개씩 합쳐 보면, 두 번에 걸쳐 모든 사람이 9의 문을 통과할 수 있는지 확인할 수 있다. 개수가 몇개 되지 않아서 눈으로 직접 세어 가며 조합했다.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;(1, 2, 3, 4, 8),     (5, 6, 7)
(1, 2, 3, 5, 7),     (4, 6, 8)
(1, 2, 4, 5, 6),     (3, 7, 8)
(1, 5, 6, 7, 8),     (2, 3, 4)
(2, 4, 6, 7, 8),     (1, 3, 5)
(3, 4, 5, 7, 8),     (1, 2, 6)
(1, 2, 7, 8),        (3, 4, 5, 6)
(1, 3, 6, 8),        (2, 4, 5, 7)
(1, 4, 5, 8),        (2, 3, 6, 7)
(1, 4, 6, 7),        (2, 3, 5, 8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;신기하게도 모든 조합이 자기와 맞는 짝을 갖고 있었다. 즉, 한 조합의 사람들이 9의 문을 빠져나가면 남은 사람들은 다음 차례에 자동으로 9의 문을 빠져나갈 수 있다.&lt;/p&gt;

&lt;p&gt;9의 문까지 모든 사람이 생존해서 도달하기만 한다면, 모든 사람이 살 수 있는 것이다. 하지만 아직까지는 등장인물들이 이를 깨닫지 못하고 5명이 나가면 3명은 포기해야 한다고 믿고 있다.&lt;/p&gt;

&lt;p&gt;게임은 매우 치밀하게 구성되어 있는 것 같다. 앞으로 어떻게 전개될지는 알 수 없다. 매 순간 어떤 결정이 가장 현명할지 고민할 뿐이다.&lt;/p&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="게임" /><category term="파이썬" /><summary type="html" /></entry><entry><title type="html">기상청 동네예보 API 조회를 JSON 포맷으로 받기</title><link href="https://bakyeono.net/post/2017-01-24-kma-weather-api-json.html" rel="alternate" type="text/html" title="기상청 동네예보 API 조회를 JSON 포맷으로 받기" /><published>2017-01-24T16:58:00+09:00</published><updated>2017-01-24T16:58:00+09:00</updated><id>https://bakyeono.net/post/kma-weather-api-json</id><content type="html" xml:base="https://bakyeono.net/post/2017-01-24-kma-weather-api-json.html">&lt;p&gt;기상청 동네예보 API를 사용하고 있었는데 2017년 1월 22일부터 갑자기 JSON 포맷으로 요청하면 406 Not Acceptable 상태가 응답되었다.&lt;/p&gt;

&lt;p&gt;동네예보 API는 기본 포맷이 XML이다. JSON으로 받기 위해 평소 HTTP 요청에 Accept 헤더를 application/json으로 지정하여 요청하고 있었는데 갑자기 안 되는 것이다.&lt;/p&gt;

&lt;p&gt;API 수정 공지가 있었는지 찾아보았지만 찾을 수 없었다. 아마도 다른 패치를 하다가 같이 건드린 것 같다. HTTP 헤더를 통한 요청 처리를 제대로 해 주지 않는 쪽으로 바뀌다니 유감이다.&lt;/p&gt;

&lt;p&gt;일단 API 사용자 측에서의 해결책은 간단하다. Accept 헤더를 xml로 하거나 그냥 지정하지 않고, 대신 URL 매개변수에 &lt;code class="highlighter-rouge"&gt;type=json&lt;/code&gt; 을 지정하면 된다.&lt;/p&gt;</content><author><name>박연오(bakyeono@gmail.com)</name></author><category term="기상" /><category term="api" /><summary type="html">기상청 동네예보 API를 사용하고 있었는데 2017년 1월 22일부터 갑자기 JSON 포맷으로 요청하면 406 Not Acceptable 상태가 응답되었다.</summary></entry></feed>
