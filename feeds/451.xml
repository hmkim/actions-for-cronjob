<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Daily Log 
</title>
 <link href="https://jiyeonseo.github.io/atom.xml" rel="self"/>
 <link href="https://jiyeonseo.github.io/"/>
 <updated>2019-02-09T13:30:44+00:00</updated>
 <id>https://jiyeonseo.github.io</id>
 <author>
   <name>jiyeonseo</name>
   <email></email>
 </author>

 
 <entry>
   <title>일일커밋 Day 112</title>
   <link href="https://jiyeonseo.github.io/2019/01/21/daily-commit-100days/"/>
   <updated>2019-01-21T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2019/01/21/daily-commit-100days</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;/images/github_tile.png&quot;&gt;&lt;img src=&quot;/images/github_tile.png&quot; alt=&quot;github_tile&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;작년 HacktoberFest를 기점으로 왠지 “일일 커밋”을 하게 되었다. (중간중간 15일 정도 빼먹었네)&lt;/p&gt;

&lt;p&gt;지구력이 좋은 편이긴 하지만 커밋 습관(본업 제외하고) 처음이라 좀 뿌듯하기도 하고 앞으로 더 잘하고 싶어 짧게 소감을 남겨 보려 한다.&lt;/p&gt;

&lt;h2 id=&quot;좋았던-점&quot;&gt;좋았던 점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HacktoberFest를 완수하여 티셔츠 2개를 얻었다.
    &lt;ul&gt;
      &lt;li&gt;사실 일일 커밋과는 상관없지만 이 덕분에 시작했다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Github을 페북 들어가듯 들어가게 되었다.
    &lt;ul&gt;
      &lt;li&gt;재밌는 습관이다. 타일 확인하느라 하루에 한 번은 꼭 Github에 들어왔고 덕분에 더 많은 오픈 소스들을 많이 탐험해 볼 수 있었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Contribution을 더 많이 하게 되었다.
    &lt;ul&gt;
      &lt;li&gt;위에 이어서, 자꾸 보다 보니 오타들도 잘 보이고 조금 더 추가되었으면 하는 부분들이 보였다. 정말 작은 기여지만 뭐, 처음이 다 그런 거 아니겠어.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공부 관련된 플러그인 만들기.
    &lt;ul&gt;
      &lt;li&gt;예전에는 공부하고 그냥 끝냈을 새로운 기술들도 커밋을 위해 괜히 프로젝트 하나를 더 파게 되었다.&lt;/li&gt;
      &lt;li&gt;Gatsby 공부하며 토이로 만들어본 Plugin.
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/jiyeonseo/gatsby-source-giphy-trending&quot;&gt;https://github.com/jiyeonseo/gatsby-source-giphy-trending&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;아쉬웠던-점&quot;&gt;아쉬웠던 점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;퀄리티 높지 못한 Commit들.
    &lt;ul&gt;
      &lt;li&gt;솔직히 대충 1 커밋을 채운 날도 있다. 의무감과 집착으로 채운 commit 들도 있다.&lt;/li&gt;
      &lt;li&gt;당연하겠지만 정말 정말 귀찮은 날도 있었다. 타일이 뭐라고.. private repository를 만들어서 채운 날도 있고, 전날 다 했는데 일부러 커밋 안 해놨다가 12시 넘어서 커밋해서 이틀 치 타일을 채운 적도 있다.&lt;/li&gt;
      &lt;li&gt;숫자에만 너무 집착한 게 아닌가 싶다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;긴 코드리뷰를 받아보지 못했다.
    &lt;ul&gt;
      &lt;li&gt;공개된 오픈 소스의 Example 코드나 문서 수정같은 Pull Request여서 크게 리뷰를 받지 못했다. 다양한 사람들과 코드 리뷰를 해보고 싶다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나보다 더 (훨씬 더) 일일커밋을 잘한 분들의 글.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://milooy.wordpress.com/2016/07/02/daily-commit-1-year/&quot;&gt;진유림님의 글&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1141&quot;&gt;Outsideris님의 글&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://johnresig.com/blog/write-code-every-day/&quot;&gt;John Resig의 글&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;당신이 반복적으로 하는 행동, 그것이 바로 당신 자신이다.
그러므로 탁월함은 행동이 아니라 습관이다. - 아리스토텔레스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://100.daum.net/encyclopedia/view/54XX58000173&quot;&gt;1만 시간의 법칙&lt;/a&gt;을 보며 막연히 꾸준하게만 하면 될거라 믿으면 안된다. 지금까지는 습관을 만들기 위한 행동이었다면, 조금 더 의식적인 연습으로 실력을 끌어올릴 수 있는 습관을 만들고 싶다. 다음 회고때는 스스로 좀 더 발전한 모습을 쓸 수 있었으면 좋겠다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[책] '가장 빨리 만나는 챗봇 프로그래밍'</title>
   <link href="https://jiyeonseo.github.io/2019/01/02/chatbot-programming/"/>
   <updated>2019-01-02T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2019/01/02/chatbot-programming</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://search.daum.net/search?w=bookpage&amp;amp;bookId=4836771&amp;amp;tab=introduction&amp;amp;DA=LB2&amp;amp;q=%EA%B0%80%EC%9E%A5%20%EB%B9%A8%EB%A6%AC%20%EB%A7%8C%EB%82%98%EB%8A%94%20%EC%B1%97%EB%B4%87%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D&quot;&gt;‘가장 빨리 만나는 챗봇 프로그래밍 with Bot Framework’&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;튜토리얼 형식으로 챗봇을 처음 공부하는 사람 그리고 빠르게 익혀야 하는 사람들에게 추천.&lt;/p&gt;

&lt;p&gt;책에서 다루는 부분들은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Azure Bot Service&lt;/li&gt;
  &lt;li&gt;Bot Framework&lt;/li&gt;
  &lt;li&gt;Azure SQL Database&lt;/li&gt;
  &lt;li&gt;QnA Maker&lt;/li&gt;
  &lt;li&gt;LUIS&lt;/li&gt;
  &lt;li&gt;외부 다양한 플랫폼들과의 통합. Skype, Facebook, Telegram, 그리고 카카오톡까지!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개인적으로 Azure를 이용해 Serveless를 공부하고 있는데, Web Service, DB 등은 언급해주어서 같이 공부할 수 있어서 좋았다. 특히 요금 정책….. 저번달에 모르고 Service Plan 테스트용 만들어 놨다가 까먹고 돈 좀 나갔다.&lt;/p&gt;

&lt;p&gt;그럼에도 불구하고 아쉬운 점을 꼽자면…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C#과 Visual Studio가 익숙하지 않은 사람이라면 많이 매일수 있다. (바로 나야 나…) Node 예제를 다 다루지 못하더라도 같은 기능을 동작하는 Node 예제 코드를 같이 제공했으면 더 좋았을 것 같다.
    &lt;ul&gt;
      &lt;li&gt;5장 까지 내용을 Node + SDK3 기반으로 만들어 보았다 : &lt;a href=&quot;https://github.com/jiyeonseo/chatbot_node_botbuilder_sdk3&quot;&gt;chatbot_node_botbuilder_sdk3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Window 환경 기반으로 쓰여진 책이라 내 환경인 Mac 그리고 Visual Studio for Mac과는 맞지 않는 부분이 있었다. 그리고 몰랐다…. 여기서 삽질을 좀 했다.
    &lt;ul&gt;
      &lt;li&gt;Visual Studio for Mac에 맞춘 코드 : &lt;a href=&quot;https://github.com/jiyeonseo/cheesecheeseball&quot;&gt;cheesecheeseball&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;중간에 Bot Builder SDK default 버전이 변경되면서 Portal Azure에서 헤맴 – 아래 저자의 애프터 서비스 영상에서 언급되고 있다!
    &lt;ul&gt;
      &lt;li&gt;Bot Template SDK 3 → SDK 4 : &lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=warit&amp;amp;logNo=221431965506&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=warit&amp;amp;logNo=221431965506&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;내-중간-공부-노트&quot;&gt;내 중간 공부 노트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiyeonseo-study/Azure-study/blob/master/bot_service.md&quot;&gt;https://github.com/jiyeonseo-study/Azure-study/blob/master/bot_service.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;azure-function-을-이용한-봇-코드-샘플&quot;&gt;Azure Function 을 이용한 봇 코드 샘플&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiyeonseo/azure-line-bot-example&quot;&gt;azure-line-bot-example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiyeonseo/azure-telegram-sample&quot;&gt;azure-telegram-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>[회고] Review 2018</title>
   <link href="https://jiyeonseo.github.io/2018/12/31/review2018/"/>
   <updated>2018-12-31T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/12/31/review2018</id>
   <content type="html">&lt;p&gt;올해는 좋은 회고들이 정말 많이 올라오는 것 같다. (너무 부끄러워서) 썼다 지웠다를 반복하다가 &lt;a href=&quot;https://adhrinae.github.io/posts/retrospective-2018&quot;&gt;좋은 회고 포맷&lt;/a&gt;을 보고 정말 간단히 올해를 정리해보기로 마음 먹었다. 2019년 12월 31일에는 그래도 꽤 발전했구나 하며 이 글을 볼 수 있길.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1-work무슨-일을-했나&quot;&gt;1. Work(무슨 일을 했나)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;새 회사, 새 업무에 적응을 많이 했다. 회사에서 주는 1주년 풍선도 받았다.&lt;/li&gt;
  &lt;li&gt;새 업무의 특성상, 말(?)도 전보다 더 많이 하게 되었다(난 원래 말이 많은데). 내게 발표는 항상 개발자들 대상이었는데, 이게 업무로 이어지게 되면서 비개발 직군과의 커뮤니케이션도 중요해지고, 클라이언트 스피킹 수업들도 회사 도움으로 3번 정도 들었다. 아직 잘하는지는 모르겠지만 할 수 있는 영역이 많이 늘어난 해였다.&lt;/li&gt;
  &lt;li&gt;Hacktober Fest를 처음 참여해 보았다. 결과물로는 Github과 MS에서 2장의 티셔츠가 오고 있다. 11월에 출발했는데 언제 오려나.
&lt;a href=&quot;/images/hacktober.png&quot;&gt;&lt;img src=&quot;/images/hacktober.png&quot; alt=&quot;hacktober&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-study무엇을-익혔나&quot;&gt;2. Study(무엇을 익혔나)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;그 핫한 노션을 새로 써보기 시작. 온오프라인도 잘 연동되고, 모바일도 기능은 좀 부족하지만 전에 사용하던 Dropbox Paper보다는 Sync면이나 UX면에서 훨씬 좋다. 지금은 거의 일기장으로 사용 중. 더 잘 사용하고 싶다.
 &lt;a href=&quot;/images/notion.png&quot;&gt;&lt;img src=&quot;/images/notion.png&quot; alt=&quot;notion&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;영어 공부를 많이 했다. 여전히 부족하지만 영어 수업도 3월부터 꾸준하게 하고 있고 외국인 동료들과도 이야기 많이 하고. 여전히 서툴지만 계속 이렇게 하다보면 더 늘지 않을까?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Serverless 공부를 시작했다. Coursera에서 GCP specialization 따고 토이 프로젝트 몇몇 가지를 해보고 있다. 근데 실무에서 사용하지 않으니 속도가 많이 느리다. 제대로 된 사이드 프로젝트를 생각해봐야겠다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-good뭘-잘했나&quot;&gt;3. Good(뭘 잘했나)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;오픈소스 기여를 많이 했다. 또 깃헙 타일도 잘 가꾸어 보았다. Hacktober부터 해서 기웃기웃 하다 보니 거의 매일 커밋하게 되고 어느새 꼭 commit 하나라도 해야 직성이 풀려서 10월부터 잔디를 좀 깔았다. 
&lt;a href=&quot;/images/contribution2018.png&quot;&gt;&lt;img src=&quot;/images/contribution2018.png&quot; alt=&quot;contribution2018&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;가족들과 시간을 많이 보냈다. 의도치는 않았지만 엄마에게 한 달 다른 나라에서 살기도 서포트 해주었고, 여행도 다녔다. 마음이 힘들 때, 제일 의지되는 건 역시 가족들이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-bad뭘-못했나&quot;&gt;4. Bad(뭘 못했나)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;블로그 글도 써놓고 완성하지 못한 것들이 백로그에 많이 쌓여있다. 라즈베리파이, 코드 리뷰, Hacktober 후기 등등. 반쪽짜리로 로컬에 가득하다. 글쓰기는 여전히 너무 힘들다.&lt;/li&gt;
  &lt;li&gt;책, 팟캐스트, 웹툰 등 좋아하는 것들을 많이 못했다.&lt;/li&gt;
  &lt;li&gt;사람들에게 더 친절하지 못했다. 상처 준 사람도 있다. 상처 준 사람에게 사과하는 마음으로 2019년에는 더 상냥한 사람이 되야겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-goal내년엔-무엇을-해볼까&quot;&gt;5. Goal(내년엔 무엇을 해볼까)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;내가 더 좋아하는 일 그리고 재밌는 일을 하고 싶다. 그러기 위해서 더 많은 공부를 해야 한다는 것도 알았다. 영어든 기술이든.&lt;/li&gt;
  &lt;li&gt;뭔가 엄청 노력을 많이 했는데, 생각보다 결과물도 나의 성취감은 그에 비하면 너무 적었다. 노력 중독이 아니였나 싶다. 내년에는 쉼도 함께하는 퀄리티 높은 노력을 하고 싶다.&lt;/li&gt;
  &lt;li&gt;오픈소스에 더 깊은 기여를 하고 싶다. 사이드 프로젝트로만 하면 진도가 잘 안나가는게 걱정이다.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>[후기] Deview 2018</title>
   <link href="https://jiyeonseo.github.io/2018/10/14/deview2018/"/>
   <updated>2018-10-14T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/10/14/deview2018</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;/images/deview2018/deview_2018_4.JPG&quot;&gt;&lt;img src=&quot;/images/deview2018/deview_2018_4.JPG&quot; alt=&quot;deview2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;올해도 좋은 분들의 도움을 받아 &lt;a href=&quot;https://deview.kr/2018&quot;&gt;Deview2018&lt;/a&gt; Day1에 다녀왔다.&lt;/p&gt;

&lt;p&gt;매년마다 올해는 내용이 괜찮네, 구성이 좋네, 부스가 나쁘네, 기념품이 별로네 하지만 이렇게 큰 행사를 매 해마다 열어 준다는 건 정말 감사한 일이다. 사실 컨퍼런스에 참여한다고 해서 특정 기술에 대해서 바로 습득 할 수는 없다. 그저 거기서 힌트를 얻고 자극 받고 또 사람들을 만나며 나의 시야를 넓혀가는 것, 그게 컨퍼런스 참석자의 자세가 아닐까 싶다. 그런 점에서 Deview는 트랜디한 주제와 자사의 기술 공유 그리고 외부 회사들의 공유 자리를 만들어 줌으로써 건강한 개발자 컨퍼런스의 문화를 차곡차곡 쌓아주고 있는 고마운 행사인 것 같다. 참석할때마다 많이 배우고 간다.&lt;/p&gt;

&lt;p&gt;그래도 나름 매년 참석하고 있는 사람으로써, 올해의 Deview를 이야기하자면!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;항상 주는 Deview 에코백은 매년 확실히 좋아져간다!!!&lt;/li&gt;
  &lt;li&gt;Day1과 Day2의 주제 분배가 좋았던 것 같다. 개인적으로는 머신러닝에 대한 지식이 깊지 못하여 Day1에만 참여했는데 너무너무 즐겁게 들었다!&lt;/li&gt;
  &lt;li&gt;Day1에서도 ML, AI이 있긴 했지만 이와 관련한 프러덕션 적용이라던가 데이터 관리 등. 어찌보면 내가 앞으로 더 잘 알아야하는 부분을 알수있는 세션들이 정말 흥미로웠다.&lt;/li&gt;
  &lt;li&gt;항상 중간에 배치되어 있는 빈백은 참 좋다. 오랜만에 만난 개발자들과 수다도 떨고. 다만 이제 정말 인기가 좋아서 그 자리도 앉기 힘들다ㅠ 빈백 혹은 앉을 수 있는 자리가 더 많아 졌으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;부스&quot;&gt;부스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;부스들을 돌아다니며 다시 한번 더 치열해진 개발자채용을 실감했다. 다양한 이벤트 상품들로 개인정보 남기고 가게 하는 부스들이 많았는데, 물론 개발자취향(정말 올해 고퀄 많았음) 스티커들도 매력적이지만, 가장 기억에 남는 부스는 정말 활짝 웃는 모습으로 서비스개편에 대해 설명해주신 네이버 지도 부스. 진심으로 서비스를 사랑하는 모습이 나까지 설레게 하셨다. 저분과 일하면 얼마나 즐거울까? :)&lt;/li&gt;
  &lt;li&gt;스티커는 정말 취향 저격! 루닛과 하이퍼커넥트의 스티커는 정말 고민의 흔적을 많이 느낄 수 있었다.&lt;/li&gt;
  &lt;li&gt;네이버 오픈소스부스에서는 hacktober 10월을 좀 더 강조해서 first contribute를 도와주는 이벤트를 했으면 어땟을까 생각해보았다. 특정 태그를 나중에 컨트리뷰트 하면 선물을 보내준다던가? (내가 하는거 아니니까 막던져본다) 뺏지 선물이 open share enjoy였는데 너무 맘에 들어서 출근가방에 바로 붙힘! 고마워요!&lt;/li&gt;
  &lt;li&gt;라인 프랜즈 선물은 언제나 옳다.&lt;/li&gt;
  &lt;li&gt;웨일 쿠션 갖고싶다….인기 넘나 좋은 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;세션들&quot;&gt;세션들&lt;/h2&gt;

&lt;h3 id=&quot;지난-1년간의-웨일-브라우저와-그-미래&quot;&gt;지난 1년간의 웨일 브라우저와 그 미래&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/images/deview2018/deview2018_1.JPG&quot;&gt;&lt;img src=&quot;/images/deview2018/deview2018_1.JPG&quot; alt=&quot;deview2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deview.kr/2018/schedule/260&quot;&gt;링크&lt;/a&gt; / &lt;a href=&quot;https://www.slideshare.net/deview/141-1-119007334&quot;&gt;발표 자료&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;작년부터 항상 챙겨듣는 웨일 세션!&lt;/li&gt;
  &lt;li&gt;Chrome과 Safari가 이끌고 있는 이 인터넷 표준 세상에서 웨일의 끊임없이 노력하는 모습은 항상 감동을 준다.&lt;/li&gt;
  &lt;li&gt;네이밍 부분은 정말 공감했다. 내부 툴 혹은 프로젝트는 재밌고 의미있는 이름 짓는 것을 선호하는 편인데 확실히 서비스면에서는 직관적인 이름이 가장 좋은 것 같다.&lt;/li&gt;
  &lt;li&gt;흥미로운 기능 중 하나는 악의적인 redirect 하는 부분을 막아주는 기능이였는데(예를 들어, 페북에서 기사 클릭 후, 뒤로가기 눌렀을 떄 다른 페이지가 히스토리에 있는 경우), 웹서비스를 하다보면 가끔 History API를 건들때가 가끔 있다. 악의적인 redirect와 페이지가 의도적으로 history api를 이용해 조작하는 경우를 어떻게 판별할지가 궁금하다.&lt;/li&gt;
  &lt;li&gt;덕분에 모바일 웨일도 설치 완료 ;) 이제 모바일에서도 웨일!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;line-x-naver-개발-보안-취약점-이야기&quot;&gt;LINE x NAVER 개발 보안 취약점 이야기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deview.kr/2018/schedule/249&quot;&gt;링크&lt;/a&gt; / &lt;a href=&quot;https://www.slideshare.net/deview/113linexnaver&quot;&gt;발표자료&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://air.line.me/air/product#tab_airgo&quot;&gt;Air Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;보안/취약점은 항상 회사만 믿고 잘 생각하지 못했던 부분이였다.&lt;/li&gt;
  &lt;li&gt;실서비스에서도 충분히 생길 수 있는 취약점에 대해서 콕콕 찝어주시고 그에 대한 보안 방법도 잘 설명해주셨다.&lt;/li&gt;
  &lt;li&gt;웹 서비스를 하는 회사라면 꼭 한번 읽어보고 혹시 내 서비스에는 문제가 없을지 확인해 보면 좋을 것 같다.&lt;/li&gt;
  &lt;li&gt;내년 네이버에서 시작한다는 자체 운영 버그바운티가 기대된다. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;병리-ai-제품-개발을-위한-데이터-관리-및-좌충우돌-삽질기&quot;&gt;병리 AI 제품 개발을 위한 데이터 관리 및 좌충우돌 삽질기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/images/deview2018/deview2018_5.JPG&quot;&gt;&lt;img src=&quot;/images/deview2018/deview2018_5.JPG&quot; alt=&quot;deview2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deview.kr/2018/schedule/226&quot;&gt;링크&lt;/a&gt; / &lt;a href=&quot;https://www.slideshare.net/deview/134-ai-product&quot;&gt;발표자료&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;제일 재밌게 들었던 세션!&lt;/li&gt;
  &lt;li&gt;발표자분의 겸손이 정말 초고수임을 오히려 증명해주는 듯 했다.&lt;/li&gt;
  &lt;li&gt;의료라 하면 굉장히 멀고 나와는 관심 없을 거라 생각했는데 결국 개발자의 업은 같다는 걸 보여준 재밌는 세션이였다.&lt;/li&gt;
  &lt;li&gt;소개된 오픈소스들 : &lt;a href=&quot;https://openslide.org/&quot;&gt;OpenSlide&lt;/a&gt; , &lt;a href=&quot;https://openseadragon.github.io/&quot;&gt;OpenSeardragon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;의료 서비스 개발자 모임 (난 아니지만..ㅋㅋ) : &lt;a href=&quot;https://www.facebook.com/groups/177675496397938&quot;&gt;https://www.facebook.com/groups/177675496397938&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;모바일-키보드-스마트보드에-ai-적용하기&quot;&gt;모바일 키보드, 스마트보드에 AI 적용하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/images/deview2018/deview2018_6.JPG&quot;&gt;&lt;img src=&quot;/images/deview2018/deview2018_6.JPG&quot; alt=&quot;deview2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://deview.kr/2018/schedule/230&quot;&gt;링크&lt;/a&gt; / &lt;a href=&quot;https://www.slideshare.net/deview/135-ai&quot;&gt;발표자료&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;프로젝트 진행하며 꽃길만 걷고싶었던 초기 생각과는 많이 달랐다고는 하나, 웃으며 발표하는 발표자분의 모습을 보며 그래도 즐겁게 프로젝트를 하신 것 같다.&lt;/li&gt;
  &lt;li&gt;나도 ML framework와 모델만 있으면 프러덕트 적용은 어렵지 않다고 생각했는데, 역시 세상 쉬운 거 없구나..&lt;/li&gt;
  &lt;li&gt;자신의 삽질을 오픈소스화 하신 모습을 보고 정말 놀라웠다. 나는 블로그 정리도 잘 안하는데 ㅠㅠ 역시 세상을 바꾸는 사람들은 다르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;최근 공부에 대한 갈증이 심한 시간을 겪고 있어서 정말 즐겁게 들었다. 또 오랜만에 각자의 자리에서 바쁘게 뛰고 있는 사람들과도 이야기 나누고 힘도 많이 얻었다.&lt;/p&gt;

&lt;p&gt;여전히 다른 사람들에게 얻기만 하고 내가 무엇인가 주지 못한다는 생각이 많이 든다. 정보 공유도 그렇고 에너지도 그렇고. 얼른 힘 내고 긍정 파워 뿜뿜 치즈로 돌아와서 내가 배운 것들, 지식, 정보 그리고 많은 것들을 나눌 수 있도록 노력해야겠다.&lt;/p&gt;

&lt;p&gt;마지막으로 매년 풍성한 개발자축제를 만들어 주는 네이버에게 다시 한번 감사합니다.
&lt;a href=&quot;/images/deview2018/deview2018_3.JPG&quot;&gt;&lt;img src=&quot;/images/deview2018/deview2018_3.JPG&quot; alt=&quot;deview2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Azure Function + Telegram chatbot 만들기</title>
   <link href="https://jiyeonseo.github.io/2018/08/31/telegram-chatbot/"/>
   <updated>2018-08-31T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/08/31/telegram-chatbot</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/serverless-telegram-bot-on-aws-lambda-851204d4236c&quot;&gt;Serverless Telegram bot on AWS Lambda&lt;/a&gt; 는 AWS 람다 + Python 을 이용하여 텔레그램 봇을 만드는 실습 블로그인데, 읽다가 왠지 조금 다르게 해보고 싶어서 Azure Function + Node 로 살짝 다르게 실습해 보았다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;준비사항&quot;&gt;준비사항&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Node v6.5.0 이상&lt;/li&gt;
  &lt;li&gt;MS Azure 계정&lt;/li&gt;
  &lt;li&gt;텔레그램 계정&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1단계--telegram-bot-생성-및-토큰-받기&quot;&gt;1단계 : Telegram Bot 생성 및 토큰 받기&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://web.telegram.org/#/im?p=@BotFather&quot;&gt;@BotFather&lt;/a&gt; 에서 봇을 만든다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/newbot&lt;/code&gt; : 새로운 봇 생성. 이름은 *_bot 과 같은 형식으로&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/telegram_bot.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막에 발급 받은 Token을 나중에 사용한다. 봇 생성 끝!&lt;/p&gt;

&lt;h2 id=&quot;2단계--serverless-framework-를-이용한-프로젝트-생성&quot;&gt;2단계 : Serverless framework 를 이용한 프로젝트 생성&lt;/h2&gt;

&lt;p&gt;쉽게 사용하고 쉽게 배포할수 있는 &lt;a href=&quot;https://serverless.com/framework/&quot;&gt;Severless framework&lt;/a&gt;을 사용하겠다. 이 프레임워크에서는 AWS, Azure 뿐만 아니라 Google cloud 등 &lt;a href=&quot;https://serverless.com/framework/docs/&quot;&gt;다양한 클라우드 프로바이더&lt;/a&gt;에 대해 서포트 하고 있으니 원하는 클라우드에 따라서 선택하면 된다. 이번 블로그에서는 Azure function을 사용해 보도록 하겠다.&lt;/p&gt;

&lt;h3 id=&quot;serverless-framework-설치&quot;&gt;Serverless framework 설치&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; serverless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;새로운-프로젝트-생성&quot;&gt;새로운 프로젝트 생성&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;serverless create &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; azure-nodejs &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;path_name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;my-unique-name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새로 생성된 프로젝트 폴더로 들어가면 두 개의 파일이 생성된 것을 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handler.js&lt;/code&gt; : node 코드로 된 템플릿&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; : 설정 파일&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd {path_name}
$ npm install 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3단계--serverless-배포-및-확인&quot;&gt;3단계 : Serverless 배포 및 확인&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;serverless deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약, Azure에 미리 로그인이 되어있지 않다면 로그인 하는 페이지가 열리게 된다. 
그리고 다음과 같이 로깅이 뜨는 걸 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Serverless: WARNING: Missing &lt;span class=&quot;s2&quot;&gt;&quot;tenant&quot;&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt; properties &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.
Serverless: Building Azure Events Hooks
Serverless: Parsing Azure Functions Bindings.json...
Serverless: Building binding &lt;span class=&quot;k&quot;&gt;for function&lt;/span&gt;: hello event: httpTrigger
Serverless: Building binding &lt;span class=&quot;k&quot;&gt;for function&lt;/span&gt;: hello event: http
Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Logging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;to Azure
Serverless: Creating resource group: azure-telegram-sample-rg
Serverless: Creating &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;app: azure-telegram-sample
Serverless: Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Kudu endpoint...
Serverless: Uploading &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;: hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;invoking&quot;&gt;invoking&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;serverless invoke &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; hello &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;log&quot;&gt;log&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless logs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; hello &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure Portal&lt;/a&gt; 에 들어가 Azure Function을 확인하면 새로운 함수 앱과 함수 hello가 생성된 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/azure-telegram-sample-function.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4단계--telegram-bot-nodejs&quot;&gt;4단계 : Telegram bot (Node.js)&lt;/h2&gt;

&lt;p&gt;텔레그램 봇 개발을 더 편하게 하기위해 아래 패키지들을 추가로 설치해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install --save node-telegram-bot-api request
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yagop/node-telegram-bot-api&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node-telegram-bot-api&lt;/code&gt;&lt;/a&gt; : Telegram Bot API for NodeJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에서 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;handler.js&lt;/code&gt; 에 다음 코드를 복사 붙혀넣기 한다&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TelegramBot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'node-telegram-bot-api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YOUR_API_TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TelegramBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chatId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chatId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello World!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// status: 200, /* Defaults to 200 */&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;    

    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 배포&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;serverless deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5단계--telegram-bot과-연결&quot;&gt;5단계 : Telegram bot과 연결&lt;/h2&gt;

&lt;p&gt;Portal &amp;gt; Function App -&amp;gt; 만든 functionn app -&amp;gt; function “hello”를 들어가면 url end point를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/azure-telegram-sample.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.telegram.org/bot&amp;lt;Your Telegram TOKEN&amp;gt;/setWebhook&lt;/code&gt; 로 
	발급받은 endpoint 를 연결해준다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt; https://api.telegram.org/bot&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;token&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/setWebhook &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'content-type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;url&quot;: &quot;{end-point}&quot;}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6단계--demo&quot;&gt;6단계 : demo!&lt;/h2&gt;

&lt;p&gt;봇에게 말을 걸어보면!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Telegram_Web.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;끄읕!&lt;/p&gt;

&lt;h3 id=&quot;소스코드&quot;&gt;소스코드&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jiyeonseo/azure-telegram-sample&quot;&gt;https://github.com/jiyeonseo/azure-telegram-sample&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고-링크들&quot;&gt;참고 링크들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/lordferquad/telegram-bot-prototype-using-serverless-framework-and-webtask-e7g&quot;&gt;https://dev.to/lordferquad/telegram-bot-prototype-using-serverless-framework-and-webtask-e7g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>[책] 그로스 해킹 Growth Hacking</title>
   <link href="https://jiyeonseo.github.io/2018/08/12/growth-hacking/"/>
   <updated>2018-08-12T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/08/12/growth-hacking</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://book.daum.net/detail/book.do?bookid=KOR9788966189311&quot;&gt;그로스 해킹 Growth Hacking - 스타트업을 위한 실용주의 마케팅&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;작고 얇은 분량이 맘에 들어 집어든 책인데 정말 알차게 핵심을 짚고 있는 책이라 시간가는 줄 모르고 술술 읽었다. IT 회사 혹은 스타트업에서 일하는 기획자 혹은 개발자를 대상으로 하고 있다.&lt;/p&gt;

&lt;p&gt;전형적인 오래된 마케팅 방법, 예를 들어 정확한 타게팅이 어려우며 비싼 TV광고라던가 신문 지면 광고 등, 보다는 사용자의 피드백 혹은 성장률을 빠르게 추적하며 적은 돈으로 큰 효과를 누릴수 있는 방법에 대해서 이야기 하고 있다.&lt;/p&gt;

&lt;p&gt;최근 들어 광고 쪽에서 일을 하다보니, 모든 광고 그리고 마케팅은, 광고비 ROI , 관심이 있을 법한 고객을 찾는 것, 어떠한 경로로 우리의 서비스에 들어오는지 그리고 어떠한 funnel이 이루어 지고 있는지 등에 대한 끊임없는 질문하고 정확한 타겟이 어떻게 더 깊은 funnel로(방문-&amp;gt;결제) 이어질수 있을지에 대한 방법들로 계속되는 것을 느끼고 있다.&lt;/p&gt;

&lt;p&gt;최근 많은 사람들이 이러한 방법을 추구하다보니 간편하게 유저 트랙킹과 마케팅을 돕는 서비스 그리고 툴이 많아졌다. 대표적으로는 &lt;a href=&quot;https://marketingplatform.google.com/about/analytics/&quot;&gt;Google Analytics&lt;/a&gt;(GA), &lt;a href=&quot;https://www.facebook.com/business/learn/facebook-ads-pixel&quot;&gt;Facebook Pixel&lt;/a&gt;, 국내에서는 Kakao에서도 pixel을 제공하고 있다. 이 외에도 appsflyer, tune 등 고객 측정과 마케팅을 도와주는 곳들이 많다.&lt;/p&gt;

&lt;p&gt;개발자라면 위와 같은 서비스들의 dev doc만 보더라도 구현 방법 그리고 어떠한 원리로 동작하는지 금방 이해할 수 있을 것이다. 꼭 회사, 내가 하고 있는 일에 바로 적용하지 못하더라도, 토이 프로젝트라던가 개인 블로그에 들어오는 사람들이 어떠한 패턴으로 들어오는지 그리고 어떻게 홍보해야할지 고민해보는걸로 시작해보면 좋을 것 같다 :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/growthhacking.JPG&quot;&gt;&lt;img src=&quot;/images/growthhacking.JPG&quot; alt=&quot;growthhacking&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Surge - Static web publishingfor Front-End Developers</title>
   <link href="https://jiyeonseo.github.io/2018/08/09/surge/"/>
   <updated>2018-08-09T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/08/09/surge</id>
   <content type="html">&lt;p&gt;업무를 하다보면 혹은 개발하다보면 가볍게 정적 웹페이지 하나를 만들어야 할 때가 종종 있다. 그때마다 자주 사용하던건 github page 였는데, 우선 무료인데다가 repo하나만 만들면 뚝딱이기 때문에 자주 사용했었다.&lt;/p&gt;

&lt;p&gt;하지만, 역시나 귀찮은것은 ….&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;repo를 만들어야 하고&lt;/li&gt;
  &lt;li&gt;github page를 사용하겠다고 setting 에서 기능을 켜 주어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만사가 귀찮은 개발자들에게는 꽤나 번거러운 일이다.&lt;/p&gt;

&lt;p&gt;가볍게 한페이지를 만들어야 할 때, terminal을 벗어나고 싶지 않을 때 사용할 만 한 서비스가 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/surge.png&quot;&gt;&lt;img src=&quot;/images/surge.png&quot; alt=&quot;surge&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;surge&quot;&gt;Surge&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://surge.sh/&quot;&gt;https://surge.sh/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Static web publishing for Front-End Developers&lt;/li&gt;
  &lt;li&gt;정적 웹페이지를 퍼블리싱해주는 서비스다. 끝.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;무료 / 무제한 퍼블리싱 / 커스텀 도메인 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;내가-한-환경&quot;&gt;내가 한 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mac OSX Sierra&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; surge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;사용방법&quot;&gt;사용방법&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 작성 후&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ surge 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;처음 퍼블리싱인 경우 가입해야하는데, email과 pw를 지정해주면 된다.&lt;/li&gt;
  &lt;li&gt;도메인은 자동으로 생성이 되어있는데 수정 가능하다.&lt;/li&gt;
  &lt;li&gt;http 로 지원된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;같은-도메인으로-content-update-할-경우&quot;&gt;같은 도메인으로 content update 할 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; 파일에 도메인을 넣어두면 바로 해당 도메인을 업데이트 시켜준다.&lt;/p&gt;

&lt;script src=&quot;https://asciinema.org/a/aYoyFeN7PsTlOY7dpR2Ps0yYP.js&quot; id=&quot;asciicast-aYoyFeN7PsTlOY7dpR2Ps0yYP&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;example : &lt;a href=&quot;http://hello-cheese.surge.sh/&quot;&gt;http://hello-cheese.surge.sh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pricing&quot;&gt;Pricing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 단위로 월마다 $13. &lt;a href=&quot;https://surge.sh/pricing&quot;&gt;https://surge.sh/pricing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;부가 제공 서비스는
    &lt;ul&gt;
      &lt;li&gt;커스텀 SSL 지원&lt;/li&gt;
      &lt;li&gt;Https 지원&lt;/li&gt;
      &lt;li&gt;Cross-Origin Resource sharing&lt;/li&gt;
      &lt;li&gt;redirect 지원&lt;/li&gt;
      &lt;li&gt;password protection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>asciinema - Record and share your terminal sessions</title>
   <link href="https://jiyeonseo.github.io/2018/07/23/asciinema/"/>
   <updated>2018-07-23T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/07/23/asciinema</id>
   <content type="html">&lt;p&gt;Terminal 작업을 공유해야 할 상황에서 크게 두가지를 생각해 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;1-스크린캐스트&quot;&gt;1. 스크린캐스트&lt;/h3&gt;
&lt;p&gt;맥 환경에서는 기본앱인 QuickTime으로 쉽게 스크린캐스트가 가능하지만 보는사람 입장에서는 화면만 볼 수 있고 실습을 해보고자 할때는 다시 손으로 직접 쳐봐야 한다.&lt;/p&gt;

&lt;h3 id=&quot;2-코드-스닛팻-공유&quot;&gt;2. 코드 스닛팻 공유&lt;/h3&gt;

&lt;p&gt;실습하는 입장에서는 복붙이 쉽다. 하지만 작성자가 커맨드 결과에 대해서도 이야기 하고자 할때 결과를 다 복붙하는 것은 귀찮다.&lt;/p&gt;

&lt;p&gt;이 두가지를 해결 할 수 있는 신박한 솔루션을 찾았다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/asciinema.png&quot;&gt;&lt;img src=&quot;/images/asciinema.png&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;asciinema&quot;&gt;asciinema&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://asciinema.org/&quot;&gt;https://asciinema.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Record and share your terminal sessions, the right way.&lt;/li&gt;
  &lt;li&gt;터미널 작업 녹화 + 웹 공유 를 지원하는 솔루션.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Simple recording : 커맨드 라인으로 바로 리코딩 시작.&lt;/li&gt;
  &lt;li&gt;Copy &amp;amp; paste : 플레이어 내 커맨드 라인 드래그/복붙 가능.&lt;/li&gt;
  &lt;li&gt;Embedding : embedded player 가능. &lt;a href=&quot;https://asciinema.org/docs/embedding&quot;&gt;링크&lt;/a&gt;를 통해 더 자세히 알아 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;내가-한-환경&quot;&gt;내가 한 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mac OSX Sierra&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fails after brew installation: ModuleNotFoundError: No module named 'pkg_resources’&lt;/code&gt; 에러가 날 경우. 다음 이슈를 따르면 잘 해결된다. &lt;a href=&quot;https://github.com/asciinema/asciinema/issues/260&quot;&gt;asciinema/asciinema#260&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사용방법&quot;&gt;사용방법&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ asciinema rec // 녹화시작 

asciinema: recording asciicast to /var/folders/n4/ws_1h7316zb6rjv6_2_tbnqhmll586/T/tmpckm85iin-ascii.cast
asciinema: press &amp;lt;ctrl-d&amp;gt; or type &quot;exit&quot; when you're done

$ exit // or &amp;lt;ctr-d&amp;gt; 녹화 끝  
asciinema: recording finished
asciinema: press &amp;lt;enter&amp;gt; to upload to asciinema.org, &amp;lt;ctrl-c&amp;gt; to save locally

https://asciinema.org/a/DwAilr7WusKCkBYumSqRB5O0v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;무료로 서버에 업로드까지 해준다!!!&lt;/p&gt;

&lt;script src=&quot;https://asciinema.org/a/qCFY7oOgOIb4K7MDHtx60yww2.js&quot; id=&quot;asciicast-qCFY7oOgOIb4K7MDHtx60yww2&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;끝으로, &lt;a href=&quot;https://asciinema.org/explore/featured&quot;&gt;Featured asciinema&lt;/a&gt;에 가면 대단한 terminal덕 들의 작품을 볼 수 있다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>setState() 함수 안에서  this.state 사용하지 않기</title>
   <link href="https://jiyeonseo.github.io/2018/07/16/no-state-in-setstate/"/>
   <updated>2018-07-16T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/07/16/no-state-in-setstate</id>
   <content type="html">&lt;p&gt;오늘 ESLint에서 걸린 warning.&lt;/p&gt;

&lt;p&gt;간단한 state 값 변경시 자주 사용하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button 
  onClick={()=&amp;gt;{
    this.setState({value : this.state.value + 1});
  }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만,
만약 한 function에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; 한번에 두개가 있고 this.state를 공유한다면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function increment() {
  this.setState({value: this.state.value + 1});
  this.setState({value: this.state.value + 1});
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;value가 1일 경우,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setState({value: 1 + 1}) 
setState({value: 1 + 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위처럼 문제가 될 수도 있다.&lt;/p&gt;

&lt;p&gt;이를 피하기 위해서 이전 State 값을 인자로 받는 Callback으로 처리해주는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setState(prevState =&amp;gt; 
	({value: prevState.value + 1}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 value가 1일 경우,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setState({value: 1 + 1})
setState({value: 2 + 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ref : &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md&quot;&gt;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[책] 시지프스를 다시 생각하다 : 어느 개발자의 직장 생활에 대한 보고서</title>
   <link href="https://jiyeonseo.github.io/2018/05/20/rethink-Sisyphos/"/>
   <updated>2018-05-20T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/05/20/rethink-Sisyphos</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://book.daum.net/detail/book.do?bookid=KOR9788992939638&quot;&gt;‘시지프스를 다시 생각하다 : 어느 개발자의 직장 생활에 대한 보고서’&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 책은 내가 사회 초년생 때, 단순히 “좋은 개발자가 되고 싶다”라는 생각으로 서점에 가서 “개발자” 혹은 “컴퓨터 공학”에 관련된 책을 사 들일 때 샀던 책 중 한 권이다. 물론 읽지도 못할 정도로 많이 사서 책장 속에 다른 책들과 남겨져 있었다. 인문학이면 인문학, 기술이면 기술 책, 소설이면 소설을 읽어왔지만 뭐랄까 부제목 때문일까, 어중간한 성격의 책 같아 항상 있는 것은 알았으나 꺼내보지 않고 있었다. 주말에 뭘 읽을까 하고 책장을 보던 중 “직장 생활에 대한 보고서”라는 부제가 눈에 들어왔다. 최근 들어 이직을 하게 되면서 “직장”과 “일”에 대해 많이 생각하게 되었다. 아무래도 “최적화되었다” 할 만큼 너무나도 익숙해져 버린 전 회사를 떠나 어찌 되었든 아직 맞지 않은 옷을 입은 느낌의 새직장의 환경은 크고 작은 부분에서 날 힘들게 한다. 좋고 나쁜 것을 떠나 어쨌든 적응 기간이다.&lt;/p&gt;

&lt;p&gt;아마 이 책을 샀을 당시, 즉 내가 사회 초년생일 때 읽었다면 크게 와 닿지 않았을 것 같다. 경험도 부족하고 개발자가 뭔지도 잘 몰랐고. “개발자”의 이야기지만 어쨌든 직장인 에세이 느낌의 책이다. 하긴, 더 나에게 크게 다가왔던 건 진정한 “소프트웨어 개발자”가 되기 원하는 “곧은 나무” 스타일의 저자가 나와 닮았다는 생각이 계속 들었기 때문일 거다. 또, 개발에 대한 열정과 일중독 이 사이에서 내 욕심을 채우면서도 건강한 삶을 살고 싶은 내 고민과 너무 잘 맞아떨어져 정말 순식간에 읽어 내려갔다.&lt;/p&gt;

&lt;p&gt;물론 모든 상황이 저자와 같은 것은 아니다. 사실 내 상황은 귀여울 정도의 불평들 뿐일 거다. 하지만 누구나 그러하듯 자기 자신의 고민이 가장 심각하고 내 문제가 가장 고통스럽게 느껴지는 법. 여러 역경과 상황을 지나 자신이 배운 점을 담담하게 이야기하며 끝나는 책을 보며, 지금 내가 하고 있는 일에서 그리고 겪는 어려움에서 배울 것을 배우며 차근차근 앞으로 나아가야겠다는 다짐을 다시 할 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;회사 생활을 하다 보면 이집트 여행의 꿈을 실현한 직원처럼 회사 안에서 자신이 원하는 걸 얻는 사람들이 적지 않다. 회사 돈을 회사 규정을 어겨가며 자신의 쌈짓돈으로 사용하는 사람들을 말하는 게 아니다. 자신이 하고 싶은 걸 하면서 회사에 가치를 제공해 주는 사람들이 바로 회사를 놀이터로 사용하는 이들이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;: 개발을 하는 게 즐거운 사람에게 테크 회사란 놀이터 같은 존재. 즐겁게 개발할 수 있는 환경이 함께 따라주어야겠지만.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그리고 나보다 일을 더 잘하는 동료가 있을 때 그 동료를 보면서 저 동료보다 조금 더 잘하고 싶은 생각이 들었던 적이 있었다. 물론 동료 실력이 감히 넘볼 수 없는 사차원 벽 너머에 있다면 경쟁 자체를 피하게 되지만 조금만 노력하면 그 동료보다 조금 더 잘할 수 있겠다는 생각이 들 때가 있다. 그럴 땐 확실히 그 동료와 경쟁하면서 성장하는 기분이 들었다. 말로 표현하지는 않았지만 내가 애살을 갖도록 자극한, 참 고마운 동료들이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;: 요즘은 페이스북, 트위터를 통해 이러한 (일방적으로) 동료를 찾을 수 있어서 참 좋다. 끊임없이 공부하고 노력하는 사람들을 보며 나 자신을 돌아보곤 한다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to Kubernetes - 2</title>
   <link href="https://jiyeonseo.github.io/2018/05/16/Introduction-to-Kubernetes-2/"/>
   <updated>2018-05-16T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/05/16/Introduction-to-Kubernetes-2</id>
   <content type="html">&lt;p&gt;refer to edX course &lt;a href=&quot;https://courses.edx.org/courses/course-v1:LinuxFoundationX+LFS158x+1T2018/&quot;&gt;“Introduction to Kubernetes”&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;kubernetes-configuration&quot;&gt;Kubernetes Configuration&lt;/h1&gt;
&lt;p&gt;4가지 주요 설치 방법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;All-in-One Single-Node Installation
    &lt;ul&gt;
      &lt;li&gt;하나에 다.&lt;/li&gt;
      &lt;li&gt;마스터/워커 컴포넌트를 하나의 노드&lt;/li&gt;
      &lt;li&gt;처음 배울때, 개발, 테스트 시에 좋음. 하지만 production 에서는 사용하지 말아야함.&lt;/li&gt;
      &lt;li&gt;ex) Minikube&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Single-Node etcd, Single-Master, and Multi-Worker Installation
    &lt;ul&gt;
      &lt;li&gt;하나의 마스터 노드/하나의 etcd instance&lt;/li&gt;
      &lt;li&gt;여러 워커 노드가 마스터 노드에 연결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Single-Node etcd, Multi-Master, and Multi-Worker Installation
    &lt;ul&gt;
      &lt;li&gt;여러 마스터 노드/HA mode/하나의 etcd instance&lt;/li&gt;
      &lt;li&gt;여러 워커 노드가 마스터 노드에 연결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multi-Node etcd, Multi-Master, and Multi-Worker Installation
    &lt;ul&gt;
      &lt;li&gt;etcd가 clustered mode에서 설정, Kubernetes cluster 외부에 있으며 노드들과 연결됨.&lt;/li&gt;
      &lt;li&gt;마스터 노드는 HA mode로 설정&lt;/li&gt;
      &lt;li&gt;여러 워커 노드와 연결&lt;/li&gt;
      &lt;li&gt;production에 가장 추천하는 방법.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;choosing-the-right-solution&quot;&gt;Choosing the right solution&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/pick-right-solution/&quot;&gt;https://kubernetes.io/docs/setup/pick-right-solution/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;localhost&quot;&gt;Localhost&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/minikube/&quot;&gt;Minikube&lt;/a&gt; : all-in-one 쿠버네티스 셋업시 추천한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/ubuntu/local/&quot;&gt;Ubuntu on LXD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;minikube&quot;&gt;Minikube&lt;/h1&gt;

&lt;h2 id=&quot;requirements&quot;&gt;requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;kubectl : binaryused  to access any Kubernetes cluster.&lt;/li&gt;
  &lt;li&gt;hypervisors
    &lt;ul&gt;
      &lt;li&gt;On Linux : Virtual Box or KVM&lt;/li&gt;
      &lt;li&gt;On MacOS : Hyperkit driver, xhyve driver, VirtualBox, or VMware Fusion&lt;/li&gt;
      &lt;li&gt;On Window : VirtualBox or Hyper-V&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mac OS에 대해서만 정리하겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Install Minikube : 가장 최신버전은 &lt;a href=&quot;https://github.com/kubernetes/minikube/releases&quot;&gt;Minikube release page&lt;/a&gt; 에서 확인.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.26.1/minikube-darwin-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo mv minikube /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Start
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube start 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;check the status
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;stop Minikube
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube stop 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;access-to-minikube&quot;&gt;Access to Minikube&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;CLI
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubectl/kubectl/&quot;&gt;kubectl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;쿠버네티스 클러스터 리소스와 어플리케이션을 운영&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI
    &lt;ul&gt;
      &lt;li&gt;쿠버네티스 대시보드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;API&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to Kubernetes - 1</title>
   <link href="https://jiyeonseo.github.io/2018/05/11/Introduction-to-Kubernetes-1/"/>
   <updated>2018-05-11T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2018/05/11/Introduction-to-Kubernetes-1</id>
   <content type="html">&lt;p&gt;refer to edX course &lt;a href=&quot;https://courses.edx.org/courses/course-v1:LinuxFoundationX+LFS158x+1T2018/&quot;&gt;“Introduction to Kubernetes”&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Container Orchestrator 중 하나인 쿠버네티스. 
Container는 무엇이며, Container Orchestration은 왜 필요한지
그리고 쿠버네티스의 특징은 무엇이 있는지 공부하며 정리 하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;containers&quot;&gt;Containers?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;an application-centric way to deliver high-performing, scalable applications on the infrastructure of your choice&lt;/li&gt;
  &lt;li&gt;container image : bundle the application along with its runtime and dependencies.&lt;/li&gt;
  &lt;li&gt;이 이미지를 가지고 컨테이너 환경을 독립적으로 실행 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;container-orchestration&quot;&gt;Container Orchestration?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;QA 단계에서는 하나의 호스트와 하나의 테스트 어플리케이션만으로도 테스트가 가능하다&lt;/li&gt;
  &lt;li&gt;하지만 실제 production 모드에서는
    &lt;ul&gt;
      &lt;li&gt;Fault-tolerant&lt;/li&gt;
      &lt;li&gt;확장 가능해야하며&lt;/li&gt;
      &lt;li&gt;리소스를 효율적으로 사용해야하며&lt;/li&gt;
      &lt;li&gt;각각의 어플리케이션들을 찾고 서로 커뮤니케이션 할 수 있어야 하며&lt;/li&gt;
      &lt;li&gt;외부 세계와도 연결가능하며&lt;/li&gt;
      &lt;li&gt;다운타임 없이 업데이트 혹은 롤백이 되어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Container orchestrator : 위의 조건들을 모두 만족할수 있도록 도와주며, 클러스터로 모든 호스트들을 묶어주는 툴.&lt;/li&gt;
  &lt;li&gt;ex) Docker Swarm, Kubernetes, Mesos Marathon, Amazon ECS, Hashicorp Nomad.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-use-container-orchestrators&quot;&gt;Why use Container Orchestrators?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;여러 호스트들을 묶고 클러스터로 만들어준다.&lt;/li&gt;
  &lt;li&gt;다른 호스트들에서 컨테이너들을 스케쥴링&lt;/li&gt;
  &lt;li&gt;같은 클러스터 내 다른 호스트에서 돌고있는 컨테이너들끼리 통신할수 있게 해준다.&lt;/li&gt;
  &lt;li&gt;컨테이너와 스토리지를 묶어준다.&lt;/li&gt;
  &lt;li&gt;서비스와 같이 higher-level construct와 비슷한 타입의 컨테이너로 묶어준다.&lt;/li&gt;
  &lt;li&gt;계속해서 리소스 사용을 확인하며 필요한 경우 optimize&lt;/li&gt;
  &lt;li&gt;컨테이너 내 application 의 접근을 보장해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;where-to-deploy-container-orchestrators&quot;&gt;Where to deploy container orchestrators?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;대부분의 오케스트레이터들은 원하는 인프라스트럭쳐 위에서 배포 가능하다&lt;/li&gt;
  &lt;li&gt;개인 로컬, AWS, OpenStack 도 가능하며&lt;/li&gt;
  &lt;li&gt;Google Could 내 Google Kubernetes Engine이나 Azure Container Service 의 경우원 클릭으로 설치 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-kubernetes&quot;&gt;What is Kubernetes?&lt;/h1&gt;

&lt;p&gt;“Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이름의 어원은 그리스어 κυβερνήτης:&lt;/li&gt;
  &lt;li&gt;조타수, 키잡이 라는 뜻.&lt;/li&gt;
  &lt;li&gt;즉, 컨테이너를 운반하는 매니저 라고 생각하면 된다.&lt;/li&gt;
  &lt;li&gt;k8s 이라고 쓰이기도 한다.&lt;/li&gt;
  &lt;li&gt;Google Borg system에서 시작되었으며, Go language로 쓰여졌다.&lt;/li&gt;
  &lt;li&gt;Apache License Version 2.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 블로그는 2018년 2월, 1.9 stable version을 기준으로 하고 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;kubernatetes-feature&quot;&gt;Kubernatetes Feature&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Automatic binpacking
    &lt;ul&gt;
      &lt;li&gt;쿠버네티스는 자동으로 리소스 사용량과 제약조건에 따라서 커네이너들을 스케쥴링 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Self-healing
    &lt;ul&gt;
      &lt;li&gt;만약 노드에서 실패가 일어나면 자동적으로 대체하고 재 스케쥴링을 한다.&lt;/li&gt;
      &lt;li&gt;만약 헬스체크에 응답이 제대로 오지않으면 컨테이너를 킬하고 재시작한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Horizontal scaling
    &lt;ul&gt;
      &lt;li&gt;CPU나 메모리와 같은 리소스 사용을 기반으로 자동적으로 확장 가능하다.&lt;/li&gt;
      &lt;li&gt;custom metrics에 따라 다이나믹하게 화장도 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service discovery and Load balancing
    &lt;ul&gt;
      &lt;li&gt;DNS를 이용하여 컨테이너 그룹을 세팅할수도 있다.&lt;/li&gt;
      &lt;li&gt;이 DNS를 Kunernetes service라고 부른다.&lt;/li&gt;
      &lt;li&gt;쿠버네티스는 이 service들을 자동으로 찾아내고 서비스 내 컨테이너들에게 request를 load-bancing 할수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Automated rollouts and rollbacks
    &lt;ul&gt;
      &lt;li&gt;다운타임 없이 설정값 혹은 새 버전으로 배포 혹은 롤백 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Secrets and configuration management
    &lt;ul&gt;
      &lt;li&gt;새로 이미지를 빌드하지않고도 secrets나 설정값을 변경할 수 있다.&lt;/li&gt;
      &lt;li&gt;secret 을 이용하면 감춰야 하는 정보들을 Github과 같은 stck configuration에 보이지 않고 설정 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Storage orchestration
    &lt;ul&gt;
      &lt;li&gt;With Kubernetes and its plugins, we can automatically mount local, external, and storage solutions to the containers in a seamless manner, based on software-defined storage (SDS).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Batch execution
    &lt;ul&gt;
      &lt;li&gt;배치성 잡 실행 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;case-studies&quot;&gt;Case studies&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Pearson, eBay, Huawei, …&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/case-studies/&quot;&gt;https://kubernetes.io/case-studies/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kubernetes-architecture&quot;&gt;Kubernetes Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/kubernetes/Kubernetes_Architecture1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;main-components&quot;&gt;main components&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;master nodes&lt;/li&gt;
  &lt;li&gt;worker nodes&lt;/li&gt;
  &lt;li&gt;distributed key-value store : etcd&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;master-node&quot;&gt;master node&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/kubernetes/Master_Node1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쿠버네티스 클러스터 관리&lt;/li&gt;
  &lt;li&gt;모든 administrative task의 시작점&lt;/li&gt;
  &lt;li&gt;CLI, GUI(대시보드) 혹은 API를 통해 커뮤니케이션 할 수 있다.&lt;/li&gt;
  &lt;li&gt;fault tolerance를 위해서 한개 이상의 마스터 노드를 한 클러스터 안에 둘 수 있다.
    &lt;ul&gt;
      &lt;li&gt;한개 이상의 마스터 노드를 가진다면 HA(high availability) 모드라 하며&lt;/li&gt;
      &lt;li&gt;하나의 노드가 leader 모든 동작들을 관장하고 나머지는 follower 임.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클러스터 상태값(state)을 관리하기 위해 etcd(https://coreos.com/etcd/) 를 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마스터 노드 아래에는 다음과 같은 컴포넌트들이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API server
    &lt;ul&gt;
      &lt;li&gt;모든 administrative task들은 마스터 노드 내 API server를 통해 들어온다.&lt;/li&gt;
      &lt;li&gt;외부에서 REST로 명령어를 보내면 유효성 및 요청 작업을 처리&lt;/li&gt;
      &lt;li&gt;작업 처리 후 결과를 distributed key-value store에 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scheduler
    &lt;ul&gt;
      &lt;li&gt;다른 worker node 에서 일할 work들을 스케쥴링&lt;/li&gt;
      &lt;li&gt;각각 노드들의 리소스 사용량을 알고 있다.&lt;/li&gt;
      &lt;li&gt;그 밖에도 유저 혹은 작업자의 constraints 도 알고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controller manager
    &lt;ul&gt;
      &lt;li&gt;쿠버네티스 클러스터의 상태를 조절하는 control loops들을 관리.&lt;/li&gt;
      &lt;li&gt;각각의 control loop들은 알맞는 상태(desired state)값을 알고 현재의 상태값을 API server를 통해 계속 모니터링 한다.&lt;/li&gt;
      &lt;li&gt;만약 올바른 상태값과 현재 상태값이 다르면 알맞는 단계를 거쳐 같도록 만든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;etcd
    &lt;ul&gt;
      &lt;li&gt;distributed key-value store&lt;/li&gt;
      &lt;li&gt;마스터 노드의 일부.&lt;/li&gt;
      &lt;li&gt;외부에 의해 설정될수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;worker-node&quot;&gt;Worker node&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/kubernetes/Worker_Node.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pod을 통해 어플리케이션이 run되는 머신(VM, physical sever…)&lt;/li&gt;
  &lt;li&gt;master node에 의해 컨트롤링 된다.&lt;/li&gt;
  &lt;li&gt;Pod : worker node에서 스케쥴링되며 run 하고 연결하기 위해 꼭 필요한 tool이다.  Scheduling unit in Kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;워커 노드 아래에는 다음과 같은 컴포넌트들이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Container runtime
    &lt;ul&gt;
      &lt;li&gt;컨테이너의 lifecyle을 실행시키고 관리하기 위해 사용&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://containerd.io/&quot;&gt;containerd&lt;/a&gt;, &lt;a href=&quot;https://coreos.com/rkt/&quot;&gt;rkt&lt;/a&gt;, &lt;a href=&quot;https://linuxcontainers.org/lxd/&quot;&gt;lxd&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;간혹 Docker를 container runtime이라고도 하는데 정확히 따지자면 도커는 continer untime으로 containerd를 사용하는 플랫폼이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kubelet
    &lt;ul&gt;
      &lt;li&gt;각 워커 노드들과 마스터 노드가 커뮤니케이션 할수 있도록 하는 agent.&lt;/li&gt;
      &lt;li&gt;Pod으로 부터 여러가지 정의를 받고 pod과 연결된 컨테이너들을 실행시킨다.&lt;/li&gt;
      &lt;li&gt;Kuberlet은 Container runtime과 Container Runtime Interface(CRI를 통해 연결)
&lt;img src=&quot;/images/kubernetes/CRI.png&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;kubelet &amp;lt;-&amp;gt; CRI shim : to perform container and image operations.
        &lt;ul&gt;
          &lt;li&gt;CRI는 두개의 서비스를 구현 : &lt;code class=&quot;highlighter-rouge&quot;&gt;ImageService&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeService&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageService&lt;/code&gt; : Image 와 관련된 동작들을 책임&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeService&lt;/code&gt; : 모든 Pod과 container와 관련된 동작들을 책임.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CRI shims
    &lt;ul&gt;
      &lt;li&gt;ex) dockershims 
&lt;img src=&quot;/images/kubernetes/dockershim.png&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;ex) cri-containerd   &lt;br /&gt;
&lt;img src=&quot;/images/kubernetes/cri-containerd.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kube-proxy
    &lt;ul&gt;
      &lt;li&gt;Pods가 어플리케이션과 직접 커넥션 맺는것보다 logical constuct인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 를 endpoint로 연결한다. 이 Service 그룹은 pod과 연결되어 로드발랜싱을 해준다.&lt;/li&gt;
      &lt;li&gt;kube-proxy 는 각각의 워커 노드의 실행해주고, 각 Service endpoint를 위한 API server로 들어오는 network proxy.&lt;/li&gt;
      &lt;li&gt;각각의 Service endpoint마다 kube-proxy가 설정되어 route된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;### etcd를 통한 상태 관리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;etcd는 &lt;a href=&quot;https://web.stanford.edu/~ouster/cgi-bin/papers/raft-atc14&quot;&gt;Raft Consensus Algorithm&lt;/a&gt; 을 기반으로한 key-value sotre이다.&lt;/li&gt;
  &lt;li&gt;항상 그룹 내 하나는 master이며 나머지는 follower이다.&lt;/li&gt;
  &lt;li&gt;Go language&lt;/li&gt;
  &lt;li&gt;Kubernaetes 에서는 cluster state 저장 뿐만 아니라 configuration detail도 저장한다. ex) subnets, ConfigMaps, Secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;네트워크-setup&quot;&gt;네트워크 setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;각 Pod는 반드시 유니크한 IP를 할당해야한다
    &lt;ul&gt;
      &lt;li&gt;container networking을 위해 두가지 선택지가 있다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Container Network Model(CNM)&lt;/strong&gt; proposed by Docker&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Container Network Interface(CNI)&lt;/strong&gt; proposed by CoreOS « Kubernetes uses this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 내 Container들끼리 커뮤니케이션 가능하다
    &lt;ul&gt;
      &lt;li&gt;Linux에서는 모든 엔티티끼리 &lt;strong&gt;network namespace&lt;/strong&gt;를 사용하는데, Pod 내 컨테이너들끼리 이 network namespace를 공유하여 서로 커뮤니케이션을 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 는 클러스터내 다른 Pod과 커뮤니케이션 가능하다
    &lt;ul&gt;
      &lt;li&gt;Routable Pods and nodes, using the underlying physical infrastructure, like Google Kubernetes Engine&lt;/li&gt;
      &lt;li&gt;Using Software Defined Networking, like Flannel, Weave, Calico, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설정에 따라 pod 내 배포된 application는 외부와도 연결 가능하다.
    &lt;ul&gt;
      &lt;li&gt;kube-proxy 를 이용해서.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Gitbook 시작해보자</title>
   <link href="https://jiyeonseo.github.io/2017/06/29/move-to-gitbook/"/>
   <updated>2017-06-29T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2017/06/29/move-to-gitbook</id>
   <content type="html">&lt;p&gt;요즘 개발자들에게 블로그는 기본이라고들 한다.
하지만 블로그는 확실히 귀찮다.&lt;/p&gt;

&lt;p&gt;편하게 쓰려고 github.io로 이사 왔는데 여전히 불편하다. github을 사용한다면 어찌되었던 Git의 flow를 따르게 되고 나는 바로 글을 올리고 싶지만 commit &amp;amp; push 역시 귀찮다.&lt;/p&gt;

&lt;p&gt;그리고 사실… 지금의 theme도 고르고 또 고른거지만 100% 맘에 들지 않고 또 내 입맛에 맞게 고치려고 하면 끝도 없고 나의 센스는 더더욱 없다..&lt;/p&gt;

&lt;p&gt;고쳐봤자 나아지지 않더라..
그리고 지금 테마의 가장 큰 문제는 syntax hightlight가 너무너무너무 맘에 안든다 .. ㅠㅠ&lt;/p&gt;

&lt;p&gt;하이라이트가 괜찮은 테마는 그냥 전체적인 페이지가 맘에 안들고
맘에 드는걸 찾으려고 하다보면 오히려 중요한 컨텐츠는 뒷전으로 밀리고 예쁘게 블로그 꾸미기만 2박 3일은 꼬박 걸린다. 그리고 다 적용후에 맘에 안들어서 ㅋㅋ 다른 테마 찾는데 또 2박 3일.&lt;/p&gt;

&lt;p&gt;그래서 간단하게 github의 마크다운(md)을 이용할까 했는데 깃헙의 가장 큰 단점 ㅠ.ㅠ
폴더 구조를 한번에 보기 어렵다. 물론 크롬 extension을 설치하면 되지만… 나 뿐만 아니라 다른 사람에게도 좋은 정보를 전달하기 위해 사용하는 것인데 누구에게나 똑같이 편한 화면이였으면 했다.&lt;/p&gt;

&lt;p&gt;그리하여 고른것이 &lt;a href=&quot;https://www.gitbook.com&quot;&gt;gitbook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;gitbook은 많은 오픈소스들의  API Documentaion 용도로 많이 쓰이고 있다.
실제로 생성시에도 API Document 특화 되어있는 template도 있다.&lt;/p&gt;

&lt;p&gt;내가 생각하는 gitbook의 장점은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;좌측에 목록이 깔끔하게 나오며 edit 시에 드래그앤드랍을 이용한 순서변경/하이라키 구성이 편하다.&lt;/li&gt;
  &lt;li&gt;syntax hightlight가 깔끔하다 (아직 언어가 많지는 않다. 그래도 대충 잘 됨)&lt;/li&gt;
  &lt;li&gt;저장 후 publish가 클릭 한번에 된다&lt;/li&gt;
  &lt;li&gt;traffic 이라는 메뉴에 들어가게되면 간단한 통계가 나온다 (GA에 비하면 많이 약하지만 이정도면 만족)&lt;/li&gt;
  &lt;li&gt;Discussion을 통해 댓글 이용가능. post마다 안되는건 조금 아쉽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하지만 확실히 긴 글을 읽기에는 그닥 좋은 것 같지도 않다.
그리하여 코드/짧은 개념 정리 레벨로 조금씩 채워 나가는 중.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Gitbook.png&quot; alt=&quot;깃헙페이지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내 Gitbook : &lt;a href=&quot;https://www.gitbook.com/book/jiyeonseo/daily/&quot;&gt;https://www.gitbook.com/book/jiyeonseo/daily/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[책]코딩을 지탱하는 기술</title>
   <link href="https://jiyeonseo.github.io/2017/06/21/skill-for-coding/"/>
   <updated>2017-06-21T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2017/06/21/skill-for-coding</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://book.daum.net/detail/book.do?bookid=BOK00021363945IN&quot;&gt;(더 나은 코딩을 위한) 코딩을 지탱하는 기술원리로 깨우치는 프로그래밍 기법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;최근 &lt;a href=&quot;http://m.zdnet.co.kr/column_view.asp?article_id=20170616090644#imadnews&quot;&gt;임작가님의 글&lt;/a&gt;을 보고 과연 어떻게 공부를 하는것이 좋을까? 어떻게 해야 기본 실력을 기를 수 있을까? 를 고민하다가 찾게된 책이다.&lt;/p&gt;

&lt;p&gt;책이 작고 얇기도 하고, 문체가 정말 친절하고 재밌어서 술술 읽힌다. 하지만 결코 가벼운 내용이 아니다.
한 줄,한 줄 놓치기 아까울 정도로 깊이 있는 이야기와 설명으로 꽉 차있고, 평소에 깊이 생각해 보지 못했던 부분에 대해 끊임없이 질문을 던지고 있다.&lt;/p&gt;

&lt;p&gt;예를 들어, “if는 왜 있는 걸까?”&lt;/p&gt;

&lt;p&gt;너무 당연해서 고민 없이 썼었던 것들에 대해 물음을 이어나간다.&lt;/p&gt;

&lt;p&gt;아마 나를 비롯한 많은 개발자들이 현업에서는 주로 쓰는 기술, 언어가 정해져있고 또 새로나오는, 새로 뜨는 기술과 언어를 숨가쁘게 따라가고 있을 것이다.
그리고 “개발자는 평생 공부해야해. 너무 바빠.”라고 하며 들어오지 않는 문법, 개념들과 싸우고 있을 것이다.&lt;/p&gt;

&lt;p&gt;언어들을 보면 대부분의 언어가 가지는 공통적인 철학, 개념들이 있는데 이 책에서는 그 개념들이 어떠한 역사적인 원인에 따라 생성되었는지 그리고 그러한 개념을 이어나가는 언어들은 어떻게 해석하고 있는지 재미있게 풀어나간다.&lt;/p&gt;

&lt;p&gt;다 읽고나니 뭐랄까 이제 새로운 언어, 새로운 기술을 배울 때의 마음가짐을 배운 것 같아서 자신감이 솟는다.&lt;/p&gt;

&lt;p&gt;“어떤 언어를 공부해야 하나요?”, “어떤 기술들을 공부해야 하나요?”, “어떤 기술이 앞으로 뜰까요?”, “어떻게 해야 프로그래밍을 잘 할 수 있나요?” 라는 질문을 해본적 있는 사람이라면 꼭 한번 이 책을 읽어보길 바란다.&lt;/p&gt;

&lt;p&gt;너무 당연하게 받아들이고 있던 Class에 대해 설명하는 부분이 너무 크게 와닿아 한 구절 인용하며 마무리 하겠다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java는 프로그램을 만들 때 우선 클래스를 만드는 언어다. Java로 프로그래밍을 가르치기 위해선 우선 상세한 설명 없이 바로 클래스를 사용해야 한다는 사정도 잘 알고 있다. 하지만 클래스는 수십년 전에 누군가가 ‘이런 구조가 있으면 편리하겠다.’고 만들어본 것에 불과하다. 그런데 ‘클래스란 것이 있어. 주문을 외운다고 생각하고 사용해’ 라고 설명해버리면 왜 클래스가 필요한지는 영영 알 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스란 ‘그렇게 쓰는 게 편하다’는 이유로 만들어진 규칙에 불과하다. 물리 법칙이나 우주의 진리가 아닌, 사람이 정한 규칙이다. 그렇다면 왜 그런 약속을 정했는지, 언어 설계자의 의도를 파악하는 것이 빠르게 이해 할 수 있는 지름길일 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Github Pages 활용</title>
   <link href="https://jiyeonseo.github.io/2017/05/22/github-pages-practice/"/>
   <updated>2017-05-22T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2017/05/22/github-pages-practice</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/githubpages.png&quot; alt=&quot;깃헙페이지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Github에서는 소셜 코딩뿐만 아니라 &lt;a href=&quot;https://pages.github.com/&quot;&gt;Pages&lt;/a&gt; 기능도 제공하고 있다.&lt;/p&gt;

&lt;p&gt;가장 많이 사용하는 방법은 이 블로그처럼 블로그로 사용하는 방법이다.
블로그로 사용하기 위해서는 &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;Jekyll&lt;/a&gt; 이나 &lt;a href=&quot;https://hexo.io/ko/&quot;&gt;Hexo&lt;/a&gt;를 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; 라는 리파지토리를 생성하면 같은 도메인명으로 바로 블로그를 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;이와 마찬가지 방법으로 다른 repository 마다 Github Pages를 만들 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;자신이 페이지를 만들고자 하는 리파지토리에 들어가 “Settings” 탭을 들어간다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/githubpage-settings.png&quot; alt=&quot;깃헙 리포 세팅&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;가장 먼저 나오는 “Options” 탭에서 아래로 내려가다 보면&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Github Pages”을 볼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/githubpage-settings-pages.png&quot; alt=&quot;깃헙 페이지 이미지&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법-1-theme-chooser&quot;&gt;방법 1. Theme chooser&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;깃헙에서 제공하는 지킬 테마를 그대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;README.MD&lt;/code&gt; 보여준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;방법-2-source&quot;&gt;방법 2. Source&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; 브랜치의 소스를 pages로 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs&lt;/code&gt; 하위 폴더에 작성할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 방법을 통해 간단하게 자신만의 페이지를 만들 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이렇게 Pages를 사용하게 되면 github에 있는 raw 소스를 cdn 처럼 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;예를 들어, Github에 올라간 CSS 파일을 raw를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link href=&quot; &quot;&amp;gt;&lt;/code&gt; 적용하게 되면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Resource interpreted as Stylesheet but transferred with MIME type text/plain: &quot;https://raw.githubusercontent.com/twbs/bootstrap/v4-dev/dist/css/bootstrap.css&quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Console에 위와 같은 경고가 뜨며 사용할 수가 없다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서는&lt;/p&gt;

&lt;h3 id=&quot;1-rawgit-cdn-서비스를-이용하거나&quot;&gt;1. &lt;a href=&quot;https://rawgit.com/&quot;&gt;RawGit&lt;/a&gt; cdn 서비스를 이용하거나&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link href=&quot;https://cdn.rawgit.com/twbs/bootstrap/v4-dev/dist/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-위-방법-2-source-로-github-page를-만들어-파일-path를-그대로-사용하면-된다&quot;&gt;2. 위 &lt;em&gt;방법 2. Source&lt;/em&gt; 로 Github Page를 만들어 파일 path를 그대로 사용하면 된다.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://{username}.github.io/{repository}/{file}&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;link href=&quot;https://jiyeonseo.github.io/bootstrap/dist/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Typescript 시작</title>
   <link href="https://jiyeonseo.github.io/2017/05/14/typescript-introduction/"/>
   <updated>2017-05-14T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2017/05/14/typescript-introduction</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://egghead.io&quot;&gt;Egghead&lt;/a&gt;의 &lt;a href=&quot;https://egghead.io/courses/use-types-effectively-in-typescript&quot;&gt;Use Types Effectively in TypeScript&lt;/a&gt;를 공부하며 정리한 내용입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;typescript&quot;&gt;Typescript&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript is JavaScript with static typing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;환경-세팅&quot;&gt;환경 세팅&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g typescript // npm으로 설치 
$ tsc -v // 버전
$ tsc main.ts // main.ts &amp;gt;&amp;gt; main.js 변환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;playground&quot;&gt;playground&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/&quot;&gt;https://www.typescriptlang.org/play/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;union-types&quot;&gt;Union Types&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다양한 타입을 받을 수 있도록 해줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnSomthing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Union type을 변수에 선언해 줄 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnSomthing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;내부에서 타입 검사를 해볼 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnSomthing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;someThing = &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;joinedThings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;someThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;joinedThings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;joinedThings = &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;joinedThings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;returnSomthing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// someThing = 123&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;returnSomthing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// joinedThings = abc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;type 에는 object가 아닌 것도 들어갈 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gimmeStuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// error TS2339: Property 'name' does not exist on type 'string | { name: string; }'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// object와 not object가 함께 있으면 에러가 남.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coolThings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gimmeCoolthings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coolThings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// error TS2339: Property 'name' does not exist on type '{ name: string; } | { id: number }'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error TS2339: Property 'name' does not exist on type '{ name: string; } | { id: number }'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error TS2339: Property 'id' does not exist on type '{ name: string; } | { id: number }'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error TS2339: Property 'id' does not exist on type '{ name: string; } | { id: number }'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// not object끼리 있더라도 같은 parameter가 없으면 에러가 남&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stuffAndThings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;meh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gimmeStuffAndThings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stuffandThings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// It works! 같은 parameter가 있으면 된다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;string-literal-type&quot;&gt;string literal type&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;아무거나 올 수 있다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;miles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MILES&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MILES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// literal type. type과 같은 값, null, undefined 만 가능.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;이걸 이용해서 parameter에 들어올 값들을 제한 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distanceMetric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MILES&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;KILOMETERS&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;METERS&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YARDS&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;FEET&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INCHES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distanceMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`You moved &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// error TS2345: Argument of type '&quot;dragon&quot;' is not&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// assignable to parameter of type '&quot;MILES&quot; | &quot;KILOMETERS&quot; | ... '&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;interface&quot;&gt;interface&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;superHeroName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superVillain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;superHeroName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;같은 모양의 변수를 많이 만들어야 할 때 interface를 이용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ? : optional&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// Types of property 'alias' are incompatable. Type 'boolean' is not assignable to type 'string'.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;      
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superVillain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jack Napier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Object literal may only specify known&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Joker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// properties and 'secretIdentity' does not&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// exist in type 'ComicBookCharacter'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;함수에서 parameter에 interface로 받을 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; has no secret identity`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superHero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;interface 내에서 다른 interface를 사용도 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AttackFunction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// opponent와 attackWith를 parameter로 받는 function&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KrustyTheClown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;inebriationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AttackFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; attacked &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, who's health = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superVillain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jack Napier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Joker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               
  &lt;span class=&quot;na&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;insanity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackFunc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;interface를 extends 할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OptionalAttributes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;insanity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dexterity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;healingFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OptionalAttributes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;class&quot;&gt;class&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;타입스크립트에서 class는 function 이다. function 은 object 이고 즉, property를 가질 수 있다.&lt;/li&gt;
  &lt;li&gt;class는 method도 가질 수 있다.&lt;/li&gt;
  &lt;li&gt;method에서는 function이라고 표현하지 않아도 된다.&lt;/li&gt;
  &lt;li&gt;method명(parameter){ }&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;attackFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; attacked &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; who's health = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;클래스 내 property들은 기본 public. private으로 하면 class 밖에서는 .으로 접근할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;attackFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'s secret identity is $(this.secretIdentity)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;constructor arguments를 이용하면 property를 따로 정의할 필요가 없다.&lt;/li&gt;
  &lt;li&gt;이 경우 public, private 와 같은 access modifiers를 반드시 함께 써주어야 한다.&lt;/li&gt;
  &lt;li&gt;없으면 그저 constructor의 argument로만 간주된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;attackFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attackWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getSecretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'s secret identity is $(this.secretIdentity)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;class는 static property 역시 가지고 있다.&lt;/li&gt;
  &lt;li&gt;instance에서는 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;오직 class를 통해서만 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instanceTeam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;instanceTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;oddCouple, [storm, theBlob]); // error!!!!  

let team = ComicBookCharacter.createTeam(&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oddCouple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;class역시 extends할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;traits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;empathy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;strong moral code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getSecretId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// not working!!!  &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// extends 된 class 에서는 부모 class의 private property에 접근 할 수없다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// private은 자신이 속해있는 container에서만 접근 가능하다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 이 경우, secretIdentity 를 protected로 변경해주면 된다.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperVillain&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;flaws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hubris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;always explains evil plan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jubilee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jubilee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;233&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jubilation Lee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scarletWitch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperVillain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Scarlet Witch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;233&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wanda Maximoff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;만약 자식 class에서 constructor를 만드려면 반드시 super(); 를 호출해 주어야 한다.&lt;/li&gt;
  &lt;li&gt;부모 class의 argument를 모두 받아야한다.&lt;/li&gt;
  &lt;li&gt;constructor 내부에서 꼭! 첫번째로 불려야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secretIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperVillain&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComicBookCharacter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;flaws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hubris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;always explains evil plan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'${this.alias} eats kittens!!!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;type-converting&quot;&gt;Type Converting&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;(something as Type)&lt;/li&gt;
  &lt;li&gt;
    &lt;Type&gt;something


&lt;/Type&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;powers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;savesTheDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BadGuy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;badDeeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;getRandomBadDeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;commitBadDeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;saveDayOrBadDeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BadGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if (&amp;lt;SuperHero&amp;gt;something.powers) {} // angle bracket syntax&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;savesTheDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BadGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commitBadDeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;saveDayOrBadDeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dazzler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Dazzler transduces sonic vibrations into light to save the day!!!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;saveDayOrBadDeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;badGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// BadGuy farts on old folks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;js로 바뀐걸 확인해보면 convert가 모두 사라진 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generics&quot;&gt;Generics&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jeanGrey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jean Grey&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wolverine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wolverine&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jeanGrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;powers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;telekinesis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;esp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;adamantium claws&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ { name: 'Jean Grey' }, 'cool' ]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ 'adamantium claws' ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;위와같이 할 경우, array 내에 각각 다른 type들이 들어가게 됨.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Generics :  function 뒤에 &lt;T&gt; 를 써주고 parameter type에 (param : T) 와 같이 쓴다.&lt;/T&gt;&lt;/li&gt;
  &lt;li&gt;꼭 T 일 필요는 없고, cool, test 와 같이 다른 문자열을 쓸 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jeanGrey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jean Grey&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wolverine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wolverine&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jeanGrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;powers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;telekinesis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;esp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;meh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error!!!!!!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jeanGrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it works!!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;adamantium claws&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;function 뒤에 &lt;T&gt; 를 위와 같이 생략해도 되지만 써주는게 IDE에서 작업할 때 더 좋다.&lt;/T&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;meh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error!!!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SuperHero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jeanGrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superHeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it works!!  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pushSomethingIntoCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;adamantium claws&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;interface-generic-constraints&quot;&gt;Interface generic constraints&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Taxes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crocContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mean&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taxContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Taxes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RedCroc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BlueCroc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CrocContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crocUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;blueCrocContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CrocContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BlueCroc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crocUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;class-generic-constraints&quot;&gt;Class generic constraints&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassyContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;classyCrocUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classyCrocContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassyContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// type argument 를 안알려줘도 됨.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;classyCrocContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classyCrocUnit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;classy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 하지만  Crocodile을 extends 한 interface들의 property를 사용할 수 없다.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classyCrocContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassyContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RedCroc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// T을 알려주면&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;classyCrocContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classyCrocUnit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;classy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// IDE에서자동완성도 됨.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;constructor를 사용한 경우&lt;/li&gt;
  &lt;li&gt;type argument를 생략하더라도 property에 값을 셋 할수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Crocodile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{]&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cccUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ccc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BlueCroc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ultra classy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ccc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ultra classy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it works!!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>github에서 travis-ci 연결하기 </title>
   <link href="https://jiyeonseo.github.io/2016/11/16/setting-travis-ci/"/>
   <updated>2016-11-16T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2016/11/16/setting-travis-ci</id>
   <content type="html">&lt;h2 id=&quot;ci&quot;&gt;CI&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;지속적 통합, continuous integration.&lt;/li&gt;
  &lt;li&gt;테스트, 빌드를 자동으로 도와주는 툴.&lt;/li&gt;
  &lt;li&gt;대표적으로 &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;, &lt;a href=&quot;https://www.go.cd/&quot;&gt;Go.cd&lt;/a&gt;, &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt;가 있다.&lt;/li&gt;
  &lt;li&gt;빌드 실패, 혹은 테스트 실패를 로컬에서 미처 확인 못 한 경우, CI의 noti를 받을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연동-방법&quot;&gt;연동 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;https://travis-ci.org/&lt;/a&gt;에 github login을 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;https://travis-ci.org/profile&lt;/a&gt;에서 연결하고자 하는
repository를 허용한다.
    &lt;ul&gt;
      &lt;li&gt;만약 없다면 상단 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sync account&lt;/code&gt;를 눌러 새로고침을 해본다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로젝트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; 설정 파일을 추가한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;각 언어에 맞는 설정은 &lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/&quot;&gt;Document&lt;/a&gt;를 참고하길 바란다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;language: java

jdk:
  - oraclejdk8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;2016년 11월 기준, Java의 경우 default가 jdk7이다.
java 8을 쓸 경우 위와같이 반드시 jdk를 명시해 주어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;commit을 하면 바로 travis-ci가 도는 모습을 확인 할 수 있다.
&lt;img src=&quot;/images/github/2.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;기본적으로 각 commit 마다 웹훅을 통해 자동으로 빌드된다.&lt;/li&gt;
  &lt;li&gt;Pull Request를 보내게되면 연결된 커밋에 따른 빌드 결과가 하단에 나타난다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/github/3.png&quot; /&gt;
예제 : &lt;a href=&quot;https://github.com/jiyeonseo/napucon-cheese-demo/pull/2&quot;&gt;https://github.com/jiyeonseo/napucon-cheese-demo/pull/2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/&quot;&gt;getting-started&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#지프넓얕&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;#지적프로그래밍을위한넓고얕은습관&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Intellij에 Google Style 적용하기</title>
   <link href="https://jiyeonseo.github.io/2016/11/15/setting-java-google-style-to-intellij/"/>
   <updated>2016-11-15T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2016/11/15/setting-java-google-style-to-intellij</id>
   <content type="html">&lt;p&gt;&lt;em&gt;코딩 컨벤션&lt;/em&gt;은 예쁜 코드를 위해서도 필요하지만, 협업시, 장기로 프로젝트를 운영할 때 유용하다.&lt;/p&gt;

&lt;p&gt;특히, 여러사람과 협업할 때, 코드가 흐트러지는 것을 방지하고, 코드리뷰시 쓸때없는 diff를 줄여줘
더 효과적인 코드 리뷰를 할수 있도록 도와준다.&lt;/p&gt;

&lt;p&gt;다양한 스타일 가이드 라인이 있는데, 본 글에서는 &lt;a href=&quot;https://github.com/google/styleguide&quot;&gt;Google Style Guide&lt;/a&gt; 중 Java Style Guide를 Intellij에 적용해보고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;환경&quot;&gt;환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OSX 10.11&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;Intellij Comminity 2016.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정-방법&quot;&gt;설정 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/google/styleguide&quot;&gt;https://github.com/google/styleguide&lt;/a&gt;에서
&lt;code class=&quot;highlighter-rouge&quot;&gt;intellij-java-google-style.xml&lt;/code&gt; 를 다운받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Intellij에서 환경설정(Preference) -&amp;gt; Editor -&amp;gt; Code Style을 선택.
&lt;img src=&quot;/images/intellij-google/1.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상단 magage &amp;gt; import &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;intellij-java-google-style.xml&lt;/code&gt; »&amp;gt; “GoogleStyle” 선택
&lt;img src=&quot;/images/intellij-google/2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;리포맷하는-방법&quot;&gt;리포맷하는 방법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥⇧⌘L&lt;/code&gt; (shift + alt + cmd + L) : 키맵에 따라 차이가 있을 수 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;code &amp;gt; Refomat Code 클릭&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://github.com/HPI-Information-Systems/Metanome/wiki/Installing-the-google-styleguide-settings-in-intellij-and-eclipse&quot;&gt;Installing the coding style settings in Intellij&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#지프넓얕&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;#지적프로그래밍을위한넓고얕은습관&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>github 컨트리뷰션, 이슈, 풀리퀘스트 템플릿 만들기 </title>
   <link href="https://jiyeonseo.github.io/2016/11/15/setting-github-issue-pr-template/"/>
   <updated>2016-11-15T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2016/11/15/setting-github-issue-pr-template</id>
   <content type="html">&lt;p&gt;깃헙의 이슈와 풀리퀘스트는 일종의 커뮤니케이션 도구로 자주 사용된다.&lt;/p&gt;

&lt;p&gt;프로젝트가 커지게 되고, 커미터가 많아지게 되면 커뮤니케이션이 중구난방으로 이루어질 수 있는데,
이때 깃헙에서 제공하는 이슈, 풀리퀘스트 템플릿을 사용하면 좋다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/github/1.png&quot; /&gt;
정형화를 시켜 꼭 기입해야할 내용, 체크사항 등을 더 잘 챙길 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;1-root-directory에-github-을-만들고-template들을-readme-파일로-추가해준다&quot;&gt;1. root directory에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.github/&lt;/code&gt; 을 만들고 template들을 readme 파일로 추가해준다.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONTRIBUTING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISSUE_TEMPLATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PULL_REQUEST_TEMPLATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;2-파일에-마크다운-형식으로-형식을-채워-넣는다&quot;&gt;2. 파일에 마크다운 형식으로 형식을 채워 넣는다.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Fixes # issue_number

Changes proposed in this pull request:
-
-
-

@jiyeonseo

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제 : &lt;a href=&quot;https://github.com/jiyeonseo/napucon-cheese-demo/tree/master/.github&quot;&gt;.github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://github.com/blog/2111-issue-and-pull-request-templates&quot;&gt;Issue and Pull Request templates&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#지프넓얕&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;#지적프로그래밍을위한넓고얕은습관&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[책] '소프트스킬'</title>
   <link href="https://jiyeonseo.github.io/2016/11/10/softskills/"/>
   <updated>2016-11-10T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2016/11/10/softskills</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://book.daum.net/detail/book.do?bookid=KOR9791186659885&quot;&gt;‘소프트 스킬: 평범한 개발자의 비범한 인생 전략 71가지’&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;자극적인 소개 문구(흔한 개발자, 존 손메즈. 그는 어떻게 33세에 은퇴했을까?)로 알고 있던 책이었는데 주변에서 추천을 해주어서 휴가 기간 동안 후루룩 읽었다.&lt;/p&gt;

&lt;p&gt;개발자를 위한 책이지만 개발 기술보다는 마음가짐, 태도, 그리고 커리어에 관련한 이야기로 가득 차 있어 개발자뿐만 아니라 직장인이라면 한번쯤 읽어보면 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;사실 나는 &lt;a href=&quot;simpleprogrammer.com&quot;&gt;simpleprogrammer.com&lt;/a&gt;을 먼저 알고 있었고 메일링을 정기적으로 받고 있었다. 블로그 운영 방법, 글 쓰는 방법 등 정기적으로 짧게 보내주어 영어 공부 겸으로 딱 알맞았는데 , 이후 페이스북에서 지인이 추천해준 유튜브 영상을 통해 짧은 동영상 강의도 가끔 들어보곤 했었다.&lt;/p&gt;

&lt;p&gt;책을 읽으며 정말 고개를 많이 끄덕였다. 나와 생각도 비슷하고 닮은 점이 많은 것 같았다. 이 책을 추천 해준 한 지인분 역시 이 책에서 말하는 개발자와 내가 많이 닮았다며 한번 읽어보라고 해줄 정도였으니. 하지만 요즘 내 모습을 돌아보면 실패에 두려워하고, 바보 같아 보일까 봐 많이 걱정하고, 정체하려고 하는 듯한 느낌이 든다. 예전에는 안 그랬던 것 같은데. 부딪혀보지 않은 도전에 대해 많이 걱정이 늘었다. 이 글을 읽고 있는 사람도 이러한 시기를 겪을 때가 있었던 적이 있을 것이다.&lt;/p&gt;

&lt;p&gt;작가는 시종일관 이야기를 한다. 성장하기 위해서 자기 자신을 실패할 수도 있는 아주 불편한 상황에 밀어 넣어야 한다고.
실패하더라도 걱정하지 말라고. 아무리 바보 같아 보이더라도 대부분 나 말고 다른 사람들은 잘 기억도 못하고, 아무것도 안 하면서 나를 비웃는 사람보다 실패한 사람이 더 낫다고 말이다. 그리고 실패를 할 것을 알더라도 최선을 다하고 노력한 다음 실패한다면 그것은 패배가 아니다. 다시 도전하고 결국 실패한 밑바탕이 더 멋진 개발자로 만들어 준다는 것을 명심하라고 조언한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위인들이 거둔 최고의 성공은 최악의 실패 한 걸음 앞에 있었다.     &lt;br /&gt;
      -나폴레온 힐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;나도 파이팅! 지금 힘들어 하고 있는 모두 파이팅!!&lt;/p&gt;

&lt;h2 id=&quot;작가가-추천하는-책&quot;&gt;작가가 추천하는 책&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스티븐 프레스필드 - 최고의 나를 꺼내라 (The War of Art)&lt;/li&gt;
  &lt;li&gt;데일 카네기 - 인간관계론 (How to win friends and influence people)&lt;/li&gt;
  &lt;li&gt;나폴레온 힐 - 생각하라! 그러면 부자가 되리라(The Master Key to Riches)&lt;/li&gt;
  &lt;li&gt;맥스웰 몰츠 - 맥스웰 몰츠 성공의 법칙(The New Psycho-Cybernetics)&lt;/li&gt;
  &lt;li&gt;노먼 빈센트 필 - 긍정적 사고방식(The power of Positive Thinking)&lt;/li&gt;
  &lt;li&gt;아인 랜드 - 아틀라스(Atlas shrugged)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-개발-도서&quot;&gt;소프트웨어 개발 도서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스티브 맥코넬 - Code Complete&lt;/li&gt;
  &lt;li&gt;로버트 C.마틴 - Clean Code&lt;/li&gt;
  &lt;li&gt;에릭 프리먼 - Head First Design Patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;투자-관련-서적&quot;&gt;투자 관련 서적&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;게리 켈린 - 바닥부터 시작하는 백만장자들의 부동산 투자법(The Millionaire Real Estate Investor)&lt;/li&gt;
  &lt;li&gt;로버트 기요사키 - 부자 아빠 가난한 아빠 (Rich Dad poor dad)&lt;/li&gt;
  &lt;li&gt;케리 기븐 - No-Hype Options Trading:Myths, Realities, and Strategies That Really Work&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;simple-programmer&quot;&gt;Simple programmer&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;메일링 구독과 youtube subscribe를 추천한다. 시간날때 하나씩 꺼내보면 영감을 많이 준다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleprogrammer.com/&quot;&gt;https://simpleprogrammer.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCFxdcuY-S6yjZGq_2cjilHg&quot;&gt;https://www.youtube.com/channel/UCFxdcuY-S6yjZGq_2cjilHg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>[후기] Deview 2016</title>
   <link href="https://jiyeonseo.github.io/2016/10/29/deview-2016/"/>
   <updated>2016-10-29T00:00:00+00:00</updated>
   <id>https://jiyeonseo.github.io/2016/10/29/deview-2016</id>
   <content type="html">&lt;p&gt;개발자 컨퍼런스가 풍성한 10월이다. 저번주 &lt;a href=&quot;http://jiyeonseo.github.io/2016/10/18/tech-planet-2016/&quot;&gt;테크플레닛 2016&lt;/a&gt;을 다녀오고 이번주는 Naver에서 주관하는 &lt;a href=&quot;https://deview.kr/2016/&quot;&gt;Deview 2016&lt;/a&gt;을 다녀왔다.&lt;/p&gt;

&lt;p&gt;Deview는 &lt;a href=&quot;http://jiyeonseo.github.io/2015/09/15/deview2015/&quot;&gt;작년&lt;/a&gt;에 이어 2년째 출석 중이다. 그 전에도 간 적 있었던것 같은데… (블로그에 글이 없으니 헷갈린당…이래서 글을 써놔야해..)&lt;/p&gt;

&lt;p&gt;일단 작년에 비해 참석자가 더 늘어난 것 같았다. 정말 사람 많았다 ;;;
인기 세션은 자리가 모자라서 강연장 곳곳에 그냥 자리에 앉아 듣는 사람들도 많았다.
의자와 의자 사이가 좁아 많이 불편하긴 했다. 노트북을 다들 무릎위에 두고 치다보니 옆사람들과 부딪히는 일이 종종 발생했다.ㅠ
그만큼 Deview 행사의 규모도 커지고 개발자들의 참여도도 높아진 거라 생각한다.&lt;/p&gt;

&lt;p&gt;해가 갈수록 더욱더 볼거리가 풍성해지는 Deview를 보며 한번 놀랐으며, 그 너머로 보이는 네이버의 규모, 로드맵에 대해서 또 한번 감탄사가 절로 나왔다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;인공지능&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;딥 러닝&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;챗봇 api&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;파파고&lt;/code&gt;까지  다양한 최신 기술을 직접 느껴 볼 수 있는 시간들로 가득했다.&lt;/p&gt;

&lt;p&gt;이 외에도 다른 회사들의 크고 작은 트러블슈팅, 개발기 등을 들으며 직접 현업에 가져다 쓰고 싶은 기술들, 개인적으로 라도 공부해보고 싶은 것들을 많이 배울 수 있었다.&lt;/p&gt;

&lt;p&gt;가장 크게 느낀 점은, 머신러닝, 딥러닝은 이제 미룰 수 없는 과제가 된 것 같다.
늦은 것 같지만 ㅠㅠㅠ 아직 진입하고 있는 사람이 많은 것 같으니 이제 미루지 말고 공부를 시작해야겠다.&lt;/p&gt;

&lt;p&gt;그리고 기억에 남는 세션 중 하나는 1일차에 있었던  &lt;a href=&quot;https://deview.kr/2016/schedule#session/159&quot;&gt;Apache Zeppelin과 오픈소스 비즈니스&lt;/a&gt; 였는데, 아파치 재플린이 어떻게 성공적인 오픈소스 프로젝트가 되었는지 공유한 시간이였다.
이번 deview 에서는 개발자 문화 관련 세션이 두개밖에 없었는데, 그 중  하나로 ,개발자로써, 오픈소스에 대한 갈증이 있다면 꼭 발표영상을 보길 바란다.&lt;/p&gt;

&lt;p&gt;요즘 개발자 치고 오픈소스를 단 한번도 사용하지 않았다!! 라는 사람은 없을 것이다. 근데 기여를 하는 사람은 그렇게 많지 않을 꺼라 생각한다.(나 역시 그러하다..힝) 개발자 커리어에 도움이 된다는 것은 알고 있지만 시간을 내기가 어렵거나, 내 실력으로 저렇게 큰 프로젝트에 어떻게 컨트리뷰트를 할까라는 경우가 많을 것 같다.
하지만 강연을 들으며 오픈소스 매력에 흠뻑 빠지게 되었다. 많은 사람들의 github star(개발자들의 로망이 아닐까)와 전 세계인들과의 커뮤니티, 그리고 다양한 글로벌 회사들의 러브콜까지. 그 로켓에 발 하나쯤 사알짝 올려보고 싶은 생각이 많이 들었다. 빨리 찾아봐야징ㅋ&lt;/p&gt;

&lt;p&gt;개발자 컨퍼런스는 항상 즐겁다. 그저 기술 습득의 즐거움 뿐만 아니라, 오랜만에 만나는 개발자 친구들도 좋고 새롭게 만나게 되는 사람들도 좋다.
이 마음 잊지말고 커뮤니티, 오픈소스 등 참여해보도록 해야겠다.&lt;/p&gt;

&lt;p&gt;강연 발표 자료 : &lt;a href=&quot;https://deview.kr/2016/schedule#session&quot;&gt;Deview 2016 Schedule&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 참관 후기 역시 들은 내용 노트를 공유하며 마무리 하고자 한다.
이틀동안 이어진 세션들을 후다닥 정리한거라 저번보다 더 엉망 ㅠ.ㅠ..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;안타깝게도 ㅠ 내가 듣지 못한 세션 중 &lt;a href=&quot;https://deview.kr/2016/schedule#session/137&quot;&gt;Angular2 vs React, React vs Angular2&lt;/a&gt;가 아주 재미있고 핫했다고 한다. 꼭 챙겨보자!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;내-스케쥴과-주제&quot;&gt;내 스케쥴과 주제&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;topic&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article1&quot;&gt;[1] Web Payment API의 현재와 미래 &lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;W3C Web Payments 표준에 대하여 이야기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article2&quot;&gt;[2] REST에서 GraphQL과 Relay로 갈아타기&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GraphQL와 Relay를 풀어나가며 실제 서비스에 어떻게 사용했는지에 대한 경험을 공유&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article3&quot;&gt;[3] Apache Zeppelin과 오픈소스 비즈니스&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Zeppelin 프로젝트를 어떻게 시작해서 성공적인 프로젝트로 만들었는지에 대한 여정을 재미있는 에피소드와 함께 이야기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article4&quot;&gt;[4] 한 달 만에 개발한 하이브리드 앱, 50만 사용자 서비스가 되기까지&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;네이티브 앱 개발 경험이 전혀 없는 웹 프론트엔드 개발자의 100% 웹뷰 하이브리드 앱 개발기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article5&quot;&gt;[5] 5년간의 네이버 웹엔진 개발/삽질기 그리고…&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;웹엔진에 대한 이야기, 그 엔진들의 기술적인 이슈들 뿐만 아니라 새로운 엔진을 만들고 그것으로 제품을 만들려는 시도 속에서 벌어지는 많은 이슈들도 함께 이야기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article7&quot;&gt;[6] 딥러닝을 활용한 이미지 검색: 포토요약과 타임라인&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;이미지 검색 서비스를 개선하기 위해 딥러닝을 활용한 다양한 방법을 소개하고, 검색 서비스의 인터페이스 개선에 응용한 대표적인 두가지 사례를 자세하게 소개&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article7&quot;&gt;[7] 딥러닝과 강화 학습으로 나보다 잘하는 쿠키런 AI 구현하기&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿠키런 AI 구현에 사용된 네 가지 연구(Deep Q-learning, Double Q-learning, Dueling network, Prioritized Experience Replay)를 소개하고 각각의 기술이 얼마나 성능을 향상시켰는지 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article8&quot;&gt;[8] Backend 개발자의 Neural Machine Translation 개발기&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Neural Machine Translation(NMT) 개발에 도전해서 성공한 경험을 공유&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article9&quot;&gt;[9] 네이버 콘텐츠 통계서비스 소개 및 구현 경험 공유&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;람다아키텍쳐를 살펴 보고, Realtime과 Batch 데이타 흐름을 효과적으로 처리할 수 있는 구현체를 직접 구현 내용 공유&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#article10&quot;&gt;[10] 딥러닝 예제로 보는 개발자를 위한 통계&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;데이터마이닝, 머신러닝 그리고 통계 , 통계로 바라본 딥러닝 , 개발자를 위한 통계&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;div id=&quot;article1&quot;&gt;&lt;/div&gt;

&lt;h1 id=&quot;1-web-payment-api의-현재와-미래&quot;&gt;[1] Web Payment API의 현재와 미래&lt;/h1&gt;

&lt;h2 id=&quot;webpayment-api&quot;&gt;webpayment api&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;W3C (참고: &lt;a href=&quot;https://www.w3.org/Payments/&quot;&gt;https://www.w3.org/Payments/&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;working group으로 표준으로 진행하는중&lt;/li&gt;
  &lt;li&gt;2015 oct 에서 시작.&lt;/li&gt;
  &lt;li&gt;지금까지 한 일년정도 된것&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;삼성-인터넷앱&quot;&gt;삼성 인터넷앱&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;크로미움 엔진&lt;/li&gt;
  &lt;li&gt;구글 플레이에 업데이트 햇음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-motivation&quot;&gt;why? Motivation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;카트 &amp;gt; 결제 : 68%&lt;/li&gt;
  &lt;li&gt;다양한 이유가 있음. 근데 모바일만 따로 이유를 찾아봤더니&lt;/li&gt;
  &lt;li&gt;mobile은 66%가 더 pc보다 높음.  ( 거의 90% 는 결제를 안한다)&lt;/li&gt;
  &lt;li&gt;가장 큰 이유. form을 입력하기 싫다. (오타, 화면을 채우는 키보드 등)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;신용카드를-이용한-결제&quot;&gt;신용카드를 이용한 결제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;3가지 페이먼트 - payment request API, payment method identifiers, basic card payment&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저 :  지금 준비된건 크롬&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;뭐가 바뀔꺼냐.
    &lt;ul&gt;
      &lt;li&gt;카드넘버나, expire date 등을 입력하지 않아도 되게&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원버튼 for payment request api&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어떻게 바뀌냐&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;미국같은 경우에는 checkout 버튼을 누르면 바로 결제 form 이 반이 뜨고 잇어서 더 복잡해 보임.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;온라인쇼핑몰에서는 정해진 api를 주기만 하면 브라우저에서 form 을 알아서 만들어 주겠다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;쇼핑몰이 가격 정보를 넘기면&lt;/li&gt;
  &lt;li&gt;브라우저에 저장된 신용카드와 주소를 저장&lt;/li&gt;
  &lt;li&gt;소비자가 아무런 입력도 하지 않고 바로 결제 할 수 있도록 해주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flow&quot;&gt;flow&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;내가 받을 payment method 리스트를 넘겨주고 (아메리카 익스프레스. 비자카드 등)
    &lt;ul&gt;
      &lt;li&gt;내가 얼마를 받아야 한다 .&lt;/li&gt;
      &lt;li&gt;브라우저는 그 저장된거랑 mehods 교집합을 보여줌.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;협의된 결제 네트웍에 대한&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;어느 쇼핑몰에 가든 같은 form 을 보니 익숙.편안함.&lt;/li&gt;
  &lt;li&gt;merchant 입장에서는 따로 구현할 필요가 없음.
    &lt;ul&gt;
      &lt;li&gt;서버에 저장 하게 될 경우 보안도 신경써야 하는데 이런 mainteinanace cost가 들지 않음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-level&quot;&gt;code level&lt;/h2&gt;

&lt;h3 id=&quot;payment-request&quot;&gt;Payment Request&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSON으로 요청
    &lt;ul&gt;
      &lt;li&gt;methodData //  rufwpqkdqjq&lt;/li&gt;
      &lt;li&gt;Details = // 뭘 결제할꺼냐&lt;/li&gt;
      &lt;li&gt;Options // 수집할 내용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;paymentmethod&quot;&gt;paymentMethod&lt;/h4&gt;

&lt;h4 id=&quot;details&quot;&gt;Details&lt;/h4&gt;

&lt;h4 id=&quot;options&quot;&gt;Options&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 어떤 정보를 받을 것인지를 정의
- Ex) request shopping false이면 뭐 아이템? 사는거라 생각하고 택배 정보 노노 ### show()
- Promise
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;shipping-address-change&quot;&gt;Shipping Address Change&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- merchant가 택배이슈가 잇을때 ex) 수도권만 배송등
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;shipping-optionchange&quot;&gt;Shipping OptionChange&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;배송 옵션에 따른 가격 변동 ex) 빠른 배송 + 5000원 같은 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;payment-response&quot;&gt;Payment Response&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- pg로 결제 요청
- Complete 에 따라서 결제 성공/실패를 response 보내줌
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;browser 에서 바로 payment gateway (pg)로 바로 보내는게 아니라 merchant로 다시 보내주시면 알아서 서버호출을 하고 다시 커스터머에게 보여줘야함
이리 되면.. 귀찮아.. UI만 바뀌고 개발자가 해야할 일이 많아짐 .. 그래서!!&lt;/p&gt;

&lt;h2 id=&quot;미래&quot;&gt;미래&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;payment app을 사용한 결제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;payment-app&quot;&gt;payment app&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이것도 계속 늘어 날텐데 » 이것도 하나의 버튼으로 하자&lt;/li&gt;
  &lt;li&gt;설치된 payment app의 리스트를 고르고 결제 버튼을 누르면 그 페이먼트 앱에서 결제를 진행&lt;/li&gt;
  &lt;li&gt;브라우저가 하는 일  페이먼트 앱으로 merchant의 결제 내역을 넘겨주는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제는 내가 accept하는 payment app의 리스트를 넘겨줌&lt;/p&gt;

&lt;h3 id=&quot;등록&quot;&gt;등록&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;web based payment app&lt;/li&gt;
  &lt;li&gt;Native payment app&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;웹-베이스의-경우&quot;&gt;웹 베이스의 경우&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서비스 워커를 브라우저에 install&lt;/li&gt;
  &lt;li&gt;브라우저에 저장 하여 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이렇게-되면-payment-flow가-조금-바뀐다&quot;&gt;이렇게 되면 payment flow가 조금 바뀐다&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;merchant로 가는게 아니라 payment app으로 바로 가게되고&lt;/li&gt;
  &lt;li&gt;payment app 내에서 payment network를 타게 된다.
    &lt;ul&gt;
      &lt;li&gt;Payment token, reponse (뭐 아이디라던가)&lt;/li&gt;
      &lt;li&gt;이걸 userAgent로 reponse를 내려주게 되고 User에게 보내줌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;장점-1&quot;&gt;장점&lt;/h3&gt;
&lt;p&gt;Merchant&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;온라인  웹페이지 변경 없이 payment app에서만 기능 추가/제거 가능
    &lt;ul&gt;
      &lt;li&gt;페이지에대한 유지보수 비용 절감&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Payment app&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;merchant integration이 용이함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-level-1&quot;&gt;code level&lt;/h2&gt;

&lt;h3 id=&quot;service-worker&quot;&gt;service worker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;구글 , 삼성이 주도&lt;/li&gt;
  &lt;li&gt;Event worker :  초기 이름&lt;/li&gt;
  &lt;li&gt;이벤트를 수신 하는 deamon&lt;/li&gt;
  &lt;li&gt;필요한 경우에, 항상 살아있는 데몬&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;securee context가 보장되어 결제와 같은 보안에 중요한 서비스를 할 수 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Service worker와 payment app 1:1 매핑&lt;/li&gt;
  &lt;li&gt;동작이 기존과 동일 service worker가 paymentapp이라고 생각해도 괜춘.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치&quot;&gt;설치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;명시적 : 사용자가 직접 설치 ( 버튼을 통해)&lt;/li&gt;
  &lt;li&gt;묵시적 : 쇼핑몰 또는 브라우저의 추천에 의한 설치
    &lt;ul&gt;
      &lt;li&gt;자동으로 설치. (스크립트로 동작이라 1초도 안걸림)&lt;/li&gt;
      &lt;li&gt;맘대로 깔면 넘나 많아지면 어째&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;예제&quot;&gt;예제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;시나리오 : 만원 이하, 광고를 끝까지 보면 결제해주겟음&lt;/li&gt;
  &lt;li&gt;결제 선택하면 &amp;gt; payment app (광고를 보고) » payment complete&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;worker-입장에서&quot;&gt;worker 입장에서&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 브라우저에 의해서 service worker가 활성화
- Onpaymentrequest가 불리우고 결제 정보를 받고 &amp;gt; 결제에 대한
- OpenWindow &amp;gt;&amp;gt; 광고 화면을
- PostMessage&amp;gt;&amp;gt; 필요한 정보를 보냄
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;article2&quot;&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-rest에서-graphql과-relay로-갈아타기&quot;&gt;[2] REST에서 GraphQL과 Relay로 갈아타기&lt;/h1&gt;

&lt;h2 id=&quot;rest-api&quot;&gt;Rest API&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;client &amp;lt;&amp;gt; server&lt;/li&gt;
  &lt;li&gt;리소스를 uri로 표현&lt;/li&gt;
  &lt;li&gt;GET/POST/DELETE/PUT&lt;/li&gt;
  &lt;li&gt;Http response 여러 회사에서 사용중&lt;/li&gt;
  &lt;li&gt;twitter, facebook, naver 등&lt;/li&gt;
  &lt;li&gt;추가 함수, 정렬, pagenation 등등&lt;/li&gt;
  &lt;li&gt;사실상 각자 제멋대로&lt;/li&gt;
  &lt;li&gt;그나마 정해진 것은 JSON:API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jsonapi&quot;&gt;JSON:API&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Relationship
- 부분필드,
- 필터 적용 등등등 그래도 rest의 한계가 느껴짐
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;한계&quot;&gt;한계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;parse fieldset
    &lt;ul&gt;
      &lt;li&gt;원하는 것만 가져오는것&lt;/li&gt;
      &lt;li&gt;그럼 기본값은? 전부 다 가져와야 하나?&lt;/li&gt;
      &lt;li&gt;접근 권한이 없는 필드는 어떻게 하지&lt;/li&gt;
      &lt;li&gt;admin과 유저 다르게 내려야 하나?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ex) 나를 퐐로 하는 사람들을 가져오고 싶은데&lt;/li&gt;
  &lt;li&gt;내 정보 : 개인정보  + 다른 사람 정보 : 어느정도만&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;필드타입을 전혀 정하지 못함&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;amount : “10.00” // object 타입일 경우 이건 string? Integer?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;side-effect&quot;&gt;Side effect&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;결제라고 했을떄 payment에 대한거, credit의 정보 변경 한번씩 쳐야 한다&lt;/li&gt;
  &lt;li&gt;가져와야 정보가 많을때 param이 기하급수적으로 길어짐&lt;br /&gt;
      ex) query=dsajkd,dsadasd,asdasd,as,das,das&lt;/li&gt;
  &lt;li&gt;라이브러리 부족.&lt;/li&gt;
  &lt;li&gt;endpoint에 따라 json 맞게 답변을 해줘야 한다.&lt;/li&gt;
  &lt;li&gt;클라이언트에서도 데이터를 알맞게 받아서 store 해줘야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphql&quot;&gt;GraphQL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Rest 방식을 바꿈&lt;/li&gt;
  &lt;li&gt;query 언어&lt;/li&gt;
  &lt;li&gt;rest uri를 그래프 언어로 바꾸면 더 간결해짐&lt;/li&gt;
  &lt;li&gt;여러 method를 표현할 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스키마-정의-하기&quot;&gt;스키마 정의 하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Query : GET&lt;/li&gt;
  &lt;li&gt;Mutation  : UPDATE DELETE PUT
    &lt;ul&gt;
      &lt;li&gt;args와 resolve를 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스카마가 정의도면 express-graphql 을 이용해서&lt;/p&gt;

&lt;p&gt;Graphql clinet - lokka ?
를 사용해서 클라이언트에서 사용할수 잇음&lt;/p&gt;

&lt;p&gt;GraphiQL&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;postman 같은거&lt;/li&gt;
  &lt;li&gt;자동완성, 자동 문서화도 해줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;relay&quot;&gt;Relay&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;웹 어플리케이션 개발을 편하게 하기 위해 만들어주는것&lt;/li&gt;
  &lt;li&gt;react 와 graphql을 연동을 도와줘 시너지 증가&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컨셉&quot;&gt;컨셉&lt;/h3&gt;
&lt;h3 id=&quot;노드&quot;&gt;노드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단일 interface&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Query {
	node (id:1) {
		id,
		user,
		age
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데이터 매니지먼트에 용이함, cache를 한다던가
String 만으로는 resource 알기 어려움
type과 id가 합쳐진 GrobalId를 이용하여 알랴줌&lt;/p&gt;

&lt;p&gt;NodeDefinition&lt;/p&gt;
&lt;h2 id=&quot;커넥션&quot;&gt;커넥션&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다수의 node를 가져올때&lt;/li&gt;
  &lt;li&gt;pagination에 특화되&lt;/li&gt;
  &lt;li&gt;Connection Definition을 정의해서
    &lt;ul&gt;
      &lt;li&gt;PageInfo 와 edges를 내려줌.&lt;/li&gt;
      &lt;li&gt;After before last first를 이용해서&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react-relay&quot;&gt;React Relay&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Data 의존성과 component가 공존한다.&lt;/li&gt;
  &lt;li&gt;리액트에서는 컴포넌트가 여러개가 잇고 그 안에 그안에 이런식으로 되어있는데&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 각 컴포넌트들은 필요한 데이터가 각각 다르다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Relay.createContiner&lt;/li&gt;
  &lt;li&gt;각각 컴포넌트에 알맞는 쿼리만 작성하면 알아서 그걸 합쳐서 한번에 불러준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mutation-config&quot;&gt;Mutation Config&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;node방식으로 가져오니 data manage가 더  편함&lt;/li&gt;
  &lt;li&gt;어떻게 반영할 것인지 conf에 추가하면 됨&lt;/li&gt;
  &lt;li&gt;Ex) 이미 불러온 node의 값을 업데이트, 기존에 불러온 connection에 추가/제거&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;summary&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;기존 GET/DELE - » Query / Mutation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터를 미리 정해야 하고 그게 애매햇는데 » 항상 데이터 의존성을 명시  ( 기본이 없고 원하는 것만)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.필드가 정해져 잇지 않아 문서화 하지 않으면 협업이 어렵 ( 이게 integer인지 string인지)
	- 타입이 정해져 잇고 (strong type) 프로토콜 단에서 확인할 수 있음
	- Introspection&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;기존에는 어떤 param을 받는지를 명세 해놔야 함 » 데이터 의존성에 명세할 필요가 없음 .&lt;/li&gt;
  &lt;li&gt;데이터 변경 사항을  클라이언트에서 처리를 각각 해야함 	- mutation config를 잘 써주면 알아서 데이터 변경 사항을 처리한다 .&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;생산성, 속도, 재미 보두 크게 향상&lt;/li&gt;
  &lt;li&gt;스타텁에서는 비지니스 로직을 계속 짜내는게 어려웠는데
서버와 클라이언트에 어떻게 보일때까지 한 큐에 도니까 개발이 더 편하다. (한명이 개발해도 좋다)&lt;/li&gt;
  &lt;li&gt;공식문서가 좀 미비함. Relay의 진입 장벽이 꽤 높은 ㅕㄴ&lt;/li&gt;
  &lt;li&gt;Relay 실시간 지원이 미비. Mutation??을 통해서 바뀐 정보를 relaystore에 넣어줘야하는데 이게 안되서 hack을 이용해야함&lt;/li&gt;
  &lt;li&gt;아직 실험적인 생태&lt;/li&gt;
  &lt;li&gt;하려면 소통 방식부터 바꿔야 하기 때문에 프로젝트를 완전 엎어버려서 해야함.  (기존 rest 에서 넘어가기 어렵. )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;질문&quot;&gt;질문&lt;/h2&gt;
&lt;p&gt;Q Redux + graphql&lt;/p&gt;

&lt;p&gt;redux를 쓰게 되면 relay 를 같이 쓰긴 어렵.
data와 render가 분리 되어있어서
뷰와 데이터가 분리가 되는게 요즘 대세긴 하지만 그냥 데이터를 받아와서 뷰에서 핸들링 해주는게 더 편하더라 redux보다는 그냥 relay만 사용하는게 더 편하더라&lt;/p&gt;

&lt;p&gt;Awesome graphql&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mysql&lt;/li&gt;
  &lt;li&gt;mongodb&lt;/li&gt;
  &lt;li&gt;resyncDB사용중 - 직접 만들어서 사용중중
Express graphql&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q 만약 Spring framework를 쓴다면..&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;graphql 미들웨어를 하나 만들어 놓고 실제 데이터를 가져오는것은 rest로 해서 레거시와 연경 ( facebook 사례 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q angular와 같은 다른 framework 와 써도 되나요&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;그거와 종속성이 잇는게 아니니 쓸 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q 앱에서도 적용해본적 있나유?
	- http 에 국한된게 아니라
	- protocol일뿐.
	- 소켓에서 때리든 자바스크립트에서 ajax에서 string으로 만들어서 보내든
	- 뭐 그래서 상관이 없을 것 같다.&lt;/p&gt;

&lt;p&gt;어느 정도
React Native&lt;/p&gt;

&lt;p&gt;Q SQL 최적화&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;중요하지..&lt;/li&gt;
  &lt;li&gt;join 이나 이런게 중요하지&lt;/li&gt;
  &lt;li&gt;어떤 쿼리가 어떻게 되는건지 보이긴 함.&lt;/li&gt;
  &lt;li&gt;어떤 필드가 필요한지 분석할 수는 있으나 애매하다.&lt;/li&gt;
  &lt;li&gt;화이트 리스트를 만들어서 미리 구현해 놓는 방법도 있을 것 같다.&lt;/li&gt;
  &lt;li&gt;최적화 이슈는 여전히 있음. graphQL 이슈에도 올라와 잇음.
Plan? 이라는걸 누가 fork 따서 해놓은게 잇는데 그걸 참고해보3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q null이나 제너릭 obj 을 지원하지 않음&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nonnulll로&lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;stringlify
        &lt;ol&gt;
          &lt;li&gt;하나하나 명세하는 방법&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러다간 끝이 없을것 같아 스키마에 추천하는중&lt;/p&gt;

&lt;div id=&quot;article3&quot;&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-apache-zeppelin과-오픈소스-비즈니스&quot;&gt;[3] Apache Zeppelin과 오픈소스 비즈니스&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;기능보다는 프로젝트&lt;/li&gt;
  &lt;li&gt;오픈소스 생태계&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;발표자&quot;&gt;발표자&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;아파치 제플린 PMC chair&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;어떻게-시작되었나&quot;&gt;어떻게 시작되었나&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2012년 말에 interacitve 분석 커머셜 솔루션 개발&lt;/li&gt;
  &lt;li&gt;작은 회사에서 엔터프라이즈 비지니스를 하기가 어려웟음&lt;/li&gt;
  &lt;li&gt;기능 중  인터렉티브 분석 기능을 오픈 소스로 하면 어떨까?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hadoop in Seoul 2013에서 발표하며 오픈소스 제플린을 제안  » 관심이 없엇음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;회사에서  사이드 프로젝트로 시작 -&amp;gt; 노트북 형식의 소프트 웨어 형식을 만듬&lt;/li&gt;
  &lt;li&gt;2014년 여름부터 사용자가 생기기 시작&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;어떻게-시작할까&quot;&gt;어떻게 시작할까&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스파크 메일링 리스트에서 관련 질문이 올라오면 제플린을 추천&lt;/li&gt;
  &lt;li&gt;스택 오버플로우에도 계속 답변을 달면서 영업을 함.&lt;/li&gt;
  &lt;li&gt;홍보 1달도 안됬는데 제플린을 이용해서 서비스를 만드는 회사 발생.&lt;/li&gt;
  &lt;li&gt;2014년 12월에 아파치 인큐베이션에 들어가게됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;아파치-프로젝트가-된다는-것은&quot;&gt;아파치 프로젝트가 된다는 것은&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;소스코드 소유권 (copyright)&lt;/li&gt;
  &lt;li&gt;브랜드 등&lt;/li&gt;
  &lt;li&gt;아파치로 기부, 양도를 하게 되는것&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;아파치-재단&quot;&gt;아파치 재단&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;오픈소스 재단은 다양한 곳이 있음
    &lt;ul&gt;
      &lt;li&gt;리눅스 파운데이션&lt;/li&gt;
      &lt;li&gt;모질라 파운데이션&lt;/li&gt;
      &lt;li&gt;아파치 파운데이션 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아파치 재단은
	- Community over code
	- 좋은 커뮤니티를 만드는것이 재단의 목표
	- 인큐베이터 : 아파치방식으로 일하는 방법, 의사결정하는 방법
	- 탑레벨 프로젝트 혹은 subproject&lt;/p&gt;

&lt;p&gt;트롤을 vote를 통해서 쫓아낼수 잇는데
멘토들의 조언&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;커뮤니티와 이야기를 해서 잘 풀어나가보아라&lt;/li&gt;
  &lt;li&gt;멘토들이 코드 이야기가 아니라 커뮤니티를 어떻게 꾸려가는가, 유지시키는가에 집중함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;탑레벨이-되면&quot;&gt;탑레벨이 되면&lt;/h2&gt;
&lt;p&gt;PMC
Committer
Contributor&lt;/p&gt;

&lt;h2 id=&quot;의사결정&quot;&gt;의사결정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;코드 커밋부터 시작해서 릴리즈까지 여러가지 결정을 해야함.&lt;/li&gt;
  &lt;li&gt;비슷한 프로세스로
제안 &amp;gt; 토론 &amp;gt; 공감대 형성 &amp;gt; 투표 (consencus 기록의 의미)
** 투표 &amp;gt; 공감대 형성 (X) 투표를 햇으니 공감하라가 아님&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;아파치-프로젝트의-가장-큰-장점&quot;&gt;아파치 프로젝트의 가장 큰 장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;아파치 브랜드 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;오픈소스-프로젝트-종류&quot;&gt;오픈소스 프로젝트 종류&lt;/h2&gt;
&lt;p&gt;크게 두가지로 나눌 수 있을 것 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;소스코드만 공개&lt;/li&gt;
  &lt;li&gt;소스코드와 의사결정 공개&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어떤 프로젝트의 릴리즈가 그냥 딱 오픈된다. ( 의사결정을 어떤 집단 혹은 회사가 결정)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;물론 이것도 오픈소스
하지만 이렇게되면 컨트리뷰터들이 참여하기가 어렵다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;재플린은 여러 노력을 했음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;왠만하면 모든 토론을 온라인으로&lt;/li&gt;
  &lt;li&gt;회사에서도 가능하면 온라인으로&lt;/li&gt;
  &lt;li&gt;왠만한 모든 대화는 영어로&lt;/li&gt;
  &lt;li&gt;외국인 개발자들이 좀 있엇고, 원격근무, 자율근무를 하고 있어서 오픈소스를 도입하기가 쉬웠음.&lt;/li&gt;
  &lt;li&gt;버그패치만 제공하는게 아니라 어떠한 기능을 만들때 어떠하게 햇음 좋겟다 처럼 참여햇으면 좋겟다.&lt;/li&gt;
  &lt;li&gt;많은 회사들이 비지니스 도입하기 쉽게 했으면 좋겠다 .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;오픈소스-비지니스&quot;&gt;오픈소스 비지니스&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서포트/트레이닝/컨설팅 — 일반적인 시도&lt;/li&gt;
  &lt;li&gt;듀얼 라이센스 - 조건부 오픈소스 라이센스 ex) 학술 개발에만 쓰일수 잇고 상업적인 용ㄷ는 안된다&lt;/li&gt;
  &lt;li&gt;엔터프라이즈 버전  - 오픈소스에 추가 기능을 붙혀 commercial production&lt;/li&gt;
  &lt;li&gt;기부 - 개인 기부 / 프로젝트 자체 재단을 만들어 기업들로부터 기부를 받는다.&lt;/li&gt;
  &lt;li&gt;SaaS - 오픈소스를 그대로 서비스로서 제공&lt;/li&gt;
  &lt;li&gt;Open adoption -  제플린은 여기
    &lt;ul&gt;
      &lt;li&gt;오픈소스에서 직접 수익을 얻지 않고&lt;/li&gt;
      &lt;li&gt;다른 product 에서 수익을 만든다.&lt;/li&gt;
      &lt;li&gt;오픈 소스의 기능을 제한하고 비지니스를 독점 할 필요가 없다&lt;/li&gt;
      &lt;li&gt;다른 비지니스를 하는 회사들과 경쟁할 필요가 없다&lt;/li&gt;
      &lt;li&gt;선순한을 만들기 위해.
  ○ 기능을 제한/비지니스 독점하게되면 사용자가 감소 시장 크기가 감소하게됨
  ○ 다양한 비지니스 허용하게 되면 사용자가 증가하고 시장의 크기가 증가 ** 요걸 기대&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zepplinhub&quot;&gt;ZepplinHub&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;제플린 노트북 공유/협업 환경&lt;/li&gt;
  &lt;li&gt;아파치에서만이 아니라 다른 써드파티 회사에서도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;극대화 하기 위해 다양한 전략을 수행&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아파치 브랜드를 사용하거나&lt;/li&gt;
  &lt;li&gt;다양한 프로젝트와 인테그레이션
    &lt;ul&gt;
      &lt;li&gt;플링크, 스파크, 카산드라, 알, 구글 빅 쿼리 등등등.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3rd party 비지니스
    &lt;ul&gt;
      &lt;li&gt;아마존 웹서비스 emr&lt;/li&gt;
      &lt;li&gt;MS azure HD insignt 에서&lt;/li&gt;
      &lt;li&gt;구글 클라우드 데이터 에서도&lt;/li&gt;
      &lt;li&gt;클라우드 서비스 뿐만 아니라&lt;/li&gt;
      &lt;li&gt;Hotonwork HDP 패키지에 제플린 탑재
이런 회사들과 경쟁 하기 보다는 친구가 되는 쪽으로 노력함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;그-결과로&quot;&gt;그 결과로&lt;/h2&gt;
&lt;p&gt;깃헙 별 갯수
아파치 프로젝트 중에서 12번째&lt;/p&gt;

&lt;p&gt;컨트리 뷰터 숫자는
153명으로 8위&lt;/p&gt;

&lt;p&gt;이제는 유명한 프로젝트&lt;/p&gt;

&lt;p&gt;컨트리뷰션 하는 회사들&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nflabs&lt;/li&gt;
  &lt;li&gt;트위터&lt;/li&gt;
  &lt;li&gt;구글
-허톤워크&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사용자&quot;&gt;사용자&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;국내외 회사들에서 많이 사용됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;생태계&quot;&gt;생태계&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Contributors
    &lt;ul&gt;
      &lt;li&gt;Users&lt;/li&gt;
      &lt;li&gt;Service provider&lt;/li&gt;
      &lt;li&gt;Technology Integration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;소스코드 오픈 뿐만아니라 이러한 풍부한 생태계가 오픈소스의 생태계라고 생각한다.&lt;/li&gt;
  &lt;li&gt;혼자있을때보다 더 많이 사용되고 더 빨리 성장하고 더 안정적인 프로젝트가 된다 생각한다.&lt;/l