<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>Leop0ld</title>
    <description>Leop0ld's TECH blog!</description>
    <link>https://blog.leop0ld.org/</link>
    <atom:link href="https://blog.leop0ld.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 01 Jan 2019 08:19:47 +0000</pubDate>
    <lastBuildDate>Tue, 01 Jan 2019 08:19:47 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Goodbye 2018. Hello 2019!</title>
        <description>&lt;p&gt;항상 연말연초에는 회고, 다짐을 작성해왔기에 이번에도 어김없이 끄적여보려고 한다.&lt;/p&gt;

&lt;h1 id=&quot;2018년-회고&quot;&gt;2018년 회고&lt;/h1&gt;

&lt;p&gt;2018년에는 나에게 개발적으로나, 개발 외적으로나 많은 변화가 있었다.&lt;/p&gt;

&lt;p&gt;새로운 취미가 생겼고, 해외여행도 다녀왔고, 이직도 해보고 등등… 먼저 이런 일들에 대해서 얘기해볼까 한다.&lt;/p&gt;

&lt;p&gt;그런 이야기를 풀기 전에, 작년에 다짐했던 걸 체크해보고 넘어가야겠다.&lt;/p&gt;

&lt;h1 id=&quot;작년에-다짐했던-것들&quot;&gt;작년에 다짐했던 것들&lt;/h1&gt;

&lt;h2 id=&quot;나만의-라이브러리-만들어보기&quot;&gt;나만의 라이브러리 만들어보기&lt;/h2&gt;

&lt;p&gt;Python으로 작성된 나만의 라이브러리를 만들어보고자 했는데, 목표는 이루지 못했다.&lt;/p&gt;

&lt;p&gt;핑계를 대보자면 이런저런 일때문에 힘들었던 것 같다.&lt;/p&gt;

&lt;p&gt;그리고 아이디어를 쥐어짠다고 해서 좋은 라이브러리가 나오는 것도 아니라서, 이 부분은 크게 개의치 않고 있고, 다만 좋은 아이디어가 나온다면 꼭 만들어보고 싶다. 꼭 Python이 아니더라도.&lt;/p&gt;

&lt;p&gt;어쩌면 비슷한 건 해봤는데, 이제는 전 회사가 되어버린 오픈갤러리에서 I’mport 관련 라이브러리를 커스터마이징하여 &lt;a href=&quot;https://github.com/opengallery/og-iamport-client-python&quot;&gt;GitHub&lt;/a&gt; 에 올려뒀었다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-테스트-테스트&quot;&gt;테스트! 테스트! 테스트!&lt;/h2&gt;

&lt;p&gt;Mocking에 대해서는 꽤 공부를 했고, Mocking 을 적용하여 테스트 코드도 작성해봤다.&lt;/p&gt;

&lt;p&gt;두루뭉실하던 개념에 윤곽선을 잡은 느낌이다.&lt;/p&gt;

&lt;p&gt;옮긴 회사인 파레트코에서는 바빠서 테스트 코드에 신경을 잘 쓰고 있지는 못하지만 시간적 여유가 받쳐준다면, 꼭 도입할 것이다!&lt;/p&gt;

&lt;h2 id=&quot;블로그-좀-더-열심히&quot;&gt;블로그, 좀 더 열심히&lt;/h2&gt;

&lt;p&gt;작년 회고 작성하면서도 느꼈던 것이지만, 참 이게 어렵다.&lt;/p&gt;

&lt;p&gt;좀 더 열심히 해야한다고 생각은 하지만 블로그에 글을 작성하는 게 시간을 꽤 잡아먹는다.&lt;/p&gt;

&lt;p&gt;좋은 글을 작성하려면 그만큼 더 잡아먹기 때문에, 조금조금씩 작성하고 있지만 그렇게 퀄리티 좋은 글은 못 뽑아내는 것 같다.&lt;/p&gt;

&lt;p&gt;2019년에는 1달 1포스팅 혹은 2달 1포스팅 정도만이라도 좋은 퀄리티의 글을 작성하고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;dev-django-korea-2018&quot;&gt;Dev Django Korea 2018&lt;/h2&gt;

&lt;p&gt;1년가량 준비했던 Dev Django Korea 2018 이라는 행사를 무사히 열었고, 다행히도 많은 분들이 참석해주셔서 성황리에 마쳤다.&lt;/p&gt;

&lt;p&gt;오랜 기간 준비한만큼 오랜 기간 쉰 것 같다.&lt;/p&gt;

&lt;p&gt;내년부터는 새로이 시작할 Dev Django Korea를 기대해주길…!&lt;/p&gt;

&lt;h2 id=&quot;새로운-취미-첫-해외여행-첫-전직첫-이직&quot;&gt;새로운 취미, 첫 해외여행, 첫 전직(첫 이직)&lt;/h2&gt;

&lt;p&gt;위 타이틀에서 볼 수 있듯이 2018년은 내게 개발자로써가 아닌 사람 강명서로써 조금 의미깊었던 해가 아닐까 싶다.&lt;/p&gt;

&lt;p&gt;먼저, 새로운 취미를 시작했다.&lt;/p&gt;

&lt;p&gt;시작한지 얼마되지 않아서, “제대로 해보려고 한다!” 라기보다는 꼭 한번 해보고 싶었다.&lt;/p&gt;

&lt;p&gt;그래서 그 새로운 취미가 뭐냐하면… 비트메이킹/프로듀싱/랩 등등… 힙합과 관련된 나만의 음악을 만드는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 첫 해외여행을 일본 오사카, 교토로 다녀왔다.&lt;/p&gt;

&lt;p&gt;엄청 좋았던 경험이고, 기회와 시간과 돈이 된다면 내년에도 또 가고 싶다.&lt;/p&gt;

&lt;p&gt;그리고 새로운 둥지를 찾아 떠나왔다.&lt;/p&gt;

&lt;p&gt;2년동안 정들었던 오픈갤러리를 떠나 파레트코에 정착했고, 꽤 적응해서 잘 다니고 있다.&lt;/p&gt;

&lt;p&gt;첫 이직 + 첫 산업기능요원으로써의 전직인지라 더더욱 떨렸다.&lt;/p&gt;

&lt;p&gt;옮긴 회사에서의 포지션은 일단은 Python/Django 백엔드 개발자이다.&lt;/p&gt;

&lt;p&gt;재밌게 다니고 있고, 전 회사에서는 경험할 수 없는 걸 다양하게 경험하고 있어서 좋게 다니고 있다.&lt;/p&gt;

&lt;h1 id=&quot;2019년-다짐&quot;&gt;2019년 다짐&lt;/h1&gt;

&lt;h2 id=&quot;기본기-다지기&quot;&gt;기본기 다지기&lt;/h2&gt;

&lt;p&gt;이 부분은 이직하려고 알아볼 때 생각해둔 부분이다.&lt;/p&gt;

&lt;p&gt;기술 면접을 다니면서 DB와 알고리즘에 대해서 지식이 부족하다고 느꼈고, 해당 부분에 대해서 공부를 해야겠다고 마음을 먹었다.&lt;/p&gt;

&lt;p&gt;그래서 책(Real MySQL, 코딩인터뷰 완전 분석)을 읽으면서 기본기를 다지려고 하고 있다.&lt;/p&gt;

&lt;p&gt;2019년 말의 나는 어떤 기본기를 가지고 있을지, 말로만 떠들어대지는 않았을지, 궁금하다.&lt;/p&gt;

&lt;h2 id=&quot;새로운-기술도-얻자&quot;&gt;새로운 기술도 얻자&lt;/h2&gt;

&lt;p&gt;학교 선배의 권유에 의해 Google 스터디잼을 시작했다.&lt;/p&gt;

&lt;p&gt;k8s(쿠버네티스)에 관련된 내용이고, Google에서 콘텐츠를 제공해주고, 그에 대해서 학습하는 것이다.&lt;/p&gt;

&lt;p&gt;이것도 최근에 시작하여 마무리가 어떨지 모르겠으나, 평소에 오케스트레이션에 관심이 많았던 터라 재밌게 할 것 같고, 열심히 해야겠다.&lt;/p&gt;

&lt;h2 id=&quot;새로운-취미에-대한-결과물&quot;&gt;새로운 취미에 대한 결과물&lt;/h2&gt;

&lt;p&gt;새롭게 시작한 취미로 결과물을 뽑아내고 싶다.&lt;/p&gt;

&lt;p&gt;1년만에 좋은 결과물을 뽑아내기 어려울수도 있을 것 같지만, 열심히 배워봐야겠다!&lt;/p&gt;

&lt;p&gt;2018년 한해도 모두 감사했습니다.
2019년도 잘 부탁드립니다.&lt;/p&gt;

&lt;p&gt;긴 글 읽어주셔서 감사합니다 :)&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/goodbye-2018-hello-2019/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/goodbye-2018-hello-2019/</guid>
        
        <category>review</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Planet Hackathon 후기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이러한 행사를 준비하고 운영해주신 운영진분들께 감사를 표합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/planet-hackathon-banner.jpg&quot; alt=&quot;Planet Hackathon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9월 1일, 2일 나는 &lt;strong&gt;Planet Hackathon&lt;/strong&gt;에 다녀왔다.&lt;/p&gt;

&lt;p&gt;작년 9XD에서 주관했던 해커톤의 경우, 주의사항을 잘 숙지하지 못해 참가자 선발에서 떨어졌었다.&lt;/p&gt;

&lt;p&gt;그 결과, 올해는 내가 놓친 주의사항이 없는지 꼼꼼하게 체크하는 계기가 되었다.&lt;/p&gt;

&lt;p&gt;주의사항에 맞게 양식을 기입하고, 양식에 기입할 내용도 꽤 고민하여 작성했다.&lt;/p&gt;

&lt;p&gt;다행히도 3수는 면할 수 있었고, 참가자로 선발되어 GDG Seoul과 9XD가 주관한 Planet Hackathon에 참가하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;hackathon-시작&quot;&gt;Hackathon 시작&lt;/h2&gt;

&lt;p&gt;나의 팀은 3팀이었다.&lt;/p&gt;

&lt;p&gt;처음에 행사 소개하면서 유림님이 &lt;b&gt;“5명이 같은 팀이 된 이유가 있을 것이다!”&lt;/b&gt;라고 말씀해주셔서 &lt;b&gt;“왜 우리는 팀이 되었는가?!”&lt;/b&gt;에 대해 팀원들과 고민했다.&lt;/p&gt;

&lt;p&gt;그러던 도중 어김없이 15초 자기소개 시간이 돌아왔고, 정신차려보니 마이크를 받았다.&lt;/p&gt;

&lt;p&gt;간단하게 Python과 Django를 주로 사용하고 있고, 뱅갈고양이 하나와 같이 살고 있다고 말했다.&lt;/p&gt;

&lt;p&gt;그랬더니 팀원분들 중 한 분이 “저도 고양이 2마리와 같이 살고 있어요”라고 말씀해주셨고, 다른 한 분은 제주도에서 오셨는데 그쪽에서 회사 직원들과 같이 길냥이들을 봐주고 있다고 해주셨다.&lt;/p&gt;

&lt;p&gt;그리고 연달아서 한분은 고양이를 키우지는 않지만 엄청 좋아하신다고 하시고, 다른 한분도 고양이를 좋아하신다고 하셨다.&lt;/p&gt;

&lt;p&gt;그래서 추측컨대 우리 팀은 고양이를 좋아하는 사람들이 모인 팀이 아닐까? 싶었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;나중에 팀을 배치해준 운영진분께 여쭤보니, 고양이 + 동물을 좋아하는 분들과 팀이 된 것이 맞았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇게 15초 자기소개가 지나가고 키워드, 주제, 팀 이름, &lt;strong&gt;팀 페르소나&lt;/strong&gt;를 정해야할 때가 왔다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;페르소나&lt;/strong&gt;라는 단어가 생소해서 찾아보니, 아마도 “성격”을 나타내는 것 같았다.&lt;/p&gt;

&lt;p&gt;그래서 팀 페르소나는 팀원 5명의 페르소나를 각각 1개씩 적용한 것이라고 하셨고, 그 페르소나를 가진 사람들이 우리가 만들게 될 서비스의 주 타겟층이 될 것이라고 해주셨다.&lt;/p&gt;

&lt;p&gt;그래서 우리의 페르소나가 무엇이 있을지 각각 5가지씩 정리해서 공유했고, 그렇게 해서 나오게 된 우리 팀의 페르소나는 다음과 같았다.&lt;/p&gt;

&lt;h5 id=&quot;고양이와-여행을-좋아하는-워커홀릭&quot;&gt;고양이와 여행을 좋아하는 워커홀릭&lt;/h5&gt;

&lt;p&gt;그래서 팀원들과 위의 사람을 위한 서비스가 무엇이 있을까 생각해봤다.&lt;/p&gt;

&lt;h2 id=&quot;팀-페르소나에-맞는-주제와-서비스&quot;&gt;팀 페르소나에 맞는 주제와 서비스&lt;/h2&gt;

&lt;p&gt;그러던 도중 떠오른 것이, &lt;a href=&quot;https://brunch.co.kr/@cholab/13&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;뽀모도로 테크닉&lt;/b&gt;&lt;/a&gt;이었고 아무리 워커홀릭이라지만 일하는 도중 쉬는 시간이 필요하다고 생각했다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;strong&gt;“그 쉬는 시간동안 고양이 사진을 볼 수 있도록 하면 어떨까?!”&lt;/strong&gt;라는 생각이 떠올랐고, 팀원들 모두 동의해서 이 주제로 서비스를 만들기로 했다.&lt;/p&gt;

&lt;p&gt;팀 이름은 &lt;strong&gt;하품하는 고양이&lt;/strong&gt;로 정했다.&lt;/p&gt;

&lt;p&gt;그러면서 자연스레 서비스 이름은 &lt;strong&gt;HAGO&lt;/strong&gt;라고 정해졌고, 구현할 기능들을 정하기 시작했다.&lt;/p&gt;

&lt;p&gt;일단 처음에는 &lt;strong&gt;고양이 사진들을 크롤링하여 서버에 저장하고 뿌려주자!&lt;/strong&gt;라는 아이디어가 나왔는데, &lt;strong&gt;진짜 고양이 사진인가?&lt;/strong&gt; 검증하는 부분이 이번 해커톤 내에 구현하기 어려울 것 같아 패스했다.&lt;/p&gt;

&lt;p&gt;그러던 도중 좋은 API를 하나 찾았고, 이름하여 &lt;a href=&quot;https://thecatapi.com/&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;The Cat API&lt;/b&gt;&lt;/a&gt;였다.&lt;/p&gt;

&lt;p&gt;그래서 백엔드 기능이 얼마 안나올 것 같아서, 나 혼자 백엔드 개발을 맡았고, 시니어 백엔드 개발자분은 데스크탑용 앱을 만들기로 하셨다.&lt;/p&gt;

&lt;p&gt;그리고 나머지분들은 각각 웹 프론트는 주니어 프론트엔드 개발자분이, 안드로이드 모바일은 시니어 프론트엔드 개발자분이 개발해주셔서 iOS 제외 모든 플랫폼을 커버했다.&lt;/p&gt;

&lt;p&gt;나머지 한 분은 디자인과 iOS 겸하시려했지만 시간이 부족해 디자인만 하셨다.&lt;/p&gt;

&lt;p&gt;그래서 이제 본격적으로 개발을 시작하기 위해 어떤 기능이 필요할지 논의했다.&lt;/p&gt;

&lt;p&gt;시니어 백엔드 개발자분이 대충 만들어야할 API 목록을 정해주셨는데, 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고양이 사진을 수집하는 배치&lt;/li&gt;
  &lt;li&gt;고양이 사진을 저장하는 API&lt;/li&gt;
  &lt;li&gt;고양이 사진을 조회하는 API&lt;/li&gt;
  &lt;li&gt;팁을 저장하는 API&lt;/li&gt;
  &lt;li&gt;팁을 조회하는 API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그래서 대충 저런 게 필요하겠구나 싶어 내가 백엔드 개발을 맡아야하니 Python/Django를 섞어 내 식대로 재정의해봤다.&lt;/p&gt;

&lt;p&gt;그리고 중간에 모바일에 좋아요 버튼이 들어가면서, 좋아요 하는 기능도 생겼다.&lt;/p&gt;

&lt;p&gt;혹시 몰라서 1가지 사진에 대한 정보를 주는 기능도 만들어둬야겠다고 생각했다.&lt;/p&gt;

&lt;p&gt;그렇게 재정의한 백엔드 기능들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고양이 사진을 수집하여 모델에 저장하는 Custom Management Command&lt;/li&gt;
  &lt;li&gt;랜덤하게 고양이 사진을 캐싱하는 Custom Management Command&lt;/li&gt;
  &lt;li&gt;랜덤하게 고양이 사진을 뿌려주는 API&lt;/li&gt;
  &lt;li&gt;1개의 고양이 사진에 대한 정보를 뿌려주는 API&lt;/li&gt;
  &lt;li&gt;고양이 사진에 대해 좋아요 처리하는 API&lt;/li&gt;
  &lt;li&gt;랜덤하게 팁을 뿌려주는 API&lt;/li&gt;
  &lt;li&gt;+ Django Admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“팁”이란 건 고양이들 혹은 길고양이들에게 유용한 정보들이다.&lt;/p&gt;

&lt;p&gt;그래서 팁을 API를 통해 사용하기 보다는 Django Admin에서 관리자가 직접 만들어두는 게 낫겠다고 생각해서 그 부분에는 Django Admin을 사용했다.&lt;/p&gt;

&lt;p&gt;이런 식으로 기능을 정의하고 작업을 했다.&lt;/p&gt;

&lt;h2 id=&quot;본격-개발-시작&quot;&gt;본격 개발 시작&lt;/h2&gt;

&lt;p&gt;하기 전에 점심으로는 피자도 먹었다.&lt;/p&gt;

&lt;p&gt;맛있게 먹고, 개발하면서도 간식이 많아서 뭘 먹으면서 개발하는 나로써는 너무나 좋았다.&lt;/p&gt;

&lt;p&gt;간식이 남아서 문제일 정도로 많았다.&lt;/p&gt;

&lt;p&gt;그렇게 개발을 했고, 백엔드 작업은 간단해서 얼마 안걸렸다.&lt;/p&gt;

&lt;p&gt;그렇게 개발을 하던 도중, 2018 자카르타-팔렘방 아시안게임 축구 결승전(한일전)이 있었고 치킨을 먹으며 축구를 봤다.&lt;/p&gt;

&lt;p&gt;다같이 아쉬워하고, 기뻐하고 응원하는 게 너무 재밌었다.&lt;/p&gt;

&lt;p&gt;그렇게 쭉 개발을 했고, Heroku에 배포했다.&lt;/p&gt;

&lt;p&gt;HAGO의 백엔드 결과물은 &lt;a href=&quot;https://github.com/planet-hackathon-3/hago_backend&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;이제-뭐하지&quot;&gt;이제 뭐하지?&lt;/h2&gt;

&lt;p&gt;해커톤 성격 자체가 그런진 몰라도 내가 할 게 없었다.&lt;/p&gt;

&lt;p&gt;백엔드 개발을 하고 배포해놓고나니 너무나 할 게 없었다.&lt;/p&gt;

&lt;p&gt;다른 클라이언트쪽도 같이 볼까 했는데, 데스크탑 앱은 electron, 웹은 Angular, 모바일은 Kotlin 이라 내가 아는 게 하나도 없었다.&lt;/p&gt;

&lt;p&gt;괜히 방해만 될 듯 싶어 잿밥에 더 관심을 가지기로 했다.&lt;/p&gt;

&lt;p&gt;Planet Hackathon은 경쟁이 없는 해커톤이지만 최고상은 있다.&lt;/p&gt;

&lt;p&gt;그 상은 바로 가장 많이 다른 사람을 도와준 사람에게 수여되는 &lt;b&gt;“베스트 헬퍼상(King Helper)”&lt;/b&gt;이었다.&lt;/p&gt;

&lt;p&gt;베스트 헬퍼상은 개인전으로 2명을 뽑는데, 선정 기준은 구글 시트에 올라오는 다양한 질문들에 가장 많이 답변자로 채택되는 것이다.&lt;/p&gt;

&lt;p&gt;초반에는 잿밥(상품)에 관심이 많지 않았는데, 개발을 다 하고 시간이 남다보니 잿밥이 탐났다.&lt;/p&gt;

&lt;p&gt;그래서 엄청 간단한 질문부터 기술적인 질문까지 최대한 답변하려고 노력했다.&lt;/p&gt;

&lt;p&gt;그러다가 다른 분들과 기술적인 얘기(&lt;a href=&quot;https://github.com/denysdovhan/wtfjs&quot; target=&quot;_blank&quot;&gt;wtfjs&lt;/a&gt;라는 게 있는데 wtfphp를 만들어볼까 라던가)를 한다던가 이것저것 하면서 시간을 때웠다.&lt;/p&gt;

&lt;h2 id=&quot;마무리-하기-전에&quot;&gt;마무리 하기 전에&lt;/h2&gt;

&lt;p&gt;새벽에는 요가 타임이 있었고, 아침 즈음에는 댄스 타임이 있었다.&lt;/p&gt;

&lt;p&gt;요가 타임에는 가볍게 스트레칭을 해주었고, 댄스 타임에는 저스트댄스에 있는 Daddy Cool을 따라해보는 시간도 있었다.&lt;/p&gt;

&lt;p&gt;색다른 시도가 많았고, 그게 눈에 보여 좋았다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;그렇게 마무리를 하고 시상식이 이뤄졌다.&lt;/p&gt;

&lt;p&gt;우리 팀은 &lt;b&gt;“고양이와 즐거운 상상”&lt;/b&gt;을 받았고, 인프런에서 후원해주신 쿠폰 및 후디를 받았다.&lt;/p&gt;

&lt;p&gt;그리고 개인적으로는 &lt;b&gt;베스트 헬퍼상을 받았다&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/king-helper.jpg&quot; alt=&quot;베스트 헬퍼상(King Helper)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/leopold-750r.jpg&quot; alt=&quot;레오폴드 750R PD 갈축&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개인적으로 레오폴드라는 회사의 키보드를 좋아해서 닉네임으로 &lt;b&gt;“leop0ld”&lt;/b&gt;를 사용하는데 이런 상품을 받게되어 너무 기쁘다.&lt;/p&gt;

&lt;h2 id=&quot;느낀-점&quot;&gt;느낀 점&lt;/h2&gt;

&lt;h4 id=&quot;개인적인-측면으로는&quot;&gt;개인적인 측면으로는,&lt;/h4&gt;

&lt;p&gt;되게 오랜만에 하는 해커톤이었는데, 예전에는 무언가 만들 때 “이런 건 어떻게 만들어야하지?”, “이 부분은 조금 어려울 것 같은데…” 싶은 부분이 있었다.&lt;/p&gt;

&lt;p&gt;물론 이번에 개발하게 된 주제에 백엔드쪽이 기능이 많지 않아서일수도 있지만, 이번에는 그런 게 없었다.&lt;/p&gt;

&lt;p&gt;Heroku에 배포하는 부분에서 삽질을 조금 했지만 무사히 끝났다.&lt;/p&gt;

&lt;p&gt;시간이 남아서 &lt;a href=&quot;http://flake8.pycqa.org/en/latest/&quot; target=&quot;_blank&quot;&gt;flake8&lt;/a&gt;과 &lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot;&gt;Travis CI&lt;/a&gt;까지 붙여봤다. 재밌었다.&lt;/p&gt;

&lt;p&gt;다만 한가지 아쉬웠던 점은 시니어 백엔드 개발자분과 페어 프로그래밍을 하고 싶었는데, 우리 팀은 개발자 각각 한명이 다른 플랫폼을 맡아서 그걸 못 해봤다는 것이다.&lt;/p&gt;

&lt;p&gt;다음엔 꼭 페어 프로그래밍을 해보고 싶다.&lt;/p&gt;

&lt;h4 id=&quot;행사적인-측면으로는&quot;&gt;행사적인 측면으로는,&lt;/h4&gt;

&lt;p&gt;일단 먹을 수 있는 것이 많았다.&lt;/p&gt;

&lt;p&gt;다른 해커톤들에서는 부족한 경우도 있는데 일단 풍족했다.&lt;/p&gt;

&lt;p&gt;더해서 신기했다.&lt;/p&gt;

&lt;p&gt;개발하다가 요가도 하고, 춤도 추고, 같이 축구도 보고, 경쟁에 찌든 해커톤이 아니어서 너무 좋았다.&lt;/p&gt;

&lt;p&gt;다음에도 한다면 또 참여하고 싶다. 너무 재밌었다 :D&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/review-of-planet-hackathon/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/review-of-planet-hackathon/</guid>
        
        <category>hackathon</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Django에서 DB 액세스 최적화하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글은 Django 2.1 기준으로 작성되었습니다.&lt;br /&gt;
참고: &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/optimization/&quot;&gt;DB 액세스 최적화 공식 문서&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;0-먼저-프로파일링부터&quot;&gt;0. 먼저 프로파일링부터&lt;/h2&gt;

&lt;p&gt;DB 액세스나 쿼리를 최적화하기 전에 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/faq/models/#faq-see-raw-sql-queries&quot; target=&quot;_blank&quot;&gt;해당 쿼리와 그에 대한 비용에 대해 알아보는 게 중요합니다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;QuerySet이 데이터베이스에 의해서 어떻게 실행되는지 이해하려면 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.explain&quot; target=&quot;_blank&quot;&gt;QuerySet.explain()&lt;/a&gt;을 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar/&quot; target=&quot;_blank&quot;&gt;django-debug-toolbar&lt;/a&gt;와 같은 외부 프로젝트나 데이터베이스를 직접 모니터링하는 도구를 사용할 수도 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;1-보편적인-db-최적화-기법-사용하기&quot;&gt;1. 보편적인 DB 최적화 기법 사용하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4_(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4)&quot; target=&quot;_blank&quot;&gt;인덱스&lt;/a&gt;: Django에서는 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/fields/#django.db.models.Field.db_index&quot; target=&quot;_blank&quot;&gt;Field.db_index&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/options/#django.db.models.Options.index_together&quot; target=&quot;_blank&quot;&gt;Meta.index_together&lt;/a&gt;를 사용하여 추가할 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;exclude()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;order_by()&lt;/code&gt; 등을 사용하여 자주 쿼리하는 필드에 인덱스를 추가하는 것이 좋습니다. 인덱스를 사용하면 조회 속도를 높이는 데 도움이 됩니다. 하지만 인덱스를 너무 남발하게 될 경우, 인덱스를 유지하는 비용이 인덱스를 사용해 속도를 높인 쿼리의 성능보다 클 수 있기 때문에 신중하게 결정해야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;적절한 필드 타입 사용&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-queryset-이해하기&quot;&gt;2. QuerySet 이해하기&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/&quot; target=&quot;_blank&quot;&gt;QuerySet&lt;/a&gt;을 이해하는 것은 간단한 코드로 좋은 성능을 얻는 데 특히 중요합니다.&lt;/p&gt;

&lt;h4 id=&quot;2-1-queryset-계산-이해하기&quot;&gt;2-1. QuerySet 계산 이해하기&lt;/h4&gt;

&lt;p&gt;성능 문제를 피하려면 다음을 이해하는 게 중요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/queries/#querysets-are-lazy&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;QuerySet은 게으르다(lazy)&lt;/b&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;QuerySet을 생성하는 행위는 데이터베이스 활동을 포함하지 않습니다. Django는 QuerySet이 계산될 때까지 실제로 쿼리를 실행하지 않습니다. 실제로 계산되는 시점은 아래에서 더 자세하게 다룹니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#when-querysets-are-evaluated&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;QuerySet이 계산되는 시점&lt;/b&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;QuerySet은 다음과 같은 시점에 계산됩니다: &lt;strong&gt;반복 (Iteration)&lt;/strong&gt;, &lt;strong&gt;슬라이싱 (Slicing)&lt;/strong&gt;, &lt;strong&gt;피클링 / 캐싱 (Pickling/Caching)&lt;/strong&gt;, &lt;strong&gt;repr()&lt;/strong&gt;, &lt;strong&gt;len()&lt;/strong&gt;, &lt;strong&gt;list()&lt;/strong&gt;, &lt;strong&gt;bool()&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/queries/#caching-and-querysets&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;데이터가 메모리에 저장되는 방식&lt;/b&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;각 QuerySet에는 데이터베이스 액세스를 최소화하기 위한 캐시가 포함되어 있습니다. 이것이 어떻게 작동하는지 이해하면 효율적인 코드를 작성하는 데 도움이 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-2-캐시된-속성-이해하기&quot;&gt;2-2. 캐시된 속성 이해하기&lt;/h4&gt;

&lt;p&gt;전체 QuerySet 캐싱 뿐만 아니라 ORM 객체에 대한 속성 결과 캐싱도 있습니다. 일반적으로 호출할 수 없는 속성은 캐싱됩니다. 예를 들어 Weblog 모델 예제를 보면 다음과 같습니다:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Blog 객체가 여기서 검색된다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 캐시되었기 때문에 여기서는 DB 액세스가 일어나지 않는다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 일반적으로 호출 가능한 속성은 매번 DB 조회를 발생시킵니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 쿼리 실행&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 또다시 쿼리 실행&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-3-with-템플릿-태그-사용하기&quot;&gt;2-3. &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 템플릿 태그 사용하기&lt;/h4&gt;

&lt;p&gt;QuerySet의 캐싱 동작을 사용하려면 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/templates/builtins/#std:templatetag-with&quot; target=&quot;_blank&quot;&gt;with&lt;/a&gt; 템플릿 태그를 사용해야 할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/templates/builtins/#std:templatetag-with&quot; target=&quot;_blank&quot;&gt;with&lt;/a&gt; 템플릿 태그는 복잡한 변수를 더 간단한 이름으로 저장합니다.&lt;/p&gt;

&lt;p&gt;이는 비용이 많이 드는 방법 (EX. 데이터베이스를 조회하는 방법)에 여러 번 액세스 할 때 유용합니다.&lt;/p&gt;

&lt;h4 id=&quot;2-4-iterator-사용하기&quot;&gt;2-4. &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator()&lt;/code&gt; 사용하기&lt;/h4&gt;

&lt;p&gt;객체가 많은 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;의 캐싱 동작으로 인해 많은 양의 메모리가 사용될 수 있습니다. 이 경우 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.iterator&quot; target=&quot;_blank&quot;&gt;iterator()&lt;/a&gt;가 도움이 될 수 있습니다.
한 번 액세스 해야하는 많은 수의 객체를 반환하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;의 경우, 성능이 향상되고 메모리가 크게 감소할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;2-5-explain-사용하기&quot;&gt;2-5. &lt;code class=&quot;highlighter-rouge&quot;&gt;explain()&lt;/code&gt; 사용하기&lt;/h4&gt;

&lt;p&gt;맨 처음 프로파일링 부분에서도 언급했지만, &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.explain&quot; target=&quot;_blank&quot;&gt;QuerySet.explain()&lt;/a&gt;은 사용된 인덱스 및 조인을 포함하여 데이터베이스에서 쿼리를 실행하는 방법에 대한 자세한 정보를 제공합니다.
이러한 세부 정보는 보다 효율적으로 다시 작성할 수 있는 쿼리를 찾거나 성능을 향상시키기 위해 추가할 수있는 인덱스를 식별하는 데 도움이 될 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;3-python이-아닌-데이터베이스에서-작동하는-경우&quot;&gt;3. Python이 아닌 데이터베이스에서 작동하는 경우&lt;/h2&gt;

&lt;p&gt;예를 들어,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;exclude()&lt;/code&gt;를 사용하여 데이터베이스에서 필터링하는 경우&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/expressions/#django.db.models.F&quot; target=&quot;_blank&quot;&gt;F 표현식&lt;/a&gt;을 사용하여 같은 모델의 다른 필드를 기반으로 필터링하는 경우&lt;/li&gt;
  &lt;li&gt;데이터베이스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregation&lt;/code&gt;을 하기 위해 어노테이션하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 필요한 SQL을 생성하기에 충분하지 않은 경우에는 다음과 같은 방법이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/expressions/#django.db.models.expressions.RawSQL&quot; target=&quot;_blank&quot;&gt;RawSQL&lt;/a&gt; 사용하기
    &lt;ul&gt;
      &lt;li&gt;일부 SQL을 쿼리에 명시적으로 추가할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/sql/&quot; target=&quot;_blank&quot;&gt;raw SQL&lt;/a&gt; 사용하기
    &lt;ul&gt;
      &lt;li&gt;그래도 부족할 경우, 완전하게 raw SQL를 사용할 수도 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-고유unique하거나-인덱스된-열을-사용한-개별-객체-검색하는-경우&quot;&gt;4. 고유(&lt;code class=&quot;highlighter-rouge&quot;&gt;unique&lt;/code&gt;)하거나 인덱스된 열을 사용한 개별 객체 검색하는 경우&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;을 사용하여 개별 객체를 검색할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;unique&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;db_index&lt;/code&gt; 열을 사용하는 데는 두 가지 이유가 있습니다.&lt;/p&gt;

&lt;p&gt;첫 번째, 데이터베이스 인덱스로 인해 쿼리 속도가 빨라집니다.&lt;/p&gt;

&lt;p&gt;또한 여러 객체가 조건과 일치하면 쿼리가 훨씬 느리게 실행될 수 있습니다.&lt;/p&gt;

&lt;p&gt;열에 고유한 제한 조건이 있다면 위와 같은 현상이 일어나지 않을 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;을 사용할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;unique&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;db_index&lt;/code&gt; 된 열을 사용합니다.&lt;/p&gt;

&lt;p&gt;두 번째, 조회는 단 하나의 객체가 반환될 것이라고 보장하지 않습니다.&lt;/p&gt;

&lt;p&gt;쿼리가 두 개 이상의 객체와 일치하면 데이터베이스에서 모든 객체를 검색하여 전송합니다.&lt;/p&gt;

&lt;p&gt;수백 또는 수천 개의 레코드가 반환되면 이 페널티는 상당히 클 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/queries/#queryset-model-example&quot; target=&quot;_blank&quot;&gt;예시 Weblog 모델&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이 코드보다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;News Item Title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이 코드가 빠릅니다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드보다 아래 코드가 빠른 이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;라는 열이 데이터베이스에 의해 인덱스되었고, 고유하다는 것을 보장받기 때문입니다.&lt;/p&gt;

&lt;h2 id=&quot;5-필요한-항목은-즉시-검색하세요&quot;&gt;5. 필요한 항목은 즉시 검색하세요&lt;/h2&gt;

&lt;p&gt;일반적으로 모든 부분을 필요로 하는 한 데이터 집합의 여러 부분에 대해 데이터베이스를 여러 번 히트하는 것은 하나의 쿼리에서 모두 검색하는 것보다 효율적이지 않습니다.
이 사항은 루프에서 실행되는 쿼리가 있는 경우 특히 중요하므로 하나만 필요할 때 많은 데이터베이스 쿼리를 수행할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;querysetselect_related-및-prefetch_related를-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.select_related()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;prefetch_related()&lt;/code&gt;를 사용하기&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.select_related&quot; target=&quot;_blank&quot;&gt;select_related()&lt;/a&gt; 및 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.prefetch_related&quot; target=&quot;_blank&quot;&gt;prefetch_related()&lt;/a&gt;를 철저히 이해하고 사용하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Manager가 사용 중이거나 사용되지 않을 떄를 숙지해야 합니다.&lt;/li&gt;
  &lt;li&gt;view 코드 혹은 다른 레이어에서 필요에 따라 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.prefetch_related_objects&quot; target=&quot;_blank&quot;&gt;prefetch_related_objects()&lt;/a&gt;를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-필요없는-항목은-검색하지-마세요&quot;&gt;6. 필요없는 항목은 검색하지 마세요&lt;/h2&gt;

&lt;h4 id=&quot;querysetvalues-및-values_list를-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.values()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;values_list()&lt;/code&gt;를 사용하기&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; 값을 원할 때, ORM 모델 객체가 필요하지 않은 경우에는 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.values&quot; target=&quot;_blank&quot;&gt;values​​()&lt;/a&gt;를 적절하게 사용하세요. 템플릿 코드에서 모델 객체를 대체하는 데 유용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;querysetdefer-및-only를-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.defer()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;only()&lt;/code&gt;를 사용하기&lt;/h4&gt;

&lt;p&gt;데이터베이스 열(column)이 필요없다는 것을 알고 있거나(대부분의 경우 필요하지 않을 것이다) 데이터베이스 열(column)이 로드되지 않도록 하려면 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.defer&quot; target=&quot;_blank&quot;&gt;defer()&lt;/a&gt;와 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.only&quot; target=&quot;_blank&quot;&gt;only()&lt;/a&gt;를 사용하세요. 하지만 부적절하게 사용하는 경우 ORM이 별도의 쿼리로 가져와야 하므로 더 나빠질 수도 있음을 알아두세요.&lt;/p&gt;

&lt;p&gt;또한 지연된 필드(deferred fields)가 있는 모델을 생성할 때, Django 내부에서 발생하는 약간의 오버 헤드가 있음에 유의하세요. &lt;code class=&quot;highlighter-rouge&quot;&gt;defer()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;only()&lt;/code&gt; 메서드는 많은 텍스트 데이터를 로드하지 않거나 Python으로 다시 변환하기 위해 많은 처리가 필요한 필드의 경우 가장 유용합니다. 항상 그렇듯이 먼저 프로파일링을 한 다음 최적화하세요.&lt;/p&gt;

&lt;h4 id=&quot;querysetcount-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.count()&lt;/code&gt; 사용하기&lt;/h4&gt;

&lt;p&gt;개수만 원하는 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;len(queryset)&lt;/code&gt;보다 적절합니다.&lt;/p&gt;

&lt;h4 id=&quot;querysetexists-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.exists()&lt;/code&gt; 사용하기&lt;/h4&gt;

&lt;p&gt;적어도 하나의 결과가 존재하는지 알아내고 싶은 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;if queryset&lt;/code&gt;보다 적절합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하지만&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;count-및-exists를-과도하게-사용하지-마세요&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;exists()&lt;/code&gt;를 과도하게 사용하지 마세요&lt;/h4&gt;

&lt;p&gt;QuerySet에서 다른 데이터가 필요하다면 그냥 계산하세요.&lt;/p&gt;

&lt;p&gt;예를 들어, User 모델과 many-to-many 관계가 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; 속성을 가진 Email 모델이 있다고 가정하면 다음 템플릿 코드가 최적입니다.&lt;/p&gt;

&lt;div class=&quot;language-django highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;display_inbox&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;user.emails.all&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emails&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You have &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt; email(s)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emails&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;email.body&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No messages today.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endwith&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 이유로 최적입니다:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;display_inbox&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;일 경우 데이터베이스 쿼리가 발생하지 않아서 QuerySet이 게으르기(lazy) 때문입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/templates/builtins/#std:templatetag-with&quot; target=&quot;_blank&quot;&gt;with&lt;/a&gt;를 사용하면 나중에 사용할 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;user.emails.all&lt;/code&gt;을 변수에 저장하여 다시 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{% if emails %}&lt;/code&gt; 행은 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.__bool__()&lt;/code&gt;이 호출되도록 합니다. 이 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;user.emails.all()&lt;/code&gt; 쿼리가 데이터베이스에서 실행되고 최소한 첫 번째 행은 ORM 객체로 변환됩니다. 결과가 없으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;를 반환하고 그렇지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;를 반환합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{{ emails|length }}&lt;/code&gt;를 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.__len__()&lt;/code&gt;을 호출하여 다른 쿼리를 수행하지 않고 나머지 캐시를 채웁니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 루프는 이미 채워진 캐시를 반복합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전체적으로 이 코드는 하나 또는 0개의 데이터베이스 쿼리를 수행합니다. 수행된 유일한 의도적 최적화는 &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 태그의 사용입니다.
언제든지 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.exists()&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.count()&lt;/code&gt;를 사용하면 추가 쿼리가 발생합니다.&lt;/p&gt;

&lt;h4 id=&quot;querysetupdate-및-delete를-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet.update()&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt;를 사용하기&lt;/h4&gt;

&lt;p&gt;객체의 로드를 검색하고, 일부 값을 설정하고, 개별적으로 저장하는 대신, &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/queries/#topics-db-queries-update&quot; target=&quot;_blank&quot;&gt;QuerySet.update()&lt;/a&gt;를 통해 대량 SQL UPDATE 문을 사용하세요.
마찬가지로 가능한 경우에 대량 삭제(&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/topics/db/queries/#topics-db-queries-delete&quot; target=&quot;_blank&quot;&gt;bulk deletes&lt;/a&gt;)를 수행하세요.
그러나 이러한 일괄 업데이트 메서드는 개별 인스턴스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt; 메서드를 호출할 수 없으므로 이러한 메서드에 대해 추가한 사용자 지정 동작은 일반 데이터베이스 객체 시그널(&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/signals/&quot; target=&quot;_blank&quot;&gt;signals&lt;/a&gt;)에서 비롯된 모든 작업을 포함하여 실행되지 않습니다.&lt;/p&gt;

&lt;h4 id=&quot;외래-키-값-직접-사용하기&quot;&gt;외래 키 값 직접 사용하기&lt;/h4&gt;

&lt;p&gt;외래 키 값만 필요하면 관련 객체 전체를 가져오는 대신 이미 가지고있는 객체에 있는 외래 키 값을 사용하세요.&lt;/p&gt;

&lt;p&gt;즉,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이렇게 말고&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이렇게 사용하세요&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blod_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;상관없다면-결과를-정렬하지-마세요&quot;&gt;상관없다면 결과를 정렬하지 마세요&lt;/h4&gt;

&lt;p&gt;정렬은 결코 가벼운 작업이 아닙니다. 각 필드별로 데이터베이스가 반드시 수행해야하는 작업입니다. 모델에 기본 순서(&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/options/#django.db.models.Options.ordering&quot; target=&quot;_blank&quot;&gt;Meta.ordering&lt;/a&gt;)가 있고, 필요하지 않은 경우 매개 변수 없이 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.order_by&quot; target=&quot;_blank&quot;&gt;order_by()&lt;/a&gt;를 호출하여 QuerySet에서 모델을 제거하세요.&lt;/p&gt;

&lt;p&gt;데이터베이스에 인덱스를 추가하면 정렬 성능을 향상시키는 데 도움이 될 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;7-일괄-삽입&quot;&gt;7. 일괄 삽입&lt;/h2&gt;

&lt;p&gt;가능한 경우, 개체를 만들 때 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.bulk_create&quot; target=&quot;_blank&quot;&gt;bulk_create()&lt;/a&gt; 메서드를 사용하여 SQL 쿼리 수를 줄입니다.&lt;/p&gt;

&lt;p&gt;예를 들어,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이 코드보다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This is a test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This is only a test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이 코드가 더 바람직하다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bulk_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This is a test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This is only a test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 방법에는 &lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/ref/models/querysets/#django.db.models.query.QuerySet.bulk_create&quot; target=&quot;_blank&quot;&gt;여러 가지 주의 사항&lt;/a&gt;이 있으므로 사용 사례에 적절한 지 확인하세요.&lt;/p&gt;

&lt;p&gt;이것은 ManyToManyFields에도 적용됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이 코드보다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_band&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_band&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 이 코드가 더 바람직하다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_band&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;읽어주셔서 감사합니다 :)&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/database-access-optimization/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/database-access-optimization/</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        <category>database</category>
        
        <category>optimization</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Django에서 F() 객체 알아보기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글은 Django 2.0 기준으로 작성되었습니다.&lt;br /&gt;
참고: &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/models/expressions/#f-expressions&quot;&gt;Query Expressions 공식 문서&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Django 공식 문서에서 &lt;strong&gt;쿼리 표현식 (Query Expressions)&lt;/strong&gt;이란 &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;order by&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;annotation&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aggreagate&lt;/code&gt;의 일부로 사용할 수 있는 값 혹은 표현식을 일컫는다.
이러한 쿼리 표현식의 핵심이 되는 클래스가 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체이다.&lt;/p&gt;

&lt;h2 id=&quot;f&quot;&gt;F()…?&lt;/h2&gt;

&lt;p&gt;Django 공식 문서에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체에 대한 정의를 보자면,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;F() 객체는 모델의 필드 혹은 어노테이트된 열의 값을 나타낸다.
실제로 데이터베이스에서 Python 메모리로 가져오지 않고, 모델 필드 값을 참조하고 이를 데이터베이스에서 사용하여 작업할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한마디로 Django에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체를 사용하게 되면, 그 연산에 해당하는 쿼리를 만들어낸다는 것이다.&lt;/p&gt;

&lt;p&gt;아래 예제를 통해 설명해보겠다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tintin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stories_filed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예제에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed&lt;/code&gt; 값을 데이터베이스에서 Python 메모리로 가져와서 Python 연산자를 통해 데이터를 조작하고 그 값을 다시 데이터베이스에 저장했다.&lt;/p&gt;

&lt;p&gt;하지만 이 작업을 다음과 같이 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tintin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stories_filed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stories_filed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예제의 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed = F('stories_filed') + 1&lt;/code&gt; 이 라인에서 Python 연산자를 사용한 것처럼 보이지만 아니다.&lt;/p&gt;

&lt;p&gt;Django에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체를 만나면, Python 연산자를 오버라이딩하여 캡슐화된 SQL문을 생성한다.&lt;/p&gt;

&lt;p&gt;위의 작업은 전적으로 데이터베이스에서 처리하므로, Python에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed&lt;/code&gt;에 대해 알 수 없다.&lt;/p&gt;

&lt;p&gt;따라서 위의 작업으로 저장된 새로운 값을 사용하려면 반드시 아래 코드처럼 다시 불러와야 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 또는 간결하게 아래처럼&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh_from_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;f-객체-쓰면-뭐가-좋나요&quot;&gt;F() 객체 쓰면 뭐가 좋나요?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체의 이점은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Python이 아닌 데이터베이스에서 해당 연산을 처리한다는 점과,&lt;/li&gt;
  &lt;li&gt;몇몇 작업에 필요한 쿼리 수를 줄일 수 있다는 점이다.&lt;/li&gt;
  &lt;li&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체의 또 다른 이점은 &lt;strong&gt;경쟁 조건 (race condition)을 피할 수 있다는 점이다&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;만약 Python 스레드가 여러 개가 실행되고 있던 경우에, 2개의 스레드(1번, 2번)에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed&lt;/code&gt; 값을 1 증가시키는 작업을 하고 있다고 가정해보자.&lt;/p&gt;

&lt;p&gt;더해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed&lt;/code&gt; 값이 1이었다고 가정해보자.&lt;/p&gt;

&lt;p&gt;그러면 1번 스레드는 데이터베이스에서 Python 메모리로 값을 가져와서 Python 연산자를 통해 1 증가시킨 값인 2를 데이터베이스에 저장하려고 한다.&lt;/p&gt;

&lt;p&gt;그리고 2번 스레드가 1번 스레드가 데이터베이스에 채 저장하기 전에 값에 접근해서 1번 스레드에서 증가시키기 전과 같은 값인 2를 계산해냈다.&lt;/p&gt;

&lt;p&gt;그렇게 되면 2번 스레드는 1번 스레드가 했었던 작업과 정확히 똑같은 작업을 하게 되고, 1번 스레드의 작업은 손실된다.&lt;/p&gt;

&lt;p&gt;즉, 2개의 스레드를 돌려 2를 증가하게 하고 싶었으나 1밖에 증가시키지 못한 것이다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체를 사용하게 될 경우, Python에서 해당 값을 메모리에 가지고 있다가 처리하는 것이 아니라 데이터베이스에서 해당 작업을 처리하기 때문에 이러한 경쟁 조건을 피할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체는 어노테이션, 필터링, 정렬에도 굉장히 효과적으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;정렬에 사용되는 예시를 보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'last_contacted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nulls_last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Company&lt;/code&gt; 모델 인스턴스들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_contacted&lt;/code&gt; 필드를 기준으로 내림차순 정렬하되, 해당 필드가 null 값을 가졌을 경우에 제일 뒤로 보낸다.&lt;/p&gt;

&lt;p&gt;반대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;nulls_first&lt;/code&gt; 옵션도 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;.asc()&lt;/code&gt; 메서드도 있다.&lt;/p&gt;

&lt;p&gt;그리고 어노테이션에도 유용하게 쓰인다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chairs_needed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'num_employees'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'num_chairs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위처럼 모델 인스턴스의 필드 값을 이용해 간단한 연산을 해서 동적으로 필드를 추가해줄 수도 있다.&lt;/p&gt;

&lt;p&gt;만약 필드가 다른 타입이라면, &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;output_field&lt;/code&gt;를 지정할 수 없으니 아래처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;ExpressionWrapper&lt;/code&gt;로 해당 표현식을 감싸줘야 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpressionWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpressionWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'active_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'duration'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체가 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;를 참조하게 될 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체는 모델 인스턴스 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;primary key&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;h2 id=&quot;주의해야할-점이-있나요&quot;&gt;주의해야할 점이 있나요?&lt;/h2&gt;

&lt;p&gt;이렇게 좋은 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체를 사용할 때도 &lt;strong&gt;주의해야할 점이 있다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;모델 필드에 할당된 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체는 모델 인스턴스를 저장한 후에도 유지되며 각 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;에 적용된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tintin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stories_filed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stories_filed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tintin Jr.'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed&lt;/code&gt; 값이 1이었다고 가정하고, 위의 코드를 실행하게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;reporter.stories_filed&lt;/code&gt; 값은 3이 되어있다.&lt;/p&gt;

&lt;p&gt;외에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;F()&lt;/code&gt; 객체의 사용법은 굉장히 다양하다. 때에 따라 적절한 사용법을 찾으면 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 고맙습니다 :D&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/django-f-class/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/django-f-class/</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        <category>f-expressions</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Mocking 알아보기 with Python</title>
        <description>&lt;h2 id=&quot;mocking-이-필요하다고-느낀-순간&quot;&gt;Mocking 이 필요하다고 느낀 순간&lt;/h2&gt;

&lt;p&gt;테스트 코드를 작성하다보면 가끔은 실제로 실행할 수 없는 코드들을 마주하게 된다.&lt;/p&gt;

&lt;p&gt;예를 들어 SMS API를 호출하여 문자를 발송한다던지, 결제 API를 사용해서 결제를 한다던지 말이다.&lt;/p&gt;

&lt;p&gt;이러한 외부 API를 테스트 코드에서 호출하게 되면 실제로 API가 작동해버릴 수 있으니 조심해야한다.&lt;/p&gt;

&lt;p&gt;하지만 이러한 응답값에 대해 로직을 테스트하고 싶을 땐 어떻게 해야할까.&lt;/p&gt;

&lt;p&gt;Mocking 이 그 해결책이다.&lt;/p&gt;

&lt;h4 id=&quot;mocking-이란&quot;&gt;Mocking 이란?&lt;/h4&gt;

&lt;p&gt;Mock 이라는 단어의 사전적 의미는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(특히 흉내를 내며) 놀리다&lt;/li&gt;
  &lt;li&gt;무시하다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;거짓된, 가짜의&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mocking 이라는 것은 실제 값으로 테스트를 하기 어려우니 가짜 값을 사용할 수 있게 해주는 것이다.&lt;/p&gt;

&lt;h4 id=&quot;mocking-이-필요할-때&quot;&gt;Mocking 이 필요할 때&lt;/h4&gt;

&lt;p&gt;Mocking 이라는 작업은 위에서 말했듯이 실제 값이 아닌 가짜 값을 만들어내는 것이다.&lt;/p&gt;

&lt;p&gt;이러한 작업이 테스트를 작성하는 데에 있어서 어떠한 때에 필요할까.&lt;/p&gt;

&lt;p&gt;길지 않은 개발 경험이지만 필요하다고 생각될 때를 적어보았다.&lt;/p&gt;

&lt;h5 id=&quot;1-외부-api가-정상적으로-작동하지-않을-때&quot;&gt;1. 외부 API가 정상적으로 작동하지 않을 때&lt;/h5&gt;

&lt;p&gt;이때는 테스트의 결과가 보장받지 못한다.&lt;/p&gt;

&lt;p&gt;즉, 테스트가 외부 API에 &lt;strong&gt;굉장히 의존적이게 된다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;무슨 소리냐하면 예를 들어, 내가 테스트 코드를 작성할 때에는 외부 API가 응답을 잘 해줬지만, CI에서 테스트할 때는 외부 API를 제공해주는 서비스가 뻗어버려서 테스트의 결과가 뒤죽박죽이 될 수도 있다.&lt;/p&gt;

&lt;p&gt;이러한 경우는 외부 API에 너무 의존적이므로, 해당 API를 사용하는 부분에서 응답값을 Mocking 해줘야 한다.&lt;/p&gt;

&lt;h5 id=&quot;2-외부-api를-호출할-때-비용이-발생하는-경우&quot;&gt;2. 외부 API를 호출할 때 비용이 발생하는 경우&lt;/h5&gt;

&lt;p&gt;외부 API를 호출할 때 그 횟수에 따라 비용이 발생하는 경우가 있다. SMS API 혹은 Email 관련 API가 그렇다.&lt;/p&gt;

&lt;p&gt;이러한 경우에도 마찬가지로 외부 API에 너무 의존적인데다가, 비용까지 발생하게 되니 더더욱 실제로 호출해서는 안된다.&lt;/p&gt;

&lt;p&gt;마찬가지로 Mocking 이 필요하다.&lt;/p&gt;

&lt;p&gt;더 많은 무수한 경우들이 있겠지만 이 정도로 정리하고, 말만 했던 이 Mocking을 어떻게 하는지 알아볼까한다.&lt;/p&gt;

&lt;h4 id=&quot;mocking-해보기&quot;&gt;Mocking 해보기&lt;/h4&gt;

&lt;p&gt;아래의 Gist에 작성된 코드를 이용해서 설명을 해보려한다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Leop0ld/ee9d746fd1739ee9a58f5d74bb3b8674.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;google_query&lt;/code&gt; 라는 함수를 작성하고, 해당 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt; 라는 라이브러리를 이용해 google 에 GET 요청을 보내고 해당 response 객체의 content 속성을 반환한다.&lt;/p&gt;

&lt;p&gt;그 다음 TestCase 작성한다.&lt;/p&gt;

&lt;p&gt;주목해야 할 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;_mock_response&lt;/code&gt; 함수와 &lt;code class=&quot;highlighter-rouge&quot;&gt;@mock.patch('requests.get')&lt;/code&gt; 데코레이터 부분이다.&lt;/p&gt;

&lt;p&gt;간단하게 설명하자면 &lt;code class=&quot;highlighter-rouge&quot;&gt;_mock_response&lt;/code&gt; 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 객체를 이용해서 가짜로 만들어내는 함수다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;@mock.patch('requests.get')&lt;/code&gt; 데코레이터는 해당 함수를 &lt;strong&gt;Monkey Patch&lt;/strong&gt; 하겠다는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Monkey Patch란 런타임에 메서드나 변수를 추가하거나 변경하는 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그래서 테스트 함수의 2번째 인자 &lt;code class=&quot;highlighter-rouge&quot;&gt;mock_get&lt;/code&gt; 이라는 이름의 인자를 넘겨주었고, 이제 해당 테스트 함수 내부에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests.get&lt;/code&gt; 을 호출하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;mock_get&lt;/code&gt; 이 대신 호출된다.&lt;/p&gt;

&lt;p&gt;기존에 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.gets&lt;/code&gt; 은 response 객체를 반환했으므로 기존에 만들어둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;_mock_response&lt;/code&gt; 함수를 통해 가짜 response 객체를 생성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;mock_get&lt;/code&gt; 함수의 &lt;code class=&quot;highlighter-rouge&quot;&gt;return_value&lt;/code&gt; 속성에 넣어주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mocking&lt;/code&gt; 이 된 것이다.&lt;/p&gt;

&lt;p&gt;그런 다음 처음에 만들어둔 우리가 작성한 로직에 해당하는 함수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;google_query&lt;/code&gt; 를 호출하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests.get&lt;/code&gt; 으로 가져오는 response 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;mock_get&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;return_value&lt;/code&gt; 인 &lt;code class=&quot;highlighter-rouge&quot;&gt;_mock_response&lt;/code&gt; 를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 객체를 받게 되고, 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; 속성을 반환해주기 때문에 테스트는 성공한다.&lt;/p&gt;

&lt;p&gt;그리고 실패하는 케이스의 테스트 함수를 보겠다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_mock_response&lt;/code&gt; 함수 중간에 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;raise_for_status&lt;/code&gt; 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 객체를 대입하고, 인자로 넘어온 값이 있으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;side_effect&lt;/code&gt; 라는 속성에 값을 추가해주는 부분이 있다.&lt;/p&gt;

&lt;p&gt;이 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests.get&lt;/code&gt; 도중에 실패했을 경우를 테스트하기 위해서 만들어둔 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;side_effect&lt;/code&gt; 속성은 해당 객체가 호출됐을 때, 오류를 발생시킨다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_failed_query&lt;/code&gt; 함수를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;self._mock_response&lt;/code&gt; 함수를 이용해 가짜 객체를 생성할 때, 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;raise_for_status&lt;/code&gt; 라는 이름의 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTPError&lt;/code&gt; 를 넘겨주고 있다.&lt;/p&gt;

&lt;p&gt;이렇게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;google_query&lt;/code&gt; 함수 안에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;raise_for_status&lt;/code&gt; 함수를 호출했을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTPError&lt;/code&gt; 가 발생한다.&lt;/p&gt;

&lt;p&gt;그래서 테스트 함수 내에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;assertRaises&lt;/code&gt; 함수를 통해 이를 확인하고 있다.&lt;/p&gt;

&lt;p&gt;이런식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mocking&lt;/code&gt; 작업을 할 수 있다.&lt;/p&gt;

&lt;p&gt;필자도 많이 작성해보지는 않았으나 원리는 대충 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 객체를 통해 테스트하기 껄끄러운 함수가 반환하는 객체를 만들어내고, Monkey Patch(&lt;code class=&quot;highlighter-rouge&quot;&gt;@mock.patch&lt;/code&gt; 데코레이터) 를 통해 함수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;return_value&lt;/code&gt; 가 만들어둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; 인 함수로 바꿔치기 해주면 끝이다.&lt;/p&gt;

&lt;p&gt;생각해보면 그리 어렵지도 않은 것인데 처음 접하다보니 어려웠던 것 같다.&lt;/p&gt;

&lt;p&gt;그동안 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mocking&lt;/code&gt; 에 대해 개념만 대충 알고 있었는데 코드로 정리를 하고나니 개운하다.&lt;/p&gt;

&lt;p&gt;앞으로도 블로그 열심히 해야겠다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다 :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고한 곳&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://gist.github.com/evansde77/45467f5a7af84d2a2d34f3fcb357449c&quot;&gt;mock_requests.py&lt;/a&gt; 원본&lt;/li&gt;
    &lt;li&gt;Python 공식 문서 - &lt;a href=&quot;https://docs.python.org/3/library/unittest.mock.html&quot;&gt;unittest.mock&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;테스트 관련하여 참고하면 좋을만한 글: &lt;a href=&quot;https://blog.outsider.ne.kr/1275&quot;&gt;유닛테스트에 대한 생각&lt;/a&gt; - Outsider&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/about-mocking/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/about-mocking/</guid>
        
        <category>python</category>
        
        <category>test</category>
        
        <category>mocking</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Django view 안에서 쿼리 개수 확인하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글은 Django 2.0 기준으로 작성되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가끔 개발하다가 오른쪽 옆에 떠있는 &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot; target=&quot;_blank&quot;&gt;django debug toolbar&lt;/a&gt; 의 SQL 패널을 보고 쿼리 개수를 확인하는 경우가 많다.&lt;/p&gt;

&lt;p&gt;하지만 json response 를 return 하는 View 경우에는 debug toolbar 로 확인하는 것도 한계가 있다.&lt;/p&gt;

&lt;p&gt;그럴 떄 쉽게 View 단에서 쿼리 개수를 console 에 나타낼 수 있는 방법을 소개해볼까 한다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Leop0ld/ecd3993980d2204c317390da8b1668ad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;필자가 작성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;connection.queries&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt;이라는 속성을 가진 Dictionary의 List를 반환하고 있다.&lt;/p&gt;

&lt;p&gt;띠리서 해당 List에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;len()&lt;/code&gt;을 실행하면 쿼리의 개수를 알 수 있다.&lt;/p&gt;

&lt;p&gt;게다가 아래 Snippet 에선 Dictionary 안에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt;값을 통해 특정 View 에서 걸리는 쿼리의 시간을 확인할 수도 있다.&lt;/p&gt;

&lt;p&gt;하지만 어디까지나 django debug toolbar 를 못쓸 때의 이야기이다.&lt;/p&gt;

&lt;p&gt;쓸 수 있다면 무조건 debug toolbar 로 확인하는 게 다방면에서 좋은 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.0/faq/models/&quot; target=&quot;_blank&quot;&gt;해당 공식문서 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;감사합니다 :D&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/get-query-count-in-django-view/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/get-query-count-in-django-view/</guid>
        
        <category>django</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Goodbye 2017. Hello 2018!</title>
        <description>&lt;h1 id=&quot;2017년-회고&quot;&gt;2017년 회고&lt;/h1&gt;

&lt;p&gt;2016년 회고에서는 그 당시 올해(2016년)에 제일 뭔가 많이 한 해라고 끄적이면서 시작헀었다.&lt;/p&gt;

&lt;p&gt;올해 역시 올해(2017년)가 제일 &lt;strong&gt;많이 무언가를 시도했던 해&lt;/strong&gt;가 아닐까 싶다. &lt;del&gt;했다고는 차마 못하겠고…&lt;/del&gt;&lt;/p&gt;

&lt;h1 id=&quot;작년에-다짐했던-것들&quot;&gt;작년에 다짐했던 것들&lt;/h1&gt;

&lt;p&gt;작년에 다짐했던 것들 위주로 보아야겠다고 생각했다.&lt;/p&gt;

&lt;h2 id=&quot;1-django-는-나와-함께&quot;&gt;1. django 는 나와 함께…&lt;/h2&gt;

&lt;p&gt;갑시다!&lt;/p&gt;

&lt;h2 id=&quot;2-ecmascript-와의-만남&quot;&gt;2. ECMAScript 와의 만남&lt;/h2&gt;

&lt;p&gt;은 썩 그렇게 좋지는 않았다. 만남이 지속되지는 않고 있다.&lt;/p&gt;

&lt;h2 id=&quot;3-deview--jscon-가보기&quot;&gt;3. Deview &amp;amp; JSCON 가보기&lt;/h2&gt;

&lt;p&gt;는 실패했다 ㅠㅠ. 회의하느라 신청을 못했다. 큰 아쉬움은 없지만 한번쯤은 가보고 싶긴 하다.&lt;/p&gt;

&lt;h2 id=&quot;4-django-girls-seoul-organizer&quot;&gt;4. Django Girls Seoul Organizer&lt;/h2&gt;

&lt;p&gt;이 부분에선 할 말이 좀 있다.
올해는 Django Girls Seoul 의 일원으로서 많은 활동을 했다.
워크샵이나 각종 밋업은 기본이고, 다른 곳에서 주최하는 행사에 Django Girls Seoul 을 대표해서 참가하게 된 적도 있었다.
또 Django Girls Daegu 워크샵에도 가봤다. 워크샵 코치로 행사에 임했는데 대구는 처음이었던지라 모든 게 새롭고 재밌었다.
이런 재밌는 &lt;strong&gt;Django Girls Seoul Organizer 활동을 올해까지로 마무리한다&lt;/strong&gt;.
분명 더 하면 즐거울 일이 많겠지만 뒤에 나오는 내가 원하던 행사를 준비하기 위해서 어쩔 수 없는 결정을 내렸다.
너무 아쉽지만 앞으로도 꾸준히 Django Girls Seoul 에서 하는 행사는 가고 싶다!&lt;/p&gt;

&lt;h2 id=&quot;5-i-love-test-code&quot;&gt;5. I love test code&lt;/h2&gt;

&lt;p&gt;테스트 코드 쪽도 약간의 얘기가 있다.
원래 회사 프로젝트에서는 테스트 코드가 &lt;strong&gt;단 한줄도 없었다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;테스트의 중요성을 알면서도 작성하지 않은 경우가 대부분이었는데 2017년 초반부터는 의식적으로 꾸준히 테스트를 작성해갔다.
초반에 테스트 환경을 셋업하고, 테스트 코드에 적응하는 데에 시간이 조금 걸렸지만 익숙해지니 웬만한 테스트 코드는 작성할만했다.
다만 한가지 부분에선 아직도 해결방안을 못찾고 있다. Mocking.
Monkey Patch 나 MagicMock? 같은 것을 사용하던데 어떤 방식으로 사용하는지 모르겠다.
관련해서 이해하게 되면 블로그에 포스팅이나 끄적여봐야겠다. (이미 테스트 삽질하면서 &lt;a href=&quot;http://blog.leop0ld.org/posts/newbie-tests-view-in-django/&quot;&gt;끄적여놓은 게&lt;/a&gt; 있지만 ㅎㅎ…)&lt;/p&gt;

&lt;p&gt;그렇게 테스트 코드를 &lt;strong&gt;나 혼자&lt;/strong&gt; 작성하다보니 코드 베이스가 워낙 큰 회사 프로젝트에선 40퍼센트 후반까지가 &lt;strong&gt;한계&lt;/strong&gt; 였다.
그 뒤로는 다시 기능 개발의 굴레 속에 갇혀 PR 이 머지될 때마다 codecov 에서 테스트 커버리지가 떨어지는 모습을 지켜봐야했다.
얼마 전에 8percent 의 CTO 님이 올려주신 &lt;a href=&quot;https://brunch.co.kr/@leehosung/43&quot;&gt;테스트와 관련된 재밌는 글&lt;/a&gt; 을 봤다.
한편으로는 부럽기도 하고, 다른 한편으로는 오기가 생기기도 한다.
코드 베이스가 크다는 건 그만큼 다양한 케이스의 테스트를 작성할 수 있다는 의미이니(?) 다른 의미로는 기회다( &lt;del&gt;아무말&lt;/del&gt; ).
아무튼 2018년도에도 테스트 코드와 함께 하려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;6-나만의-라이브러리-만들어보기&quot;&gt;6. 나만의 라이브러리 만들어보기&lt;/h2&gt;

&lt;p&gt;정말정말 간단한 라이브러리지만 Golang 으로 만들어봤다. &lt;a href=&quot;https://github.com/Leop0ld/gorending&quot;&gt;Gorending Github&lt;/a&gt;
터미널에서 Github Trending 을 보여주게 해주는 CLI Tool 이다.
HTTP Client, HTML Parse, CLI Tooling 까지 생각할 부분이 많았지만 전부 라이브러리를 써서 일단 되게끔 만들어봤다.
Dependency 문제는 있지만 계속 강조하듯이 일단 되게 하고 나중에 더 Interactive 하게, 다른 라이브러리에 의존성 없이 만들어보고 싶다.
만들고 Demo 영상 찍어서 올리고, 혹시 몰라서 영어로 문서를 작성해봤는데 이런 &lt;a href=&quot;https://github.com/Leop0ld/gorending/pull/16&quot;&gt;PR&lt;/a&gt; 이 들어와서 기분이 좋았다.
그래도 뭔가 만들었다는 것에 의의를 두고 내년에는 좀 더 그럴싸한 걸 만들어보고 싶다(되도록이면 Python 쪽으로).&lt;/p&gt;

&lt;p&gt;물론 다짐했던 것들 외의 일도 많았다.
다음은 그 내용들을 정리해보려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;여러가지-행사-참가자--스태프--운영자&quot;&gt;여러가지 행사 참가자 &amp;amp; 스태프 &amp;amp; 운영자&lt;/h2&gt;

&lt;p&gt;2개의 해커톤( GDG Firbased Hack-a-thon, D3S Hack-a-thon ), 2번의 장고걸스 워크샵( Seoul, Daegu ), 9XD, I/O Extended in Seoul, KCD 등등… 다양하고 많은 개발자 행사에 참가했었다.
전부 다 너무 재밌었고, 즐거웠던 것 같다(아마).
내년에는 전체적으로 좀 줄이고, DjangoCon 준비 및 개인적인 공부(CS 기초쪽) 를 하고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;발표-발표-발표&quot;&gt;발표, 발표, 발표,&lt;/h2&gt;

&lt;p&gt;올해는 한 것도 많지 않은데 발표는 조금 했다.
Sinabro 라는 고등학생 커뮤니티에서 Django 와 관련된 &lt;a href=&quot;https://www.slideshare.net/ssuseraaed82/django-73419113&quot;&gt;발표&lt;/a&gt;, 그리고 소프트웨어 마에스트로 100+ 컨퍼런스에서도 Django 완 관련된 &lt;a href=&quot;https://www.slideshare.net/ssuseraaed82/aws-elastic-beanstalk-ci-django&quot;&gt;발표&lt;/a&gt;, 마지막으로 Python 연말 세미나에서 DjangoCon Korea 와 관련된 &lt;a href=&quot;https://www.slideshare.net/ssuseraaed82/djangocon-korea-83696925&quot;&gt;발표&lt;/a&gt; 를 했다.
지금 훑어보면 기본적으로 발표 자료들이 내용이 부실한 것 같다.
내년엔 주제가 떠오른다면 &lt;strong&gt;좀 더 기술적인 주제&lt;/strong&gt; 로 &lt;strong&gt;멋진 곳에서&lt;/strong&gt; 발표해보고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;가칭-djangocon-korea&quot;&gt;(가칭) DjangoCon Korea&lt;/h2&gt;

&lt;p&gt;(가칭) DjangoCon Korea 2018 을 준비하고 있다.
개인 SNS 담벼락에서 너무 떠들어댔는지 주변 사람들을 만나면 다들 물어본다 언제쯤 열리냐고.
Python 연말 세미나에 오셔서 발표를 들으셨다면 알 수도 있겠지만, DjangoCon 이라는 이름을 확정적으로 사용하지는 못한다.
그래서 일단 Django 와 관련된 행사를 기획, 준비 하고 있다고 생각해주시면 될 것 같다.
내년 한해는 이 행사에 올인할 생각이고, 멋진 행사가 되게하려고 노력할거다.&lt;/p&gt;

&lt;h2 id=&quot;한국-방송통신대학교&quot;&gt;한국 방송통신대학교&lt;/h2&gt;

&lt;p&gt;한국 방송통신대학교(이하 방통대) 에 진학하려고 한다.
일과 병행은 물론이고, 산업기능요원과 병행도 가능하다.
&lt;strong&gt;선취업 후진학&lt;/strong&gt; 생각을 안한 것은 아닌데, 비용 측면에서 부담스럽기도 하고 내신 관리에는 자신이 없어서 일단 학비싸고 입학 쉬운 방통대로 진학을 해볼까 한다.
다만 졸업을 언제할 수 있을까는 나도 모르겠다.
ac.kr 도메인 메일이 생길 예정이니 너무 좋다 ㅎㅎ.&lt;/p&gt;

&lt;h1 id=&quot;2018년-다짐&quot;&gt;2018년 다짐&lt;/h1&gt;

&lt;h2 id=&quot;나만의-라이브러리-만들어보기&quot;&gt;나만의 라이브러리 만들어보기&lt;/h2&gt;

&lt;p&gt;내년엔 Python 라이브러리를 만들어보고 싶다.
사실 이미 만들고 있는 게 하나 있지만… 코인네스트 에서 제공해주는 API 를 좀 더 쉽게 Call 하기 위한 Python Client 다. &lt;a href=&quot;https://github.com/Leop0ld/coinnest-python-client&quot;&gt;GitHub&lt;/a&gt;
사실 라이브러리까지 갈 필요는 없었을 것 같은데, 공부 차원 + 한번도 해보지 못한 경험 이라서 Wrapping 해보려고 한다.
궁극적으로는 Telegram Bot 이나 CLI Tool 로 만드는 것이 목표다.
재밌는 경험이 될 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-테스트-테스트&quot;&gt;테스트! 테스트! 테스트!&lt;/h2&gt;

&lt;p&gt;위에서도 말했듯이 &lt;strong&gt;Mocking&lt;/strong&gt; 에 대해서 조금 공부해보려고 한다.
API client 를 만드는데 과연 테스트는 어떻게 짜야할지도 고민이다.
대책을 마련해서, 삽질기나 경험을 공유하는 글을 작성해보고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;블로그-좀-더-열심히&quot;&gt;블로그, 좀 더 열심히&lt;/h2&gt;

&lt;p&gt;올해 초반엔 열심히 썼었으나, 시간이 가면 갈수록 지쳐서 포스팅을 많이 작성하지 못한 것 같다.
물론 양보다는 질. 하나를 올리더라도 퀄리티 있게 쓰고 싶다.
내년엔 좀 더 열심히 작성해봐야겠다.&lt;/p&gt;

&lt;h2 id=&quot;djangocon-korea&quot;&gt;DjangoCon Korea&lt;/h2&gt;

&lt;p&gt;DjangoCon Korea 준비위원회 분들과 열심히 준비할 생각이다.
장소를 구하고 있는데 조건에 맞는 장소 구하기가 어렵다 ㅠㅠ…&lt;/p&gt;

&lt;p&gt;1년 동안 있던 수많은 일들을 글 하나에 정리할 수는 없겠지만 기술적으로 큼지막한 것들만 정리해봤다.
올해는 &lt;strong&gt;여러가지 재밌는 일이 있었고&lt;/strong&gt; , 내년에도 &lt;strong&gt;재밌는 일을 할 생각이다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;올해도 여자친구는 글렀다. 내년에도 글렀겠지.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;2017년 한 해 모두 감사했습니다.
2018년도 잘 부탁드립니다.&lt;/p&gt;

&lt;p&gt;긴 글 읽어주셔서 감사합니다 :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018년 가즈아ㅏㅏㅏㅏㅏㅏㅏㅏㅏㅏ&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/goodbye-2017-hello-2018/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/goodbye-2017-hello-2018/</guid>
        
        <category>review</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>select related, prefetch related 그리고 debug toolbar</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글은 django 1.11 LTS 버전 기준으로 작성되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/optimize-all-the-things.jpg&quot; alt=&quot;Optimize all the things!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;회사에 다니기 시작하면서 성능에 예민해지기 시작했고, Caching(캐싱), Query Optimization(쿼리 최적화) 등등 어찌보면 혼자서는 잘 접근할 수 없는 부분에 관심이 생겼다.&lt;/p&gt;

&lt;p&gt;그렇게 그냥저냥 회사코드를 만지다가 &lt;strong&gt;select_related&lt;/strong&gt;, &lt;strong&gt;prefetch_related&lt;/strong&gt; 를 만났다.&lt;/p&gt;

&lt;p&gt;처음에 &lt;strong&gt;select_related&lt;/strong&gt;, &lt;strong&gt;prefetch_related&lt;/strong&gt; 를 몰랐을 때는 로직을 잘 작성했는데 왜 이렇게 느리지 라고 생각했었다.&lt;/p&gt;

&lt;p&gt;알고보니 3 depths 였는데 아무런 행동도 취해주지 않아서 날렸던 쿼리를 또 날리고, 또 날리고 해서 느렸던 것이었다. ㅠㅠ&lt;/p&gt;

&lt;p&gt;django debug toolbar 라는 게 있는데 그것을 살펴보면 현재 페이지가 로딩될 때 몇개의 쿼리가 얼마나 걸렸는지 보여주는데, 보고 충격먹어서 쿼리 최적화를 잘 해야겠다는 생각으로 이번 글을 쓰게 되었다.&lt;/p&gt;

&lt;p&gt;처음에는 &lt;del&gt;헐 저게 뭐야&lt;/del&gt; 라는 심정으로 봤었는데 보다보니까 쪼금 봐줄만한 정도는 된 것 같다.&lt;/p&gt;

&lt;p&gt;이제부터 &lt;strong&gt;쿼리 최적화&lt;/strong&gt; 에 대한 이야기를 해볼까 한다.&lt;/p&gt;

&lt;h2 id=&quot;select_related-prefetch_related-그게-뭔데&quot;&gt;select_related? prefetch_related? 그게 뭔데?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.11/ref/models/querysets/#select-related&quot; target=&quot;_blank&quot;&gt;select_related 공식문서&lt;/a&gt;, &lt;a href=&quot;https://docs.djangoproject.com/en/1.11/ref/models/querysets/#prefetch-related&quot; target=&quot;_blank&quot;&gt;prefetch_related 공식문서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;select_related 와 prefetch_related 는 하나의 QuerySet 객체를 가져올 때 &lt;strong&gt;연관있는 Model 들을 같이 가져오게&lt;/strong&gt; 해주는 메서드이다.&lt;/p&gt;

&lt;p&gt;다만 두 메서드를 사용할 타이밍은 &lt;strong&gt;각각 다르다&lt;/strong&gt;. 조금 이따 다뤄보도록 하겠다.&lt;/p&gt;

&lt;p&gt;SQL에서 JOIN 구문은 하나의 쿼리에서 여러개의 테이블에 접근해서 다양한 값들을 얻는다.&lt;/p&gt;

&lt;p&gt;select_related 와 prefetch_related 도 마찬가지다. (내부적으로 JOIN 구문을 사용한다)&lt;/p&gt;

&lt;p&gt;다만 표현방식이 좀 더 ORM 스럽게 바뀐 것뿐이다. (ORM 에 관한 개인적인 견해는 따로 글을 작성해볼까 한다)&lt;/p&gt;

&lt;p&gt;이렇게 두 메서드 모두 DB에 접근하는 횟수, 즉 쿼리의 개수를 줄임으로써 성능향상을 꾀할 수 있다.&lt;/p&gt;

&lt;p&gt;다만 위에서 말했듯이 두 메서드를 사용할 타이밍이 각각 다르다.&lt;/p&gt;

&lt;p&gt;이제 이것에 대해 알아보도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;설명-시작하기-앞서&quot;&gt;설명 시작하기 앞서&lt;/h2&gt;

&lt;p&gt;아래와 같은 모델 구조에서 간단하게 select_related, prefetch_related 를 이해해보려고 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 경우는 대강 아래 그림과 같은 구조를 이루고 있을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/select_related-example.jpg&quot; alt=&quot;Model 구조&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 알아보도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;select_related&quot;&gt;select_related&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;select_related&lt;/strong&gt; 는 1:1의 관계에서 사용할 수 있고, 혹은 1:N 관계에서 N이 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;처음 들으면 무슨 소린지 이해가 안된다. (필자도 똑같았다)&lt;/p&gt;

&lt;p&gt;필자가 예시로 만들어뒀던 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Car&lt;/code&gt; 기준으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;예시 코드를 봐보도록 하겠다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1번 코드&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 2번 코드&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_related&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'owner'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 두개의 코드는 그렇게 많은 차이는 없다.&lt;/p&gt;

&lt;p&gt;하지만 1번 코드의 쿼리 개수는 총 2개고, 2번 코드의 쿼리 개수는 총 1개다.&lt;/p&gt;

&lt;p&gt;1번 코드는 Car 모델에서 car 를 id 로 get 하기 위한 쿼리 1개 + 그 car 의 owner 를 찾기 위한 쿼리 1개 해서 총 2개다.&lt;/p&gt;

&lt;p&gt;그에 비해 2번 코드는 Car 모델에서 car 를 id 로 get 함과 동시에 Person 모델에서 car 의 owner 를 찾아둔다.&lt;/p&gt;

&lt;p&gt;물론 이렇게 간단한 코드에서는 1개 차이정도밖에 안나겠지만 로직이 조금만 복잡해져도 큰 차이를 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;N(여기서는 Car 모델)의 입장에서 바라볼 때 1(Person)은 1개밖에 없다.&lt;/p&gt;

&lt;p&gt;이런 경우에 select_related 를 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;prefetch_related&quot;&gt;prefetch_related&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;prefetch_related&lt;/strong&gt; 는 반대로 M:N 에 관계에서 사용할 수 있고, 1:N 의 관계에서 1이 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;위와 동일한 모델 구조가 있다고 가정할 때 반대의 입장에서 생각해보겠다.&lt;/p&gt;

&lt;p&gt;한 Person 인스턴스가 가진 car 들을 가져오고 싶을 때는 아래와 같이 하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefetch_related&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'car_set'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 owner 라는 Person 인스턴스 하나가 가진 car 들의 이름을 전부 출력해주는 간단한 코드다.&lt;/p&gt;

&lt;p&gt;prefetch_related 메서드는 위처럼 1:N 의 관계의 1(예시에서는 Person)의 입장에서 쓰기 수월하다.&lt;/p&gt;

&lt;p&gt;prefetch_related 메서드의 경우 좀 더 복잡하게 들어가게 될 수도 있다.&lt;/p&gt;

&lt;p&gt;이런 경우에는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.11/ref/models/querysets/#prefetch-objects&quot; target=&quot;_blank&quot;&gt;Prefetch class&lt;/a&gt; 를 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;프로덕션 레벨의 프로젝트에서는 모델 구조가 복잡한 경우가 많은데 이럴 경우에 Prefetch class 를 쓰는 경우도 많다.&lt;/p&gt;

&lt;p&gt;직접 예제로 설명하기는 어려울 것 같고, 간단하게 설명하자면 복잡한 모델 구조 속에서 string 값을 이용한 prefetch 로는 버거울 경우 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;특정하게 filtering 된 QuerySet 을 지정해서 prefetch 를 할 수도 있고 굉장히 다양하게 시도해볼 수 있다.&lt;/p&gt;

&lt;p&gt;이 경우는 수가 너무 많아서 예시를 들어 설명하기가 어려울 것 같아 생략하겠다. (나중에 시간나면 예제를 추가해보도록 하겠다)&lt;/p&gt;

&lt;h3 id=&quot;django-debug-toolbar&quot;&gt;django debug toolbar&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://django-debug-toolbar.readthedocs.io/en/stable/&quot; target=&quot;_blank&quot;&gt;공식문서&lt;/a&gt;, &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot; target=&quot;_blank&quot;&gt;Github 주소&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;django debug toolbar는 개발 환경에서 사용되는 아주 유용한 도구다.&lt;/p&gt;

&lt;p&gt;쿼리의 개수나 속도는 물론이고 템플릿에 사용된 템플릿 파일이나 현재 django의 버전 등등 개발하는 데 필요한 많은 정보를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;매우 유용하니 개발 환경에 설치해보고 사용하시는 걸 추천한다.&lt;/p&gt;

&lt;p&gt;필자는 쿼리 최적화 작업을 하면서 아주 유용하게 사용했던 경험이 있다.&lt;/p&gt;

&lt;p&gt;아래는 debug toolbar 의 사용할 때 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/django-debug-toolbar-1.png&quot; alt=&quot;django debug toolbar&quot; style=&quot;max-height: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 오른쪽 옆에 패널처럼 보이게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/django-debug-toolbar-2.png&quot; alt=&quot;django debug toolbar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 각 정보에 대해 세부적으로도 확인할 수 있고, 위처럼 중복된 쿼리는 &lt;strong&gt;Duplicated&lt;/strong&gt; 라고 나타내준다. 정말 편리하다.&lt;/p&gt;

&lt;p&gt;진짜 좋다. debug toolbar 꼭 쓰세요. 두 번 쓰세요.&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다 :D&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/django-query-optimization/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/django-query-optimization/</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>테스트 초보의 테스트 삽질기 with Django</title>
        <description>&lt;h2 id=&quot;test-all-the-things&quot;&gt;Test all the things!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/testallthethings.png&quot; style=&quot;width: 100%;&quot; alt=&quot;Test all the things!&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;20170502-update&quot;&gt;2017.05.02 UPDATE&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.test.Client&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;login()&lt;/code&gt; 메서드는 email 로그인이 가능했다…&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'l3opold7@gmail.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성할 경우 로그인 처리가 된다. ( &lt;del&gt;역시 Django가 이런 처리를 안해놨을 리가 없어!&lt;/del&gt; )&lt;/p&gt;

&lt;p&gt;그리고 또한 csrf token을 쓸 일이 꽤 있어서 TestCase의 메서드로 빼기로 했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlahTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_csrftoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Get csrf token
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'csrftoken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 식으로 빼서 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.get_csrftoken()&lt;/code&gt; 식으로 썼다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최근에 POST 메서드를 처리하는 View 를 다시 볼 일이 있어서 &lt;strong&gt;아 이제는 진짜 제대로 된 테스트 코드를 짜보자!&lt;/strong&gt; 하는 마음으로 테스트 코드를 짜보기로 했다.&lt;/p&gt;

&lt;p&gt;지금 현재 프로젝트에는 &lt;a href=&quot;circleci.com&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;circleci&lt;/code&gt;&lt;/a&gt; 가 붙어있고, &lt;a href=&quot;https://pytest-django.readthedocs.io/en/latest/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pytest-django&lt;/code&gt;&lt;/a&gt; 와 &lt;a href=&quot;http://flake8.pycqa.org/en/latest/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flake8&lt;/code&gt;&lt;/a&gt; 를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;(Tip! pytest 세팅은 &lt;a href=&quot;https://gist.github.com/perhapsspy/fc5521376df87036be2d034d1beaf69b&quot;&gt;여기&lt;/a&gt; 를 참고해봤다. 존경하는 분의 글이라 그런지 더 좋게 느껴졌다.)&lt;/p&gt;

&lt;p&gt;사실 &lt;strong&gt;테스트를 짜자!&lt;/strong&gt; 라는 동기를 부여하기 위해 무리해서 전부 붙여봤다. ( &lt;del&gt;감당 안되면 전부 떼내야지…&lt;/del&gt; )&lt;/p&gt;

&lt;p&gt;여튼 그동안은 기능 구현하는 데에 급급해서 테스트 코드 없이 코드를 짜기 일쑤였지만 최근 들어 여러가지 글을 읽고서는 진짜 이대로 가다가는 테스트 코드를 안짤 것 같아서 &lt;strong&gt;바로 실행에 옮기기&lt;/strong&gt;로 했다.&lt;/p&gt;

&lt;p&gt;요번에 Django 버전 업그레이드 할 때도 몸소 체험했기도 하고.&lt;/p&gt;

&lt;p&gt;그래서 마음을 다잡고 &lt;strong&gt;내가 어떤 로직에 대해 먼저 테스트를 해보는 게 좋을까&lt;/strong&gt; 생각해봤다.&lt;/p&gt;

&lt;h2 id=&quot;호기롭게-도전&quot;&gt;호기롭게 도전&lt;/h2&gt;

&lt;p&gt;역시 사용자에게 보이는 부분이 중요할 것 같아서 user와 관련된 &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; 에 대한 테스트 코드르 작성하기로 했다.&lt;/p&gt;

&lt;p&gt;이름은 그냥 파일 이름 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;_test&lt;/code&gt; 를 붙여서 만들었다. (Test 파일 이름을 생성하는 부분은 Golang에서 모티브를 얻었다. pytest-django 에서 지원을 해주기도 했고.)&lt;/p&gt;

&lt;p&gt;Two scoops of Django 책에서 봤는데 Django 에서 기본적으로 생기는 &lt;code class=&quot;highlighter-rouge&quot;&gt;tests.py&lt;/code&gt; 지우고 각각 파일에 대한 test 파일을 만들라고 봤던 기억이 있어서 위와 같이 했다.&lt;/p&gt;

&lt;p&gt;그래서 막상 뭘 해야될 지 감을 못 잡겠었는데 일단 무작정 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.test.TestCase&lt;/code&gt; 를 상속받는 클래스를 작성해봤다.&lt;/p&gt;

&lt;p&gt;처음에는 간단한 뷰의 status_code를 비교하는 테스트 메서드를 작성해보고, “이제 POST 메서드를 처리는 View 함수도 테스트할 수 있겠군!” 싶어 도전해봤다.&lt;/p&gt;

&lt;p&gt;테스트 코드가 익숙치 않아서 좀 많이 헤맸다.&lt;/p&gt;

&lt;p&gt;처음 내가 시도한 방법은 대충 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;model_mommy.recipe&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Recipe&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;blahblah.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;blahblah.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah_view&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserViewTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_view_using_post_method_blah_blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;post_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'leop0ld'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blah:blah'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertRedirects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blah:blah2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;302&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'leop0ld'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 시도했던 것 같은데 에러가 났다.&lt;/p&gt;

&lt;p&gt;어떤 에러인지 보아하니 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponseForbidden&lt;/code&gt; 은 redirect 뭐시기를 가지고 있지 않는다는 에러였다.&lt;/p&gt;

&lt;p&gt;그렇다는 건 위 코드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; 가 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponseForbidden&lt;/code&gt; 라는 건데, 원래는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponseRedirect&lt;/code&gt; 여야 했다.&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block; text-align:center;&quot; data-ad-format=&quot;fluid&quot; data-ad-layout=&quot;in-article&quot; data-ad-client=&quot;ca-pub-1864899826477546&quot; data-ad-slot=&quot;2703362319&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;실패를-겪고-다시-도전&quot;&gt;실패를 겪고 다시 도전&lt;/h2&gt;

&lt;p&gt;대충 짐작컨대 &lt;code class=&quot;highlighter-rouge&quot;&gt;CSRF token&lt;/code&gt; 문제라고 생각했다.&lt;/p&gt;

&lt;p&gt;근데 이 문제를 해결할 수 있는 방법이 떠오르지 않았다… ㅠㅠ&lt;/p&gt;

&lt;p&gt;그래서 이런저런 곳들(&lt;a href=&quot;https://festi.kr/zlack/team/T0ZAS4K7Z/29/&quot;&gt;9XD Slack&lt;/a&gt;, &lt;a href=&quot;https://festi.kr/zlack/team/T0E4AM2AF/5/&quot;&gt;Django Korea Slack&lt;/a&gt; 등등) 에 질문을 해봤다.&lt;/p&gt;

&lt;p&gt;9XD Slack의 #python 채널쪽에서 관련되어서 답변을 잘해주셔서 여러가지 방법으로 시도를 해볼 수 있었다.&lt;/p&gt;

&lt;p&gt;그 중에서 heechan(@yangroro) 이라는 닉네임을 쓰시는 분이 추천해주신 방법을 써봤다.&lt;/p&gt;

&lt;p&gt;추천해주신 방법은 &lt;strong&gt;GET request를 날린 뒤 csrf token을 얻어서 POST request 를 날려보는 것&lt;/strong&gt; 이었다.&lt;/p&gt;

&lt;p&gt;꽤나 사용자 시나리오? 와 비슷하게 테스트를 하는 것 같아서 작성해보고 있었는데 외부 라이브러리를 사용하지 않으면 꽤나 복잡하게 작성해야했다.(물론 제가 매우 생각이 짧고 지식이 얉아서 그런 것일수도 있을 것 같습니다.)&lt;/p&gt;

&lt;p&gt;아래는 내가 매우 노력한 코드다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;model_mommy.recipe&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Recipe&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;blahblah.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah_view&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;blahblah.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserViewTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enforce_csrf_checks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_post_blahblah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# GET request 보내기 위한 세팅&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blah:blahblah'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;get_response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# get_response 에서 csrftoken 가져옴&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'csrftoken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# POST를 보내기 위한 Form 데이터&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'leop0ld'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'csrfmiddlewaretoken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# POST 보내기 위한 세팅&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blah:blahblah'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COOKIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'csrftoken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blahblah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# POST 처리된 뒤 결과 비교&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;302&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'leop0ld'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 테스트를 하려는 View 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ensure_csrf_cookie&lt;/code&gt; 라는 데코레이터를 사용하는데 이 데코레이터는 CSRF token 을 Cookie 에 보내도록 강제하는 데코레이터이다.(공식 문서 &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/ref/csrf/#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt;링크&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;따라서 Cookie 에서 가져오는 선택을 했고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Client&lt;/code&gt; 를 이용해서 POST request 를 만들 경우에는 이상하게 에러가 났다.&lt;/p&gt;

&lt;p&gt;그래서 그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;RequestFactory&lt;/code&gt; 를 이용해서 날코딩을 하게 됐다. (몰랐던 사실인데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client&lt;/code&gt; 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;RequestFactory&lt;/code&gt; 클래스를 상속받아 만들어진 클래스다.)&lt;/p&gt;

&lt;p&gt;이 테스트가 통과하고 너무 기쁜 나머지 9XD Slack에서 미쳐날뛰었는데( &lt;del&gt;하라는 일은 안하고&lt;/del&gt; ), @jelly 라는 닉네임을 사용하시는 분이 더 개선된 코드를 보여주셨다.&lt;/p&gt;

&lt;p&gt;jelly(@kyunooh) 님이 추천해주신(사용하신 이라고 하는 게 더 맞을지도) 방법은 &lt;a href=&quot;https://github.com/revsys/django-test-plus&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django-test-plus&lt;/code&gt;&lt;/a&gt; 라는 외부 라이브러리를 사용하는 방법이었다.&lt;/p&gt;

&lt;p&gt;그 코드는 바로 &lt;a href=&quot;https://github.com/9XD/9XD/blob/master/posts/tests.py&quot;&gt;9XD repository 의 이 곳&lt;/a&gt; 에 있다.&lt;/p&gt;

&lt;p&gt;보니까 허무할만큼 간단한 코드였다.&lt;/p&gt;

&lt;p&gt;당시에 조금 현자타임이 왔었지만 정신을 다잡고, &lt;code class=&quot;highlighter-rouge&quot;&gt;django-test-plus&lt;/code&gt; 를 설치해서 사용해봤는데, 이런저런 문제가 있어서 아쉽게 사용하지 못했다.&lt;/p&gt;

&lt;p&gt;이유는 한 가지다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_plus.TestCase.login()&lt;/code&gt; 메서드의 email login 미지원&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;말 그대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_plus.TestCase.login()&lt;/code&gt; 메서드가 있는데 이 메서드가 &lt;strong&gt;email login을 지원하지 않는다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;코드를 까보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME_FIELD&lt;/code&gt; 로 받긴 하는데 내가 시도해본 결과 로그인 처리가 안된다. (코드만 놓고보면 될 것 같긴 한데…)&lt;/p&gt;

&lt;p&gt;이슈를 남기든 뭘하든 해봐야겠다.&lt;/p&gt;

&lt;p&gt;게다가 현재 프로젝트에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserManager&lt;/code&gt; 클래스를 개조해놓은 상태라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;make_user()&lt;/code&gt; 메서드도 사용하지 못한다.&lt;/p&gt;

&lt;p&gt;괴랄한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Uesr&lt;/code&gt; 모델과 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserManager&lt;/code&gt; 클래스 덕분에 꿀 같은 라이브러리를 쓰지 못한 것은 좀 아쉽지만 그래도 날코딩 하는 게 재미없는 것은 아니니 됐다.&lt;/p&gt;

&lt;p&gt;성능 문제는 ……애도를 표한다. 좀 더 개선해볼 방법을 생각해봐야겠다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;결론은 &lt;strong&gt;테스트는 연습이다&lt;/strong&gt;. 팩트다.&lt;/p&gt;

&lt;p&gt;다양한 경우에 대해서 많이 테스트를 작성해본 사람이 그것에 대해 솔루션을 잘 알고 있고, 좀 더 제대로 된 방법으로 테스트할 수 있다고 생각한다.&lt;/p&gt;

&lt;p&gt;그래도 테스트에 대한 주워들은 이야기는 많아서 그런 게 도움이 됐던 것 같다.&lt;/p&gt;

&lt;p&gt;2016년에 생각했던 2017년 새해 목표가 &lt;strong&gt;테스트 코드와 친해지기&lt;/strong&gt; 였던만큼 좀 더 노력할 필요가 있다는 걸 4월이나 되어서야 깨달았다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다 :D&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/newbie-tests-view-in-django/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/newbie-tests-view-in-django/</guid>
        
        <category>test</category>
        
        <category>python</category>
        
        <category>django</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Django 나만의 Management Command 만들어보기</title>
        <description>&lt;p&gt;Django 에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Management Command&lt;/code&gt; 가 있다.&lt;/p&gt;

&lt;p&gt;예를 들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py &amp;lt;command&amp;gt;&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;django-admin &amp;lt;command&amp;gt;&lt;/code&gt; 로 사용한 것이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Management Command&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;보통 사용하는 Command(Django 내장 Command)로는 아래와 같은 것들이 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ django-admin startapp
$ django-admin startproject
$ python manage.py migrate
$ python manage.py runserver
$ python manage.py shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;등등 더 많은 내장 Command가 있다.&lt;/p&gt;

&lt;p&gt;자세한 건 &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/ref/django-admin/#available-commands&quot;&gt;공식문서&lt;/a&gt; 를 찾아가서 보면 된다.&lt;/p&gt;

&lt;p&gt;오늘 이야기하고 싶은 것은 이러한 내장 Command가 아닌 내가 원하는 로직을 수행할 수 있는 &lt;strong&gt;나만의 Management Command&lt;/strong&gt; 를 만드는 것이다.&lt;/p&gt;

&lt;p&gt;이러한 Management Command 를 사실 어디다가 써야할 지 궁금해할 수도 있다.&lt;/p&gt;

&lt;p&gt;(잘못된 방법일 수 있으나) 현재 회사에서는 Cron Task 처리를 이 Management Command를 만들어서 하고 있다.&lt;/p&gt;

&lt;p&gt;이 말인 즉슨, Management Command를 만들어두고, Crontab을 이용해서 일정 주기마다 그 명령어를 실행되게끔 하고 있다.&lt;/p&gt;

&lt;p&gt;내 개인적인 생각으로는 Management Command는 &lt;strong&gt;정형화 되어있는 반복적인 작업&lt;/strong&gt;에 좋지 않을까 생각된다.&lt;/p&gt;

&lt;p&gt;장고 공식 문서에도 이렇게 적혀있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Standalone scripts

Custom management commands are especially useful for running standalone scripts or for scripts that are periodically executed from the UNIX crontab or from Windows scheduled tasks control panel.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Management Command는 주기적으로 실행하는 UNIX의 Crontab이나 Window의 Schedule Task, 독립 실행형(?) 스크립트에 특히 유용하다.&lt;/p&gt;

&lt;p&gt;우리 회사는 그럭저럭 잘 쓰고 있는 모양이다.&lt;/p&gt;

&lt;p&gt;서론이 길었다. 바로 본론으로 들어가서 직접 만들어보도록 하겠다!&lt;/p&gt;

&lt;p&gt;장고 공식 문서(&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/&quot;&gt;이 곳&lt;/a&gt;)를 많이 참고할 것입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;위치 선정&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Management Command는 정해진 위치에 있어야만 실행 가능하다.&lt;/p&gt;

&lt;p&gt;그 위치는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;polls/
    __init__.py
    models.py
    management/
        __init__.py
        commands/
            __init__.py
            _private.py
            closepoll.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위는 Django 에서 하나의 App 구조이다.&lt;/p&gt;

&lt;p&gt;참고로 Command는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;앱이름&amp;gt;/management/commands/&amp;lt;커맨드이름&amp;gt;.py&lt;/code&gt;와 같은 경로로 되어있다.&lt;/p&gt;

&lt;p&gt;따라서 위와 같이 파일을 만들어놓고 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;polls&lt;/code&gt;를 추가해주게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py closepoll&lt;/code&gt;이라는 나만의 Management Command를 사용할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 같이 나온 저 &lt;code class=&quot;highlighter-rouge&quot;&gt;_private.py&lt;/code&gt; 라는 파일은 장고 공식 문서에 나온 설명에 따르면 저 파일은 커맨드로 사용할 수 없다고 한다.&lt;/p&gt;

&lt;p&gt;즉 Management Command로 만들고 싶지 않으나 Management Command에서 공통적으로 사용되는 코드를 적기 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;그러면 &lt;code class=&quot;highlighter-rouge&quot;&gt;closepoll.py&lt;/code&gt;이라는 Python 파일은 어떻게 작성해야 할까?&lt;/p&gt;

&lt;p&gt;이것 또한 뒤에서 설명해보겠다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Management Command 작성하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Management Command가 될 Python 파일은 단 1개의 조건이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; 라는 클래스를 작성하되, &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseCommand&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseCommand&lt;/code&gt;의 서브 클래스 중 하나를 상속받는 클래스를 작성하여야 한다.&lt;/p&gt;

&lt;p&gt;장고 공식 문서에는 다음과 같은 코드가 예시로 나온다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandError&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;polls.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Question&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Poll&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Closes the specified poll for voting'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'poll_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poll_id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'poll_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Poll &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot; does not exist'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poll_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opened&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Successfully closed poll &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poll_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; 에서 상속받을 &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseCommand&lt;/code&gt; 와 Error를 내뿜어줄 &lt;code class=&quot;highlighter-rouge&quot;&gt;CommandError&lt;/code&gt; 를 import 해준다.&lt;/p&gt;

&lt;p&gt;그 다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;polls.models&lt;/code&gt; 에서 Question 이라는 모델을 &lt;code class=&quot;highlighter-rouge&quot;&gt;as&lt;/code&gt; 키워드를 사용해서 Poll 이라는 이름으로 import 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; 라는 이름의 클래스는 위에서 말했듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseCommand&lt;/code&gt; 라는 것을 상속받는다.&lt;/p&gt;

&lt;p&gt;help 변수 같은 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py closepoll --help&lt;/code&gt; 를 입력했을 때 나오는 Command 에 대한 간단한 설명이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_arguments()&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt; 은 뒤에 따로따로 설명을 해보겠다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_arguments()&lt;/code&gt; 부터 해보겠다.&lt;/p&gt;

&lt;p&gt;메서드 이름에서부터 인자를 추가해줄 것만 같이 생겼다.&lt;/p&gt;

&lt;p&gt;정답이다.&lt;/p&gt;

&lt;p&gt;아래 코드를 보고 설명해보겠다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Positional arguments&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'poll_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Named (optional) arguments&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'--delete'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'store_true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'delete'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Delete poll instead of closing it'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'delete'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_arguments()&lt;/code&gt; 의 인자로는 넘겨줄 값의 Key 값, nargs, 그리고 type 이 있다.&lt;/p&gt;

&lt;p&gt;먼저 하나 위의 코드를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;poll_id&lt;/code&gt; 를 options에서 Key 값으로 사용하는 걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;저렇게 넘겨주기 위해서 필요하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;nargs&lt;/code&gt; 는 저도 이 포스팅을 작성하면서 처음 봤다. (아직 멀었다 ㅠㅠ)&lt;/p&gt;

&lt;p&gt;그래서 좀 찾아보니&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nargs : 스위치나 파라미터가 받을 수 있는 값의 개수를 가리킨다. 이 값보다 많은 값이 들어오는 경우 무시된다. “+”로 설정하는 경우 1개 이상.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이라고 찾게 되었다. (아마 Number of Arguments 가 아닐까 싶긴 하다.)&lt;/p&gt;

&lt;p&gt;공식 문서에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;로 설정해서 여러 개를 받을 수 있도록 한 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;문을 이용해서 처리할 수 있게끔 한 것 같다.&lt;/p&gt;

&lt;p&gt;그리고 뒤에는 Named arguments 가 있다.&lt;/p&gt;

&lt;p&gt;위에서 알아본 것은 Positional arguments, 즉 위치가 정해진(?) 뭐 차이는 느낌적인 느낌으로다가 받을 수 있겠다.&lt;/p&gt;

&lt;p&gt;Named Arguments 는 나도 사용을 잘 안해본 지라 잘 모르겠으니 넘기겠다.&lt;/p&gt;

&lt;p&gt;바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt; 로 넘어왔다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt; 같은 경우는 역시나 이름에서 알 수 있듯이 뭔가 대부분의 처리를 해줄 것 같은 메서드다.&lt;/p&gt;

&lt;p&gt;역시나 정답이다. 커맨드의 로직을 여기서 처리해주면 된다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; 클래스에 대한 자세한 내용은 공식 문서인 &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/#command-objects&quot;&gt;이 곳&lt;/a&gt; 에 잘 나와있다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; 의 Subclass 들은 &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/#basecommand-subclasses&quot;&gt;여기&lt;/a&gt; 서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;마지막 줄인 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.stdout.write(~~)&lt;/code&gt; 부분이 있다.&lt;/p&gt;

&lt;p&gt;역시나 공식 문서에 관련 팁이 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note

When you are using management commands and wish to provide console output, you should write to self.stdout and self.stderr, instead of printing to stdout and stderr directly. By using these proxies, it becomes much easier to test your custom command. Note also that you don’t need to end messages with a newline character, it will be added automatically, unless you specify the ending parameter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Management Command 를 사용하고 콘솔 출력을 제공하려면 stdout 및 stderr에 직접 인쇄하는 대신 self.stdout 및 self.stderr 에 기록해야 한다고 적혀있다.&lt;/p&gt;

&lt;p&gt;그리고 또 end message 매개변수를 설정해주지 않으면 자동으로 개행문자가 추가된다.&lt;/p&gt;

&lt;p&gt;ending 인자를 굳이 정해줄 필요없다.&lt;/p&gt;

&lt;p&gt;Management Command 에 대해서 조금 알아봤다.&lt;/p&gt;

&lt;p&gt;관련된 한글 자료가 많이 없는 듯 하여 작성해보았는데 도움이 되셨길 바랍니다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 고맙습니다 :)&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://blog.leop0ld.org/posts/make-django-custom-command/</link>
        <guid isPermaLink="true">https://blog.leop0ld.org/posts/make-django-custom-command/</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
