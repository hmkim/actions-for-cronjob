<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Jaemin Bae on Medium]]></title>
        <description><![CDATA[Stories by Jaemin Bae on Medium]]></description>
        <link>https://medium.com/@JaeminBae?source=rss-91ef446b98fc------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*KfXrU5__FxvD2jdEU6BhpA.jpeg</url>
            <title>Stories by Jaemin Bae on Medium</title>
            <link>https://medium.com/@JaeminBae?source=rss-91ef446b98fc------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 19:02:41 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@JaeminBae" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[답변이 늦어 죄송합니다. 파일 교체해두었습니다!]]></title>
            <link>https://medium.com/@JaeminBae/%EB%8B%B5%EB%B3%80%EC%9D%B4-%EB%8A%A6%EC%96%B4-%EC%A3%84%EC%86%A1%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%BC-%EA%B5%90%EC%B2%B4%ED%95%B4%EB%91%90%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-ba485802c035?source=rss-91ef446b98fc------2</link>
            <guid isPermaLink="false">https://medium.com/p/ba485802c035</guid>
            <dc:creator><![CDATA[Jaemin Bae]]></dc:creator>
            <pubDate>Fri, 14 Sep 2018 05:02:38 GMT</pubDate>
            <atom:updated>2018-09-14T05:02:38.474Z</atom:updated>
            <content:encoded><![CDATA[<p>답변이 늦어 죄송합니다. 파일 교체해두었습니다!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ba485802c035" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[공유가 쉬운 컬러 시스템 만들기]]></title>
            <link>https://medium.com/myrealtrip-product/color-system-f8b7607ba57?source=rss-91ef446b98fc------2</link>
            <guid isPermaLink="false">https://medium.com/p/f8b7607ba57</guid>
            <category><![CDATA[design-systems]]></category>
            <category><![CDATA[마이리얼트립]]></category>
            <category><![CDATA[myrealtrip]]></category>
            <category><![CDATA[디자인시스템]]></category>
            <dc:creator><![CDATA[Jaemin Bae]]></dc:creator>
            <pubDate>Tue, 03 Jul 2018 07:26:17 GMT</pubDate>
            <atom:updated>2018-09-14T05:02:02.842Z</atom:updated>
            <content:encoded><![CDATA[<h4>유연한 컬러 체계를 만들고 효율적으로 협업하기</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QZnhaaNi_PazmQOUnmE58g.jpeg" /></figure><p>컬러는 디자이너의 가장 강력한 무기 중 하나입니다. 브랜드의 고유한 개성을 드러내는 중요한 수단이며, <a href="https://brunch.co.kr/@flatdesign/5">인터페이스 디자인이 점점 플랫해지면서</a> 컬러의 중요성은 더욱 커지고 있습니다.</p><p>서비스 안에서 제한된 숫자의 컬러만 사용하면 브랜드 인지에 더욱 효과적이며 작업 효율성도 극대화됩니다. 사실 대부분의 디자이너는 이러한 사실을 이미 잘 알고 있어서 수십 가지의 컬러셋을 만들어 사용하고 있을 것입니다.</p><p>그런데 정해진 컬러값을 다른 디자이너에게 전달하고, 디자이너와 개발자가 같은 컬러 이름으로 소통하고, 개발자가 컬러를 어려움 없이 코드에 적용하려면 약간의 노력이 필요합니다. Sketch와 Zeplin이 모든 역할을 해주는 것은 아니기 때문입니다.</p><p>컬러셋을 만들어서 디자이너들과 개발자들이 쉽게 컬러를 공유할 수 있는 체계를 만들려면 어떻게 해야 할까요? 마이리얼트립 팀에서 이러한 체계를 만들었던 사례를 공유하려고 합니다.</p><h3>Step 1. 유연한 컬러 네이밍 룰 만들기</h3><p>먼저 컬러를 체계적으로 관리할 수 있는 네이밍 룰을 정의해야 했습니다. 디자이너들의 가장 큰 니즈 중 하나는 한 컬러 안에서 다양한 중간 단계를 사용하고 싶다는 것이었습니다. 컬러 수가 너무 적으면 표현의 제약이 커지므로 회색 한가지 색 안에서도 배경과 선 등에 불편함 없이 사용할 수 있도록 많은 단계의 컬러를 사용하고 싶은 것이었죠.</p><p>타사의 디자인 시스템을 찾아보니 생각보다 다양한 체계가 있었습니다.</p><ol><li><strong>brand-01, text-01, hover-primary</strong><br><a href="http://carbondesignsystem.com/style/color/swatches">앞에 요소의 이름을 붙이는 경우</a>, text-01을 배경에 사용하고 싶다면 이름과 사용처가 맞지 않는 문제가 있습니다.</li><li><strong>Light Purple, Lighter Purple, Dark Blue, Darker Blue</strong><br><a href="https://polaris.shopify.com/visuals/colors#section-color-palette">인간적인 이름을 붙이는 경우</a>는 이해가 쉬운 대신, 컬러의 단계를 많이 확보하려고 한다면 이름을 짓기가 너무 어렵습니다.</li><li><strong>Gray 1, Gray 2, Gray 3</strong><br><a href="https://www.lightningdesignsystem.com/guidelines/color/">컬러 뒤에 1자리 숫자를 붙이는 경우</a>는 이름이 짧은 장점이 있지만 추후 컬러를 추가하는 경우까지 고려하면 유연한 구조는 아니었습니다.</li></ol><p><a href="https://material.io/design/color/the-color-system.html#tools-for-picking-colors">Material Design</a>은 주요 컬러 이름 뒤에 세 자리 숫자를 붙이는데, 100~900으로 컬러별로 9단계를 확보할 수 있고, UI 디자인 시 자주 사용되는 밝은 계통의 10~50단위 컬러를 추가할 수 있으므로 유연한 구조라는 생각이 들었습니다. 이에 저희는 Material Design과 비슷한 방식으로 컬러를 관리하기로 했습니다. 주요 컬러로 Blue, Gray, Green, Yellow, Red 다섯 가지를 정하여 각각 뒤에 50~900 숫자를 붙여서 컬러셋을 만들었습니다. 이후에 UI 디자인을 하면서 60, 80 등 중간단계를 추가하였습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*duY8rnGjDGmn2LjoUDWsgw.png" /><figcaption>마이리얼트립의 컬러 체계</figcaption></figure><h3>Step 2. Sketch Palette 파일 만들기</h3><p>Sketch 사용자끼리 컬러를 공유하려면 어떻게 해야 할까요? Sketch Library는 디자인 시스템 구축 시 매우 유용한 기능이지만 심볼 컴포넌트만 공유할 수 있는 단점이 있습니다. (Sketch 51부터 Text Style, Layer Style도 <a href="https://sketchapp.com/beta/">공유할 수 있게 된다고</a> 합니다) Photoshop, Illustrator 등 Adobe 계열의 프로그램은 ASE 파일로 컬러칩을 공유할 수 있지만, Sketch는 그러한 컬러칩 공유 기능이 없습니다. 대신 <a href="https://github.com/andrewfiorillo/sketch-palettes">Sketch Palettes</a>라는 플러그인을 사용하면 .sketchpalette 파일로 디자이너들끼리 컬러칩을 공유할 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ZSRhyRo5xgN2I2lK9Kcs_Q.png" /><figcaption>Image Credit: <a href="https://github.com/andrewfiorillo/sketch-palettes">Andrew Fiorillo</a></figcaption></figure><p>Sketch Palettes를 사용하여 .sketchpalette 파일을 만드는 절차는 다음과 같습니다.</p><ol><li>컬러칩을 Global Preset에 하나씩 등록한 후, Plugins &gt; Sketch Palettes &gt; Save Palettes…를 선택하여 .sketchpalette 파일을 생성합니다.</li><li>다른 디자이너는 생성된 파일을 Plugins &gt; Sketch Palettes &gt; Load Palettes…를 눌러서 Global Preset을 선택하면 손쉽게 컬러칩을 등록할 수 있습니다.</li><li>이 컬러 파일을 팀 클라우드 또는 Git에 올리면 모두가 똑같은 파일을 사용할 수 있습니다. 컬러를 변경, 추가하는 경우에는 파일을 수정한 후 팀원에게 알려주면 됩니다. 만약 Slack을 사용한다면 <a href="https://www.dropbox.com/business/app-integrations/slack">자동으로 알림이 가게 할 수</a>도 있겠죠.</li></ol><h3>Step 3. Zeplin용 JSON 파일 만들기</h3><p>아무리 컬러칩을 잘 정의해두었더라도 개발자가 Zeplin을 통해 컬러값을 확인할 때 blue-500이 아닌 #2b96ed과 같은 Hex 값으로 코드에 반영해둔다면 코드 작성과 유지보수 비용이 다시 늘어나게 될 것입니다. 물론 Zeplin Styleguide에서 컬러 하나하나 이름을 지정하면서 등록하면 제대로 된 컬러 이름을 확인할 수 있지만, 모든 컬러 이름과 값을 하나씩 대조해보면서 각 컬러를 등록하는 일은 굉장히 번거롭습니다. 프로젝트를 자주 새로 만든다면 그 번거로움은 배가됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/416/1*9xT4mk2-ZZWD9I1DsBGk9Q.gif" /><figcaption>이 작업을 사용된 컬러 개수만큼 반복해야 합니다.</figcaption></figure><p>여기가 약간 재밌는 부분입니다. Zeplin에서 컬러를 등록하면 자동으로 적절한 이름을 지어주는데요, 이 기능을 반대로 활용하면 우리가 정한 이름으로 자동으로 등록되게끔 할 수 있습니다. Zeplin이 자동으로 이름을 지어주는 원리는, 내부의 colors.json에 미리 정의된 Hex코드와 컬러 이름이 들어있어서 해당 Hex코드를 등록할 때 그 이름을 가져오는 것입니다. 따라서 이 파일을 Hex코드와 우리 컬러 이름으로 바꿔두면 컬러값을 등록할 때 자동으로 우리가 정한 이름으로 가져오게 됩니다!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/405/1*A1ccpz93gSgwCz9RLF10MA.gif" /><figcaption>등록 버튼을 클릭만 하면 됩니다.</figcaption></figure><p>디자이너들은 약간 번거롭지만 새로운 프로젝트를 만들 때 컬러를 한 번만 등록해주면 자동으로 우리가 정한 컬러 이름으로 지정되고, 개발자들은 편리하게 컬러값을 확인할 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1t291Z8FbInlQ1SEV52z_w.jpeg" /></figure><p>아, 그리고 Zeplin이 업데이트될 때마다 colors.json 파일이 원상복구되므로 이것을 다시 교체해줘야하는 귀찮음도 약간 있습니다.</p><p>저희는 Design System이라는 프로젝트에 모든 컬러를 등록해두고, 새로운 프로젝트를 만들 때마다 이 컬러값을 한번에 가져옵니다. 그러면 컬러셋을 하나씩 등록하는 노력도 딱 한 번만 하면 됩니다!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/416/1*9RHXNuv-OtQwtCaiHKCNOA.png" /><figcaption>Zeplin Styleguide에서 이걸 누르면 컬러값을 한 번에 다 가져옵니다.</figcaption></figure><blockquote>colors.json 파일의 위치는 응용 프로그램 &gt; Zeplin.app &gt; 마우스 오른쪽 클릭하여 ‘패키지 내용 보기’ 선택 &gt; Contents &gt; Resources 입니다.</blockquote><h3>Step 4. Web/iOS/Android 컬러 변수 파일 만들기</h3><p>개발자가 실제로 코드에서 컬러를 활용하려면 컬러 변수를 모아놓은 파일이 필요합니다. 플랫폼별로 아래와 같은 파일 형식을 사용합니다.</p><ul><li>Web: SCSS 또는 Less, Stylus</li><li>iOS: CLR (iOS 11 이상), Objective-C 또는 Swift (iOS 9 이상)</li><li>Android: XML</li></ul><h4>Web</h4><p>CSS를 그대로 사용하신다면 <a href="https://medium.freecodecamp.org/learn-css-variables-in-5-minutes-80cf63b4025d">Variable</a>을 이용하는 방법도 있지만, <a href="https://caniuse.com/#feat=css-variables">IE가 아직 지원하지 않아서</a> 사실상 사용하기 어렵습니다. 따라서 <a href="http://sass-lang.com/">Sass</a>, <a href="http://lesscss.org/">Less</a>, <a href="http://stylus-lang.com/">Stylus</a> 등의 CSS Preprocessor를 사용해야만 컬러를 변수로 활용할 수 있습니다. 저희는 Sass를 사용하고 있는데요, 아래와 같이 SCSS 파일을 만들어서 개발자에게 전달해주시면 컬러를 이름으로 쉽게 사용할 수 있습니다. JSON 파일과 비슷하게 생겨서 만들기 쉽습니다. 다른 CSS Preprocessor를 사용하더라도 거의 문법이 유사하므로 환경에 맞게 파일을 만드시면 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*R11GVtY3jF-IS629sDY3Dg.jpeg" /></figure><h4>iOS/Android</h4><p>만약 작업하고 있는 iOS Application에서 iOS 11 이상을 지원한다면 macOS의 기본 컬러 팔레트 파일인 CLR파일을 만들어서 전달하면 되지만, iOS 9 이상을 지원한다면 개발환경에 따라 Objective-C 또는 Swift 파일로 만들어서 전달해야 합니다. CLR 파일은 직접 Apple 기본 컬러팔레트에서 만들거나, Adobe 계열 프로그램에서 <a href="https://github.com/ramonpoca/ColorTools">ASE파일을 만든 후 CLR파일로 변환하는 방법도 있습니다.</a> Objective-C, Swift 파일은 SCSS와 마찬가지로 헤더/푸터를 제외하고는 컬러 변수를 나열한 형태입니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vxNaeu31xOR2MI7cn4UUww.jpeg" /></figure><p>Android의 경우 SCSS와 유사한 형태로 XML파일을 만들어주시면 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GFqmC8tHbN3R2p6v3TSE6A.jpeg" /></figure><h3>컬러 시스템을 만든 이후</h3><p>이러한 과정을 거치고 난 뒤 디자이너와 개발자가 컬러를 지칭할 때 쓰는 언어가 같아졌습니다. Zeplin과 개발 툴 모두에서 같은 컬러 이름을 사용하니 컬러를 잘못 적용하거나 조금 다른 컬러값 때문에 되묻는 경우가 없어졌습니다. 물론 디자이너들도 의식적으로 컬러칩에 없는 컬러는 사용하지 않게 되었습니다. 이로써 브랜드 인지는 강화되고 작업 효율성은 높아졌습니다.</p><p>처음 시스템을 만들려면 조금 번거롭지만, 컬러는 변화가 그리 많지 않으므로 한 번 작업해두면 추후 별다른 노력이 들지 않습니다. 만약 컬러 파일 하나만 만들어서 다른 파일로 쉽게 변환이 가능하면 좋겠지만 아직 그런 툴이 없어서 아쉽습니다.</p><p>마지막으로 저희가 사용하고 있는 각 컬러 파일들을 올려두었으니 참고가 되었으면 좋겠습니다.</p><p><a href="https://www.dropbox.com/s/n00pfnuwduwpyro/MRT_Colors.zip?dl=0"><strong>컬러칩 다운로드</strong></a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f8b7607ba57" width="1" height="1"><hr><p><a href="https://medium.com/myrealtrip-product/color-system-f8b7607ba57">공유가 쉬운 컬러 시스템 만들기</a> was originally published in <a href="https://medium.com/myrealtrip-product">How we build MyRealTrip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[나는 왜 면접에서 떨어졌을까?]]></title>
            <link>https://medium.com/@JaeminBae/%EB%82%98%EB%8A%94-%EC%99%9C-%EB%A9%B4%EC%A0%91%EC%97%90%EC%84%9C-%EB%96%A8%EC%96%B4%EC%A1%8C%EC%9D%84%EA%B9%8C-a2775ce6371d?source=rss-91ef446b98fc------2</link>
            <guid isPermaLink="false">https://medium.com/p/a2775ce6371d</guid>
            <dc:creator><![CDATA[Jaemin Bae]]></dc:creator>
            <pubDate>Wed, 29 Mar 2017 07:09:54 GMT</pubDate>
            <atom:updated>2017-04-01T06:15:56.884Z</atom:updated>
            <content:encoded><![CDATA[<blockquote><em>이전편: </em><a href="https://medium.com/@JaeminBae/%EB%82%98%EB%8A%94-%EC%99%9C-%EC%84%9C%EB%A5%98-%EC%A0%84%ED%98%95%EC%97%90%EC%84%9C-%EB%96%A8%EC%96%B4%EC%A1%8C%EC%9D%84%EA%B9%8C-9d2dddff5608"><em>&lt;나는 왜 서류전형에서 떨어졌을까&gt;</em></a></blockquote><p>지난 글에서는 채용 담당자가 원하는 디자이너의 지원서에 대해 얘기를 했었습니다. 이번에는 서류 전형 이후 과정인 면접에 대한 얘기를 담아보려고 합니다. 면접까지 통과하여 최종합격하신 분들은 정말 극소수입니다. 이분들에게서 좋은 느낌을 받았던 포인트를 추려보면, 아마도 면접을 준비하는 디자이너분들이 한 번 검토해볼 만한 체크리스트가 되리라 생각하여 글을 써보았습니다.</p><h3><strong>1. 왜 이 회사에서 일하고 싶은가</strong></h3><p>면접에서 반드시 묻는 가장 중요한 질문입니다. 우리 회사에 대해 제대로 파악하고 있는지, 그리고 지원자가 회사에 대해 원하는 것이 무엇인지 정확히 알기 위한 질문입니다. 이직의 이유는 새로운 도전, 연봉인상, 전 직장으로부터의 도피 등으로 사람마다 제각각 다릅니다. 하지만 회사는 ‘왜 하필 우리 회사인가? 어떤 부분이 마음에 들어서?’에 대한 대답을 듣고 싶습니다. 소개팅에서 마음에 드는 상대방에게 고백한다고 생각해보면 쉽습니다. 보통 ‘당신이 마음에 듭니다. 전 여자친구는 나를 너무 힘들게 해서요’ 라고 얘기하지는 않겠지요.</p><p>어떤 디자이너 지원자는 우리 회사 블로그에 올려두었던 웹사이트 GNB 리뉴얼에 대한 글을 읽고, 회사가 이렇게 기록을 남기는 문화를 가진 것과 이만큼 깊은 고민을 통해 프로젝트를 진행한다는 것에 깊은 인상을 받았다고 했습니다. 저도 우리의 그런 노력을 관심 깊게 지켜봐주는 것에 좋은 인상을 받았고 같이 일해도 좋겠다는 생각이 들었습니다.</p><p>서류 전형을 준비하면서 회사에 대한 공부를 충분히 했다면 회사와 제품에 대한 매력을 이미 잘 파악하고 있을 것입니다. 그것을 잘 정리하여 머리에 담아두고 있으면 됩니다. 예를 들면 아래와 같은 것들입니다.</p><ul><li>회사 제품에서 매력을 느낀 부분</li><li>회사가 일하는 방법/회사 문화에서 매력을 느낀 부분</li><li>본인의 회사 판단 기준과 일치하는 부분</li></ul><h3><strong>2. 전 직장에서 어떤 경험을 했는가</strong></h3><p>전 직장 경험은 면접자만 알고 있는 정보이므로 대답하기 쉽다고 생각할 수 있습니다. 그러나 진행했던 프로젝트의 정확한 목적과 목표, 성과 등을 머릿속에 차곡차곡 잘 정리해두지 않으면 면접 자리에서 제대로 답변하기 어렵습니다. 아래와 같은 내용을 미리 글로 쓰면서 준비해둔다면 실제 면접에서 당황할 일이 줄어들 것입니다.</p><ul><li>진행했던 프로젝트의 목적과 진행 과정, 성과</li><li>진행했던 프로젝트에서 본인이 느낀 점</li><li>진행했던 프로젝트가 좀 더 잘 되려면 어떻게 해야 했을까</li></ul><p>전 직장에서의 경험을 얘기하는 것은 본인의 강점을 어필하는 데에도 도움이 됩니다. 예를 들어 A프로젝트에서 B라는 문제가 있었는데 C라는 방식으로 해결했다는 식이죠. 구구절절 자세한 내용을 모두 설명하기보다는 핵심적인 내용만 설명하는 것이 좋습니다.</p><h3><strong>3. 나는 누구인가</strong></h3><p>몇 년간 한 업계에서 일을 해왔다면 나름대로 일에 대한 자신만의 관점, 방식이 생겼을 것입니다. 회사는 일에 대한 관점이 비슷한 사람을 선호합니다. 회사의 고유한 문화를 유지하는 가장 좋은 방법은 회사와 가치관이 비슷한 사람을 채용하는 것이기 때문입니다. 지원자 입장에서도 마찬가지입니다. 내가 원하는 방식과 일치하는 회사에서 일하는 것이 가장 행복하게 큰 성과를 낼 수 있겠지요. 아래 항목을 기준으로 생각을 정리해보면 좋습니다.</p><ul><li>왜 나는 이 일을 하는가</li><li>어떻게 일하는 것이 좋은가</li><li>나는 어떤 목표를 가지고 있는가</li></ul><p>면접 과정은 보통 생각하는 것과는 달리 면접관-면접자가 반드시 갑을 관계로 진행되는 것이 아닙니다. 면접자가 회사를 평가하는 자리이기도 하기 때문입니다. 따라서 면접관도 떨리는 마음으로 면접장에 들어갑니다. 지난 글에도 썼지만, 좋은 인재를 놓치는 것이야말로 회사에 가장 불행한 일이기 때문입니다. 그러므로 지원자도 조금은 마음을 편하게 하고 위의 내용을 잘 준비한다면 좋은 결과가 있으리라 생각합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a2775ce6371d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[나는 왜 서류 전형에서 떨어졌을까?]]></title>
            <link>https://medium.com/@JaeminBae/%EB%82%98%EB%8A%94-%EC%99%9C-%EC%84%9C%EB%A5%98-%EC%A0%84%ED%98%95%EC%97%90%EC%84%9C-%EB%96%A8%EC%96%B4%EC%A1%8C%EC%9D%84%EA%B9%8C-9d2dddff5608?source=rss-91ef446b98fc------2</link>
            <guid isPermaLink="false">https://medium.com/p/9d2dddff5608</guid>
            <dc:creator><![CDATA[Jaemin Bae]]></dc:creator>
            <pubDate>Sat, 25 Feb 2017 10:37:36 GMT</pubDate>
            <atom:updated>2017-05-14T16:18:04.857Z</atom:updated>
            <content:encoded><![CDATA[<p>어제 저녁 문득 메일함을 열어보니 2016년 동안 300개가 넘는 디자이너 지원서가 쌓여있었습니다. 직종은 UI 디자이너, 프로모션 디자이너, 브랜드 디자이너, 영상 디자이너 등으로 다양했습니다.</p><p>그 중 ‘나도 과연 이 정도의 열의와 관심을 가지고 작성할 수 있을까?’ 싶을 정도로 반성이 되는 글도 있었지만, 형편없이 작성된 지원서가 훨씬 많았습니다. 심지어 우리 서비스를 아직 한 번도 써보지 않았다고 자랑스럽게 쓴 분도 있었죠.</p><p>그렇다면 어떤 지원서가 면밀히 보게 되고, 어떤 지원서가 빠르게 휴지통에 쌓이는지 그 차이가 궁금해졌습니다. 곰곰이 생각해보니 3가지의 차이가 있었고, 이를 조금 더 구체적으로 써보기로 했습니다.</p><h3><strong>1. 오타 없애기</strong></h3><p>유독 디자이너들의 이력서와 자기소개서에는 정말로 오타가 많습니다. 글을 쓴 뒤 퇴고를 소홀히 한 것일 수도 있고, 스크린샷을 배치하고 레이아웃을 구성하는데 에너지를 더 쓴 것일 수도 있겠죠. 보통 오타 한두 개쯤 있고, 심하면 문단마다 오타가 발견됩니다. 물론 오타가 하나도 없게끔 하기는 쉽지 않겠지만, 분명한 것은 이력서와 자기소개서는 그 사람의 첫인상이기 때문에 오타가 많이 있으면 그만큼 신뢰가 떨어지게 됩니다. 오타보다 심각한 것은 회사 이름을 잘못 쓰는 경우인데, 포트폴리오가 아무리 뛰어나더라도 표지에 다른 회사의 이름이 써져있다면 면접 진행을 심각하게 고민하게 됩니다.</p><p>아래는 오타의 예시입니다.</p><ul><li>Desinger, Desiner, Portpolio : 첫 줄에서 오타를 내는 경우</li><li>Adobe Illustration, Potoshop : 제품 이름을 틀리는 경우</li><li>지원한 회사 이름을 틀리는 경우, 또는 다른 회사의 이름을 쓰는 경우</li></ul><p>직접 오타를 점검하는 것도 좋겠지만, 친구에게 검토를 부탁하는 것이 가장 좋다고 생각합니다. 본인은 눈에 익숙해져서 쓱 읽으면서 알아채기가 어려울 수 있기 때문이죠.</p><blockquote>아래 사이트에서 오타와 띄어쓰기를 한 번 확인하는 것도 좋습니다.<br>한국어 맞춤법/문법 검사기 <a href="http://speller.cs.pusan.ac.kr/PnuWebSpeller/">http://speller.cs.pusan.ac.kr/PnuWebSpeller/</a></blockquote><h3><strong>2. 지원할 회사에 대해 공부하기</strong></h3><p>회사는 개인의 삶에서 아주 많은 시간을 보내는 곳입니다. 그만큼 어떤 회사인지, 내가 무슨 일을 하게 될 것인가가 삶의 만족, 행복과 직결됩니다. 사실 회사 직원들 입장에서도 마찬가지입니다. 최소 몇 년간 팀으로서 함께 일할 사람이기 때문에 직원들에게도 많은 영향을 줍니다. 따라서 지원할 회사에 대해 잘 모르고 입사하는 것은 지원자와 회사 모두에게 좋지 않은 결과를 가져올 수 있습니다.</p><p>특히 UI/UX 디자이너는 해결할 문제를 정하는 역할까지 겸하기도 합니다. 만약 제품과 서비스에 관해 높은 관심이 있지 않다면 아예 문제를 정의할 수 없거나, 문제를 잘못 정의하게 됩니다.</p><p>그러므로 지원할 회사에 관련된 정보를 최대한 많이 습득해야 합니다. 아래와 같이 몇 개의 기준을 정해서 해보면 좋습니다.</p><ul><li>회사의 제품을 의식적으로 많이 써보기 + 제품의 장/단점 생각해보기</li><li>주변에서 제품을 써 본 사람들의 의견을 들어보기</li><li>회사와 관련된 기사 찾아보기</li><li>회사 웹사이트 읽어보기</li></ul><p>네, 아주 기본적인 것들입니다. 모두 다 해도 2시간이 채 걸리지 않습니다. 이 과정에서 지원자도 이 회사가 들어갈 만한 회사인지 알 수 있게 됩니다. 설령 관심이 없어져서 지원하지 않는다고 해도 합격 후에 찾아올 불행(?)을 피할 수 있습니다.</p><p>또한, 이렇게 미리 회사에 대해 공부해 본 내용을 간략하게 정리하여 지원서에 넣는다면, 채용 담당자 입장에서 지원자가 회사에 대해 어떤 부분에 관심이 있는지, 무슨 일을 잘할 수 있을 지 가늠해볼 수가 있습니다. 그러면 지원자가 입사한 이후에 어떤 일을 담당하게 될 것인가가 머릿속에 선명하게 그려지고, 채용될 확률도 올라가겠지요.</p><h3><strong>3. 본인만의 강점 드러내기</strong></h3><p>자신이 지닌 강점을 드러내는 것은 당연히 중요합니다. 그러나 ‘어떤 점’을 ‘어떻게’ 표현할지가 관건입니다. ‘저는 성격이 온화합니다’, ‘저는 친화력이 좋습니다’, ‘저는 성실합니다’, ‘저는 언제나 배우려고 노력합니다’라는 말은 사실상 의미가 없습니다. 그것은 매우 상대적인 개념이고, 나중에 면접에서 알게 되거나 같이 일해보면서 알게 되는 특질이기 때문이죠.</p><p>반면 아래와 같은 내용은 채용 담당자의 눈길을 끕니다.</p><ul><li>지원한 회사와 비슷한 필드에서의 구체적인 경험</li><li>회사의 부족한 부분에 대한 분석과 그것을 채워줄 수 있는 자신만의 경험/관점</li><li>자신의 능력이 회사와 어떻게 시너지가 날지에 대한 예상</li></ul><p>회사 업무와 관계가 없는, 복사-붙여넣기 한 내용이 가득한 지원서를 읽으면 힘이 빠집니다. 채용 담당자는 ‘지원자가 팀에서 어떤 재미있는 일을 할 수 있을까’를 고민하면서 지원서를 읽습니다. 그래서 그 회사와 관계되어 있는 경험과 관점을 구체적으로 적는다면 분명 여러 번 읽히는 지원서가 됩니다.</p><p>아, 포트폴리오에 모든 작업을 다 넣지 않고 회사/업무에 특화해서 선별적으로 넣는 것도 좋은 방법입니다.</p><p>채용 과정은 지원자와 회사 모두 엄청난 시간과 노력이 들어갑니다. 만약 지원자가 훌륭한 능력과 열의를 가지고 있음에도 불구하고 회사가 그를 알지 못하고 놓쳐 버린다면 서로에게 매우 불행한 일이겠지요. 저는 이 글이 제가 좋은 분을 놓칠 확률을 조금이라도 줄여준다면 굉장히 보람이 크리라 생각합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9d2dddff5608" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>