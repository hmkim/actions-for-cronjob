<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>김민석</title>
  <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z" />
  <author>
    <name>brunchqvxt</name>
  </author>
  <subtitle>김민석의 브런치입니다.</subtitle>
  <id>https://brunch.co.kr/@@O1Z</id>
  <updated>2015-11-14T03:00:23Z</updated>
  <entry>
    <title>JAVA에서 양방향 암호화 사용하기 - AES</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/23" />
    <id>https://brunch.co.kr/@@O1Z/23</id>
    <updated>2018-12-20T23:50:40Z</updated>
    <published>2018-12-20T23:49:23Z</published>
    <summary type="html">java에서 가끔 AES 사용해서 양방양 암호화를 할 필요가 있다. 이때 쓰려면 항상 까먹고 새로 찾아보곤 하는데 이때 쓰려고 정리해둔다</summary>
  </entry>
  <entry>
    <title>SpringMVC 컨트롤러에서 날짜/시간 받기</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/20" />
    <id>https://brunch.co.kr/@@O1Z/20</id>
    <updated>2018-12-20T23:50:54Z</updated>
    <published>2018-11-08T06:15:26Z</published>
    <summary type="html">https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-parsing-date-and-time-information-from-a-request-parameter/  https://www.petrikainulainen.net/programming/spring-</summary>
  </entry>
  <entry>
    <title>@ModelAttribute - SpringMVC</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/19" />
    <id>https://brunch.co.kr/@@O1Z/19</id>
    <updated>2018-11-08T01:15:29Z</updated>
    <published>2018-11-06T07:59:20Z</published>
    <summary type="html">@ModelAttribute 용도 SpringMVC에서 controller로 클라이언트(웹브라우저)가 도메인 모델(즉 복잡한 객체)를 넘겨줄 때 @RequestParam으로 일일이 받을 필요 없고 스프링에서 알아서 변환해서 도메인 모델 객체로 바인딩 시켜준다.  Validation 스프링에서 @ModelAttribute로 자동 바인딩 할 때 각 필드 변수별</summary>
  </entry>
  <entry>
    <title>책 리뷰 - 이것이 자바다</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/18" />
    <id>https://brunch.co.kr/@@O1Z/18</id>
    <updated>2018-10-29T05:23:36Z</updated>
    <published>2018-10-29T05:23:36Z</published>
    <summary type="html">[한빛미디어에서 도서를 지원받아 작성한 리뷰입니다 - 물론 가감 없이 솔직하게 작성합니다]  학생 시절 학습 기간을 제외하고 실제 돈 버는 일에 자바를 사용한 지 10년이 훌쩍 넘었다. 자바 관련된 바이블류는 학생 시절 사보았던 책 한 권. 회사 들어와서 산 책 한 권 해서 총 두 권이다. 다른 자바 책들은 &amp;quot;이펙티브 자바&amp;quot;(곧 새로운 판이 나온다고 하여</summary>
  </entry>
  <entry>
    <title>조언</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/16" />
    <id>https://brunch.co.kr/@@O1Z/16</id>
    <updated>2016-06-26T13:08:08Z</updated>
    <published>2016-06-22T00:41:32Z</published>
    <summary type="html">요즘 조언에 대해서 고민이 많다. 나이가 많아지고 직급이 올라가면서 조언을 구해오는 횟수가 증가하는데 정작 나는 조언이 뭔지 잘 모르고 있었던 것이다. 그래서 조언의 정체가 무엇인지 얼마 동안 고민한 내용을 좀 끄적거려본다.  대부분의 조언이 필요한 시점은 선택의 기로에 섰을 때가 대부분이다. 좀 더 정확하게 표현하자면 문제가 있다고 판단이 됐을 시점이다.</summary>
  </entry>
  <entry>
    <title>Springboot 10분 만에 REST 서비스 만들기 - Spring Data REST</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/15" />
    <id>https://brunch.co.kr/@@O1Z/15</id>
    <updated>2018-04-20T09:58:51Z</updated>
    <published>2016-04-10T07:21:39Z</published>
    <summary type="html">Spring framework에는 Spring Data REST 프로젝트가 있다. Spring에서 REST 서비스를 만들 때 가장 빠르고 효율적으로 만들 수 있는 기술이다. 이 글에서는 Spring boot를 써서 빠르게 Data REST를 적용하는 방법에 대해서 알아본다. 아래는 Spring Data REST 공식&amp;nbsp;문서이다. 이글에서는 빠르게 해보는 방법&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FO1Z%2Fimage%2FBY3Od8grlMglpJceUz7Ukxgt8ig.png" width="500" /&gt;</summary>
  </entry>
  <entry>
    <title>사랑</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/12" />
    <id>https://brunch.co.kr/@@O1Z/12</id>
    <updated>2017-12-22T20:40:31Z</updated>
    <published>2016-04-08T04:09:34Z</published>
    <summary type="html">세상의 모든 걸 가질 수는 없다. 가치관의 판단에 따라 우선순위를 매겨서 내가 꼭 가져야만 하는 것을 선택 하고 집중해야 한다.   그런데 이 우선순위라는 게.. 머리가 정하는 게 아니다.. 마음이 정한다.. 마음이라는 게 너무 약한 존재라.. 잘 흔들린다.. 이 우선순위가 그래서 쉽게 바뀐다.. 그거 가지지 못해서 죽을 것 같다가도 금방 다른 거에 현혹되</summary>
  </entry>
  <entry>
    <title>삽질</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/13" />
    <id>https://brunch.co.kr/@@O1Z/13</id>
    <updated>2016-04-08T16:41:23Z</updated>
    <published>2016-04-08T04:08:12Z</published>
    <summary type="html">언제가부터 회사에서 일이 주어지면 대충 예상한 기간보다 적은 시간 안에 일을 해야 하는 분위기가 형성이 된 것 같다. 그런데 어찌어찌 일이 수행은 되고 결과도 나온다. 그런데 문제는 나중에 발생한다.   흔히 우리는 잘 모르는 일을 진행할 때 삽 집을 한다고 하는데 요즘 회사에서 주어진 일을 할 때 삽집을 하면 능력 없는 사람 취급을 당하기 일수다. 처음부</summary>
  </entry>
  <entry>
    <title>Springboot REST 서비스 API웹페이지만들기 - 3분만에 Swagger 적용하기</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/14" />
    <id>https://brunch.co.kr/@@O1Z/14</id>
    <updated>2016-04-08T16:40:09Z</updated>
    <published>2016-04-08T04:05:39Z</published>
    <summary type="html">Springboot에서 REST 서비스를 만들고나면 REST에 접근하기 위한 명세를 배포해야 하는데 Swagger을 사용하면 배우 간편하고 이쁘게 배포할 수 있다. 아래 링크는 swagger를 사용한 예다.(공식홈의 livedemo)  이걸 매우 빠르게 Springboot 웹 프로젝트에 적용하는 방법을 알아보자. 디테일하게 하려면 이것저것 고칠게 많지만 일</summary>
  </entry>
  <entry>
    <title>선택과 집중</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/11" />
    <id>https://brunch.co.kr/@@O1Z/11</id>
    <updated>2016-04-08T16:41:37Z</updated>
    <published>2016-04-07T03:16:31Z</published>
    <summary type="html">회사에서 일을 진행할 때 가장 중요시하는 부분 중에 하나가 &amp;quot;선택과 집중&amp;quot;이다.   선택은 관리자가 하고 집중은 실제로 일을 하는 담당자의 몫이다. 그래서 둘 다 중요하긴 하지만 선택을 최대한 빨리해서 집중을 할 수 있는 시간을 최대한 보장해주는 게 관리자들의 책임이다.   그런데 현실에서는 완전 정반대의 결과가 나온다. 관리자들은 선택에 대한 책임 때문에</summary>
  </entry>
  <entry>
    <title>환전 수수료...</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/10" />
    <id>https://brunch.co.kr/@@O1Z/10</id>
    <updated>2019-02-09T15:04:17Z</updated>
    <published>2016-04-07T03:12:28Z</published>
    <summary type="html">환전수수료에 관해서 요즘 스터디를 한 결과를 혼자 알고 있기 아까워서 공유차원에서 몇자 적어둔다.  - 환전수수료: 환전수수료는 은행에서 환전시 가져가는 수수료. 우리가 흔히 쓰는 달러, 유로 등은 1.75% 정도 된다. 그래서 100만원을 환전하면 17500원이 수수료로 나간다. - 환전수수료 우대: 수수료를 할인해주는 제도. 환전수수료를 50% 우대 한</summary>
  </entry>
  <entry>
    <title>삶. 사람.</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/9" />
    <id>https://brunch.co.kr/@@O1Z/9</id>
    <updated>2016-04-08T16:42:08Z</updated>
    <published>2016-04-07T03:07:50Z</published>
    <summary type="html">음악을 처음 들을 땐 모든 게 같이 들린다.. 보컬도 현악기도 드럼도... 그런데 계속 듣다 보면 어느새 그 악기가 따로 들리게 되는 시점이 있고 그때에는 각 악기별로 다른 노래가 된다. 그 다른 악기마다 멜로디가 있고 화성이 있고 흐름이 있다. 그리고 또 듣는다. 계속 듣다 보면 다시 이것들이 합쳐지고 이때 들리는 음악은 처음 들을 때와는 같으나 다른 노</summary>
  </entry>
  <entry>
    <title>DI - Dependency Injection</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/8" />
    <id>https://brunch.co.kr/@@O1Z/8</id>
    <updated>2018-10-23T08:53:05Z</updated>
    <published>2016-04-05T12:06:18Z</published>
    <summary type="html">Spring의 3요소 중 하나가 DI/IoC인데 그 중에 DI부터 좀 살펴보려고 한다.  DI를 해석하면 의존성 주입이다. 결국 두가지 개념.. 의존성과 주입을 알면 DI의 개념을 알 수 있다. 이 개념을 알기 전에 객체지향 개념의 전체적인 흐름부터 알고 갈 필요가 있다.  객체지향 프로그램의 실행의 전체적인 흐름은 다음과 같은 순서로 이루어진다. 1. 객&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FO1Z%2Fimage%2FtTlLjtGQ1RRZhobHMNnPvnsAUPQ.png" width="326" /&gt;</summary>
  </entry>
  <entry>
    <title>자바 인터페이스에 새로운 매소드를 추가하고 싶다면? - 자바8 디폴트메소드</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/7" />
    <id>https://brunch.co.kr/@@O1Z/7</id>
    <updated>2016-05-31T07:53:12Z</updated>
    <published>2016-04-03T12:15:16Z</published>
    <summary type="html">자바 인터페이스는 약속이다. 클래스가 할 수 있는 것을 정의한 게 인터페이스다. 따라서 모든 객체지향개념에서 말하는 공통된 기조는 모든 의존은 인터페이스로 향하라고 한다. 왜냐면 인터페이스는 약속이라서 바뀌지 않을거니까.. 우리 부동산 계약서 같은 거니까..  하지만 세상에 바뀌지 않는 건 모든게 바뀐다는 사실이다. 인터페이스 만들 때 머리 싸매고 잘 만들</summary>
  </entry>
  <entry>
    <title>객체지향? - 민주주의를 닮은 객체지향 프로그래밍</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/6" />
    <id>https://brunch.co.kr/@@O1Z/6</id>
    <updated>2017-04-25T13:09:34Z</updated>
    <published>2016-04-02T11:18:22Z</published>
    <summary type="html">객체지향을 이해하기 위해서는 객체를 이해해야 한다. 객체는 속성과 행위로 이루어져 있다. 이렇게만 일단 알고&amp;nbsp;나오게 된 배경부터 좀 살펴보자.  그 전에 많이 쓰던 절차 지향적 프로그래밍은 속성과 행위가 분리되어 있었다. 따라서 함수를 만들고 함수를 절차에 따라서 순서를 지어주면 그에 따라 프로그램이 돌아간다. 이거 나름대로 훌륭한 모델이지만 문제가 있다.</summary>
  </entry>
  <entry>
    <title>Spring Boot에 AOP 적용해보기</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/4" />
    <id>https://brunch.co.kr/@@O1Z/4</id>
    <updated>2017-02-02T23:56:45Z</updated>
    <published>2016-03-31T14:53:58Z</published>
    <summary type="html">Spring Framework의 3요소라 한다면 IoC/DI, AOP, PSA를 꼽는다. 이 세가지 요소를 알면 스프링을 넘어서 객체지향 개념에 도가 텄다고 할 정도로 심오한 내용들이다. 차근차근 알아보기로 하고 이 글에서는 AOP를 Spring boot에서 간단히 적용하는 방법에 대해서 살펴본다.  아래 링크는 스프링 공식홈에 있는 AOP에 관한 공식 설&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FO1Z%2Fimage%2FaUpCJDLfPZzRdv2qefqU0E7A_Po.png" width="500" /&gt;</summary>
  </entry>
  <entry>
    <title>롬복을 디벼보자 - Lombok</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/3" />
    <id>https://brunch.co.kr/@@O1Z/3</id>
    <updated>2017-07-08T09:33:15Z</updated>
    <published>2016-03-30T13:59:19Z</published>
    <summary type="html">위 사이트는 롬복 공식홈이다. 공식홈에도 워낙&amp;nbsp;정리가 잘 되어 있어서 일단 한번 둘러보시길 권해드린다.  롬복은 자바에서 클래스 만들 때&amp;nbsp;흔히 기계적으로 만드는 코드들을 자동으로 만들어주는 자바 유틸리티이자 라이브러리라고 할 수 있다.  getter/setter/생성자등을 어노테이션 몇개로 그냥 다 만들어준다. 예를들어&amp;nbsp;Entity같은 클래스들은 대부분 로&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FO1Z%2Fimage%2F4XpdAUybzoscs-X7gcfensO4f74.png" width="500" /&gt;</summary>
  </entry>
  <entry>
    <title>Docker로 AWS에서 Springboot 시작하기</title>
    <link rel="alternate" type="text/html" href="https://brunch.co.kr/@@O1Z/1" />
    <id>https://brunch.co.kr/@@O1Z/1</id>
    <updated>2018-08-09T07:03:29Z</updated>
    <published>2015-12-08T06:09:26Z</published>
    <summary type="html">- AWS에 EC2 생성 &amp;gt;&amp;nbsp;Ubuntu로 생성 &amp;gt; putty에 키 생성해서 접속 &amp;gt;계정명은 ubuntu   - EC2에 docker 설치    -Docker에 springboot helloworld image 설치 &amp;gt; docker pull saturnism/spring-boot-helloworld-ui   - helloworld 컨테이너 생성 및 실행 &amp;gt;</summary>
  </entry>
</feed>
