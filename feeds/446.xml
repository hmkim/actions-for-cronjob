<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>곰돌푸우</title>
<link>https://simsi6.tistory.com/</link>
<description>Android Developer</description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 05:17:38 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>서재룡</managingEditor>
<image>
<title>곰돌푸우</title>
<url>http://cfile27.uf.tistory.com/image/2575624058BFCA6D16CAAC</url>
<link>https://simsi6.tistory.com</link>
<description>Android Developer</description>
</image>
<item>
<title>[유용한 팁] AndroidManifest에 Gradle 빌드 변수 삽입하는 2가지 방법</title>
<link>https://simsi6.tistory.com/39</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;h1 id=&quot;manifestplaceholders&quot;&gt;manifestPlaceholders&lt;/h1&gt;
&lt;p&gt;map 자료구조를 띄고 있으며 key: value 형식으로 변수를 선언할 수 있다.&lt;br /&gt;
ex) manifestPlaceholders = [key1: value1, key2: value2, …]&lt;/p&gt;
&lt;pre class=&quot; language-groovy&quot;&gt;&lt;code class=&quot;prism  language-groovy&quot;&gt;android &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;    
	defaultConfig &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;        
		manifestPlaceholders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hostName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string gstring&quot;&gt;&quot;www.example.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;    
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;    
	&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AndroidManifest.xml 파일 안에서 ${key}로 Gradle 빌드 변수값을 얻어올 수 있다.&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;prism  language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;scheme&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;host&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;${hostName}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;    			   
	...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;applicationid&quot;&gt;applicationId&lt;/h1&gt;
&lt;p&gt;앱을 식별하기 위한 고유한 ID. 기기와 Google Play Store 등에서 이 값으로 앱을 식별한다. 프로젝트에서 보통 여러 빌드 변형을 사용하는데 이 때 applicationIdSuffix를 이용해 applicationId의 값을 com.example.myapp.free, &lt;a href=&quot;http://com.example.myapp.pro&quot;&gt;com.example.myapp.pro&lt;/a&gt; 등으로 바꾸어 각각 다른 앱으로 식별하게 한다.&lt;/p&gt;
&lt;pre class=&quot; language-groovy&quot;&gt;&lt;code class=&quot;prism  language-groovy&quot;&gt;android {
	defaultConfig {        
		applicationId &quot;com.example.myapp&quot;    
	}    
	productFlavors {        
		free {            
			applicationIdSuffix &quot;.free&quot;        
		}        
		pro {            
			applicationIdSuffix &quot;.pro&quot;        
		}    
	}
	buildTypes {
		debug {            
			applicationIdSuffix &quot;.debug&quot;        
		}    
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AndroidManifest.xml에서 현재 빌드 변형의 applicationId를 참조하고 싶을 땐 아래와 같이 사용한다.&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;prism  language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;action&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;${applicationId}.TRANSMOGRIFY&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;free 빌드 변형으로 빌드 시&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;prism  language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;action&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;com.example.myapp.free.TRANSMOGRIFY&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pro 빌드 변형으로 빌드 시&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;prism  language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;action&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;com.example.myapp.pro.TRANSMOGRIFY&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;free 빌드 변형, debug 타입으로 빌드 시&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;prism  language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;action&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;com.example.myapp.free.debug.TRANSMOGRIFY&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;    
	...
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같은 방식을 사용하면 각 빌드 변형에 AndroidManifest.xml을 따로 두지 않고 하나의 Manifest 파일에서 처리가능하다.&lt;/p&gt;
&lt;h1 id=&quot;공식-문서&quot;&gt;공식 문서&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/build/manifest-build-variables&quot;&gt;https://developer.android.com/studio/build/manifest-build-variables&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Android</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/39</guid>
<comments>https://simsi6.tistory.com/39#entry39comment</comments>
<pubDate>Sun, 19 Aug 2018 13:38:38 +0900</pubDate>
</item>
<item>
<title>[AWS] Serverless Framework로 쉽게 서비스 개발 및 배포하기</title>
<link>https://simsi6.tistory.com/35</link>
<description>&lt;ul&gt;
&lt;li&gt;serverless를 글로벌로 설치한다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ npm install -g serverless&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;IAM User를 생성한다. &lt;br /&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://console.aws.amazon.com/iam&quot;&gt;https://console.aws.amazon.com/iam&lt;/a&gt; 접속&lt;/li&gt;
&lt;li&gt;Users 탭 이동 - Add User 버튼 클릭&lt;/li&gt;
&lt;li&gt;User name을 입력하고 &lt;code&gt;Programmatic access&lt;/code&gt;를 체크한 후 Next: permissions를 클릭&lt;/li&gt;
&lt;li&gt;Create group버튼을 누르고 AdministratorAccess를 찾아 체크한 후 그룹을 생성&lt;/li&gt;
&lt;li&gt;방금 생성한 Group을 체크하고 Next: Review누르고 계속해서 Create User버튼을 누른다&lt;/li&gt;
&lt;li&gt;Access key ID와 Secret access key를 저장해놓거나 &lt;code&gt;Download .csv&lt;/code&gt; 파일을 다운받아 꼭 안전하게 저장해놓는다. (절대 잃어버리면 안 됨)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;위에서 발급받은 사용자 인증키를 Serverless에 등록한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ serverless config credentials --provider aws --key xxxxxxxxxxxxxx --secret xxxxxxxxxxxxxx
Serverless: Setting up AWS...
Serverless: Saving your AWS profile &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;~/.aws/credentials&quot;&lt;/span&gt;...
Serverless: Success! Your AWS access keys were stored under the &lt;span class=&quot;hljs-string&quot;&gt;&quot;default&quot;&lt;/span&gt; profile.
$&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;첫 서비스 만들기 &lt;br /&gt;
&lt;ul&gt;&lt;li&gt;함수의 런타임(템플릿)은 Node.js로 지정&lt;/li&gt;
&lt;li&gt;서비스 이름(ServiceName)을 지정&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ serverless create --template aws-nodejs --path [ServiceName]&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;폴더 확인 &lt;br /&gt;
&lt;ul&gt;&lt;li&gt;handler.js는 서비스가 실행 할 함수를 포함&lt;/li&gt;
&lt;li&gt;serverless.yml은 서비스의 모든 설정을 포함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;seo$ ls -al
total &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;
drwxr-xr-x   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; seo  staff   &lt;span class=&quot;hljs-number&quot;&gt;170&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; .
drwxr-xr-x  &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt; seo  staff   &lt;span class=&quot;hljs-number&quot;&gt;578&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; ..
-rw-r--r--   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; seo  staff    &lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; .gitignore
-rw-r--r--   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; seo  staff   &lt;span class=&quot;hljs-number&quot;&gt;466&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; handler.js
-rw-r--r--   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; seo  staff  &lt;span class=&quot;hljs-number&quot;&gt;2819&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; serverless.yml
seo$ &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;serverless.yml &lt;br /&gt;
&lt;ul&gt;&lt;li&gt;funtions는 서비스가 포함하는 모든 함수 &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# serverless.yml &lt;/span&gt;
service: ServerlessTest
provider:   
  name: aws   
  runtime: nodejs6.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
functions:
  hello:
    handler: handler.hello&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;배포 &lt;br /&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; 옵션으로 로그가 쭈욱 찍힌다.&lt;/li&gt;
&lt;li&gt;배포가 되면서 API Gateway의 endpoint를 생성해준다.  &lt;br /&gt;
&lt;a href=&quot;https://h7k8czu0lh.execute-api.us-east-1.amazonaws.com/dev/users/create&quot;&gt;https://h7k8czu0lh.execute-api.us-east-1.amazonaws.com/dev/users/create&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;seo$ serverless deploy -v
Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
CloudFormation - CREATE_IN_PROGRESS - AWS::CloudFormation::Stack - ServerlessTest-dev
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_COMPLETE - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_COMPLETE - AWS::CloudFormation::Stack - ServerlessTest-dev
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service .zip file to S3 (&lt;span class=&quot;hljs-number&quot;&gt;409&lt;/span&gt; B)...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
CloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - ServerlessTest-dev
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::RestApi - ApiGatewayRestApi
CloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - HelloLogGroup
CloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::RestApi - ApiGatewayRestApi
CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::RestApi - ApiGatewayRestApi
CloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - HelloLogGroup
CloudFormation - CREATE_COMPLETE - AWS::Logs::LogGroup - HelloLogGroup
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Resource - ApiGatewayResourceUsers
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Resource - ApiGatewayResourceUsers
CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Resource - ApiGatewayResourceUsers
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Resource - ApiGatewayResourceUsersCreate
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Resource - ApiGatewayResourceUsersCreate
CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Resource - ApiGatewayResourceUsersCreate
CloudFormation - CREATE_COMPLETE - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction
CloudFormation - CREATE_COMPLETE - AWS::Lambda::Function - HelloLambdaFunction
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionPSzzisjnTvvYknuXwQOlAvdkQZ67qXYSvgoAi9T8W0
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Method - ApiGatewayMethodUsersCreateGet
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionPSzzisjnTvvYknuXwQOlAvdkQZ67qXYSvgoAi9T8W0
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Method - ApiGatewayMethodUsersCreateGet
CloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - HelloLambdaVersionPSzzisjnTvvYknuXwQOlAvdkQZ67qXYSvgoAi9T8W0
CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Method - ApiGatewayMethodUsersCreateGet
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1509642848897
CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1509642848897
CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1509642848897
CloudFormation - CREATE_COMPLETE - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway
CloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - ServerlessTest-dev
CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - ServerlessTest-dev
Serverless: Stack update finished...
Service Information
service: ServerlessTest
stage: dev
region: us-east-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
stack: ServerlessTest-dev
api keys:
  None
endpoints:
  GET - https://h7k8czu0lh.execute-api.us-east-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.amazonaws.com/dev/users/create
functions:
  hello: ServerlessTest-dev-hello

Stack Outputs
HelloLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;513755243845&lt;/span&gt;:function:ServerlessTest-dev-hello:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
ServiceEndpoint: https://h7k8czu0lh.execute-api.us-east-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.amazonaws.com/dev
ServerlessDeploymentBucketName: serverlesstest-dev-serverlessdeploymentbucket-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;o2n2n2jbd7oj

seo$ &lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;함수를 커맨드 라인에서 테스트하기&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ serverless invoke &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; hello &lt;span class=&quot;hljs-operator&quot;&gt;-l&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;로컬에서-테스트-환경-구축&quot;&gt;로컬에서 테스트 환경 구축&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;npm 초기화&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ npm init&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Serverless Offline 설치&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ npm install serverless-offline --save-dev&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;serverless.yml파일 하단에 두줄을 추가 한다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# serverless.yml &lt;/span&gt;
service: ServerlessTest
provider:   
  name: aws   
  runtime: nodejs6.&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello/get
          method: get
&lt;span class=&quot;hljs-comment&quot;&gt;# adding these two lines&lt;/span&gt;
plugins:
  - serverless-offline&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;로컬에서 Lambda + API Gateway 대기상태 만들기 &lt;br /&gt;
&lt;ul&gt;&lt;li&gt;브라우저에서 &lt;a href=&quot;http://localhost:3000/hello/get&quot;&gt;http://localhost:3000/hello/get&lt;/a&gt; 을 접근해보면 응답을 확인할 수 있다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;seo$ serverless offline start
Serverless: Starting Offline: dev/us-east-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.

Serverless: Routes &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; hello:
Serverless: GET /hello/get

Serverless: Offline listening on http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;테스트가 끝나면 AWS에 Deploy한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[참고] &lt;br /&gt;
&lt;a href=&quot;https://medium.com/@jwyeom63/%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EB%8A%94-node-js%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-serverless-503ee61539d4&quot;&gt;https://medium.com/@jwyeom63/%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EB%8A%94-node-js%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-serverless-503ee61539d4&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>AWS</category>
<category>api gateway</category>
<category>AWS</category>
<category>Lambda</category>
<category>serverless</category>
<category>서버리스</category>
<category>아마존</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/35</guid>
<comments>https://simsi6.tistory.com/35#entry35comment</comments>
<pubDate>Tue, 14 Nov 2017 22:16:50 +0900</pubDate>
</item>
<item>
<title>[AWS] Lambda와 API Gateway로 API 서비스 하기</title>
<link>https://simsi6.tistory.com/21</link>
<description>&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;Serverless Framework의 등장&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;복잡한 서버 구성 및 관리를 신경쓰지 않고 클라이언트 개발에만 몰두할 수 있게하는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Serverless_Framework&quot;&gt;Serverless Framework&lt;/a&gt;들이 많이 나오고 있습니다. Amazon의 &lt;a href=&quot;https://aws.amazon.com/ko/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;, Microsoft의 &lt;a href=&quot;https://azure.microsoft.com/ko-kr/services/functions/&quot;&gt;Azure Funtions&lt;/a&gt;, Google의 &lt;a href=&quot;https://cloud.google.com/functions/&quot;&gt;Cloud Funtions&lt;/a&gt; 등 많은 업체들의 서비스들이 있습니다. 이 서비스들은 특정 작업을 수행하는 함수만을 등록해놓고 API요청이 있을 때만 잠깐 깨어나 함수를 수행합니다. 기존의 24시간 항상 떠있는 서버들과는 달리 리소스 낭비를 줄일 수 있고 비용적인 측면에서도 굉장히 저렴함이 장점입니다. 보통 월별 무료 할당량을 제공해주는데 일반적인 개인 서비스들에서는 무료할당량 범위내에서 무난하게 운영이 가능합니다. 조금 초과하더라도 그리 비싸지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;그 동안 서버 공부가 엄두가 안나 개인 프로젝트를 망설이셨던 클라이언트 개발자 입장에서는 안성맞춤인 서비스들입니다. 학습 비용도 크지 않고 예제를 따라해보면 누구나 금방 서비스를 할 수 있습니다. 지금부터 예제를 통해 AWS를 이용한 API 서비스를 구현해볼겁니다. &lt;/p&gt;



&lt;h2 id=&quot;aws-lambda-api-gateway&quot;&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2 id=&quot;aws-lambda-api-gateway&quot;&gt;AWS Lambda + API Gateway&lt;/h2&gt;

&lt;p&gt;예제를 따라하기에 앞서 &lt;code&gt;AWS에 가입하고 로그인&lt;/code&gt; 꼭!! 하셔야 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;



&lt;h3 id=&quot;aws-lambda생성&quot;&gt;AWS Lambda생성&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://ap-northeast-2.console.aws.amazon.com/lambda&quot;&gt;Lambda 콘솔&lt;/a&gt;에 접속합니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Create Funtion&lt;/code&gt;을 클릭해서 함수를 생성해주어야 합니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9944793359F88CC304&quot; filemime=&quot;image/jpeg&quot; filename=&quot;CreateFuntion.png&quot; height=&quot;243&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BluePrints가 나오는데 여기서 여러 샘플들을 확인할 수 있습니다. 많이 사용하는 서비스들 위주로 연동하는 코드들을 미리 완성형으로 제공하고 있어 사용하시고자 하는 서비스와 일치하는 것이 있으면 Filter에 검색해서 선택하여 그대로 적용하시면 됩니다. 그렇지 않고 직접 전체 코드를 작성하시려면 &lt;code&gt;Author from scratch&lt;/code&gt; 버튼을 눌러 다음으로 넘어갑니다. 여기서는 &lt;code&gt;hello-world&lt;/code&gt; blueprint를 그대로 사용해보겠습니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F3883359F88CEC2A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;bluePrint.png&quot; height=&quot;764&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;함수 정보를 입력하는 화면이 나옵니다.&lt;/p&gt;

&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;은 Lambda 함수명으로 자유롭게 입력합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Role&lt;/code&gt;은 쉽게 말해 권한들의 그룹입니다. Lambda함수의 코드들이 S3, DynamoDB, RDS 등 다른 서비스에 접근해야 한다면 먼저 Role을 만들어 필요한 권한들을 지정해준 후 그 Role을 Lambda 함수에 할당해야합니다. 우리가 사용하는 &lt;code&gt;hello-world&lt;/code&gt;코드는 별다른 권한이 필요없지만 Role은 필수로 지정해야 하므로 &lt;code&gt;Create new role from template(s)&lt;/code&gt;를 선택해서 기본적인 Role을 하나 만들어 지정해보겠습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Role name&lt;/code&gt;이 활성화 되는데 우리는 helloRole이라고 지정해보겠습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Policy templates&lt;/code&gt;은 optional이라 그냥 비우고 넘어가겠습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create Funtion&lt;/code&gt;을 눌러 함수를 생성합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D3D93359F88D5C34&quot; filemime=&quot;image/jpeg&quot; filename=&quot;basicInfo.png&quot; height=&quot;780&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;오른쪽 상단의 &lt;code&gt;Test&lt;/code&gt;버튼을 눌러 함수를 테스트 해볼 수 있습니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994EE33359F88DA60F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;테스트.png&quot; height=&quot;768&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이제 함수를 생성을 완료했으니 외부에서 API호출이 있을 때 이 Lambda함수가 호출될 수 있도록 API Gateway를 구성해야합니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;



&lt;h3 id=&quot;api-gateway-구성&quot;&gt;API Gateway 구성&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;위에서 Lambda함수를 생성했으니 외부의 API호출을 받아 Lambda함수가 호출될 수 있게 이어주는 작업을 해야합니다. 이 API Gateway가 그 역할을 해주므로 꼭 필요한 작업입니다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://ap-northeast-2.console.aws.amazon.com/apigateway/&quot;&gt;API Gateway 콘솔&lt;/a&gt;에 접속합니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9995873359F88E3E26&quot; filemime=&quot;image/jpeg&quot; filename=&quot;gatewayMain.png&quot; height=&quot;533&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Create API&lt;/code&gt;를 누릅니다.&lt;/p&gt;

&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;New API&lt;/code&gt;를 선택합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;API name&lt;/code&gt;에 helloApi라고 입력합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Description&lt;/code&gt;은 Optional입니다. (입력해도 그만 안해도 그만)&lt;/li&gt;
&lt;li&gt;우측 하단에 &lt;code&gt;Create API&lt;/code&gt;를 클릭하여 생성합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A25A3359F88E5033&quot; filemime=&quot;image/jpeg&quot; filename=&quot;createNewAPI.png&quot; height=&quot;428&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;그러면 API가 생성이 되고 &lt;code&gt;/&lt;/code&gt;기준으로 Resources트리가 보이실겁니다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B2B33359F88E711D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;afterCreateApi.png&quot; height=&quot;464&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;먼저 hello라는 Resources를 만들겠습니다.&lt;/p&gt;

&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Actions -&amp;gt; Create Resources&lt;/code&gt;를 선택합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resource Name&lt;/code&gt;에는 hello라고 입력합니다. 그러면 Resource path는 자동으로 /hello로 채워집니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create Resource&lt;/code&gt;를 클릭합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D5513359F88E8A20&quot; filemime=&quot;image/jpeg&quot; filename=&quot;apiInfo.png&quot; height=&quot;328&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;다음으로 Method를 생성합니다.&lt;/p&gt;

&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Actions -&amp;gt; Create Method&lt;/code&gt;를 선택하면 트리의 hello리소스 하단에 Select Box가 활성화 되는데 POST를 선택하고 확인버튼을 클릭합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Integration type&lt;/code&gt;에는 Lambda Funtion을 체크합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lambda Region&lt;/code&gt;에는 앞서 Lambda를 만들어놓은 Region(&lt;code&gt;ap-northeast-2&lt;/code&gt;)을 선택합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lambda Function&lt;/code&gt;에는 helloFuntion을 입력합니다.&lt;/li&gt;
&lt;li&gt;모두 입력하셨으면 &lt;code&gt;Save&lt;/code&gt;를 눌러 저장합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DC753359F8917923&quot; filemime=&quot;image/jpeg&quot; filename=&quot;selectMethod.png&quot; height=&quot;445&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/999BB13359F8914704&quot; filemime=&quot;image/jpeg&quot; filename=&quot;insertMethodInfo.png&quot; height=&quot;445&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;아래와 같이 팝업이 뜨면 OK를 눌러줍니다.&lt;/p&gt;

&lt;/li&gt;&lt;ul&gt;&lt;li&gt;API Gateway에 람다 함수를 실행할 수 있는 권한을 부여하겠다는 확인 팝업입니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9912B93359F891AA1F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;api Method save하고 팝업.png&quot; height=&quot;402&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9938293359F891DB14&quot; filemime=&quot;image/jpeg&quot; filename=&quot;afterMethodCreate.png&quot; height=&quot;371&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이제 method까지 만들어졌으니 Test를 해보겠습니다. /hello 리소스 아래에 있는 POST선택하고 우측 섹션에 TEST버튼을 클릭합니다.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Request Body로는 아래 값을 입력합니다. (우리가 만들었던 helloFuntion이&amp;nbsp;아래 형식의 데이터를 받도록 개발돼있어요)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs json&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;key3&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;value3&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;key2&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;key1&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;value1&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TEST&lt;/code&gt; 버튼을 눌러 테스트를 시작합니다. &lt;br /&gt;
&lt;/li&gt;&lt;ul&gt;&lt;li&gt;우측 결과 로그를 보면 Lambda가 잘 동작해서 로그를 남기고 응답을 보낸 것을 확인할 수 있습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B26E3359F8927D11&quot; filemime=&quot;image/jpeg&quot; filename=&quot;test.png&quot; height=&quot;508&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;이제 API Gateway설정 및 테스트를 마쳤습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;



&lt;h3 id=&quot;api-배포&quot;&gt;API 배포&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;마지막으로 API를 외부(클라이언트)에서도 호출 가능하게 배포를 해야합니다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Actions -&amp;gt; Deploy API&lt;/code&gt;를 선택합니다.&lt;/p&gt;

&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Deployment stage&lt;/code&gt;에서 [New stage]를 선택합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stage name&lt;/code&gt;에 test를 입력합니다.&lt;/li&gt;
&lt;li&gt;나머지는 자유롭게 입력 후 &lt;code&gt;Deploy&lt;/code&gt;버튼을 클릭합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C4ED3359F892B611&quot; filemime=&quot;image/jpeg&quot; filename=&quot;deployAPI.png&quot; height=&quot;594&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;그러면 Stages탭에 test라는 stage가 생성이됩니다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;상단에 Invoke URL 이 나올텐데 그 url을 통해 API 요청을 하실 수 있습니다.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://n0anexvz1e.execute-api.ap-northeast-2.amazonaws.com/test&quot;&gt;https://l0vnvxvzv1.execute-api.ap-northeast-2.amazonaws.com/test&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9971D33359F893492A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;afterCreateStage.png&quot; height=&quot;480&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;여기까지 Lambda로 함수를 만들고 Gateway API로 API를 만들고 배포하여 URL을 얻기까지 모든 과정이 끝났습니다.&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;이 글의 과정을 응용하여 충분히 서비스를 운영하실 수 있습니다.&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;물론 이 글의 내용만으로는 충분하지 않을 수 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;되도록 AWS의 공식문서 참고를 추천드리며 개인 블로그에도 좋은 글을 올려주신 분들이 많으니 열공 하시길 바랍니다.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>AWS</category>
<category>api gateway</category>
<category>AWS</category>
<category>gateway</category>
<category>Lambda</category>
<category>serverless</category>
<category>람다</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/21</guid>
<comments>https://simsi6.tistory.com/21#entry21comment</comments>
<pubDate>Wed, 01 Nov 2017 00:19:54 +0900</pubDate>
</item>
<item>
<title>[서울/성수동 맛집] 소문난 감자탕</title>
<link>https://simsi6.tistory.com/33</link>
<description>&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;쌀쌀한 가을날씨에 뜨끈뜨끈한 국물이 땡겨서&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;예전부터 가고 싶었던 성수동 소문난 감자탕에 다녀왔다&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;백종원의 3대천왕에 나오던 생방을 본지가 1년이 다되가는 것 같은데.. 드디어!&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;날씨가 좋아서 그런지 외관이 참 깔끔하고 이쁘다 (부럽다. 가지고 싶다 이런 가게)&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A45F3359F8811D33&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140012.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998D883359F8811F01&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140027.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;밖에 줄 서있는 사람이 없길래 바로 먹을 수 있을 줄 알았는데..&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;들어가보니 손님들로 꽉 차있었다..&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991A173359F8825B2B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140051.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;웨이팅을 조금 했지만...&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;그래도 좌석이 많아서인지 회전율이 빨라 금방 자리에 앉을 수 있었다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;앉자마자 들어오면서 메뉴를 봐놨던 터라 2인분으로 감자탕 소를 시켰다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/999C6F3359F8830A2B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_145427.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;여기는 특이하게 냄비받침처럼 생긴 인덕션이 있다&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;예전에 즉석 떡볶이 집에서 본적이 있는데 요즘은 이게 대세인 듯&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99AA5F3359F883921F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140715.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;조금 기다리니 기본찬이 금방 세팅이 됐고~~&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;오이가 참.... 맛있음 (또 먹고 싶...)&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997EC93359F883CA33&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140755.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F0133359F883CC2B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140811.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;그리고 곧바로 감자탕이 나왔다~~~~&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;비쥬얼 장난 아님.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;고기 양도 푸짐하고 고기가 참 신선해보였다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;살도 실하게 붙어있고~ 국물 맛도 좋았음&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BC9A3359F883FB0F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_140909.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99EB793359F883FC09&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_141325.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&amp;nbsp;살 한점 뜯어서 양념장에 콕 찍어서&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;먹어주고~&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99CDD03359F8848A12&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_141439.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;백종원의 3대천왕 나올 때 보니까&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;이 집은 수제비 사리가 장난 아니라서&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;바로 수제비 사리 시킴.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;그러면 아주머니께서 반죽을 들고오셔서 테이블에서 바로 수제비 떠서 퐁당퐁당 시켜줌&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;그리고 조금 더 끓이면 진짜 ... 걸쭉한 수제비 탄생&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;완전 깔끔한 마무리!&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B5DC3359F884CD32&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_144414.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DD243359F884CF18&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_20171029_144627.jpg&quot; height=&quot;675&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;개인적으로 볶음밥도 먹어보고 싶었으나 ㅠㅠ&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;배가 불러서..... 못먹고 포기..&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;옆 테이블 남자 2명은 사리에 볶음밥까지 볶아먹던데... 졌다&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;다음에 또 가면 먹어봐야지~&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;실내 환기도 잘 되고~ 쾌적했지만&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;종업원들의 불친절한 태도가 조금 아쉽~&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;하지만 맛은 있었으니 만족~~ 다음에 또 가야지&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe id=&quot;emap_587081&quot; src=&quot;/admin/entry/post/proxyPlusmapViewer.php?id=emap_587081&amp;amp;mapGb=V&quot; width=&quot;521&quot; height=&quot;451&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; mapdata=&quot;map_type=TYPE_MAP&amp;map_hybrid=false&amp;idx=1&amp;title=%EC%86%8C%EB%AC%B8%EB%82%9C%EC%84%B1%EC%88%98%EA%B0%90%EC%9E%90%ED%83%95&amp;addr=%EC%84%9C%EC%9A%B8%20%EC%84%B1%EB%8F%99%EA%B5%AC%20%EC%84%B1%EC%88%98%EB%8F%992%EA%B0%80%20315-100%20&amp;tel=02-465-6580&amp;mapX=512020&amp;mapY=1123143&amp;ifrW=490px&amp;ifrH=362px&amp;addtype=1&amp;map_level=4&amp;rcode=1120069000&amp;docid=&amp;confirmid=13289056&amp;mapWidth=490&amp;mapHeight=362&amp;mapInfo=%7B%22version%22%3A2%2C%22mapWidth%22%3A490%2C%22mapHeight%22%3A362%2C%22mapCenterX%22%3A512020%2C%22mapCenterY%22%3A1123143%2C%22mapLevel%22%3A4%2C%22coordinate%22%3A%22wcongnamul%22%2C%22markInfo%22%3A%5B%7B%22markerType%22%3A%22standPlace%22%2C%22coordinate%22%3A%22wcongnamul%22%2C%22x%22%3A512020%2C%22y%22%3A1123148%2C%22clickable%22%3Atrue%2C%22draggable%22%3Atrue%2C%22icon%22%3A%7B%22width%22%3A35%2C%22height%22%3A56%2C%22offsetX%22%3A17%2C%22offsetY%22%3A56%2C%22src%22%3A%22%2F%2Ft1.daumcdn.net%2Flocalimg%2Flocalimages%2F07%2F2012%2Fattach%2Fpc_img%2Fico_marker2_150331.png%22%7D%2C%22content%22%3A%22%EC%86%8C%EB%AC%B8%EB%82%9C%EC%84%B1%EC%88%98%EA%B0%90%EC%9E%90%ED%83%95%22%2C%22confirmid%22%3A13289056%7D%5D%2C%22graphicInfo%22%3A%5B%5D%2C%22roadviewInfo%22%3A%5B%5D%7D&amp;toJSONString=&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>맛집</category>
<category>감자탕</category>
<category>건대맛집</category>
<category>맛집</category>
<category>성수</category>
<category>성수맛집</category>
<category>소문난감자탕</category>
<category>소문난성수감자탕</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/33</guid>
<comments>https://simsi6.tistory.com/33#entry33comment</comments>
<pubDate>Tue, 31 Oct 2017 22:48:39 +0900</pubDate>
</item>
<item>
<title>공식 문서 기반의 Kotlin 한글 정리</title>
<link>https://simsi6.tistory.com/32</link>
<description>
&lt;p&gt;이 글은 &lt;a href=&quot;https://kotlinlang.org/docs/reference/&quot;&gt;https://kotlinlang.org/docs/reference/&lt;/a&gt; 의 공식문서를 참고해서 한글로 차근차근 공부하며 정리한 글입니다. 아무쪼록 도움이 되시길 바라겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.worldvectorlogo.com/logos/kotlin-2.svg&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;kotlin-컴파일-속도&quot;&gt;Kotlin 컴파일 속도&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;대개 Java보다 조금 빠르다!&lt;/li&gt;
&lt;li&gt;클린 빌드 시에는 Java보다 조금 느리지만, 일반적인 개발 시나리오의 증분 빌드 시 성능이 좋다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d&quot;&gt;Kotlin vs Java: Compilation speed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;세미콜론-제거&quot;&gt;세미콜론 제거&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;fun main(args: &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;&amp;gt;) {
    val age = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;
    val name: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Seo Jaeryong&quot;&lt;/span&gt;
    println(name.length)
}&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;변수는-모두-val-아니면-var&quot;&gt;변수는 모두 val 아니면 var&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;val : 변경 불가능 (read-only)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;fun main(args: &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;&amp;gt;) {
    val age: Int = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;
    a = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;var : 변경 가능 (read-write)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;fun main(args: &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;&amp;gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; age: Int = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;
    a = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;함수-값-리턴의-간략화&quot;&gt;함수 값 리턴의 간략화&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;일반적인 함수&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs livecodeserver&quot;&gt;fun maxOf(&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;: Int, b: Int): Int {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; &amp;gt; b) {
        &lt;span class=&quot;hljs-constant&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-constant&quot;&gt;return&lt;/span&gt; b
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;간략하게 표현&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs livecodeserver&quot;&gt;fun maxOf(&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;: Int, b: Int): Int = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; &amp;gt; b) &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;더 간략하게 표현 (리턴 타입을 생략해도 추론 가능)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs livecodeserver&quot;&gt;fun maxOf(&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;: Int, b: Int) = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; &amp;gt; b) &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; b&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;nullsafe&quot;&gt;Nullsafe&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Kotlin은 널 참조의 위험(&lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;The Billion Dollar Mistake&lt;/a&gt;)을 제거하기 위해 노력했다.&lt;/li&gt;
&lt;li&gt;아래와 같은 상황에서만 NPE(NullPointerException)를 만들 수 있다. &lt;br&gt;
&lt;ul&gt;&lt;li&gt;명시적인 &lt;code&gt;throw NullPointerException()&lt;/code&gt; 호출&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt; 오퍼레이터 사용&lt;/li&gt;
&lt;li&gt;NPE를 발생시키는 외부 Java 코드 호출&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Non-null&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;
a = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Nullable(?)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;? = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;
b = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;‘?.’ operator (for nullable)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;? = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;
b.length &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;
b?.length &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;여러 체인의 객체를 호출할 때 유용하다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Java&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; name;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bob != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (department != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (head != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {
        name = bob.department.head.name;
    }
    }
}

&lt;span class=&quot;hljs-comment&quot;&gt;// Kotlin&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; = bob?.department?.head?.name ?: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt; operator (for nullable) &lt;br&gt;
&lt;ul&gt;&lt;li&gt;for &lt;code&gt;NPE-lovers&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-reserved&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;b&lt;/span&gt;: String? = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;
val l = b!!.length &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; ok, but &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; an NPE &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Safe casts&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs autohotkey&quot;&gt;&lt;span class=&quot;hljs-label&quot;&gt;val aInt:&lt;/span&gt; Int? = &lt;span class=&quot;hljs-literal&quot;&gt;a&lt;/span&gt; as? Int // &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-escape&quot;&gt;`n&lt;/span&gt;ull&lt;span class=&quot;hljs-escape&quot;&gt;` &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; the attempt was &lt;span class=&quot;hljs-literal&quot;&gt;not&lt;/span&gt; successful&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Collections of Nullable Type&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs php&quot;&gt;val nullableList: &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Int&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt; = listOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)
val intList: &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Int&amp;gt; = nullableList.filterNotNull()&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;접근자&quot;&gt;접근자&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public (default)&lt;/code&gt; : 전역 프로젝트에 공개&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; : 같은 파일내에 공개&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; : Subclasses에 공개&lt;/li&gt;
&lt;li&gt;&lt;code&gt;internal&lt;/code&gt; : 같은 Module내에 공개&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs livecodeserver&quot;&gt;Module이란?
- IntelliJ &lt;span class=&quot;hljs-operator&quot;&gt;an&lt;/span&gt; IntelliJ IDEA module
- &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; Maven project
- &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; Gradle source &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;
- &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;files&lt;/span&gt; compiled &lt;span class=&quot;hljs-operator&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;one&lt;/span&gt; invocation &lt;span class=&quot;hljs-operator&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;the&lt;/span&gt; Ant task.&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;자동-형변환-smart-casts&quot;&gt;자동 형변환 (Smart Casts)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;is 체크 후 (Java의 instanceof)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs cs&quot;&gt;fun demo(x: Any) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; String) {
        print(x.length) &lt;span class=&quot;hljs-comment&quot;&gt;// x가 자동으로 String으로 형변환 된다.&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;null 체크 후&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs javascript&quot;&gt;fun demo1(x: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;?) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (x != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {
        demo2(x) &lt;span class=&quot;hljs-comment&quot;&gt;// x가 자동으로 NonNull String으로 형변환 된다.&lt;/span&gt;
    }
}

fun demo2(x: &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;) {
    print(x.length)
}&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;for-loop&quot;&gt;For-Loop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs applescript&quot;&gt;val items = listOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;kiwi&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items.indices) {
    println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;item at $index is ${items[index]}&quot;&lt;/span&gt;)
}

결과
&lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; apple
&lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; banana
&lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; kiwi&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Range (a…b)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs lua&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;) { 
    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)
}

결과
&lt;span class=&quot;hljs-number&quot;&gt;012345678910&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;while-loop&quot;&gt;While-Loop&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs applescript&quot;&gt;val items = listOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;kiwi&quot;&lt;/span&gt;)
var index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (index &amp;lt; items.size) {
    println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;item at $index is ${items[index]}&quot;&lt;/span&gt;)
    index++
}

결과
&lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; apple
&lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; banana
&lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; kiwi&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;when&quot;&gt;When&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;다양한 타입 비교&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; (obj) {
    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;          -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;    -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Greeting&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; Long&lt;span class=&quot;hljs-function&quot;&gt;    -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Long&quot;&lt;/span&gt;
    !&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; String&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a string&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;       -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Unknown&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;{} 블록을 지정해서 작성&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; (x) {
    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x == 1&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x == 2&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; Note the block
        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x is neither 1 nor 2&quot;&lt;/span&gt;)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;한 조건에 여러 값을 비교 (0, 1)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; (x) {
    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x == 0 or x == 1&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;otherwise&quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;범위 비교&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; (x) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x is in the range&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; validNumbers&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x is valid&quot;&lt;/span&gt;)
    !&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10.&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x is outside the range&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;none of the above&quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;infix-notation중위-표기법&quot;&gt;infix notation(중위 표기법)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;함수앞에 infix를 붙인다.&lt;/li&gt;
&lt;li&gt;멤버함수 혹은 확장 함수(&lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension funtions&lt;/a&gt;)에 사용&lt;/li&gt;
&lt;li&gt;하나의 파라미터를 받는 함수에서 사용&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs r&quot;&gt;// 정의 방법
infix fun Int.shl(x: Int): Int {
    &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
}

&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;shl(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; shl &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; // can also be called like this&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;extensions&quot;&gt;Extensions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;클래스에 함수 확장&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs avrasm&quot;&gt;// ViewExt&lt;span class=&quot;hljs-preprocessor&quot;&gt;.kt&lt;/span&gt;
fun View&lt;span class=&quot;hljs-preprocessor&quot;&gt;.show&lt;/span&gt;() {
    visibility = View&lt;span class=&quot;hljs-preprocessor&quot;&gt;.VISIBLE&lt;/span&gt;
}

fun View&lt;span class=&quot;hljs-preprocessor&quot;&gt;.hide&lt;/span&gt;() {
    visibility = View&lt;span class=&quot;hljs-preprocessor&quot;&gt;.GONE&lt;/span&gt;
}

// SearchActivity&lt;span class=&quot;hljs-preprocessor&quot;&gt;.kt&lt;/span&gt;
var textView = findViewById(R&lt;span class=&quot;hljs-preprocessor&quot;&gt;.id&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.textView&lt;/span&gt;) as TextView
textView&lt;span class=&quot;hljs-preprocessor&quot;&gt;.show&lt;/span&gt;() // ok
textView&lt;span class=&quot;hljs-preprocessor&quot;&gt;.hide&lt;/span&gt;() // ok&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;클래스&quot;&gt;클래스&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;기본&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs ruby&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Invoice&lt;/span&gt; {&lt;/span&gt;

}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;바디가 없을 때 {} 생략가능&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs ruby&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Empty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;생성자 표현 (constructor 키워드)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Person &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(firstName: &lt;span class=&quot;hljs-keyword&quot;&gt;String&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;{

}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;생성자 표현에 constructor 키워드 생략 가능&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs haskell&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;firstName&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt; {

}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;생성자의 초기화 블록 지정 (init 키워드)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(name: String)&lt;/span&gt; {&lt;/span&gt;
    init {
        logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Customer initialized with value ${name}&quot;&lt;/span&gt;)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;위 표현을 아래와 같이 표현 가능 (동일)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs ruby&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Customer&lt;/span&gt; {&lt;/span&gt;
    constructor(&lt;span class=&quot;hljs-symbol&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;String&lt;/span&gt;) {
        logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Customer initialized with value ${name}&quot;&lt;/span&gt;)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;@Inject 어노테이션이 필요하면 constructor 키워드가 필요하다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Customer &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; @Inject &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(name: &lt;span class=&quot;hljs-keyword&quot;&gt;String&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;{ ... }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Data 클래스 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;모든 var, val 변수의 Getter 제공&lt;/li&gt;
&lt;li&gt;모든 var 변수의 Setter를 제공&lt;/li&gt;
&lt;li&gt;equals() / hashCode() / toString() / copy() 구현을 아름답게 제공&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs haskell&quot;&gt;&lt;span class=&quot;hljs-typedef&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; class &lt;span class=&quot;hljs-type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Open 클래스 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;코틀린의 모든 클래스는 기본적으로 final이라 상속이 불가능하다.&lt;/li&gt;
&lt;li&gt;open 키워드를 class 앞에 붙여줌으로써 상속을 허용시킨다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt;(p: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;)
&lt;span class=&quot;hljs-class&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;p&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;p&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Abstract 클래스 (open 붙일 필요 없음)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs r&quot;&gt;abstract class Base {
    abstract fun f()
}

class Derived() : Base() {
    override fun f() {
        // &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Nested 클래스 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;Outer클래스 멤버 참조가 &lt;code&gt;불가능&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Outer&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; bar: Int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Nested&lt;/span&gt; {&lt;/span&gt;
        fun foo() = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// bar 참조 불가&lt;/span&gt;
    }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; demo = Outer.Nested().foo() &lt;span class=&quot;hljs-comment&quot;&gt;// == 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Inner 클래스 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;Outer클래스 멤버 참조 &lt;code&gt;가능&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs scala&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Outer&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; bar: Int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    inner &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Inner&lt;/span&gt; {&lt;/span&gt;
        fun foo() = bar &lt;span class=&quot;hljs-comment&quot;&gt;// bar 참조 가능&lt;/span&gt;
    }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; demo = Outer().Inner().foo() &lt;span class=&quot;hljs-comment&quot;&gt;// == 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;익명 Inner 클래스 &lt;br&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;object&lt;/code&gt;키워드를 사용하고 타입은 &lt;code&gt;interface&lt;/code&gt;나 &lt;code&gt;abstract class&lt;/code&gt;를 받는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interface&lt;/code&gt; : 이름 뒤에 ()를 붙이지 않는다. &lt;code&gt;View.OnClickListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract class&lt;/code&gt; : 이름 뒤에 ()를 붙인다. &lt;code&gt;SimpleOnQueryTextListener()&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs r&quot;&gt;// interface
button.setOnClickListener(object : View.OnClickListener {
    override fun onClick(view: View) {
        // &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    }
})

// abstract class
searchView.setOnQueryTextListener(object : SimpleOnQueryTextListener() {
    override fun onQueryTextSubmit(query: String): Boolean {
        presenter.searchImage(query)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; false
    }
})&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Enum 클래스&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs scala&quot;&gt;enum &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Direction&lt;/span&gt; {&lt;/span&gt;
    NORTH, SOUTH, WEST, EAST
}
enum &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(val rgb: Int)&lt;/span&gt; {&lt;/span&gt;
    RED(&lt;span class=&quot;hljs-number&quot;&gt;0xFF0000&lt;/span&gt;),
    GREEN(&lt;span class=&quot;hljs-number&quot;&gt;0x00FF00&lt;/span&gt;),
    BLUE(&lt;span class=&quot;hljs-number&quot;&gt;0x0000FF&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;클래스 위임 (Class Delegation) &lt;br&gt;
&lt;ul&gt;&lt;li&gt;해당 클래스안에 by절 &lt;code&gt;뒤&lt;/code&gt;에 오는 참조가 &lt;code&gt;private으로 저장&lt;/code&gt;된다.&lt;/li&gt;
&lt;li&gt;해당 클래스안에 by절 &lt;code&gt;앞&lt;/code&gt;에 오는 인터페이스의 &lt;code&gt;메소드를 자동 생성&lt;/code&gt;한다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt; {
    fun print()
}
&lt;span class=&quot;hljs-class&quot;&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BaseImpl&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt; {
    override fun print&lt;span class=&quot;hljs-container&quot;&gt;()&lt;/span&gt; { print&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; }
}

// b가 &lt;span class=&quot;hljs-type&quot;&gt;Derived&lt;/span&gt;내에 private으로 저장 됨
// &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt;의 메소드를 &lt;span class=&quot;hljs-type&quot;&gt;Derived&lt;/span&gt;내에 자동 생성한다.
// 그 메소드들은 b를 참조하여 실행한다.
&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt;)&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;Base&lt;/span&gt; by b 

fun main&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/span&gt; {
    val b = &lt;span class=&quot;hljs-type&quot;&gt;BaseImpl&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(10)&lt;/span&gt;
    &lt;span class=&quot;hljs-type&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;hljs-container&quot;&gt;(&lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;)&lt;/span&gt;.print&lt;span class=&quot;hljs-container&quot;&gt;()&lt;/span&gt; // prints 10
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;destructuring-declarations&quot;&gt;Destructuring Declarations&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs perl&quot;&gt;// class
data class Person(val name: String, val age: Int)

val (name, age) = Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jee-ryong&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; and I am &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt; years old.&quot;&lt;/span&gt;)

// &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ((key, value) in &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key is &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;&quot;&lt;/span&gt;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value is &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;&quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;list&quot;&gt;List&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seojr/kotlin/blob/master/libraries/stdlib/src/kotlin/collections/Collections.kt#L96&quot;&gt;mutableListOf&lt;/a&gt;, &lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/collections/Collections.kt#L101&quot;&gt;arrayListOf&lt;/a&gt; 둘 다 ArrayList를 만들어 리턴&lt;/li&gt;
&lt;li&gt;ArrayList보다 kotlin스타일로 리스트를 다루는 인터페이스가 구현되어 있는 MutableList를 사용하는 편이 더 나아보임.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs fsharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; lists: List&amp;lt;Int&amp;gt; = listOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// read only&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; lists: MutableList&amp;lt;Int&amp;gt; = mutableListOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// read/write&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; lists: ArrayList&amp;lt;Int&amp;gt; = arrayListOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// read/write&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs vhdl&quot;&gt;// &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; instance
val &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt; = mapOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) // read only
val &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt; = mutableMapOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) // read/write
val &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt; = linkedMapOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
val &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt; = hashMapOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) 
val &lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt; = sortedMapOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)

// &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;London&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;]
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.containsKey(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.toList()
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.toMap()
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.toMutableMap()
&lt;span class=&quot;hljs-keyword&quot;&gt;map&lt;/span&gt;.toSortedMap()&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs avrasm&quot;&gt;// new instance
val &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; = setOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;)
val &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; = mutableSetOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;)
val &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; = hashSetOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;)
val &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; = linkedSetOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;)
val &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; = sortedSetOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;)

// use
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;London&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.remove&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;London&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.contains&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;London&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.size&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.toList&lt;/span&gt;()
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.toMutableList&lt;/span&gt;()
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.toSet&lt;/span&gt;()
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.toHashSet&lt;/span&gt;()
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.toMutableSet&lt;/span&gt;()
&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.toSortedSet&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;ranges&quot;&gt;Ranges&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs oxygene&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) print(i) &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;1234&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) print(i) &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;13&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;downTo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) print(i) &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;4321&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;downTo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) print(i) &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;42&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) println(i) &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;123456789&quot;&lt;/span&gt;
(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).last &lt;span class=&quot;hljs-comment&quot;&gt;// 11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;equality&quot;&gt;Equality&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Referential equality (&lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs livecodeserver&quot;&gt;val &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; = Integer(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)
val b = &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; === b&lt;span class=&quot;hljs-comment&quot;&gt; // true&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; !== b&lt;span class=&quot;hljs-comment&quot;&gt; // false&lt;/span&gt;

val &lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; = Integer(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)
val b = Integer(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; === b&lt;span class=&quot;hljs-comment&quot;&gt; // false&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;a&lt;/span&gt; !== b&lt;span class=&quot;hljs-comment&quot;&gt; // true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Structural equality (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs fsharp&quot;&gt;data &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Person(&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; name: String, &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; age: Int)
&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; person = Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jae-ryong&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; person2 = Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jae-ryong&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)
person == person2 &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;
person != person2 &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Arrays Equality (using infix funtions) &lt;br&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;&quot;&gt;contentEquals&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs fsharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; hobbies = arrayOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hiking&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Chess&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; hobbies2 = arrayOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hiking&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Chess&quot;&lt;/span&gt;)
assertTrue(hobbies contentEquals hobbies2) &lt;span class=&quot;hljs-comment&quot;&gt;// passed&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// 참고 - contentEquals는 미리 정의 된 infix함수이다.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; infix &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; kotlin.Array&amp;lt;out T&amp;gt;.contentEquals(other: kotlin.Array&amp;lt;out T&amp;gt;): kotlin.Boolean&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;lambdas&quot;&gt;Lambdas&lt;/h3&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; example
fun &amp;lt;T, R&amp;gt; List&amp;lt;T&amp;gt;.map&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(transform: (T) -&amp;gt; R)&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;R&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;hljs-title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;arrayListOf&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;R&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;
        &lt;span class=&quot;hljs-title&quot;&gt;result&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(transform(item))&lt;/span&gt;
    &lt;span class=&quot;hljs-title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;result&lt;/span&gt;
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;input 파라미터 네이밍은 자유&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ints = listOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)
val doubled = ints.map { &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;it&lt;/code&gt;을 사용하면 input 파라미터 생략가능&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs mathematica&quot;&gt;ints.map &lt;span class=&quot;hljs-list&quot;&gt;{ it * 2 }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;사용하지 않는 파라미터는 &lt;code&gt;_&lt;/code&gt;로 선언 가능&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-kotlin hljs lasso&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; mapOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Korea&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Seoul&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Tokyo&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;forEach { _, value &lt;span class=&quot;hljs-subst&quot;&gt;-&amp;gt; &lt;/span&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$value!&quot;&lt;/span&gt;) }&lt;/code&gt;&lt;/pre&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Programming Language</category>
<category>Android</category>
<category>java</category>
<category>Kotlin</category>
<category>Programming</category>
<category>안드로이드</category>
<category>코틀린</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/32</guid>
<comments>https://simsi6.tistory.com/32#entry32comment</comments>
<pubDate>Tue, 31 Oct 2017 22:39:23 +0900</pubDate>
</item>
<item>
<title>[AWS] Node.js로 DynamoDB사용하기 (3) - DynamoDB 테이블/데이터 다루기</title>
<link>https://simsi6.tistory.com/31</link>
<description>&lt;p&gt;이 글에서는 &lt;code&gt;MusicChart&lt;/code&gt;라는 테이블을 생성하겠습니다. &lt;br /&gt;
속성은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;company : 파티션 키&lt;/li&gt;
&lt;li&gt;rank : 정렬 키&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;테이블&quot;&gt;테이블&lt;/h2&gt;

&lt;h4 id=&quot;테이블-생성&quot;&gt;테이블 생성&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;company(파티션 키)와, rank(정렬 키) 속성을 포함하여 생성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName: &lt;span class=&quot;hljs-string&quot;&gt;'MusicChart'&lt;/span&gt;,
    KeySchema: [
        { &lt;span class=&quot;hljs-comment&quot;&gt;// Required&lt;/span&gt;
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'company'&lt;/span&gt;,
            KeyType: &lt;span class=&quot;hljs-string&quot;&gt;'HASH'&lt;/span&gt;,
        },
        { &lt;span class=&quot;hljs-comment&quot;&gt;// Optional&lt;/span&gt;
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'rank'&lt;/span&gt;, 
            KeyType: &lt;span class=&quot;hljs-string&quot;&gt;'RANGE'&lt;/span&gt;, 
        }
    ],
    AttributeDefinitions: [
        {
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'company'&lt;/span&gt;,
            AttributeType: &lt;span class=&quot;hljs-string&quot;&gt;'N'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// (S | N | B) for string, number, binary&lt;/span&gt;
        },
        {
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'rank'&lt;/span&gt;,
            AttributeType: &lt;span class=&quot;hljs-string&quot;&gt;'N'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// (S | N | B) for string, number, binary&lt;/span&gt;
        }
    ],
    ProvisionedThroughput: { &lt;span class=&quot;hljs-comment&quot;&gt;// required provisioned throughput for the table&lt;/span&gt;
        ReadCapacityUnits: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, 
        WriteCapacityUnits: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, 
    }
};
dynamodb.createTable(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// an error occurred&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// successful response&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;테이블-확인&quot;&gt;테이블 확인&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;테이블이 잘 생성되어있는지 확인합니다. 해당 테이블 정보들이 출력됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName: &lt;span class=&quot;hljs-string&quot;&gt;'MusicChart'&lt;/span&gt;,
};
dynamodb.describeTable(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// an error occurred&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// successful response&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;테이블-목록&quot;&gt;테이블 목록&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;현재 계정 및 리전에 있는 테이블의 목록을 나열합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExclusiveStartTableName&lt;/code&gt;속성과 테이블명을 포함하면 해당 테이블을 제외한 다음 순위의 테이블부터 차례대로 나열합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Limit&lt;/code&gt;속성을 포함하면 반환 테이블 목록의 개수를 제한할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    &lt;span class=&quot;hljs-comment&quot;&gt;// ExclusiveStartTableName: 'MusicChart', // optional (for pagination, returned as LastEvaluatedTableName)&lt;/span&gt;
    Limit: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// optional (to further limit the number of table names returned per page)&lt;/span&gt;
};
dynamodb.listTables(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// an error occurred&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// successful response&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;테이블-삭제&quot;&gt;테이블 삭제&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MusicChart&lt;/code&gt; 테이블을 삭제합니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName: &lt;span class=&quot;hljs-string&quot;&gt;'MusicChart'&lt;/span&gt;,
};

dynamodb.deleteTable(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// success&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;



&lt;h2 id=&quot;항목&quot;&gt;항목&lt;/h2&gt;

&lt;h4 id=&quot;항목-생성-및-업데이트&quot;&gt;항목 생성 및 업데이트&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;새로운 항목을 생성합니다. 이 때 company(파티션 키), rank(정렬 키)와 일치하는 값이 있을 때는 기존 항목을 업데이트 합니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName: &lt;span class=&quot;hljs-string&quot;&gt;&quot;MusicChart&quot;&lt;/span&gt;,
    Item:{
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;company&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;music_title&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;빨간맛&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;singer&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;레드벨벳&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;album_title&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;The Red Summer - Summer Mini Album&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;album_image&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.naver.com/images/red_flavor_image.png&quot;&lt;/span&gt;
    }
};

docClient.put(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// success&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;여러-항목-쓰기-삭제-batchwriteitem&quot;&gt;여러 항목 쓰기 &amp;amp; 삭제 (BatchWriteItem)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;한번의 요청에 여러 쓰기 작업을 수행할 수 있습니다. PutRequest, DeleteRequest를 포함할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-java hljs &quot;&gt;var params = {
    RequestItems: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;MusicChart&quot;&lt;/span&gt;: [
            {
                PutRequest: {
                    Item: { &lt;span class=&quot;hljs-comment&quot;&gt;// a map of attribute name to AttributeValue    &lt;/span&gt;
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;company&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;music_title&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;좋니&quot;&lt;/span&gt;,
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;singler&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;윤종신&quot;&lt;/span&gt;,
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;album_title&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Yoons 1st&quot;&lt;/span&gt;,
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;album_image&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.naver.com/images/yoons_image.png&quot;&lt;/span&gt;
                    }
                }
            },
            {
                DeleteRequest: {
                    Key: { 
                        &lt;span class=&quot;hljs-string&quot;&gt;&quot;company&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
                        &lt;span class=&quot;hljs-comment&quot;&gt;// more primary attributes (if the primary key is hash/range schema)&lt;/span&gt;
                    }
                }
            },
            &lt;span class=&quot;hljs-comment&quot;&gt;// ... more put or delete requests ...&lt;/span&gt;
        ]
    }
};

docClient.batchWrite(params, function(err, data) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err, err.stack); &lt;span class=&quot;hljs-comment&quot;&gt;// an error occurred&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data);           &lt;span class=&quot;hljs-comment&quot;&gt;// successful response&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;항목-쿼리&quot;&gt;항목 쿼리&lt;/h4&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName : &lt;span class=&quot;hljs-string&quot;&gt;&quot;MusicChart&quot;&lt;/span&gt;,
    KeyConditionExpression: &lt;span class=&quot;hljs-string&quot;&gt;&quot;company = :c&quot;&lt;/span&gt;,
    ExpressionAttributeValues: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;:c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    }
};

docClient.query(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to query. Error:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.stringify(err, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Query succeeded.&quot;&lt;/span&gt;);
        data.Items.forEach(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt;
            console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot; - &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.stringify(item));
        });
    }
});&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;항목-업데이트&quot;&gt;항목 업데이트&lt;/h4&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName:&lt;span class=&quot;hljs-string&quot;&gt;&quot;MusicChart&quot;&lt;/span&gt;,
    Key:{
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;company&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;rank&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
    },
    UpdateExpression: &lt;span class=&quot;hljs-string&quot;&gt;&quot;set music_title = :mt, singer=:s, album_title=:at, album_image=:ai&quot;&lt;/span&gt;, 
    ExpressionAttributeValues:{
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;:mt&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;빨간맛&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;:s&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;레드벨벳&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;:at&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;The Red Summer - Summer Mini Album&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;:ai&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.naver.com/images/red_flavor_image.png&quot;&lt;/span&gt;
    },
    ReturnValues: &lt;span class=&quot;hljs-string&quot;&gt;'NONE'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// optional (NONE | ALL_OLD | UPDATED_OLD | ALL_NEW | UPDATED_NEW)&lt;/span&gt;
    ReturnConsumedCapacity: &lt;span class=&quot;hljs-string&quot;&gt;'NONE'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// optional (NONE | TOTAL | INDEXES)&lt;/span&gt;
    ReturnItemCollectionMetrics: &lt;span class=&quot;hljs-string&quot;&gt;'NONE'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// optional (NONE | SIZE)&lt;/span&gt;
};

docClient.update(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// success&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;항목-읽기&quot;&gt;항목 읽기&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;company값이 1인 항목을 불러옵니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName: &lt;span class=&quot;hljs-string&quot;&gt;&quot;MusicChart&quot;&lt;/span&gt;,
    Key:{
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;company&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    }
};

docClient.get(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// error&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// success&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;항목-삭제&quot;&gt;항목 삭제&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;company값이 1인 항목을 삭제합니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName : &lt;span class=&quot;hljs-string&quot;&gt;&quot;MusicChart&quot;&lt;/span&gt;,
    KeyConditionExpression: &lt;span class=&quot;hljs-string&quot;&gt;&quot;company = :c&quot;&lt;/span&gt;,
    ExpressionAttributeValues: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;:c&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    }
};

docClient.query(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to query. Error:&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.stringify(err, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Query succeeded.&quot;&lt;/span&gt;);
        data.Items.forEach(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt;
            console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot; -&quot;&lt;/span&gt;, item.song_title + &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt; + item.album_title);
        });
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[참고자료] &lt;br /&gt;
JavaScript SDK Doc &lt;br /&gt;
&lt;a href=&quot;http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#batchWriteItem-property&quot;&gt;http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#batchWriteItem-property&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Doc &lt;br /&gt;
&lt;a href=&quot;http://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/GettingStarted.NodeJs.03.html#GettingStarted.NodeJs.03.03&quot;&gt;http://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/GettingStarted.NodeJs.03.html#GettingStarted.NodeJs.03.03&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>AWS</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/31</guid>
<comments>https://simsi6.tistory.com/31#entry31comment</comments>
<pubDate>Fri, 27 Oct 2017 00:41:09 +0900</pubDate>
</item>
<item>
<title>[AWS] Node.js로 DynamoDB사용하기 (2) - AWS SDK로 개발하기</title>
<link>https://simsi6.tistory.com/27</link>
<description>
&lt;p&gt;이번 글에서는 Node.js에서 설치형 DynamoDB에 접근 설정과 샘플 코드를 작성해보겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js 프로젝트를 생성합니다.&lt;/li&gt;
&lt;li&gt;AWS SDK for JavsScript를 설치합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;$ npm install aws-sdk --save&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;자격증명을 위한 키를 생성합니다. (DynamoDB에 접근하기 위해서는 권한이 필요합니다.) &lt;br&gt;
참고 : &lt;a href=&quot;https://aws.amazon.com/ko/sdk-for-node-js/&quot;&gt;https://aws.amazon.com/ko/sdk-for-node-js/&lt;/a&gt; &lt;br&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://console.aws.amazon.com/iam/home?#home&quot;&gt;IAM Console&lt;/a&gt;에 접속합니다.&lt;/li&gt;
&lt;li&gt;유저를 생성합니다. (Users -&amp;gt; Add User)&lt;/li&gt;
&lt;li&gt;키를 생성합니다. (Users -&amp;gt; User 선택 -&amp;gt; Security credentials -&amp;gt; Create access key)&lt;/li&gt;
&lt;li&gt;생성 후에 키를 바로 확인 할 수 있고 &lt;code&gt;Download .csv file&lt;/code&gt;버튼을 눌러 다운로드 후 확인 할 수 있습니다. &lt;br&gt;
Access key ID: AKIAIOSFODNN7EXAMPLE &lt;br&gt;
Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Credential 파일을 생성하고 키를 입력합니다. (Mac/Linux는 &lt;code&gt;~/.aws/credential&lt;/code&gt; Windows는 &lt;code&gt;C:\Users\USERNAME\.aws\credentials&lt;/code&gt;) &lt;br&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;your_access_key&lt;/code&gt;에는 위에서 확인 한 access_key를 입력합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;your_secret_key&lt;/code&gt;에는 위에서 확인 한 secret_key를 입력합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;[default]
aws_access_key_id = your_access_key
aws_secret_access_key = your_secret_key&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;이전 글에서 실행시킨 로컬 DynamoDB에 Node.js가 접근하기 위해 설정이 필요합니다. &lt;br&gt;
&lt;ul&gt;&lt;li&gt;region에는 &lt;code&gt;us-west-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;endpoint에는 &lt;code&gt;http://localhost:8000&lt;/code&gt; 를 입력합니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;  AWS = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'aws-sdk'&lt;/span&gt;); 
AWS.config.update({
    region: &lt;span class=&quot;hljs-string&quot;&gt;&quot;us-west-2&quot;&lt;/span&gt;,
    endpoint: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8000&quot;&lt;/span&gt; 
});
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dynamodb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AWS.DynamoDB();

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = {
    TableName: &lt;span class=&quot;hljs-string&quot;&gt;'MusicChart'&lt;/span&gt;,
    KeySchema: [
        { &lt;span class=&quot;hljs-comment&quot;&gt;// Required&lt;/span&gt;
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'company'&lt;/span&gt;,
            KeyType: &lt;span class=&quot;hljs-string&quot;&gt;'HASH'&lt;/span&gt;,
        },
        { &lt;span class=&quot;hljs-comment&quot;&gt;// Optional&lt;/span&gt;
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'rank'&lt;/span&gt;, 
            KeyType: &lt;span class=&quot;hljs-string&quot;&gt;'RANGE'&lt;/span&gt;, 
        }
    ],
    AttributeDefinitions: [
        {
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'company'&lt;/span&gt;,
            AttributeType: &lt;span class=&quot;hljs-string&quot;&gt;'N'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// (S | N | B) for string, number, binary&lt;/span&gt;
        },
        {
            AttributeName: &lt;span class=&quot;hljs-string&quot;&gt;'rank'&lt;/span&gt;,
            AttributeType: &lt;span class=&quot;hljs-string&quot;&gt;'N'&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// (S | N | B) for string, number, binary&lt;/span&gt;
        }
    ],
    ProvisionedThroughput: { &lt;span class=&quot;hljs-comment&quot;&gt;// required provisioned throughput for the table&lt;/span&gt;
        ReadCapacityUnits: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, 
        WriteCapacityUnits: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, 
    }
};
dynamodb.createTable(params, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, data)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {
        console.log(err); &lt;span class=&quot;hljs-comment&quot;&gt;// an error occurred&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        console.log(data); &lt;span class=&quot;hljs-comment&quot;&gt;// successful response&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드를 실행시키면 MusicChart라는 테이블이 생성됩니다.  &lt;br&gt;
이 코드를 바탕으로 DynamoDB 를 사용하는 프로그램을 개발하실 수 있습니다. &lt;br&gt;
다음 글에서는 DynamoDB 테이블과 항목을 다루는 여러 방법들을 코드로 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;※ 참고 : &lt;a href=&quot;http://localhost:8000/shell/&quot;&gt;http://localhost:8000/shell/&lt;/a&gt;에 접근하면 로컬 DynamoDB를 다루는 여러 예제들과 함께 코드를 쉽게 실행해 볼 수 있습니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>AWS</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/27</guid>
<comments>https://simsi6.tistory.com/27#entry27comment</comments>
<pubDate>Fri, 27 Oct 2017 00:41:01 +0900</pubDate>
</item>
<item>
<title>[AWS] Node.js로 DynamoDB사용하기 (1) - DynamoDB 다운로드</title>
<link>https://simsi6.tistory.com/26</link>
<description>&lt;p&gt;먼저 DynamoDB 개발환경을 구축해보도록 하겠습니다. &lt;br /&gt;
DynamoDB를 사용하는 방법은 2가지가 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;다운로드 버전&lt;/code&gt;으로 Local에서 테스트할 때 사용하는 방법과&lt;/li&gt;
&lt;li&gt;&lt;code&gt;웹의 AWS DynamoDB에 직접 접근&lt;/code&gt;하여 주로 실제 서비스 할 때 사용하는 방법이 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이번글에서는 첫번째 방법인 &lt;code&gt;다운로드 버전&lt;/code&gt;으로 로컬에서 사용하는 방법을 알아보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;dynamodb-다운로드&quot;&gt;DynamoDB 다운로드&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;플랫폼(Windows, Linux, MacOS X 및 Java)에 맞는 버전을 다운로드합니다. &lt;br /&gt;
&lt;a href=&quot;http://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/DynamoDBLocal.html&quot;&gt;http://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/DynamoDBLocal.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:400px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DC763359DF894307&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-13 오전 12.23.57.png&quot; height=&quot;194&quot; width=&quot;400&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;※ 참고 : 컴퓨터에서 DynamoD를 실행하기 위해서는 JRE(Java Runtime Environment) 6.x 이상의 버전이 필요합니다. &lt;br /&gt;
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;압축을 풀고 해제된 디렉터리로 이동합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-java hljs &quot;&gt;$ cd dynamodb_local_latest/&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;실행&quot;&gt;실행&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;아래 명령어를 입력하여 DynamoDB를 실행합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※ DynamoDB는 기본으로 8000포트를 사용합니다. 8000포트가 이미 사용중이면 &lt;code&gt;-port {port_number}&lt;/code&gt; 옵션을 이용하여 다른 포트를 지정합니다.&lt;/p&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb -port &lt;span class=&quot;hljs-number&quot;&gt;8400&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;자 이제 DynamoDB가 실행되었고 어플리케이션을 작성할 준비를 마쳤습니다.&lt;/p&gt;&lt;p&gt;다음글에서는 Node.js로 AWS SDK를 이용하여 DynamoDB에 접근하는 방법을 알아보겠습니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>AWS</category>
<category>AWS</category>
<category>dynamodb</category>
<category>java</category>
<category>node</category>
<category>nodejs</category>
<category>serverless</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/26</guid>
<comments>https://simsi6.tistory.com/26#entry26comment</comments>
<pubDate>Fri, 27 Oct 2017 00:40:52 +0900</pubDate>
</item>
<item>
<title>Node.js 프로젝트 시작하기 (2/2) - 프로그램 작성 및 실행</title>
<link>https://simsi6.tistory.com/29</link>
<description>&lt;p&gt;&lt;a href=&quot;http://simsi6.tistory.com/entry/Nodejs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-npm%EA%B3%BC-packagejson&quot;&gt;이전글&lt;/a&gt;에서 npm을 이용하여 node.js 프로젝트를 초기화 하는방법을 알아습니다. &lt;br /&gt;
이번글에서는 간단한 node.js프로그램을 작성하여 실행하는 법을 알아보겠습니다. &lt;br /&gt;
&lt;br /&gt;
웹서버를 띄우는 간단한 예제 프로그램을 작성해보겠습니다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;



&lt;h4 id=&quot;프로그램-작성&quot;&gt;프로그램 작성&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.js&lt;/code&gt;라는 파일을 생성하고 아래의 코드를 입력합니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-javascript hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'http'&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = express();
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server = http.createServer(app);

app.get(&lt;span class=&quot;hljs-string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
  res.send(&lt;span class=&quot;hljs-string&quot;&gt;'root page'&lt;/span&gt;);
});

app.get(&lt;span class=&quot;hljs-string&quot;&gt;'/start'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(req, res)&lt;/span&gt;{&lt;/span&gt;
  res.send(&lt;span class=&quot;hljs-string&quot;&gt;'start page'&lt;/span&gt;);
});

server.listen(&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'127.0.0.1'&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  console.log(&lt;span class=&quot;hljs-string&quot;&gt;'Server listen on port '&lt;/span&gt; + server.address().port);
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이전 글에서 받은 express모듈을 불러와서 사용했습니다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;



&lt;h4 id=&quot;실행&quot;&gt;실행&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;터미널을 열고 아래 명령어를 입력하여 프로그램을 실행합니다.&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ node index.js
Server listen on port &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;또는 npm으로 실행할 수도 있습니다. (package.json파일 안에 script를 추가)&lt;/li&gt;
&lt;/ul&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;{
    ...,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;
    },
    ...
}&lt;/code&gt;&lt;/pre&gt;



&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;$ npm start
Server listen on port &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&quot;결과-확인&quot;&gt;결과 확인&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;브라우저를 열고 &lt;code&gt;127.0.0.1:3000/&lt;/code&gt;으로 접속&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:250px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992D8B3359E217AF1A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-14 오후 10.54.44.png&quot; height=&quot;78&quot; width=&quot;250&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1:3000/start&lt;/code&gt;으로 접속&lt;/li&gt;
&lt;/ul&gt;
&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:250px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9981133359E2179907&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-14 오후 10.55.24.png&quot; height=&quot;66&quot; width=&quot;250&quot;/&gt;&lt;/span&gt;
&lt;br /&gt;&lt;br /&gt;
자 이제 Node.js 초기설정 및 간단한 프로그램 작성 및 실행을 해보았습니다. &lt;br /&gt;
지금까지의 내용을 바탕으로 앞으로 즐거운 프로그래밍 되시길 바라겠습니다 :)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Node.js</category>
<category>express</category>
<category>node.js</category>
<category>nodejs</category>
<category>npm</category>
<category>노드</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/29</guid>
<comments>https://simsi6.tistory.com/29#entry29comment</comments>
<pubDate>Sat, 14 Oct 2017 19:38:30 +0900</pubDate>
</item>
<item>
<title>Node.js 프로젝트 시작하기 (1/2) - npm과 package.json</title>
<link>https://simsi6.tistory.com/28</link>
<description>&lt;p&gt;Node.js 프로젝트를 할 때 가장 많이 사용하는 것은 &lt;strong&gt;npm&lt;/strong&gt;과 &lt;strong&gt;package.json파일&lt;/strong&gt;입니다. &lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;npm(node pacakage manager)&lt;/strong&gt;은 &lt;br /&gt;
node 모듈 다운로드 및 관리를 하기 위한 프로그램이며 package.json파일을 읽어 node.js로 작성 된 프로그램을 실행시킵니다. &lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;package.json&lt;/strong&gt;에는  &lt;br /&gt;
프로젝트에 사용되는 모든 모듈명과 버전을 기록하고, 라이센스, 작성자 정보, 스크립트 등을 기록합니다. &lt;br /&gt;
node.js 프로젝트 설정파일인 셈입니다. &lt;br /&gt;
&lt;br /&gt;
※ node.js프로젝트의 루트에보면 package.json이라는 파일을 하나씩 가지고 있을겁니다.&lt;/p&gt;

&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:170px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DD2F3359E1EA3320&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2017-10-14 오후 6.09.49.png&quot; height=&quot;213&quot; width=&quot;170&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;프로젝트 초기화&lt;/strong&gt; &lt;br /&gt;
node.js 프로젝트 폴더로 진입해서 &lt;code&gt;npm init&lt;/code&gt; 을 입력한다.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;seojaeryong:getting-started seo$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.
See `npm &lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt; json` &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; definitive documentation on these fields
and exactly what they do.
Use `npm install &amp;lt;pkg&amp;gt; --save` afterwards to install a package and
save it as a dependency &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the package.json file.
Press ^C at any time to quit.
name: (getting-started) 
version: (&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) 
description: study project
entry point: (index.js) 
test command: 
git repository: 
keywords: 
author: simsi6
license: (ISC) 
About to write to /Users/seo/Workspaces/Nodejs/getting-started/package.json:
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;getting-started&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;study project&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;simsi6&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;
}
Is this ok? (yes) yes
seojaeryong:getting-started seo$ &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
각 설정 항목들이 물음 형식으로 한 단계씩 진행되는데 아무것도 입력없이 엔터만 치면 괄호() 안의 기본값들이 셋팅된다. 최종적으로 모든 설정이 끝나면 생성 될 package.json파일의 경로와 내용이 출력되고 yes를 입력하면 저장과 함께 종료된다. &lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;필요한 Module 설치&lt;/strong&gt; &lt;br /&gt;
개발에 필요한 모듈이 있으면 &lt;code&gt;npm install [모듈명] --save&lt;/code&gt; 명령어 입력으로 모듈 다운로드 및 설치를 합니다. &lt;code&gt;--save&lt;/code&gt; 옵션을 붙이면 package.json파일 안에 모듈 정보를 자동으로 업데이트 해줍니다.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;seojaeryong:getting-started seo$ npm install express --save
getting-started@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; /Users/seo/Workspaces/Nodejs/getting-started
└─┬ express@&lt;span class=&quot;hljs-number&quot;&gt;4.16&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├─┬ accepts@&lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; 
  │ ├─┬ mime-types@&lt;span class=&quot;hljs-number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt; 
  │ │ └── mime-db@&lt;span class=&quot;hljs-number&quot;&gt;1.30&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  │ └── negotiator@&lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── array-flatten@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├─┬ body-parser@&lt;span class=&quot;hljs-number&quot;&gt;1.18&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  │ ├── bytes@&lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  │ ├─┬ http-errors@&lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  │ │ ├── inherits@&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; 
  │ │ └── setprototypeof@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; 
  │ ├── iconv-lite@&lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; 
  │ └── raw-body@&lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├── content-disposition@&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├── content-type@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; 
  ├── cookie@&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── cookie-signature@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; 
  ├─┬ debug@&lt;span class=&quot;hljs-number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; 
  │ └── ms@&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  ├── depd@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── encodeurl@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── escape-html@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; 
  ├── etag@&lt;span class=&quot;hljs-number&quot;&gt;1.8&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├─┬ finalhandler@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  │ └── unpipe@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  ├── fresh@&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├── merge-descriptors@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── methods@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├─┬ on-finished@&lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  │ └── ee-first@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── parseurl@&lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├── path-to-regexp@&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; 
  ├─┬ proxy-addr@&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  │ ├── forwarded@&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  │ └── ipaddr.js@&lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
  ├── qs@&lt;span class=&quot;hljs-number&quot;&gt;6.5&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── range-parser@&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  ├── safe-buffer@&lt;span class=&quot;hljs-number&quot;&gt;5.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├─┬ send@&lt;span class=&quot;hljs-number&quot;&gt;0.16&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  │ ├── destroy@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; 
  │ └── mime@&lt;span class=&quot;hljs-number&quot;&gt;1.4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── serve-static@&lt;span class=&quot;hljs-number&quot;&gt;1.13&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├── setprototypeof@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  ├── statuses@&lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  ├─┬ &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;-is@&lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; 
  │ └── media-typer@&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
  ├── utils-merge@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; 
  └── vary@&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; 
npm WARN getting-started@&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; No repository field.
seojaeryong:getting-started seo$ cat package.json 
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;getting-started&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;study project&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;simsi6&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;^4.16.2&quot;&lt;/span&gt;
  }
}
seojaeryong:getting-started seo$ &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;package.json파일 안에 금방 설치한 express 모듈의 정보가 추가 된 것을 볼 수 있습니다. &lt;br /&gt;
&lt;br /&gt;
설치된 모듈은 &lt;code&gt;node-modules&lt;/code&gt;디렉터리 아래에 저장됩니다.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-bash hljs &quot;&gt;seojaeryong:getting-started seo$ ls -al
total &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;
drwxr-xr-x   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; seo  staff   &lt;span class=&quot;hljs-number&quot;&gt;136&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; .
drwxr-xr-x   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; seo  staff   &lt;span class=&quot;hljs-number&quot;&gt;170&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; ..
drwxr-xr-x  &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; seo  staff  &lt;span class=&quot;hljs-number&quot;&gt;1700&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; node_modules
-rw-r--r--   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; seo  staff   &lt;span class=&quot;hljs-number&quot;&gt;280&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; package.json
seojaeryong:getting-started seo$ &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
이렇게 프로젝트의 초기설정은 모두 끝이났습니다. &lt;br /&gt;
&lt;a href=&quot;http://simsi6.tistory.com/entry/Nodejs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1-%EB%B0%8F-%EC%8B%A4%ED%96%89&quot;&gt;다음글&lt;/a&gt;에서 간단한 프로그램을 작성하고 실행하는 과정을 알아보겠습니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block; text-align:center;&quot;
     data-ad-layout=&quot;in-article&quot;
     data-ad-format=&quot;fluid&quot;
     data-ad-client=&quot;ca-pub-5144235011968801&quot;
     data-ad-slot=&quot;9621642608&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Node.js</category>
<category>javascript</category>
<category>nodejs</category>
<category>npm</category>
<category>package.json</category>
<category>노드</category>
<author>서재룡</author>
<guid>https://simsi6.tistory.com/28</guid>
<comments>https://simsi6.tistory.com/28#entry28comment</comments>
<pubDate>Sat, 14 Oct 2017 18:32:06 +0900</pubDate>
</item>
</channel>
</rss>