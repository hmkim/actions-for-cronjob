<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Hansol Kim on Medium]]></title>
        <description><![CDATA[Stories by Hansol Kim on Medium]]></description>
        <link>https://medium.com/@zvuc?source=rss-ef15d48bdfc4------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*ei9xtLpq36_4M5I6416RNw.jpeg</url>
            <title>Stories by Hansol Kim on Medium</title>
            <link>https://medium.com/@zvuc?source=rss-ef15d48bdfc4------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 12:03:08 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@zvuc" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[StoriesAds.com을 디자인하다]]></title>
            <link>https://making.shakr.com/storiesads-com%EC%9D%84-%EB%94%94%EC%9E%90%EC%9D%B8%ED%95%98%EB%8B%A4-29ddb960f6e7?source=rss-ef15d48bdfc4------2</link>
            <guid isPermaLink="false">https://medium.com/p/29ddb960f6e7</guid>
            <category><![CDATA[개발]]></category>
            <category><![CDATA[디자인]]></category>
            <category><![CDATA[ux]]></category>
            <category><![CDATA[korean]]></category>
            <category><![CDATA[ui]]></category>
            <dc:creator><![CDATA[Hansol Kim]]></dc:creator>
            <pubDate>Wed, 03 May 2017 16:23:57 GMT</pubDate>
            <atom:updated>2017-05-03T16:27:44.659Z</atom:updated>
            <content:encoded><![CDATA[<h4>맨 바닥에서부터 웹사이트를 디자인하기까지의 생각과 과정</h4><p><em>이 글은 먼저 게재된 원문 “</em><a href="https://making.shakr.com/designing-storiesads-com-5c0df723d4e8"><em>Designing StoriesAds.com</em></a><em>”을 번역한 것입니다.</em></p><p>회사에서 일하다 보면, 항상 원하는 대로만 일이 진행되지는 않는다. 항상 예상치 않던 (또는 원하지 않던) 순간에 변화가 찾아오고, 많은 경우에 그 변화는 꽤 과격한 변화를 요구한다. 기존에 세워두었던 스케줄과 계획은 더 이상 유효하지 않게 되고, 더 중요한 것을 위해 이미 작업하고 있던 것을 중단해야만 할 때도 있다. 스타트업의 개발팀에서 일한다면 어쩌면 꽤 흔히 접하는 일인지 모르겠다만, 몇 차례의 경험을 통해 어느 정도로는 이미 이런 것이 익숙해져서, 최대한 능숙하게 급격한 스케줄의 변화와 상황에 대응할 수 있는 능력이 단련되어졌다. 대부분의 경우 이렇게 갑작스럽게 닥쳐온 프로젝트들은 그 때의 상황에 따라 “지금 당장” 하지 않으면 그 가치를 잃는, 시간에 매우 민감한 것들이 많았다.</p><p>이번에도 비슷한 상황이었다. 새롭게 작업해야하는 프로젝트가 주어졌고, 데드라인은 처음에는 이게 가능할까 싶을 정도로 매우 타이트했다. 하지만 만약 해낼 수 있다면, Shakr의 인지도와 우리가 전달하는 가치에 큰 추진력을 더할 수 있는 가능성이 있었다.</p><p>그래서 이번에도 도전했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*shHCTakXzwFWmRRiafonOg.png" /></figure><h4>그 도전, 받아들이도록 하지요.</h4><p>4월 중순에 우리는 “<a href="https://StoriesAds.com">StoriesAds.com</a>”의 작업에 착수했다. 간단히 설명하면 이건 우리가 Instagram Stories에 쓸 용도로 만든 최신 세로 비율의 비디오 디자인에 집중해 쇼케이스하는 마이크로사이트다. 그리고 이걸 만드는데 우리에게 주어진 시간은 고작 2주였다. 2주! 주말을 제외한 업무일로 따지자면 7일밖에 안 되었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9lTZeFfoairtYz642VK-tA.jpeg" /><figcaption>초기 회의에서 화이트보드에 적은 대략적인 스케줄 요약</figcaption></figure><p>프로젝트를 시작하기 전 스케줄과 상세 사항들을 논의하기 위해 회의를 했다. 이것저것 상의한 후, 최소 2일간의 런칭 전 테스팅을 빼면 5일만에 제대로 작동하는 웹사이트를 바닥부터 만들어야한다는 결론이 났다. 중간 과정에서 여러 사람들로부터 도움을 받았지만, 핵심적으로 이 프로젝트에 투입된 멤버는 4명이었다: 디자인 1명 (바로 접니다), 프론트엔드 개발 2명, 백엔드와 옵스 1명. 버릴 시간이 정말 1분도 모자랐기 때문에 각자 서로에게 최대한 의존성이 생기지 않고 모두가 동시에 무언가를 작업할 수 있는 타이트한 스케줄을 짰다.</p><p>결과를 미리 누설하자면, 이 엄청난 스케줄을 뚫고 결국 해냈다. 팀으로서 달성한 또 하나의 대단한 업적이며 새로운 마일스톤으로 본다. 팀원 모두가 각자 자신과 서로의 능력과 역량을 정확히 이해하고 있었고, 수 개월, 수 년간 함께 일하며 다져진 협업 스킬 덕분에 가능했던 프로젝트라고 생각한다. 나는 언제나 우리 회사와 팀에 대해 자랑스러운 마음을 가지고 있었지만 이번 프로젝트를 끝낸 후 더욱 자랑스러워졌다. (다른 사람들도 그렇게 생각하리라 생각한다) 이 때문에 더욱이나 이 프로젝트를 진행하며 겪은 과정을 글로 정리해 보존하는 것이 좋겠다는 생각이 들었다.</p><p>안타깝기도 내가 이 프로젝트에서 맡은 부분은 디자인과 프론트엔드 코딩뿐이였으므로, 다른 팀멤버가 많은 노력을 부은 부분에 대해서는 소개할 수 없다. 따라서 여기에서는 내가 맡았던 디자인 과정과, 결정하는 과정에서 겪은 어려움들, 그리고 왜 어떠한 결정을 내리게 되었는지에 대해 설명해 보고자 한다.</p><h3>브랜드 아이덴티티</h3><p>‘브랜드 아이덴티티’와 ‘디자인 언어’는 절대 가볍게 생각되어져서는 안 될 것이다. 정체성 그 자체가 되는 일관성 있는 디자인을 위해 모든 것의 뼈대가 될 것이므로 항상 충분한 시간을 들여 세심하게 고안해야 될 것이다. 그러나… 이번에는 시간상 정말로 딱 하루밖에 디자인에 쓸 시간이 없었기 때문에, 이 안에 웹사이트와 브랜드의 디자인을 생각하고 결정해야만 했다.</p><p>이 프로젝트의 목적과 성격을 생각할 때, 웹사이트의 전체적인 외관은 일단 방문자의 눈을 사로잡는 강한 인상을 주는 느낌일 것이 적합해 보였다. 무언가 대담하고 강한 색상이 연상되었다. 사실 이 때문에 이 프로젝트를 위해 새로운 디자인 스타일을 만들기로 한 것이기도 하다. 기존에 Shakr에서 정립한 디자인 언어는 다소 얌전한 느낌이기 때문이다.</p><p>자, 그러면 이제 ‘대담하고 강한&#39; 룩을 만들기 위한 요소들을 골라볼 차례다.</p><h4>폰트 고르기</h4><p>먼저 프로젝트에 사용할 폰트 패밀리를 찾는데부터 시작했다. 우리는 사내에서 Adobe의 Creative Cloud 구독을 이용하므로 그 안에 <a href="https://typekit.com/">TypeKit</a>이 포함되어있다. 다양한 상용 폰트가 제공되므로 새 디자인에 쓸 폰트를 찾는다면 시작하기 좋은 곳이다.</p><p>머리속에 떠올렸던 폰트의 이미지는 볼드하고 도형적인 인상이었기에, 적합한 옵션으로 폰트를 걸러내기 시작했다. 폰트 패밀리가 엑스트라-헤비 두께의 뚱뚱한 폰트 베리에이션을 가지고 있다면 반드시 레귤러 두께의 폰트도 포함할 테지만 거꾸로도 항상 그렇지는 않으므로, 두꺼운 폰트를 기준으로 선택한 후 찾아보기 시작했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cbbL8TZcvoFsU7K2e6MUuA.png" /></figure><p>그래서 위의 6개까지 선택 폭을 줄였다. Futura의 1층짜리 ‘a’ 글자 모양은 마음에 들었지만, Futura는 워낙 유명한 폰트라 좀 흔하다는 생각이 들었다. (헬베티카가 내가 가장 좋아하는 폰트중 하나지만 막상 실제 프로덕션 디자인에서는 잘 안 쓰는 이유와 비슷하기도 하다.) Proxima Nova도 상당히 좋은 폰트지만 이 또한 최근 웹에서는 꽤 자주 보이는 폰트라서 걸러냈다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*m1qDyxea5E4qh5I06v_N8Q.png" /></figure><p>몇 가지 시험해본 후에, 최종적으로 Filson을 쓰기로 했다. Futura와 Proxima Nova의 중간정도라는 느낌으로 적절히 모던해보였고, R의 말려올라간 다리처럼 나름의 개성도 가지고 있었기 때문에 마음에 들었다.</p><p>특히나 볼드체와 이탤릭체가 마음에 들었는데, 헤더 텍스트용으로 딱 좋을 것 같아 보였다.</p><h4>색상 고르기</h4><p>사실 나는 개인적으로 트렌드에 있어서는 약간 보수적인 쪽이라고도 할 수 있겠다. 최근의 유행(?)으로 밝고 채도가 강한 색상들이 점점 세력을 넓혀가는 것이 그리 마음에 들지는 않았다. 그러나 트렌드나 개인적 취향의 문제를 떠나서, 이번 프로젝트에서 목표로 하던 ‘대담하고 강한&#39; 이미지를 위해서는 튀어보이는 색상이 적합하다고 생각했다. 그래서 조금 도전적으로 평소 작업할 때보다 더 화사한 컬러 스킴을 시도해보았다. 몇 가지 색상을 조합해 배치해보다가, 밝은 마젠타와 보라색을 색상 팔레트의 주요 색상으로 삼았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/650/1*J2Cjj3sLPcx0_g-tZqSo5Q.png" /></figure><p>아주 우연하게도… (웃음) 인스타그램도 2016년의 리디자인부터 비슷한 톤의 색상을 사용하고 있었던 관계로, 우리가 만들 StoriesAds.com의 주요 타겟을 고려하면 결론적으로 꽤 괜찮은 선택인것 같았다.</p><h3>디자인과 레이아웃</h3><p>초기 회의에서 결정된 바로, 웹사이트는 사실상 페이지 하나짜리로 구성되기로 되었다. 기능상으로도 개발 시간상으로도 최대한 간단한 플로우가 되어야만 했으므로, 유저 방문 후의 흐름은 아래와 같았다:</p><ul><li>유저가 사이트를 방문, 미리보기 비디오를 시청하고, 디자인을 고른다.</li><li>유저가 콜투액션(call-to-action) 버튼을 눌러 Shakr 비디오 에디터를 연다.</li><li>유저가 비디오 제작을 마치면, 이메일을 통해 완성된 비디오를 보내준다.</li></ul><p>위의 단계를 고려해 필요한 요소들을 넣은 페이지 레이아웃을 구상했다. 필수로 들어가야하는 것은 비디오 미리보기, CTA버튼, 그리고 웹사이트를 한 눈에 소개할 수 있는 헤더 텍스트와 서브텍스트. 위에서도 언급했듯이 한 페이지짜리 간단한 웹사이트였고 복잡한 UI컴포넌트와 깊은 단계의 내비게이션이 요구되지 않았기 때문에, 와이어프레임(wireframing) 단계를 건너뛰고 곧바로 레이아웃 배치와 비주얼 디자인의 작업을 동시에 진행했다. 요즘은 UI프로토타이핑 과정에 쓰기에 더 적합한 도구들이 많지만, 이번에는 가장 빠른 결과물을 위해 내가 작업하는데 익숙한 오랜 친구 Illustrator을 잡았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*t5BLyAVZ3kbQD2WywtMClw.jpeg" /><figcaption>첫 목업 이미지</figcaption></figure><p>시작한지 몇 시간 후에, 만족스러운 정도의 이미지를 내놓을 수 있었다. 주 색상을 이용해 배경에 그라디언트를 깔고, 그 위에 단색 직사각형들을 올려 뜬 느낌을 주었다. 컨텐츠가 전체적으로는 스크린의 중심에 정렬되어 있지만, 텍스트 상자에는 일부러 살짝 오프셋을 주어 너무 페이지가 단조로워보이지 않도록 했다.</p><p>이 시점에서 프론트엔드 개발을 맡은 다른 팀원들이 새 프로젝트를 위한 git 저장소와 개발 환경의 셋업을 끝냈으므로, 곧바로 내가 만든 목업 이미지를 기반으로 HTML/CSS 코딩에 뛰어들수 있었다.</p><h3>UX 결정들</h3><p>전체 과정 중 목업 디자인을 실제 코드로 바꾸는 작업은 아마 제일 쉬운 부분이 아니었나 싶다. 1–2시간정도에 완성할 수 있었고, 모바일 디스플레이를 위해 반응형 CSS 코드를 추가하는 것도 페이지가 워낙 간단했기 때문에 그리 어렵지 않았다. 사실 가장 어려웠던 부분은 UX(유저 경험)을 위해 내려야만 했던 결정들이다. 처음에 구상했던것에 비해 때로는 시간의 제한때문에 포기해야만 했던것들도 있고, 기술적인 문제때문에 바꿔야했던 것들도 있다.</p><h4>캐러셀(Carousel)</h4><p>우선 웹사이트에 들어오자 마자 헤더 텍스트 외에 눈에 띄어야 할 것은 세로 비디오의 미리보기를 보여주는 부분이었다. 우리가 쇼케이스할 비디오는 손으로 셀 수 있을 정도로 그리 많은 개수가 아니었기 때문에, 간단한 캐러셀(carousel)같은 인터페이스가 적합하리라 생각했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sPfrALvpO1dR6bbxsv3rwQ.jpeg" /><figcaption>캐러셀 초안 (좌), 최종 (우)</figcaption></figure><p>처음에는 비디오를 담는 스마트폰 기기의 프레임 양쪽에 화살표 버튼을 띄우는 쪽으로 생각을 했었다. 좌우 버튼을 주어 뒤로나 앞으로나 전환할 수 있게 하는 것이 가장 흔한 캐러셀 UI겠지만, 쉬울것 같아보여도 앞뒤로 넘겨지고 모든 UX를 완벽하게 다루는 것은 매우 어렵다는 것을 우리는 알고 있었다. <a href="https://www.shakr.com/market">Shakr.com의 마켓 메인 페이지</a> 상단에 떠있는 배너 캐러셀을 개발하면서 배운 사실이다. 제대로 무한 루프되게 하기(맨 마지막 항목 다음에는 다시 1번으로 돌아가야하므로), 자연스러운 터치 스와이프 반응, 애니메이션, 화살표 버튼 위치와 크기… 우리에겐 시간이 별로 없었으므로 제대로 된 캐러셀을 만드는데 시간을 너무 할애할 수 없었다.</p><p>그래서 최종 결과물로는, 시간을 많이 잡아먹을 것은 전부 배제하고 가장 핵심적인 기능만 남기기로 했다. 화살표 대신에 보다 간단하게 스크린을 눌러 다음 비디오로 넘기는 방식을 쓰기로 했다. 실제 Instagram Stories도 스크린을 한 번 터치하는 것이 다음으로 스킵하는 동작이기 때문에, 그런 면에서도 의미가 맞는것 같았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/360/1*KDbWk6RAgHY4iVSA8luZdg.gif" /><figcaption>Imitating Instagram’s ‘3D box-roll’ animation with CSS</figcaption></figure><p>하지만 물론 이렇게 함으로 유저가 비디오를 ‘뒤로’ 돌릴 수 없게 된다는 말이었다. (리스트는 계속 루프되므로 계속 누르다보면 결국 첫 번째 아이템으로 돌아오긴 한다) 하지만 간단한 인터페이스와 개발 시간 절약을 위해 합리적인 희생이라 생각했다. 만약 우리가 보여주려고 했던 비디오의 개수가 더 많았더라면 이 방법을 택하기 어려웠겠지만 다행히도 10개 이하였기 때문에 괜찮았다.</p><p>많은 캐러셀에 있듯이 실제 리스트의 항목을 목차 식으로 나열해 보여주는 것도 구현하지 않았는데, 이것도 결과적으로는 나름 도움이 된 것이, 실제 리스트를 보여주지 않기 때문에 매 번 사이트가 로드될 때마다 비디오 목록의 순서를 무작위로 섞을 수 있었다. 방문자들이 들어올 때마다 매 번 다른 디자인을 표시해 공평한 노출 기회를 주기 위함이었다.</p><h4>모달을 쓸까? 말까?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*NQXW1KZyBV3thggnzXH9WQ.jpeg" /><figcaption>초기 확인 모달 목업</figcaption></figure><p>최종 결과물에 들어가지 않은 또 다른 부분은 바로 ‘확인 모달’ 이었다. 유저가 완성한 비디오를 보내주기 위해, 이메일 주소를 먼저 받을 필요가 있었다. 처음에는 위의 이미지처럼 화면을 가리는 오버레이 형식으로 모달을 띄워 그 안에 이메일 칸을 넣을까 생각했었다. 메인 페이지에 바로 이메일 입력 칸을 넣지 않은 이유는, 안 그래도 한 눈에 모든 내용이 들어오는 단일 페이지 웹사이트에서 이메일 입력 칸이 딱 바로 보이면 너무 눈치보이지 않을까 싶어서이다. 무언가 한 단계 숨겨진 레벨의 뷰 안에 넣은 후 유저가 한 번 클릭하면 나타나도록 하는 것이 좋을 것 같았다.</p><p>하지만 개발을 진행하다 보니, 위의 방법은 UX적으로 몇가지 난감한 부분이 있었다. 한 번 ‘비디오 제작’ 버튼을 눌러서 모달을 띄우면 기존의 화면을 가리니 이 상태에서는 더 이상 비디오를 미리보기할 수 없게 된다는 점과, (SDK 에디터의 작동 방식에 의해) 에디터를 열면 모달이 열린 상태에서 또 위에 모달이 열리는 것이 되었기 때문이다.</p><p>몇 가지 대안을 논의한 후, 확인 단계와 이메일 입력 칸을 표시할 다른 방법을 생각해냈다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/518/1*Ef_qAq4rRJ8D8ZbZcMZ4Kg.gif" /></figure><p>위의 방법이 마음에 들었던 것은, 모달처럼 기존의 뷰를 가리지 않는다는 점이었다. 두 맥락 간의 전환이 애니메이션 덕분에 더욱 자연스러워졌다는 느낌이 들었고, 확인 단계와 초기 단계 간 이동하는 것도 커서가 더 적은 거리를 이동해야했기 때문에 쉬워졌다.</p><p>자연스럽게 비디오 미리보기의 문제도 해결이 되었는데, 더 이상 화면을 가리는 것이 없으므로 비디오를 계속해 재생해도 되었기 때문이다. 초기 상태에서는 비디오가 자동으로 재생하고 끝나면 다음 비디오로 넘어가게 되어있지만, 유저가 확인 단계로 넘어가 비디오를 ‘선택한’ 상태라면, 현재 선택된 비디오 하나를 루프하는 식으로 보여준다.</p><h3>테스팅, 그리고 고치기</h3><p>이 쯤 하여, 기능상으로는 웹사이트가 완성이 됐다. 비디오 에디터를 연결하는 작업도 완료되어, 웹사이트에서 성공적으로 에디터를 열 수 있었고, 비디오 제작을 한 후 뜰 완료 페이지도 만들었다. 다운로드 링크를 포함한 이메일도 제대로 보내지는 것을 확인했다.</p><p>웹사이트가 여러 다른 브라우저에서 제대로 보이고 작동하는지 확인하기 위해 테스트를 해보았다. Chrome, Firefox와 Safari는 문제 없이 괜찮았지만 Edge (사실 약간 걱정하긴 했다만)는 비디오 재생과 관련해 문제가 있어서 약간의 수정이 필요했다.</p><p>데스크탑 브라우저에서는 대체로 괜찮았지만 모바일 브라우저는 좀 관심을 요구했다. 사실 iOS에 있어서는 HTML5 비디오의 인라인 재생이 지원되기 시작한 것이 그리 오래되지 않았다. 아직 1년도 채 지나지 않았는데, iOS 10이 출시되면서 함께 딸려온 모바일 Safari 새 버전의 WebKit엔진과 함께 도입되었다. 자동재생과 인라인 재생에 대한 <a href="https://webkit.org/blog/6784/new-video-policies-for-ios/">정책을 바꾼</a> 후 겨우 지원되기 시작된 것이다.</p><p>모든 개발팀 멤버가 이미 iOS의 최신 버전인 10을 쓰고 있었기 때문에 (보통 새 소프트웨어 업데이트가 뜨면 한주 이내로 올리곤 한다) 모바일에서 테스트를 해봤음에도 불구하고, 구 버전의 iOS와 사파리에선 자동재생 기능의 미지원 때문에 사이트가 깨질 수 있다는 사실을 미처 인지하지 못했었다.</p><p>비디오를 자동 재생하지 못한다는 것은 즉, 숨겼던 수동 비디오 플레이어 컨트롤을 되살려야한다는 말이였다. 재생 버튼을 놓을만한 가장 적합한 위치는 역시 비디오의 위였기 때문에, 이 부분의 클릭을 재생 액션을 위해 쓰게 되면 더 이상 기존의 방식대로 ‘스크린을 클릭해 다음 비디오로 넘기기’를 쓰지 못하게 되었다. 열심히 머리를 굴려 수동 컨트롤을 요구하는 레거시 브라우저들을 위한 대안의 UI를 생각해냈는데, 비디오 위에 재생 버튼을 띄우고, 그 옆에 항상 떠있는 ‘다음&#39; 버튼을 표시하기로 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*G5qV7yJvJmMUkZUOf-OUyA.jpeg" /><figcaption>Facebook in-app browser (left), Twitter in-app browser (right)</figcaption></figure><p>또 하나 발견한 것은 OS버전과 상관 없이, 앱 안에 들어간 인앱 브라우저들은 비디오 자동재생과 인라인 재생에 대해 각자 또 다른 정책을 갖고 있다는 사실이었다. 가령 Facebook 앱은 인라인 재생은 지원했지만 자동재생은 지원하지 않았다. Twitter (공식) 앱은 인라인 재생도 자동재생도 지원하지 않았다. 앱을 만들때 넣은 웹뷰에 선언되는 정책인지라 웹사이트 단에서 어떻게 할 수 있는 방법이 없어서, 결국 위에서 만든 ‘레거시’ UI를 인앱 브라우저들에도 적용할 수밖에 없었다.</p><p>유저 에이전트를 찾아서 예외 처리를 한 후 테스팅하는것도 고역이였는데, 이 브라우저들에는 URL을 직접 칠 수 있는 주소창이 없으므로, 각 서비스에 비공개 포스트로 개발 서버를 돌리는 머신의 로컬 IP주소를 적어 올린 뒤 모바일 앱에서 링크를 눌러 사이트를 띄우는 꼼수를 썼다.</p><h3>출시</h3><p>그래서 그렇게, 수 일간 열심히 일해서 데드라인을 맞이했다. 최종적으로 최신 코드를 테스트 환경에 배포한 뒤에, 링크를 사무실에 있는 모두에게 전달해 각자의 기기에서 테스팅하도록 부탁하고 발생하는 문제점이 있나 모니터링했다.</p><p>그런 다음에, 드디어 스위치를 당겼다. StoriesAds.com이 세상에 공개되었다!</p><p>여기까지가 그동안 작업하면서 겪었던 어려움들, 그리고 내렸던 결정들의 뒤에 지나쳐온 생각의 과정들이다. 혹여나 글을 읽고 계신 여러분의 프로젝트에도 도움이 될만한 내용들이 있을까 싶지만, 우리가 진행해온 방식이 반드시 모든 경우에 적용되리라고 생각하지는 않는다. 이번 프로젝트는 아무래도 너무 시간이 촉박해서 생략한 것들이 많았기 때문에. 시간에 쫓기는 (또는 하드한 데드라인에 의해 추진력을 얻는) 개발은 가끔은 있을수 있더라도, 자주 맞닥뜨리게 되어선 안 되는 것이라고 생각한다. 프로젝트의 퀄리티를 유지하기가 굉장히 힘들뿐만 아니라 작업하는 구성원들의 정신건강에도 별로 좋지 않기 때문이다.</p><p>하지만 분명 큰 노력 끝에는 큰 보상이 있다. 만약 해낼 수 있다면, 팀으로서 한 단계 레벨 업 할 수 있는 귀중한 경험을 얻을 수 있다. 이번에 우리가 바로 그런 경우였다고 생각하며, 이런 좋은 팀의 일원으로 함께 일할 수 있는 것이 얼마나 감사하고 자랑스러운지 다시한번 강조하며 글을 마친다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=29ddb960f6e7" width="1" height="1"><hr><p><a href="https://making.shakr.com/storiesads-com%EC%9D%84-%EB%94%94%EC%9E%90%EC%9D%B8%ED%95%98%EB%8B%A4-29ddb960f6e7">StoriesAds.com을 디자인하다</a> was originally published in <a href="https://making.shakr.com">Making Shakr</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Designing StoriesAds.com]]></title>
            <link>https://making.shakr.com/designing-storiesads-com-5c0df723d4e8?source=rss-ef15d48bdfc4------2</link>
            <guid isPermaLink="false">https://medium.com/p/5c0df723d4e8</guid>
            <category><![CDATA[ux]]></category>
            <category><![CDATA[development]]></category>
            <category><![CDATA[design]]></category>
            <category><![CDATA[ui]]></category>
            <category><![CDATA[english]]></category>
            <dc:creator><![CDATA[Hansol Kim]]></dc:creator>
            <pubDate>Wed, 03 May 2017 13:52:48 GMT</pubDate>
            <atom:updated>2017-05-03T16:28:10.128Z</atom:updated>
            <content:encoded><![CDATA[<h4>Thoughts and process behind designing a website from scratch</h4><p>When you work in a company, things don’t always go as you want them to. Changes tend to come at times we don’t expect (or want) them to come — many times those changes being pretty radical too. Often when those changes strike, your existing schedules and plans are rendered irrelevant, sometimes even forcing you to halt on what you were working on so far. Working as part of the dev team in a startup, we’ve sort of gotten used to such changes, and we’ve grown our skills on how to deal with abrupt changes in schedules as fluently possible. Many times did we have ambitious projects that were ‘now-or-never,’ meaning that if we couldn’t make it by the deadline the project would lose its effect significantly.</p><p>This time it was a similar situation: a very harsh deadline, as usual. But if we could pull through, the project had the potential of giving us a significant boost in Shakr’s reach and the value we deliver.</p><p>So we took on this new challenge.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*shHCTakXzwFWmRRiafonOg.png" /></figure><h4>Challenge Accepted!</h4><p>Mid-April, we started working on “<a href="https://StoriesAds.com">StoriesAds.com</a>”. It’s a microsite that focuses on showcasing our latest new vertical video designs made to be used on Instagram Stories. And the time we had for this was 2 weeks. Yes, you heard <em>2 weeks</em> right! To be accurate, it was only 7 working days until the deadline that was given to us to make this project happen.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9lTZeFfoairtYz642VK-tA.jpeg" /><figcaption>Rough summary of the schedule written out on a whiteboard during the initial meeting.</figcaption></figure><p>After the initial meeting where we discussed the details and schedule, we concluded that, after allocating at least 2 days for pre-launch testing, we really had just 5 days to get a website up and running from scratch. Although we did get help from various people in the team along the way, essentially only 4 people were actively involved in this project: 1 for design (that’s me!), 2 for frontend and 1 for backend and ops. Since we had no time to waste, we came up with a tight schedule with minimal dependencies, so that every person had something to work on simultaneously.</p><p>To spoil the fun: we actually did make through the insane schedule! It was a truly remarkable achievement as a team. I believe it was only possible because everyone in the team had an accurate understanding of his own and the teammates’ capabilities and limits, and thanks to the seamless collaboration skills honed by the months and years of working with each other. Personally I felt very proud for our team and accomplishment (I’m pretty sure that other teammates will agree too!) which is why I decided it would be nice to leave a written record of this milestone and the process we’ve gone through to make history happen. Unfortunately, my part in this project was just design and frontend coding so I can’t really explain about the other parts that are out of my expertise. Hopefully that will be covered in another post written by the appropriate people — but here, I want to focus primarily on the design process, the challenges we had to go through, sharing some thoughts about why we made certain decisions.</p><h3>Brand Identity</h3><p>Yes I know, ‘brand identity’ and ‘design language’ are not something that should be ever taken lightly. It’s what becomes the bone of all things to come, so it should be given a plenty amount of time to think through. But in this case, because we had no time to spare, I only had a single day to come up with a design we’d be using for the website and the brand.</p><p>Given the purpose and character of this project, the website would have to be a rather impactful presentation, grabbing visitors’ attention. Naturally the image that came to my mind was something bold and flashy. The reason I decided this project would have its own new design style was because the existing design language for Shakr is rather subtle.</p><p>Now then, it’s time to pick the assets that would give this ‘bold and flashy’ look.</p><h4>Choosing a font</h4><p>I started off right away by looking for a font family to use in this project. We use <a href="https://typekit.com/">TypeKit</a> as part of our company-wide Adobe CC subscription, so it’s a good place to head to when looking for fonts to use in a design.</p><p>The fonts I had in mind were bold and geometric, so I filtered fonts with relevant options. Font families that do have an extra-heavy weight variant almost always have a regular font weight too, but the other way around — not all fonts have a heavy weight variant. So I narrowed my way down by choosing the ones that do have a heavy weight.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cbbL8TZcvoFsU7K2e6MUuA.png" /></figure><p>Brings me down to these. I liked the single-story letter ‘a’ shape of Futura, but I thought Futura was rather too common since it’s such a famous font. (Similar to the reason why I rarely use Helvetica in production design although it’s still one of my favorite fonts.) Proxima Nova is also a great font, but I took it out of consideration because it’s also pretty commonly seen everywhere these days, especially on the web.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*m1qDyxea5E4qh5I06v_N8Q.png" /></figure><p>After testing out some candidates, I decided to go with Filson, which I felt it had a look somewhat in between the lines of Futura and Proxima Nova, with a slight touch of individuality (like the curved legs of the letter R).</p><p>I especially liked the bold and italic variants of Filson — I imagined they would be great for headers.</p><h4>Choosing colors</h4><p>Personally, I’m on the rather conservative side of design when it comes to trends. I wasn’t a huge fan of the recent wave where brighter and saturated colors started to take over. Trends aside though, the image we were aiming for in this project was ‘bold and flashy’ — where a color that stands out wouldn’t be too unreasonable. So I decided to challenge myself this time a bit to try out a more vibrant color scheme. After testing out a few colors, I chose a bright magenta and purple as the two main colors of my palette.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/650/1*J2Cjj3sLPcx0_g-tZqSo5Q.png" /></figure><p>Coincidentially, (I know right?) Instagram since their redesign in 2016 has been using similar colors too, so given our target audience for StoriesAds.com, it seemed like a pretty good choice.</p><h3>Design and Layout</h3><p>Following decisions from the initial meeting, the website was going to be essentially a one-pager. Our simple flow for the website would be:</p><ul><li>User visits site, watches preview video, chooses design.</li><li>User clicks on a call-to-action button that opens up the Shakr Video Editor.</li><li>User finishes making video, we send the user the finished video through email.</li></ul><p>I took these points to come up with a page layout that included the necessary elements: video preview, call-to-action button, and of course some header/subheader text that introduces the website in a glance. Because this wasn’t a full-sized project with multiple UI components and complex navigation, I thought I didn’t really need to plan out everything in detail. I skipped the wireframing step and started doing layout and visual design simultaneously. I used the good-old Illustrator that I’m comfortable working with to get the quickest results.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*t5BLyAVZ3kbQD2WywtMClw.jpeg" /><figcaption>First mockup image</figcaption></figure><p>After several hours, I could come up with a fairly satisfactory output detailed enough that I could work with. I used a lot of rectangular blocks under the text to give them a ‘floating’ feel on top of the gradient background. While the content would be generally centered on screen, I set slight offsets to textboxes so they would add to some asymmetry to make the page more interesting.</p><p>At this point the other frontend devs had already finished initializing the repository and set up the development environment, so I could jump in right away with actual HTML and CSS markup.</p><h3>UX decisions</h3><p>Now, converting the design to actual code was probably the easiest part of the whole process — it took just a few hours. Because the page was rather simple, I didn’t have much trouble adding CSS overrides for narrower viewports to make it responsive. The difficult part was making some UI decisions that made more sense in terms of UX. We had to change a few parts of the page as compared to the initial draft due to various reasons, sometimes because of time constraints and/or technical limitations.</p><h4>Carousel</h4><p>Most noticeably, this simple website’s primary feature was going to be the preview display for the vertical videos. Since we were going to showcase a few (but not too many), I thought a simple carousel-like interface for scrolling through the different videos would fit naturally.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sPfrALvpO1dR6bbxsv3rwQ.jpeg" /><figcaption>Early carousel draft (left), vs. final (right)</figcaption></figure><p>Initially, the interface had arrow buttons floating on either side of the phone screen frame. That would be your typical carousel UI, but we knew <em>perfecting</em> the UX of a carousel is very difficult and takes much effort. We learned this the hard way when we developed the banner carousel we have in <a href="https://www.shakr.com/market">Shakr.com Market main page</a>. There’s just so many things you have to take into account to do this right: proper infinite looping, natural touch swipe interactions, animations, button placements and sizing… We had limited time for this project so we made the call not to spend too much time on just carousels.</p><p>So for the final result, we left out everything that would take too much time to implement and kept only the most important parts. We decided to take a simpler approach of clicking the screen to skip to next video, instead of arrows. Actual Instagram Stories takes single taps on screen as a skip too, so it made sense along those lines too.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/360/1*KDbWk6RAgHY4iVSA8luZdg.gif" /><figcaption>Imitating Instagram’s ‘3D box-roll’ animation with CSS</figcaption></figure><p>However, this meant we’d be giving up the ability of directly going back to previous video, (the list is looped so you would eventually come back to the same item if you keep clicking) but I thought it was a reasonable sacrifice for the simplicity of the interface. It would have been difficult to take this approach had the number of videos we showcase been large; thankfully we had less than 10.</p><p>Not having a bullet-point list was actually beneficial in a way too because you didn’t have a set order of items they show in, we could randomly shuffle the list every time the site loads, giving an equal chance to different designs being showcased on page load for different visitors.</p><h4>Modal or no modal?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*NQXW1KZyBV3thggnzXH9WQ.jpeg" /><figcaption>Initial Confirm Modal mockup</figcaption></figure><p>Another part that didn’t make it to the final product was the ‘Confirm Modal.’ We needed some sort of way to ask the user about his/her email address to we could send the finished video. For that, initially we thought we’d have a modal that would overlay on top where we’d place the email address field. I felt having an email field visible right away on the main page may feel a bit intimidating to the visitor, so it was a clever way of hiding the input inside a secondary view.</p><p>However as we developed, we realized this posed some UX complications like the awkwardness of the user not being able to preview the video once he/she clicks on the ‘make video’ button, and a modal-on-modal situation when the editor is opened (because of the way our SDK Editor works.)</p><p>After some discussion, we came up with an alternative way to show the confirmation step along with the email input:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/518/1*Ef_qAq4rRJ8D8ZbZcMZ4Kg.gif" /></figure><p>We liked this method because it wasn’t as obtrusive as a modal that covers up the existing view. The switch between the two contexts felt far more natural thanks to the transitioning animation. Going back and forth between confirm state and initial state felt easier because your cursor would have to travel less distance than having to close a modal.</p><p>This also naturally solved the problem of video preview, since we could keep playing the video even when the user enters the confirm view. (In normal state, the video auto-plays and automatically skips to next video when it finishes playing. When user ‘selects’ the video, we set the current displaying video to loop.)</p><h3>Testing and Fixing</h3><p>At this point, feature-wise, the website was complete. We successfully connected our Video Editor to the website, made a finish page that would appear when the user finishes making a video, and confirmed that the email with the download link was being properly sent.</p><p>We also made sure the website looked and worked as intended on different browsers. Chrome, Firefox and Safari had no issues, but Edge (as we had feared) had some issues with video playback, so we had to fix that.</p><p>All seemed mostly fine on desktop browsers, but mobile browsers required more attention. It hasn’t been too long since inline HTML5 video playback became possible inside a mobile browser for iOS. It was introduced less than a year ago, when iOS 10 was launched with the WebKit engine in the new version of Mobile Safari, which <a href="https://webkit.org/blog/6784/new-video-policies-for-ios/">changed the policy</a> regarding autoplay and inline-play.</p><p>Since everyone on the dev team was running iOS 10 (we usually upgrade within a week of a software update release) we failed to catch the fact that autoplay wouldn’t work on devices still running iOS 9.</p><p>Not being able to autoplay video meant we needed to add back manual controls for video playback. Since the most natural place for the play button to be was over the video, it meant we could no longer use the ‘tap screen to skip to next’ behavior. After a bit of thought we came up with an alternative UI for legacy browsers that shows the play button and a persistent ‘next’ button that would be used to skip to next design.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*G5qV7yJvJmMUkZUOf-OUyA.jpeg" /><figcaption>Facebook in-app browser (left), Twitter in-app browser (right)</figcaption></figure><p>We also discovered that regardless of OS version, in-app browsers had different policies regarding inline video play and autoplay. Facebook, for example supported inline-play but not autoplay; Twitter supported neither inline-play nor autoplay. So we had to apply the ‘legacy UI’ for these browsers as well. The challenging part here was not with the implementation but more with the testing. Since you can’t type URLs directly in these browsers, we had to outsmart them by posting private posts on both services with a local IP link of the dev server, and then clicking on the link on the mobile app.</p><h3>Launch</h3><p>And then, after days of hard work came the deadline. For the final time we deployed our latest code to our test environment, passed the link around to everyone in the office asking them to test on their devices.</p><p>Then we pulled the switch. StoriesAds.com went live!</p><p>These were some of the challenges and reasoning behind the decisions that we went through. Note that not all of the things that we went through would apply to all cases, especially since we were so limited by time in this occasion. Time-attack driven development is definitely not what you want to encounter often as it’s difficult to maintain the quality of the project — as well as the sanity of the team members.</p><p>But with great effort comes great reward; if you manage to pull it through, you may gain valuable experience that will help you step up a level as a team. I believe that was the case for us, and I can never emphasize enough how thankful and proud I am to be part of this fantastic team.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5c0df723d4e8" width="1" height="1"><hr><p><a href="https://making.shakr.com/designing-storiesads-com-5c0df723d4e8">Designing StoriesAds.com</a> was originally published in <a href="https://making.shakr.com">Making Shakr</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making Tuesday]]></title>
            <link>https://making.shakr.com/making-tuesday-building-a-css-animation-library-from-scratch-196e5273cb3a?source=rss-ef15d48bdfc4------2</link>
            <guid isPermaLink="false">https://medium.com/p/196e5273cb3a</guid>
            <category><![CDATA[css]]></category>
            <category><![CDATA[animation]]></category>
            <category><![CDATA[english]]></category>
            <category><![CDATA[framework]]></category>
            <dc:creator><![CDATA[Hansol Kim]]></dc:creator>
            <pubDate>Thu, 13 Aug 2015 13:01:09 GMT</pubDate>
            <atom:updated>2017-05-03T16:35:05.560Z</atom:updated>
            <content:encoded><![CDATA[<h4>Building a CSS animation library from scratch</h4><p>It’s amazing to see how quickly new technologies are being adopted by the web nowadays.</p><p>First there were the CSS transitions. It was that moment when suddenly all websites started to have subtle transitions on text links that would gracefully fade their colors when you hovered your mouse over them.</p><p>Then came CSS animations, which is in some part similar to transitions but with more customizability because you could control the in-between steps while in transitions you could have only 2: the start, and the end. That also meant it was a wee bit more complicated to achieve the same visual result with animations than through transition. Mostly because you had to get used to writing a rather weird-looking @keyframes syntax along with many other unfamiliar properties.</p><p>And so became popular free <a href="https://www.google.com/search?q=css+animation+library&amp;ie=utf-8&amp;oe=utf-8">CSS animation libraries</a> that made people’s lives easier by providing nice preset animations or tools that you could use to generate your own animations by dragging sliders. While there were a bunch of fancy ones that provided a bunch of customizable features, I was looking for something simple. <a href="https://daneden.github.io/animate.css/">Animate.css</a> was one of them, providing a nice set of animations and easy enough to use as to just slapping the stylesheet link in the HTML file.</p><h3>Brief History of CSS Animations in Shakr</h3><p>In Shakr, we started using CSS animations as early as when the first version of Shakr site was launched. We used the aforementioned Animate.css for quick emphasis effects on notice modals and zooming effects. When I joined Shakr late last year and started working on a design cleanup of our Shakr for After Effects plugin, the Animate.css library was there too. The Shakr AE Plugin has a whole story of its own as in how we implemented a web view based on HTML and JavaScript displaying inside the After Effects panel frame — but that will be a topic for another time perhaps.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/340/1*BYtSMIRnRULLUcAjUW6YGA.jpeg" /><figcaption>Screenshot of Shakr for After Effects plugin.</figcaption></figure><p>Because of the small panel size the UI layout was designed to resemble that of a mobile app, with a fixed header bar at top and contents dynamically changing under it. The animation library provided entrance and exit transitions for the content view when the user interacted inside the web app.</p><p>Everything was well until I started to notice that the animation was looking a bit awkward. As I tested out a few custom overrides like adding delays or making the duration longer, I realized that the animations defined in Animate.css had motion paths that were rather too large for using on UI elements inside a site. In fact, many other popular CSS animation libraries offer lots of fancy and noticeable effects have a similar problem where the animations themselves are too prominent that they stand out <em>too</em> much.</p><p>While we could just go by adjusting the existing animations slightly, modifying one’s code essentially meant you had to fork one’s project. That defeats the purpose of using a slap-on, just-add-water single CSS stylesheet you could import just by writing one line.</p><p>That was the moment where came the idea:<br> <em>“Why not just make our own CSS animation library?”</em></p><h3>Let the code begin</h3><p>The general process of making an animation from scratch was as such:</p><ol><li>Think up &amp; visualize in mind (or paper) of an animation.</li><li>Start coding the actual keyframes in CSS scratchpads such as <a href="http://codepen.io/">CodePen</a> and tune them with trial-and-error.</li><li>Slap on a relevant name for the animation.</li><li>Optionally, make variations by reversing the direction, or making an exit-version if it was an entrance animation.</li></ol><p>Imagining a cool animated movement in the head isn’t a very hard thing to do, but thinking of a ‘practical’ animation that will be actually useful in a variety of cases is challenging.</p><p>Performance was also something I had to take in mind. So properties I would animate in keyframes would be strictly limited to opacity and transform, which are the <a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/">two properties that are most certainly hardware-accelerated</a>—so that smooth 60fps animations are ensured both in desktop and mobile. It might seem like a very limited selection to play with, but even just with translate, rotate and scale you can already replicate most motions. It really is a matter of how you properly mix them together.</p><p>First, I started out by making some simple fade-in animations. I created an empty pen in CodePen (which would later turn <a href="http://codepen.io/zvuc/pen/LEZdLJ">into a sandbox</a> for testing out new animations) and started writing keyframes.</p><p>Speaking of which: there are many scratchpads for coders but among them I use CodePen the most because it was made for frontend designers and devs from the first place. Creating a repository, setting up CSS preprocessors and compilers can be a hassle when you’re trying to test or make something quick. I love how with CodePen you don’t have to worry about those stuff and start right away, saving time.</p><p>Anyhow, a simple fade-in animation keyframe would look pretty straightforward:</p><pre>@keyframes tdFadeIn { <br>  0% { <br>    opacity: 0; <br>  } <br>  100% { <br>    opacity: 1; <br>  } <br>}</pre><p>Easy stuff. Now I need a class that includes the animation property that refers to the appropriate keyframe name so it will trigger the animation:</p><pre>.tdFadeIn { <br>  animation-name: tdFadeIn;<br>}</pre><p>Only thing missing here now is the animation-duration. While I could include duration value along with the animation-name as shorthand animation property, I wanted duration to be a common thing animations to be consistent, and also reduce file size by avoiding duplicate code.</p><pre>.animated { <br>  animation-duration: 0.3s; <br>  animation-fill-mode: both; <br>}</pre><p>The .animated class will be the common class name for everything that’s going to be animated. I’m not going to hide the fact that I indeed took some naming conventions and code structure as reference from Animate.css because I thought they were efficient and made sense in what I was trying to achieve.</p><p>I’ve decided to set 0.3 seconds as the default animation duration after testing with other various values. 0.3s was that ‘sweet spot’ where the animation didn’t feel too slow to look unresponsive, or too quick so it’d be hard to even notice the motion (which defeats the purpose of inserting an animation after all).</p><p>In case you might wonder what the animation-fill-mode does, there is an <a href="http://www.sitepoint.com/understanding-css-animation-fill-mode-property/">excellent article at SitePoint</a> about that. For a short explanation, it’s what prevents your animation to reset after it has run. So let’s say you had a fade-in animation with an initial opacity value of 0 (invisible); without the fill-mode property your element would reset to invisible state after the end of the animation. Usually, you would just need animation-fill-mode: forwards; I’ve set it as both just in case you would want to use an animation in reverse direction you won’t have to worry about changing the values too. (Fill-mode values forwards and backwards are reversed along with animation-direction respectively)</p><p>So now that I have a common class for animated element and a class for the specific animation, I can add the two classes any element to animate it.</p><pre>&lt;h1 id=&quot;header-text&quot; class=&quot;animated tdFadeIn&quot;&gt;It&#39;s Tuesday.&lt;/h1&gt;</pre><h3>Coding more complex animations</h3><p>Simple fade animations or even fades with directional movements (FadeInLeft, FadeInRight…) are pretty straightforward so I didn’t need any extensive testings and tunings. But trying to make something a bit fancier required some more effort.</p><p>So I had an idea of an animation where a rectangular notice box would hang from the top of site window, subtly swiveling facing forward. Just like a hanging traffic sign.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/318/1*cBT25iz4QGCt45VkxYyakQ.jpeg" /><figcaption>A swiveling traffic sign in Korea. (Source: Google Image Search)</figcaption></figure><p>To replicate this, I would have to use 3d-rotate with the center of rotation set to the top of the element to make it look as if it’s ‘hanging’ under something. Since this is not going to be an infinite animation but a one-time entrance animation, I wanted the element to swing back and forth at least once. To do that, I needed to adjust easings to make it look natural.</p><p>After some trial-and-error testing, the final result I landed upon was this:</p><pre>/* Hinge Flip */<br>@keyframes tdHingeFlipIn {<br>  0% { <br>    opacity: 0;<br>    transform: perspective(600px) rotateX(0deg);<br>    transform-origin: center top;<br>    animation-timing-function: @easeOutCirc;<br>  }<br>  <br>  50% {<br>    transform: perspective(600px) rotateX(-10deg);<br>    transform-origin: center top;<br>    animation-timing-function: ease-in;<br>  }<br><br>  100% { <br>    opacity: 1;<br>    transform: perspective(600px) rotateX(0deg);<br>    transform-origin: center top;<br>    animation-timing-function: ease-out;<br>  }<br>}</pre><p>You can see a live example of this animation in the <a href="http://shakrmedia.github.io/tuesday/">demo page</a>.</p><h4>Perspective</h4><p>There are two ways to induce depth (perspective) to an otherwise flat webpage screen through CSS: using the perspective property on an element directly or using the transform: perspective() method. The first method defines a perspective view for the element and affects all child elements that are under it, and the latter only affects self. More like a shared 3d-space versus an isolated 3d-space per element. (For a detailed explanation, read <a href="https://css-tricks.com/almanac/properties/p/perspective/">this article on CSS-Tricks</a>)</p><p>In this case, since I want to transform only the element itself in its own space the perspective() method was the right choice for me. After that I needed a gentle push that’d swivel the target back and forth, so applied a subtle rotate(). The transform-origin is set to center top so it looks like it’s hinged on top.</p><h4>Custom Easing Functions</h4><p>To make the swiveling look more natural and give a sense of ‘gravity’ as it would in real life, I played around with the timing function easing values. In most cases, the default preset ease value will be enough, but sometimes you want a more snappy or excessively bouncy feel in the animations. This is when you can use a custom cubic-bezier() value.</p><p>Snappiness was exactly what I wanted in this new animation library, so I decided to make a custom bezier curve preset value I’d reuse in animations. Among many tools you can find that helps draw the graph and generate cubic-bezier()values, I used <a href="http://matthewlein.com/ceaser/">Ceaser</a>. Since in Shakr we used LESS as the CSS preprocessor, I made a LESS variable for the two custom curves.</p><pre>@easeOutCirc: cubic-bezier(0, 0.590, 0.375, 1); @easeInCirc: cubic-bezier(0.590, 0, 1, 0.375);</pre><h3>Into a library</h3><p>It was early January when the Tuesday repository was first created and pushed to Github. Initially, the original purpose of Tuesday was to have separation of animation-related code from UI design-related code from the CSS file for easier maintainability. Having it set up as an independent stylesheet also meant it was easier to import and apply to other new projects.</p><p>At first there were only a few (well, it still isn’t a very large collection) set of animations — maybe not even enough to call a ‘library.’ But everything has its beginnings, and beginnings aren’t always so fancy. I cleaned up some of the code from the sandbox page I tested the animations on and built a quick demo page with buttons making easy to test out the animations.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0SESd-cps-3hiMEnuqoqvA.png" /><figcaption>Tuesday Demo Page</figcaption></figure><h3>Open-source</h3><p>Originally, Tuesday was started as a project for Shakr’s internal use. We made it for ourselves but from the very start we knew that someday this was going to become an open-source project. We were excited to unveil this as soon as we launch the new version of our Shakr website, but as things usually go about in development world, it was very delayed — but here we are!</p><p>The Tuesday repository has been open-sourced as of today. The project is licensed under <a href="https://github.com/ShakrMedia/tuesday/blob/master/LICENSE">MIT License</a>, so you can freely fork, copy, modify and use them in your own projects. Go and take a look at the <a href="https://github.com/ShakrMedia/tuesday">GitHub repo page</a>.</p><p>Just take in mind, I’m not going to fake it: Tuesday is nowhere a complete nor a huge jumbo pack of animations like some out there. If you’re expecting something like that… well, the chances are that you’re probably going to be disappointed. But I believe it still has much room for creative additions, which we are surely going to keep pushing in when we have the idea (and time).</p><p>We’re opening this up so we can share the experience with more people. We very much hope that this will be of help to any other fellow designers/frontend devs who are endeavoring through similar pathways as we did!</p><p>P.S.:<br>You’re probably wondering now why in the world is this thing named ‘Tuesday’ anyways. We named it Tuesday back then just because it was the best most spontaneous name we came up while brainstorming out loud. As far as I understand, Tuesdays are like Mondays here in Shakr dev team — but honestly, even as of now I am not entirely sure why did ‘Tuesday’ become a thing here. Maybe Dave will have a better explanation on this in another post 😉</p><p><em>Originally published at making.shakr.com on August 13, 2015.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=196e5273cb3a" width="1" height="1"><hr><p><a href="https://making.shakr.com/making-tuesday-building-a-css-animation-library-from-scratch-196e5273cb3a">Making Tuesday</a> was originally published in <a href="https://making.shakr.com">Making Shakr</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>