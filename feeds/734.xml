<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://leejungdo.com//feed.xml" rel="self" type="application/atom+xml" /><link href="https://leejungdo.com//" rel="alternate" type="text/html" /><updated>2019-05-06T14:13:58+00:00</updated><id>https://leejungdo.com//feed.xml</id><title type="html">lee.jungdo</title><subtitle>개발자 이정도 블로그</subtitle><entry><title type="html">비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(1)</title><link href="https://leejungdo.com//blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(1).html" rel="alternate" type="text/html" title="비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(1)" /><published>2019-05-03T15:00:00+00:00</published><updated>2019-05-03T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(1)</id><content type="html" xml:base="https://leejungdo.com//blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(1).html">&lt;p&gt;지난 4월 한 달은 정신없이 보냈다. 스타트업에 개발자로 취업하기 위해서 회사 4곳에 지원했고 모든 회사에 최종 합격했다. 각 회사는 제 분야에서 성과를 내며 인정받고 있고 매력이 많은 회사라 애초에 신중하게 지원했다. 아랫글을 통해서 지난 한 달간 취업 과정에서 느꼈던 것 중에 특히 주니어 레벨의 개발자들에게 도움이 될만한 내용을 추려서 정리한다. 내용 중에는 개인적인 편견이나 오해가 담겨있는 부분도 있을 것이다. 어느 한 사람의 개인적인 경험이자 소회일 뿐이니 참고만 하시면 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;전체 내용은 (1) 회사 지원 시, (2) 기술 면접, (3) 인성 면접, (4) 면접 이후 순으로 구성했고 이번 글에서는 (1) 회사 지원과 (2) 기술 면접을, &lt;a href=&quot;/blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(2).html&quot;&gt;다음 글&lt;/a&gt;에서는 (3) 인성 면접과 (4) 면접 이후 참고 사항을 다룬다.&lt;/p&gt;

&lt;h3 id=&quot;참고-사항&quot;&gt;&lt;strong&gt;참고 사항&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 나는 주니어 개발자 포지션에 지원한 것은 아니라는 점을 미리 밝혀둔다. 나는 지난 4년 동안 스타트업을 공동 창업하고 크고 작은 산전수전을 겪었으며 그 과정에서 비 개발자에서 풀 스택 개발자가 되었다. 스타트업 창업 경험과 팀 내 유일한 개발자로서 4년 가까이 일한 경력이 이번에 개발자로 취업하는데 매우 큰 영향을 끼쳤음을 부인할 수 없다.&lt;/li&gt;
  &lt;li&gt;그리고 프론트엔드, 백엔드를 굳이 가리지는 않았다. 프론트엔드 포지션이 열려있는 회사에는 프론트엔드 개발자로, 백엔드(혹은 풀 스택) 포지션이 열려있는 회사라면 백엔드 개발자로 지원했다. 내가 둘 다 잘하는 것은 절대 아니고 내 개인적인 취향보다는 회사의 필요에 나를 맞추고자 했다. 물론 모든 지원자가 그렇게 해야 하는 건 아닌 것 같다. 본인이 자신 있는 포지션에 지원하는 게 맞다고 본다. 다만 스타트업이라는 특성을 이해할 필요가 있는 것이, 일하다 보면 백엔드와 프론트엔드의 구분이 희미해질 때가 생기고 이 바닥에서 중견기업 정도 되지 않고서야 기업 입장에서는 모든 도메인을 어느 정도로 잘하는 사람을 더욱 선호하기 마련이다. 이런 이유로 나는 스스로를 풀 스택 개발자로 포지션해서 지원했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-회사-지원시-참고사항&quot;&gt;&lt;strong&gt;(1) 회사 지원시 참고사항&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;입사는 결국 지원자의 상품성을 기업이 인정하느냐 아니냐로 결정된다. 면접관은 회사에 가장 큰 이익을 가져다주는 사람을 뽑을 수밖에 없다. 그러므로 지원자는 본인이 가진 매력과 장점을 최대한 멋지게 포장해서 선보일 필요가 있다. 당신을 뽑으면 회사에 어떤 이익이 있을지가 이력서와 면접을 통해 명확하게 드러나야 한다. “저는 시키시는 일은 무조건 잘 해내겠습니다.”라고 말하는 사람은 매력없다.&lt;/li&gt;
  &lt;li&gt;당신이 경력이 전혀 없는 신입이라면, 어떻게 매력과 강점을 어필하냐고 물을 수도 있겠다. 하지만 회사도 주니어 레벨의 개발자에게 대단한 강점을 기대하는 것은 아니니 너무 걱정할 필요는 없다. 그렇다면 회사가 신입 개발자에게 기대하는 것은 무엇일까? 생각외로 단순하다. 이 지원자가 앞으로 좋은 개발자로 성장할 가능성이 있는지, 또 이 지원자가 다른 팀원들과 함께 수월하게 일할 수 있을지 등을 본다.&lt;/li&gt;
  &lt;li&gt;크게 내세울 경력이 없는 신입 개발자라면 개발에 대한 관심과 팀에서 일했던 경험을 어필하는 것이 좋다. 혼자서 했더라도, 프로젝트를 진행했거나 오픈 소스에 기여한 경험이 있다면 반드시 부각하도록 하자. 블로그 활동, 세미나/컨퍼런스 참석, 발표나 교육 경험 등은 당신이 개발에 진지한 관심을 가지고 있다는 사실을 보여주는 좋은 근거들이다.&lt;/li&gt;
  &lt;li&gt;또, 팀 프로젝트 경험이 있다면 팀에 어떤 기여를 했는지 상세하게 기술하는 것이 좋다. 팀에서 리더를 맡았거나 팀원들의 갈등을 조정한 경험이 있으면 더욱 좋다. 실제로 면접에서 ‘팀에서 이런 문제가 있을 때 어떻게 해결할지’를 묻는 질문은 자주 나온다. 나도 면접에서, 프로젝트를 할때 팀내 갈등을 어떻게 해결했었는지, 만약 동료 개발자의 코드가 마음에 안 든다면 어떻게 이야기할 것인지 등의 질문을 받았다.&lt;/li&gt;
  &lt;li&gt;회사에 별달리 관심도 없으면서 일단 지원해놓고 보자라는 마음으로 지원하는게 좋은 것 같지 않다. 왜냐하면 회사에서는 여러 차례 면접을 거치면서 이 지원자가 정말 우리 회사에 관심이 있는 건지 수차례 검증할 수 밖에 없다. 실제로 내가 면접을 본 모든 회사들은 왜 자기 회사에 지원했는지, 서비스 사용 경험이 어땠는지, 서비스를 개선한다면 어떤 부분을 개선하고 싶은지에 대해 집중적으로 물어봤다. 면접 30분전에 대충 핸드폰으로 회사 홈페이지에 들어가서 살펴볼 게 아니다.&lt;/li&gt;
  &lt;li&gt;스타트업에 지원한다면 더더욱 회사와 그 회사의 프로덕트에 대한 관심이 너무나도 중요하다. 대기업이라면 조금 다를 수도 있겠지만, 한 사람 한 사람의 역량이 회사의 방향을 크게 바꿀 수 있는 스타트업의 경우라면 어떤 사람을 뽑을까? 같은 조건이라면 우리 회사와 프로덕트에 더 큰 관심과 애정이 있는 사람을 뽑지 않을까?&lt;/li&gt;
  &lt;li&gt;감당할 수 없을 정도로 많은 회사를 동시에 지원하는 것도 피하는 게 좋을 것 같다. 어느 정도 실력 있는 지원자라면 서류 심사는 빠르게 통과하고 여러 곳에서 동시에 면접 요청이 올테고 거기다가 미니 프로젝트에 코딩 테스트를 진행해야 할 수도 있다. 스케줄이 아마 감당이 안 될 거다. 내가 평상시에 어떤 분야에 관심이 있는지, 내가 평소에 즐겨 쓰는 웹사이트/어플리케이션은 어떤 게 있는지부터 살펴보면서, 최소한의 관심을 가진 회사를 선별해서 신중하게 지원해보자.&lt;/li&gt;
  &lt;li&gt;물론 주니어로서 입사 면접 자체가 처음인 사람인 경우, 희망 기업을 제일 먼저 지원하는 것보다 2지망그룹 ⇒ 1지망그룹 순으로 지원하는 걸 추천한다. 이유는 면접을 많이 보면 볼 수록 면접을 더 잘 볼 수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-기술-면접&quot;&gt;&lt;strong&gt;(2) 기술 면접&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;당신 앞에 있는 면접관이 당신에게 인터뷰 기회와 시간을 할애해 주셨다는 사실에 진심으로 감사하자.&lt;/li&gt;
  &lt;li&gt;면접관은 최소 몇 년에서 수십 년의 경력자이다. 그러니 당신이 그 이상의 경력이 있지 않은 이상 당신은 그 사람에게 절대적인 초심자이다. 그리고 면접관도 그 사실을 알고 있다.&lt;/li&gt;
  &lt;li&gt;한가지 다행인 건 경력도 없는 데다가 비전공자인 데다가 프로젝트도 몇 개 해보지 않은 당신에 대한 서류상 평가가 좋을 리 없기 때문에, 그만큼 인터뷰를 잘하면 큰 점수를 딸 수 있다.&lt;/li&gt;
  &lt;li&gt;전공자가 기술면접을 잘하는 건 놀랍지 않지만 비전공자가 기술면접을 잘하는 건 대단한 거다. 그러니까 비전공자인 당신이 기술면접을 잘 보면 상당히 큰 점수를 얻을 수 있는 거다.&lt;/li&gt;
  &lt;li&gt;면접 시작과 함께 이력서 출력본을 각 인터뷰어에게 공손하게 돌리자. 이런 것도 준비해왔다는 사실에 반가워할 것이다.&lt;/li&gt;
  &lt;li&gt;제일 먼저 자기소개를 해달라고 할 것이다. 한 1분짜리 자기소개는 달달 외워서라도 준비해가자. 첫 단추를 잘 꿰어야 한다.&lt;/li&gt;
  &lt;li&gt;자기소개 이후 회사에 따라 다르지만 바로 기술 주제 질문이 시작된 경우도 있었고 이력서를 찬찬히 보면서 프로젝트 질문으로 시작되기도 했었다.&lt;/li&gt;
  &lt;li&gt;답변할 때 장황하게 얘기하지 말고 요점만 간단하게 얘기하자. 당신이 장황하게 얘기할수록 잘못 얘기할 가능성이 커짐과 동시에, 면접관은 당신의 답변에 점점 흥미가 줄게 되어있다.&lt;/li&gt;
  &lt;li&gt;좀 어려운 질문이 들어왔다면, 잠시 생각해보고 잘 모르겠으면 그냥 모르겠다고 얘기하자. 괜히 모르는 것을 안다고 했다가 추가 질문을 통해 모른다는 사실이 들통나면 크게 점수가 깎인다. 면접에서 중요한 것은 모든 질문에 대답하는 것이 아니라, 면접관에게 좋은 인상을 남기는 것이다.&lt;/li&gt;
  &lt;li&gt;질문자도 당신이 완벽하게 알 것이고 완벽하게 모든 질문에 답할 것이라는 기대는 하지 않는다. 그 누구도 그렇게 하긴 힘들다. 그러니 완벽하게 하려는 마음 자체를 버리고 편한 마음으로 임하자. 이게 제일 중요하다.&lt;/li&gt;
  &lt;li&gt;기술면접에서 기술적 내용 뿐만 아니라 회사는 당신이 협업하기에 알맞은 개발자인지를 꼭 확인하려 할 것이다. 관련 질문에 대비해두는 것이 좋다. 이를테면 당신은 어떤 코드가 좋은 코드라고 생각하는지, 다른 개발자와 코드 리뷰시 어떤 내용을 지적했었고 어떤 내용을 지적받았었는지, 그리고 다른 개발자와 협업하기 위해서 중요한 것은 어떤 것이 있는지 등을 쉽게 설명할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;기술 면접에서 또다른 주된 활동 중 하나는 면접관들이 당신의 이력서를 보면서 지금까지 진행했던 프로젝트를 샅샅이 뒤져보는 것이다. 그리고 면접관들은 각 프로젝트의 기술 스택을 선택한 이유와 그 기술을 사용한 경험, 장단점, 다른 대안의 고려 여부 등을 물을 가능성이 높다. 이를 통해 우선, 당신이 진짜로 해당 프로젝트에 기여한 것이 맞는지 확인할 것이다. 더 나아가 당신이 어떠한 기술적 고민을 했었는지 그리고 단순히 주어지는 기술 스택이 아닌 특정 문제를 해결하기 위한 솔루션으로서 기술 스택을 어떻게 구성하였는지 알고 싶을 것이다.&lt;/li&gt;
  &lt;li&gt;그리고 각 프로젝트를 진행하면서 거칠 수밖에 없는 수많은 기술적 난관과 팀 내 이슈를 어떻게 극복했는지 확인하려 할 것이다. 그런 내용에 충분한 준비가 있어야 한다.&lt;/li&gt;
  &lt;li&gt;회사마다 다르긴 하지만 화이트보드 코딩을 진행한 적도 있었다. 다만 시간 관계상 화이트보드 코딩에 상당히 어려운 문제를 내기는 쉽지 않아서 비교적 단순한 문제가 나왔었다.&lt;/li&gt;
  &lt;li&gt;어떤 회사에서는 ‘좋은 회사와 그렇지 않은 회사 사이에 어떤 차이가 있는가’라는 다소 어려운 질문을 받은 적도 있었다. 당신이 생각하기에 좋은 회사의 조건을 미리 생각해두는 것도 좋을 것 같다.&lt;/li&gt;
  &lt;li&gt;기술 면접에는 보통 CTO나 실무 개발자들이 함께 나올 가능성이 높다. 이들이 당신을 인터뷰하기도 하지만 반대로 당신이 이들을 인터뷰한다고 생각해볼 필요가 있다. 즉 당신이 이 회사에서 일하게 된다면 제일 가까이서 함께 일할 사람들이 바로 당신 앞의 면접관들이다. 따라서 이들이 어떻게 서로 커뮤니케이션하는지, 당신에게 어떤 질문을 하는지, 당신이 묻는 말을 답하는 태도는 어떤지, 사람 간 권력 관계는 어떻게 작용하는 것 같은지 등을 관찰하면 회사와 개발팀 문화에 대한 다양한 단서를 얻을 수 있다. 이를 통해 이들과 함께 일하는게 어떤 모습일지 유추해보는 것도 충분히 가능하다.&lt;/li&gt;
  &lt;li&gt;예를 들어 면접 분위기가 조금 경직되어 있고 지원자를 무시하는 분위기라면, 실제로 이 회사의 조직 문화가 조금 경직되어 있고 팀원들을 무시하는 분위기일 가능성이 높다. 이건 나도 이번에 겪은 일인데, 지원자를 배려하지 않고 무시하는 태도를 가진 면접관이 있었다. 면접에서도 그런 모습이라면 그 사람과 하루종일 같이 일할 때는 어떤 모습일까? 크게 다르지 않을 것이다. 그리고 그런 사람과 함께 일해온 다른 팀원들은 어떤 사람들일까? 왠만하면 이런 팀은 피하는 게 좋을 것 같다.&lt;/li&gt;
  &lt;li&gt;어떤 기술면접에서는 그 회사의 CTO와 거의 모든 개발자가 다 함께 면접관으로 참여했다. 보통은 CTO와 선임 개발자가 면접에 참석하는 반면 이 회사는 모든 실무진이 참여했다. 이건 이 회사가 개발자 채용에 얼마나 진지하고 적극적인지를 보여주는 것이다. 이 회사의 경우, 입사한 지 3개월이 갓 넘은 신입 개발자도 적극적으로 면접관의 역할을 다하고 본인의 생각을 다른 개발자들과 효과적으로 공유하는 모습을 보였다. 일단 이것만으로 이 팀은 굉장히 민주적인 조직문화를 가진 팀이라는 걸 유추할 수 있었다.&lt;/li&gt;
  &lt;li&gt;사람이 하는 면접이다 보니, 그 사람의 특성이 드러나게 되어 있다. 일반적으로 서류 전형 이후 기술 면접이 회사 구성원들과 첫 대면인데, 이때 면접관들을 자세히 보면 회사에 대해 많은 것을 미리 알 수 있다. 내 경우와 주변 케이스를 보면, 표면적이고 지엽적인 정보들로 회사에 대해 좋게 생각했었는데 막상 기술 면접에서의 경험이 영 별로인 경우도 꽤 빈번했다.&lt;/li&gt;
  &lt;li&gt;급한 마음에 어느 회사라도 좋으니 빨리 입사하고 싶다고 생각할 수도 있다. 하지만 조금만 길게 보면 회사에 들어가는 시기보다 어떤 사람들과 일하느냐가 더욱 중요한 결정이다. 어떤 사람들과 어떻게 일하느냐에 따라서 개발자이자 팀원으로서 앞으로 당신은 더 크게 성장할 수도 있고 반대로 퇴사를 결심하게 되기도 한다. 그러니까 회사 구성원들을 사전에 면밀히 조사해보고 면접 시 드러나는 그들의 특성을 최대한 많이 수집할 필요가 있다.&lt;/li&gt;
  &lt;li&gt;기술 면접의 제일 마지막에는 회사에 궁금한 점을 질문하라고 한다. 만약 지금까지 답변 내용이 부실했다면 만회할 기회이다. ‘기술적’ 질문 여러 개(나는 최소 10개 이상을 준비했다)를 미리 준비하자. 개발팀은 어떤 식으로 일을 하고 커뮤니케이션하는지, 개발자로서 성장할 수 있는 개발팀 문화가 있다면 어떤 게 있는지 등으로 시작하면 무난하다. 무엇보다 그 회사의 프로덕트를 미리 연구해보고 특정 기능에 대해 질문하는 등 적극적인 모습을 보여주면 제일 좋다.&lt;/li&gt;
  &lt;li&gt;면접이 끝나면 그날이 지나가기 전에 thank you 이메일을 보내는 것도 좋은 것 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 글 &lt;a href=&quot;/blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(2).html&quot;&gt;비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(2)&lt;/a&gt;에서 이어집니다.&lt;/p&gt;

&lt;p&gt;최종 수정 2019-05-05&lt;/p&gt;</content><author><name></name></author><category term="thoughts" /><summary type="html">지난 4월 한 달은 정신없이 보냈다. 스타트업에 개발자로 취업하기 위해서 회사 4곳에 지원했고 모든 회사에 최종 합격했다. 각 회사는 제 분야에서 성과를 내며 인정받고 있고 매력이 많은 회사라 애초에 신중하게 지원했다. 아랫글을 통해서 지난 한 달간 취업 과정에서 느꼈던 것 중에 특히 주니어 레벨의 개발자들에게 도움이 될만한 내용을 추려서 정리한다. 내용 중에는 개인적인 편견이나 오해가 담겨있는 부분도 있을 것이다. 어느 한 사람의 개인적인 경험이자 소회일 뿐이니 참고만 하시면 좋을 것 같다.</summary></entry><entry><title type="html">비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(2)</title><link href="https://leejungdo.com//blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(2).html" rel="alternate" type="text/html" title="비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(2)" /><published>2019-05-03T15:00:00+00:00</published><updated>2019-05-03T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(2)</id><content type="html" xml:base="https://leejungdo.com//blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(2).html">&lt;p&gt;지난 글 &lt;a href=&quot;/blog/2019/05/03/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EA%B0%80-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%A0-%EB%95%8C-%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4(1).html&quot;&gt;비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(1)&lt;/a&gt;에서 회사 지원할 때 그리고 기술 면접할 때 지원자가 참고하면 좋을 것들에 대해서 다루었다. 이번 글에서는 (3) 인성 면접과 (4) 면접 이후 참고사항을 다뤄보겠다.&lt;/p&gt;

&lt;h3 id=&quot;3-인성-면접&quot;&gt;(3) 인성 면접&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기술 면접을 통과하면 인성 면접을 보게 된다. 큰 회사 같은 경우 보통 CTO가 면접관으로 참여하고 작은 회사 같은 경우 대표가 면접관으로 참여하게 된다. 그래서 기술 면접과 다르게 보통 1:1로 진행된다.&lt;/li&gt;
  &lt;li&gt;그러다 보니 1:2나 1:3 혹은 그 이상으로 진행되는 기술 면접과는 분위기가 좀 다르다. 그리고 이미 기술 면접을 통해 회사 분위기를 약간은 익혔고 어려운 기술 면접을 통과했다는 안도감 때문에 인성 면접은 아무래도 조금 편안한 분위기에서 진행되는 것 같다.&lt;/li&gt;
  &lt;li&gt;하지만 긴장의 끈을 놓치면 안 된다. 기술 면접이 개발자로서 일할 수 있는 최소한의 기술적 역량을 확인하기 위한 절차였다면, 인성 면접은 프로페셔널로서 다른 팀원들과 함께 일할 수 있는 최소한의 자질과 자세를 확인하는 것이 주요 목적이다. 이처럼 기술 면접과 인성 면접은 상호 보완적인 관계이기 때문에 기술 면접을 잘 봤다고 꼭 인성 면접에서 잘하리라는 보장이 전혀 없다. 오히려 기술 면접에서 드러나지 않았던 당신의 밑천이 인성 면접에서 낱낱이 까발려질 수 있다.&lt;/li&gt;
  &lt;li&gt;인성 면접에서 회사가 당신에게서 확인하고자 하는 것은 크게 3가지, &lt;strong&gt;회사(프로덕트)에 대한 관심&lt;/strong&gt;, &lt;strong&gt;일을 대하는 자세&lt;/strong&gt;와 &lt;strong&gt;협업 능력&lt;/strong&gt;인 것 같다.&lt;/li&gt;
  &lt;li&gt;지난 글에서도 얘기했었지만 스타트업에 지원한다면 그 회사와 프로덕트에 대한 관심은 아주 중요하다. 왜냐하면 관심과 애정이 이미 있는 사람이라면 그렇지 않은 사람에 비해 입사 후 더 큰 성과를 낼 가능성이 높고 온보딩에 필요한 커뮤니케이션 비용이 훨씬 적다는 점에서 회사에 노관심인 사람보다 훨씬 더 유리한 것 같다.&lt;/li&gt;
  &lt;li&gt;그런 이유인지 내가 봤던 인성 면접에서 공통적으로 물은 것이 회사의 프로덕트를 써봤었는지, 어떤 점이 좋았고 어떤 점이 불편했었는지, 개선하고 싶은 부분이 있다면 어떤 것인지, 어떤 기능을 개발하려고 하는데 그 기능이 고객에게 어떤 도움이 될 것 같은지 등 실제로 프로덕트를 사용해봤거나 깊이 연구해보지 않았으면 쉽게 답하기 힘들었을 질문이 많았다.&lt;/li&gt;
  &lt;li&gt;면접관들은 프로덕트를 최소 몇년동안 붙잡고 살고 있는 사람들이기 때문에 당신의 답변을 듣고 회사와 프로덕트에 대한 관심 정도를 금방 판단할 수 있다. 그래서 면접 전 회사와 프로덕트를 깊이 연구해봐야 하고 그 이전에 아무 회사보다는 이미 관심있는 회사에 지원하는 것이 훨씬 유리한 것이다.&lt;/li&gt;
  &lt;li&gt;당신은 개발자 이전에 직원, 즉 피고용인이다. 피고용인은 돈을 받고 특정한 업무를 수행하는 프로페셔널이다. 프로페셔널은 본인이 맡은 업무를 책임지고 끝까지 훌륭하게 완수해야 할 의무가 있다.&lt;/li&gt;
  &lt;li&gt;이런 점에서 과거 프로젝트에서의 성공/실패 경험에 대해 집중적으로 물어보는 경향이 있었다. 성공했다면 어떤 이유로, 어떻게 성공했었는지, 팀원들과의 관계는 어땠는지, PM의 역할은 누가 어떤 식으로 했었는지, 잘했던 점과 아쉬웠던 점 등을 물어보고, 실패했다면 마찬가지로 어떤 이유로 실패했었고 그 과정에서 당신이 어떤 식으로 대응했었는지 등을 통해 프로페셔널로서 당신의 자질을 유추하려는 경향이 보였다.&lt;/li&gt;
  &lt;li&gt;이런 이유로 과거 프로젝트에서 함께 일했거나 관계가 있는 레퍼런스가 있으면 아주 좋다. 이력서에 레퍼런스의 소속과 이름 그리고 가능하다면 연락처도 기재하면 좋을 것이다. 레퍼런스를 기재했다는 사실 자체로 당신 스스로에 대한 자신감을 보여주는 것이기도 하고 면접관은 레퍼런스가 있다는 것 자체에 좀 더 신뢰를 보이는 것 같다. 이번에 이력서에 기재한 레퍼런스에 실제로 연락이 가서 나에 대해 많이 물어보고 나서 연락을 해온 경우가 있었다.&lt;/li&gt;
  &lt;li&gt;과거 프로젝트가 모두 성공 일색일 필요는 전혀없는 것 같다. 그런 사람은 애초에 거의 없기도 하고. 무엇보다 회사에서 찾는 ‘인재’는 장애물을 만났을 때 어떻게든 극복해나가는 사람이고 실패했을 때 그것을 통해 배우고 성장해서 다시 도전할 수 있는 사람이다. 그렇기 때문에 과거 프로젝트가 대단하지 않아도, 실패했어도 괜찮다. 실패에서 배운 것이 있다면 말이다.&lt;/li&gt;
  &lt;li&gt;면접관이 당신의 약점에 관해 얘기하면 쿨하게 인정하되 “그렇지만 저는 그런 과정을 통해 더욱 성장할 수 있었다”라고 당신에게 유리한 쪽으로 끌어낼 수 있고 또 그렇게 해야 한다. 이렇게 보니 면접은 결국 협상이라는 생각도 든다.&lt;/li&gt;
  &lt;li&gt;마지막으로 당신이 증명해내야 하는 것은 협업 능력이다. 개발자는 동료 개발자, 기획자, 디자이너 등 다양한 직군의 프로페셔널들과 함께 일할 수 있어야 한다. 그렇기 때문에 회사는 당신이 동료들과 원활하게 소통할 수 있고 다양한 갈등상황을 해결할 수 있는 조정능력이 있는지 검증하고싶어한다. 이런 점을 어필할 수 있다면 좋을 것 같다.&lt;/li&gt;
  &lt;li&gt;어떤 커뮤니케이션 방식을 선호하는지에 대한 질문도 받았었다. 평상시에 자주 생각해봄직한 주제는 아니기 때문에 잠시 생각해보다가 직설적인 커뮤니케이션을 선호하고 그 이유는 이러저러하다고 얘기했던 것 같다. 그리고 함께 일하는데 불편함을 느끼는 사람이 있다면 어떤 스타일의 사람인지, 친구들에게 당신은 어떤 사람인지, 즐겨보는 블로그는 무엇이고 향후 프로페셔널로서의 목표와 같은 질문도 있었다.&lt;/li&gt;
  &lt;li&gt;인성 면접은 기술 면접에 비해 좀 더 예상하지 못했던 질문, 평상시에 잘 생각하지 않는 질문, 그리고 특별히 정답이 없는 질문이 많다는 점을 알 수 있었다. 주니어 개발자라면 기술 주제 외에도 평소 어떤 기술과 프로덕트에 관심이 있는지, 어떻게 일하는 것이 바람직하고 어떤 프로페셔널로 성장하고 싶은지 그리고 협업을 할 때 어떻게 하는 것이 좋았고 아쉬웠는지 등을 면접 전에 많이 정리해두면 도움이 될 것 같다.&lt;/li&gt;
  &lt;li&gt;대표는 이미 수십, 수백명의 지원자를 면접했을 것이고 그 짬이 있기 때문에 당신이 거짓말을 한다거나 부풀려 얘기하면 바로 알아차릴 수 있다는 점을 유의해야 한다. 그래서 과장하지 말고 솔직 담백하게, 그리고 거짓말은 절대 안된다고 얘기하고 싶다.&lt;/li&gt;
  &lt;li&gt;면접을 앞두고 다른 사람과 면접 연습을 꼭 해보라고 권하고 싶다. 가능하다면 복수의 사람들과 1:N의 구조로, 한번은 지원자로 그다음은 면접관으로 역할을 바꿔가면서 하면 좋다. 여러 차례 면접 연습을 진행하고 좀 익숙해진다 싶으면 서서히 압박 면접 스타일로 질문의 난이도를 올리고 까다로운 면접관으로 빙의해서 시뮬레이션해 보는 것도 추천한다. 면접은 아무 연습 없이 그냥 가면 말하는 것도 어색하고 환경도 어색하기 때문에 잘 안될 가능성이 높은 것 같다. 이번에 면접 스터디를 만들어서 면접 연습을 했었는데 상당히 큰 도움이 되었다.&lt;/li&gt;
  &lt;li&gt;까다로운 면접관 레벨에 들어서면 면접관 역할을 맡은 사람이 지원자의 약점을 공략해보고 지원자는 지혜롭게 방어해보는 연습도 꼭 해보면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-면접-이후-연봉-협상까지&quot;&gt;(4) 면접 이후 연봉 협상까지&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인성 면접이후 thank you 이메일을 보내는 건, 압박하는 것 같기도 하고 좀 무례한 것 같기도 해서 보내지는 않았다.&lt;/li&gt;
  &lt;li&gt;최종 합격이라면 회사 대표가 이메일로 희망 연봉을 물어볼 것이다. 희망 연봉은 업계 평균과 본인의 능력을 종합적으로 고려해서 대략적인 범위를 정해야 한다. 아마 주니어라면 그 범위가 이미 거의 정해져있는 것 같지만 연봉 하한선을 정할 필요는 있을 것 같다.&lt;/li&gt;
  &lt;li&gt;주니어인데 회사에서 제시한 연봉이 좀 적다면 어떻게 하는 게 좋을까. 보고 배울 수 있는 시니어 개발자가 있고 회사의 프로덕트도 나쁘지 않다면 최소 1년 정도 일해보고 경험을 먼저 쌓는 방법을 추천하고 싶다. 경력이 쌓인다면 연봉 재협상을 하든 이직을 하든 해서 연봉을 올릴 수 있으니 처음부터 너무 조급해할 필요는 없을 것 같다.&lt;/li&gt;
  &lt;li&gt;너무 연봉만 따지기보다 시니어 개발자가 많이 있고 매력적인 서비스인데다가 개발자로서 성장할 수 있는 환경이라면 좀 더 유연하게 생각해볼 여지가 있을 것 같다.&lt;/li&gt;
  &lt;li&gt;돌이켜보면 운칠기삼인 것 같기도 하다. 가고 싶던 회사가 하필 채용이 마감되었을 수도 있고 지원했던 회사의 내부 사정으로 최종적으로 불합격하는 일도 종종 있는 것 같다. 당신이 아무리 열심히 해도 알 수 없는 이유로 뜻대로 안 될 때가 있기 때문에 회사 하나하나에 너무 집착할 필요는 없는 것 같다.&lt;/li&gt;
  &lt;li&gt;아무쪼록 이 글이 스타트업에 취업하려는 주니어 개발자들에게 조금이나마 도움이 되면 좋겠다.&lt;/li&gt;
  &lt;li&gt;Good luck!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;최종 수정 2019-05-06&lt;/p&gt;</content><author><name></name></author><category term="thoughts" /><summary type="html">지난 글 비전공자가 스타트업 개발자로 취업할 때 참고하면 좋을 것들(1)에서 회사 지원할 때 그리고 기술 면접할 때 지원자가 참고하면 좋을 것들에 대해서 다루었다. 이번 글에서는 (3) 인성 면접과 (4) 면접 이후 참고사항을 다뤄보겠다.</summary></entry><entry><title type="html">React에서 이중 페이지네이션 구현하기</title><link href="https://leejungdo.com//blog/2019/03/19/React%EC%97%90%EC%84%9C-%EC%9D%B4%EC%A4%91-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="React에서 이중 페이지네이션 구현하기" /><published>2019-03-19T15:00:00+00:00</published><updated>2019-03-19T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/03/19/React%EC%97%90%EC%84%9C-%EC%9D%B4%EC%A4%91-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://leejungdo.com//blog/2019/03/19/React%EC%97%90%EC%84%9C-%EC%9D%B4%EC%A4%91-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.html">&lt;p&gt;UI/UX 고민을 많이 할 수 밖에 없는 프론트엔드 개발자는 즐겨찾는 웹사이트에서 많은 영감과 공부할 거리를 찾을 수 있습니다. 제가 매일 몇 번씩 찾는 &lt;a href=&quot;https://media.daum.net/&quot;&gt;Daum 뉴스&lt;/a&gt;는 기술적으로 화려한 건 많이 없지만 컴포넌트를 하나 하나 보다보면 개발자가 했던 고민의 흔적을 느껴볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이를테면 다음 이미지와 같이, Daum 뉴스 기사 페이지에서 오른쪽 pane에 노출되고 있는 컴포넌트가 두 개가 있습니다. 먼저 가장 중요한 광고가 있고, 그 다음은 ‘많이 본 뉴스’ 컴포넌트가 노출되고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;daum-뉴스의-기사-페이지&quot;&gt;Daum 뉴스의 기사 페이지&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/2019-03-20-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘많이 본 뉴스’가 이 페이지에서 얼마나 중요한 컴포넌트인 지는 페이지에서 조금만 스크롤 해보면 더욱 명확해집니다. 유저가 기사를 조금씩 읽어내려가면서 일정 위치가 되면 ‘많이 본 뉴스’ 컴포넌트는 오른쪽 pane에 아예 고정되어 버립니다. 그리고 유저가 기사를 거의 다 읽어서 또 다른 중요 컴포넌트인 ‘댓글’ 목록이 나타나기 시작하면 ‘많이 본 뉴스’ 컴포넌트의 위치 고정이 해제됩니다.&lt;/p&gt;

&lt;h4 id=&quot;많이-본-뉴스-컴포넌트의-위치가-고정된-모습&quot;&gt;‘많이 본 뉴스’ 컴포넌트의 위치가 고정된 모습&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/2019-03-20-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘많이 본 뉴스’ 컴포넌트는 이 페이지에서 유저가 뉴스를 읽는다는 가장 큰 목적을 해치지 않으면서, 많지 않은 공간에 유저에게 주요 분야의 다양한 기사 목록과 전체 기사 목록을 보여주고 있습니다. 이런 의미에서 ‘많이 본 뉴스’ 컴포넌트의 목적은 유저에게 다른 흥미로운 기사를 계속 읽게끔 유도하고 사이트 내 체류시간을 늘리는 것입니다.&lt;/p&gt;

&lt;p&gt;이런 목적을 달성하기 위해서 개발자는 아마 다음과 같은 순서로 컴포넌트를 구현했을 것입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;분야별 많이 본 뉴스 데이터를 서버에서 불러온다.&lt;/li&gt;
  &lt;li&gt;사용자가 분야를 선택할 수 있게 한다.&lt;/li&gt;
  &lt;li&gt;유저가 선택한 분야의 뉴스를 렌더한다.&lt;/li&gt;
  &lt;li&gt;분야별 뉴스를 모두 한 페이지에 모두 담을 수 없으므로 페이지네이션을 구현한다.&lt;/li&gt;
  &lt;li&gt;전체보기 메뉴를 노출해서 더 많은 뉴스를 볼 수 있게끔 유도한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;https://media.giphy.com/media/2Yj0qPpLvA2Zkota9r/giphy.gif&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;자, 이제 우리도 Daum 뉴스 담당 프론트엔드 개발자가 되어 볼 수 있는 시간입니다. 우리가 연습해 볼 수 있는 좋은 주제는 바로 1번부터 4번까지입니다. 조금 더 상세하게, 우리가 구현해 볼 기능을 다음과 같이 요약해봅시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리액트를 이용해서 뉴스 데이터를 불러오고,&lt;/li&gt;
  &lt;li&gt;유저가 뉴스 메뉴를 hover하면 해당 분야의 뉴스를 불러와서 렌더하고,&lt;/li&gt;
  &lt;li&gt;분야별 뉴스에서 페이지네이션을 이용해 더 많은 뉴스를 렌더한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단순한 개념이지만 많은 서비스에서 비슷한 방식의 컴포넌트들이 많이 사용되고 있고, 그와 동시에 사용자 경험에 지대한 영향을 끼칠 수 있는 중요 기능이기 때문에 꼭 연습해보는 게 좋을 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;완성된-프로젝트&quot;&gt;완성된 프로젝트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jd1386/react-popular-articles&quot;&gt;Github repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://piquant-afternoon.surge.sh/&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;완성된-많이-본-뉴스-컴포넌트&quot;&gt;완성된 ‘많이 본 뉴스’ 컴포넌트&lt;/h4&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;https://media.giphy.com/media/2Yj0qPpLvA2Zkota9r/giphy.gif&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;프로젝트-시작&quot;&gt;프로젝트 시작&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create-react-app react-popular-articles
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;react-popular-articles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;필요한-모듈-설치&quot;&gt;필요한 모듈 설치&lt;/h3&gt;
&lt;p&gt;Service Worker와 같이 필요하지 않은 모든 내용을 삭제해준 후, 필요한 모듈을 설치해보도록 하겠습니다. 우리가 만들 컴포넌트는 데이터를 가져와야 하므로 &lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;Axios&lt;/a&gt;를 사용해야겠습니다. 또한 뉴스 기사로 보여줄 fake 데이터 API가 필요한데, 이런 목적에 적합한 &lt;a href=&quot;https://koreanjson.com&quot;&gt;KoreanJSON&lt;/a&gt;을 사용하겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 Axios부터 설치해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add axios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스타일은 간편하게 Bootstrap과 FontAwesome을 이용해보도록 하겠습니다. 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;의 head에 추가하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://use.fontawesome.com/releases/v5.7.2/css/all.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적인 세팅은 끝났습니다. 다시 한번 우리가 구현할 내용을 살펴봅시다.&lt;/p&gt;

&lt;h3 id=&quot;컴포넌트-기능-정의&quot;&gt;컴포넌트 기능 정의&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;리액트를 이용해서 뉴스 데이터를 불러오고,&lt;/li&gt;
  &lt;li&gt;뉴스 메뉴를 hover하면 해당 분야의 뉴스를 불러와서 렌더하고,&lt;/li&gt;
  &lt;li&gt;분야별 뉴스에서 페이지네이션을 이용해 더 많은 뉴스를 렌더한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;차례대로 진행해볼까요? 3개의 주요 분야(정치, 경제, 사회)가 있다고 가정하고 먼저 뉴스를 불러와야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;파일은 라이프사이클과 상태 관리가 모두 필요하므로 stateful 컴포넌트로 시작해봅시다.&lt;/p&gt;

&lt;h4 id=&quot;appjs&quot;&gt;App.js&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;최소한의 스타일은 필요하므로 다음과 같이 작성해줍니다.&lt;/p&gt;
&lt;h4 id=&quot;appcss&quot;&gt;App.css&lt;/h4&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;koreanjson을-이용해서-fake-data를-불러오자&quot;&gt;KoreanJSON을 이용해서 fake data를 불러오자&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://koreanjson.com&quot;&gt;KoreanJSON&lt;/a&gt;에 접속해서 뉴스로 쓸 만한 데이터를 가져와야 합니다. &lt;a href=&quot;https://koreanjson.com/posts&quot;&gt;/posts&lt;/a&gt; 리소스가 좋아보입니다. 총 200개의 오브젝트를 제공하고 있고 UserId당 20개의 오브젝트가 있습니다. 아래와 같이 id, title, content, UserId를 기본적으로 제공하기 때문에 바로 사용해도 무방하지만 UserId를 뉴스 분야 id라고 가정하고 진행하겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;httpskoreanjsoncomposts-응답-예시&quot;&gt;https://koreanjson.com/posts 응답 예시&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
  id: 1,
  title: &quot;대한민국은 국제평화의 유지에 노력하고 침략적 전쟁을 부인한다.&quot;,
  content: &quot;주거에 대한 압수나 수색을 할 때에는 검사의 신청에 의하여 법관이 발부한 영장을 제시하여야 한다. 대한민국은 국제평화의 유지에 노력하고 침략적 전쟁을 부인한다. 국가유공자·상이군경 및 전몰군경의 유가족은 법률이 정하는 바에 의하여 우선적으로 근로의 기회를 부여받는다. 여자의 근로는 특별한 보호를 받으며, 고용·임금 및 근로조건에 있어서 부당한 차별을 받지 아니한다. 모든 국민은 주거의 자유를 침해받지 아니한다.&quot;,
  createdAt: &quot;2019-02-24T16:17:47.000Z&quot;,
  updatedAt: &quot;2019-02-24T16:17:47.000Z&quot;,
  UserId: 1
  },
  {
    ...
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;컴포넌트-구조&quot;&gt;컴포넌트 구조&lt;/h3&gt;
&lt;p&gt;우리가 구현할 기능을 정의했으니 기능을 수행할 각 컴포넌트의 구조를 처음부터 제대로 설계하는 것이 중요합니다. 그래야 나중에 새로운 기능을 추가할 때, 기존 기능을 수정할 때, 그리고 퍼포먼스 모든 측면에서 유리합니다. 다음과 같이 App 컴포넌트 하위에는 Tabs, Articles, Button 총 3개의 컴포넌트가 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;많이-본-뉴스-컴포넌트의-내부-컴포넌트&quot;&gt;‘많이 본 뉴스’ 컴포넌트의 내부 컴포넌트&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/2019-03-20-4.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tabs 컴포넌트: 버튼 3개로 구성되어 있고 각 버튼을 호버할 때마다 해당 기사 목록의 1페이지가 뜬다.&lt;/li&gt;
  &lt;li&gt;Articles 컴포넌트: 유저가 현재 보고 있는 기사 목록&lt;/li&gt;
  &lt;li&gt;Button 컴포넌트: 이전/다음 페이지 버튼&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-coffee highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tabs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;상태-정의와-initial-data-fetching&quot;&gt;상태 정의와 initial data fetching&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; 컴포넌트에서는 어떤 상태가 필요한지 생각해봅시다. 먼저 전체 뉴스를 담을 배열 &lt;code class=&quot;highlighter-rouge&quot;&gt;allArticles&lt;/code&gt;가 필요하겠네요. &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; 함수에서 데이터를 불러오면 해당 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;allArticles&lt;/code&gt;에 넣겠습니다. 그리고 유저가 선택한 뉴스 카테고리를 담을 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentCategory&lt;/code&gt;와 유저가 현재 보고있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentArticles&lt;/code&gt;, 그리고 유저가 현재 보고있는 페이지 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPage&lt;/code&gt; 상태가 각기 필요합니다. 이와 더불어 한 페이지당 몇 개의 기사를 보여줄 지 정해야 합니다. 이번 연습에서는 페이지당 5개씩 보여준다고 하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;this.articlesPerPage = 5;&lt;/code&gt;를 App.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 함수에 추가해줍시다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;articlesPerPage&lt;/code&gt;는 상태로써 관리해야 하는 것 아닌가라고 생각하실 수도 있지만, 다른 데이터나 유저의 interaction에 영향받을 일이 없는 요소는 상수와 같이 쓰이는 게 맞습니다. 따라서 App 컴포넌트 인스턴스의 프로퍼티로 추가해주는 것입니다.
이제 App.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 함수는 아래와 같이 생겼습니다.&lt;/p&gt;

&lt;h4 id=&quot;appjs-1&quot;&gt;App.js&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'정치'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; 함수에서는 &lt;a href=&quot;https://koreanjson.com&quot;&gt;KoreanJSON API&lt;/a&gt;를 이용해 우리에게 필요한 데이터를 불러와야 합니다. 그 이후 불러온 모든 기사 데이터와 유저에게 기본적으로 보여줘야 할 ‘정치’ 카테고리의 기사를 &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; 함수를 이용해 각 상태에 추가해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articlesData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://koreanjson.com/posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articlesData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// UserId 1이 정치 카테고리라고 가정합니다&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 이제 Tabs 컴포넌트를 만들어봅시다. 다양한 방법이 있을 것 같은데, 일단 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 함수에 categories라는 배열을 추가해줍시다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'정치'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'정치'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'경제'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사회'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;굳이 id 프로퍼티가 필요한 이유는 배열을 순회하고 각 요소를 렌더하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.map()&lt;/code&gt; 함수를 써야하고, 각 요소마다 unique identifier로써 key 값에 필요하기 때문입니다. (Eslint는 순회되고 있는 요소의 인덱스값을 쓰지 말도록 권장하고 있습니다. &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md&quot;&gt;참조 링크&lt;/a&gt;) 또한 유저가 호버한 탭을 구분하기 위한 unique identifier로도 쓰일 수 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 이제 Tabs 컴포넌트를 만들어봅시다.&lt;/p&gt;

&lt;h3 id=&quot;tabs-컴포넌트&quot;&gt;Tabs 컴포넌트&lt;/h3&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tabs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nav nav-pills nav-justified&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btnClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btnClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'btn-primary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btnClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'btn-outline-primary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nav-item active p-1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`btn ${btnClassName} btn-block`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Components&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPosts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tabs&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;categories=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;currentCategory=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;좋습니다. 하지만 아직 한가지 문제가 남았습니다. 각 카테고리 버튼을 호버할 때마다 기사 목록을 바꿔주고 싶습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeCurrentCategory&lt;/code&gt; 함수를 작성해봅시다. 이 함수를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.categories&lt;/code&gt; 배열에서 유저가 선택한 카테고리를 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentCategory&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentArticles&lt;/code&gt; 상태를 변경합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPage&lt;/code&gt; 상태를 1로 바꿔주는 이유는 카테고리를 선택할 때마다 1페이지의 기사를 보여주고 싶기 때문입니다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;changeCurrentCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userSelectedCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userSelectedCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 render 함수의 Tabs 컴포넌트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeCurrentCategory&lt;/code&gt; 함수를 props로 전달합니다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tabs&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;categories=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;currentCategory=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;changeCurrentCategory=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeCurrentCategory&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전에 작성한 Tabs 함수에서는 이제 props로 전달받은 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeCurrentCategory&lt;/code&gt;를 사용해서 카테고리를 변경해야 합니다. 유저가 버튼을 hover 할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeCurrentCategory&lt;/code&gt; 함수를 실행해야 하므로 다음과 같이 버튼에 &lt;code class=&quot;highlighter-rouge&quot;&gt;onMouseEnter&lt;/code&gt; 이벤트 핸들러를 작성합시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;button
    className={`btn ${btnClassName} btn-block`}
    onMouseEnter={() =&amp;gt; changeCurrentCategory(category.name)}
  &amp;gt;
  {category.name}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;articles-컴포넌트&quot;&gt;Articles 컴포넌트&lt;/h3&gt;
&lt;p&gt;Articles 컴포넌트는 현재 유저가 보고 있는 기사 목록을 담은 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentArticles&lt;/code&gt; 상태 배열을 렌더하는 컴포넌트입니다. 특별할 게 없으므로 아래와 같이 작성해서 Tabs 컴포넌트 아래에 넣어봅시다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group-item list-group-item-action&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;article #&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mb-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;의 렌더 함수에 Articles 컴포넌트를 추가하는 것도 잊지 마세요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;render() {
  const { currentArticles, currentCategory } = this.state;

  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;Tabs
        categories={this.categories}
        currentCategory={currentCategory}
        changeCurrentCategory={this.changeCurrentCategory}
      /&amp;gt;
      &amp;lt;Articles articles={currentArticles} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 유저가 마우스 커서를 탭 아이콘에 호버할 때마다 해당 카테고리에 속하는 기사만 필터되어 뜰 것입니다. 잘 안 된다면 &lt;a href=&quot;https://github.com/jd1386/react-popular-articles&quot;&gt;깃헙 리포&lt;/a&gt;의 코드를 참조해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/YWm2ZySJeLr2v2IKcH/giphy.gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지네이션-어떻게-구현할까&quot;&gt;페이지네이션, 어떻게 구현할까&lt;/h3&gt;
&lt;p&gt;이제 우리는 페이지네이션을 구현하는 방법을 고민해봐야합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;allArticles&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentArticles&lt;/code&gt;에는 각각 모든 기사와 현재 유저가 보고 있는 5개의 기사 데이터가 담겨있습니다. 이를 이용해서 유저가 ‘다음’ 버튼을 누르면 다음 페이지의 5개 기사가 렌더되어야 하고, ‘이전’ 버튼을 누르면 이전 페이지의 5개 기사가 렌더되어야 합니다.&lt;/p&gt;

&lt;p&gt;또한 컴포넌트를 만들기에 앞서 사용자 경험에 대해서도 생각해 볼 필요가 있습니다. ‘다음’ 버튼을 계속 눌러서 마지막 페이지를 넘어서면 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentArticles&lt;/code&gt;는 빈 배열이 됩니다. 그럼 Articles 컴포넌트에 아무 것도 뜨지 않을텐데, 괜찮은 걸까요? 사용자에게 빈 데이터를 보여줄 순 없기 때문에 다시 첫번째 페이지의 기사를 렌더해보는 건 어떨까요. 돌려도 돌려도 끝나지 않는 회전목마 같이 말이죠.&lt;/p&gt;

&lt;p&gt;마찬가지로 방법으로, ‘이전’ 버튼을 계속 누르고 제일 첫 페이지를 넘어서면 (0페이지), 제일 마지막 페이지의 기사를 렌더해야 합니다.&lt;/p&gt;

&lt;p&gt;좋습니다. 그럼 먼저 할 일은 Articles 컴포넌트 아래에 Button 컴포넌트를 만들어서 렌더하는 일입니다. 아래와 같이 버튼을 만들어보세요. 유저가 ‘이전’ 버튼을 누르면 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadMoreArticles&lt;/code&gt; 함수에 인자로 ‘prev’를 넣어서 실행시키고, ‘다음’ 버튼을 누르면 인자에 ‘next’를 넣어서 실행시켜봅시다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadMoreArticles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mt-3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;btn btn-outline-dark btn-sm mr-2&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadMoreArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'prev'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fas fa-angle-left&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;btn btn-outline-dark btn-sm&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadMoreArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'next'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fas fa-angle-right&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tabs&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;categories=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;currentCategory=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;changeCurrentCategory=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeCurrentCategory&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Articles&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;articles=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loadMoreArticles=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadMoreArticles&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadMoreArticles&lt;/code&gt; 함수는 어떤 용도일까요? 유저가 누른 버튼의 속성(prev 또는 next)을 인자로 받아서 ‘prev’인 경우 이전 페이지의 기사 목록을 렌더하고, ‘next’인 경우 다음 페이지의 기사 목록을 렌더하면 됩니다.&lt;/p&gt;

&lt;p&gt;본격적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadMoreArticles&lt;/code&gt; 함수를 작성해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;loadMoreArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 상태에 저장되어 있는 allArticles와 currentCategory를 이용해서&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 유저에게 보여 줄 currentCategoryArticles를 가져온다.&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryId&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;페이지네이션 구현 원리를 살펴봅시다. 다음과 같이 9개의 요소를 가진 배열이 있다고 가정합시다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'g'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한 페이지에 5개의 요소를 보여주려면 자바스크립트 배열의 내장 메서드 중 하나인 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;slice&lt;/a&gt;를 사용하면 간편할 것 같습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt; 메서드는 원본 배열을 수정하지 않고 shallow copy를 리턴합니다. 또한 두번째 인자인 종료 인덱스에 위치한 요소는 반환되지 않음을 참고하세요.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt; 메서드로 첫번째 페이지를 표현하려면&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ['a', 'b', 'c', 'd', 'e']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 쓸 수 있겠네요. 그럼 두번째 페이지는 어떻게 할까요? 시작 인덱스와 종료 인덱스를 그만큼 이동시켜주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ['g', 'h']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예시에서 한가지 중요한 점은 한 페이지에 몇 개의 요소를 보여줄지 미리 정해져 있어야 한다는 것입니다. 우린 이미 &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 함수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.articlesPerPage = 5;&lt;/code&gt;를 추가했기 때문에 이 프로퍼티를 바로 사용하면 되겠습니다.&lt;/p&gt;

&lt;p&gt;이런 원리로 page 인자를 받으면 그 페이지의 articles만 보여주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pagedArticles&lt;/code&gt; 함수가 필요합니다. 다음과 같이 만들 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagedArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가적으로 페이지네이션을 구현하기 위해선 전체 배열에서 마지막 페이지의 값이 무엇일지 알아야 합니다. 그래야 마지막 페이지를 넘어설때 1페이지를 다시 렌더하는 등, 적절히 처리할 수 있습니다. 예를 들어 위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;allArticles&lt;/code&gt; 배열을 기준으로, ‘a’부터 ‘h’까지 모두 7개의 요소가 있습니다. 앞서 articlesPerPage를 5로 설정하였으므로 마지막 페이지는 2페이지가 됩니다. 이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;getLastPage&lt;/code&gt; 함수로 만들면 다음과 같이 할 수 있겠네요.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLastPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentCategoryArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 거의 다 되었습니다. 유저가 ‘이전’과 ‘다음’ 버튼을 클릭하면 실행될 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadMoreArticles&lt;/code&gt; 함수를 작성해봅시다. 위에서 작성한 두개의 함수가 페이지네이션 구현에 필수적으로 필요하므로, 간편하게 클로저로 구현해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;loadMoreArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategory&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryId&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagedArticles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentCategoryArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLastPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentCategoryArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articlesPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// eslint-disable-next-line default-case&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'prev'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLastPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagedArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getLastPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagedArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'next'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLastPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagedArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;currentArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pagedArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;유저로부터 받은 direction에 따라 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; 함수를 실행시키는 게 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;prevState&lt;/code&gt; 오브젝트의 state를 매번 확인합니다. 현재 페이지가 1페이지인데 유저가 ‘이전’ 버튼을 클릭하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;getLastPage&lt;/code&gt; 함수를 실행해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPage&lt;/code&gt;값을 가장 마지막 페이지로 지정합니다. 1페이지가 아닌 경우는 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;prevstate&lt;/code&gt;의 currentPage에서 1씩 빼면 되겠네요.&lt;/p&gt;

&lt;p&gt;유저가 ‘다음’ 버튼을 클릭했고 &lt;code class=&quot;highlighter-rouge&quot;&gt;prevState.currentPage&lt;/code&gt;가 아직 마지막 페이지가 아니라면 현재 페이지에서 1씩 더하면 됩니다. 다만 마지막 페이지에서 ‘다음’ 버튼을 클릭하는 경우라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentPage&lt;/code&gt;를 1페이지로 할당하면 되겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;
&lt;p&gt;리액트를 이용하면 굳이 라이브러리를 사용하지 않고도 나름 간단하게 페이지네이션을 구현할 수 있습니다. 이번 예제 프로젝트와 같이 유저가 특정 카테고리를 선택하고 거기다가 각 카테고리별로 여러 페이지로 나뉘어져 있는 상황에서도 페이지네이션의 기준점만 잘 생각하면 어렵지 않게 구현할 수 있었습니다. 물론 리팩토링할 만한 여지는 있어보이는 예제 코드이지만 리액트로 페이지네이션을 구현하고자 하신다면 참고하시고 연습해보셔도 좋겠습니다.&lt;/p&gt;</content><author><name></name></author><category term="react" /><summary type="html">UI/UX 고민을 많이 할 수 밖에 없는 프론트엔드 개발자는 즐겨찾는 웹사이트에서 많은 영감과 공부할 거리를 찾을 수 있습니다. 제가 매일 몇 번씩 찾는 Daum 뉴스는 기술적으로 화려한 건 많이 없지만 컴포넌트를 하나 하나 보다보면 개발자가 했던 고민의 흔적을 느껴볼 수 있습니다.</summary></entry><entry><title type="html">Node Express Sequelize MySQL에서 Incorrect string value 에러날 때 대처방법</title><link href="https://leejungdo.com//blog/2019/03/15/Node-Express-Sequelize-MySQL%EC%97%90%EC%84%9C-Incorrect-string-value-%EC%97%90%EB%9F%AC%EB%82%A0-%EB%95%8C-%EB%8C%80%EC%B2%98%EB%B0%A9%EB%B2%95.html" rel="alternate" type="text/html" title="Node Express Sequelize MySQL에서 Incorrect string value 에러날 때 대처방법" /><published>2019-03-15T15:00:00+00:00</published><updated>2019-03-15T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/03/15/Node-Express-Sequelize-MySQL%EC%97%90%EC%84%9C-Incorrect-string-value-%EC%97%90%EB%9F%AC%EB%82%A0-%EB%95%8C-%EB%8C%80%EC%B2%98%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="https://leejungdo.com//blog/2019/03/15/Node-Express-Sequelize-MySQL%EC%97%90%EC%84%9C-Incorrect-string-value-%EC%97%90%EB%9F%AC%EB%82%A0-%EB%95%8C-%EB%8C%80%EC%B2%98%EB%B0%A9%EB%B2%95.html">&lt;p&gt;MySQL과 &lt;a href=&quot;https://github.com/sequelize/cli&quot;&gt;Sequelize CLI&lt;/a&gt; 를 사용하는 프로젝트에서 한글 값을 칼럼에 넣으려고 할 때 아래와 같이 &lt;strong&gt;“Incorrect string value”&lt;/strong&gt;라는 에러가 뜨고 저장이 되지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2019-03-18-error-log.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원인을 살펴보니 Sequelize CLI의 &lt;code class=&quot;highlighter-rouge&quot;&gt;db:create&lt;/code&gt; 를 이용해서 데이터베이스를 생성하면 모든 칼럼의 기본 인코딩이 &lt;code class=&quot;highlighter-rouge&quot;&gt;cp1252 West European (latin1)&lt;/code&gt;으로 되어있다. 이런 이유로 한글 인코딩을 인식하지 못해서 저장하지 못하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sequelize-cli-default-charset.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;재미있는 것은 database config 파일에 아래와 같이 charset과 collate 필드를 추가했음에도 불구하고 Sequelize CLI가 제대로 반영하지 못한다. development 및 production 환경 모두에서 마찬가지였다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;database&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATABASE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATABASE_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;dialect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;define&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;charset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utf8mb4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;dialectOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;collate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utf8mb4_general_ci&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sequelize CLI를 이용하지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;sequelize.sync({ force: true})&lt;/code&gt; 로 실행하면 database config 파일의 charset과 collate 필드를 인식하고 각 테이블의 기본 인코딩 값을 설정값으로 변경해준다. 따라서 Sequelize의 문제는 아니고 Sequelize CLI로 &lt;code class=&quot;highlighter-rouge&quot;&gt;db:create&lt;/code&gt; 실행 할 때 데이터베이스 설정 파일을 pick up하지 못하는 것 같다. (Sequelize CLI 리포에 &lt;a href=&quot;https://github.com/sequelize/cli/issues/590&quot;&gt;관련 Issue&lt;/a&gt;가 있다.)&lt;/p&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;p&gt;지금까지 찾은 해결 방법은 여러가지가 있는데 그 중 하나를 선택하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;최초-데이터베이스-생성-후-mysql-콘솔에-들어가서-charset과-collate를-변경해주는-방법&quot;&gt;최초 데이터베이스 생성 후 mysql 콘솔에 들어가서 charset과 collate를 변경해주는 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -u USERNAME -p&lt;/code&gt; 으로 mysql 콘솔에 접속 후&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER DATABASE YOUR_DBNAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;&lt;/code&gt; 실행한다.&lt;/li&gt;
  &lt;li&gt;단점:
    &lt;ul&gt;
      &lt;li&gt;귀찮다.&lt;/li&gt;
      &lt;li&gt;로컬 환경, 테스트 환경, 프로덕션 환경 모두 일일이 해줘야 한다.&lt;/li&gt;
      &lt;li&gt;잊어버리기 쉽다.&lt;/li&gt;
      &lt;li&gt;일일이 다시 지정해주지 않는 이상, 자동화된 rollback 방법이 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;최초-데이터베이스-생성-후-sequel-pro에-접속해서-데이터베이스-설정을-바꿔주는-방법&quot;&gt;최초 데이터베이스 생성 후 Sequel Pro에 접속해서 데이터베이스 설정을 바꿔주는 방법&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sequelize-cli-default-charset.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;상단 ‘Database’ 메뉴 &amp;gt; ‘Alter Database’ 선택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Database Encoding에 utf8mb4와 Collation에 utf8mb4_unicode_ci 선택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단점:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;역시 귀찮다.&lt;/li&gt;
      &lt;li&gt;모든 환경에 일일이 적용시켜야 한다.&lt;/li&gt;
      &lt;li&gt;잊어버리기 쉽고 자동화된 rollback 방법이 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sequelize-dbcreate-할-때-arg를-넣는-방법&quot;&gt;sequelize db:create 할 때 arg를 넣는 방법&lt;/h3&gt;

&lt;p&gt;아래와 같이 최초 db:create 할 때 charset을 arg로 넘기는 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npx sequelize db:create --charset=utf8mb4 --env=production&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;장점:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;편하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단점:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;잊기 쉽고 자동화된 rollback 방법이 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table을-생성하는-migration-파일별로-charset을-지정해주는-방법&quot;&gt;table을 생성하는 migration 파일별로 charset을 지정해주는 방법&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'Posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;autoIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INTEGER&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DATE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utfmb4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;collate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8mb4_general_ci'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dropTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;장점:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테이블별로 인코딩을 다르게 가져갈 수 있다. (=&amp;gt; 장점이 있을까? 여러 언어권을 동시에 서비스한다면 그럴 지도 모르겠다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단점:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 테이블 생성 마이그레이션마다 추가해줘야해서 잊기 쉽고 역시 귀찮다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;migrations-폴더에-데이터베이스-charset을-변경해주는-migration-파일-추가&quot;&gt;migrations 폴더에 데이터베이스 charset을 변경해주는 migration 파일 추가&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sequelize/cli/issues/590&quot;&gt;관련 Issue&lt;/a&gt;에 있는 내용인데, 다음과 같이 migration 파일을 새로 작성하고&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;`ALTER DATABASE &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파일명을 &lt;code class=&quot;highlighter-rouge&quot;&gt;20190303000000-fix-db-charset.js&lt;/code&gt; 등으로 설정해서 다른 마이그레이션 파일이 실행되기 이전에 최초로 실행되도록 한다. 최초로 실행되어야 한다는 점이 포인트다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2019-03-18-after-migration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;장점:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1, 2번 방법에 비해서 신경쓸 일이 줄어들어서 편하다.&lt;/li&gt;
  &lt;li&gt;단순 migration 파일일 뿐이므로 필요에 따라서 Rollback 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마이그레이션 이후 Encoding과 Collation이 모두 설정한 값으로 지정되었음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2019-03-18-success.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sequelize CLI는 편해서 잘 쓰고 있긴한데 몇몇 직관적이지 않은 부분이 있어서 조금 아쉽다. 이럴 때면 Ruby on Rails의 &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_record_migrations.html&quot;&gt;ActiveRecord&lt;/a&gt;가 자체 지원하는 마이그레이션 방식이 돌이켜보면 굉장히 직관적이고 훌륭했다는 생각이 든다. Sequelize CLI도 기본 syntax와 설정 방식 등 많은 부분이 ActiveRecord로부터 영향을 받은 것으로 보인다.&lt;/p&gt;</content><author><name></name></author><category term="sequelize" /><category term="mysql" /><summary type="html">MySQL과 Sequelize CLI 를 사용하는 프로젝트에서 한글 값을 칼럼에 넣으려고 할 때 아래와 같이 “Incorrect string value”라는 에러가 뜨고 저장이 되지 않았다.</summary></entry><entry><title type="html">Mocha와 Chai로 Node API 서버를 유닛 테스트 해보자</title><link href="https://leejungdo.com//blog/2019/02/25/Mocha%EC%99%80-Chai%EB%A1%9C-Node-API-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EB%B3%B4%EC%9E%90.html" rel="alternate" type="text/html" title="Mocha와 Chai로 Node API 서버를 유닛 테스트 해보자" /><published>2019-02-25T15:00:00+00:00</published><updated>2019-02-25T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/02/25/Mocha%EC%99%80-Chai%EB%A1%9C-Node-API-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EB%B3%B4%EC%9E%90</id><content type="html" xml:base="https://leejungdo.com//blog/2019/02/25/Mocha%EC%99%80-Chai%EB%A1%9C-Node-API-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EB%B3%B4%EC%9E%90.html">&lt;p&gt;지난 글 &lt;a href=&quot;/blog/2019/02/23/KoreanJSON.com%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4.html&quot;&gt;KoreanJSON.com을 만들었다&lt;/a&gt;에서 &lt;a href=&quot;https://koreanjson.com&quot;&gt;Korean JSON&lt;/a&gt;을 어떤 이유로 만들게 되었는지 설명했었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koreanjson.com&quot;&gt;Korean JSON&lt;/a&gt;은 단순한 Rest API이지만 users, posts, comments, todos 등 여러 resource를 제공한다. 더불어 각 endpoint별로 GET, POST, PUT, DELETE 메서드를 지원하고 있다. 그래서 앞으로 resource가 더 늘어나게 될 수록 개발자가 모든 API가 제대로 작동하고 있는지 반복적으로 확인해야만 한다. 이런 작업에는 많은 시간이 소요될 수 밖에 없고, 매번 개발자의 눈으로 정상 작동 여부를 확인하는 방법으로는 그 정확성을 담보할 수도 없는 노릇이다. 따라서 이런 경우에 각 endpoint의 메서드별로, 개발자가 기대하는 값과 API가 제공하는 값이 일치하는지 여부를 자동으로 확인할 수 있는 테스트가 절대적으로 필요하게 된다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 노드 환경에서, 좀 더 정확히는 노드 환경에서 실행되는 Express 앱에서 Rest API 서버를 Mocha와 Chai를 이용해 자동으로 테스트하는 방법을 알아보겠다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jd1386/korean-json&quot;&gt;KoreanJSON 깃헙 리포&lt;/a&gt;에서 코드를 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;mocha-chai-chai-http-설치&quot;&gt;mocha, chai, chai-http 설치&lt;/h3&gt;
&lt;p&gt;먼저 이번 글에서 가장 중요한 test framework인 &lt;a href=&quot;https://www.npmjs.com/package/mocha&quot;&gt;Mocha&lt;/a&gt;와 테스트 라이브러리인 &lt;a href=&quot;https://www.npmjs.com/package/chai&quot;&gt;Chai&lt;/a&gt; 그리고 http 요청을 위한 Chai의 플러그인 &lt;a href=&quot;https://www.chaijs.com/plugins/chai-http/&quot;&gt;chai-http&lt;/a&gt;를 아래와 같이 “devDependencies”에 추가하자.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; mocha chai chai-http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;의 “devDependencies” 부분에 다음과 같이 각 모듈이 설치될 것이다.&lt;/p&gt;
&lt;h4 id=&quot;packagejson&quot;&gt;package.json&lt;/h4&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chai&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chai-http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^6.0.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;babel-설치&quot;&gt;Babel 설치&lt;/h3&gt;
&lt;p&gt;KoreanJSON은 현재 모든 .js 파일에서 ES6를 사용중이다. 테스트 또한 ES6로 작성하기 위해서 컴파일러인 Babel이 필요하다. 아래와 같이 Babel 관련 모듈을 설치해주자.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i @babel/cli @babel/core @babel/node @babel/polyfill @babel/preset-env @babel/register
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-polyfill&quot;&gt;@babel/polyfill&lt;/a&gt;과 &lt;a href=&quot;https://babeljs.io/docs/en/babel-register&quot;&gt;@babel/register&lt;/a&gt;를 설치하지 않으면 테스트 실행시 테스트 파일의 ES6 문법을 인식하지 못하는 에러가 발생하니 꼭 설치해야 한다. 또한 @babel/polyfill 같은 경우 devDependencies가 아닌 dependency에 설치해야 한다.&lt;/p&gt;

&lt;p&gt;이제 테스트를 실행할 스크립트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt; 부분에 추가해보자.&lt;/p&gt;
&lt;h4 id=&quot;packagejson-1&quot;&gt;package.json&lt;/h4&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NODE_ENV=test npx mocha --require @babel/register --require @babel/polyfill --exit ./test/**.spec.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 스크립트는 @babel/register와 @babel/polyfill을 이용해서 test 폴더 내부의 모든 spec.js 파일을 먼저 ES5로 컴파일한 후 node_modules에 설치되어 있는 mocha를 실행하는 스크립트이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;--exit&lt;/code&gt; 옵션은 테스트가 종료되면 프로세스 또한 종료하라는 내용이다. 더 많은 옵션은 &lt;a href=&quot;https://mochajs.org/#command-line-usage&quot;&gt;Mocha 공식 문서&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이제 프로젝트 root directory에서 /test 폴더를 만든 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;users.spec.js&lt;/code&gt; 파일도 만들어주자.&lt;/p&gt;

&lt;p&gt;그리고 mysql 데이터베이스 설정 파일인 config.json의 “test” 데이터베이스 관련 사항에 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;logging&quot;: false&lt;/code&gt; 옵션을 추가해주자. 이 부분을 생략하면 테스트 결과와 데이터베이스 로그가 뒤죽박죽 섞여버려 테스트 결과를 제대로 읽기 어렵다.&lt;/p&gt;

&lt;h4 id=&quot;configjson&quot;&gt;config.json&lt;/h4&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;database&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;koreanjson_test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dialect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;유저-라우터&quot;&gt;유저 라우터&lt;/h3&gt;

&lt;p&gt;이제 유저 라우터를 작성할 차례이다. 아래와 같이 /users로 GET 요청이 오면 모든 유저를 찾아서 json 형식으로 반환하는 라우터를 만들어보자.&lt;/p&gt;

&lt;h4 id=&quot;routesusersjs&quot;&gt;/routes/users.js&lt;/h4&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../models'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;테스트-데이터베이스-생성&quot;&gt;테스트 데이터베이스 생성&lt;/h3&gt;
&lt;p&gt;테스트를 작성하기 전 가장 중요한 데이터베이스가 남았다. 테스트 환경은 development나 production 환경과 다르게 별도의 test 환경이 존재한다. 따라서 mocha 테스트를 실행하는 스크립트에도 별도로 &lt;code class=&quot;highlighter-rouge&quot;&gt;NODE_ENV=test&lt;/code&gt;라는 환경변수가 추가되어 있었던 것이다. 여기서 중요한 점은 test 환경에는 development, production 환경과 구분되는, 별도의 테스트 데이터베이스가 생성되어 있어야 한다는 점이다. &lt;a href=&quot;http://docs.sequelizejs.com/manual/tutorial/migrations.html&quot;&gt;sequelize-cli&lt;/a&gt;를 사용해서 migration 하는 방법도 있지만 일단은 mysql 콘솔에서 테스트 데이터베이스를 생성해보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mysql -u root&lt;/code&gt;으로 mysql 콘솔에 들어간 후 
&lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE DATABASE koreanjson_test&lt;/code&gt;를 입력하면 koreanjson_test 데이터베이스를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;이제 본격적으로 테스트 케이스를 작성해보자.&lt;/p&gt;

&lt;h3 id=&quot;테스트-케이스-작성&quot;&gt;테스트 케이스 작성&lt;/h3&gt;
&lt;p&gt;먼저 필요한 각종 모듈들, 서버 설정 및 실행 내용을 담고 있는 app.js파일 그리고 테스트를 실행하고자 하는 User 모델을 불러온다. 그리고 chai 라이브러리에서는 should나 assert 대신 모든 브라우저에 호환이 되는 expect를 사용해보도록 하겠다. 또한 http 요청을 보내기 위해서는 chai-http 모듈을 사용해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;testusersspecjs&quot;&gt;/test/users.spec.js&lt;/h4&gt;
&lt;div class=&quot;language-coffee highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'chai'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chaiHttp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'chai-http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'../app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'../models'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'os'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chaiHttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각각의 테스트가 실행되기 전 beforeEach 함수가 실행되는데 그때 유저 테이블을 싹 다 비웠다가 다시 새롭게 샘플 유저 데이터를 채워넣는 작업이 필요하다. 그렇지 않으면 테스트를 통해 변경된 (그리고 테스트 중 잠재적으로 변경될 수 있는) 유저 데이터로 인해 테스트 데이터의 무결성에 손상이 갈 수 있다. 잘못된 데이터 샘플로는 아무리 테스트 케이스를 잘 작성해도 제대로 된 결과가 나오지 않을 테니 말이다.&lt;/p&gt;

&lt;h4 id=&quot;testusersspecjs-1&quot;&gt;/test/users.spec.js&lt;/h4&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chai'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chaiHttp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chai-http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../models'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userSeeder&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../seeders/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'os'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Users resource'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// users 테이블의 모든 레코드를 삭제한다&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 새로운 유저 데이터를 생성한다&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// User.create({...}) 또는&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// User.bulkCreate([]) 등으로 생성해도 되지만 &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// user seeder를 만들어 놓은 게 있으므로 seeder를 사용하겠다&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userSeeder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 beforeEach 함수 아래에 본격적으로 테스트케이스를 추가해보자.&lt;/p&gt;

&lt;h4 id=&quot;testusersspecjs-2&quot;&gt;/test/users.spec.js&lt;/h4&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// Test GET /users route&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET /users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 
      /users로 GET 요청이 오면 
      1. 200 코드를 반환해야 하고
      2. JSON 형식으로 된 res.body는 array로 되어 있어야 하고
      3. array는 10개의 요소를 포함해야 한다
    */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'it should GET all the users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'array'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 
      /users로 GET 요청이 오면 
      1. 200 코드를 반환해야 하고
      2. JSON 형식으로 된 res.body array의 첫번째 요소는 오브젝트여야 하고
      3. 오브젝트의 name 프로퍼티는 문자열 형식이어야 하며
      4. 그 값은 '이정도'여야 한다.
    */&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'it should GET correct users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'이정도'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm test&lt;/code&gt;를 실행하면 다음과 같이 우리가 작성한 2개의 테스가 모두 통과함을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2019-02-26.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="koreanjson.com" /><category term="testing" /><category term="mocha" /><category term="chai" /><summary type="html">지난 글 KoreanJSON.com을 만들었다에서 Korean JSON을 어떤 이유로 만들게 되었는지 설명했었다.</summary></entry><entry><title type="html">KoreanJSON.com을 만들었다</title><link href="https://leejungdo.com//blog/2019/02/23/KoreanJSON.com%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4.html" rel="alternate" type="text/html" title="KoreanJSON.com을 만들었다" /><published>2019-02-23T15:00:00+00:00</published><updated>2019-02-23T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/02/23/KoreanJSON.com%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4</id><content type="html" xml:base="https://leejungdo.com//blog/2019/02/23/KoreanJSON.com%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4.html">&lt;p&gt;최근 몇 달간 리액트를 열심히 익히다보니 작은 기능 단위로 기능 구현을 연습해오고 있다. 기능 구현 연습 방법은 먼저 내가 즐겨 보는 다음이나 네이버 뉴스에서 잘 쓰이는 기능 (예를 들어 탭을 누르면 관련 아이템이 렌더되는)을 보면, 이건 리액트로 어떻게 구현해볼 수 있을까라고 고민해본다. 그리고 해당 기능을 구현한 간단한 리액트 데모 앱을 만들어보는 방식이다. 충분한 연습을 거치고 원리를 파악한 후 응용 프로젝트를 진행해보기도 한다. 이후 해당 내용을 블로그 글로 정리하는 습관도 가지려 노력하고 있다.&lt;/p&gt;

&lt;p&gt;이런 연습 방법은 지금까지 해보니 꽤나 효과적인 것 같아서 앞으로도 계속 이런 방식을 가져가려 한다. 문제는 샘플 데이터를 구하는 것이다. 예를 들어 리액트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; 함수 안에서 fetch나 axios 등을 통해 API 데이터를 불러오고 &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; 함수로 상태에 데이터가 추가되거나 변경되어 해당 컴포넌트가 새롭게 렌더되는 방식이 리액트의 기본이다. 따라서 API 데이터를 어디에서 가져오는지, 그리고 그 데이터가 어떤 데이터인지, 내가 사용하는 데모 앱과 잘 맞는 데이터인지가 늘상 숙제였다.&lt;/p&gt;

&lt;p&gt;그래서 지금까지는 &lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;를 사용해왔다. Lorem Ipsum으로 되어있는 샘플 JSON 데이터를 Rest API로 제공해주기 때문에 사용하기가 굉장히 편하고 직관적이다. GET 뿐만 아니라 POST, PUT, PATCH, DELETE와 같은 메서드를 리소스별로 제공하기 때문에 Rest API 사용법을 익히는데에도 큰 도움이 된다. 또한 100개의 포스트, 500개의 댓글 등 많은 데이터를 제공해주고 있어서 대부분의 연습용 프로젝트에 사용하기에는 큰 무리가 없다.&lt;/p&gt;

&lt;p&gt;하지만 한가지 아쉬운 점이 있었는데, Lorem Ipsum과 한글은 다르다는 점이다. 아무리 기능 구현에 충실한 연습용 앱이라고는 하지만, 라틴어이자 알파벳 문자로 되어있는 Lorem Ipsum을 잔뜩 보고 있노라면 아무래도 현실 감각이 떨어진다. 댓글 목록 컴포넌트를 구현하고 있는데 댓글에 Lorem Ipsum이 주루룩 뜬다면 별로 댓글 같이 느껴지지는 않을 것이다.&lt;/p&gt;

&lt;p&gt;또한 한글과 알파벳은 웹에서의 느낌이 굉장히 다른 편이다. &lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;에서 제공하는 Lorem Ipsum 문장은 알파벳 문자를 사용하는 서양 개발자들에게는 친숙하기도 하면서 웹 개발과 웹 디자인 측면에서도 추가적으로 고려해야 할 요소가 특별히 없을 것이다. 하지만 한글은 한글에 좀 더 잘 맞는 font와 font-size, line-height 등이 명확히 존재하는 편이다. 따라서 Lorem Ipsum 문장으로 계속 작업을 진행하다가 똑같은 자리에 한글을 입혀놓고 보면 느낌이 사뭇 다른 건 이상한 일이 아니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;faker&lt;/a&gt; 사용을 고려해보지 않은 건 아니다. 한국어로 locale setting을 할 수 있어서 한국어를 사용할 수 있는 것이 장점이 있긴 하다. 하지만 내가 원하는 건 한국어 데이터 그 자체 뿐만 아니라 &lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;처럼 쉽고 단순한 Rest API로 한글 데이터를 받는 것이었다.&lt;/p&gt;

&lt;h3 id=&quot;그래서-korean-json을-만들었다&quot;&gt;그래서 &lt;a href=&quot;https://koreanjson.com/&quot;&gt;Korean JSON&lt;/a&gt;을 만들었다&lt;/h3&gt;

&lt;p&gt;구조는 JSONPlaceholder와 똑같다. 리소스별로 GET, POST, PUT, DELETE 메스드를 요청하면 그에 대한 응답으로 대한민국 헌법 구문을 제공한다. 이를테면 다음과 같다.&lt;/p&gt;

&lt;h3 id=&quot;유저의-요청-예시&quot;&gt;유저의 요청 예시&lt;/h3&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://koreanjson.com/posts/1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;응답-예시&quot;&gt;응답 예시&lt;/h3&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;모든 국민은 능력에 따라 균등하게 교육을 받을 권리를 가진다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;연소자의 근로는 특별한 보호를 받는다. 모든 국민은 신속한 재판을 받을 권리를 가진다. 누구든지 성별·종교 또는 사회적 신분에 의하여 정치적·경제적·사회적·문화적 생활의 모든 영역에 있어서 차별을 받지 아니한다. 근로조건의 기준은 인간의 존엄성을 보장하도록 법률로 정한다. 모든 국민은 주거의 자유를 침해받지 아니한다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-02-24T07:41:57.000Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;updatedAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-02-24T07:41:57.000Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UserId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;제공-리소스&quot;&gt;제공 리소스&lt;/h3&gt;

&lt;p&gt;현재 제공하고 있는 리소스는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유저 10명&lt;/li&gt;
  &lt;li&gt;포스트 200개&lt;/li&gt;
  &lt;li&gt;할 일 200개&lt;/li&gt;
  &lt;li&gt;댓글 200개&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;리소스별로 GET, POST, PUT, DELETE 메서드를 지원한다.&lt;/p&gt;

&lt;h3 id=&quot;오픈소스를-향한-첫-발걸음&quot;&gt;오픈소스를 향한 첫 발걸음&lt;/h3&gt;

&lt;p&gt;샘플 데이터로 데이터베이스를 채우고, 로컬 서버를 띄워서 나 혼자 쓰고 만족할 수도 있었다. 하지만 분명 나같이 한글 데이터를 원하는 사용자들이 있을 것이고 그들에게 대단하진 않지만 약간의 도움이 된다면 만족스러울 것 같았다. 특히 이제 막 웹개발을 배우기 시작했다거나, Rest API 사용법을 익히기 시작하는 한국어 사용자들이 Lorem Ipsum 대신에 멋진 내용으로 가득한 대한민국 헌법 구문을 샘플 데이터로 사용할 수 있다면 꽤나 보람찬 일이지 않을까 싶었다. 그래서 &lt;a href=&quot;https://github.com/jd1386/korean-json&quot;&gt;깃헙 리포&lt;/a&gt;에 &lt;a href=&quot;https://koreanjson.com&quot;&gt;Korean JSON&lt;/a&gt;의 코드를 올려두었다.&lt;/p&gt;

&lt;h3 id=&quot;향후-계획&quot;&gt;향후 계획&lt;/h3&gt;

&lt;p&gt;일단 API는 만들었고 잘 작동하니 여기서 멈출까 생각도 들지만 만들어놓고 보니 Node 환경에서 API 테스트는 어떻게 할 수 있을까 궁금해진다. 그래서 조만간 Mocha와 Chai로 Rest API 테스트를 공부해보고 블로그로 그 과정을 공유해보도록 하겠다.&lt;/p&gt;</content><author><name></name></author><category term="project" /><category term="koreanjson.com" /><summary type="html">최근 몇 달간 리액트를 열심히 익히다보니 작은 기능 단위로 기능 구현을 연습해오고 있다. 기능 구현 연습 방법은 먼저 내가 즐겨 보는 다음이나 네이버 뉴스에서 잘 쓰이는 기능 (예를 들어 탭을 누르면 관련 아이템이 렌더되는)을 보면, 이건 리액트로 어떻게 구현해볼 수 있을까라고 고민해본다. 그리고 해당 기능을 구현한 간단한 리액트 데모 앱을 만들어보는 방식이다. 충분한 연습을 거치고 원리를 파악한 후 응용 프로젝트를 진행해보기도 한다. 이후 해당 내용을 블로그 글로 정리하는 습관도 가지려 노력하고 있다.</summary></entry><entry><title type="html">React form에서 zxcvbn 모듈을 이용해 좀더 안전한 패스워드를 만들도록 유도하기</title><link href="https://leejungdo.com//blog/2019/02/07/React-form%EC%97%90%EC%84%9C-zxcvbn-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%80%EB%8D%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="React form에서 zxcvbn 모듈을 이용해 좀더 안전한 패스워드를 만들도록 유도하기" /><published>2019-02-07T15:00:00+00:00</published><updated>2019-02-07T15:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/02/07/React-form%EC%97%90%EC%84%9C-zxcvbn-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%80%EB%8D%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://leejungdo.com//blog/2019/02/07/React-form%EC%97%90%EC%84%9C-zxcvbn-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%80%EB%8D%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0.html">&lt;p&gt;지난 글 &lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 패스워드 일치 여부 확인하기&lt;/a&gt;에서 우리는 React 폼에서 유저가 패스워드와 패스워드 확인 인풋 필드를 입력하면 두 개의 입력값을 비교해서 일치시키도록 유도했다. 패스워드를 한번만 입력하게 하면 입력할 때 실수를 할 수 있으니 한번 더 입력하게끔 해서 패스워드를 잘못 입력하는 실수를 방지하고자 하는 의도였다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 리액트에서 &lt;a href=&quot;https://www.npmjs.com/package/zxcvbn&quot;&gt;zxcvbn&lt;/a&gt; 모듈을 이용해 유저가 입력하는 패스워드가 얼마나 위험한 패스워드인지, 혹은 안전한 패스워드인지 여부를 확인하고 그 결과를 유저에게 피드백해주는 기능을 만들어보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jd1386/github-form-password-strength-feedback-demo&quot;&gt;Github repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://react-form-password-strength-feedback-jo1lliy8f.now.sh&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;완성된-기능&quot;&gt;완성된 기능&lt;/h4&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-03.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-02.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-04.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-01.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;react-form-관련-글&quot;&gt;React form 관련 글&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/01/26/React%EC%97%90%EC%84%9C-%EC%9D%B8%ED%92%8B-%ED%95%84%EB%93%9C-validate%ED%95%98%EA%B8%B0.html&quot;&gt;React에서 인풋 필드 validate하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/06/React-form%EC%97%90%EC%84%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A4%91%EB%B3%B5-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 이메일 중복 확인하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 패스워드 일치 여부 확인하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-zxcvbn-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%80%EB%8D%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 zxcvbn 모듈을 이용해 좀더 안전한 패스워드를 만들도록 유도하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h2&gt;
&lt;p&gt;새로운 예제 앱을 만들자.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create-react-app react-form-password-strength-feedback
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;react-form-password-strength-feedback &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 프로젝트 폴더에서 필요하지 않은 모든 파일을 삭제한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt;에는 다음 내용만 남겨두고 다 삭제한다.&lt;/p&gt;

&lt;h4 id=&quot;indexcss&quot;&gt;index.css&lt;/h4&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-apple-system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Segoe UI'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Roboto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Oxygen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;'Ubuntu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Cantarell'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Fira Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Droid Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Helvetica Neue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App.css&lt;/code&gt;에는 폼을 스타일 할 수 있도록 아래와 같이 정의한다.&lt;/p&gt;

&lt;h4 id=&quot;appcss&quot;&gt;App.css&lt;/h4&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightgrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 파일의 head 내부에 Bootstrap을 불러오자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS&quot; crossorigin=&quot;anonymous&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기본-form&quot;&gt;기본 form&lt;/h2&gt;

&lt;p&gt;이제 폼에 살을 더해보자. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;에 불필요한 내용은 모두 삭제하고 렌더 함수만 남겨놓자. 그리고 렌더 함수를 다음 내용으로 교체한다.&lt;/p&gt;

&lt;h4 id=&quot;appjs&quot;&gt;App.js&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-form&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-row&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;col-md-12 mb-3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;htmlFor=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passwordInput&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;패스워드&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-control&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passwordInput&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;onChange=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleOnPasswordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderFeedbackMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;btn btn-primary btn-block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          Submit
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 렌더 함수는 지난 글 &lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 패스워드 일치 여부 확인하기&lt;/a&gt;와 동일한 구조이다.&lt;/p&gt;

&lt;h2 id=&quot;zxcvbn-모듈로-패스워드의-안전성을-확인해보자&quot;&gt;zxcvbn 모듈로 패스워드의 안전성을 확인해보자&lt;/h2&gt;
&lt;p&gt;문자열의 길이가 길 수록, 대문자와 소문자 알파벳이 섞여있을 수록, 숫자와 특수 기호가 포함되어 있을 수록 좀 더 안전한 패스워드라고 할 수 있다. 왜냐하면 안전하고 위험한 패스워드를 나누는 기준은 얼마나 알아내기 (guess) 어려운가로 나뉘기 때문이다. 문자를 하나하나 대입해서 가능한 모든 경우의 수를 대조하는 brute force와 같은 해킹에 좀 더 안전하기 위해서는 비밀번호를 털리지 않는 것이 첫번째이고 암호화 되어있는 비밀번호를 해독하지 못하도록 최대한 어렵게 만들어 놓는 것이 그 다음이다.&lt;/p&gt;

&lt;p&gt;기본적인 세팅은 끝났으니 이제 유저가 입력한 패스워드가 얼마나 안전한지 알아내야 한다. 이번 글에서는 이미 검증된 바 있는 &lt;a href=&quot;https://www.npmjs.com/package/zxcvbn&quot;&gt;zxcvbn 모듈&lt;/a&gt;을 사용해서 패스워드의 안전성을 확인해볼 것이다.&lt;/p&gt;

&lt;p&gt;사용법은 단순하다. zxcvbn 모듈을 불러와서&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zxcvbn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'zxcvbn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;zxcvbn 함수에 테스트하고자 하는 패스워드를 인자로 넣고 실행하면&lt;/p&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;passwordInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zxcvbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mypassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zxcvpasswordInfobn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 같은 오브젝트가 반환된다.&lt;/p&gt;

&lt;h4 id=&quot;zxcvbnmypassword의-실행-결과&quot;&gt;zxcvbn(‘mypassword’)의 실행 결과&lt;/h4&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-05.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;여기서 재밌는 건 인자로 넘긴 ‘mypassword’를 guess하기까지 누적된 guess count는 3,860회이고 오프라인에서 베스트의 경우는 ‘mypassword’를 guess 하는데 채 1초도 걸리지 않는다는 점이다. 누가봐도 안전해보이지 않는 ‘mypassword’는 결국 score 1을 받았다.&lt;/p&gt;

&lt;p&gt;반면 사용자도 기억하기 어려울 것 같은 ‘alskdfe12@$%’는 어떨까?&lt;/p&gt;

&lt;h4 id=&quot;zxcvbnalskdfe12의-실행-결과&quot;&gt;zxcvbn(‘alskdfe12@$%’)의 실행 결과&lt;/h4&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-06.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;최고 점수인 4점을 받아서 가장 안전한 수준의 패스워드임을 확인할 수 있다. 적당히 긴 문자열에 알파벳, 숫자, 거기다가 여러개의 특수문자까지 적당히 섞여있으니, 기억할 수만 있다면 꽤나 안전할 것 같다.&lt;/p&gt;

&lt;p&gt;zxcvbn 모듈은 이름 만큼은 친절하지 않지만 속도도 빠르고 상당히 잘만든 모듈이라는 점에는 이견이 없을 것 같다. &lt;a href=&quot;https://www.npmjs.com/package/zxcvbn&quot;&gt;npm 공식 문서&lt;/a&gt;를 보고 더 자세한 정보를 확인해보자.&lt;/p&gt;

&lt;h2 id=&quot;state와-handleonpasswordinput-함수&quot;&gt;state와 handleOnPasswordInput 함수&lt;/h2&gt;
&lt;p&gt;zxcvbn 모듈에 대해서 알게 되었으니 이제 zxcvbn 모듈을 활용해서 유저가 입력한 패스워드의 안전성을 검사해보자.&lt;/p&gt;

&lt;p&gt;먼저 state에는 zxcvbn 함수의 테스트 결과 중에서 score를 담을 것이다.&lt;/p&gt;

&lt;h4 id=&quot;appjs-1&quot;&gt;App.js&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;passwordScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnPasswordInput&lt;/code&gt; 함수는 유저가 인풋 필드를 입력할 때마다 실행되어 zxcvbn 함수에 유저의 패스워드 입력값을 인자로 전달해 실행한 후 반환받은 오브젝트의 score 값을 passwordScore state에 저장한다.&lt;/p&gt;

&lt;h4 id=&quot;handleonpasswordinput-함수&quot;&gt;handleOnPasswordInput 함수&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;handleOnPasswordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passwordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zxcvbn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passwordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;passwordScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;renderfeedbackmessage-함수&quot;&gt;renderFeedbackMessage 함수&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderFeedbackMessage&lt;/code&gt; 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;passwordScore&lt;/code&gt; state의 값에 따라 각기 다른 메세지를 포함한 div 요소를 반환한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;passwordScore&lt;/code&gt;가 0이면 말도 안되게 위험한 패스워드라는 점과 4점이면 더할 나위없이 훌륭하게 안전한 패스워드라는 점이 부각되어야 한다. 참고로 text-danger나 text-success와 같은 클래스들은 모두 Bootstrap에서 지원하는 클래스이다.&lt;/p&gt;

&lt;h4 id=&quot;renderfeedbackmessage-함수-1&quot;&gt;renderFeedbackMessage 함수&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;renderFeedbackMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;passwordScore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passwordScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Way too weak!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text-danger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Weak strength!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text-danger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Moderate strength!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text-warning'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Good strength!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text-success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Powerful strength!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text-primary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passwordHelp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`form-text mt-2 ${className}`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`${message}`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;프로젝트-완성&quot;&gt;프로젝트 완성&lt;/h2&gt;
&lt;p&gt;이제 다 되었다. 패스워드 인풋 필드에 다양한 패스워드를 입력해보자. 당신의 패스워드 안정성를 입력과 동시에 확인할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;완성된-기능-1&quot;&gt;완성된 기능&lt;/h4&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-03.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-02.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-04.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-08-01.png&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jd1386/github-form-password-strength-feedback-demo&quot;&gt;Github repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://react-form-password-strength-feedback-jo1lliy8f.now.sh&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react-form-관련-글-1&quot;&gt;React form 관련 글&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/01/26/React%EC%97%90%EC%84%9C-%EC%9D%B8%ED%92%8B-%ED%95%84%EB%93%9C-validate%ED%95%98%EA%B8%B0.html&quot;&gt;React에서 인풋 필드 validate하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/06/React-form%EC%97%90%EC%84%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A4%91%EB%B3%B5-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 이메일 중복 확인하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 패스워드 일치 여부 확인하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-zxcvbn-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%80%EB%8D%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 zxcvbn 모듈을 이용해 좀더 안전한 패스워드를 만들도록 유도하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="react" /><category term="form" /><summary type="html">지난 글 React form에서 패스워드 일치 여부 확인하기에서 우리는 React 폼에서 유저가 패스워드와 패스워드 확인 인풋 필드를 입력하면 두 개의 입력값을 비교해서 일치시키도록 유도했다. 패스워드를 한번만 입력하게 하면 입력할 때 실수를 할 수 있으니 한번 더 입력하게끔 해서 패스워드를 잘못 입력하는 실수를 방지하고자 하는 의도였다.</summary></entry><entry><title type="html">React form에서 패스워드 일치 여부 확인하기</title><link href="https://leejungdo.com//blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="React form에서 패스워드 일치 여부 확인하기" /><published>2019-02-07T04:00:00+00:00</published><updated>2019-02-07T04:00:00+00:00</updated><id>https://leejungdo.com//blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://leejungdo.com//blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html">&lt;p&gt;지난 글 &lt;a href=&quot;/blog/2019/02/06/React-form%EC%97%90%EC%84%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A4%91%EB%B3%B5-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 이메일 중복 확인하기&lt;/a&gt;에서 우리는 React 폼에서 유저가 이메일을 입력하면 데이터베이스에 저장되어 있는 유저 정보 중 중복된 이메일이 없는지 확인하고 그 결과를 유저에게 피드백 해주는 기능을 만들었다.&lt;/p&gt;

&lt;p&gt;보통의 웹사이트에서 회원가입 폼을 생각해보면 유저에게 패스워드를 입력하고 다시 한번 입력하게 한다. 그 이유는 유저도 실수를 할 수 있기 때문에 유저가 의도한 패스워드를 제대로 입력했는지 재차 확인하고자 하는 의도이다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 리액트를 이용해서 폼에서 유저가 입력하는 패스워드가 제대로 입력되었는지 확인하고 그 결과를 유저에게 피드백해주는 기능을 만들어보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jd1386/react-form-password-confirmation-demo&quot;&gt;Github repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://react-form-password-confirmation-bftg0rvv4.now.sh/&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;완성된-패스워드-일치-여부-확인-기능&quot;&gt;완성된 패스워드 일치 여부 확인 기능&lt;/h4&gt;
&lt;div style=&quot;display: flex; flex-direction: row; justify-content: center; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;/assets/img/2019-02-07-01.png&quot; /&gt;
  &lt;img src=&quot;/assets/img/2019-02-07-02.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;react-form-관련-글&quot;&gt;React form 관련 글&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/01/26/React%EC%97%90%EC%84%9C-%EC%9D%B8%ED%92%8B-%ED%95%84%EB%93%9C-validate%ED%95%98%EA%B8%B0.html&quot;&gt;React에서 인풋 필드 validate하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/06/React-form%EC%97%90%EC%84%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A4%91%EB%B3%B5-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 이메일 중복 확인하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 패스워드 일치 여부 확인하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/02/07/React-form%EC%97%90%EC%84%9C-zxcvbn-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%80%EB%8D%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%EC%8A%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 zxcvbn 모듈을 이용해 좀더 안전한 패스워드를 만들도록 유도하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h2&gt;
&lt;p&gt;새로운 예제 앱을 만들자.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create-react-app react-form-password-confirmation
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;react-form-password-confirmation &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 프로젝트 폴더에서 필요하지 않은 모든 파일을 삭제한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt;에는 다음 내용만 남겨두고 다 삭제한다.&lt;/p&gt;

&lt;h4 id=&quot;indexcss&quot;&gt;index.css&lt;/h4&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-apple-system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Segoe UI'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Roboto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Oxygen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;'Ubuntu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Cantarell'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Fira Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Droid Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Helvetica Neue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App.css&lt;/code&gt;에는 폼을 스타일 할 수 있도록 아래와 같이 정의한다.&lt;/p&gt;

&lt;h4 id=&quot;appcss&quot;&gt;App.css&lt;/h4&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightgrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 파일의 head 내부에 Bootstrap을 불러오자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS&quot; crossorigin=&quot;anonymous&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기본-form&quot;&gt;기본 form&lt;/h2&gt;

&lt;p&gt;이제 폼에 살을 더해보자. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;에 불필요한 내용은 모두 삭제하고 렌더 함수만 남겨놓자. 그리고 렌더 함수를 다음 내용으로 교체한다.&lt;/p&gt;

&lt;h4 id=&quot;appjs&quot;&gt;App.js&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-form&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-row&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;col-md-12 mb-3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;htmlFor=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passwordInput&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;패스워드&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-control&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passwordInput&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;onChange=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleOnPasswordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;col-md-12 mb-3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;htmlFor=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;confirmPasswordInput&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;패스워드 확인&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`form-control ${this.confirmPasswordClassName()}`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;confirmPasswordInput&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;onChange=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleOnConfirmPasswordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderFeedbackMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;btn btn-primary btn-block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          Submit
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 렌더 함수는 지난 글 &lt;a href=&quot;/blog/2019/02/06/React-form%EC%97%90%EC%84%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A4%91%EB%B3%B5-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0.html&quot;&gt;React form에서 이메일 중복 확인하기&lt;/a&gt;와 동일한 구조이다. 몇가지 특이점이 있다면:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;두개의 인풋 필드, passwordInput과 confirmPasswordInput이 있고&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 input field validation 방법과 마찬가지로 유저가 passwordInput 필드에 입력하기 시작하면 onChange 이벤트에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnPasswordInput&lt;/code&gt; 함수에 입력값을 전달할 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유저가 confirmPasswordInput 필드에 입력하기 시작하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnConfirmationPasswordInput&lt;/code&gt; 함수에 입력값을 전달할 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderFeedbackMessage&lt;/code&gt; 함수는 유저가 입력한 패스워드가 일치하는지, 피드백 메세지를 리턴할 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그럼 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnPasswordInput&lt;/code&gt; 함수와 &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnConfirmPasswordInput&lt;/code&gt; 함수를 완성해보자.&lt;/p&gt;

&lt;h2 id=&quot;state-handleonpasswordinput-함수-handleonconfirmpasswordinput-함수&quot;&gt;state, handleOnPasswordInput 함수, handleOnConfirmPasswordInput 함수&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnPasswordInput&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnConfirmPasswordInput&lt;/code&gt; 함수는 유저가 각각의 필드에서 입력한 값을 전달받아 state에 저장하는 함수이다. 이를 위해 우선 state에 password와 confirmPassword를 추가해보자.&lt;/p&gt;

&lt;h4 id=&quot;appjs-1&quot;&gt;App.js&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;confirmPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음 각각의 함수를 완성해보자.&lt;/p&gt;

&lt;h4 id=&quot;handleonpasswordinput-함수&quot;&gt;handleOnPasswordInput 함수&lt;/h4&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;handleOnPasswordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passwordInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt