<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kay on the rails</title>
    <description>Kay as known as Hannal walks on the rails
</description>
    <link>http://blog.hannal.com/</link>
    <atom:link href="http://blog.hannal.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 16 Jan 2019 13:44:30 +0000</pubDate>
    <lastBuildDate>Wed, 16 Jan 2019 13:44:30 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>테슬라 모델 X 구매기</title>
        <description>&lt;p&gt;얼마 전에 테슬라 모델 X를 샀다. 전기차 보조금을 받지 못하다보니 조금이라도 저렴하게 사려고 여러 방법을 모색했다. 돌이켜보면 복잡하거나 어려운 건 없으며 이미 여러 곳에 도움이 되는 정보가 많은데, 내 상황을 기준으로 구매 과정을 정리해본다.&lt;/p&gt;

&lt;p&gt;분명 이 글이 구매 과정에 도움이 될 터이니 구매한다면 내 테슬라 리퍼럴 코드를 사용해주시라. :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ts.la/kyeongmook93899&quot;&gt;https://ts.la/kyeongmook93899&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;구매-방법-별-테슬라-종류&quot;&gt;구매 방법 별 테슬라 종류&lt;/h2&gt;

&lt;p&gt;리스 등을 제외한 구매하는 방법에 따라 테슬라는 크게 세 가지 종류가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반 차량&lt;/li&gt;
  &lt;li&gt;인벤토리 차량&lt;/li&gt;
  &lt;li&gt;테슬라코리아의 플릿카 중고판매 (이하 플릿카)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일반 차량은 정식 경로(?)이자 일반화 된 구매 차량이다. 테슬라 홈페이지에서 차량 옵션을 지정하고 계약하면 공장에서 주문 내용에 맞는 차량을 생산한다. 장점은 옵션을 입맛대로 지정할 수 있고, 단점은 다른 두 종류에 비해 비싸고 출고하는 기간이 길다.&lt;/p&gt;

&lt;p&gt;인벤토리 차량은 여러 이유로 창고에 대기하는 &lt;em&gt;새 차&lt;/em&gt;이다. 그래서 계약하면 일반 차량에 비해 빠르게 출고 받으며, 경우에 따라서는 할인을 조금 해준다. 단점은 옵션이 적용된 완성 차량을 사는 것이므로 내가 원하는 옵션이 적용된 차량을 사지 못할 수 있다.&lt;/p&gt;

&lt;p&gt;플릿카는 법인 등이 한 번에 다수를 구매하는 플릿 판매를 뜻하는데, 전시, 시승 등 여러 용도로 테슬라 차량을 테슬라 코리아도 구매한다. 이런 차량을 판매하는 것이다. 중고차를 파는 것이므로 가격이 저렴한데, 차에 따라 주행 거리, 상태, 옵션이 다르므로 가격은 제각각이다.&lt;/p&gt;

&lt;p&gt;인벤토리 차량과 플릿카는 홈페이지 등에 나오지 않으므로 매장에 전화해서 재고 등을 직접 문의하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;향상된-오토파일럿&quot;&gt;향상된 오토파일럿&lt;/h2&gt;

&lt;p&gt;구매할 때 “향상된 오토파일럿”은 꼭 추가하길 추천한다. 만약 이 옵션을 뺄 것이라면 다른 전기차를 사는 게 가격이나 충전 인프라 등을 고려해 더 낫다. 테슬라 차주 사이에서는 오토파일럿 옵션을 뺄 것이라면 차라리 차량을 빼고 오토파일럿을 사라는 우스개소리가 나올 정도로 테슬라의 오토파일럿(옵션명 : 향상된 오토파일럿)은 만족스럽다.&lt;/p&gt;

&lt;h2 id=&quot;선납금-오토캐시백&quot;&gt;선납금 오토캐시백&lt;/h2&gt;

&lt;p&gt;차량 구매에 들어가는 돈을 카드로 결제하면 일정 비율로 현금을 돌려주는 카드 상품으로 오토캐시백이 있다. 요즘은 1% 중후반에서 2% 초중반까지 돌려주는 것 같다.&lt;/p&gt;

&lt;p&gt;나는 일반 할부로 구매하므로 선납금에 대해 오토캐시백을 활용할 수 있었다. 선납금은 계약금을 포함하는데, 계약금을 먼저 납입한 뒤 출고할 때쯤 나머지 선납금 잔금을 납입한다. 그래서 오토캐시백도 두 번에 걸쳐 나눠서 진행하면 된다. 예를 들어 총 선납금을 3,000만원으로 잡으면 계약금 1,000만원에 대해 오토캐시백 적용하고, 잔금 2,000만원을 납입할 때 오토캐시백을 적용하면 된다.&lt;/p&gt;

&lt;p&gt;오토캐시백은 웹에서 검색하면 여러 업체가 나온다. 혹은 네이버 까페에서 오토캐시백으로 검색하면 활동이 왕성한 까페 몇 개가 나오는데, 그곳에서 상담 신청을 하면 연락이 온다. 주의할 점은 테슬라 코리아가 판매하는 차량에 대해 오토캐시백이 안 되는 카드사가 있다는 점이다. 오토캐시백 상담자에게 꼭 확인하자. 캐시백 비율은 카드사에서 직접 받는 것보다 중개/영업인(?)에게서 받는 것이 더 좋다. 예를 들어 하나카드 오토캐시백은 1% 초중반인데, 중개/영업 업체 끼고 하나카드 오토캐시백을 진행하면 1% 중반 이상 받는다.&lt;/p&gt;

&lt;p&gt;다음과 같이 오토캐시백을 받는 결제가 진행된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;오토캐시백을 진행할 카드사 선택. 기존에 사용하는 카드로도 가능하나 이 경우 신규 고객 유치가 아니기 때문에 캐시백 비율이 줄어든다.&lt;/li&gt;
  &lt;li&gt;오토캐시백 받을 금액을 정함.&lt;/li&gt;
  &lt;li&gt;자신이 선택한 카드사로부터 가상계좌번호를 받으면 그곳에 계약금을 입금.&lt;/li&gt;
  &lt;li&gt;결제에 사용할 카드에 해당 금액에 대해 특별한도가 승인됨. 자신이 기존에 보유한 카드 한도가 계약금 보다 낮아도 무방하다. 예치한 계약금에 대해 특별한도 처리가 되기 때문이다. 이 금액은 테슬라 코리아쪽에 결제를 할 때 빠져 나간다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;선납금 잔금도 2~4번 과정을 그대로 반복한다. 잔금은 출고 방식에 따라 초기 견적 내용과 달라지므로 최종 잔금 안내를 받고 나서 잔금에 대한 오토캐시백을 진행하자.&lt;/p&gt;

&lt;p&gt;차량 계약금과 선납금은 전화 통화로 결제한다. 결제 금액을 분할할 수 있다. 나는 차량을 직접 등록하는 등 몇 가지 이유로 최종 잔금이 확정될 때까지 잔금 액수가 몇 번 변동되었다. 그래서 변동되지 않을 만한 단위와 나머지 자잘한 금액으로 분할해서 결제했다. 무슨 말이냐면 예를 들어 잔금이 2,XXX만원이 될 것으로 예상된다면 오토캐시백으로 2,000만원을 신청하고, 잔금을 결제할 때 테슬라 코리아에 2,000만원과 나머지 금액으로 나눠서 결제하겠다고 요청한 것이다. 오토캐시백을 받으려면 먼저 오토캐시백을 적용받을 금액을 예치해야 하고 이 과정이 몇 시간 걸릴 수도 있는데, 잔금이 정확하게 최종 확정되는 건 오토캐시백 준비를 마친 이후 단계이기 때문이다.&lt;/p&gt;

&lt;p&gt;당연한 얘기지만 차량 구매 금액에 대한 오토캐시백이다. 등록비나 부대 비용은 오토캐시백 대상이 아니다.&lt;/p&gt;

&lt;h2 id=&quot;차량-자가-등록&quot;&gt;차량 자가 등록&lt;/h2&gt;

&lt;p&gt;차량 등록을 직접 했다. 대행으로 진행하면 차량 번호를 못 고르며 대행비가 들지만, 직접 등록하면 자동차등록소에서 제시하는 후보군 중 하나를 고를 수 있고 대행비도 아낀다. 절차도 간단하다.&lt;/p&gt;

&lt;p&gt;먼저 테슬라 코리아측의 내 담당 OA에게 혹은 차량 출고 담당자에게 차량 등록을 직접 할 것이라고 알려준다. 차량 출고 담당자는 선납금을 모두 치를 때쯤 정해져 연락이 온다. 자가 등록을 한다고 하면 테슬라 코리아에서 필요한 서류를 등기로 보내준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리스 계약서 (리스 구매인 경우, 리스사에서 제공)&lt;/li&gt;
  &lt;li&gt;세금계산서&lt;/li&gt;
  &lt;li&gt;테슬라코리아 위임장&lt;/li&gt;
  &lt;li&gt;테슬라코리아 사용인감계&lt;/li&gt;
  &lt;li&gt;자동차 제작증&lt;/li&gt;
  &lt;li&gt;자동차 배출가스 인증서&lt;/li&gt;
  &lt;li&gt;자동차 소음인증서&lt;/li&gt;
  &lt;li&gt;자동차 제원표&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구매자는 주민등록등본(법인은 법인등기부등본)과 자동차 보험증권 사본만 준비하면 된다.&lt;/p&gt;

&lt;p&gt;자동차 보험은 차대번호를 테슬라코리아로부터 받으면 가입할 수 있다. 주의할 점은 자동차보험 개시일이 자동차 등록일과 같거나 이전이어야 한다. 나는 자동차 등록을 하려는 날과 출고하는 날이 주말 제외하면 하루 차이라서 보험개시일을 출고일에 맞추는 실수를 했다. 당연히 자동차 등록은 거부되었고 부랴부랴 자동차보험을 해약하고 새로 가입했다.&lt;/p&gt;

&lt;p&gt;자동차등록은 아무 자동차등록소에서 해도 된다. 주민등록 상 거주지에 따라 공채 비용이 발생한다. (2019년 1월 16일 내용 보완)&lt;/p&gt;

&lt;p&gt;자동차등록소에 가서 자동차 신규등록 신청서를 작성하고 제출한다. 접수하는 데 2,000원, 인지료 3,000원 &lt;em&gt;현금&lt;/em&gt;이 필요하다. 임시 번호판은 필요 없다. 자동차 번호는 미리 정해진 후보들 중 하나를 선택하는 것이다. 모두 마음에 들지 않으면 다음 날 등록 신청 과정을 다시 진행해도 된다. 번호를 고르면 등록 신청이 접수된다. 다음은 징수과에 가서 세금(취등록세)을 낸다. 세금은 신용카드로 결제할 수 있다. 약 700만원 정도인데 2019년엔 감면 금액이 줄어들기 때문에 납부할 세금이 더 늘어난다. 징수과에서 징수를 마치고 확인을 받으면 차량 등록이 끝난다.&lt;/p&gt;

&lt;p&gt;차량 등록이 끝나면 선택한 차량 번호를 들고 번호판 제작과에 가서 번호판을 만든다. 일반 하얀 색 번호판과 전기차에 사용하는 파란 색 번호판이 가격이 다른데, 파란 색 번호판이 더 비싸다. 전기차이므로 반드시 파란 색 번호판을 만들 필요는 없어서 일부러 차량 외관 색에 어울리게 흰색 번호판을 고르는 경우도 있다. 번호판이 파란 색이어야만 친환경 차량 혜택을 받는 것이 아니며, 친환경 차량이라는 걸 알아보기 용이한 장점이 있다.&lt;/p&gt;

&lt;p&gt;…고 알고 있었는데, 잘못된 내용이다. 내 경우 흰색 번호판으로 만들었다가 찝찝해서 파란색 번호판으로 변경/제작했다. 알고보니 이는 행정 착오이며, 2017년 6월 9일 이후 출고된 전기차는 파란색 번호판 장착이 의무이다. (2019년 1월 16일 내용 보완)&lt;/p&gt;

&lt;p&gt;번호판은 긴 것으로 만들어야 한다. 번호판과 나사, 저공해 차량 스티커를 받으면 모든 과정이 끝난다. 번호판 가드(가이드)는 테슬라에서 제공하므로 받지 않아도 되며, 당연히 번호판도 테슬라 코리아에서 달아준다.&lt;/p&gt;

&lt;h2 id=&quot;자동차-보험&quot;&gt;자동차 보험&lt;/h2&gt;

&lt;p&gt;자동차 보험은 사람 마다 조건이 천차만별이므로 자동차보험 견적 업체를 이용해 비교 견적을 받으면 된다. 내 경우 가장 비싼 견적과 가장 저렴한 견적의 금액이 약 20만원 가까이 차이났다. 적용할 수 있는 할인 항목이 있으니 보험사 별로 견적을 받을 때 해당 항목으로 할인이 얼마나 되는 지 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;차선유지장치&lt;/li&gt;
  &lt;li&gt;긴급제동장치 (전방충돌방지)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;테슬라 차량 펌웨어 v9에는 블랙박스 기능이 추가됐지만, 이걸로 블랙박스 할인이 가능한지는 모르겠다. 차선유지장치는 현재(2018년 12월) 기준으로 대부분 보험사에 할인 항목으로 있는 것으로 보이고, 긴급제동장치는 일부 보험사에서만 할인해주는 것 같다. 해당 기능은 차량에 부가 설치한 것이 아닌 기본 탑재라고 대답하면 된다. 나는 블랙박스, 만 6세, 차선유지장치, 대중교통이용에 대해 할인을 받아 20% 가까이 할인 받았다. 또 보험사에 따라서는 특정 결제 방법에 대해 캐시백을 해주는데, 난 이 부분에서도 3만원을 캐시백 받았다.&lt;/p&gt;

&lt;p&gt;보험 가입할 때 블랙박스 장착 증빙, 차선유지장치 증빙을 할 수 없으므로 할인 항목에서 제외한다. 출고 후 전화를 걸어 증빙자료인 사진을 보내서 할인 받을 금액을 환급 받는다.&lt;/p&gt;

&lt;p&gt;자동차 보험 가입 담보 중 “자기신체손해”와 “자동차 손해”를 선택하는 부분이 있는데, 자동차 상해가 보험비는 좀 더 높지만 조건이 좋다. 자기신체손해는 진단에 따른 부상 급수에 따라 보험금이 지급되고 자동차 상해는 실비 100%를 지급하기 때문이다. 그런데 내가 가입한 보험사에서는 다른 실손보험과 중복 보상을 하지 않는다. 이미 나는 실손보험에 가입했기 때문에 고민 끝에 자기신체손해를 선택했다. 이 부분은 보험사와 상담해보길 권한다.&lt;/p&gt;

&lt;h2 id=&quot;전기차에-유용한-결제-카드와-전기차-충전-카드&quot;&gt;전기차에 유용한 결제 카드와 전기차 충전 카드&lt;/h2&gt;

&lt;p&gt;결제에는 크게 두 가지 카드를 많이 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BC그린카드&lt;/li&gt;
  &lt;li&gt;신한EV카드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 부분에 대한 자세한 내용은 &lt;a href=&quot;https://cafe.naver.com/teslaownersclub&quot;&gt;한국 테슬라 오너스 클럽&lt;/a&gt;에 잘 정리된 글, &lt;a href=&quot;https://cafe.naver.com/teslaownersclub/2274&quot;&gt;충전 카드와 할인용 신용 카드에 대한 이해
충전 카드와 할인용 신용 카드에 대한 이해&lt;/a&gt;를 참고하자. 이 글에서는 내 상황에 맞춘 내용만 정리하자면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;거주지 주차장에 공용 완속 충전기(파워큐브)가 있어서 이 충전 시설 이용하는 데 신한EV 카드 사용&lt;/li&gt;
  &lt;li&gt;이외 공용 충전 서비스에 결제 카드로 BC그린카드 사용&lt;/li&gt;
  &lt;li&gt;하이패스 결제 카드로 신한EV 카드 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;신한EV카드의 경우 신한EV카드 + 신한하이패스로 신청해야 한다. 두 카드를 따로 따로 신청해도 되지만 번거롭다.&lt;/p&gt;

&lt;p&gt;BC그린카드는 BC카드에서 발행하므로 입맛에 맞는 금융권 카드사의 카드로 신청하면 된다. 나는 연회비가 없는 하나BC그린카드 v1 으로 신청했다. 주의할 점은 이 카드는 하나카드 모바일 앱에서는 검색이 안 되므로 웹에서 검색해서 주문하면 된다.&lt;/p&gt;

&lt;p&gt;충전용 카드는 환경부에서 발급하는 카드와 한국전기차충전서비스(줄여서 한전충)에서 발급하는 해피차저 카드를 주로 사용한다. 전기차 충전 업체가 다양하므로 자신의 환경과 상황에 맞는 카드를 발급 받으면 되는데, 환경부 카드와 한전충 카드로 대부분 불편을 겪지 않고 소화할 수 있다.&lt;/p&gt;

&lt;p&gt;해피차저 카드와 환경부 카드 모두 차량 등록하기 전, 그러니까 차량 번호를 발급 받기 전에 해당 카드를 발급 받을 수 있다. 해피차저 카드는 아무 차량 번호로 카드를 먼저 발급 받고, 이후에 차량 번호가 나오면 기존에 입력한 차량 번호를 실제 차량 번호로 수정하면 된다. 환경부 카드의 경우 웹페이지에서 차량 번호를 변경할 수 없는데, 전화(1661-9408)해서 변경해달라고 하면 된다. 카드를 신청하면 실물 카드가 우편으로 배송되는데, 실물 카드 수령 전에 카드번호가 먼저 나온다.&lt;/p&gt;

&lt;h2 id=&quot;하이패스&quot;&gt;하이패스&lt;/h2&gt;

&lt;p&gt;전기차 할인이 되는 하이패스는 차량 등록을 해야 구매할 수 있다. 주로 AP 500과 AP 700 제품을 사용하는 것 같은데, 난 하이패스 카드를 언제든 꼈다 뺐다 할 수 있는 AP 500을 샀다. 정리하면 나는 AP 500 기기에 신한 하이패스 카드를 꽂으며, 후불형인 이 하이패스 카드에 신한EV 카드를 연동하였다. 이렇게 조합하면 톨게이트 비용 50%를 캐시백 받는데, 전기차는 50% 할인을 받으므로 결국 톨게이트 비용이 0원인 셈이다. 아쉬운 점은 이 프로모션이 2019년 2월에 종료된다는 점인데, 소문에 따르면 기간이 연장될 것을 기대하고 있는 분위기이다.&lt;/p&gt;

&lt;p&gt;민자 고속도로의 경우 전기차 할인이 안 되는 곳이 있다(많이 혹은 대부분).&lt;/p&gt;

&lt;h2 id=&quot;충전-어댑터&quot;&gt;충전 어댑터&lt;/h2&gt;

&lt;p&gt;일부 플릿카를 제외하면 요즘 구매하는 차량은 거의 모두 북미형 충전 포트이다. 테슬라 독자 포트이므로 테슬라에서 운영하는 충전소 외엔 충전하지 못하는데, 국내 충전 시설을 이용하려면 충전기와 테슬라를 연결해주는 어댑터를 따로 마련해야 한다. 이 어댑터를 테슬라 코리아에서 판매할 수 없는 상황이어서 차량 구매 시 어댑터 가격을 빼주는데, 테슬라 온라인 스토어 등에서 직접 구매해야 한다.&lt;/p&gt;

&lt;p&gt;급속 충전 어댑터는 차데모를 사야 한다. 문제는 2018년 4월에 공표된 우리나라의 표준 충전 방식에 차데모 어댑터를 사용할 수 없으며, 차데모 어댑터를 사용할 수 있던 기존 충전기도 점차 줄어든다는 점이다. 즉 차데모 어댑터는 시한부이다. 꽤 비싸기 때문에 구매 여부를 잘 생각해야 한다. 나는 고민 끝에 안 샀다.&lt;/p&gt;

&lt;p&gt;완속 충전은 J1772 어댑터를 사면 된다. 차데모와 마찬가지로 테슬라 온라인 스토어에서 판매한다.&lt;/p&gt;

&lt;p&gt;테슬라 온라인 스토어는 테슬라 웹페이지에서 국가를 북미로 선택하면 접근할 수 있다. 직구는 되지 않으므로 배송 대행 서비스를 이용해야 한다. 배송은 매우 느려서 테슬라 온라인 스토어에서 배송 대행지까지 물품이 도착하는 데 10~14일 정도 소요된다. 나는 블랙 프라이데이 등 연말 상황이라서 배송 대행지에서도 7일 넘게 시간이 소요됐다. 차데모나 J1772 어댑터가 필요하다면 넉넉잡아 출고 전에 한 달 정도 시간을 염두에 두고 일찌감치 주문하길 추천한다.&lt;/p&gt;

&lt;h2 id=&quot;블랙박스&quot;&gt;블랙박스&lt;/h2&gt;

&lt;p&gt;차체가 워낙 커서 주차 상태에서 테러 당할 여지가 있다. 모델 X를 주차면이 좁은 곳에 세우면 주차면을 거의 꽉 채우고도 앞으로 머리가 빼꼼 나와서 문콕이나 범퍼 충돌을 당하는 경우가 많아 보인다. 그래서 블랙박스를 주차 중에도 동작하는 상시전원으로 사용하고자 했다. 상시 전원으로 블랙박스를 사용하려면 OBD 2에 연결하거나 보조 배터리를 사용하는데, 나는 고민 끝에 보조 배터리를 추가하여 블랙박스를 상시로 켜둔다. 테슬라의 12V 배터리는 여느 내연차 보다 용량이 작다고 한다. 그래서 자칫 12V 배터리를 과용하다 방전시키는 경우가 있다고 한다. 거대한 배터리를 품고 있는 전기차인데 정작 상시전원으로 12V 배터리를 사용하는 건 내연차 보다 더 제약을 받을 수 있다니 모순되게 느껴진다.&lt;/p&gt;

&lt;p&gt;OBD 2에 연결하여 사용하는 데 성공한 차주에 따르면 아직 별 문제는 없다고 한다.&lt;/p&gt;

&lt;h2 id=&quot;커뮤니티&quot;&gt;커뮤니티&lt;/h2&gt;

&lt;p&gt;테슬라 관련 커뮤니티가 몇 곳 있는데, &lt;a href=&quot;https://cafe.naver.com/teslaownersclub&quot;&gt;한국 테슬라 오너스 클럽&lt;/a&gt;은 기본으로 가입하길 추천한다. 이름처럼 꼭 테슬라 차주가 아니더라도 가입하고 활동할 수 있으며, 유용한 정보가 많다.&lt;/p&gt;

&lt;h2 id=&quot;출고&quot;&gt;출고&lt;/h2&gt;

&lt;p&gt;미리 잡은 출고 일시에 출고지(강서 서비스센터)로 가면 된다. 신분증과 차량 등록증을 가져가면 되며, 차량을 직접 등록했다면 번호판도 가져간다. 강서 서비스센터 인근에 딱히 식사할 만한 곳이 많진 않으니 출고 전후에 식사를 할 것이라면 시간 여유를 둘 필요가 있다.&lt;/p&gt;

&lt;p&gt;테슬라 차량의 마감은 악명이 높다. 단차나 도장 등 문제를 꼼꼼히 살펴보자. 인도했다고 해서 모르쇠로 대응하지 않으며, 언제든 친절하게 단차 등 마감 문제에 대해 대응하고 해결해준다고 한다. 테슬라 키팝(간단히 말해서 차 열쇠) 두 개, 모바일 충전 커넥터, 월 커넥터, 인도 확인증 받으면 출고는 끝난다. 모델 X 7인승엔 작은 차량용 소화기가 제공되는데, 국민권익위원회에 따르면 &lt;a href=&quot;https://www.acrc.go.kr/acrc/board.do?command=searchDetail&amp;amp;menuId=050505&amp;amp;method=searchDetailViewInc&amp;amp;boardNum=71229&amp;amp;currPageNo=1&amp;amp;confId=4&amp;amp;conConfId=4&amp;amp;conTabId=0&amp;amp;conSearchCol=BOARD_TITLE&amp;amp;conSearchSort=A.BOARD_REG_DATE+DESC%2C+BOARD_NUM+DESC&quot;&gt;2019년 하반기부터 모든 차량에 의무 설치하도록 한다&lt;/a&gt;고 한다.&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Dec 2018 02:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2018/12/newbies-buying-guide-for-tesla-model-x/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2018/12/newbies-buying-guide-for-tesla-model-x/</guid>
        
        <category>테슬라</category>
        
        <category>모델X</category>
        
        <category>구매기</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>생각 출력거름망</title>
        <description>&lt;p&gt;말을 하거나 글을 쓰는 게 갈수록 힘에 부친다. 출력거름망이 늘어가기 때문이다. 사소하게는 오타 확인부터 시작해 맞춤법과 단어 뜻을 확인한다. 글이나 말 내용과 무관하지만 나와 조금이라도 연관된 이해관계자를 2008년부터 의식하고, 몇 년 전부터는 아직 몸과 머리에 익지 않은 정치적 올바름이나 꼰대성억제 거름망도 덧붙였다.&lt;/p&gt;

&lt;p&gt;말 한 마디, 문장 하나 쓰는 데 이렇게까지 해야 하나 생각하기도 했다. 그런데 그렇게까지 해서 굳이 생각을 출력하지 않아도 괜찮더라. 아니다. 괜찮은 정도가 아니라 더 낫다. 그렇게까지 하지 않은 말이나 글을 남발했다. 내 말과 글 대다수는 세상에 그렇게까지 가치있는 영향을 끼치지 않는다. 그래서 출력하는 것과 출력하지 않는 차이가 크지 않다. 질과 양을 꾸준하고 일정하게 유지한다면 의미있게 차이나겠지만, 거름망 여러 겹을 거치는 의지력이 너무 많이 든다.&lt;/p&gt;

&lt;p&gt;내가 말하거나 글로 쓰려는 생각을 표현하는 사람이 많다. 내 취향에 안 맞고 미묘하게 내 생각과는 다르곤 하지만, 그 차이 때문에 굳이 비싼 의지력을 들일 필요는 없다. 예전엔 들였는데 이제는 의지력이 달려서 아껴 써야 한다.&lt;/p&gt;

&lt;p&gt;내가 바라는 해결책이 아니긴 하다. 여러 겹으로 작용하는 거름망에 익숙해져 거름망 모두를 한두 겹 거름망에 들어가는 의지력만으로도 통과하며 생각을 표현하고 싶다. 그런데 각 출력거름망은 고정되지 않아서 꾸준히 들여다보고 갱신해야 한다. 거름망을 통과하는 것도 벅찬데, 거름망 관리도 해야 한다.&lt;/p&gt;

&lt;p&gt;개인 홈페이지부터 시작해 20년 넘게 유지한 개인 공간을 앞으로 어떡할 지 고민해본다.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Feb 2018 02:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2018/02/the-filters/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2018/02/the-filters/</guid>
        
        <category>생각표현</category>
        
        <category>블로그</category>
        
        <category>정치적 올바름</category>
        
        <category>political correctness</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>소울부스터 개발 후기</title>
        <description>&lt;p&gt;최근에 1년 동안 여성 맞춤 속옷을 제조하고 판매하는 소울부스터와 함께 일했다. 지난 1년을 돌아보는 후기를 적어본다. 참고로 기술 얘기 보다는 개발 과정(production)을 이야기하는, 말 그대로 개발 후기이다.&lt;/p&gt;

&lt;p&gt;이 글은 글자가 많다. 다 읽기 귀찮으면 “세 줄 요약”과 “마무리”만 봐도 된다.&lt;/p&gt;

&lt;h2 id=&quot;세-줄-요약&quot;&gt;세 줄 요약&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;소울부스터에 임시 개발 총괄자로 참여하여 프로젝트를 개시하고, 출시하여 운영했다.&lt;/li&gt;
  &lt;li&gt;함께 개발팀도 구축했다.&lt;/li&gt;
  &lt;li&gt;소울부스터는 연 이륙하기 시작했고 개발자를 충원하고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-첫-만남&quot;&gt;1. 첫 만남&lt;/h2&gt;

&lt;p&gt;2년 다닌 회사를 퇴사한 지 얼마 안 되어 지인 소개로 &lt;a href=&quot;https://www.soulbooster.co.kr&quot;&gt;소울부스터&lt;/a&gt;를 만났다. 여성 맞춤 속옷을 직접 제조하고 판매하는 사업으로 창업한 지 얼마 안 된 시기였고, 온라인 서비스를 직접 개발하기 위해 소프트웨어 개발팀(이하 개발팀) 구축을 모색하고 있었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.soulbooster.co.kr&quot;&gt;&lt;img src=&quot;/assets/uploads/2018/01/soulbooster-image.png&quot; alt=&quot;사진 출처 : 소울부스터&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.soulbooster.co.kr&quot;&gt;사진 출처 : 소울부스터&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;많은 회사가 소프트웨어 개발자(이하 개발자)를 뽑기 힘들고 어렵다며 아우성이다. 그들 말엔 온도 차가 있긴 하다만, 어쨌든 인력 시장이라는 측면에서 수요자는 다양해지고, 수는 늘고, 수요자의 사업 환경은 급변하여 수요는 빠르게 늘고 있는 데 반해 아직 공급은 수요를 못따라간다. 특히 괜찮은(?) 개발자 공급은 더욱 더 그렇다.&lt;/p&gt;

&lt;p&gt;난 자체 개발하지 말고 쇼핑몰 제품을 구입하거나 쇼핑몰 호스팅 서비스로 먼저 서비스를 출시하는 걸 조심스레 권했다. 대개는 잘 만든 솔루션을 쓰는 것이 낫다. 일정이 변수가 아닌 상수에 가깝게 명확해져서 장사라는 쇼핑몰의 사업 본질을 실행하고 가설을 검증하는 데 필요한 기간이 짧고 예측 가능하기 때문이다. 물론 입맛에 딱 맞지 않은 부분도 있겠지만, 대개 그런 부분은 사업 운용에 핵심이 아닌 경우가 많다. 핵심은 팔려는 제품이 고객에게 가치를 전달하는 것이다.&lt;/p&gt;

&lt;p&gt;소울부스터 박수영 대표는 소울부스터가 제공하는 가치는 고객 마다 다른 체형을 진단하여 몸에 잘 맞는 속옷을 제안하는 것이라 했다. 체형 진단을 위한 퀴즈 알고리즘을 중요한 사용자 경험으로 제공하고, 그러한 고객 경험을 서비스 시작부터 내재화해야 하기 때문에 개발팀을 초기부터 구축해야 한다고 했다. 동의했다.&lt;/p&gt;

&lt;p&gt;합류 논의는 서로 신중했다. 난 소울부스터가 추구하는 가치와 그 가치에 접근하는 방법에 공감했지만, 내가 잘 모르는 사업 아이템이어서 목표에 이르는 과정이 잘 그려지지 않아 조심스러웠다. 박수영 대표 역시 첫 개발자 영입을 신중하고 조심스러운 입장으로 진행하고 있었다. 서로 조심스러웠지만, 박수영 대표는 마냥 개발을 미룰 순 없다고 생각했는지 실행 방법을 논의하자고 했다. 우리는  고심한 끝에 실행 계획을 수립했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;체형 진단 퀴즈 서비스와 쇼핑몰 개발을 내가 총괄하여 목표 일정에 맞춰 출시한다.&lt;/li&gt;
  &lt;li&gt;소울부스터는 개발자 구인을 계속 진행한다.&lt;/li&gt;
  &lt;li&gt;우리의 목표는 소울부스터에 개발팀이 구축되고 연이륙하는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내가 정식으로 합류할 지 여부는 프로토타입 버전을 개발한 뒤에 다시 논의하기로 했다. 그렇게 우리의 협업은 시작되었다.&lt;/p&gt;

&lt;h2 id=&quot;2-소울부스터-개발-과정&quot;&gt;2. 소울부스터 개발 과정&lt;/h2&gt;
&lt;p&gt;구현에 사용할 도구(기술 스택)를 선택하는 중요한 기준은 개발 공정과 개발팀 두 가지를 구축한다는 목표에 근간을 두었다.&lt;/p&gt;

&lt;h3 id=&quot;back-end&quot;&gt;Back-end&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Application Server : Python 3, Django&lt;/li&gt;
  &lt;li&gt;DBMS, Storage : MySQL 5.7, Redis&lt;/li&gt;
  &lt;li&gt;OS : Ubuntu 16 LTS&lt;/li&gt;
  &lt;li&gt;Infrastructure : Amazon Web Service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;소울부스터는 나와 처음 만나기 전에 체형을 진단하는 퀴즈 알고리즘을 이미 상당히 설계한 상태였다. 데이터 관계와 논리 체계가 상당히 정형화 되어 있었는데, 향후 더 확장해서 활용할 가능성과 의도가 보였다.&lt;/p&gt;

&lt;p&gt;아니, 가능성과 의도가 보인 정도가 아니라 출시 버전에 넣기엔 너무 스펙이 크니 줄이자고 제안할 정도였다. 난 글자로 길게 설명하고 떠드는 걸 좋아하는데 박수영 대표는 나보다 더했다. 정말 온갖 정보를 고객에게 주고 싶어했다. 그 마음은 좋지만, 서비스 기획자 경험 상 우리만 힘들지 고객은 제대로 읽지 않을 가능성이 컸다. 박수영 대표 주변에서도 비슷한 피드백을 줬는지 알고리즘을 초기 기획에 비해 좀 더 압축하고(줄인 게 아니라 압축이다) 글자 양도 줄였는데, 여전히 내 기준으로는 너무 많았다. 너무 친절한데… 이것도 팀이 성장하는 과정이라 생각하고 더 잔소리(?)하지 않고 기획대로 구현하기로 했다.&lt;/p&gt;

&lt;p&gt;그런 점에서 Back-end 프로그래밍 언어로 &lt;a href=&quot;https://www.python.org&quot;&gt;Python&lt;/a&gt;이 적합했다. Python은 쉽고 실용적이며 생산성이 좋다. 생태계가 활발하여 좋은 도구도 많으며, 다양한 용도로도 사용할 수 있다. 특히 최근엔 데이터 처리나 분석에 적극 활용되고 있다. 그래서 쇼핑몰과 퀴즈 서비스를 만들기에도 적절하고, 퀴즈 알고리즘이 더 고도화되고 데이터가 많아졌을 때에도 유용하며, 데이터 욕심이 많고 고객이 원하면 재빨리 제공하고 싶어 몸이 달아오르는 박수영 대표의 요청에 대응하려면 쉽고 유연한 Python이 제격이었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt;는 Python으로 웹 애플리케이션 서버를 개발할 때 많이 사용된다. 나는 Django의 여러 기능 중 Admin 기능을 무척 좋아하는데, Django Admin 기능을 이용하여 손쉽고 빠르게, 그리고 확장성 있게 서비스 관리 도구를 개발할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/hello.kaycha/photos/a.1543127105756752.1073741829.439007509502056/1542628302473299/&quot;&gt;&lt;img src=&quot;/assets/uploads/2018/01/django-admin-speech-on-djangogirls-seoul-2017.png&quot; alt=&quot;DjangoGirls Seoul 2017 11월 세미나에서 발표한 “날로 먹는 Django Admin 활용”&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.facebook.com/hello.kaycha/photos/a.1543127105756752.1073741829.439007509502056/1542628302473299/&quot;&gt;DjangoGirls Seoul 2017 11월 세미나에서 발표한 “날로 먹는 Django Admin 활용”&lt;/a&gt; 중에서&lt;/p&gt;

&lt;p&gt;서비스를 첫 출시할 때엔 관리 도구가 없더라도 당장 문제는 없다. 여차하면 개발자가 출동하여 해결해도 된다. 그러다보니 관리 도구 개발은 후순위로 밀리고 서비스 출시일까지 사용단 기능을 개발하는 데 일정을 맞추기 일쑤이다. 그래도 시간이 촉박하니 이해할 수 있긴 하지만, 달려야 할 때 관리 도구가 미비하여 발목을 잡을 우려가 있다. 서비스 사용량이 늘고 다뤄야 할 자료가 많아지면 협업과 분업이 중요하다. 잘 만든 서비스 관리 도구는 팀의 업무 효율을 높이고 안정성을 높이며, 팀에 필요한 정보를 유통하는 데 기여한다. 그래서 관리 도구를 제대로 준비해놓지 않으면 사업이 성장하느라 한창 바쁠 때 티도 안 나고 개발할 맛도 별로 없는 관리 도구 만드느라 개발팀이 병목이 되기 십상이다.&lt;/p&gt;

&lt;p&gt;물론 서비스 관리 도구를 고도화하는 건 한도 끝도 없다. 저기 앉아 있는 개발자에게서 여유가 느껴지면 막 이것 저것 추가하고 고쳐달라고 말하고 싶다. 하다 못해 차트라도 그려주거나 버튼이라도 예쁘게 해달라고 하고 싶지 않던가. 하지만 한정된 자원으로 높은 실행력을 내야 하는 스타트업은 적정선에서 끊어야 한다. 그 적정선 수준까지는 Django Admin으로도 충분히 빠르고 강력하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;이외 환경은 사용자가 많거나 자료가 많거나 개발 편의성이 좋은 점을 기준으로 선택했다.&lt;/p&gt;

&lt;h3 id=&quot;front-end&quot;&gt;Front-end&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Web browser : IE 9 이상&lt;/li&gt;
  &lt;li&gt;HTML 5, CSS 3, JavaScript(ECMA 6), Vue.js 2 + Webpack 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Front-end 기술스택은 기준이 명확했다. 인터넷 익스플로러 8(IE 8) 이하 버전은 지원하지 않는다. 2017년에도 여전히 한국에선 IE 8 점유율을 쓰는 시대 저항 세력이 있지만, 한정된 자원으로 서비스를 개발해야 하는 스타트업의 현실적인 한계가 있었다. 그리고 서비스 이용자 중 모바일 사용자가 훨씬 많을 것이라 확신했다. 난 서비스 출시 버전에선 IE 8를 지원하지 않는 대신 좀 더 나은 기술로 고객의 서비스 사용 경험을 증대시키고 개발 효율을 높이자고 제안했고, 박수영 대표는 흔쾌히 수용했다. 실은 제발 IE 8은 지원하지 맙시다! 에 가까웠다. 😭&lt;/p&gt;

&lt;p&gt;소울부스터는 의류 쇼핑몰이라는 점과 박수영 대표의 성향을 고려 했을 때 사용단 UI 수정이 많을 거라 예상했다. 실제로 매우 많았다. 그래서 현대 UI 프로그래밍에 적합한 도구가 필요했는데, 지금이나 그 당시나 React.js, Angular가 주요 축이다. 난 React.js와 Angular의 장점을 제공하면서도 학습과 활용이 상대적으로 쉬운 &lt;a href=&quot;https://vue.js&quot;&gt;Vue.js&lt;/a&gt;를 선택했다. React.js와 Angular에 비해서는 사용자 층이나 생태계가 크진 않았지만, 빠르게 성장하고 있었고 사용하기 쉬웠으며, 무엇보다도 친절하고 다정한 한국어 자료가 잘 정리되어 있었다. React.js나 Angular 숙련자를 영입하기 쉽지 않다면 구인한 Front-end개발자가 학습해서라도 활용할 상황을 염두에 뒀다. React.js나 Agnular 경험자라면 어렵지 않게 Vue.js를 사용할 수 있으며, 이 셋과 관련된 기술을 모르더라도 Vue.js는  React.js나 Angular에 비해 쉽게 입문할 수 있다고 판단했다. 왜냐하면 내가 그랬으니까.&lt;/p&gt;

&lt;p&gt;시행착오는 있었지만, Vue.js는 만족스러웠다. 부분적으로 그리고 보수적으로 도입했는데, 기술 스택이 너무 복잡해지지 않으면서도 개발 효율이 상승했으며 성능과 기능도 만족스러웠다. 그리고 반짝 두각을 드러내다 사라지지 않고 빠르게 점유율이 늘어서 Vue.js 경험자도 빠르게 늘고 있어서 면접 자리에서 Vue.js를 사용해봤거나 학습 중인 개발자를 만나는 빈도도 늘고 있다.&lt;/p&gt;

&lt;h3 id=&quot;기타&quot;&gt;기타&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Slack/Jandi&lt;/li&gt;
  &lt;li&gt;Trello&lt;/li&gt;
  &lt;li&gt;Bitbucket&lt;/li&gt;
  &lt;li&gt;MailChimp&lt;/li&gt;
  &lt;li&gt;아임포트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나는 주로 원격 근무를 한다. 제품이나 서비스를 운영하고 있거나 개발 총괄자가 있는 프로젝트에서 원격 근무는 해봤지만, 프로젝트 시작부터 원격 근무를 해본 적은 없었다. 프로젝트 초기엔 팀과 소통을 많이 하기 때문에 다소 걱정이 들었다. 하지만 소프트웨어 개발자는 나 한 명이니 개발 관련하여 얼굴 맞대고 논의하는 일은 바보같은 코드를 짠 3일 전의 나를 오늘의 내가 구박하는 그런 경우가 대부분이었다. 그래서 일주일에 1~2회 정도 사무실에 출근하고, 소통 채널을 적극 활용하여 원격 근무를 해도 협업에 큰 지장이 없도록 노력했다.&lt;/p&gt;

&lt;p&gt;이슈 빈도가 빈번하지 않거나 외부 상황에 의존하는 일이 일정할 땐 원격 근무가 별 문제는 없었다. 물론 비동기로 소통을 나누기 때문에 동기식 소통에 익숙한 사람에겐 불편할 수도 있다. 다행히 박수영 대표는 팀에 엄청 많은 일을 할당했고, 동기식으로 협업해서는 도저히 일정을 맞출 수 없었다. 각자 알아서 업무 맥락(context)을 관리하며 비동기로 업무를 해치워야 했고, 뜻하지 않게 비동기식 협업이 동작했다. 😂&lt;/p&gt;

&lt;p&gt;나는 온라인 협업 도구 사용으로 비동기로 협업하더라도 효율이 떨어지지 않게 유도하려고 노력했다. 그렇다고 엄격하게 도구 사용 규칙을 정하거나 강제하지 않았다. 핵심 원칙을 하나 정하고, 그 원칙을 지키도록 유도했다. 그 원칙이란 바로 공개와 개방이다. 되도록이면 &lt;a href=&quot;https://trello.com&quot;&gt;Trello&lt;/a&gt;와 &lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt;/&lt;a href=&quot;https://www.jandi.com&quot;&gt;Jandi&lt;/a&gt;를 사용하여 이슈를 팀 내에서는 누구나 확인할 수 있게 공개했다. Slack/Jandi나 email, Trello 어디에도 기록이 남지 않은 업무 요청을 가끔 반려하기도 했다.&lt;/p&gt;

&lt;p&gt;박수영 대표는 서비스 기획자 역할도 하고 있었으므로 사소한 이슈라도 거의 모든 email에 참조자에 참여시켰다. 그래도 정보 불일치 상황을 피하고자 출근할 땐 진행 상황과 주요 이슈를 동기화했다. 몇 가지 아쉬운 점은 있지만, 아직 출시하지 않은 제품이나 서비스를 개발하는 단계에서도 원격 근무가 동작할 수 있는 가능성을 발견하기도 했고, 해결해야 할 문제도 발견했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://iamport.kr&quot;&gt;아임포트&lt;/a&gt;는 결제 대행(Payment Gateway) 서비스 연동을 대신해주는 중개 서비스이다. 대행을 대신한다니 뭔가 복잡하게 보이는데, 아임포트를 사용하면 번거롭고 짜증나는 PG연동 작업을 아주 간편하게 해치울 수 있다. 게다가 PG를 하나만 연동할 경우 무료이며, 복수 개 PG를 연동하더라도 한 번만 결제하면 되므로 사용하지 않을 이유가 없었다. 게다가 아임포트는 결제 기능 구현 일정에 영향을 미치는 외부 의존도를 상당히 낮춰줬다. 외부 의존도가 높은 이슈가 많을수록 일정 추정이 어려워지고 팀 스트레스를 높이기 때문에 우린 아임포트에게 많은 도움을 받은 셈이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mailchimp.com&quot;&gt;MailChimp&lt;/a&gt;는 Non-paid 마케팅 채널 중 하나인 email 마케팅을 하는 데 매우 유용하다. 개발자의 지원이 없이도 email 마케팅을 수행하고 운영하는 데 필요한 기술 요소를 활용할 수 있으며, MailChimp가 머신러닝으로 최적화하여 제안하는 여러 가설과 실행 방법은 비숙련자의 가설과 계획보다 나은 경우가 많다. 그래서 email 마케팅에 필요한 기술 지원에 내가 손을 쓸 일은 없었으며, 회원가입, 주문 안내 등 안내 email을 발송하는 용도로 MailChimp의 서비스 중 하나인 Mandrill사용했다.&lt;/p&gt;

&lt;h2 id=&quot;3-소프트웨어-개발팀-구축&quot;&gt;3. 소프트웨어 개발팀 구축&lt;/h2&gt;
&lt;p&gt;소프트웨어 개발을 해본 적이 없거나 모르는 창업자는 어떤 분야 개발자가 팀에 필요한 지, 경력은 어느 정도여야 하는 지, 어떤 사람이어야 하고, 어떤 기술을 다룰 줄 알아야 하는 지 궁금해하곤 한다. 모두 챙겨야 할 요건이긴 하다. 하지만 전제해야 할 것이 두 가지 있다. 스타트업 팀 구축(building)을 주제로 강연할 때 마다 일관된게 주장하는 내용이기도 하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;창업자가 해결하고자 하는 문제를 풀고 싶어 하는 사람이어야 한다.&lt;/li&gt;
  &lt;li&gt;회사와 함께 성장하는 지속 가능한 팀을 함께 만들어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;많은 창업자가 개발팀이 필요하다고 하지만 대화를 나눠보면 실제로는 개발팀이 목표가 아니라 제품이나 서비스가 목표인 경우가 많다. 사업의 목적과 목표가 소프트웨어 개발이 아니라면 틀린 생각은 아니지만, 개발팀이 필요한 것과 개발팀이 만들어낼 결과물이 필요한 것은 구분해야 한다. 후자라면 꼭 내부 개발팀을 고집할 필요가 없다. 오히려 내부 개발팀을 구축해서 실행력이 더뎌지거나 품질 낮은 제품을 만들기도 하고, 적지 않은 돈과 시간과 정신 에너지를 쓰고 개발팀을 해체하는 경우가 무척 많다.&lt;/p&gt;

&lt;p&gt;개발팀과 함께 창업의 이유(why)를 함께 고민하고, 그 문제를 풀 방법을(how) 모색하여 고객에게 적합한 제품이나 서비스(what)가 나와야 한다. 그래서 개발자 개개인은 전문 기술 분야를 갖고 있더라도 팀은 문제를 해결하는 데 필요한 기술 스택을 어떻게든 소화할 수(풀스택) 있어야 한다. 풀스택이라 함은 능력이나 경력이 될 수도 있지만 더 중요한 건 문제를 풀겠다는 태도(마음)이다.&lt;/p&gt;

&lt;p&gt;그런 점에서 소울부스터는 개발자 영입이 쉽진 않았다. 아무래도 여성 맞춤 속옷 사업 아이템에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;여성&lt;/code&gt;이 큰 인상을 끼치고, 적어도 내 지인이나 인터뷰를 본 남성 개발자 중에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;여성&lt;/code&gt; 속옷과 관련된 주제에 문제를 고민하는 경우는 없었다. 그래서 인터뷰를 볼 때 소울부스터가 해결하고자 하는 문제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;맞춤&lt;/code&gt;이라는 것에 초점을 두고자 했다. 박수영 대표가 내게 들려준 비전과 창업 이유를 최대한 기술과 개발로 풀어서 전달하려 노력했다.&lt;/p&gt;

&lt;p&gt;인터뷰 볼 때 중요시 여긴 또다른 요소는 서비스 운영 경험이었다. 박수영 대표는 실행력이 좋고, 또 성격도 급한 편이다. 필요하거나 중요한 일이면 설령 그게 하기 싫거나 까다로운 일이라도 망설이지 않고 기꺼이 직접 실행하는 사람이다. 이런 대표자의 실행력은 서비스를 운영하여 사업 실적이 바로 바로 발생하는 실 운영 환경에서 개발자에게 압박과 부담으로 작용한다. 그런 상황에 일정 기간 노출된 경험이 필요했다.&lt;/p&gt;

&lt;p&gt;개발팀의 중요 고객 중 하나인 내부 고객, 그러니까 개발팀이 만든 도구를 사용하는 비개발팀 동료을 위한 관리 도구를 고도화하는 업무도 지루하고 재미없는 경우가 많다. 잘 드러나지 않는달까? 그래서 새로운 제품이나 기능을 만드는 건 좋아하지만 서비스 운영에 필요한 개발 업무는 싫어하는 개발자도 있다. 먹고 살아야 하니 일은 하지만 발휘하는 집중력에 차이가 크면 개발자 개인과 개발팀 혹은 회사 모두 불행한 상황에 놓인 것이나 마찬가지이다. 인내할 줄 알아야 한다. 더 나아가 그런 환경에서도 같은 문제에 대해서 더 나은 해결책을 모색하는 호기심을 유지하고 실행하는 체력과 자기 관리를 할 수 있어야 한다. 그걸 넘어서 아예 서비스 운영 개발을 좋아하면 더 좋고.&lt;/p&gt;

&lt;p&gt;박수영 대표에게 이런 생각을 피력했고, 이럴 경우 생각보다 개발팀 구축에 시간이 오래 걸릴 수 있다는 걸 일러두었다. 그 생각보다 오래 걸린 시간이 그 생각보다 더 오래 걸리긴 했지만, 마침내 Front-end와 Back-end 각 한 명씩 구인하는 데 성공했다.&lt;/p&gt;

&lt;p&gt;서비스를 출시한 이후 한결 개발자 구인 기회가 많아졌다. 출시 전에는 아무리 잘 설명해봐야 실제로 동작하는 눈에 보이는 실체가 없으니 회사 정체성은 여성 속옷 쇼핑몰에 그쳤다. 소울부스터에서 고심 끝에 만들고 계속 진보하는 체형 진단 퀴즈 알고리즘이 고객에게 어떤 가치를 주는 지 입사 지원자에게 확신시키기 어려웠다. 하지만 서비스를 출시하고 직접 공장에서 제조한 제품을 고객에게 팔고, 퀴즈 알고리즘을 사용하는 고객 경험과 고객 응대 경험이 쌓이자 팀의 정체성은 더 뚜렷해졌다. 나는 그런 점들이 어우러져 입사 지원 수도 늘고 회사의 비전을 미리 살펴보고 관심있는 사람이 지원하는 빈도가 늘었다고 생각한다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;함께 프로젝트를 하기로 한 지 만 1년이 됐다. 나는 시간 당 비용을 청구했는데, 서비스 안정화 이후 내가 프로젝트에 들이는 시간이 확 줄었고 그만큼 내 수입도 (무척) 줄었다 😔. 그렇다. 박수영 대표와 함께 정한 우리의 목표에 도달한 것이다. 개발팀을 구축했고, 회사와 팀은 성장하고 매출도 상승하며 연 이륙을 시작하고 있었다.&lt;/p&gt;

&lt;p&gt;얼마 전 우리는 계약을 공식 종료했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2018/01/soulbooster-product-unboxing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소울부스터 팀은 여전히 실행력을 유지하고 있고, 제품에 만족하는 고객도 계속 늘고 있는 것 같다. 직접 돈 주고 제품을 산 내 아내도 소울부스터 제품에 만족하고 있다. 그래서 두 번 샀다. 난 프로젝트를 개시하여 출시하고, 운영하며 안정화하고, 개발팀 구축도 함께 하며 작지만 야무지고 단단하게 성장하는 팀을 곁에서 보았기에 여러모로 소울부스터에 정이 간다. 소울부스터의 성공을 기원하며 개발 후기를 마쳐본다.&lt;/p&gt;

&lt;p&gt;아참, 소울부스터에서 시니어 개발자를 충원하고 있다고 한다. 소프트웨어적 상상력을 발휘하기 좋은 사업 아이템이자 사업 비전이라 생각한다. 관심있는 개발자는 recruit@soulbooster.co.kr 로 문을 두드려 보길 추천해 본다. 추천인 코드는 hannal (농담). 아니면 내게 자리를 마련해달라고 연락을 해도 좋다. 위에 명기된 기술 스택을 경험했다면 좋겠지만, 그렇지 않더라도 서로 적합하다면 문제 될 것 없다. 문제가 안 된다는 건 현 소울부스터 개발팀이 살아있는 사례라서 말할 수 있다.&lt;/p&gt;

&lt;p&gt;One more thing. 소울부스터처럼 서비스 개발부터 개발팀 구축, 운영까지, 혹은 프로젝트를 의뢰나 문의하실 분은 kay@hannal.net 으로 문의하세요. 😍&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2018년 1월 12일 추가 : 소울부스터에서는 샘 방지 위생 팬티인 시즈더데이를 전문으로 취급하는 쇼핑몰인 &lt;a href=&quot;http://www.seizetheday.co.kr/&quot;&gt;시즈더데이&lt;/a&gt;를 2017년 12월에 출시했다. 팬티 제품은 브레지어와 달리 가슴 체형 진단을 하지 않아도 되고, 회원가입을 하지 않아도 손쉽게 주문할 수 있도록 별도 쇼핑몰을 구축한 것인데, 흥미로운 점은 쇼핑몰 호스팅 서비스를 사용한 점이다. 개발팀을 보유한 회사의 대표가 이런 판단을 실제로 실행하는 게 생각보다 쉽지 않다. 정말 사업 측면에서 놀라운 실행력이다. 개발자로서 이런 사업 실행력과 판단에 박수를 보내본다.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jan 2018 02:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2018/01/soulbooster-production-story/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2018/01/soulbooster-production-story/</guid>
        
        <category>소울부스터</category>
        
        <category>soulbooster</category>
        
        <category>개발 후기</category>
        
        <category>팀 빌딩</category>
        
        <category>python</category>
        
        <category>django</category>
        
        <category>vuejs</category>
        
        <category>여성 속옷</category>
        
        <category>쇼핑몰</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>일하는 방식 고민.</title>
        <description>&lt;p&gt;난 하루에 집중해서 6~8시간, 일주일에 3~4일만 일하는 게 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;딴짓하지 않고 자신을 몽땅 짜낼만큼 높은 집중력을 내면서 항상성을 유지할 수 있는 하루 최대 근무 시간은 6시간이 최대치인 것 같다. 8시간도 큰 부담은 없는데, 사람이 언제나 전력 질주하듯 집중력을 발휘할 수 있는 건 아니니 기준은 하루 6시간 집중하는 데 맞추고 좀 여유를 내고 싶은 날은 8시간 일하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;자신을 짜내듯 일하면 업무 탈진한다. 탈진했다고 퇴사해서 충전하는 건 업무 맥락, 팀웍 구축 비용이 너무 아깝다. 그러므로 평소에(?) 일하듯이 평소에 공부하고 경험하며 충전해야 한다. 나는 느리고 시간을 많이 투입해야 해서 하루에 3시간은 학습에 쓰고, 일주일에 하루 정도는 온전히 경험성 활동에 써야 하는 것 같다. 이것도 멍하니 읽고 감상하는 게 아니라 의식하고 의도한 활동으로 해야 한다. 안 그러면 남는 게 없는 것 같다.&lt;/p&gt;

&lt;p&gt;주 중에 일과 학습에 집중해서 달리려면 그 주를 회고하고 다음 주를 계획하는 데 하루 정도는 써야 한다. 물론 노는 것도 포함해서. 그리고 온전히 쉬는 날은 최소 하루 보장하고.&lt;/p&gt;

&lt;p&gt;이렇게 해서 먹고 살 수 있을까? 일주일에 100시간씩 일해야 성공할 기회가 생긴다고 한다. 성공하거나 시간과 자본에서 어느 정도 자유를 얻은 지인을 보면 그런 것 같다. 물론 죽도록 일해서 결국 죽거나 동력을 잃거나 실패하는 사람은 있다. 그런데 느슨하게(?) 일해서 성공한 경우는 적어도 내 주변엔 없고, 사회에 알려진 사례도 못본 것 같다.&lt;/p&gt;

&lt;p&gt;실은 나 혼자라면 그런 삶에 곧 도달할 것 같다. 문제는 언제까지 지속할 수 있느냐이다. 1~2년이 아니라 5년, 10년, 20년 이후에도 이렇게 일해서 먹고 살 수 있을까? 자본 소득이 뒷받쳐주지 않는 현 상황에서는 낙관하지 못한다.&lt;/p&gt;

&lt;p&gt;나 혼자가 아니라 팀이라면 장기 지속할 가능성이 클 것 같다. 한 사람이 하는 일을 두 사람이 하면 된다. 팀 복잡도가 올라가서 발생하는 누수를 감안하면 두 사람이 소화하는 것보다 한 사람이 하는 게 더 나을지도 모른다. 하지만 예측 가능한 일정과 높은 질을 꾸준하게 내려면 한 사람이 하는 일을 두 사람이 하루 6~8시간, 주 3~4일 근무하며 처리해야 가능할 것 같다. 물론 팀원의 프로 의식과 그런 문화를 지키고 발전시키려는 태도와 마음을 서로 강하게 믿어야 가능하다. 결국 누구와 함께 하느냐가 가장 중요한 문제이다.&lt;/p&gt;

&lt;p&gt;그렇다고 같은 일을 많은 사람이 한 팀으로 모이는 건 아니다. 오히려 일을 쪼개고 쪼갠 일에 대해 온전히 위임하고 권한을 발휘하도록 하여 개개인 간 의존성을 낮춰야 한다. 팀은 다른 조직에 비해 오히려 큰데 일은 다른 조직보다 더 원자화 되어 동작하는 그런 조직을 어떻게 만들어야 할 지 아직은 잘 모르겠다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jan 2018 10:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2018/01/thinking-of-how-to-work/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2018/01/thinking-of-how-to-work/</guid>
        
        <category>조직</category>
        
        <category>일</category>
        
        <category>팀</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>Django 템플릿에서 VariableDoesNotExist 예외 오류 대응하기</title>
        <description>&lt;p&gt;한 줄 요약 : Django 템플릿 엔진은 템플릿 필터에 대해서 항상 조용한 실패 처리(silent failure)를 하진 않는다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Django Template은 없는 템플릿 변수나 템플릿 변수의 속성, 키, 색인이 없어도 오류 상황을 일으키지 않고 조용히 오류 상황을 잠재운다. 일명 Silent failure 동작이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ lorem.ipsum.hello.world }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lorem&lt;/code&gt;이라는 템플릿 변수가 없든 &lt;code class=&quot;highlighter-rouge&quot;&gt;lorem&lt;/code&gt; 템플릿 변수는 있는데 이 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipsum&lt;/code&gt;이라는 키나 속성이 없다고 가정하자. 최종 템플릿 맥락이 출력(치환)이면 Django는 변수나 키, 속성이 없다는 오류 상황을 일으키지 않으며, 저 템플릿 변수 위치엔 아무것도 출력되지 않는다. 템플릿 변수를 출력(render)하거나 템플릿 태그에서 사용할 때는 이처럼 Silent failure로 동작한다.&lt;/p&gt;

&lt;p&gt;하지만 템플릿 필터를 거치는 경우엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;VariableDoesNotExist&lt;/code&gt; 예외(exception)가 발생한다. 예외 이름에서 드러나듯이 템플릿 변수가 없다는 뜻이다.&lt;/p&gt;

&lt;p&gt;예를 들어, 존재하지 않는 템플릿 변수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;not_exist_var&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;divisibleby&lt;/code&gt; 템플릿 필터에 사용하면 예외 오류가 발생한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ '1234'|divisibleby:not_exist_var }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이에 대해 Django 공식 문서에서는 다음과 같이 설명한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thus, filter functions should avoid raising exceptions if there is a reasonable fallback value to return. In case of input that represents a clear bug in a template, raising an exception may still be better than silent failure which hides the bug. ( 출처 : &lt;a href=&quot;https://docs.djangoproject.com/en/1.11/howto/custom-template-tags/#writing-custom-template-filters&quot;&gt;custom-template-tags - writing-custom-template-filter&lt;/a&gt; )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;간단히 말해서 템플릿 필터 함수에서는 버그를 숨기는 Silent failure 보다는 예외를 일으키는 게 낫다고 한다. 실제로 Django 내장 템플릿 필터를 보면 대체물을 대신 반환해도 될 만한 경우엔 Exception 처리를 잡아내서 오류 상황을 피하지만, 그 외의 경우엔 Exception이 발생하게 냅둔다. 문제는 그 정책이 예상을 벗어나는 경우에 발생한다. 난 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 템플릿 필터에서 조용한 실패 처리를 하지 않는 상황을 만났다. &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 템플릿 필터는 대개 다음과 같이 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ empty_var|default:'비었수다' }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;나도 비슷하게 사용했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ apple.attr3|default:lemon.attrdict.color }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Django 템플릿 엔진 동작에 익숙하다면 다음과 같이 동작하길 기대(예상)한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apple.attr3&lt;/code&gt;가 없으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;lemon.attrdict['color']&lt;/code&gt;를 대신 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lemon.attrdict&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt; 키가 없으면 결국 아무것도 출력하지 않고 Silent failure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;딱히 Exception이 발생할만한 로직이 아니고, &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 필터 함수를 봐도 인자 두 개 받아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;return value or arg&lt;/code&gt;로 동작하는 것 뿐이다. 다시 말해 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 템플릿 필터인 Python 함수는 두 개 인자를 받는데, 첫 번째 인자로 받는 &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 앞에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;apple.attr3&lt;/code&gt;가 있으면 해당 객체를 반환하고, 없으면 두 번째 인자로 받는 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; 뒤에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;lemon.attrdict.color&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;p&gt;하지만 실제로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;VariableDoesNotExist&lt;/code&gt; 예외 오류가 발생한다. 이 예외는 &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 템플릿 태그로 해결하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/hannal/9de33b54a749457d7f29c5f30c5e9136&quot;&gt;with 템플릿 태그로 VariableDoesNotExist 예방&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 템플릿 태그는 Silent failure 처리를 해주니 &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 템플릿 태그로 만든 임시 템플릿 변수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;colour&lt;/code&gt;엔 출력할(render) 게 없는 빈 객체가 할당이 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 템플릿 태그를 안 쓴 경우엔 Silent failure를 해주는 놈이 없다보니 Exception이 그대로 나버린 것이다. 이 문제가 까다로운 이유는 Django 디버깅 화면에서는 문제가 있는 템플릿 줄(line)을 가리키지 않고 Exception이 발생한 Django 소스를 보여주는 데 있다. 평범한 속성명이나 키 이름을 쓰다가는 고생하기 십상이다.&lt;/p&gt;

&lt;p&gt;흔히 겪는 상황은 아닐 것 같다. 나는 모델에 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONField&lt;/code&gt;를 썼고, 이 모델필드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; 객체에 특정 키(위 예제 기준으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;colour&lt;/code&gt;키)가 없어서 발생한 거였다. 뷰 함수에서 넘겨주는 템플릿 변수 이름대로라면 금방 발견했을 것 같다.&lt;/p&gt;

&lt;p&gt;삼천포 요약 : 변수 네이밍을 괴랄하게 하면 디버깅에 도움이 된다.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2017/06/django-template-variabledoesnotexist-exception/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2017/06/django-template-variabledoesnotexist-exception/</guid>
        
        <category>django</category>
        
        <category>template</category>
        
        <category>템플릿</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>시트로엥 C4 칵투스 두 달 소감.</title>
        <description>&lt;p&gt;올해 한국에 출시한 시트로엥 C4 칵투스를 샀다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;운행 기간 : 두 달&lt;/li&gt;
  &lt;li&gt;운행 거리 : 약 1,600km&lt;/li&gt;
  &lt;li&gt;평균 연비 : 리터 당 18~19km&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;총평&quot;&gt;총평&lt;/h3&gt;

&lt;p&gt;재밌는 차다. 개성이 강해서 호불호가 극명하게 갈릴 것 같다. 난 선호에 가깝다. 점수를 매기자면 5점 만점에 4점. 30대 3~4인 가정에 추천한다.&lt;/p&gt;

&lt;h3 id=&quot;특성&quot;&gt;특성&lt;/h3&gt;

&lt;h4 id=&quot;1-연비&quot;&gt;1. 연비&lt;/h4&gt;

&lt;p&gt;도심 내 평속 40~60km 정도일 때 연비는 리터 당 17~18km정도로 측정된다. 고속도로 타서 평속 80~90km로 달리면 연비는 22~25km까지 찍는다. 2016년 11월 기준으로 서울 시내 버스 요금이 기본 요금 1,200원에 10km 초과 시 5km 마다 100원씩 가산되고 경유가 리터 당 대략 1,200~1,300원이니까 연비만 놓고 보면 버스 요금보다 저렴하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2016/11/c4-cactus-fuel-efficient.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연비 효율을 높이려는 노력이 곳곳에서 보인다. 먼저 차가 멈추면 엔진을 껐다가 출발할 때 다시 켜는 기능을 들 수 있다. 차량 동작을 완전히 끈 게 아니라 엔진만 끄고, 제동 페달에 발을 떼는 순간 빠르게 다시 시동을 건다. 반응성이 좋아서 불편하진 않다. 하루에 두세 시간 정도 운전하면 에코 유지 시간이 몇 십 분 정도 된다. 몇 십 분 주행을 안 한 셈이니 꽤 연류를 아낀 것이다.&lt;/p&gt;

&lt;h4 id=&quot;2-디자인&quot;&gt;2. 디자인&lt;/h4&gt;

&lt;p&gt;눈에 띄는 디자인이다. 선이 또렷하고 야무지게 생겼다. 특히 얼굴이 재밌게 생겨서 사람들이 흘깃 눈길 한 번씩은 보낸다. (｀^´) 이렇게 생겼달까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2016/11/c4-cactus-front.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자동차 외관에 플라스틱류 소재가 이렇게 많이 사용된 건 처음 본다. 그 유명한(?) 옆면 에어범퍼도 그렇고, 차 전면부나 후면부 곳곳에도 다소 말랑한 플라스틱 소재가 붙어 있다. 좋고 나쁘고를 떠나서 특이하긴 하다. 색깔도 다양하고 강렬한데, 외형이 워낙 특이해서 난 무난하게 흰색을 골랐다. 흰색이 예쁘다.&lt;/p&gt;

&lt;p&gt;내부 인테리어도 아늑하고 귀여운 편이다.&lt;/p&gt;

&lt;h4 id=&quot;3-공간-크기&quot;&gt;3. 공간, 크기&lt;/h4&gt;

&lt;p&gt;차체는 작은 편이다. 키나 덩치가 큰 사람에겐 다소 좁게 느껴질 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2016/11/c4-cactus-size.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 안쪽 공간은 생각보다 여유롭다. 넓다기 보다는 여유감이 있어 답답하지 않다는 뜻이다. 앞좌석은 자잘한 조작 장치를 버튼식으로 바꾸고 대시보드 디스플레이에 몰아 넣어서 변속 레버 부근 공간이 여유롭다. 보조석은 에어백을 상단으로 옮기고, 앞쪽 가방식 수납 공간에 소지품을 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;뒷좌석은 다소 좁게 느껴질 여지가 있는데, 자잘한 장치를 쳐내서 공간이 깔끔하고(휑하고) 전방과 상향 시야가 탁 트여서 심리상 편안함을 준다. 하지만 키가 큰 사람이 앉기엔 좁은 건 어쩔 수 없다. 뒷좌석엔 isofix 방식인 유아 카시트를 두 대 장착할 수 있으며, 고리 구멍이 표시되어 있어 연결하기 쉽다. 카시트 두 개 놓으면 뒷좌석은 사실상 공간이 남지 않는다.&lt;/p&gt;

&lt;p&gt;트렁크는 생활 물품을 담고 다니기 괜찮은 정도이며 넓은 편은 아니다. 나는 유모차, 자동차 용품 등을 넣고 다니는데, 장 본 물품을 상자 하나에 담아서 트렁크에 담을 정도는 된다. 유모차를 넣고 다니기엔 괜찮지만, 유모차를 싣고 장을 많이 본 날엔 좁다.&lt;/p&gt;

&lt;p&gt;뒷좌석 창문은 바깥쪽으로 살짝 열린다. 싫어하는 사람이 꽤 있을 것 같은데, 난 오히려 마음에 든다. 뒷좌석엔 유아 카시트 장착하고 꼬맹이를 앉히기 때문에 아예 꼬맹이가 활짝 열지 못하는 게 마음 편하다. 아이가 타지 않을 때에는 대부분 나 혼자 차를 타거나 동승자 한 명이 보조석에 앉기 때문에 뒷좌석 창문 열 일이 없다. 뒷좌석 창문이 아래로 열리지 않아서 뒷좌석 문짝 안쪽의 수납 공간이 넓다. 어느 정도로 넓냐면 하루 외출하는 데 쓸 아이 기저귀, 소형 우유팩, 간식통을 담을 수 있다. 아이가 용변을 봐서 돌돌 만 기저귀 서너 개는 넉넉히 들어간다.&lt;/p&gt;

&lt;h4 id=&quot;4-에어범퍼&quot;&gt;4. 에어범퍼&lt;/h4&gt;

&lt;p&gt;예쁜 외관에 눈에 띄게 전혀 다른 재질로 된 에어범퍼가 차 옆면에 꽤 넓게 자리잡고 있다. 내 차는 흰색이고 에어범퍼는 검정색인데, 흰색 몸체는 유광이고 에어범퍼는 무광이라 더 이질감이 크다. 딱 문콕 당할 위치에 에어범퍼가 있어서 문콕 스트레스가 거의 사라진다. 실제로 문콕을 몇 번 당한 것 같은데, 에어범퍼와 바퀴 부근 플라스틱류 소재에 찍힌 자국이 생겼더라. 차체 철판 면은 깨끗하고.&lt;/p&gt;

&lt;p&gt;차 옆면이 어딘가에 닿을 때 가장 먼저 에어범퍼가 닿아서 차체 흠집에 대응할 여지가 있다. 좁은 공간을 우회전하며 들어가다 차 오른쪽 부위가 입구 기둥에 닿는 사고(?)가 발생한 적이 있다. 차체가 뭔가에 닿는 느낌이 들자마자 더 진입하지 않고 후진해서 차를 뺐는데, 에어범퍼가 닿아서 차체엔 아무런 흠집이 생기지 않았다. 에어범퍼가 없었다면 흠집이 생겼거나 최악의 경우 찌그러졌을 것이다.&lt;/p&gt;

&lt;h4 id=&quot;5-편의-기능&quot;&gt;5. 편의 기능&lt;/h4&gt;

&lt;p&gt;크루즈 기능을 처음 써봤는데 설명으로 들었을 때보다 편했다. 일정 속도로 꾸준히 달리는 장거리 이동 중에 무척 유용했지만, 피곤한 운전 상황은 도심 운전인데 도심 안에서는 쓸모가 없어서 아쉬웠다. 크루즈 기능을 쓰면서 자동운전 기능을 더 기대하게 됐다. 다음 차는 자동운전 기능이 있는 걸로 사야겠다.&lt;/p&gt;

&lt;p&gt;주유구는 차 열쇠로 열어야 한다. 실내에서 원격으로 열지 못한다. 이건 호불호가 갈리지 않을 것 같다. 매우 불편하다. 열쇠를 빼서 주유원에게 주면 시동이 꺼졌으므로 창문을 닫지 못한다. 그래서 직접 주유하는 셀프 주유소를 이용하는 편인데, 그래도 싫다.&lt;/p&gt;

&lt;p&gt;하드웨어 조작 장치가 몇 개 없다. 대부분 대시보드에 터치 방식으로 옮겨 넣었다. 그래서 공간이 여유로운데, 날씨가 추워지면 터치를 제대로 인식 못하는 경우가 있다. 운전 중엔 가능한 다른 조작을 해서는 안 되긴 하지만 그래도 운전 중에 냉난방을 조절하는 등 뭔가를 조작하는 경우가 왕왕 있는데, 화면 터치로 해야해서 불편한 경우가 생기곤 한다.&lt;/p&gt;

&lt;p&gt;변속 관련 하드웨어 조작 장치도 마찬가지여서 변속 막대가 아예 없다. 대신 운전(D), 후진(R), 정차(N) 변속 제어를 큼직한 버튼 세 개가 맡는다. 발렛 파킹하는 사람들이 당황하곤 한다.&lt;/p&gt;

&lt;p&gt;벤치식 좌석과 패브릭 시트(?)가 꽤 편안하다. 몸이 푹 잠기는 편안함은 아니고 배기는 부위 없이 안정된 편안함이다.&lt;/p&gt;

&lt;p&gt;창문을 세척할 때 분무액은 와이퍼에서 직접 분사하는 방식인데, 세척액이 시야를 가리는 시간이 매우 짧다. 처음엔 세척액이 제대로 분무되지 않은 줄 알 정도이다.&lt;/p&gt;

&lt;p&gt;Apple Carplay 기능이나 Android Auto 기능을 지원하지 않는다. 아쉽다.&lt;/p&gt;

&lt;h4 id=&quot;6-주행&quot;&gt;6. 주행&lt;/h4&gt;

&lt;p&gt;내가 좋아하는 소리를 내진 않는다. 난 조용하고 얌전한 차를 좋아하며, 다소 묵직한 운전감을 선호한다. 이 차는 가볍다. 차체가 가벼운 편이기도 하지만, 엔진 소리나 운전감이 좋게 말하면 경쾌하고 나쁘게 말하면 가볍다. 차가 가볍다보니 고속 주행 시 바닥에서 올라오는 진동과 소리가 크다. 더욱이 정차 시 에코 상태로 전환되어 엔진이 꺼져서 아주 조용한 상황을 경험하게 되기 때문에 더 비교된다.&lt;/p&gt;

&lt;p&gt;완전 자동 변속 장치가 아니고, 수동 변속을 기반으로 자동 변속을 해주는 변속 방식이다. 연비는 좋은데, 변속될 때 차가 꿀렁거리는 수동 변속의 단점을 안고 있다. 잘 운전하면(?) 꿀렁거림을 줄일 수 있지만, 변속 중 꿀렁거리는 상황을 피하기 힘든 경우도 있다. 1단으로 오르막길 오르는데 RPM이 상승해서 2단으로 바뀌면 순간 꿀렁, 그런데 곧 힘이 부쳐서 다시 1단으로 바뀌면 또 꿀렁. 고속도로에서 6단으로 달리던 중 추월하려고 가속 페달을 밟으면 RPM이 부족해서 5단으로 변속되어 꿀렁, 근데 평지라서 금방 RPM이 진정되면 다시 6단으로 바뀌어서 또 꿀렁. 수동 변속 차량을 오래 운전해서 수동 변속을 좋아하는데도 이 변속 패턴은 짜증나곤 한다.&lt;/p&gt;

&lt;p&gt;보기보다 힘이 괜찮다. 수동 변속 특유의 RPM 장난질로 튀어나가는 힘도 제법이고, 시속 130km까지는 뻗어나가는 힘도 괜찮다. 근데 고속 주행에 적합한 차는 아니긴 하다.&lt;/p&gt;

&lt;p&gt;방향 전환과 제동하는 느낌도 묵직해서 밀리지 않아 안전감 있다. 급곡선을 돌 때는 차 중안 부근이, 급제동을 걸 때는 차 엉덩이 부근이 땅으로 꾹 눌리는 느낌이 든달까? 주행감은 상당히 가벼워서 과속 방지턱도 퉁퉁 튀듯 넘는 기분이 드는데, 방향 전환과 제동은 묵직해서 비교되어 재밌다. 상대적으로 묵직한 게 아니라 정말 묵직하다. 새 차라 그런가? 마음에 든다.&lt;/p&gt;

&lt;p&gt;사람은 자신의 몸이 움직이는 공간을 인지하고 있다. 부딪히지 않고 좁은 틈을 지나갈 수 있는지, 줄넘기를 하는 저 사람과 어느 정도 떨어져야 안전한지 무의식 중에 파악한다. 운전석에 앉으면 자신의 몸을 기준으로 인식된 개인 공간이 차체만큼 확장된다. 마치 차체가 내 몸이 된 것처럼. 이 인지와 실제 차체와 동기화되는 비율이 높을수록 마음이 편하고 안정되는데, 동기화 수준을 떨어뜨리는 요소가 몇 가지 있다. 운전석 기준으로 사각, 후사경에서 인식되는 차 뒷쪽 공간과 실제 차 엉덩이 위치의 위치 차이, 운전석에서 보이는 후드(보닛) 거리와 실제 후드 길이 차이 등이다. 이 차는 내 체형에 잘 맞아서 시야가 좋다. 차체가 SUV에 비해선 낮고, 세단보다는 아주 조금 더 높아서 운전석 높이가 적당하다. 그리고 사각(죽은 시야각)이 거의 없다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 02:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2016/11/citroen-c4-cactus/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2016/11/citroen-c4-cactus/</guid>
        
        <category>citroen</category>
        
        <category>시트로엥</category>
        
        <category>칵투스</category>
        
        <category>cactus</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>책, Flask 기반의 파이썬 웹 프로그래밍 소감</title>
        <description>&lt;p&gt;Flask 입문서가 국내 집필서로 나왔다. &lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=83637353&quot;&gt;Flask 기반의 파이썬 웹 프로그래밍&lt;/a&gt;인데 국내 집필서로는 처음으로 보인다.&lt;/p&gt;

&lt;p&gt;Flask는 경량 웹 프레임웍이다. 경량이라지만 꼭 필요한 건 갖춰져 있어서 바퀴 재발명하는 재미(?)를 만끽하기에도 좋고, 유연해서 확장하기도 좋다. 나도 애용하는데, 한 가지 아쉬운 점이 있고 한 가지 궁금한 점이 있다.&lt;/p&gt;

&lt;p&gt;아쉬운 점은 공식 문서가 불친절하다는 것이다. 방향 제시 수준으로만 설명하고 나머지는 알아서 하라는 식이다. 그래서 종종 flask 소스 코드를 까보곤 하며, 내가 VIM이나 Sublime text를 쓰다가 PyCharm을 쓰게 된 것도 구현체 이동 기능으로 Flask 소스 코드를 편하게 까보기 위해서이다. 문서 보다 Flask 소스 코드 보는 경우가 더 많다. 그래서 Python으로 웹 프로그래밍에 입문하려는 사람에겐 Django를 추천한다. 도구 자체를 익히기엔 Flask가 간결해서 좋지만, 입문자가 독학하는 데 도움이 될 만한 친절한 문서가 많지 않다.&lt;/p&gt;

&lt;p&gt;궁금한 점은 다른 사람은 어떻게 구조를 잡고 쓰고 있는가 이다. 자기 입맛대로 쓰면 그만인 웹 프레임웍이긴 하지만, 그래도 궁금하긴 하다. &lt;a href=&quot;https://github.com/teampopong/pokr.kr&quot;&gt;팀 포퐁의 pokr 소스 코드&lt;/a&gt;를 본 뒤로는 더 궁금해졌다. Django는 구조가 그래도 고만고만한 경향이 있는데, Flask는 정말 다양하겠다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;이 책은 두 가지 중 하나는 꽤 충족시켜 준다. 공식 문서보다 친절한데 그렇다고 막 장황하지도 않다. 공식 문서를 보고 “설명이 이게 끝?”이라 생각이 든다면, 이 책은 거기서 한 수준 정도 더 설명한다. 설명을 하는 기반 코드가 대체로 공식 문서에 나온 예제이고 거의 동일한데, 그래서 좋은 점은 공식 문서를 볼 때 좀 더 친근하게 느낄 것이고 정석(?) 활용을 학습한다는 점이다. 아쉬운 점은 내가 궁금해하는 걸 해소하진 않는다는 점이다.&lt;/p&gt;

&lt;p&gt;Flask이든 Django이든 잘 활용하려면 각 도구가 지향하는 철학이나 방향을 공감하고 이해해야 한다고 본다. 이 책은 그런 공감을 일으키기엔 얕지만, 얕아서 편하게 읽기에 좋다. 자취생을 위한 간편 요리법을 다루는 책 같다. 입문자를 위한 책인지는 잘 모르겠고, 웹 프로그래밍을 해본 사람이 Flask에 얼른 입문해서 써먹을 때 더 유용해 보인다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 책은 출판사 &lt;a href=&quot;http://www.jpub.kr&quot;&gt;제이펍&lt;/a&gt;에서 내게 증정해준 것이다. 내게 리뷰 같은 걸 요구하지 않고 보내준 것이지만, 국내에 Flask를 다루는 국내 집필서가 없어서 반가운 마음에 나 스스로 쓴 비대가성 글이다.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jul 2016 16:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2016/07/book-python-web-programming-with-flask/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2016/07/book-python-web-programming-with-flask/</guid>
        
        <category>python</category>
        
        <category>flask</category>
        
        <category>책리뷰</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>프로그램 짜는 세탁소집 첫째 아들.</title>
        <description>&lt;p&gt;오프라인 영역에서 이뤄지던 세차, 세탁, 주차, 배달 등 다양한 서비스가 O2O(online to offline) 서비스로 등장하고 있다. 창업자나 창업팀을 보면 자신이 하던 오프라인 직업에 IT 기술을 접목하거나 창업자가 IT 분야 개발자인데 특정 오프라인 분야의 덕후인 경우가 많다. 온라인과 오프라인을 함께 이해하고 활용할 줄 알고 접목하기 때문에 기존 온라인에서만 혹은 오프라인에서만 일을 하던 사람과 다른 접근을 하거나 좀 더 빠른 실행이 가능한 것이라 본다.&lt;/p&gt;

&lt;p&gt;스스로 판과 규칙을 짜는 주도성을 갖는 경향이 강한 온라인 분야와는 달리 오프라인 영역은 오랜 세월 쌓인 사용자 경험칙이 강하다. 오프라인 특유의 사용자 경험칙은 대를 이어온 손맛과 비슷하다. 감성 영역이란 얘기다. 그 감성은 세대나 정서 차이로 취향에 안 맞기도 하지만, 요는 기계가 엄청나게 많은 차원으로 학습해도 파악하기 어려운 미세한 감성 영역을 이해하고 접근한다는 데 있다.&lt;/p&gt;

&lt;p&gt;그래서 나는 다음 세대 O2O 서비스는 세탁소집 아들, 자동차 정비소 딸, 미용실 둘째 아들이 일으키는 모습을 기대한다. 단, 조건이 있다. 이들은 소프트웨어를 이해하고 당연히 활용한다는 사고 체계를 갖춰야 한다. 무선인 전화기, 터치 인터페이스, 사회 관계는 온라인에서도 지속된다는 당연한 인식이 기본으로 깔려 있으며, 기계가 할 일을 쉽게 시키는 사고 방식과 체계를 갖춘 세대. 세탁소에서 바삐 움직이는 &lt;strong&gt;콤퓨타&lt;/strong&gt; 세탁기를 보며 콤퓨타와 세탁 너머를 상상할 수 있는 세대.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 22:00:00 +0000</pubDate>
        <link>http://blog.hannal.com/2016/06/who-starts-up-o2o-service/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2016/06/who-starts-up-o2o-service/</guid>
        
        <category>경험</category>
        
        <category>가업</category>
        
        <category>startup</category>
        
        <category>o2o</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>프로그래밍 입문자를 위한 몇 가지 조언</title>
        <description>&lt;p&gt;2014년 11월 4일부터 &lt;a href=&quot;http://www.fastcampus.co.kr/&quot;&gt;패스트캠퍼스&lt;/a&gt;에서 웹 서비스 개발을 주제로 강의하여 얼마 전에 네 번째 기수를 마쳤다. Python과 Django를 이용해 웹 서비스 개발 공정을 겪는 것이 커리큘럼 주제인데, 1기에 대한 이야기는 &lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-04/&quot;&gt;Python과 Django 강의&lt;/a&gt;라는 글로 작성했다. 이번 글에선 어떻게 Python과 Django를 공부하면 좋을 지 1년 간 강의하며 고민했고 몇 가지 원리에 대해서는 정리되어 공유해 본다. 내가 강의한 주제가 Python과 Django, 그리고 웹 프로그래밍이어서 그렇지, 프로그래밍에 대한 공부 방법이라고 해도 무방하다고 생각한다.&lt;/p&gt;

&lt;h3 id=&quot;강의-개요&quot;&gt;강의 개요&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이름 : &lt;a href=&quot;http://www.fastcampus.co.kr/dev_camp_wsd/&quot;&gt;웹 서비스 개발 캠프&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;주제
    &lt;ul&gt;
      &lt;li&gt;Python과 Django를 강사의 경험을 담아 심도있게 다룬다.&lt;/li&gt;
      &lt;li&gt;웹 서비스를 개발하는 공정을 Back-end 중심으로 경험하며 웹 프로그램을 개발하여 배치(deployment)한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수강 대상자
    &lt;ul&gt;
      &lt;li&gt;다른 언어나 프레임워크를 써봤고, Django에 입문하려는 사람&lt;/li&gt;
      &lt;li&gt;Python이나 웹 프로그래밍 중급 과정에 진입하려는 사람&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;강의 시간
    &lt;ul&gt;
      &lt;li&gt;1기 : 90시간&lt;/li&gt;
      &lt;li&gt;2기 : 64시간&lt;/li&gt;
      &lt;li&gt;3기 : 48시간&lt;/li&gt;
      &lt;li&gt;4기 : 40시간&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;손으로-반복-반복-그리고-또-반복&quot;&gt;손으로 반복, 반복, 그리고 또 반복&lt;/h3&gt;

&lt;p&gt;뭔가 만들려 하면 막막해서 시작을 떼지 못하겠다는 입문자가 무척 많다.&lt;/p&gt;

&lt;p&gt;책을 보거나 강의를 듣는 중엔 다 안다. 물어보면 대답도 한다. 근데 막상 코드를 짜라고 하면 힘겨워한다. 질문하며 코드 흐름을 자연스레 유도하면 대답은 하는데, 그 대답을 코드로 옮기질 못하기도 한다. 커리큘럼 초반엔 잘 따라오는데, 중반에 접어들어 학습하는 주제와 범위가 늘면 눈에 띄게 힘들고 어려워 하는 경우도 있다.&lt;/p&gt;

&lt;p&gt;그에 반해 빈 파일에 코드를 채워넣는 걸 주저하지 않는 사람도 있다. 원래 다른 분야에서 프로그래밍을 했거나 다른 언어로 웹 프로그래밍을 한 사람이야 그렇다 쳐도, 사실상 입문자여서 이 강의를 듣기엔 다소 무리하는 수강자인데도 곧잘 코드를 작성한다. 입문자여서 프로그래밍이나 Python, Django에 대한 지식과 경험이 부족하여 이론을 설명하면 이해는 못하는데 코드는 어쨌든 작성해 간다. 심지어 자신이 무슨 코드를 짰는지 이해하지 못하면서도 말이다.&lt;/p&gt;

&lt;p&gt;이런 차이는 반복량에 있다. 눈으로는 코드와 이론을 알지만, 손은 모른다. 프로그래밍 언어도 언어의 한 종류이다. 아무리 영어 단어나 문법을 외워도 말을 하지 않고 글을 쓰지 않으면 표현하기 어렵다. 마찬가지로 눈으로 이론을 공부하고 코드를 읽어도 손으로 코드를 짜지 않으면 코딩은 되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scienceon.hani.co.kr/34106&quot;&gt;시시하고 아는 코드라도 직접 손으로 쳐야 한다. 한 번 쳐보고 넘어가지 말고, 다양하게 응용하며 여러 번 쳐봐야 한다&lt;/a&gt;. 손에도 코드를 새겨야 한다. 코드를 손에 새기는 가장 쉽고 좋은 방법은 딱 세 개이다. 반복, 반복, 그리고 또 반복하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;복습&quot;&gt;복습&lt;/h3&gt;

&lt;p&gt;학습한 건 가능한 빨리 복습해야 학습 효과가 크다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 배운 걸 그대로 따라하는 복습을,&lt;/li&gt;
  &lt;li&gt;시간이 있다면 응용하는 복습을&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하는 게 좋다. 나는 첫 번째 복습 방법을 교재에 반영하여 수강자가 수업 내용을 떠올리도록 유도한다. 큰 주제 별로 교재를 구성하되, 작은 주제는 강의 흐름에 맞추어 배치하여 스토리텔링을 하려 한다. 중요한 내용은 몇 번 반복 등장하고, 가끔 다른 주제가 먼저 등장하기도 하는데 교재를 한 장 한 장 읽어 나가도록 구성하여 교재를 그대로 따라 복습하면 강의를 떠올리도록 한 것이다.&lt;/p&gt;

&lt;p&gt;두 번째 복습 방법은 과제를 내서 유도한다. 아무리 의지가 가득해도 입문자에게 독학이 어려운 이유 중 하나는 학습한 내용을 응용하여 복습하기 어렵기 때문이다. 과제 풀이를 열심히 한 수강자는 커리큘럼 후반으로 가며 다루는 주제가 다양해 질수록 과제를 푼 효과를 보는데, 새 주제가 등장하더라도 이전 주제와 연계되거나 응용하기 때문이다. 책이나 교육 웹사이트로 학습하는데 실습 문제나 과제가 나오면 꼭 풀기를 권한다.&lt;/p&gt;

&lt;p&gt;강의 시간은 기수를 거듭할수록 줄어 들었는데, 수강자가 복습하지 않으면 강의 시간이 아무리 길어도 별 효과가 없었기 때문이다. 실제로 4기는 강의 시간이 1기의 반도 안 됐지만 진도와 강의 주제의 깊이는 별 차이가 없었다.&lt;/p&gt;

&lt;h3 id=&quot;질문&quot;&gt;질문&lt;/h3&gt;

&lt;p&gt;공부하고 있는 걸 머리에 선명하게 새기는 또 다른 방법은 학습자가 질문하는 것인데, 복습한 사람이 질문을 하는 편이었다. 내 경우는 과제에 함정(?)을 심어 놓는데, 과제를 제출한 사람 중 함정에 대해 질문한 사람 없이 문제를 잘 해결했다면 수강자들이 진도를 잘 따라오고 있다고 판단하여 수업에서 좀 더 깊은 내용을 다루거나 더 많은 양을 다룬다. 함정에 빠진 피해자는 질문을 하게 되는데, 함정에 빠진데다 질문을 하여 답변을 받기 때문에 기억에 남을 가능성이 높다고 본다.&lt;/p&gt;

&lt;p&gt;독학할 때엔 이러한 피드백 과정을 겪기 어렵다. 혼자서 웹에서 검색하여 문제를 해결해도 문제의 앞뒤 맥락을 이해하기 보다는 답에 초점을 맞추어 넘어가기 십상이기 때문이다. 나는 문제에 부딪혀서 스스로 해결하지 못하여 웹에서 해결 방법을 찾으면 반드시 따로 갈무리 하여 쌓아놓고, 일정 시간 뒤에 갈무리 한 자료들의 범주를 나누고 복기한다. 갈무리 당시엔 개별 문제이지만, &lt;a href=&quot;http://scienceon.hani.co.kr/33793&quot;&gt;시간이 흘러 쌓인 문제들을 분류해놓고 보면 각 문제가 서로 연결되어 문제 상황과 맥락을 이해&lt;/a&gt;하게 된다.&lt;/p&gt;

&lt;p&gt;질문과 답변을 주고 받는 소통은 피드백 과정이기도 하다. &lt;a href=&quot;http://scienceon.hani.co.kr/33829&quot;&gt;피드백을 받지 못하면 실력은 늘지 않는다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;질문하고 답을 찾자. 질문 하려면 질문할 준비가 돼야 한다. 그 준비란 바로 실습과 복습이다.&lt;/p&gt;

&lt;h3 id=&quot;함께-공부하기&quot;&gt;함께 공부하기&lt;/h3&gt;

&lt;p&gt;팀은 1기 때부터 계속 조성하려 애썼다. 1기 때는 강사 입장에선 운좋게도 수강자들이 스스로 팀을 짜서 팀 프로젝트를 수행했었다. 2기 때는 권유를 해봤고, 3기 때는 오리엔테이션 때 아예 팀 조성 시간을 갖고 팀 프로젝트를 정해주었으며 팀장에겐 작은 사례(?)를 하기도 했다. 4기 때는 3기 때와 거의 같으나 수시로 팀 프로젝트를 상기시키며 좀 더 독려했다. 하지만 팀 운영은 잘 안 됐다. 복습과 과제 수행도 버거운데 팀 활동은 더 시간 내기 어려웠다는 수강자가 많았다.&lt;/p&gt;

&lt;p&gt;하지만 여전히 팀 조성과 활동을 하도록 관심을 투자할 가치가 있다. 팀은 아니지만 지인과 나란히 앉아 공부하거나 서로 도우며 공부한 수강자는 혼자서 수업에 참여한 수강자에 비해 실패나 난관에 흔들리는 정도가 덜했다. 질문도 왕성하게 하고 붙임성 있게 다른 수강자와 교류하며 수업에 왕성하게 참여하는 수강자는 그 자신이 수업에서 거둬가는 게 많기도 하지만, 다른 수강자에게도 영향을 많이 끼친다. 그런 참여 활동이 &lt;a href=&quot;http://scienceon.hani.co.kr/33907&quot;&gt;당사자 뿐만 아니라 동료 수강자에게 피드백을 주고 받는 과정&lt;/a&gt;이기 때문이다.&lt;/p&gt;

&lt;p&gt;입문자일 수록 함께 공부할 동료를 구하라고 권하고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;재작년에 &lt;a href=&quot;http://blog.hannal.com/2014/5/principles_for_efficient_training/&quot;&gt;근거기반훈련 워크샵에 참석해 효과적 훈련의 원리&lt;/a&gt;를 배웠다. 막상 내게 제대로 활용하지 않았는데, 1년 여 강의하며 몇 가지 원리는 뚜렷하게 효과를 체험했다. &lt;a href=&quot;http://www.fastcampus.co.kr/dev_camp_wpb/&quot;&gt;웹 프로그래밍 입문&lt;/a&gt;과 &lt;a href=&quot;http://www.fastcampus.co.kr/dev_camp_wsd/&quot;&gt;웹 서비스 개발&lt;/a&gt;을 주제로 강의하긴 하지만, 꼭 내 강의가 아니더라도 혼자 공부하거나 지인과 공부하며 활용하면 충분히 효과를 볼 것이라 생각한다.&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Jan 2016 01:45:00 +0000</pubDate>
        <link>http://blog.hannal.com/2016/01/how-to-study-programming/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2016/01/how-to-study-programming/</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        <category>강의</category>
        
        <category>패스트캠퍼스</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>2016년을 맞이하며 20년 전 판을 생각하다</title>
        <description>&lt;h3 id=&quot;게임-개발&quot;&gt;게임 개발&lt;/h3&gt;

&lt;p&gt;20년 전에 첫 게임을 만들었다. 내 &lt;a href=&quot;http://blog.hannal.com/profile/&quot;&gt;필명인 한날은 이 게임 이름에서 비롯&lt;/a&gt;된 것이다. 어설프고 재미없고 허섭했지만, 내 게임을 만들어 친구들과 내 게임 얘기를 나누었다. 내 고교 시절 생활기록부를 보니 장래 희망이 컴퓨터 프로그래머라 적혀 있었다. 당시엔 게임 개발이라는 직업이 사회에 인식되기 전이라서 편의상 게임 개발자 대신 컴퓨터 프로그래머라 적은 것인데, 20년이 지난 지금은 정말 게임 개발자가 아니라 컴퓨터 프로그래머가 되어 있다.&lt;/p&gt;

&lt;p&gt;가끔 언제 다시 게임 업계에 돌아오냐는 안부성 질문을 받곤 한다. 게임 업계에 돌아갈 지 안 갈 지 아직은 모르겠다. 하지만 난 게임을 만들어 왔고, 앞으로도 게임을 만들 것이다.&lt;/p&gt;

&lt;h3 id=&quot;홈페이지&quot;&gt;홈페이지&lt;/h3&gt;

&lt;p&gt;20년 전에 내 홈페이지를 처음 열었다. 1997년부터는 게임 개발, 프로그래밍 등을 주제로 운영하다 &lt;a href=&quot;https://web.archive.org/web/19991012051013/http://dimanche.co.kr/index-kr.html&quot;&gt;1998년에 도메인을 사서 나 나름대로 브랜드&lt;/a&gt;를 만들고 유지하려 했다. 꾸준하진 않지만 완전히 놓지 않고 계속 운영해 온 지난 20년을 스스로 대견하게 여긴다.&lt;/p&gt;

&lt;p&gt;나를 표현하는 익숙한 방법이 내 홈페이지 또는 블로그이다. 앞으로도 내 공간에 글을 쓸 것이다.&lt;/p&gt;

&lt;h3 id=&quot;판&quot;&gt;판&lt;/h3&gt;

&lt;p&gt;작더라도 내 판을 만들어야 한다는 생각을 해왔다. 아무리 잘하고 위협스러워도 남의 판에서는 승산이 없다. 판의 주인이 판을 엎고 새 규칙을 짜면 그만이다. 주인이 판 엎지 않게 아양 떨고 비위 맞추고, 규칙을 바꾸면 바꿀 규칙을 예측하며 그 판에 길들여지면 더이상 희망이 없다. 차라리 판의 주인이 한 짓에 삐쳐서 그 판을 떠나는 게 낫다. 내 판을 만들어 사람들이 내 판에 들어오고, 그 판을 키워야 한다. 그래야 내가 바라는 진정한 독립이 이뤄진다.&lt;/p&gt;

&lt;p&gt;하지만 난 그동안 준비되지 않았으며 진심으로 독립을 갈망한 것이 아니었을지도 모른다는 생각을 했다. 내 판을 만들어야 한다고 주창했지만 정작 말로만 고민했을 뿐, 실행할만큼 고민하지 않았다. 여전히 남의 판에 기대어 마이너 버전 수준에서 내 몸뚱아리를 업그레이드 하려 아둥바둥거렸다.&lt;/p&gt;

&lt;p&gt;앞으로 3~4년 뒤부터는 갈수록 내 판을 만드는 데 들이는 노력이 비싸질 것이라 예상한다. 내 판을 만드는 비용이 비싸질수록 포기할 가능성이 커지고, 포기하는 그때부터 남의 판에서 움직이는 장기말이자 노예가 될 것이다.&lt;/p&gt;

&lt;p&gt;20년 전에 막연히 내 판을 만들어야 한다는 생각을 한 것 같다. 능력도 없으면서 게임 만들자며 사람들 꼬셔 게임개발팀을 만들었고, 하루 방문자가 몇 명이더라도 내 홈페이지에 내 글을 남기려 했다. 내 스토리를 갖고 싶었고 만들려 애썼다. 길들여지지 말자. 내 판의 20년 전 원시형을 잊지 말고 포기하지 말자.&lt;/p&gt;

&lt;p&gt;그렇게 다짐하며 각오를 세운다.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 07:00:49 +0000</pubDate>
        <link>http://blog.hannal.com/2016/01/hello_2016/</link>
        <guid isPermaLink="true">http://blog.hannal.com/2016/01/hello_2016/</guid>
        
        <category>2016년</category>
        
        <category>판</category>
        
        
        <category>essay</category>
        
      </item>
    
  </channel>
</rss>
