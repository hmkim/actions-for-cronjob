<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://say8425.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://say8425.github.io/" rel="alternate" type="text/html" /><updated>2019-03-01T17:49:06+00:00</updated><id>https://say8425.github.io/feed.xml</id><title type="html">펭귄</title><subtitle>좋아하는 개발자</subtitle><entry><title type="html">Ruby Console 에서 한글 입력하기</title><link href="https://say8425.github.io/ruby-hangul/" rel="alternate" type="text/html" title="Ruby Console 에서 한글 입력하기" /><published>2018-08-09T00:00:00+00:00</published><updated>2018-08-09T00:00:00+00:00</updated><id>https://say8425.github.io/ruby-hangul</id><content type="html" xml:base="https://say8425.github.io/ruby-hangul/">&lt;p&gt;irb나 pry에서 한글 입력을 시도하면, 한글이 깨져버려서 사용할 수 없다. 이걸 해결하려면 readline을 사용해서 ruby를 다시 컴파일 해야한다. 본 포스트에서는 macOS 기준으로 설명하겠다. 참고로 이 글은 &lt;a href=&quot;https://blog.iamseapy.com/archives/177&quot;&gt;seapy님 포스트&lt;/a&gt;를 참고해서 작성되었다.&lt;/p&gt;

&lt;h1 id=&quot;readline-설치&quot;&gt;readline 설치&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install readline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;readline을-사용해서-ruby-재설치&quot;&gt;readline을 사용해서 ruby 재설치&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RUBY_CONFIGURE_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--with-readline-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; readline&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; rbenv install 루비 버전
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이미 ruby가 설치된 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv install 루비 버전&lt;/code&gt;을 시도하면, 이미 설치되었는데, 계속 할거냐고 물을 것이다. 가볍게 &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; 해주자.&lt;/p&gt;

&lt;h2 id=&quot;명령어가-너무-길다&quot;&gt;명령어가 너무 길다!&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/tpope/rbenv-readline.git ~/.rbenv/plugins/rbenv-readline
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install 루비 버전
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 매번 기억도 잘안나는 readline path 지정이 귀찮다면, &lt;a href=&quot;https://github.com/tpope/rbenv-readline&quot;&gt;rbenv-readline 플러그인&lt;/a&gt;을 설치하고 이 귀찮음으로부터 해방될 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;이전에-설치된-gem-을-복구해주자&quot;&gt;이전에 설치된 gem 을 복구해주자.&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem pristine &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.iamseapy.com/archives/177&quot;&gt;seapy님이 올리신 글&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">irb나 pry에서 한글 입력을 시도하면, 한글이 깨져버려서 사용할 수 없다. 이걸 해결하려면 readline을 사용해서 ruby를 다시 컴파일 해야한다. 본 포스트에서는 macOS 기준으로 설명하겠다. 참고로 이 글은 seapy님 포스트를 참고해서 작성되었다.</summary></entry><entry><title type="html">AWS EC2 Tags를 ENV로 사용하기</title><link href="https://say8425.github.io/ec2-tags-env/" rel="alternate" type="text/html" title="AWS EC2 Tags를 ENV로 사용하기" /><published>2018-05-31T00:00:00+00:00</published><updated>2018-05-31T00:00:00+00:00</updated><id>https://say8425.github.io/ec2-tags-env</id><content type="html" xml:base="https://say8425.github.io/ec2-tags-env/">&lt;p&gt;EC2 서버를 굴리다보면 필연적으로 Environment Value(a.k.a ENV)를 설정할 일이 생긴다. 전통적으로 터미널에서 굴리는 방법도 있지만, AWS에서 굴리는 방법은 없나? 필자가 찾아본 방법으로는 3가지가 있었다.&lt;/p&gt;

&lt;h2 id=&quot;aws-elasticbeanstalk&quot;&gt;AWS ElasticBeanstalk&lt;/h2&gt;
&lt;p&gt;우선 첫번째로 AWS ElasticBeanstalk을 사용하는 방법이 있다. application을 생성할 때부터 설정할 수 있으며, 생성 이후에도 언제든지  &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/environments-cfg-softwaresettings.html#environments-cfg-softwaresettings-console&quot;&gt;Environment properties 메뉴&lt;/a&gt;에서 설정 할 수 있다. &lt;strong&gt;개꿀&lt;/strong&gt; 주의할 점은 EB 특성상 매 설정마다, 서버 reboot을 요구한다. 이 떄문에 &lt;del&gt;시말서와&lt;/del&gt; downtime이 없게 Rolling updates를 설정해주자. 하지만 EC2 서버에 ENV를 어떻게 쑤셔넣을까 고민할 시점이 왔다면, ElasticBeanstalk은 이미 고려대상에서 없었을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;s3&quot;&gt;S3&lt;/h2&gt;
&lt;p&gt;두번재 방법으로 S3를 활용하는 방법이 있다. S3의 적당한 버킷에, 적당한 디렉토리에, 적당한 dotenv를 작성해넣고, EC2에서 가져와 적당히 export 해주면 된다. 당연하지만 귀찮다고 public으로 만들어 털리지 말고, IAM User를 만들어 접근하자. 이 방법의 가장 큰 장점은 이미 이런 작업을 수행해줄 라이브러리가 존재한다는 것이다. &lt;a href=&quot;https://github.com/sachaos/s3env&quot;&gt;Go&lt;/a&gt;나 &lt;a href=&quot;https://github.com/the40san/dotenv-s3&quot;&gt;Ruby&lt;/a&gt;등으로 작성된 것이 있으며, 그 외 언어로 작성된 것도 찾아보면 있다.&lt;/p&gt;

&lt;h2 id=&quot;ec2-tags&quot;&gt;EC2 Tags&lt;/h2&gt;
&lt;p&gt;마지막 방법으로 필자가 시도해보고 이번 포스트에서 소개하고자 하는 방법인, EC2 Tag를 사용하는 방법이 있다.
S3를 사용하면 관리 포인트가 증가하고 수정하기 번거로운 반면, EC2 Tag를 수정하면 되므로 편리하다.&lt;/p&gt;

&lt;h3 id=&quot;iam-user-생성하기&quot;&gt;IAM User 생성하기&lt;/h3&gt;
&lt;p&gt;우선 Tag 접근용 IAM User 를 만들어야 한다. 다만 Tag만 접근 가능한 policy가 AWS에는 별도로 없다. 그러므로 따로 policy를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;IAM에서 policy 생성하기 들어가서 아래와 같은 json을 입력해주자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Policy name: AmazonEC2TagReadOnlyAccess
# Policy desc: Provides read-only access to Amazon EC2 Tags.

{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Action&quot;: &quot;ec2:DescribeTags&quot;,
            &quot;Resource&quot;: &quot;*&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 해당 policy를 갖고 있는 IAM User를 생성하고, key를 다운받자.&lt;/p&gt;

&lt;h3 id=&quot;필요한-패키지-설치---awscli-jq-ec2-metadata&quot;&gt;필요한 패키지 설치 - awscli jq ec2-metadata&lt;/h3&gt;
&lt;p&gt;IAM User를 생성했으면 EC2에 접속하자. 접속해서 &lt;a href=&quot;https://github.com/aws/aws-cli&quot;&gt;aws-cli&lt;/a&gt;, &lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;jq&lt;/a&gt; 그리고 &lt;a href=&quot;https://aws.amazon.com/ko/code/ec2-instance-metadata-query-tool/&quot;&gt;ec2-metadata&lt;/a&gt;패키지를 설치하자. aws-cli는 방금 생성한 IAM User를 사용하고, tag를 가져오기 위해 필요하다. jq는 가져온 json type의 tag를 사용하기 위해 필요하다. 이 때문에, 굳이 &lt;a href=&quot;https://gist.github.com/marcellodesales/a890b8ca240403187269#gistcomment-2358609&quot;&gt;jq를 사용하지 않고, python을 사용한 용자&lt;/a&gt;들도 보인다. ec2-metadata는 ec2의 관련 정보를 담고 있는 metadata를 가져오기 위해 필요하다. 이 metadata 중 현재 ec2의 instance-id도 있다. 이것을 활용해, tag를 가져오면 된다.&lt;/p&gt;

&lt;p&gt;우선 패키지를 설치하자. debian 계열 OS 기준 아래 스크립트을 입력해 설치할 수 있다. ~그 외는 알아서 잘 설치하자~&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get --assume-yes awscli jq
wget http://s3.amazonaws.com/ec2metadata/ec2-metadata
chmod u+x ec2-metadata
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ec2-metadata에 권한 주는 것을 잊지말자.&lt;/p&gt;

&lt;h3 id=&quot;aws-iam-설정&quot;&gt;AWS IAM 설정&lt;/h3&gt;
&lt;p&gt;설치가 다 끝나면, 아까 만든 IAM User를 사용하는 aws configure를 만들자. 그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;aws configure&lt;/code&gt; 명령어를 쳐서 IAM User access key를 기본으로 사용하게 만드는 방법도 있지만, 필자는 관리 차원에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ec2-tags&lt;/code&gt; 라는 별도 프로필을 만들어서 사용했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws configure --profile ec2-tags
# access key 입력
# secreet key 입력
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tags-가져와서-env에-export-하기&quot;&gt;Tags 가져와서 ENV에 export 하기&lt;/h3&gt;
&lt;h4 id=&quot;tags-가져오기&quot;&gt;Tags 가져오기&lt;/h4&gt;
&lt;p&gt;이제 본격적인 스크립트를 작성하자. 우선 tag를 가져오자. tag를 가져오려먼 awscli의 &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html&quot;&gt;describe-tags&lt;/a&gt; 명령어를 사용하면 된다. 단 그냥 모든 인스턴스로부터 가져오므로 filter를 걸어줘야 한다. 직접 region과 instance-id를 입력해서 필터를 걸어줄 수도 있지만, ec2-metadata 를 사용해서, 현재 접속한 인스턴스의 id와 region을 받아와서 쓸 수 있다. 그렇게 작성된 코드가 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get_instance_tags () {
    EC2_AVAIL_ZONE=$(ec2metadata --availability-zone)
    EC2_REGION=&quot;`echo \&quot;$EC2_AVAIL_ZONE\&quot; | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`&quot;
    INSTANCE_ID=$(ec2metadata --instance-id)
    
    aws ec2 describe-tags --region $EC2_REGION --filters &quot;Name=resource-id,Values=$INSTANCE_ID&quot; --profile ec2-tags
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사실 ec2-metadata로는 region을 알 수 없다. 하지만 가용영역은 알 수 있으므로, 가져와서 뒤에 붙은 zone 명을 regex로 제거해서 써먹는거다. 가져온 태그는 아래과 같은 꼴이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;Tags&quot;: [
        {
            &quot;Key&quot;: &quot;RAILS_ENV&quot;,
            &quot;ResourceId&quot;: &quot;i-038669d150cbdd5b7&quot;,
            &quot;ResourceType&quot;: &quot;instance&quot;,
            &quot;Value&quot;: &quot;production&quot;
        },
        {
            &quot;Key&quot;: &quot;PG_HOST&quot;,
            &quot;ResourceId&quot;: &quot;i-038669d150cbdd5b7&quot;,
            &quot;ResourceType&quot;: &quot;instance&quot;,
            &quot;Value&quot;: &quot;localhost&quot;
        },
        {
            &quot;Key&quot;: &quot;PG_USER&quot;,
            &quot;ResourceId&quot;: &quot;i-038669d150cbdd5b7&quot;,
            &quot;ResourceType&quot;: &quot;instance&quot;,
            &quot;Value&quot;: &quot;foofoo&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가져온-tags를-export-하기&quot;&gt;가져온 Tags를 export 하기&lt;/h4&gt;
&lt;p&gt;가져온 tag 정보는 json 타입이다. 이걸 bash가 알아먹을리 없으므로 적절히 가공해서 export 해주자. 본 글은 &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;을 사용하는 스크립트를 소개하지만, 굳이 이걸 쓸 필요없고 자신 있는 언어를 사용해도 좋다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tags_to_env () {
    tags=$1

    for key in $(echo $tags | jq -r &quot;.[][].Key&quot;); do
        value=$(echo $tags | jq -r &quot;.[][] | select(.Key==\&quot;$key\&quot;) | .Value&quot;)
        key=$(echo $key | tr '-' '_' | tr '[:lower:]' '[:upper:]')
        export $key=&quot;$value&quot;
    done
}

instance_tags=$(get_instance_tags)
tags_to_env &quot;$instance_tags&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;p&gt;결론부터 말하자면 aws-cli만 설치되어있으면 tag를 가져올 수 있다. 다만 여기에 access key와 자신의 instance-id 정도만 추가로 필요하다. 사실 &lt;code class=&quot;highlighter-rouge&quot;&gt;ec2metadata&lt;/code&gt;도 설치할 필요가 없고, &lt;code class=&quot;highlighter-rouge&quot;&gt;169.254.169.254&lt;/code&gt;와 통신해서 metadata를 알 수 있다. 예를 들어 가용영역을 알고싶다면 아래와 같이 쓸 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ec2-metadata 를 사용한 예
ec2metadata --availability-zone

# 
curl --silent http://169.254.169.254/latest/meta-data/placement/availability-zone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions&quot;&gt;ec2 tag 자체에도 제한&lt;/a&gt;이 있다. 특히 ec2 tag는 등록할 수 있는 개수가 ~설마 누가 그렇게씩이나 많이 등록할리 없는~ 50개로 한정되어있다. 또 한가지 더 주의할 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;aws&lt;/code&gt;키는 예약어이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/marcellodesales/a890b8ca240403187269#gistcomment-2358609&quot;&gt;gist에 올라온 스크립트&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-retrieval&quot;&gt;AWS EC2 Meta Data 얻기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/code/ec2-instance-metadata-query-tool/&quot;&gt;AWS EC2 Meta Dada Query Tool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html&quot;&gt;AWS CLI dscribe tag 문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">EC2 서버를 굴리다보면 필연적으로 Environment Value(a.k.a ENV)를 설정할 일이 생긴다. 전통적으로 터미널에서 굴리는 방법도 있지만, AWS에서 굴리는 방법은 없나? 필자가 찾아본 방법으로는 3가지가 있었다.</summary></entry><entry><title type="html">Travis CI를 사용해 AWS Elastic Beanstalk에 배포 자동화 해주기</title><link href="https://say8425.github.io/travis-deploy/" rel="alternate" type="text/html" title="Travis CI를 사용해 AWS Elastic Beanstalk에 배포 자동화 해주기" /><published>2017-07-26T00:00:00+00:00</published><updated>2017-07-26T00:00:00+00:00</updated><id>https://say8425.github.io/travis-deploy</id><content type="html" xml:base="https://say8425.github.io/travis-deploy/">&lt;p&gt;Travis CI는 test 환경을 구축해 테스트 하는 것은 물론, 통과된 테스트를 자동으로 deploy 할 수 있다. 
&lt;a href=&quot;https://docs.travis-ci.com/user/deployment/&quot;&gt;수 많은 deploy 방법&lt;/a&gt;을 지원하는데, 펭귄은 그 중 rails를 AWS Elastic Beanstalk(이하 EB)에 배포 자동화 했던 경험을 공유하겠다. 참고로 이 포스팅은 &lt;a href=&quot;https://www.meetup.com/ko-KR/awskrug/events/241160036/?eventId=241160036&quot;&gt;7월 4일 AWSKrug 한 발표&lt;/a&gt;을 토대로 작성한 포스트다.&lt;/p&gt;

&lt;h2 id=&quot;travis-환경-구축&quot;&gt;travis 환경 구축&lt;/h2&gt;

&lt;p&gt;만약 travis를 이미 사용하고 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;이라는 파일이 이미 있을 것이다. 만약 없다면 travis를 구축해야 한다.&lt;/p&gt;

&lt;p&gt;구축하는 방법은 2가지다. 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;을 직접 만들고 &lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/#To-get-started-with-Travis-CI&quot;&gt;docs 에 나와있는 코드를 그대로 복붙&lt;/a&gt;하는 방법이다. Travis CLI가 그렇게까지 필수는 아니라서 이 방법도 나쁘지 않다. 단 이 경우에는 Travis console에 들어가서 레포지를 따로 연동해줘야한다. 물론 레포지를 연동하는 방법은 어렵지 않다. travis에서 레포지 목록에 들어가 아래 이미지와 같이 켜주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-7-26-travis-deploy/enable-travis-repository.png&quot; alt=&quot;Enable Travis to Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또 다른 방법은 &lt;a href=&quot;https://github.com/travis-ci/travis.rb&quot;&gt;Travis CLI&lt;/a&gt;를 사용하는 방법이다. 터미널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis init&lt;/code&gt; 명령을 해주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; 생성은 물론 레포지 연동까지 알아서 해준다. 물론 Travis CLI 가 설치되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;다만 이 Travis CLI가 의외로 homebrew 나 apt-get과 같은 패키지 관리툴로 설치 할 수 없고 ruby gem으로 설치 할 수 있다. 이 때문에 ruby를 쓸 일이 없다면 Travis CLI를 설치하는 것 보다 직접 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; 파일을 생성하는 것이 나을 수 있다.&lt;/p&gt;

&lt;p&gt;최종적으로 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;의 코드는 아래와 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.0.0&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.9.3&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jruby-19mode&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbx-2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;언어와 version 은 각자 환경에 맞게 바꿔주면 된다. 펭귄은 ruby 2.2.5 하나만 남기고 모두 지웠다.&lt;/p&gt;

&lt;h2 id=&quot;eb-연동하기&quot;&gt;EB 연동하기&lt;/h2&gt;

&lt;p&gt;이제 EB 를 연동하자. EB 연동은 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis setup elasticbeanstalk&lt;/code&gt; 명령을 해주거나 &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/elasticbeanstalk/&quot;&gt;docs를 복붙&lt;/a&gt;하면 된다. 하지만 펭귄은 복붙 해와서 직접 입력하는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;Travis CLI 명령어를 사용하면 키나 레포등을 물어보는데 성실하게(?) 전부 답변해주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;에 전부 적히는데, 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; git에 포함된다! 달리 말하면 &lt;strong&gt;git에 AWS secret key가 포함 될 수 있다.&lt;/strong&gt; 누가 봐도 보안에 좋지 않다. 그러므로 docs에서 복붙해온 양식에 환경변수를 사용해 소중한 AWS KEY를 지키자.&lt;/p&gt;

&lt;p&gt;또한 1.8.8 버전 기준으로 CLI가 bucket name을 물어보지 않는다. 이 때문에 CLI가 생성한 EB 옵션에는 버킷 이름이 입력 되어있지 않는데, 버킷 이름이 없으면 에러가 발생한다. 따라서 travis docs에서 제대로 된 양식을 복붙해 bucket name까지 전부 입력해주는 것이 좋다.&lt;/p&gt;

&lt;p&gt;또한 rails를 사용한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;skip_cleanup: true&lt;/code&gt; 옵션도 넣어줘야한다. 이것이 활성화되어있지 않으면 travis가 build 된 것을 EB에 전달할때 asset precompile 된 것을 몽땅 날려버린다. 이 때문에 EB에서 전달받을때는 asset이 텅텅 비어있어서 deploy가 실패한다. rails 외에 angular2도 &lt;code class=&quot;highlighter-rouge&quot;&gt;skip_cleanup: true&lt;/code&gt;가 활성화 되어있지 않으면 실패한다고 하는데, 다른 환경은 어떠한지 모르겠다. 다만 대다수의 환경이 &lt;code class=&quot;highlighter-rouge&quot;&gt;skip_cleanup: true&lt;/code&gt; 활성화를 요구하는 걸로 보인다.&lt;/p&gt;

&lt;p&gt;최종적으로 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;의 코드는 아래와 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2.5&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticbeanstalk&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;access_key_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENV['AWS_ACCESS_KEY']&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secret_access_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENV['AWS_SECRET_KEY']&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ap-northeast-2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application-dev&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application-deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;db-사용하기&quot;&gt;DB 사용하기&lt;/h2&gt;

&lt;p&gt;Travis build시 사용할 DB를 설정해줘야 하는데 까다롭고, 문서에 안 나와있는 설정들이 많다. 이 때문에 몇 가지 설정을 소개하겠다.&lt;/p&gt;

&lt;h3 id=&quot;postgresql&quot;&gt;PostgreSQL&lt;/h3&gt;

&lt;p&gt;travis의 PostgreSQL 기본 버전은 9.1이다. 대부분의 경우 9.1에서 테스트 해도 별 문제가 없지만, 아무리 그래도 &lt;a href=&quot;https://www.postgresql.org/about/news/1349/&quot;&gt;9.1 버전은 6년전에 나온 구버전&lt;/a&gt;이다. 또한 psql 특정 버전에서만 지원하는 기능을 사용했을 수도 있다.&lt;/p&gt;

&lt;p&gt;문서에서는 &lt;a href=&quot;https://docs.travis-ci.com/user/database-setup/#Using-a-different-PostgreSQL-Version&quot;&gt;psql 버전 바꾸는 방법을 상당히 간단하게 설명&lt;/a&gt;했다. 실제로도 9.4 버전까지는 저렇게 간단히 된다. 하지만 9.5 이상 버전부터는 위 방법대로 해도 에러가 발생한다. 그리고 문서에는 이 이슈에 대해 어디에도 적혀있지 않다. 하지만 travis github 이슈에는 해당 이슈가 있어 &lt;a href=&quot;https://github.com/travis-ci/travis-ci/issues/4264#issuecomment-263550556&quot;&gt;psql 9.5 이상 버전을 사용 하는 방법&lt;/a&gt;도 있다. 요약하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;를 설정해주면 된다. 이 설정에 대한 자세한 설명은 &lt;a href=&quot;http://riseshia.github.io/2017/01/14/use-recent-postgresql-in-travis.html&quot;&gt;샤님 포스트&lt;/a&gt;에서 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;psql 버전이 설정되었으면, 사용하기전에 테스트용 DB를 생성하는 script를 넣어줘서 마무리하면 된다.&lt;/p&gt;

&lt;p&gt;최종적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2.5&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trusty&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9.6&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgresql&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticbeanstalk&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;access_key_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENV['AWS_ACCESS_KEY']&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secret_access_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENV['AWS_SECRET_KEY']&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ap-northeast-2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application-dev&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application-deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mysql&quot;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;travis MySQL 기본 버전은 5.5이다. 역시 대부분 이걸로 무난하게 쓸 수 있지만 특정 버전이 필요할 수 있다. 펭귄의 경우 MySQL 5.7 버전이 필요했지만 travis 가 5.7 버전은 공식 지원하지 않는다. 이 때문에 travis 에 MySQL 5.7을 설치 해야했다. 작성된 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x ./travis/*&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./travis/mysql-version-upgrade-5.7.sh&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./travis/mysql-reset-root-password.sh&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./travis/create-test-database.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보시다시피 &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; 로 권한을 먼저 부여한뒤 travis 디렉토리에 있는 스크립트들을 실행시켰다. 이 디렉토리는 펭귄이 편의상 별도로 만든 디렉토리이다. 각각의 스크립트 파일은 아래 gist 를 참고하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/say8425/25f534b60a7015ae5c03506306e20052#file-mysql-version-upgrade-5-7-sh&quot;&gt;mysql-version-upgrade-5.7.sh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/say8425/25f534b60a7015ae5c03506306e20052#file-mysql-reset-root-password-sh&quot;&gt;mysql-reset-root-password.sh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/say8425/25f534b60a7015ae5c03506306e20052#file-create-test-database-sh&quot;&gt;create-test-database.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL 5.7 을 직접 다운 받아 업그레이드 한뒤, 꼭 root 비밀번호를 reset 해줘야한다. 안그러면 build 실패한다. 이후 psql 과 동일하게 테스트용 DB를 생성하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;deploy&quot;&gt;DEPLOY&lt;/h2&gt;

&lt;p&gt;여기까지 세팅한 뒤 test를 통과했다면 자동으로 deploy 될 것이다. 단 deploy는 기본적으로 maseter branch에 대해서만 진행된다. 즉 다른 branch에서는 테스트가 통과해도 deploy 되지 않는다. 오직 master만 deploy 된다. 만약 이 설정을 바꾸고 싶다면 &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/#Conditional-Releases-with-on%3A&quot;&gt;on 설정&lt;/a&gt;을 넣으면 된다.&lt;/p&gt;

&lt;h2 id=&quot;그런데-이게-필요한가&quot;&gt;그런데 이게 필요한가?&lt;/h2&gt;

&lt;p&gt;사실 이 기능은 필수가 아니다. 오히려 deploy 정책이 &lt;code class=&quot;highlighter-rouge&quot;&gt;All at Once&lt;/code&gt; 라든가로 설정 되어있어서 deploy 시 무조건 중단이 된다면 사용하기 대단히 곤란하다. 또한 test 코드 외에는 더 이상의 테스트가 없이 deploy 되므로 테스트 코드가 완벽하게 커버해주고 있다는 가정이 뒷받침되어야 한다. 이 때문에 TDD가 철저하게 이루어지고 있어야 이 기능이 빛을 발한다. 따라서 이 기능의 도입 여부는 개발팀의 환경과 성향이 충분히 고려되어야 한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com&quot;&gt;travis 공식 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://riseshia.github.io/2017/01/14/use-recent-postgresql-in-travis.html&quot;&gt;PostgreSQL 9.5 이상 버전 사용하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/say8425/25f534b60a7015ae5c03506306e20052&quot;&gt;MySQL 5.7 버전 설치하기 gist&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/cotsog/travis_ci_prod_trusty/blob/789255e261d483a7d70d1e4a689e18f7eb56b90b/.travis.yml&quot;&gt;MySQL 5.7 버전 설치하기 gist - travis 측이 공식 메일로 제시한 방법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Travis CI는 test 환경을 구축해 테스트 하는 것은 물론, 통과된 테스트를 자동으로 deploy 할 수 있다. 수 많은 deploy 방법을 지원하는데, 펭귄은 그 중 rails를 AWS Elastic Beanstalk(이하 EB)에 배포 자동화 했던 경험을 공유하겠다. 참고로 이 포스팅은 7월 4일 AWSKrug 한 발표을 토대로 작성한 포스트다.</summary></entry><entry><title type="html">2016 루비 대림절 특집 - Gem 만들기</title><link href="https://say8425.github.io/generate-gem/" rel="alternate" type="text/html" title="2016 루비 대림절 특집 - Gem 만들기" /><published>2016-12-02T00:00:00+00:00</published><updated>2016-12-02T00:00:00+00:00</updated><id>https://say8425.github.io/generate-gem</id><content type="html" xml:base="https://say8425.github.io/generate-gem/">&lt;h2 id=&quot;2016-루비-대림절&quot;&gt;2016 루비 대림절&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://ruby-korea.github.io/advent-calendar/&quot;&gt;2016년 루비 대림절&lt;/a&gt; 글을 작성하게 되었습니다. 무려 2016년 12월 콩일에 작성하게 되어 영광(?)입니다.&lt;/p&gt;

&lt;p&gt;앞선 12월 1일에는 &lt;a href=&quot;https://github.com/ahastudio&quot;&gt;아샬님&lt;/a&gt;이 &lt;a href=&quot;https://github.com/ahastudio/til/blob/master/ruby/20161201-edsl.md&quot;&gt;루비로 DSL을 구현하는 법&lt;/a&gt;을 작성했으며, 다음 12월 3일에는 &lt;a href=&quot;https://github.com/riseshia&quot;&gt;샤왕자님&lt;/a&gt;이 &lt;a href=&quot;http://riseshia.github.io/2016/12/01/ruby-2-4-0-preview.html&quot;&gt;루비 2.4 변경점에 대한 글&lt;/a&gt;을 작성했습니다. 모두 훌륭한 글이니 함께 읽어주세요. 다른날에는 어떤 글들이 올라오고 있을까 궁금하신 분들은 &lt;a href=&quot;http://ruby-korea.github.io/advent-calendar/&quot;&gt;2016 루비 대림절 달력&lt;/a&gt;을 확인해주세요.&lt;/p&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;p&gt;루비를 쓰다보면 정말 많은 gem을 사용하게 된다. 정말 사용하기 편하고 프로젝트 개발 시간도 훨씬 줄여준다. 하지만 가끔씩 내가 원하는 gem이 없을때가 있다. 이럴때는 어쩔 수 없이 직접 작성하거나 혹은 다른 엯촋분들이 작성해주기를 기다릴 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;한번 직접 gem을 만들어 보는 것은 어떨까? 펭귄도 이런 망상(?)을 많이 했다. 그리고 우연히 만들게 된 계기가 있어서 직접 어떻게 만들었는지 여기에 공유해본다.&lt;/p&gt;

&lt;h2 id=&quot;new-gem&quot;&gt;NEW GEM&lt;/h2&gt;
&lt;p&gt;처음 gem을 만들게 된 계기는 Z사의 코딩 과제였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Naver API를 사용해서 좌표는 주소로, 주소는 좌표로 반환 받는 루비 API를 만들어보세요.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사실 rest를 쏘는 코드는 많이 작성해봐서 자신 있었다. 그런데 이거를 그냥 만들기는 너무 심심해서 한번 gem으로 만들어보는 것은 어떨까 생각해봤다. 게다가 마침 소스 사이즈도 얼마 안할 거라는 판단이 들어서 시도해봤다.&lt;/p&gt;

&lt;p&gt;우선 예전에 Ruby Mine에서 얼핏 새 gem 만들기를 본 적 있는 거 같아서 &lt;em&gt;New Project..&lt;/em&gt; 를 실행해봤다. 럭키! 정말 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-2-generate-gem/new-gem.png&quot; alt=&quot;Ruby Mine New Gem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이름, 경로 그리고 루비버전을 설정하고 만들기 했다. 참고로 gem 이름은 소문자로 짓되, 공백은 언더바로 해주면 무난하다. 자세한 짓는 방법은 &lt;a href=&quot;http://guides.rubygems.org/name-your-gem/&quot;&gt;이 문서&lt;/a&gt;를 참고하자.&lt;/p&gt;

&lt;p&gt;하지만 생성 이후 계속 bundle process만 돌아가고 어떠한 파일도 생성되지 않았다. 뭔가 잘못됐나 해서 몇 번이고 다시 시도한 끝에 알게되었는데, Ruby Mine 터미널에서 무언가 입력을 기다리고 있었던 것이다. 개발자 이름은 무엇이냐? 라이센스는 무엇이냐? README는 생성할 것이냐? CODE_OF_CONDUCT는 생성할 것이냐? 등등을 묻는데, 전부 적당히 입력하고 y로 통쳐도 상관없다. 참고로 한번 세팅하면 gem을 이후 다시 한번 생성해도 물어보지 않는다. 하지만 개발 과정에서 언제든지 바꿀 수 있는 설정이므로 크게 연연하지 않아도 괜찮다. 세팅을 끝내면 다음과 같은 트리구조가 생성될 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── CODE_OF_CONDUCT.md
├── Gemfile
├── LICENSE.txt
├── README.md
├── Rakefile
├── bin
│   ├── console
│   └── setup
├── lib
│   ├── naver_map
│   │   └── version.rb
│   └── naver_map.rb
├── naver_map.gemspec
└── test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gem-정보-입력하기&quot;&gt;gem 정보 입력하기&lt;/h2&gt;

&lt;h3 id=&quot;gem-정보는-gemspec에서-입력한다&quot;&gt;gem 정보는 gemspec에서 입력한다&lt;/h3&gt;

&lt;p&gt;우선 우리가 만든 gem의 정보를 입력해주자 &lt;code class=&quot;highlighter-rouge&quot;&gt;naver_map.gemspec&lt;/code&gt;이라는 파일이 있을 것이다. 열면 아래와 같은 코드가 나올 것이다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# coding: utf-8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'naver_map/version'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;naver_map&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyGem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Penguin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;say8425@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%q{TODO: Write a short summary, because Rubygems requires one.}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%q{TODO: Write a longer description or delete this line.}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TODO: Put your gem's website or public repo URL here.&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Prevent pushing this gem to RubyGems.org. To allow pushes either set the 'allowed_push_host'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# to allow pushing to a single host or delete this section to allow pushing to any host.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'allowed_push_host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TODO: Set to 'http://mygemserver.com'&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RubyGems 2.0 or newer is required to protect against &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;public gem pushes.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git ls-files -z`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^(test|spec|features)/}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bindir&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exe&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executables&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^exe/}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.13&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 10.0&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spec 요소에 gem의 정보를 적어주자. 참고로 여기에 작성된 정보는 아래 이미지와 같이 rubygems.org 에 전부 display가 되므로 정확하게 적어주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-2-generate-gem/ruby-gem-page.png&quot; alt=&quot;Ruby Gem Page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;version&quot;&gt;Version&lt;/h3&gt;
&lt;p&gt;version은 약간 특이하게 되었는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;require 'naver_map/version'&lt;/code&gt;를 보고 눈치챘겠지만 따로 Version이라는 클래스에서 받아온다. 따라서 버전을 수정하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;naver_map/version&lt;/code&gt; 파일을 수정하면 된다. 디폴트가 왜 이렇게 번거로운지 모르겠지만, Version 클래스를 지워버리고 gemspec에 직접 버전을 입력해도 별 문제 없다. 심지어 공식 가이드에서도 gemspec에 버전을 직접 입력하는 방법을 보여주고 있으므로 편한대로 작성하자.&lt;/p&gt;

&lt;h3 id=&quot;dependency&quot;&gt;Dependency&lt;/h3&gt;
&lt;p&gt;다 작성하고 아래를 보면 이런 코드가 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.13&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 10.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이름에서도 알 수 있듯이, 이 gem에 대한 디펜던시를 선언하는 코드다. rails에서 하듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;에서 직접 선언해도 상관없지만, 공식 가이드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;gemspec&lt;/code&gt;에서 관리하는 방법을 보여주고 있다. 이는 위에서 봤듯이 디펜던시 또한 rubygem.org 에 display가 되는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;에서 선언하면 보여주지를 못한다.&lt;/p&gt;

&lt;p&gt;디펜던시를 선언하는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_runtime_dependency&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_development_dependency&lt;/code&gt; 2가지가 있다. 전자는 gem이 실행되는 데 있어서 필요한 디펜던시이고, 후자는 개발과정에서 필요한 디펜던시이다. 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;group :development do end&lt;/code&gt;정도에 해당한다. 펭귄은 rest를 쏘는 gem이 필요하므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;rest-client&lt;/code&gt;를 추가하겠다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rest-client&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 2.0.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ruby-version&quot;&gt;Ruby version&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;required_ruby_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 2.2.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;안해줘도 상관 없는데, 필요한 루비 최소버전을 보여주고 싶다면 추가해주자. 참고로 이 값을 넣지않으면, 필요한 루비 최소버전은 0.0이상이라고 display된다.&lt;/p&gt;

&lt;p&gt;다 작성된 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# coding: utf-8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'naver_map/version'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;naver_map&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NaverMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Penguin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;say8425@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generating Naver map API&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Naver support map API. But we don't have any ruby gem for this API.
                        So You can use it with this gem comfortable.&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/say8425/naver_map_ruby&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Prevent pushing this gem to RubyGems.org. To allow pushes either set the 'allowed_push_host'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# to allow pushing to a single host or delete this section to allow pushing to any host.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'allowed_push_host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org/&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RubyGems 2.0 or newer is required to protect against &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;public gem pushes.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git ls-files -z`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^(test|spec|features)/}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bindir&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exe&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executables&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^exe/}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;required_ruby_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 2.2.0&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rest-client&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 2.0.0&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.13&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 11.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 11.2.2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;코딩하기&quot;&gt;코딩하기&lt;/h2&gt;

&lt;h3 id=&quot;본격적인-소스는-lib에서&quot;&gt;본격적인 소스는 lib에서&lt;/h3&gt;
&lt;p&gt;지겨운 설정은 이쯤에서 마무리 짓고, 이제 직접 코딩해보자. 디렉토리중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt;이라고 있을 것이다. gem이 작동하는 코드는 이 디렉토리에 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/naver_map.rb&lt;/code&gt;를 열어보자.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./naver_map/version'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyGem&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Your code goes here...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 이라는 생소한 블락이 보일 것이다. 이 module은 여러 클래스에서 사용할 수 있는 메소드를 제공하는 블락이다. 하지만 펭귄은 단 하나의 클래스면 충분하므로 이 module을 지우고 class에서 코딩하기로 했다. 코딩은 평소 루비에서 코딩하듯이 하면 된다. 펭귄이 당시 코딩한 초기 소스는 아래와 같았다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'naver_map/version'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rest-client'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NaverMap&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:client_secret&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@client_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_secret&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;address_to_coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://openapi.naver.com/v1/map/geocode'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RestClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'X-Naver-Client-Id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s1&quot;&gt;'X-Naver-Client-Secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@client_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;symbolize_names: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExceptionWithResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://openapi.naver.com/v1/map/geocode'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RestClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'X-Naver-Client-Id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s1&quot;&gt;'X-Naver-Client-Secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@client_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;symbolize_names: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExceptionWithResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Client ID: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@client_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, Client Secret: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@client_secret&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;상당히 엉망진창 초기 소스다. 혹시 소스가 화가 난다면 많은 풀리와 이슈 부탁한다. 일단 의도한 바는 &lt;code class=&quot;highlighter-rouge&quot;&gt;NaverMap.new('클라이언트 키', '클라이언트 비밀키')&lt;/code&gt;로 객체를 생성하고 이 객체로 좌표나 주소를 받아오는 것이었다. 한번 직접 gem을 설치해서 테스트해보자.&lt;/p&gt;

&lt;h3 id=&quot;gem-빌드하기&quot;&gt;gem 빌드하기&lt;/h3&gt;
&lt;p&gt;우선 gem을 빌드해야한다. 빌드하려면 터미널에 다음과 같은 명령을 쳐주면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem build naver_map.gemspec 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Successfully built RubyGem
  Name: naver_map
  Version: 0.1.0
  File: naver_map-0.2.3.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 디렉토리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;naver_map-0.1.0.gem&lt;/code&gt;이라는 gem이 생성 된 것을 볼 수 있을 것이다. 이 gem을 설치하자. 설치는 평소 하던 명령어와 똑같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install naver_map-0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Successfully installed naver_map-0.1.0
Parsing documentation for naver_map-0.1.0
Done installing documentation for naver_map after 0 seconds
1 gem installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 성공한 것을 확인 할 수 있을 것이다. 이제 gem을 직접 사용해보자.&lt;/p&gt;

&lt;h3 id=&quot;실행해보기&quot;&gt;실행해보기&lt;/h3&gt;
&lt;p&gt;irb를 실행하자. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;require 'naver_map'&lt;/code&gt;이라고 명령하자. &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;가 반환되면 성공 한 것이다. 그럼 테스트를 해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test = NaverMap.new('클라이언트 키', '클라이언트 비밀키')
=&amp;gt; #&amp;lt;NaverMap:0x007fd2c115b0a8 @client_id=&quot;클라이언트 키&quot;, @client_secret=&quot;클라이언트 시크릿&quot;&amp;gt;
test.address_to_coordinates('서울특별시 중구 세종대로 110 서울특별시청')
=&amp;gt; [{:x=&amp;gt;126.9783882, :y=&amp;gt;37.5666103}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘된다면 성공한 것이다. 이제 이 gem을 푸시하자.&lt;/p&gt;

&lt;h2 id=&quot;gem-푸시하기&quot;&gt;gem 푸시하기&lt;/h2&gt;
&lt;p&gt;gem을 푸사하기전에 우선 필요한 것이 있다. &lt;a href=&quot;https://rubygems.org&quot;&gt;루비젬&lt;/a&gt; 계정과 인증서이다. 우선 루비젬에서 계정을 만들자. 그리고 인증서를 다운받자. 인증서를 다운 받는 명령어는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -u 계정명 https://rubygems.org/api/v1/api_key.yaml &amp;gt;
~/.gem/credentials; chmod 0600 ~/.gem/credentials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter host password for user '계정명':
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;명령어를 치면 비밀번호를 입력받을 것이다. 입력해주고 세팅을 마무리해주자. 그러면 gem을 푸시할 준비는 끝났다. 아래 명령어로 gem을 푸시하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem push naver_map-0.1.0.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 성공했다는 메시지가 뜬다면 성공한 것이다. 이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install&lt;/code&gt;로 평범하게 gem 설치하듯이 어디서나 다운 받고 설치 할 수 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://ruby-korea.github.io/rubygems-guides/make-your-own-gem/&quot;&gt;gem 만들어 보기 공식 가이드 번역 문서 - 번역해주셔서 고맙습니다&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://quickleft.com/blog/engineering-lunch-series-step-by-step-guide-to-building-your-first-ruby-gem/&quot;&gt;가장 많이 도움 받은 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.netguru.co/blog/creating-a-gem-a-step-by-step-tutorial&quot;&gt;gem 버저닝과 이름 짓는 법에 대해 도움 받은 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://icebergist.com/posts/creating-and-publishing-a-ruby-gem/&quot;&gt;gem 초기 세팅할때 도움 받은 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.justinweiss.com/articles/a-guide-to-extracting-your-first-ruby-gem/&quot;&gt;어떤 gem을 만들 것인가 방향을 정하는 법을 알려주는 문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">2016 루비 대림절 2016년 루비 대림절 글을 작성하게 되었습니다. 무려 2016년 12월 콩일에 작성하게 되어 영광(?)입니다.</summary></entry><entry><title type="html">gem 버전에서 ~&amp;gt; 은 무슨 의미인가?</title><link href="https://say8425.github.io/gem-version-~/" rel="alternate" type="text/html" title="gem 버전에서 ~&gt; 은 무슨 의미인가?" /><published>2016-11-07T00:00:00+00:00</published><updated>2016-11-07T00:00:00+00:00</updated><id>https://say8425.github.io/gem-version-~%3E</id><content type="html" xml:base="https://say8425.github.io/gem-version-~/">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;을 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt;을 많이 볼 수 있다. 이 오퍼레이터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pessimistic operator&lt;/code&gt;라고 불리며, 루비 코어에서 사용되지 않고 루비 젬파일에서 사용되는 걸로 보인다. 일단 이 오퍼레이터의 의미부터 말하자면 해당 버전부터 소수점 한 자리수 위 미만을 의미한다. 예를 들어&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rest-client'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt; 2.0.1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와같은 코드가 있다면 아래와 같은 의미이다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;버전&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이라는 의미이다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;을 사용해도 버전이 2.1.0 이상 올라가지 않는다. &lt;a href=&quot;http://semver.org/lang/ko/&quot;&gt;유의적 버전&lt;/a&gt;이라는 체계에 따라 의존성 관리할때 유용하며, thoughtbot에서 또한 &lt;a href=&quot;https://github.com/thoughtbot/guides/tree/master/best-practices#bundler&quot;&gt;권장&lt;/a&gt;하고 있다.&lt;/p&gt;

&lt;p&gt;참고로 이 글을 작성하는 현 시점에서 rest-client 2.0.1 버전은 나오지 않았으며, 예시로 작성된 버전이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://robots.thoughtbot.com/a-healthy-bundle&quot;&gt;thoughtbot에서 제시한 bundler 가이드&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://robots.thoughtbot.com/rubys-pessimistic-operator&quot;&gt;thoughtbot에서 pessimistic operator을 설명한 글&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hatemogi/semver&quot;&gt;유의적 버전 번역글 - 번역해주셔서 고맙습니다&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Gemfile을 보면 ~&amp;gt;을 많이 볼 수 있다. 이 오퍼레이터는 pessimistic operator라고 불리며, 루비 코어에서 사용되지 않고 루비 젬파일에서 사용되는 걸로 보인다. 일단 이 오퍼레이터의 의미부터 말하자면 해당 버전부터 소수점 한 자리수 위 미만을 의미한다. 예를 들어</summary></entry><entry><title type="html">CSV를 utf-8 with BOM으로 내보내기</title><link href="https://say8425.github.io/csv-utf-bom/" rel="alternate" type="text/html" title="CSV를 utf-8 with BOM으로 내보내기" /><published>2016-10-26T00:00:00+00:00</published><updated>2016-10-26T00:00:00+00:00</updated><id>https://say8425.github.io/csv-utf-bom</id><content type="html" xml:base="https://say8425.github.io/csv-utf-bom/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;p&gt;레일즈에서 테이블을 csv로 내보내기 함수를 만들어 잘 사용하고 있었는데, 최근에 이 csv를 엑셀에서 읽으면 한글이 깨지는 이슈를 발견했다.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_csv&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_names&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;send_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;filename: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'text/csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;disposition: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'attachment'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 CSV는 기본적으로 UTF-8 형식으로 내보내지고 있는데, 엑셀에서는 엉뚱하게도 일본어로 출력되었다.&lt;/p&gt;

&lt;h2 id=&quot;bom이-뭐지요&quot;&gt;BOM이 뭐지요,,?&lt;/h2&gt;
&lt;p&gt;구글링 해보니 이런 &lt;a href=&quot;https://www.skoumal.net/en/making-utf-8-csv-excel/&quot;&gt;문서&lt;/a&gt;가 있다. 문서에는 이런 말이 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Excel default encoding depends on the system. The workaround is to put three magical bytes to the file beginning. They are called BOM (Byte order mark) and say to the editor that file is encoded as UTF-8.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대충 이런 내용이다. 엑셀은 기본적으로 시스템 인코딩을 따른다. 그리고 BOM이라는 &lt;del&gt;신비한&lt;/del&gt; 바이트 3개를 파일이 시작될 때 넣어줘야 UTF-8이라고 인지한다.&lt;/p&gt;

&lt;h2 id=&quot;bom을-심어주자&quot;&gt;BOM을 심어주자!&lt;/h2&gt;
&lt;p&gt;그런면 BOM을 심어주자. 찾아보니 이미 &lt;a href=&quot;http://qiita.com/necojackarc/items/5e865a4aa039fdd3f2c0#実装&quot;&gt;열도국에서 누군가 시도&lt;/a&gt;했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require &quot;csv&quot;

bom = %w(EF BB BF).map { |e| e.hex.chr }.join
CSV.generate(bom) do |csv|
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bom = %w(EF BB BF).map { |e| e.hex.chr }.join&lt;/code&gt;은 앞서 말한 &lt;code class=&quot;highlighter-rouge&quot;&gt;BOM&lt;/code&gt;이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;EF BB BF&lt;/code&gt;은 아스키코드화 되어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;\xEF\xBB\xBF&quot;&lt;/code&gt;로 조합한다. 그리고 코드에서 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;bom&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;generate&lt;/code&gt; 함수에 들어갔다. 저것이 무슨 의미인가 &lt;a href=&quot;https://docs.ruby-lang.org/en/2.1.0/CSV.html#method-c-generate&quot;&gt;문서&lt;/a&gt;에서 찾아보았다. 대충 해석하면 이러하다. 생성된 block앞에 붙인다는 얘기이다. 거꾸로 말해서, block이 이 파라미터로 시작한다는 얘기이다.&lt;/p&gt;

&lt;h2 id=&quot;실제로-출력해보자&quot;&gt;실제로 출력해보자&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=&amp;gt; &quot;\xEF\xBB\xBFid,host,port,...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제로 출력해보니 위와 같이 BOM으로 시작하고 있다는 것을 확인 할 수 있었다. 결과물의 인코딩 또한 확인해봤다. 펭귄은 &lt;a href=&quot;http://stackoverflow.com/questions/16195871/how-do-i-see-the-current-encoding-of-a-file-in-sublime-text-2/16199148#16199148&quot;&gt;서브라임에서 확인&lt;/a&gt;했는데, 서브라임의 콘솔창을 열고 &lt;code class=&quot;highlighter-rouge&quot;&gt;view.encoding()&lt;/code&gt;라는 명령어를 치면 된다. 보기 좋게 &lt;code class=&quot;highlighter-rouge&quot;&gt;'UTF-8 with BOM'&lt;/code&gt;이라는 결과물을 볼 수 있을 것이다. 그리고 엑셀로 실행해보면 언제 그랬냐는 듯이 한글을 정상적으로 보여줄 것이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.skoumal.net/en/making-utf-8-csv-excel/&quot;&gt;엑셀은 BOM이 필요하다는 것을 설명한 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://qiita.com/necojackarc/items/5e865a4aa039fdd3f2c0#実装&quot;&gt;열도국에서 누군가 BOM을 시도한 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/a/19678391/3910390&quot;&gt;SO에서 설명한 문서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/a/16199148/3910390&quot;&gt;서브라임에서 현재 인코딩 확인하는 방법에 대한 SO문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">개요 레일즈에서 테이블을 csv로 내보내기 함수를 만들어 잘 사용하고 있었는데, 최근에 이 csv를 엑셀에서 읽으면 한글이 깨지는 이슈를 발견했다.</summary></entry><entry><title type="html">HTTP method 전달과 disabled 동시에 하기</title><link href="https://say8425.github.io/HTTP-method-button-disabled/" rel="alternate" type="text/html" title="HTTP method 전달과 disabled 동시에 하기" /><published>2016-10-21T00:00:00+00:00</published><updated>2016-10-21T00:00:00+00:00</updated><id>https://say8425.github.io/HTTP-method-button-disabled</id><content type="html" xml:base="https://say8425.github.io/HTTP-method-button-disabled/">&lt;p&gt;HTTP method로 전달 하되, 버튼을 클릭시 &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled&lt;/code&gt;가 되게 만들 일이 생겼다. 그래서 우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;button tag&lt;/code&gt;로 할 수 있는 방법을 찾아봤다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;window.location='http://www.example.com';&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-danger&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-disable-with=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;삭제중&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;삭제&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onclick&lt;/code&gt;을 이용해서 원하는 링크 주소를 입력해주면 된다. 하지만 method를 정해주는 방법을 찾을 수 없었다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a tag&lt;/code&gt;를 시도해봤다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-danger&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-disable-with=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;삭제중&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:3000/systems/delete?id=4&amp;amp;amp;kind=accessors&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;삭제&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a tag&lt;/code&gt; 답게 코드도 훨씬 깔끔해졌다. 하지만 치명적인 문제가 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;a tag&lt;/code&gt;는 disabled가 안된다. 이 때문에 disabled 하는 방법을 찾아보았는데, 클릭시 &lt;a href=&quot;http://stackoverflow.com/a/13955726/3910390&quot;&gt;return false를 내놓는 방법&lt;/a&gt;과 &lt;a href=&quot;http://stackoverflow.com/a/13955716/3910390&quot;&gt;href 요소를 제거하는 방법&lt;/a&gt;이 있지만 펭귄에게는 두 방법이 모두가 안되었다. 그래서 클릭시 &lt;a href=&quot;http://stackoverflow.com/a/27057625/3910390&quot;&gt;disabled style을 입히는 방법&lt;/a&gt;을 시도했다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.confirm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'disabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not-allowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;부트스트랩 기본 disabled button 과 통일성을 맞추려고 &lt;code class=&quot;highlighter-rouge&quot;&gt;.btn.disabled&lt;/code&gt;을 참고해서 만들었다. 주의할 점은 &lt;a href=&quot;http://caniuse.com/#feat=pointer-events&quot;&gt;pointer-events는 IE 11이상에서만 지원&lt;/a&gt;한다. 그래서 만약 낮은 버전의 IE도 지원해야한다면 다른 방법도 참고해야한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13955667/disabled-href-tag&quot;&gt;a tag를 disabled 하기 SO문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">HTTP method로 전달 하되, 버튼을 클릭시 disabled가 되게 만들 일이 생겼다. 그래서 우선 button tag로 할 수 있는 방법을 찾아봤다.</summary></entry><entry><title type="html">reactjs 공부하기 - 02</title><link href="https://say8425.github.io/react-study-02/" rel="alternate" type="text/html" title="reactjs 공부하기 - 02" /><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><id>https://say8425.github.io/react-study-02</id><content type="html" xml:base="https://say8425.github.io/react-study-02/">&lt;p&gt;이제 컴포넌트를 다뤄보자. 컴포넌트는 리엑트를 구성하는 덩어리들이다. reactjs는 이 공통되는 최소사항들을 컴포넌트 단위로 쪼개고 조립 할 것을 권장한다. 말이 어려우니 직접 코딩해보자.&lt;/p&gt;

&lt;h3 id=&quot;컴포넌트&quot;&gt;컴포넌트&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component } from 'react';
import ReactDOM from 'react-dom';

class GroceryList extends Component {
  render() {
    return (
      &amp;lt;ul&amp;gt;
        &amp;lt;ListItem quantity=&quot;1&quot; name=&quot;Bread&quot; /&amp;gt;
        &amp;lt;ListItem quantity=&quot;6&quot; name=&quot;Eggs&quot; /&amp;gt;
        &amp;lt;ListItem quantity=&quot;2&quot; name=&quot;Milk&quot; /&amp;gt;
      &amp;lt;/ul&amp;gt;
    );
  }
}

class ListItem extends Component {
  render() {
    return (
      &amp;lt;li&amp;gt;
        {this.props.quantity} x {this.props.name}
      &amp;lt;/li&amp;gt;
    );
  }
}

ReactDOM.render(&amp;lt;GroceryList /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전에 작성한 코드와 달리 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;가 2개가 선언 된 것이 보일 것이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;extends Component&lt;/code&gt;가 보인가? 해당 클래스를 컴포넌트로 사용하겠다고 선언 한 것이다. 그러니까 우리는 이미 컴포넌트를 사용한 것이다. 첫번째 컴포넌트 &lt;code class=&quot;highlighter-rouge&quot;&gt;GroceryList&lt;/code&gt;를 보자. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ListItem quantity=&quot;1&quot; name=&quot;Bread&quot; /&amp;gt;&lt;/code&gt;라는 구문이 있다. 이것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ListItem&lt;/code&gt;이라는 컴포넌트를 사용하고, 해당 컴포넌트의 quantity와 name이라는 property에 각각 “1”과 “Bread”라는 값을 넣겠다는 것이다. 그러면 이 컴포넌트는 어디 있는가? 바로 아래에 있다.&lt;/p&gt;

&lt;p&gt;아래에 &lt;code class=&quot;highlighter-rouge&quot;&gt;class ListItem extends Component&lt;/code&gt;라는 또다른 클래스가 선언 된 것이 보일 것이다. 이 컴포넌트를 보자. 이 컴포넌트는 &amp;lt;li&amp;gt;태그를 반환한다. 어떻게 반환하는가? &lt;code class=&quot;highlighter-rouge&quot;&gt;{this.props.quantity} x {this.props.name}&lt;/code&gt;라는 값을 품고. 이 값은 무엇일까? &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; 혹시 기억하는가? 이것은 변환 될 수 있는 값임을 의미한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;안에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.quantity&lt;/code&gt;라는 구문이 있다. 보이는대로 이 컴포넌트의 __quantity라는 속성__을 의미한다. 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;GroceryList&lt;/code&gt;컴포넌트에서 호출한 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ListItem quantity=&quot;1&quot; name=&quot;Bread&quot; /&amp;gt;&lt;/code&gt;구문을 보자. &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity=&quot;1&quot;&lt;/code&gt;가 보인가? &lt;code class=&quot;highlighter-rouge&quot;&gt;ListItem&lt;/code&gt;라는 컴포넌트를 호출하면서 quantity의 속성은 “1”로 넣어줬다. 그리고 name 속성은 “Bread”. 그래서 결좌적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;ListItem&lt;/code&gt;컴포넌트는 아래와 같이 반환한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;li&amp;gt;1 x Bread&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ListItem quantity=&quot;6&quot; name=&quot;Eggs&quot; /&amp;gt;&lt;/code&gt;도 마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;6 x Eggs&amp;lt;/li&amp;gt;&lt;/code&gt;라는 구문을 반환한다. 다만 실제 반환되는 값은 이렇게 간단하지 않지만 지금은 이렇게 알고 가자.&lt;/p&gt;

&lt;h3 id=&quot;ide&quot;&gt;IDE&lt;/h3&gt;

&lt;p&gt;이쯤 됐으면 좀 더 편하게 코딩하고 싶을 것이다. 설마 notepad에서 작업하고 있었다면 빨리 다른 IDE를 알아보자. 대부분 &lt;a href=&quot;https://atom.io&quot;&gt;아톰&lt;/a&gt;이나 &lt;a href=&quot;http://www.sublimetext.com&quot;&gt;서브라임 텍스트&lt;/a&gt;를 사용할텐데 펭귄은 아톰을 사용하고 있다. 서브라임 자체도 매우 훌룡한 에디터지만 플러그인 메인테인이 워낙 지지부진 해서다. 그리고 프로젝트 단위로 작업하기도 아톰이 편하다. 만약 아톰을 사용할 것이라면 &lt;a href=&quot;https://github.com/gandm/language-babel&quot;&gt;babel 패키지&lt;/a&gt;를 설치하고 사용 할 것을 추천한다. 당연히 자동완성도 지원하며 발암율도 급격히 내려갈 것이다.&lt;/p&gt;

&lt;!-- _includes/image.html --&gt;
&lt;div class=&quot;image-wrapper&quot;&gt;
    
        &lt;img src=&quot;https://say8425.github.io/images/2016-8-15-react-study-02/auto-complete.png&quot; alt=&quot;You neee autocomplete&quot; /&gt;
    
    
        &lt;p class=&quot;image-caption&quot;&gt;auto complete 없이 코딩한 자의 최후&lt;/p&gt;
    
&lt;/div&gt;

&lt;p&gt;babel 패키지 말고 &lt;a href=&quot;https://github.com/orktes/atom-react&quot;&gt;react 패키지&lt;/a&gt;도 따로 있다. 둘 다 메인테인이 매우 활발하니 골라 쓰자. 다만 펭귄은 babel 패키지에도 이미 react 하이라이트와 자동완성이 포함되있고 어차피 사용하는 거 좀 더 포괄적인 것을 사용하고 싶어서 babel 패키지를 사용하고 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/gandm/language-babel&quot;&gt;Atom Babel Package&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/orktes/atom-react&quot;&gt;Atom React Package&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">이제 컴포넌트를 다뤄보자. 컴포넌트는 리엑트를 구성하는 덩어리들이다. reactjs는 이 공통되는 최소사항들을 컴포넌트 단위로 쪼개고 조립 할 것을 권장한다. 말이 어려우니 직접 코딩해보자.</summary></entry><entry><title type="html">bootstrap tab과 pill을 data 속성으로 동작시키기</title><link href="https://say8425.github.io/bootstrap-nav-work/" rel="alternate" type="text/html" title="bootstrap tab과 pill을 data 속성으로 동작시키기" /><published>2016-08-11T00:00:00+00:00</published><updated>2016-08-11T00:00:00+00:00</updated><id>https://say8425.github.io/bootstrap-nav-work</id><content type="html" xml:base="https://say8425.github.io/bootstrap-nav-work/">&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com/components/#nav&quot;&gt;bootstrap navs&lt;/a&gt;는 크게 두 부분으로 나뉘어진다. 메뉴를 보여주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.nav&lt;/code&gt;와 각 메뉴의 내용인 &lt;code class=&quot;highlighter-rouge&quot;&gt;.tab-pane&lt;/code&gt;을 품고있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.tab-content&lt;/code&gt;로 나뉘어진다. 각 메뉴를 클릭하면 해당 메뉴는 target하고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.tab-pane&lt;/code&gt;을 보여주고 다른 &lt;code class=&quot;highlighter-rouge&quot;&gt;.tab-pane&lt;/code&gt;은 감춘다. 간단한 소스로 보여주면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul class=&quot;nav nav-pills&quot;&amp;gt;
  &amp;lt;li role=&quot;presentation&quot; class=&quot;active&quot;&amp;gt;&amp;lt;a data-toggle=&quot;pill&quot; data-target=&quot;#first&quot;&amp;gt;1번 필&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li role=&quot;presentation&quot;&amp;gt;&amp;lt;a data-toggle=&quot;pill&quot; data-target=&quot;#second&quot;&amp;gt;2번 필&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li role=&quot;presentation&quot;&amp;gt;&amp;lt;a data-toggle=&quot;pill&quot; data-target=&quot;#third&quot;&amp;gt;3번 필&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;div class=&quot;tab-content&quot;&amp;gt;
  &amp;lt;div class=&quot;tab-pane active&quot; id=&quot;first&quot;&amp;gt;
    1번 필
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;tab-pane&quot; id=&quot;second&quot;&amp;gt;
    2번 필
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;tab-pane&quot; id=&quot;third&quot;&amp;gt;
    3번 필
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data-target&lt;/code&gt;은 id 셀렉터든 클래스 셀렉터든 상관 없으며, 여러개를 target할 수 있다. 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;data-target&lt;/code&gt;속성 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt;속성으로도 target할 수 있다. 하지만 bootstrap 가이드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;data-target&lt;/code&gt;속성을 같이 지정했는데, 아마도 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;속성을 지원하지 않는 몇몇 브라우저를 대비한 것이 아닌가 추측된다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;related links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/components/#nav&quot;&gt;bootstrap nav component 가이드 - nav 메뉴의 외양 설정&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/components/#nav&quot;&gt;bootstrap nav js 가이드 - js 동작 및 이벤트&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19225968/bootstrap-tab-is-not-working-when-tab-with-data-target-instead-of-href&quot;&gt;data 속성으로 작동시키기에 대한 SO 문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">bootstrap navs는 크게 두 부분으로 나뉘어진다. 메뉴를 보여주는 .nav와 각 메뉴의 내용인 .tab-pane을 품고있는 .tab-content로 나뉘어진다. 각 메뉴를 클릭하면 해당 메뉴는 target하고 있는 .tab-pane을 보여주고 다른 .tab-pane은 감춘다. 간단한 소스로 보여주면 아래와 같다.</summary></entry><entry><title type="html">reactjs 공부하기 - 01</title><link href="https://say8425.github.io/react-study-01/" rel="alternate" type="text/html" title="reactjs 공부하기 - 01" /><published>2016-08-08T00:00:00+00:00</published><updated>2016-08-08T00:00:00+00:00</updated><id>https://say8425.github.io/react-study-01</id><content type="html" xml:base="https://say8425.github.io/react-study-01/">&lt;p&gt;전 포스트에서 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;를 출력했다. 본래는 이번 포스트에서 컴포넌트를 다루기로 했지만, 그전에 전 포스트에서 작성한 코드를 기반으로 몇 가지를 추가로 포스트한다.&lt;/p&gt;

&lt;h3 id=&quot;구조분해-할당&quot;&gt;구조분해 할당&lt;/h3&gt;

&lt;p&gt;들어가기 앞서 전 포스트에서 작성한 코드의 앞줄을 잠깐만 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

class Hello extends React.Component {
  
// 중략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보이는 대로 소스에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;를 사용하였다. 그리고 이를 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;import React from 'react'&lt;/code&gt;를 사용해서 react라는 모듈을 통째로 import 해왔다. 하지만 지금은 이 모듈이 전부 필요하지 않고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt;만 필요하다. 그렇다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt;만 접근할 수 없을까? 가능하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component} from 'react';
import ReactDOM from 'react-dom';

class Hello extends Component {

// 중략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import React, { Component} from 'react'&lt;/code&gt;와 같이 코드를 작성해서 react 모듈 내부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt;를 직접 접근할 수 있다. 이렇게 하면 사용할때도 &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;라고 쓸 필요 없이, 당장 &lt;code class=&quot;highlighter-rouge&quot;&gt;Componet&lt;/code&gt;로 접근 할 수 있다. 책에서는 이것을 &lt;strong&gt;구조분해 할당 destrucutring assignemt&lt;/strong&gt; 이라고 하지만, MDN에서는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;비구조화 할당&lt;/a&gt;이라고 번역했다. 참고로 ES6에서 포함된 개념이다. 사실 이로 인한 생산성 혹은 퍼포먼스 효과는 얼마나 큰지 당장은 모르겠지만, 책에서는 생산성에 도움이 될 것이다는 릐앙스로 적혀있었다. 정말 그런지는 사용해보면서 판단해야 할 거 같다.&lt;/p&gt;

&lt;h3 id=&quot;동적값&quot;&gt;동적값&lt;/h3&gt;

&lt;p&gt;JSX에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;로 감싸진 구문은 동적으로 표현된다. 루비에도 비슷한 표현이 있는 것으로 보아 대부분 언어에서 사용되는 표현이 아닌가 싶다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component} from 'react';
import ReactDOM from 'react-dom';

class Hello extends Component {
  render() {
    var place = &quot;World&quot;
    return (
      &amp;lt;h1&amp;gt;Hello {place}&amp;lt;/h1&amp;gt;
    );
  }
}

ReactDOM.render(&amp;lt;Hello/&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;palce&lt;/code&gt; 변수의 값을 표출하였으며, 이 변수를 조작해서 출력되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt;도 조작 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;다음-포스트&quot;&gt;다음 포스트&lt;/h3&gt;

&lt;p&gt;컴포넌트를 포스트 하기전에 몇 가지 기능을 포스트했다. 동적 값은 매우 필수적인 기능이지만, 구조분해 할당은 정말 유용한지 좀 더 연구해봐야 할 듯 싶다. 아직까지는 이게 필요한가? 감이 안잡히기 때문이다. 쓰면서 느낀 바나 알게된 사실이 있으면 추가하겠다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Related Links
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;비구화 할당 MDN 문서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">전 포스트에서 간단하게 Hello World를 출력했다. 본래는 이번 포스트에서 컴포넌트를 다루기로 했지만, 그전에 전 포스트에서 작성한 코드를 기반으로 몇 가지를 추가로 포스트한다.</summary></entry></feed>