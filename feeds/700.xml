<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello Python</title>
    <description>...</description>
    <link>https://lee-seul.github.io/</link>
    <atom:link href="https://lee-seul.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 May 2019 02:42:58 +0000</pubDate>
    <lastBuildDate>Thu, 02 May 2019 02:42:58 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Django에서 Cache 사용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;django-caching&quot;&gt;Django Caching&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실 서비스 운영시 대부분의 장애는 DB 부하로부터 시작된다.&lt;/p&gt;

&lt;p&gt;DB 부하를 줄일 수 있는 방법에는 DB에서 실행되는 쿼리의 숫자를 줄이거나,&lt;/p&gt;

&lt;p&gt;쿼리 하나 당 사용하는 DB 서버의 리소스를 줄이는 방법이 있다.&lt;/p&gt;

&lt;p&gt;후자의 경우 최적화가 필요한데, 일반적으로 쿼리 개발보다 최적화가 훨씬 더 많은 시간과 노력이 필요하므로,&lt;/p&gt;

&lt;p&gt;조금 더 간단한 쿼리 숫자를 줄이는 방법에 대해서 설명하려고 한다.&lt;/p&gt;

&lt;p&gt;DB 서버에서 실행되는 쿼리의 숫자를 줄이려면 캐시를 사용하는 방법이 있다.&lt;/p&gt;

&lt;p&gt;Django에서는 간단한 방법으로 캐시를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;기본적으로는 Memcached를 사용할 수 있지만, 개인적으로 Redis를 더 선호하므로 Redis로 진행한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;redis-설정하기&quot;&gt;Redis 설정하기&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;설정은 간단하다. django-redis를 설치한 후 settings.py에 CACHE 부분을 추가해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install django-redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CACHES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'BACKEND'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django_redis.cache.RedisCache'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'LOCATION'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'redis://{URL}:6379'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ElaticCache에 Redis를 띄운 후 설정했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cache-사용하기&quot;&gt;Cache 사용하기&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;캐시 사용은 더 간단하다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.cache&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_post_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'my_blog_post_count'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_post_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cache.get() 을 통해 캐시에 접근하고 cache.set()을 통해 캐시를 저장한다.&lt;/p&gt;

&lt;p&gt;캐시는 Key-Value로 이루어진 간단한 구조이기 때문에 키를 통해 데이터를 저장하고 불러온다.&lt;/p&gt;

&lt;p&gt;cache.get() 의 경우, cache 키와 default를 지정해 주었고&lt;/p&gt;

&lt;p&gt;cache.set() 의 경우 캐싱할 데이터의 키와 데이터 그리고 유효 기간을 입력해 주었다.&lt;/p&gt;

&lt;p&gt;유효 기간의 단위를 초로 60 * 60으로 설정한 경우 3600초, 즉 1시간 이후에 해당 데이터가 만료된다.&lt;/p&gt;

&lt;p&gt;데이터를 캐싱할 때는 유효 기간 설정이 매우 중요한데,&lt;/p&gt;

&lt;p&gt;캐싱이 이루어진 데이터에 변경을 유저에게 언제 노출 시켜줄지에 따라 값이 달라진다.&lt;/p&gt;

&lt;p&gt;예를 들어, 오늘 하루 동안 동일한 데이터를 보여줘도 되는 경우&lt;/p&gt;

&lt;p&gt;유효 기간을 오늘이 끝나는 시간으로 설정한다면 하루 동안 동일 요청에 대한 쿼리가 DB에 단 한번만 실행되게 되므로 DB 서버에서 실행되는 쿼리 숫자를 줄일 수 있게 된다.&lt;/p&gt;

&lt;p&gt;이번 포스팅의 경우 Django에서 cache를 사용하는 가장 간단한 방법에 대해서만 다루었으므로,&lt;/p&gt;

&lt;p&gt;cache를 사용한다면 캐시를 사용해도 되는지 여부와 유효 기간을 얼마나 둘지에 대해 한번 더 생각해보고 적용하기를 바란다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 02 May 2019 02:40:04 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2019/05/02/django-cache-framework.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2019/05/02/django-cache-framework.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>Django Silk를 통한 프로파일링하기 </title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;django-silk&quot;&gt;Django Silk&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Django Silk는 라이브되고 있는 서버의 부하 지점을 알아낼 수 있는 프로파일링 툴이다.&lt;/p&gt;

&lt;p&gt;모든 요청에 대해 요청이 총 걸린 시간과 쿼리에 걸린 시간, 총 쿼리 갯수 등을 프로파일링 해주고,&lt;/p&gt;

&lt;p&gt;최적화 할 수 있는 정보를 제공해준다. 적용도 매우 쉽지만,&lt;/p&gt;

&lt;p&gt;기본적인 동작 방법이 모든 request와 response를 DB에 저장하는 방식이기 때문에&lt;/p&gt;

&lt;p&gt;DB 서버에 부하를 줄 수 있고, 보안 이슈가 생길 수 있다는 문제점이 있지만, 
며
적용이 매우 간단하고 추가 비용이 생기지 않으며, 잘 쓰기만 한다면 해결 가능한 문제들이 때문에&lt;/p&gt;

&lt;p&gt;나쁘지 않은 선택지라고 생각된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;django-silk-적용하기&quot;&gt;Django Silk 적용하기&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;적용은 앞서도 말했지만 매우 간단하다.&lt;/p&gt;

&lt;p&gt;django가 설치된 가상환경에 설치해주고 settings.py에 몇 줄 정도의 코드만 추가해주면 된다.&lt;/p&gt;

&lt;p&gt;설치&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install django-silk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;silk는 middleware를 통해 동작하기때문에 SilkyMiddleware를 settings.py의 MIDDLEWARE에 추가해줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MIDDLEWARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# default middleware&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.locale.LocaleMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.common.CommonMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.auth.middleware.SessionAuthenticationMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.clickjacking.XFrameOptionsMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# silk middleware&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'silk.middleware.SilkyMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# GZipMiddleware&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.gzip.GZipMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# custom middleware&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;middleware에 추가해줄 때는 django.middleware.gzip.GZipMiddleware 미들웨어를 제외한 django default middleware 아래에 추가해준다. (모든 custom middleware 위에 위치)&lt;/p&gt;

&lt;p&gt;django.middleware.gzip.GZipMiddleware를 사용하고 있다면 GZipMiddleware보다는 이전으로 추가해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런 다음 urls.py에 silk에 대한 url을 추가해준다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# Django 2.0 이상&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'silk/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'silk.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Django 1.11 이하&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^silk/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'silk.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'silk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런 다음에 silk에서 사용할 테이블을 migrate를 통해 만들어주고, 디자인을 적용하기 위해 collectstatic을 실행시켜 준다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py migrate
python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본적인 세팅은 여기까지지만, 실제 live 서버의 경우 이대로 실행하면 몇 가지 문제점이 생기므로 추가적인 세팅이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;일부 트래픽에 대해서만 프로파일링 하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모든 request, response를 모두 프로파일링하게 되면, request와 response 숫자만큼&lt;/p&gt;

&lt;p&gt;create가 이루어지기 때문에 DB 서버에 부하를 줄 수 있다. 그러므로 일부 트래픽에 대해서만&lt;/p&gt;

&lt;p&gt;적용하는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;설정하는 방법은 매우 간단하다. settings.py에 한줄의 코드만 추가해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SILKY_INTERCEPT_PERCENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 설정해주면 5%에 해당하는 트래픽만을 silk에서 프로파일링 해준다.&lt;/p&gt;

&lt;p&gt;또한 SILKY_MAX_REQUEST_BODY_SIZE, SILKY_MAX_RESPONSE_BODY_SIZE 등을 통해 처리할 request와 response의 body 사이즈를 정해줄 수 있다. (-1을 설정할 경우 제한 없음으로 설정된다)&lt;/p&gt;

&lt;p&gt;SILKY_MAX_RECORDED_REQUESTS를 통해 기록할 최대 request 숫자를 지정해 줄 수도 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 설정해줘야 하는 것은 접근 권한에 대한 문제인데, 지금처럼 아무런 설정을 안한 경우&lt;/p&gt;

&lt;p&gt;url만 알면 모든 사람이 접근할 수 있기 때문에 보안에는 심각한 문제가 생길 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 is_staff가 True인 유저만 적용하려면 SILKY_AUTHENTICATION, SILKY_AUTHORISATION 두 값을 True로 설정해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SILKY_AUTHENTICATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;SILKY_AUTHORISATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가적인 설정에 관한 내용은 Django Silk Repo에 가면 볼 수 있다.
&lt;a href=&quot;https://github.com/jazzband/django-silk&quot;&gt;Django-Silk Repository Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 01 May 2019 02:51:41 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2019/05/01/django-silk.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2019/05/01/django-silk.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>MySQL Transaction isolation level</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mysql-트랜잭션-격리-수준&quot;&gt;MySQL 트랜잭션 격리 수준&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션 격리 수준이란, 트랜잭션이 다른 트랜잭션의 수정 및 조회 중인 데이터를 언제보여 주느냐를 결정하는 것이다.&lt;/p&gt;

&lt;p&gt;즉, 격리 수준이 A 일때 트랜잭션 a에서는 트랜잭션 b에서의 변경 내용을 볼 수 없지만, 격리 수준이 B일 때는 트랜잭션 b에서 일어나는 모든 일을 트랜잭션 a에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;데이터-부정합&quot;&gt;데이터 부정합&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;격리 수준에 따라 발생할 수 있는 데이터 부정합 현상은 3 가지이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DIRTY READ
    &lt;ul&gt;
      &lt;li&gt;다른 트랜잭션에서 처리한 작업이 완료되지 않았는데도 다른 트랜잭션에서 볼 수 있게 되는 현상을 DIRTY READ 라고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NON-REPEATABLE READ
    &lt;ul&gt;
      &lt;li&gt;하나의 트랜잭션 내에서 똑같은 SELECT 쿼리를 실행했을 때 항상 같은 결과를 가져와야 한다는 REPEATABLE READ 정합성에 어긋난다.&lt;/li&gt;
      &lt;li&gt;A 트랜잭션에서 count라는 colum의 값을 1000 -&amp;gt; 5000으로 변경한 후 COMMIT하면 다른 트랜잭션 B에서는 값이 1000이었다가 5000이 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PHANTOM READ
    &lt;ul&gt;
      &lt;li&gt;하나의 트랜잭션에서 어떤 범위를 두 번 이상 조회할 때, 이전 쿼리에는 없던 레코드가 나타나는 현상을 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;격리-수준&quot;&gt;격리 수준&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래로 내려갈 수록 더 강한 격리 수준이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;READ UNCOMMITTED
    &lt;ul&gt;
      &lt;li&gt;COMMIT이나 ROLLBACK 여부에 상관 없이 다른 트랜잭션에서 보여진다.&lt;/li&gt;
      &lt;li&gt;DIRTY READ가 발생할 수 있다.&lt;/li&gt;
      &lt;li&gt;RDBMS 표준에서는 트랜잭션의 격리 수준으로 인정하지 않을 정도로 정합성에 문제가 많은 격리 수준이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;READ COMMITTED
    &lt;ul&gt;
      &lt;li&gt;오라클 DBMS에서 기본적으로 사용하는 격리 수준이며, 온라인 서비스에서 가장 많이 선택되는 격리 수준이다.&lt;/li&gt;
      &lt;li&gt;COMMIT이 완료된 데이터만 다른 트랜잭션에서 조회할 수 있다.&lt;/li&gt;
      &lt;li&gt;NON-REPEATABLE READ가 발생할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;REPEATABLE READ
    &lt;ul&gt;
      &lt;li&gt;InnoDB 스토리지 엔진에서 기본적으로 사용되는 격리 수준이다.&lt;/li&gt;
      &lt;li&gt;바이너리 로그를 가진 MySQL 장비에서는 최소 REPEATABLE READ 격리 수준 이상을 사용해야 한다.&lt;/li&gt;
      &lt;li&gt;MVCC 방식이 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SERIALIZABLE
    &lt;ul&gt;
      &lt;li&gt;가장 엄격한 격리 수준으로, 동시 처리 성능도 다른 트랜잭션 격리 수준보다 떨어진다.&lt;/li&gt;
      &lt;li&gt;읽기에도 공유 잠금이 생긴다.&lt;/li&gt;
      &lt;li&gt;한 레코드 당 한 트랜잭션의 접근만을 허용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Apr 2019 01:25:25 +0000</pubDate>
        <link>https://lee-seul.github.io/backend/2019/04/26/mysql-transaction-isolation-level.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/backend/2019/04/26/mysql-transaction-isolation-level.html</guid>
        
        
        <category>backend</category>
        
      </item>
    
      <item>
        <title>Python Mac OS 한글 자모 분리 이슈</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-mac-os-한글-자모-분리-이슈&quot;&gt;Python Mac OS 한글 자모 분리 이슈&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Mac OS에서 python으로 한글을 다루다 보면 아래와 같은 문제를 겪을 수 있다. 
(영원히 안 겪을 수도 있다)&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'파이썬'&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;ㅍ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 현상이 나타나는 이유는 Mac OS에서 유니코드를 처리하는 방식 때문이다.&lt;/p&gt;

&lt;p&gt;Mac OS에서는 유니코드를 NFD(Normalization Form Decomposition)라는 방식을 사용해서 저장하고 보여주는데, 이 방식은 자모를 분리하여 저장한 후 보여줄 때 합쳐서 보여주는 방식이기 때문이다.&lt;/p&gt;

&lt;p&gt;즉, 파이썬이라는 단어가 있을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;ㅍㅏㅇㅣㅆㅓㄴ&lt;/code&gt; 이라고 저장한 후 보여줄 때만 합쳐서 &lt;code class=&quot;highlighter-rouge&quot;&gt;파이썬&lt;/code&gt; 이라고 보여준다는 뜻이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;문제 해결은 매우 간단하다. NFD 형식을 NFC(Normalization Form Composition) 파태로 바꾸면 끝난다.&lt;/p&gt;

&lt;p&gt;Python에서는 아래와 같이 처리할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unicodedata&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'파이썬'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicodedata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'NFC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;파&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Apr 2019 01:43:01 +0000</pubDate>
        <link>https://lee-seul.github.io/python/2019/04/01/max-os-korean-character-issue.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/python/2019/04/01/max-os-korean-character-issue.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>type을 이용한 동적 클래스 생성 및 Django admin 자동 등록 </title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;type을-이용한-동적-클래스-생성-및-django-admin-자동-등록&quot;&gt;type을 이용한 동적 클래스 생성 및 Django admin 자동 등록&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;python에는 type이라는 함수(사실은 클래스)가 있는데, 주로 자료형을 확인하기 위해 사용되지만&lt;/p&gt;

&lt;p&gt;type을 통해 클래스를 동적으로 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;사용법은 간단하다. 클래스의 이름, 상속 받을 클래스, 클래스의 바디를 구성할 값들을 넘겨 주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superclasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Django를 사용하다보면 모델을 admin에 일일이 등록해줘야 하는 불편함이 있다.&lt;/p&gt;

&lt;p&gt;이럴 경우 type을 이용하면 단순 admin에 등록이 필요한 모델의 경우 손쉽게 추가해줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;전체 예제 코드&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# coding: utf-8&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.admin.sites&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlreadyRegistered&lt;/span&gt;


 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_list_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attname&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_raw_id_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;auto_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_list_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_id_fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_raw_id_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;admin_class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{model._meta.object_name}Admin'&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;admin_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin_class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'list_display'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;'raw_id_fields'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_id_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlreadyRegistered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;list_display에 전체 필드를 추가하고, ForeignKey의 경우에는 raw_id_fields에 추가한 다음 admin 모델을 만들고 admin 페이지에 등록하는 함수이다.&lt;/p&gt;

&lt;p&gt;type을 살펴보면 각 model의 이름에 Admin이라는 suffix를 붙인 이름을 첫 인자로 받으며,
admin클래스가 되기 위해 상속 받을 모델인 admin.ModelAdmin을 두 번째 인자로 받는다. 
마지막으로 각 admin 클래스의 list_display와 raw_id_fields가 될 값들을 인자로 받는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 코드를 실제로 사용할 때는 auto_register에 model 클래스를 넘겨주기만 하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Comment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auto_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 BlogAdmin, PostAdmin, CommentAdmin이 자동으로 생성되어 admin에 등록된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Mar 2019 02:34:57 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2019/03/14/django-admin-auto-register-by-type.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2019/03/14/django-admin-auto-register-by-type.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>알아두면 좋은 MySQL 설정들</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;알아두면-좋은-mysql-설정들&quot;&gt;알아두면 좋은 MySQL 설정들&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스에 MySQL을 설치해서 사용하든 RDS와 같은 SaaS를 사용하든 MySQL의 설정을 만져야 하는 경우가 있다.
그럴 때를 대비해서 몇 가지 중요한 설정 값들을 정리하고자 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 설명할 설정값들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max_connections&lt;/li&gt;
  &lt;li&gt;thread_cache_size&lt;/li&gt;
  &lt;li&gt;wait_timeout&lt;/li&gt;
  &lt;li&gt;tmp_table_size&lt;/li&gt;
  &lt;li&gt;sort_buffer_size&lt;/li&gt;
  &lt;li&gt;join_buffer_size&lt;/li&gt;
  &lt;li&gt;read_rnd_buffer_size&lt;/li&gt;
  &lt;li&gt;innodb_buffer_pool_size&lt;/li&gt;
  &lt;li&gt;innodb_lock_wait_timeout&lt;/li&gt;
  &lt;li&gt;innodb_flush_log_at_trx_commit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mysql-설정-변수의-구분&quot;&gt;MySQL 설정 변수의 구분&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 글로벌 변수와 세션 변수&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;설정 변수가 영향을 미치는 범위에 따른 분류이다. &lt;br /&gt;
글로벌 변수의 경우 MySQL 서버에서 단 하나의 값을 가지며, 시스템에 영향을 미치는 변수이다. &lt;br /&gt;
반대로 세션 변수는 각 세션에만 적용되는 값으로 커넥션 단위로 값을 변경할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 동적변수와 정적 변수&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;동적 변수와 정적 변수는 변수를 값을 변경할 때 서버를 재시작해야 하는지 여부에 따른 분류이다. &lt;br /&gt;
동적 변수의 경우 서버를 재시작하지 않고도 값을 변경할 수 있는데 반해 정적 변수는 서버를 재시작해야지만 값이 변경된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설정값들&quot;&gt;설정값들&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;max_connections&quot;&gt;max_connections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 값은 MySQL 서버가 최대로 허용하는 연결 개수에 대한 설정이다. MySQL이 죽는 대부분의 경우가 max_connections와 관련이 있다.&lt;/p&gt;

&lt;p&gt;이 값을 낮게 설정했을 경우에는 성능상 문제가 되지만, 너무 높게 설정하는 경우 서버가 죽을 위험이 매우 커진다.&lt;/p&gt;

&lt;p&gt;MySQL 서버가 느려진 경우(트래픽이 몰렸거나 등의 이유로)에도 들어오는 요청을 받기 위해 커넥션을 계속해서 만들어 낸다.&lt;/p&gt;

&lt;p&gt;커넥션의 수가 늘어날 수록 서버가 죽을 확률이 높아지기 때문에 적정 값을 설정하는 것이 중요하다.&lt;/p&gt;

&lt;p&gt;평소 얼만큼의 커넥션이 사용되는지 모니터링한 후 최대값 정도로만 설정해주면 된다.&lt;/p&gt;

&lt;p&gt;만약 문제가 될 경우 동적 변수이기 때문에 손 쉽게 수정할 수 있기 때문에 그 때에 수정해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;thread_cache_size&quot;&gt;thread_cache_size&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;커넥션이 서버와 클라이언트의 연결 자체를 의미한다면, 스레드는 커넥션으로부터 오는 작업을 처리하는 주체이다.&lt;/p&gt;

&lt;p&gt;thread_cache_size는 스레드를 얼마만큼 스레드 풀에 가지고 있을지 지정하는 값으로 스레드의 숫자를 말한다.&lt;/p&gt;

&lt;p&gt;기본값은 0인데, 0으로 설정된 경우 커넥션이 생성될 때마다 스레드를 생성한다.&lt;/p&gt;

&lt;p&gt;스레드가 생성이 커넥션의 숫자보다 많은 경우 이 thread_cache_size 값을 올리는 것을 고려하면 된다. 
(Threads_created / Connections의 값이 1을 넘는 경우)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;wait_timeout&quot;&gt;wait_timeout&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;연결된 클라이언트가 아무런 요청을 하지 않고 대기할 수  있는 최대 시간이다.&lt;/p&gt;

&lt;p&gt;초 단위로 설정하며, 이 시간을 넘는 경우 강제로 연결을 끊어버린다.&lt;/p&gt;

&lt;p&gt;기본 값이 8시간으로 매우 길기때문에, timeout으로 연결이 종료되는 경우 MySQL 서버의 문제보다는 로드 밸런서나 운영 체제 단에서의 설정 문제일 경우가 많다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tmp_table_size&quot;&gt;tmp_table_size&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메모리에 저장되는 임시 테이블의 최대 크기를 결정하는 값이다.&lt;/p&gt;

&lt;p&gt;일반적으로 검색 결과를 담기 위해서 많이 쓰이며, 이 값을 넘는 경우 MyISAM 엔진에 값을 담게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;sort_buffer_size&quot;&gt;sort_buffer_size&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;세션 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL에서 인덱스 없이 정렬을 수행할 경우 디스크 버퍼에서 데이터를 정렬한다.&lt;/p&gt;

&lt;p&gt;보통 MySQL에서 부하가 많이 생기는 작업이 정렬인데, sort_buffer_size를 통해 정렬에 얼마만큼의 메모리 공간을 할당할지 정할 수 있다.&lt;/p&gt;

&lt;p&gt;단순히 생각하면 sort_buffer_size의 값이 큰 쪽이 좋을 것 같지만, 세션 변수이기때문에 여기에 설정한 값은 모든 세션에서 각각 사용하는 값이다.&lt;/p&gt;

&lt;p&gt;즉, sort_buffer_size의 크기가 커지면 커질수록 각 커넥션에 할당되어야 하는 메모리 크기가 커지므로 무조건적으로 값을 크게 설정하면 오히려 성능에 안좋은 영향을 미칠 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 세션 변수이기떄문에 대량의 정렬 작업이 필요한 세션에서만 값을 바꾼 다음 정렬을 시도하는 방법도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;join_buffer_size&quot;&gt;join_buffer_size&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;세션 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이름은 join_buffer_size이지만 테이블이 조인될 때가 아닌 테이블 풀 스캔이 이루어질 때와 관련이 있는 변수이다.&lt;/p&gt;

&lt;p&gt;이 값도 sort_buffer_size와 마찬가지로 세션 변수이므로 단순히 큰 값을 설정해서는 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;read_rnd_buffer_size&quot;&gt;read_rnd_buffer_size&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;세션 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL에서 인덱스 없이 정렬할 때 Single-pass 또는 Two-pass라는 알고리즘을 사욜하는데, 그 중 Two-pass 알고리즘을 사용할 때 사용할 버퍼의 크기를 정하는 변수이다.&lt;/p&gt;

&lt;p&gt;Two-pass 알고리즘은 정렬한 이후, 다시 값을 읽는 방식을 말한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;innodb_buffer_pool_size&quot;&gt;innodb_buffer_pool_size&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수(일부 과거 버전에서는 정적 변수)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InnoDB를 주로 사용한다면, 메모리의 최소 50%를 할당해야 할 정도로 중요한 변수이다.&lt;/p&gt;

&lt;p&gt;InnoDB 버퍼 풀은 캐싱과 메모리 버퍼의 역할을 동시에 수행한다.&lt;/p&gt;

&lt;p&gt;스레드가 사용할 메모리 영역을 계산한 후 그 값을 제외한 대부분의 값을 할당해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;innodb_lock_wait_timeout&quot;&gt;innodb_lock_wait_timeout&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수(과거 일부 버전은 정적 변수)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lock을 획득하기 위해서 기다리는 최대 시간을 설정하는 변수이다.&lt;/p&gt;

&lt;p&gt;Lock wait timeout exceed 에러와 관련이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;innodb_flush_log_at_trx_commit&quot;&gt;innodb_flush_log_at_trx_commit&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌 변수&lt;/li&gt;
  &lt;li&gt;동적 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;innodb_flush_log_at_trx_commit에는 InnoDB에서 로그를 버퍼에서 디스크로 얼마만큼 자주 옮겨쓸지를 설정한다.&lt;/p&gt;

&lt;p&gt;대부분의 RDBMS의 부하는 디스크에 IO할 때 발생하므로, 성능과 연관이 있는 값이다.&lt;/p&gt;

&lt;p&gt;0~2까지의 값을 설정할 수 있는데, 0의 경우 커밋 기반이 아닌 1초마다 버퍼를 디스크로 옮겨 적는다.&lt;/p&gt;

&lt;p&gt;1의 경우는 커밋이 일어 날 때마다 이고, 2 일떄는 커밋이 일어날 때마다 디스크에 옮겨 적지만 버퍼를 비우지는 않는다.&lt;/p&gt;

&lt;p&gt;반대로 0과 1일 때는 디스크에 옮긴 후 버퍼를 비운다.&lt;/p&gt;

&lt;p&gt;0의 경우 장애 발생시 최근 1초의 데이터를 유실할 수 있고, 1의 경우는 모든 트랜잭션을 기록했기때문에 안전하다.&lt;/p&gt;

&lt;p&gt;2의 경우에는 OS에 문제가 있는 것이 아니라면 안전하지만 OS에 장애가 있는거라면 역시 최근 1초 간의 데이터를 잃을 수 있다.&lt;/p&gt;

&lt;p&gt;시스템마다 최상의 값을 고려해서 설정해야하는데 디스크 쓰기 작업이 적을수록 RDBMS의 성능이 향상되므로 트랜잭션이 1초에 1번 보다 잦다면 0또는 2가 성능상으로는 유리하다.&lt;/p&gt;

&lt;p&gt;반대로 트랜잭션이 1초에 1반 이하로 발생하는 시스템이라면 1이 무조건적으로 유리하다.&lt;/p&gt;

&lt;p&gt;0, 2는 데이터 유실의 위험이 존재하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Mar 2019 17:54:52 +0000</pubDate>
        <link>https://lee-seul.github.io/backend/2019/03/09/mysql-setting.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/backend/2019/03/09/mysql-setting.html</guid>
        
        
        <category>backend</category>
        
      </item>
    
      <item>
        <title>Django ManyToManyField 확장하기 </title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;django-manytomanyfield에-필드-확장하기&quot;&gt;Django ManyToManyField에 필드 확장하기&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 모델이 있고 이미 마이그레이션이 적용되었는데, Book에 Tag가 추가된 날짜를 기록하고 싶다면 어떻게 해야할까?&lt;/p&gt;

&lt;p&gt;처음부터 BookTag 형태와 같은 모델을 선언하고 ForeignKey로 Book과 Tag를 선언했다면&lt;/p&gt;

&lt;p&gt;간단하게 필드만 추가해주면 된다. 하지만 위와 같이 ManyToManyField로 선언한 경우 현재 상태로는 필드를 추가할 수 없다.&lt;/p&gt;

&lt;p&gt;이 때 사용할 수 있는 것이 through인데, ManyToManyField가 사용할 model을 지정할 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'BookTag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'생성된 ManyToMany Table 이름'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;db_table에 들어갈 테이블의 이름은 django에서 자동으로 생성한 table의 이름으로 해준다.&lt;/p&gt;

&lt;p&gt;그런 다음 이미 테이블이 존재하므로 migrate –fake 를 실행하면, 기존에 있던 테이블을 BookTag 모델을 사용해서 접근할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python manage.py migrate &lt;span class=&quot;nt&quot;&gt;--fake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기에 필요한 필드만 추가해주면 끝이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'BookTag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_now_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'생성된 ManyToMany Table 이름'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Feb 2019 01:39:03 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2019/02/21/django-extend-manytomanyfield.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2019/02/21/django-extend-manytomanyfield.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>Django with transaction.atomic() 사용시 주의점</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;django-with-transactionatomic-사용시-주의점&quot;&gt;Django with transaction.atomic() 사용시 주의점&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 django는 transaction을 지원하지만, ATOMIC_REQUESTS가 False 이므로, ORM 쿼리 단위로 transaction이 관리된다. 
(create, delete, update, get_or_create …)&lt;/p&gt;

&lt;p&gt;그래서 어떤 특정 코드 뭉치에 DB transaction을 지원하려면, transaction.atomic과 같은 구문이 필요하다.&lt;/p&gt;

&lt;p&gt;이 때 주의할 점은 with transaction.atomic 블록 안에서 try-except를 하지말라는 것이다. (django 문서에도 언급되어 있다.)&lt;/p&gt;

&lt;p&gt;try-except를 사용하고 싶다면 아래와 같이 처리해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;somthing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약 with transaction.atomic 블록 안에서 try-except 처리를 한다면 예상치 못한 오류가 생길 수가 있다.
(transaction.atomic 블록 내부에서 Raise 발생시 제대로 rollback을 수행하지 못하고, 다른 API 까지 고장나게 만든다.)&lt;/p&gt;

&lt;p&gt;django 테스트 코드 중 일부를 살펴보면 아래와 같은 코드가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_mark_for_rollback_on_error_in_transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savepoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;# Swallow the intentional error raised.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertRaisesMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Oops&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;# Wrap in `mark_for_rollback_on_error` to check if the transaction is marked broken.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_for_rollback_on_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;# Ensure that we are still in a good state.&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertFalse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Oops&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;# Ensure that `mark_for_rollback_on_error` marked the transaction as broken …&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;# … and further queries fail.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You can't execute queries until the end of the 'atomic' block.&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertRaisesMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionManagementError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Transaction errors are reset at the end of an transaction, so this should just work.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Reporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;transaction.atomic 내부에서 Exception 발생 시 django는 해당 transaction을 rollback 하는데,&lt;/p&gt;

&lt;p&gt;exception이 내부에서 try-except 처리된 경우 제대로 rollback이 수행되지 못하여,&lt;/p&gt;

&lt;p&gt;connection 자체가 깨지는 문제가 생긴다. (정확하게 말하면 uwsgi worker가 고장이 난다)&lt;/p&gt;

&lt;p&gt;transaction.atomic 내부 Exception 발생시  connection.needs_rollback = True로 변하고,&lt;/p&gt;

&lt;p&gt;이 값을 토대로 rollback이 이루어지는데, rollback이 제대로 실행되지 않으면서&lt;/p&gt;

&lt;p&gt;connection.needs_rollback의 값이 계속 해서 True로 남게 된다.&lt;/p&gt;

&lt;p&gt;이렇게 되면 해당 uwsgi worker로 연결되는 모든 tracnsaction을 사용하는 request 에서&lt;/p&gt;

&lt;p&gt;You can’t execute queries until the end of the ‘atomic’ block.라는 메세지와 함께 TransactionManagementError를 발생시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;에러를 보고 받는 입장에서는 일부 서버의 일부 request만 계속해서 TransactionManagementError를 내뿜는 광경을 볼 수 있다.(오류가 발생하는 지점을 파악하기가 매우 힘들어진다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;transaction.atomic() 내부에서는 try-except 를 사용하지말자. 써야만 한다면 try 블록이 transaction.atomic() 블록을 감싸도록 사용하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Feb 2019 09:21:22 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2019/02/02/django-transactionmanagementerror.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2019/02/02/django-transactionmanagementerror.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>Django model별 MySQL storage engine 적용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;django-model별-mysql-storage-engine-적용하기&quot;&gt;Django model별 MySQL storage engine 적용하기&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MySQL에서는 여러가지 storage engine이 존재하는데 그 중 InnoDB와 MyISAM이 가장 유명하다.&lt;/p&gt;

&lt;p&gt;그에 대한 설명은 이전 포스팅에서 확인 가능하므로, 생략
&lt;a href=&quot;https://lee-seul.github.io/backend/2017/12/19/MySQL-storage-engine.html&quot;&gt;https://lee-seul.github.io/backend/2017/12/19/MySQL-storage-engine.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MySQL, Django 스택의 개발 환경이라면 대부분이 InnoDB를 기본 storage engine으로 쓰고 있을 것이다.&lt;/p&gt;

&lt;p&gt;그러나 다양한 개발 요구 사항과 성능 등의 이슈로 테이블 별로 다른 storage engine을 적용해야 하는 상황이 있을 수 있다.&lt;/p&gt;

&lt;p&gt;특히, 로그의 경우 무결성 체크 등의 기능이 필요 없고, 로그로 인한 성능 이슈가 생기지 않도록 처리해야하기 때문에&lt;/p&gt;

&lt;p&gt;InnoDB보다는 MyISAM이 더 나은 선택이 될 수 있다. (NoSQL이 대안이 될 수 있지만, 개발 비용이 들거나 Dynamo처럼 서버 비용 이슈가 있다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 Django 문서나 코드를 봐도 Model 별로 storage engine을 세팅할 수 있는 방법은 없고&lt;/p&gt;

&lt;p&gt;문서상에도 나와있듯이 조금 귀찮은 2가지 방법으로 적용할 수는 있다.&lt;/p&gt;

&lt;p&gt;2가지 방법은 SQL을 이용하는 방법과 Django 세팅에서 해당 테이블을 만들기 전에 기본 storage engine을 바꾸는 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SQL을 이용하는 방법은 매우 간단하다.&lt;/p&gt;

&lt;p&gt;먼저 테이블을 만든 다음, django shell이나 MySQL에 직접 접근하여 쿼리를 날리면 된다. 쿼리는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyISAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;두번째 방법은 조금 귀찮은데 migrate 명령을 실행하기 전에 django DB 세팅에 아래와 같은 코드를 추가한 다음&lt;/p&gt;

&lt;p&gt;migrate 명령을 실행하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;'OPTIONS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;'init_command'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SET default_storage_engine=MyISAM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;migrate 종료 후에 다시  InnoDB로 기본 세팅을 바꾸는 걸 잊으면 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Nov 2018 11:14:53 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2018/11/28/django-db-table-storage-engine.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2018/11/28/django-db-table-storage-engine.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>Django Admin에서 select_related 적용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;django-admin에서-select_related-적용하기&quot;&gt;Django Admin에서 select_related 적용하기&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 django admin에서는 쿼리가 비효율적으로 실행될 수 있는 부분이 많이 존재한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 위와 같은 모델이 있다고 가정했을 때 Book Admin에서 Book의 저자 정보까지 표시해주려고 하면&lt;/p&gt;

&lt;p&gt;아래와 같이 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'author_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'저자명'&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;일반적으로는 위와 같이 구현되는데, Book 모델이 복잡해져서 author_name과 같은 형태의 메소드가 많이 생기게 되면&lt;/p&gt;

&lt;p&gt;Admin페이지가 느려지는 것을 경험할 수 있다.&lt;/p&gt;

&lt;p&gt;위와 같은 코드가 문제가 되는 이유는, Book 모델을 전부 가져온 다음에 각 Book 모델에 대해&lt;/p&gt;

&lt;p&gt;author_name이 실행되기때문에 Book 모델이 많아지면 많아질수록 실행되는 쿼리의 수가 늘어나기 때문이다.&lt;/p&gt;

&lt;p&gt;즉, Book이 100개의 row를 가지고 있다면, book.author.name 코드를 통해 DB에서 book에 해당 하는 author의&lt;/p&gt;

&lt;p&gt;name을 찾는 쿼리가 100번 실행된다. (N+1 문제)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;N+1 문제는 ORM을 사용하는 어디에서나 발생할 수 있는데 select_related이나 prefetch_related를 통해 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;Book, Author와 같은 형태(1:N) 관게에서는 Book.objects.all().select_related(‘author’)와 같은 형태로 적용한다.&lt;/p&gt;

&lt;p&gt;Admin에서는 2가지 방법을 통해서 2가지 문제를 해결 할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;list_select_related 사용&lt;/li&gt;
  &lt;li&gt;get_queryset 오버라이딩&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1번의 경우 ModelAdmin 내부에 list_select_related에 select_related 하고 싶은 필드를 추가해주기만 하면된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'author_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_select_related&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'저자명'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2번의 경우 get_queryset 메소드를 오버라이딩 하여 해당 모델의 queryset을 얻어 올 때부터 
select_related와 prefetch_related를 적용시키면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'author_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_select_related&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ordering&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_related&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'저자명'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Nov 2018 04:04:03 +0000</pubDate>
        <link>https://lee-seul.github.io/django/2018/11/18/django-admin-orm-optimizing.html</link>
        <guid isPermaLink="true">https://lee-seul.github.io/django/2018/11/18/django-admin-orm-optimizing.html</guid>
        
        
        <category>django</category>
        
      </item>
    
  </channel>
</rss>
