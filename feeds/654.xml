<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>기억보단 기록을</title>
<link>https://jojoldu.tistory.com/</link>
<description>Java, Spring, Web, 객체지향 등을 익히고 공유합니다.</description>
<language>ko</language>
<pubDate>Sun, 12 May 2019 20:38:29 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>창천향로</managingEditor>
<image>
<title>기억보단 기록을</title>
<url>http://cfile5.uf.tistory.com/image/2237674457FB7EA2154E38</url>
<link>https://jojoldu.tistory.com</link>
<description>Java, Spring, Web, 객체지향 등을 익히고 공유합니다.</description>
</image>
<item>
<title>테스트 코드에선 LocalDate.now()를 쓰지말자.</title>
<link>https://jojoldu.tistory.com/416</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;여러 사람의 코드를 볼때 가끔 테스트 코드에서  &lt;code&gt;LocalDate.now()&lt;/code&gt; 를 사용하는걸 종종 보게 됩니다.  &lt;br /&gt;
아무래도 편하게 작성할 수 있다보니 사용된것 같지만, 이는 좋은 패턴이 아닙니다.  &lt;br /&gt;
그래서 예제로 &lt;strong&gt;테스트 코드에서 LocalDate.now()를 쓰면 안되는 이유&lt;/strong&gt;를 소개하겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;예제&quot;&gt;예제&lt;/h2&gt;
&lt;p&gt;예를 들어 다음과 같은 코드가 있다고 가정합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;배송 예정일&lt;/strong&gt;을 구합니다.&lt;/li&gt;
&lt;li&gt;배송 예정일은 &lt;strong&gt;주문일 +3 영업일&lt;/strong&gt;입니다.&lt;/li&gt;
&lt;li&gt;즉, 월요일에 주문했다면 +3일인 목요일을, 목요일에 주문 했다면 금/월/화로 되어 화요일이 배송 예정일이 됩니다.&lt;/li&gt;
&lt;li&gt;주말외에 공휴일 판단을 위해 &lt;strong&gt;공휴일 여부 판단 엔티티&lt;/strong&gt;가 존재합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 조건을 만족하는 2개의 엔티티 클래스들입니다.  &lt;/p&gt;&lt;p&gt;첫번째는 &lt;strong&gt;공휴일 여부를 가지는 엔티티&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Getter
@NoArgsConstructor
@Entity
public class DeliveryDay {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private LocalDate date;

    private boolean isHoliday;

    @Builder
    public DeliveryDay(LocalDate date, boolean isHoliday) {
        this.date = date;
        this.isHoliday = isWeekend(date) || isHoliday;
    }

    private boolean isWeekend(LocalDate date) {
        return date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY;
    }

    public boolean isBusinessDay() {
        return !isHoliday;
    }

    public boolean isAfter (LocalDate compare) {
        return this.date.isAfter(compare);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;주말임을 판단하는 &lt;code&gt;isWeekend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;영업일을 판단하는 &lt;code&gt;isBusinessDay&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;엔티티의 날짜가 파라미터의 날짜보다 이후인지 판단하는 &lt;code&gt;isAfter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;로 구성되어있습니다.  &lt;/p&gt;&lt;p&gt;두번째 엔티티는 &lt;strong&gt;배송예정일을 계산해주는 엔티티&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;public class DeliveryDayCalendar {
    private static final int CYCLE_DAY = 3;

    private final List&amp;lt;DeliveryDay&amp;gt; candidates;

    public DeliveryDayCalendar(List&amp;lt;DeliveryDay&amp;gt; candidates) {
        this.candidates = candidates;
    }

    public DeliveryDay getExpectedArriveDate(LocalDate orderDate) {
        List&amp;lt;DeliveryDay&amp;gt; businessDates = candidates.stream()
                .filter(d -&amp;gt; d.isAfter(orderDate))
                .filter(DeliveryDay::isBusinessDay)
                .collect(Collectors.toList());

        return businessDates.get(CYCLE_DAY-1);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;주기 (&lt;code&gt;CYCLE_DAY&lt;/code&gt;)를 3일로 하여 &lt;strong&gt;영업일 기준 +3일을 계산&lt;/strong&gt;하여 예정일을 구합니다.  &lt;/p&gt;&lt;p&gt;자 이제 이 엔티티들을 테스트 코드로 검증해보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @Test
    public void 배송도착일자_계산_공휴일은_제외한다_now() {
        //given
        LocalDate date = LocalDate.now();

        List&amp;lt;DeliveryDay&amp;gt; days = Arrays.asList(
                new DeliveryDay(date.plusDays(1), false),
                new DeliveryDay(date.plusDays(2), false),
                new DeliveryDay(date.plusDays(3), false)
        );

        DeliveryDayCalendar calendar = new DeliveryDayCalendar(days);

        //when
        DeliveryDay expectedArriveDate = calendar.getExpectedArriveDate(date);

        //then
        assertThat(expectedArriveDate.getDate()).isEqualTo(date.plusDays(3));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드에 나와있듯이 &lt;code&gt;LocalDate.now()&lt;/code&gt;로 &lt;strong&gt;기준 날짜를 생성&lt;/strong&gt;하고, +3일까지의 날짜를 생성합니다.  &lt;br /&gt;
이 테스트 코드를 수행해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E4EB4A5CCD251D16&quot; alt=&quot;test1&quot;&gt;&lt;/p&gt;&lt;p&gt;정상적으로 테스트 코드가 성공하는 것을 확인할 수 있습니다.  &lt;/p&gt;&lt;p&gt;그럼 이 테스트 코드가 왜 문제일까요?  &lt;/p&gt;&lt;p&gt;D+3일에 대한 내용이 잘 검증되었고, 비지니스 로직도 깔끔하게 호출되었는데 말이죠.&lt;/p&gt;
&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;p&gt;이 코드는 &lt;strong&gt;간혈적으로 실패&lt;/strong&gt;합니다.  &lt;br /&gt;
2019.05.07에 실행할때와 2019.05.10에 실행할때 둘의 결과는 다릅니다.  &lt;br /&gt;
2019.05.07에 실행할때는 성공하지만, 2019.05.10에 실행할때는 실패합니다.    &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9985B3385CCD251D17&quot; alt=&quot;test2&quot;&gt; &lt;/p&gt;&lt;p&gt;이유는 &lt;strong&gt;날짜가 주말이면 isHoliday가 false라도 false로 지정&lt;/strong&gt;하기 때문입니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9917C04E5CCD251D09&quot; alt=&quot;code1&quot;&gt;&lt;/p&gt;&lt;p&gt;즉, 날짜에 따라 &lt;strong&gt;성공할수도 있고, 아닐수도 있습니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;이런 테스트는 좋은 테스트가 아닙니다.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;테스트 코드는 언제 어느때든 항상 같은 결과를 만들어야 합니다&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;이런 테스트를 &lt;a href=&quot;https://coupa.ng/bg70mO&quot;&gt;Effective Unit Testing&lt;/a&gt; 에서는 &lt;strong&gt;양치기 테스트&lt;/strong&gt;라고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;해결책&quot;&gt;해결책&lt;/h2&gt;
&lt;p&gt;이 문제를 해결하려면 아래와 같이 &lt;strong&gt;테스트 코드에서 날짜를 고정&lt;/strong&gt;하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @Test
    public void 배송도착일자_계산_공휴일은_제외한다_of() {
        //given
        LocalDate date = LocalDate.of(2019,5,7);

        List&amp;lt;DeliveryDay&amp;gt; days = Arrays.asList(
                new DeliveryDay(date.plusDays(1), false),
                new DeliveryDay(date.plusDays(2), false),
                new DeliveryDay(date.plusDays(3), false)
        );

        DeliveryDayCalendar calendar = new DeliveryDayCalendar(days);

        //when
        DeliveryDay expectedArriveDate = calendar.getExpectedArriveDate(date);

        //then
        assertThat(expectedArriveDate.getDate()).isEqualTo(date.plusDays(3));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;테스트 날짜가 2019.05.07로 고정되어 있기 때문에, &lt;strong&gt;언제 어느때든 테스트 결과는 동일&lt;/strong&gt;하게 나옵니다.  &lt;/p&gt;&lt;p&gt;이렇게 변경한 테스트 코드 역시 정상적으로 성공하는 것을 확인할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D5E0365CCD251D0D&quot; alt=&quot;test3&quot;&gt;&lt;/p&gt; &lt;/article&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/416&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Java</category>
<category>localDate.now</category>
<category>Test</category>
<category>unit testing</category>
<category>단위 테스트</category>
<category>테스트 코드</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/416</guid>
<comments>https://jojoldu.tistory.com/416#entry416comment</comments>
<pubDate>Fri, 03 May 2019 19:33:48 +0900</pubDate>
</item>
<item>
<title>더티 체킹 (Dirty Checking)이란?</title>
<link>https://jojoldu.tistory.com/415</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;Spring Data Jpa와 같은 ORM 구현체를 사용하다보면 &lt;strong&gt;더티 체킹이란 단어를 종종 듣게 됩니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;더티 체킹이란 단어를 처음 듣는분들을 몇번 만나게 되어 이번 시간엔 더티 체킹이 무엇인지 알아보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;모든 코드는 &lt;a href=&quot;https://github.com/jojoldu/blog-code/tree/master/jpa-theory&quot;&gt;Github&lt;/a&gt;에 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를 들어 다음과 같은 코드가 있습니다.  &lt;br /&gt;
(Spring Data Jpa가 익숙하시겠지만, 네이티브한 코드 먼저 보고 가겠습니다.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Slf4j
@RequiredArgsConstructor
@Service
public class PayService {

    public void updateNative(Long id, String tradeNo) {
        EntityManager em = entityManagerFactory.createEntityManager();
        EntityTransaction tx = em.getTransaction();
        tx.begin(); //트랜잭션 시작
        Pay pay = em.find(Pay.class, id);
        pay.changeTradeNo(tradeNo); // 엔티티만 변경
        tx.commit(); //트랜잭션 커밋
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드를 보시면 &lt;strong&gt;별도로 데이터베이스에 save 하지 않습니다&lt;/strong&gt;.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;트랜잭션이 시작되고&lt;/li&gt;
&lt;li&gt;엔티티를 조회하고&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;엔티티의 값을 변경&lt;/strong&gt;하고&lt;/li&gt;
&lt;li&gt;트랜잭션을 커밋합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서 &lt;strong&gt;데이터베이스에 update 쿼리에 관한 코드는 어디에도 없습니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;자 그리고 이 코드가 어떻게 작동하는지 테스트 코드를 작성해보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;RunWith(SpringRunner.class)
@SpringBootTest
public class PayServiceTest {

    @Autowired
    PayRepository payRepository;

    @Autowired
    PayService payService;

    @After
    public void tearDown() throws Exception {
        payRepository.deleteAll();
    }

    @Test
    public void 엔티티매니저로_확인() {
        //given
        Pay pay = payRepository.save(new Pay(&quot;test1&quot;,  100));

        //when
        String updateTradeNo = &quot;test2&quot;;
        payService.updateNative(pay.getId(), updateTradeNo);

        //then
        Pay saved = payRepository.findAll().get(0);
        assertThat(saved.getTradeNo()).isEqualTo(updateTradeNo);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 테스트 코드를 수행보시면, 아래와 같은 로그를 확인할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99056C4F5CC6747003&quot; alt=&quot;update&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;save&lt;/strong&gt; 메소드로 변경 사항을 저장하지 않았음에도 update 쿼리가 실행되었습니다.  &lt;br /&gt;
이유는 &lt;strong&gt;Dirty Checking&lt;/strong&gt; 덕분인데요.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;여기에서 Dirty란 &lt;strong&gt;상태의 변화가 생긴&lt;/strong&gt; 정도로 이해하시면 됩니다.  &lt;br /&gt;
  즉, Dirty Checking이란 &lt;strong&gt;상태 변경 검사&lt;/strong&gt; 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JPA에서는 트랜잭션이 끝나는 시점에 &lt;strong&gt;변화가 있는 모든 엔티티 객체&lt;/strong&gt;를 데이터베이스에 자동으로 반영해줍니다.  &lt;/p&gt;&lt;p&gt;이때 변화가 있다의 기준은 &lt;strong&gt;최초 조회 상태&lt;/strong&gt;입니다.  &lt;/p&gt;&lt;p&gt;JPA에서는 엔티티를 조회하면 해당 엔티티의 조회 상태 그대로 &lt;strong&gt;스냅샷&lt;/strong&gt;을 만들어놓습니다.  &lt;br /&gt;
그리고 트랜잭션이 끝나는 시점에는 이 &lt;strong&gt;스냅샷과 비교해서 다른점이 있다면 Update Query를 데이터베이스&lt;/strong&gt;로 전달합니다.  &lt;/p&gt;&lt;p&gt;당연히 이런 상태 변경 검사의 대상은 &lt;strong&gt;영속성 컨텍스트가 관리하는 엔티티에만&lt;/strong&gt;적용 됩니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;detach된 엔티티 (준영속)&lt;/li&gt;
&lt;li&gt;DB에 반영되기 전 처음 생성된 엔티티 (비영속)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등 준영속/비영속 상태의 엔티티는 Dirty Checking 대상에 포함되지 않습니다.  &lt;br /&gt;
즉, &lt;strong&gt;값을 변경해도 데이터베이스에 반영되지 않는다&lt;/strong&gt;는 것이죠.  &lt;br /&gt;
Spring Data Jpa와 &lt;code&gt;@Transactional&lt;/code&gt;이 함께 할 경우엔 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Slf4j
@RequiredArgsConstructor
@Service
public class PayService {

    private final PayRepository payRepository;

    @Transactional
    public void update(Long id, String tradeNo) {
        Pay pay = payRepository.getOne(id);
        pay.changeTradeNo(tradeNo);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 테스트 코드를 작성해서 실행해보면!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Test
public void SpringDataJpa로_확인() {
    //given
    Pay pay = payRepository.save(new Pay(&quot;test1&quot;,  100));

    //when
    String updateTradeNo = &quot;test2&quot;;
    payService.update(pay.getId(), updateTradeNo);

    //then
    Pay saved = payRepository.findAll().get(0);
    assertThat(saved.getTradeNo()).isEqualTo(updateTradeNo);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래와 같이 정상적으로 update 쿼리가 수행됨을 확인할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A24A335CC674710B&quot; alt=&quot;update2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;변경-부분만-update하고-싶을땐&quot;&gt;변경 부분만 update하고 싶을땐?&lt;/h2&gt;
&lt;p&gt;Dirty Checking으로 생성되는 update 쿼리는 기본적으로 &lt;strong&gt;모든 필드&lt;/strong&gt;를 업데이트합니다.  &lt;/p&gt;&lt;p&gt;JPA에서는 &lt;strong&gt;전체 필드를 업데이트하는 방식을 기본값&lt;/strong&gt;으로 사용합니다.  &lt;br /&gt;
전체 필드를 업데이트하는 방식의 장점은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;생성되는 쿼리가 같아 &lt;strong&gt;부트 실행시점에 미리 만들어서 재사용&lt;/strong&gt;가능합니다.&lt;/li&gt;
&lt;li&gt;데이터베이스 입장에서 쿼리 재사용이 가능하다&lt;ul&gt;
&lt;li&gt;동일한 쿼리를 받으면 이전에 파싱된 쿼리를 재사용한다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;출처: &lt;a href=&quot;https://coupa.ng/bg5M4j&quot;&gt;김영한님의 자바 ORM 표준 JPA 프로그래밍&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다만, 필드가 20~30개 이상인 경우엔 이런 전체 필드 Update 쿼리가 부담스러울 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;사실 이런 경우 정규화가 잘못된 경우일 확률이 높습니다.  &lt;br /&gt;
  한 테이블에 필드 30개는 확실히 많습니다.  &lt;br /&gt;
  현재 운영중인 정산 서비스에는 데이터양이나 복잡도가 국내에서 손꼽히지만 15개 넘는 필드를 가진 테이블은 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그래서 이런 경우엔 &lt;code&gt;@DynamicUpdate&lt;/code&gt;로 &lt;strong&gt;변경 필드만 반영&lt;/strong&gt;되도록 할 수 있습니다.  &lt;/p&gt;&lt;p&gt;엔티티 최상단에 아래와 같이 &lt;code&gt;@DynamicUpdate&lt;/code&gt; 를 선언해주시면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Getter
@NoArgsConstructor
@Entity
@DynamicUpdate // 변경한 필드만 대응
public class Pay {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String tradeNo;
    private long amount;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 다시 테스트 코드를 수행해서 로그를 확인해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BD7A4C5CC6747009&quot; alt=&quot;update3&quot;&gt;&lt;/p&gt;&lt;p&gt;변경분 (&lt;code&gt;trade_no&lt;/code&gt;)만 Update 쿼리에 반영된 것을 확인할 수 있습니다.&lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/415&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>JPA</category>
<category>dirty checking</category>
<category>JPA</category>
<category>더티체킹</category>
<category>트랜잭션</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/415</guid>
<comments>https://jojoldu.tistory.com/415#entry415comment</comments>
<pubDate>Mon, 29 Apr 2019 12:50:09 +0900</pubDate>
</item>
<item>
<title>Spring batch &amp; JPA에서 N+1 문제 해결</title>
<link>https://jojoldu.tistory.com/414</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;안녕하세요? 이번 시간엔 Spring batch에서 N+1 문제 해결을 진행해보려고 합니다.  &lt;br /&gt;
모든 코드는 &lt;a href=&quot;https://github.com/jojoldu/blog-code/tree/master/spring-batch-n1&quot;&gt;Github&lt;/a&gt;에 있기 때문에 함께 보시면 더 이해하기 쉬우실 것 같습니다.  &lt;br /&gt;
(공부한 내용을 정리하는 &lt;a href=&quot;https://github.com/jojoldu/blog-code&quot;&gt;Github&lt;/a&gt;와 세미나+책 후기를 정리하는 &lt;a href=&quot;https://github.com/jojoldu/review&quot;&gt;Github&lt;/a&gt;, 이 모든 내용을 담고 있는 &lt;a href=&quot;http://jojoldu.tistory.com/&quot;&gt;블로그&lt;/a&gt;가 있습니다. )&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-테스트-환경&quot;&gt;1. 테스트 환경&lt;/h2&gt;
&lt;p&gt;프로젝트는 SpringBoot Batch + Lombok + Spock으로 구성됩니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;스프링부트의 버전은 2.1.3 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;해당 기술들이 처음이셔도 기존에 사용되던 기술과 크게 다르지 않기 때문에 보시는데 어려움이 없으실 것 같습니다.  &lt;/p&gt;&lt;p&gt;다음은 기본적인 Entity와 Repository를 생성하겠습니다.  &lt;br /&gt;
엔티티는 총 4개로 구성됩니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99487B3A5CBAA2F733&quot; alt=&quot;관계도&quot;&gt;&lt;/p&gt;&lt;p&gt;3개의 엔티티의 코드는 다음과 같습니다.  &lt;br /&gt;
(굳이 안보셔도 됩니다.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@NoArgsConstructor
@Getter
@Entity
public class Store {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String address;

    @OneToMany(mappedBy = &quot;store&quot;, cascade = ALL)
    private List&amp;lt;Product&amp;gt; products = new ArrayList&amp;lt;&amp;gt;();

    @OneToMany(mappedBy = &quot;store&quot;, cascade = ALL)
    private List&amp;lt;Employee&amp;gt; employees = new ArrayList&amp;lt;&amp;gt;();

    public Store(String name, String address) {
        this.name = name;
        this.address = address;
    }

    public void addProduct(Product product){
        this.products.add(product);
        product.updateStore(this);
    }

    public void addEmployee(Employee employee){
        this.employees.add(employee);
        employee.updateStore(this);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@NoArgsConstructor
@Getter
@Entity
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private long price;

    @ManyToOne
    @JoinColumn(name = &quot;store_id&quot;, foreignKey = @ForeignKey(name = &quot;FK_PRODUCT_STORE&quot;))
    private Store store;

    public Product(String name, long price) {
        this.name = name;
        this.price = price;
    }

    public void updateStore(Store store){
        this.store = store;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@NoArgsConstructor
@Getter
@Entity
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private LocalDate hireDate;

    @ManyToOne
    @JoinColumn(name = &quot;store_id&quot;, foreignKey = @ForeignKey(name = &quot;FK_EMPLOYEE_STORE&quot;))
    private Store store;

    public Employee(String name, LocalDate hireDate) {
        this.name = name;
        this.hireDate = hireDate;
    }

    public void updateStore(Store store){
        this.store = store;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 배치의 Writer로 저장될 &lt;code&gt;StoreHistory&lt;/code&gt;를 생성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@NoArgsConstructor
@Getter
@Entity
public class StoreHistory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String storeName;
    private String productNames;
    private String employeeNames;

    public StoreHistory(Store store, List&amp;lt;Product&amp;gt; products, List&amp;lt;Employee&amp;gt; employees) {
        this.storeName = store.getName();
        this.productNames = products.stream()
                .map(Product::getName)
                .collect(Collectors.joining( &quot;,&quot; ));

        this.employeeNames = employees.stream()
                .map(Employee::getName)
                .collect(Collectors.joining( &quot;,&quot; ));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;엔티티가 다 생성되었으니 배치 코드를 작성하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Configuration
@ConditionalOnProperty(name = &quot;job.name&quot;, havingValue = JOB_NAME)
public class StoreBackupBatchConfiguration {

    public static final String JOB_NAME = &quot;storeBackupBatch&quot;;
    private static final String STEP_NAME = JOB_NAME+&quot;Step&quot;;

    private EntityManagerFactory entityManagerFactory;
    private JobBuilderFactory jobBuilderFactory;
    private StepBuilderFactory stepBuilderFactory;

    public StoreBackupBatchConfiguration(EntityManagerFactory entityManagerFactory, JobBuilderFactory jobBuilderFactory, StepBuilderFactory stepBuilderFactory) {
        this.entityManagerFactory = entityManagerFactory;
        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
    }

    @Value(&quot;${chunkSize:1000}&quot;)
    private int chunkSize; // Parameter로 chunkSize를 던지면 해당 값으로, 없으면 1000을 기본으로

    private static String ADDRESS_PARAM = null;

    @Bean
    public Job job() {
        return jobBuilderFactory.get(JOB_NAME)
                .start(step())
                .build();
    }

    @Bean
    @JobScope
    public Step step() {
        return stepBuilderFactory.get(STEP_NAME)
                .&amp;lt;Store, StoreHistory&amp;gt;chunk(chunkSize)
                .reader(reader(ADDRESS_PARAM))
                .processor(processor())
                .writer(writer())
                .build();
    }

    @Bean
    @StepScope
    public JpaPagingItemReader&amp;lt;Store&amp;gt; reader (
            @Value(&quot;#{jobParameters[address]}&quot;) String address) {

        Map&amp;lt;String, Object&amp;gt; parameters = new LinkedHashMap&amp;lt;&amp;gt;();
        parameters.put(&quot;address&quot;, address+&quot;%&quot;);

        JpaPagingItemReader&amp;lt;Store&amp;gt; reader = new JpaPagingItemReader&amp;lt;&amp;gt;();
        reader.setEntityManagerFactory(entityManagerFactory);
        reader.setQueryString(&quot;select s From Store s where s.address like :address&quot;);
        reader.setParameterValues(parameters);
        reader.setPageSize(chunkSize);

        return reader;
    }

    public ItemProcessor&amp;lt;Store, StoreHistory&amp;gt; processor() {
        return item -&amp;gt; new StoreHistory(item, item.getProducts(), item.getEmployees());
    }

    public JpaItemWriter&amp;lt;StoreHistory&amp;gt; writer() {
        JpaItemWriter&amp;lt;StoreHistory&amp;gt; writer = new JpaItemWriter&amp;lt;&amp;gt;();
        writer.setEntityManagerFactory(entityManagerFactory);
        return writer;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;조건(&lt;code&gt;like %address&lt;/code&gt;)에 맞는 &lt;code&gt;Store&lt;/code&gt;를 조회하여 &lt;code&gt;StoreHistory&lt;/code&gt;로 복사하는 단순한 배치 프로그램입니다.  &lt;br /&gt;
배치 코드를 테스트할 테스트 코드를 작성하겠습니다.  &lt;/p&gt;&lt;p&gt;먼저 스프링배치 테스트 환경을 위해 설정파일을 하나 생성합니다.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@EnableBatchProcessing
@Configuration
@EnableAutoConfiguration
@ComponentScan
@ConditionalOnProperty(name = &quot;job.name&quot;, havingValue = JOB_NAME)
public class TestJobConfiguration {

    @Bean
    public JobLauncherTestUtils jobLauncherTestUtils() {
        return new JobLauncherTestUtils();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이를 기반으로 테스트 클래스를 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@SpringBootTest
@TestPropertySource(properties = &quot;job.name=storeBackupBatch&quot;)
class StoreBackupBatchConfigurationTest extends Specification {

    @Autowired
    JobLauncherTestUtils jobLauncherTestUtils

    @Autowired
    StoreRepository storeRepository

    @Autowired
    StoreHistoryRepository storeHistoryRepository

    def &quot;Store 정보가 StoreHistory로 복사된다&quot; () {
        given:
        Store store1 = new Store(&quot;서점&quot;, &quot;서울시 강남구&quot;)
        store1.addProduct(new Product(&quot;책1_1&quot;, 10000L))
        store1.addProduct(new Product(&quot;책1_2&quot;, 20000L))
        store1.addEmployee(new Employee(&quot;직원1&quot;, LocalDate.now()))
        storeRepository.save(store1)

        Store store2 = new Store(&quot;서점2&quot;, &quot;서울시 강남구&quot;)
        store2.addProduct(new Product(&quot;책2_1&quot;, 10000L))
        store2.addProduct(new Product(&quot;책2_2&quot;, 20000L))
        store2.addEmployee(new Employee(&quot;직원2&quot;, LocalDate.now()))
        storeRepository.save(store2)

        Store store3 = new Store(&quot;서점3&quot;, &quot;서울시 강남구&quot;)
        store3.addProduct(new Product(&quot;책3_1&quot;, 10000L))
        store3.addProduct(new Product(&quot;책3_2&quot;, 20000L))
        store3.addEmployee(new Employee(&quot;직원3&quot;, LocalDate.now()))
        storeRepository.save(store3)

        JobParameters jobParameters = new JobParametersBuilder()
                .addString(&quot;address&quot;, &quot;서울&quot;)
                .toJobParameters()
        when:
        JobExecution jobExecution = jobLauncherTestUtils.launchJob(jobParameters)

        then:
        jobExecution.status == BatchStatus.COMPLETED
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그럼 이제 테스트를 실행해보겠습니다.  &lt;/p&gt;
&lt;h2 id=&quot;2-문제-상황&quot;&gt;2. 문제 상황&lt;/h2&gt;
&lt;p&gt;테스트를 실행해보시면 테스트는 성공적으로 통과하지만, 로그에 문제가 있어 보입니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9919244A5CBAA2F805&quot; alt=&quot;N_1문제발생&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Store&lt;/code&gt;와 &lt;code&gt;Product&lt;/code&gt;, &lt;code&gt;Employee&lt;/code&gt;가 1대다 관계다보니 &lt;code&gt;reader.read()&lt;/code&gt;과정에서 자연스레 JPA N+1 문제가 발생했습니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;JPA N+1 문제란?  &lt;br /&gt;
   &lt;code&gt;@OneToMany&lt;/code&gt; 등에서 하위 엔티티들을 Lazy Loading으로 가져올때마다 자식 조회 쿼리가 추가로 발생하는 이슈 (&lt;a href=&quot;http://jojoldu.tistory.com/165&quot;&gt;참고&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 문제를 해결하기 위해 &lt;code&gt;join fetch&lt;/code&gt;를 추가하겠습니다.  &lt;br /&gt;
먼저 &lt;code&gt;Product&lt;/code&gt; 만 걸어보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99214C455CBAA2F907&quot; alt=&quot;product만&quot;&gt;&lt;/p&gt;&lt;p&gt;이 쿼리를 자세히 확인해보면&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql language-sql&quot;&gt;select store0_.id as id1_2_0_, products1_.id as id1_1_1_, store0_.address as address2_2_0_, store0_.name as name3_2_0_, products1_.name as name2_1_1_, products1_.price as price3_1_1_, products1_.store_id as store_id4_1_1_, products1_.store_id as store_id4_1_0__, products1_.id as id1_1_0__ 
from store store0_ 
inner join product products1_ on store0_.id=products1_.store_id 
where store0_.address like ?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;한번의 &lt;code&gt;join&lt;/code&gt;이 발생한것을 알 수 있습니다.  &lt;/p&gt;&lt;p&gt;자 그럼 여기서 추가로 Product외에 다른 자식 엔티티인 &lt;code&gt;Employee&lt;/code&gt;에도 &lt;code&gt;join fetch&lt;/code&gt;를 걸어보겠습니다.  &lt;br /&gt;
그리고 테스트를 수행해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/996DB9385CBAA2F830&quot; alt=&quot;employee추가&quot;&gt;&lt;/p&gt;&lt;p&gt;예상치 못한 &lt;code&gt;MultipleBagFetchException&lt;/code&gt;을 만나게 됩니다.  &lt;br /&gt;
즉, 한번에 &lt;strong&gt;2개 이상의 자식 엔티티에는&lt;/strong&gt; &lt;code&gt;join fetch&lt;/code&gt;을 사용할 수 없어 문제가 발생하였습니다.  &lt;/p&gt;&lt;p&gt;이 문제는 꼭 &lt;code&gt;join fetch&lt;/code&gt;에서만 발생하진 않습니다.  &lt;br /&gt;
엔티티 클래스의 &lt;code&gt;FetchType&lt;/code&gt;을 &lt;code&gt;Eager&lt;/code&gt;로 두고 있어도 발생할 수 있습니다.  &lt;br /&gt;
가장 편한 해결책은 Lazy Loading 하는 것이지만, 앞에서 보신것처럼  JPA N+1 문제가 발생해서 성능상 큰 문제가 발생합니다.  &lt;br /&gt;
이러지도 저러지도 못하는 상황에서 해결할 수 있는 방법이 없을까요?&lt;/p&gt;
&lt;h2 id=&quot;3-해결&quot;&gt;3. 해결&lt;/h2&gt;
&lt;h3 id=&quot;3-1-default_batch_fetch_size&quot;&gt;3-1. default_batch_fetch_size&lt;/h3&gt;
&lt;p&gt;Hibernate에서는 &lt;strong&gt;여러 자식들이 있을때 N+1 문제를 회피&lt;/strong&gt;하기 위해  &lt;code&gt;hibernate.default_batch_fetch_size&lt;/code&gt; 라는 옵션이 있습니다.  &lt;/p&gt;&lt;p&gt;src/&lt;strong&gt;test&lt;/strong&gt;/resources/application.yml에 다음과 같은 옵션을 추가합니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;테스트 환경&lt;/strong&gt;에서 옵션을 적용하려면 test/resources에 적용해야만 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BE503F5CBAA2F704&quot; alt=&quot;옵션&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yml language-yml&quot;&gt;spring:
  jpa:
    properties:
      hibernate.default_batch_fetch_size: 1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 &lt;strong&gt;&lt;code&gt;batch-size&lt;/code&gt; 옵션은 하위 엔티티를 로딩할때 한번에 상위 엔티티 ID를 지정한 숫자만큼 &lt;code&gt;in Query&lt;/code&gt;로 로딩&lt;/strong&gt;해줍니다.  &lt;br /&gt;
현재 프로젝트를 예로 들면 &lt;code&gt;batch-size:1000&lt;/code&gt;으로 되어있으면, 상위 엔티티인 &lt;strong&gt;Store의 id 1000개를 in Query&lt;/strong&gt;로 &lt;code&gt;Product&lt;/code&gt; 와 &lt;code&gt;Employee&lt;/code&gt;를 조회하게 됩니다.  &lt;/p&gt;&lt;p&gt;설명한대로 옵션이 작동하는지 &lt;strong&gt;JpaRepository&lt;/strong&gt;로 테스트해보겠습니다.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@RequiredArgsConstructor
@Service
public class StoreService {

    private final StoreRepository storeRepository;

    @Transactional(readOnly = true)
    public long find() {
        List&amp;lt;Store&amp;gt; stores = storeRepository.findAll();
        long productSum = stores.stream()
                .map(Store::getProducts)
                .flatMap(Collection::stream)
                .mapToLong(Product::getPrice)
                .sum();

        stores.stream()
                .map(Store::getEmployees)
                .flatMap(Collection::stream)
                .map(Employee::getName)
                .collect(Collectors.toList());

        return productSum;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;서비스 메소드에 트랜잭션을 걸고, Store의 Product와 Employee를 사용하여 &lt;strong&gt;N+1이 발생하는지 체크&lt;/strong&gt;합니다.&lt;/p&gt;&lt;p&gt;테스트 코드는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@SpringBootTest
class StoreServiceTest extends Specification{
    @Autowired
    StoreRepository storeRepository

    @Autowired
    StoreService storeService

    @Test
    void &quot;Repository 의 BatchSize&quot; () {
        given:
        Store store1 = new Store(&quot;서점&quot;, &quot;서울시 강남구&quot;)
        store1.addProduct(new Product(&quot;책1_1&quot;, 10000L))
        store1.addProduct(new Product(&quot;책1_2&quot;, 20000L))
        store1.addEmployee(new Employee(&quot;직원1&quot;, LocalDate.now()))
        store1.addEmployee(new Employee(&quot;직원2&quot;, LocalDate.now()))
        storeRepository.save(store1)

        Store store2 = new Store(&quot;서점2&quot;, &quot;서울시 강남구&quot;)
        store2.addProduct(new Product(&quot;책2_1&quot;, 10000L))
        store2.addProduct(new Product(&quot;책2_2&quot;, 20000L))
        store2.addEmployee(new Employee(&quot;직원2_1&quot;, LocalDate.now()))
        store2.addEmployee(new Employee(&quot;직원2_2&quot;, LocalDate.now()))
        storeRepository.save(store2)

        when:
        long size = storeService.find()

        then:
        size == 60000L
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;테스트 코드를 실행해보겠습니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998676385CBAA2F902&quot; alt=&quot;default1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;in Query로 product와 employee가 조회&lt;/strong&gt;됩니다!  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;in query 확인을 위해 Query 포맷팅 옵션을 추가한 상태입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;혹시 원래 그런건 아닌지 의심될수 있으니, &lt;strong&gt;옵션을 제거하고 다시 돌려봅니다&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/996CFA365CBAA2F932&quot; alt=&quot;default2&quot;&gt;&lt;/p&gt;&lt;p&gt;옵션을 제거하니 N+1이 다시 발생하는 것을 알 수 있습니다.  &lt;/p&gt;&lt;p&gt;자 그럼 &lt;strong&gt;hibernate.default_batch_fetch_size가 JPA에서 정상 작동&lt;/strong&gt;하는 것을 확인했으니, Batch에서도 그런지 확인해보겠습니다.  &lt;/p&gt;&lt;p&gt;옵션을 다시 추가한 뒤에 &lt;strong&gt;Batch Test&lt;/strong&gt;를 진행해봅니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99077B3C5CBAA2F83A&quot; alt=&quot;default3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;배치에서는 작동하지 않습니다!&lt;/strong&gt;  &lt;/p&gt;&lt;p&gt;왜 그럴까요?  &lt;/p&gt;&lt;p&gt;혹시 JpaPagingItemReader만 안되는것일까요?&lt;/p&gt;
&lt;h3 id=&quot;3-2-hibernate-테스트&quot;&gt;3-2. Hibernate 테스트&lt;/h3&gt;
&lt;p&gt;JpaPagingItemReader에서만 안되는지 Hibernate Item Reader에서 테스트해보겠습니다.  &lt;/p&gt;&lt;p&gt;Batch 코드에서 ItemReader 부분을 다음과 같이 변경합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Bean
@StepScope
public HibernatePagingItemReader&amp;lt;Store&amp;gt; reader(@Value(&quot;#{jobParameters[address]}&quot;) String address) {
    Map&amp;lt;String, Object&amp;gt; parameters = new LinkedHashMap&amp;lt;&amp;gt;();
    parameters.put(&quot;address&quot;, address + &quot;%&quot;);
    SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);

    HibernatePagingItemReader&amp;lt;Store&amp;gt; reader = new HibernatePagingItemReader&amp;lt;&amp;gt;();
    reader.setQueryString(&quot;FROM Store s WHERE s.address LIKE :address&quot;);
    reader.setParameterValues(parameters);
    reader.setSessionFactory(sessionFactory);
    reader.setFetchSize(chunkSize);
    reader.setUseStatelessSession(false);

    return reader;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 다시 테스트를 돌려보겠습니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997827475CBAA2F939&quot; alt=&quot;hibernate1&quot;&gt;&lt;/p&gt;&lt;p&gt;HibernatePaingItemReader에서는 &lt;strong&gt;옵션이 잘 작동합니다&lt;/strong&gt;.  &lt;br /&gt;
음.. HibernatePaingItemReader에서만 잘 작동하는걸까요?  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;HibernateCursorItemReader&lt;/strong&gt; 에서도 작동하는지 확인해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @Bean
    @StepScope
    public HibernateCursorItemReader&amp;lt;Store&amp;gt; reader(@Value(&quot;#{jobParameters[address]}&quot;) String address) {
        Map&amp;lt;String, Object&amp;gt; parameters = new LinkedHashMap&amp;lt;&amp;gt;();
        parameters.put(&quot;address&quot;, address+&quot;%&quot;);
        SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class);

        HibernateCursorItemReader&amp;lt;Store&amp;gt; reader = new HibernateCursorItemReader&amp;lt;&amp;gt;();
        reader.setQueryString(&quot;FROM Store s WHERE s.address LIKE :address&quot;);
        reader.setParameterValues(parameters);
        reader.setSessionFactory(sessionFactory);
        reader.setFetchSize(chunkSize);
        reader.setUseStatelessSession(false);

        return reader;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99AFAE435CBAA2F905&quot; alt=&quot;hibernate2&quot;&gt;&lt;/p&gt;&lt;p&gt;HibernateCursorItemReader에서도 정상 작동합니다.  &lt;/p&gt;&lt;p&gt;즉, ORM Reader 중 &lt;strong&gt;JpaPagingItemReader에서만 작동되지 않습니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;JpaPagingItemReader에서는 해결이 안될까요?  &lt;/p&gt;
&lt;h3 id=&quot;3-3-custom-jpapagingitemreader&quot;&gt;3-3. Custom JpaPagingItemReader&lt;/h3&gt;
&lt;p&gt;왜 JpaPagingItemReader에서만 안될까요?  &lt;br /&gt;
코드를 살펴보면 Hibernate Item Reader와는 차이가 나는 코드가 하나 있습니다.  &lt;br /&gt;
다른 PagingItemReader의 경우 &lt;strong&gt;트랜잭션을 Chunk에 맡깁니다&lt;/strong&gt;.  &lt;br /&gt;
하지만 JpaPagingItemReader의 &lt;strong&gt;트랜잭션을 Reader에서 진행&lt;/strong&gt;합니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/999BEE375CBAA2F92D&quot; alt=&quot;custom1&quot;&gt;&lt;/p&gt;&lt;p&gt;이러다보니 &lt;strong&gt;트랜잭션 안에서만 작동하는 hibernate.default_batch_fetch_size&lt;/strong&gt;가 &lt;strong&gt;단일 객체에서만&lt;/strong&gt; 발동하게 됩니다.  &lt;/p&gt;&lt;p&gt;스프링배치는 이미 &lt;strong&gt;Chunk 단위로 트랜잭션&lt;/strong&gt; 을 보장하고 있기 때문에, JpaPagingItemReader 내부의 트랜잭션을 걷어내겠습니다.  &lt;/p&gt;&lt;p&gt;JpaPagingItemReader 코드를 고칠순 없기 때문에, 직접 Custom Reader를 생성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;public class JpaPagingFetchItemReader &amp;lt;T&amp;gt; extends AbstractPagingItemReader&amp;lt;T&amp;gt; {
    private EntityManagerFactory entityManagerFactory;

    private EntityManager entityManager;

    private final Map&amp;lt;String, Object&amp;gt; jpaPropertyMap = new HashMap&amp;lt;&amp;gt;();

    private String queryString;

    private JpaQueryProvider queryProvider;

    private Map&amp;lt;String, Object&amp;gt; parameterValues;

    private boolean transacted = true;//default value

    public JpaPagingFetchItemReader() {
        setName(ClassUtils.getShortName(JpaPagingFetchItemReader.class));
    }

    /**
     * Create a query using an appropriate query provider (entityManager OR
     * queryProvider).
     */
    private Query createQuery() {
        if (queryProvider == null) {
            return entityManager.createQuery(queryString);
        }
        else {
            return queryProvider.createQuery();
        }
    }

    public void setEntityManagerFactory(EntityManagerFactory entityManagerFactory) {
        this.entityManagerFactory = entityManagerFactory;
    }

    /**
     * The parameter values to be used for the query execution.
     *
     * @param parameterValues the values keyed by the parameter named used in
     * the query string.
     */
    public void setParameterValues(Map&amp;lt;String, Object&amp;gt; parameterValues) {
        this.parameterValues = parameterValues;
    }

    /**
     * By default (true) the EntityTransaction will be started and committed around the read.
     * Can be overridden (false) in cases where the JPA implementation doesn't support a
     * particular transaction.  (e.g. Hibernate with a JTA transaction).  NOTE: may cause
     * problems in guaranteeing the object consistency in the EntityManagerFactory.
     *
     * @param transacted indicator
     */
    public void setTransacted(boolean transacted) {
        this.transacted = transacted;
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        super.afterPropertiesSet();

        if (queryProvider == null) {
            Assert.notNull(entityManagerFactory, &quot;EntityManager is required when queryProvider is null&quot;);
            Assert.hasLength(queryString, &quot;Query string is required when queryProvider is null&quot;);
        }
    }

    /**
     * @param queryString JPQL query string
     */
    public void setQueryString(String queryString) {
        this.queryString = queryString;
    }

    /**
     * @param queryProvider JPA query provider
     */
    public void setQueryProvider(JpaQueryProvider queryProvider) {
        this.queryProvider = queryProvider;
    }

    @Override
    protected void doOpen() throws Exception {
        super.doOpen();

        entityManager = entityManagerFactory.createEntityManager(jpaPropertyMap);
        if (entityManager == null) {
            throw new DataAccessResourceFailureException(&quot;Unable to obtain an EntityManager&quot;);
        }
        // set entityManager to queryProvider, so it participates
        // in JpaPagingItemReader's managed transaction
        if (queryProvider != null) {
            queryProvider.setEntityManager(entityManager);
        }

    }

    @Override
    @SuppressWarnings(&quot;unchecked&quot;)
    protected void doReadPage() {
        if (transacted) {
            entityManager.clear();
        }//end if

        Query query = createQuery().setFirstResult(getPage() * getPageSize()).setMaxResults(getPageSize());

        if (parameterValues != null) {
            for (Map.Entry&amp;lt;String, Object&amp;gt; me : parameterValues.entrySet()) {
                query.setParameter(me.getKey(), me.getValue());
            }
        }

        if (results == null) {
            results = new CopyOnWriteArrayList&amp;lt;&amp;gt;();
        }
        else {
            results.clear();
        }

        if (!transacted) {
            List&amp;lt;T&amp;gt; queryResult = query.getResultList();
            for (T entity : queryResult) {
                entityManager.detach(entity);
                results.add(entity);
            }//end if
        } else {
            results.addAll(query.getResultList());
        }//end if
    }

    @Override
    protected void doJumpToPage(int itemIndex) {
    }

    @Override
    protected void doClose() throws Exception {
        entityManager.close();
        super.doClose();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9999E13D5CBAA2F929&quot; alt=&quot;custom2&quot;&gt;&lt;/p&gt;&lt;p&gt;TransactionManager를 사용하는 코드를 모두 제거한 ItemReader를 만들고, 이를 사용합니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D198385CBAA2F836&quot; alt=&quot;custom3&quot;&gt;&lt;/p&gt;&lt;p&gt;다시 테스트 코드를 돌려보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998CA23F5CBAA2F836&quot; alt=&quot;custom4&quot;&gt;&lt;/p&gt;&lt;p&gt;성공적으로 &lt;code&gt;hibernate.default_batch_fetch_size&lt;/code&gt; 옵션이 적용된 것을 확인할 수 있습니다.  &lt;/p&gt;&lt;p&gt;Chunk 단위 트랜잭션 관리가 안되는지 확인해볼까요?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998FE6375CBAA2F935&quot; alt=&quot;custom5&quot;&gt;&lt;/p&gt;&lt;p&gt;위 ItemReader를 쓰더라도 &lt;strong&gt;Chunk 단위 트랜잭션 관리는 정상&lt;/strong&gt; 입니다.&lt;/p&gt;&lt;p&gt;이 방법으로 쓰면 될까요?  &lt;br /&gt;
아쉽게도, 이 방법에는 &lt;strong&gt;어떤 사이드 이펙트가 있는지 알 수 없습니다&lt;/strong&gt;.&lt;br /&gt;
그래서 아직까지 추천하기가 어렵습니다.&lt;/p&gt;
&lt;h2 id=&quot;4-결론&quot;&gt;4. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join fetch&lt;/code&gt;는 &lt;strong&gt;하나의 자식에만 적용&lt;/strong&gt;가능&lt;/li&gt;
&lt;li&gt;Spring Data의 JpaRepository / Spring Batch의 HibernateItemReader에서는&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hibernate.default_batch_fetch_size&lt;/code&gt;로 N+1 문제를 피할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@BatchSize&lt;/code&gt;도 가능&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Spring Boot 2.1.3 (Spring Batch 4.1.1)까지는 &lt;code&gt;hibernate.default_batch_fetch_size&lt;/code&gt; 옵션이 &lt;strong&gt;JpaPagingItemReader에서 작동하지 않는다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Custom하게 수정해서 쓸 순 있지만, 검증되지 않은 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;현재 해당 내용의 수정을 &lt;a href=&quot;https://github.com/spring-projects/spring-batch/pull/713&quot;&gt;PR&lt;/a&gt;로 보냈습니다.  &lt;br /&gt;
  Merge되면 이 블로그의 내용은 수정 될 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.thoughts-on-java.org/tips-to-boost-your-hibernate-performance/&quot;&gt;7 tips-to-boost-your-hibernate-performance/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://vladmihalcea.com/2013/10/22/hibernate-facts-multi-level-fetching/&quot;&gt;hibernate-facts-multi-level-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/java/hibernate/performance&quot;&gt;권남 위키&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://prasanthmathialagan.wordpress.com/2017/04/20/beware-of-hibernate-batch-fetching/&quot;&gt;beware-of-hibernate-batch-fetching&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/414&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>Hibernate Item Reader</category>
<category>JPA</category>
<category>JpaItemReader</category>
<category>N+1</category>
<category>Spring Batch</category>
<category>스프링배치</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/414</guid>
<comments>https://jojoldu.tistory.com/414#entry414comment</comments>
<pubDate>Sat, 20 Apr 2019 13:41:29 +0900</pubDate>
</item>
<item>
<title>오늘의 질문 2019.04.03</title>
<link>https://jojoldu.tistory.com/413</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;h2 id=&quot;q1&quot;&gt;Q.1&lt;/h2&gt;
&lt;p&gt;Q. 신입을 백엔드 개발로만 사용하는 곳이 있는지.  &lt;/p&gt;&lt;p&gt;제가 알고 있는 대부분의 서비스 회사가 &lt;strong&gt;완전히 백엔드만 하는 팀은 많지 않습니다&lt;/strong&gt;.  &lt;br /&gt;
실제 B2C 서비스의 프론트 엔드를 만들진 않지만, 본인 팀 서비스의 &lt;strong&gt;어드민 / 모니터링&lt;/strong&gt; 등은 직접 만들기 때문에 웹프론트 엔드를 대부분은 다루고 있습니다.  &lt;/p&gt;&lt;p&gt;단지, 주력으로 쓰는게 아니라서 꼭 Vue, React 등을 &lt;strong&gt;필수로 사용하지 않을 뿐&lt;/strong&gt;입니다.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;백엔드 개발자라고 해서 배우면 안되는 기술은 없습니다&lt;/strong&gt;.  &lt;br /&gt;
필요한게 있다면 &lt;strong&gt;직접 만들 수 있는&lt;/strong&gt; 마음가짐이 필요합니다.  &lt;br /&gt;
운영팀, 기획팀이 자주 요청하는 데이터가 있다면 &lt;strong&gt;통계 화면을 만들어서&lt;/strong&gt; 그 화면을 확인하시라고 얘기하는 일을 당연하게 생각하시면 좋습니다.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;중점적으로 공부할것과 아닌것의 차이&lt;/strong&gt;이지, 어떤 기술이든 피할수는 없습니다.  &lt;/p&gt;
&lt;h2 id=&quot;q2&quot;&gt;Q.2&lt;/h2&gt;
&lt;p&gt;Q. 백엔드 개발자가 되기 위한 첫 직장은 어떠한 형태의 기업을 가야하는지.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;365일 24시간&lt;/strong&gt; 서비스를 하는 회사가 가장 좋다고 생각합니다.  &lt;br /&gt;
그런곳을 가야 &lt;strong&gt;어떻게하면 무정지 시스템을 운영할 수 있는지, 대용량/대규모 트래픽을 다룰 수 있는지&lt;/strong&gt;를 경험해볼 수 있습니다.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;6시 퇴근하면 더이상 컴퓨터 안봐도 되는 회사&lt;/strong&gt;로는 안가는게 좋습니다.  &lt;br /&gt;
문제 해결 능력을 전혀 키울수 없습니다.  &lt;/p&gt;&lt;p&gt;규모가 작고 매출이 작은 것은 큰 문제가 되지 않습니다.  &lt;/p&gt;&lt;p&gt;예를 들어 &lt;strong&gt;모 SI 대기업 회사의 경우 작년에 매출 10조&lt;/strong&gt;를 찍었습니다.  &lt;br /&gt;
반면에 &lt;strong&gt;매출 100억 스타트업&lt;/strong&gt;이 있다고 합시다.  &lt;br /&gt;
둘을 비교해서 신입 개발자분이 더 성장할 수 있는 곳이 어디냐고 하면 전 스타트업 손을 들어줍니다.  &lt;/p&gt;&lt;p&gt;똑같은 년차인데 &lt;strong&gt;문제 해결 능력이&lt;/strong&gt; 극명히 차이나는걸 자주 봤습니다.  &lt;br /&gt;
더군다나 해당 대기업에선 4년차,5년차면 &lt;strong&gt;주니어&lt;/strong&gt;이지만, 스타트업에선 팀 리드 개발자일 확률이 높습니다.  &lt;br /&gt;
&lt;strong&gt;그만큼 책임져야할 부분이 많고, 기술적 도전 과제&lt;/strong&gt;를 더 자주 만나게 됩니다.  &lt;/p&gt;&lt;p&gt;결국 현재 &lt;strong&gt;기술 커뮤니티와 기술 선도&lt;/strong&gt;를 하고 있는 기업이 어디인지 확인해보시면 좋습니다.  &lt;/p&gt;&lt;p&gt;백엔드 개발자로 실력을 키우는것 보다는 &lt;strong&gt;더 좋은 개발자가 될 수 있는 회사&lt;/strong&gt;를 선택하시면 됩니다.  &lt;/p&gt;
&lt;h2 id=&quot;q3&quot;&gt;Q.3&lt;/h2&gt;
&lt;p&gt;Q. 2번과 같은 기업이 있다면 어느 기업이 있는지.  &lt;/p&gt;&lt;p&gt;모두가 알고 있는 서비스 기업들입니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네이버&lt;/li&gt;
&lt;li&gt;카카오&lt;/li&gt;
&lt;li&gt;라인&lt;/li&gt;
&lt;li&gt;쿠팡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이외에도 점점 성장중인 스타트업들이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우아한형제들&lt;/li&gt;
&lt;li&gt;야놀자&lt;/li&gt;
&lt;li&gt;토스&lt;/li&gt;
&lt;li&gt;8퍼센트&lt;/li&gt;
&lt;li&gt;지그재그&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등이 있습니다.  &lt;/p&gt;&lt;p&gt;개인적으로 위에서 언급한 회사들의 채용 정보를 큐레이션 하고 있으니 참고하셔도 좋습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jojoldu/junior-recruit-scheduler&quot;&gt;주니어 개발자 채용정보&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;백엔드 개발자로서 역량을 키우고 싶다면 SI회사는 되도록이면 피하는게 좋습니다.  &lt;br /&gt;
자사 서비스를 하지 않기 때문에 아무래도 위에서 언급한 역량을 키우는데 한계가 있습니다.  &lt;/p&gt;&lt;p&gt;아래 글들을 참고하시면 도움이 되실것 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@javajigi/4&quot;&gt;자바지기 박재성님의 글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.naver.com/gngh0101/221295043724&quot;&gt;주니어 개발자분의 회고록&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/277&quot;&gt;3번째 직장에 오기까지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt; &lt;/article&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/413&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>생각정리</category>
<category>백엔드 개발자</category>
<category>신입 개발자</category>
<category>자바 개발자</category>
<category>채용</category>
<category>취업</category>
<category>커리어</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/413</guid>
<comments>https://jojoldu.tistory.com/413#entry413comment</comments>
<pubDate>Thu, 04 Apr 2019 12:26:12 +0900</pubDate>
</item>
<item>
<title>일급 컬렉션 (First Class Collection)의 소개와 써야할 이유</title>
<link>https://jojoldu.tistory.com/412</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;최근 &lt;a href=&quot;https://edu.nextstep.camp/&quot;&gt;클린코드 &amp;amp; TDD 강의&lt;/a&gt;의 리뷰어로 참가하면서 많은 분들이 공통적으로 어려워 하는 개념 한가지를 발견하게 되었습니다.  &lt;br /&gt;
바로 &lt;strong&gt;일급 컬렉션&lt;/strong&gt;인데요.  &lt;br /&gt;
왜 객체지향적으로, 리팩토링하기 쉬운 코드로 갈려면 일급 컬렉션이 필요한지에 대해 많은 분들이 공감하지 못하는걸 보게 되었습니다.  &lt;/p&gt;&lt;p&gt;그래서 이번 시간에는 일급 컬렉션 (First Class Collection) 이 무엇인지, 어떤 장점들이 있는지에 대해 소개드립니다.  &lt;/p&gt;&lt;p&gt;일급 컬렉션이란 단어는 &lt;a href=&quot;https://coupa.ng/bgRZDf&quot;&gt;소트웍스 앤솔로지&lt;/a&gt; 의 &lt;strong&gt;객체지향 생활체조&lt;/strong&gt; 파트에서 언급이 되었습니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;규칙 8: 일급 콜렉션 사용&lt;br /&gt;
  이 규칙의 적용은 간단하다. &lt;br /&gt;
  콜렉션을 포함한 클래스는 반드시 다른 멤버 변수가 없어야 한다. &lt;br /&gt;
  각 콜렉션은 그 자체로 포장돼 있으므로 이제 콜렉션과 관련된 동작은 근거지가 마련된셈이다.&lt;br /&gt;
  필터가 이 새 클래스의 일부가 됨을 알 수 있다. &lt;br /&gt;
  필터는 또한 스스로 함수 객체가 될 수 있다. &lt;br /&gt;
  또한 새 클래스는 두 그룹을 같이 묶는다든가 그룹의 각 원소에 규칙을 적용하는 등의 동작을 처리할 수 있다. &lt;br /&gt;
  이는 인스턴스 변수에 대한 규칙의 확실한 확장이지만 그 자체를 위해서도 중요하다. &lt;br /&gt;
  콜렉션은 실로 매우 유용한 원시 타입이다. &lt;br /&gt;
  많은 동작이 있지만 후임 프로그래머나 유지보수 담당자에 의미적 의도나 단초는 거의 없다. - 소트웍스 앤솔로지 객체지향 생활체조편&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;간단하게 설명드리자면, 아래의 코드를&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;Map&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
map.put(&quot;1&quot;, &quot;A&quot;);
map.put(&quot;2&quot;, &quot;B&quot;);
map.put(&quot;3&quot;, &quot;C&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래와 같이 &lt;strong&gt;Wrapping&lt;/strong&gt; 하는 것을 얘기합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;public class GameRanking {

    private Map&amp;lt;String, String&amp;gt; ranks;

    public GameRanking(Map&amp;lt;String, String&amp;gt; ranks) {
        this.ranks = ranks;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Collection을 Wrapping&lt;/strong&gt;하면서, &lt;strong&gt;그 외 다른 멤버 변수가 없는 상태&lt;/strong&gt;를 일급 컬렉션이라 합니다.  &lt;br /&gt;
Wrapping 함으로써 다음과 같은 이점을 가지게 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;비지니스&lt;/strong&gt;에 종속적인 &lt;strong&gt;자료구조&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Collection의 &lt;strong&gt;불변성&lt;/strong&gt;을 보장&lt;/li&gt;
&lt;li&gt;상태와 행위를 한 곳에서 관리&lt;/li&gt;
&lt;li&gt;이름이 있는 컬렉션&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;하나 하나 소개드리겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-비지니스에-종속적인-자료구조&quot;&gt;1. 비지니스에 종속적인 자료구조&lt;/h2&gt;
&lt;p&gt;예를 들어 다음과 같은 조건으로 &lt;strong&gt;로또 복권 게임&lt;/strong&gt;을 만든다고 가정하겠습니다.  &lt;/p&gt;&lt;p&gt;로또 복권은 다음의 조건이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6개의 번호가 존재&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;보너스 번호는 이번 예제에서 제외&lt;/strong&gt;하겠습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;6개의 번호는 서로 중복되지 않아야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적으로 이런 일은 &lt;strong&gt;서비스 메소드&lt;/strong&gt;에서 진행합니다.&lt;br /&gt;
그래서 구현을 해보면 아래처럼 됩니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99CB784E5CD0EA8B30&quot; alt=&quot;structure1&quot;&gt;&lt;/p&gt;&lt;p&gt;서비스 메소드에서 비지니스 로직을 처리했습니다.  &lt;br /&gt;
이럴 경우 큰 문제가 있는데요.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;로또 번호가 필요한 모든 장소에선 검증로직&lt;/strong&gt;이 들어가야만 합니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;Long&amp;gt;&lt;/code&gt; 으로 된 데이터는 모두 검증 로직이 필요할까요?  &lt;/li&gt;
&lt;li&gt;신규 입사자분들은 어떻게 이 검증로직이 필요한지 알 수 있을까요?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등 &lt;strong&gt;모든 코드와 도메인을 알고 있지 않다면&lt;/strong&gt; 언제든 문제가 발생할 여지가 있습니다.  &lt;/p&gt;&lt;p&gt;그렇다면 이 문제를 어떻게 깔끔하게 해결할 수 있을까요?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6개의 숫자로만 이루어져야만 하고&lt;/li&gt;
&lt;li&gt;6개의 숫자는 서로 중복되지 않아야만 하는&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 자료구조가 없을까요?  &lt;br /&gt;
없으니 저희가 직접 만들면 됩니다.  &lt;/p&gt;&lt;p&gt;아래와 같이 &lt;strong&gt;해당 조건으로만 생성 할 수 있는 자료구조&lt;/strong&gt;를 만들면 위에서 언급한 문제들이 모두 해결됩니다.  &lt;/p&gt;&lt;p&gt;그리고 이런 클래스를 우린 &lt;strong&gt;일급 컬렉션&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B2793E5CD0EA8D36&quot; alt=&quot;structure2&quot;&gt;&lt;/p&gt;&lt;p&gt;이제 로또 번호가 필요한 모든 로직은 이 일급 컬렉션만 있으면 됩니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9976E04C5CD0EA8B2E&quot; alt=&quot;structure3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;비지니스에 종속적인 자료구조&lt;/strong&gt;가 만들어져, 이후 발생할 문제가 최소화 되었습니다.&lt;/p&gt;
&lt;h2 id=&quot;2-불변&quot;&gt;2. 불변&lt;/h2&gt;
&lt;p&gt;일급 컬렉션은 &lt;strong&gt;컬렉션의 불변을 보장&lt;/strong&gt;합니다.  &lt;/p&gt;&lt;p&gt;여기서 &lt;code&gt;final&lt;/code&gt;을 사용하면 안되나요?  라고 하시는 분들이 계신데요.  &lt;br /&gt;
Java의 &lt;code&gt;final&lt;/code&gt;은 정확히는 불변을 만들어주는 것은 아니며, &lt;strong&gt;재할당만 금지&lt;/strong&gt; 합니다.  &lt;/p&gt;&lt;p&gt;아래 테스트 코드를 참고해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @Test
    public void final도_값변경이_가능하다() {
        //given
        final Map&amp;lt;String, Boolean&amp;gt; collection = new HashMap&amp;lt;&amp;gt;();

        //when
        collection.put(&quot;1&quot;, true);
        collection.put(&quot;2&quot;, true);
        collection.put(&quot;3&quot;, true);
        collection.put(&quot;4&quot;, true);

        //then
        assertThat(collection.size()).isEqualTo(4);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이를 실행해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F1823C5CD0EA8B3B&quot; alt=&quot;immutable1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;값이 추가&lt;/strong&gt;되는걸을 확인할 수 있습니다.  &lt;br /&gt;
이미 &lt;code&gt;collection&lt;/code&gt;은 &lt;strong&gt;비어있는 HashMap&lt;/strong&gt;으로 선언되었음에도 값이 변경될수 있다는것이죠.  &lt;/p&gt;&lt;p&gt;추가로 테스트해볼까요?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @Test
    public void final은_재할당이_불가능하다() {
        //given
        final Map&amp;lt;String, Boolean&amp;gt; collection = new HashMap&amp;lt;&amp;gt;();

        //when
        collection = new HashMap&amp;lt;&amp;gt;();

        //then
        assertThat(collection.size()).isEqualTo(4);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 코드는 바로 컴파일에러가 발생합니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BF844D5CD0EA8B34&quot; alt=&quot;immutable2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;final로 할당된 코드에 재할당할순 없기 때문&lt;/strong&gt;이죠.  &lt;/p&gt;&lt;p&gt;보신것처럼 Java의 final은 &lt;strong&gt;재할당만 금지&lt;/strong&gt;합니다.  &lt;br /&gt;
이외에도 &lt;code&gt;member.setAge(10)&lt;/code&gt; 과 같은 코드 역시 작동해버리니 &lt;strong&gt;반쪽짜리&lt;/strong&gt;라 할 수 있겠습니다.  &lt;/p&gt;&lt;p&gt;요즘과 같이 소프트웨어 규모가 커지고 있는 상황에서 &lt;strong&gt;불변 객체&lt;/strong&gt;는 아주 중요합니다.  &lt;br /&gt;
각각의 객체들이 &lt;strong&gt;절대 값이 바뀔일이 없다&lt;/strong&gt;는게 보장되면 그만큼 코드를 이해하고 수정하는데 &lt;strong&gt;사이드 이펙트가 최소화&lt;/strong&gt;되기 때문입니다.  &lt;/p&gt;&lt;p&gt;Java에서는 final로 그 문제를 해결할 수 없기 때문에 &lt;strong&gt;일급 컬렉션&lt;/strong&gt; (Frist Class Collection)과 &lt;strong&gt;래퍼 클래스&lt;/strong&gt; (Wrapper Class) 등의 방법으로 해결해야하만 합니다.  &lt;/p&gt;&lt;p&gt;그래서 아래와 같이 &lt;strong&gt;컬렉션의 값을 변경할 수 있는 메소드가 없는 컬렉션&lt;/strong&gt;을 만들면 &lt;strong&gt;불변 컬렉션&lt;/strong&gt;이 됩니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D80B4C5CD0EA8B1C&quot; alt=&quot;immutable3&quot;&gt;&lt;/p&gt;&lt;p&gt;이 클래스는 &lt;strong&gt;생성자와 getAmountSum()&lt;/strong&gt; 외에 다른 메소드가 없습니다.  &lt;br /&gt;
즉, 이 클래스의 사용법은 &lt;strong&gt;새로 만들거나 값을 가져오는 것&lt;/strong&gt;뿐인거죠.  &lt;br /&gt;
List라는 컬렉션에 접근할 수 있는 방법이 없기 때문에 &lt;strong&gt;값을 변경/추가가 안됩니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;이렇게 일급 컬렉션을 사용하면, 불변 컬렉션을 만들수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;3-상태와-행위를-한곳에서-관리&quot;&gt;3. 상태와 행위를 한곳에서 관리&lt;/h2&gt;
&lt;p&gt;일급 컬렉션의 세번째 장점은 &lt;strong&gt;값과 로직이 함께 존재&lt;/strong&gt;한다는 것입니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 부분은 예전에 소개 드린 &lt;a href=&quot;http://woowabros.github.io/tools/2017/07/10/java-enum-uses.html&quot;&gt;Enum&lt;/a&gt;의 장점과도 일맥상통합니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를 들어 여러 Pay들이 모여있고, 이 중 &lt;strong&gt;NaverPay 금액의 합&lt;/strong&gt;이 필요하다고 가정해보겠습니다.  &lt;br /&gt;
일반적으로는 아래와 같이 작성합니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99AF33435CD0EA8C30&quot; alt=&quot;merge1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List에 데이터를 담고&lt;/li&gt;
&lt;li&gt;Service 혹은 Util 클래스에서 필요한 로직 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 상황에서는 문제가 있습니다.&lt;br /&gt;
결국 &lt;code&gt;pays&lt;/code&gt; 라는 컬렉션과 계산 로직은 &lt;strong&gt;서로 관계&lt;/strong&gt;가 있는데, 이를 &lt;strong&gt;코드로 표현이 안됩니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;Pay타입의 &lt;strong&gt;상태에 따라&lt;/strong&gt; 지정된 메소드에서만 계산되길 원하는데, 현재 상태로는 강제할 수 있는 수단이 없습니다.  &lt;br /&gt;
지금은 &lt;strong&gt;Pay타입의 List라면&lt;/strong&gt; 사용될 수 있기 때문에 히스토리를 모르는 분들이라면 실수할 여지가 많습니다.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;똑같은 기능을 하는 &lt;strong&gt;메소드를 중복 생성&lt;/strong&gt;할 수 있습니다.&lt;ul&gt;
&lt;li&gt;히스토리가 관리 안된 상태에서 신규화면이 추가되어야 할 경우 계산 메소드가 있다는 것을 몰라 다시 만드는 경우가 빈번합니다.&lt;/li&gt;
&lt;li&gt;만약 기존 화면의 계산 로직이 변경 될 경우, 신규 인력은 2개의 메소드의 로직을 다 변경해야하는지, 해당 화면만 변경해야하는지 알 수 없습니다.&lt;/li&gt;
&lt;li&gt;관리 포인트가 증가할 확률이 매우 높습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;계산 메소드를 누락할 수 있습니다.&lt;ul&gt;
&lt;li&gt;리턴 받고자 하는 것이 Long 타입의 값이기 때문에 &lt;strong&gt;꼭 이 계산식을 써야한다고 강제할 수 없습니다&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;결국에 &lt;strong&gt;네이버페이 총 금액을 뽑을려면 이렇게 해야한다는 계산식을 컬렉션과 함께 두어야&lt;/strong&gt; 합니다.  &lt;br /&gt;
만약 네이버페이 외에 카카오 페이의 총금액도 필요하다면 더더욱 &lt;strong&gt;코드가 흩어질 확률이 높습니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;그래서 이 문제 역시 일급 컬렉션으로 해결합니다.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;public class PayGroups {
    private List&amp;lt;Pay&amp;gt; pays;

    public PayGroups(List&amp;lt;Pay&amp;gt; pays) {
        this.pays = pays;
    }

    public Long getNaverPaySum() {
        return pays.stream()
                .filter(pay -&amp;gt; PayType.isNaverPay(pay.getPayType()))
                .mapToLong(Pay::getAmount)
                .sum();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 &lt;strong&gt;다른 결제 수단들의 합이 필요&lt;/strong&gt;하다면 아래와 같이 &lt;strong&gt;람다식으로 리팩토링&lt;/strong&gt; 가능합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;public class PayGroups {
    private List&amp;lt;Pay&amp;gt; pays;

    public PayGroups(List&amp;lt;Pay&amp;gt; pays) {
        this.pays = pays;
    }

    public Long getNaverPaySum() {
        return getFilteredPays(pay -&amp;gt; PayType.isNaverPay(pay.getPayType()));
    }

    public Long getKakaoPaySum() {
        return getFilteredPays(pay -&amp;gt; PayType.isKakaoPay(pay.getPayType()));
    }

    private Long getFilteredPays(Predicate&amp;lt;Pay&amp;gt; predicate) {
        return pays.stream()
                .filter(predicate)
                .mapToLong(Pay::getAmount)
                .sum();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 PayGroups라는 일급 컬렉션이 생김으로 &lt;strong&gt;상태와 로직이 한곳에서 관리&lt;/strong&gt; 됩니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9909A6495CD0EA8B35&quot; alt=&quot;merge1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-이름이-있는-컬렉션&quot;&gt;4. 이름이 있는 컬렉션&lt;/h2&gt;
&lt;p&gt;마지막 장점은 &lt;strong&gt;컬렉션에 이름을 붙일 수 있다&lt;/strong&gt;는 것입니다.  &lt;br /&gt;
이 장점에 대해서는 크게 메리트를 못느끼실 수도 있는데요.  &lt;br /&gt;
저는 요즘 이것 역시 장점이라고 생각되어서 언급하게 되었습니다.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;같은 Pay들의 모임이지만 네이버페이의 List와 카카오페이의 List는 다릅니다&lt;/strong&gt;.  &lt;br /&gt;
그렇다면 이 둘을 구분할려면 어떻게 해야할까요?  &lt;br /&gt;
가장 흔한 방법은 &lt;strong&gt;변수명을 다르게 하는 것입니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993B324B5CD0EA8B31&quot; alt=&quot;named1&quot;&gt;&lt;/p&gt;&lt;p&gt;위 코드의 단점은 뭘까요?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색이 어려움&lt;ul&gt;
&lt;li&gt;네이버페이 그룹이 어떻게 사용되는지 검색 시 &lt;strong&gt;변수명으로만 검색할 수 있습니다&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;이 상황에서 검색은 거의 불가능합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;네이버페이의 그룹&lt;/strong&gt;이라는 뜻은 &lt;strong&gt;개발자마다 다르게 지을 수 있기 때문&lt;/strong&gt;입니다.&lt;/li&gt;
&lt;li&gt;네이버페이 그룹은 어떤 검색어로 검색이 가능할까요?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;명확한 표현이 불가능&lt;ul&gt;
&lt;li&gt;변수명에 불과하기 때문에 &lt;strong&gt;의미를 부여하기가 어렵습니다&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;이는 개발팀/운영팀간에 의사소통시 보편적인 언어로 사용하기가 어려움을 얘기합니다.&lt;/li&gt;
&lt;li&gt;중요한 값임에도 &lt;strong&gt;이를 표현할 명확한 단어가 없는것&lt;/strong&gt;이죠.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 문제 역시 일급 컬렉션으로 쉽게 해결할 수 있습니다.  &lt;/p&gt;&lt;p&gt;네이버페이 그룹과 카카오페이 그룹 각각의 일급 컬렉션을 만들면 &lt;strong&gt;이 컬렉션 기반으로 용어사용과 검색&lt;/strong&gt;을 하면 됩니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BAF7335CD0EA8B34&quot; alt=&quot;named2&quot;&gt;&lt;/p&gt;&lt;p&gt;개발팀/운영팀 내에서 사용될 표현은 이제 이 컬렉션에 맞추면 됩니다.  &lt;br /&gt;
검색 역시 이 컬렉션 클래스를 검색하면 모든 사용 코드를 찾아낼 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;어떠셨나요?  &lt;br /&gt;
일급 컬렉션을 왜 써야하는지 조금은 공감이 가시나요?  &lt;br /&gt;
Enum과 마찬가지로 일급 컬렉션은 객체지향 코드로 가기 위해 꼭 익혀야할 방법 중 하나입니다.  &lt;/p&gt;&lt;p&gt;앞으로도 종종 리뷰어로 활동하면서 어려워 하시는 개념에 대해 정리해서 공유드리겠습니다.  &lt;br /&gt;
끝까지 읽어주셔서 감사합니다!&lt;/p&gt; &lt;/article&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/412&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Java</category>
<category>first class collection</category>
<category>객체지향</category>
<category>객체지향 생활체조</category>
<category>소트웍스 앤솔로지</category>
<category>일급컬렉션</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/412</guid>
<comments>https://jojoldu.tistory.com/412#entry412comment</comments>
<pubDate>Mon, 01 Apr 2019 03:32:20 +0900</pubDate>
</item>
<item>
<title>AWS Credentials were refreshed 발생시 해결 방법</title>
<link>https://jojoldu.tistory.com/410</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;S3를 사용하는 젠킨스 서버에서 갑자기 아래와 같은 에러가 발생했습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot;&gt;fatal error: Credentials were refreshed, but the refreshed credentials are still expired.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EC2에 등록된 인증 방식이 만료되었다는 의미인데요.  &lt;br /&gt;
저는 &lt;strong&gt;access_key와 secret_key를 등록하지 않았습니다&lt;/strong&gt;.  &lt;br /&gt;
그럼에도 발생한것이죠.  &lt;/p&gt;&lt;p&gt;이유는 IAM Role로 할당한 것 역시 인증 방식으로 보기 때문입니다.  &lt;/p&gt;&lt;p&gt;그래서 이를 갱신하겠습니다.  &lt;br /&gt;
EC2의 IAM 교체를 선택합니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998416365C95B78F2B&quot; alt=&quot;update1&quot;&gt;&lt;/p&gt;&lt;p&gt;갱신을 해야하니 아래와 같이 진행합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;기존과 다른 Role&lt;/strong&gt;을 선택해서 저장&lt;/li&gt;
&lt;li&gt;저장 완료 되면 다시 &lt;strong&gt;기존 Role 선택해서 저장&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 &lt;strong&gt;기존과 같은 Role을 선택&lt;/strong&gt;하는 이유는 EC2에 할당된 인증이 만료 된 것이지, &lt;strong&gt;Role 자체가 만료된 건 아닙니다&lt;/strong&gt;.  &lt;/p&gt;&lt;p&gt;동일한 정책을 가진 Role을 계속 만들긴 귀찮으니 기존걸 다시 선택하시면 됩니다.  &lt;/p&gt;&lt;p&gt;갱신하셨으면 &lt;strong&gt;꼭! EC2를 재부팅하셔야 됩니다&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot;&gt;sudo reboot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;부팅이 끝났다면 간단한 aws cli를 실행해봅니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99CAFD4B5C95B78F01&quot; alt=&quot;check&quot;&gt;&lt;/p&gt;&lt;p&gt;정상적으로 cli가 실행됐다면, 최종적으로 key 등록까지 확인합니다.  &lt;/p&gt;&lt;p&gt;아래와 같이 &lt;strong&gt;iam-role&lt;/strong&gt; 로 저장되어있는게 확인되면 정상적으로 갱신된 것입니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/990CDC435C95B78F01&quot; alt=&quot;check2&quot;&gt;&lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/410&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>DevOps</category>
<category>aws</category>
<category>but the refreshed credentials are still expired</category>
<category>Credentials were refreshed</category>
<category>S3</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/410</guid>
<comments>https://jojoldu.tistory.com/410#entry410comment</comments>
<pubDate>Sat, 23 Mar 2019 13:35:28 +0900</pubDate>
</item>
<item>
<title>젠킨스에서 실패한 Job 무시하기</title>
<link>https://jojoldu.tistory.com/409</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;젠킨스에서 파이프라인을 사용할 경우 여러개의 Job을 수행합니다. &lt;/p&gt;&lt;p&gt;일반적으로 젠킨스의 파이프라인은 빌드-배포에 맞춰져있어, 앞의 Job이 실패하면 뒤 Job들이 실행하지 않도록 하는 것을 기본으로 합니다.  &lt;/p&gt;&lt;p&gt;이때 각 Job이 실패하더라도 뒤에 있는 Job들을 계속 실행할 수 있는 방법이 필요할때가 있는데요.  &lt;/p&gt;&lt;p&gt;예를 들어 Batch 작업들이 순차적으로 실행되지만, 각 Batch들이 서로 연관관계가 없을 경우 앞이 실패한 것과 무관하게 실행되길 원합니다.  &lt;br /&gt;
이럴때 실패를 무시하고 다음 Job을 실행하는 방법을 소개드립니다.&lt;/p&gt;
&lt;h2 id=&quot;1-scripted-문법&quot;&gt;1. Scripted 문법&lt;/h2&gt;
&lt;p&gt;Scripted 문법은 Groovy 언어를 사용하는 것과 비슷하다고 말씀드렸는데요.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;참고: &lt;a href=&quot;https://jojoldu.tistory.com/356&quot;&gt;젠킨스 파이프라인 정리 - 2. Scripted 문법 소개&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일반적인 프로그래밍 언어에서 예외가 발생했을때 처리하는 것처럼 &lt;code&gt;try~catch&lt;/code&gt;로 실패를 예외처럼 잡고 다음을 실행할 수 있습니다.  &lt;/p&gt;&lt;p&gt;아래와 같이 &lt;strong&gt;stage2에서 실패&lt;/strong&gt;하는 부분을 &lt;code&gt;try~catch&lt;/code&gt;로 감쌌습니다.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy language-groovy&quot;&gt;node {
    stage('stage1') {
        sh 'echo 111'
    }

    stage('stage2') {
        try {
            sh 'exit 1'
        } catch (e) {
            sh 'echo stage2 Fail!!'
        }
    }
    stage('stage3') {
        sh 'echo 333'
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 파이프라인을 실행해보면 아래와 같이 성공적으로 stage2와 stage3이 실행되는 것을 확인할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99517F405C7F0CD426&quot; alt=&quot;scripted1&quot;&gt;&lt;/p&gt;&lt;p&gt;콘솔 로그도 함께 확인해보시면 &lt;code&gt;catch&lt;/code&gt;의 코드가 잘 실행된 것을 알수있죠?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9982643F5C7F0CD429&quot; alt=&quot;scripted2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-declarative-문법&quot;&gt;2. Declarative 문법&lt;/h2&gt;
&lt;p&gt;두번째는 Declarative 문법에서 실패를 무시하는 방법입니다.  &lt;br /&gt;
Declarative 문법은 Scripted과 달리 &lt;strong&gt;정적&lt;/strong&gt;인 문법입니다.  &lt;/p&gt;
&lt;h2 id=&quot;2-1-기본-사용법&quot;&gt;2-1. 기본 사용법&lt;/h2&gt;
&lt;p&gt;Declarative 문법은 딱딱 정해진 룰 내에서만 작동하는데, 실패난 경우 이를 잡아낼 수 있는 방법을 아직까지 찾지 못했습니다.  &lt;br /&gt;
그래서 위에서 사용한 방법처럼 &lt;code&gt;try ~ catch&lt;/code&gt;를 사용합니다.  &lt;/p&gt;&lt;p&gt;단, Declarative 문법의 경우 &lt;code&gt;try ~ catch&lt;/code&gt;를 사용하기 위해서는 &lt;code&gt;script&lt;/code&gt; 선언자가 필요합니다.  &lt;br /&gt;
위 선언자가 있으면 &lt;strong&gt;Declarative 문법내에서 Scripted 문법을 사용&lt;/strong&gt;할 수 있습니다.  &lt;/p&gt;&lt;p&gt;예를 들어 위에서 사용한 코드는 Declarative 문법에선 아래와 같이 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy language-groovy&quot;&gt;pipeline {
    agent any
    stages {
        stage(&quot;1&quot;) {
            steps {
                sh 'echo 111'
            }
        }
        stage(&quot;2&quot;) {
            steps {
                script {
                    try {
                        sh 'exit 1'
                    } catch (e) {
                        sh 'echo stage2 Fail!!'
                    }
                }
            }
        }
        stage(&quot;3&quot;) {
            steps {
                sh 'echo 333'
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;한번 실행해보면 정상적으로 &lt;code&gt;try~catch&lt;/code&gt;가 작동되는 것을 확인할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9950C1405C7F0CD426&quot; alt=&quot;declarative1&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-post-캐치가-가능한가&quot;&gt;2-2. POST 캐치가 가능한가&lt;/h3&gt;
&lt;p&gt;그럼 여기서 궁금한게 생기는데요.  &lt;br /&gt;
이렇게 &lt;code&gt;try~catch&lt;/code&gt;로 잡아낸다면 &lt;code&gt;post&lt;/code&gt;에서 &lt;code&gt;failure&lt;/code&gt;로 후처리가 가능할까요?  &lt;br /&gt;
한번 테스트해보겠습니다.  &lt;br /&gt;
코드는 아래와 같이 &lt;code&gt;post&lt;/code&gt;부분만 더 추가하였습니다.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy language-groovy&quot;&gt;pipeline {
    agent any
    stages {
        stage(&quot;1&quot;) {
            steps {
                sh 'echo 111'
            }
        }
        stage(&quot;2&quot;) {
            steps {
                script {
                    try {
                        sh 'exit 1'
                    } catch (e) {
                        sh 'echo stage2 Fail!!'
                    }
                }
            }
        }
        stage(&quot;3&quot;) {
            steps {
                sh 'echo 333'
            }
        }
    }
    post {
        failure {
            echo '&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; [Fail!!!!]'
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;일반적으로는 Job이 실패할 경우 &lt;code&gt;post&lt;/code&gt;영역의 &lt;code&gt;failure&lt;/code&gt; 코드가 실행됩니다.  &lt;br /&gt;
하지만 아래와 같이 &lt;code&gt;try ~ catch&lt;/code&gt;로 실패를 잡은 뒤 실행해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/990F4C415C7F0CD427&quot; alt=&quot;declarative2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;post의 failure는 작동하지 않는것&lt;/strong&gt;을 확인할 수 있습니다.  &lt;/p&gt;
&lt;h3 id=&quot;2-3-job-pipeline&quot;&gt;2-3. Job Pipeline&lt;/h3&gt;
&lt;p&gt;만약 젠킨스내의 다른 Job들을 실행해야 한다면, 아래와 같이 사용할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;step1, step2, step3 Job이 생성되어있어야만 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;groovy language-groovy&quot;&gt;pipeline {
    agent any
    stages {
        stage(&quot;1&quot;) {
            steps {
                build(job: 'step1')
            }
        }
        stage(&quot;2&quot;) {
            steps {
                script {
                    try {
                        build(job: 'step2')
                    } catch (e) {
                        sh 'echo stage2 Fail!!'
                    }
                }
            }
        }
        stage(&quot;3&quot;) {
            steps {
                build(job: 'step3')
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;수행해보면 실패처리가 잘된것을 확인할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B716445C7F0CD42B&quot; alt=&quot;declarative3&quot;&gt;&lt;/p&gt;&lt;p&gt;로그도 같이 확인해봅니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B603445C7F0CD42B&quot; alt=&quot;declarative4&quot;&gt;&lt;/p&gt;&lt;p&gt;여러 Job들이 순차적으로 일어나고 콘솔 역시 정상적으로 출력되는 것을 확인할 수 있습니다.  &lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/409&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>DevOps</category>
<category>DEC</category>
<category>Declarative</category>
<category>fail ignore</category>
<category>Jenkins</category>
<category>Pipeline</category>
<category>try catch</category>
<category>젠킨스</category>
<category>파이프라인</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/409</guid>
<comments>https://jojoldu.tistory.com/409#entry409comment</comments>
<pubDate>Wed, 06 Mar 2019 08:57:09 +0900</pubDate>
</item>
<item>
<title>SI 개발자의 ‘험난하지만 즐거운’ 스타트업 적응기</title>
<link>https://jojoldu.tistory.com/408</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;OKKY에서 진행한 스타트업 취업 시리즈 3탄!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://okky.kr/article/320556&quot;&gt;SI 벗어나기 세미나(2016년)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://okky.kr/article/394551&quot;&gt;OKKY 취업준비생 Meetup 참석 후기!(2017년)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SI 개발자의 ‘험난하지만 즐거운’ 스타트업 적응기 세미나에 다녀왔습니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://okky.kr/article/542938&quot;&gt;세미나 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;저는 7시 15분쯤 도착했는데요.  &lt;br /&gt;
이미 많은 분들이 자리를 잡고 두번째 연사이신 오종인님의 이야기를 듣고 있던 것을 보고 진짜 인기있는 주제임을 실감했습니다.  &lt;/p&gt;
&lt;p&gt;아무래도 평일 저녁이라 신청하지 못하신 분들도 계실것 같습니다.  전체 내용을 담진 못했지만, 그래도 어떤 발표와 질문이 오고갔었는지 궁금하셨던 분들은 참고해보세요 :)&lt;/p&gt;
&lt;h2 id=&quot;1-si-인프라-시스템-개발자의-서비스-개발사-적응기&quot;&gt;1. SI 인프라 시스템 개발자의 서비스 개발사 적응기&lt;/h2&gt;
&lt;p&gt;연사소개&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9957674C5C751C592D&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-발표&quot;&gt;1-1. 발표&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서비스 개발자로 느낀점&lt;ul&gt;
&lt;li&gt;답답한점&lt;/li&gt;
&lt;li&gt;요구 사항이 없다&lt;/li&gt;
&lt;li&gt;계획은 없다.&lt;/li&gt;
&lt;li&gt;상황에 따라 변한다&lt;/li&gt;
&lt;li&gt;검증팀이 없다&lt;/li&gt;
&lt;li&gt;좋은점&lt;/li&gt;
&lt;li&gt;개발자는 &lt;strong&gt;개발도 잘해야&lt;/strong&gt; 한다&lt;/li&gt;
&lt;li&gt;고객사가 아닌 &lt;strong&gt;고객이 최우선&lt;/strong&gt;이다&lt;/li&gt;
&lt;li&gt;배포는 공지후 주간 작업&lt;/li&gt;
&lt;li&gt;자택, 휴가 등 눈치 없는 근무 환경&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;서비스 개발을 하고 싶다면 마인드부터..&lt;ul&gt;
&lt;li&gt;수동적인 자세 -&amp;gt; 능동적인 자세&lt;/li&gt;
&lt;li&gt;실시간 장애 대응&lt;/li&gt;
&lt;li&gt;시장은 우리 생각대로 따라가 주지 않는다.&lt;/li&gt;
&lt;li&gt;비지니스를 먼저 이해해야 능동적으로 일을 할 수 있었음&lt;/li&gt;
&lt;li&gt;생존이 우선이다.&lt;ul&gt;
&lt;li&gt;하고 싶은 일보다 &lt;strong&gt;필요한 일을 한다&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;고객 입장&lt;/strong&gt;에서 생각한다.&lt;/li&gt;
&lt;li&gt;지금일이 앞으로 &lt;strong&gt;자신의 연봉을 책임진다&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;스타트업 회사는 인력 Pool이 넉넉하지 않다.&lt;ul&gt;
&lt;li&gt;다양한 요구는 나한테 기회&lt;ul&gt;
&lt;li&gt;데이터 분석, 포스 설치&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tool 적극적 활용&lt;ul&gt;
&lt;li&gt;사내 위키&lt;/li&gt;
&lt;li&gt;슬랙 알람&lt;/li&gt;
&lt;li&gt;업무는 지라&lt;/li&gt;
&lt;li&gt;형상 관리는 Bitbucket&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SI 회사 업무가 서비스회사에서 필요한 경우가 있음&lt;ul&gt;
&lt;li&gt;정산 업무&lt;/li&gt;
&lt;li&gt;데이터가 틀린데, 왜 틀리죠?&lt;/li&gt;
&lt;li&gt;분석하고 검증하는데 도움이 되었음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;새로운 시작&lt;ul&gt;
&lt;li&gt;다시 취업전선으로 뛰어들며 만난 상황들&lt;ul&gt;
&lt;li&gt;A-Z까지 개발 가능하세요?&lt;/li&gt;
&lt;li&gt;개발자 1명인데 CTO 가능하세요?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;취업에서 얘기한 메리트&lt;ul&gt;
&lt;li&gt;저는 서비스 만들어 봤습니다.&lt;/li&gt;
&lt;li&gt;500만 회원 서비스 다루어 봤습니다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;현재 회사는 내가 원하는 모습과 비슷하여 합류&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SI회사보다 서비스 개발자가 더 낫다는이야기는 아님&lt;ul&gt;
&lt;li&gt;회사에 도움이 되는 개발자가 좋은 개발자&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;어제보다 좋은 오늘을 생각하며 일하는 중&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-스타트업-생생-뒷담화&quot;&gt;2. 스타트업 생생 뒷담화&lt;/h2&gt;
&lt;p&gt;연사소개&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DB81455C751C5933&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-1-발표&quot;&gt;2-1. 발표&lt;/h3&gt;
&lt;p&gt;&quot;스타트업 생생 뒷담화&quot;를 할려고 했지만, 설문조사의 결과를 보니 별로 관심 없어 보임.  &lt;br /&gt;
그래서 &lt;strong&gt;설문 조사에 나온 질문을 통해 Q &amp;amp; A를 진행&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;q--a&quot;&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;Q. 서비스 회사의 특성을 설명해주셨는데, 서비스업의 문화 때문인지 규모가 커서 그런것인지?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조연종&lt;ul&gt;
&lt;li&gt;서비스가 시작하는 단계를 발표함&lt;/li&gt;
&lt;li&gt;이후 어느정도 규모가 커지면 이렇게 급하게 일을 진행하진 않음&lt;/li&gt;
&lt;li&gt;안정화 단계에 들어가면 코드리뷰 등을 통해 서비스 안정화를 진행하게 됨&lt;/li&gt;
&lt;li&gt;현재 우리 서비스가 어느 단계에 있냐에 따라 달라질것 같음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 요구 사항이 명확하지 않고 소원을 바라는걸 보게 되는데, 스타트업도 실제로 그런지?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조연종&lt;ul&gt;
&lt;li&gt;갑이 요구하는 것은 어떻게든 쫓아가면서 물어보면 명확하게 정의할 수 있음&lt;/li&gt;
&lt;li&gt;하지만 서비스의 고객의 요구는 명확하지 않음&lt;/li&gt;
&lt;li&gt;어떻게 쫓아갈 수 없어서 항상 물명확함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 스타트업 및 B2C 개발자에 관해 알고 싶습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;김수보&lt;ul&gt;
&lt;li&gt;SI 현장은 분업화&lt;/li&gt;
&lt;li&gt;스타트업은 그렇지 않음. 필요한 일을 해야함&lt;/li&gt;
&lt;li&gt;익혀야할 스킬들의 차이가 있음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;SI를 하다가 임베디드 소프트웨어 회사에서 넘어감&lt;/li&gt;
&lt;li&gt;스타트업 및 B2C 서비스는 영업이 일을 가져옴&lt;/li&gt;
&lt;li&gt;스타트업 및 B2C 서비스에 점점 좋은 개발 프로세스가 생기고 있음 (코드리뷰 등)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 서비스 기업과 SI 기업에서 개발자로 일할때 차이를 알고 싶습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오종인&lt;ul&gt;
&lt;li&gt;두부자르듯이 구분지울수 있는것은 아님&lt;/li&gt;
&lt;li&gt;스타트업들이 개발자가 없어 SI 회사에 일을 맡길때가 있고, SI 외주를 하는 스타트업이 있을 수도 있음    &lt;/li&gt;
&lt;li&gt;어떤건 이렇다라고 확실하게 얘기할수는 없다는 것을 먼저 얘기함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;요즘 스타트업 동네는 개발자들이 정말 부족함&lt;/li&gt;
&lt;li&gt;그래서 SI에 맡기는 일이 종종 있음&lt;/li&gt;
&lt;li&gt;기술력이 있는 SI회사는 스타트업들의 외주를 받아서 함&lt;/li&gt;
&lt;li&gt;어떤 SI회사는 정기적으로 새로운 기술을 연습하는 운동을 함&lt;/li&gt;
&lt;li&gt;이것저것 많은것을 해야하는게 스타트업이라서 역량을 키우는데는 좋다고 생각함&lt;/li&gt;
&lt;li&gt;SI는 한회사라고 생각해야하고, 스타트업은 &lt;strong&gt;업계 전체에 취업&lt;/strong&gt;한다는 마음으로 봐야함&lt;ul&gt;
&lt;li&gt;스타트업이 1만개라면 나는 1만개 회사에 취업하는 것&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;사실 요즘은 개발자가 뭘 하든 굶어죽진 않는 환경&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;김수보&lt;ul&gt;
&lt;li&gt;서비스 기업은 SI회사보다는 전망이 밝은 편&lt;/li&gt;
&lt;li&gt;스타트업은 스톡옵션이 있으니 대박날 확률이 어쨌든 존재하는 편&lt;/li&gt;
&lt;li&gt;SI회사는 일감만 존재한다면 계속 일할 수 있음&lt;/li&gt;
&lt;li&gt;창업 도전은 절대 사라지지 않음&lt;ul&gt;
&lt;li&gt;창업의 아이디어를 만들어 달라는 요청은 계속 있을것&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;나이 60넘어서는 개발이 아닌 다른일을 하겠다고 하면 SI도 나쁘지 않음&lt;/li&gt;
&lt;li&gt;실리콘벨리 도전을 하고싶다면 서비스 기업으로 가야함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 스타트업 취업할때 투자처가 안정적인지 어떻게 확인하는지?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;당연히 질문해도 되는 문제&lt;/li&gt;
&lt;li&gt;요즘은 그런 내용을 확인해볼 수 있는 사이트도 많음&lt;/li&gt;
&lt;li&gt;인터넷에 &quot;무슨무슨 회사 투자&quot; 로만 검색해도 상당히 자료가 나옴&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. SI와 스타트업에는 어떤 사람이 어울릴지?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조연종&lt;ul&gt;
&lt;li&gt;신기술에 대해 거부감없이 도입할 수 있는 사람이 스타트업에 어울림&lt;/li&gt;
&lt;li&gt;예로 SI 개발자분들 중에 엘라스틱을 써보신 분들은 많이 없음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;개발자들을 보면, 젊을때는 호기심이 많아 공부하기엔 스타트업이 좋음&lt;/li&gt;
&lt;li&gt;새로운 기술을 봤을때 가슴이 뛰는 시기가 있음&lt;/li&gt;
&lt;li&gt;그럴때 스타트업으로 가야함&lt;/li&gt;
&lt;li&gt;SI에서는 사실 그럴 확률이 낮음&lt;/li&gt;
&lt;li&gt;SI회사를 다니는 후배나 학생들을 보면 그 회사에 매몰되는 경우를 자주 봄&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 이직 노하우를 배우고 싶습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오종인&lt;ul&gt;
&lt;li&gt;이브레인을 통하세요.&lt;/li&gt;
&lt;li&gt;컨설팅까지는 무료이니 한번 만나보시길&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;김수보&lt;ul&gt;
&lt;li&gt;이사철에 이사해라&lt;/li&gt;
&lt;li&gt;봄가을에 취업하기 좋음&lt;/li&gt;
&lt;li&gt;스타트업/서비스 기업으로 가실땐 면접에서 &lt;strong&gt;많이 물어보라&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;조연종&lt;ul&gt;
&lt;li&gt;다 개발할줄 알아야 이직할 수 있음&lt;/li&gt;
&lt;li&gt;내가 갖고 있는 기술이 서비스에 어떤 도움이 되는지 어필할것&lt;/li&gt;
&lt;li&gt;현재 속해 있는 회사에서 했던일/잘했던일/못했던 일들을 정리할 것&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;현재 스타트업 시장은 개발자가 갑&lt;/li&gt;
&lt;li&gt;면접관들은 여러분이 &lt;strong&gt;얼마나 빨리 배우는지&lt;/strong&gt;를 보고 싶어함&lt;/li&gt;
&lt;li&gt;알고리즘 공부법&lt;ul&gt;
&lt;li&gt;쉬운 문제는 무조건 풀어봐야함&lt;/li&gt;
&lt;li&gt;어려운 문제는 답을 빨리 보고 문제 푸는 훈련을 하면 됨&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;요즘은 젊은 분들이 이직기를 정말 많이 씀&lt;ul&gt;
&lt;li&gt;그분들의 이직기를 보면 도움이 많이 됨&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;오종인님의 쉬어가는 스타트업 이야기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SI 회사 vs 스타트업&lt;ul&gt;
&lt;li&gt;SI회사는 일반적으로 오라클&lt;/li&gt;
&lt;li&gt;스타트업은 MySQL&lt;/li&gt;
&lt;li&gt;돈으로 해결할 것이냐, 내가 해결할 것이냐&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;스타트업?&lt;ul&gt;
&lt;li&gt;불확실한 환경과&lt;/li&gt;
&lt;li&gt;제한된 자원을 바탕으로&lt;/li&gt;
&lt;li&gt;빠른 성장을 이루어야 하는&lt;/li&gt;
&lt;li&gt;혁신기업&lt;/li&gt;
&lt;li&gt;혹독한 환경에서&lt;/li&gt;
&lt;li&gt;전문성까지 갖춰야 하는&lt;/li&gt;
&lt;li&gt;인적자본 중심의 지식집약적인 조직&lt;/li&gt;
&lt;li&gt;자유롭고 재미있는 부분은 극히 일부분&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;성공에 대한 준비와 실패 대비 양쪽을 해야함&lt;ul&gt;
&lt;li&gt;간단하게 구성했다가 서비스가 너무 잘되서 서버가 폭파한다면?&lt;/li&gt;
&lt;li&gt;서비스가 잘될거라 예상하고 대규모 아키텍처를 구성했더니 고객은 없어서 서버비용이 너무 많아지면?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;애자일&lt;/li&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;기술 동냥&lt;ul&gt;
&lt;li&gt;모든걸 다 알수는 없음&lt;/li&gt;
&lt;li&gt;많이 질문 할 것&lt;/li&gt;
&lt;li&gt;주변에 잘하는 사람들을 많이 둘것&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 취준생으로 스타트업 지원 준비사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;신입을 필요로 하는 문화는 조금씩 사라지는 중&lt;/li&gt;
&lt;li&gt;신입이 아닌 취업을 해야함&lt;/li&gt;
&lt;li&gt;개인 프로젝트를 해야함&lt;/li&gt;
&lt;li&gt;학생들에게 이 이야기를 하면 &lt;strong&gt;기획&lt;/strong&gt;을 하고 있음&lt;ul&gt;
&lt;li&gt;그럴 필요 없음&lt;/li&gt;
&lt;li&gt;잘돌아가는 것을 만들필요가 있음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;어느 스타트업이 좋은지 모르기 때문에 커뮤니티에 참가해야해서 사람들이 어떻게 얘기하는지 들어봐야함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. Spring 개발자로 회사에 왔는데, 관계 없는 다른 일을 하고 있으면 이직시에 도움이 되나?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;김수보&lt;ul&gt;
&lt;li&gt;회사 생활 대부분이 이렇게 우당탕탕 지나감&lt;/li&gt;
&lt;li&gt;같이 고생하는 사람들이 있으면 무엇이든 배울게 있음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이민석&lt;ul&gt;
&lt;li&gt;지금 하고 있는 일을 블로그에 쓰라&lt;/li&gt;
&lt;li&gt;기술적으로 정리&lt;/li&gt;
&lt;li&gt;요즘은 깃헙에 블로그를 만들어서 쓰시는 분들이 많음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. 질좋은 개발, 협업의 방향&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;김수보&lt;ul&gt;
&lt;li&gt;SI하다가 서비스에 가면 충격을 받음&lt;/li&gt;
&lt;li&gt;체계가 없었음&lt;/li&gt;
&lt;li&gt;대신 상대가 뭘 하는지 알아야 의사소통이 가능 함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. SM 고급 운영과 스타트업의 과장자리 중 어디가 나을까요?  &lt;br /&gt;
월급 차이는 100~200이 차이납니다.  &lt;br /&gt;
초기 안정화 되지 않은 스타트업은 SI와 마찬가지로 야근을 많이 하는데, 그럴꺼면 SM 고급 운영 자리가 더 낫지 않나요?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;김수보&lt;ul&gt;
&lt;li&gt;아마 이 질문에 대한 고민을 가장 먼저 하고 있는 세대가 나인것 같음&lt;/li&gt;
&lt;li&gt;IT 시장엔 크게 2가지가 있음&lt;ul&gt;
&lt;li&gt;기술노동과 제품&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;기술 노동은 나이 먹으면 못함&lt;ul&gt;
&lt;li&gt;나이 먹었는데 과연 젊은 친구들과 비교해서 빨리 배우고, 빨리 개발할 수 있을까?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SI는 분업화가 되어 있어 언젠간 시장에서 찾지 않고, 은퇴할 수 밖에 없음&lt;/li&gt;
&lt;li&gt;나이 &lt;strong&gt;70까지 꾸준히 월 300~400벌어야만&lt;/strong&gt; 하면 어떡하지?&lt;ul&gt;
&lt;li&gt;제품을 만들어서 팔아야함&lt;/li&gt;
&lt;li&gt;그 제품은 게임일수도 있고, 웹서비스일수도 있음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;서비스를 만들어 놀아도 돈이 들어올 수 있는 구조를 만들어야함&lt;/li&gt;
&lt;li&gt;어느게 더 낫다고 볼 순 없음&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;오종인&lt;ul&gt;
&lt;li&gt;개발에 욕심이 있다면 스타트업으로 가야함&lt;/li&gt;
&lt;li&gt;그리고 실제로 스타트업이 더 많은 연봉을 제시할때도 있음 (무조건은 아님)&lt;/li&gt;
&lt;li&gt;4대 보험 등을 비롯한 복지로 들어가는 비용까지 고려하면 100~200차이로 프리하면 안됨&lt;ul&gt;
&lt;li&gt;300이상 차이나면 고려해볼까말까함&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pay로 비교대상은 아님&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/408&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>세미나</category>
<category>OKKY</category>
<category>SI개발자</category>
<category>개발자</category>
<category>서비스회사</category>
<category>스타트업</category>
<category>커리어 변경</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/408</guid>
<comments>https://jojoldu.tistory.com/408#entry408comment</comments>
<pubDate>Tue, 26 Feb 2019 20:00:42 +0900</pubDate>
</item>
<item>
<title>@Reuqest Body에서는 Setter가 필요없다?</title>
<link>https://jojoldu.tistory.com/407</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;회사에서 근무하던중 새로오신 신입 개발자분이 저에게 하나의 질문을 했습니다.  &lt;br /&gt;&lt;b&gt;
POST 요청시에 &lt;code&gt;Setter&lt;/code&gt;가 필요없는것 같다고.  &lt;/b&gt;&lt;/p&gt;&lt;p&gt;여태 제가 알던것과는 달라서 어떻게 된 일인지 궁금했습니다.  &lt;br /&gt;
정말 POST 요청시에는 Setter가 필요없을까요?  &lt;br /&gt;
그럼 GET 요청시에는 Setter가 필요할까요?  &lt;/p&gt;&lt;p&gt;한번 확인해보겠습니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;모든 코드는 &lt;a href=&quot;https://github.com/jojoldu/blog-code/tree/master/spring-boot-tips&quot;&gt;Github&lt;/a&gt;에 있으니 참고하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-post-요청-테스트&quot;&gt;1. Post 요청 테스트&lt;/h2&gt;
&lt;p&gt;첫번째로 POST 요청시 Setter가 필요없는지 먼저 테스트해봅니다.  &lt;br /&gt;
테스트해볼 RequestDto는 아래와 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Getter
@ToString
@NoArgsConstructor
public class RequestSetterDto {
    private String name;
    private Long amount;

    @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;Asia/Seoul&quot;)
    private LocalDate date;

    private RequestType requestType;

    @Builder
    public RequestSetterDto(@Nonnull String name, @Nonnull Long amount) {
        this.name = name;
        this.amount = amount;
    }

    public RequestSetterDto(String name, Long amount, LocalDate date, RequestType requestType) {
        this.name = name;
        this.amount = amount;
        this.date = date;
        this.requestType = requestType;
    }

    @AllArgsConstructor
    public enum RequestType {
        GET (&quot;get&quot;),
        POST (&quot;post&quot;);

        private String method;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다양한 타입을 테스트해보기 위해 &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;LocalDate&lt;/code&gt;, &lt;code&gt;Enum&lt;/code&gt; 4가지 타입을 모두 사용했습니다.  &lt;br /&gt;
보시는것처럼 &lt;strong&gt;Setter는 선언하지 않았습니다&lt;/strong&gt;  &lt;/p&gt;&lt;p&gt;그리고 이 DTO를 수신할 Controller를 생성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Slf4j
@RestController
public class RequestDtoSetterController {

    @PostMapping(&quot;/request/setter&quot;)
    public RequestSetterDto postRequestSetter (@RequestBody RequestSetterDto requestSetterDto) {
        log.info(requestSetterDto.getName() + &quot; : &quot; + requestSetterDto.getAmount());

        return requestSetterDto;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자 그럼 이 코드들을 테스트할 테스트 코드를 작성해보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(RequestDtoSetterController.class)
public class RequestDtoSetterControllerTest {

    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void RequestBody에서는_setter가_없어도된다() throws Exception {
        String content = objectMapper.writeValueAsString(new RequestSetterDto(&quot;jojoldu&quot;, 1000L));
        mvc
                .perform(post(&quot;/request/setter&quot;)
                        .content(content)
                        .contentType(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(content().json(content));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Post로 Request Dto에 값을 채워 보냈으니&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setter가 없어도 되면 정상적으로 값이 채워져서 테스트가 통과될것이며&lt;/li&gt;
&lt;li&gt;Setter가 있어야만 하면 값이 &lt;code&gt;null&lt;/code&gt;로 채워져 테스트가 실패할 것입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;테스트를 돌려보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9958B1375C751AED23&quot; alt=&quot;post1&quot;&gt;&lt;/p&gt;&lt;p&gt;Setter없이 성공적으로 값이 들어가는 것을 확인할 수 있습니다.  &lt;br /&gt;
이게 어떻게 된 일인지 &lt;code&gt;@RequestBody&lt;/code&gt; 어노테이션을 시작으로 코드를 탐색하기 시작했습니다.  &lt;/p&gt;&lt;p&gt;이 글을 보고 계신 대부분의 개발자분들은 아시겠지만, Spring 에서 JSON 형변환을 담당하는 것이 &lt;code&gt;Jackson2HttpMessageConverter&lt;/code&gt;입니다.  &lt;br /&gt;
즉, &lt;code&gt;@RequestBody&lt;/code&gt;로 JSON 데이터가 넘어오면 이 JSON을 Java Object로 변환은 &lt;code&gt;Jackson2HttpMessageConverter&lt;/code&gt; 에서 해줍니다.  &lt;/p&gt;&lt;p&gt;코드를 조금만 까보시면 아래와 같이 &lt;code&gt;read&lt;/code&gt; 메소드에서 데이터를 생성하는 것을 볼 수 있는데요.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F1883A5C751AEE22&quot; alt=&quot;post2&quot;&gt;&lt;/p&gt;&lt;p&gt;이때 Converter에서는 &lt;code&gt;ObjectMapper&lt;/code&gt;를 사용해서 Object로 전환해줍니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992304475C751AED2D&quot; alt=&quot;post3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;ObjectMapper&lt;/code&gt;가 전환을 해주니, &lt;strong&gt;Setter가 없어도 값이 할당&lt;/strong&gt;됩니다.  &lt;/p&gt;&lt;p&gt;실제로 그런지 확인해볼까요?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A0E24C5C751AEE27&quot; alt=&quot;post4&quot;&gt;&lt;/p&gt;&lt;p&gt;ObjectMapper로 Setter없이 &lt;code&gt;readValue&lt;/code&gt;를 했더니 값이 제대로 할당된 것을 확인할 수 있습니다.  &lt;/p&gt;&lt;p&gt;즉, 정리하자면 &lt;strong&gt;JSON으로 데이터가 넘어올 경우 Jackson2HttpMessageConverter의 ObjectMapper를 사용하여 Setter가 없어도 값이 할당된다&lt;/strong&gt;가 됩니다.  &lt;/p&gt;&lt;p&gt;이제 Post용 DTO에서는 더이상 Setter를 쓸 필요가 없겠죠?&lt;/p&gt;
&lt;h2 id=&quot;2-get-요청-테스트&quot;&gt;2. Get 요청 테스트&lt;/h2&gt;
&lt;p&gt;그럼 Jackson2HttpMessageConverter를 사용하지 않는 경우엔 어떻게 될까요?  &lt;/p&gt;&lt;p&gt;Get 메소드의 DTO에서도 Setter가 필요없는지 확인해보겠습니다.  &lt;/p&gt;&lt;p&gt;DTO는 1번째와 같은 DTO를 사용하며, Controller는 아래와 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @GetMapping(&quot;/request/setter&quot;)
    public RequestSetterDto getRequestSetter (RequestSetterDto requestSetterDto) {
        log.info(requestSetterDto.getName() + &quot; : &quot; + requestSetterDto.getAmount());

        return requestSetterDto;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이를 테스트할 코드는 아래와 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;    @Test
    public void Get에서는_setter가_없어도된다() throws Exception {
        String content = objectMapper.writeValueAsString(new RequestSetterDto(&quot;jojoldu&quot;, 1000L,  LocalDate.of(2019,2,22), RequestSetterDto.RequestType.GET));
        MultiValueMap&amp;lt;String, String&amp;gt; params = new LinkedMultiValueMap&amp;lt;&amp;gt;();
        params.put(&quot;name&quot;, Arrays.asList(&quot;jojoldu&quot;));
        params.put(&quot;amount&quot;, Arrays.asList(&quot;1000&quot;));
        params.put(&quot;date&quot;, Arrays.asList(&quot;2019-02-22&quot;));
        params.put(&quot;requestType&quot;, Arrays.asList(&quot;GET&quot;));

        mvc
                .perform(get(&quot;/request/setter&quot;)
                        .params(params)
                        .contentType(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(content().json(content));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;테스트를 수행해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99AEE1465C751AEE35&quot; alt=&quot;get1&quot;&gt;&lt;/p&gt;&lt;p&gt;테스트가 실패하는 것을 확인할 수 있습니다.  &lt;/p&gt;&lt;p&gt;자 그럼 Get요청은 어떻게 데이터가 할당되는지 확인해보겠습니다.  &lt;/p&gt;&lt;p&gt;Get 요청의 경우 JSON 데이터가 아닌 &lt;strong&gt;Query Parameter&lt;/strong&gt;입니다.  &lt;br /&gt;
그래서 &lt;code&gt;Jackson2HttpMessageConverter&lt;/code&gt;를 사용하지 않는데요.  &lt;br /&gt;
이럴 경우 Spring에서는 &lt;code&gt;WebDataBinder&lt;/code&gt;를 사용합니다.  &lt;br /&gt;
이 클래스를 차근차근 따라가보면 아래와 같은 코드를 확인할 수 있습니다.  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9991184A5C751AED29&quot; alt=&quot;get2&quot;&gt;&lt;/p&gt;&lt;p&gt;기본값으로 값을 할당하는 방법이 &lt;strong&gt;Java Bean&lt;/strong&gt; 방식이라고 합니다.  &lt;br /&gt;
Java Bean이라 하면 &lt;strong&gt;Setter&lt;/strong&gt;를 통해서 값을 할당하는것을 얘기하죠?  &lt;br /&gt;
즉, 별다른 설정이 없다면 Spring 에서는 &lt;code&gt;WebDataBinder&lt;/code&gt;의 &lt;strong&gt;기본 값 할당 방법인 Java Bean&lt;/strong&gt; 방식을 사용하니 Setter가 없으면 작동하지 않습니다.  &lt;/p&gt;
&lt;h2 id=&quot;3-get에서-setter-사용하지-않기&quot;&gt;3. Get에서 Setter 사용하지 않기?&lt;/h2&gt;
&lt;p&gt;위 2번에서 나온 문제를 해결하여 &lt;strong&gt;Get 요청시에도 Setter를 안써도 되는 방법&lt;/strong&gt;이 있을까요?  &lt;/p&gt;&lt;p&gt;정답은 &lt;code&gt;initBeanPropertyAccess&lt;/code&gt;아래에 있습니다.  &lt;br /&gt;
바로 &lt;code&gt;initDirectFieldAccess&lt;/code&gt;를 사용하는 것인데요.  &lt;br /&gt;
해당 메소드를 사용하면 값 할당 방법은 &lt;strong&gt;setter가 아닌 Field에 직접 접근&lt;/strong&gt;합니다.  &lt;/p&gt;&lt;p&gt;사용하는 방법은 간단합니다.  &lt;br /&gt;
전체 Controller에서 사용할 수 있게 &lt;code&gt;ControllerAdvice&lt;/code&gt;에 선언하시면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;@Slf4j
@ControllerAdvice
public class WebControllerAdvice {

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.initDirectFieldAccess();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 변경후 다시 Get 테스트를 수행해보면!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9999E6385C751AED22&quot; alt=&quot;get3&quot;&gt;&lt;/p&gt;&lt;p&gt;성공적으로 통과하는 것을 확인할 수 있습니다.&lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/407&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>get</category>
<category>model attribute</category>
<category>post</category>
<category>requestBody</category>
<category>setter</category>
<category>Spring</category>
<category>스프링</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/407</guid>
<comments>https://jojoldu.tistory.com/407#entry407comment</comments>
<pubDate>Tue, 26 Feb 2019 19:54:38 +0900</pubDate>
</item>
<item>
<title>내가 추천하는 크롬 익스텐션 10선</title>
<link>https://jojoldu.tistory.com/406</link>
<description>&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;주변에서 자주 듣는 질문중 하나가 크롬 익스텐션 추천입니다.  &lt;br /&gt;개인적으로 주변 개발자분들께 추천하는 플러그인들을 정리해보았습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-black-menu&quot;&gt;1. Black Menu&lt;/h2&gt;
&lt;p&gt;첫번째로 추철할 메뉴는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/black-menu-for-google/eignhdfgaldabilaaegmdfbajngjmoke?hl=ko&quot;&gt;Black Menu&lt;/a&gt;입니다.  &lt;br /&gt;
기획/마케팅 직군분들은&amp;nbsp;많이들 아실텐데요.&lt;br /&gt;
개발직군에선 그렇게 유명하지 않아서 첫번째로 추천드리게 되었습니다.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Google의 모든 제품을 화면내에서 바로 사용&lt;/strong&gt;할 수 있습니다&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994F5E455C6A95D71A&quot; alt=&quot;1-1&quot;&gt;&lt;/p&gt;&lt;p&gt;저 같은 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구글 번역을 바로 사용할때&lt;/li&gt;
&lt;li&gt;GA를 보고 싶을때&lt;/li&gt;
&lt;li&gt;구글 애드센스를 보고 싶을때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등 &lt;strong&gt;별도의 창을 열지않아도&lt;/strong&gt; 바로 실행해볼 수 있어 적극 사용중입니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C00A4A5C6A95D711&quot; alt=&quot;1-2&quot;&gt;&lt;/p&gt;&lt;p&gt;사내 오피스가 구글 드라이브인 분들이라면 더더욱 많은 기능을 편하게 쓰실 수 있을 것 같습니다.&lt;/p&gt;
&lt;h2 id=&quot;2-edit-this-cookie&quot;&gt;2. Edit this Cookie&lt;/h2&gt;
&lt;p&gt;두번째는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg&quot;&gt;Edit This Cookie&lt;/a&gt; 입니다.&lt;/p&gt;&lt;p&gt;편하게 &lt;strong&gt;쿠키 변조, 삭제, 등록&lt;/strong&gt;을 해주는 플러그인입니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C4663A5C6A95D72C&quot; alt=&quot;2-1&quot;&gt;&lt;/p&gt;&lt;p&gt;크롬이나 파이어폭스에서 쿠키를 변조하는것은 많이 불편합니다.&lt;br /&gt;
이 부분을 아주 쉽게 해결해주기 때문에 웹 개발자라면 적극 사용하시길 추천합니다.&lt;/p&gt;&lt;p&gt;저 같은 경우 이전 회사에서 기획자분들께 테스트로 쿠키 변조/삭제가 필요할때 이 플러그인을 소개시켜드려 덕을 많이 봤습니다.&lt;/p&gt;
&lt;h2 id=&quot;3-authenticator&quot;&gt;3. Authenticator&lt;/h2&gt;
&lt;p&gt;3번째는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai?hl=ko&quot;&gt;Authenticator&lt;/a&gt; 입니다.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS MFA&lt;/strong&gt;를 사용하시는 분들의 필수 플러그인입니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991B7F445C6A95D70D&quot; alt=&quot;3-1&quot;&gt;&lt;/p&gt;&lt;p&gt;AWS의 계정에 MFA를 적용하면 보안성이 높아지지만, 매번 OTP 번호를 발급받아야하는데요.&lt;br /&gt;
휴대폰 OTP로 하기엔 불편함이 많습니다.&lt;br /&gt;
크롬 내에서 바로 번호를 발급 받을 수 있어 편하게 MFA를 사용할 수 있습니다.&lt;/p&gt;&lt;p&gt;AWS를 사용하시는 분들의 필수 플러그인이라고 생각합니다.&lt;/p&gt;
&lt;h2 id=&quot;4-json-viewer&quot;&gt;4. JSON Viewer&lt;/h2&gt;
&lt;p&gt;4번째는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=ko&quot;&gt;JSON Viwer&lt;/a&gt;입니다.&lt;/p&gt;&lt;p&gt;아래와 같이 브라우저 내에서 &lt;strong&gt;JSON을 포맷팅&lt;/strong&gt;해서 보여주는 플러그인입니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D4073E5C6A95D815&quot; alt=&quot;4-1&quot;&gt;&lt;/p&gt;&lt;p&gt;테마도 여러개라 저 같은 경우 Daracula를 사용해서 IntelliJ와 유사한 느낌으로 쓰고 있습니다.&lt;br /&gt;
최근엔 IntelliJ의 &lt;a href=&quot;https://jojoldu.tistory.com/266&quot;&gt;.http&lt;/a&gt;를 사용하기 때문에 사용할 일이 거의 없지만 브라우저에서 JSON 데이터를 확인할 일이 있으신 분들은 설치해서 사용해보시길 추천합니다.&lt;/p&gt;
&lt;h2 id=&quot;5-livereload&quot;&gt;5. LiveReload&lt;/h2&gt;
&lt;p&gt;5번째는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=ko&quot;&gt;LiveReload&lt;/a&gt;입니다.  &lt;/p&gt;&lt;p&gt;프론트엔드 개발시 빠질수 없는 플러그인인데요.  &lt;br /&gt;
웹 프론트 개발시 수정사항을 자동으로 반영해주는 역할을 합니다.  &lt;br /&gt;
(실제로는 새로고침을 자동으로 해주는거나 마찬가지지만..)  &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993211395C6A95D83C&quot; alt=&quot;5-1&quot;&gt;&lt;/p&gt;&lt;p&gt;좋은 점은 Freemarker와 같은 서버 템플릿 엔진 역시 Devtools가 있으면 적용할 수 있습니다.&lt;br /&gt;
개인적으로 프론트엔드 개발시에 적극적으로 사용하는 플러그인이라 많은 분들이 사용해보셨으면 합니다.&lt;/p&gt;&lt;p&gt;Spring Boot + Devtools를 사용하시는 분들은 아래의 링크를 참고해서 적극 사용해보세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://haviyj.tistory.com/11&quot;&gt;Spring Boot에서 적용방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-tooltip-dictionary&quot;&gt;6. Tooltip Dictionary&lt;/h2&gt;
&lt;p&gt;6번째 플러그인은 &lt;a href=&quot;https://chrome.google.com/webstore/detail/tooltip-dictionary-englis/hcidimjcobcnahiceedndikkenbibpop&quot;&gt;Tooltip Dictionary&lt;/a&gt; 입니다.&lt;/p&gt;&lt;p&gt;크롬내에서 마우스가 있는 &lt;strong&gt;포커스 영역의 단어를 번역&lt;/strong&gt;해줍니다. &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B4974B5C6A95D811&quot; alt=&quot;6-1&quot;&gt;&lt;/p&gt;&lt;p&gt;기술 문서를 볼때 전체 영역의 번역이 아닌 부분 번역으로 읽고싶을때 아주 유용한 플러그인입니다.&lt;br /&gt;
개발자분들은 영문 기술 문서를 볼일이 많기 때문에 정말 유용하게 쓰실 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;7-sourcegraph&quot;&gt;7. Sourcegraph&lt;/h2&gt;
&lt;p&gt;7번째 추천 플러그인은 &lt;a href=&quot;https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack&quot;&gt;Sourcegraph&lt;/a&gt; 입니다.&lt;/p&gt;&lt;p&gt;Github에서 코드를 볼때 아주 유용하게 사용할 수 있는데요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 코드(ex: 클래스등)가 선언된 곳으로 바로 이동하고 싶을때&lt;/li&gt;
&lt;li&gt;해당 코드(ex: 클래스등)를 사용하는 곳으로 바로 이동하고 싶을때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;바로 이동하는 기능을 지원합니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C466465C6A95D70C&quot; alt=&quot;7-1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99869C4D5C6A95D714&quot; alt=&quot;7-2&quot;&gt;&lt;/p&gt;&lt;p&gt;젯브레인의 코드리뷰 전용 Upsource 만큼 파워풀한 기능을 지원하진 않지만, 위 플러그인으로 최대한 유사하게 사용해볼 수 있으니 Github 사용자들은 꼭 설치하시길 바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;꼭 Github 사용자가 아니더라도 Github의 오픈소스 코드들을 분석할때도 유용하니 참고하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;8-octotree&quot;&gt;8. Octotree&lt;/h2&gt;
&lt;p&gt;8번째는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US&quot;&gt;Octotree&lt;/a&gt; 입니다.  &lt;/p&gt;&lt;p&gt;IDE의 프로젝트 탭처럼 Github 프로젝트를 볼때 전체 구조를 좌측 사이바에 노출시켜줍니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995F7C425C6A95D81D&quot; alt=&quot;8-1&quot;&gt;&lt;/p&gt;&lt;p&gt;전체 구조를 확인할때나, 한번에 특정 파일로 이동할때 굉장이 유용합니다.&lt;br /&gt;
7번 Sourcegraph와 함께 Github의 오픈소스 프로젝트를 분석할때 자주 사용하는 추천 플러그인 입니다.&lt;/p&gt;
&lt;h2 id=&quot;9-jetbrains-ide-support&quot;&gt;9. JetBrains IDE Support&lt;/h2&gt;
&lt;p&gt;9번째는 &lt;a href=&quot;https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji&quot;&gt;JetBrains IDE Support&lt;/a&gt;) 입니다.&lt;/p&gt;&lt;p&gt;젯브레인의 IDE (IntelliJ, WebStorm 등) 사용시 &lt;strong&gt;웹 프론트엔드의 디버깅을 IDE내에서 가능하도록 지원&lt;/strong&gt;하는 플러그인입니다.&lt;/p&gt;&lt;p&gt;아래는 젯브레인의 시연 영상입니다.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kJh9lGbTSGI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;젯브레인의 IDE (IntelliJ, WebStorm 등)를 사용하시는 분들께는 정말 큰 도움이 될 플러그인입니다.&lt;br /&gt;
저는 최근엔 웹 프론트엔드 작업을 할일이 없어 거의 사용하지 않지만, 이전에 JS 개발을 할때는 적극 사용한 플러그인입니다.&lt;/p&gt;
&lt;h2 id=&quot;10-momentum&quot;&gt;10. Momentum&lt;/h2&gt;
&lt;p&gt;마지막 추천 플러그인은 &lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=ko&amp;amp;utm_source&quot;&gt;모멘텀&lt;/a&gt;입니다.&lt;/p&gt;&lt;p&gt;매일 새로운 풍경 사진을 배경으로 제공해주는 플러그인입니다.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D28C505C6A95D81D&quot; alt=&quot;10-1&quot;&gt;&lt;/p&gt;&lt;p&gt;특별한 기능 보다는 일할때마다 리프레시 되는 느낌이 좋아 계속 사용중인 플러그인입니다.&lt;br /&gt;
산뜻한 느낌을 원하시는 분이시라면 한번 사용해보시길 추천합니다.&lt;/p&gt;
&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;제가 추천하는 10개의 플러그인들을 소개드렸습니다.  &lt;br /&gt;
이외에도 좋은 플러그인들이 많은데요.&lt;br /&gt;
다음 기회에 추가로 된 플러그인들을 정리해서 소개드리겠습니다.&lt;/p&gt;&lt;p&gt;감사합니다.&lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5349709105365293&quot;
     data-ad-slot=&quot;5488859360&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt;
    &lt;p&gt; IntelliJ &amp; 안드로이드 스튜디오의 기본기를 배우고 싶다면 아래 영상을 참고해보세요!&lt;/p&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;a href=&quot;http://bit.ly/2NTJBeR&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;
            &lt;img src=&quot;https://d81pi4yofp37g.cloudfront.net/wp-content/uploads/IDEA2.jpg&quot; width=&quot;385&quot; height=&quot;250&quot;&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jojoldu.tistory.com/406&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>개발환경</category>
<category>black menu</category>
<category>Chrome</category>
<category>쿠키</category>
<category>크롬</category>
<category>플러그인</category>
<author>창천향로 창천향로</author>
<guid>https://jojoldu.tistory.com/406</guid>
<comments>https://jojoldu.tistory.com/406#entry406comment</comments>
<pubDate>Mon, 18 Feb 2019 20:24:19 +0900</pubDate>
</item>
</channel>
</rss>