<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Jeremy's Blog</title>
  <link rel="alternate" href="https://sungjk.github.io/"/>
  <link type="application/atom+xml" rel="self" href="https://sungjk.github.io/feed.xml"/>
  <updated>2019-05-07T14:12:36+00:00</updated>
  <id>https://sungjk.github.io/</id>
  <author>
    <name>Jeremy</name>
    <email>ajax0615@gmail.com</email>
  </author>

  
      
      <entry>
        <id>https://sungjk.github.io/2019/05/03/uml-for-java-programmers-3.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/05/03/uml-for-java-programmers-3.html"/>
        <title>JAVA 프로그래머를 위한 UML - 3</title>
        <updated>2019-05-03T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;7-실천-방법-dx&quot;&gt;7. 실천 방법: dX&lt;/h1&gt;
&lt;p&gt;여러 개발자가 짧은 시간에 많은 일을 할 수 있도록 돕는 단순한 규칙의 집합을 dX라고 하자.&lt;/p&gt;

&lt;h3 id=&quot;반복적인-개발&quot;&gt;반복적인 개발&lt;/h3&gt;
&lt;p&gt;dX 핵심은 '모든 것'을 '짧은' 주기로 반복하는 것이다. 요구사항, 분석, 설계, 구현, 테스팅, 문서화 등 정말 '모든 것'이 다 포함된다. 그리고 짧은 주기는 한 주 또는 두 주를 의미한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최초의 탐사 작업&lt;br /&gt;
요구사항 정의하기.&lt;/li&gt;
  &lt;li&gt;각 기능의 추정치 잡기&lt;br /&gt;
추정치에 대한 단위에 신경을 쓰지 않고, 오직 다른 스토리와 크기를 비교할 수 있는 상대적인 크기에만 주의를 기울인다.&lt;/li&gt;
  &lt;li&gt;스파이크&lt;br /&gt;
이틀이나 사흘 정도 시간을 내서 흥미로운 스토리를 두 세개 간략하게 구현해본다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;계획-짜기&quot;&gt;계획 짜기&lt;/h3&gt;
&lt;p&gt;계획에서는 단순히 현재 작업 속도로 주기마다 어떤 스토리들을 완수할 수 있을지 파악한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;릴리스 계획하기&lt;br /&gt;
가장 중요하고 비용 대비 효율이 높은 스토리들을 고르고, 이 스토리가 릴리스 계획이 된다.&lt;/li&gt;
  &lt;li&gt;반복 주기를 계획하기&lt;br /&gt;
비즈니스 가치가 낮고 비싼 스토리보다 비즈니스 가치가 높고 비용이 싼 스토리를 먼저 골라야 한다. 누군가 개발자에게 태스크를 맡으라고 정하는 것이 아니라, 개발자가 태스크에 스스로 사인한다. 그리고 자신이 사인하는 태스크의 양을 추정하는 것도 개발자에게 맡긴다.&lt;/li&gt;
  &lt;li&gt;중간 지점&lt;br /&gt;
지금까지 완료된 스토리 점수는 끝마친 스토리의 추정치만 모두 더해서 계산한다.&lt;/li&gt;
  &lt;li&gt;결과를 속도에 반영하기&lt;br /&gt;
주기마다 얼마나 많은 스토리 점수를 완수하는지 측정해 보고 다음 주기에는 그만큼만 사인한다. 개인마다 지난번 주기에서 얼마나 많은 인-시간(man-hours) 분량만큼 태스크를 끝마쳤는지 재보고, 다음 주기에는 오직 그만큼만 사인해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;반복-주기를-관리-단계로-조직하기&quot;&gt;반복 주기를 관리 단계로 조직하기&lt;/h3&gt;
&lt;p&gt;통합 공정(Unified Process)에 따르면 프로젝트에는 네 가지 관리 단계가 있다. 도입 단계(Inception phase)에서는 시스템이 실행될 수 있는지, 어떤 비즈니스 사례인지 결정하기 위해 노력한다. 정련 단계(Elaboration phase)에서는 시스템의 아키텍처를 결정하고 믿을 수 있는 구현 계획을 작성한다. 구축 단계(Construction phase)에서는 시스템을 구축한다. 마지막으로, 전이 단계(Transition phase)에서는 시스템을 설치하고 사용자와 협력해서 시스템을 조율한다.&lt;/p&gt;

&lt;p&gt;통합 공정의 단계마다 반복 주기가 하나 이상 있으며, 주기마다 실제로 작동하는 코드가 결과물로 나온다. 단계가 바뀐다고 프로그래머에게 달라지는 것은 없다. 모든 단계는 비슷한 구조의 반복 주기들로 구성된다. 반복 주기의 구조는 스토리들을 찾아내고, 찾아낸 스토리의 작업량을 추정하고, 어떤 스토리를 구현할지 선택하고, 그것을 구현하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;반복-주기에서는-어떤-일이-일어나는가&quot;&gt;반복 주기에서는 어떤 일이 일어나는가&lt;/h3&gt;
&lt;p&gt;한 번의 반복주기에 우리는 요구사항을 분석하고, 해결 방안을 설계하고, 그 해결 방안을 구현한다. 그리고 관심 범위는 '스토리들에만' 한정된다. 다음 주기에 선택될지도 모르는 다른 스토리들을 고려하지 않는다.&lt;/p&gt;

&lt;p&gt;이렇게 하면 최고의 아키텍처와 매우 유연한 설계를 얻게 되고 재작업도 아주 적어진다. 우리는 언제나 그 시점에서 가장 중요한 기능을 작업하기 때문이다. 다음 반복 주기에 구현하기로 예정된 기능은, 당연히 지금 작업하는 기능보다 덜 중요하다. 그러므로 우리는 언제나 그때 가장 중요한 것에 주목하는 셈이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;짝은 이뤄 개발하기&lt;br /&gt;
키보드를 다루는 사람은 한 사람일지 몰라도, 지금 무슨 일이 진행 중인지 둘 다 정확하게 알아야 한다.&lt;/li&gt;
  &lt;li&gt;인수 테스트&lt;br /&gt;
선택된 사용자 스토리에 살을 붙여 유스케이스를 만들고 선택한 스토리를 실행해 볼 수 있는 인수 테스트를 작성한다. 이 인수테스트는 주기가 절반 이상 지나기 전에 프로그래머에게 전달된다. 이 인수 테스트야 말로 진정한 요구사항 문서다. 인수 테스트는 보통 쉽게 자동화할 수 있는 고수준의 테스트용 언어로 작성한다.&lt;/li&gt;
  &lt;li&gt;단위 테스트&lt;br /&gt;
단위 테스트를 먼저 만들고, 실제 제품에 들어갈 코드를 작성하는 것이 규칙이다. 실패하는 단위 테스트를 통과하기 위해 작성한 것이 실제 코드의 모든 줄이 된다. 테스트는 문서화의 다른 형식이기도 하다. 특정한 API 함수를 호출하는 방법을 알고 싶다면, 그것을 하는 테스트가 있으니 보면 된다. 어떤 객체를 만드는 방법을 알고 싶다면, 역시 그것을 하는 테스트가 있으니 보면 된다. 테스트는 시스템에 있는 거의 모든 프로그래밍 작업의 예제 모음처럼 사용할 수 있다. 테스트는 뜻이 모호하지 않고, 정확하고, 컴파일할 수도 있으며 실행할 수도 있는 종류의 문서다.&lt;/li&gt;
  &lt;li&gt;리팩터링&lt;br /&gt;
한 무리의 단위 테스트와 인수 테스트의 지원을 받는 한, 우리는 두려움 없이 원하는 대로 무엇이든 변경할 수 있다. 리팩터링이란 시스템의 동작에는 변화 없이 프로그램의 구조만 개선하는 행동을 말한다. 개선 작업은 작은 단계로 나뉘는데, 각 단계가 끝날 때마다 테스트를 돌려 본다.&lt;/li&gt;
  &lt;li&gt;개방된 작업 공간&lt;br /&gt;
서로 자주 상호 작용하며 부담 없이 질문하거나 충고할 수 있고, 책상 옆에 기대어 서서 다른 사람의 코드를 볼 수도 있는 한 팀으로 함께 일하는 것이다.&lt;/li&gt;
  &lt;li&gt;끊임없이 통합 작업&lt;br /&gt;
dx에서는 락을 걸지 않는(nonblocking) 소스 컨트롤 시스템을 사용한다. 이 말은 다른 사람이 체크 아웃했더라도 아무 상관 없이 누구나 모듈을 체크 아웃할 수 있다는 뜻이다. 체크 인을 하기 전 반드시 모든 단위 테스트와 인수 테스트를 통과하는 것을 보여야 한다. 즉, 여러분이 체크인하기 전 반드시 여러분이 변경한 사항을 시스템에 완전히 통합시키고, 시스템을 빌드하고, 테스트해야 한다는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;8-패키지&quot;&gt;8. 패키지&lt;/h1&gt;
&lt;p&gt;자바 프로그래머에게 중요한 패키지는 두 종류다. 하나는 자바의 package 키워드로 나타내는 소스코드 패키지고, 다른 하나는 .jar 파일로 나타내는 바이너리 컴포넌트다.&lt;/p&gt;

&lt;p&gt;자바의 컴파일 시스템은 소스크드의 패키지 구조를 본떠 만든 디렉터리 구조 안에 생성한 이진 .class 파일들을 보관한다. 그리고 .java 파일이 아니라 .class 파일에서 외부 선언을 읽어 오므로, 컴파일러와 런타임 시스템 둘 다 애플리케이션에 포함된 패키지들의 클래스 경로(classpath)를 꼭 올바르게 알아야 한다.&lt;/p&gt;

&lt;p&gt;.jar 파일의 형태로 많은 바이너리 코드를 한데 묶어 컴포넌트로 만들고 싶을 때가 있다. 이런 컴포넌트는 여러 시스템에 배포할 때 편리하다.&lt;/p&gt;

&lt;h3 id=&quot;패키지-설계의-원칙&quot;&gt;패키지 설계의 원칙&lt;/h3&gt;
&lt;p&gt;이 원칙에 따라 나뉜 패키지의 목적은 자주 변경하는 클래스를 따로 모으고, 변경할 이유가 다른 클래스를 갈라놓는 것이다. 이 원칙들은 자주 변경하는 클래스와 그렇지 않은 클래스를 분리하려고 노력한다. 또한, 시스템의 고차원 아키텍처를 저차원의 세부사항과 분리하고, 이 고차원 아키텍처를 독립적으로 유지하려고 노력한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;패키지 릴리스/재사용 등가 원칙(The Release/Reuse Equivalency Principle, REP)&lt;/strong&gt;&lt;br /&gt;
다른 사람들이 편하게 재사용할 수 있는 패키지를 만드는 것도 클래스들을 패키지 안에 배치할 때 고려할 기준이다. 그러므로 재사용할 때 같이 몰려다니는 클래스들을 한 패키지로 묶어놓고, 이것들을 릴리스나 유지보수의 단위로 취급하면 만드는 사람이나 재사용하는 사람 모두 편하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;공통 폐쇄 원칙(The Common Closure Principle, CCP)&lt;/strong&gt;&lt;br /&gt;
단 하나의 책임 원칙(Single Responsibility Principle, SRP)에 따르면 모든 클래스는 그 클래스를 변경할 이유가 오직 하나뿐이어야 한다. 만약 어떤 것을 변경해야 한다면, 그것 때문에 바꾸어야 할 클래스들이 단 한 패키지에만 몰려 있기를 원한다. CCP의 목표는 변경 가능성이 비슷한 클래스들을 하나로 묶는 것이다. 이렇게 하면, 무엇을 바꿔야 할 경우 의존 관계 구조 안의 패키지들 가운데 매우 적은 수만 변경하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;공통 재사용 법칙(Common Reuse Principle, CRP)&lt;/strong&gt;&lt;br /&gt;
인터페이스 격리 원칙(Interface Segregation Principle, ISP)에 따르면 클래스의 클라이언트마다 따로따로 인터페이스를 만드는 것이 좋다. 한 클라이언트가 사용하는 클래스들과 다른 클라이언트가 사용하는 클래스들은 최대한 분리해야 한다. 서로 다른 클라이언트가 사용하는 클래스들이 한 패키지에 섞여 있을 경우, 패키지 안의 어떤 클래스를 바꾸면 그 변경된 클래스를 사용하지 않는 패키지들까지 그 변화의 영향을 받을 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;의존 관계 비순환 원칙(Acyclic Dependencies Principle, ADP)&lt;/strong&gt;&lt;br /&gt;
패키지 의존 관계 그래프에 순환이 있다면 빌드할 때나 개발할 때 문제가 생길 수도 있다. 순환이 있으면 어떤 클래스와 패키지들을 먼저 빌드하고 어떤 것을 다음에 할지 결정하지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;안정된 의존 관계 원칙(Stable Dependencies Principle, SDP)&lt;/strong&gt;&lt;br /&gt;
SDP에 따르면 패키지는, 바뀌기 쉬워서 자신보다 불안정한 패키지들에 의존하면 안 된다. 모든 패키지 의존 관계 화살표는 언제나 화살표가 출발하는 패키지(의존하는 패키지)보다 변경하기 어려운 패키지를 가리켜야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;안정된 추상화 원칙(Stable Abstractions Principle, SAP)&lt;/strong&gt;&lt;br /&gt;
개방-폐쇄 원칙(OCP)에 따르면 모듈을 변경하지 않고도 확장할 수 있는 방법이 있다. SAP에 따르면 안정된 패키지를 쉽게 확장할 수 있도록 유지하기 위해, 안정된 패키지는 추상적이어야 한다. 패키지가 안정적일수록 더 추상적이어야 한다. 추상 클래스와 인터페이스의 비율이 높을수록 패키지의 추상도도 높아진다. SDP/SAP 조합에서는 의존 관계를 많이 받아들일수록 안정성도 증가하며, 안정성이 증가하면 추상성도 증가해야 한다고 나와있다. 그러므로 패키지가 의존 관계를 많이 받아들일수록 패키지도 더 추상적이어야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;9-객체-다이어그램&quot;&gt;9. 객체 다이어그램&lt;/h1&gt;
&lt;p&gt;시스템의 스냅샷 사진처럼, UML 객체 다이어그램은 어떤 순간의 객체들과 그 객체 사이의 관계 그리고 그 객체들의 속성 값을 보여 준다. 객체 다이어그램은 시스템의 구조를 그 시스템에 속한 클래스의 정적인 구조에서 만들어 내는 것이 아니라 동적으로 만드는 경우 특히 유용하다.&lt;/p&gt;

&lt;h3 id=&quot;어떤-순간의-스냅샷&quot;&gt;어떤 순간의 스냅샷&lt;/h3&gt;
&lt;p&gt;시스템 내부 구조가 특정 시간에 어떤 모습인지, 또는 시스템이 특정한 상태에서 어떻게 되어 있는지 보일 필요가 있다면 객체 다이어그램이 유용하다. 객체 다이어그램은 설계자의 의도를 보여준다. 그리고 객체 다이어그램은 어떤 클래스들과 관계들이 실제로 어떻게 사용되는지, 또 시스템에 다양한 것이 입력될 때 시스템이 어떻게 변화할지 보여주기도 한다.&lt;/p&gt;

&lt;p&gt;하지만 이 다이어그램들은 자주 필요하지는 않으므로, 절대로 시스템에 들어 있는 시나리오마다 이것을 그려야 한다고 생각해서는 안 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788991268937&quot;&gt;UML 실전에서는 이것만 쓴다: JAVA 프로그래머를 위한 UM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.csd.uoc.gr/~hy252/references/UML_for_Java_Programmers-Book.pdf&quot;&gt;UML_for_Java_Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/04/27/uml-for-java-programmers-2.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/04/27/uml-for-java-programmers-2.html"/>
        <title>JAVA 프로그래머를 위한 UML - 2</title>
        <updated>2019-04-27T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;4-시퀀스-다이어그램&quot;&gt;4. 시퀀스 다이어그램&lt;/h1&gt;

&lt;h3 id=&quot;객체-생명선-메시지-등&quot;&gt;객체, 생명선, 메시지 등&lt;/h3&gt;
&lt;p&gt;협력에 참여하는 객체와 클래스는 맨위에 그리고, 객체는 이름 아래 밑줄이 있기 때문에 클래스와 구별된다. 왼쪽의 허수아비(액터)는 익명의 객체다. 이 객체는 협력 과정에 들어오고 나가는 모든 메시지의 시작점이자 마지막점이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/sequential-diagram.png&quot; alt=&quot;sequential-diagram&quot; title=&quot;sequential-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;객체와 액터 아래에 늘어뜨린 점선은 생명선(lifeline)이라고 부른다. 한 객체에서 다른 객체로 보내는 메시지는 두 생명선 사이의 화살표로 그린다. 메시지마다 이름이 붙어 있다. 인자는 이름 뒤 괄호 안에 적거나, 데이터 토큰(반대쪽 끝에 원이 그려진 작은 화살표) 아래에 적는다.&lt;/p&gt;

&lt;p&gt;LoginServlet 객체의 생명선에 있는 얇은 사각형은 활성 상자(activation)라고 부른다. 이 상자는 어떤 함수가 실행되는 시간을 나타낸다. EmployeeDB가 객체가 아니라 클래스라는 것에도 주목하라. 클래스는 객체와 비슷하지만 이름에 밑줄이 없다. 그러므로 getEmployee는 정적 메서드일 수밖에 없다.&lt;/p&gt;

&lt;h3 id=&quot;생성과-소멸&quot;&gt;생성과 소멸&lt;/h3&gt;
&lt;p&gt;이름이 붙지 않은 메시지 화살표의 끝이 객체의 생명선이 아니라 생성될 객체를 가리킨다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/creating-object.png&quot; alt=&quot;creating-object&quot; title=&quot;creating-object&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자바에서 객체는 명시적으로 소멸되지 않으며, 가비지 컬렉터가 우리 대신 객체를 소멸시킨다. 우리가 해제하려고 하는 객체의 생명선이 X자로 일찌감치 끊겨 있다. 이 X자를 가리키는 메시지 화살표는 객체를 해제해서 가비지 컬렉터에 넘기는 행동을 뜻한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/releasing-object.png&quot; alt=&quot;releasing-object&quot; title=&quot;releasing-object&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;사례와-시나리오&quot;&gt;사례와 시나리오&lt;/h3&gt;
&lt;p&gt;첫째, 무엇보다 자신에게 시퀀스 다이어그램이 정말 필요한지 물어보아라. 코드만으로 어떤 시스템의 일부분을 설명하는 것이 개발자와 설계자의 목표여야 한다. 개발팀은 표현력이 강하고 가독성 좋은 코드를 작성하기 위해 노력해야 한다. 코드만으로 설명하기 쉬울수록 필요한 다이어그램의 수도 줄어들고, 전체 프로젝트도 나아질 것이다.&lt;/p&gt;

&lt;p&gt;둘째, 시퀀스 다이어그램이 필요하다는 생각이 들면 그것을 여러 시나리오로 쪼갤 수 있는지 자신에게 물어보아라.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/simple-scenario.png&quot; alt=&quot;simple-scenario&quot; title=&quot;simple-scenario&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;셋째, 여러분이 무엇을 그리려고 하는지 생각해 보아라. 시스템의 전체 흐름에 대한 고차원의 개괄인가? 대개 고차원 다이어그램이 저차원 다이어그램보다 더 쓸모 있다. 고차원 다이어그램은 다이어그램을 읽는 사람이 마음속에서 시스템의 여러 요소를 하나로 연결해 볼 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/high-level-view.png&quot; alt=&quot;high-level-view&quot; title=&quot;high-level-view&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;반복과-조건&quot;&gt;반복과 조건&lt;/h3&gt;
&lt;p&gt;별표(*)로 반복임을 표시하고 대괄호([])로 조건임을 표시 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;비동기-메시지&quot;&gt;비동기 메시지&lt;/h3&gt;
&lt;p&gt;분산 시스템이나 멀티스레드 시스템에서는 메시지를 보내는 객체가 다른 스레드의 제어 흐름에서 실행될 수도 있다. 이런 메시지 '비동기 메시지(asynchronous message)'라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/asynchronous-message.png&quot; alt=&quot;asynchronous-message&quot; title=&quot;asynchronous-message&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다중-스레드&quot;&gt;다중 스레드&lt;/h3&gt;
&lt;p&gt;비동기 메시지를 쓴다는 말은 곧 제어 흐름에서 다중 스레드를 사용한다는 뜻이다. 메시지 이름 앞에 T1 같은 식별자를  쓰고 콜론(:)을 찍어 놓은 것을 볼 수 있다. 이 식별자는 메시지를 보내는 스레드의 이름이다. 이 다이어그램에서 AsynchronousLogger 객체는 T1 스레드가 생성하고 조작한다. Log 객체 안에서 돌아가는, 실제로 메시지 로그를 수행하는 스레드는 T2라고 이름 붙어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/multiple-thread.png&quot; alt=&quot;multiple-thread&quot; title=&quot;multiple-thread&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;활동적인-객체&quot;&gt;활동적인 객체&lt;/h3&gt;
&lt;p&gt;독립된 내부 스레드를 가진 객체를 표현하고 싶은 객체를 표현하고 싶은 경우도 있다. 이런 객체는 활동적인 객체(active object)로 알려져 있다. 자신만의 스레드를 만들고 제어하는 객체는 모두 활동적인 객체다. 그 객체의 메서드에 대해서는 특별한 제한이 없다. 활동적인 객체의 메서드는 그 객체의 스레드에서 돌아가도 되고, 그 메서드를 호출하는 스레드에서 돌아가도 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/active-objects.png&quot; alt=&quot;active-objects&quot; title=&quot;active-objects&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;5-유스케이스&quot;&gt;5. 유스케이스&lt;/h1&gt;
&lt;p&gt;유스케이스를 '단순하게 유지하는 것'이 유스케이스를 사용하는 진짜 비결이다. 정해진 형식을 맞춰야 하나 걱정하지 말고 그냥 '빈 종이'에 쓰거나, 단순한 워드프로세서로 '빈 페이지'에 작성하거나, '텅 빈 인덱스 카드'에 적어라. 모든 세부사항을 채워야 하는지 걱정할 필요도 없다. 유스케이스를 '그때그때 작성하는 요구사항'이라고 생각하라.&lt;/p&gt;

&lt;h3 id=&quot;유스케이스란-무엇인가&quot;&gt;유스케이스란 무엇인가&lt;/h3&gt;
&lt;p&gt;유스케이스는 시스템의 동작 하나를 기술한 것이다. 유스케이스는 방금 시스템에 특정한 일을 시킨 사용자의 관점에서 작성하며, 사용자가 보낸 자극 '하나'에 대한 반응으로 시스템이 진행하는 '눈에 보이는' 이벤트들의 흐름을 포착한다.&lt;/p&gt;

&lt;p&gt;눈에 보이는 이벤트란, 사용자가 볼 수 있는 이벤트를 뜻한다. 유스케이스는 사용자의 눈에 보이지 않는 동작을 전혀 기술하지 않고 시스템 안에 숨겨진 메커니즘도 다루지 않는다. 오직 사용자가 직접 볼 수 있는 것을 적어 놓을 뿐이다.&lt;/p&gt;

&lt;h3 id=&quot;기본-흐름&quot;&gt;기본 흐름&lt;/h3&gt;
&lt;p&gt;유스케이스를 구성하는 항목은 보통 두 개다. 첫째 항목은 기본 흐름(primary course)이다. 예로 판매시점관리(point of sale, POS) 시스템의 전형적인 유스케이스를 보자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상품 구입하기&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;점원은 상품을 스캐너 위로 통과시킨다. 스캐너가 UPC 코드를 읽는다.&lt;/li&gt;
  &lt;li&gt;상품 가격과 설명이 지금까지 통과시킨 상품 가격의 합계와 함께 고객 쪽 화면에 표시된다. 가격과 설명은 점원의 화면에도 표시된다.&lt;/li&gt;
  &lt;li&gt;가격과 설명이 영수증에 출력된다.&lt;/li&gt;
  &lt;li&gt;UPC 코드가 올바르게 읽혔는지 점원이 확인할 수 있도록 시스템이 잘 들리는 '승인' 소리를 낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;대체-흐름&quot;&gt;대체 흐름&lt;/h3&gt;
&lt;p&gt;유스케이스의 세부사항 가운데 일부는 일이 잘못되는 경우를 고려해야 한다. 이해관계자와 대화할 때 여러분은 실패 시나리오를 이야기해 봐야 한다. 그리고 그 유스케이스를 구현할 시간이 다가올수록 이런 대체 흐름을 더 깊게 생각해야 한다. 대체 흐름은 기본 흐름에 부록처럼 붙게 되며, 다음처럼 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;UPC 코드를 읽지 못할 경우&amp;gt;&lt;/strong&gt;&lt;br /&gt;
만약 스캐너가 UPC 코드를 읽는 데 실패하면 시스템은 점원이 다시 시도하도록 '다시 통과시키시오.' 소리를 낸다. 만약 세 번 시도했는데도 스캐너가 UPC 코드를 인식하지 못하면, 점원은 직접 코드를 입력해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;UPC 코드가 없을 경우&amp;gt;&lt;/strong&gt;&lt;br /&gt;
상품에 UPC 코드가 없다면, 점원은 가격을 직접 입력해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;시스템-경계-다이어그램system-boundary-diagram&quot;&gt;시스템 경계 다이어그램(System Boundary Diagram)&lt;/h3&gt;
&lt;p&gt;사각형 안에 들어있는 것은 모두 개발 중인 시스템의 일부다. 사각형 바깥을 보면 시스템을 상대로 행동하는 액터를 볼 수 있다. 액터란, 시스템에 자극을 가하며 시스템 바깥에 있는 존재다. 액터는 사용자인데 대개 사람이다. 하지만 다른 시스템이나 심지어 실시간 클럭(realtime clock) 같은 장치가 액터가 될 수도 있다.&lt;/p&gt;

&lt;p&gt;경계 사각형 안을 보면 유스케이스들이 들어 있는데, 유스케이스는 타원 안에 그 유스케이스의 이름을 써서 나타낸다. 액터와 그 액터가 자극하는 유스케이스는 선으로 잇는다. 화살표는 그리지 마라. 화살표 방향이 정말로 무엇을 의미하는지 제대로 아는 사람은 아무도 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/system-boundary-diagram.png&quot; alt=&quot;system-boundary-diagram&quot; title=&quot;system-boundary-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;6-객체지향-개발의-원칙&quot;&gt;6. 객체지향 개발의 원칙&lt;/h1&gt;
&lt;p&gt;잘 설계되었다는 말은 무슨 뜻일까? 잘 설계한 시스템은 이해하기 쉽고, 바꾸기도 쉽고 재사용하기 쉽다. 개발하는 데 특별히 어렵지도 않고 단순하고 간결하며 경제적이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;나쁜 설계의 냄새&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;경직성(Rigidity)&lt;/strong&gt;: 무엇이든 하나를 바꿀 때마다 반드시 다른 것도 바꿔야 하며, 그러고 나면 또 다른 것도 바꿔야 하는 변화의 사슬이 끊이지 않기 때문에 시스템을 변경하기 힘들다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;부서지기 쉬움(Fragility)&lt;/strong&gt;: 시스템에서 한 부분을 변경하면 그것과 전혀 상관없는 다른 부분이 작동을 멈춘다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;부동성(Immobility)&lt;/strong&gt; : 시스템을 여러 컴포넌트로 분해해서 다른 시스템에서 재사용하기 힘들다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;끈끈함(Viscosity)&lt;/strong&gt;: 개발 환경이 배관용 테이프나 풀로 붙인 것처럼 꽉 달라붙은 상태다. 편집 - 컴파일 - 테스트 순환을 한 번 도는 시간이 엄청나게 길다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;쓸데없이 복잡함(Needless Complexity)&lt;/strong&gt;: 괜히 머리를 굴려서 짠 코드 구조가 굉장히 많다. 이것들은 대개 지금 당장 하나도 필요 없지만 언젠가는 굉장히 유용할지도 모른다고 기대하며 만든 것이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;필요 없는 반복(Needless Repetition)&lt;/strong&gt;: 코드를 작성한 프로그래머 이름이 마치 '복사'와 '붙여넣기' 같다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;불투명함(Opacity)&lt;/strong&gt;: 코드를 만든 의도에 대한 설명을 볼 때 그 설명에 '표현이 꼬인다'라는 말이 잘 어울린다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;의존 관계 관리하기&lt;/strong&gt;&lt;br /&gt;
잘못 관리한 의존 관계가 많은 냄새의 원인이다. 잘못 관리한 의존 관계는 서로 단단하게 결합(coupling)하여 얽히고설킨 코드(스파게티 코드)로 나타난다.&lt;/p&gt;

&lt;p&gt;객체지향 언어(Object Oriented Programming Language)는 의존 관계를 관리하는 데 도움이 되는 도구를 제공한다. 인터페이스를 만들어 의존 관계를 끊거나 의존의 방향을 바꿀 수도 있다. 다형성을 사용하면 어떤 함수를 포함한 모듈에 의존하지 않고도 그 함수를 호출할 수 있다. 정말로 객체지향 언어는 의존 관계를 우리가 원하는 모양대로 만들 수 있는 강력한 힘을 준다.&lt;/p&gt;

&lt;h3 id=&quot;단-하나의-책임-원칙the-single-responsibility-principle-srp&quot;&gt;단 하나의 책임 원칙(The Single Responsibility Principle, SRP))&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스는 오직 하나만 알아야 한다. 오직 하나의 책임만 져야 한다. 더 핵심적인 말로 바꿔 보면, 어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 한다.&lt;/p&gt;

&lt;p&gt;아래 Employee 클래스는 너무 많은 것을 알고 있다. 임금과 세금을 계산하는 방법도 알고, 자신을 디스크에 저장하거나 읽어 오는 방법도 안다. 그리고 자신을 XML로 변환하거나 XML에서 읽어 오는 방법도 알고, 다양한 보고서 형식으로 출력하는 방법도 안다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/class-knows-too-many.png&quot; alt=&quot;class-knows-too-many&quot; title=&quot;class-knows-too-many&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로는 이 모든 개념을 각기 다른 클래스로 분리하여 클래스마다 변경해야 하는 이유가 오직 하나만 있도록 만드는 것이 바람직하다. Employee 클래스는 세금과 임금만 다루고, XML 관련 클래스는 Employee 인스턴스를 XML로 바꾸거나 XML에서 읽어 들인다. 또 EmployeeDatabase 클래스는 Employee 인스턴스를 데이터베이스에 저장하거나 읽어 들이는 역할을 담당하고, 보고서 종류마다 클래스를 하나씩 만들면 좋을 것이다. 간단히 말해서, 우리는 걱정거리를 나누고 싶다(separation of concerns).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/separation-of-concerns.png&quot; alt=&quot;separation-of-concerns&quot; title=&quot;separation-of-concerns&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UML 다이어그램을 보면 이 원칙을 지키지 않는 예를 무척 발견하기 쉽다. 둘 이상의 주제 영역에 의존 관계인 클래스를 찾아보면 된다. 가장 쉽게 찾을 수 있는 것이 특정 속성을 부여하는 인터페이스를 하나 또는 그 이상으로 구현하는 클래스다. 예를 들어 디스크에 저장하는 능력처럼 어떤 객체에 특정 능력을 부가하는 인터페이스를 생각해 보자. 비즈니스 로직 객체가 조심성 없이 이런 인터페이스까지 구현하면 영속성 문제와 비즈니스 규칙 사이에 필요 없는 결합을 만들기 쉽다.&lt;/p&gt;

&lt;h3 id=&quot;개방-폐쇄-원칙the-open-closed-principle-ocp&quot;&gt;개방 폐쇄 원칙(The Open Closed Principle, OCP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;소프트웨어 엔티티(Class, Module, Functions, etc.)는 확장에 대해서는 개방되어야 하지만, 변경에 대해서는 폐쇄되어야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 원칙의 정의는 거창하지만, 의미는 간단하다. 모듈 자체를 변경하지 않고도 그 모듈을 둘러싼 환경을 바꿀 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;아래 EmployeeDB라는 데이터베이스 퍼사드(facade)를 통해 Employee 객체를 다루는 간단한 애플리케이션이 있다. 이 퍼사드는 데이터베이스 API를 직접 다룬다. 바로 이것이 OCP를 위반하는 경우인데, EmployeeDB 클래스의 구현이 변경되면 Employee 클래스도 다시 빌드해야 할지도 모르기 때문이다. Employee는 EmployeeDB를 통해 데이터베이스 API에도 묶인 셈이다. Employee 클래스를 포함하는 시스템은 반드시 TheDatabase API까지 포함해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/viloation-ocp.png&quot; alt=&quot;viloation-ocp&quot; title=&quot;viloation-ocp&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;단위 테스트를 할 때는 환경에 생기는 변화를 제어하고 싶은 경우가 자주 생긴다. 예를 들어 Employee를 어떻게 테스트할지 생각해 보자. Employee 객체는 데이터베이스를 변경한다. 하지만 테스트 환경에서 실제 데이터베이스를 바꾸고 싶지 않다. 그렇다고 해서 단위 테스트를 하기 위해 테스트용 더미 데이터베이스를 만들고 싶지도 않다. 그렇자면, 테스트 환경으로 환경을 변경해서 테스트할 때 Employee가 데이터베이스에 하는 모든 호출을 가로챈 다음 이 호출들이 올바른지 검증하면 좋다.&lt;/p&gt;

&lt;p&gt;아래처럼 EmployeeDB를 인터페이스로 바꾸면 호출이 올바른지 검증할 수 있다. 이 인터페이스에서 파생한 두 가지 구현을 만들되, 하나는 진짜 데이터베이스를 호출하도록 하고 다른 하나는 우리 테스트를 지원하도록 하면 된다. 이렇게 인터페이스를 만들면 데이터베이스 API와 Employee를 분리할 수 있고, Employee를 손대지 않고도 Employee를 둘러싼 데이터베이스 환경을 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/comforing-ocp.png&quot; alt=&quot;comforing-ocp&quot; title=&quot;comforing-ocp&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;직원 목록을 보여주는 간단한 대화상자를 예로 들어보자. 사용자는 목록에서 어떤 직원을 골라 Terminate(해고) 버튼을 누른다. 이때 직원이 아무도 선택되지 않는다면 버튼이 활성화되지 않아야 한다. 목록에서 직원을 한 명 선택하면 그때 버튼이 다시 활성화되어야 한다. 사용자가 Terminate 버튼을 누르면 해고된 직원은 목록에서 사라지고, 목록은 아무도 선택되지 않은 상태로 되돌아가야 하며 버튼도 다시 비활성화 상태로 돌아가야 한다.&lt;/p&gt;

&lt;p&gt;OCP를 지키지 않고 구현하면이 모든 행동을 GUI API를 호출하는 클래스에 넣어 놓을 것이다. 반면 OCP를 지키는 시스템이라면 GUI를 조작하는 부분과 데이터를 조작하는 부분을 구분해 놓는다.&lt;/p&gt;

&lt;p&gt;아래는 OCP를 지키는 시스템의 구조다. EmployeeTerminatorModel(직원 해고 모델)은 직원 목록을 관리하며, 사용자가 직원을 선택하거나 해고할 때 통지받는다. EmployeeTerminatorDialog(직원 해고 대화상자)는 GUI를 관리한다. 이 클래스는 표시할 직원 목록을 받아서, 선택된 항목이 바뀌거나 Terminate 버튼이 눌렸을 때 컨트롤러에 통지한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/isolating-gui-from-data.png&quot; alt=&quot;isolating-gui-from-data&quot; title=&quot;isolating-gui-from-data&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EmployeeTerminatorModel은 선택된 직원을 실제로 목록에서 제거하는 책임을 맡는다. 그리고 해고 컨트롤을 활성화할지 말지 결정하는 책임도 맡는다. 이 모델은 이 컨트롤이 버튼으로 구현될지 다른 것으로 구현될지 알지 못하며, 단지 자신과 연결된 뷰에 사용자가 해고 행동을 할 수 있는지 없는지만 말해줄 뿐이다. 마찬가지로, 뷰에서 리스트 박스가 사용된다는 것을 모델이 몰라도, 지금 아무도 선택되지 않도록 하라고 뷰에 말할 수는 있다.&lt;/p&gt;

&lt;p&gt;EmployeeTerminatorDialog는 모델이 시키는 대로만 한다. 스스로 아무 결정도 내리지 않고 어떤 데이터도 관리하지 않는다. EmployeeTerminatorModel이 인형을 조작하듯 줄을 당겼다 놓았다 하면 이 대화상자는 그에 따라 움직인다. 사용자가 대화상자와 상호 작용하면 이 대화상자는 EmployeeTerminatorController(직원 해고 컨트롤러) 인터페이스의 메서드를 호출하는 방법으로 자신의 컨트롤러에 어떤 일이 벌어지는지 알리기만 한다. 이 메시지는 모델에 전달되고, 모델은 이 메시지를 해석해서 그에 따라 행동한다.&lt;/p&gt;

&lt;p&gt;어떻게 추상화를 해야 OCP를 지키는데 도움이 될까? 나는 실제 코드를 작성하기 전에 단위 테스트를 먼저 작성함으로써 OCP를 지키는 경우가 가장 많다. 각각 테스트 함수를 작성한 다음, 실제 모듈에는 이 테스트 함수를 통과할 수 있을 정도로만 코드를 작성한다.&lt;/p&gt;

&lt;h3 id=&quot;리스코프-치환-법칙the-liskov-substitution-principle-lsp&quot;&gt;리스코프 치환 법칙(The Liskov Substitution Principle, LSP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;서브 타입은 언제나 자신의 베이스 타입으로 교체할 수 있어야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;if 문장과 instanceof 표현식이 수없이 많은 코드를 본 적 있는가? 보통 이런 코드는 LSP를 지키지 않아서 생기는데, 이는 곧 OCP도 지키지 않았다는 말이다.&lt;/p&gt;

&lt;p&gt;LSP에 따르면 기반 클래스(base class)의 사용자는 그 기반 클래스에서 유도된 클래스를 기반 클래스로써 사용할 때, 특별한 것을 할 필요 없이 마치 원래 기반 클래스를 사용하는 양 그대로 사용할 수 있어야 한다. 더 자세히 말하면, instanceof나 다운캐스트(downcast)를 할 필요가 없어야 한다. 사용자는 파생 클래스에 대해서 아무것도 알 필요가 없어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;의존-관계-역전-원칙the-dependency-inversion-principle-dip&quot;&gt;의존 관계 역전 원칙(The Dependency Inversion Principle, DIP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A. 고차원 모듈은 저차원 모듈에 의존하면 안 된다. 이 두 모듈 모두 다른 추상화된 것에 의존해야 한다.&lt;/strong&gt;
&lt;strong&gt;B. 추상화된 것은 구체적인 것에 의존하면 안 된다. 구체적인 것이 추상화된 것에 의존해야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;'자주 변경되는 concrete class에 의존하지 마라.' 만약 어떤 클래스에서 상속받아야 한다면 기반 클래스를 추상 클래스로 만들어라. 어떤 클래스의 참조(reference)를 가져야 한다면, 참조 대상이 되는 클래스를 추상 클래스로 만들어라. 만약 어떤 함수를 호출해야 한다면, 호출되는 함수를 추상 함수로 만들어라.&lt;/p&gt;

&lt;p&gt;추상 클래스와 인터페이스는 보통 자신에게서 유도된 구체적인 클래스보다 훨씬 덜 변한다. 그러므로 구체적인 것보다는 이런 추상적인 것에 의존하는 편이 낫다. 이 원칙을 지키면 변화가 일어났을 때 시스템에 미치는 영향을 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면 컨크리트 클래스인 Vector나 String을 사용하면 안 된다는 말인가? 이것을 사용하면 DIP를 어기게 되는가? 그렇지 않다. 앞으로 변하지 않을 컨크리트 클래스에 의존하는 것은 완벽하게 안전하다. Vector나 String은 다음 10년 동안에도 변하지 않을 가능성이 높다.&lt;/p&gt;

&lt;p&gt;우리가 의존하면 안 되는 것은 '자주 변경되는' 컨크리트 클래스다. 활발히 개발중인 컨크리트 클래스나 변할 가능성이 높은 비즈니스 규칙을 담은 클래스가 여기에 속한다. 이런 클래스의 인터페이스를 만든 다음, 이 인터페이스에 의존하는 것이 바람직하다.&lt;/p&gt;

&lt;p&gt;UML을 사용하면 이 원칙을 지키는지 매우 쉽게 검사할 수 있다. UML 다이어그램의 화살표마다 따라가서 모두 인터페이스나 추상 클래스를 가리키는지 확인하면 된다. 만약 컨크리트 클래스에 의존하느데 그 클래스가 자주 변경된다면 DIP를 어기는 것이며, 따라서 시스템도 변화에 민감하게 변할 것이다.&lt;/p&gt;

&lt;h3 id=&quot;인터페이스-격리-원칙the-interface-segregation-principle-isp&quot;&gt;인터페이스 격리 원칙(The Interface Segregation Principle, ISP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 다이어그램에는 StudentEnrollment라는 클래스를 사용하는 두 클라이언트가 있다. EnrollmentReportGenerator가 prepareInvoice나 postPayment 같은 메서드는 사용하지 않으리라는 것은 명백하다. 마찬가지로 AccountsReceivable은 getName이나 getDate 같은 메서드를 호출하지 않는다고 가정해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/unsegregated-enrollment.png&quot; alt=&quot;unsegregated-enrollment&quot; title=&quot;unsegregated-enrollment&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 요구사항이 변해서 postPayment 메서드에 새 인자를 추가할 수 밖에 없다고 하면 무슨 일이 일어날까? StudentEnrollment의 선언을 바꾸는 이 변화 때문에 EnrollmentReportGenerator를 다시 컴파일하고 배포해야 할지도 모른다. EnrollmentReportGenerator는 postPayment 메서드와 아무 상관없는데 불행히도 이렇게 해야 한다.&lt;/p&gt;

&lt;p&gt;다음처럼 간단한 규칙을 지키면 이렇게 불행한 의존 관계를 막을 수 있다. 사용자에게 딱 필요한 메서드만 있는 인터페이스를 제공해서 필요하지 않는 메서드에서 사용자를 보호하라.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/27/segregated-enrollment.png&quot; alt=&quot;segregated-enrollment&quot; title=&quot;segregated-enrollment&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;StudentEnrollment 객체를 사용하는 사용자마다 자신이 관심 있는 메서드들만 있는 인터페이스를 제공받는다. 이렇게 하면 사용자가 관심 없는 메서드에서 생긴 변화에서 사용자를 보호할 수 있다. 그리고 사용자가 자신이 사용하는 객체를 너무 많이 알게 되는 일도 막을 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788991268937&quot;&gt;UML 실전에서는 이것만 쓴다: JAVA 프로그래머를 위한 UM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.csd.uoc.gr/~hy252/references/UML_for_Java_Programmers-Book.pdf&quot;&gt;UML_for_Java_Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/04/21/uml-for-java-programmers-1.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/04/21/uml-for-java-programmers-1.html"/>
        <title>JAVA 프로그래머를 위한 UML - 1</title>
        <updated>2019-04-21T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;1-개요&quot;&gt;1. 개요&lt;/h1&gt;
&lt;p&gt;UML(Unified Modeling Language)은 소프트웨어 개념을 다이어그램으로 그리기 위해 사용하는 시각적인 표기법이다. 마틴 파울러(Martin Fowler)는 UML을 각각 개념(conceptual), 명세(specification), 구현(implementation)이라는 말을 붙여 구분하였다.&lt;/p&gt;

&lt;p&gt;명세 차원 다이어그램은 결국에는 소스코드로 바꾸려고 그리는 것이며, 구현 차원 다이어그램도 이미 있는 소스코드를 설명하려고 그리는 것이다. 반면, 개념 차원 다이어그램은 사람이 풀고자 하는 문제 도메인 안에 있는 개념과 추상적 개념을 기술하기 위한 속기용 기호에 가깝다. 따라서 의미론적 규칙에 그다지 얽매이지 않으며 의미하는 바도 모호하거나 해석에 따라 달라질 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;다이어그램의-유형&quot;&gt;다이어그램의 유형&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;정적 다이어그램(static diagram)&lt;/strong&gt;: 클래스, 객체, 데이터 구조와 이것들의 관계를 그림으로 표현해서 소프트웨어 요소에서 변하지 않는 논리적 구조를 보여 준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;동적 다이어그램(dynamic diagram)&lt;/strong&gt;: 실행 흐름을 그림으로 그리거나 실체의 상태가 어떻게 바뀌는지 그림으로 표현해서 소프트웨어 안의 실체가 실행 도중 어떻게 변하는지 보여 준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;물리적 다이어그램(physical diagram)&lt;/strong&gt;: 소스 파일, 라이브러리, 바이너리 파일, 데이터 파일 등의 물리적 실체와 이것들의관계들을 그림으로 표현해서 소프트웨어 실체의 변하지 않는 물리적 구조를 보여준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeMapNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;topNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMapNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;topNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeMapNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREATER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMapNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMapNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TreeMapNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;itsKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;itsValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findSubNodeForKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectSubNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectSubNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREATER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findSubNodeForKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;itsValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;addSubNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectSubNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeMapNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;클래스-다이어그램&quot;&gt;클래스 다이어그램&lt;/h3&gt;
&lt;p&gt;클래스 다이어그램(class diagram)은 프로그램 안의 주요 클래스와 주요 관계를 보여 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/class-diagram.png&quot; alt=&quot;class-diagram&quot; title=&quot;class-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사각형은 클래스를 나타내고, 화살표는 관계를 나타낸다.&lt;/li&gt;
  &lt;li&gt;위 다이어그램에서 모든 관계는 연관(association)이다. 연관은 한쪽 객체가 다른 쪽 객체를 참조하며, 그 참조를 통해 그 객체의 메서드를 호출하는 것을 나타내는 단순한 데이터 관계다.&lt;/li&gt;
  &lt;li&gt;연관 위에 쓴 이름은 참조를 담는 변수의 이름과 대응된다.&lt;/li&gt;
  &lt;li&gt;화살표 옆에 쓴 숫자는 인스턴스의 개수를 타나낸다.&lt;/li&gt;
  &lt;li&gt;클래스 아이콘은 여러 구획으로 나뉠 수도 있다. 첫번째 구획은 언제나 클래스 이름을 쓴다. 다른 구획에는 각각 함수와 변수를 쓴다.&lt;/li&gt;
  &lt;li&gt;«interface» 표기법은 Comparable이 인터페이스임을 나타낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체-다이어그램&quot;&gt;객체 다이어그램&lt;/h3&gt;
&lt;p&gt;객체 다이어그램(object diagram)은 시스템 실행 중 어느 순간의 객체와 관계를 포착해서 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/object-diagram.png&quot; alt=&quot;object-diagram&quot; title=&quot;object-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체는 사각형과 밑줄로 표현&lt;/li&gt;
  &lt;li&gt;이 객체가 속하는 클래스의 이름은 콜론(:) 다음에 표현&lt;/li&gt;
  &lt;li&gt;객체마다 아래 구획에 그 객체의 itsKey 변수의 값이 나와 있다.&lt;/li&gt;
  &lt;li&gt;객체 사이의 관계는 연결(link)이라고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시퀀스-다이어그램&quot;&gt;시퀀스 다이어그램&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/sequence-diagram.png&quot; alt=&quot;sequence-diagram&quot; title=&quot;sequence-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;허수아비는 알려지지 않은 메서드 호출자를 나타낸다.&lt;/li&gt;
  &lt;li&gt;대괄호([ ]) 안의 불린 표현식은 '가드(gaurd)'라고 하며, 어떤 경로를 따라가야 할 지 알려 준다.&lt;/li&gt;
  &lt;li&gt;TreeMapNode 아이콘에 닿은 화살표는 '생성(construction)'을 나타낸다.&lt;/li&gt;
  &lt;li&gt;한쪽 끝에 원이 그려진 작은 화살표는 '데이터 토큰(data token)'이라고 하고, 이 경우에는 생성자의 인자를 나타낸다.&lt;/li&gt;
  &lt;li&gt;TreeMap 아래 홀쭉한 사각형은 '활성 상자(activation)'라고 부르는데, add 메서드가 실행되는 데 시간이 어느 정도 걸리는지 보여 준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;협력-다이어그램&quot;&gt;협력 다이어그램&lt;/h3&gt;
&lt;p&gt;협력 다이어그램(collaboration diagram)의 정보는 시퀀스 다이어그램에 담긴 정보와 똑같다. 하지만 시퀀스 다이어그램은 메시지를 보내고 받는 순서를 명확히 하는 것이 목적인 반면, 협력 다이어그램은 객체 사이의 관계를 명확히 하는 것이 목적이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/collaboration-diagram.png&quot; alt=&quot;Collaboration-diagram&quot; title=&quot;Collaboration-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체들은 연결이라고 부르는 관계로 맺어지고, 어떤 객체가 다른 객체에 메시지를 보낼 수 있다면 두 객체 사이에 연결이 있다고 말한다.&lt;/li&gt;
  &lt;li&gt;메시지는 작은 화살표로 그리며, 메시지 위에는 메시지 일므과 시퀀스 숫자, 그리고 이 메시지를 보낼 때 적용하는 모든 가드를 적는다.&lt;/li&gt;
  &lt;li&gt;호출의 계층 구조는 시퀀스 숫자에서 볼 수 있는 점(.)을 사용한 구조로 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;상태-다이어그램&quot;&gt;상태 다이어그램&lt;/h3&gt;
&lt;p&gt;아래는 지하철 개찰구를 상태 기계로 표현한 것인데, Locked(잠김)와 Unlocked(풀림)라는 두 가지 '상태'가 있고, 두 가지 '이벤트'를 받을 수 있다. coin 이벤트는 사용자가 개찰구에 표를 넣었음을 뜻하고, pass 이벤트는 사용자가 개찰구를 통해 지나감을 뜻한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/state-diagram.png&quot; alt=&quot;state-diagram&quot; title=&quot;state-diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;화살표는 '전이(transition)'라고 부른다. 이 전이 화살표에는 전이를 일으키는 이벤트와 전이가 수행하는 행동을 레이블로 단다. 전이가 일어나면 시스템의 상태가 바뀐다.&lt;/p&gt;

&lt;p&gt;이런 다이어그램은 시스템의 행동 방식을 파악할 때 유용하다. 어떤 사용자가 표를 넣은 다음 아무 이유 없이 '다시 표를 넣는 것처럼' 예상하지 못한 경우에 시스템이 어떻게 행동해야 하는지 탐색할 기회를 마련해 준다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-다이어그램으로-작업하기&quot;&gt;2. 다이어그램으로 작업하기&lt;/h1&gt;

&lt;h3 id=&quot;왜-모델을-만들어야-하는가&quot;&gt;왜 모델을 만들어야 하는가&lt;/h3&gt;
&lt;p&gt;어떤 것이 실제로도 잘 작동하느지 알아보려고 만드는 것이 모델이다. 여기에 모델은 반드시 시험해 볼 수 있어야 한다는 의미가 함축되어 있다. 모델을 만드는 비용이 실제 물건을 만드는 비용보다 훨씬 적을 경우에 모델을 만들어서 설계를 검사해 본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;왜 소프트웨어 모델을 만드는가&lt;/strong&gt;&lt;br /&gt;
UML 다이어그램을 그리는 일은 소프트웨어를 작성하는 일보다 비용이 적긴 하지만, 다른 분야(항공, 건축 등)의 모델처럼 훨씬 적게 드는 것은 아니다. 시험해 볼 구체적인 것이 있고, 그것을 코드로 시험해 보는 것보다 UML로 시험해 보는 쪽이 비용이 덜 들 때 UML을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;반드시 코딩을 시작하기에 앞서 포괄적인 설계를 해야 하는가&lt;/strong&gt;&lt;br /&gt;
계획 없이 어떤 빌딩을 짓는 것보다 미리 계획을 짜는 것이 비용이 '훨씬 적게' 든다. 잘못된 청사진을 던져 버리는 일에는 비용이 별로 들지 않지만, 잘못된 빌딩을 부수려면 비용이 '엄청나게' 든다. 모델의 경우와 마찬가지로 다른 분야에 비해 소프트웨어 분야에서는 모든것이 이렇게 분명하지 않다. 코드를 작성하는 것보다 UML 다이어그램을 그리는 것이 훨씬 비용이 적은지는 명확하지 않다. 그러므로 코드를 작성하기에 앞서 포괄적인 UML 설계를 만들면 드는 비용만큼 효과가 있는지 명확하게 알 수 없다.&lt;/p&gt;

&lt;h3 id=&quot;uml을-효과적으로-사용하기&quot;&gt;UML을 효과적으로 사용하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;다른 사람들과 의사 소통하기&lt;/strong&gt;&lt;br /&gt;
UML은 소프트웨어 개발자끼리 설계 개념에 대한 의견을 주고 받을 때 굉장히 편리하며, 몇몇 개발자가 칠판 주위에 모여서 상당히 많은 일을 할 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;로드맵&lt;/strong&gt;&lt;br /&gt;
어떤 클래스가 다른 클래스에 의존하는지 개발자가 빨리 파악할 수 있게 해주고 전체 시스템의 구조에 대한 참조 도표로도 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;백엔드(back-end) 문서&lt;/strong&gt;&lt;br /&gt;
문서 작성을 프로젝트 막바지에 팀의 마지막 작업으로 하는 것이 가장 좋다. 그러면 작성한 문서가 팀이 프로젝트를 떠나는 마지막 시점의 사정을 잘 반영해주기 때문에 다음 프로젝트를 맡을 팀에게도 유용할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;무엇을 보관하고 무엇을 버려야 하는가&lt;/strong&gt;&lt;br /&gt;
UML 다이어그램을 던져 버리는 습관을 길러라. 더 좋은 방법은, 다이어그램을 오랫동안 기록되는 매체에 기록하지 않는 습관을 기르는 것이다. 하지만 시스템 안에서 자주 사용되는 설계상의 해결 방법을 표현하는 것은 저장해 두는 편이 좋다. 정말로 유용한 다이어그램은 자꾸만 그리게 되는데, 누군가 귀찮게 다시 그릴 필요가 없게 다이어그램을 그려서 지속되는 매체에 저장할 것이다. 이때가 이 다이어그램을 모든 사람이 볼 수 있는 곳에 붙여 놓을 시기다.&lt;/p&gt;

&lt;h3 id=&quot;반복을-통해-다듬기&quot;&gt;반복을 통해 다듬기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;행위를 제일 먼저&lt;/strong&gt;&lt;br /&gt;
버튼이 눌릴 때마다 다이얼을 돌리는 일을 제어하는 프로그램을 예로 들어보자. 버튼(Button) 객체와 다이얼(Dialer) 객체를 그리고, Button이 Dialer에 번호 메시지를 여러 개 보내는 것도 그린다. 별표(*)는 '여러 개'를 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/behavior-first-1.png&quot; alt=&quot;behavior-first-1&quot; title=&quot;behavior-first-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;번호 j메시지를 받으면 Dialer는 화면에 번호를 표시해야 하니까 아마 화면(Screen) 객체에 displayDigit 메시지를 보낼 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/behavior-first-2.png&quot; alt=&quot;behavior-first-2&quot; title=&quot;behavior-first-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 스피커를 통해 어떤 톤을 들려주는 것도 좋다. 그러므로 Button이 스피커(Speaker) 객체에도 tone 메시지를 보내게 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/behavior-first-3.png&quot; alt=&quot;behavior-first-3&quot; title=&quot;behavior-first-3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;숫자를 누르다가 마지막으로 사용자는 전송(Send) 버튼을 눌러서 이 번호로 전화를 걸고 싶다고 알려줄 것이다. 이 시점에서 우리는 셀 네트워크에 접속해서 사용자가 누른 전화번호를 전달하라고 휴대전화의 무선 부분(Radio)에 말해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/behavior-first-4.png&quot; alt=&quot;behavior-first-4&quot; title=&quot;behavior-first-4&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연결이 맺어지면 Radio은 화면 객체에 사용중 지시자에 불을 켜라고 말할 수 있다. 그런데 이 메시지를 보낼 떄는 다른 제어 스레드를 사용할 가능성이 굉장히 높다. 그럴 때는 시퀀스 번호 앞에 글자를 붙여서 이 사실을 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/behavior-first-5.png&quot; alt=&quot;behavior-first-5&quot; title=&quot;behavior-first-5&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;구조를 점검하기&lt;/strong&gt;&lt;br /&gt;
중요한 것은 의존 관계를 분석하는 일이다. 왜 Button이 Dialer에 의존해야 하는가?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itsDialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dialler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;itsDialler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Button은 다른 맥락에서도 사용할 수 있는 클래스다. 이 문제는 Button과 Dialer 사이에 인터페이스를 하나 만들어 넣으면 해결할 수 있다. Button은 저마다 고유한 식별자 토큰을 하나씩 가진다. Button 클래스는 자기가 눌렸다는 사실을 감지하면, ButtonListener 인터페이스의 buttonPressed 메서드를 호출하면서 자기 식별자 토큰을 인자로 넘긴다. 이렇게 하면 Button이 Dialer에 의존하지 않게 할 수 있으며 버튼이 눌렸다는 사실을 알아야 하는 거의 모든 경우에 Button을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/isolating-button.png&quot; alt=&quot;isolating-button&quot; title=&quot;isolating-button&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;불행하게도 이번에는 Dialer가 Button에 대해 알아야 한다. 어댑터를 몇 개 쓰면 이 문제를 풀 수 있으며, 덤으로 식별자 토큰 사용이라는 어설픈 아이디어도 없앨 수 있다. ButtonDialerAdapter는 ButtonListener 인터페이스를 구현한다. 이 어댑터의 buttonPressed 메서드가 호출될 때, 이 어댑터는 Dialer에 digit(n) 메시지를 보낸다. Dialer에 전달할 숫자(n)는 어댑터가 기억하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/adapting-button.png&quot; alt=&quot;adapting-button&quot; title=&quot;adapting-button&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;코드를 마음속으로 그려보기&lt;/strong&gt;&lt;br /&gt;
다이어그램을 그려 놓고 그 다이어그램이 나타내는 코드를 마음 속에서 그려 보지 못한다면, 공중에 누각을 짓는 것과 다를 바 없다. '지금 하는 작업을 당장 중단하고 어떻게 그 다이어그램을 코드로 바꿀 수 있는지 찾아내라.' 다이어그램 자체가 목적이 되어서는 안 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ButtonDiallerAdapter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ButtonListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ButtonDiallerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dialler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buttonPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;다이어그램의 진화&lt;/strong&gt;&lt;br /&gt;
간단한 동적인 다이어그램부터 시작해서 이런 동적인 것이 정적 관계에선느 어떤 의미인지 조사해본다. 이런 단계 하나하나는 아주 작다. 다이어그램을 아주 짧은 주기로 번갈아 보며 서로 상대를 발판 삼아 발전시킨다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/adapting-to-dynamic.png&quot; alt=&quot;adapting-to-dynamic&quot; title=&quot;adapting-to-dynamic&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;미니멀리즘&lt;/strong&gt;&lt;br /&gt;
다이어그램이 가장 유용한 때는 다른 사람과 의사 소통을 할 때와, 여러분이 설계에 관한 문제점을 푸는 일에 도움이 될 때다. UML 다이어그램은 소스코드가 아니며, 따라서 모든 메서드나 변수, 관계를 선언하는 장소로 취급해서는 안 된다.&lt;/p&gt;

&lt;h3 id=&quot;언제-어떻게-다이어그램을-그려야-하는가&quot;&gt;언제, 어떻게 다이어그램을 그려야 하는가&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;다이어그램을 그려야 할 경우&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모두 설계에서 특정한 부분의 구조를 이해해야 할 때 그려라.&lt;/li&gt;
  &lt;li&gt;두 명 이상이 특정 요소를 어떻게 설계할지 의견을 모을 필요가 있을때 그려라.&lt;/li&gt;
  &lt;li&gt;설계 아이디어로 이것저것 시도해 보고 싶을 때 그려라.&lt;/li&gt;
  &lt;li&gt;누군가에세 코드 일부분의 구조를 설명할 때 그려라.&lt;/li&gt;
  &lt;li&gt;프로젝트 마지막에 고객이나 다른 사람을 위한 문서에 포함하기 위해 다이어그램을 요구할 때 그려라.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다이어그램을 그리지 말아야 할 경우&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;공정에서 다이어그램을 그려야 한다고 정해서 다이어그램을 그리지는 마라.&lt;/li&gt;
  &lt;li&gt;코딩을 시작하기에 앞서 설계 단계의 포괄적인 문서를 만들기 위해서 그리지 마라.&lt;/li&gt;
  &lt;li&gt;다른 사람에게 어떻게 코딩을 해야 할지 알려 주기 위해서 다이어그램을 그리지 마라.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;하지만 문서화는 어떻게 합니까&lt;/strong&gt;&lt;br /&gt;
복잡한 통신 프로토콜은 문서화해야 한다. 복잡한 관계형 데이터베이스의 스키마도 문서화해야 한다. 재사용 가능한 복잡한 프레임워크도 마찬가지다. 백만 줄의 자바 코드로 된 프로젝트에 12명이 일하는 팀이라면, 모두 합쳐 25쪽에서 200쪽 사이의 영구 문서로 충분하다고 생각한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-클래스-다이어그램&quot;&gt;3. 클래스 다이어그램&lt;/h1&gt;
&lt;p&gt;클래스 다이어그램으로 소스코드에 나타내는 클래스 사이의 의존 관계를 모두 표기할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;기본-개념&quot;&gt;기본 개념&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;클래스(Class)&lt;/strong&gt;&lt;br /&gt;
클래스는 사각형으로 표시한다. 대시(-)는 private, 해시(#)는 protected, 더하기(+)는 public을 나타낸다. 변수나 함수 인자의 타입은 저마다 자기 이름 뒤에 콜론을 찍고 적는다. 함수의 반환값도 비슷하게 함수 뒤에 콜론(:)을 찍고 적는다. 세부사항은 다이어그램을 그리는 목적에 꼭 필요한 것만 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/class-diagram-1.png&quot; alt=&quot;class-diagram-1&quot; title=&quot;class-diagram-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;연관(Association)&lt;/strong&gt;&lt;br /&gt;
클래스 사이의 연관은 다른 객체의 참조(reference)를 가지는 인스턴스 변수를 의미한다. Phonebook은 '여러 개의' PhoneNumber 객체와 '연결된다'.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/class-diagram-2.png&quot; alt=&quot;class-diagram-2&quot; title=&quot;class-diagram-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&quot;Phonebook은 PhoneNumber를 여러 개 가진다.&quot;라고 말할 수도 있지만 일부러 그리 하지 않았다. 자주 사용하는 객체지향(Object Oriented)  동사인 HAS-A와 IS-A 때문에 불행한 오해가 많았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상속(Inheritance)&lt;/strong&gt;&lt;br /&gt;
화살촉을 조심해서 그리지 않으면 상속을 표현하는지 연관을 표현하는지 구분하기 힘들 수 있다. 그래서 흔히 상속 관계는 세로로, 연관 관계는 가로로 그린다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/inheritance-1.png&quot; alt=&quot;inheritance-1&quot; title=&quot;inheritance-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자바 클래스와 자바 인터페이스 사이의 상속(implements) 관계를 나타내기 위해 점선을 그리기도 하지만, 칠판에 다이어그램을 그릴 때는 점선으로 그리는 것을 무시했으면 좋겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/inheritance-2.png&quot; alt=&quot;inheritance-2&quot; title=&quot;inheritance-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;세부사항&quot;&gt;세부사항&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;클래스 스테레오타입(Class Stereotypes)&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;«interface». 이 스테레오타입이 붙은 클래스의 메서드는 모두 추상 메서드이므로, 어떤 메서드도 구현해서는 안 된다. 인스턴스 변수를 가지지 못하고 오직 정적(static) 변수만 가질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/class-stereotype-1.png&quot; alt=&quot;class-stereotype-1&quot; title=&quot;class-stereotype-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;«utility». 클래스의 모든 메서드와 변수들은 정적(static)이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/class-stereotype-2.png&quot; alt=&quot;class-stereotype-2&quot; title=&quot;class-stereotype-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;추상 클래스(Abstract classes)&lt;/strong&gt;&lt;br /&gt;
UML에서 추상 클래스나 추상 메서드를 표기하는 방법은 두 가지다. 이름을 이탤릭체로 적거나, {abstract} 프로퍼티를 사용하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/abstract-class.png&quot; alt=&quot;abstract-class&quot; title=&quot;abstract-class&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로퍼티(Properties)&lt;/strong&gt;&lt;br /&gt;
{abstract} 같은 프로퍼티는 어떤 클래스에도 붙일 수 있다. 프로퍼티는 보통 클래스에 속하지 않는 추가 정보를 나타낸다. 프로퍼티는 다음처럼 쉼표(,)로 구분리된 이름-값 쌍으로 적는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{author=Martin, date=20020429, file=shape.java, private}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;집합(Aggregation)&lt;/strong&gt;&lt;br /&gt;
집합은 '부분/전체' 관계를 내포하는 연관의 특별한 형태다. UML이 집합에 유일하게 제공하는 명확한 규칙은 다음 몇 가지 뿐이다. 전체는 자신의 부분이 될 수 없다. 따라서 '인스턴스'들이 집합을 통한 순환 고리를 만들 수는 없다. 어떤 객체가 자기 자신의 부분이 될수 없고, 두 객체가 서로 상대 객체의 부분이 될 수도 없고, 세 객체가 전체/부분 관계의 고리를 만들 수도 없다 등등.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/aggregation.png&quot; alt=&quot;aggregation&quot; title=&quot;aggregation&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;합성(Composition)&lt;/strong&gt;&lt;br /&gt;
합성은 집합의 특별한 형태다. 자바 프로그램에서는 이 관계가 그다지 유용하지 않다. 반면 C++ 프로그래머에게는 합성 관계가 '매우' 유용하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다수성(Multiplicity)&lt;/strong&gt;&lt;br /&gt;
객체는 다른 객체들의 배열이나 벡터를 가질 수 있으며, 같은 종류의 객체라도 배열이 아니라 여러 인스턴스 변수에 따로 가질 수도 있다. 단순한 숫자나 숫자 범위를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/multiplicity.png&quot; alt=&quot;Multiplicity&quot; title=&quot;multiplicity&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;연관 스테레오타입(Association Stereotypes)&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;«create». 연관의 원본이 연관의 대상을 생성함을 나타낸다. 전형적인 팩터리(Factory).&lt;/li&gt;
  &lt;li&gt;«local». 원본 클래스가 대상 클래스의 인스턴스를 만들고 그 인스턴스의 참조가 지역 변수에 담길 때 사용한다.&lt;/li&gt;
  &lt;li&gt;«parameter». 원본 클래스의 멤버 함수가 호출될 때 대상 인스턴스가 인자로 넘어옴으로써 원본 클래스가 대상 클래스에 접근할 수 있게 됨을 보여준다.&lt;/li&gt;
  &lt;li&gt;«delegate». 원본 클래스의 멤버 함수가 호출될 때 이 호출을 대상 클래스에 그대로 전달해서 대상 클래스의 멤버 함수를 호출하는 경우 등에 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/association-stereotypes.png&quot; alt=&quot;association-stereotypes&quot; title=&quot;association-stereotypes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;내부 클래스(Inner Classes)&lt;/strong&gt;&lt;br /&gt;
연관의 가까운 쪽 끝에다가 내부에 십자 표시를 한 원을 덧붙여서 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/inner-classes.png&quot; alt=&quot;inner-classes&quot; title=&quot;inner-classes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;익명 내부 클래스(Anonymous Inner Classes)&lt;/strong&gt;&lt;br /&gt;
«anonymous» 스트레오타입과 자신이 구현하는 인터페이스의 이름을 가지는 중첩된 클래스로 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/21/anonymous-inner-classes.png&quot; alt=&quot;anonymous-inner-classes&quot; title=&quot;anonymous-inner-classes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;연관 클래스(Association classes)&lt;/strong&gt;&lt;br /&gt;
연관 클래스는 특정한 연관을 어떻게 구현하는지 보여 준다. 다이어그램에서 연관 클래스는 연관과 점선으로 연결된 보통 클래스로 그린다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;연관 한정사(Association Qualifiers)&lt;/strong&gt;&lt;br /&gt;
일반적인 자바 참조가 아니라 어떤 종류의 키나 토큰을 통해 연관을 구현할 경우, 연관 한정사(association qualifiers)를 사용한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788991268937&quot;&gt;UML 실전에서는 이것만 쓴다: JAVA 프로그래머를 위한 UM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.csd.uoc.gr/~hy252/references/UML_for_Java_Programmers-Book.pdf&quot;&gt;UML_for_Java_Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/04/16/java-performance-tuning-4.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/04/16/java-performance-tuning-4.html"/>
        <title>자바 성능 튜닝 이야기 - 4</title>
        <updated>2019-04-16T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/java_performance_tuning.jpeg&quot; alt=&quot;java_performance_tuning&quot; title=&quot;java_performance_tuning&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;16-jvm은-도대체-어떻게-구동될까&quot;&gt;16. JVM은 도대체 어떻게 구동될까?&lt;/h1&gt;
&lt;p&gt;자바를 만든 Sun에서는 자바의 성능을 개선하기 위해서 Just In Time(JIT) 컴파일러를 만들었고, 이름을 HotSpot으로 지었다. 여기서 JIT 컴파일러는 프로그램의 성능에 영향을 주는 지점에 대해서 지속적으로 분석한다. 분석된 지점은 부하를 최소화하고, 높은 성능을 내기 위한 최적화의 대상이 된다. 이 HotSpot은 자바 1.3 버전부터 기본 VM으로 사용되어 왔기 때문에, 지금 운영되고 있는 대부분의 시스템들은 모두 HotSpot 기반의 VM이라고 생각하면 된다. HotSpot VM은 세 가지 주요 컴포넌트로 되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM(Virtual Machine) 런타임&lt;/li&gt;
  &lt;li&gt;JIT(Just In Time) 컴파일러&lt;/li&gt;
  &lt;li&gt;메모리 관리자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/hotspot-vm.png&quot; alt=&quot;hotspot-vm&quot; title=&quot;hotspot-vm&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;'HotSpot VM Runtime'에 'GC'와 'JIT 컴파일러'를 끼워 맞춰 사용할 수 있다. 이를 위해서 'VM 런타임'은 JIT 컴파일러용 API와 가비지 컬렉터용 API를 제공한다. 그리고, JVM을 시작하는 런처와 스레드 관리, JNI 등도 VM 런타임에서 제공한다.&lt;/p&gt;

&lt;h3 id=&quot;jit-optimizer라는게-도대체-뭘까&quot;&gt;JIT Optimizer라는게 도대체 뭘까?&lt;/h3&gt;
&lt;p&gt;모든 코드는 초기에 인터프리터에 의해서 컴파일되고, 해당 코드가 충분히 많이 사용될 경우에 JIT가 컴파일할 대상이 된다. HotSpot VM에서 이 작업은 각 메서드에 있는 카운터를 통해서 통제되며, 메서드에는 두 개의 카운터가 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수행 카운터(Invocation counter): 메서드를 시작할 때마다 증가&lt;/li&gt;
  &lt;li&gt;백에지 카운터(backedge counter): 높은 바이트 코드 인덱스에서 낮은 인덱스로 컨트롤 흐름이 변경될 때마다 증가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;backedge counter는 메서드가 루프가 존재하는지를 확인할 때 사용되며, Invocation counter 보다 컴파일 우선순위가 높다.&lt;/p&gt;

&lt;p&gt;이 카운터들이 인터프리터에 의해서 증가될 때마다 그 값들이 한계치에 도달했는지를 확인하고, 도달했을 경우 인터프리터는 컴파일을 요청한다. Invocation counter에서 사용하는 한계치는 CompileThreashold이며, backedge counter에서 사용하는 한계치는 다음의 공식을 계산한다.&lt;/p&gt;

&lt;p&gt;CompileThreashold * OnStackReplacePercentage / 100&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 두 개의 값들은 JVM이 시작할 때 지정 가능하며 다음과 같이 시작 옵션에 지정할 수 있다.&lt;br /&gt;
-XX:CompileThreashold=35000&lt;br /&gt;
-XX:OnStackReplacePercentage=80&lt;br /&gt;
이렇게 지정하면 메서드가 35000번 호출되었을 때 JIT에서 컴파일을 하며, backedge counter가 35000 * 80 / 100 = 28000이 되었을때 컴파일된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컴파일이 요청되면 컴파일 대상 목록의 큐에 쌓이고, 하나 이상의 컴파일러 스레드가 이 큐를 모니터링한다. 만약 컴파일 스레드가 바쁘지 않을 때는 큐에서 대상을 빼내서 컴파일을 시작한다. 보통 인터프리터는 컴파일이 종료되기를 기다리지 않고 Invocation counter를 리셋하고 인터프리터에서 메서드 수행을 계속한다. 컴파일이 종료되면 컴파일된 코드와 메서드가 연결되어 그 이후부터는 메서드가 호출되면 컴파일된 코드를 사용하게 된다. 만약 인터프리터에서 컴파일이 종료될 때까지 기다리도록 하려면 JVM 시작시 -Xbatch나 -XX:-BackgroundCompilation 옵션을 지정하여 컴파일을 기다리도록 할 수도 있다.&lt;/p&gt;

&lt;p&gt;HotSpot VM은 OSR(On Stack Replacement)이라는 특별한 컴파일도 수행한다. 이 OSR은 인터프리터에서 수행한 코드 중 오랫동안 루프가 지속되는 경우에 사용된다. 만약 해당 코드의 컴파일이 완료된 상태에서 최적화되지 않은 코드가 수행되고 있는 것을 발견한 경우에 인터프리터에 계속 머무르지 않고 컴파일된 코드로 변경한다. 이 작업은 인터프리터에서 시작된 오랫동안 지속되는 루프가 다시는 불리지 않을 경우엔 도움이 되지 않지만, 루프가 끝나지 않고 지속적으로 수행되고 있을 경우에는 큰 도움이 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java 5 HotSpot VM이 발표되면서 새로운 기능이 추가되었다. 이 기능은 JVM이 시작될 떄 플랫폼과 시스템 설정을 평가하여 자동으로 garbage collector를 선정하고, 자바 힙 사이즈와 JIT 컴파일러를 선택하는 것이다. 이 기능을 통해서 애플리케이션의 활동과 객체 할당 비율에 따라서 garbage collector가 동적으로 자바 힙 사이즈를 조절하며, New의 Eden과 Survivor, Old 영역의 비율을 자동적으로 조절하는 것을 의미한다. 이 기능은 -XX:+UseParallelGC와 -XX:+UseParallelOldGC에서만 적용되며, 이 기능을 제거하려면 -XX:-UseAdaptiveSizePolicy라는 옵션을 적용하여 끌 수가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jrockit의-jit-컴파일-및-최적화-절차&quot;&gt;JRockit의 JIT 컴파일 및 최적화 절차&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/jrockit-1.gif&quot; alt=&quot;jrockit-1&quot; title=&quot;jrockit-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JVM은 각 OS에서 작동할 수 있도록 자바 코드를 입력 값(정확하게는 바이트코드)으로 받아 각종 변환을 거친 후 해당 칩의 아키텍처에서 잘 돌아가는 기계어 코드로 변환되어 수행되는 구조로 되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/jrockit-2.gif&quot; alt=&quot;jrockit-2&quot; title=&quot;jrockit-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JRockit은 이와 같이 최적화 단계를 거치도록 되어 있으며, 각각의 단계는 다음의 작업을 수행한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JRockit runs JIT compilation&lt;/strong&gt;&lt;br /&gt;
자바 애플리케이션을 실행하면 기본적으로는 1번 단계인 JIT 컴파일을 거친 후 실행이 된다. 이 단계를 거친 후 메서드가 수행되면, 그 다음부터는 컴파일된 코드를 호출하기 때문에 처리 성능이 빨라진다.&lt;br /&gt;
애플리케이션이 시작하는 동안 몇천 개의 새로운 메서드가 수행되며 이로 인해 다른 JVM보다 JRockit JVM이 더 느릴 수 있다. 그리고 이 작업으로 인해 JIT가 메서드를 수행하고 컴파일하는 작업은 오버헤드가 되지만, JIT가 없으면 JVM은 계속 느린 상태로 지속될 것이다. 다시 말해서 JIT를 사용하면 시작할 때의 성능은 느리겠지만, 지속적으로 수행할 때는 더 빠른 처리가 가능하다. 따라서 모든 메서드를 컴파일하고 최적화하는 작업은 JVM 시작 시간을 느리게 만들기 때문에 시작할 때는 모든 메서드를 최적화하지는 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JRockit monitors threads&lt;/strong&gt;&lt;br /&gt;
JRockit에는 'sampler thread'라는 스레드가 존재하며 주기적으로 애플리케이션의 스레드를 점검한다. 이 스레드는 어떤 스레드가 동작 중인지 여부와 수행 내역을 관리한다. 이 정보들을 통해서 어떤 메서드가 많이 사용되는지를 확인하여 최적화 대상을 찾는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JRockit JVM performs optimization&lt;/strong&gt;&lt;br /&gt;
'sampler thread'가 식별한 대상을 최적화한다. 이 작업은 백그라운드에서 진행되며 수행중인 애플리케이션에 영향을 주지는 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm이-시작할-때의-절차는-이렇다&quot;&gt;JVM이 시작할 때의 절차는 이렇다&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;java 명령어 줄에 있는 옵션 파싱:&lt;br /&gt;
일부 명령은 자바 실행 프로그램에서 적절한 JIT 컴파일러를 선택하는 등의 작업을 하기 위해서 사용하고 다른 명령들은 HotSpot VM에 전달된다.&lt;/li&gt;
  &lt;li&gt;자바 힙 사이즈 할당 및 JIT 컴파일러 타입 지정:&lt;br /&gt;
메모리 크기나 JIT 컴파일러 종류가 명시적으로 지정되지 않은 경우에 자바 실행 프로그램이 시스템의 상황에 맞게 선정한다. 이 과정은 좀 복잡한 단계(HotSpot VM Adaptive Tuning)을 거치니 일단 넘어가자.&lt;/li&gt;
  &lt;li&gt;CLASSPATH와 LD_LIBRARY_PATH 같은 환경 변수를 지정한다.&lt;/li&gt;
  &lt;li&gt;자바의 Main 클래스가 지정되지 않았으면, Jar 파일의 manifest 파일에서 Main 클래스를 확인한다.&lt;/li&gt;
  &lt;li&gt;JNI의 표준 API인 JNI_CreateJavaVM를 사용하여 새로 생성한 non-primordial이라는 스레드에서 HotSpot VM을 생성한다.&lt;/li&gt;
  &lt;li&gt;HotSpot VM이 생성되고 초기화되면, Main 클래스가 로딩된 런처에서는 main() 메서드의 속성 정보를 읽는다.&lt;/li&gt;
  &lt;li&gt;CallStaticVoidMethod는 네이티브 인터페이스를 불러 HotSpot VM에 있는 main() 메서드가 수행된다. 이때 자바 실행 시 Main 클래스 뒤에 있는 값들이 전달된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;추가로 5.에 있는 자바의 가상 머신(JVM)을 생성하는 JNI_CreateJavaVM 단계에 대해서 더 알아보자. 이 단계에서는 다음의 절차를 거친다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JNI_CreateJavaVM는 동시에 두개의 스레드에서 호출할 수 없고, 오직 하나의 HotSpot VM 인스턴스가 프로세스 내에서 생성될 수 있도록 보장한다. HotSpot VM이 정적인 데이터 구조를 생성하기 때문에 다시 초기화는 불가능해서 오직 하나의 HotSpot VM이 프로세스에서 생성될 수 있다.&lt;/li&gt;
  &lt;li&gt;JNI 버전이 호환성 있는지 점검하고, GC 로깅을 위한 준비도 완료한다.&lt;/li&gt;
  &lt;li&gt;OS 모듈들이 초기화된다. 예를 들면 랜덤 번호 생성기, PID 할당 등이 여기에 속한다.&lt;/li&gt;
  &lt;li&gt;커맨드 라인 변수와 속성들이 JNI_CreateJavaVM 변수에 전달되고, 나중에 사용하기 위해서 파싱한 후 보관한다.&lt;/li&gt;
  &lt;li&gt;표준 자바 시스템 속성(properties)이 초기화된다.&lt;/li&gt;
  &lt;li&gt;동기화, 메모리, safepoint 페이지와 같은 모듈들이 초기화된다.&lt;/li&gt;
  &lt;li&gt;libzip, libhpi, libjava, libthread와 같은 라이브러리들이 로드된다.&lt;/li&gt;
  &lt;li&gt;시그널 처리기가 초기화 및 설정된다.&lt;/li&gt;
  &lt;li&gt;스레드 라이브러리가 초기화된다.&lt;/li&gt;
  &lt;li&gt;출력(output) 스트림 로거가 초기화된다.&lt;/li&gt;
  &lt;li&gt;JVM을 모니터링하기 위한 에이전트 라이브러리가 설정되어 있으면 초기화 및 시작된다.&lt;/li&gt;
  &lt;li&gt;스레드 처리를 위해서 필요한 스레드 상태와 스레드 로컬 저장소가 초기화된다.&lt;/li&gt;
  &lt;li&gt;HotSpot VM의 '글로벌 데이터'들이 초기화된다. 글로벌 데이터에는 이벤트 로그(event log), OS 동기화, 성능 통계 메모리(perfMemory), 메모리 할당자(chunkPool)들이 있다.&lt;/li&gt;
  &lt;li&gt;HotSpot VM에서 스레드를 생성할 수 있는 상태가 된다. main 스레드가 생성되고, 현재 OS 스레드에 붙는다. 그러나 아직 스레드 목록에 추가되지는 않는다.&lt;/li&gt;
  &lt;li&gt;자바 레벨의 동기화가 초기화 및 활성화된다.&lt;/li&gt;
  &lt;li&gt;부트 클래스로더, 코드 캐시, 인터프리터, JIT 컴파일러, JNI, 시스템 dictionary, '글로벌 데이터' 구조의 집합인 universe 등이 초기화된다.&lt;/li&gt;
  &lt;li&gt;스레드 목록에 자바 main 스레드가 추가되고 universe의 상태를 점검한다. HotSpot VM의 중요한 기능을 하는 HotSpot VM Thread가 생성된다. 이 시점에 HotSpot VM의 현재 상태를 JVMTI에 전달한다.&lt;/li&gt;
  &lt;li&gt;java.lang 패키지에 있는 String, System, Thread, ThreadGroup, Class 클래스와 java.lang의 하위 패키지에 있는 Method, Finalizer 클래스 등이 로딩되고 초기화된다.&lt;/li&gt;
  &lt;li&gt;HotSpot VM의 시그널 핸들러 스레드가 시작되고 JIT 컴파일러가 초기화되며 HotSpot의 컴파일 브로커 스레드가 시작된다. 그리고 HotSpot VM과 관련된 각종 스레드들이 시작한다. 이때부터 HotSpot VM의 전체 기능이 동작한다.&lt;/li&gt;
  &lt;li&gt;JNIEnv가 시작되며 HotSpot VM을 시작한 호출자에게 새로운 JNI 요청을 처리할 상황이 되었다고 전달해 준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 복잡한 JNI_CreateJavaVM 시작 단계를 거치고 나머지 단계들을 거치면 JVM이 시작된다.&lt;/p&gt;

&lt;h3 id=&quot;jvm이-종료될-때의-절차는-이렇다&quot;&gt;JVM이 종료될 때의 절차는 이렇다&lt;/h3&gt;
&lt;p&gt;HotSpot VM의 종료는 다음의 DestroyJavaVM 메서드의 종료 절차를 따른다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HotSpot VM이 작동중인 상황에서는 단 하나의 데몬이 아닌 스레드(nondaemon thread)가 수행될 때까지 대기한다.&lt;/li&gt;
  &lt;li&gt;java.lang 패키지에 있는 Shutdown 클래스의 shutdown() 메서드가 수행된다. 이 메서드가 수행되면 자바 레벨의 shutdown hook이 수행되고, finalization-on-exit이라는 값이 true일 경우에 자바 객체 finalizer를 수행한다.&lt;/li&gt;
  &lt;li&gt;HotSpot VM 레벨의 shutdown hook을 수행함으로써 HotSpot VM의 종료를 준비한다. 이 작업은 JVM_OnExit() 메서드를 통해서 지정된다. 그리고 HotSpot VM의 profiler, stat sampler, watcher, garbage collector 스레드를 종료시킨다. 이 작업들이 종료되면 JVMTI를 비활성화하며 Signal 스레드를 종료시킨다.&lt;/li&gt;
  &lt;li&gt;HotSpot의 JavaThread::exit() 메서드를 호출하여 JNI 처리 블록을 해제한다. 그리고 guard pages 스레드 목록에 있는 스레드들을 삭제한다. 이 순간부터는 HotSpot VM에서 자바 코드를 실행하지 못한다.&lt;/li&gt;
  &lt;li&gt;HotSpot VM 스레드를 종료한다. 이 작업을 수행하면 HotSpot VM에 남아 있는 HotSpot VM 스레드들을 safepoint로 옮기고 JIT 컴파일러 스레드들을 중지시킨다.&lt;/li&gt;
  &lt;li&gt;JNI, HotSpot VM, JVMTI barrier에 있는 추적(tracing) 기능을 종료시킨다.&lt;/li&gt;
  &lt;li&gt;네이티브 스레드에서 수행하고 있는 스레드들을 위해서 HotSpot의 &quot;vm exited&quot; 값을 설정한다.&lt;/li&gt;
  &lt;li&gt;현재 스레드를 삭제한다.&lt;/li&gt;
  &lt;li&gt;입출력 스트림을 삭제하고 PrefMemory 리소스 연결을 해제한다.&lt;/li&gt;
  &lt;li&gt;JVM 종료를 호출한 호출자로 복귀한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;클래스-로딩-절차도-알고-싶어요&quot;&gt;클래스 로딩 절차도 알고 싶어요&lt;/h3&gt;
&lt;p&gt;자바 클래스가 메모리에 로딩되는 절차는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;주어진 클래스의 이름으로 class path에 있는 바이너리로 된 자바 클래스를 찾는다.&lt;/li&gt;
  &lt;li&gt;자바 클래스를 정의한다.&lt;/li&gt;
  &lt;li&gt;해당 클래스를 나타내는 java.lang 패키지의 Class 클래스의 객체를 생성한다.&lt;/li&gt;
  &lt;li&gt;링크 작업이 수행된다. 이 단계에서 static 필드를 생성 및 초기화하고 메서드 테이블을 할당한다.&lt;/li&gt;
  &lt;li&gt;클래스의 초기화가 진행되며 static 블록과 static 필드가 가장 먼저 초기화된다. 당연한 이야기지만 해당 클래스가 초기화 되기 전에 부모 클래스의 초기화가 먼저 이루어진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 나열하니 단계가 복잡해 보이지만, loading -&amp;gt; linking -&amp;gt; initializing 로 기억하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;예외는-jvm에서-어떻게-처리될까&quot;&gt;예외는 JVM에서 어떻게 처리될까?&lt;/h3&gt;
&lt;p&gt;JVM은 자바 언어의 제약을 어겼을 때 예외(exception)라는 시그널로 처리한다. HotSpot VM 인터프리터, JIT 컴파일러 및 다른 HotSpot VM 컴포넌트는 예외 처리와 모두 관련되어 있다. 일반적인 예외 처리 경우는 아래 두 가지 경우다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예외를 발생한 메서드에서 잡을 경우&lt;/li&gt;
  &lt;li&gt;호출한 메서드에 의해서 잡힐 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;후자의 경우에는 보다 복잡하며 스택을 뒤져서 적당한 핸들러를 찾는 작업을 필요로 한다.&lt;/p&gt;

&lt;p&gt;예외는,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;던져진 바이트 코드에 의해서 초기화될 수 있으며,&lt;/li&gt;
  &lt;li&gt;VM 내부 호출의 결과로 넘어올 수도 있고,&lt;/li&gt;
  &lt;li&gt;JNI 호출로부터 넘어올 수도 있고,&lt;/li&gt;
  &lt;li&gt;자바 호출로부터 넘어올 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 가장 마지막 경우는 단순히 앞의 세가지 경우의 마지막 단계에 속할 뿐이다.&lt;/p&gt;

&lt;p&gt;VM이 예외가 던져졌다는 것을 알아차렸을 때, 해당 예외를 처리하는 가장 가까운 핸들러를 찾기 위해서 HotSpot VM 런타임 시스템이 수행된다. 이 때 핸들러를 찾기 위해서는 다음의 3개 정보가 사용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현재 메서드&lt;/li&gt;
  &lt;li&gt;현재 바이트 코드&lt;/li&gt;
  &lt;li&gt;예외 객체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 현재 메서드에서 핸들러를 찾지 못했을 때는 현재 수행되는 스택 프레임을 통해서 이전 프레임을 찾는 작업을 수행한다. 적당한 핸들러를 찾으면, HotSpot VM 수행 상태가 변경되며, HotSpot VM은 핸들러로 이동하고 자바 코드 수행은 계속된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;17-도대체-gc는-언제-발생할까&quot;&gt;17. 도대체 GC는 언제 발생할까?&lt;/h1&gt;

&lt;h3 id=&quot;자바의-runtime-data-area는-이렇게-구성된다&quot;&gt;자바의 Runtime data area는 이렇게 구성된다&lt;/h3&gt;
&lt;p&gt;자바에서 데이터를 처리하기 위한 영역에는 어떤 것들이 있는지 살펴보자. 다음은 오라클에서 제공하는 자바 스펙 관련 문서에 명시된 영역들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PC 레지스터&lt;/li&gt;
  &lt;li&gt;JVM 스택&lt;/li&gt;
  &lt;li&gt;힙(Heap)&lt;/li&gt;
  &lt;li&gt;메서드 영역&lt;/li&gt;
  &lt;li&gt;런타임 상수(constant) 풀&lt;/li&gt;
  &lt;li&gt;네이티브 메서드 스택&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 영역 중에서 GC가 발생하는 부분이 바로 힙 영역이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/java-runtime-data.png&quot; alt=&quot;java-runtime-data&quot; title=&quot;java-runtime-data&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상단에 있는 'Class Loader Subsystem'은 클래스나 인터페이스르 JVM으로 로딩하는 기능을 수행하고, 'Execution Engine'은 로딩된 크래스의 메서드들에 포함되어 있는 모든 인스트럭션 정보를 실행한다. 이 그림을 보면 좀 복잡해 보이지만, 단순하게 이야기해서 자바의 메모리 영역은 'Heap 메모리'와 'Non-Heap 메모리'로 나뉜다.&lt;/p&gt;

&lt;h3 id=&quot;heap-메모리&quot;&gt;Heap 메모리&lt;/h3&gt;
&lt;p&gt;클래스 인스턴스, 배열이 이 메모리에 쌓인다. 이 메모리는 '공유(shared) 메모리'라고도 불리며 여러 스레드에서 공유하는 데이터들이 저장되는 메모리다.&lt;/p&gt;

&lt;h3 id=&quot;non-heap-메모리&quot;&gt;Non-heap 메모리&lt;/h3&gt;
&lt;p&gt;이 메모리는 자바의 내부 처리를 위해서 필요한 영역이다. 여기서 주된 영역이 바로 메서드 영역이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Method Area&lt;/strong&gt;: 메서드 영역은 모든 JVM 스레드에서 공유한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java Stacks&lt;/strong&gt;: 스레드가 시작할 때 JVM 스택이 생성된다. 이 스택에는 메서드가 호출되는 정보인 프레임(frame)이 저장된다. 그리고 지역 변수와 임시 결과, 메서드 수행과 리턴에 관련된 정보들도 포함된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PC Registers&lt;/strong&gt;: 자바의 스레드들은 각자의 PC(Program Counter) 레지스터를 갖는다. 네이티브한 코드를 제외한 모든 자바 코드들이 수행될 때 JVM의 인스트럭션 주소를 PC 레지스터에 보관한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Native Method Stacks&lt;/strong&gt;: 자바 코드가 아닌 다른 언어로 된 코드들이 실행하게 될 때의 스택 정보를 관리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;스택의 크기는 고정하거나 가변적일 수 있다. 만약 연산을 하다가 JVM의 스택 크기의 최대치를 넘어섰을 경우에는 StackOverflowError가 발생한다.
그리고 가변적일 경우 스택의 크기를 늘이려고 할 때 메모리가 부족하거나 스레드를 생성할 때 메모리가 부족한 경우에는 OutOfMemoryError가 발생한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;gc의-원리&quot;&gt;GC의 원리&lt;/h3&gt;
&lt;p&gt;GC 작업을 하는 가비지 컬렉터(Garbage Collector)는 다음의 역할을 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리 할당&lt;/li&gt;
  &lt;li&gt;사용 중인 메모리 인식&lt;/li&gt;
  &lt;li&gt;사용하지 않는 메모리 인식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용하지 않는 메모리를 인식하는 작업을 수행하지 않으면 할당한 메모리 영역이 꽉 차서 JVM에 행(Hang)이 걸리거나, 더 많은 메모리를 할당하려는 현상이 발생할 것이다. 만약 JVM의 최대 메모리 크기를 지정해서 전부 사용한 다음 GC를 해도 더 이상 사용 가능한 메모리 영역이 없는데 계속 메모리를 할당하려고 하면 OutOfMemoryError가 발생하여 JVM이 다운될 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/Java-Memory-Model.png&quot; alt=&quot;Java-Memory-Model&quot; title=&quot;Java-Memory-Model&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자바의 메모리 영역은 크게 Young, Old, Perm 세 영역으로 나뉜다. Perm(Permanent) 영역은 없는 걸로 치자. 이 영역은 거의 사용이 되지 않는 영역으로 클래스와 메서드 정보와 같이 자바 언어 레벨에서 사용하는 영역이 아니기 때문이다. 게다가 JDK 8부터는 이 영역이 사라진다. Young 영역은 다시 Eden 영역 및 두 개의 Survivor 영역으로 나뉘므로 우리가 고려해야 할 자바의 메모리 영역은 총 4개 영역으로 나뉜다고 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일단 메모리에 객체가 생성되면, 가장 왼쪽인 Eden 영역에 객체가 지정된다.&lt;/li&gt;
  &lt;li&gt;Eden 영역에 데이터가 꽉 차면, 이 영역에 있던 객체는 Survivor 영역으로 옮겨지거나 삭제된다. 두 개의 Survivor 영역 사이에 우선 순위가 있는 것은 아니다. 이 두 개의 영역 중 한 영역은 반드시 비어 있어야 한다. 그 비어 있는 영역에 Eden 영역에 있떤 객체 중 GC 후에 살아 남은 객체들이 이동한다.&lt;/li&gt;
  &lt;li&gt;이와 같이 Eden 영역에 있던 객체는 Survivor 영역의 둘 중 하나에 할당된다. 할당된 Survivor 영역이 차면, GC가 되면서 Eden 영역에 있는 객체와 꽉 찬 Survivor 영역에 있는 객체가 비어 있는 Survivor 영역으로 이동한다. 이러한 작업을 반복하면서 Survivor 1과 2를 왔다갔다 하던 객체들은 Old 영역으로 이동한다.&lt;/li&gt;
  &lt;li&gt;Young 영역에서 Old 영역으로 넘어가는 객체 중 Survivor 영역을 거치지 않고 바로 Old 영역으로 이동하는 객체가 있을 수 있다. 객체의 크기가 아주 큰 경우인데 예를 들어, Survivor 영역의 크기가 16MB인데 20MB를 점유하는 객체가 Eden 영역에서 생성되면 Survivor 영역으로 옮겨 갈 수 없고 바로 Old 영역으로 이동하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gc의-종류&quot;&gt;GC의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Minor GC: Young 영역에서 발생하는 GC&lt;/li&gt;
  &lt;li&gt;Major GC: Old 영역이나 Perm 영역에서 발생하는 GC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 두 가지 GC가 어떻게 상호 작용하느냐에 따라 GC 방식에 차이가 나며, 성능에도 영향을 준다.&lt;/p&gt;

&lt;p&gt;GC가 발생하거나 객체가 각 영역에서 다른 영역으로 이동할 때 애플리케이션의 병목이 발생하면서 성능에 영향을 주게 된다. 그래서 핫-스팟(Hot Spot) VM에서는 스레드 로컬 할당 버퍼(TLABs: Thread-Local Allocation Buffers)라는 것을 사용한다. 이를 통하여 각 스레드별 메모리 버퍼를 사용하면 다른 스레드에 영향을 주지 않는 메모리 할당 작업이 간으해진다.&lt;/p&gt;

&lt;h3 id=&quot;5가지-gc-방식&quot;&gt;5가지 GC 방식&lt;/h3&gt;
&lt;p&gt;JDK 7 이상에서 지원하는 GC 방식에는 다섯 가지가 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serial Collector&lt;/strong&gt;&lt;br /&gt;
Young 영역과 Old 영역이 시리얼하게(연속적으로) 처리되며 하나의 CPU를 사용한다. Sun에서는 이 처리를 수행할 때를 Stop-the-world라고 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/serial-collection-1.png&quot; alt=&quot;serial-collection-1&quot; title=&quot;serial-collection-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;살아 있는 객체들은 Eden 영역에 있다.&lt;/li&gt;
  &lt;li&gt;Eden 영역이 꽉차게 되면 To Survivor 영역(비어 있는 영역)으로 살아 있는 객체가 이동한다. 이때 Survivor 영역에 들어가기에 너무 큰 객체는 바로 Old 영역으로 이동한다. 그리고 From Survivor 영역의 살아 있는 객체는 To Survivor 영역으로 이동한다.&lt;/li&gt;
  &lt;li&gt;To Survivor 영역이 꽉 찼을 경우, Eden 영역이나 From Survivor 영역에 남아 있는 객체들은 Old 영역으로 이동한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/serial-collection-2.png&quot; alt=&quot;serial-collection-2&quot; title=&quot;serial-collection-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후에 Old 영역이나 Perm 영역에 있는 객체들은 Mark-sweep-compact 콜렉션 알고리즘을 따른다. 이 알고리즘에 대해서 간단하게 말하면, 쓰이지 않는 객체를 표시해서 삭제하고 한 곳으로 모으는 알고리즘이다. 다음과 같이 수행된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Old 영역으로 이동된 객체들 중 살아 있는 객체를 식별(mark).&lt;/li&gt;
  &lt;li&gt;Old 영역의 객체들을 훑는 작업을 수행하여 쓰레기 객체를 식별(sweep).&lt;/li&gt;
  &lt;li&gt;필요 없는 객체들을 지우고 살아 있는 객체들을 한 곳으로 모은다(compaction).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/serial-collection-3.png&quot; alt=&quot;serial-collection-3&quot; title=&quot;serial-collection-3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 작동하는 시리얼 콜렉터는 일반적으로 클라이언트 종류의 장비에서 많이 사용된다. 다시 말하면 대기 시간이 많아도 큰 문제되지 않는 시스템에서 사용된다는 의미다. 시리얼 콜렉터를 명시적으로 지정하려면 자바 명령 옵션에 -XX:+UseSerialGC를 지정하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel Collector&lt;/strong&gt;&lt;br /&gt;
다른 CPU가 대기 상태로 남아 있는 것을 최소화하는 것을 목표로 한다. Serial Collector와 달리 Young 영역에서의 콜렉션을 병렬(Parallel)로 처리한다. 많은 CPU를 사용하기 때문에 GC의 부하를 줄이고 애플리케이션의 처리량을 증가시킬 수 있다.&lt;/p&gt;

&lt;p&gt;Old 영역의 GC는 Serial Collector와 마찬가지로 Mark-sweep-compact 콜렉션 알고리즘을 사용한다. 이 방법으로 GC를 지정하려면 -XX:+UseParallelGC 옵션을 추가하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/parallel-collection.png&quot; alt=&quot;parallel-collection&quot; title=&quot;parallel-collection&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel Compacting Collector&lt;/strong&gt;&lt;br /&gt;
Parallel Collector와 다른 점은 Old 영역 GC에서 새로운 알고리즘을 사용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Marking: 살아 있는 객체를 식별하여 표시&lt;/li&gt;
  &lt;li&gt;Summary: 이전에 GC를 수행하여 컴팩션된 영역에 살아 있는 객체의 위치를 조사하는 단계&lt;/li&gt;
  &lt;li&gt;Compaction: 컴팩션을 수행하는 단계. 수행 이후에는 컴팩션된 영역과 비어 있는 영역으로 나뉜다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;병렬 콜렉터와 동일하게 이 방식도 여러 CPU를 사용하는 서버에 적합하다. GC를 사용하는 스레드 개수는 -XX:ParallelGCThreads=n 옵션으로 조정할 수 있다. 이 방식을 사용하려면 -XX:UseParallelOldGC 옵션을 추가하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrent Mark-Sweep(CMS) Collector&lt;/strong&gt;&lt;br /&gt;
힙 메모리 영역의 크기가 클 때 적합하다. Young 영역에 대한 GC는 Parallel Collector와 동일하고, Old 영역은 다음 단계를 거친다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initial mark: 매우 짧은 대기 시간으로 살아 있는 객체를 찾는 단계&lt;/li&gt;
  &lt;li&gt;Concurrent marking: 서버 수행과 동시에 살아 있는 객체에 표시를 해놓는 단계&lt;/li&gt;
  &lt;li&gt;Remark: Concurrent marking 단계에서 표시하는 동안 변경된 객체에 대해서 다시 표시하는 단계&lt;/li&gt;
  &lt;li&gt;Concurrent sweep: 표시되어 있는 쓰레기를 정리하는 단계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/cms-collector-1.png&quot; alt=&quot;cms-collector-1&quot; title=&quot;cms-collector-1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/cms-collector-2.png&quot; alt=&quot;cms-collector-2&quot; title=&quot;cms-collector-2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CMS 콜렉터 방식은 2개 이상의 프로세서를 사용하는 서버에 적당하다(웹서버). 이 방식을 사용하려면 -XX:UseConcMarkSweepGC 옵션을 추가하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G1 Collector&lt;/strong&gt;&lt;br /&gt;
지금까지 설명한 모든 GC는 Eden과 Survivor 영역으로 나뉘는 Young 영역과 Old 영역으로 구성되어 있다. 하지만 Garage First(G1)는 지금까지의 GC와는 다른 영역으로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/g1-heap.png&quot; alt=&quot;g1-heap&quot; title=&quot;g1-heap&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각 바둑의 사각형을 region이라고 하는데, Young 영역과 Old 영역이 물리적으로 나뉘어 있지 않고 각 구역의 크기는 모두 동일하다. 이 바둑판 모양의 구역이 각각 Eden, Survivor, Old 영역의 역할을 변경해 가면서 하고, Humongous라는 영역도 포함된다. G1이 Young GC를 어떻게 하는지 살펴보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;몇 개의 구역을 선정하여 Young 영역으로 지정한다.&lt;/li&gt;
  &lt;li&gt;이 Linear 하지 않은 구역에 객체가 생성되면서 데이터가 쌓인다.&lt;/li&gt;
  &lt;li&gt;Young 영역으로 할당된 구역에 데이터가 꽉 차면 GC를 수행한다.&lt;/li&gt;
  &lt;li&gt;GC를 수행하면서 살아있는 객체들만 Survivor 구역으로 이동시킨다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 살아 남은 객체들이 이동된 구역은 새로운 Survivor 영역이 된다. 그 다음에 Young GC가 발생하면 Survivor 영역에 계속 쌓는다. 그러면서 몇 번의 aging 작업을 통해서 Old 영역으로 승격된다.&lt;/p&gt;

&lt;p&gt;G1의 Old 영역 GC는 CMS GC의 방식과 비슷하며 아래 여섯 단계로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initial mark: Old 영역에 있는 객체에서 Survivor 영역의 객체를 참조하고 있는 객체들을 표시한다.&lt;/li&gt;
  &lt;li&gt;Root region scanning: Old 영역 참조를 위해서 Survivor 영역을 훑는다. 이 작업은 Young GC가 발생하기 전에 수행된다.&lt;/li&gt;
  &lt;li&gt;Concurrent mark: 전체 힙 영역에 살아있는 객체를 찾는다. 만약 이때 Young GC가 발생하면 잠시 멈춘다.&lt;/li&gt;
  &lt;li&gt;Remark: 힙에 살아있는 객체들의 표시 작업을 완료한다. 이때 Snapshot-At-The-Beginning(SATB) 알고리즘을 사용하며 이는 CMS GC에서 사용하는 방식보다 빠르다.&lt;/li&gt;
  &lt;li&gt;Cleaning: 살아있는 객체와 비어 있는 구역을 식별하고, 필요없는 객체들을 지운다. 그리고 나서 비어있는 구역을 초기화한다.&lt;/li&gt;
  &lt;li&gt;Copy: 살아있는 객체들을 비어있는 구역으로 모은다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;G1은 CMS GC의 단점을 보완하기 위해서 만들어졌으며 성능도 매우 빠르다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;18-gc가-어떻게-수행되고-있는지-보고-싶다&quot;&gt;18. GC가 어떻게 수행되고 있는지 보고 싶다&lt;/h1&gt;

&lt;h3 id=&quot;자바-인스턴스-확인을-위한-jps&quot;&gt;자바 인스턴스 확인을 위한 jps&lt;/h3&gt;
&lt;p&gt;jps는 해당 머신에서 운영중인 JVM의 목록을 보여준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlvV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Joption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gc-상황을-확인하는-jstat&quot;&gt;GC 상황을 확인하는 jstat&lt;/h3&gt;
&lt;p&gt;jstat는 GC가 수행되는 정보를 확인하기 위한 명령이다. jstat를 사용하면 유닉스 장비에서 vmstat나 netstat와 같이 라인 단위로 결과를 보여준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jstat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gc-튜닝할-때-가장-유용한-jstat-옵션은-두-개&quot;&gt;GC 튜닝할 때 가장 유용한 jstat 옵션은 두 개&lt;/h3&gt;
&lt;p&gt;jstat 명령에서 GC 튜닝을 위해서 필자가 가장 애용하는 옵션은 -gcutil과 -gccapacity이다. gccapacity 옵션은 각 영역의 크기를 알 수 있기 때문에 어떤 영역의 크기를 좀 더 늘리고 줄여야 할 지를 확인할 수 있다. gcutil 옵션은 힙 영역의 사용량을 %로 보여준다.&lt;/p&gt;

&lt;h3 id=&quot;원격으로-jvm-상황을-모니터링하기-위한-jstatd&quot;&gt;원격으로 JVM 상황을 모니터링하기 위한 jstatd&lt;/h3&gt;
&lt;p&gt;jstatd 명령어로 원격 모니터링에 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jstatd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rminame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;verbosegc-옵션을-이용하여-gc-로그-남기기&quot;&gt;verbosegc 옵션을 이용하여 gc 로그 남기기&lt;/h3&gt;
&lt;p&gt;jvmstat를 사용할 수 없는 상황이라면 어떻게 GC를 분석할 수 있을까? 자바 수행 시에 -verbosegc 옵션을 넣어주면 된다.&lt;/p&gt;

&lt;h3 id=&quot;어설프게-아는-것이-제일-무섭다&quot;&gt;어설프게 아는 것이 제일 무섭다.&lt;/h3&gt;
&lt;p&gt;예를 들어 메모리를 2GB로 지정한 시스템에 초당 1건의 요청이 오는 곳에서 한 번 요청이 올 때 10MB의 메모리가 생성된다고 가정하다. 이 시스템의 Old 영역이 1% 증가하려면 얼마나 기다려야 할까?&lt;/p&gt;

&lt;p&gt;한 번 요청 올 때 생성되는 10MB의 메모리는 Eden 영역에 쌓일 것이다. 이 데이터가 Survivor 영역으로 넘어가고 Old 영역으로 넘어갈 확률은 얼마나 될까? 보통의 경우 JVM이 자동으로 지정해주는 Young 영역과 Old 영역의 비율은 1:2 ~ 1:9 정도다. 그러면 2GB에서는 100~300MB 정도가 Young 영역에 할당될 것이다. 그럼 이 시스템의 Old 영역이 1% 증가하려면 얼마나 기다려야 할까? 정답은 없지만 적어도 5분에서 2시간 정도 소요될 것이다. 5분에 1%라면 한시간에 12%, 9시간 정도 되어야 100%에 도달하여 Full GC가 발생하게 될 것이다.&lt;/p&gt;

&lt;p&gt;메모리 릭이 발생하는지 확인하는 가장 확실한 방법은 verbosegc를 남겨서 보는 방법이다. 그리고 간단하게 확인할 수 있는 가장 확실한 방법은 Full GC가 일어난 이후에 메모리 사용량을 보는 것이다. 정확하게 이야기해서 Full GC가 수행된 후에 Old 영역의 메모리 사용량을 보자. 만약 사용량이 80% 이상이면 메모리 릭을 의심해야 한다. 그런데 Full GC를 한번도 하지 않은 시스템에 메모리 릭이 있다고 생각할 수 있는가? 어떤 시스템도 Full GC가 한번도 발생하지 않는 상황에서 메모리 릭이 있다고 이야기할 수 없다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;19-gc-튜닝을-항상-할-필요는-없다&quot;&gt;19. GC 튜닝을 항상 할 필요는 없다&lt;/h1&gt;
&lt;p&gt;GC 튜닝이 필요 없다는 이야기는 운영 중인 Java 기반 시스템의 옵션에 기본적으로 다음과 같은 것들은 추가되어 있을 때의 경우다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-Xms, -Xmx 옵션으로 메모리 크기를 지정했다.&lt;/li&gt;
  &lt;li&gt;-server 옵션이 포함되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 시스템의 로그에는 다음과 같은 타임아웃 관련 로그가 남아있지 않아야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DB 작업과 관련된 타임아웃&lt;/li&gt;
  &lt;li&gt;다른 서버와의 통신시 타임아웃&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그래서 JVM의 메모리 크기도 지정하지 않았고, Timeout이 지속적으로 발생하고 있다면 시스템에서 GC 튜닝을 하는 것이 좋다. 그런데 명심할 것은 GC 튜닝은 가장 마지막에 하는 작업이라는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;old-영역으로-넘어가는-객체의-수-최소화하기&quot;&gt;Old 영역으로 넘어가는 객체의 수 최소화하기&lt;/h3&gt;
&lt;p&gt;Oracle JVM에서 제공하는 모든 GC는 Generational GC이다. 즉 Eden 영역에서 객체가 처음 만들어지고 Survivor 영역을 오가다가 끝까지 남아 있는 객체는 Old 영역으로 이동한다. 간혹 Eden 영역에서 만들어지다가 크기가 커져서 Old 영역으로 바로 넘어가는 객체도 있긴 하다. Old 영역의 GC는 New 영역의 GC에 비하여 상대적으로 시간이 오래 소요되기 때문에 Old 영역으로 이동하는 객체의 수를 줄이면 Full GC가 발생하는 빈도를 많이 줄일 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;full-gc-시간-줄이기&quot;&gt;Full GC 시간 줄이기&lt;/h3&gt;
&lt;p&gt;Full GC의 수행 시간은 상대적으로 Young GC에 비하여 길다. 그래서 Full GC 실행에 시간이 오래 소요되면(1초 이상) 연계된 여러 부분에서 타임아웃이 발생할 수 있다. 그렇다고 Full GC 실행 시간을 줄이기 위해 Old 영역의 크기를 줄이면 OutOfMemoryError가 발생하거나 Full GC 횟수가 늘어난다. 반대로 Old 영역의 크기를 늘리면 Full GC 횟수는 줄어들지만 실행 시간이 늘어난다. Old 영역의 크기를 적절하게 '잘' 설정해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;gc의-성능을-결정하는-옵션들&quot;&gt;GC의 성능을 결정하는 옵션들&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;힙(heap) 영역 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-Xms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JVM 시작 시 힙 영역 크기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;힙(heap) 영역 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-Xmx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;최대 힙 영역 크기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New 영역 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-XX:NewRatio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New 영역과 Old 영역의 비율&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New 영역 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-XX:NewSize&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New 영역의 크기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New 영역 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-XX:SurvivorRatio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Eden 영역과 Survivor 영역의 비율&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;GC 의 성능에 많은 영향을 주는 또 다른 옵션은 GC 방식이다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;옵션&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Serial GC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-XX:+UseSerialGC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Parallel GC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-XX:+UseParallelGC&lt;br /&gt; -XX:ParallelGCTHreads=value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Parallel Compacting GC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-XX:+UseParallelOldGC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CMS GC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-XX:+UseConcMarkSweepGC&lt;br /&gt; -XX:+UseParNewGC&lt;br /&gt; -XX:+CMSParallelRemarkEnabled&lt;br /&gt; -XX:CMSInitiatingOccupancyFraction=value&lt;br /&gt; -XX:+UseCMSInitiatingOccupancyOnly&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;G1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-XX:+UnlockExperimentalVMOptions&lt;br /&gt; -XX:+UseG1GC&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;G1 GC를 제외하고는 각 GC 방식의 첫 번째 줄에 있는 옵션을 지정하면 GC 방식이 변경된다. Serial GC는 클라이언트 장비에 최적화되어 있기 때문에 특별히 신경쓸 필요가 없다.&lt;/p&gt;

&lt;h3 id=&quot;gc-튜닝-절차&quot;&gt;GC 튜닝 절차&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;GC 상황 모니터링&lt;/li&gt;
  &lt;li&gt;모니터링 결과 분석 후 GC 튜닝 여부 결정&lt;br /&gt;
분석 결과 GC 수행에 소요된 시간이 0.1~0.3초 밖에 안된다면 굳이 튜닝할 필요 없다. 하지만 1~3초, 심지어 10초 이상 걸리면 GC 튜닝을 진행해야 한다.&lt;/li&gt;
  &lt;li&gt;GC 방식/메모리 크기 지정&lt;/li&gt;
  &lt;li&gt;결과 분석&lt;/li&gt;
  &lt;li&gt;결과가 만족스러울 경우 전체 서버에 반영 및 종료&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/11261731&quot;&gt;개발자가 반드시 알아야 할 자바 성능 튜닝 이야기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/understanding-garbage-collectorsgc-in-depth&quot;&gt;Understanding HotSpot VM Garbage Collectors (GC) in Depth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E15289_01/JRSDK/underst_jit.htm&quot;&gt;Understanding Just-In-Time Compilation and Optimization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf&quot;&gt;Memory Management in the Java HotSpot™ Virtual Machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/04/06/java-performance-tuning-3.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/04/06/java-performance-tuning-3.html"/>
        <title>자바 성능 튜닝 이야기 - 3</title>
        <updated>2019-04-06T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/java_performance_tuning.jpeg&quot; alt=&quot;java_performance_tuning&quot; title=&quot;java_performance_tuning&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;11-jsp와-서블릿-spring에서-발생할-수-있는-여러-문제점&quot;&gt;11. JSP와 서블릿, Spring에서 발생할 수 있는 여러 문제점&lt;/h1&gt;
&lt;p&gt;JSP의 라이프 사이클은 다음의 단계를 거친다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JSP URL 호출&lt;/li&gt;
  &lt;li&gt;페이지 번역&lt;/li&gt;
  &lt;li&gt;JSP 페이지 컴파일&lt;/li&gt;
  &lt;li&gt;클래스 로드&lt;/li&gt;
  &lt;li&gt;인스턴스 생성&lt;/li&gt;
  &lt;li&gt;jspInit 메서드 호출&lt;/li&gt;
  &lt;li&gt;_jspService 메서드 호출&lt;/li&gt;
  &lt;li&gt;jspDestroy 메서드 호출&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서 해당 JSP 페이지가 이미 컴파일되어 있고, 클래스가 로드외어 있고, JSP 파일이 변경되지 않았다면, 가장 많은 시간이 소요되는 2~4 프로세스는 생략된다. 서버의 종류에 따라서 서버가 기동될 때 컴파일을 미리 수행하는 Precompile 옵션이 있다. 이 옵션을 선택하면 서버에 최신 버전을 반영한 이후에 처음 호출되었을 때 응답 시간이 느린 현상을 방지할 수 있다.&lt;/p&gt;

&lt;p&gt;이번에는 서블릿의 라이프 사이클을 살펴보자. WAS의 JVM이 시작한 후에는,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Servlet 객체가 자동으로 생성되고 초기화 되거나,&lt;/li&gt;
  &lt;li&gt;사용자가 해당 Servlet을 처음으로 호출했을 때 생성되고 초기화 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/servlet-life-cycle.png&quot; alt=&quot;servlet-life-cycle&quot; title=&quot;servlet-life-cycle&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음에는 계속 '사용 가능' 상태로 대기한다. 그리고 중간에 예외가 발생하면 '사용 불가능' 상태로 빠졌다가 다시 '사용 가능' 상태로 변환되기도 한다. 그리고 나서, 해당 서블릿이 더 이상 필요 없을 때는 '파기' 상태로 넘어간 후 JVM에서 '제거'된다.&lt;/p&gt;

&lt;p&gt;서블릿은 JVM에 여러 객체로 생성되지 않는다. 다시 말해서 WAS가 시작하고, '사용 가능' 상태가 된 이상 대부분의 서블릿은 JVM에 살아있고, 여러 스레드에서 해당 서블릿의 service() 메서드를 호출하여 공유한다.&lt;/p&gt;

&lt;p&gt;만약 서블릿 클래스의 메서드 내에 선언한 지역변수가 아닌 멤버변수(인스턴스 변수)를 선언하여 service() 메서드에서 사용하면 어떤 일이 벌어질까?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DontUserLikeThisServlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DontUserLikeThisServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;successFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;successFlag&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;successFlag 값은 여러 스레드에서 접근하면서 계속 바뀔 것이다. static을 사용하는 것과 거의 동일한 결과를 나타낸다. 그러므로, service() 메서드를 구현할 때는 멤버 변수나 static한 클래스 변수를 선언하여 지속적으로 변경하는 작업은 피하기 바란다.&lt;/p&gt;

&lt;h3 id=&quot;적절한-include-사용하기&quot;&gt;적절한 include 사용하기&lt;/h3&gt;
&lt;p&gt;JSP에서 사용할 수 있는 include 방식은 정적진 방식(include directive)과 동적인 방식(include action)이 있다. 정적인 방식은 JSP의 라이플 사이클 중 JSP 페이지 번역 및 컴파일 단계에서 필요한 JSP를 읽어서 메인 JSP의 자바 소스 및 클래스에 포함을 시키는 방식이다. 이와 반대로, 동적인 방식은 페이지가 호출될 때마다 지정된 페이지를 불러들여서 수행하도록 되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정적인 방식: &amp;lt;%@include file=&quot;FILE_URL&quot;%&amp;gt;&lt;/li&gt;
  &lt;li&gt;동적인 방식: &amp;lt;jsp:include page=&quot;FILE_URL&quot;/&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;동적인 방식이 정직인 방식보다 느릴 수밖에 없다. 정적인 방식과 동적인 방식의 응답 속도를 비교해보면 동적인 방식이 약 30배 더 느리게 나타난다. 즉, 성능을 더 빠르게 하려면 정적인 방식을 사용해야 한다는 의미다. 하지만 모든 화면을 정적인 방식으로 구성하면 잘 수행되던 화면에서 오류가 발생할 수 있다. 정적인 방식을 사용하면 메인 JSP에 추가되는 JSP가 생긴다. 이 때 추가된 JSP와 메인 JSP에 동일한 이름의 변수가 있으면 심각한 오류가 발생할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;자바-빈즈-잘-쓰면-약-못-쓰면-독&quot;&gt;자바 빈즈, 잘 쓰면 약 못 쓰면 독&lt;/h3&gt;
&lt;p&gt;자바 빈즈(Java Beans)는 UI에서 서버 측 데이터를 담아서 처리하기 위한 컴포넌트이다. 자바 빈즈를 통하여 userBean을 하면 성능에 많은 영향을 미치지는 않지만, 너무 많이 사용하면 JSP에서 소요되는 시간이 증가될 수 있다.&lt;/p&gt;

&lt;p&gt;한 두 개의 자바 빈즈를 사용하는 것은 상관없지만, 10~20개의 자바 빈즈를 사용하면 성능에 영향을 주게 된다. 그러므로 TO(Transfer Object) 패턴을 사용하도록 하자.&lt;/p&gt;

&lt;h3 id=&quot;스프링-프레임워크-간단-정리&quot;&gt;스프링 프레임워크 간단 정리&lt;/h3&gt;
&lt;p&gt;스프링의 핵심 기술은 바로 Dependency Injection, Aspect Oriented Programming, Portable Service Abstraction으로 함축할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/spring-triangle.png&quot; alt=&quot;spring-triangle&quot; title=&quot;spring-triangle&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dependency Injection(의존성 주입)은 객체 간의 의존 관계를 관리하는 기술 정도로 생각하면 된다. 객체는 보통 혼자서 모든 일을 처리하지 않고, 여러 다른 객체와 협엽하여 일을 처리한다. 이때 자신과 협업하는 객체와 자신과의 의존성을 가능한 낮춰야 유리하다. 다시 말해서, 어떤 객체가 필요로 하는 객체를 자기 자신이 직접 생성하여 사용하는 것이 아니라 외부에 있는 다른 무언가로부터 필요로 하는 객체를 주입 받는 기술이다. 스프링은 이렇게 의존성을 쉽게 주입하는 틀을 제공한다. XML이나 어노테이션 등으로 의존성을 주입하는 방법을 제공하며 생성자 주입, 세터 주입, 필드 주입 등 다양한 의존성 주입 방법을 제공하고 있다.&lt;/p&gt;

&lt;p&gt;AOP(Aspect Oriented Programming)는 우리나라 말로 '관점 지향 프로그래밍'이라고 부른다. 이 기술은 OOP를 보다 더 OOP스럽게 보완해주는 기술이다. 트랜잭션, 로깅, 보완 체크 코드 등은 대부분 비슷한 코드가 중복된다. 이런 코드를 실제 비즈니스 로직과 분리할 수 있도록 도와주는 것이 바로 AOP이다. 이 기술을 잘 활용하면 핵심 비즈니스 코드의 가독성을 높여준다.&lt;/p&gt;

&lt;p&gt;마지막으로 스프링이 제공하는 핵심 기술로 PSA를 꼽을 수 있다. 사용 중인 라이브러리나 프레임워크를 바꿔야할 때 심각한 문제가 발생할 수 있어서 추상화가 중요하다. 스프링은 그런 일이 생기지 않도록 비슷한 기술을 모두 아우를 수 있는 추상화 계층을 제공하여, 사용하는 기술이 바뀌더라도 비즈니스 로직의 변화가 없도록 도와준다.&lt;/p&gt;

&lt;h3 id=&quot;스프링-프레임워크를-사용하면서-발생할-수-있는-문제점들&quot;&gt;스프링 프레임워크를 사용하면서 발생할 수 있는 문제점들&lt;/h3&gt;
&lt;p&gt;빈 설정을 잘못해서 발생하는 문제도 있을 수 있고, 스프링의 동작 원리를 이해하지 않고서는 해결되지 않는 문제도 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;스프링 프레임워크를 사용할 때 성능 문제가 가장 많이 발생하는 부분은 '프록시(proxy)'와 관련되어 있다. 스프링 프록시는 기본적으로 실행 시에 생성된다. 따라서, 개발할 때 적은 요청에는 이상이 없다가 요청량이 많은 운영 상황으로 넘어가면 문제가 나타날 수 있다. 스프링이 프록시를 사용하게 하는 주요 기능은 바로 트랜잭션이다. \@Transactional 어노테이션을 사용하면 해당 어노테이션을 사용한 클래스의 인스턴스를 처음 만들 때 프록시 객체를 만든다. 이밖에도, 개발자가 직접 스프링 AOP를 사용해서 별도의 기능을 추가하는 경우에도 프록시를 사용하는데, 이 부분에서 문제가 가장 많이 발생한다. \@Transactional처럼 스프링이 자체적으로 제공하는 기능은 이미 상당히 오랜 시간 테스트를 거치고 많은 사용자에게 검증을 받았지만, 개발자가 직접 작성한 AOP 코드는 예상하지 못한 성능 문제를 보일 가능성이 매우 높다. 따라서, 간단한 부하 툴을 사용해서라도 성능적인 면을 테스트해야만 한다.&lt;/p&gt;

&lt;p&gt;추가로, 스프링이 내부 매커니즘에서 사용하는 캐시도 조심해서 써야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:/member/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 문자열 자체를 리턴하면 스프링은 해당 문자열에 해당하는 실제 뷰 객체를 찾는 매커니즘을 사용하는데, 이 때 매번 동일한 문자열에 대한 뷰 객체를 새로 찾기 보다는 이미 찾아본 뷰 객체를 캐싱해두면 다음에도 동일한 문자열이 반환됐을 때 훨씬 빠르게 뷰 객체를 찾을 수 있다. 스프링에서 제공하는 ViewResolver 중에 자주 사용되는 InternalResourceViewResolver에는 그러한 캐싱 기능이 내장되어 있다.&lt;/p&gt;

&lt;p&gt;만약 매번 다른 문자열이 생성될 가능성이 높고, 상당히 많은 수의 키 값으로 캐시 값이 생성될 여지가 있는 상황에서는 문자열을 반환하는 게 메모리에 치명적일 수 있다. 따라서 이런 상황에서는 뷰 이름을 문자열로 반환하기보다는 뷰 객체 자체를 반환하는 방법이 메모리 릭을 방지하는 데 도움이 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedirectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;12-db를-사용하면서-발생-가능한-문제점들&quot;&gt;12. DB를 사용하면서 발생 가능한 문제점들&lt;/h1&gt;

&lt;h3 id=&quot;db-connection과-connection-pool-datasource&quot;&gt;DB Connection과 Connection Pool, DataSource&lt;/h3&gt;
&lt;p&gt;JDBC 관련 API는 클래스가 아니라 인터페이스다. JDK의 API에 있는 java.sql 인터페이스를 각 DB 벤더에서 상황에 맞게 구현하도록 되어 있다. 같은 인터페이스라고 해도, 각 DB 벤더에 따라서 처리되는 속도나 내부 처리 방식은 상이하다.&lt;/p&gt;

&lt;p&gt;Connection 객체를 생성하는 부분에서 발생하는 대기 시간을 줄이고, 네트워크의 부담을 줄이기 위해서 사용하는 것이 DB Connection Pool이다.&lt;/p&gt;

&lt;p&gt;Statement와 PreparedStatement의 가장 큰 차이점은 캐시(cache) 사용 여부이다. Statement를 사용할 때와 PreparedStatement를 처음 사용할 때는 다음과 같은 프로세스를 거친다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;쿼리 문장 분석&lt;/li&gt;
  &lt;li&gt;컴파일&lt;/li&gt;
  &lt;li&gt;실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Statement를 사용하면 매번 쿼리를 수행할 때마다 1~3 단계를 거치고, PreparedStatement는 처음 한 번만 세 단계를 거친 후 캐시에 담아서 재사용한다. 동일한 쿼리를 반복적으로 수행한다면 PreparedStatement가 DB에 훨씬 적은 부하를 주며, 성능도 좋다.&lt;/p&gt;

&lt;h3 id=&quot;db를-사용할-때-닫아야-하는-것들&quot;&gt;DB를 사용할 때 닫아야 하는 것들&lt;/h3&gt;
&lt;p&gt;ResultSet 객체가 닫히는 경우는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;close() 메서드를 호출하는 경우&lt;/li&gt;
  &lt;li&gt;GC의 대상이 되어 GC되는 경우&lt;/li&gt;
  &lt;li&gt;관련된 Statement 객체의 close() 메서드가 호출되는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GC가 되면 자동으로 닫히고, Statement 객체가 close되면 알아서 닫히지만, 0.00001초라도 빨리 닫으면 그만큼 해당 DB 서버의 부담이 적어지게 된다.&lt;/p&gt;

&lt;p&gt;Conenction 객체는 다음 세 가지 경우에 닫히게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;close() 메서드를 호출하는 경우&lt;/li&gt;
  &lt;li&gt;GC의 대상이 되어 GC되는 경우&lt;/li&gt;
  &lt;li&gt;치명적인 에러가 발생하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jdk-7에서-등장한-autoclosable-인터페이스&quot;&gt;JDK 7에서 등장한 AutoClosable 인터페이스&lt;/h3&gt;
&lt;p&gt;try 블록이 시작될 때 소괄호 안에 close() 메서드를 호출하는 객체를 생성해 주면 간단하게 처리할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFileNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별도로 finally 블록에서 close() 메서드를 호출할 필요가 없어졌다. 만약 close() 메서드 호출 대상이 여러 개라면 세미콜론으로 구분하여 try-with-resources 구문에 두 개 이상의 문장을 추가하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;jdbc를-사용하면서-유의할-만한-몇-가지-팁&quot;&gt;JDBC를 사용하면서 유의할 만한 몇 가지 팁&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;setAutoCommit() 메서드는 필요할 때만 사용하자. 여러 개의 쿼리를 동시에 작업할 때 성능에 영향을 주게 되므로 되도록 자제하자.&lt;/li&gt;
  &lt;li&gt;배치성 작업은 executeBatch() 메서드를 사용하자. 여러 개의 쿼리를 한 번에 수행할 수 있기 때문에 JDBC 호출 횟수가 감소되어 성능이 좋아진다.&lt;/li&gt;
  &lt;li&gt;setFetchSize() 메서드를 사용하여 데이터를 더 빠르게 가져오자.&lt;/li&gt;
  &lt;li&gt;한 건만 필요할 때는 한 건만 가져오자.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;13-xml과-json도-잘-쓰자&quot;&gt;13. XML과 JSON도 잘 쓰자&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;데이터 개수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;XML SAX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;XML DOM&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;JSON&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;847&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1,395&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;245&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1,000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3,925&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7,129&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1,379&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이 결과만 보면 XML 파싱이 JSON 보다 매우 느리다고 생각할 수 있다. 그런데, 데이터를 전송하기 위해서 XML 및 JSON 데이터를 Serialize나 Deserialize 할 경우도 있다. JSON 데이터는 Serialize와 Deserialize를 처리하는 성능이 좋지 않다. XML 파서보다 JSON 파서가 더 느린 경우가 대부분이다.&lt;/p&gt;

&lt;p&gt;JSON이나 XML은 데이터가 커질수록 전송해야 하는 양도 증가하고, 파싱하는 성능도 무시할 수 없다. 그래서 protobuf, Thrift, avro 등의 오픈소스가 많이 사용되고 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;14-서버를-어떻게-세팅해야-할까&quot;&gt;14. 서버를 어떻게 세팅해야 할까?&lt;/h1&gt;

&lt;h3 id=&quot;웹-서버의-keep-alive&quot;&gt;웹 서버의 Keep Alive&lt;/h3&gt;
&lt;p&gt;웹 서버와 웹 브라우저가 연결 되었을때 KeepAlive 기능이 켜져 있지 않으면, 매번 HTTP 연결을 맺었다 끊었다 하는 작업을 반복한다. KeepAlive 기능이 켜져 있으면 두 개 정도의 연결을 열어서 끊지 않고, 연결을 계속 재사용할 수 있다. KeepAlive 설정을 할 때는 반드시 KeepAlive-Timeout 설정도 같이 해야 한다. 이 설정은 초 단위로 KeepAlive가 끊기는 시간을 설정하기 위한 부분이다. 마지막 연결이 끝난 이후에 다음 연결이 될 때까지 얼마나 기다릴지를 지정한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;KeepAliveTimeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;사용자가 너무 많아 접속이 잘 안될 경우, 이 설정을 5초 정도로 짧게 주는 것도 서버의 리소스를 보다 효율적으로 사용할 수 있는 방법이다.&lt;/p&gt;

&lt;h3 id=&quot;db-connection-pool-및-스레드-개수-설정&quot;&gt;DB Connection Pool 및 스레드 개수 설정&lt;/h3&gt;
&lt;p&gt;DB Connection Pool은 보통 40~50개로 지정하며, 스레드 개수는 이보다 10개 정도 더 지정한다. 가장 좋은 방법은 성능 테스트를 통해서 가장 적절한 값을 구하는 것이다.&lt;/p&gt;

&lt;p&gt;DB의 CPU 사용량이 100%에 도달했다면 CPU를 점유하는 쿼리를 찾아서 튜닝해야 한다. 인덱스가 없거나 테이블을 풀 스캔하는 쿼리가 있는건 아닌지 쿼리의 플랜을 떠서 확인해 봐야 한다.&lt;/p&gt;

&lt;p&gt;DB의 CPU 사용량이 50%도 되지 않는 상황에서 WAS의 CPU 사용량이 100%에 도달했다면 WAS의 애플리케이션을 튜닝해야 한다. 이미 튜닝된 상태라면 서버의 DB Connection Pool의 개수는 약간 여유를 두기 위해서 25~30개 정도로 지정하는 것이 좋다(서버를 늘리는 것은 가장 마지막에 해야 한다).&lt;/p&gt;

&lt;p&gt;Connection Pool의 개수만큼 중요한 값이 대기 시간(wait time)과 관련된 값이다. DB Connection Pool의 개수를 넘어 섰을 때 애플리케이션에서는 '어디 남는 Connection 없나?' 하고 두리번거리면서 기다린다. 대기 시간이 20초라면 DB 연결을 못해 기다리는 사용자들이 적어도 20초는 대기해야 한다는 말이다.&lt;/p&gt;

&lt;p&gt;대기 시간을 100ms 정도로 줄 경우에는 문제가 없을까? 필자가 경험한바로는 메모리를 1GB로 할당한 WAS에서 300ms 이하의 Full GC 시간을 만들기는 매우 어렵다. 만약 DB 연결을 하려고 대기하는 순간 Full GC가 발생하면 그 순간에 대기하고 있는 모든 스레드는 DB와 연결을 못했다고 Timeout을 내뿜을 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;was-인스턴스-개수-설정&quot;&gt;WAS 인스턴스 개수 설정&lt;/h3&gt;
&lt;p&gt;예를 들어 CPU core 개수가 모두 36개인 장비가 있다. 인스턴스가 1개 일때 500 TPS가 나오고, 인스턴스가 2개 일때 700 TPS, 인스턴스가 3개 일때 720 TPS, 4개 일때 730 TPS가 나온다고 가정하다. 필자라면 이 상황에서 인스턴스를 2~3개 정도만 띄울 것이다. 인스턴스를 더 늘린다고 해서 TPS가 증가하지 않는 상황에서는 오히려 유지보수성만 떨어지기 때문이다.&lt;/p&gt;

&lt;p&gt;만약 WAS 장비에 4GB의 여유 메모리가 있다고 하더라도 하나의 인스턴스에 4GB의 메모리를 지정하여 사용하는 것은 굉장히 좋지 않은 방법이다. 왜냐하면 Full GC가 발생할 때마다 많은 시간이 소요될 확률이 커지기 때문이다. 가급적이면 512MB~2GB 사이에서 메모리를 지정하는 것이 좋다. 예를 들어 1GB로 메모리를 지정하여 2개의 인스턴스를 사용하는 것이 좋은 방법일 것이다.&lt;/p&gt;

&lt;h3 id=&quot;session-timeout-시간-설정&quot;&gt;Session Timeout 시간 설정&lt;/h3&gt;
&lt;p&gt;WAS에서 따로 설정한 바가 없거나 세션 객체의 invalidate() 메서드가 수행되지 않으면 세션은 삭제되지 않으므로 유의하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;15-안드로이드-개발하면서-이것만은-피하자&quot;&gt;15. 안드로이드 개발하면서 이것만은 피하자&lt;/h1&gt;

&lt;h3 id=&quot;일반적인-서버-프로그램-개발과-안드로이드-개발은-다르다&quot;&gt;일반적인 서버 프로그램 개발과 안드로이드 개발은 다르다&lt;/h3&gt;
&lt;p&gt;안드로이드는 오라클이나 IBM에서 만든 JVM을 사용하지 않고, Dalvik VM이라는 것을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/06/javacode.png&quot; alt=&quot;java-code&quot; title=&quot;java-code&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 컴파일은 javac를 통해서 수행되며, 두번째 컴파일은 dex라는 구글에서 제공하는 컴파일러에서 수행한다. 자바와 문법은 같지만 컴파일러와 가상 머신(VM)은 다르다.&lt;/p&gt;

&lt;p&gt;윈도우, 맥, 리눅스 장비는 물리적인 RAM이 부족할 경우 디스크를 메모리처럼 사용하는 SWAP이 발생하지만, 안드로이드의 경우 이러한 SWAP이 존재핮 ㅣ않는다.&lt;/p&gt;

&lt;h3 id=&quot;구글에서-이야기하는-안드로이드-성능-개선&quot;&gt;구글에서 이야기하는 안드로이드 성능 개선&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Creating Unnecessary Objects&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prefer Static Over Virtual&lt;/strong&gt;: 만약 인스턴스 변수에 접근할 일이 없을 경우엔 static 메서드를 선언하여 호출하는 것은 15~20%의 성능 개선이 발생할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Static Final For Constants&lt;/strong&gt;: 변하지 않는 상수를 선언할 때 static final로 선언할 경우와 static으로 선언할 때 저장되고 참조되는 위치가 달라진다. static final이 접근 속도가 훨씬 빠르다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Internal Getters/Setters&lt;/strong&gt;: 인스턴스 변수에 직접 접근하는 것이 getter나 setter 메서드를 사용하여 접근하는 것보다 빠르다. JIT 컴파일러가 적용되지 않을 경우 3배, 적용될 경우 7배 정도 빠르다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Enhanced For Loop Syntax&lt;/strong&gt;: Iterable 인터페이스를 사용하는 대부분의 Collection에서 제공하는 클래스들은 전통적인 for 루프를 사용하는 것보다 for-each 루프를 사용하는 방법이 더 성능상 유리하다. 하지만 ArrayList는 전통적인 for 루프가 3배 빠르다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consider Package Instead of Private Access with Private Inner Classes&lt;/strong&gt;: 자바에서 Inner 클래스는 감싸고 있는 클래스의 private 변수를 접근할 수 있다. 그런데 VM에서는 내부 클래스와 감싸고 있는 클래스는 다른 클래스로 인식한다. 그래서 컴파일러는 감싸고 있는 클래스의 private 변수에 접근할 수 있는 메서드를 자동으로 생성해 준다. 따라서 변수에 직접 접근이 불가하므로 getter나 setter를 사용하는 것처럼 성능이 저하된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Using Floating-Point&lt;/strong&gt;: 안드로이드 기기에서는 정수 연산보다 소수점 연산이 2배 느리다. 그리고 double이 float보다 2배의 저장 공간을 사용하므로, 가능하다면 float을 사용하는 것을 권장한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Know and User the Libraries&lt;/strong&gt;: 직접 만드는 것보다 API에서 제공하는 클래스와 메서드가 훨씬 더 빠를 수 있다. 예를 들어 배열을 복사할 때 System.arraycopy() 메서드를 사용하면 루프를 사용하는 것보다 9배 이상 빠르다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Native Methods Carefully&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;안드로이드에서는-이미지-처리만-잘해도-성능이-좋아진다&quot;&gt;안드로이드에서는 이미지 처리만 잘해도 성능이 좋아진다&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이미지 크기가 얼마나 되나 확인해보자.&lt;/li&gt;
  &lt;li&gt;ImageView의 setImageResource() 메서드 사용을 자제하자. 이 메서드를 사용하면 Bitmap 이미지를 읽고 디코딩하는 작업을 UI 스레드에서 수행하기 때문에 응답 시간이 저하된다. 따라서 setImageDrawable이나 setImageBitmap 메서드를 사용하고, BitmapFactory 사용을 권장하고 있다. 추가로 ImageView를 사용하는 것보다 WebView를 사용할 경우에도 큰 효과를 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/11261731&quot;&gt;개발자가 반드시 알아야 할 자바 성능 튜닝 이야기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sridharu.wordpress.com/2016/01/31/servlet-life-cycle/&quot;&gt;Servlet Life Cycle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://android.jlelse.eu/closer-look-at-android-runtime-dvm-vs-art-1dc5240c3924&quot;&gt;Closer Look At Android Runtime: DVM vs ART&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/04/04/game-of-life.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/04/04/game-of-life.html"/>
        <title>Scala로 라이프 게임(Game of Life) 풀어보기</title>
        <updated>2019-04-04T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;라이프 게임(Game of Life)는 영국의 수학자 존 호턴 콘웨이(John Conway)가 고안해낸 세포 자동자의 일종입니다. 라이프 게임은 컴퓨터 과학에서도 의미가 있는데, 왜냐하면 라이프 게임이 범용 튜링 기계와 동등한 계산능력을 가진 세포 자동자이기 때문이다. 즉, 어떤 알고리즘에 의해 계산될 수 있는 것이라면 모두 이를 이용하여 계산할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/04/game_of_life.gif&quot; alt=&quot;game_of_life&quot; title=&quot;game_of_life&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/E8kUJL04ELA&quot;&gt;콘웨이가 직접 설명해주는 영상&lt;/a&gt;을 봐도 도움이 많이 될 것이다.&lt;/p&gt;

&lt;h1 id=&quot;규칙&quot;&gt;규칙&lt;/h1&gt;
&lt;p&gt;라이프 게임은 몇 가지 규칙(패턴)에 의해 진행되기 때문에 입력된 초기값이 게임의 모든 진행을 좌우하게 된다. 세포가 진화하는 과정처럼 다음 단계를 하나의 세대로 표현한다. 그리고 다음 세대로 넘어갈 때 세포들의 생사(生死)는 인접한 8개의 세포들을 기준으로 아래의 규칙을 통해 결정된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;살아 있는 세포에 살아 있는 이웃이 2개 미만이면 인구 부족(underpopulation)으로 죽는다.&lt;/li&gt;
  &lt;li&gt;살아 있는 세포에 살아 있는 이웃이 2개나 3개이면 다음 세대에도 살아있는다.&lt;/li&gt;
  &lt;li&gt;살아 있는 세포에 살아 있는 이웃이 3개 초과이면 인구 과잉(overpopulation)으로 죽는다.&lt;/li&gt;
  &lt;li&gt;죽어 있는 세포에 살아 있는 이웃이 정확히 3개이면 번식(reproduction)으로 다음 세대에 살아난다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;그려보기&quot;&gt;그려보기&lt;/h1&gt;
&lt;p&gt;초기에 살아있는 세포가 세로 일자(ㅣ) 모양을 하고 있다고 가정하고 그려보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/04/game_of_life_draw_2.jpeg&quot; alt=&quot;game_of_life_draw_2&quot; title=&quot;game_of_life_draw_2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연하게 색칠한 부분이 현재 살아있는 세포를 표현한 것이고, 숫자는 살아있는 세포의 갯수를 표시한 것이다. 그리고 다음 세대에 죽을지 살지 여부는 현재 살아있는지의 여부(색칠되어 있는지)와 살아있는 이웃 세포의 수(숫자)를 가지고 판단한다.&lt;/p&gt;

&lt;p&gt;도입부에서도 설명하였듯이 라이프 게임에서는 입력된 초기값이 게임의 모든 진행을 좌우하게 되는데, 일자 모양으로 주어졌을때 다음 세대에는 가로 일자(ㅡ) 모양을 하게 되고 그 다음 세대에는 세로 일자(ㅣ) 모양이 된다. 계속 이 패턴을 반복한다.&lt;/p&gt;

&lt;p&gt;그럼 이번에는 초기에 살아있는 세포가 십자(十) 모양을 하고 있다고 가정하고 그려보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/04/04/game_of_life_draw.jpeg&quot; alt=&quot;game_of_life_draw&quot; title=&quot;game_of_life_draw&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8번째 세대에서는 어떤 모양을 하고 있을까 생각해보면, 처음에 그려봤던 세로 일자(ㅣ) 모양을 생각해보면 쉽다. 세로 일자(ㅣ) 모양은 가로 일자(ㅡ) 모양으로 바뀔 것이고, 가로일자 모양은 세로일자 모양으로 바뀔 것이다. 정리하자면 6, 7번째에서 나왔던 패턴이 세대를 거듭할 수록 반복된다.&lt;/p&gt;

&lt;h1 id=&quot;구현해보기&quot;&gt;구현해보기&lt;/h1&gt;
&lt;p&gt;위에서 본 규칙은 4가지가 복잡해 보일 수 있는데 그리 복잡하지 않다. 현재 세포가 살아있으면서(AND) 주위에 살아있는 이웃의 갯수가 2개이면 되고 또는(OR) 죽어있던 살아있던 상관없이 주위에 살아있는 이웃의 갯수가 3개이면 다음 세대에 살아난다. 그럼 이 규칙을 바탕으로 코드를 작성해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameOfLife&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 현재 살아있는 세포들을 기준으로 인접한 모든 세포들을 구하는 함수&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;cells:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 현재 살아있는 세포들을 기준으로 인접한 이웃들 중 살아있는 세포들을 구하는 함수&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;cells:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;candidate:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 현재 살아있는 세포를 기준으로 다음 세대에 살아있는 세포를 구하는 함수&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;cells:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alivesCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alivesCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alivesCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/03/30/java-performance-tuning-2.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/03/30/java-performance-tuning-2.html"/>
        <title>자바 성능 튜닝 이야기 - 2</title>
        <updated>2019-03-30T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/java_performance_tuning.jpeg&quot; alt=&quot;java_performance_tuning&quot; title=&quot;java_performance_tuning&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;6-static-제대로-한번-써-보자&quot;&gt;6. static 제대로 한번 써 보자&lt;/h1&gt;
&lt;p&gt;100개의 클래스의 인스턴스를 생성하더라도, static으로 선언된 변수나 메서드들은 동일한 주소의 값을 참조한다.&lt;/p&gt;

&lt;p&gt;static의 특징은 다른 JVM에서는 static으로 선언해도 다른 주소나 다른 값을 참조하지만, 하나의 JVM이나 WAS 인스턴스에서는 같은 주소에 존재하는 값을 참조한다. 그리고 GC의 대상도 되지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;static-잘-활용하기&quot;&gt;static 잘 활용하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자주 사용하고 절대 변하지 않는 변수는 final static으로 선언하자.&lt;/li&gt;
  &lt;li&gt;설정 파일 정보도 static으로 관리하자.&lt;/li&gt;
  &lt;li&gt;코드성 데이터는 DB에서 한 번만 읽자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;static과-메모리-릭&quot;&gt;static과 메모리 릭&lt;/h3&gt;
&lt;p&gt;static으로 선언한 부분은 GC가 되지 않는다. 만약 어떤 클래스에 데이터를 Vector나 ArrayList에 담을 때 해당 Collection 객체를 static으로 선언하면 어떻게 될까? 지속적으로 해당 객체에 데이터가 쌓인다면, 더 이상 GC가 되지 않으면서 시스템은 OutOfMemoryError를 발생시킨다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;7-클래스-정보-어떻게-알아낼-수-있나&quot;&gt;7. 클래스 정보, 어떻게 알아낼 수 있나?&lt;/h1&gt;
&lt;p&gt;자바 API 중 reflection 패키지에 있는 클래스들을 사용하면 JVM에 로딩되어 있는 클래스와 메서드 정보들을 읽어 올 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;class-클래스&quot;&gt;Class 클래스&lt;/h3&gt;
&lt;p&gt;Class 클래스는 클래스에 대한 정보를 얻을 때 사용하기 좋고, 생성자는 따로 없다. ClassLoader 클래스의 defineClass() 메서드를 이용해서 클래스 객체를 만들 수도 있지만, 좋은 방법은 아니다. 그보다는 Object 클래스에 있는 getClass() 메서드를 이용하는 것이 일반적이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String getName(): 클래스의 이름을 리턴한다.&lt;/li&gt;
  &lt;li&gt;Package getPackage(): 클래스의 패키지 정보를 패키지 클래스 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Field[] getFields(): public으로 선언된 변수 목록을 Field 클래스 배열 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Field getField(String name): public으로 선언된 변수를 Field 클래스 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Field[] getDeclaredFields(): 해당 클래스에서 정의된 변수 목록을 Field 클래스 배열 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Field getDeclaredField(String name): 해당 클래스에서 정의된 변수 목록을 Field 클래스 배열 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Method[] getDeclaredField(String name): name과 동일한 이름으로 정의된 변수를 Field 클래스 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Method[] getMethods(): public으로 선언된 모든 메서드 목록을 Method 클래스 배열 타입으로 리턴한다. 해당 클래스에서 사용 가능한 상속받은 메서드도 포함된다.&lt;/li&gt;
  &lt;li&gt;Method getMethod(String name, Class… parameterTypes): 지정된 이름과 매개변수 타입을 갖는 메서드를 Method 클래스 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Method[] getDeclaredMethods(): 해당 클래스에서 선언된 모든 메서드 정보를 리턴한다.&lt;/li&gt;
  &lt;li&gt;Method getDeclaredMethod(String name, Class… parameterTypes): 지정된 이름과 매개변수 타입을 갖는 해당 클래스에서 선언된 메서드를 Method 클래스 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Constructor[] getConstructors(): 해당 클래스에 선언된 모든 public 생성자의 정보를 Constructor 배열 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;Constructor[] getDeclaredConstructors(): 해당 클래스에서 선언된 모든 생성자의 정보를 Constructor 배열 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;int getModifiers(): 해당 클래스의 접근자(modifier) 정보를 int 타입으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;String toString(): 해당 클래스 객체를 문자열로 리턴한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 클래스의 이름을 알고 싶으면 다음과 같이 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 getName() 메서드는 패키지 정보까지 리턴해 준다. 클래스 이름만 필요한 경우에는 getSimpleName() 메서드를 사용하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;method-클래스&quot;&gt;Method 클래스&lt;/h3&gt;
&lt;p&gt;Method 클래스를 이용하여 메서드에 대한 정보를 얻을 수 있다. 하지만 Method 클래스에는 생성자가 없으므로 Class 클래스의 getMethods() 메서드를 사용하거나 getDeclaredMethods() 메서드를 써야 한다.&lt;/p&gt;

&lt;h3 id=&quot;field-클래스&quot;&gt;Field 클래스&lt;/h3&gt;
&lt;p&gt;Field 클래스는 클래스에 있는 변수들의 정보를 제공하기 위해서 사용한다. Method 클래스와 마찬가지로 생성자가 없으므로 Class 클래스의 getFields()나 getDeclaredFields() 메서드를 써야 한다.&lt;/p&gt;

&lt;h3 id=&quot;reflection-클래스를-잘못-사용한-사례&quot;&gt;reflection 클래스를 잘못 사용한 사례&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.math.BigDecimal&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 데이터 처리&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 사용할 경우 응답 속도에 그리 많은 영향을 주지는 않지만, 많이 사용하면 필요 없는 시간을 낭비하게 된다. 기본으로 돌아가서 다음과 같이 사용하면 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 데이터 처리&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;대상&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;응답 시간(마이크로초)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;instanceof 사용&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.167&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Reflection 사용&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.022&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;instanceof를 사용했을 때와 .getClass().getName()을 사용했을 때를 비교하면 약 6배의 성능 차이가 발생한다. 어떻게 보면 시간으로 보았을 때 큰 차이는 발생하지 않지만, 작은 것부터 생각하면서 코딩하는 습관을 가지는 것이 좋다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;8-synchronized는-제대로-알고-써야-한다&quot;&gt;8. synchronized는 제대로 알고 써야 한다&lt;/h1&gt;
&lt;h3 id=&quot;프로세스와-스레드&quot;&gt;프로세스와 스레드&lt;/h3&gt;
&lt;p&gt;클래스를 하나 수행시키거나 WAS를 기동하면, 서버에서 자바 프로세스가 하나 생성된다. 하나의 프로세스에는 여러 개의 스레드가 생성된다. 단일 스레드가 생성되어 종료될 수도 있고, 여러 개의 스레드가 생성되어 수행될 수도 있다. 그러므로 프로세스와 스레드의 관계는 1:N 관계라고 보면 된다.&lt;/p&gt;

&lt;h3 id=&quot;thread-클래스-상속과-runnable-인터페이스-구현&quot;&gt;Thread 클래스 상속과 Runnable 인터페이스 구현&lt;/h3&gt;
&lt;p&gt;스레드의 구현은 Thread 클래스를 상속받는 방법과 Runnable 인터페이스를 구현하는 방법 두 가지가 있다. 기본적으로 Thread 클래스는 Runnable 인터페이스를 구현한 것이기 때문에 어느 것을 사용해도 거의 차이가 없다. 대신 Runnable 인터페이스를 구현하면 원하는 기능을 추가할 수 있다. 이는 장점이 될 수도 있지만, 해당 클래스를 수행할 때 별도의 스레드 객체를 생성해야 한다는 단점이 될 수도 있다. 또한 자바는 다중 상속을 인정하지 않는다. 따라서 스레드를 사용해야 할 때 이미 상속받은 클래스가 존재한다면 Runnable 인터페이스를 구현해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunnableImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is RunnableImpl.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadExtends&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is ThreadExtends.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 이 클래스들을 어떻게 실행해야 할까? Thread 클래스를 상속받은 경우에는 start() 메서드를 호출하면 된다. 하지만 Runnable 인터페이스를 매개변수로 받는 생성자를 사용해서 Thread 클래스를 만든 후 start() 메서드를 호출해야 한다. 그렇게 하지 않고 그냥 run() 메서드를 호출하면 새로운 스레드가 생성되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunThreads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RunnableImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunnableImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ThreadExtends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;te&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadExtends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;te&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sleep-wait-join-메서드&quot;&gt;sleep(), wait(), join() 메서드&lt;/h3&gt;
&lt;p&gt;sleep() 메서드는 명시된 시간만큼 해당 스레드를 대기시킨다. wait() 메서드도 명시된 시간만큼 해당 스레드를 대기시킨다. sleep() 메서드와 다른 점은 매개변수인데, 만약 아무런 매개변수를 지정하지 않으면 notify() 메서드 혹은 notifyAll() 메서드가 호출될 때까지 대기한다. wait() 메서드가 대기하는 시간을 설정하는 방법은 sleep() 메서드와 동일하다.&lt;/p&gt;

&lt;p&gt;join() 메서드는 명시된 시간만큼 해당 스레드가 죽기를 기다린다. 만약 아무런 매개변수를 지정하지 않으면 죽을 때까지 계속 대기한다.&lt;/p&gt;

&lt;h3 id=&quot;interrupt-notify-notifyall-메서드&quot;&gt;interrupt(), notify(), notifyAll() 메서드&lt;/h3&gt;
&lt;p&gt;앞서 명시한 세 개의 메서드를 ‘모두’ 멈출 수 있는 유일한 메서드는 interrupt 메서드다. interrupt() 메서드가 호출되면 중지된 스레드에는 InterruptedException이 발생한다. notify() 메서드와 notifyAll() 메서드는 모두 wait() 메서드를 멈추기 위한 메서드다. 이 두 메서드는 Object 클래스에 정의되어 있는데, wait() 메서드가 호출된 후 대기 상태로 바뀐 스레드를 깨운다. notify() 메서드는 객체의 모니터와 관련있는 단일 스레드를 깨우며, notifyAll() 메서드는 객체의 모니터와 관련있는 모든 스레드를 깨운다.&lt;/p&gt;

&lt;h3 id=&quot;synchronized를-이해하자&quot;&gt;Synchronized를 이해하자&lt;/h3&gt;
&lt;p&gt;메서드를 동기화하려면 메서드 선언부에 사용하면 된다. 특정 부분을 동기화하려면 해당 블록에만 선언을 해서 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다음과 같은 상황에 동기화를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 객체를 여러 스레드에서 동시에 사용할 경우&lt;/li&gt;
  &lt;li&gt;static으로 선언한 객체를 여러 스레드에서 동시에 사용할 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동기화를-위해서-자바에서-제공하는-것들&quot;&gt;동기화를 위해서 자바에서 제공하는 것들&lt;/h3&gt;
&lt;p&gt;JDK 5.0부터 추가된 java.util.concurrent 패키지에 대해서 간단히 알아보자. 이 패키지에는 주요 개념 네 가지가 포함되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lock: 실행 중인 메서드를 간단한 방법으로 정지시켰다가 실행시킨다. 상호 참조로 인해 발생하는 데드락을 피할 수 있다.&lt;/li&gt;
  &lt;li&gt;Executors: 스레드를 더 효율적으로 관리할 수 있는 클래스들을 제공한다. 스레드 풀도 제공하므로, 필요에 따라 유용하게 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;Concurrent 컬랙션&lt;/li&gt;
  &lt;li&gt;Atomic 변수: 동기화가 되어 있는 변수를 제공한다. 이 변수를 사용하면, synchronized 식별자를 메서드에 지정할 필요 없이 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm-내에서는-synchronized은-어떻게-동작할까&quot;&gt;JVM 내에서는 synchronized은 어떻게 동작할까?&lt;/h3&gt;
&lt;p&gt;자바의 HotSpot VM은 '자바 모니터(monitor)'를 제공함으로써 스레드들이 '상호 배제 프로토콜(mutual exclusion protocol)'에 참여할 수 있도록 돕는다. 자바 모니터는 잠긴 상태(lock)나 풀림(unlocked) 중 하나이며, 동일한 모니터에 진입한 여러 스레드들 중에서 한 시점에는 단 하나의 스레드만 모니터를 가질 수 있다. 즉, 모니터를 가진 스레드만 모니터에 의해서 보호되는 영역(synchronized 블록)에 들어가서 작업을 할 수 있다. 모니터를 보유한 스레드가 보호 영역에서의 작업을 마치면, 모니터는 다른 대기중인 스레드에게 넘어간다.&lt;/p&gt;

&lt;p&gt;JDK 5부터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:+UseBiasedLocking&lt;/code&gt;라는 옵션을 통해서 biased locking 이라는 기능을 제공한다. 그 전까지는 대부분의 객체들이 하나의 스레드에 의해서 잠기게 되었지만, 이 옵션을 켜면 스레드가 자기 자신을 향하여 bias된다. 즉, 이 상태가 되면 스레드는 많은 비용이 드는 인스트럭션 재배열 작업을 통해서 잠김과 풀림 작업을 수행할 수 있게 된다. 이 작업들은 진보된 적응 스피닝(adaptive spinning) 기술을 사용하여 처리량을 개선시킬 수 있다고 한다. 결과적으로 동기화 성능은 보다 빨라졌다.&lt;/p&gt;

&lt;p&gt;HotSpot VM에서 대부분의 동기화 작업은 fast-path 코드 작업을 통해서 진행한다. 만약 여러 스레드가 경합을 일으키는 상황이 발생하면 이 fast-path 코드는 slow-path 코드 상태로 변환된다. 참고로 slow-path 구현은 C++ 코드로 되어 있으며, fast-path 코드는 JIT compiler에서 제공하는 장비에 의존적인 코드로 작성되어 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;9-io에서-발생하는-병목-현상&quot;&gt;9. IO에서 발생하는 병목 현상&lt;/h1&gt;
&lt;p&gt;웹 애플리케이션에서 IO 처리를 하는 부분은 시스템의 응답 속도에 많은 영향을 준다.&lt;/p&gt;

&lt;h3 id=&quot;기본적인-io는-이렇게-처리한다&quot;&gt;기본적인 IO는 이렇게 처리한다&lt;/h3&gt;
&lt;p&gt;자바에서 입력과 출력은 스트림(stream)을 통해서 이루어진다. 파일을 포함해 디바이스를 통해 이뤄지는 작업을 모두 IO라고 한다. 네트워크를 통해서 다른 서버로 데이터를 전송하거나, 다른 서버로부터 데이터를 전송 받는 것도 IO에 포함된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jeremy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 out은 PrintStream을 System 클래스에 static으로 정의해 놓은 변수이다(이 또한 역시 IO). IO에서 발생하는 시간은 CPU를 사용하는 시간과 대기 시간 중 대기 시간에 속하기 때문에 성능에 영향을 가장 많이 미친다.&lt;/p&gt;

&lt;p&gt;자바에서 파일을 읽고 처리하는 방법은 굉장히 많다. 스트림을 읽는 데 관련된 주요 클래스는 다음과 같다. 여기에 명시된 모든 입력과 관련된 스트림들은 java.io.InputStream 클래스로부터 상속받았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ByteArrayInputStream: 바이트로 구성된 배열을 읽어서 입력 스트림을 만든다.&lt;/li&gt;
  &lt;li&gt;FileInputStream: 이미지와 같은 바이너리 기반의 파일의 스트림을 만든다.&lt;/li&gt;
  &lt;li&gt;FilterInputStream: 여러 종류의 유용한 입력 스트림의 추상 클래스이다.&lt;/li&gt;
  &lt;li&gt;ObjectInputStream: ObjectOutputStream을 통해서 저장해 놓은 객체를 읽기 위한 스트림을 만든다.&lt;/li&gt;
  &lt;li&gt;PipedInputStream: PipedOutputStream을 통해서 출력된 스트림을 읽어서 처리하기 위한 스트림을 만든다.&lt;/li&gt;
  &lt;li&gt;SequenceInputStream: 별개인 두 개의 스트림을 하나의 스트림으로 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;문자열 기반의 스트림을 읽기 위해서 사용하는 클래스는 java.io.Reader 클래스의 하위 클래스들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BufferedReader: 문자열 입력 스트림을 버퍼에 담아서 처리한다. 일반적으로 문자열 기반의 파일을 읽을 때 가장 많이 사용된다.&lt;/li&gt;
  &lt;li&gt;CharArrayReader: char의 배열로 된 문자 배열을 처리한다.&lt;/li&gt;
  &lt;li&gt;FilterReader: 문자열 기반의 스트림을 처리하기 위한 추상 클래스이다.&lt;/li&gt;
  &lt;li&gt;FileReader: 문자열 기반의 파일을 읽기 위한 클래스이다.&lt;/li&gt;
  &lt;li&gt;InputStreamReader: 바이트 기반의 스트림을 문자열 기반의 스트림으로 연결하는 역할을 수행한다.&lt;/li&gt;
  &lt;li&gt;PipedReader: 파이프 스트림을 읽는다.&lt;/li&gt;
  &lt;li&gt;StringReader: 문자열 기반의 소스를 읽는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BufferedReader 클래스는 다른 FileReader 클래스와 마찬가지로 문자열 단위나 문자열 배열 단위로 읽을 수 있는 기능을 제공하지만, 추가로 라인 단위로 읽을 수 있는 readLine() 메서드를 제공한다. 실제 응답 속도도 약 350ms로, 약간 빨라진다. 이 속도는 파일의 크기와 비례한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;버퍼 없이 FileReader&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;버퍼 포함한 FileReader&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;BufferedReader 사용시&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;응답 속도&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2,480ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;400ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;350ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;nio의-원리&quot;&gt;NIO의 원리&lt;/h3&gt;
&lt;p&gt;JDK 1.4부터 새롭게 추가된 NIO가 어떤 것인지 알아보자. 자바를 사용하여 하드 디스크에 있는 데이터를 읽는다면 어떤 프로세스로 진행될까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;파일을 읽으라는 메서드를 자바에 전달한다.&lt;/li&gt;
  &lt;li&gt;파일명을 전달받은 메서드가 운영체제의 커널에게 파일을 읽어 달라고 요청한다.&lt;/li&gt;
  &lt;li&gt;커널이 하드 디스크로부터 파일을 읽어서 자신의 커널에 있는 버퍼에 복사하는 작업을 수행한다. DMA에서 이 작업을 하게 된다.&lt;/li&gt;
  &lt;li&gt;자바에서는 마음대로 커널의 버퍼를 사용하지 못하므로, JVM으로 그 데이터를 전달한다.&lt;/li&gt;
  &lt;li&gt;JVM에서는 메서드에 있는 스트림 관리 클래스를 사용하여 데이터를 처리한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자바에서는 3번 복사 작업과 4번 전달 작업을 수행할 때 대기하는 시간이 발생할 수 밖에 없다. 이러한 단점을 보완하기 위해 NIO가 탄생했다. NIO를 사용한다고 IO에서 발생하는 모든 병목 현상이 해결되는 것은 아니지만, IO를 위한 여러 가지 새로운 개념이 도입되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;버퍼의 도입&lt;/li&gt;
  &lt;li&gt;채널의 도입&lt;/li&gt;
  &lt;li&gt;문자열의 인코더와 디코어 제공&lt;/li&gt;
  &lt;li&gt;Perl 스타일의 정규 표현식에 기초한 패턴 매칭 방법 제공&lt;/li&gt;
  &lt;li&gt;파일을 잠그거나 메모리 매핑이 가능한 파일 인터페이스 제공&lt;/li&gt;
  &lt;li&gt;서버를 위한 복합적인 Non-blocking IO 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;directbytebuffer를-잘못-사용하여-문제가-발생한-사례&quot;&gt;DirectByteBuffer를 잘못 사용하여 문제가 발생한 사례&lt;/h3&gt;
&lt;p&gt;NIO를 사용할 때 ByteBuffer를 사용하는 경우가 있다. ByteBuffer는 네트워크나 파일에 있는 데이터를 읽어 들일때 사용한다. ByteBuffer 객체를 생성하는 메서드에는 wrap(), allocate(), allocateDirect()가 있다. 이 중에서 allocateDirect 메서드는 데이터를 JVM에 올려서 사용하는 것이 아니라, OS 메모리에 할당된 메모리를 Native한 JNI로 처리하는 DirectByteBuffer 객체를 생성한다. 그런데 이 DirectByteBuffer 객체는 필요할 때 계속 생성해서는 안 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;psvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DirectByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DirectByteBufferCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectByteBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDirectByteBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allocateDirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;getDirectByteBuffer 메서드를 지속적으로 호출하는 간단한 코드다. getDirectByteBuffer 메서드에서는 ByteBuffer 클래스의 allocateDirect 메서드를 호출함으로써 DirectByteBuffer 객체를 생성한 후 리턴해준다.&lt;/p&gt;

&lt;p&gt;이 예제를 실행하고 나서 GC 상황을 모니터링하기 위해 jstat 명령을 사용하여 확인해보면 거의 5~10초에 한 번씩 Full GC가 발생하는 것을 볼 수 있다. 그런데 Old 영역의 메모리는 증가하지 않는다. 왜 이러한 문제가 발생했을까?&lt;/p&gt;

&lt;p&gt;그 이유는 DirectByteBuffer의 생성자 때문이다. 이 생성자는 java.nio 에 아무런 접근 제어자가 없이 선언된(package private) Bits라는 클래스의 reserveMemory() 메서드를 호출한다. 이 reserveMemory 메서드에서는 JVM에 할당되어 있는 메모리보다 더 많으 메모리를 요구할 경우 System.gc() 메서드를 호출하도록 되어 있다.&lt;/p&gt;

&lt;p&gt;JVM에 있는 코드에 System.gc() 메서드가 있기 때문에 해당 생성자가 무차별적으로 생성될 경우 GC가 자주 발생하고 성능에 영향을 줄 수 밖에 없다. 따라서, 이 DirectByteBuffer 객체를 생성할 때는 매우 신중하게 접근해야만 하며, 가능하다면 singleton 패턴을 사용하여 해당 JVM에는 하나의 객체만 생성하도록 하는 것을 권장한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;10-로그는-반드시-필요한-내용만-찍자&quot;&gt;10. 로그는 반드시 필요한 내용만 찍자&lt;/h1&gt;

&lt;h3 id=&quot;systemoutprintln의-문제점&quot;&gt;System.out.println()의 문제점&lt;/h3&gt;
&lt;p&gt;파일이나 콘솔에 로그를 남길 경우 애플리케이션에서는 대기 시간이 발생한다. 이 대기 시간은 시스템의 속도에 의존적이다. 만약 디스크에 로그를 남긴다면, 서버 디스크의 RPM이 높을수록 로그의 처리 속도는 빨라질 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;개션율이란 튜닝 전과 후의 차이를 수치로 나타낸 것이다. 다음의 공식으로 구한다&lt;br /&gt;
(튜닝 전 응답 속도 - 튜닝 후 응답 속도) * 100 / 튜닝 후 응답 속도 = 개선율(%)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;의미 없는 디버그용 로그를 프린트하기 위해서 아까운 서버의 리소스와 디스크가 낭비될 수 있다. 별다른 튜닝도 필요 없는 로그 제거 작업이 성능을 얼마나 많이 향상 시킬 수 있을지 다시 한 번 생각해 보고, 운영 서버의 소스에 있는 모든 시스템 로그를 제거하기 바란다.&lt;/p&gt;

&lt;h3 id=&quot;systemoutformat-메서드&quot;&gt;System.out.format() 메서드&lt;/h3&gt;
&lt;p&gt;format() 메서드는 JDK 5.0의 System 클래스에서 사용하는 out 객체 클래스인 PrintStream에 새로 추가되었다. 문자열을 사용할 경우에는 %s, int나 long과 같은 정수형을 나타낼 경우에는 %d, float이나 double을 나타낼 경우에는 %f를 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ccc&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %s %s %d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ccc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드를 컴파일한 클래스를 역 컴파일 해보면 String을 더하는 문장(str1)은 다음과 같이 변환된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ccc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 format() 메서드를 사용하는 문장은 다음과 같이 변환된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %s %s %d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ccc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일시 변환된 부분을 보면 새로운 Object 배열을 생성하여 그 값을 배열에 포함 시키도록 되어 있다. 게다가 long 값을 Object 형태로 나타내기 위해서 Long 클래스의 valueOf() 메서드를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;실제 String.format() 메서드의 소스를 보면, 그 내부에서 java.util 패키지에 있는 Formatter 클래스를 호출한다. Formatter 클래스에서는 %가 들어가 있는 format 문자열을 항상 파싱(parsing)하기 때문에 문자열을 그냥 더하는 것보다 성능이 좋을 수 없다.&lt;/p&gt;

&lt;p&gt;만약 디버그용으로 사용한다면, 필자는 format 메서드를 사용하기를 권장한다. 더 편리하고 소스의 가독성도 높아지기 때문이다. 다만 운영 시에는 디버그용 로그를 제거할 경우를 가정하고 권하는 것임을 꼭 명심하기 바란다.&lt;/p&gt;

&lt;h3 id=&quot;로그를-더-간결하게-처리하는-방법&quot;&gt;로그를 더 간결하게 처리하는 방법&lt;/h3&gt;
&lt;p&gt;모든 소스를 찾아 다니면서 printFlag를 변경하는 것보다 간단한 flag 정보를 갖는 클래스를 만들어 관리하면 약간 더 편하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LogRemoveSample.getList() : size = %d\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매번 if 문장으로 막는 것보다 간단하게 사용하기 위해서는 좀 더 보완을 해서 다음과 같이 클래스를 만들면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleLogger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SimpleLogger.log(“…”) 같은 방식으로 소스를 작성하면 되고, printFlag에 따라서 로그를 남길지, 남기지 않을지를 결정 할 수 있다. 이 소스의 단점은 printFlag를 수정하기 위해서 다시 컴파일해야 한다는 점과 어차피 log() 메서드 요청을 하기 위해서 메시지 문자열을 생성해야 한다는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;로거-사용-시의-문제점&quot;&gt;로거 사용 시의 문제점&lt;/h3&gt;
&lt;p&gt;운영 시 로그 레벨을 올려 놓는다고 해도, 디버그용 로그 메시지는 간단한 문자든 간단한 쿼리든 상관 없이 하나 이상의 객체가 필요하다. 그러면 그 객체를 생성하는 데 메모리와 시간이 소요된다. 또한 메모리에서 제거하기 위해서는 GC를 수행해야 하고, GC 수행 시간이 또 소요된다.&lt;/p&gt;

&lt;p&gt;가장 좋은 방법은 디버그용 로그를 제거하는 것이다. 하지만 그렇지 못한 것이 현실이다. 그래서 이 경우에는 시스템 로그의 경우처럼 로그 처리 여부를 처리하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLoggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 로그 처리&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 if 문장으로 처리하면 로그를 위한 불필요한 메모리 사용을 줄일 수 있어, 더 효율적으로 메시지를 처리할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;로그를-깔끔하게-처리해주는-slf4j와-logback&quot;&gt;로그를 깔끔하게 처리해주는 slf4j와 LogBack&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simple Logging Facade for Java(SLF4J)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Temperature set to {}. Old temperature was {}.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Temperature has risen above 50 degrees.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기존 로거들은 앞 절에서 이야기한 대로 출력을 위해서 문자열을 더해 전달해 줘야만 했다. 하지만, slf4j는 format 문자열에 중괄호를 넣고, 그 순서대로 출력하고자 하는 데이터들을 콤마로 구분하여 전달해준다. 이렇게 전달해 주면 로그를 출력하지 않을 경우 필요 없는 문자열 더하기 연산이 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;추가로 LogBack이라는 로거는 예외의 스택 정보를 출력할 때 해당 클래스가 어떤 라이브러리를 참고하고 있는지도 포함하여 제공하기 때문에 쉽게 관련된 클래스를 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;예외-처리는-이렇게&quot;&gt;예외 처리는 이렇게&lt;/h3&gt;
&lt;p&gt;여러 스레드에서 콘솔에 로그를 프린트하면 데이터가 섞인다. 자바의 예외 스택 정보는 로그를 최대 100개까지 프린트하기 때문에 서버의 성능에도 많은 부하를 준다. 스택 정보를 가져오는 부분에서는 거의 90% 이상이 CPU를 사용하는 시간이고, 나머지 프린트하는 부분에서는 대기 시간이 소요된다.&lt;/p&gt;

&lt;p&gt;예외를 메시지로 처리하면 실제 사용자들은 한 줄의 오류 메시지나 오류 코드만을 보게되기 때문에 장애를 처리하기 쉽지 않다. 스택 정보를 보고 싶을 경우에는 다음과 같이 처리하는 방법도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;StackTraceElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ste&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ste&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ste&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ste&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLineNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ste&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;severe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exception : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;severe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막 라인의 문자열 더하는 구문들은 어차피 StringBuilder로 변환되므로 큰 성능 저하를 발생시키지 않는다.&lt;/p&gt;

&lt;p&gt;참고로 StackTraceElement 배열의 0번째에는 예외가 발생한 클래스 정보가 있으며, 마지막에는 최초 호출된 클래스의 정보가 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/11261731&quot;&gt;개발자가 반드시 알아야 할 자바 성능 튜닝 이야기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.corej2eepatterns.com/&quot;&gt;Core J2EE Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/03/28/java-performance-tuning-1.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/03/28/java-performance-tuning-1.html"/>
        <title>자바 성능 튜닝 이야기 - 1</title>
        <updated>2019-03-28T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/java_performance_tuning.jpeg&quot; alt=&quot;java_performance_tuning&quot; title=&quot;java_performance_tuning&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-디자인-패턴-꼭-써야-한다&quot;&gt;1. 디자인 패턴 꼭 써야 한다&lt;/h1&gt;
&lt;p&gt;디자인 패턴은 &lt;a href=&quot;http://www.zdnet.co.kr/view/?no=00000039131344&quot;&gt;임백준님의 개발자의 초식, 디자인 패턴「그러나…」&lt;/a&gt;에도 잘 드러나있듯이 과거의 소프트웨어 개발 과정에서 발견한 설계의 노하우를 일종의 패턴으로 정리해 놓은 것이다. 따라서 문제점에 대해서 검증된 방법으로 해결 방안을 찾을 수 있고, 시스템을 만들기 위해서 전체 중 일부 의미 있는 클래스들을 묶기 위해 사용될 수 있다. 반복되는 의미 있는 집합을 정의하고 이름을 지정해서, 누가 이야기하더라도 동일한 의미의 패턴이 되도록 만들어 놓은 것이다.&lt;/p&gt;

&lt;p&gt;J2EE 디자인 패턴에 대해 간단히 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/j2ee-pattern.gif&quot; alt=&quot;J2EE Design Pattern&quot; title=&quot;J2EE Design Pattern&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intercepting Filter 패턴: 요청 타입에 따라 다른 처리를 하기 위한 패턴&lt;/li&gt;
  &lt;li&gt;Front Controller 패턴: 요청 전후에 처리하기 위한 컨트롤러를 지정하는 패턴&lt;/li&gt;
  &lt;li&gt;View Helper 패턴: 프레젠테이션 로직과 상관 없는 비즈니스 로직을 헬퍼로 지정하는 패턴&lt;/li&gt;
  &lt;li&gt;Composite View 패턴: 최소 단위의 하위 컴포넌트를 분리하여 화면을 구성하는 패턴&lt;/li&gt;
  &lt;li&gt;Service to Worker 패턴: Front Controller와 View Helper 사이에 디스패처를 두어 조합하는 패턴&lt;/li&gt;
  &lt;li&gt;Dispatcher View 패턴: Front Controller와 View Helper로 디스패처 컴포넌트를 형성한다. 뷰 처리가 종료될 때까지 다른 활동을 지연한다는 점이 Service to Worker 패턴과 다르다.&lt;/li&gt;
  &lt;li&gt;Business Delegate 패턴: 비즈니스 서비스 접근을 캡슐화하는 패턴&lt;/li&gt;
  &lt;li&gt;Service Locator 패턴: 서비스와 컴포넌트 검색을 쉽게 하는 패턴&lt;/li&gt;
  &lt;li&gt;Session Facade 패턴: 비즈니스 티어 컴포넌트를 캡슐화하고, 원격 클라이언트에서 접근할 수 있는 서비스를 제공하는 패턴&lt;/li&gt;
  &lt;li&gt;Composite Entity 패턴: 로컬 엔티티 빈과 POJO를 이용하여 큰 단위의 엔티티 객체를 구현&lt;/li&gt;
  &lt;li&gt;Transfer Object 패턴: 일명 Value Object 패턴이라고 많이 알려져 있다. 데이터를 전송하기 위한 객체에 대한 패턴&lt;/li&gt;
  &lt;li&gt;Transfer Object Assembler 패턴: 하나의 Transfer Object로 모든 타입 데이터를 처리할 수 없으므로, 여러 Transfer Object를 조합하거나 변형한 객체를 생성하여 사용하는 패턴&lt;/li&gt;
  &lt;li&gt;Value List Handler 패턴: 데이터 조회를 처리하고, 결과를 임시 저장하며, 결과 집합을 검색하여 필요한 항목을 선택하는 역할&lt;/li&gt;
  &lt;li&gt;Data Access Object 패턴: 일명 DAO라고 많이 알려져 있다. DB에 접근을 전담하는 클래스를 추상화하고 캡슐화한다.&lt;/li&gt;
  &lt;li&gt;Service Activator 패턴: 비동기적 호출을 처리하기 위한 패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기 명시된 패턴 중 성능과 가장 밀접한 관련이 있는 패턴은 Service Locator 패턴이다. 그리고 애플리케이션 개발 시 반드시 사용해야 하는 Transfer Object 패턴도 중요하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-내가-만든-프로그램의-속도를-알고-싶다&quot;&gt;2. 내가 만든 프로그램의 속도를 알고 싶다&lt;/h1&gt;
&lt;p&gt;시스템의 성능이 느릴 때 가장 먼저 해야 하는 작업은 &lt;strong&gt;병목 지점을 파악&lt;/strong&gt;하는 것이다. 자바 기반의 시스템에 대하여 응답 속도나 각종 데이터를 측정하는 프로그램은 많다. 애플리케이션의 속도에 문제가 있을 때 분석하기 위한 툴로는 프로파일링 툴이나 APM 툴 등이 있다. 이 툴을 사용하면, 고속도로 위에서 헬기나 비행기로 훑어보듯이 병목 지점을 쉽게 파악할 수 있다.&lt;/p&gt;

&lt;p&gt;APM 툴을 프로파일링 툴과 비교하면 프로파일링 툴은 개발자용 툴이고, APM 툴은 운영 환경용 툴이라고 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;프로파일링-툴&quot;&gt;프로파일링 툴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;소스 레벨의 분석을 위한 툴이다.&lt;/li&gt;
  &lt;li&gt;애플리케이션의 세부 응답 시간까지 분석할 수 있다.&lt;/li&gt;
  &lt;li&gt;메모리 사용량을 객체나 클래스, 소스의 라인 단위까지 분석할 수 있다.&lt;/li&gt;
  &lt;li&gt;가격이 APM 툴에 비해서 저렴하다.&lt;/li&gt;
  &lt;li&gt;보통 사용자 수 기반으로 가격이 정해진다.&lt;/li&gt;
  &lt;li&gt;자바 기반의 클라이언트 프로그램 분석을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apm-툴&quot;&gt;APM 툴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션의 장애 상황에 대한 모니터링 및 문제점 진단이 주 목적이다.&lt;/li&gt;
  &lt;li&gt;서버의 사용자 수나 리소스에 대한 모니터링을 할 수 있다.&lt;/li&gt;
  &lt;li&gt;실시간 모니터링을 위한 툴이다.&lt;/li&gt;
  &lt;li&gt;가격이 프로파일링 툴에 비하여 비싸다.&lt;/li&gt;
  &lt;li&gt;보통 CPU 수를 기반으로 가격이 정해진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로파일링 툴이 기본적으로 제공하는 기능은 어떤 것이 있을까? 각 툴이 제공하는 기능은 다양하고 서로 상이하지만, 응답 시간 프로파일링과 메모리 프로파일링 기능을 기본적으로 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;응답 시간 프로파일링&lt;/strong&gt;: 응답 시간을 측정하기 위함이다. 하나의 클래스 내에서 사용되는 메서드 단위의 응답 시간을 측정한다. 툴에 따라서 소스 라인 단위로 응답 속도를 측정할 수 있다. 응답 시간 프로파일링을 할 때는 보통 CPU 시간과 대기 시간이 제공된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;메모리 프로파일링&lt;/strong&gt;: 잠깐 사용하고 GC의 대상이 되는 부분을 찾거나, 메모리 부족 현상(Memory leak)이 발생하는 부분을 찾기 위함이다. 클래스 및 메서드 단위의 메모리 사용량이 분석된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;CPU 시간과 대기 시간이란 하나의 메서드, 한 라인을 수행하는데 소요되는 시간은 무조건 CPU 시간과 대기 시간으로 나뉜다. CPU 시간은 CPU를 점유한 시간을 의미하고, 대기 시간은 CPU를 점유하지 않고 대기하는 시간을 의미한다. 따라서 CPU 시간와 대기 시간을 더하면 실제 소요 시간(Clock time)이 된다. CPU 시간은 툴에 따라 스레드(Thread) 시간으로 표시되기도 한다. 해당 스레드에서 CPU를 점유한 시간이기 때문에 표현만 다르지 사실은 같은 시간이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;system-클래스&quot;&gt;System 클래스&lt;/h3&gt;
&lt;p&gt;모든 System 클래스의 메서드는 static으로 되어 있고, 그 안에서 생성된 in, out, err과 같은 객체들도 static으로 선언되어 있으며, 생성자도 없다. 본론에 들어가기 전에, 자주 사용하지는 않지만 알아두면 매우 유용한 메서드들을 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
특정한 배열을 복사할 때 사용한다. 여기서 src는 복사 원본 배열, dest는 복사한 값이 들어가는 배열이다. srcPos는 원본의 시작 위치, destPos는 복사본의 시작 위치, length는 복사하는 개수이다.
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arracopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
현재 자바 속성 값들을 받아 온다. 자바의 JVM에서 사용할 수 있는 설정은 속성(Property)값과 환경(Environment)값이 있다. 속성은 JVM에서 지정된 값들이고, 환경은 장비(서버)에 지정되어 있는 값들이다.
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// key에 지정된 자바 속성 값을 받아 온다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// key에 지정된 자바 속성 값을 받아 온다. def는 해당 key가 존재하지 않을 경우 지정할 기본값이다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// props 객체에 담겨 있는 내용을 자바 속성에 지정한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prope&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 자바 속성에 지정된 key의 값을 value 값으로 변환한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 현재 시스템 환경 값 목록을 스트링 형태의 맵으로 리턴한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// name에 지정된 환경 변수의 값을 얻는다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 파일명을 지정하고 네이티브 라이브러리를 로딩한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 라이브러리의 이름을 지정하여 네이티브 라이브러리를 로딩한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 여러분들이 운영중인 코드에서 절대로 사용해서는 안되는 메서드가 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 자바에서 사용하는 메모리를 명시적으로 해제하도록 GC를 수행하는 메서드다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 현재 수행중인 JVM을 멈춘다. 이 메서드는 절대로 수행하면 안 된다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
Object 객체에 있는 finalize()라는 메서드는 자동으로 호출되는데, 가비지 콜렉터가 알아서
해당 객체를 더 이상 참조할 필요가 없을 때 호출한다. 하지만 이 메서드를 호출하면 참조 해제
작업을 기다리는 모든 객체의 finalize() 메서드를 수동으로 수행해야 한다.
*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runFinalization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;currenttimemills와-nanotime&quot;&gt;currentTimeMills와 nanoTime&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 현재의 시간을 ms로 리턴한다(1/1000초).&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentTimeMills&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 현재의 시간을 ns로 리턴한다(1/1,000,000,000초).&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nanoTime 메서드는 나노 단위의 시간을 리턴해 주기 때문에 currentTimeMills 메서드보다 비교 측정시에 더 정확하게 사용될 수 있다.&lt;/p&gt;

&lt;p&gt;추가로 시간 측정시 초기에 성능이 느리게 나온 이유는 여러 가지이지만, 클래스가 로딩되면서 성능 저하도 발생하고, JIT Optimizer가 작동하면서 성능 최적화도 되기 때문이라고 보면 된다.&lt;/p&gt;

&lt;p&gt;JMH(Java Microhenchmark Harness)는 JDK를 오픈 소스로 제공하는 OpenJDK에서 만든 성능 측정용 라이브러리다. JMH는 여러 개의 스레드로 테스트도 가능하고, 워밍업 작업도 자동으로 수행해주기 때문에 정확한 측정이 가능하다. 여러 결과를 제공하지만, 굵은 글씨로 표시된 값만 확인하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-자꾸-string을-쓰지-말라는-거야&quot;&gt;3. 자꾸 String을 쓰지 말라는 거야&lt;/h1&gt;
&lt;p&gt;다음은 일반적으로 사용하는 쿼리 작성 문장이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select * &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;from ( &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select A_column, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B_column, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 중간 생략(약 400라인)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 같은 메서드를 한 번 수행하면, 다음과 같은 메모리 사용량을 확인할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;메모리 사용량&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10회 평균 약 5MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;응답 시간&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10회 평균 약 5ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위 코드를 메모리 사용량과 응답 시간을 줄이기 위해 StringBuilder로 변경하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; select * &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; from ( &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; select A_column, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; B_column, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 중간 생략(약 400라인)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 변경한 후 수행한 결과는 다음과 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;메모리 사용량&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10회 평균 약 371KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;응답 시간&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10회 평균 약 0.3ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;stringbuffer-클래스와-stringbuilder-클래스&quot;&gt;StringBuffer 클래스와 StringBuilder 클래스&lt;/h3&gt;
&lt;p&gt;StringBuffer 클래스나 StringBuilder 클래스에서 제공하는 메서드는 동일하다. 하지만 StringBuffer 클래스는 스레드에 안전하게(ThreadSafe) 설계되어 있으므로, 여러 개의 스레드에서 하나의 StringBuffer 객체를 처리해도 전혀 문제가 되지 않는다. 하지만 StringBuilder는 단일 스레드에서의 안전성만을 보장한다.&lt;/p&gt;

&lt;h3 id=&quot;string-vs-stringbuffer-vs-stringbuilder&quot;&gt;String vs. StringBuffer vs. StringBuilder&lt;/h3&gt;
&lt;p&gt;String, StringBuffer, StringBuilder 셋 중 어느 것이 가장 빠르고 메모리를 적게 사용할까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;10,000회 반복하여 문자열을 더하고, 이러한 작업을 10회 반복한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로파일링 툴의 결과는 다음과 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;주요 소스 부분&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;응답 시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a+=aValue;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;95,801.41ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;95초&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;b.append(aValue);&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;247.48ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.24초&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;c.append(aValue);&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;174.17ms&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.17초&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;그리고 메모리 사용량을 다음과 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;주요 소스 부분&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;메모리 사용량(bytes)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;생성된 임시 객체수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a+=aValue;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100,102,000,000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4,000,000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;약 95Gb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;b.append(aValue);&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;29,493,600&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1,200&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;약 28Mb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;c.append(aValue);&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;29,493,600&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1,200&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;약 28Mb&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;응답 시간은 String보다 StringBuffer가 약 367배 빠르며, StringBuilder가 약 512배 빠르다. 메모리는 StringBuffer와 StringBuilder보다 String에서 약 3,390배 더 사용한다. 이러한 결과가 왜 발생하는지 알아보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a += aValue; // a = a + aValue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a에 aValue를 더하면 새로운 String 클래스의 객체가 만들어지고, 이전에 있던 a 객체는 필요 없는 쓰레기 값이 되어 GC 대상이 되어 버린다. 이러한 작업이 반복 수해오디면서 메모리를 많이 사용하게 되고, 응답 속도에도 많은 영향을 미치게 된다. GC를 하면 할수록 시스템의 CPU를 많이 사용하게 되고 시간도 많이 소요된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String은 짧은 문자열을 더할 경우 사용한다.&lt;/li&gt;
  &lt;li&gt;StringBuffer는 스레드에 안전한 프로그램이 필요할 때나, 개발 중인 시스템의 대부분이 스레드에 안전한지를 모를 경우 사용하면 좋다. 만약 클래스에 static으로 선언된 문자열을 변경하거나, singleton으로 선언된 클래스에 선언된 문자열일 경우에는 이 클래스를 사용해야만 한다.&lt;/li&gt;
  &lt;li&gt;StringBuilder는 스레드에 안전한지의 여부와 전혀 관계 없는 프로그램을 개발할 때 사용하면 좋다. 만약 메서드 내에 변수를 선언했다면, 해당 변수는 그 메서드 내에서만 살아있으므로, StringBuilder를 사용하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;4-어디에-담아야-하는지&quot;&gt;4. 어디에 담아야 하는지…&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/java-collection.png&quot; alt=&quot;Collection&quot; title=&quot;Collection&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collection: 가장 상위 인터페이스&lt;/li&gt;
  &lt;li&gt;Set: 중복을 허용하지 않는 집합을 처리하기 위한 인터페이스&lt;/li&gt;
  &lt;li&gt;SortedSet: 오름차순을 갖는 Set 인터페이스&lt;/li&gt;
  &lt;li&gt;List: 순서가 있는 집합을  처리하기 위한 인터페이스이기 때문에 인덱스가 있어 위치를 지정하여 값을 찾을 수 있다.&lt;/li&gt;
  &lt;li&gt;Queue: 여러 개의 객체를 처리하기 전에 담아서 처리할 때 사용하기 위한 인터페이스이다. 기본적으로 FIFO를 따른다.&lt;/li&gt;
  &lt;li&gt;Map: 키와 값의 쌍으로 구성된 객체의 집합을 처리하기 위한 인터페이스. 중복되는 키를 허용하지 않는다.&lt;/li&gt;
  &lt;li&gt;SortedMap: 키를 오름차순으로 정렬하는 Map 인터페이스&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set 인터페이스를 구현한 클래스로는 HashSet, TreeSet, LinkedHashSet 세 가지가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HashSet: 데이터를 해쉬 테이블에 담는 클래스로 순서 없이 저장된다.&lt;/li&gt;
  &lt;li&gt;TreeSet: red-black이라는 트리에 데이터를 담는다. 값에 따라서 순서가 정해진다. 데이터를 담으면서 동시에 정렬하기 때문에 HashSet보다 성능상 느리다.&lt;/li&gt;
  &lt;li&gt;LinkedHashSet: 해쉬 테이블에 데이터를 담는데, 저장된 순서에 따라서 순서가 결정된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;List 인터페이스를 구현한 클래스들은 담을 수 있는 크기가 자동으로 증가되므로, 데이터의 개수를 확실히 모를 때 유용하게 사용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vector: 객체 생성 시에 크기를 지정할 필요가 없는 배열 클래스이다.&lt;/li&gt;
  &lt;li&gt;ArrayList: Vector와 비슷하지만, 동기화 처리가 되어 있지 않다.&lt;/li&gt;
  &lt;li&gt;LinkedList: ArrayList와 동일하지만, Queue 인터페이스를 구현했기 때문에 FIFO 큐 작업을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;List의 가장 큰 단점은 &lt;strong&gt;데이터가 많은 경우 처리 시간이 늘어난다&lt;/strong&gt; 는 점이다. 가장 앞에 있는 데이터를 지우고 그 다음 1번 데이터부터 마지막 데이터까지 한 칸씩 옮기는 작업을 수행하야 하므로, 데이터가 적을 때는 상관없지만, 데이터가 많으면 많을수록 가장 앞에 있는 데이터를 지우는데 소요되는 시간이 증가한다.&lt;/p&gt;

&lt;p&gt;Queue 인터페이스를 구현한 클래스는 두 가지로 나뉜다. java.util 패키지에 속하는 LinkedList와 PriorityQueue는 일반적인 목적의 큐 클래스이며, java.util.concurrent 패키지에 속하는 클래스들은 ConcurrentQueue 클래스이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PriorityQueue: 큐에 추가된 순서와 상관없이 먼저 생성된 객체가 먼저 나오도록 되어 있는 Queue&lt;/li&gt;
  &lt;li&gt;LinkedBlockingQueue: 저장할 데이터의 크기를 선택적으로 정할 수도 있는 FIFO 기반의 링크 노드를 사용하는 블로킹 Queue&lt;/li&gt;
  &lt;li&gt;ArrayBlockingQueue: 저장되는 데이터의 크기가 정해져 있는 FIFO 기반의 블로킹 Queue&lt;/li&gt;
  &lt;li&gt;PriorityBlockingQueue: 저장되는 데이터의 크기가 정해져 있지 않고, 객체의 생성순서에 따라서 순서가 저장되는 블로킹 Queue&lt;/li&gt;
  &lt;li&gt;DelayQueue: 큐가 대기하는 시간을 지정하여 처리하도록 되어 있는 Queue&lt;/li&gt;
  &lt;li&gt;SynchronousQueue: put() 메서드를 호출하면, 다른 스레드에서 take() 메서드가 호출될 때까지 대기하도록 되어 있는 Queue. 이 큐에는 저장되는 데이터가 없다. API에서 제공하는 대부분의 메서드는 0이나 null을 리턴한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blocking Queue란 크기가 지정되어 있는 큐에 더 이상 공간이 없을 때, 공간이 생길 때까지 대기하도록 만들어진 큐를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/03/28/java-map.png&quot; alt=&quot;Map&quot; title=&quot;Map&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Map은 Key와 Value 쌍으로 저장되는 구조체이다. 그래서, 단일 객체만 저장되는 다른 Collection API들과는 다르게 따로 구분되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HashTable: 데이터를 해쉬 테이블에 담는 클래스이다. 내부에서 관리하는 해쉬 테이블 객체가 동기화되어 있다.&lt;/li&gt;
  &lt;li&gt;HashMap: 데이터를 해쉬 테이블에 담는 클래스이다. HashTable 클래스와는 다르게 null 값을 허용한다는 것과 동기화되어 있지 않다.&lt;/li&gt;
  &lt;li&gt;TreeMap: red-black 트리에 데이터를 담는다. TreeSet과는 다르게 키에 의해 순서가 정해진다.&lt;/li&gt;
  &lt;li&gt;LinkedHashMap: HashMap과 거의 동일하며 이중 연결 리스트(Doubly-LinkedList)라는 방식을 사용하여 데이터를 담는다는 점만 다르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;list-관련-클래스-중-무엇이-빠를까&quot;&gt;List 관련 클래스 중 무엇이 빠를까?&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;대상&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;평균 응답 시간(마이크로초)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ArrayList&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Vector&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;105&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LinkedList&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1,512&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LinkedListPeek&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedList는 Queue 인터페이스를 상속받기 때문에, get()보다는 순차적으로 결과를 받아오는 peek()이나 poll() 메서드를 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;Vector는 여러 스레드에서 접근할 경우를 방지하기 위해 get() 메서드에 synchronized가 선언되어 있어서 성능 저하가 발생할 수 밖에 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;map-관련-클래스-중-무엇이-빠를까&quot;&gt;Map 관련 클래스 중 무엇이 빠를까?&lt;/h3&gt;
&lt;p&gt;대부분의 클래스들이 동일하지만, 트리 형태로 처리하는 TreeMap 클래스가 가장 느리다.&lt;/p&gt;

&lt;h3 id=&quot;collection-관련-클래스의-동기화&quot;&gt;Collection 관련 클래스의 동기화&lt;/h3&gt;
&lt;p&gt;HashSet, TreeSet, LinkedHashSet, ArrayList, LinkedList, HashMap, TreeMap, LinkedHashMap은 동기화(synchronized)되지 않은 클래스이다. 이와는 반대로 동기화되어 있는 클래스로는 Vector와 HashTable이 있다.&lt;/p&gt;

&lt;p&gt;Map의 경우 키 값들을 Set으로 가져와 Iterator를 통해 데이터를 처리하는 경우가 발생한다. 이때 ConcurrentModificationException이라는 예외가 발생할 수 있다. 이 예외가 발생하는 여러 가지 원인 중 하나는 스레드에서 Iterator로 어떤 Map 객체의 데이터를 꺼내고 있는데, 다른 스레드에서 해당 Map을 수정하는 경우다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;5-지금까지-사용하던-for-루프를-더-빠르게-할-수-있다고&quot;&gt;5. 지금까지 사용하던 for 루프를 더 빠르게 할 수 있다고?&lt;/h1&gt;
&lt;p&gt;JDK 5.0 이전에는 for 구문을 다음과 같이 사용하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매번 반복하면서 list.size() 메서드를 호출하기 때문에 다음과 같이 수정해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/11261731&quot;&gt;개발자가 반드시 알아야 할 자바 성능 튜닝 이야기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.corej2eepatterns.com/&quot;&gt;Core J2EE Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/02/16/http-basic.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/02/16/http-basic.html"/>
        <title>Understanding HTTP Basics</title>
        <updated>2019-02-16T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;웹의 애플리케이션 계층 프로토콜인 HTTP(HyperText Transfer Protocol)은 웹의 중심이라고 볼 수 있고, 이것은 RFC 1945, RFC 2616에 정의되어 있습니다. 서로 다른 종단 시스템(서버, 클라이언트)에서 수행되는 프로그램들은 서로 HTTP 메시지를 교환하여 통신합니다. HTTP는 메시지의 구조 및 클라이언트와 서버가 어떻게 교환하는지에 대해 정의하고 있습니다. HTTP를 자세히 설명하기 전에 몇 가지 웹 전문용어를 살펴보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/02/27/http.png&quot; alt=&quot;HTTP&quot; title=&quot;HTTP&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;웹 페이지&lt;/strong&gt;(web page, 문서)는 객체들로 구성됩니다. &lt;strong&gt;객체&lt;/strong&gt;(object)는 단순히 단일 URL로 지정할 수 있는 하나의 파일(HTML, JPEG, GIF 등)입니다. 대부분의 웹 페이지는 &lt;strong&gt;기본 HTML 파일&lt;/strong&gt; 과 여러 참조 객체로 구성됩니다. 예를 들어, 웹 페이지가 HTML 텍스트와 5개의 JPEG 이미지로 구성되어 있으면, 이 웹 페이지는 6개의 객체를 갖고 있는 것입니다(기본 HTML 파일과 5개의 이미지). 기본 HTML 파일은 페이지 내부의 다른 객체를 그 객체의 URL로 참조하니다. 각 URL은 2개의 요소, 즉 ‘객체를 갖고 있는 서버의 호스트 네임’과 ‘객체의 경로 이름’을 갖고 있습니다. 예를 들어,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://sungjk.github.io/images/profile/scala.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;http://sungjk.github.io 은 호스트 네임이고, /images/profile/scala.png 는 경로 이름입니다. &lt;strong&gt;웹 브라우저&lt;/strong&gt;(크롬이나 파이어폭스 또는 IE)는 HTTP의 클라이언트 측을 구현하기 때문에 여기서는 단순히 웹의 관점에서 브라우저와 클라이언트라는 용어를 혼용하여 사용하겠습니다. HTTP의 서버 측을 구현하는 &lt;strong&gt;웹 서버&lt;/strong&gt;(Web Server)는 URL로 각각을 지정할 수 있는 웹 객체를 갖고 있습니다.&lt;/p&gt;

&lt;p&gt;HTTP는 웹 클라이언트가 웹 서버에게 웹 페이지를 어떻게 요청하는지와 서버가 클라이언트로 어떻게 웹 페이지를 전송하는지를 정의합니다. 이후에 클라이언트와 서버의 상호작용을 자세히 논하겠지만 일단 기본 개념은 다음과 같습니다. 사용자가 웹 페이지를 요청할 때, 브라우저는 페이지 내부의 객체에 대한 HTTP 요청 메시지를 서버에게 보냅니다. 서버는 요청을 수신하고 객체를 포함하는 HTTP 응답 메시지로 응답합니다.&lt;/p&gt;

&lt;p&gt;HTTP는 TCP를 전송 프로토콜로 사용합니다. HTTP 클라이언트는 먼저 서버에 TCP 연결을 시작합니다. 일단 연결이 이루어지면, 브라우주와 서버 프로세스는 그들의 소켓 인터페이스를 통해 TCP로 접속합니다. 클라이언트 측에서 보면 소켓 인터페이스는 클라이언트 프로세스와 TCP 연결 사이에서의 출입구이고, 서버 측에서 보면 소켓 인터페이스는 서버 프로세스와 TCP 연결 사이에서의 출입구입니다. 클라이언트는 HTTP 요청 메시지를 소켓 인터페이스로 보내고 소켓 인터페이스로부터 HTTP 응답 메시지를 받습니다. 마찬가지로 HTTP 서버는 소켓 인터페이스로부터 요청 메시지를 받고 응답 메시지를 소켓 인터페이스로 보냅니다. 일단 클라이언트가 메시지를 소켓 인터페이스로 보내면, 메시지는 클라이언트의 손을 떠난 것이고, TCP의 손에 쥐어진 것입니다. TCP가 HTTP에게 신뢰적인 데이터 전송 서비스를 제공한다는 것은 다들 아시죠? 이것은 클라이언트 프로세스가 발생시킨 모든 HTTP 요청 메시지가 궁극적으로 서버에 잘 도착한다는 것을 의미합니다. 마찬가지로 서버 프로세스가 발생시킨 각 HTTP 응답 메시지로 클라이언트에 잘 도착한다는 것을 의미합니다. 여기서 계층구조의 중요한 장점 하나를 보게 됩니다. &lt;strong&gt;HTTP는 데이터의 손실 또는 TCP가 어떻게 손실 데이터를 복구하고 네트워크 내부에서 데이터를 올바른 순서로 배열하는지 걱정할 필요가 없습니다.&lt;/strong&gt; 이것은 TCP와 프로토콜 스택의 하위 계층들이 하는 일입니다.&lt;/p&gt;

&lt;p&gt;서버가 클라이언트에게 요청 파일을 보낼 때, 서버는 클라이언트에 관한 어떠한 상태 정보도 저장하지 않습니다. 만약 특정 클라이언트가 몇 초 후에 같은 객체를 두 번 요청한다면, 잠시 전에 이미 그 객체를 보냈다고 서버가 알려 주면 좋겠지만 서버는 이전에 한 일을 기억하지 않으므로 그 객체를 또 보냅니다. HTTP 서버는 클라이언트에 대한 정보를 유지하지 않으므로, HTTP를 &lt;strong&gt;비상태 프로토콜&lt;/strong&gt;(stateless protocol)이라고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;persistent--non-persistent&quot;&gt;Persistent &amp;amp; Non-persistent&lt;/h1&gt;
&lt;p&gt;클라이언트와 서버의 상호작용이 TCP 상에서 발생할 때 개발자는 결정을 할 필요가 있습니다. 각 요청/응답 쌍이 분리된 TCP 연결을 통해 보내져야 하는가? 혹은 모든 요청과 해당하는 응답들이 같은 TCP 연결상으로 보내져야 하는가? 전자 방식의 경우 애플리케이션은 &lt;strong&gt;비지속 연결&lt;/strong&gt;(Non-persistent conneciton)이라고 하고, 후자 방식의 경우 &lt;strong&gt;지속 연결&lt;/strong&gt;(Persistent connection)이라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;non-persistent-connection&quot;&gt;Non-Persistent connection&lt;/h3&gt;
&lt;p&gt;웹 페이지를 서버에서 클라이언트로 전송하는 단계를 살펴보겠습니다. 페이지가 기본 HTML 파일과 10개의 JPEG 이미지로 구성되고, 이 11개의 객체가 같은 서버에 있다고 가정해보겠습니다. 기본 HTML 파일의 URL은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.iana.org/domains/root/db/xn--9t4b11yi5a.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;연결 과정은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP 클라이언트는 HTTP의 기본 포트 번호 80(https는 443)을 통해 http://www.iana.org 서버로 TCP 연결을 시도한다. TCP 연결과 관련하여 클라이언트와 서버에 각각 소켓이 있게 된다.&lt;/li&gt;
  &lt;li&gt;HTTP 클라이언트는 1단계에서 설정된 TCP 연결 소켓을 통해 서버로 HTTP 요청 메시지를 보낸다. 이 요청 메시지는 /domains/root/db/xn–9t4b11yi5a.html 경로 이름을 포함한다.&lt;/li&gt;
  &lt;li&gt;HTTP 서버는 1단계에서 연결된 소켓을 통하여 요청 메시지를 받는다. 저장장치로부터 /domains/root/db/xn–9t4b11yi5a.html 객체를 추출한다. HTTP 응답 메시지에 그 객체를 캡슐화한다. 그리고 응답 메시지를 소켓을 통해 클라이언트로 보낸다.&lt;/li&gt;
  &lt;li&gt;HTTP 서버는 TCP에게 TCP 연결을 끊으라고 한다(그러나 실제로 TCP 클라이언트가 응답 메시지를 올바로 받을 때까지 연결을 끊지 않는다).&lt;/li&gt;
  &lt;li&gt;HTTP 클라이언트가 응답 메시지를 받으면, TCP 연결이 중단된다. 메시지는 캡슐화된 객체가 HTML 파일인 것을 나타낸다. 클라이언트가 응답 메시지로부터 파일을 추출하고 HTML 파일을 조사하고 10개의 JPEG 객체에 대한 참조를 찾는다.&lt;/li&gt;
  &lt;li&gt;그 이후에 참조되는 각 JPEG 객체에 대하여 처음 네 단계를 반복한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;브라우저는 웹 페이지를 수신하면서, 사용자에게 그 페이지를 보여줍니다. 2개의 다른 브라우저는 웹 페이지를 서로 다른 방식으로 해석(렌더링)할 수 있습니다. HTTP는 클라이언트가 웹 페이지를 어떻게 해석하는지는 관심이 없습니다. HTTP 명세서(RFC 1945, RFC 2616)는 클라이언트 HTTP 프로그램과 서버 HTTP 프로그램 사이의 통신 프로토콜만 정의합니다.&lt;/p&gt;

&lt;p&gt;앞 단계는 서버가 객체를 보낸 후에 각 TCP 연결이 끊어지므로 비지속 연결을 사용하고 있습니다(연결이 다른 객체를 위해 유지되지 않습니다). 각 TCP 연결은 하나의 요청 메시지와 하나의 응답 메시지만 전송합니다. 그래서 이 예에서는 사용자가 웹 페이지를 요청할 때 11개의 TCP 연결이 만들어집니다.&lt;/p&gt;

&lt;p&gt;앞에 설명된 단계에서, 의도적으로 클라이언트가 10개의 순차적 TCP 연결을 통해 10개의 JPEG 파일을 얻는지 아니면 동시에 TCP 연결을 만들어 JPEG를 얻는지 언급하지 않았습니다. 사실 사용자가 동시성 정도를 조절할 수 있도록 브라우저를 구성할 수 있습니다(브라우저마다 동시에 연결 가능한 TCP 연결의 수가 다릅니다). 사용자가 원하면, 최대 동시 연결 수를 1로 할 수 있으며, 이 경우 10개의 연결이 순차 설정됩니다. 하지만 동시 연결을 하면 총 응답 시간을 줄일 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;persistent-connection&quot;&gt;Persistent connection&lt;/h3&gt;
&lt;p&gt;비지속 연결은 몇 가지 단점이 있습니다. 첫째, 각 요청 객체에 대한 새로운 연결이 설정되고 유지되어야 합니다. TCP 버퍼가 할당되어야 하고 TCP 변수들이 클라이언트와 서버 양쪽에 유지되어야 합니다. 이는 수많은 클라이언트의 요청을 동시에 서비스하는 웹 서버에게 부담을 줄 수도 있습니다. 둘째, 각 객체는 2 RTT(Round-Trip time)를 필요로 합니다(TCP 연결 설정에 1 RTT, 객체를 요청하고 받는데 1 RTT).&lt;/p&gt;

&lt;p&gt;지속 연결에서 서버는 응답을 보낸 후에 TCP 연결을 그대로 유지합니다. 같은 클라이언트와 서버 간의 이후 요청과 응답은 같은 연결을 통해 보내집니다. 특히, 전체 웹 페이지(앞 예에서 HTML 파일과 10개의 이미지)를 하나의 지속 TCP 연결을 통해 보낼 수 있습니다. 또한 같은 서버에 있는 여러 웹 페이지들을 하나의 지속 TCP 연결을 통해 보낼 수 있습니다. 이들 객체에 대한 요구는 진행 중인 요구에 대한 응답을 기다리지 않고 연속해서 만들어 질 수 있습니다(파이프라이닝). 일반적으로 HTTP 서버는 일정 기간(타임아웃 기간) 사용되지 않으면 연결을 닫습니다. 서버가 연속된 요구를 수신할 때, 서버는 객체를 연속해서 보냅니다. HTTP의 디폴트 모드는 파이프라이닝을 이용한 지속 연결을 사용합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;http-메시지-포맷&quot;&gt;HTTP 메시지 포맷&lt;/h1&gt;
&lt;p&gt;HTTP 명세서(RFC 1945, RFC 2616)는 요청과 응답에 관한 2 가지 HTTP 메시지 포맷을 정의합니다.&lt;/p&gt;

&lt;h3 id=&quot;http-요청-메시지&quot;&gt;HTTP 요청 메시지&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /hello.htm HTTP/1.1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3)
Host: www.tutorialspoint.com
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Connection: close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단한 요청 메시지만 잘 분석하면 많은 것을 배울 수 있습니다. 첫째, 메시지가 일반 ASCII 텍스트로 쓰여 있어 사람들이 읽을 수 있습니다. 둘째, 메시지가 다섯 줄로 되어 있고 각 줄은 CR과 LF(carriage return &amp;amp; line feed)로 구별됩니다. 마지막 줄에 이어서 추가 CR과 LF가 따릅니다. 이 요청 메시지는 다섯 줄이지만, 더 많은 줄로 구성되거나 하나의 줄이 될 수도 있습니다. HTTP 요청 메시지의 첫 줄은 &lt;strong&gt;요청 라인&lt;/strong&gt;(request line)이라고 부릅니다. 요청 라인은 3개의 필드(Method, URL, HTTP 버전)을 갖습니다. Method 필드는 GET, POST, HEAD, PUT 그리고 DELETE를 포함하는 여러가지 다른 값을 가질 수 있습니다. 예를 들어, GET 방식은 브라우저가 URL 필드로 식별되는 객체를 요청할 때 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/02/27/request-message.gif&quot; alt=&quot;Request Message&quot; title=&quot;Request Message&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-응답-메시지&quot;&gt;HTTP 응답 메시지&lt;/h3&gt;
&lt;p&gt;다음은 전형적인 HTTP 응답 메시지입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache/2.2.14 (Win32)
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
Content-Length: 88
Content-Type: text/html
Connection: close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기에는 3개의 셋션, 즉 초기 상태 라인, 6개의 헤더 라인, 그리고 Body로 구성되어 있습니다. &lt;strong&gt;상태 라인&lt;/strong&gt;은 3개 필드, 즉 프로토콜 &lt;code class=&quot;highlighter-rouge&quot;&gt;버전 필드&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;상태 필드&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;해당 상태 메시지&lt;/code&gt;를 갖습니다. 이 예에서 서버는 HTTP/1.1을 사용하고 있고 모든 것이 양호함(OK)을 나타냅니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Connection: close - 클라이언트에게 메시지를 보낸 후 TCP 연결을 닫는 데 사용한다.&lt;/li&gt;
  &lt;li&gt;Date: - HTTP 응답이 서버에 의해 생성되고 보낸 날짜와 시간을 나타낸다. 이 시간이 객체가 생성되거나 마지막으로 수정된 시간을 의미하는 것이 아니라는 것에 유의하라. 서버가 객체를 응답 메시지에 삽입하여 응답 메시지를 보낸 시간을 의미한다.&lt;/li&gt;
  &lt;li&gt;Server: - 메시지가 Apache 웹 서버에 의해 만들어졌음을 의미한다. 요청 메시지의 User-agent 헤더 라인과 비슷하다.&lt;/li&gt;
  &lt;li&gt;Last-Modified: - 객체가 생성되거나 마지막으로 수정된 시간과 날짜를 나타낸다. 이 헤더는 객체를 로컬 클라이언트와 프록시 서버 같은 곳의 캐싱에 사용된다.&lt;/li&gt;
  &lt;li&gt;Content-Length: - 송신되는 객체의 바이트 수를 나타낸다.&lt;/li&gt;
  &lt;li&gt;Content-Type: - 개체 몸체 내부의 객체가 HTML 텍스트인 것을 나타낸다. 객체 타입은 파일 확장자로 나타내는 것이 아니라 공식적으로 Content-Type: 헤더로 나타낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/02/27/response-message.gif&quot; alt=&quot;Response Message&quot; title=&quot;Response Message&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 HTTP 상태 코드 몇 가지만 알아보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;200 OK&lt;/strong&gt;: 요청이 성공되었고, 정보가 응답으로 보내졌다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;301 Moved Permanently&lt;/strong&gt;: 요청 객체가 영원히 이동되었다. 새로운 URL은 응답 메시지의 Location: 헤더에 나와 있다. 클라이언트 소프트웨어는 자동으로 새로운 URL을 추출한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;400 Bad Request&lt;/strong&gt;: 서버가 요청을 이해할 수 없다는 일반 오류 코드다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404 Not Found&lt;/strong&gt;: 요청한 해당 리소스가 서버에 존재하지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;505 HTTP Version Not Supported&lt;/strong&gt;: 요청 HTTP 프로토콜 버전을 서버가 지원하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages&quot;&gt;HTTP Messages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_message_body&quot;&gt;HTTP Message body&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791185475318&quot;&gt;컴퓨터 네트워킹 : 하향식 접근&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/01/27/monad-transformers.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/01/27/monad-transformers.html"/>
        <title>간단한 Monad Transformers 만들어보기</title>
        <updated>2019-01-27T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;future&quot;&gt;Future&lt;/h1&gt;
&lt;p&gt;스칼라로 비동기 코드를 작성하고자 하면 가장 먼저 접하는 녀석이 &lt;strong&gt;Future&lt;/strong&gt; 입니다. 자바에도 Future(Java 5)가 있지만 스칼라와 아주 다릅니다. 두 퓨쳐 모두 비동기적인 계산의 결과를 표현하지만, 자바의 퓨처에서는 블로킹(blocking) 방식의 get을 사용해 결과를 얻어와야 합니다. 반면, 스칼라의 Future에서는 계산 결과의 완료 여부와 관계없이 결과 값에 대해 변환(transform)을 수행할 수 있습니다. 각 변환은 원래의 Future를 지정한 함수에 따라 변환한 결과를 비동기적으로 담은 것을 표현하는 새로운 Future를 만듭니다. 여기서 실제로 계산을 수행하는 스레드(thread)는 암시적으로 제공되는 실행 컨텍스트(execution context)를 사용해 결정됩니다. 이런 방식을 사용하면 불변값에 대한 일련의 변환으로 비동기 계산을 표현할 수 있고, 공유 메모리나 락(lock)에 대해 신경을 쓸 필요가 없어서 쉽게 동시성을 지원할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;monad&quot;&gt;Monad&lt;/h1&gt;
&lt;p&gt;Future에 대해 좀 더 공부하다 보면 Monad와 같은 단어를 접하게 됩니다. 그리고 Monad에 대한 설명을 찾아보면 다음과 같은 그림을 수도 없이 보게 됩니다(실제로 엄청 도움됨).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/01/27/monads.png&quot; alt=&quot;Monads&quot; title=&quot;Monads&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Monads [1]&lt;/center&gt;

&lt;p&gt;간단히 말하자면 Monad는 어떤 값을 감싸는 Wrapper인데, 모든 Wrapper들이 Monad가 되는 것이 아니라 아래와 같은 3가지 법칙을 만족해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Associativity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 이 Wrapper는 다음과 같은 2가지 기능을 제공합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;identity (하스켈: return, 스칼라: unit)&lt;/li&gt;
  &lt;li&gt;bind (하스켈: »=, 스칼라: flatMap)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;identity는 특정 값을 감싸는 역할을 하고, bind는 감싼 값을 꺼내서 변형(transform)하고 그 값을 다시 감싸서 반환하는 역할을 합니다. Java 8이나 Rx를 경험해보신 분들이라면 CompletableFuture, Observable이 모나드이기 때문에 이를 생각하면서 공부하시면 이해하기가 좀 더 수월할거에요. 더 자세한 설명은 &lt;a href=&quot;https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221&quot;&gt;Javascript Functor, Applicative, Monads in pictures&lt;/a&gt;, &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;, &lt;a href=&quot;https://gist.github.com/jooyunghan/e14f426839454063d98454581b204452&quot;&gt;Functor and monad examples in plain Java&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/28139260&quot;&gt;Why do we need monads?&lt;/a&gt; 등을 참고해주세요!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;why-use-monad-transformers&quot;&gt;Why use Monad Transformers?&lt;/h1&gt;
&lt;p&gt;Future만 사용하면 아무런 문제가 없지만 개발을 하다보면 Future[Option[T]] 타입을 다뤄야할 때가 엄청 많습니다. 시스템에 userId에 해당하는 유저가 존재한다면 Future.Some(Int)를 리턴할 것이고, 그렇지 않으면 Future.None을 리턴할 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;userId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아직까지는 괜찮습니다. 하지만 리턴될 결과값에 다음과 같이 맵핑을 하고 싶다면 먼저 Future에 맵핑을 하고, 그다음 Option에도 맵핑을 해야합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ageOpt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;약간 지저분하지만 아직까지도 봐줄만 합니다. 하지만 getUserAge 같은 Future[Option[T]] 타입 N개를 처리해야 할 때는 어떻게 해야할까요? 일단 먼저 생각나는 방법으로 처리해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compile error!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for-comprehension으로 처리해서 코드는 괜찮아 보이지만, 이 코드는 컴파일되지 않습니다. 이 문제를 해결하려면 yield 문안에 Option에 대한 처리를 추가해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOptFuture1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOptFuture2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ageOpt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOptFuture1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ageOpt2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOptFuture2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;age1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;age2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;age1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 중첩된 코드를 깔끔하게 해줄 수 있는게 바로 Monad Transformers의 역할입니다. 스칼라에는 &lt;a href=&quot;https://scalaz.github.io/7/&quot;&gt;Scalaz&lt;/a&gt;나 &lt;a href=&quot;https://typelevel.org/cats/&quot;&gt;Cats&lt;/a&gt; 라이브러리가 이러한 Transformers를 구현체로 제공하고 있습니다. 여기서는 이 라이브러리를 사용하지 않고 간단한 Transformers를 만들어 보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;option-transformer&quot;&gt;Option Transformer&lt;/h1&gt;
&lt;p&gt;Monad Transformers는 모나드에 적용할 변환기인데, 사실 스칼라의 Future는 Monad의 3가지 법칙 중 결합법칙을 만족하고 있지 않아서 모나드가 아니라 모나드의 일종인 Monadic이라는 표현을 쓰고 있습니다(참고: &lt;a href=&quot;https://stackoverflow.com/a/27467037&quot;&gt;Is Future in Scala a monad?
Ask Question&lt;/a&gt;). 그럼 일단 Monad를 흉내낼만한 trait을 하나 만들어보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 Monad는 타입 파라미터로 T[_]를 받는 타입 생성자이고, map, flatMap, pure 함수를 가지고 있습니다. 그럼 이 타입 생성자를 가지고 나만의 FutureMonad를 구현해보겠습니다. Future와 동일하게 맵핑이 가능해야 하므로 trait에 있는 map, flatMap, pure를 구현해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futureMonad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FutureMonad는 만들었으니 이제 Option에 대한 Transformer를 만들어보겠습니다. OptionTransformer class는 T 타입으로 감싼 Option과 하나의 Monad 인스턴스(타입 파라미터를 T로 받은)를 생성자의 값으로 받습니다. 그리고 for-comprehension에 사용될 수 있도록 map, flatMap을 구현해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;m:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;result:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OptionTransformer의 map은 먼저 Monad 인스턴스에 대해 map을 호출하고, 그다음 map의 인자로 넘겨준 function을 적용해 map을 호출합니다(이건 쉬움). flatMap은 좀 어려우니 천천히 살펴보겠습니다. Monad flatMap의 정의를 다시 생각해보면 적용할 함수(f: A =&amp;gt; T[B])를 인자로 받아 T[A]를 T[B]로 변형시킵니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;f:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flatMap의 value는 OptionTransformer의 생성자로 주어진 값을 넘겨주고, 적용할 함수(f) 자리에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;a =&amp;gt; a.map(b =&amp;gt; f(b).value).getOrElse(m.pure(None))&lt;/code&gt; 를 넘겨주는데요. flatMap의 인자로 받은 함수가 호출되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;a.map(b =&amp;gt; f(b).value)&lt;/code&gt; 값이 나오게 되는데 이 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Option[T[Option[B]]]&lt;/code&gt; 타입을 가지게 됩니다. 그리고 이 타입에서 값을 추출하거나 값이 없으면 None을 리턴하기 위해 FutureMonad에 있는 pure 함수에 None 값을 넣어 getOrElse를 적용합니다.&lt;/p&gt;

&lt;p&gt;이제 Future[Option[T]] 타입을 위에서 만든 OptionTransformer로 감싸면 Future 안에 있는 Option까지 자동으로 처리할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionTransformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUserAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageOpt2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;끝으로&quot;&gt;끝으로&lt;/h1&gt;
&lt;p&gt;함수형 프로그래밍에서는 반복되는 작업들을 최소화하기 위해 함수 합성(function composition)을 효과적으로 할 줄 알아야 한다고 생각합니다. 그리고 이러한 방법 중 하나가 위에서 작성한 OptionTransformer 같은 것을 만드는 것인데 직접 구현해서 사용하는 것보다 Scalaz나 Cats 라이브러리에서 지원하는 강력한 타입 클래스들을 사용하시는 것을 추천드립니다.&lt;/p&gt;

&lt;p&gt;피드백이나 질문은 &lt;a href=&quot;mailto:ajax0615gmail.com&quot;&gt;이메일&lt;/a&gt;로 주시면 최선을 다해 답변드리겠습니다. 짧지 않은 글을 읽어주셔서 감사드립니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;[1] &lt;a href=&quot;https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221&quot;&gt;Javascript Functor, Applicative, Monads in pictures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2019/01/26/pusher.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2019/01/26/pusher.html"/>
        <title>블록체인 모니터링을 위한 Pusher 개발기</title>
        <updated>2019-01-26T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;들어가기에-앞서&quot;&gt;들어가기에 앞서&lt;/h1&gt;
&lt;p&gt;본 포스팅에서는 블록체인보다는 푸시 알림 시스템에 대한 이야기가 주를 이루고 있고, 운영 중인 블록체인 서비스에 사용될 푸시 시스템을 개발한 경험을 공유하고자 합니다. 이해를 돕기 위한 간단한 코드들은 Scala로 작성되어 있습니다. 기존에 실시간 메시징을 유료로 사용할 수 있는 서비스로는 &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;, &lt;a href=&quot;https://sendbird.com/&quot;&gt;SendBird&lt;/a&gt;, &lt;a href=&quot;https://www.pubnub.com/&quot;&gt;PubNub&lt;/a&gt; 등이 있습니다. 안정적인 서비스를 유료로 사용하여 개발과 운영 비용을 줄일 수 있었지만, 실시간 알림과 관련된 기술(Netty, Websocket, APNs, FCM 등)에 대해 전반적으로 이해하고 있었고 개인적으로 도전해보고 싶어서 직접 개발을 하게 되었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pusher와-blockchain&quot;&gt;Pusher와 Blockchain&lt;/h1&gt;
&lt;p&gt;블록체인 기반의 서비스를 개발해보신 분이라면 아시겠지만, 요청에 대한 즉각적인 응답을 기대하는 HTTP 프로토콜과 달리, 블록체인 네트워크 상에서는 하나의 트랜잭션이 블록에 포함되기 까지는 길게 1시간이 넘게 소요되는 경우도 있습니다. 따라서 요청에 대한 응답을 비동기적으로 &quot;&lt;strong&gt;잘&lt;/strong&gt;&quot; 처리해주는 것만으로도 서비스의 품질을 크게 개선할 수 있습니다.&lt;/p&gt;

&lt;p&gt;현재 개발된 Pusher는 가상화폐를 담보로 현금을 대출해주는 블록체인 기반 서비스 &lt;a href=&quot;https://www.brick.finance/&quot;&gt;Brick&lt;/a&gt;에 사용되고 있습니다. 대부업의 특성상 현재 대출건에 대한 알림, 청산에 대한 경고 등이 매우 중요했습니다. 현재 비트코인은 3 Block confirm, 이더리움은 6 Block confirm 기준으로 담보 입금이 완료되었다는 것을 정책으로 삼고 있는데, 여기에 소요되는 시간이 위에서 말씀드렸듯이 길게는 1시간이 걸릴 수 있습니다. 그래서 알림에 대한 중요성과 비동기적인 작업에 대한 처리를 잘 해줘야 된다는 것을 우선으로 설계할 필요가 있었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;푸시-시스템&quot;&gt;푸시 시스템&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/1119&quot;&gt;nPush&lt;/a&gt;나 &lt;a href=&quot;https://developers.kakao.com/features/platform#%ED%91%B8%EC%8B%9C-%EC%95%8C%EB%A6%BC&quot;&gt;KPusher&lt;/a&gt;(3rd party에 제공되기도 함)처럼 보통 각 회사마다 자사의 서비스에 사용될 글로벌 푸시 시스템을 가지고 있습니다. 이러한 푸시 시스템이 필요한 이유는 nPush에도 잘 소개되어 있듯이, 유저가 원하는 정보를 Pull(가져오기)하는 것과 달리, 유저가 원하든 원치 않든 정보를 Push(내려주기)해야 할 경우가 있기 때문입니다. 웹소켓 기반의 실시간 메시징을 지원하는 애플리케이션들이 대부분 그렇겠지만 카카오톡을 예로 들어보겠습니다. 애플리케이션은 서버와 연결된 채널이 존재하면 해당 채널을 통해 데이터를 받고, 연결된 채널이 존재하지 않으면 외부 푸시 시스템(APNs, FCM, GCM 등)을 통해 데이터를 전달받습니다. 데이터를 제공하는 서버 입장에서도 마찬가지입니다. 클라이언트와 연결된 채널이 존재하면 해당 데이터를 채널로 전송하고, 그렇지 않으면 외부 푸시 시스템을 통해 전달되도록 요청을 보냅니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pusher란&quot;&gt;Pusher란?&lt;/h1&gt;
&lt;p&gt;이러한 Pusher를 개발하기 전에 어떤 요구 사항이 있을지 생각해보았습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;SessionManager&lt;/strong&gt;: Pusher는 클라이언트와 연결된 채널(Session)을 관리하고 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Identity&lt;/strong&gt;: Pusher는 해당 메시지를 어떤 클라이언트에게 전송할지 구분할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: Pusher는 푸시 알림 메시지 뿐만 아니라 카카오톡 알림톡 메시지도 지원해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clustering&lt;/strong&gt;: Pusher가 여러 대의 서버(Node)로 운영될 경우, 노드 간에 클러스터링이 가능해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Durable&lt;/strong&gt;: Pusher는 클라이언트와 연결이 끊겼을때 메시지 손실을 최소화 할 방안을 가지고 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SDK&lt;/strong&gt;: 추가로, 클라이언트에서 사용할 SDK를 제공해주면 좋을것 같다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/01/26/pusher-diagram.png&quot; alt=&quot;Pusher Diagram&quot; title=&quot;Pusher Diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Pusher Diagram&lt;/center&gt;

&lt;h3 id=&quot;1-sessionmanager&quot;&gt;1. SessionManager&lt;/h3&gt;
&lt;p&gt;클라이언트에게 메시지를 보내야할 때 외부 시스템에 의존하지 않고 연결된 채널로 메시지를 전송하기 위해 클라이언트와의 커넥션을 관리할 녀석이 필요했습니다. SessionManager는 클라이언트의 모든 세션을 갖고 있지 않고 현재 서버와 커넥션이 하나라도 있는 세션만 갖고 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;activeSessionsOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;identity:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectionsOfSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;identity:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addActiveSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;identity:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;channel:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;validUntil:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionInfo&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;channel:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;closeIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;identity:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forEachIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;func:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;Pusher SessionManager&lt;/center&gt;

&lt;h3 id=&quot;2-identity&quot;&gt;2. Identity&lt;/h3&gt;
&lt;p&gt;Pusher는 메시지를 보내기 위해 직접 유저 정보를 찾지 않고, Pusher와 연결된 클라이언트(채팅 앱의 경우 채팅 서버 뿐만 아니라 모바일 클라이언트도 포함)로부터 메시지를 보낼 대상을 함께 전달 받습니다. &lt;strong&gt;Identity&lt;/strong&gt; 는 appId를 가지고 있는데, 이 값은 해당 유저가 어떤 앱의 유저인지를 구분하는 역할을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Pusher Identity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;appId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TokenIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;appId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;token:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;appId&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;appId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;userId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;appId&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PhoneIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;appId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;phoneNumber:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;appId&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;phone&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;Pusher Identity&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;TokenIdentity&lt;/strong&gt;: 푸시 알림에 사용될 디바이스 토큰(DeviceToken) 값을 가진 Identity. 클라이언트와 연결된 채널이 존재하지 않는 경우 외부 푸시 시스템에 사용됨.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UserIdentity&lt;/strong&gt;: 앱의 특정 유저 ID 값을 가진 Identity. 클라이언트와 연결된 채널이 존재하는 사용됨.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PhoneIdentity&lt;/strong&gt;: 유저의 전화번호 정보를 가진 Identity. 카카오톡 알림톡 전송에 사용됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-message&quot;&gt;3. Message&lt;/h3&gt;
&lt;p&gt;푸시 알림 메시지 뿐만 아니라 카카오톡 알림톡 메시지도 지원하기 위해 간단한 메시지 모델을 만들어 보자면 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;FCM:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;APNs:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ALIMTALK:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;msgType:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FcmPushMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;identity:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;androidNotification:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndroidNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;dataOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;msgType:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FCM&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;notification&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;androidNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApnsPushMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;apsAlert:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApsAlert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;badgeOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;soundOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;dataOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;msgType:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APNs&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aps&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apsAlert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;badge&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;badgeOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sound&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlimtalkMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;button:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;msgType:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALIMTALK&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AndroidNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;badgeOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;soundOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;clickActionOpt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;badge&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;badgeOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sound&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click_action&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clickActionOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApsAlert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;center&gt;Pusher Message&lt;/center&gt;

&lt;h3 id=&quot;4-clustering&quot;&gt;4. Clustering&lt;/h3&gt;
&lt;p&gt;Pusher는 클라이언트를 다수의 노드에 골고루 분산시키기 위해 &lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent_hashing&quot;&gt;Consistent Hashing&lt;/a&gt;을 바탕으로 클라이언트가 연결할 노드의 번호를 선택합니다. Consistent Hashing은 다수의 노드로 이루어진 데이터를 저장할 때 데이터의 키를 기반으로 하여 어떤 노드에 저장할 것인가를 정하는 기술입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/01/26/consistent-hashing.png&quot; alt=&quot;Consistent Hashing&quot; title=&quot;Consistent Hashing&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Consistent Hashing&lt;/center&gt;

&lt;p&gt;클라이언트는 각 노드에 무작위로 분포되기 때문에 클라이언트의 입장에서는 분포가 균일하지 않을 수 있습니다. 이러한 문제를 해결하기 위해 각 노드의 주소를 가상 노드(Virtual node)를 링마다 배치하여 클라이언트가 더 균일하게 분포되도록 개선하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodesHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;keysFromNodeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;serverAddress:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageDigest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MD5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$ServerAddress-$idx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;p:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 static 함수는 특정 주소에 대해서 항상 같은 값(256-bit Integers)의 가상 노드 256개를 생성하는데 사용됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodesHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keysFromNodeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1613828804&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;805888401&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1242242519&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;551244407&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;393482942&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1554231298&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1858188109&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1908435250&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;660653046&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;517057465&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;904840963&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1476753659&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;342604970&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;515299240&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1288222429&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;779656827&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2037399559&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1427420624&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;177689550&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1892869121&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1517962223&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;354243803&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;304206007&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1957923660&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140770369&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;760543721&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;650264596&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1593120287&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1355313611&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;962198633&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1004129914&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70477332&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2031925189&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;723110065&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;672204833&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;947224700&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;274888432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1423223415&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1420168683&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85346857&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;922546808&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1076865946&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;122267179&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1913857477&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1555275447&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;810469141&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640917472&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;934794078&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1810234907&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1562144075&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18692565&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2117204431&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;357504428&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1246787302&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;350793204&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1908806167&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1970311178&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;959447624&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;707502366&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1094925119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365776523&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;496088576&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2051046536&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1364362178&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1977503229&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1042715249&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1955188796&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;262565098&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;861039408&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1763975204&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1684449900&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;476868029&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1557139094&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1768818077&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1257410157&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1311555967&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2011755274&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1594419479&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1307099968&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;536965055&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1277818912&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51397584&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1139482275&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2102188327&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100274602&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75259803&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1032978855&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2007734034&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1228108687&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1714750577&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1341681246&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1021786423&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;955596225&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1245949559&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76680524&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1193046374&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;246758679&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200673478&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;980763423&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1812328510&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;438768596&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;781744344&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3309151&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1555644692&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018480450&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1671631621&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13394538&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1848291827&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1544671904&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;699288205&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1547269108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1661830641&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1120434381&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1599575767&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;332561062&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1843220596&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1047282622&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;572559546&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1743167194&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1351241939&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;815458776&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1417568675&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1343005219&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;137701485&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;331167741&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1513564594&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97983972&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1392985810&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400112883&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1269103468&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;173184182&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1722233430&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;393017785&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1622242010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2118965693&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1962593630&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;981267341&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1811049954&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1841069162&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;498743983&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;253471631&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2052316130&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1775967946&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1538214396&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1876464562&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;817865513&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1489190155&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1471206909&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;820498304&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;198786554&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;515441683&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;117266172&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1869298863&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1068853134&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;836060665&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016601691&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1317440967&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2131235450&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;558919828&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1054833407&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;696668126&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1952639747&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1551246507&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1125957890&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2098746237&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1674812526&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;334826075&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;559222942&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1469566133&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;549285489&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;133530737&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1148609705&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1836022993&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1607708207&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1171740179&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;601021587&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1243444679&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;356597326&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;427834734&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;352098878&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;772217546&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;149147634&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;292207701&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;633499874&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;911994922&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;602301400&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1834972875&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1488569339&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1770385813&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1463048607&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2095666593&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1665880366&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1486304109&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1994525154&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36382944&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104093429&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2011866619&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1132427057&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048597077&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1730078752&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1482494370&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2112975991&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;590764960&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1409136658&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1486699354&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1106788556&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;497689019&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1350284219&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800565130&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2097534770&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1923284090&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;837916073&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1875935334&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34289885&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;487295685&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1683841472&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1561525968&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;560648709&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1807621048&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;157389896&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;972261194&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1170739810&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;407368554&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1978296563&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;258024599&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1675683119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1235620573&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2012928834&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1183544440&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1265599828&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1886705238&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;620522618&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;248828121&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1491055175&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123969986&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;483018967&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1420757748&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1248835495&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12056062&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1242639703&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2135002342&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;727649740&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1539556995&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;660080873&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1926986892&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;581446260&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1771061460&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;582120956&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;974952416&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1526406632&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;858292446&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;612970149&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;837948651&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;277877074&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;253221013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49730854&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-durable&quot;&gt;5. Durable&lt;/h3&gt;
&lt;p&gt;만약 클라이언트가 Pusher와 연결이 끊기면 어떻게 될까? 메시지를 보내고 싶어도 못보내는 상황이 생길것 입니다. 그래서 보통 데이터가 유실될 수 있다고 보면 이를 방지하기 위해 데이터를 메모리에 저장하는 대신 디스크에 저장하는 방식으로 메시지 큐(Message Queue)를 사용할 수 있는데, 클라이언트에서 온 요청에 대한 응답이 실시간으로 필요한 경우에는 메시지 큐가 어울리지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;가장 많이 사용되고 있는 메시지 큐에는 Kafka와 RabbitMQ 등이 있는데, 기본적으로 Kafka는 순서가 중요하지 않은 대용량 스트리밍 메시지를 처리하기 위한 도구라서 순서 보장와 데이터 영속성이 중요할때 사용하는 RabbitMQ와는 용도에 차이가 있습니다. 하지만 Kafka의 토픽을 1로 하고 사용하면, 순서가 보장되므로 RabbitMQ처럼 사용할 수 있으니까 토픽 1로 사용하면 됩니다. 하지만 Kafka에 비해 RabbitMQ가 지원하는 기능이 훨씬 많기 때문에 처리할 메시지의 양이 엄청 크지 않다면 RabbitMQ를 사용하는게 개발하는 입장에서 좀 더 편할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/01/26/rabbitmq.png&quot; alt=&quot;RabbitMQ&quot; title=&quot;RabbitMQ&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;RabbitMQ [1]&lt;/center&gt;

&lt;p&gt;그리고 당장 Pusher가 사용될 애플리케이션의 특성을 봤을때 실시간 응답보다는 메시지의 영속성을 유지하는 것이 우선인 것으로 보였습니다. 그래서 Pusher와 클라이언트 간의 메시지 손실을 최소화하기 위해 연결이 끊긴 경우에는 RabbitMQ를 통해 메시지를 Pub/Sub 할 수 있도록 구현하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;6-sdk&quot;&gt;6. SDK&lt;/h3&gt;
&lt;p&gt;Pusher의 클라이언트는 Android, iOS, 그리고 API 서버들일텐데.. 메시지를 보낼 API 서버에 Pusher의 클라이언트 코드를 작성하는 것도 제가 해야할 일 중 하나였습니다. 그래서 하는 김에 안드로이드에서도 사용 가능하도록 하나의 SDK를 만들면 좋을것 같다는 생각을 하였고, 개인적으로 요즘 제일 좋아하는 언어인 코틀린으로 SDK를 만들기 시작했습니다. 일단 SDK를 만들어 놓으면 제가 제일 먼저 사용하게 될 것이지만, 나 뿐만 아니라 나중에 SDK를 사용할 클라이언트 개발자들도 쉽게 사용할 수 있도록 만드는 것이 좋겠다는 생각을 했습니다. 아래는 SDK를 개발하면서 고려했던 사항들입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Request Model - Pusher SDK&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;successResultOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;json:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;toJsonText:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;responseOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;json:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;resultCode:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isValidInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInt&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInt&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;successResultOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Response Model - Pusher SDK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;result:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;errorCode:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;responseJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;errorCode:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Server Exception $errorCode&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;InvalidJson:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;InvalidAction:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;MissingParams:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;InvalidParams:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;UnexpectedInternalError:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;309&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;UnexpectedExternalError:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;UnknownError:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;errorCode:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServerErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnknownError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;표준 예외 사용&lt;/strong&gt;: Pusher에 정의된 Exception을 처리하는 것을 제외하고 나머지는 Java에서 사용되는 표준 예외를 사용해 SDK 사용자가 알기 쉽고 사용하기 편리하게 만들자.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;내부 캐시 정의&lt;/strong&gt;: SDK 내부에 Storage를 구현하여 Initialize 단계에서 자신의 Identity를 등록, 메시지를 보낼 수 없는 상황이면 해당 메시지를 저장, 그리고 서버와의 변경 사항이 없다면 캐시된 데이터를 사용하도록 만들자.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Retry 로직 구현&lt;/strong&gt;: Pusher와 연결이 끊긴 경우, Pusher와 재연결하기 위한 로직을 구현하자.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;메시지 영속성 유지&lt;/strong&gt;: Pusher와 연결이 끊긴 경우, 해당 메시지는 Storage에 저장되고 RabbitMQ에 publish를 하거나 Pusher와 다시 연결이 되면 메시지를 해당 채널로 전송한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;버전 관리&lt;/strong&gt;: 변경 사항이 적절히 적용되지 않으면 기능에 장애가 생길 수 있으므로 Nexus Repository를 통해 Pusher와 버전을 동기화하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;끝으로&quot;&gt;끝으로&lt;/h1&gt;
&lt;p&gt;포스팅에서 예제 코드들은 스칼라로 작성하였는데 사실 Pusher는 자바로 구현하였습니다. 함수형 프로그래밍에 관심이 많아 스칼라로 무언가를 만드는 것에 익숙해져 있었는데, 생각해보니 자바로 어떤 프로그램을 처음부터 끝까지 만들어본 적이 오래된것 같아 자바를 선택하게 되었습니다. 개발하는 동안 ‘그냥 스칼라로 할 걸’ 하며 후회한 적이 많았지만, 이전에 공부했었던 이펙티브 자바를 다시 펼쳐 보면서 앱을 더 잘 만들기 위해 더 많은 노력을 했던것 같습니다.&lt;/p&gt;

&lt;p&gt;푸시 알림 시스템을 개발할 당시에 아침에는 Pusher를 개발하고 오후에는 API 서버, 저녁에는 스마트 컨트랙트와 Pusher SDK를 개발하였습니다. 특별한 일이 없으면 주말에도 개발을 했고 하루에 코딩을 12시간 넘게 한적도 있는데 힘들다는 생각보다는 너무너무 재미있었습니다. 혼자서 Spring과 같은 정형화된 프레임워크의 도움없이 밑단부터 직접 개발해 볼 수 있는 기회가 많지 않을것 같은데… 정말 값진 경험이었다고 생각합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pusher.com/docs/push_notifications/reference/architecture&quot;&gt;Push Notifications reference: System architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[1] &lt;a href=&quot;https://docs.microsoft.com/ko-kr/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/rabbitmq-event-bus-development-test-environment&quot;&gt;RabbitMQ를 사용하여 개발 또는 테스트 환경에 대한 이벤트 서비스 구현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/09/04/if-kakao-2018.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/09/04/if-kakao-2018.html"/>
        <title>if kakao 개발자 컨퍼런스 2018</title>
        <updated>2018-09-04T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;코엑스에서 열렸던 &lt;a href=&quot;https://if.kakao.com/&quot;&gt;if kakao 개발자 컨퍼런스 2018&lt;/a&gt;에 참여하였습니다. 컨퍼런스에서 다루었던 주제는 Map 관련, AI, 빅데이터, 모바일, 백엔드, 블록체인, 오픈소스 등이 있었는데요. 저는 이 중에서 주로 하고 있는 일인 블록체인과 백엔드 관련 세션만 참석하였고, 본 포스팅에서도 이 주제들만 후려쳐서 정리하였습니다(ㅠㅠ). 오탈자나 틀린 정보가 있다면 넓은 아량으로 양해 부탁드리겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_0.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;9rum-kakao-cloud-native-playform---공용준andrewkong&quot;&gt;9RUM, kakao Cloud Native Playform - 공용준(andrew.kong)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_1.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;클라우드란-무엇일까&quot;&gt;클라우드란 무엇일까?&lt;/h3&gt;
&lt;p&gt;2016: Programmable Resource Management
-&amp;gt;
2017: Programmable Resource Life Cycle Management
-&amp;gt;
2018: Programmable Service Management&lt;/p&gt;

&lt;p&gt;CMMI Model에 따라 진화하는 클라우드 세계.&lt;/p&gt;

&lt;h3 id=&quot;krane-카카오의-iaas&quot;&gt;KRANE, 카카오의 Iaas&lt;/h3&gt;
&lt;p&gt;IaaS를 왜하는가? 개발 서비스에 한해서 셀프 서비스를 만들어 보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BareMetal TBD, KVM, LB, DB&lt;/li&gt;
  &lt;li&gt;Inhouse Auth, IMS(Service Topology), AEZORO&lt;/li&gt;
  &lt;li&gt;Data Center Level Scalable Network&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kemi-카카오의-maas&quot;&gt;KEMI, 카카오의 Maas&lt;/h3&gt;
&lt;p&gt;컴퓨팅 리소스가 많이 필요하다보니 CMM2 단계로 올라감.&lt;/p&gt;

&lt;p&gt;요구사항&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;실서비스에 들어가려면 VM 모니터링이 필요&lt;/li&gt;
  &lt;li&gt;기존 오퍼레이터들이 사용하던 것과 비슷하게 맞춰달라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_2.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;특징&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;전형적인 람다 아키텍쳐(스트림 따로, 배치 따로)&lt;/li&gt;
  &lt;li&gt;모니터링 추상화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_3.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dkos-카카오의-caas&quot;&gt;DKOS, 카카오의 CaaS&lt;/h3&gt;
&lt;p&gt;만들어 놨는데 UI에서 VM 만드는 수준으로만 사용하고, 네트워크 function은 어려워서 다루기 꺼려함.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 API를 사용해서 컨테이너 오케스트레이션, 컨테이너 스케줄링, 컴포넌트 플랫폼을 제공, D2Hub(도커 레지스트리) 추가해서 네트워크 레벨도 사용하기 쉽게 만들어놨다.&lt;/li&gt;
  &lt;li&gt;DKOS Worker 뒷단에 DKOS LoadBalancer(L7)를 놓고 물리장비 LoadBalancer를 통하도록 구성.&lt;/li&gt;
  &lt;li&gt;Private cloud 레벨로 전사 공용 AutoScale 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지금은 쿠버네티스 지원가능하도록 만들어놨는데 기존에 Mesos에서 Kubernetes로 바꾸는데 6개월 걸림(한명이..)&lt;/p&gt;

&lt;h3 id=&quot;cloud-native&quot;&gt;Cloud Native&lt;/h3&gt;
&lt;p&gt;요구사항&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Containerized&lt;/li&gt;
  &lt;li&gt;MSA&lt;/li&gt;
  &lt;li&gt;Dynamically ochestrated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런게 왜 필요한지 스스로 질문해 봐야 하는데, 동적으로 조절(Dynamically orchestrated)되는 플랫폼이 필요하다(DevOps 쪽 인적 자원이 많이 줄어들고 있기도함).&lt;/p&gt;

&lt;p&gt;그래서 CMI4로 9rum이라는 Cloud Native Platform을 만들게 되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Isolation&lt;/li&gt;
  &lt;li&gt;Scheduling&lt;/li&gt;
  &lt;li&gt;Service Discovery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_4.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카카오에서 가장 중점적으로 개발한 것은 Integrated SSO.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존의 인증이 너무 번거로워서!!&lt;/li&gt;
  &lt;li&gt;OAuth2를 인증 백엔드로 사용(Inhouse auth)&lt;/li&gt;
  &lt;li&gt;IMS라는 CMDB는 ERP와 붙여놓음(private cloud지만, billing report까지)&lt;/li&gt;
  &lt;li&gt;최초 인증 한번만 하면 KRANE, DKOS, KEMI 모두 로그인 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결과&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Indexing Data: 50TB / Day&lt;/li&gt;
  &lt;li&gt;Expense: CPU와 메모리만 보면 연간 800억 정도 사용중&lt;/li&gt;
  &lt;li&gt;License Expense: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 준비 중인 오픈소스(오픈 예정)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com//kakao/kfield&lt;/li&gt;
  &lt;li&gt;https://github.com//kakao/d2hub&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질의응답&quot;&gt;질의응답&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Q. Serverless는 고려하지 않았나요?&lt;/li&gt;
  &lt;li&gt;A. Serverless는 URL 별로 function 따로따로 개발해서 만드는데, 무엇이 더 급할까 생각해보니, 앱 런쳐도 없는데 Function as Service가 왠말이냐해서, Serverless보다는 Container를 먼저 개발하게 되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;klaytn-service-oriented-enterprise-grade-public-blockchain-platform---한재선&quot;&gt;Klaytn: Service-Oriented Enterprise-Grade Public Blockchain Platform - 한재선&lt;/h1&gt;
&lt;p&gt;진행 순서: 블록체인 기술 소개, 기술 이슈, Klaytn(클레이튼) 소개&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_5.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;blockchain-basic&quot;&gt;Blockchain basic&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Blockchain&lt;/strong&gt;은 이것들의 조합&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Distributed Ledger Technology(DLT)&lt;/li&gt;
  &lt;li&gt;Distributed Consensus Mechanism&lt;/li&gt;
  &lt;li&gt;P2P&lt;/li&gt;
  &lt;li&gt;Smart Contract &amp;amp; Dapp&lt;/li&gt;
  &lt;li&gt;Token Economy Model&lt;/li&gt;
  &lt;li&gt;Decentralized Governance Model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hash Pointer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data를 무결성에 대한 체크를 가능하게끔 하는 용도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Block Hash&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;point to the previous block&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Detecting Tampering&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 수정에 대한 비교가 가능함(수정이 된 내용은 다음 포인터를 참조해서 확인).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Block Structure&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Header + Contents(실제 트랜잭션 기록) + Hash pointer + Merkle root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Merkle Proof&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;플라즈마 등 사이드 체인에서 많이 사용됨.&lt;/li&gt;
  &lt;li&gt;트랜잭션에 대한 해쉬값들을 모두 저장하는 것이 아니라, 각 해쉬값들을 섞어서 다시 해싱한 값을 트리로 구성한 것. 모든 해쉬값들을 다 저장할 필요가 없기 때문에 데이터를 효과적으로 저장할 수 있다.&lt;/li&gt;
  &lt;li&gt;이 블록 내에 특정 데이터가 있는지 확인하기 좋음(Merkle proof)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;P2P Network&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;풀노드: 모든 컨텐츠를 저장하고 있는 노드(비트코인)&lt;/li&gt;
  &lt;li&gt;현재 비트코인은 1만개 정도의 노드가 있다.&lt;/li&gt;
  &lt;li&gt;Mining은 consensus 알고리즘이라고 볼 수 있음(이 블록이 맞는지 합의).&lt;/li&gt;
  &lt;li&gt;Block -&amp;gt; Proof-of-Work -&amp;gt; BlockChain에 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PoW(Proof-of-Work)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;간단히 말하자면 nonce라고 불리는 랜덤 값을 맞추는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;BFT(비잔틴 폴트 톨로런스)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Contract&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;가스비 때문에 효율적인 작성이 요구됨.&lt;/li&gt;
  &lt;li&gt;토큰은 결국 돈으로 연결되기 때문에 보안에 신경을 많이 써야함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dapp&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MVC에서 MC라고 보면 됨.&lt;/li&gt;
  &lt;li&gt;프론트엔드(web3) + 블록체인 백엔드(EVM위에 Smart Contract)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;blockchain-scalability-issues&quot;&gt;Blockchain Scalability Issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Daily Active User&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;페이스북 14억, 트위터 1억 5천, 하지만 이더리움이 받을 수 있는 트랜잭션의 수는 140만개, 비트코인은 100만개도 안됨&lt;/li&gt;
  &lt;li&gt;이 환경에서 서비스를 돌린다는건 말이 안되는 상황.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;On-Chain solution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이더리움 자체에 성능을 향상 시키는것(Sharding). 하지만 다른 샤드간(inter shard) 커뮤니케이션 하는 것이 문제.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Off-Chain Solution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이더리움은 가만히 놓은 상태에서 새로운 형태의 체인을 만드는것.&lt;/li&gt;
  &lt;li&gt;State Channel: On-Chain의 Smart Contract에 해당 계약에 대한 구체적인 로직을 담아 놓고(검증용), 자주 발생되는 트랜잭션은 Off-Chain(외부)에서 실행되도록.&lt;/li&gt;
  &lt;li&gt;Side-Chain: 별도의 Chain을 만들고, Integrate는 메인넷에서 확인.&lt;/li&gt;
  &lt;li&gt;local consensus이기 때문에 빠름.&lt;/li&gt;
  &lt;li&gt;현재 플라즈마 사이드체인이 가장 유명한데, 머클트리 형태로 만들어서 머클트리의 루트만 플라즈마 컨트랙트에 저장함. Root Chain(Ethereum)에 스마트 컨트랙트는 만들어 놔야함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_6.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;klaytn-service-oriented-enterprise-grade-public-blockchain-platform&quot;&gt;Klaytn: Service-Oriented Enterprise-Grade Public Blockchain Platform&lt;/h3&gt;
&lt;p&gt;현재 블록체인 메인넷들이 가지고 있는 문제점&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Finality: 트랜잭션이 확실히 커밋이 됐다는 것&lt;/li&gt;
  &lt;li&gt;Poor Performance&lt;/li&gt;
  &lt;li&gt;Operation Costs&lt;/li&gt;
  &lt;li&gt;Enterprise Considerations&lt;/li&gt;
  &lt;li&gt;Inconvenient UX&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그래서 우리는 Hybrid하게 접근하려 한다(Consensus는 private하게 하고, Auditing은 public하게).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Private consensus with public auditing&lt;/strong&gt; = BFT-variant consensus + Open Validation&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;consensus는 제한된 노드. scalability는 올림. BFT 기반의 합의 알고리즘 사용&lt;/li&gt;
  &lt;li&gt;write operation은 이녀석이 처리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Rander Node(RN)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;copy된 블록들을 가지고 Auditing&lt;/li&gt;
  &lt;li&gt;read request를 처리해주는 역할&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write / Read operation은 따로따로 가져가도록 구성&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof-of-Participation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Proof of Replication: 블록 데이터를 다 저장하고 있다&lt;/li&gt;
  &lt;li&gt;Proof Serving Clients: 실제 Request에 대한 처리를 잘 해주는지를 검사&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_7.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 Klaytn은 Scalability와 Finality에 초점을 맞춰서 설계했음.&lt;/p&gt;

&lt;p&gt;consensus 알고리즘은 기본적으로 수천 TPS가 한계임(노드를 추가한다고 해도 똑같은 일).&lt;/p&gt;

&lt;p&gt;현재 Servicechain을 이용해서 궁극적으로 Scalability를 올릴 생각하고 있음.&lt;/p&gt;

&lt;h3 id=&quot;challenge&quot;&gt;Challenge&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;솔직히 유저 입장에서 블록체인이 무엇인지 알아가면서 서비스를 이용한다는 것은 비정상적으로 보임(느리면 느린 이유를 알아야 할까?)&lt;/li&gt;
  &lt;li&gt;Scalability 뿐만 아니라 UI/UX에 대한 고민이 많이 필요하다. 지갑을 어떻게 유저들이 쉽게 쓸 수 있게 만들 것이냐. 토큰을 거래하고 싶은데 거래소를 무조건 가야하는가?.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;계획&quot;&gt;계획&lt;/h3&gt;
&lt;p&gt;10월에 테스트넷 오픈. 요청하시면 검토 후 private 오픈 예정&lt;/p&gt;

&lt;h3 id=&quot;질의응답-1&quot;&gt;질의응답&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Q. 플랫폼 위에 올라갈 서비스는 고민하고 있는가?&lt;/li&gt;
  &lt;li&gt;A. stackoverflow &amp;amp; github 같은 coworking 할 수 있는 서비스도 같이 오픈할 예정이다.&lt;/li&gt;
  &lt;li&gt;Q. Smart Contract 개발 언어는 어떤것으로 할 예정?&lt;/li&gt;
  &lt;li&gt;A. Solidity&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;액티브x-없는-블록체인-기반-pki-시스템---이한욱nateact&quot;&gt;액티브X 없는 블록체인 기반 PKI 시스템 - 이한욱(nate.act)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_8.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pkipublic-key-infrastructure-소개&quot;&gt;PKI(Public Key Infrastructure) 소개&lt;/h3&gt;
&lt;p&gt;공개키 기반 -&amp;gt; 전자 서명 -&amp;gt; 인증서&lt;/p&gt;

&lt;h3 id=&quot;기존-공인인증서의-문제점&quot;&gt;기존 공인인증서의 문제점&lt;/h3&gt;
&lt;p&gt;&quot;액티브 X&quot; 단어 하나로 문제 설명.&lt;/p&gt;

&lt;h3 id=&quot;기존-공인인증서의-문제점-해결&quot;&gt;기존 공인인증서의 문제점 해결&lt;/h3&gt;
&lt;p&gt;기존의 액티브X가 사용자의 컴퓨터에서 비밀키를 관리했다면, 카카오페이 인증은 국민 모두가 사용하고 있는 카카오에 비밀키를 관리하는 방식이다.&lt;/p&gt;

&lt;p&gt;기존 NPKI 폴더 복사 가능하고, Brute Force Attack에 취약한데.. 그렇다면 비밀키를 어떻게 관리하면 좋을까?&lt;/p&gt;

&lt;p&gt;사용자의 password와 카카오페이의 Server-side passphrase를 조합해서 비밀키를 관리한다. 카카오페이 서버를 통해 관리되기 때문에 Brute Force 공격은 원천적으로 막을 수 있음.&lt;/p&gt;

&lt;h3 id=&quot;블록체인&quot;&gt;블록체인&lt;/h3&gt;
&lt;p&gt;비트코인 공개 네트워크 활용 -&amp;gt; 하이퍼레저 패브릭&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;왜 블록체인을 사용했어야 했는가?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Service provider 입장에서는 사용자의 전자서명이 옳은 것인지 확인하기 위해 public key를 꺼내서 전자서명이 옳은 것인지를 검증하게 되는데, 이 인증서 자체에 대한 검증 자체도 이루어져야 한다. 이 부분을 검증하기 위해 블록체인을 사용하게 되었다.&lt;/li&gt;
  &lt;li&gt;Blockchain Immutable Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2016년 개발 당시에 사용할 수 있었던 것은 비트코인 네트워크 밖에 없었기 때문에 당시에는 이를 활용해서 개발했다.  비트코인 넷에서는 OP_RETURN 스크립트를 활용해서 일반 데이터를 저장할 수 있다(사이즈는 제한적으로). 인증서를 해쉬한 값을 비트코인 넷에 기록하였다.&lt;/p&gt;

&lt;p&gt;Finality of Bitcoin&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;블록 생성 시간은 10분&lt;/li&gt;
  &lt;li&gt;적어도 6개 정도의 confirmation을 받아야함.&lt;/li&gt;
  &lt;li&gt;블록포함 시점 불분명 =&amp;gt; 서비스 제공자 입장에서 이는 치명적임.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 극복하기 위해 Hyperledger fabric(리눅스 foundation에서 진행하고 있는 프로젝트)로 마이그레이션했다.&lt;/p&gt;

&lt;h3 id=&quot;하이퍼레저-패브릭&quot;&gt;하이퍼레저 패브릭&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Enterprise&lt;/li&gt;
  &lt;li&gt;Private permission Network: 아무나 참여 불가&lt;/li&gt;
  &lt;li&gt;No coin But Asset: 굳이 무거운 메인넷에 참여하거나, 보상을 받을 필요가 없다.&lt;/li&gt;
  &lt;li&gt;Hash chain, Shared Ledger, smart contracts 등 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트랜잭션이 ordering service(중앙화된 노드들)에 제출되면 ordering service는 블록을 생성해서 각 peer들에 전달되고, 각 peer들은 검증에 들어간다.&lt;/p&gt;

&lt;p&gt;2초에 한번씩 블록 생성되고, 생성 즉시 블록체인에 포함됨(Immediate Finality).&lt;/p&gt;

&lt;h3 id=&quot;질의응답-2&quot;&gt;질의응답&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Q. 파트너사에서 노드를 참여하면 중앙화된 노드, 즉 ordering service에 참여하게 될거고, 트랜잭션을 직접 관리할 수 있을텐데 그럼 REST API 통신하는 것 없이 카카오페이 인증이 가능합니까? 아니면 기타 파트너사에게 득이 되는 부분은?&lt;/li&gt;
  &lt;li&gt;A. 아뇨 auth를 위해 rest api 통신은 해야합니다. 득이 되는 부분은…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;스프링5-웹플럭스와-테스트-전략---이일민&quot;&gt;스프링5 웹플럭스와 테스트 전략 - 이일민&lt;/h1&gt;
&lt;p&gt;대상: 자바 8+, 스프링 5.x, 스프링 기반 비동기/논블로킹, Reactor와 RxJava 기반 리액티브 프로그래밍&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_1_1.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;스프링-웹-플럭스&quot;&gt;스프링 웹 플럭스&lt;/h3&gt;
&lt;p&gt;스프링이 5.0에 새로 등장한 웹 프레임워크 + 리액티브 스택. 초기 이름은 스프링 웹 리액티브에서 웹 플럭스로 바뀜.&lt;/p&gt;

&lt;p&gt;Spring 5: SpringMVC + WebFlux&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring MVC: 서블릿 기반 스프링 스택&lt;/li&gt;
  &lt;li&gt;Spring WebFlux: 리액티브 스택&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebFlux에 보이는 Reactive repository는 뭘까? (Flux가 포함된) Reactor 라이브러리가 왜 양쪽에 있는가?&lt;/p&gt;

&lt;p&gt;Webflux와 MVC 양쪽에서 동일한 코드가 돌아간다. 그렇다면 다를바가 없는데 왜 등장한 것일까?&lt;/p&gt;

&lt;h3 id=&quot;스프링-웹-플럭스-도입-이유&quot;&gt;스프링 웹 플럭스 도입 이유&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;100% (I/O, 데이터 처리) 논블로킹 개발&lt;/li&gt;
  &lt;li&gt;확장성과 고효율성이 매우 중요&lt;/li&gt;
  &lt;li&gt;업, 다운 스트리밍과 Back pressure가 필요&lt;/li&gt;
  &lt;li&gt;고속 서비스 오케스트레이션 개발&lt;/li&gt;
  &lt;li&gt;유사한 프로그래밍 모델의 경험&lt;/li&gt;
  &lt;li&gt;유연하게 커스터마이징이 가능한 웹 프레임워크 구성&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;본격적인 함수형 프로그래밍 모델 사용&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스프링-웹-플럭스를-사용하지-않는게-좋은-이유&quot;&gt;스프링 웹 플럭스를 사용하지 않는게 좋은 이유&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹 플럭스가 왜 필요한지 분명하게 모름
    &lt;ul&gt;
      &lt;li&gt;비동기/논블로킹 방식 도입(X)&lt;/li&gt;
      &lt;li&gt;리액티브 라이브러리(Reactor, RxJava) 사용(X)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블로킹이 서버, 코드, 라이브러리에 존재
    &lt;ul&gt;
      &lt;li&gt;블로킹 IO, 블로킹 서블릿 필터&lt;/li&gt;
      &lt;li&gt;JPA(X), JDBC(X)&lt;/li&gt;
      &lt;li&gt;ADBA(O), AoJ(?), R2DBC(?)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SpringMVC로 개발했더니 아무 문제 없음 (X)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스프링-웹-플럭스는-스프링-mvc로-시작해도-됨&quot;&gt;스프링 웹 플럭스는 스프링 MVC로 시작해도 됨&lt;/h3&gt;
&lt;p&gt;스프링5 MVC는 웹 플럭스에서 제공되는 다양한 기능과 프로그래밍 모델 제공&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비동기/논블로킹 API 호출&lt;/li&gt;
  &lt;li&gt;비동기/논블로킹 데이터 액세스&lt;/li&gt;
  &lt;li&gt;리액티브 데이터 조회, 전송&lt;/li&gt;
  &lt;li&gt;비동기 웹 요청&lt;/li&gt;
  &lt;li&gt;서버 스트리밍&lt;/li&gt;
  &lt;li&gt;클라이언트 스트리밍&lt;/li&gt;
  &lt;li&gt;Reactor(Flux, Mono), RxJava, Flow 등을 이용하는 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MVC에서 WebClient 사용이 가장 좋은 출발점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RestTemplate 대체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링 웹 플럭스를 꼭 쓸 이유도, 그렇지 않을 이유도 없다면 한번 써봐라. &lt;em&gt;WebClient&lt;/em&gt; 하나만 알아가도 굿굿&lt;/p&gt;

&lt;h3 id=&quot;리액티브-함수형-프로그래밍&quot;&gt;리액티브 (함수형) 프로그래밍&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷 시대의 복잡함을 해결하기 위해(Erik Meijer)&lt;/li&gt;
  &lt;li&gt;연속적으로 일어나는 이벤트를 다루는 프로그래밍 기법&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;UI 이벤트, 비동기적인 I/O 이벤트, 통제 불가능한 이벤트 스트림 처리&lt;/li&gt;
  &lt;li&gt;동시성, 비동기/논블록킹 호출을 다루는데 탁월&lt;/li&gt;
  &lt;li&gt;조합 가능한 비동기 로직을 다루는 함수형 프로그래밍&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;비동기논블록킹-api-호출---가장-단순한-리액티브&quot;&gt;비동기/논블록킹 API 호출 - 가장 단순한 리액티브&lt;/h3&gt;
&lt;p&gt;동기/블록킹 API 호출(RestTemplate)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;장점: 쉽고 간단함&lt;/li&gt;
  &lt;li&gt;단점: IO 동안 블록킹. 시스템 특성에 따라 매우 비효율적이 될 수도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;비동기/논블로킹 API 호출&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;적은 서버 리소스만 사용해서 많은 요청을 처리하자는 것이 핵심.&lt;/li&gt;
  &lt;li&gt;AsyncRestTemplate (Spring 4)&lt;/li&gt;
  &lt;li&gt;Async/Await (Java 8+)&lt;/li&gt;
  &lt;li&gt;WebClient (Spring 5)&lt;/li&gt;
  &lt;li&gt;장점: 확장성이 뛰어나고 높은 처리율과 낮은 레이턴시를 가짐. 쉽고 직관적이고 간단하다.&lt;/li&gt;
  &lt;li&gt;단점: 장점을 얻을 만한 경우가 많지 않음. 자칫하며 코드가 복잡하고 이해하기 어려움.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비동기논블로킹-api-진화&quot;&gt;비동기/논블로킹 API 진화&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Future -&amp;gt; DeferedResult -&amp;gt; CompletableFuture&lt;/li&gt;
  &lt;li&gt;그리고 자바에서도 Async/Await 사용 가능&lt;/li&gt;
  &lt;li&gt;마지막으로 Reactor Flux/Mono를 이용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reactor Flux/Mono는 CompletableFuture와 유사해보이지만, 큰 장점이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Mono: 어떤 이벤트가 비동기적으로 넘어올 때 딱 1개까지만 허용함.&lt;/li&gt;
  &lt;li&gt;Flux: 데이터를 Stream으로 지속적으로 받을 수 있음. 캐시에 담은 다음에 Mono에 한꺼번에 넣어서 넘겨도 되긴 함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;completablefuture-vs-reactor-fluxmono&quot;&gt;CompletableFuture vs. Reactor Flux/Mono&lt;/h3&gt;
&lt;p&gt;공통점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;람다식으로 사용하는 함수형 스타일&lt;/li&gt;
  &lt;li&gt;비동기와 비동기 작업의 조화(compose, flatMap)&lt;/li&gt;
  &lt;li&gt;비동기와 동기 작업의 적용(apply, map)&lt;/li&gt;
  &lt;li&gt;Exceptional 프로그래밍&lt;/li&gt;
  &lt;li&gt;작업별 쓰레드 풀 지정 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flux/Mono 방식의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 스트림(Flux) &amp;lt;-&amp;gt; List/Collection&lt;/li&gt;
  &lt;li&gt;강력한 연산자 제공&lt;/li&gt;
  &lt;li&gt;지연 실행, 병합, 분산, 시간 제어&lt;/li&gt;
  &lt;li&gt;유연한 스케줄러&lt;/li&gt;
  &lt;li&gt;ReactiveStreams, 자바 9+ 표준&lt;/li&gt;
  &lt;li&gt;다양한 지원 라이브러리, 서비스, 서버&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;리액티브-애플리케이션의-데이터-흐름&quot;&gt;리액티브 애플리케이션의 데이터 흐름&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_1_9.JPG&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;리액티브-api의-데이터-시퀀스-검증&quot;&gt;리액티브 API의 데이터 시퀀스 검증&lt;/h3&gt;
&lt;p&gt;Mono나 Flux를 가지고 있으면 이는 Reactive API라고 부를 수 있다.&lt;/p&gt;

&lt;p&gt;단위 테스트를 할 수도 있지만, 그 뒷부분까지 통합 테스트를 할 수도 있다.&lt;/p&gt;

&lt;p&gt;주의할 점: 테스트 코드는 항상 &lt;strong&gt;동기&lt;/strong&gt; 방식이어야 한다. 하지만 우리가 테스트할 대상은 비동기/논블로킹 특성을 가지고 있다.&lt;/p&gt;

&lt;h3 id=&quot;subscribe--assert&quot;&gt;subscribe() + assert&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 테스트 성공&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mono2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 테스트 성공??????&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mono나 Flux는 데이터를 리턴 값으로 받는 것이 아니라, 일종의 콜백을 받는 것이다.&lt;/p&gt;

&lt;p&gt;Scheduler는 별도의 데몬 스레드에서 작동하는 것이기 때문에 subscribe() + assert 사용할때 조심해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mono3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;CountDownLatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountDownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;countDOwn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 테스트가 끝나지 않음!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그래서 CountDownLatch라는 걸 이용하면 됨. 테스트에서 동시성을 제어해야 함.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 테스트에서 동시성을 제어해야 하는 번거로움!&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mono4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;CountDownLatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountDownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;countDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;latch:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countDown&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 이렇게 작성해도 고통스러우니까 block()을 사용하면 좋음.&lt;/p&gt;

&lt;h3 id=&quot;block--assert&quot;&gt;block() + assert&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mono5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stepverifier&quot;&gt;StepVerifier&lt;/h3&gt;
&lt;p&gt;비동기/논블로킹 테스트에는 &lt;strong&gt;StepVerifier&lt;/strong&gt;을 이용하자!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비동기 논블로킹으로 동작하는 코드 테스트 툴&lt;/li&gt;
  &lt;li&gt;데이터 스트림의 검증&lt;/li&gt;
  &lt;li&gt;예외, 완료도 검증&lt;/li&gt;
  &lt;li&gt;가상시간을 이용해 오랜 시간의 이벤트 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stepVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;StepVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 첫번째 데이터 아이템 값&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verifyComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stepVerifier2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;concatWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;StepVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 에러나고 종료&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;리액티브-http-api-호출-테스트&quot;&gt;리액티브 HTTP API 호출 테스트&lt;/h3&gt;
&lt;p&gt;RestTemplate&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;동기/블록킹&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AsyncRestTemplate&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비동기/논블록킹&lt;/li&gt;
  &lt;li&gt;Future 콜백, CompletionStage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebClient&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비동기/논블록킹&lt;/li&gt;
  &lt;li&gt;Flux/Mono 요청, 응답&lt;/li&gt;
  &lt;li&gt;Streaming 지원&lt;/li&gt;
  &lt;li&gt;BackPressure 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebClient&lt;/strong&gt;를 사용하면 RestTemplate을 대신해서 비동기/논블로킹을 함수형 프로그래밍 스타일로 손쉽게 작성할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;webclient&quot;&gt;WebClient&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helloAPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HttpStatus:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is4xxClientError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HttpStatus:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is5xxServerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 비지니스 로직 수행&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;switchIfEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Empty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;원격-리액티브-api-호출---통합테스트feat-mockserver&quot;&gt;원격 리액티브 API 호출 - 통합테스트(feat. MockServer)&lt;/h3&gt;
&lt;p&gt;원격 테스트하려면 서버를 따로 띄워야 하는데 MockServer를 사용하면 Http API 통합 테스트를 할 수 있다.&lt;/p&gt;

&lt;p&gt;MockServer를 포함하면, 간단하게 Http Request를 테스트할 수 있는 서버를 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_19.png&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebClientIntegrationTests는 유용한 샘플이니 참고하면 좋습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockWebServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactorClientHttpConnector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockWebServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clientConnector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldReceiveResponseHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepareResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Spring!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/greeting?name=Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asHttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;StepVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;consumeNextWIth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;olfSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;expectRequestCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expectRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACCEPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/greeting?name=Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteHelloService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HttpStatus:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is4xxClientError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HttpStatus:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is5xxServerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Mock 서비스로 대체 가능&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helloApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;helloService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;switchIfEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Empty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doOnError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;웹-플럭스의-새로운-아키텍처&quot;&gt;웹 플럭스의 새로운 아키텍처&lt;/h3&gt;
&lt;p&gt;기존 MVC는 서블릿 스팩과 서버의 제약 위에 개발&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프론트 컨트롤러 패턴, MVC 패턴, 전략 패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;웹 플럭스는 독자적인 아키텍처를 가지는 프레임워크&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿(3.1+) 컨테이너를 사용할 수 있으나 의존적이지 않음&lt;/li&gt;
  &lt;li&gt;Netty, Undertow 서버 지원&lt;/li&gt;
  &lt;li&gt;논블록킹 네트워크/논블록킹 API&lt;/li&gt;
  &lt;li&gt;논블록킹 데이터 스트림&lt;/li&gt;
  &lt;li&gt;서버/기술 의존적이지 않은 프레임워크 재구성 손쉬움&lt;/li&gt;
  &lt;li&gt;함수형 엔드포인트&lt;/li&gt;
  &lt;li&gt;뛰어난 테스트 편의성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_25.png&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EnableWebFlux 어노테이션을 추가하면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/09/04/if_kakao_26.png&quot; alt=&quot;if kakao 2018&quot; title=&quot;if kakao 2018&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testclient---webfluxtext&quot;&gt;TestClient - @WebFluxText&lt;/h3&gt;
&lt;p&gt;Spring boot 2 애플리케이션의 Mock Test&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bindToApplicationContext 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebFluxTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebCLientBootTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webTestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webTestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;bindToRouterFunction: 함수형 엔드포인트에 대한 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routerFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ReouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/rf&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;WebTestClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindToRouterFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/rf&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;bindToController: 특정 컨트롤러/핸들러만으로 테스트 대상 구성. 예를 들어 컨트롤러가 100개 있는 서버를 테스트하고 싶다면, 기존의 테스트 코드를 재사용 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WebTestClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebTestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindToController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloAPi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;bindToServer: static 메서드를 사용해서 실제 동작하는 서버에 연결해서 테스트할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;함수형-엔드포인트-테스트-방법&quot;&gt;함수형 엔드포인트 테스트 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;bindToRouterFunction&lt;/li&gt;
  &lt;li&gt;\@WebFLuxTest&lt;/li&gt;
  &lt;li&gt;함수 단위 테스트
    &lt;ul&gt;
      &lt;li&gt;본격적인 함수형 스타일 웹 프로그래밍&lt;/li&gt;
      &lt;li&gt;조합 가능한 마이크로 프레임워크&lt;/li&gt;
      &lt;li&gt;작고 가벼운 비동기 논블록킹 웹&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/06/10/polyglot-programming.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/06/10/polyglot-programming.html"/>
        <title>폴리글랏 프로그래밍 - Polyglot Programming</title>
        <updated>2018-06-10T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;개인적으로 임작가님 책을 좋아해서 그렇기도 하지만, 프로그래밍 언어가 어떠한 방향으로 진화하고 있는지, 앞으로 우리는 어떠한 자세로 프로그래밍 언어를 학습해야 하는지 등 프로그래밍 언어 학습에 관심이 있다면 이 책을 사서 읽어보기를 추천합니다(재밌어요). 이 책은 크게 자바, C#, 스칼라 챕터로 나누어져 있는데 각 언어가 어떻게 탄생하게 되었고, 어떠한 방향으로 진화했는지, 그리고 앞으로는 어떠한 방향으로 진화할 것인지에 대해서 설명하고 있습니다. 이 책이 쓰여진 시점에는 자바7이 최신 버전이었기 때문에 책에서 설명하고 있는 자바는 지금의 자바와 다를 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/06/10/polyglot0.jpeg&quot; alt=&quot;polyglot0&quot; title=&quot;polyglot0&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;폴리글랏 프로그래밍 : 새로운 자바 언어를 기다리는 히치하이커를 위한 안내서 - 임백준 지음&lt;/center&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;에필로그&quot;&gt;에필로그&lt;/h1&gt;
&lt;p&gt;우리는 지금 폴리글랏 프로그래밍의 세계로 진입하고 있다. 하나의 언어가 머리에서 발끝까지, GUI 프론트엔드에서 서버 깊숙한 곳에 있는 백엔드 시스템에 이르기까지 단일하게 사용되는 경우는 찾아보기 어려운, 희귀한 일이 되었다. 한 사람이 여러 명의 배우자와 함께 살아가는 것을 영어로 폴리가미&lt;em&gt;Polygamy&lt;/em&gt; 라고 말한다. 이와 비슷하게 여러 개의 언어를 사용하는 것을 폴리글랏&lt;em&gt;Polyglot&lt;/em&gt; 이라고 말한다.&lt;/p&gt;

&lt;p&gt;저명한 프로그래머들은 적어도 한 해에 하나의 언어를 학습해 나갈 것을 권장하고 있다. 이런 사람들이 주장하는 바에 의하면 앞으로는 프로그래머가 어떤 언어에 대해서 얼마나 많이 알고 있는가 하는 것이 아니라 &lt;strong&gt;어떤 언어를 얼마나 빠르게 학습할 수 있는가&lt;/strong&gt;하는 것이 더 중요하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;자바&quot;&gt;자바&lt;/h1&gt;
&lt;h3 id=&quot;닐-게프터&quot;&gt;닐 게프터&lt;/h3&gt;
&lt;p&gt;닐 게프터(Neal Gafter)는 자바 진영을 대표하는 리더 중 한 명이었다. 그가 조슈아 블로흐와 함께 '자바 퍼즐러(Java Puzzlers)'를 쓰고 다양한 컨퍼런스에 강연을 하러 다니던 시절은 아마도 그의 전성기였을 것이다. 게프터는 한 인터뷰에서 프로그래밍 언어를 크게 두 개의 범주로 나누어서 바라보자고 제안했다. 하나는 '살아 있는 언어'고, 다른 하나는 '레거시&lt;em&gt;legacy&lt;/em&gt;' 언어다. 새로운 프로젝트를 시작할 때 우리는 살아 있는 언어를 고려하고, 이미 존재하는 코드베이스를 유지 보수할 때는 레거시 언어를 사용한다. 게프터에 의하면 언어를 이와 같은 방식으로 구분하는 것은 특정한 언어에 새로운 기능을 더할지 말지를 결정할 때 도움을 준다. 어떤 언어가 이미 레거시 언어라면 그 언어에 대한 변경은 이미 존재하는 코드를 수정하는 데 도움을 주는 수준으로 제한하는 것이 옳다. 하지만 만약 그것이 발전을 거듭하고 있는 살아 있는 언어라면 언어에 대한 변경이 새로운 시스템의 설계나 개발에 도움을 주는 방향으로 확장될 필요가 있다. 다시 말해서 &lt;strong&gt;살아 있는 언어는 비본질적인 복잡성&lt;em&gt;accidental complexity&lt;/em&gt; 을 감소시키는 방향으로 계속 진화해야 한다&lt;/strong&gt;는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&quot;상위수준의 언어가 성취하는 것은 무엇인가? 그것은 비본질적인 복잡성으로부터 프로그램을 자유롭게 만드는 것이다. 추상적인 프로그램은 개념적인 구조물로 이루어진다. 그러한 구조물은 연산자, 데이터 타입, 열, 그리고 통신 등이다. 구체적인 기계어 프로그램은 비트, 레지스터, 조건, 분기문, 채널, 디스크와 같은 대상을 염두에 두어야 한다. 상위수준의 프로그래밍 언어는 이와 같은 구조물들을 추상적인 프로그램 안에서 완전히 사라지도록 만들어주는 것이다.&quot; - 프레드 브룩스(Fred Brooks)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쉽게 말하면 프로그래머는 시시콜콜하고 세세한 대상을 반복해서 다루는 대신, 더 크고 개략적인 추상적인 개념을 가지고 주어진 문제를 해결하는 데 집중해야 한다는 말이다. 우리가 웹브라우저에서 돌아가는 GUI를 만들려고 하는데 그 전에 직접 HTTP 프로토콜을, 혹은 심지어 TCP/IP 스택을 구현해야 한다면 GUI가 제공하는 비즈니스 콘텐츠에 신경을 쓸 여력이 없을 것이다. 이러한 맥락에서 보면 HTTP 프로토콜과 TCP/IP는 비본질적인 복잡성에 해당한다. 게프터는 비본질적인 복잡성이 강력한 '추상'의 힘에 의해서 사람들의 시야에서 성공적으로 사라진 예로 가비지 컬랙션을 언급한다.&lt;/p&gt;

&lt;h3 id=&quot;제네릭&quot;&gt;제네릭&lt;/h3&gt;
&lt;p&gt;자바 제네릭의 기초를 설계한 마틴 오더스키는 이렇게 말했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&quot;자바 제네릭을 디자인할 때 우리는 너무나 많은 제약 때문에 힘들었습니다. 그중에서도 가장 다루기 힘든 제약은 새로운 코드가 과거에 제네릭을 사용하지 않고 작성된 코드도 완전히 호환이 되도록 만들어야 한다는 것이었습니다. 문제는 그때가 썬이 자바 1.2와 함께 출시한 컬랙션 라이브러리를 완성한 지 얼마 되지 않았을 때였기 때문에 제네릭을 더한다고 해서 컬랙션 라이브러리를 또 다시 작성할 준비가 되어 있지는 않았다는 것입니다. 그래서 우리는 기존 코드의 입장에서 보았을 때 제네릭이 완전히 투명하게 보이도록 만들어야만 했습니다.&quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&quot;자바 제네릭이 지저분한 부분을 많이 가지고 있는 이유는 바로 그것 때문입니다. 제네릭화된 타입이 있으면 반드시 소위 원시&lt;em&gt;raw&lt;/em&gt; 타입라고 불리는 제네릭화되지 않은 타입도 함께 존재해야만 했습니다. 배열의 동작과 기능에도 전혀 손을 댈 수 없었기 때문에 그저 컴파일러가 검사되지 않은 경고를 화면에 나타내도록 하는 정도밖에 할 수 없었습니다. 배열에 손을 댈 수 없었기 떄문에 우리는 자바 내부에서 어떤 타입 T가 있다고 했을 때 그러한 타입 T를 저장하기 위한 배열을 생성한다거나 하는 식으로 배열을 이용한 일을 아무것도 할 수 없었습니다. 우리는 나중에 스칼라에서 그렇게 할 수 있는 방법을 알아냈는데, 그것은 스칼라 안에서 배열이 공변&lt;em&gt;covariant&lt;/em&gt; 이어야 한다는 요구사항을 구현했기 때문입니다.&quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바에서 제네릭과 관련된 정보는 소스코드 차원에서만 존재하며, 컴파일이 되어 바이트코드가 되고 나면 제네릭과 관련된 기억이 남김없이 사라진다. 즉, 클래스캐스트를 이용하던 자바 5 이전의 코드와 다를 바 없게 된다. 그렇기 때문에 자바에서는 제네릭의 사용으로 인한 실행시간 성능 향상은 없으며, 제네릭을 이용한 코딩을 할 때 실행시간 타입에 접근할 방법이 없어서 기능이 제한된다. 이런 의미에서 자바에서 구현한 제네릭은 아주 표면적인 컴파일러 트릭, 혹은 문법적 당의정(sugarcoating)에 불과하다. 바이트코드와 JVM을 뜯어서 고치지 않는 이상 이러한 지우개 기능은 자바와 영원히 운명을 함께 할 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;c&quot;&gt;C#&lt;/h1&gt;
&lt;h3 id=&quot;속성과-대리자&quot;&gt;속성과 대리자&lt;/h3&gt;
&lt;p&gt;C# 1.0은 실제로 자바와 다를 것이 별로 없었다. 자바의 창시자인 제임스 고슬링과 썬마이크로시스템즈의 공동창업자 빌 조이는 C#이 '자바의 모방'이라고 말했다.
하지만 C# 1.0은 자바와 다른 점도 가지고 있다. 대부분 사소한 문법적 차이처럼 보이는 것이긴 하지만 그들은 훗날 C#과 자바가 상당한 수준으로 달라지도록 하는 데 중요한 기초를 제공했다. 짚고 넘어갈 필요가 있는 중요한 차이로는 속성&lt;em&gt;property&lt;/em&gt; 과 대리자&lt;em&gt;delegate&lt;/em&gt; 가 있다.&lt;/p&gt;

&lt;p&gt;C# 2.0은 익명 메서드&lt;em&gt;anonymous methods&lt;/em&gt; 라는 문법적 트릭을 통해서 프로그래머가 대리자를 한층 더 편리하게 사용할 수 있게 만들었고, 2007년에 출시된 C# 3.0에는 마침내 람다를 포함시켰다. 직접적으로는 잘 사용되지 않는 대리자를 잘 이해해야 하는 이유는 대리자가 바로 C#이라는 객체지향 언어에서 람다라는 함수적 표현이 가능하게 만들어준 기능이기 때문이다. 람다표현이 다른 메서드에게 인수로 전달되거나 반환값으로 되돌려질 때, 그리고 람다라는 '익명의 함수'가 실행환경 속에서 마음껏 떠돌아다닐 수 있는 것은 대리자 타입을 가진 '객체'가 가상머신 내부에서 람다표현이라는 '익명 함수'를 대신해서 생성하기 때문이다. 대리자는 람다라는 천상의 개념에게 뼈와 살을 내어주는 지상의 육신이다.&lt;/p&gt;

&lt;h3 id=&quot;일급함수&quot;&gt;일급함수&lt;/h3&gt;
&lt;p&gt;알란 튜링의 대학 동료였던 크리스토퍼 스트라취(Christopher Strachey)는 취미로 컴퓨터 프로그래밍을 하였는데, 그는 컴퓨터 역사상 최초로 음악을 연주하는 프로그램을 만들기도 했다. 그 프로그램은 우리가 '트윙클 트윙클 리틀 스타' 혹은 '반짝 반짝 작은별'이라는 노래로 많이 부르는 그 노래의 멜로디를 연주했다. 스트라취는 컴퓨터 세계에 커다한 영향을 미치는 두 가지 업적을 남겼는데, 하나는 시분할&lt;em&gt;time-sharing&lt;/em&gt; 이고, 다른 하나는 '일급함수&lt;em&gt;first-class function&lt;/em&gt;' 라는 표현이다.&lt;/p&gt;

&lt;p&gt;'일급 함수'라는 표현은 어떤 프로그래밍 언어가 '함수'를 자유롭게 다른 함수에게 인수로 전달하고, 함수 자체를 반환값으로 사용하고, 변수에 함수를 할당할 수 있고, 데이터구조에 함수를 저장할 수 있도록 저장한다는 뜻이다. 객체지향 프로그래밍 언어에서는 '일급객체'가 성립하는 것처럼, 함수형 프로그래밍 언어에서는 '일급함수'라는 표현이 성립한다. 어떤 함수에게 함수를 인수로 전달한다고 했을 때, 다른 함수를 인수로 받아들이는 함수를 고계함수&lt;em&gt;higher-order function&lt;/em&gt; 라고 부른다.&lt;/p&gt;

&lt;p&gt;1936년 알론조 처치(Alonzo Church)는 '람다계산법(Lambda Calculus)'이라는 것을 이용해서 알고리즘으로 결정할 수 없는 문제가 존재함을 보였고, 직후에 알란 튜링(Alan Turing)은 '튜링 머신(Turing machine)'을 고안해서 알고리즘으로 수행하는 기계적 장치를 이용해서 해결할 수 없는 문제가 존재한다는 사실을 보여주었다.&lt;/p&gt;

&lt;p&gt;여기서 한 가지 기억해 둘만한 것은 처치의 람다표현에서 '함수'는 '값'과 언제나 등가물이라는 사실이다. 다시 말해서 함수와 값은 언제나 서로 대신하여 사용될 수 있다. 함수는 값이고 값은 함수다. 함수형 프로그래밍 패러다임의 핵심은 바로 이 명제, 함수는 값이고 값은 함수라는 명제에 놓여 있다. 이 명제가 중요한 이유는 함수와 값의 등가성이 유지되기 위해서는 함수가 반드시 어떤 값을 반환해야 하며, 값을 반환하는 것 이외에는 내부에서 어떤 종류의 부수효과&lt;em&gt;side-effect&lt;/em&gt; 도 갖지 말아야 함을 뜻하기 때문이다. 만약 함수가 부수효과를 갖는다면 함수와 값의 등가성은 파괴된다.&lt;/p&gt;

&lt;p&gt;크리스토퍼 스트라취는 '일급함수' 이외에 '커링&lt;em&gt;currying&lt;/em&gt;' 이라는 용어도 만들어냈다. 커링이라는 개념을 스스로 개발한 것은 아니지만 함수형 프로그래밍에서 중요하게 사용되는 테크닉에 하스켈 커리의 이름을 따서 커링이라는 멋진 이름을 붙인 것이다. 스트라취가 남긴 족적을 따라가 보면 그가 함수형 프로그래밍 패러다임의 정립에 상당히 많은 기여를 했음을 확인하게 된다.&lt;/p&gt;

&lt;h3 id=&quot;링큐-linq&quot;&gt;링큐 LINQ&lt;/h3&gt;
&lt;p&gt;링큐는 C# 언어에 존재하는 다양한 기능들이 결합하면서 탄생한 C# 언어의 꽃이다. 이 꽃은 함수형 프로그래밍 패러다임이라는 거대한 파도에 자신의 서핑보드를 얹기를 희망하는 프로그래밍 고수들에게 매혹적인 향기를 풍기며 그들을 유혹했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/06/10/polyglot2.jpg&quot; alt=&quot;polyglot2&quot; title=&quot;polyglot2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://channel9.msdn.com/Tags/anders+hejlsberg&quot; target=&quot;\_blank&quot;&gt;C#의 창시자, 앤더스 하일스버그&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;링큐를 만드는 데 사용된 C#의 기능으로는 우선 제네릭이 있었고, 람다, 타입유추&lt;em&gt;type inference&lt;/em&gt;, 확장메서드&lt;em&gt;extension methods&lt;/em&gt;, 암묵적 타입 변수&lt;em&gt;implicitly typed variable&lt;/em&gt;, 객체 초기자&lt;em&gt;object initializer&lt;/em&gt;, 익명 타입&lt;em&gt;anonymous types&lt;/em&gt; 등이 존재했다. 이러한 기능 중에서 당시 자바7에 존재하는 기능은 제네릭이 유일하다.&lt;/p&gt;

&lt;p&gt;자바와 C#은 한때 쌍둥이처럼 닮은 언어였지만, 10년의 시간이 지나는 동안 서로 다른 길을 걸으면서 다른 언어가 되었다. 그 다른 길이란 바로 대리자였고, 람다였고, 링큐였다. C#은 비록 마이크로소프트의 가상머신 안에 갇히는 운명을 타고 났지만, 언어 자체만 놓고 보면 아름답고 유연하다. 특히 자바에 비해서 상대적으로 우아하고 간결한 표현이 가능하다.&lt;/p&gt;

&lt;p&gt;그래서 자바를 사용하는 프로그래머들은 자신의 프로젝트에서 C#이 사용되는가 여부와 무관하게 C# 언어를 학습할 필요가 있다. C#은 자바 8을 포함하여 앞을 자바가 걸어갈 수 있는 미래의 모습을 이미 갖추고 있는 자바의 미래이기 때문이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;스칼라&quot;&gt;스칼라&lt;/h1&gt;
&lt;h3 id=&quot;마틴-오더스키&quot;&gt;마틴 오더스키&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&quot;적어도 언어의 한 부분은 언어의 성장을 도울 수 있는 방식으로 설계되어야 한다. 새로운 타입의 집합, 사용자가 정의한 새로운 타입, 새로운 어휘와 규칙을 언어에 더하고, 온갖 종류의 패턴을 활용하는 것이 모두 가능해야 한다. 언어를 설계하는 사람이 언어에 포함되는 스무 가지 종류의 숫자 타입을 일일이 정의해서는 곤란하다. 물론 스무 가지 종류의 숫자 타입을 필요로 하는 사용자는 어딘가에 분명히 존재할 것이다. 그렇다고 한다면 사용자 자신이 언어에 그러한 타입을 직접 도입하고, 플러스나 아니면 그와 비슷한 다른 연산자 혹은 비트 연산 등이 모두 제대로 동작하도록 보장할 수 있는 방법이 필요하다.&quot; - 가이 스틸(Guy L. Steele Jr)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스칼라 2.8의 스펙을 담은 PDF 파일이 190 페이지 정도에 불과한 데 비해서 오라클의 웹사이트에서 내려받을 수 있는 자바 스펙의 PDF 파일은 무려 700 페이지가 넘는 방대한 분량이다. 마이크로소프트에서 내려받을 수 있는 C# 언어의 스펙을 담고 있는 워드 파일은 500 페이지가 넘는다. 수행할 수 있는 기능의 폭과 깊이가 거의 비슷한 자바, C#과 스칼라 사이에 이렇게 커다란 차이가 존재하는 이유(자바와 C#이 더 오랜 역사를 가지고 있긴 하지만)는 스칼라 언어에는 창시자인 오더스키의 철학이 반영되어 있기 때문이다. 언어 자체의 규칙이 작은 크기를 가지고 있어도, 언어의 규칙 자체가 가이 스틸이 말하는 것처럼 언어의 성장을 도울 수 있는 방식으로 설계되어 있다면 다른 언어에 비해서 기능이 부족할 이유가 없다. 문제는 언어의 규칙을 담은 파일의 크기가 아니고, 규칙의 확장성이다.&lt;/p&gt;

&lt;p&gt;확장이 가능한 언어 &lt;em&gt;scalable language&lt;/em&gt; 는 시간이 지남에 따라서 확장성이 부족한 언어보다 오히려 더 풍부한 기능을 갖추게 된다. 확장이 가능한 언어. Scalable Language. 스칼라라는 언어는 이렇게 적은 규칙과 (스스로의 확장을 통한) 풍부한 기능이라는 마틴 오더스키의 철학을 구현하기 위해서 세상에 탄생했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/06/10/polyglot1.png&quot; alt=&quot;polyglot1&quot; title=&quot;polyglot1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;왼쪽부터 &lt;a href=&quot;https://www.youtube.com/watch?v=kZpLmcgq82k&quot; target=&quot;\_blank&quot;&gt;마틴 오더스키, 에릭 마이어, 로랄드 쿤&lt;/a&gt;&lt;/center&gt;

&lt;h3 id=&quot;언어의-추상&quot;&gt;언어의 추상&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;추상&lt;em&gt;abstraction&lt;/em&gt; 은 각각 다른 영역에 존재하는 디테일을 서로 다른 수준에서 다룸으로써 복잡성을 낮추는 것을 의미한다. 어떤 집합적 개체&lt;em&gt;aggregate entity&lt;/em&gt; 를 대상으로 작업을 하고 있다면 추상을 대상으로 작업을 하고 있는 것이다. 어떤 대상을 유리와, 나무와, 못의 집합으로 묘사하는 대신 간단히 '집'이라고 지칭한다면, 그 순간 일종의 추상을 만들어낸 것이다. 집들이 여러 개 모여 있는 것을 '마을'이라고 지칭한다면, 그 순간 또 다른 수준의 추상을 만들어 낸 것이다. 추상은 '계층&lt;em&gt;hierarchy&lt;/em&gt;' 보다 일반적인 개념이다. 예를 들어서 추상은 엄격한 구조를 갖는 계층과 달리 서로 느슨한 네트워크를 이루고 있는 컴포넌트들에게 디테일을 분산시킴으로써 복잡성을 감소시킬 수 있다. - 스티브 맥코넬(Steve McConnell)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;맥코넬이 이야기하는 추상이 여러 개체를 아우르는 집합에 이름을 부여하는 방식의 추상을 의미한다면, 그와 다른 방식의 추상도 존재한다. 구체적인 존재의 한 단면을 의식적으로 골라내서 추상화하는 방법도 있고, 구체적인 존재가 품고 있는 복잡성을 시야에서 감추어서 단순화시킴으로써 추상하는 방법도 있다. 편의상 앞의 것을 '껍데기 추상'이라고 부르고, 뒤의 것을 '커튼 추상'이라고 부르자. 커튼추상이라는 말은 '커튼으로 가리기 추상'을 줄인 표현이다. 복잡한 것들을 커튼으로 가려서 단순하게 보이도록 만든다는 의미다.&lt;/p&gt;

&lt;p&gt;예를 들어, 박지성이나 손흥민 같은 사람이 있다면 우리가 그들을 가리켜서 &quot;축구 좀 하는 애&quot;라고 말한다면 그 표현은 박지성과 손흥민이라는 구체적인 존재가 가지고 있는 어느 한 단면을 도려내어서 추상하는 것이다. 이건 개체의 집합을 묶어서 이름을 부여하는 추상과 성격이 다르다. 이와 같은 성격의 껍데기추상은 대개 프로그래밍 언어의 표현&lt;em&gt;expression&lt;/em&gt; 이 압축적이고 간결해지는 과정에서 많이 발견되고, 이는 객체지향 방법론의 핵심이다.&lt;/p&gt;

&lt;p&gt;한편 복잡성을 시야에서 사라지게 만들어서 우리가 바라보는 대상을 간결하게 만드는 방식의 커튼추상도 존재한다. 프로그래밍 언어가 문법적 당의정을 활용해서 똑같은 표현을 더 간결하게 만들 수 있게 하거나, 언어 자체의 문법이 아니라 라이브러리나 프레임워크를 이용해서 반복된 표현을 하지 않도록 만드는 것 등이 이러한 추상의 예다.&lt;/p&gt;

&lt;h3 id=&quot;트레이트&quot;&gt;트레이트&lt;/h3&gt;
&lt;p&gt;새로운 프로그래밍 언어에 포함되어 있는 낯선 개념을 접할 때나 자기가 사용하는 언어에 새로운 기능이 추가될 때, 그런 개념이나 기능을 문법적인 측면으로만 접근하는 것은 좋지 않다. 그렇게 하면 그들이 &lt;strong&gt;'어떤 문제'를 해결하기 위해서 고안되었는지, 그 문제를 해결하는 데 '왜' 도움이 되는지&lt;/strong&gt; 이해하지 못한 상태에서 단순히 API를 암기하는 데 초점을 맞추게 되기 때문이다. 예를 들어, 스칼라의 trait은 자바와 C#이 가지고 있는 인터페이스라는 기능의 한계를 해결하기 위해 고안되었다. 자바나 C#의 인터페이스가 갖는 문제는 어떤 클래스가 그것을 구현하는 순간 그것이 정의하고 있는 API 전체를 받아들여야 한다. 존재 자체를 받아들여야 하는 것이다. 반면에 어떤 클래스에게 어떤 특정한 특질을 주입하는 믹스인&lt;em&gt;mix-in&lt;/em&gt; 을 사용하면 클래스가 가지는 기능을 깔끔하게 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;자바나 C#에서 사용하는 인터페이스라는 구조물이 타입안전성&lt;em&gt;type safe&lt;/em&gt; 를 보장하기 위해서 사용되는 정적 타입시스템과 상당히 관련이 깊은 개념이라고 한다면, 그에 비해서 믹신은 타입과 관련된 규칙이 매우 자유분방하고 유연한 동적 프로그래밍 언어에서 애용되는 구조물이라고 할 수 있다. 마틴 오더스키는 스칼라를 설계하면서 자바의 인터페이스가 가지고 있는 한계를 극복하면서 그와 동시에 C++의 복수상속이 야기하는 문제점을 피하기 위해서 믹신과 거의 다를 바가 없는 개념인 트레이트라는 타입을 도입했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 하나의 트레이트 안에 넣는 대신 특정 특질만 가지고 있도록 별도의 트레이트로 쪼갬.
trait Sleeper
trait Eater
trait Worker

// 특질을 필요에 따라서 원하는 클래스에 주입
class SmartPhone extends Phone with Eater
class SamsungPhone extends SmartPhone with SBeam with ShareShot
class IPhone extends SmartPhone with VideoPlayer with Siri
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;에필로그-1&quot;&gt;에필로그&lt;/h1&gt;
&lt;p&gt;이 책을 읽고 '자바는 죽었고 이제부터 대세는 스칼라'라고 주장하는 것으로 생각할지 모른다. 폴리글랏 프로그래밍이라는 개념을 이용해서 강조하고자 하는 핵심 메시지는 그와 같은 이분법적인 사고 자체가 잘못되었다는 점을 밝히는 것이다. A가 아니면 B라는 식의 흑백논리는 시대에 대한 역행이다. 대세 따위는 없다. JVM 위에서 여러 개의 언어가 백가장명하는 시기는 생각보다 오래 지속될 것이다. 예컨대 자바는 스칼라나 클로저 같은 언어들이 가지고 있는 기능을 흉내 내면서 생명을 연장하려고 할 것이고, 다른 언어들은 라이브러리, 개발도구, 커뮤니티의 활성화를 통해서 자바의 기반을 잠식하려고 노력할 것이다.&lt;/p&gt;

&lt;p&gt;앞으로 프로그래머는 어느 하나의 언어에 안주할 수 없다. 패러다임을 달리 하는 여러 개의 언어를 자유롭게 구사하지 않으면 살아남을 수 없는 폴리글랏 프로그래밍의 시대가 되었기 때문이다. 자신의 포트폴리오를 어떤 언어로 구성하는지는 각자의 몫이다. 하지만 앞으로는 프로그래머가 어떤 언어에 대해서 얼마나 많이 알고 있는가 하는 것이 아니라 &lt;strong&gt;어떤 언어를 얼마나 빠르게 학습할 수 있는가&lt;/strong&gt; 하는 것이 더 중요하다는 점을 기억하기 바란다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B3908327977&quot;&gt;폴리글랏 프로그래밍 : 새로운 자바 언어를 기다리는 히치하이커를 위한 안내서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/05/16/functional-scala-6.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/05/16/functional-scala-6.html"/>
        <title>Functional Programming in Scala 6</title>
        <updated>2018-05-16T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;1-자료-형식과-함수의-선택&quot;&gt;1. 자료 형식과 함수의 선택&lt;/h1&gt;
&lt;p&gt;대체로 함수적 라이브러리를 설계할 때에는 그 라이브러리로 무엇을 하고자 하는지에 대한 전반적인 착안을 가지고 설계 과정을 시작하게 된다. 이번 예제 라이브러리에서 우리가 원하는 것은 &quot;병렬 계산을 생성할 수 있어야 한다&quot;는 것이다. 그럼 간단하고 병렬화할 수 있는 계산을 살펴보고, 이러한 착안을 구현이 가능한 어떤 것으로 바꿔 보자. 병렬화할 계산은 목록에 있는 정수들의 합을 구하는 것이다. 이를 통상적인 foldLeft로 수행하는 코드는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sum(ints: Seq[Int]): Int =
  ints.foldLeft(0)((a, b) =&amp;gt; a + b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 Seq는 표준 라이브러리에 있는 목록과 기타 순차열들의 상위 클래스이고, foldLeft 메서드가 있다는 점이다. 그런데 이를 순차적으로 접는 대신, 다음 처럼 분할정복(Divide-and-Conquer) 알고리즘을 적용할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// IndexedSeq는 순차열을 특정 지점에서 두 부분으로 분할하는 효율적인 splitAt 메서드를 제공한다.
def sum(ints: IndexedSeq[Int]): Int =
// headOption은 스칼라의 모든 컬렉션에 정의된 메서드이다.
  if (ints.size &amp;lt;= 1) ints.headOption getOrElse 0 else {
    // splitAt 함수를 이용해서 순차열을 반으로 나눈다.
    val (l, r) = ints.splitAt(ints.length / 2);
    // 재귀적으로 두 절반을 각각 합하고 그 결과를 합친다.
    sum(l) + sum(r)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드는 순차열을 splitAt 함수를 이용해서 절반으로 분할하고, 재귀적으로 두 절반을 합해서 결과들을 합친다. foldLeft 기반 구현과는 달리 이 구현은 병렬화할 수 있다. 즉, 두 절반을 병렬로 합할 수 있는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;11-병렬-계산을-위한-자료-형식-하나&quot;&gt;1.1 병렬 계산을 위한 자료 형식 하나&lt;/h3&gt;
&lt;p&gt;표현식 sum(l) + sum(r) 을 생각해 보자. 이 표현식은 두 절반에 대해 재귀적으로 sum을 호출한다. 병렬 계산을 나타내는 자료 형식이 &lt;strong&gt;하나의 결과를 담을&lt;/strong&gt; 수 있어야 한다는 점을 알 수 있다. 새로 발견한 이 지식을 설계에 적용해 보자. 일단 지금은 결과를 담을 컨테이너 형식 Par[A](parallel의 줄임말)를 새로 만들자. 이 형식에 필요한 함수들은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 평가되지 않은 A를 받고, 그것을 개별 스레드에서 평가할 수 있는 계산을 돌려준다.
// 함수의 이름이 unit인 것은, 이 함수가 하나의 값을 감싸는 병렬성의 한 단위(unit)을 생성하기 때문.
def unit[A](a: =&amp;gt; A): Par[A]

// 병렬 계산에서 결과 값을 추출한다.
def get[A](a: Par[A]): A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 이 함수들을 가지고 정수 합산 예제를 갱신해 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sum(ints: IndexedSeq[Int]): Int =
  if (ints.size &amp;lt;= 1) ints.headOption getOrElse 0 else {
    val (l, r) = ints.splitAt(ints.length / 2)
    val sumL: Par[Int] = Par.unit(sum(l)) // 왼쪽 절반을 병렬로 계산
    val sumR: Par[Int] = Par.unit(sum(r)) // 오른쪽 절반을 병렬로 계산
    Par.get(sumL) + Par.get(sumR) // 두 결과를 추출해서 합한다.
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 버전은 두 재귀적 sum 호출을 unit으로 감싸고, 두 부분 계산의 결과들을 get을 이용해서 추출한다.&lt;/p&gt;

&lt;p&gt;unit은 주어진 인수를 개별 스레드에서 즉시 평가할 수도 있고, 인수를 그냥 가지고 있다가 get이 호출되면 평가를 시작할 수도 있다. 그런데 지금 예제에서 병렬성의 이점을 취하기 위해서는 unit이 인수의 동시적 평가를 시작한 후 즉시 반환되어야 한다. 왜냐하면 스칼라에서 함수의 인수들은 왼쪽에서 오른쪽으로 엄격하게 평가되므로, 만일 unit이 get이 호출될 때까지 실행을 지연시킨다면, 첫 병렬 계산의 실행이 끝나야 두 번째 병렬 계산이 시작된다. 이는 결국 계산이 순차적으로 실행되는 것과 같다.&lt;/p&gt;

&lt;p&gt;그런데 만일 unit이 인수들의 평가를 동시에 시작한다면 get 호출에서 참조 투명성이 깨질 수 있다. sumL과 sumR을 해당 정의로 치환해 보면 이 점이 명백해진다. 치환해도 같은 결과가 나오긴 하지만, 이제는 프로그램이 병렬로 실행되지 않는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Par.get(Par.unit(sum(l))) + Par.get(Par.unit(sum(r)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;unit이 자신의 인수를 즉시 평가하기 시작한다면, 그 다음으로 일어나는 일은 get이 그 평가의 완료를 기다리는 것이다. 따라서 sumL 변수와 sumR 변수를 그냥 단순히 나열하면 + 기호의 양변은 병렬로 실행되지 않는다. 이는 unit에 한정적인 부수 효과가 존재함을 의미한다. 단, 그 부수 효과는 get&lt;strong&gt;에만 관련&lt;/strong&gt;된 것이다. 다른 말로 하면, 이 경우 unit은 그냥 비동기 계산을 나타내는 Par[Int]를 돌려준다. 그런데 Par를 get으로 넘겨주는 즉시, get의 완료까지 실행이 차단된다는 부수 효과가 드러난다. 따라서 get을 호출하지 않거나, 적어도 호출을 최대한 미루어야 한다. 즉, 비동기 계산들을 그 완료를 기다리지 않고도 조합할 수 있어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;12-병렬-계산의-조합&quot;&gt;1.2 병렬 계산의 조합&lt;/h3&gt;
&lt;p&gt;앞에서 말한 unit과 get 조합의 문제점을 어떻게 피할 수 있을까? get을 호출하지 않는다면 sum 함수는 반드시 Par[Int]를 돌려주어야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sum(ints: IndexedSeq[Int]): Par[Int] =
  if (ints.size &amp;lt;= 1) Par.unit(ints.headOption getOrElse 0) else {
    val (l, r) = ints.splitAt(ints.length / 2)
    Par.map2(sum(l), sum(r))(_ + _)
  }

// 참고. Par.map2는 두 병렬 계산의 결과를 결합하는 고차 함수이다.
def map2[A, B, C](a: Par[A], b: Par[B])(f: (A, B) =&amp;gt; C): Par[C]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제는 재귀의 경우에 unit을 호출하지 않고, unit의 인수가 게으른 인수여야 하는지도 명확하지 않다. map2의 경우에는 계산의 양변에 동등한 실행 기회를 주어서 양변이 병렬로 계산되게 하는 것이 합당하다(map2 인수들의 순서는 별로 중요하지 않다. 결합되는 두 게산이 독립적이며, 병렬로 실행될 수 있음을 나타내는 것이 중요하다). 그러한 의미를 구현하려면 어떤 선택이 필요할까? map2의 두 인수가 엄격하게 평가된다고 할 때 sum(IndexedSeq(1, 2, 3, 4))의 평가가 어떻게 진행되는지 생각해 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sum(IndexedSeq(1, 2, 3, 4))
map2(
  sum(IndexedSeq(1, 2)),
  sum(IndexedSeq(3, 4)))(_ + _)
map2(
  map2(
    sum(IndexedSeq(1)),
    sum(IndexedSeq(2)))(_ + _),
  sum(IndexedSeq(3, 4)))(_ + _)
map2(
  map2(
    unit(1),
    unit(2))(_ + _),
  map2(
    sum(IndexedSeq(3)),
    sum(IndexedSeq(4)))(_ + _))(_ + _)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 sum(x)를 평가하려면 x를 sum의 정의에 대입해야 한다. map2는 엄격한 함수이므로 그 인수들을 왼쪽에서 오른쪽으로 평가한다. 따라서 map2(sum(x), sum(y))(_ + _)를 만날 때마다 sum(x) 등을 재귀적으로 평가해야 한다. 이는, 합산 트리의 왼쪽 절반 전체를 엄격하게 구축한 후에야 오른쪽 절반을 (엄격하게) 구축할 수 있다는 바람직하지 않은 결과로 이어진다. 예를 들어, sum(IndexedSeq(1, 2))가 완전히 전개된 후에야 sum(IndexedSeq(3, 4))의 평가가 시작된다. 만일 map2가 인수들을 병렬로 평가한다면, 이는 계산의 오른쪽 절반의 구축을 시작하기도 전에 계산의 왼쪽 절반이 실행되기 시작함을 의미한다.&lt;/p&gt;

&lt;p&gt;map2를 엄격하게 유지하되 그 실행이 즉시 &lt;strong&gt;시작되지는 않게&lt;/strong&gt; 하면 어떨까? 병렬로 계산해야 할 것의 서술을 구축한다는 의미의 Par가 있다고 생각해보자. Par가 &lt;strong&gt;평가&lt;/strong&gt;(이를테면 get 같은 함수를 이용해서)하기 전까지는 아무 일도 일어나지 않는다. 문제는, 만일 그러한 서술을 엄격하게 구축한다면, 서술을 나타내는 객체가 상당히 무거운 객체가 될 것이라는 점이다. map2를 게으르게 만들고 양변을 병렬로 즉시 실행하는 것이 나아 보인다. 그러면 양변에 동등한 실행 기회를 부여하는 문제도 해결된다.&lt;/p&gt;

&lt;h3 id=&quot;13-명시적-분기&quot;&gt;1.3. 명시적 분기&lt;/h3&gt;
&lt;p&gt;그런데 map2의 두 인수를 병렬로 평가하는 것이 &lt;strong&gt;항상&lt;/strong&gt; 바람직할까? 아마도 아닐 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Par.map2(Par.unit(1), Par.unit(1))(_ + _)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 예에서 결합하고자 하는 두 계산은 아주 빠르게 완료될 것이고, 따라서 굳이 개별적인 논리적 스레드를 띄울 필요가 없다. 그러나 현재 API에는 이런 정보를 제공할 수단이 갖추어져 있지 않다. 즉, 현재 API는 계산을 메인 스레드로부터 분기하는 시점에 관해 그리 &lt;strong&gt;명료하지 않다.&lt;/strong&gt; 즉, 우리가 그러한 분기가 일어나는 시점을 구체적으로 지정할 수 없다. 분기를 명시적으로 만들기 위해 함수 &lt;code class=&quot;highlighter-rouge&quot;&gt;def fork[A](a: =&amp;gt; Par[A]): Par[A]&lt;/code&gt; 를 추가하자. 이 함수는 주어진 Par가 개별 논리적 스레드에서 실행되어야 함을 명시적으로 지정하는 용도로 쓰인다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sum(ints: IndexedSeq[Int]): Par[Int] =
  if (ints.length &amp;lt;= 1) Par.unit(ints.headOption getOrElse 0) else {
    val (l, r) = ints.splitAt(ints.length / 2);
    Par.map2(Par.fork(sum(l)), Par.fork(sum(r)))(_ + _)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 fork 덕분에 이제는 map2를 엄격한 함수로 만들고, 인수들을 감싸는 것은 프로그래머의 뜻에 맡길 수 있게 되었다. fork 같은 함수는 병렬 계산들을 엄격하게 인스턴스화하는 문제를 해결해 주지만, 좀 더 근본적으로는 &lt;strong&gt;병렬성을 명시적으로 프로그래머의 통제하에 두는 역할&lt;/strong&gt;을 한다.&lt;/p&gt;

&lt;p&gt;이제 unit이 엄격해야 하는지 게을러야 하는지의 문제로 돌아가자. fork가 있으니 이제는 unit을 엄격하게 만들어도 표현력이 전혀 감소하지 않는다. 이 함수의 비엄격 버전(lazyUnit)은 unit과 fork로 간단히 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def unit[A](a: A): Par[A]
def lazyUnit[A](a: =&amp;gt; A): Par[A] = fork(unit(a))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;lazyUnit 함수는 unit 같은 &lt;strong&gt;기본&lt;/strong&gt;(primitive) 조합기가 아니라 &lt;strong&gt;파생된&lt;/strong&gt;(derived) 조합기의 간단한 예이다.&lt;/p&gt;

&lt;p&gt;fork는 인수들을 개별 논리적 스레드에서 평가되게 하는 수단이다. 그런데 그러한 평가가 호출 &lt;strong&gt;즉시&lt;/strong&gt; 일어나게 할 것인지, 아니면 get 같은 함수에 의해 계산이 &lt;strong&gt;강제&lt;/strong&gt;될 때까지 개별 논리적 스레드에서의 평가를 미룰 것인지는 아직 결정하지 않았다. 다른 말로 하면, 평가가 fork의 책임인지, 아니면 get의 책임인지의 문제를 결정해야 한다. 평가를 적극적으로(eagerly) 수행할 것인지 게으르게 수행할 것인지를 선택한다는 의미이다.&lt;/p&gt;

&lt;p&gt;만일 fork가 자신의 인수를 즉시 병렬로 평가하기 시작한다면, 그 구현은 스레드를 생성하는 방법이나 과제를 일종의 스레드 풀에 제출하는 방법을 직접적으로든 간접적으로든 알고 있어야 한다. 더 나아가서, 이는 스레드 풀이 반드시 접근 가능한(전역적으로) 자원이어야 하며, fork를 호출하는 시점에서 이미 적절히 초기화되어 있어야 함을 의미한다. 이런 조건을 만족하려면 프로그램의 여러 부분에서 쓰이는 병렬성 전략을 프로그래머가 임의로 제어할 수 있는 능력을 포기해야 한다. 병렬 과제들의 실행을 위해 전역 자원을 두는 것이 근본적으로 잘못된 일은 아니지만, 구현이 무엇을 언제 사용할 것인지를 프로그래머가 좀 더 세밀하게 제어할 수 있다면 더 좋을 것임은 분명하다. 따라서 스레드 생성과 실행의 책임을 get에 부여하는 것이 훨씬 적합하겠다.&lt;/p&gt;

&lt;p&gt;만약 fork가 그냥 인수의 평가를 뒤로 미루게 한다면, fork는 병렬성 구현을 위한 메커니즘에 접근할 필요가 없다. 그냥 평가되지 않은 Par 인수를 받고 그 인수에 동시적 평가가 필요하다는 점을 '표시'만 해두면 된다. 이것이 바로 fork의 의미라고 가정하다. Par는 나중에 get 함수 같은 무언가에 의해 &lt;strong&gt;해석&lt;/strong&gt; 될 병렬 계산에 관한 &lt;strong&gt;서술&lt;/strong&gt; 에 가깝다. 이는 Par를 나중에 준비되었을 때 &lt;strong&gt;조회&lt;/strong&gt;(get)할 어떤 값을 담은 &lt;strong&gt;컨테이터&lt;/strong&gt; 라고 생각했던 것과는 다른 발상이다. 이제는 &lt;strong&gt;실행&lt;/strong&gt;이 가능한 일급 프로그램에 좀 더 가까워졌으므로 get 함수의 이름을 run으로 바꾸고, 병렬성이 실제로 구현되는 지점이 바로 이 run 함수임을 정의한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def run[A](a: Par[A]): A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Par 이제 순수 자료구조이므로, run은 병렬성을 구현하는 어떤 수단을 갖추어야 한다. 새 스레드를 생성하거나 작업들을 스레드 풀에 위임할 수도 있고, 그 밖의 다른 어떤 메커니즘을 사용할 수도 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-표현의-선택&quot;&gt;2. 표현의 선택&lt;/h1&gt;
&lt;p&gt;이제 우리가 만든 Par를 위한 API 개요는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def unit[A](a: A): Par[A]
def map2[A, B, C](a: Par[A], b: Par[B])(f: (A, B) =&amp;gt; C): Par[C]
def fork[A](a: =&amp;gt; Par[A]): Par[A]
def lazyUnit[A](a: =&amp;gt; A): Par[A] = fork(unit(A))
// 주어진 Par를 fork의 요청에 따라 병렬 계산들을 수행하고 그 결과 값을 추출함으로써 완전히 평가한다.
def run[A](a: Par[A]):A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;unit은 상수 값을 병렬 계산으로 승격한다.&lt;/li&gt;
  &lt;li&gt;map2는 두 병렬 계산의 결과들을 이항 함수로 조합한다.&lt;/li&gt;
  &lt;li&gt;fork는 주어진 인수가 동시적으로 평가될 계산임을 표시한다. 그 평가는 run에 강제되어야 실제로 실행된다.&lt;/li&gt;
  &lt;li&gt;lazyUnit은 평가되지 않은 인수를 Par로 감싸고, 그것을 병렬 평가 대상으로 표시한다.&lt;/li&gt;
  &lt;li&gt;run은 계산을 실제로 실행해서 Par로부터 값을 추출한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;run이 비동기적 작업들을 실행하기 위해 Java 표준 라이브러리 java.util.concurrent.ExecutorService를 스칼라로 가져와보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ExecutorService {
  def submit[A](a: Callable[A]): Future[A]
}

trait Callable[A] { def call: A }

trait Future[A] {
  def get: A
  def get(timeout: Long, unit: TimeUnit): A
  def cancel(evenIfRunning: Boolean): Boolean
  def isDone: Boolean
  def isCancelled: Boolean
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ExecutorService의 submit 메서드는 주어진 Callable 값에 대응되는, 필요에 따라 개별 스레드에서 실행될 계산을 처리해 주는 Future 객체를 돌려준다. 계산의 결과는 Future의 get 메서드로 얻을수 있다. Future는 또한 계산의 추소를 위한 추가적인 기능도 제공한다.&lt;/p&gt;

&lt;p&gt;그럼 run 함수가 ExecutorService에 접근할 수 있다고 가정하고, 이를 개선해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def run[A](s: ExecutorService)(a: Par[A]): A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Par[A]의 표현으로 사용할 수 있는 가장 간단한 모형은 ExecutorService =&amp;gt; A일 것이다. 이 표현을 선택한다면 run을 구현하기가 아주 간단하지만, 계산 완료까지의 대기 시간이나 취소 여부를 run의 호출자가 결정할 수 있게 하면 더욱 좋을 것이다. 이를 위해 Par[A]를 ExecutorService =&amp;gt; Future[A]로 두고, run은 그냥 Future를 돌려주게 하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Par[A] = ExecutorService =&amp;gt; Future[A]
def run[A](s: ExecutorService)(a: Par[A]): Future[A] = a(s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Par가 ExecutorService를 필요로 하는 &lt;strong&gt;하나의 함수&lt;/strong&gt;로 표현되었기 때문에, Future의 생성은 이 ExecutorService가 제공되기 전까지는 일어나지 않음을 주목하기 바란다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-api-다듬기&quot;&gt;3. API 다듬기&lt;/h1&gt;
&lt;p&gt;Par의 기본적인 구현은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object Par {
  // unit은 UnitFuture를 돌려주는 함수로 표현된다. UnitFuture는 Future의 간단한 구현으로,
  // 그냥 상수 값을 감싸기만 할 뿐 ExecutorService는 전혀 사용하지 않는다.
  // UnitFuture는 항상 완료 가능하며, 취소는 불가능하다.
  def unit[A](a: A): Par[A] = (es: ExecutorService) =&amp;gt; UnitFuture(a)

  private case class UnitFuture[A](get: A) extends Future[A] {
    def isDone = true
    def get(timeout: Long, units: TimeUnit) = get
    def isCancelled = false
    def cancel(evenIfRunning: Boolean): Boolean = false
  }

  // f 호출을 개별 논리적 스레드에서 평가하지 않는다.
  // f를 개별 스레드에서 평가하고 싶다면 fork(map2(a, b)(f))를 사용하면 된다.
  def map2[A, B, C](a: Par[A], b: Par[B])(f: (A, B) =&amp;gt; C): Par[C] =
    (es: ExecutorService) =&amp;gt; {
      val af = a(es)
      val bf = b(es)
      // ExecutorService를 두 Par 값에 전달하고, Future의 af와 bf의 결과들을 기다리고,
      // 그것들에 f를 적용하고, 적용 결과를 UnitFuture로 감싼다.
      UnitFuture(f(af.get, bf.get))
    }

  def fork[A](a: =&amp;gt; Par[A]): Par[A] =
    es =&amp;gt; es.submit(new Callable[A] {
      def call = a(es).get
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Future 메서드들이 부수 효과에 의존적이라서 순수 함수적이지 않지만, Par API 자체는 여전히 순수하다. 그리고 Future의 내부 동작 방식은 사용자가 run을 호출해서 구현이 ExecutorService를 받아야 드러난다. 따라서, 구현이 부수 효과들에 의존하긴 하지만, 사용자는 항상 순수한 인터페이스로 프로그램을 짤 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들어, 하나의 List[Int]를 만드는 병렬 계산 표현식 Par[List[Int]]를 정렬된 Par[List[Int]]로 변환한다고 하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sortPar(parList: Par[List[Int]]): Par[List[Int]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 Par에 run을 적용하고, 결과 목록을 정렬하고 정렬된 목록을 unit을 이용해서 다시 Par로 꾸릴 수도 있다. 하지만 우리는 run의 호출을 피하고 map2를 이용해서(unit 이외에 Par 값을 조작할 수 있는 조합기는 map2뿐) 목록을 정렬할 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sortPar(parList: Par[List[Int]]): Par[List[Int]] =
  map2(parList, unit(()))((a, _) =&amp;gt; a.sorted)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리 어렵지 않게 문제를 해결했다. 이제 Par[List[Int]]에게 목록을 정렬하라고 알려 줄 수 있다. 그런데 이를 좀 더 일반화하는 것도 가능하다. A =&amp;gt; B 형식의 임의의 함수를, Par[A]를 받고 Par[B]를 돌려주는 함수로 승급(lift)시킬 수 있다. 다음은 Par에 대해 임의의 함수를 맵핑하는 map의 정의이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def map[A, B](pa: Par[A])(f: A =&amp;gt; B): Par[B] =
  map2(pa, unit(()))((a, _) =&amp;gt; f(a))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 sortPar는 그냥 다음과 같이 정의하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sortPar(parList: Par[List[Int]]) = map(parList)(_.sorted)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;map2가 둘째 인수를 그냥 무시하게 만들기 위해 둘째 인수에 무의미한 값 unit(()) 을 전달하는 것은 속임수가 아니다. map2를 이용해서 map을 구현할 있지만 그 반대로는 불가능하다는 사실은 map2가 map보다 더 강력함을 보여줄 뿐이다.&lt;/p&gt;

&lt;p&gt;이 API로 하나의 리스트에 map을 병렬로 적용할 수 있을까? 그럼 map2처럼 두 개의 병렬 계산을 결합하는 것이 아니라 N개의 병렬 계산을 결합하는 함수 parMap을 만들어 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def parMap[A, B](ps: List[A])(f: A =&amp;gt; B): Par[List[B]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 Par[A]는 ExecutorService =&amp;gt; Future[A]의 별칭일 뿐임을 기억하기 바란다.&lt;/p&gt;

&lt;p&gt;parMap을 새로운 방법으로 구현할 수도 있지만, 기존의 API들로 표현할 수 있는 연산들을 살펴보고 이들의 관계를 파악하기 위해 기존 조합기들을 이용해서 구현해보겠다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def parMap[A, B](ps: List[A])(f: A =&amp;gt; B): Par[List[B]] = {
  val fbs: List[Par[B]] = ps.map(asyncF(f))
}

// 참고. 임의의 함수 A =&amp;gt; B를 그 결과가 비동기적으로 평가되는 함수로 변환하는 함수
def asyncF[A, B](f: A =&amp;gt; B): A =&amp;gt; Par[B] = a =&amp;gt; lazyUnit(f(a))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;asyncF는 병렬 계산 하나를 분기(forking)해서 결과를 산출함으로써 A =&amp;gt; B를 A =&amp;gt; Par[B]로 변환한다. 이를 이용하면 N개의 병렬 계산을 수월하게 분기시킬 수 있다. 그런데 그 계산들의 결과를 취합할 방법이 필요하다. List[Par[B]]를 parMap의 반환 형식이 요구하는 Par[List[B]]로 변환하는 수단인 sequence라는 새로운 함수를 정의하고 parMap의 구현을 완성시켜 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def sequence[A](as: List[Par[A]]): Par[List[A]]

def parMap[A, B](ps: List[A])(f: A =&amp;gt; B): Par[List[B]] = fork {
  val fbs: List[Par[B]] = ps.map(asyncF(f))
  sequence(fbs)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;구현을 fork 호출 하나로 감쌌다. 이 구현에서 parMap은 입력이 거대한 목록이라고 해도 즉시 반환된다. 이후에 run을 호출하면 하나의 비동기 계산이 분기되며, 그 계산은 N개의 병렬 계산을 띄우고 그 계산들이 끝나길 기다렸다가 결과들을 하나의 목록으로 취합한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;4-api의-대수algebra&quot;&gt;4. API의 대수(algebra)&lt;/h1&gt;
&lt;p&gt;일단 원하는 연산의 서명만 작성 한 후 &quot;그 형식을 따라가다 보면&quot; 구현에 도달하는 경우가 많다. 이는 대수 방정식을 단순화할 때 하는 추론과 비슷한 자연스러운 추론 방식이다. API를 하나의 &lt;strong&gt;대수&lt;/strong&gt;(algebra), 즉 &lt;strong&gt;법칙&lt;/strong&gt; 이라고 간주하고 그 대수에 정의된 규칙에 따라 형식적으로 기호를 조작하면서 문제를 풀어나가면 된다.&lt;/p&gt;

&lt;p&gt;설계상의 다른 선택들과 마찬가지로, 법칙의 선택에는 &lt;strong&gt;결과&lt;/strong&gt;가 따른다. 법칙을 선택하면 연산에 부여할 수 있는 의미에 제약이 생기고, 선택 가능한 구현 방식이 결정되며 다른 속성들에도 영향이 미친다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map(unit(1))(_ + 1) == unit(2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 테스트 코드는 unit(1)에 _ + 1 함수를 맵핑한 것이 어떤 의미로는 unit(2)와 같음을 의미한다. 어떤 의미에서 같을까? 일단 지금은 &lt;strong&gt;임의의 유효한&lt;/strong&gt; ExecutorService에 대해 두 Par 객체의 Future 결과가 서로 같다면 그 두 Par 객체가 동등하다고 말하기로 하자.&lt;/p&gt;

&lt;p&gt;어떤 ExecutorService에 대해 이 법칙이 성립하는지는 다음과 같은 함수로 점검할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def equal[A](e: ExecutorService)(p: Par[A], p2: Par[A]): Boolean =
  p(e).get == p2(e).get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;법칙과 함수는 공통점이 아주 많다. 함수를 일반화할 수 있듯이, 법칙도 일반화할 수 있다. 앞의 법칙을 다음과 같이 일반화할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map(unit(x))(f) == unit(f(x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이는 이 법칙이 1과 _ + 1 함수 뿐만 아니라 &lt;strong&gt;임의의&lt;/strong&gt;(any) x와 f에 대해 성립함을 의미한다. 앞서 언급했듯 이는 구현에 제약을 가하는데, unit을 구현할 때 주어진 입력을 조사해서 그 값이 1이면 병렬 계산의 결과로 42를 산출하도록 구현할 수는 없다. unit은 자신이 받은 것을 넘겨주기만 해야 하고, ExecutorService도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;어떤 함수를 정의할 때 그보다 더 간단한 함수들, 즉 &lt;strong&gt;한 가지 일만 하는 함수&lt;/strong&gt; 들을 이용해서 정의하려는 것과 아주 비슷하게, 어떤 법칙을 정의할 때에는 &lt;strong&gt;한 가지 사실만 말하는&lt;/strong&gt; 더 간단한 법칙들을 이용해서 정의할 수 있다. 앞에서 이 법칙이 &lt;strong&gt;임의의&lt;/strong&gt; x와 f에 대해 성립했으면 한다고 말했다. f를 항등 함수(identity function)로 치환하면 다음과 같이 훨씬 더 간단한 법칙이 나온다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map(unit(x))(f) == unit(f(x))   // 초기 법칙
map(unit(x))(id) == unit(id(x)) // f를 항등 함수로 치환
map(unit(x))(id) == unit(x)     // 단순화
map(y)(id) == y                 // 양변에서 unit(x)를 y로 치환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;돌이켜보면 unit을 사용한 것은 불필요했다. map은 단지 함수 f를 y의 결과에 적용할 뿐이다. 그리고 f가 id라면 y에 아무런 영향도 미치지 않는다(이를 두고 map이 &lt;strong&gt;구조 보존적&lt;/strong&gt;(structure-preserving)이어야 한다고 말한다. 즉, map은 병렬 계산의 구조를 변경해서는 안되며, 오직 계산 내부의 값만 변경해야 한다.). 그리고 map(y)(id) == y 라고 할 때 반대 방향의 치환들을 통해서 원래의 좀 더 복잡한 법칙으로도 돌아갈 수 있다. 논리적으로, 이러한 자유도는 map이 주어진 함수에 따라 다른 방식으로 행동하지 않기 때문에 생긴 것이다. 즉, 만약 map(y)(id) == y 라면 반드시 map(unit(x))(f) == unit(f(x)) 도 참이어야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;5-조합기들을-가장-일반적인-형태로-다듬기&quot;&gt;5. 조합기들을 가장 일반적인 형태로 다듬기&lt;/h1&gt;
&lt;p&gt;함수적 설계는 반복적인 과정이다. API의 명세를 만들고 적어도 하나의 원형(prototype) 구현을 작성했다면, 그것을 현실적인 시나리오들에 사용해봐야 한다. 그런데 필요한 조합기를 바로 구현하는 것보다는, 그 조합기를 &lt;strong&gt;가장 일반적인 형태&lt;/strong&gt; 로 다듬을 수 있는지 살펴보는 것이 바람직하다. 그러면 새 조합기가 필요한 것이 아니라 좀 더 일반적인 조합기의 특별한 경우가 필요했다는 것을 깨달을 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;그럼 이에 관한 예로, 두 분기 계산 중 하나를 초기 계산의 결과에 기초해서 선택하는 함수가 필요하다고 하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def choice[A](cond: Par[Boolean]])(t: Par[A], f: Par[A]): Par[A]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 함수는 cond의 결과가 true이면 t를 사용해서 계산하고, cond의 결과가 false이면 f를 사용해서 계산한다. 이를, cond의 결과가 나올때까지 실행을 차단하고 그 결과를 이용해서 t나 f의 실행을 결정하는 식으로 구현할 수도 있다. 이는 다음과 같이 Blocking 방식으로 구현한 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def choice[A](cond: Par[Boolean]])(t: Par[A], f: Par[A]): Par[A] =
  es =&amp;gt;
    if (run(es)(cond).get) t(es) // cond의 결과가 나올 때까지 Blocking
    else f(es)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 조합기는 cond를 실행하고, 결과가 나오면 t나 f 중 하나를 실행한다. 여기서 Boolean을 사용하는 것과, &lt;strong&gt;두&lt;/strong&gt; 병렬 계산 t와 f 중 하나를 선택한다는 사실은 다소 자의적이다. 어떤 조건에 기초해서 두 병렬 계산 중 하나를 선택하는 것이 유용하다면, N개의 계산 중 하나를 선택하는 것도 당연히 유용할 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def choiceN[A](n: Par[Int])(choices: List[Par[A]]): Par[A] =
  es =&amp;gt; {
    val ind = run(es)(n).get
    run(es)(choices(ind))
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 choiceN은 n을 실행하고, 그 결과에 기초해서 choices의 병렬 계산 중 하나를 선택한다. 하지만 choiceN에도 여전히 자의적인 구석이 남아 있다. List를 사용하는 것은 필요 이상으로 구체적인것 같다. 이 조합기는 컨테이너의 구체적인 종류에 구애받을 필요가 없다. 예를 들어, 계산들의 목록 대신 계산들의 Map이 있다면 어떨까?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def choiceMap[K, V](key: Par[K])(choices: Map[K, Par[V]]): Par[V]
  es =&amp;gt; {
    val k = run(es)(key).get
    run(es)(choices(k))
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List와 마찬가지로, 가능한 선택들의 집합을 이처럼 Map으로 표현하는 것도 필요 이상으로 구체적이다. choiceMap의 구현을 살펴보면 Map의 API는 그리 많이 사용하지 않음을 알 수 있다. Map[A, Par[B]]는 단지 A =&amp;gt; Par[B] 형식의 함수를 제공하는 데 쓰일 뿐이다. 이 점을 염두에 두고 choice와 choiceN을 다시 보면, choice에서는 한 쌍의 인수들이 그냥 Boolean =&amp;gt; Par[A] 형식의 함수로 쓰이고 choiceN에서는 목록이 Int =&amp;gt; Par[A] 형식의 함수로 쓰일 뿐이다.&lt;/p&gt;

&lt;p&gt;이를 모두 통합하는 일반적인 시그니처를 만든다면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def chooser[A, B](pa: Par[A])(choices: A =&amp;gt; Par[B]): Par[B]
  es =&amp;gt; {
    val k = run(es)(p).get
    run(es)(choices(k))
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수들을 이런 식으로 일반화할 때에는, 일반화의 결과로 나온 함수를 비판적으로 살펴보기 바란다. chooser는 일단 실행되면 첫 계산을 실행하고 그 결과에 따라 둘째 계산을 결정하는 하나의 병렬 계산이다. 그런데 첫 계산의 결과가 준비되기 전에 둘째 계산이 반드시 존재해야 할 필요는 없다. List나 Map 같은 컨테이너에 저장해 둘 필요가 없는 것이다. 첫 계산의 결과를 이용해서 둘째 계산을 즉석에서 생성할 수도 있다. 함수적 라이브러리에 흔히 등장하는 그러한 함수를 흔히 bind나 flatMap이라고 부른다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def flatMap[A,B](p: Par[A])(choices: A =&amp;gt; Par[B]): Par[B] =
  es =&amp;gt; {
    val k = run(es)(p).get
    run(es)(choices(k))
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flatMap이라는 이름은 이 연산을 두 단계를 분해할 수 있음을 암시한다. 첫 단계는 Par[A]에 f: A =&amp;gt; Par[B]를 &lt;strong&gt;mapping해서&lt;/strong&gt; Par[Par[B]]를 생성하는 것이고, 둘째 단계는 Par[Par[B]]를 &lt;strong&gt;flattening해서&lt;/strong&gt; Par[B]를 만드는 것이다. &lt;strong&gt;임의의&lt;/strong&gt; x에 대해 Par[Par[X]]를 Par[X]로 변환하는 &lt;strong&gt;간단한&lt;/strong&gt; 조합기를 추가하기만 하면 된다는 점을 암시해 준다. 그런 조합기를 join이라고 부르자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def join[A](a: Par[Par[A]]): Par[A] =
  es =&amp;gt; run(es)(run(es)(a).get())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수의 이름을 join이라고 한 것은, 개념적으로 이 함수는 일단 실행되면 내부 계산을 실행하고, 그 계산이 완료되길 기다리고(Thread.join과 비슷하게), 그 결과를 돌려주기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;대수의 표현력과 한계 인식&lt;/strong&gt;
함수형 프로그래밍을 계속 연습하다 보면 &lt;strong&gt;대수로부터 표현할 수 있는 함수&lt;/strong&gt;들과 그 대수의 한계들을 인식하는 능력이 생긴다. 한 예로, 앞의 예제에서 choice 같은 함수를 map과 map2, unit 만으로 순수하게 표현할 수는 없다는 점을 처음부터 명백하게 인식하지는 못했을 것이다. 또한 choice가 단지 flatMap의 특수 경우라는 점도 명백하지 않았을 것이다. 시간이 지나면 이런 부분을 좀 더 일찍 인식하게 될 것이고, 필요한 조합기를 표현할 수 있도록 대수를 수정하는 방법 역시 좀 빨리 찾아내게 될 것이다. 이러한 능력은 모든 API 설계 작업에 도움이 된다.&lt;br /&gt;
실무의 관점에서 볼 때, API를 최소한의 기본 함수들로 줄이는 능력은 대단히 유용하다. parMap을 기존의 조합기들을 이용해서 구현할 때 언급했듯이, 기본적인 조합기들은 다소 까다로운 논리를 캡슐화하고 있는 경우가 많으며, 그런 것들을 재사용하면 까다로운 논리를 되풀이해서 다룰 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/functional-programming-in-scala&quot;&gt;Functional Programming in Scala&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.i-harness.com/en/q/95ada1&quot;&gt;Scala’s lazy arguments: How do they work?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/05/02/blockchain-scala.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/05/02/blockchain-scala.html"/>
        <title>스칼라로 블록체인 구현하기</title>
        <updated>2018-05-02T00:00:00+00:00</updated>
        <author>
          <name></name>
          <email></email>
        </author>
        <content type="html">&lt;h1 id=&quot;해시캐시&quot;&gt;해시캐시&lt;/h1&gt;
&lt;p&gt;2008년 미국의 조사에 따르면, 스팸메일은 대략 천만 개당 하나 정도 효과가 있다고 한다. 천만 개 스팸메일을 보내서 그 중 한명만 걸려들어도 스팸메일을 보낼 만하다는 것이다. 천만 개 중 하나가 아니라 백만 개 중 하나라고 해도 누군가는 25년에 한 번 스팸에 넘어가면 스팸메일을 보내는 입장에서는 쓸 만한 광고 전략인 셈이다. 전 세계에서 수백, 수천명이 스팸메일에 속아 소액의 돈을 부쳤으면 짭짤한 사업이라 할 수 있다. 왜냐하면 스팸메일을 보내는 비용이 매우 싸기 때문이다.&lt;/p&gt;

&lt;p&gt;그런데 여기서, 이메일을 보낼 때 한 사람당 1초쯤 걸린다면 어떨까? 일상적으로 메일을 보낼 때 1초 후에 전송되는 것은 문제가 되지 않을 것이다. 하지만 스팸메일을 보내는 입장에서는 큰일이다. 1명당 1초씩 걸린다면 한 시간에 3,600명이고, 하루에 86,400명, 한 달에 260만명 꼴이다. 위에서 나온 통계대로라면 4개월에 1명 정도의 효과가 있는 것이다. 이런 스팸메일은 가치가 없다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해시캐시&lt;/strong&gt; 는 이메일을 보낼 때 보내는 사람이 메일을 보내기 위해 노력했다는 증거(&lt;em&gt;작업 증명&lt;/em&gt;)를 함께 보내서 내 메일은 스팸이 아니라고 알리는 방법이다. 작업 증명은 제약을 완화한 해시를 쓰면 된다.&lt;/p&gt;

&lt;p&gt;우리가 이메일을 주고 받을 때, 이메일 헤더에는 보내는 사람의 이메일, 받는 사람의 이메일, 본문의 형식, 기타 이메일을 구성하고 전송하기 위한 각종 정보가 규정된 형식에 맞게 적혀 있다. 해시캐시를 써서 스팸메일 필터링을 할 때는 이메일 헤더에 &lt;em&gt;X-Hashcash&lt;/em&gt; 라는 항목을 1개 추가해서 함께 보낸다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;X-Hashcash&lt;/em&gt; 헤더 항목의 값 전체를 해시의 X값이라고 생각해 보자. 이것이 해시함수의 입력인 X값이라고 하면 메일을 받은 사람은 이 값을 입력으로 하여 미리 해시함수를 계산할 수 있다. 계산 결과로 나온 Y값에서 앞쪽 20비트가 모두 0이면, 보낸 사람은 이 메일을 보내기 위해 자신의 시간을 써서 값을 계산해 냈다고 판단할 수 있는 것이다. 중요한 점은 받은 사람이 검증할 때 보낸 사람의 메일 주소를 확인하는 등 부수적인 정보를 이용하지 않고 판단할 수 있다는 것이다. 해시캐시로 검증하는 단계에서는 단지 헤더 항목 &lt;em&gt;X-Hashcash&lt;/em&gt; 의 값만 보고 판단한다. 이것이 해시캐시의 핵심이다.&lt;/p&gt;

&lt;p&gt;그런데 받는 사람 입장에서 이렇게 믿을 수 있는 근거는 뭘까? 해시캐시로 앞의 20비트를 0으로 만드는 결과가 나왔으니 계산에서 시간을 들인 건 확실하다. 여기에 입력된 X값은 나에게 보내는 메일을 위해서만 만들어졌다는 것을 알 수 있는 내용이 포함되어야 할 것이다. 그렇지 않으면 미리 이 값을 계산해놓고 여러번 반복해서 사용 할 수도 있을테니까. 나에게 보내기 위해 계산했다는 것은 X값에 내 이메일 주소가 포함돼 있는지 확인한다.&lt;/p&gt;

&lt;h3 id=&quot;sender&quot;&gt;Sender&lt;/h3&gt;
&lt;p&gt;그렇다면 보내는 쪽에서는 뭘 해야 할까?
메일을 작성할 때 새로 계산했다는 것을 랜덤 필드로 표현한다. 이 사람이 나에게 보낸 메일 중 같은 날짜와 시간에 같은 랜덤필드를 갖는 메일이 있으면 이미 받은 메일이라고 취급한다. 보내는 쪽에서는 X값을 해시함수에 넣어서 조건을 만족하는 결과가 나오도록 보내야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;X에 들어갈 내용 중 버전, 날짜, 받는 사람 등은 메일을 작성할 때 자동으로 채워진다.&lt;/li&gt;
  &lt;li&gt;랜덤값을 새로 만들어 랜덤 필드를 채운다.&lt;/li&gt;
  &lt;li&gt;모든 내용을 채우고 나면 빈 자리는 카운터 밖에 없다.&lt;/li&gt;
  &lt;li&gt;여러 번의 시도 끝에 조건을 만족하는 카운터 값을 찾았으면 그 값을 넣어 메일을 보낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;해시캐시에서의-작업증명-요약&quot;&gt;해시캐시에서의 작업증명 요약&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;해시를 역으로 계산하면서 결과값 Y가 일정 범위에 들어가도록 결과의 범위를 넓혀 주면서 X값을 찾는다.&lt;/li&gt;
  &lt;li&gt;이메일 헤더에 X값을 포함하여 보내면 보내는 사람이 받는 사람에게 메일을 보내기 위해 노력했다는 작업증명이 된다.&lt;/li&gt;
  &lt;li&gt;메일을 받는 사람은 해시함수를 한 번만 계산하면 값을 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;검증할 떄 누구에게 물어볼 필요 없이 헤더값만으로 검증할 수 있다(제 3자의 검증이 필요 없음).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;블록의-구성&quot;&gt;블록의 구성&lt;/h1&gt;
&lt;p&gt;블록은 블록체인의 기본 요소다. 해시캐시 메일 헤더를 쓰면 메일을 보낸 사람이 일정한 노력을 들였다는 것을 받는 사람이 알 수 있다고 했다. 해시캐시에서는 메일 헤더에 이 내용을 적어 두어 메일을 보내는 데 노력을 들였다는 증거로 이용했다. 해시 결과값에서 앞의 20비트가 0이면 이메일을 보내기 위해 노력했다는 것을 인정했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/05/02/blockchain3.png&quot; alt=&quot;blockchain3&quot; title=&quot;blockchain3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://esotera.eu/clients-explorers/&quot; target=&quot;\_blank&quot;&gt;The basic structure of a Block&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;해시캐시에서 값이 바뀌는 부분이 있고 바뀌는 값에 따라 해시를 계산해서 찾아내야 하는 값이 있다고 했다. 해시캐시에서 카운터라고 했던 부분은 블록체인에서 Nonce라는 용어로 바뀌었다(위 그림에서 Random nonce). Nonce는 일시적이고 임시방편인 것을 표현하는 말로, 이 블록만을 위해 일회용으로 찾아낸 값이란 의미다. 이 블록을 만드는 사람은 SHA(바뀌는 값 + Nonce)를 계산해서 앞의 20비트가 0인 값이 나올 때까지 계산하는 것이다. 그리고 이 블록을 보는 사람은 그냥 전체를 SHA 해시로 계산해서 앞의 20비트가 0이면 진짜인지 가짜인지 알아볼 수 있다.&lt;/p&gt;

&lt;p&gt;누군가 일정한 노력을 들여 Nonce를 계산해서 하나의 블록을 완성하면 다른 사람은 블록만 보고 원 저자가 노력을 들인 것을 알게 된다. Nonce는 블록의 다른 내용이 결정된 후에 계산된 것이 분명하다. 블록의 내용이 무엇이든 이것을 계산해 낸 사람은 블록 내용이 결정된 후에 많은 노력을 들여 Nonce를 계산했다. 블록에 들어가는 내용은 응용분야에 따라 달라질 수 있는데 비트코인에서는 거래 기록이 들어간다.&lt;/p&gt;

&lt;h1 id=&quot;블록의-연결&quot;&gt;블록의 연결&lt;/h1&gt;
&lt;p&gt;모든 정보를 한 덩어리의 블록으로 만드는 것은 답이 아니다. 쓰면 쓸수록 점점 커지는 블록은 금세 관리와 계산능력의 한계에 다다를 것이므로 쓸모가 없어진다. 뭔가 하나만 고치려 해도 너무 많은 일을 해야 한다. 블록체인에서는 이 문제를 블록을 연결하여 해결했다. 블록의 체인을 만드는 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000   01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
00000010   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
00000020   00 00 00 00 3B A3 ED FD  7A 7B 12 B2 7A C7 2C 3E   ....;£íýz{.²zÇ,&amp;gt;
00000030   67 76 8F 61 7F C8 1B C3  88 8A 51 32 3A 9F B8 AA   gv.a.È.ÃˆŠQ2:Ÿ¸ª
00000040   4B 1E 5E 4A 29 AB 5F 49  FF FF 00 1D 1D AC 2B 7C   K.^J)«_Iÿÿ...¬+|
00000050   01 01 00 00 00 01 00 00  00 00 00 00 00 00 00 00   ................
00000060   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
00000070   00 00 00 00 00 00 FF FF  FF FF 4D 04 FF FF 00 1D   ......ÿÿÿÿM.ÿÿ..
00000080   01 04 45 54 68 65 20 54  69 6D 65 73 20 30 33 2F   ..EThe Times 03/
00000090   4A 61 6E 2F 32 30 30 39  20 43 68 61 6E 63 65 6C   Jan/2009 Chancel
000000A0   6C 6F 72 20 6F 6E 20 62  72 69 6E 6B 20 6F 66 20   lor on brink of
000000B0   73 65 63 6F 6E 64 20 62  61 69 6C 6F 75 74 20 66   second bailout f
000000C0   6F 72 20 62 61 6E 6B 73  FF FF FF FF 01 00 F2 05   or banksÿÿÿÿ..ò.
000000D0   2A 01 00 00 00 43 41 04  67 8A FD B0 FE 55 48 27   *....CA.gŠý°þUH'
000000E0   19 67 F1 A6 71 30 B7 10  5C D6 A8 28 E0 39 09 A6   .gñ¦q0·.\Ö¨(à9.¦
000000F0   79 62 E0 EA 1F 61 DE B6  49 F6 BC 3F 4C EF 38 C4   ybàê.aÞ¶Iö¼?Lï8Ä
00000100   F3 55 04 E5 1E C1 12 DE  5C 38 4D F7 BA 0B 8D 57   óU.å.Á.Þ\8M÷º..W
00000110   8A 4C 70 2B 6B F1 1D 5F  AC 00 00 00 00            ŠLp+kñ._¬....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;&lt;a href=&quot;https://en.bitcoin.it/wiki/Genesis_block&quot; target=&quot;\_blank&quot;&gt;The raw hex version of the Genesis block&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;블록체인에서는 생성된 첫번째 블록을 &lt;em&gt;Genesis Block&lt;/em&gt; 이라고 부른다. Genesis Block의 경우 누군가가 이미 Nonce를 계산하여 만들어 놨기 때문에 Genesis Block의 해시값을 계산하는 것은 쉽다. Genesis Block의 Nonce를 포함하여 계산한 해시값은 조건을 만족하고 있을 테니 2^140보다 작은 값이다. 블록1(그 다음 블ㄹ록)을 만드는 사람은 이 해시값을 블록의 내용에 넣고 블록1의 Nonce를 계산한다. Genesis Block의 해시값이 블록1에서는 내용의 일부로 사용되고 블록1의 Nonce를 새로 찾아내야 한다. 즉 반드시 Genesis Block를 가지고 있어야만 블록1을 만들 수 있다.&lt;/p&gt;

&lt;p&gt;만약 100번째 블록을 누군가가 만드렬 한다면 이 사람은 정당한 해시값이 나오는 정상적인 99번째 블록을 가지고 있어야 100번째 블록을 만들 수 있다. 단순히 다음 블록에 이전 블록의 해시값을 넣어 준 것만으로 한 무리의 블록체인이 단계별로 순차적으로 만들어진 것을 검증하고 믿을 수 있게 된 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/05/02/blockchain.svg&quot; alt=&quot;blockchain1&quot; title=&quot;blockchain1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://bitcoin.org/en/developer-guide#block-chain&quot; target=&quot;\_blank&quot;&gt;Block Chain Overview&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;여기에서 블록을 연결하는 체인은 프로그래밍 용어인 포인터, 즉 데이터의 주소나 파일명 같은 컴퓨터 내의 위치 정보가 아니다. 여기서 얘기하는 것은 그런 주소가 아니다. Nonce와 이를 포함해서 계산한 해시값이 블록을 이어주는 체인이자 연결고리이다.&lt;/p&gt;

&lt;p&gt;비트코인은 응용분야에서 암호화폐로 사용되기 때문에 해시캐시보다 더 조건을 강화해야 한다. 컴퓨터 속도가 빨라도 금방 계산되지 않는 해시, 즉 최대한 믿을 수 있도록 하기 위해 SHA가 고안되었다. 해시캐시에서는 SHA-160 함수를 사용했고, 비트코인에서는 SHA256 함수를 이용하고 앞자리도 20비트가 아닌 40비트가 0이 돼야 하는 조건으로 강화했다.&lt;/p&gt;

&lt;p&gt;SHA-256은 어떤 입력이 들어가든 해시 결과가 256비트 크기의 출력이 나온다는 의미다. 앞자리 40비트가 0이란 의미는 256비트 중 40비트를 제외한 나머지 216비트는 아무 값이어도 상관없다는 뜻이다. 한 비트가 늘었을 떄 두 배로 어려워지는 것이므로 20비트가 늘면 2^20배, 대략 백만 배만큼 어려워지는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;블록체인-구조의-요약&quot;&gt;블록체인 구조의 요약&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 블록은 이전 블록의 해시값을 포함하여 구성된다. 이전 블록의 해시값은 미리 만들어 놓을 수 없으므로 이전 블록을 가지고 있지 않으면 새 블록을 만들 수 없다.&lt;/li&gt;
  &lt;li&gt;블록을 직접 만들지 않고 전달받은 사람도 블록이 정당한지 이전 블록에서 쉽게 계산할 수 있어 검증하기가 쉽다.&lt;/li&gt;
  &lt;li&gt;체인이 길어지면 아래에 놓은 블록은 신뢰도가 점점 더 높아진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;블록체인-구현&quot;&gt;블록체인 구현&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;case class Block(
  index: Long,
  previousHash: String,
  timestamp: Timestamp,
  messages: List[BlockMessage],
  nonce: Long
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;블록은 크게 이전 블록의 해시값, 블록에 담길 데이터(messages) 그리고 블록 생성을 위해 계산해야할 Nonce 값으로 이루어져 있다. BlockMessage에는 블록에 담길 데이터가 포함되는데, 가상화폐의 경우 각 블록에 작성된 Transaction 데이터가 포함된다. 블록체인에서 첫번째 블록은 Genesis Block이라고 부른다. Genesis Block은 블록체인의 0번째 블록을 말하며, 이전 블록이 존재하지 않으므로 해시는 임의의 값으로 할당해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sealed trait Chain {
  val size: Int
  val hash: String
  val block: Block
  val nonce: Long

  def ::(block: Block): Chain = ChainLink(this.size + 1, block, hash, this)

  override def toString: String = s&quot;$size:$hash:${block.toContentString}:$nonce&quot;
}

case class ChainLink(
  index: Int,
  block: Block,
  previousHash: String,
  tail: Chain,
  timestamp: Timestamp = Timestamp.current
) extends Chain {
  val size = 1 + tail.size
  val hash = StringUtils.sha256Hex(this.toString)
  val nonce = block.nonce
}

case object EmptyChain extends Chain {
  val size = 0
  val hash = &quot;1&quot;
  val block = null
  val nonce = 100L
}

object Chain {
  def apply(blocks: ChainLink*): Chain = {
    if (blocks.isEmpty) EmptyChain else {
      val chainLink = blocks.head
      ChainLink(chainLink.index, chainLink.block, chainLink.previousHash, apply(blocks.tail: _*))
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Chain은 블록과 블록을 이어서 BlockChain을 만들어주는 연결고리 역할을 한다. 위에서 설명하였듯이 블록을 연결하는 체인은 포인터와 같은 데이터의 주소가 아니라, Nonce와 이를 포함해서 계산한 해시값으로 다음 블록을 이어주는 역할을 한다고 하였다. 그래서 ChainLink는 이전 해시값과 새로 계산된 해시값을 가지고 있고, 이는 블록을 서로 연결하고 있다는 것을 의미한다. 만약 새로운 Chain을 만들때 주어진 ChainLink 없다면 EmptyChain을 반환하고, 그렇지 않으면 새로운 체인을 생성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class BlockChain(chain: Chain = EmptyChain) {
  val messages : ArrayBuffer[BlockMessage] = ArrayBuffer.empty
  val nodes : ArrayBuffer[URL] = ArrayBuffer.empty

  def registerNode(address: String): Unit = nodes += new URL(address)

  def addMessage(data: String) : Int = {
    messages += BlockMessage(data)
    chain.size + 1
  }

  def checkPoWSolution(lastHash: String, proof: Long) : Boolean =
    ProofOfWork.validateProof(lastHash, proof)

  def addBlock(nonce: Long, previousHash: String = &quot;&quot;) : BlockChain = {
    val block = Block(chain.size + 1, previousHash, Timestamp.current, messages.toList, nonce)
    messages.clear()
    new BlockChain(block :: chain)
  }

  def findProof() : Long = ProofOfWork.proofOfWork(getLastHash)

  def getLastBlock: Block = chain.block

  def getLastHash: String = chain.hash

  def getLastIndex: Int = this.chain.size

  def getChain: Chain = this.chain
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전체 코드는 &lt;a href=&quot;https://github.com/sungjk/s-blockchain&quot;&gt;Github&lt;/a&gt;에서 확인하실 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yes24.com/24/goods/56887730&quot;&gt;블록체인 펼쳐보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/skimaza/ss-57356762&quot;&gt;How Blockchain Works - 블록체인의 원리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitcoin.org/en/developer-guide#block-chain&quot;&gt;Bitcoin Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/04/21/springcamp2018.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/04/21/springcamp2018.html"/>
        <title>SPRING CAMP 2018</title>
        <updated>2018-04-21T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;p&gt;Spring Framework을 잘 알지 못하지만, Micro Service Architecture(MSA)에 관심이 많아서 Track A 세션만 들었습니다. 각 세션을 들으면서 개인적으로 정리한 것이라서 오타가 잘못된 정보가 있을 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;희망을-찾기-위한-우리의-여정-coupang-msa정재훈님&quot;&gt;희망을 찾기 위한 우리의 여정, Coupang MSA(정재훈님)&lt;/h3&gt;

&lt;p&gt;5년 전 쿠팡 Monolithic architecture의 Paint point&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;부분의 장애가 전체 서비스에 영향을 미침&lt;/li&gt;
  &lt;li&gt;레거시 문제(coupang-common)&lt;/li&gt;
  &lt;li&gt;부분적인 Scale-out 어려움&lt;/li&gt;
  &lt;li&gt;배포의 비효율성: 서비스의 성장을 가로막게 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vitamin project for Micro-service&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;도메인 팀에 helper library 제공&lt;/li&gt;
  &lt;li&gt;Message Queue를 클러스터링하고, 자동으로 Fail over 되도록 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configuration Management DataBase(CMDB)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Micro-service count 수백개&lt;/li&gt;
  &lt;li&gt;서버의 인스턴스 10000대&lt;/li&gt;
  &lt;li&gt;다양한 메타 정보를 가시화하고, 자동화&lt;/li&gt;
  &lt;li&gt;전체 서비스가 아닌 특정 서비스 기준으로 데이터를 메쉬화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bolt2(Deployment System of Coupang)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하루에 횟수로는 100번 이상, 2천대 이상 배포 가능하도록 구성&lt;/li&gt;
  &lt;li&gt;Stage -&amp;gt; Canary -&amp;gt; All&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A/B Test&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;주요한 Feature 변경은 모두 A/B 테스트로 진행&lt;/li&gt;
  &lt;li&gt;A/B Test는 사용자 모집과 노출 빈도가 중요&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API Gateway&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API Gateway에서의 콜 수 30억&lt;/li&gt;
  &lt;li&gt;현재 10,000개 이상의 API를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;전체 조직에서 특정 API를 누가 사용하고 있는지, 어떤 API가 deprecated되었는지 등을 관리하기 위해&lt;/li&gt;
  &lt;li&gt;쿠팡 전체 서비스의 API 를 가시화하고, 어떤 Parameter, 어떤 Response, 어떤 팀, 어떤 서비스에서 사용하고 있는지&lt;/li&gt;
  &lt;li&gt;(초기) API Gateway가 Single Point로 존재해서, Single Point of Failure와 Latency의 증가 문제 발생&lt;/li&gt;
  &lt;li&gt;(개선) Consumer는 API Gateway에서 Routing 정보를 받아와서 직접 Provider에 요청&lt;/li&gt;
  &lt;li&gt;(초기) Consumer는 해당 정보를 얻어가기 위해 순차적으로 API를  호출&lt;/li&gt;
  &lt;li&gt;(개선) Consumer는 API Gateway에 요청만 하면 병렬적으로 수행후 값을 받아감&lt;/li&gt;
  &lt;li&gt;Traffic throttling: 특정 Consumer가 API를 비정상적으로 많이 호출하더라도 장애가 발생하지 않도록&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Site Reliability Engineering(SRE)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서비스에 장애가 난 경우, 어떤 이유 때문에 장애가 났는지?&lt;/li&gt;
  &lt;li&gt;서비스 장애를 재연하기 위해 어떻게 해야되는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Integration test for MSA&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;문제: 어떤 서비스가 dependency를 가지고 있는 경우, 하나의 서비스를 테스트하기 위해 전체 시스템을 테스트해야 한다.&lt;/li&gt;
  &lt;li&gt;API Gateway가 있다면 Test를 위한 Dependency를 제거할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dynamic properties for MSA&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scale-out 할 때 DB connection pool 과 같은 자원은 제한적이기 때문에 이를 동적으로 관리할 방법이 필요함.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이벤트-기반-분산-시스템을-향한-여정박용권님&quot;&gt;&lt;a href=&quot;https://www.slideshare.net/arawnkr/ss-94475606&quot;&gt;이벤트 기반 분산 시스템을 향한 여정(박용권님)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;부제: build event-driven distributed system with spring, aws&lt;/p&gt;

&lt;p&gt;지난 1년간 공급망 관리(supply chain management, SCM) 시스템을 운영, 개발하며 있었던 일&lt;/p&gt;

&lt;p&gt;초기(2016)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 서비스와 백 오피스 모듈로 구성된 Monolithic architecture 시스템&lt;/li&gt;
  &lt;li&gt;Back office 중심, 주로 수작업으로 이루어짐&lt;/li&gt;
  &lt;li&gt;주문량 성장에 따른 자동화된 시스템 기반 업무로 전환 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapter&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;시스템 통합을 위한 어댑터 서비스 도입&lt;/li&gt;
  &lt;li&gt;Spring boot(Java 1.8), AWS Elastic Beanstalk&lt;/li&gt;
  &lt;li&gt;시스템간 이질적인 용어와 모델을 번역하는 역할을 수행(주문과 입/출하 관련)&lt;/li&gt;
  &lt;li&gt;주문 완료 메시지: 메시지 기반으로 비동기 처리, 시스템간 결합 제거&lt;/li&gt;
  &lt;li&gt;주문 완료 메시지에서 수신된 메시지는 멱등성(중복 처리)을 보장하도록 기능 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컴포넌트의 역할에 따라 패키지를 나눈 것이 아닌, 도메인의 경계에 따라 패키지를 나누었고 그 내부에서 역할에 따라 모듈로 구성&lt;/p&gt;

&lt;p&gt;모듈화는 왜?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모듈간 상호작용은 내부 프로세스로 처리&lt;/li&gt;
  &lt;li&gt;단일 트랜잭션 관리로 인해 강력한 일관성 확보&lt;/li&gt;
  &lt;li&gt;IDE를 통한 손쉬운 코드 리팩토링&lt;/li&gt;
  &lt;li&gt;하지만, 모듈화를 구성하다 보니 모듈 간의 강결합이 발생하면서 또 다른 모놀리식 시스템화 현상이 발생하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이벤트 생산과 소비를 통한 느슨한 결합(Loose coupling)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Producer, Consumer&lt;/li&gt;
  &lt;li&gt;Channel: 생산자와 소비자에 적절한 이벤트가 전달되도록 중간 역할&lt;/li&gt;
  &lt;li&gt;모듈간의 결합도를 이벤트 기반으로 해소시켰다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RPC(Remote Procedure Call): 시스템 간 응집도 상승
RESTful API
Messaing system&lt;/p&gt;

&lt;p&gt;컨텍스트(시스템, 서비스) 간 협업을 위한 두가지 방식&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;동기: Request&amp;lt;-&amp;gt;Response, 실시간 응답이 필요한 경우&lt;/li&gt;
  &lt;li&gt;비동기: Messaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링 메시징 모듈, 메시징 통합 지원&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring cloud stream: 다중 바인드 지원. 하지만 아직 aws 지원하지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이벤트 기반 애플리케이션과 메시징 어댑터&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11번가-spring-cloud-기반-msa-전환-1년간의-이야기윤용성님&quot;&gt;11번가 Spring Cloud 기반 MSA 전환 1년간의 이야기(윤용성님)&lt;/h3&gt;

&lt;p&gt;어떻게 MSA를 도입할까?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;잘 사용되지 않는 코드까지 수정할 필요가 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hybrid MSA&lt;/p&gt;

&lt;p&gt;MSA 플랫폼 Solution 선정&lt;/p&gt;

&lt;p&gt;Fallback 발생 조건&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Circuit open&lt;/li&gt;
  &lt;li&gt;Any Exception&lt;/li&gt;
  &lt;li&gt;Semaphore, ThreadPool exception&lt;/li&gt;
  &lt;li&gt;Timeout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hystrix, Ribbon, Eureka&lt;/p&gt;

&lt;p&gt;MSA 플랫폼 내부의 API server 간의 호출은 어떻게 할 것인가?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;내부의 모든 서버가 Hystrix + Ribbon + Eureka 기반으로 서로 통신&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring Cloud Feign With Hystrix&lt;/p&gt;

&lt;p&gt;MSA 모니터링 문제점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;관련된 API 서버가 어느 것인지 쉽게 알기가 어렵다.&lt;/li&gt;
  &lt;li&gt;분산 Tracing의 필요: 서버와 서버 호출 시 Http Header에 특정 protocol을 추가&lt;/li&gt;
  &lt;li&gt;특정 Trace ID(UUID)를 부여&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;msa를-위한-spring-cloud와-kubernetes홍정석님&quot;&gt;MSA를 위한 Spring Cloud와 Kubernetes(홍정석님)&lt;/h3&gt;

&lt;p&gt;Cloud native 12 요소(https://12factor.net/ko/)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;동시성(Concurrency)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;폐기 가능(Disposability)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;API Gateway - Netflix Zuul&lt;/li&gt;
  &lt;li&gt;Service Discovery - Consul, Netflix Eureka, Netflix Zookeeper&lt;/li&gt;
  &lt;li&gt;Service Incovation - Feign&lt;/li&gt;
  &lt;li&gt;Security - Security&lt;/li&gt;
  &lt;li&gt;Load balancing - Netflix Ribbon&lt;/li&gt;
  &lt;li&gt;Resiliency - Health Indicator, Netflix Hystrix&lt;/li&gt;
  &lt;li&gt;Packaging - Spring Framework(Boot)&lt;/li&gt;
  &lt;li&gt;Configurations - Config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Container Orchestration&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scheduling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kubernetes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automatic binpacking: 가용 서버로 스케쥴링 해주는 기능&lt;/li&gt;
  &lt;li&gt;Self-healing: 컨테이너의 상태를 모니터링&lt;/li&gt;
  &lt;li&gt;Horizontal scaling:&lt;/li&gt;
  &lt;li&gt;Service discovery and Load balancing&lt;/li&gt;
  &lt;li&gt;Automatic rollouts and rollbacks: 다섯개의 컨테이너 버전업 할 때 버전별로 stop, start를 자동으로 관리&lt;/li&gt;
  &lt;li&gt;Secret and configuration management&lt;/li&gt;
  &lt;li&gt;Storage orchestration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kubelet: 컨테이너가 워커에서 돌아가는데, 마스터가 Kubelet과 통신하고 Kubelet이 컨테이너와 통신&lt;/p&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/03/11/convnet-2.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/03/11/convnet-2.html"/>
        <title>Convolutional Neural Network - 2</title>
        <updated>2018-03-11T00:00:00+00:00</updated>
        <author>
          <name></name>
          <email></email>
        </author>
        <content type="html">&lt;p&gt;이전 포스팅 &lt;a href=&quot;https://sungjk.github.io/2018/03/11/convnet-1.html&quot;&gt;Convolutional Neural Network - 1&lt;/a&gt;에 이어서 케라스에서 제공하는 MNIST를 이용해서 각각 다층 퍼셉트론 &lt;em&gt;Multilayer perceptron&lt;/em&gt;, 컨볼루션 신경망 &lt;em&gt;Convolutional Neural Network&lt;/em&gt; 깊은 컨볼루션 신경망 &lt;em&gt;Deep Convolutional Neural Network&lt;/em&gt; 모델로 구성하고 학습시켜 보겠습니다. 예제 코드는 &lt;a href=&quot;https://tykimos.github.io/2017/08/18/Image_Input_Multiclass_Classification_Model_Recipe/&quot;&gt;블록과 함께 하는 파이썬 딥러닝 케라스&lt;/a&gt; 을 바탕으로 작성하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;데이터-전처리&quot;&gt;데이터 전처리&lt;/h1&gt;

&lt;h3 id=&quot;학습-데이터-불러오기&quot;&gt;학습 데이터 불러오기&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(60000, width * height).astype('float32') / 255.0
x_test = x_test.reshape(10000, width * height).astype('float32') / 255.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;케라스에서 load_data 함수는 해당 데이터를 무작위로 섞고, 학습에 사용할 데이터와 테스트에 사용할 데이터를 제공합니다. x_train은 60,000개의 행으로 구성되고 width*height 개의 값을 가지도록 설정하면, 입력 계층에는 60,000개의 데이터가 이미지의 각 픽셀에 해당하는 총 width*height 개의 뉴런에 대한 뉴런이 있는 것이고, 각 픽셀은 MNIST 이미지 중 하나라고 생각하면 됩니다. 그리고 60000*(width*height) 형태로 변환된 행렬을 float32 타입으로 정규화하고 255로 나누는데, 이는 케라스에서 데이터를 0에서 1 사이의 값으로 구동할 때 최적의 성능을 보입니다. 따라서 현재 0~255 사이의 값으로 이루어진 값을 0~1 사이의 값으로 바꿔줍니다(각 픽셀의 강도를 최대 강도 값인 255로 나눔).&lt;/p&gt;

&lt;h3 id=&quot;학습-데이터에서-검증-데이터-분리하기&quot;&gt;학습 데이터에서 검증 데이터 분리하기&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x_val = x_train[50000:]
y_val = y_train[50000:]
x_train = x_train[:50000]
y_train = y_train[:50000]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞에서 불러온 학습 데이터를 다시 50,000개의 학습 데이터와 검증에 사용할 데이터 10,000개로 분리합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;모델-구성하기&quot;&gt;모델 구성하기&lt;/h1&gt;

&lt;h3 id=&quot;multilayer-perceptron&quot;&gt;Multilayer perceptron&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'softmax'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;딥러닝이란 퍼셉트론 위에 숨겨진 퍼셉트론 층을 차곡차곡 쌓은 형태입니다. 이 층들은 케라스에서 Sequential 을 통해 쉽게 구현할 수 있습니다. Sequential로 모델을 선언해 놓고, model.add라는 라인을 추가하면 새로운 층이 만들어집니다. 데이터에서 input_dim 개의 값을 받아 은닉층의 256개 노드로 보내겠다는 뜻인데, 여기서는 입력층을 따로 만들지 않고 첫 번째 Dense가 은닉층+입력층 역할을 겸하도록 설정합니다. 은닉층의 각 노드는 input_dim 개의 입력 값으로부터 임의의 가중치를 가지고 각 노드로 전송되어 활성화 함수를 거치고, 활성화 함수를 거친 결과 값이 출력층으로 전달됩니다.&lt;/p&gt;

&lt;h3 id=&quot;convolutional-neural-network&quot;&gt;Convolutional Neural Network&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;행&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;색상&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;또는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;흑백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'softmax'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CNN에서도 마찬가지로 먼저 층을 쌓기 위해 Sequential을 호출합니다. 두 번째 줄의 코드는 32개의 차원을 갖고 각 필터(컨볼루션 필터)의 크기가 3 x 3 인 Convolutional layer를 추가하는 것인데, width x height 이미지에 3 x 3 Convolution을 적용해 32개(차원)의 출력 채널을 만드는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/cnn5.jpg&quot; alt=&quot;cnn5&quot; title=&quot;cnn5&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://kr.mathworks.com/discovery/convolutional-neural-network.html&quot; target=&quot;\_blank&quot;&gt;Dropout&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;Convolutional Layer에서 구한 특징 맵 &lt;em&gt;Feature map&lt;/em&gt; 을 하나의 출력 값으로 결합하기 위해 Pooling Layer를 추가합니다. 여기서는 일반적으로 사용되는 MaxPooling을 2 x 2 크기로 적용하였습니다.&lt;/p&gt;

&lt;p&gt;이제 풀링된 Pooled feature를 다시 앞에서 만들었던 기본 층(Dense)에 연결해야 합니다. Convolutional layer나 Pooling layer은 주어진 이미지를 2차원 배열로 다루기 때문에 이를 1차원으로 바꿔주는 Flatten 함수를 적용하여 RELU 계층을 보냅니다.&lt;/p&gt;

&lt;h3 id=&quot;deep-convolutional-neural-network&quot;&gt;Deep Convolutional Neural Network&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'softmax'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deep CNN에서는 계층의 필터 수를 32에서 64로 증가시켰습니다. Deep layer의 필터 수를 늘리는 것은 딥러닝에서 사용하는 일반적인 기술입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/dropout.png&quot; alt=&quot;dropout&quot; title=&quot;dropout&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://cambridgespark.com/content/tutorials/convolutional-neural-networks-with-keras/index.html&quot; target=&quot;\_blank&quot;&gt;Dropout&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;노드가 많아지거나 층이 많아진다고 해서 학습이 무조건 좋아지는 것이 아니라는 점을 과적합을 통해 알 수 있습니다. 이를 효과적으로 피해가는 방법이 드롭아웃(Dropout) 기법인데, 은닉층에 배치된 노드 중 일부를 비활성화 시킨다고 보면 됩니다. 이렇게 랜덤하게 노드를 비활성화시켜서 학습 데이터에 지나치게 치우쳐서 학습되는 과적합을 방지할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;model-compile&quot;&gt;Model compile&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모델을 컴파일 할 때 어떤 오차 함수, 최적화 방법 그리고 metrics 함수를 지정해 줍니다. 먼저, 오차함수에는 평균 제곱 오차 계열과 교차 엔트로피 계열이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;평균 제곱 오차(&lt;em&gt;Mean squared error&lt;/em&gt;): 수렴하기까지 속도가 많이 걸린다.&lt;/li&gt;
  &lt;li&gt;교차 엔트로피(&lt;em&gt;Cross entropy&lt;/em&gt;): 출력 값에 로그를 취해서, 오차가 커지면 수렴 속도가 빨라지고 오차가 작아지면 속도가 감소한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;metrics 함수는 모델이 컴파일될 때 모델 수행 결과를 나타내게끔 설정하는 부분입니다. 정확도를 측정하기 위해 사용되는 테스트 샘플을 학습 과정에서 제외시킴으로써 과적합 문제(over fitting, 특정 데이터에서는 잘 작동하나 다른 데이터에서는 잘 작동하지 않는 문제)를 방지하는 기능을 담고 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;모델-학습하기&quot;&gt;모델 학습하기&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hist = model.fit(x_train, y_train, epochs=30, batch_size=32, validation_data=(x_val, y_val))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;학습과정-살펴보기&quot;&gt;학습과정 살펴보기&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%matplotlib inline
import matplotlib.pyplot as plt

fig, loss_ax = plt.subplots()

acc_ax = loss_ax.twinx()

loss_ax.plot(hist.history['loss'], 'y', label='train loss')
loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')
loss_ax.set_ylim([0.0, 0.5])

acc_ax.plot(hist.history['acc'], 'b', label='train acc')
acc_ax.plot(hist.history['val_acc'], 'g', label='val acc')
acc_ax.set_ylim([0.8, 1.0])

loss_ax.set_xlabel('epoch')
loss_ax.set_ylabel('loss')
acc_ax.set_ylabel('accuray')

loss_ax.legend(loc='upper left')
acc_ax.legend(loc='lower left')

plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/multilayer_perceptron.png&quot; alt=&quot;multilayer_perceptron&quot; title=&quot;multilayer_perceptron&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Multilayer perceptron&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/convolutional.png&quot; alt=&quot;convolutional&quot; title=&quot;convolutional&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Convolutional Neural Network&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/deep_convolutional.png&quot; alt=&quot;deep_convolutional&quot; title=&quot;deep_convolutional&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Deep Convolutional Neural Network&lt;/center&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;모델-평가하기&quot;&gt;모델 평가하기&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;loss_and_metrics = model.evaluate(x_test, y_test, batch_size=32)
print('## evaluation loss and_metrics ##')
print(loss_and_metrics)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/multilayer_perceptron2.png&quot; alt=&quot;multilayer_perceptron2&quot; title=&quot;multilayer_perceptron2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Multilayer perceptron&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/convolutional2.png&quot; alt=&quot;convolutional2&quot; title=&quot;convolutional2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Convolutional Neural Network&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/deep_convolutional2.png&quot; alt=&quot;deep_convolutional2&quot; title=&quot;deep_convolutional2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Deep Convolutional Neural Network&lt;/center&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;모델-사용하기&quot;&gt;모델 사용하기&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yhat_test = model.predict(x_test, batch_size=32)

%matplotlib inline
import matplotlib.pyplot as plt

plt_row = 5
plt_col = 5

plt.rcParams[&quot;figure.figsize&quot;] = (10,10)

f, axarr = plt.subplots(plt_row, plt_col)

cnt = 0
i = 0

while cnt &amp;lt; (plt_row*plt_col):

    if np.argmax(y_test[i]) == np.argmax(yhat_test[i]):
        i += 1
        continue

    sub_plt = axarr[cnt/plt_row, cnt%plt_col]
    sub_plt.axis('off')
    sub_plt.imshow(x_test[i].reshape(width, height))
    sub_plt_title = 'R: ' + str(np.argmax(y_test[i])) + ' P: ' + str(np.argmax(yhat_test[i]))
    sub_plt.set_title(sub_plt_title)

    i += 1    
    cnt += 1

plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/multilayer_perceptron3.png&quot; alt=&quot;multilayer_perceptron3&quot; title=&quot;multilayer_perceptron3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Multilayer perceptron&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/convolutional3.png&quot; alt=&quot;convolutional3&quot; title=&quot;convolutional3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Convolutional Neural Network&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/deep_convolutional3.png&quot; alt=&quot;deep_convolutional3&quot; title=&quot;deep_convolutional3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Deep Convolutional Neural Network&lt;/center&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tykimos.github.io/2017/08/18/Image_Input_Multiclass_Classification_Model_Recipe/&quot;&gt;블록과 함께 하는 파이썬 딥러닝 케라스&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PacktPublishing/Deep-Learning-with-Keras&quot;&gt;Deep-Learning-with-Keras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/03/11/convnet-1.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/03/11/convnet-1.html"/>
        <title>Convolutional Neural Network - 1</title>
        <updated>2018-03-11T00:00:00+00:00</updated>
        <author>
          <name></name>
          <email></email>
        </author>
        <content type="html">&lt;h1 id=&quot;1-convolutional-neural-network&quot;&gt;1. Convolutional Neural Network&lt;/h1&gt;
&lt;p&gt;컨벌루션 신경망(&lt;em&gt;Convolutional neural network&lt;/em&gt;, 이하 CNN)은 뇌의 시각 피질이 이미지를 처리하고 인식하는 원리를 차용한 신경망입니다. CNN은 1980~90년대에 개발된 오래된 기술이지만, 지금은 컴퓨터 비전 분야에서 빼놓을 수 없을 정도로 많이 쓰입니다.&lt;/p&gt;

&lt;p&gt;기본적으로 영상 인식은 &lt;strong&gt;분류&lt;/strong&gt; 문제에 해당합니다. 예를 들어, 사진을 보고 개인지 고양이인지 인식하는 문제는 해당 사진을 개 와 고양이 중 어느 범주로 분류할 지와 같은 문제입니다. 글자를 인식하는 문제도 마찬가지입니다. 그래서 영상 인식에 사용되는 CNN의 출력층은 다범주 분류(&lt;em&gt;Multiclass classification&lt;/em&gt;) 신경망으로 구성하는게 일반적입니다.&lt;/p&gt;

&lt;p&gt;CNN의 특징 추출 신경망 &lt;em&gt;Feature extraction&lt;/em&gt; 은 컨볼루션 계층 &lt;em&gt;Convolutional layer&lt;/em&gt; 과 풀링 계층 &lt;em&gt;Pooling&lt;/em&gt; 을 차례로 쌓은 형태로 되어 있습니다. 컨벌루션 계층은 이름 그대로 &lt;strong&gt;컨볼루션 연산을 통해 입력 이미지를 변환하는 역할&lt;/strong&gt; 을 합니다. 일종의 디지털 필터들을 모아 놓은 계층이라고 이해하면 됩니다. 풀링 계층은 &lt;strong&gt;주위의 픽셀을 묶어서 하나의 대표 픽셀로 변환합니다.&lt;/strong&gt; 즉, 풀링 계층은 이미지의 차원을 축소하는 역할을 합니다. 학습 과정을 통해 분류 신경망 뿐만 아니라 특징 추출 신경망의 가중치들도 학습되는 구조입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-example&quot;&gt;2. Example&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/cnn2.png&quot; alt=&quot;cnn2&quot; title=&quot;cnn2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Object Localization and Detection&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/cnn3.png&quot; alt=&quot;cnn3&quot; title=&quot;cnn3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://www.researchgate.net/figure/Heatmap-for-binary-and-multiclass-classification-of-colon-cancer-using-both-manual_fig6_317301118&quot; target=&quot;\_blank&quot;&gt;Large scale tissue histopathology&lt;/a&gt;&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cs.stanford.edu/people/karpathy/convnetjs/demo/cifar10.html&quot;&gt;ConvNetJS CIFAR-10 demo&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kpzhang93.github.io/MTCNN_face_detection_alignment/&quot;&gt;Joint Face Detection and Alignment using Multi-task Cascaded Convolutional Networks&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/ilenze-com/object-detection-using-deep-learning-for-advanced-users-part-1-183bbbb08b19&quot;&gt;Object Detection using Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-convolutional-layer&quot;&gt;3. Convolutional Layer&lt;/h1&gt;
&lt;p&gt;컨벌루션 계층은 &lt;strong&gt;입력 이미지에서 고유한 특징을 부각시킨 이미지를 새로 만들어내는 역할&lt;/strong&gt; 을 합니다. 이러한 이미지를 '특징 맵 &lt;em&gt;feature map&lt;/em&gt;' 이라고 부릅니다. 컨벌루션 계층은 일반적인 신경망의 계층과는 구조와 작동 방식이 많이 다릅니다. 이 계층의 노드들은 연결 가중치와 가중합 등 신경망의 일반적인 개념을 사용하지 않습니다. 대신 입력 이미지를 다른 이미지로 변환하는 필터들이 들어 있습니다. 여기서는 이 필터를 ‘컨벌루션 필터’라고 부르겠습니다. 컨벌루션 필터로 입력 이미지를 처리하면 feature map 을 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 컨벌루션 필터에 관해 구체적으로 알아보겠습니다. 컨벌루션 계층에서 쓰이는 필터의 정체는 2차원 행렬입니다. 보통 5x5 행렬이나 3x3 행렬이 주로 쓰이는데 요즘엔 1x1 행렬로 된 컨벌루션 필터를 사용하는 경우도 있습니다. 앞에서 이미 설명했듯이 ConvNet에서 필터 행렬의 값은 신경망의 학습 과정을 통해 결정됩니다. 즉 이 필터 행렬의 값은 학습을 통해 계속 바뀝니다. 일반 신경망에서 학습을 통해 노드의 연결 가중치를 갱신하는 것과 비슷합니다. 컨벌루션 계층은 입력 이미지와 컨벌루션 필터를 연산해 feature map 을 얻어 냅니다. 컨벌루션 계층에서 추출할 feature는 컨벌루션 필터에 학습되어 있습니다. 즉 어떤 컨벌루션 필터를 사용하느냐에 따라 컨벌루션 계층에서 추출해내는 특징이 결정됩니다.&lt;/p&gt;

&lt;p&gt;컨벌루션 연산은 2차원 상에서 이뤄지는 연산이라 글로 설명하기는 어렵지만, 개념과 계산 과정은 생각보다 간단합니다. 다음 그림은 컨벌루션 계층이 어떤 식으로 작동하는지 보여주고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/cnn1.gif&quot; alt=&quot;cnn1&quot; title=&quot;cnn1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution&quot; target=&quot;\_blank&quot;&gt;convolution operation&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;컨벌루션 필터로 처리된 feature map은 활성 함수를 거쳐 최종 출력됩니다. 컨벌루션 계층의 활성함수는 기존 신경망에서 사용되는 활성함수와 다르지 않습니다.&lt;/p&gt;

&lt;h3 id=&quot;receptive-field&quot;&gt;Receptive field&lt;/h3&gt;
&lt;p&gt;공간 정보를 보존하려면 각 이미지를 픽셀 값을 갖는 행렬로 표시하는 것이 편합니다. 지역적인 구조를 인코딩하는 방법은 &lt;strong&gt;인접한 입력 뉴런의 부분 행렬들을 다음 계층에 있는 한 개의 은닉 뉴런으로 연결하는 것&lt;/strong&gt; 입니다. 이 한 개의 은닉 뉴런이 하나의 Receptive field를 나타냅니다. 이 작업이 Convolution입니다.&lt;/p&gt;

&lt;p&gt;당연히 부분 행렬이 겹치게 함으로써 더 많은 정보를 인코딩할 수 있습니다. 예를 들어, 한 부분 행렬의 크기가 5x5이고 이 부분 행렬을 28x28 픽셀의 MNIST 이미지에 적용한다고 가정해봅시다. 그러면 다음 은닉 계층에서 23x23 개의 Receptive field 뉴런을 생성할 수 있고, 이미지 끝 부분에 도달하기 전까지 부분 매트릭스로 23개의 위치만큼만 이동하는 것이 가능합니다. Keras에서 각 부분 행렬의 크기는 &lt;em&gt;stride length&lt;/em&gt; 라고 부르며, 이 값은 신경망을 만들 때 세부 조정할 수 있는 하이퍼파라미터 &lt;em&gt;hyperparameter&lt;/em&gt; 입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pooling-layer&quot;&gt;Pooling Layer&lt;/h1&gt;
&lt;p&gt;풀링 계층은 이미지의 크기를 줄이는 역할을 합니다. 구체적으로 풀링 계층은 &lt;strong&gt;입력 이미지에서 특정 영역에 있는 픽셀들을 묶어서 하나의 대표 값으로 축소&lt;/strong&gt; 합니다. 풀링은 기존의 이미지 처리에서도 많이 쓰이는 전형적인 기법입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/02/24/cnn4.gif&quot; alt=&quot;cnn4&quot; title=&quot;cnn4&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Stride&lt;/center&gt;

&lt;p&gt;풀링 계층의 연산을 위해서는 입력 이미지에서 풀링할 픽셀을 어떻게 선택할 지와 이 픽셀의 대표값을 어떻게 결정할 것인지를 정해야 합니다. 픽셀들을 몇 개씩 묶을 지는 다루는 문제에 따라 다른데, 보통은 정방 행렬 &lt;em&gt;square matrix&lt;/em&gt; 행태로 픽셀들을 선택합니다. 선택한 픽셀들로부터 하나의 대표 값을 계산하는 연산으로는 보통 평균값이나 최대값을 많이 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/04/27/pooling-layer.jpg&quot; alt=&quot;pooling-layer&quot; title=&quot;pooling-layer&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사실 수학적으로 풀링은 일종의 컨벌루션 연산입니다. 컨벌루션 계층과 달리 컨벌루션 필터가 고정되어 있고, 이 필터와 원본 이미지를 컨벌루션하는 영역이 겹치지 않는다는 정도만 다릅니다.&lt;/p&gt;

&lt;p&gt;풀링 계층은 입력 이미지에서 인식 대상이 한 쪽으로 치우쳐 있거나 돌아가 있어도 어느 정도 보상해주는 역할을 합니다. 예를 들어 고양이가 중앙에서 벗어나 있는 사진을 입력해도 풀링 계층에서 치우침을 어느 정도 보상하기 때문에 제대로 인식하는 데 도움이 됩니다. 또한 풀링 계층은 이미지의 크기를 줄여 주어, 계산량을 줄이고 과적합을 방지하는 데도 도움이 됩니다.&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&quot;https://sungjk.github.io/2018/03/11/convnet-2.html&quot;&gt;Convolutional Neural Network - 2&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tykimos.github.io/2017/08/18/Image_Input_Multiclass_Classification_Model_Recipe/&quot;&gt;블록과 함께 하는 파이썬 딥러닝 케라스&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution&quot;&gt;Deep Learning - Stanford University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PacktPublishing/Deep-Learning-with-Keras&quot;&gt;Deep-Learning-with-Keras&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leonardoaraujosantos.gitbooks.io/artificial-inteligence/content/deep_learning.html&quot;&gt;leonardoaraujosantosArtificial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  
      
      <entry>
        <id>https://sungjk.github.io/2018/01/06/functional-scala-5.html</id>
        <link type="text/html" rel="alternate" href="https://sungjk.github.io/2018/01/06/functional-scala-5.html"/>
        <title>Functional Programming in Scala 5</title>
        <updated>2018-01-06T00:00:00+00:00</updated>
        <author>
          <name>김성중</name>
          <email>ajax0615@gmail.com</email>
        </author>
        <content type="html">&lt;h1 id=&quot;1-부수-효과를-이용한-난수-발생&quot;&gt;1. 부수 효과를 이용한 난수 발생&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 현재 시스템 시간을 seed로 해서 새 난수 발생기를 만든다.
scala&amp;gt; val rng = new scala.util.Random

scala&amp;gt; rng.nextDouble
res1: Double = 0.9867076608154569

scala&amp;gt; rng.nextDouble
res2: Double = 0.8455696498024141

scala&amp;gt; rng.nextInt
res3: Int = -456352452

scala&amp;gt; rng.nextInt(10)  // 0 이상 9 이하의 정수 난수를 얻는다.
res4: Int = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;scala.util.Random 안에서 일어나는 일을 알지 못한다고 해도, 난수 발생기(random number generator, RNG) 객체 rng에는 메서드 호출 때마다 갱신되는 어떤 내부 상태가 존재한다고 가정할 수 있다. 그렇지 않다면 nextInt나 nextDouble을 호출할 때마다 같은 값을 얻게 될 것이기 때문이다. &lt;strong&gt;상태 갱신은 부수 효과로서 수행되므로 이 메서드들은 참조에 투명하지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;육면체 주사위 굴림으로 &lt;strong&gt;반드시&lt;/strong&gt; 1 이상 6 이하의 정수를 돌려주는 메서드를 만들고 싶지만, 아래와 같이 작성하면 실제로 0 이상 5 이하의 값을 받게 된다. 이 메서드는 명세대로 작동하지 않지만, 그래도 여섯 번 중 다섯 번은 검사에 통과한다. 그리고 검사에 실패했을 때에는 실패 상황을 신뢰성 있게 재현할 수 있다면 이상적이다. 여기서 중요한 것은 이 구체적인 예가 아니라 전반적인 개념임을 주의하기 바란다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def rollDie: Int = {
  val rng = new scala.util.Random
  rng.nextInt(6)  // 0 이상 5 이하의 난수를 돌려준다.
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한 가지 해결책은 난수 발생기를 인수로 전달하게 하는 것이다. 그러면 실패한 검사를 재현해야 할 때, 당시에 쓰인 것과 동일한 난수 발생기를 전달하기만 하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def rollDie(rng: scala.util.Random): Int = rng.nextInt(6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 또한 문제점이 있는데, '동일한' 발생기는 seed값과 기타 내부 상태가 동일해야 한다. &lt;strong&gt;상태가 동일하다는 것은 발생기를 만든 후 그 메서드들이 원래의 발생기의 메서드 호출 횟수와 동일한 횟수로 호출되었음을 뜻한다.&lt;/strong&gt; 그러나 이를 보장하기는 아주 어렵다. 예를 들어 nextInt를 호출할 때마다 난수 발생기의 이전 상태가 파괴되기 때문이다.&lt;/p&gt;

&lt;h1 id=&quot;2-순수-함수적-난수-발생&quot;&gt;2. 순수 함수적 난수 발생&lt;/h1&gt;
&lt;p&gt;참조 투명성을 되찾는 관건은 상태 갱신을 &lt;strong&gt;명시적으로&lt;/strong&gt; 드러내는 것이다. 즉, &lt;strong&gt;상태를 부수 효과로서 갱신하지 말고, 그냥 새 상태를 발생한 난수와 함께 돌려주면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;trait RNG {
  def nextInt: (Int, RNG)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 인터페이스는 난수와 새 상태를 돌려주고 기존 상태는 수정하지 않는다. 이는 다음 상태를 &lt;strong&gt;계산&lt;/strong&gt; 하는 관심사와 새 상태를 프로그램 나머지 부분에 &lt;strong&gt;알려&lt;/strong&gt; 주는 관심사를 분리하는 것에 해당한다. 새 상태로 무엇을 할 것인지는 전적으로 nextInt 호출자의 마음이다. 그래도, 이 API의 사용자가 난수 발생기 자체의 구현에 대해서는 아무것도 모른다는 점에서, 상태는 여전히 발생기 안에 &lt;strong&gt;캡슐화&lt;/strong&gt; 되어 있음을 주목하기 바란다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;case class SimpleRNG(seed: Long) extends RNG {
  def nextInt: (Int, RNG) = {
    val newSeed = (seed * 0x5DEECE66DL + 0xBL) &amp;amp; 0xFFFFFFFFFFFFL
    val nextRNG = SimpleRNG(newSeed)
    val n = (newSeed &amp;gt;&amp;gt;&amp;gt; 16).toInt  // 빈자리를 0으로 채우는 Right Shift
    (n, nextRNG)
  }
}

scala&amp;gt; val rng = SimpleRNG(42)
rng: SimpleRNG = SimpleRNG(42)

scala&amp;gt; val (n1, rng2) = rng.nextInt
n1: Int = 16159453
rng2: RNG = SimpleRNG(1059025964525)

scala&amp;gt; val (n2, rng3) = rng.nextInt
n2: Int = -1281479697
rng3: RNG = SimpleRNG(2352748563841)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 예를 여러 번 되풀이해서 실행해도 항상 같은 값들이 나온다. 다시 말해서 이 API는 순수하다.&lt;/p&gt;

&lt;h1 id=&quot;3-상태-있는-api를-순수하게-만들기&quot;&gt;3. 상태 있는 API를 순수하게 만들기&lt;/h1&gt;
&lt;p&gt;겉보기에 상태 있는 API를 순수하게 만드는 문제와 그 해법(API가 실제로 뭔가를 변이하는 대신 다음 상태를 &lt;strong&gt;계산&lt;/strong&gt; 하게 하는 것)이 난수 발생에만 국한된 것은 아니다. 이 문제는 자주 등장하며, 항상 동일한 방식으로 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Foo {
  private var s: FooState = ...
  def bar: Bar
  def baz: Int
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bar와 baz가 각각 s를 변이한다고 하자. 한 상태에서 다음 상태로의 전이를 명시적으로 드러내는 과정을 기계적으로 진행해서 이 API를 순수 함수적 API로 변환할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;trait Foo {
  def bar: (Bar, Foo)
  def baz: (Int, Foo)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 패턴을 적용한다는 것은 계산된 다음 상태를 프로그램의 나머지 부분에 전달하는 책임을 호출자에게 지우는 것에 해당한다. 앞에서 본 순수 RNG 인터페이스에서 만일 이전의 RNG를 재사용한다면 이전에 발생한 것과 같은 값을 낸다. 예를 들어 다음 코드에서 i1과 i2는 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def randomPair(rng: RNG): (Int, Int) = {
  val (i1, _) = rng.nextInt
  val (i2, _) = rng.nextInt
  (i1, i2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서로 다른 두 수를 만들려면, 첫 nextInt 호출이 돌려준 RNG를 이용해서 둘째 Int를 발생해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def randomPair(rng: RNG): ((Int, Int), RNG) = {
  val (i1, rng2) = rng.nextInt
  val (i2, rng3) = rng2.nextInt
  ((i1, i2), rng3)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4-상태-동작을-위한-더-나은-api&quot;&gt;4. 상태 동작을 위한 더 나은 API&lt;/h1&gt;
&lt;p&gt;앞의 구현들을 보면 모든 함수가 어떤 타입 A에 대해 RNG =&amp;gt; (A, RNG) 형태의 타입을 사용한다는 공통의 패턴을 발견할 수 있다. 한 RNG 상태를 다른 RNG 상태로 변환한다는 점에서, 이런 종류의 함수를 &lt;strong&gt;상태 동작&lt;/strong&gt;(state action) 또는 &lt;strong&gt;상태 전이&lt;/strong&gt;(state transition)라고 부른다. 이 상태 동작들은 고차 함수인 &lt;strong&gt;combinator&lt;/strong&gt; 를 이용해서 조합할 수 있다. 상태를 호출자가 직접 전달하는 것은 지루하고 반복적이므로, 조합기가 자동으로 한 동작에서 다른 동작으로 상태를 넘겨주게 하는 것이 바람직하다.&lt;/p&gt;

&lt;p&gt;먼저 RNG 상태 동작 자료 형식에 대한 alias를 만들어 두자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Rand[+A] = RNG =&amp;gt; (A, RNG)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rand[A] 형식의 값을 &quot;무작위로 생성(발생)된 A&quot;라고 생각해도 되지만, 아주 정확한 것은 아니다. 이것은 하나의 상태 동작(특정 RNG)에 의존하며, 그것을 이용해서 A를 생성하고, RNG를 다른 동작이 이후에 사용할 수 있는 새로운 상태로 전이하는 하나의 프로그램이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val int: Rand[Int] = _.nextInt

// 간단한 형태의 RNG 상태 전이
def unit[A](a: A): Rand[A] = rng =&amp;gt; (a, rng)

// 상태 동작의 출력을 변환하되 상태 자체는 수정하지 않는 map
def map[A,B](s: Rand[A])(f: A =&amp;gt; B): Rand[B] =
  rng =&amp;gt; {
    val (a, rng2) = s(rng)
    (f(a), rng2)
  }

// 0 이상, Int.MaxValue 이하의 난수 정수를 생성하는 함수
def nonNegativeInt(rng: RNG): (Int, RNG) = {
  val (i, r) = rng.nextInt
  (if (i &amp;lt; 0) -(i + 1) else i, r)
}

// 0보다 크거나 같고 2로 나누어지는 Int 구하기
def nonNegativeEven: Rand[Int] = map(nonNegativeInt)(i =&amp;gt; i - i % 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;41-상태-동작들의-조합&quot;&gt;4.1 상태 동작들의 조합&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 두 상태 동작 ra 및 rbb와 이들의 결과를 조합하는 함수 f를 받고 두 동작을 조합한 새 동작을 돌려준다.
def map2[A,B,C](ra: Rand[A], rb: Rand[B])(f: (A, B) =&amp;gt; C): Rand[C] =
  rng =&amp;gt; {
    val (a, r1) = ra(rng)
    val (b, r2) = rb(rng)
    (f(a, b), r2)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;map2를 한 번만 작성해 두면 이를 이용해서 임의의 RNG 상태 동작들을 조합할 수 있다. 에를 들어 A 타입의 값을 만드는 액션과 B 타입의 값을 만드는 액션이 있다면, 이 둘을 조합해서 A와 B의 쌍을 만드는 액션을 얻을 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def both[A,B](ra: Rand[A], rb: Rand[B]): Rand[(A,B)] =
  map2(ra, rb)((_, _))

val randIntDouble: Rand[(Int, Double)] = both(int, double)
val randDoubleInt: Rand[(Double, Int)] = both(double, int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;42-내포된-상태-동작&quot;&gt;4.2 내포된 상태 동작&lt;/h3&gt;
&lt;p&gt;다음 코드는 nonNegativeInt가 32비트 정수를 벗어나지 않는 n의 최대 배수보다 큰 수를 발생했다면 더 작은 수가 나오길 바라면서 &lt;strong&gt;재시도&lt;/strong&gt; 하는 구현이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def nonNegativeLessThan(n: Int): Rand[Int] =
  map(nonNegativeInt) { i =&amp;gt;
    val mod = i % n
    if (i + (n-1) - mod &amp;gt;= 0) mod else nonNegativeLessThan(n)(???)
  }

&amp;lt;console&amp;gt; error: type mismatch;
 found   : (Int, RNG)
 required: Int
           if (i + (n-1) - mod &amp;gt;= 0) mod else nonNegativeLessThan(n)(???)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드에서 nonNegativeLessThan(n)의 형식이 그 자리에 맞지 않는다는 문제가 있다. 이 함수는 Rand[Int]를 돌려주어야 하며, 이는 RNG 하나를 인수로 받는 &lt;strong&gt;함수&lt;/strong&gt; 이다. 그런데 지금은 그런 함수가 없다. 이를 해결하려면 nonNegativeInt가 돌려준 RNG가 nonNegativeLessThan에 대한 재귀적 호출에 전달되도록 어떤 식으로든 호출들을 연결해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// map을 사용하지 않고 명시적으로 전달
def nonNegativeLessThan(n: Int): Rand[Int] = { rng =&amp;gt;
  val (i, rng2) = nonNegativeInt(rng)
  val mod = i % n
  if (i + (n-1) - mod &amp;gt;= 0)
    (mod, rng2)
  else nonNegativeLessThan(n)(rng2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러한 전달을 처리해 주는 콤비네이터 flatMap을 이용하면 Rand[A]로 무작위 A를 발생하고 그 A의 값에 기초해서 Rand[B]를 선택할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def flatMap[A,B](f: Rand[A])(g: A =&amp;gt; Rand[B]): Rand[B] =
  rng =&amp;gt; {
    val (a, r1) = f(rng)
    g(a)(r1)
  }

// flatMap으로 재구현한 map
def _map[A,B](s: Rand[A])(f: A =&amp;gt; B): Rand[B] =
  flatMap(s)(a =&amp;gt; unit(f(a)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5-일반적-상태-동작-자료-형식&quot;&gt;5. 일반적 상태 동작 자료 형식&lt;/h1&gt;
&lt;p&gt;unit, map, map2, flatMap 등은 상태 동작에 대해 작용하는 범용 함수들(general-purpose functions)로, 상태의 구체적인 종류는 신경 쓰지 않는다. 이 함수에 다음과 같은 일반적인 시그니처를 부여할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def map[S,A,B](a: S =&amp;gt; (A,S))(f: A =&amp;gt; B): S =&amp;gt; (B,S)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 임의의 상태를 처리할 수 있는, Rand보다 더 일반적인 타입을 생각해 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type State[S,+A] = S =&amp;gt; (A,S)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 State는 &lt;strong&gt;어떤 상태를 유지하는 계산&lt;/strong&gt;, 즉 &lt;strong&gt;state action&lt;/strong&gt;(또는 &lt;strong&gt;state transition&lt;/strong&gt;)를 나타낸다. 심지어 &lt;strong&gt;명령문&lt;/strong&gt; 을 대표한다고 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// State를 함수로 감싼 독립적인 클래스 형태로 만들기
case class State[S,+A](run: S =&amp;gt; (A,S))

// Rand를 State의 type alias로 만들
type Rand[A] = State[RNG, A]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;6-순수-함수적-명령식-프로그래밍&quot;&gt;6. 순수 함수적 명령식 프로그래밍&lt;/h1&gt;
&lt;p&gt;이전 절들에서 특정한 패턴을 따르는 함수들을 작성했다. State action을 실행하고, 그 결과를 val에 배정하고, 그 val을 사용하는 또 다른 State action을 실행하고, 그 결과를 또 다른 val에 배정하는 등으로 이어졌다. 그런데 그런 방식은 &lt;strong&gt;명령식&lt;/strong&gt; 프로그래밍(imperative programming)과 아주 비슷하다.&lt;/p&gt;

&lt;p&gt;명령식 프로그래밍 패러다임에서 하나의 프로그램은 일련의 명령문(statement)들로 이루어지며, 각 명령문은 프로그램의 상태를 수정할 수 있다. 앞에서 한 것이 바로 그런 방식이다. 단, 실제로는 명령문이 아니라 상태 동작 State이고, 이것은 사실 함수이다. 함수로서의 State action은 그냥 인수를 받음으로써 현재 프로그램 상태를 읽고, 그냥 값을 돌려줌으로써 프로그램 상태를 수정한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;명령식 프로그래밍과 함수형 프로그래밍은 상극이 아닌가??&lt;/strong&gt; &lt;br /&gt;
절대 아니다. 함수형 프로그래밍은 단지 부수 효과가 없는 프로그래밍이다. 명령식 프로그래밍은 일부 프로그램 상태를 수정하는 명령문들로 프로그램을 만드는 것이고, 앞에서 보았듯이 부수 효과 없이 상태를 유지,관리하는 것도 전적으로 타당하다.&lt;br /&gt;
함수형 프로그래밍은 명령식 프로그램의 작성을 아주 잘 지원한다. 게다가 참조 투명성 덕분에 그런 프로그램을 등식적으로 추론할 수 있다는 추가적인 장점도 있다. 이는 제2부에서 자세히 다룬다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;map이나 map2 같은 콤비네이터를 사용해 한 명령문에서 다음 명령문으로의 상태 전이를 처리하는 flatMap까지 작성했고, 이 과정에서 명령식 프로그램의 성격이 많이 사라졌다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val ns: Rand[List[Int]] =
  int.flatMap(x =&amp;gt;  // int는 하나의 정수 난수를 발생하는 Rand[Int] 타입의 값
    int.flatMap(y =&amp;gt;
      ints(x).map(xs =&amp;gt; // ints(x)는 길이가 x인 목록
        xs.map(_ % y))))  // 목록의 모든 요소를 y로 나눈 나머지로 치환

// for-comprehension을 이용해서 명령식 스타일을 복구
for {
  x &amp;lt;- int
  y &amp;lt;- int
  xs &amp;lt;- ints(x)
} yield xs.map(_ % y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래쪽에 잇는 코드는 읽고 쓰기가 훨씬 쉽다. 이 코드가 어떤 상태를 유지하는 명령식 프로그램이라는 점이 코드의 형태 자체에 잘 반영되어 있기 때문이다. 그러나 이는 위쪽에 있는 코드와 &lt;strong&gt;같은 코드&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;for-comprehension을 활용해서 상태를 읽는 콤비네이터 get과 상태를 쓰는 콤비네이터 set만 있으면, 상태를 임의의 방식으로 수정하는 콤비네이터를 다음과 같이 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def modift[S](f: S =&amp;gt; S): State[S, Unit] = for {
  s &amp;lt;- get        // 현재 상태를 얻어서 s에 할당
  _ &amp;lt;- set(f(s))  // 새 상태를 s에 f를 적용한 결과로 설정
} yield ()

// 입력 상태를 전달하고 그것을 반환값으로 돌려준다.
def get[S]: State[S, S] = State(s =&amp;gt; (s, s))

// 새 상태 s를 받아서,
// 그것을 새 상태로 치환하며, 의미 있는 값 대신 ()을 돌려준다.
def set[S](s: S): State[S, Unit] = State(_ =&amp;gt; ((), s))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;get과 set과 이전에 작성한 State 콤비네이터들(unit, map, map2, flatMap)만 있으면 어떤 종류의 State machine이라고 순수 함수적 방식으로 구현할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;요약&quot;&gt;요약&lt;/h4&gt;
&lt;p&gt;상태(State)와 상태 전이(state propagation)를 다루는 아이디어는 심플하다. 상태를 인수로 받고 새 상태를 결과와 함께 돌려주는 순수 함수를 사용한다.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/functional-programming-in-scala&quot;&gt;Functional Programming in Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      </entry>
      
  

</feed>
