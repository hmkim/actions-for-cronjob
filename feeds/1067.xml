<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>오늘도 새벽코딩</title>
<link>https://nuxlear.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 20:14:02 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>nuxlear</managingEditor>
<item>
<title>[Keras] Keras와 HDF5으로 대용량 데이터 학습하기</title>
<link>https://nuxlear.tistory.com/4</link>
<description>&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;&lt;br class=&quot;Apple-interchange-newline&quot;&gt;Keras와 HDF5으로&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b style=&quot;font-size: 24pt;&quot;&gt;대용량 데이터&amp;nbsp;학습하기&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt; color: rgb(140, 140, 140);&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&quot;Keras 내 HDF5Matrix 클래스를 이용하면 된다&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;.&quot;&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br style=&quot;text-align: start;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;Keras에서 학습을 위한 데이터를 만들거나 가져올 때, numpy array로 변환해 모델에 넣어주는 것이 일반적이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;데이터셋의 크기가 컴퓨터 사양에 비해 충분히 작으면, 누구나 자신이 원하는 데이터를 numpy array로 바꾸어 넣어줄 수 있고, 이런 점이 굉장히 편리하다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;그러나 numpy array로 만드는 작업이 결국 모든 데이터를 담은 자료구조를 메모리에 올리는 행위이기 때문에,&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;내 컴퓨터 메모리 용량에 비해 데이터셋의 크기가 압도적으로 큰 경우 메모리에 데이터를 전부 올리지 못하고 MemoryError를 뱉으며 프로그램이 죽어버린다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;위 같은 경우 데이터셋을 줄이는 방법이 있을 수 있지만, 모델의 크기나 풀고 싶은 문제의 난이도에 따라 그럴 수 없는 경우도 많다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;이 때 해결 방법은 두 가지인데, Keras 에서 제공하는&amp;nbsp;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;&lt;b&gt; keras.models.Model.fit_generator()&amp;nbsp;&lt;/b&gt;&lt;/span&gt; 를 사용해서, generator 가 매 batch 마다 데이터를 생성하도록 만들어 줄 수 있다. 물론 이 생성이라는 부분은 파일로 되어 있는 데이터를 로드하는 것을 포함하기 때문에, 일정 부분만 로드해서 사용할 수 있게 된다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;만약 데이터를 내가 생성하거나, 혹은 generator 함수를 이용하는 것이 느리고 불편하다면 다른 방법이 있는데,&amp;nbsp;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;&amp;nbsp;&lt;b&gt;HDF&lt;/b&gt;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;5&amp;nbsp;&lt;/span&gt;&lt;/b&gt; 파일 포맷을 이용하는 것이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;HDF5 포맷은 대용량 데이터를 처리하기 위한 파일 형식으로, 많은 양의 데이터를 안정적으로 저장할 뿐만 아니라, Random Access 및 빠른 검색 등을 지원한다. &lt;/span&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B3%84%EC%B8%B5%EC%A0%81_%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%98%95%EC%8B%9D&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;위키&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;에 조금 더 자세한 내용이 나와 있다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;Python에서 HDF5 포맷을 다루는 방법은, 일단&amp;nbsp;&lt;b&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt; h5py&amp;nbsp;&lt;/span&gt;&lt;/b&gt; 라는 모듈을 설치해야 한다. pip이나 anaconda 등으로 쉽게 설치할 수 있다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;h5py를 이용해 새로운 데이터셋을 만드는 방법은 다음과 같다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:py;&quot;&gt;#
import numpy as np
import h5py

with h5py.File(filename, 'w') as f:

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.create_dataset('image', (1000, 32, 32, 3), dtype='float32')&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# 1000개의 32x32 RGB 이미지를 담는 데이터 공간을 생성한다. 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.create_dataset('label', (1000,), dtype='float32')&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# 1000개의 float을 담는 데이터 공간을 생성한다. 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image_set = f['image']&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# 실 데이터 공간에 접근할 변수를 할당한다. 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label_set = f['label']
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;위 코드는 filename 경로에 .hdf5 파일을 생성하고, 그 파일에 자료를 저장할 데이터셋을 생성하는 코드이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;filename 은&amp;nbsp;&lt;b&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt; &quot;&lt;/span&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt;path/to/hdf5file/name.hdf5&quot;&amp;nbsp;&lt;/span&gt;&lt;/b&gt; 형식으로 주면 된다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;데이터셋은 마치 딕셔너리와 같은데,&amp;nbsp;HDF5 파일 내부에 세부 경로를 만들고&amp;nbsp;그 경로에 주어진 데이터가 들어간다. 즉, 경로를 key로, 데이터를 value로 가지는 대용량의 딕셔너리로 봐도 된다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;데이터셋을 생성한 뒤에, 실제 저장된 파일의 인덱스에 값을 대입하는 방법은 다음과 같다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;

&lt;pre name=&quot;code&quot; class=&quot;brush:py;&quot;&gt;#
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;labels = label_set[:]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# 이미지 데이터 전체를 반환하지만, 메모리에 올리지는 않는다. 값에 접근할 때 메모리에 올린다. 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array = label_set[:50]&amp;nbsp;&amp;nbsp; # 데이터셋을 numpy array 와 비슷한 형태로 불러올 수 있다. 역시 이 명령으로 메모리에 올라가지는 않는다. 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label_set[0] = 3.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# dataset에 값을 대입할 수 있다. 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label_set[10:20] = np.arange(10.)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# 배열을 직접 대입할 수도 있다.  
&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;위와 같이 HDF5 파일의 자료는 원하는 양 만큼 잘라낸 후 numpy array 를 다루듯이 사용할 수 있다. 이 때, HDF5 파일은 실제 데이터 값에 접근하기 전까지는 메모리로 올라오지 않고, 데이터에 접근할 때도 메모리 제한 내에서 load와 close 를 반복하기 때문에 데이터 양과 무관하게 마음껏 사용할 수 있게 된다. 물론 데이터가 저장된 디스크의 File I/O 가 bottleneck 으로 작용할 수 있다는 문제가 있지만, 이 정도는 많은 데이터 양을 다루는 데에 필요한 trade-off 라 생각할 수 있다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;특히, Keras 에선 이 HDF5 파일을 쉽게 학습 데이터로 사용할 수 있게 지원해주고 있다.&amp;nbsp;&lt;b&gt;&lt;span style=&quot;background-color: rgb(234, 234, 234);&quot;&gt; keras.utils.io_utils.HDF5Matrix&amp;nbsp;&lt;/span&gt;&lt;/b&gt; 가 그것인데, 이 클래스를 이용해 HDF5 파일을 읽어오면, Keras 내에서 자동으로 처리가 되기 때문에&amp;nbsp;학습용 데이터를 넣어줄 때 별다른 처리 없이 넣어줘도 된다. 다음 예제를 보면서 이해해보자.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:py;&quot;&gt;#
from keras.utils.io_utils import HDF5Matrix

n_epoch = 1000
batch_size = 32
split_pos = 800

x_data = HDF5Matrix(filename, 'image')&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# 위에서 생성한 HDF5 파일의 image 경로의 데이터를 가져오게 된다. 
x_train = HDF5Matrix(filename, 'image', end=split_pos)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# HDF5 파일의 데이터 중 일부만 가져오는 것도 가능하다. 
x_test = HDF5Matrix(filename, 'image', start=split_pos)
y_train = HDF5Matrix(filename, 'label', end=split_pos)
y_test = HDF5Matrix(filename, 'label', start=split_pos)

# 이미 .compile() 이 된 모델이라고 가정하자
model.fit(x_train, y_train, epochs=n_epoch, batch_size=batch_size, validation_data=(x_test, y_test))&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# numpy array 를 쓰듯이 사용하면 된다. 
&lt;/pre&gt;
&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;위처럼 데이터를 파일로 저장해 두어도 HDF5포맷과 keras의 HDF5Matrix를 이용하면, 복잡한 처리 없이 대용량 데이터를 쉽게 학습할 수 있다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;학습에 필요한 데이터가 많을 때 고려해볼 만 한 방법이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(0, 0, 0);&quot;&gt;* 2018.05.17 수정 - batch_size 추가&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;span style=&quot;color: rgb(140, 140, 140); font-size: 14pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;span style=&quot;color: rgb(140, 140, 140); font-size: 14pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;span style=&quot;color: rgb(140, 140, 140); font-size: 14pt;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: rgb(140, 140, 140); font-size: 14pt;&quot;&gt;NUXLEAR]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description>
<category>Deep Learning</category>
<category>AI</category>
<category>deeplearning</category>
<category>Generator</category>
<category>h5py</category>
<category>hdf5</category>
<category>HDF5Matrix</category>
<category>Keras</category>
<category>numpy</category>
<category>TensorFlow</category>
<category>대용량</category>
<category>데이터셋</category>
<category>딥러닝</category>
<category>빅데이터</category>
<category>케라스</category>
<category>텐서플로우</category>
<author>nuxlear</author>
<guid>https://nuxlear.tistory.com/4</guid>
<comments>https://nuxlear.tistory.com/4#entry4comment</comments>
<pubDate>Thu, 17 May 2018 14:45:20 +0900</pubDate>
</item>
<item>
<title>[Keras] AutoEncoder 에서 뽑은 Z vector tensorboard 에서 보기</title>
<link>https://nuxlear.tistory.com/3</link>
<description>&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;AutoEncoder 에서 뽑은 Z vector&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;Tensorboard 에서 보기&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18pt; color: rgb(140, 140, 140);&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&quot;numpy와 Tensorflow를 통해 Tensorboard로 불러오기&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;.&quot;&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;hr&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;최근에 AutoEncoder를 Keras로 코딩하던 중 내 모델이 feature를 얼마나 잘 뽑아내는지 알아볼 필요가 생겼다.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;Keras에서 callback 중 하나인&amp;nbsp;&lt;span style=&quot;background-color: rgb(246, 246, 246);&quot;&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;&lt;b&gt;k&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: rgb(246, 246, 246);&quot;&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;eras.callbacks.Tensorboard()&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 를 사용하면 Tensorboard에서 loss 및 acc 등을 확인할 수 있는 데이터를 함수 내 인자로 지정해준 경로에 생성한다. 문제는 이 callback 함수가 Tensorboard에서 loss 및 acc 그래프 정도는 잘 보여주지만, 자동으로 Keras model이 가지고 있는 다양한 정보를 한 번에 볼 수 없다는 것이었다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;특히 나는 각 z vector 값 간의 interpolation이 자연스러운지를 확인해야 했는데, 기존에 확인하던 방법은 Test set에서 랜덤으로 두 이미지를 선택해 z vector 값 사이를 움직이도록 했었다. 다양한 이미지 간의&amp;nbsp;interpolation을 확인할 수 있었지만, 그 이미지 간의 z vector 의 차이, 즉 유사도를 확인할 수 없다는 것과 그 점 때문에 내 모델이 학습한 z vector가 이미지의 feature를 잘 뽑아냈는지를 확인할&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;수 없었다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;따라서 Tensorboard에 있는 embedding 기능을 이용하기로 했다. embedding에 대해 검색해보면 자세히 알 수 있지만, 간단히 이야기해서 현재 64 차원인 z vector의 좌표 및 거리 등 정보를 2차원 혹은 3차원과 같은 저차원으로 낮추어 데이터의 cluster나 분포를 확인할 수 있게 하는 것이 목적이다. embedding은 다양한 방법으로 가능한데, Tensorboard에서 지원하는 방법은 &lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;t-SNE &lt;/span&gt;&amp;nbsp;&lt;/b&gt;와 &lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;PCA&amp;nbsp;&lt;/span&gt;&lt;/b&gt; 라는 방법이다. &lt;span style=&quot;font-size: 11pt;&quot;&gt;설명하기엔 나도 모르는 것이 많아 궁금한 사람은 직접 검색해 보는 것을 추천한다.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;사실 위에 언급한 callback 함수에서 인자로&amp;nbsp;&lt;/span&gt;&lt;b style=&quot;font-size: 14.6667px;&quot;&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;embedding_freq&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&amp;nbsp;와&amp;nbsp;&lt;/span&gt;&lt;b style=&quot;font-size: 14.6667px;&quot;&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;embedding_layer_name&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&amp;nbsp;을 설정하면 Tensorboard에서 embedding space를 바로&amp;nbsp;확인할 수 있다고 하지만, 내 모델의 구조 상 embedding_layer_name에서 내가 원하는 layer를 가져오지 못했다. 따라서 다른 방법을 찾아봐야 했다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;인터넷에&amp;nbsp;Keras model에서 구한 vector를 Tensorboard에 embedding하는 방법을 찾던 중, &lt;a href=&quot;https://stackoverflow.com/questions/41665390/is-it-possible-to-visualize-keras-embeddings-in-tensorboard&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;다음 글&lt;/a&gt;을 발견했다. 글에 나와 있는 방법을 간단하게 설명하자면, Keras model 내의 Keras tensor를 구한 뒤, Tensorflow를 이용해 데이터를 저장하고 Tensorboard에서 그 정보를 읽는 것이다.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;다행히 Tensorboard에서는&amp;nbsp;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238); font-size: 11pt;&quot;&gt;&amp;nbsp;tensorflow.train.Saver()&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt; 로 저장한 Tensor를 불러오는 기능이 있다. 위 글 역시 이 기능을 사용했으며, Keras의 backend로 Tensorflow가 쓰일 수 있기 때문에 backend 에서 session을 얻어와 동작하게 하는 식으로 프로그래밍했다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;위 예제는 Tensorflow 1.5 버전부터 사용할 수 없는데, 중간에 사용된&amp;nbsp;&lt;b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt; t&lt;/span&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;ensorflow.train.SummaryWriter()&amp;nbsp;&lt;/span&gt;&lt;/b&gt; 함수가 사라지고 그 기능이 다른 곳으로&amp;nbsp;refactoring 되었기 때문이다. 물론 기능은 남아있기 때문에 다른 방법으로 구현할 수 있었다.&amp;nbsp;&lt;/span&gt;&lt;b style=&quot;font-size: 14.6667px;&quot;&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;&amp;nbsp;t&lt;/span&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238);&quot;&gt;ensorflow.summary.FileWriter()&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;함수가 그 기능을 대신하기 때문에, 위 함수로 해당 부분을 대체하면 된다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;또한 Keras backend에서 session을 가져오는 것에서 약간의 내부적 순서 문제가 있었는지, 선언과 함수 실행부들을 이리저리 바꿔봐도 계속 오류가 났다. 여러 번의 삽질 끝에 찾은 방법은, 아예 다른 파일에 Tensorflow를 불러오고, Tensorflow의 session을 열어 session 내에서 해당 작업을 전부 수행하는 것이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; line-height: 1.8;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;코드는 길지 않은데 아래와 같다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;table class=&quot;codehilite highlighttable&quot; style=&quot;margin: 0px; border-collapse: collapse; width: 934px; color: rgb(23, 43, 77); font-family: -apple-system, system-ui, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; letter-spacing: -0.07px;&quot;&gt;&lt;tbody style=&quot;border-bottom: 0px;&quot;&gt;&lt;tr&gt;&lt;td class=&quot;code&quot; style=&quot;border: none; padding: 8px 0px 8px 10px; height: 18px; vertical-align: top;&quot;&gt;&lt;div class=&quot;codehilite highlight&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: SFMono-Medium, &amp;quot;SF Mono&amp;quot;, &amp;quot;Segoe UI Mono&amp;quot;, &amp;quot;Roboto Mono&amp;quot;, &amp;quot;Ubuntu Mono&amp;quot;, Menlo, Courier, monospace; font-size: 12px; line-height: 1.4; letter-spacing: 0px;&quot;&gt;&lt;p&gt;&lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;&lt;br class=&quot;Apple-interchange-newline&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot; style=&quot;color: rgb(85, 85, 85);&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot; style=&quot;color: rgb(85, 85, 85);&quot;&gt;tf&lt;/span&gt;
&lt;a name=&quot;save_z.py-2&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot; style=&quot;color: rgb(85, 85, 85);&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot; style=&quot;color: rgb(85, 85, 85);&quot;&gt;np&lt;/span&gt;
&lt;a name=&quot;save_z.py-3&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;save_z.py-4&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot; style=&quot;font-weight: 700;&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;font-weight: 700;&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;a name=&quot;save_z.py-5&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;save_z.py-6&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot; style=&quot;color: rgb(187, 136, 68);&quot;&gt;'emb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)         &lt;/span&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;# 위에서 말한 함수를 대체한 부분&lt;/span&gt;
&lt;a name=&quot;save_z.py-7&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;save_z.py-8&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;z_list&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot; style=&quot;color: rgb(187, 136, 68);&quot;&gt;'z_vector.npy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)          &lt;/span&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;# 따로 저장해 둔 z vector의 numpy array를 저장해둔 파일을 읽어왔다. &lt;/span&gt;
&lt;a name=&quot;save_z.py-10&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;save_z.py-11&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;save_z.py-12&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot; style=&quot;color: rgb(187, 136, 68);&quot;&gt;'z_tf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot; style=&quot;color: rgb(153, 153, 153);&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color: rgb(0, 153, 153);&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)    &lt;/span&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;# 불러온 z vector의 shape에 맞는 tensor를 만든다. &lt;/span&gt;
&lt;a name=&quot;save_z.py-13&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;a name=&quot;save_z.py-14&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;save_z.py-15&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;a name=&quot;save_z.py-16&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;    &lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;# configuration file을 만드는 부분&lt;/span&gt;&lt;/p&gt;&lt;p&gt;
&lt;a name=&quot;save_z.py-17&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot; style=&quot;color: rgb(85, 85, 85);&quot;&gt;tensorboard.plugins.projector.projector_config_pb2&lt;/span&gt; &lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProjectorConfig&lt;/span&gt;
&lt;a name=&quot;save_z.py-18&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProjectorConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;a name=&quot;save_z.py-19&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;embed&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embeddings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;a name=&quot;save_z.py-20&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor_name&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot; style=&quot;color: rgb(187, 136, 68);&quot;&gt;'z_tf'&lt;/span&gt;
&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot;&gt;    # embedding vector를 보여주기 위해 visualize 하는 부분&lt;/span&gt;
&lt;a name=&quot;save_z.py-22&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot; style=&quot;color: rgb(85, 85, 85);&quot;&gt;tensorboard.plugins.projector&lt;/span&gt; &lt;span class=&quot;kn&quot; style=&quot;font-weight: 700;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visualize_embeddings&lt;/span&gt;
&lt;a name=&quot;save_z.py-23&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;visualize_embeddings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;p&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a name=&quot;save_z.py-25&quot; style=&quot;color: rgb(0, 82, 204);&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;font-weight: 700;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot; style=&quot;color: rgb(187, 136, 68);&quot;&gt;'emb/model.ckpt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;letter-spacing: 0px;&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;letter-spacing: 0px; color: rgb(153, 153, 136); font-style: italic;&quot;&gt;# 임의의 경로에 .ckpt 파일을 저장한다&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: SFMono-Medium, &amp;quot;SF Mono&amp;quot;, &amp;quot;Segoe UI Mono&amp;quot;, &amp;quot;Roboto Mono&amp;quot;, &amp;quot;Ubuntu Mono&amp;quot;, Menlo, Courier, monospace; font-size: 12px; line-height: 1.4; letter-spacing: 0px;&quot;&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;이런 방식으로 저장한 .ckpt 파일의 경로를&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;ensorboard 명령어에 log_dir 로 넣어주면, 비로소 Tensorboard의&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238); font-size: 11pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(238, 238, 238); font-size: 11pt;&quot;&gt;Projector&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt; 탭에 embedding space가 보여지게 된다. Tensorboard 의 사용법은 검색하면 바로 찾을 수 있으니 따로 적지는 않는다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;span style=&quot;color: rgb(140, 140, 140); font-size: 14pt;&