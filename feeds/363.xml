<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>MelloИia's DevLog</title>
<link>https://mellonia-lab.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 03:42:52 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>MelloИia</managingEditor>
<image>
<title>MelloИia's DevLog</title>
<url>https://tistory1.daumcdn.net/tistory/2783930/attach/102e834490044317ae1d55b9f1d2f988</url>
<link>https://mellonia-lab.tistory.com</link>
<description></description>
</image>
<item>
<title>화성에서 온 개발자, 금성에서 온 디자이너.</title>
<link>https://mellonia-lab.tistory.com/74</link>
<description>&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:1000px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile27.uf.tistory.com%2Fimage%2F999D98475B230C1A2B17B8&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/999D98475B230C1A2B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;1.PNG&quot; height=&quot;434&quot; width=&quot;1000&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:1000px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F99BD34475B230C1C2A9791&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99BD34475B230C1C2A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;2.PNG&quot; height=&quot;424&quot; width=&quot;1000&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:1000px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F99D7ED475B230C1D2A56EE&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99D7ED475B230C1D2A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3.PNG&quot; height=&quot;492&quot; width=&quot;1000&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;원티드를 눈팅하던 중 흥미로운 주제의 이벤트를 발견했다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;나는 FE 개발자이기 때문에 디자이너와 협업할 일이 많을 것이라서 많은 개발자와 디자이너를 만나서&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;사람들의 생각과 노하우 등을 얻을 수 있을 것이라 생각했다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;대학교 동기에게도 저걸 공유해서 퇴근하고 같이 가게 되었다.&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;이벤트는 7시부터 입장이 가능하며 7시 반부터 1시간을 &lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;패널 토크쇼를 진행하고 그 다음 1시간을&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp;네트워킹 파티에 할애하여&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;총 9시 반에 끝이 난다. &lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;네트워킹 파티인데 1시간으로 될까 의문이 든 채로 패널 토크쇼가 시작되었다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;패널은 현업에서 나름 경험과 이름이 있으신 분들 4명을 섭외한 거 같았다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;토크쇼는 1시간 동안 진행되었는데 달리 할 말은 없고 결론을 내자면 뻔한 이야기.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;다소 신선한 대화를 생각했었는데 밋업의 주제가 주제인만큼 너무 뻔한 이야기가 나올 수 밖에 없었던 거 같다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;이런 토크쇼를 진행할 것이라면 굳이 토크쇼보다는 2시간 다 네트워킹 파티에 할애하는 게 좋을 거 같다는 생각을 했다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;일단 나는 디자이너와 가까워지는 것이 목표였지 지루하고 예상가능한 패널 토크쇼를 들으러 온 건 아니니까.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;이제 테이블 사람들과 스을 말이 터서 대화를 재밌게 나누고 이제 다른 사람들과도 대화를 나누려하니&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;이벤트의 종료시간이 다가왔다. 뭔가 찝찝하고 아쉬움이 남는 그런 자리였다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;다음에도 이런 행사가 있다면 참여할 의향은 있지만&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;좀 더 시간적 여유가 있어서 많은 사람들과 대화를 나눌 수 있는 기회가 주어졌으면 좋겠다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Event</category>
<category>Designer</category>
<category>Developer</category>
<category>it</category>
<category>meetup</category>
<category>Networking party</category>
<category>Wanted</category>
<category>WeWork</category>
<category>개발자</category>
<category>금성에서 온 디자이너</category>
<category>네트워킹</category>
<category>네트워킹 파티</category>
<category>디자이너</category>
<category>맥주</category>
<category>밋업</category>
<category>삼성역</category>
<category>원티드</category>
<category>위워크</category>
<category>위워크 삼성역점</category>
<category>위워크 삼성점</category>
<category>케이터링</category>
<category>협업</category>
<category>화성에서 온 개발자</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/74</guid>
<comments>https://mellonia-lab.tistory.com/74#entry74comment</comments>
<pubDate>Fri, 15 Jun 2018 09:56:36 +0900</pubDate>
</item>
<item>
<title>웹 서버와 WAS의 역할과 차이</title>
<link>https://mellonia-lab.tistory.com/73</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;웹에 대해 잘 모르고 클라이언트와 서버의 개념만 알던 시절에는 그저 클라이언트에서 데이터를 요청하면 서버가 요구사항에 맞게 가공하여 응답해주는 줄 알았다. 사실 아주 틀린 말은 아니지만 그렇다고 정확한 것도 아니다. 클라이언트와 서버라는 개념에 맞게 나름대로의 해석을 했을 뿐. 그러던 중 웹 서버말고도 WAS라는 것이 존재한다는 것을 알게 되었고 이의 차이를 분명히 하는 것이 필요하다 생각되었다.&lt;/p&gt;
&lt;h2 id=&quot;1-web-server-&quot;&gt;1. 웹 서버( Web Server )&lt;/h2&gt;
&lt;h4 id=&quot;-&quot;&gt;사전적 정의&lt;/h4&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;웹&amp;nbsp;브라우저&amp;nbsp;클라이언트로부터&amp;nbsp;HTTP&amp;nbsp;요청을&amp;nbsp;받아들이고&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;HTML&amp;nbsp;문서와&amp;nbsp;같은&amp;nbsp;웹&amp;nbsp;페이지를&amp;nbsp;반환하는&amp;nbsp;컴퓨터&amp;nbsp;프로그램.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;일반적으로 웹 서버라는 단어는 단독으로 사용할 때는 &lt;code&gt;전반적인 서비스를 제공하는 아키텍쳐&lt;/code&gt;를 뜻하지만 WAS와 함께 쓰인다면 클라이언트에서 요청을 받아 &lt;code&gt;정적 컨텐츠(html, 이미지, 파일 등)을 제공하는 서버&lt;/code&gt;를 뜻한다. 웹 서버가 정적 컨텐츠를 요청 받으면 즉시 응답하지만 동적 컨텐츠를 요청 받으면 WAS에게 해당 요청을&amp;nbsp;넘겨주게 된다. 그리고 웹 서버에 부속된 모듈을 이용하면 네트워크 간의 프록시 연결이나 SSL 설정 등을 손쉽게 할 수 있다. 대표적인 웹 서버에는 Apache, NGINX, IIS 등이 있다.&lt;/p&gt;
&lt;h2 id=&quot;2-was-web-application-server-&quot;&gt;2. WAS ( Web Application Server )&lt;/h2&gt;
&lt;h4 id=&quot;-&quot;&gt;사전적 정의&lt;/h4&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;인터넷&amp;nbsp;상에서&amp;nbsp;HTTP&amp;nbsp;프로토콜을&amp;nbsp;통해&amp;nbsp;사용자&amp;nbsp;컴퓨터나&amp;nbsp;장치에&amp;nbsp;애플리케이션을&amp;nbsp;수행해주는&amp;nbsp;미들웨어.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;주로&amp;nbsp;동적&amp;nbsp;서버&amp;nbsp;컨텐츠를&amp;nbsp;수행하는&amp;nbsp;것으로&amp;nbsp;일반적인&amp;nbsp;웹&amp;nbsp;서버와&amp;nbsp;구별이&amp;nbsp;되며,&amp;nbsp;주로&amp;nbsp;데이터베이스&amp;nbsp;서버와&amp;nbsp;같이&amp;nbsp;수행된다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;WAS는 웹 서버로는 처리할 수 없는 &lt;code&gt;데이터베이스 조회나 다양한 로직 처리가 필요한 동적 컨텐츠를 제공&lt;/code&gt;한다. WAS의 존재로 유저의 다양한 요구에 맞춰서 웹 서비스를 제공할 수 있다. 이를 위해 사용되는 서버 프로그래밍 언어로 PHP, JSP, ASP가 있고 JavaScript 런타임 Node.js도 포함된다. 대표적인 WAS에는 Tomcat, Jeus, Web Sphere 등이 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;process&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1w5WXP2fxGqng6bCvgC0AbSeCPSZLeacU&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-was-&quot;&gt;3. WAS만 쓰면 될 것 같은데 웹 서버는 왜 필요할까?&lt;/h2&gt;
&lt;p&gt;모든 것은 &lt;strong&gt;효율성&lt;/strong&gt;의 문제이다. 출발은 &lt;code&gt;서버의 자원을 효율적으로 사용하자&lt;/code&gt;에서 시작했을 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;유저가 접근 가능한 모든 페이지를 미리 만든 후 서비스를 제공하기엔 서버의 자원은 턱없이 부족하다. 그렇기 때문에 유저의 요청에 따른 결과만을 보여주는 방식을 택했다. 서버는 데이터베이스에서 가져온 데이터들을 비즈니스 로직에 맞춰 가공하는 것에 많은 자원을 투자한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;정적 데이터도 마찬가지다. 이미지같은 정적 데이터도 HTML 문서가 클라이언트로 전송될 때 함께 가는 것이 아니라 브라우저가 HTML 문서를 받고 필요한 정적 데이터를 요청하면 그 때 그 때 보내준다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;서버는 비즈니스 로직을 처리하기 바쁜데 정적 컨텐츠까지 신경쓸 겨를이 있을까? 없다. 그렇기 때문에 웹 서버를 두어 정적 컨텐츠 처리를 맡기는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;웹 서버를 반드시 구축해야하는 것은 아니다. 하지만 WAS는 동적 컨텐츠 처리를 위해 존재하므로 정적 컨텐츠까지 처리해야할 경우 속도가 느려질 수 밖에 없다. 그렇기 때문에 웹 서버를 두고 플러그인 형태로 WAS를 두어 데이터를 효율적으로 처리할 수 있도록 구성하는 것이다.&lt;/p&gt;
&lt;h2 id=&quot;4-&quot;&gt;4. 구성에 따른 분류&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WAS &amp;amp; 웹 서버&lt;br /&gt;웹 서버와 WAS의 역할을 동시에 수행하며 모든 컨텐츠를 하나의 서버에 집중한다. 스위치를 통한 로드 밸런싱, 사용자가 적을 때 효과적이다.&lt;/li&gt;
&lt;li&gt;WAS X 웹 서버&lt;br /&gt;웹 서버와 WAS의 기능을 분리하여 효과적인 분산을 유도하며 정적 데이터는 웹 서버, 동적 데이터는 WAS가 처리한다.&lt;/li&gt;
&lt;li&gt;WAS X WAS X 웹 서버&lt;br /&gt;WAS단을 프레젠테이션 로직과 비즈니스 로직으로 구분하여 구성한다. 특정 로직의 부하에 따른 적절한 대응이 가능하지만 구성이 복잡해진다.&lt;/li&gt;
&lt;/ul&gt;&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발상식</category>
<category>nginx</category>
<category>server</category>
<category>tomcat</category>
<category>was</category>
<category>WAS 역할</category>
<category>WEB</category>
<category>Web Application Server</category>
<category>web server</category>
<category>web server was difference</category>
<category>WebApplicationServer</category>
<category>webServer</category>
<category>webserver was difference</category>
<category>로드밸런싱</category>
<category>서버</category>
<category>와스</category>
<category>웹</category>
<category>웹 서버</category>
<category>웹 서버 WAS 차이</category>
<category>웹 서버 역할</category>
<category>웹 서버와 WAS의 차이</category>
<category>웹서버</category>
<category>웹서버 WAS 차이</category>
<category>웹서버와 WAS의 차이</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/73</guid>
<comments>https://mellonia-lab.tistory.com/73#entry73comment</comments>
<pubDate>Wed, 30 May 2018 22:22:12 +0900</pubDate>
</item>
<item>
<title>REST, RESTful, RESTful하다</title>
<link>https://mellonia-lab.tistory.com/72</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;웹을 공부하는 학생이나 종사자라면 REST 또는 RESTful 또는 뭐 RESTful API란 것을 익히 들어서 알고 있을 것이다. 하지만 그런 것이 있다고 알고만 있을 뿐, 정확한 의미나 정의를 모르는 경우가 있을 수도 있다. 그래서 이번에는 REST에 관해서 개념을 정리하고자 한다.&lt;/p&gt;
&lt;h2 id=&quot;1-&quot;&gt;1. 소개 및 정의&lt;/h2&gt;
&lt;p&gt;REST는 '&lt;strong&gt;RE&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer'의 약자로 2000년에 Roy Fielding 아조씨의 박사논문에 최초로 등장했다. 그는 웹의 설계가 매우 우수함에도 제대로 쓰지 못하는 것이 안타까워 웹을 장점을 최대한 살릴 수 있는 REST를 발표했다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;REST는 '&lt;strong&gt;대규모 네트워크 시스템을 위한 아키텍쳐&lt;/strong&gt;'라고 정의할 수 있다. 이렇게 말하면 너무 어려우니까 조금은 쉽게 풀어서 설명하자면 '&lt;strong&gt;URI(Uniform Resource Identifier, 통합 자원 식별자)로 접근 가능하고 내용이 JSON, XML 등으로 표현된 자원에 대한 행위를 HTTP Method로 정의한다.&lt;/strong&gt;'가 되겠다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;주로 ~ful라는 어미를 붙여 RESTful한 ~ 이라고 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;2-rest-&quot;&gt;2. REST의 구성&lt;/h2&gt;
&lt;h3 id=&quot;2-1-resource-&quot;&gt;2.1. Resource ( 자원 )&lt;/h3&gt;
&lt;p&gt;REST를 이용해서 처리되는 대상을 말한다. JSON, XML 같은 텍스트 문서가 될 수도 있고 jpg같은 이미지나 mp3같은 영상 파일이 될 수도 있다.&lt;/p&gt;
&lt;h3 id=&quot;2-2-verb-&quot;&gt;2.2. Verb ( 행위 )&lt;/h3&gt;
&lt;p&gt;REST에서 리소스 종류에 상관없이 다 똑같은 HTTP Method에 의해 다뤄진다.&lt;br /&gt;HTTP Method는 많지만 CRUD에 해당하는 것만 이용한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;CRUD 연산&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;HTTP Method&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CREATE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;POST&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;해당 URI에 대한 리소스 생성.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;READ&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;GET&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;리소스를 조회하고 정보를 가져옴.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;UPDATE / REPLACE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;PUT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;리소스 수정.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DELETE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DELETE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;리소스 삭제.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;2-3-representations-&quot;&gt;2.3. Representations ( 표현 )&lt;/h3&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;patient-room/202/new-patient&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;예를 들어서... 202호 병실에 입실하는 환자를 추가하는 REST API다.&lt;/p&gt;&lt;p&gt;URI와 Verb로 모든 정보를 다 표현할 수가 없다. 환자의 키, 몸무게, 혈액형부터 해서 병력이나 보호자 등 여러가지 정보가 있을 것이다. 이처럼 URI로 표현할 수 있는 정보 외에도 다양한 정보가 있다. 새 환자를 추가하는데 이런 정보들이 필요하고 이런 정보들은 JSON이나 XML 등으로 표현할 수 있다. 이런 정보들을 메소드 바디 또는 Payload라고 한다.&lt;/p&gt;
&lt;h2 id=&quot;3-rest-&quot;&gt;3. REST의 특징&lt;/h2&gt;
&lt;h3 id=&quot;3-1-uniform-&quot;&gt;3.1. Uniform ( 단일 인터페이스 )&lt;/h3&gt;
&lt;p&gt;REST는 리소스의 종류( 문서, 이미지, 영상...등 )에 관계없이 모두 똑같은 메소드로 조작되고 처리된다.&lt;/p&gt;
&lt;h3 id=&quot;3-2-stateless-&quot;&gt;3.2. Stateless ( 무상태성 )&lt;/h3&gt;
&lt;p&gt;서버가 수행 문맥(Context)을(상태를) 저장하지 않는다. 쉽게 말하자면 이전에 어떤 요청이 있었는지? 이런 것을 저장하지 않는다. 즉, 쿠키나 세션같은 걸 별도로 저장하고 관리하지 않는다는 말이다. 그래서 서버는 단순히 요청을 처리하고 응답만을 해주면 된다. 문맥 저장이 필요하다면 클라이언트가 알아서 해야한다.&lt;/p&gt;
&lt;h3 id=&quot;3-3-cachable-&quot;&gt;3.3. Cachable ( 캐시 가능 )&lt;/h3&gt;
&lt;p&gt;HTTP Protocol을 그대로 이용하기 때문에 기존의 웹 인프라를 그대로 활용할 수 있다. 쉽게 말하자면 웹 브라우저에서 HTTP 캐시를 이용할 수 있다. 더 쉽게 말해서(...) 동일 URI에 대한 요청이 여러번 왔을 때 매번 리소스를 서버로 요청하지 않고 클라이언트의 캐시에서 리소스를 가져온다.&lt;/p&gt;
&lt;h3 id=&quot;3-4-self-descriptivness-&quot;&gt;3.4. Self-descriptivness ( 자체 표현 )&lt;/h3&gt;
&lt;p&gt;별도의 설명 없이도 REST API 메시지 그 자체로 쉽게 이해할 수 있는 자체 표현구조이다.&lt;/p&gt;
&lt;h3 id=&quot;3-5-client-server-architecture-&quot;&gt;3.5. Client-Server architecture ( 클라이언트-서버 구조 )&lt;/h3&gt;
&lt;p&gt;REST는 서버는 클라이언트에게 API만을 제공, 클라이언트는 사용자 인증이나 Context(세션..등)을 관리한다. 따라서 서버와 클라이언트의 역할이 명확히 구분되고 상호 의존성이 줄어든다.&lt;/p&gt;
&lt;h3 id=&quot;3-6-layered-system-&quot;&gt;3.6. Layered System ( 계층형 구조 )&lt;/h3&gt;
&lt;p&gt;REST는 다중 계층으로 구성될 수 있다. 그러므로 클라이언트는 서버와 직접 통신하는지 중간 매개체와 통신을 하는지 알 수 없다. 중간 매개체를 이용하여 보안 관리나 로드 밸런싱 등을 수행할 수 있어서 구조적 유연성이나 확장성 확보 및 보안 향상이 가능하다.&lt;/p&gt;
&lt;h2 id=&quot;4-rest-restful-api-&quot;&gt;4. REST 설계 가이드( RESTful하게 API를 디자인하는 것 )&lt;/h2&gt;
&lt;h3 id=&quot;4-1-uri-&quot;&gt;4.1. 중심 규칙 ( URI 설계 관련 )&lt;/h3&gt;
&lt;h4 id=&quot;4-1-1-uri-&quot;&gt;4.1.1. URI는 정보의 리소스를 잘 표현해야하므로 명사 위주로 표현한다.&lt;/h4&gt;
&lt;p&gt;예를 들어서&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/java&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 리소스를 &lt;strong&gt;명확히&lt;/strong&gt; 알 수 있도록 명사를 이용해야한다. 딱봐도 java와 관련된 글들이 있을 것 같지않은가?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/delete&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;위와 같은 식으로 행위에 대한 표현이 있어서는 안된다.&lt;/p&gt;
&lt;h4 id=&quot;4-1-2-http-method-&quot;&gt;4.1.2. 리소스에 대한 행위는 HTTP Method로 표현한다.&lt;/h4&gt;
&lt;p&gt;리소스와 행위를 명시적이고 직관적으로 분리해야한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/java/insert/javafx/10&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/java/delete/javafx/10&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;그를 위해서 앞서 설명했듯 리소스는 명사를 행위는 HTTP Method를 이용하여 표현한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;POST&amp;nbsp;post/it/java/javafx/10&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;DELETE&amp;nbsp;post/it/java/javafx/10&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;h4 id=&quot;4-1-3-header-body-&quot;&gt;4.1.3. 메시지는 Header와 Body를 명확하게 분리해서 사용한다.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서버의 행동을 판단할 근거가 되는 API 버전 정보, 응답받고자 하는 MIME 타입 등은 Header에 담는다.&lt;/li&gt;
&lt;li&gt;Entity에 대한 내용은 Body에 담는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-2-uri-&quot;&gt;4.2. 주의점 ( URI 가독성 관련 )&lt;/h3&gt;
&lt;h4 id=&quot;4-2-1-&quot;&gt;4.2.1. 슬래시(/)는 계층 관계를 나타낼 때 사용한다.&lt;/h4&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/java&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;trip/france/paris&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;( 말이 필요 없다. )&lt;/p&gt;
&lt;h4 id=&quot;4-2-2-uri-&quot;&gt;4.2.2. URI 마지막 문자로 슬래시(/)를 사용하지 않는다.&lt;/h4&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/java/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt;&amp;nbsp;(X)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;post/it/java&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt;&amp;nbsp;(O)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;명확한 URI 표현을 하여 혼동을 피하기 위해 마지막에 슬래시를 쓰지 않는다.&lt;/p&gt;
&lt;h4 id=&quot;4-2-3-&quot;&gt;4.2.3. 하이픈(-)은 가독성을 높이기 위해 사용한다.&lt;/h4&gt;
&lt;p&gt;긴 URI를 해석하기 위해서는 가독성을 위해서 하이픈을 쓰는 것이 좋다. 합성 단어라면 하이픈을 이용해 구분할 수도 있다.&lt;/p&gt;
&lt;h4 id=&quot;4-2-4-_-&quot;&gt;4.2.4. 언더바(_)는 가독성을 위해 사용을 자제한다.&lt;/h4&gt;
&lt;p&gt;개발자라면 언더바를 사용하는 것에 익숙할테지만 여기서는 그래서는 안된다.&lt;br /&gt;폰트에 따라 언더바 때문에 문자가 가려지기도 하거나 리소스로서의 언더바가 가려질 수도 있기 때문에 가독성을 해칠 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;4-2-5-uri-&quot;&gt;4.2.5. 확장자는 URI에 포함하지 않는다.&lt;/h4&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;trip/france/paris/museum.jpg&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;URI에는 메시지 바디에 포함되는 리소스의 포맷을 표현하지 않는다. 그리고 확장자를 사용하지 않으면 리소스가 보다 유연해진다. 같은 내용(응답)에 대해서 여러 확장자를 지원해야할 경우 일일이 그 확장자에 대한 리소스 지원을 하는 것은 낭비이다. museum.jpg와 museum.png는 같은 사진이지만 명백히 다른 파일이다. 그러므로 리소스가 하나라면 URI도 하나여야한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;확장자는 Accept Header를 통해 표현하는 것이 옳다. 하나의 URI를 두고 그 것은 요청에 대한 대응만 해주고 데이터의 포맷은 Accept Header를 적절히 파싱하여 요청한대로 보여주면 된다.&lt;/p&gt;
&lt;h4 id=&quot;4-2-6-uri-&quot;&gt;4.2.6. URI를 표현할 때 최대한 소문자 사용을 지향한다.&lt;/h4&gt;
&lt;p&gt;대소문자가 구분된다. 그래서 다른 리소스로 인식할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;1)&amp;nbsp;post/it/java&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;2)&amp;nbsp;post/it/Java&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;3)&amp;nbsp;post/it/JAVA&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;위의 셋은 전부다 다른 리소스이다. 혼란을 방지하게 위해 되도록 소문자 사용을 지향한다.&lt;br /&gt;꼭 대문자를 써야할 것 같다싶은 경우도 있겠지만 대소문자가 구분되는 것을 유의하면서 URI를 표현해야한다.&lt;/p&gt;
&lt;h2 id=&quot;5-rest-&quot;&gt;5. REST 응답 상태 코드&lt;/h2&gt;
&lt;h3 id=&quot;5-1-&quot;&gt;5.1. 성공&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;상태코드&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;200&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트의 요청을 정상적으로 수행함. 응답 바디가 있을 때 사용함. 응답 바디에는 요청과 관련된 내용을 표시함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;201&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트가 어떤 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;202&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트 요청이 비동기적으로 처리될 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;204&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트의 요청을 정상적으로 수행함. 응답 바디가 없을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;5-2-&quot;&gt;5.2. 실패&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;상태코드&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;400&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트의 요청이 부적절할 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;401&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;사용자가 인증되지 않은 상태에서 보호된 리소스를 요청했을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;403&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;사용자의 인증 상태와 무관하게 응답하고 싶지 않은 리소스를 요청했을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;404&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트가 요청한 리소스가 존재하지 않을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;405&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트가 요청한 리소스에서는 사용할 수 없는 Method를 이용했을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;5-3-&quot;&gt;5.3. 기타&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;상태코드&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;301&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;클라이언트가 요청한 리소스의 URI가 변경되었을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;500&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;서버에 문제가 있을 때 사용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발상식</category>
<category>API</category>
<category>Rest</category>
<category>rest api</category>
<category>RESTful</category>
<category>RESTful API</category>
<category>RESTful하다</category>
<category>RESTful한</category>
<category>레스트</category>
<category>레스트풀</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/72</guid>
<comments>https://mellonia-lab.tistory.com/72#entry72comment</comments>
<pubDate>Tue, 29 May 2018 22:27:35 +0900</pubDate>
</item>
<item>
<title>버전 관리와 Git</title>
<link>https://mellonia-lab.tistory.com/71</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;&lt;img alt=&quot;logo&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1dwj2MhVwE0ZLNoUY5B18Pv91HNM20FwV&quot;&gt;&lt;/p&gt;&lt;p&gt;본 카테고리는 Git에 대해 다룬다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;버전 관리 개요&lt;/li&gt;
&lt;li&gt;역사&lt;/li&gt;
&lt;li&gt;특징&lt;/li&gt;
&lt;li&gt;호스팅&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;

&lt;h1 id=&quot;1-&quot;&gt;1. 버전 관리&lt;/h1&gt;
&lt;p&gt;버전 관리는 파일 데이터의 변화를 시간에 따라 기록했다가 특정 시점의 버전을 다시 꺼내올 수 있는 시스템이다. &lt;/p&gt;&lt;p&gt;VCS(Version Control System)을 이용하면 각 파일을 이전 상태로 되돌릴 수도 있고 프로젝트를 통째로 이전 상태로 되돌릴 수 있고 시간에 따라 변경 내용을 확인할 수도 있고 어디서 누가 일으킨 이슈인지 추적하여 확인할 수도 있다. 실수로 변경하여 잃거나 수정된 파일 또한 손쉽게 복구가 가능하다. 이 모든 것들을 큰 어려움 없이 이용할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;1-1-local-vcs&quot;&gt;1.1. Local VCS&lt;/h2&gt;
&lt;p&gt;많은 사람들이 버전 관리를 할 때 파일이나 폴더를 복사한 뒤 이름에 버전 숫자나 시간 등을 넣는 방법을 쓴다. 이 방법은 매우 직관적이고 간단하지만 파일을 지운다거나 잘못 복사를 하는 등의 실수를 하기 쉽다. 이를 해결하기 위해 등장한게 Local VCS이다.&lt;/p&gt;
&lt;h2 id=&quot;1-2-cvcs-central-vcs-&quot;&gt;1.2. CVCS(Central VCS)&lt;/h2&gt;
&lt;p&gt;프로젝트를 진행하다보면 다른 사람과 협업해야하는 경우가 많다. 이럴 때 생기는 문제를 해결하기 위해 CVCS가 등장했다. CVS, Subversion, Perforce 같은 시스템은 파일을 관리하는 서버가 별도로 있고 클라이언트가 중앙 서버에서 파일을 받아서 사용한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;CVCS는 같이 협업을 하는 이들이 각각 무엇을 하고 있는지 알 수 있기 때문에 관리자가 이를 꼼꼼하게 체크할 수 있다. 모든 클라이언트의 Local VCS를 관리하는 것보다 CVCS 하나를 관리하는 것이 훨씬 시간이 절약되고 쉬운 방법이다. 이러한 방식은 오랫동안 사람들의 사랑을 받았다.&lt;/p&gt;
&lt;h2 id=&quot;1-3-dvcs-divided-vcs-&quot;&gt;1.3. DVCS(Divided VCS)&lt;/h2&gt;
&lt;p&gt;다만 CVCS는 중앙 서버에 문제가 생길 경우 그 시간 동안 업무가 마비되는 현상이 발생한다.&lt;br /&gt;협업을 할 수 없는 것은 물론이고 하던 작업을 백업할 수도 없고 심각한 경우엔 모든 데이터와 히스토리를 잃을 수도 있다. &lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그래서 등장한 것이 DVCS다. Git, Bazaar, Mecurial 같은 시스템은 클라이언트에서 파일의 마지막 스냅샷을 가져오지 않는다. 그냥 저장소 전부 복사한다. 그렇기 때문에 서버에 문제가 생겨도 이 복사본으로 작업을 할 수 있다. 대부분의 DVCS 환경은 리모트 저장소를 지원하고 많은 수가 존재할 수도 있기 때문에 여러 그룹과 다양한 방식으로 프로젝트를 진행할 수 있다.&lt;/p&gt;
&lt;h1 id=&quot;2-&quot;&gt;2. 역사&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&quot;Linus&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1stVJBg-m7MMWqIVHtlLkrmWop4mKVzUw&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;( 리눅스의 아버지, 리누스 토발즈,,,, )&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Git은 리누스 토발즈가 만든 프로그램의 소스 코드 관리를 위한 '&lt;strong&gt;분산 버전 관리 시스템&lt;/strong&gt;'이다. &lt;/p&gt;&lt;p&gt;원래 Linux 커뮤니티는 당시 BitKeeper라는 DVCS를 사용하고 있었다. BitKeeper는 유료지만 Linux 커뮤니티에는 무료로 제공하고 있었는데 커뮤니티 내의 한 개발자가 BitKeeper의 통신 프로토콜을 리버싱해 해킹하는 사건을 기점으로 하여 Linux 커뮤니티에 무료 라이센스를 철회하게 된다. 이에 빡친 리눅스 토발즈는 단 2주(...)만에 BitKeeper를 대체할 DVCS인 Git을 만들게 된다.&lt;/p&gt;&lt;p&gt;Git은 BitKeeper를 완벽히 대체하면서 그보다 더 뛰어난 시스템을 제공하기 위해 아래와 같은 목표를 세웠다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빠른 속도&lt;/li&gt;
&lt;li&gt;단순한 구조&lt;/li&gt;
&lt;li&gt;비선형적인 개발&lt;/li&gt;
&lt;li&gt;완벽한 분산&lt;/li&gt;
&lt;li&gt;Linux 커널 개발 같은 대형 프로젝트에도 유용할 것(시간, 공간적 측면에서)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10년이 훌쩍 지난 지금도 Git은 초기의 목표를 잘 이행하고 있고 그러면서 더 사용하기 쉽게 개선되었다.&lt;/p&gt;
&lt;h1 id=&quot;3-&quot;&gt;3. 특징&lt;/h1&gt;
&lt;p&gt;Subversion과 같은 CVCS와 Git의 가장 큰 차이는 &lt;strong&gt;데이터를 다루는 방법&lt;/strong&gt;이다.&lt;/p&gt;&lt;p&gt;CVCS 시스템 대부분은 관리하는 정보가 파일들의 목록이다. 각 파일의 변화를 시간 순으로 관리하면서 그들의 집합을 관리한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Git은 위의 방법으로 데이터를 다루지 않는다. Git은 데이터를 파일 시스템 스냅샷으로 취급하고 그 크기가 매우 작다. Git은 Commit하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 &lt;strong&gt;그 순간&lt;/strong&gt;을 중요시한다. 파일에 변화가 없다면 성능을 위해 파일을 새로 저장하지 않는다. 단지 이전 상태의 파일에 대한 링크만을 저장한다. 이렇듯 Git은 데이터를 &lt;strong&gt;스냅샷의 스트림&lt;/strong&gt;으로 취급한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고 &lt;strong&gt;거의 모든 명령어를 로컬에서 실행&lt;/strong&gt;하여 로컬 파일과 데이터만을 사용한다. 그러므로 네트워크에 있는 다른 컴퓨터(서버)는 필요 없다. 프로젝트의 모든 히스토리는 로컬 디스크에 있기 때문에 명령은 순식간에 실행된다. 이것이 네트워크에 의존하는 CVCS와는 다른 Git의 속도이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Git은 데이터를 저장하기 전에 항상 체크섬을 구하고 그 체크섬으로 데이터를 관리한다. &lt;/p&gt;&lt;p&gt;( 체크섬은 40자 길이의 16진수 문자열이다. Git은 SHA-1 Hash를 이용해 체크섬을 만든다. 실제로 Git은 모든 것을 해시로 식별하고 파일을 이름으로 저장하지 않고 해당 파일의 해시로 저장한다. ) 그래서 체크섬을 이해하는 Git 없이는 어떤 파일과 디렉토리도 변경할 수 없다. &lt;strong&gt;체크섬은 Git에서 사용하는 가장 기본적인 데이터 단위이자 Git의 철학&lt;/strong&gt;이다.&lt;/p&gt;
&lt;h1 id=&quot;4-&quot;&gt;4. 호스팅&lt;/h1&gt;
&lt;p&gt;Git 호스팅은 Git으로 관리되고 있는 버전을 로컬이 아닌 온라인에 보관해주는 서비스를 말한다. 수 많은 오픈 소스가 생성되고 있는 오픈 소스의 성지라고 볼 수 있다. Git 호스팅 서비스는 많지만 각각 장/단점이나 옵션이 다르므로 필요에 맞게 사용하면 된다. Github, BitBucket, Gitlab 등이 유명하다. &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitHosting&quot;&gt;Git 호스팅 서비스 리스트&lt;/a&gt;에서 확인하고 원하는 것을 쓰도록 하자.&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Git</category>
<category>bitbucket</category>
<category>CVCS</category>
<category>DVCS</category>
<category>GIT</category>
<category>Git 역사</category>
<category>Git 특징</category>
<category>github</category>
<category>GitLab</category>
<category>Git의 역사</category>
<category>Git의 특징</category>
<category>VCS</category>
<category>version control</category>
<category>VersionControl</category>
<category>개발</category>
<category>깃</category>
<category>깃랩</category>
<category>깃허브</category>
<category>리누스 토발즈</category>
<category>버전 관리</category>
<category>버전 컨트롤</category>
<category>버전관리</category>
<category>비트버킷</category>
<category>형상 관리</category>
<category>형상관리</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/71</guid>
<comments>https://mellonia-lab.tistory.com/71#entry71comment</comments>
<pubDate>Mon, 21 May 2018 10:17:49 +0900</pubDate>
</item>
<item>
<title>function과 method</title>
<link>https://mellonia-lab.tistory.com/70</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;function과 method는 굳이 한국어로 번역하자면 통칭 '함수'라 한다.&lt;br /&gt;하지만 method의 경우 영어 발음 그대로 메소드나 메서드라고 불리는 것이 일반적이다.&lt;br /&gt;그러므로 본 글에서는 function을 함수, method는 메소드라고 불러서 설명할 것이다.(&lt;del&gt;근데 밑에서 전부 다 영어단어로 씀&lt;/del&gt;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;function과 method는 둘 다 특정한 로직을 처리한다는 공통점이 있다.&lt;br /&gt;function과 method는 객체에 독립적이냐 종속적이냐의 차이점이 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Function은 객체에 독립적이고 Method는 객체에 종속적이다.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;그러므로 절차지향언어인 C에서는 function, 객체지향언어인 Java에서는 method가 쓰이며 C에 OOP개념을 도입한 C++에서는 둘 다 쓰인다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;JavaScript의 경우, 특정한 로직을 처리한다는 점에서는 function이 다른 언어와 다를 것이 없지만 function도 객체로 취급된다는 점에서 조금은 다르다. method는 객체 내에서 정의된 함수를 의미하므로 역시 다른 언어와 마찬가지로 객체에 종속적이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이처럼 언어의 철학에 따라서 조금씩 의미나 쓰임새가 달라지기도 한다.&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발상식</category>
<category>function</category>
<category>function과 method</category>
<category>Method</category>
<category>객체</category>
<category>객체독립</category>
<category>객체종속</category>
<category>메서드</category>
<category>메소드</category>
<category>함수</category>
<category>함수와 메소드</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/70</guid>
<comments>https://mellonia-lab.tistory.com/70#entry70comment</comments>
<pubDate>Fri, 06 Apr 2018 10:19:21 +0900</pubDate>
</item>
<item>
<title>Type Checking(자료형 검사)</title>
<link>https://mellonia-lab.tistory.com/69</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;Type checking(자료형 검사)은 프로그램이 자료형의 제약 조건을 지키는지 검증하는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Static type checking(정적 자료형 검사)와 Dynamic type checking(동적 자료형 검사)로 나눌 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;좀 더 깊게 들어가서 언어 명세가 좀 더 엄격한 Type checking을 요구할 경우 Strong type checking과 Weak type checking으로 나눌 수 있는데 이는 여기서 다루지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;1-static-type-checking-&quot;&gt;1. Static type checking&lt;/h3&gt;
&lt;p&gt;자료형 검사를 컴파일 시간에 하는 경우이다. 경우에 따라 Static binding(정적 바인딩)이라고 표현하는 경우도 보았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Static type checking을 하는 언어는 Ada, C, C++, C#, Objective-C, Java, Fortran, Haskell, Go, Perl, Pascal, Scala 등이 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;코딩 시 변수를 만들 때 자료형을 지정해줘야 하고 그 자료형은 고정된다. 예를 들어, 정수형으로 정의한 한 변수는 Type casting(형변환)을 하지 않는 이상 영원히 정수형이다. 컴파일 시간에 자료형 검사를 하므로 많은 자료형 오류가 개발주기의 초기에 잡힐 수 있다. 오직 컴파일 시간에 결정될 수 있는 자료형 정보만을 평가하지만 가능한 모든 입력에 대해 검사를 할 수 있고 자료형이 고정되있므로 매번 자료형 검사를 할 필요가 없다.&lt;/p&gt;
&lt;h3 id=&quot;2-dynamic-type-checking&quot;&gt;2. Dynamic type checking&lt;/h3&gt;
&lt;p&gt;자료형 검사를 실행 시간에 하는 경우이다. 경우에 따라 Dynamic binding(동적 바인딩)이라고 표현하는 경우도 보았다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Dynamic type checking을 하는 언어는 JavaScript, Lisp, PHP, Perl, Python, Ruby, Smalltalk, Clojure 등이 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Dynamic type checking language에서 값은 자료형을 가지고 있지만 변수는 그렇지 않다. 변수는 모든 자료형의 값을 다 가질 수 있다. 일반적으로 모든 런타임 개체가 자료형 정보를 갖고 있다. 런타임에서 타입에 대한 결정을 할 수 있기 때문에 더 많은 선택과 변화, 적응이 가능하다. 다만 이는 양날의 검으로 런타임에서 예상치 못한 타입의 값이 들어와서 TypeError를 발생할 수도 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-&quot;&gt;3. 주의점&lt;/h3&gt;
&lt;p&gt;Static type checking과 Dynamic type checking은 상호 배제적인 개념이 아니다. Static type checking language에서도 런타임에서 검사를 진행한다. 런타임에서만 제공되는 정보 또한 존재하기 때문에 그런 것은 컴파일 시간에서 판단할 수 없기 때문이다. 그리고 Perl은 두 곳에 모두 포함되어 있는데 기본이 아닌 사용자 정의 자료형에 대해서는 Dynamic type checking을 하고 스칼라, 배열, 해시 및 서브루틴의 구별에 대해서는 Static type checking을 한다. 이런 경우도 있으니 type checking으로 언어를 양분하는 경우는 없어야 한다.&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발상식</category>
<category>dynamic check</category>
<category>static check</category>
<category>type check</category>
<category>Type checking</category>
<category>동적 타입</category>
<category>동적 타입 언어</category>
<category>자료형</category>
<category>자료형 검사</category>
<category>자료형 체크</category>
<category>정적 타입</category>
<category>정적 타입 언어</category>
<category>타입 체크</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/69</guid>
<comments>https://mellonia-lab.tistory.com/69#entry69comment</comments>
<pubDate>Fri, 06 Apr 2018 10:10:07 +0900</pubDate>
</item>
<item>
<title>blocking&amp;non-blocking, sync&amp;async</title>
<link>https://mellonia-lab.tistory.com/68</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;Node.js를 공부하다보면 간혹 비동기 입출력을 non-blocking I/O라고 설명한 것을 볼 수 있다.&lt;br /&gt;흔히 blocking은 동기, non-blocking은 비동기 이런 식으로 생각하기 쉬운데 이들은 조금씩 다른 개념이다.&lt;br /&gt;나도 대충은 알고 있었고 그것이 완전히 틀린 것도 아니지만 막상 정확하게 설명하라고 하면 할 수 없었다.&lt;br /&gt;구글에 검색하여 아래와 같은 이미지를 찾았는데 저것만으로는 설명이 부족해서 알아먹기가 힘들다.&lt;br /&gt;그래서 저 네 가지 경우에 대해서 각각의 개념부터 살펴보고 설명하고자 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;image1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1wsn7qkOrz7Nb8lz45thzET_MV40GBe3R&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-blocking&quot;&gt;1. Blocking&lt;/h3&gt;
&lt;p&gt;앱이 커널에 시스템 콜을 보낸다. 이 때 커널은 해당 콜에 대해 콜의 내용을 다 수행하고 나서 리턴한다. 리턴값이 돌아오기 전까지 앱은 놀고있다. 즉, 커널이 시스템 콜을 처리할 때까지 앱에게 제어권을 넘겨주지않고 기다리게 만드는 것이다.&lt;/p&gt;
&lt;h3 id=&quot;2-nonblocking&quot;&gt;2. NonBlocking&lt;/h3&gt;
&lt;p&gt;앱이 커널에 시스템 콜을 보낸다. 이 때 커널은 이 콜을 즉시 처리할 수 없더라도 리턴하여 Block되는 것을 막는다. 리턴한 후에 작업을 수행한다. 그러므로 앱은 리턴이 왔으므로 동작할 수 있다. 그러나 리턴값이 불완전할 수 있다.&lt;/p&gt;&lt;p&gt;쉽게 말해서 커널이 받은 시스템 콜을 바로 리턴해서 앱으로 제어권을 넘겨주어 앱이 다른 일을 할 수 있도록 만드는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-&amp;gt; Blocking/Non-Blocking은 시스템 콜이 바로 리턴되냐 아니냐가 관건이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-synchronous&quot;&gt;3. Synchronous&lt;/h3&gt;
&lt;p&gt;순서가 정해져있다.&lt;br /&gt;앱은 첫번째 일이 다 수행된 후 두번째 일을 요청하고 커널도 첫번째 일을 다 처리한 후 두번째 일을 처리한다. 즉, 앱 자신이 시스템 콜의 처리 완료 여부를 계속 신경쓰고 있다.&lt;/p&gt;
&lt;h3 id=&quot;4-asynchronous&quot;&gt;4. Asynchronous&lt;/h3&gt;
&lt;p&gt;순서가 정해져있지 않다.&lt;br /&gt;앱은 첫번째 일의 완료와 상관없이 두번째 일을 요청하고 커널도 첫번째 일이 다 처리되지 않더라도 두번째 일을 처리하기 시작한다. 두번째 일을 먼저 리턴할 수 있다. 시스템 콜에 콜백 함수를 전달해서 콜 처리가 완료되면 콜백 함수를 실행하여 완료를 알려준다. 즉, 앱은 시스템 콜의 처리 완료 여부를 신경쓰지 않고 이벤트 핸들러(콜백 함수)가 처리 완료 여부를 알려준다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-&amp;gt; Synchronous/Asynchronous는 시스템 콜의 처리 완료 여부를 누가 신경쓰냐가 관건이다.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;우리는 Blocking&amp;amp;Synchronous와 NonBlocking&amp;amp;Asynchronous에 익숙하다.&lt;br /&gt;하지만 NonBlocking&amp;amp;Synchronous와 Blocking&amp;amp;Asynchronous는 생소한 개념이고 뚜렷하게 생각나지 않는다. 그렇다면 각각의 개념을 되짚어보자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;Blocking&amp;nbsp;:&amp;nbsp;콜&amp;nbsp;처리&amp;nbsp;완료&amp;nbsp;후&amp;nbsp;리턴.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;NonBlocking&amp;nbsp;:&amp;nbsp;콜&amp;nbsp;처리&amp;nbsp;완료와&amp;nbsp;무관하게&amp;nbsp;바로&amp;nbsp;리턴.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;Sync&amp;nbsp;:&amp;nbsp;일에&amp;nbsp;순서가&amp;nbsp;있고&amp;nbsp;앱(호출하는&amp;nbsp;곳)이&amp;nbsp;직접&amp;nbsp;처리&amp;nbsp;완료&amp;nbsp;여부를&amp;nbsp;신경&amp;nbsp;씀.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--text syntax--plain syntax--null-grammar&quot;&gt;&lt;span&gt;Async&amp;nbsp;:&amp;nbsp;일에&amp;nbsp;순서가&amp;nbsp;없고&amp;nbsp;콜(호출되는&amp;nbsp;것)에&amp;nbsp;전달된&amp;nbsp;콜백이&amp;nbsp;처리&amp;nbsp;완료&amp;nbsp;여부를&amp;nbsp;신경&amp;nbsp;씀.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt=&quot;image2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1BWcrH_GWRxUb1l3hvPOSyZwQVpBGFmOc&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-blocking-synchronous&quot;&gt;5. Blocking &amp;amp; Synchronous&lt;/h3&gt;
&lt;p&gt;시스템 콜을 날린 후 처리가 완료될 때 까지 아무 작업도 못하고 대기. 다른 작업을 할 수도 없고 다음 콜도 보낼 수 없다. 모든 콜이 차곡차곡 순서대로 완료된다.&lt;/p&gt;
&lt;h3 id=&quot;6-blocking-asynchronous&quot;&gt;6. Blocking &amp;amp; Asynchronous&lt;/h3&gt;
&lt;p&gt;시스템 콜을 날린 후 콜백 함수가 리턴될 때 까지 아무 작업도 못하고 대기.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-&amp;gt; 둘의 큰 차이가 없는 것 같다... &lt;del&gt;아직 확실히는 모르겠지만 Blocking&amp;amp;Asynchronous 모델을 사용하는 것은 없어보인다...(불확실한 건 기각)&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-nonblocking-synchronous&quot;&gt;7. NonBlocking &amp;amp; Synchronous&lt;/h3&gt;
&lt;p&gt;시스템 콜이 바로 리턴되서 다른 작업을 수행할 수 있지만 콜의 처리가 완료되지 않으면 다음 콜을 보내지 않는다. Sync이니까 앱이 커널에게 콜 처리 완료 여부를 묻거나 기다릴 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;8-nonblocking-asynchronous&quot;&gt;8. NonBlocking &amp;amp; Asynchronous&lt;/h3&gt;
&lt;p&gt;시스템 콜이 바로 리턴되서 다른 작업을 수행할 수 있고 콜의 처리가 완료되지 않더라도 다음 콜을 보낼 수 있다. Async이므로 콜백 함수가 콜 처리 완료 여부를 알려준다. 보낸 콜이 순서와 무관하게 완료돼서 돌아올 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-&amp;gt; NonBlocking이므로 다른 작업을 수행할 수 있지만 다음 콜을 바로 보낼 수 있냐 없냐의 차이가 있다.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;성능적으로 가장 뛰어난 모델은 NonBlocking&amp;amp;Aynchronous I/O 모델이다.&lt;br /&gt;그리고 맨 위의 그림을 보면 Blocking&amp;amp;Asynchronous의 예시로 I/O Multiplexing이 있는데 프로세스나 스레드를 만들지 않고 여러 소켓에 대해 병행적으로 입출력을 처리하는 것이다. 해당 부분에 대해서는 Blocking&amp;amp;Synchronous와 무슨 차이가 있는지와 함께 추가적인 학습이 필요하다.&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개발상식</category>
<category>Async</category>
<category>Asynchronous</category>
<category>blocking</category>
<category>i/o 모델</category>
<category>io 모델</category>
<category>Node</category>
<category>node.js</category>
<category>Non-Blocking</category>
<category>nonblocking</category>
<category>Sync</category>
<category>Synchronous</category>
<category>논블로킹</category>
<category>동기</category>
<category>블로킹</category>
<category>비동기</category>
<category>입출력모델</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/68</guid>
<comments>https://mellonia-lab.tistory.com/68#entry68comment</comments>
<pubDate>Fri, 06 Apr 2018 09:56:47 +0900</pubDate>
</item>
<item>
<title>Function</title>
<link>https://mellonia-lab.tistory.com/67</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;&lt;img alt=&quot;logo&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1B5mGWG4Qe6aic7JkLKQPElV58Pt8H6AR&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;본 카테고리는 JavaScript에 대해 다룬다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;개요&lt;/li&gt;
&lt;li&gt;호출&lt;/li&gt;
&lt;li&gt;반환&lt;/li&gt;
&lt;li&gt;매개변수&lt;/li&gt;
&lt;li&gt;메소드&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;함수 표현&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;

&lt;h1 id=&quot;1-&quot;&gt;1. 개요&lt;/h1&gt;
&lt;p&gt;함수는 작업을 수행하거나 값을 계산하는 등 하나의 단위로 실행되는 문의 집합이다. 일종의 Sub Program이라 생각해도 된다. 함수 안에 여러 기능이 들어가도 되지만 하나의 함수에는 하나의 기능을 넣는 것이 보다 함수의 강력함과 재사용성을 활용하는 데 있어서 바람직하다. 함수는 이름과 내용, 매개변수, 반환 값 등으로 구성이 된다.&lt;/p&gt;
&lt;h2 id=&quot;1-1-function-declaration-&quot;&gt;1.1. 함수 선언(Function declaration)&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--function syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--function syntax--js&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--function syntax--js&quot;&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--parameters syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;param1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;params2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;paramN&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--begin syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;statements&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--end syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;'함수 선언(Function declaration)'은 함수를 생성하기 위한 가장 기본적인 방법으로 함수의 이름과 매개변수, 함수 Body로 구성된다. 함수의 Body는 함수를 구성하는 문의 집합이다. 함수 선언은 함수의 이름이 존재하여 지속적으로 호출이 가능하므로 재사용이 많은 함수를 생성할 때 적합하다.&lt;/p&gt;
&lt;h1 id=&quot;2-call-&quot;&gt;2. 호출(Call)&lt;/h1&gt;
&lt;p&gt;함수는 선언만으로는 실행되지 않는다. 함수의 이름을 호출해서 실행할 수 있다.&lt;br /&gt;그리고 JavaScript에서는 &lt;strong&gt;함수도 객체(Object)&lt;/strong&gt;다. 그렇기 때문에 다른 변수에 대입할 수 있다.&lt;br /&gt;그러므로 함수 호출과 참조의 차이를 알고 둘을 구분하여 사용할 줄 알아야한다.&lt;br /&gt;함수의 이름 뒤에 ()가 붙으면 함수가 호출되어 함수 Body를 실행한다.&lt;br /&gt;단순히 함수의 이름만을 쓴다면 해당 함수를 참조할 뿐 함수가 실행되지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;call1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1ZmV23hMnzlaUZveSbXEW6dnageejoUFb&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이와 같이 함수를 참조할 수 있는 것에서 JavaScript의 유연함을 볼 수 있다. 함수의 이름을 다른 변수에 할당한다면 해당 변수로 그 함수를 호출할 수 있다. 일반 변수만 아니라 객체의 변수 및 배열의 요소까지 가능하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;call2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1awbB_q98QCkrfkCzzVQxbZybO043p1-S&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;하지만 주의해야할 점이 하나 있다. 함수 선언과 동시에 변수에 참조시킬 경우 함수의 이름으로는 호출이 불가능하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;call3&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1IQ2Zus341Hk5FBq8iGr9dEtV8fZf1aqA&quot;&gt;    &lt;img alt=&quot;call4&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1P4bwwN_VRIRZzYA22PeET0tt3QxQTbJW&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위의 예제에서 차이를 느낄 수 있다.&lt;br /&gt;다만 함수 선언의 경우 나중에 호출할 생각으로 재사용성을 고려하여 함수를 생성하므로 위와 같이 굳이 변수에 참조시키는 것은 바람직하지 못하다.&lt;/p&gt;
&lt;h1 id=&quot;3-return-&quot;&gt;3. 반환(return)&lt;/h1&gt;
&lt;p&gt;함수 호출도 표현이고 앞서 표현에서 학습했듯 표현은 값이 된다. 함수 호출의 값을 반환 값이라고 하며 함수 Body 내에서 'return' 키워드를 이용해 표현한다. return을 만나면 그 즉시 함수를 종료하고 값을 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;return1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1BAHqckhEPBp1SvwKslSrqr0v74vBDvTs&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위의 예제를 통해 return 키워드를 만나면 함수를 종료하고 값을 반환한다는 것을 확인할 수 있다.&lt;br /&gt;그렇다면 만약 return을 쓰지 않는다면 함수의 반환 값은 무엇일까?&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;return2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=10kia9hQDlSz9s_NSfrpU228PLqPBEbHx&quot;&gt; &lt;img alt=&quot;return3&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1KhOzrdWo9U8dM-wKQuMGsaSM_Nry0C__&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 return을 쓰지 않거나 아무 것도 반환하지 않는다면 'undefined'를 반환한다.&lt;/p&gt;
&lt;h1 id=&quot;4-parameter-&quot;&gt;4. 매개변수(Parameter)&lt;/h1&gt;
&lt;p&gt;함수를 호출하면 값을 반환한다는 사실을 알았다. 이는 함수가 데이터를 전달하는 것이다.&lt;br /&gt;반대로 함수에게 데이터를 전달하려면 매개변수(Parameter)를 이용해야 한다. 이는 함수를 호출하면서 전달할 수 있다. 아래의 예시로 확인하도록 하자.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;param&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1BThPoObWff1XnJgcdrT_YiT3sJ-X_E85&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-1-default-&quot;&gt;4.1. Default 매개변수&lt;/h2&gt;
&lt;p&gt;ES6에서 매개변수에 default value를 부여하는 기능이 도입됐다. 일반적으로는 매개변수에 데이터를 전달하지 않으면 자동으로 undefined가 할당된다. 예시를 통해 확인해보자.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;defaultValue1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1VmsfyVytPSUvF6qxuZeYv2NTR8TodSHd&quot;&gt; &lt;img alt=&quot;defaultValue2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1CKLmzpTNmYwr-UOt5YiXtPBOMZHdrNgq&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;defaultValue3&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1E1kEr3s_8y-ap6em7BERfokNUuEXlNUG&quot;&gt; &lt;img alt=&quot;defaultValue4&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1eReBf3Y5IR7zel8z6nNx8a1rAvoBMMzW&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-2-overloading-&quot;&gt;4.2. 오버로딩(Overloading)&lt;/h2&gt;
&lt;p&gt;'메소드 오버로딩'이라고 다른 언어에는 매개변수의 타입, 갯수에 의해 같은 이름의 함수를 여러 개 이용할 수 있는 문법이 있다. 하지만 JavaScript에는 그것이 존재하지 않는다. 하나의 함수가 있다면 그 함수에 매개변수를 몇 개를 전달하든 똑같은 함수를 호출한다. 매개변수가 존재하는데 전달하지 않는다면 4.1. Default value에서 배웠듯 자동으로 매개변수에 'undefined'가 할당된다.&lt;/p&gt;
&lt;h2 id=&quot;4-3-call-by-value-call-by-reference&quot;&gt;4.3. Call by value, Call by reference&lt;/h2&gt;
&lt;p&gt;JavaScript는 크게 원시 타입과 객체(참조 타입)으로 나눈다고 알고 있다. 매개 변수로 전달되는 데이터 또한 그 두 가지에서 벗어나지 않는데 원시 타입을 전달할 때와 객체를 전달할 때 차이가 존재한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;원시 타입을 전달하는 방법을 'Call by value'라 하며 이는 값을 복사하여 전달한다.&lt;br /&gt;즉, 함수 내부에서 전달된 값을 아무리 바꿔도 원래 데이터에는 전혀 변화를 줄 수 없는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;callbyValue&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1Pk7DH21OEf_bQt7l2kDmamxXYbsvsVjh&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;객체를 전달하는 방법을 'Call by reference'라 하며 이는 객체의 참조를 전달한다.&lt;br /&gt;즉, 함수 내부에서 객체의 데이터를 수정한다면 원래 객체의 데이터 또한 변하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;callbyRefer&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1kEhVWI3gTDYpEklcykbTTc3XfPBNCt2W&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-4-&quot;&gt;4.4. 나머지 매개변수&lt;/h2&gt;
&lt;p&gt;나머지 매개변수를 통해 배열의 불확실한 개수의 인수까지 나타낼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;%&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1-kmswVZb_DnIzA-R6nqb8nF5FqaKzXcM&quot;&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-&quot;&gt;5. 메소드&lt;/h1&gt;
&lt;p&gt;일반적인 함수와 달리 객체의 property인 함수를 메소드(Method)라고 부른다.&lt;br /&gt;객체 리터럴을 이용한다면 ES5까지는 아래와 같이 객체에 메소드를 추가할 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;method1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1maDQS-U0QYMX5L4-2HnCBKnRHiBbpIqN&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;하지만 ES6부터는 좀 더 간결하게 아래와 같이 메소드 추가가 가능하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;method2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1V2vYFcNI2MhrdXMdsVTJ64bB_bkb4k2G&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;6-this&quot;&gt;6. this&lt;/h1&gt;
&lt;p&gt;this는 객체지향 프로그래밍과 밀접한 관련을 가진 키워드이다. 그와 관련된 이야기는 객체를 다룰 때 포스팅하도록하고 이번에는 함수와 관련된 this에 대해 다루겠다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;this는 자신을 호출한 메소드에 종속된다. 즉, 호출한 메소드를 소유하는 객체가 되는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;this1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1YhU4adCICfPT8-kXqFCDoA4IhQAzl2d5&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위의 코드에서 introduce 메소드에서 this를 포함하고 있다. 그러므로 this는 introduce 메소드를 소유한 myself 객체가 된다고 생각하면 된다. 단순히 introduce가 myself의 객체라서 Mellonia와 CSE가 표현되는 것이 아니다. myself가 introduce를 호출했기 때문에 Mellonia와 CSE가 표현되는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;this2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=166Q69hGy3WyVomMvwN9_lbDS-0ezs5RG&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;john.introduce에 myself.introduce를 할당하고 introduce의 주체를 john으로 하여 호출했다.&lt;br /&gt;이제는 Mellonia와 CSE가 아닌 John과 Math가 출력된다. 이처럼 this는 호출 메소드를 소유한 객체라 생각하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;this3&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1j9fytZpGmhCHL4FKIS9HMedQhRH8YBu1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;다만 위와 같이 메소드 안에 중첩된 함수에서 this를 이용할 경우 제대로 바인딩이 되지 않는 것을 볼 수 있다.&lt;br /&gt;이는 아래에서 설명할 화살표 함수로 해결이 가능하다.&lt;/p&gt;
&lt;h1 id=&quot;7-&quot;&gt;7. 함수 표현&lt;/h1&gt;
&lt;p&gt;맨 앞에서 함수를 생성하는 방법으로 함수 선언을 살펴봤다. 함수를 생성하는 방법으로 '함수 표현(Function expression)'이란 것이 더 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--function syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--function syntax--js&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;[name]&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--parameters syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;param1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;params2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;paramN&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--begin syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;statements&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--end syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;함수 표현은 이름이 옵션이다. 그러므로 이름이 존재하지 않는 함수(익명 함수)를 만들 수 있다. 그렇다면 호출은 어떻게 할까? 그는 변수에 함수를 할당하는 식으로 해결할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;funcExp1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1h7Cxoy-UnLA8K0gtgYmHnvaBBuudegaj&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위는 함수 표현을 이용해 함수를 생성하여 add라는 변수에 할당했다. 그리고 그 변수를 통해 함수를 호출했다.&lt;/p&gt;
&lt;p&gt;함수 표현을 이용한다면 이런 방식으로 함수 호출이 가능하다. 이처럼 다른 곳에 할당하거나 다른 함수에 넘길 목적으로 함수를 생성할 것이라면 함수 선언보다는 함수 표현이 좀 더 적합하다.&lt;/p&gt;
&lt;p&gt;그렇다면 함수 생성과 동시에 실행하는 방법은 없을까?&lt;br /&gt;있다. 그것을 '즉시 실행 함수(Immediately-Invoked Function Expression, IIFE)'라고 한다.&lt;/p&gt;
&lt;h2 id=&quot;7-1-&quot;&gt;7.1. 즉시 실행 함수&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--function syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--function syntax--js&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;[name]&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--parameters syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;param1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;param2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;paramN&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--begin syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;statments&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--end syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;param1&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;param2&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;paramN&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;또는&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--function syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--function syntax--js&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;[name]&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--parameters syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;param1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;params2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;paramN&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--begin syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;statements&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--end syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;param1&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;params2&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;paramN&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;일반적인 함수 표현은 함수를 만들어 변수에 할당하고 그 변수의 이름으로 함수를 호출하는데 즉시 실행 함수는 그런 과정 없이 함수 생성과 동시에 바로 호출이 가능하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;iife1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1H6c_sce24-C9G02_Vy0zToScUGkU_RyI&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;즉시 실행 함수 또한 함수이기 때문에 변수에 할당하여 참조할 수 있고 반환 값을 변수에 할당할 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;iife2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1hEDPgfqlrDpGSf1H_FQDGHS3AAz84gU4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위의 예제는 즉시 실행 함수를 변수에 할당했다. 변수 이름으로 지속적으로 이용이 가능하다.&lt;br /&gt;( 이럴거면 즉시 실행되는 것 말고는 일반 함수를 변수에 할당하는 것과 뭐가 다르지? )&lt;br /&gt;즉시 실행히 필요하며 지속적으로 함수를 사용해야할 경우 즉시 실행 함수를 변수에 할당하여 쓰면 될 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;iife3&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=14PbCSGIz54kc55_Wj91qV0qgRIHZ5doC&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;위의 예제는 즉시 실행 함수의 반환 값을 변수에 할당했다. 변수 이름으로 지속적으로 이용이 가능하다.&lt;br /&gt;즉시 실행이 필요하며 항상 고정된 값이 필요하다면 즉시 실행 함수의 반환 값을 변수에 할당하여 쓰면 될 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;iife4&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1gtZ_1yCqXFUvMdR--gsA_YfllY698FeM&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이름이 있는 즉시 실행 함수의 경우 이름으로 함수의 재호출이 불가능하다.&lt;br /&gt;즉시 실행 함수는 한 번의 실행만 필요로 하는 초기화 코드에 주로 사용된다.&lt;/p&gt;
&lt;h2 id=&quot;7-2-&quot;&gt;7.2. 화살표 함수&lt;/h2&gt;
&lt;p&gt;ES6에서 새로 도입된 문법으로 많이 환영받고 두루 쓰이는 문법이다. function이라는 단어와 중괄호의 숫자를 줄여 보다 깔끔하고 쌈박한 코드를 만들기 위해 고안된 단축 문법이다. &lt;strong&gt;화살표 함수는 언제나 익명 함수&lt;/strong&gt;다.&lt;br /&gt;화살표 함수에는 세 가지 문법이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function 생략 가능&lt;/li&gt;
&lt;li&gt;매개변수가 하나 뿐이라면 괄호도 생략 가능&lt;/li&gt;
&lt;li&gt;함수 Body가 표현식 하나라면 중괄호와 return도 생략 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--function syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--function syntax--js&quot;&gt;&lt;span&gt;square&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--function syntax--js&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--parameters syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--variable syntax--parameter syntax--function syntax--js&quot;&gt;&lt;span&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--begin syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--function syntax--body syntax--end syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;화살표&amp;nbsp;함수&amp;nbsp;적용&amp;nbsp;전&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--function syntax--arrow syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--function syntax--js&quot;&gt;&lt;span&gt;square&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--parameters syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--function syntax--arrow syntax--js&quot;&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;화살표&amp;nbsp;함수&amp;nbsp;적용&amp;nbsp;후&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;위는 문법을 차례대로 적용시켜서 만든 화살표 함수다. 코드가 짧게 줄어들었다.&lt;br /&gt;단순히 하나의 함수에 적용시켜 예시를 보여줬지만 이를 프로그램 전반에 사용한다면 많은 양의 코드를 줄일 수 있다. 화살표 함수는 주로 익명 함수를 만들어 다른 곳에 전달하려 할 때 가장 유용하다.&lt;/p&gt;
&lt;p&gt;그리고 일반 함수와 큰 차이는 위의 this에서 생긴 문제를 해결할 수 있다는 점이다.&lt;br /&gt;화살표 함수를 이용해 메소드 안에 중첩된 함수에서도 this를 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;arrow&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1vQGVf3Dd5T_i_TWk4ri5rLDzVWjeHabe&quot;&gt;&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>JavaScript</category>
<category>arrow function</category>
<category>function</category>
<category>function declaration</category>
<category>function expression</category>
<category>javascript</category>
<category>JavaScript arrow</category>
<category>JavaScript arrow function</category>
<category>javascript function</category>
<category>JavaScript IIFE</category>
<category>JavaScript this</category>
<category>JavaScript 매개변수</category>
<category>JavaScript 즉시 실행 함수</category>
<category>JavaScript 함수</category>
<category>js</category>
<category>js function</category>
<category>This</category>
<category>자바스크립트</category>
<category>자바스크립트 call by reference</category>
<category>자바스크립트 call by value</category>
<category>자바스크립트 this</category>
<category>자바스크립트 디폴트 매개변수</category>
<category>자바스크립트 매개변수</category>
<category>자바스크립트 메소드 오버로딩</category>
<category>자바스크립트 오버로딩</category>
<category>자바스크립트 즉시 실행 함수</category>
<category>자바스크립트 함수</category>
<category>자바스크립트 함수 선언</category>
<category>자바스크립트 함수 표현</category>
<category>자바스크립트 함수 호출</category>
<category>자바스크립트 화살표</category>
<category>자바스크립트 화살표 함수</category>
<category>함수</category>
<category>함수 선언</category>
<category>함수 표현</category>
<category>화살표 표기법</category>
<category>화살표 함수</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/67</guid>
<comments>https://mellonia-lab.tistory.com/67#entry67comment</comments>
<pubDate>Thu, 05 Apr 2018 17:51:04 +0900</pubDate>
</item>
<item>
<title>Expression &amp; Operator</title>
<link>https://mellonia-lab.tistory.com/64</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;&lt;img alt=&quot;logo&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1B5mGWG4Qe6aic7JkLKQPElV58Pt8H6AR&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;본 카테고리는 JavaScript에 대해 다룬다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;표현&lt;/li&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;

&lt;h1 id=&quot;1-expression-&quot;&gt;1. 표현(Expression)&lt;/h1&gt;
&lt;p&gt;표현은 &lt;strong&gt;값으로 평가할 수 있는 문&lt;/strong&gt;을 말한다. 우리는 이제 평가라는 단어를 잘 기억해야한다.&lt;br /&gt;표현은 두 가지 방식이 있다. 값을 할당하는 것과 단순히 그 자체가 값인 것. 예를 들자면 전자는 'x = 10'이고 후자는 '10 + 20'이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;할당하는 것이 어떻게 값으로 평가받냐는 의문을 가질 수 있는데 x에 10이란 수를 할당하여 x가 10이란 값으로 평가받으니까 그렇다 생각하면 이해가 한결 편하다. 'x = 4 + 10'과 같은 꼴은 앞서 말한 두 가지 방식이 다 반영되어있다.&lt;/p&gt;
&lt;p&gt;전자를 할당 표현, 후자를 연산자 표현이라 부른다. 표현은 대부분 연산자 표현이다. 변수와 상수, 리터럴은 그 자체가 표현이다. 왜냐면 값을 갖고 있으니까!&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n1&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n2&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;n1&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;n2&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n1&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;위의 코드를 순서대로 분석해보자.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n1&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n2&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;n1&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;원래&amp;nbsp;문&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n1&amp;nbsp;=&amp;nbsp;20;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;*&amp;nbsp;2를&amp;nbsp;평가함.(연산자&amp;nbsp;표현)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;20;&amp;nbsp;&amp;nbsp;&amp;nbsp;n1&amp;nbsp;=&amp;nbsp;20;&amp;nbsp;할당&amp;nbsp;평가.(할당&amp;nbsp;표현)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;n2&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;n1&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;원래&amp;nbsp;문&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;20;&amp;nbsp;&amp;nbsp;&amp;nbsp;n2&amp;nbsp;=&amp;nbsp;n1(20);&amp;nbsp;할당&amp;nbsp;평가.&amp;nbsp;이&amp;nbsp;값은&amp;nbsp;할당하지도&amp;nbsp;사용하지도&amp;nbsp;않으니&amp;nbsp;버려짐.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;조금 어려울 수도 있는데, 연산자 표현은 그 연산의 결과값이 평가되고 할당 표현은 값을 할당하므로 그 할당값이 평가된다. 어찌되었든 값으로 평가받는다고 생각하면 된다.&lt;/p&gt;
&lt;h1 id=&quot;2-operator-&quot;&gt;2. 연산자(Operator)&lt;/h1&gt;
&lt;p&gt;연산자는 하나 혹은 두 개의 피연산자를 통해 새로운 값을 만들어내는 행위의 주체를 뜻한다.&lt;/p&gt;
&lt;h2 id=&quot;2-1-arithmetic-operator-&quot;&gt;2.1. 산술 연산자(Arithmetic operator)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;연산자&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;예제&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+, -, *, /&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;가감승제&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;굳이 들 필요가...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;%&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;나머지&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12 % 5 // 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;단항 부정&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;let x = 5;  -x // 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;숫자화&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&quot;3&quot; // 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;++&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;전위 혹은 후위 증가&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;아래 참조&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;--&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;전위 혹은 후위 감소&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;아래 참조&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;전위(prefix) 연산은 선 연산 후 평가, 후위(postfix) 연산은 선 평가 후 연산을 한다. 연산은 부호에 따라 1이 증가하거나 감소시킨다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;x&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--object syntax--comma syntax--js&quot;&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;y&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;y&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--increment syntax--js&quot;&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--increment syntax--js&quot;&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;y&amp;nbsp;=&amp;nbsp;10&amp;nbsp;+&amp;nbsp;12;&amp;nbsp;&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--type syntax--object syntax--console syntax--js&quot;&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--method-call syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--method syntax--period syntax--js&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--support syntax--function syntax--console syntax--js&quot;&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--arguments syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;22&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;y&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;y&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--increment syntax--js&quot;&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;x&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--decrement syntax--js&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;y&amp;nbsp;=&amp;nbsp;22&amp;nbsp;+&amp;nbsp;13&amp;nbsp;+&amp;nbsp;13;&amp;nbsp;&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--type syntax--object syntax--console syntax--js&quot;&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--method-call syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--method syntax--period syntax--js&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--support syntax--function syntax--console syntax--js&quot;&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--arguments syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;48&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;y&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;y&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--decrement syntax--js&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--decrement syntax--js&quot;&gt;&lt;span&gt;--&lt;/span&gt;&lt;/span&gt;&lt;span&gt;x&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--increment syntax--js&quot;&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;y&amp;nbsp;=&amp;nbsp;48&amp;nbsp;+&amp;nbsp;11&amp;nbsp;-&amp;nbsp;11;&amp;nbsp;&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--type syntax--object syntax--console syntax--js&quot;&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--method-call syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--method syntax--period syntax--js&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--support syntax--function syntax--console syntax--js&quot;&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--arguments syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--type syntax--object syntax--console syntax--js&quot;&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--method-call syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--method syntax--period syntax--js&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--support syntax--function syntax--console syntax--js&quot;&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--arguments syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;48&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;스스로 능숙하게 결과값을 낼 수 있다면 증감 연산을 잘 이해하고 있다고 생각하면 된다.&lt;/p&gt;
&lt;h2 id=&quot;2-2-logical-operator-&quot;&gt;2.2. 논리 연산자(Logical operator)&lt;/h2&gt;
&lt;p&gt;JavaScript에는 true와 false말고도 true로 쳐주는 값(truthy)과 false로 쳐주는 값(falsy)이 있다.&lt;br /&gt;사실 불리언 값들만 연산을 딱딱 하면 좋지만 그렇지 않은 경우도 많기 때문에 true와 false외의 값들을 true나 false로 쳐줘야할 때가 있다. 거짓으로 쳐주는 값은 undefined, null, 0, NaN, ''(빈 문자열)이 있다.( 딱 봐도 거짓 같아 보인다 ) 이 외의 값들은 모두 참으로 쳐주는 값이다. 이들이 논리 연산자의 피연산자로 쓰일 때는 값에 따라 true 혹은 false로 여겨진다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;논리 연산자는 보통 불리언 값과 함께 쓰이며 AND, OR, NOT이 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Y&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X &amp;amp;&amp;amp; Y ( AND )&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;fasle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;fasle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Y&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X || Y ( OR )&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;fasle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;fasle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;!X ( NOT )&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;2-2-1-short-circuit-evaluation-&quot;&gt;2.2.1. 단축 평가(Short-circuit evaluation)&lt;/h3&gt;
&lt;p&gt;위의 진리표를 보고 눈치챌 수도 있겠지만 모든 논리 연산이 두 값의 비교가 다 필요할까? 아니다.&lt;br /&gt;선행되는 하나의 값만으로도 연산의 결과는 나올 수 있다. 불 보듯 뻔한 결과라면 굳이 연산을 할 필요가 없다. 이러한 메커니즘으로 동작하는 것이 단축 평가이다. 피연산자가 하나라도 불리언 값이 아닐 경우 결과를 결정한 값이 반환된다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--const syntax--js&quot;&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--other syntax--js&quot;&gt;&lt;span&gt;sunFromEast&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--language syntax--boolean syntax--true syntax--js&quot;&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;num&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--const syntax--js&quot;&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--other syntax--js&quot;&gt;&lt;span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;sunFromEast&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--logical syntax--js&quot;&gt;&lt;span&gt;||&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;num&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--increment syntax--js&quot;&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;위와 같은 문에서 result는 sunFromEast가 true이므로 항상 true이기 때문에 num++ 연산이 진행되지 않는다. 그러므로 num은 여전히 0이다. 단축 평가는 truthy와 falsy의 논리 연산에도 쓰인다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Y&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X &amp;amp;&amp;amp; Y ( AND )&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Y&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;X || Y ( OR )&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;falsy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;truthy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-3-assignment-operator-&quot;&gt;2.3. 대입 연산자(Assignment operator)&lt;/h2&gt;
&lt;p&gt;대입 연산자는 변수에 값을 할당한다. 등호의 좌측에 있는 것은 변수, property, 배열 요소 중 하나여야 한다. 이들을 l-value(left-value)라고 한다.( 특별한 뜻은 없고 왼쪽에 있어서... ) 복합 대입 연산자라고 대입 연산과 그 외의 연산을 합친 것이 있다. 결과적으로 연산 후 대입을 실행한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;이름&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;복합 대입 연산자&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;덧셈 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x += y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x + y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;뺄셈 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x -= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x - y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;곱셈 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x *= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x * y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;나눗셈 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x /= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x / y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;나머지 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x %= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x % y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;좌 이동 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x &amp;lt;&amp;lt;= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x &amp;lt;&amp;lt; y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;우 이동 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x &amp;gt;&amp;gt;= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x &amp;gt;&amp;gt; y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;부호 없는 우 이동 대입&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x &amp;gt;&amp;gt;&amp;gt; y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 논리 곱 연산&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x &amp;amp;= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x &amp;amp; y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 논리 합 연산&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x |= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x | y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 XOR 연산&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x ^= y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x = x ^ y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-4-comparing-operator-&quot;&gt;2.4. 비교 연산자(Comparing operator)&lt;/h2&gt;
&lt;p&gt;비교 연산자는 피연산자들을 비교한다. 동등 비교(Loose equality, == &amp;amp; !=)와 일치 비교(Strict equality, === &amp;amp; !==)와 대소 관계로 세 가지로 나뉜다. &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;두 피연산자가 같은 객체를 가리키거나 같은 값을 갖도록 변환할 수 있다면 동등하다고 한다.&lt;br /&gt;두 피연산자가 같은 객체를 가리키거나 같은 타입이고 값도 같다면 일치한다고 한다.&lt;br /&gt;아래의 예시로 동등과 일치의 차이를 느껴보도록 하자.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--comparison syntax--js&quot;&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--comparison syntax--js&quot;&gt;&lt;span&gt;===&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--const syntax--js&quot;&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--other syntax--js&quot;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;color&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;RED&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--const syntax--js&quot;&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--other syntax--js&quot;&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;color&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;RED&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--const syntax--js&quot;&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--other syntax--js&quot;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--comparison syntax--js&quot;&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;false,&amp;nbsp;객체는&amp;nbsp;유일하다.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--comparison syntax--js&quot;&gt;&lt;span&gt;===&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;false,&amp;nbsp;객체는&amp;nbsp;유일하다.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--comparison syntax--js&quot;&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;c&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--comparison syntax--js&quot;&gt;&lt;span&gt;===&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;c&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;연산자&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;==&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;양 변이 동등한가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;!=&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;양 변이 동등하지 않은가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;===&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;양 변이 일치하는가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;!==&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;양 변이 일치하지 않는가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;, &amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;크다, 작다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;=, &amp;gt;=&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;크거나 같다, 작거나 같다&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-5-bit-operator-&quot;&gt;2.5. 비트 연산자(Bit operator)&lt;/h2&gt;
&lt;p&gt;비트 연산자는 숫자의 비트를 직접 조작한다. 피연산자를 2의 보수 형식으로 저장된 부호가 있는 32비트 정수로 간주한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;연산자&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 AND&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;각 비교 비트가 둘 다 1일 때만 1 반환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;|&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 OR&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;각 비교 비트가 둘 다 0일 때만 0 반환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;~&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 NOT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 반전&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 XOR&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;각 비교 비트가 같은 경우 0, 다른 경우 1 반환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;좌측 시프트&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;좌측으로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;부호 있는 우측 시프트&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;좌측의 데이터들을 우측으로 이동, 부호 있음, 초과되는 것들은 버려짐.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;부호 없는 우측 시프트&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;우측으로 이동, 좌측은 0으로 채움, 부호 없음, 초과되는 것들은 버려짐.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;좌측 시프트는 2를 곱하는 효과가 있고 우측 시프트는 2로 나눈 후 소수점 아래를 버리는 효과가 있다. 비트에서는 1을 true로 0을 false로 생각하면 편하다. 그러면 비트 논리 연산이 한결 이해하기 쉬울 것이다. 글로만 보면 이해가 되지 않으니 예시를 보도록 하자.(특히 시프트)( * MSB가 1이면 음수, 0이면 양수 )&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1110&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--js&quot;&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1100&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;0b1100&amp;nbsp;(12)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1010&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--js&quot;&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b0100&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;0b1110&amp;nbsp;(14)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--js&quot;&gt;&lt;span&gt;~&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1010&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;0b0101&amp;nbsp;(5)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1010&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--js&quot;&gt;&lt;span&gt;^&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1100&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;0b0110&amp;nbsp;(6)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1010&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--shift syntax--js&quot;&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;0b10100&amp;nbsp;(20)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1111&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--shift syntax--js&quot;&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;0b111100&amp;nbsp;(60)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1100&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--shift syntax--js&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;-0b0011&amp;nbsp;(-3),&amp;nbsp;좌측부터&amp;nbsp;차례대로&amp;nbsp;비트가&amp;nbsp;이동된다.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--binary syntax--js&quot;&gt;&lt;span&gt;0b1100&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--bitwise syntax--shift syntax--js&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;1073741821,&amp;nbsp;부호가&amp;nbsp;없고&amp;nbsp;좌측을&amp;nbsp;0부터&amp;nbsp;채우게&amp;nbsp;된다.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;하드웨어를 직접 제어하지 않는다면 비트 연산자를 쓸 일은 많지않다.&lt;/p&gt;
&lt;h2 id=&quot;2-6-string-operator-&quot;&gt;2.6. 문자열 연산자(String operator)&lt;/h2&gt;
&lt;p&gt;문자열 연산자는 문자열 병합을 위한 연산자이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--constant syntax--numeric syntax--decimal syntax--js&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&quot;1010&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--storage syntax--type syntax--var syntax--js&quot;&gt;&lt;span&gt;let&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;str&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--js&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;str&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--assignment syntax--compound syntax--js&quot;&gt;&lt;span&gt;+=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--string syntax--quoted syntax--double syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--begin syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;World&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--string syntax--end syntax--js&quot;&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--entity syntax--name syntax--type syntax--object syntax--console syntax--js&quot;&gt;&lt;span&gt;console&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--method-call syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--delimiter syntax--method syntax--period syntax--js&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--support syntax--function syntax--console syntax--js&quot;&gt;&lt;span&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--arguments syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--comment syntax--line syntax--double-slash syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--comment syntax--js&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&quot;Hello&amp;nbsp;World&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;문자열 연산은 정말 직관적이라 설명할 것이 없다.&lt;/p&gt;
&lt;h2 id=&quot;2-7-&quot;&gt;2.7. 삼항 연산자&lt;/h2&gt;
&lt;p&gt;JavaScript의 삼항 연산자는 유일하다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;condition&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--ternary syntax--js&quot;&gt;&lt;span&gt;?&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--language syntax--boolean syntax--true syntax--js&quot;&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--ternary syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--constant syntax--language syntax--boolean syntax--false syntax--js&quot;&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;condition이 참이라면 ? 뒤를 실행하고 거짓이라면 : 뒤를 실행한다. if...else와 동등한 표현이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;three&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1Mr2mKj3VTqkW1yzLK2z4xXTDZxrqcqTp&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-8-comma-operator-&quot;&gt;2.8. 콤마 연산자(Comma operator)&lt;/h2&gt;
&lt;p&gt;콤마 연산자는 표현을 결합하여 두 표현을 평가한 후 두 번째 표현의 결과를 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;comma&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1t5Gke9_EV4cTSKJMEB52o7YQ5GI-Vnho&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;주로 for에서 표현을 결합할 때 사용하거나 함수에서 빠져나오기 전에 여러 작업을 묶을 때 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;2-9-&quot;&gt;2.9. 그 외 연산자&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;typeof&lt;br /&gt;피연산자의 타입을 나타내는 문자열을 반환.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;표현&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;반환값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;boolean&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof 0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;number&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof &quot;&quot;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;string&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof null&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;object&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof undefined&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;undefined&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof { }&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;object&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof Symbol()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;symbol&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;typeof function(){ }&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&quot;function&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;instanceof&lt;br /&gt;좌변의 객체가 우변의 객체타입인지 비교하여 불리언 값 반환.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;in&lt;br /&gt;좌변에는 객체의 property가 우변의 객체에 존재하는지 비교하여 불리언 값 반환.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void&lt;br /&gt;피연산자를 평가한 후 undefined 반환. 쓸 일이 거의 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[  ], .&lt;br /&gt;멤버 연산자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new&lt;br /&gt;객체 인스턴스화 연산자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;delete&lt;br /&gt;삭제 연산자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-10-&quot;&gt;2.10. 연산자 우선순위&lt;/h2&gt;
&lt;p&gt;연산자 우선순위는 문을 수행할 때 수행될 순서를 정한다. 그리고 ( )는 항상 최우선이다. 다음은 우선순위를 평가한 표이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;이름&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;연산자 기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;멤버 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;[  ], .&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;객체 호출, 생성 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;( ), new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;부정/증감 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;!, ~, -, +, ++, --, typeof, void, deleted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;곱셉/나눗셈&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*, /, %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;덧셈/뺄셈&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+, -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 시프트 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;대소 비교 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=, in, instanceof&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;동등/일치 비교 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;==, !=, ===, !==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 AND 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 XOR 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;비트 OR 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AND 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;OR 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;||&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;삼항 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;? :&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;대입 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;너무 많아서 생략&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;콤마 연산자&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>JavaScript</category>
<category>expression</category>
<category>javascript</category>
<category>JavaScript Expression</category>
<category>JavaScript Operator</category>
<category>js</category>
<category>operator</category>
<category>논리 연산자</category>
<category>단축 평가</category>
<category>단축평가</category>
<category>대입 연산자</category>
<category>문자열 연산자</category>
<category>비교 연산자</category>
<category>비트 연산자</category>
<category>산술 연산자</category>
<category>삼항 연산자</category>
<category>연산자</category>
<category>연산자 우선순위</category>
<category>자바스크립트</category>
<category>자바스크립트 단축 평가</category>
<category>자바스크립트 연산자</category>
<category>자바스크립트 표현</category>
<category>자바스크립트 표현식</category>
<category>콤마 연산자</category>
<category>표현</category>
<category>표현과 연산자</category>
<category>표현식</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/64</guid>
<comments>https://mellonia-lab.tistory.com/64#entry64comment</comments>
<pubDate>Wed, 31 Jan 2018 14:29:11 +0900</pubDate>
</item>
<item>
<title>Control statement</title>
<link>https://mellonia-lab.tistory.com/63</link>
<description>&lt;article class=&quot;markdown-body&quot;&gt;
&lt;p&gt;&lt;img alt=&quot;logo&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1B5mGWG4Qe6aic7JkLKQPElV58Pt8H6AR&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;본 카테고리는 JavaScript에 대해 다룬다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;블록&lt;/li&gt;
&lt;li&gt;조건문&lt;/li&gt;
&lt;li&gt;반복문&lt;/li&gt;
&lt;li&gt;그 밖의 키워드&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;

&lt;h1 id=&quot;1-block-statement-&quot;&gt;1. 블록(Block Statement)&lt;/h1&gt;
&lt;p&gt;블록은 제어문은 아니지만 제어문을 다루기 위해서 반드시 선행되어야할 개념이다. 블록은 문(Statement) 여러 개를 { }로 묶은 것이며 JS에서는 이를 하나의 단위로 취급한다. 제어문 없이 블록만 따로 써도 되지만 큰 의미가 없는 것들이 많다. 제어문을 다룰 때 문이 한 줄이라면 블록 없이 그냥 쓸 수 있다. 하지만 보통은 여러 개의 문을 쓰므로 블록을 통해서 그 문들을 묶어주는 것이 일반적이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그리고 아래에서 이제 본격적으로 제어문을 소개할 것인데 그 전에 메타 문법이란 것을 알아둘 필요가 있다. 메타 문법은 &lt;strong&gt;'다른 문법을 설명하기 위한 문법'&lt;/strong&gt;이며 제어문의 문법을 간결히 나타낼 것이다. &lt;strong&gt;[ ]로 감싼 것은 옵션이고 ...는 내용이 더 있다는 뜻&lt;/strong&gt;이다.&lt;/p&gt;
&lt;h1 id=&quot;2-conditional-statement-&quot;&gt;2. 조건문(Conditional Statement)&lt;/h1&gt;
&lt;p&gt;조건문은 condition의 참거짓 여부에 따라 여러 분기를 나누어 다른 명령을 처리하는 제어문이다.&lt;/p&gt;
&lt;h2 id=&quot;2-1-if&quot;&gt;2.1. if&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statement1&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statement2&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;condition이 참이라면 statement1을 실행하고 거짓이라면 실행하지 않거나 else로 빠져서 statement2를 실행한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;if&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1GOB0EqAYRvXik1uwmqOSXeBVtubvzTVv&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-1-1-chain&quot;&gt;2.1.1. chain&lt;/h3&gt;
&lt;p&gt;if...else는 여러 개 묶일 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition1&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement1&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition2&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement2&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition3&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement3&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement4&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 여러 개의 if...else를 묶어서 조건문을 여러 분기로 나눌 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;ifelse&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1bcwUA6CznPEvOUtNZYLQGHay-YUE2ehP&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-2-switch&quot;&gt;2.2. switch&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--switch syntax--js&quot;&gt;&lt;span&gt;switch&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--switch-expression syntax--begin syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;expression&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--switch-expression syntax--end syntax--bracket syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--section syntax--switch-block syntax--begin syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--case syntax--js&quot;&gt;&lt;span&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--section syntax--case-statement syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statement1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--case syntax--js&quot;&gt;&lt;span&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--section syntax--case-statement syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statement2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--case syntax--js&quot;&gt;&lt;span&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;value3&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--section syntax--case-statement syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statement3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--spread syntax--js&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--case syntax--js&quot;&gt;&lt;span&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--section syntax--case-statement syntax--js&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statementN&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--meta syntax--switch-statement syntax--js&quot;&gt;&lt;span class=&quot;syntax--punctuation syntax--definition syntax--section syntax--switch-block syntax--end syntax--bracket syntax--curly syntax--js&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;switch는 expression을 검사한 후, 그 표현식과 일치하는 case에 해당하는 statement를 수행한다. 이 때 일치 연산 비교는 '==='로 수행한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;switch1&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1u6vZ6qBW3yzDqdJT2AkZSNu3D_vri0DB&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그리고 break를 생략할 수도 있다. break를 생략하면 일치하는 case부터 break를 만날 때 까지 계속 statement를 수행해 내려간다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;nobreak&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1tRE393P7rnHkViTnUH4mZQ68I5gGuQ2q&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그리고 첫 번째 예시로 든 코드는 아래와 같이 수정할 수 있다. 여러 case에 대해 동일한 코드를 수행한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;switch2&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1xtOZ9brCGY7b0aQlM_I9fvw9I_WENfHC&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-loop-statement-&quot;&gt;3. 반복문(Loop Statement)&lt;/h1&gt;
&lt;p&gt;반복문은 condition의 참거짓 여부에 따라 특정 명령을 반복하는 제어문이다.&lt;/p&gt;
&lt;h2 id=&quot;3-1-while&quot;&gt;3.1. while&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;while&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;while은 condition이 참일 동안 statement를 반복하고 거짓이 되면 while을 탈출한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;while&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1ocGvEIxnxUq0TLdVICZT6FdrgBefjD7p&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-2-do-while&quot;&gt;3.2. do...while&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;while&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;do...while은 while과 메커니즘이 동일하다. 다만 차이점이 있다면 최소 1번은 수행한 뒤 condition을 따진다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;dowhile&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1ubVe-I4DrWb7CBidpBEGc9yVPl3PuyM3&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-3-for&quot;&gt;3.3. for&lt;/h2&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;initialization&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--punctuation syntax--terminator syntax--statement syntax--js&quot;&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--js&quot;&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;expression&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--square syntax--js&quot;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;루프 시작 전에 initialization을 실행한다. 그 후 condition을 확인해서 참일 동안 statement를 수행한 뒤 final-expression을 실행하고 condition을 다시 확인한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;for&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=1oovD81Onz-a-nrNTOCXexwzS7X0YdnwZ&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;for 루프는 정해진 횟수만큼 반복하려고 할 때 쓰는 것이 가장 적합하다. while과 do...while로 고쳐쓸 수 있다. while의 예제가 위의 for 예제와 똑같은 내용이다.&lt;/p&gt;
&lt;h3 id=&quot;3-3-1-for-in&quot;&gt;3.3.1. for...in&lt;/h3&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;variable&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--in syntax--js&quot;&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;object&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;variable - 각 반복에서 다른 property가 전달된다.&lt;br /&gt;object - 반복할 객체. 열거형 property가 반복 실행된다.&lt;br /&gt;객체의 property를 적절한 순서에 의해 반복하게 한다. 자세한 내용은 객체에 대해 설명하면서 하도록 한다.&lt;/p&gt;
&lt;h3 id=&quot;3-3-2-for-of&quot;&gt;3.3.2. for...of&lt;/h3&gt;
&lt;pre class=&quot;editor-colors lang-JS&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span class=&quot;syntax--keyword syntax--control syntax--js&quot;&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;variable&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;syntax--keyword syntax--operator syntax--of syntax--js&quot;&gt;&lt;span&gt;of&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;iterable&lt;/span&gt;&lt;span class=&quot;syntax--meta syntax--brace syntax--round syntax--js&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;syntax--source syntax--js&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;statement&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;p&gt;variable - 각 반복에서 서로 다른 객체의 property값이 할당됨.&lt;br /&gt;iterable - 반복되는 열거가능한 속성이 있는 객체.&lt;br /&gt;ES6에서 도입된 반복문이다. 반복 가능한 객체(배열, 맵, 셋, 문자열...등)의 각 개별 property에 대해서 반복한다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;forof&quot; src=&quot;http://drive.google.com/uc?export=view&amp;amp;id=126WMfCOXtKG7byo80fSOvrQ4CDkFovks&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-&quot;&gt;4. 그 밖의 키워드&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;키워드&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;break&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Loop에서 break를 만나면 Loop를 아예 탈출한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;continue&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Loop에서 continue를 만나면 다음 단계로 건너 뛴다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;return&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;제어문을 무시하고 바로 해당 함수를 빠져나간다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;throw&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;처리해야 할 예외를 발생시킨다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/article&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>JavaScript</category>
<category>Block</category>
<category>condition</category>
<category>conditional statement</category>
<category>Control statement</category>
<category>do while</category>
<category>do while문</category>
<category>For</category>
<category>for in</category>
<category>for of</category>
<category>for문</category>
<category>IF</category>
<category>IF문</category>
<category>javascript</category>
<category>JavaScript block</category>
<category>JavaScript for</category>
<category>JavaScript for in</category>
<category>JavaScript for of</category>
<category>JavaScript loop</category>
<category>js</category>
<category>loop</category>
<category>Loop Statement</category>
<category>Switch</category>
<category>switch문</category>
<category>While</category>
<category>while문</category>
<category>반복문</category>
<category>블록</category>
<category>자바스크립트</category>
<category>자바스크립트 루프</category>
<category>자바스크립트 반복문</category>
<category>자바스크립트 블록</category>
<category>자바스크립트 제어문</category>
<category>자바스크립트 조건문</category>
<category>제어문</category>
<category>조건문</category>
<author>MelloИia</author>
<guid>https://mellonia-lab.tistory.com/63</guid>
<comments>https://mellonia-lab.tistory.com/63#entry63comment</comments>
<pubDate>Wed, 31 Jan 2018 13:18:35 +0900</pubDate>
</item>
</channel>
</rss>