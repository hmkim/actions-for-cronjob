<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>Not for Me</title>
	<atom:link href="http://www.notforme.kr/feed" rel="self" type="application/rss+xml" />
	<link>http://www.notforme.kr</link>
	<description>지속적인 배움</description>
	<lastBuildDate>Sun, 24 Mar 2019 14:10:31 +0000</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.0.4</generator>
<site xmlns="com-wordpress:feed-additions:1">38621233</site>	<item>
		<title>Distributed Consens 알고리즘 정리</title>
		<link>http://www.notforme.kr/archives/1898</link>
		<comments>http://www.notforme.kr/archives/1898#respond</comments>
		<pubDate>Thu, 19 Apr 2018 12:22:09 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[BlockChain]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Consensus]]></category>
		<category><![CDATA[Distributed System]]></category>
		<category><![CDATA[Paxos]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1898</guid>
		<description><![CDATA[블록체인의 핵심 중 하나는 분산된 노드 간의 합의를 어떻게 할 것인가이다. 이를 제대로 이해하기 위해서 기존 분산 시스템의 합의 알고리즘 관련된 링크를 정리한다. Paxos 쉽게 풀어 쓴 논문: https://lamport.azurewebsites.net/pubs/paxos-simple.pdf 한글 블로그의 요약본: http://blog.lastmind.io/archives/684 블로그에서 언급한 의사코드 위주의 설명 논문: http://www.cs.cornell.edu/courses/cs7412/2011sp/paxos.pdf 구현 관점에서의 이슈 정리 논문: http://www.read.seas.harvard.edu/~kohler/class/08w-dsi/chandra07paxos.pdf 마찬가지로 한글로 요약해 주신 것: http://blog.lastmind.io/archives/780 위키 설명: https://en.wikipedia.org/wiki/Paxos_(computer_science) Raft 공식 사이트: https://raft.github.io [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1898/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1898</post-id>	</item>
		<item>
		<title>Angular2에서 Typescript를 사용하는 이유</title>
		<link>http://www.notforme.kr/archives/1809</link>
		<comments>http://www.notforme.kr/archives/1809#respond</comments>
		<pubDate>Mon, 22 Aug 2016 07:41:34 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular2]]></category>
		<category><![CDATA[Typescript]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1809</guid>
		<description><![CDATA[Angular2 코어 멤버인 victorsavkin의 글 &#8220;Angular2: Why TypeScript&#8220;을 허락을 받고 번역 하였습니다. 번역에 대한 피드백이나 오류는 주저없이 트윗이나 메일로 알려주세요. This post is the translation version of the original post &#8220;Angular2: WhyTypeScript&#8221; with allowed to translate by the author victorsavkin. Angular2는 TypeScript로 작성된 코드이다. 이 글에서는 왜 Angular2에서 TypeScript를 사용하기로 했는지 설명할 것이다. 더불어 TypeScript를 [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1809/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1809</post-id>	</item>
		<item>
		<title>[Angular2] 지시자(Directive)</title>
		<link>http://www.notforme.kr/archives/1796</link>
		<comments>http://www.notforme.kr/archives/1796#respond</comments>
		<pubDate>Wed, 13 Jul 2016 23:28:40 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular2]]></category>
		<category><![CDATA[directive]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1796</guid>
		<description><![CDATA[참고: angular2에 대한 연재는 여기를 참조해 주세요. 틀린 부분이나 의견, 피드백은 언제든지 환영합니다. 지시자에 대하여 오늘 다룰 개념은 Angularjs를 사용해 보신 분들은 적어도 한 번쯤은 들어보았을 지시자(Directive)입니다. 지시자에 대한 설명은 먼저 용어의 의미에서 출발해 보기로 합니다. 지시자 본래의 단어 Directive를 네이버에서 검색할 때 제일 처음 나오는 사전적 정의는 다음과 같습니다. (공식적인) 지시[명령] A directive is [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1796/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1796</post-id>	</item>
		<item>
		<title>반응형 프로그래밍 분류</title>
		<link>http://www.notforme.kr/archives/1746</link>
		<comments>http://www.notforme.kr/archives/1746#respond</comments>
		<pubDate>Sat, 02 Jul 2016 03:38:01 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular2]]></category>
		<category><![CDATA[Reactive Programming]]></category>
		<category><![CDATA[RxJS]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1746</guid>
		<description><![CDATA[Angular2 코어 멤버인 victorsavkin의 글 &#8220;THE TAXONOMY OF REACTIVE PROGRAMMING&#8220;을 허락을 받고 번역 하였습니다. 번역에 대한 피드백이나 오류는 주저없이 트윗이나 메일로 알려주세요. This post is the translation version of the original post &#8220;THE TAXONOMY OF REACTIVE PROGRAMMING&#8221; with allowed to translate by the author victorsavkin.] 우리는 모두 반응형 프로그램의 일부 요소를 활용하여 사용자 인터페이스를 구축합니다. [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1746/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1746</post-id>	</item>
		<item>
		<title>[Angular2] 데이터 바인딩</title>
		<link>http://www.notforme.kr/archives/1727</link>
		<comments>http://www.notforme.kr/archives/1727#respond</comments>
		<pubDate>Sun, 26 Jun 2016 12:00:48 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular2]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1727</guid>
		<description><![CDATA[참고: angular2에 대한 연재는 여기를 참조해 주세요. 틀린 부분이나 의견, 피드백은 언제든지 환영합니다. &#160; 들어가기 오늘은 지난 시간에 설명한 컴포넌트의 상태를 어떻게 다룰지와 연관된 주제인 &#8220;데이터 바인딩&#8220;을 소개합니다. Angular 1을 사용해 보신 분들은 양방향 데이터 바인딩(2-way data binding)을 통해서 이미 &#8220;데이터 바인딩&#8221;이란 개념을 들어 보셨을 겁니다. 이번 글을 통해서 Angular2에서는 Angular1과 달리 어떻게 &#8220;데이터 바인딩&#8221; [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1727/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1727</post-id>	</item>
		<item>
		<title>jQuery vs Angular 코드 비교</title>
		<link>http://www.notforme.kr/archives/1698</link>
		<comments>http://www.notforme.kr/archives/1698#comments</comments>
		<pubDate>Mon, 06 Jun 2016 03:18:18 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular]]></category>
		<category><![CDATA[Angular 2]]></category>
		<category><![CDATA[앵귤러]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1698</guid>
		<description><![CDATA[들어가기 전에 이 포스팅은 지난 2015 나는 프로그래머다 컨퍼런스 중 React 라이브 코딩에서 보고 알게 된 jQuery versus React.js thinking 글에서 영감을 얻어 (원저자의 허락을 받고) Angular 버전으로  쓴 글 입니다. This post is the result affected by original post &#8220;jQuery versus React.js thinking&#8221; that I found on React.js live coding session in &#8220;I am programmer&#8221; conference. I [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1698/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1698</post-id>	</item>
		<item>
		<title>[Angular2] 상태 다루기</title>
		<link>http://www.notforme.kr/archives/1682</link>
		<comments>http://www.notforme.kr/archives/1682#respond</comments>
		<pubDate>Fri, 03 Jun 2016 16:10:40 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[Book]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular2]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1682</guid>
		<description><![CDATA[참고: angular2에 대한 연재는 여기를 참조해 주세요. 틀린 부분이나 의견, 피드백은 언제든지 환영합니다.  들어가기 이번 글에서부터 지난 시간에 설명한 Component에 살을 붙이기 시작합니다. 오늘은 컴포넌트의 상태값의 개념을 이해해보고 Angular2에서는 어떻게 상태를 관리하는지 간략하게 설명합니다. 이를 위해 Component 클래스에 첫 변수와 메서드를 정의해 봅니다. &#160; 상태(State)에 대해서 웹사이트에서 상품을 구매할 때 우리는 그림에서 보는 바와 같이 &#8220;&#8230; [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1682/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1682</post-id>	</item>
		<item>
		<title>[Angular2] 예제 프로그램 및 프로젝트 셋팅</title>
		<link>http://www.notforme.kr/archives/1675</link>
		<comments>http://www.notforme.kr/archives/1675#respond</comments>
		<pubDate>Wed, 01 Jun 2016 01:06:16 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[angular2]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Angular-cli]]></category>
		<category><![CDATA[Angular2]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1675</guid>
		<description><![CDATA[참고: angular2에 대한 연재는 여기를 참조해 주세요. 틀린 부분이나 의견, 피드백은 언제든지 환영합니다.   회원관리 프로그램 예제로 사용할 웹 어플리케이션은 CRUD 기능이 있는 간단한 회원관리 앱입니다.  간단하게 아래와 같이 기능을 나열해 볼 수 있습니다. 로그인/로그아웃 기능: 등록한 사용자로 로그인 회원 등록 기능: id, 비번, 이름, 사진, 소속, 성별, 나이 등의 정보 입력 가능 회원정보 수정 기능: [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1675/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1675</post-id>	</item>
		<item>
		<title>D 프로젝트 1차 회고</title>
		<link>http://www.notforme.kr/archives/1637</link>
		<comments>http://www.notforme.kr/archives/1637#respond</comments>
		<pubDate>Fri, 27 May 2016 05:25:39 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[IT]]></category>
		<category><![CDATA[Thought]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1637</guid>
		<description><![CDATA[프로젝트 개요 일정: 2016년 1월 중순부터 5월 중순까지 약 4개월 진행, 6월부터 2차 진행 중 주요 사용 기술: Backend는  Spring mvc 4 기반 사내 프레임워크. Java8의 Feature들을 적극 사용하려고 노력, 리파지토리는 jOOQ를 사용 Frontend는 Angular2 베타에서부터 시작해서 rc.1에 이르면서 1차 마무리. Angular2와 함께 rxjs, 일부 immutablejs 활용 및 라이브러리로 lodash 사용, Angular2 개발언어로 자바스크립트가 아닌 Typescript 사용, 패키징에 [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1637/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1637</post-id>	</item>
		<item>
		<title>[Tip] Fork한 Github 소스 원래 소스와 싱크 하기</title>
		<link>http://www.notforme.kr/archives/1631</link>
		<comments>http://www.notforme.kr/archives/1631#respond</comments>
		<pubDate>Thu, 12 May 2016 07:47:05 +0000</pubDate>
		<dc:creator><![CDATA[jwj0831]]></dc:creator>
				<category><![CDATA[IT]]></category>
		<category><![CDATA[Git]]></category>
		<category><![CDATA[Github]]></category>

		<guid isPermaLink="false">http://www.notforme.kr/?p=1631</guid>
		<description><![CDATA[관심갖고 Fork 한 저장소(Repository)의 커밋 내역을 원래 저장소의 최신 커밋 내역으로 바꾸는 방법은 간단합니다. 먼저 Fork한 자신의 로컬 저장소에 remote로 원래 저장소를 등록해야 합니다. 등록하기 전에 현재 원격 저장소가 무엇이 있는지 확인해 봅니다. [crayon-5cd7cd459ad56484037654/] 현재는 Github에 있는 내 저장소만 등록되어 있을 겁니다.  이제 아래와 같이 원격 저장소에 &#8220;upstream&#8221;이란 이름을 주고 원래 소스 저장소를 추가합니다.  (이름은 사실 상관 [&#8230;]]]></description>
		<wfw:commentRss>http://www.notforme.kr/archives/1631/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1631</post-id>	</item>
	</channel>
</rss>
