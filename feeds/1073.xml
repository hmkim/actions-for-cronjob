<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Jason Ryu on Medium]]></title>
        <description><![CDATA[Stories by Jason Ryu on Medium]]></description>
        <link>https://medium.com/@sryu99?source=rss-7de0ef5e5863------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*PmMmQfOAhazu--DR6GslwA.png</url>
            <title>Stories by Jason Ryu on Medium</title>
            <link>https://medium.com/@sryu99?source=rss-7de0ef5e5863------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 08:15:06 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@sryu99" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[먼저 두 차례에 걸쳐 장문의 글을 통해 잘못된 점을 알려주시기 위해 시간을 내어주신 점 감사드립니다.]]></title>
            <link>https://medium.com/@sryu99/%EB%A8%BC%EC%A0%80-%EB%91%90-%EC%B0%A8%EB%A1%80%EC%97%90-%EA%B1%B8%EC%B3%90-%EC%9E%A5%EB%AC%B8%EC%9D%98-%EA%B8%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%90%EC%9D%84-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%8B%9C%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%8B%9C%EA%B0%84%EC%9D%84-%EB%82%B4%EC%96%B4%EC%A3%BC%EC%8B%A0-%EC%A0%90-%EA%B0%90%EC%82%AC%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4-3bd785919eb1?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/3bd785919eb1</guid>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Wed, 14 Nov 2018 05:13:52 GMT</pubDate>
            <atom:updated>2018-11-14T05:13:52.095Z</atom:updated>
            <content:encoded><![CDATA[<p>먼저 두 차례에 걸쳐 장문의 글을 통해 잘못된 점을 알려주시기 위해 시간을 내어주신 점 감사드립니다.</p><p>저 역시 현장에서 TDD를 통해 팀 차원에서의 안정감을 추구하고자 노력하고 있고, DB와 관련된 테스트 부분에서도 어려움을 겪은 일이 있습니다. 이러한 어려움을 극복하려는 시도들을 이전 답변에 말씀드렸던대로 단위 테스트 이후 테스트 단계에서 커버하려고 습관적으로 진행해 왔던 것은 아닐까 라는 생각을 댓글을 통해 상기하게 되었습니다.</p><p>언급해 주신대로 제가 번역한 글이 잘못된 정보 전달을 하고 있을 수 있기에 해당 글은 내리도록 하겠습니다.</p><p>감사합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3bd785919eb1" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gyuwon Yi]]></title>
            <link>https://medium.com/@sryu99/gyuwon-yi-7d3020db5313?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/7d3020db5313</guid>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Tue, 13 Nov 2018 00:49:23 GMT</pubDate>
            <atom:updated>2018-11-13T00:49:23.953Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://medium.com/u/ffc4f2847835">Gyuwon Yi</a></p><p>단위 테스트에 있어 외부 자원의 접근이 근본적인 격리대상이 아닐 수 있음에 동의합니다만,</p><p>단위 테스트를 수행함에 있어서 외부 자원의 처리방식에 대해 Determinism을 택할지 Speed를 택할지는 팀 차원에서의 선택의 문제라고 생각됩니다.</p><p>단위 테스트는 테스트와 상관없는 외부 자원들은 테스트 더블을 사용하여 격리시키고 Speed에 초점을 맞춰 진행하고 이로 인해 단위 테스트로 커버할 수 없는 외부 연계 요소들에 대한 시나리오에 대해서는, 이후 테스트 단계에서 커버하는 형태로 테스트 전략을 펼쳐간다면 필자가 이야기하고 있는 단위 테스트의 접근 방식에 대해서도 충분히 이야기 할 수 있는 상황이라 판단됩니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7d3020db5313" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gyuwon Yi 테스트와 관련된 개념에 대한 이해를 위해 관련 글들을 찾다가 다른 글 들보다 조금은 쉽게 접근하고 있는 부분이 있어 해당 글을 번역하여 올리게 되었습니다.]]></title>
            <link>https://medium.com/@sryu99/gyuwon-yi-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EA%B4%80%EB%A0%A8%EB%90%9C-%EA%B0%9C%EB%85%90%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4%EB%A5%BC-%EC%9C%84%ED%95%B4-%EA%B4%80%EB%A0%A8-%EA%B8%80%EB%93%A4%EC%9D%84-%EC%B0%BE%EB%8B%A4%EA%B0%80-%EB%8B%A4%EB%A5%B8-%EA%B8%80-%EB%93%A4%EB%B3%B4%EB%8B%A4-%EC%A1%B0%EA%B8%88%EC%9D%80-%EC%89%BD%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%9E%88%EC%96%B4-%ED%95%B4%EB%8B%B9-%EA%B8%80%EC%9D%84-%EB%B2%88%EC%97%AD%ED%95%98%EC%97%AC-%EC%98%AC%EB%A6%AC%EA%B2%8C-%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-8efe267341cd?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/8efe267341cd</guid>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Mon, 05 Nov 2018 23:10:46 GMT</pubDate>
            <atom:updated>2018-11-05T23:10:46.060Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://medium.com/u/ffc4f2847835">Gyuwon Yi</a> 테스트와 관련된 개념에 대한 이해를 위해 관련 글들을 찾다가 다른 글 들보다 조금은 쉽게 접근하고 있는 부분이 있어 해당 글을 번역하여 올리게 되었습니다. 저 역시 해당 글이 잘못된 정보를 전달하고 있다면 바로 잡아야 할 것으로 판단되는데, 혹시 어떤 부분을 말씀하시는 것인지 알 수 있을까요?</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8efe267341cd" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[전적으로 동의합니다.]]></title>
            <link>https://medium.com/@sryu99/%EC%A0%84%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9D%98%ED%95%A9%EB%8B%88%EB%8B%A4-531a2612a185?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/531a2612a185</guid>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Thu, 24 May 2018 08:45:12 GMT</pubDate>
            <atom:updated>2018-05-24T08:45:12.749Z</atom:updated>
            <content:encoded><![CDATA[<p>전적으로 동의합니다. 애자일과 관련된 모든 활동들은 문화적 변화가 수반되기에 구성원들의 마음가짐에 따라 전혀 다른 결과물을 낳게 됩니다. 컨센서스 확보가 이뤄지지 않는 상태라면 전체적인 적용은 어려울 수 있으므로 부분적으로 시도해 보는 것도 좋습니다. 예를 들면 변경의 여지가 많은 부분 또는, 특성상 로직자체가 복잡한 로직 등을 대상으로 부분적으로 시도하고 이후 변경 시 TDD의 장점에 대해 모든 개발자들이 공감하는 계기를 만들면 전체적 컨센서스를 일부분 맞춰나갈 수 있는 전환점이 될 수 있습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=531a2612a185" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Product Manager 관점에서 바라 본 TDD]]></title>
            <link>https://medium.com/@sryu99/product-manager-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC-%EB%B3%B8-tdd-3ae25512c5d7?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/3ae25512c5d7</guid>
            <category><![CDATA[agile]]></category>
            <category><![CDATA[lean-startup]]></category>
            <category><![CDATA[product-manager]]></category>
            <category><![CDATA[test-driven-development]]></category>
            <category><![CDATA[tdd]]></category>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Tue, 17 Apr 2018 07:10:44 GMT</pubDate>
            <atom:updated>2018-04-19T01:02:22.301Z</atom:updated>
            <content:encoded><![CDATA[<h4>PM으로 활동하며 느낀 TDD의 가치</h4><blockquote>이 세상에 변하지 않는 것은 없다. <br>변하지 않는 것이 있다면 <br>“이 세상에 변하지 않는 것은 없다”라는 명제 뿐이다.</blockquote><blockquote>(by 사회학자 다니엘 벨)</blockquote><p>요즘 들어 개인적으로 가장 공감하는 말이다.</p><p>특히 소프트웨어 개발자이자 Product Manager로 IT업계에 종사하며 수행했던 여러 프로젝트 경험으로 인해 더더욱 위의 말에 공감하게 되는 것 같다.</p><p>대기업에 근무 중인 필자가 소속된 부서는 회사 전체의 Agile 개발문화 정착을 주도하고 있다. 이를 위해 2000년대 초반부터 Agile 관련 미국 회사들과의 협업으로 체득한 Agile 개발문화 기반 프로젝트 경험을 갖고 있는 직원들을 현 부서로 모아 개발문화 변화를 위한 기반을 마련하였다. 특히 3년 전 Agile 컨설팅으로 유명한 미국 P사와의 협업을 진행하며 Design Thinking과 Lean을 기존 경험들에 접목하였고, 이를 바탕으로 급변하는 시장 니즈에 맞는 제품을 빠르게 만들어 가는 방법들을 회사 상황에 맞게 커스터마이징하면서 확산하고 있다.</p><p>현재 필자는 Product Manager, 개발자로 활동하며 타 부서와의 협업을 통해 Product Manager, 개발자와 Pair로 업무를 수행하며 Agile 개발문화 전파를 진행하고 있다. 일부 프로젝트에서는 개발자로서 TDD를 경험하여 TDD가 개발자에게 어떻게 다가오는지에 대해 알 수 있었고, 또 다른 프로젝트들에서는 Product Manager로 제품 기획부터 런칭까지의 과정을 경험하며 TDD가 팀에 어떤 영향을 주는지에 대해 이해할 수 있었다. 이러한 경험을 바탕으로 TDD가 무엇인지, 그리고 Product Manager에게 있어 TDD는 어떤 의미를 갖는가에 대해 이야기 해 보고자 한다.</p><h3>[TDD 정의]</h3><p>현 소속 부서에서 가이드하고 있는 여러 Agile 개발 프랙티스 중 TDD라는 것이 있다.</p><blockquote>TDD는 Test Driven Development의 약자로, 개발해야 할 기능에 대한 작은 스펙을 테스트 코드의 형태로 명세화하고 해당 명세를 충족시키기 위한 구현 코드를 개발해 나가는 개발 흐름을 의미한다.</blockquote><p>즉, 개발 후 테스트하는 일반적인 흐름을 반대로 적용하여 개발하는 방식인 것이다.</p><h3>[TDD 흐름]</h3><p>Agile 방법론으로 진행되는 프로젝트는 일반적으로 제품의 특정 기능을 개발하기 위해 Product Manager가 User Story를 작성한다. User Story는 구현하고자 하는 기능이 무엇인지, 누구를 위한 것이고 왜 필요한지에 대한 내용이 담겨 있고 이와 함께 해당 기능으로 충족해야 할 스펙을 포함하고 있다. Acceptance Criteria라고 불리는 이 스펙들은 해당 사용자 스토리가 제대로 구현되었는가에 대한 기준점으로 활용된다.</p><p>개발자들이 특정 기능 개발에 착수할 때의 시작점이 바로 User Story이다. User Story에 적힌 내용으로 개발 내용에 대해 파악한 후, 어떤 식으로 개발할지에 대해 대략적인 밑그림을 머릿속으로 구상(설계)한다. 그리고 User Story에 적힌 첫 번째 스펙(Acceptance Criteria)을 충족하기 위한 테스트 코드를 작성한다. 구현 코드가 아닌 테스트 코드를 먼저 작성하여 문서로 작성된 스펙을 시스템화하는 것이다. 즉 구현될 내용에 대한 시스템화 된 검증체계를 기능 개발 전에 먼저 마련하는 것이다.</p><p>이렇게 테스트 코드만 작성된 시점에는 구현 코드가 없으므로 컴파일 오류가 발생한다. 테스트 코드 수행을 위해 컴파일 오류 해결을 위한 최소한의 구현 코드(클래스, 메소드 또는 멤버변수들의 껍데기)를 작성한다. 컴파일 오류가 사라지면 테스트 코드를 실행해본다. 빈 껍데기로 구성된 코드 이외에 로직으로 구현된 내용이 없으므로 테스트 코드는 실패(Fail)한다.</p><p>이제 테스트 코드 수행결과를 실패(Fail)에서 성공(Success)으로 바꿔가는 작업을 수행한다. 테스트 코드로 작성된 내용을 통과시키기 위한 구현 코드를 작성해간다. 테스트 코드 성공을 위한 최소한의 구현 코드를 작성하고 테스트 코드를 수행하여 성공메시지를 확인할 때까지 수행한다.</p><p>테스트 코드 수행으로 성공메시지를 확인하였다면 주어진 스펙에 대한 기능의 1차적 요건은 충족한 것이다. 하지만 여기서 멈추면 TDD를 수행한 것이라고 볼 수 없다.</p><blockquote><em>왜냐하면 </em><strong><em>실패(Fail) — 성공(Success) — 리팩토링(Refactoring)의 흐름을 통해 “동작하는 클린 코드”를 얻는 것이 TDD의 궁극적인 목표</em></strong><em>이기 때문이다.</em></blockquote><p>테스트 성공만을 위해 단순하게 작성했던 구현 코드를 리팩토링 하면서 클린 코드를 만들어간다. 상수로 표현된 요소들의 일반화, 중복 코드 정제 및 적절한 구조로 변경 등의 다양한 리팩토링을 통해 구조화되고 가독성 높은 소스 코드로 변화시킨다. <strong><em>리팩토링을 진행하면서 코드상의 변화가 발생하게 되는데 이 과정에서 발생하는 개발자들의 심리적 부담감은 이미 확보된 테스트 코드가 해소해준다.</em></strong></p><p>구현 코드의 리팩토링이 끝난 후 다음 TDD 사이클로 들어가기에 앞서 반드시 한 가지 더 진행해야 할 내용이 있다. 그것은 바로 테스트 코드의 리팩토링이다. 테스트 코드는 기능 동작에 직접적인 영향을 미치지 않지만 코드 형태로 작성되고 개발자에 의해 언제든 다시 읽혀지고 쓰여질 요소이다. 즉 테스트 코드 역시 구현 코드와 마찬가지로 리팩토링을 진행하여 클린 코드의 형태를 유지해 나가야 지속적으로 활용될 수 있다.</p><p>구현 코드와 테스트 코드에 대한 리팩토링이 끝나면 다음 구현 내용에 대한 테스트 코드 작성을 시작으로 다음 TDD 사이클로 진입한다.</p><h3>[Product Manager와 TDD]</h3><p><em>Product Manager에게 있어서 TDD는 어떤 의미를 갖을까?</em></p><p>개발자들에 의해 수행되는 TDD 흐름과 결과 코드를 놓고 본다면 다른 역할자들 입장에서는 TDD가 별다른 의미를 줄 수 없는 것처럼 보여질 수 있다. 오히려 테스트 코드 작성 및 TDD 흐름에 대한 러닝커브에만 집중하여 ‘불필요한 개발공수를 지속적으로 제품을 만드는데 투입해야 하는가’라는 이견을 제기하는 사람들도 있다. 하지만 필자의 경험을 비추어 볼 때 TDD가 <em>‘하면 좋지만 빠르게 개발하려면 굳이 안 해도 되는 것’</em>으로 치부되기에는 너무 과소평가 받고 있다는 생각이 든다.</p><p>일단 TDD를 통해 얻게 되는 것을 다시 한 번 떠올려보자.</p><blockquote>‘동작하는 클린 코드’ 그리고 ‘테스트 코드’</blockquote><p>위와 같은 TDD의 결과물들은 개발자들에게 심리적 안정감을 준다. TDD로 개발된 코드는 작게 구조화되고 가독성 높게 구현되어 있어 언제든 쉽게 내용을 파악할 수 있다. 또한 테스트 코드가 마련되어 있어 기능이 어떻게 동작해야 하는가에 대한 스펙을 테스트 코드로 이해할 수 있고 실제 구동을 통해 수시로 검증해 볼 수 있다. 특정 기능을 변경하는 상황을 상상해 본다면 클린 코드와 테스트 코드가 어떤 역할을 하게 될 지 감을 잡을 수 있을 것이다. 이미 구현되어 있는 기능이라도 클린 코드를 기반으로 쉽게 파악하고 테스트 코드를 기반으로 주저없이 변경을 시도할 수 있다. 즉, <strong>변경에 유연하게 대응할 수 있는 체계가 마련</strong>되는 것이다. <strong><em>개발자의 입장에서 심리적 안전장치가 마련되어 있어 변경 요건 발생에 덜 민감해진다.</em></strong></p><p>현실로 돌아와보자.</p><p><em>하루가 멀다하고 발생하는 변경요건들.</em></p><p>언제든 변경을 가할 수 있다는 것은 소프트웨어의 독특한 특성이자 매력이지만, 이러한 특성이 현실에선 그 무엇보다 큰 불안감으로 다가온다. 코드 변경으로 인해 발생할지 모르는 잠재 결함들을 떠 안은 채 오늘도 개발팀은 살얼음판 위를 걷는다. 신규로 만들어가는 제품들도, 유지보수 단계에 있는 제품들도 사용자들의 니즈 반영을 위해 쉬지 않고 변화해가려 하지만 현실은 발맞추어가지 못한다. 제품의 성공을 위한다면 제품을 만들어가는 개발팀 역시 이러한 변화에 발 맞추어 나갈 수 있는 환경적 뒷받침이 이뤄져야 한다.</p><blockquote>“우리 팀이 만들어 가는 제품은 언제나 높은 품질을 유지하고, 필요할 때 언제든 부담없이 변경을 가할 수 있다!”</blockquote><p>얼마나 행복하고 든든한 일인가?</p><p>급변하는 시장 상황에서 제품 개발의 전면에 서 있는 Product Manager에게 제품 기능을 빠르게 바꾸어 나갈 수 있는 환경적 뒷받침이 있다는 것만큼 믿음직스러운 환경은 없다.</p><blockquote>개발자들로 부터 시작된 <strong>‘동작하는 클린 코드’</strong>와 <strong>‘테스트 코드’</strong>를 바탕으로 만들어진 <strong>‘열려있는 변경 수용 분위기’</strong>는 고스란히 팀 구성원들에게 전해진다. <strong>‘열려있는 변경 수용 분위기’</strong>는 디자이너에 의한 사용자 검증으로 기능 개선 사항을 찾아내고, Product Manager와 디자이너에 의해 구체화된 개선 내용을 개발자에 의해 구현되어 다시 사용자 검증을 받는 Lean 사이클의 기반이 된다.</blockquote><p>곧 <strong>TDD가 주는 안정감을 기반으로 Product Manager는 시장 니즈에 맞는 제품의 점진적 발전을 이끌어 갈 수 있는 것</strong>이다. 이런 과정에서 제품이 개선되는 모습을 보면서, 그리고 사용자에 의한 긍정적인 피드백이 쌓여가면서 제품에 대한 팀원들의 Ownership 역시 높아져가는 모습을 목격하는 이점도 누리게 된다.</p><p>필자 역시 개발자들의 전유물로만 여겨졌던 TDD가 Product Manager에게 어떤 의미로 다가올지 직접 경험하기 전에는 미처 깨닫지 못했다. TDD는 개발 내용에 대해 품질을 높이는 일종의 수단일 뿐, 작업량만 늘어나고 효과는 적은 비효율적인 것으로 이야기 하는 사람들의 의견에 일부분 동의하기도 했었다. 하지만 TDD로 기능을 만들어가는 개발자들과 함께 일하며 변경에 열려있는 환경이 팀 전체에 어떤 변화를 가져오는지 경험하면서 지난 날 갖고 있던 TDD에 대한 생각을 되돌아 보게 되었다.</p><blockquote>“세상은 계속 변한다. 점점 빠르게…”</blockquote><p>급변하는 세상을 살아가며 제품을 만들어가는 입장에서 빠른 개발에만 집중하여 일단 만들고 다시 들여다 보기 두려운 제품을 만들어 하루하루 살얼음판을 걸을지, 아니면 초반 스피드는 다소 늦더라도 빠르게 변화에 대응해가며 안정적인 제품을 만들어 갈 것인지.</p><p>선택은 자유다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3ae25512c5d7" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[갑자기 팀의 개발속도가 높아졌다!?]]></title>
            <link>https://medium.com/@sryu99/%EA%B0%91%EC%9E%90%EA%B8%B0-%ED%8C%80%EC%9D%98-%EA%B0%9C%EB%B0%9C%EC%86%8D%EB%8F%84%EA%B0%80-%EB%86%92%EC%95%84%EC%A1%8C%EB%8B%A4-1fb1da6b5dea?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/1fb1da6b5dea</guid>
            <category><![CDATA[velocity]]></category>
            <category><![CDATA[scrum-team-velocity]]></category>
            <category><![CDATA[sw-quality]]></category>
            <category><![CDATA[개발속도]]></category>
            <category><![CDATA[agile]]></category>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Tue, 30 Jan 2018 22:46:39 GMT</pubDate>
            <atom:updated>2018-02-21T00:01:09.095Z</atom:updated>
            <content:encoded><![CDATA[<h4><em>마냥 좋아할 수 없는 일</em></h4><p>Agile 개발방법에 따라 스프린트를 나누고 각 스프린트별로 계획을 세우고 개발을 진행하다 보면 각 스프린트마다 완료한 스토리들의 포인트합계로 팀의 Velocity(이하 속도)를 측정할 수 있다.</p><p>보통의 경우 프로젝트 초반부 팀의 속도는 팀원들의 적응기간이 필요하므로 평균보다 낮은 수치에서 점진적으로 증가하다가 1달 정도가 지나면 신뢰할만한 팀의 평균속도를 산출해낼 수 있다. 대개 큰 이슈가 발생하지 않거나 팀원교체, 개발기술변경 등의 팀내 변화가 없다면 평균 속도 언저리에서 스프린트의 스토리포인트가 소화되곤 한다.</p><p>하지만 프로젝트를 진행하다보면 특정 스프린트에서 평균속도를 크게 하회하거나 상회하는 퍼포먼스를 보여주는 경우가 있다. 크게 하회하는 경우는 스토리 포인트 산정 시 생각하지 못했던 구현관련 이슈가 발생했거나 개발에 집중하지 못할 외부이벤트의 발생 등 여러 경우에서 나타날 수 있고 이는 원인을 찾아 해결해나감으로써 자연스럽게 이후 스프린트부터는 원래 속도로 개발을 진행할 수 있다.</p><blockquote><strong>문제는 평균 속도를 크게 상회하는 퍼포먼스를 낸 경우이다. 팀의 속도가 올라가는 점은 분명 좋은 일이라고 생각할 수 있으나 다음 경우에 해당한다면 그 수치는 허수일 가능성이 높으므로 주의가 필요하다.</strong></blockquote><p>이전 스프린트들과 비교하여</p><ul><li><strong>야근이나 휴일근무를 많이 한 경우</strong></li><li><strong>테스트커버리지가 급격히 낮아진 경우</strong></li></ul><p>대개 위와 같은 현상은 주로 시연, 납기, 공모전 출품등의 이벤트를 앞두고 주로 발생한다. 이 경우 팀이 원래 할 수 있는 일의 양 대비 많은 일을 수행하곤 하는데, 이 때 팀은 셋 중 하나를 택하게 된다.</p><p><strong>방법1. 평소보다 많은 시간 일을 한다.<br>방법2. 소스코드의 품질확보는 뒤로 미룬다.<br></strong>방법3. 해야 일의 범위를 줄인다. (현실에서 잘 발생하지 않는다;;;)</p><h3>사람은 기계가 아니다.</h3><p>방법1을 택하는 경우 단기적으로 큰 퍼포먼스를 낼 가능성이 있고 이것이 해당 스프린트의 속도로 측정될 수 있으나 간과해서는 안되는 점이 있다.</p><p>바로 사람은 기계가 아니라는 점이다.</p><p>단기적 목표 달성을 위해 오버타임으로 일을 평소보다 많이 하는 경우 이후 스프린트의 퍼포먼스에 영향을 준다. 사람은 달렸으면 그에 상응하는 만큼 쉬어야한다. 정신적으로나 육체적으로나 쉼이라는 활동이 있어야 Sustainable Pace를 기대할 수 있다.</p><p><strong>달리 얘기하면 단기적으로 속도가 올랐다고 할지라도 그 이후 스프린트의 계획은 평소보다 보수적으로 잡아야한다는 것을 의미한다.</strong> 경험상 크게 속도가 오른 스프린트 바로 직후 스프린트는 평균속도에서 직전 스프린트의 올라간 속도만큼 떨어지곤 했다. 크게 오른 속도에 대한 관성이 반대로 작용하는 것이다. 따라서 크게 오른 속도에 현혹되어 팀의 속도가 오른 것으로 착각하여 다음 스프린트를 계획하게 되면 문제가 될 수 있음을 숙지해야 한다.</p><h3>소스코드의 품질은 제품의 품질이다.</h3><p>개발 프로젝트에 있어서 주어진 기간과 팀원 대비 일의 양이 많은 경우 가장 쉽게 선택되곤 하는 수단은 소스코드의 품질확보를 뒤로 늦추는 것이다.</p><p><strong>품질확보없이 기능 구현에만 집중하면 기능을 구현하는 단기적인 속도는 올라갈 수 있다. 하지만 문제는 그 다음이다.</strong></p><blockquote><strong>품질확보를 뒤로 미루는 순간 그 제품은 신뢰할 수 없는 제품이 된다.</strong></blockquote><p>기능구현에만 집중한 나머지 해당 기능에 대한 테스트 코드는 자연스럽게 ‘나중에 하지 뭐’라는 생각을 갖게 되어 작성하지 않게 되고, 그나마 이전 스프린트까지 작성해놓았던 테스트코드들을 주석으로 막는 일들이 자연스럽게 일어난다.</p><p>기능구현은 주어진 일정까지 할 수 있을지 모르나, 그렇게 확보된 기능은 제대로 작동한다고 믿을 수 없다. 더 나아가 해당 기능과 연관된 기존 기능들에 대한 신뢰도 할 수 없는 상태가 된다.</p><p>‘나중으로 미뤄뒀으니 단기적 목표달성 후에 하면 되지 않을까?’ 하는 의문을 갖는 독자도 있겠지만 생각보다 많은 팀의 의지가 필요하다. <strong>왜냐하면 중간에 포기한 품질에 대한 회복보다는 다음 기능 구현의 우선순위를 더 높게 두는게 일반적이기 때문이다.</strong> 그렇게 되면 제품 런칭 이후 시점으로 미루게 되는데 이렇게 미뤄둔 일은 그 순간 모르는 일이 되어버린다.</p><p>소스코드의 품질확보 활동을 한순간이라도 포기하게 되면 마치 달리던 기차에서 뛰어내린 것과 같이 영영 잡을 수 없는 것이 되어버리는 것을 여러 프로젝트에서 경험했고 목격했다.</p><p><strong>따라서 신뢰 높은 제품을 위하여 단기적인 목표를 위해 특정 스프린트에서 테스트코드 확보없이 기능구현에 집중하는 경우가 발생한다면 반드시 그 다음 스프린트에서는 예정된 기능개발보다는 이전 스프린트에서 하지 못했던 품질확보활동을 높은 우선순위로 추가로 진행해야 한다.</strong></p><p>이러한 작업이 진행되지 않는다면 그 순간 제품은 팀 내에서 조차 믿을 수 없는 살얼음판 위를 걷는 상태로 사용자들을 만나게 될 것이고 결국 제품의 전반적인 평판에 악영향을 줄 가능성을 극대화하는 일이 될 것이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1fb1da6b5dea" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SW 개발 그리고 주인의식]]></title>
            <link>https://medium.com/@sryu99/sw-%EA%B0%9C%EB%B0%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%A3%BC%EC%9D%B8%EC%9D%98%EC%8B%9D-c4c2a7f3c99d?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/c4c2a7f3c99d</guid>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Tue, 30 Jan 2018 22:38:55 GMT</pubDate>
            <atom:updated>2018-01-30T22:38:55.501Z</atom:updated>
            <content:encoded><![CDATA[<p><em>팀원들이 주인의식을 갖으려면 어떻게 해야할까?</em></p><p>얼마 전 공식적인 자리에서 Agile SW개발방식에 대한 나의 생각을 청중들에게 들려주는 자리가 있었다.<br> 그동안의 경험을 잘 정리하여 발표에서 하고자했던 이야기는 비교적 잘 전달하였으나 Q&amp;A 시간에 나온 질문에 대한 답변을 제대로 하지 못했던 것 같아 나의 생각을 다시 정리하여 글로 몇 자 적어본다.</p><p>당시 질문은 아래와 같았다.</p><h3>Q. 좋은 팀 그리고 좋은 제품을 만들어가려면 팀원들 개개인이 주인의식을 갖아야한다고 발표하셨는데, 어떻게 하면 팀원들이 주인의식을 갖을 수 있을까요?</h3><p>질문을 듣고 ‘참 아마추어같은 질문이다.’ 라는 생각에 “참 어려운 문제죠.” 라며 답변을 흐지부지 했는데, 발표끝나고 나서 생각해보니 나야 말로 참 아마추어같은 생각이었고 행동이었음을 뒤늦게 깨달았다.<br> 1시간이라는 귀한 시간을 나의 이야기를 들으러 온 사람들에 대함 예의도 아니었거니와 질문자체도 많은 사람들이 고민하고 있는 문제이고 개선을 위한 의미있는 질문이었는데 참으로 경솔했다.<br> 사실 이 질문과 관련하여 나의 경험을 떠올리며 대답해보자면 다음과 같다.</p><h3>A. 책임감을 넘어 주인의식을 갖게 하려면 나에게 의미있고 가치있는 일을 하고 있음을 느끼게 하는 것이 중요하다.</h3><p><strong>주인의식을 갖게 하는 최소한의 기본조건은 진행할 일에 대한 목표와 비전을 공유하고 팀원들 모두가 그 내용에 공감해야 한다.</strong> 제품을 왜 만들어야 하는지, 제품을 통해 사용자에게 어떤 가치를 줄 수 있고 어떤 모습으로 미래에 발전해 나갈지에 대해 공감하지 못한다면 일에 대한 의욕을 갖기 어렵다. 이는 소극적으로 업무에 임하게 되는 가장 큰 이유가 되고, 일을 진행하면서 팀원간 의사결정에 있어 마찰이 일어날 가능성을 높이는 이유가 된다.</p><p>SW개발에 있어서 나에게 의미있고 가치있는 일을 하고 있음을 느끼게 하는 가장 좋은 방법은<strong> 내가 만들고 있는 제품을 사용자가 사용하는 광경을 보는 것이다.</strong><br> 기본적으로 SW개발과 관련된 일을 하는 사람들은 창작의 욕구를 지니고 있다. 세상에 없던 제품을 탄생시킨 창작자는 그 제품이 용도에 맞게 잘 쓰일 때 그 어느 때보다 큰 희열을 느낀다. <br> 물론 제품 개발의 초기단계에는 많은 것을 보여줄 수 없을 것이고 특히나 waterfall 개발방법론으로 개발한다면 개발중인 제품을 사용자에게 가져가서 검증하는 일이 극히 적겠지만, 지속적인 User validation과 결합된 agile에서는 각 이터레이션마다 개발된 결과물을 타겟사용자들을 대상으로 검증해보고 제품을 개선해 나갈 수 있다.<br> 이런 환경에서 사용자를 인터뷰하고 제품을 검증하는 일은 주로 디자이너가 수행하지만, 이때 개발자와 같은 다른 팀원들 한두명이 관찰자로 참관하여 사용자에 의해 제품이 사용되는 모습을 옆에서 볼 수 있는 환경을 제공하는 것만으로도 팀원들 스스로 보람을 느끼고, 현재 만들어나가고 있는 제품에 대한 애정을 갖게하며 더 나은 제품이 되기 위한 고민을 시작하게 한다.</p><p>주인의식을 갖게 하는 또다른 방법은 <strong>팀이 함께하는 제품개발을 통해 팀원 스스로가 성장하고 있음을 느끼게 하는 것이다. </strong><br> 이는 기술적인 부분의 성장일수도 있고 문화적인 부분에서의 성장일수도 있다. 특히 팀내에 존경할만한 기술전문가나 뛰어난 리더가 함께하는 경우 이들을 따르기를 원하는 팀원들이 함께한다면 팀의 일에 보다 적극적이 되고 열정적인 제품개발을 하는 분위기가 자연스럽게 형성될 가능성을 높일 수 있다.</p><p>마지막으로 <strong>지속적인 소통을 통한 제품에 대한 컨센서스 유지가 수반되어야 한다. </strong><br> 개발초기 제품에 대한 비전이 명확이 공유되었다 하더라도 개발이 진행되다보면 팀원들이 눈앞의 상황에만 몰두하게 되어 공유되었던 비전에 대해 무감각해지는 경우가 많고, 개발중반 제품의 방향성 변화가 이뤄지는 경우 이를 팀내에 공유하지 않으면 변경된 기능이 왜 필요한지에 대해 팀원들이 납득하지 못하는 상황에 이르러 문제가 발생할 수 있다. 따라서 미래 제품의 모습에 대해 짧은 주기로 팀원 전체의 공감대를 형성해가는 노력이 수반되어야 한다.</p><p>위와 같은 것들을 통해 최소한의 주인의식을 장려할 수 있다는게 필자의 개인적인 의견이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c4c2a7f3c99d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[번역글 삭제]]></title>
            <link>https://medium.com/@sryu99/%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-tdd-bdd%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-3d25fab5ccb2?source=rss-7de0ef5e5863------2</link>
            <guid isPermaLink="false">https://medium.com/p/3d25fab5ccb2</guid>
            <dc:creator><![CDATA[Jason Ryu]]></dc:creator>
            <pubDate>Sun, 19 Nov 2017 23:06:33 GMT</pubDate>
            <atom:updated>2018-11-14T05:30:22.429Z</atom:updated>
            <content:encoded><![CDATA[<p>댓글에 <a href="https://medium.com/u/ffc4f2847835">Gyuwon Yi</a> 님께서 언급해주신 내용처럼 원글이 잘못된 정보를 전달할 수 있어 번역글의 내용을 삭제합니다.</p><p>본 스토리 자체를 삭제하는 것이 더 좋을지 고민하다가 댓글로 남겨주신 정보들을 다른 분들께서도 읽어보시는게 좋을 것 같아 본문 내용만 삭제하고 댓글은 살린 형태로 수정하였습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3d25fab5ccb2" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>