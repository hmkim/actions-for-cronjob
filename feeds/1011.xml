<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Sangkon Han(SigmaDream, sd or SD)]]></title><description><![CDATA["Talk is cheap. Show me the code." - Torvalds, Linus (2000-08-25), Message to linux-kernel mailing list]]></description><link>https://www.sangkon.com/</link><image><url>http://www.sangkon.com/favicon.png</url><title>Sangkon Han(SigmaDream, sd or SD)</title><link>https://www.sangkon.com/</link></image><generator>Ghost 2.18</generator><lastBuildDate>Mon, 13 May 2019 07:36:06 GMT</lastBuildDate><atom:link href="https://www.sangkon.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 19주(2019.5.6 - 2019.5.12)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://julien.danjou.info/python-and-functional-programming/">An Introduction to Functional Programming with Python</a></p>
<ul>
<li>이 기사는 (일부 예외를 제외하고) 더 간결하고 재미있는 코드를 작성할 수 있는 함수형 프로그래밍 작성 방법을 다루고 있음</li>
<li>함수형 프로그래밍을 처음 접하거나, 파이썬을 좀 더 재미있는 코드를 작성하고 싶은 개발자라면 이 기사를 참고해보자!</li>
</ul>
</li>
<li>
<p><a href="https://pythonspeed.com/articles/logging-for-scientific-computing/">Logging for scientific computing: debugging, performance, trust</a></p>
<ul>
<li><code>Eliot</code> 로깅</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/05/12/sigamdream_weekly_2019_19/</link><guid isPermaLink="false">5cd91e27735e3603b733e59c</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sun, 12 May 2019 07:34:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1557568522-c0156c9e3a6d?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1557568522-c0156c9e3a6d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 19주(2019.5.6 - 2019.5.12)"><p><a href="https://julien.danjou.info/python-and-functional-programming/">An Introduction to Functional Programming with Python</a></p>
<ul>
<li>이 기사는 (일부 예외를 제외하고) 더 간결하고 재미있는 코드를 작성할 수 있는 함수형 프로그래밍 작성 방법을 다루고 있음</li>
<li>함수형 프로그래밍을 처음 접하거나, 파이썬을 좀 더 재미있는 코드를 작성하고 싶은 개발자라면 이 기사를 참고해보자!</li>
</ul>
</li>
<li>
<p><a href="https://pythonspeed.com/articles/logging-for-scientific-computing/">Logging for scientific computing: debugging, performance, trust</a></p>
<ul>
<li><code>Eliot</code> 로깅 라이브러리를 사용하는 방법을 차근 차근 소개하는 기사</li>
<li>디버깅을 사용해서 문제를 해결하고 해당 문제를 검증하는 방법도 참고할 수 있음</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://medium.com/feedzaitech/writing-testable-code-b3201d4538eb">Writing Testable Code</a></p>
<ul>
<li>테스트 가능한 코드를 쉽게 작성하는 방법에 대한 몇가지 조언을 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://medium.com/androiddevelopers/android-studio-project-marble-layout-editor-608b6704957a">Android Studio Project Marble: Layout Editor</a></p>
<ul>
<li>Android Studio 3.5의 Layout Editor에 대한 소개</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://markus.oberlehner.net/blog/the-ioc-container-pattern-with-vue/">The IoC Container Pattern with Vue.js</a></p>
<ul>
<li>Vue.js에 IoC 컨테이너 패턴을 구현하는 실험 소개하는 기사</li>
<li>해당 기사에서 IoC 컨테이너 패턴을 JS에선 많이 사용되지 않는 이유도 함께 고민해보자!</li>
</ul>
</li>
<li>
<p><a href="https://blog.usmanity.com/serving-vue-js-apps-on-github-pages/">Serving Vue.js apps on Github Pages</a></p>
<ul>
<li>Vue.js 앱을 Github Pages에서 사용하는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://stackoverflow.blog/2019/05/06/predicting-stack-overflow-tags-with-googles-cloud-ai/">Predicting Stack Overflow Tags with Google’s Cloud AI</a></li>
<li><a href="https://towardsdatascience.com/a-birds-eye-view-leveraging-machine-learning-to-generate-nests-30dd2136a839/">A Bird’s Eye View: How Machine Learning Can Help You Charge Your E-Scooters</a></li>
<li><a href="https://realpython.com/python-sort/">How to Use sorted() and sort() in Python</a></li>
<li><a href="https://medium.com/@elizarov/simple-design-of-kotlin-flow-4725e7398c4c">Simple design of Kotlin Flow</a></li>
<li><a href="https://hellsoft.se/how-to-service-on-android-part-2-d3e5b1121bbf">How to Service on Android — part 2</a></li>
<li><a href="https://sematext.com/blog/top-nodejs-metrics-to-watch/">Top Node.js Metrics to Monitor</a></li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 18주(2019.4.29 - 2019.5.5)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://blog.graphqleditor.com/top-3-python-libraries-for-graphql/">Top 3 python libraries for graphql</a></p>
<ul>
<li>Python에서 GraphQL을 사용하고 싶으신다면 일단 이 기사를 먼저 참고해보세요!</li>
</ul>
</li>
<li>
<p><a href="https://blog.heroku.com/python37-dataclasses-async-await">Getting to Know Python 3.7: Data Classes, async/await and More!</a></p>
<ul>
<li>파이썬 3.7에 새롭게 추가된 기능을 가볍게 소개하는 기사</li>
<li>대부분의 OS에서 3.7을 지원하기 시작했으니 새로운 마음으로 이 기사를 시작해보자!</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://www.jworks.io/essential-intellij-shortcuts/">Essential</a></p></li></ul>]]></description><link>https://www.sangkon.com/2019/04/29/sigamdream_weekly_2019_18/</link><guid isPermaLink="false">5cd91dce735e3603b733e590</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Mon, 29 Apr 2019 07:33:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1532347922424-c652d9b7208e?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1532347922424-c652d9b7208e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 18주(2019.4.29 - 2019.5.5)"><p><a href="https://blog.graphqleditor.com/top-3-python-libraries-for-graphql/">Top 3 python libraries for graphql</a></p>
<ul>
<li>Python에서 GraphQL을 사용하고 싶으신다면 일단 이 기사를 먼저 참고해보세요!</li>
</ul>
</li>
<li>
<p><a href="https://blog.heroku.com/python37-dataclasses-async-await">Getting to Know Python 3.7: Data Classes, async/await and More!</a></p>
<ul>
<li>파이썬 3.7에 새롭게 추가된 기능을 가볍게 소개하는 기사</li>
<li>대부분의 OS에서 3.7을 지원하기 시작했으니 새로운 마음으로 이 기사를 시작해보자!</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://www.jworks.io/essential-intellij-shortcuts/">Essential IntelliJ shortcuts</a></p>
<ul>
<li><code>IntelliJ</code> 단축키를 소개하는 매우 간단한 기사지만 너무나 유용한 기사!</li>
</ul>
</li>
<li>
<p><a href="https://www.infoq.com/news/2019/04/java-logging-framework-flogger">Google Releases New Java Logging Framework</a></p>
<ul>
<li>Google에서 만든 로깅 프레임워크를 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://itnext.io/testing-with-jest-and-vue-js-pocket-guide-7be290d20954">Testing with Jest and Vue.js: Pocket guide</a></p>
<ul>
<li>Jest를 사용해서 Vue.js를 테스트하는 방법을 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://rangle.io/blog/custom-build-modes-with-vue-cli-3/">Custom Build Modes with Vue CLI 3</a></p>
<ul>
<li>Vue CLI에 자신만의 모드를 추가하는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://medium.com/netflix-techblog/python-at-netflix-bba45dae649e">Python at Netflix</a></li>
<li><a href="https://developer.squareup.com/blog/developing-on-ios-and-android/">Developing on iOS and Android</a></li>
<li><a href="https://blog.risingstack.com/node-js-12-new-features/">Node.js v12 - New Features You Shouldn't Miss</a></li>
<li><a href="https://www.vuemastery.com/conferences/vueconf-us-2019/">VueConf US 2019</a></li>
<li><a href="https://medium.com/@_shirish/thinking-in-components-with-vue-js-a35b5af12df">Thinking in components with Vue.js</a></li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 17주(2019.4.22 - 2019.4.28)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://stefan.sofa-rockers.org/2019/04/18/python-packaging-gitlab-conda/">Packaging Python inside your organization with GitLab and Conda</a></p>
<ul>
<li>사내 개발을 위해서 PyPI(배포)를 고려하셨다면 이 기사를 참고하자!</li>
</ul>
</li>
<li>
<p><a href="https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make">Buggy Python Code: The 10 Most Common Mistakes That Python Developers Make</a></p>
<ul>
<li>파이썬을 사용하면서 겪게되는 흔히 겪는 10가지 실수에 대해서 다루고 있는 기사</li>
<li>누가 내 이야기를 여기다 적었을까?</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li><a href="https://blog.frankel.ch/imperative-functional-programming/4/">From</a></li></ul>]]></description><link>https://www.sangkon.com/2019/04/29/sigamdream_weekly_2019_17/</link><guid isPermaLink="false">5ccb2d40735e3603b733e57c</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sun, 28 Apr 2019 17:47:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1521517407911-565264e7d82d?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1521517407911-565264e7d82d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 17주(2019.4.22 - 2019.4.28)"><p><a href="https://stefan.sofa-rockers.org/2019/04/18/python-packaging-gitlab-conda/">Packaging Python inside your organization with GitLab and Conda</a></p>
<ul>
<li>사내 개발을 위해서 PyPI(배포)를 고려하셨다면 이 기사를 참고하자!</li>
</ul>
</li>
<li>
<p><a href="https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make">Buggy Python Code: The 10 Most Common Mistakes That Python Developers Make</a></p>
<ul>
<li>파이썬을 사용하면서 겪게되는 흔히 겪는 10가지 실수에 대해서 다루고 있는 기사</li>
<li>누가 내 이야기를 여기다 적었을까?</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li><a href="https://blog.frankel.ch/imperative-functional-programming/4/">From Imperative to Functional Programming: the Dijkstra algorithm</a>
<ul>
<li>Dijkstra 알고리즘을 구현 후 함수형 스타일로 변경하는 과정을 소개하는 기사</li>
<li>JVM 관련 언어가 아니더라도 꼭 한 번 읽어볼 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://medium.com/javascript-in-plain-english/add-test-coverage-to-vue-js-app-with-jest-travis-ci-and-coveralls-d10d118125c2">Testing your Vue App with Jest and Travis CI</a></p>
<ul>
<li>내가 즐겨사용하는 Jest를 사용해서 Vue를 테스트 하는 방법을 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f">Introducing Node.js 12</a></p>
<ul>
<li>Node.js 12 버전의 새로운 점을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://www.reddit.com/r/Python/comments/betkoj/why_use_anaconda/">Why Use Anaconda?</a></li>
<li><a href="https://www.blog.pythonlibrary.org/2019/04/18/creating-a-gui-application-for-nasas-api-with-wxpython/">Creating a GUI Application for NASA’s API with wxPython</a></li>
<li><a href="https://kite.com/blog/python/flask-vs-django-python">Flask vs. Django: Choose Your Python Web Framework</a></li>
<li><a href="https://realpython.com/learning-paths/">Python Learning Paths</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLl_CUHIg8OeJpT5iTs4tNdAirxYznmHyU">Django Quickstart Course</a></li>
<li><a href="https://www.phoronix.com/scan.php?page=news_item&amp;px=OpenJDK-11-Ubuntu-18.04">OpenJDK 11 Now The Default Java For Ubuntu 18.04 LTS - Plus Some New OpenJDK Benchmarks</a></li>
<li><a href="https://github.com/rozkminiacz/KotlinUnitTesting">Kotlin Unit Testing Examples</a></li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 16주(2019.4.15 - 2019.4.22)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="http://www.blog.pythonlibrary.org/2019/04/11/python-used-to-take-photo-of-black-hole/">Python Used to Take Photo of Black Hole</a></p>
<ul>
<li>블랙홀 사진을 찍을 때 파이썬이 사용되었다는 걸 아시나요? 모르셨다면 이 기사를 참고해보세요!</li>
</ul>
</li>
<li>
<p><a href="https://medium.freecodecamp.org/how-i-used-python-to-analyze-game-of-thrones-503a96028ce6">How I used Python to analyze Game of Thrones</a></p>
<ul>
<li>'왕좌의 게임'과 파이썬을 사용해서 데이터 분석을 자동화하는 방법을 자세히 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://kite.com/blog/python/flask-sqlalchemy-tutorial">Flask SQLAlchemy Tutorial</a></p>
<ul>
<li><code>Flask</code>와 <code>SQLAlchemy</code>를 사용한 CRUD</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/04/22/sigamdream_weekly_2019_16/</link><guid isPermaLink="false">5cbd3fc5735e3603b733e56e</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Mon, 22 Apr 2019 04:16:01 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1552973315-27072571ee52?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1552973315-27072571ee52?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 16주(2019.4.15 - 2019.4.22)"><p><a href="http://www.blog.pythonlibrary.org/2019/04/11/python-used-to-take-photo-of-black-hole/">Python Used to Take Photo of Black Hole</a></p>
<ul>
<li>블랙홀 사진을 찍을 때 파이썬이 사용되었다는 걸 아시나요? 모르셨다면 이 기사를 참고해보세요!</li>
</ul>
</li>
<li>
<p><a href="https://medium.freecodecamp.org/how-i-used-python-to-analyze-game-of-thrones-503a96028ce6">How I used Python to analyze Game of Thrones</a></p>
<ul>
<li>'왕좌의 게임'과 파이썬을 사용해서 데이터 분석을 자동화하는 방법을 자세히 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://kite.com/blog/python/flask-sqlalchemy-tutorial">Flask SQLAlchemy Tutorial</a></p>
<ul>
<li><code>Flask</code>와 <code>SQLAlchemy</code>를 사용한 CRUD 튜토리얼 기사</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://www.thomaslegrand.tech/kotlin/2019/04/07/machine-learning-kotlin.html">MACHINE LEARNING WITH KOTLIN</a></p>
<ul>
<li>실험적이긴 하지만 Kotlin으로 ML을 사용하는 방법을 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://www.pamelaahill.com/post/step-by-step-full-stack-kotlin-part-1">Step-by-step Full Stack Kotlin (Part 1)</a></p>
<ul>
<li>Kotlin으로 Full Stack을 구성하는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascrip">JavaScrip</h1>
<ul>
<li>
<p><a href="https://css-tricks.com/form-validation-in-under-an-hour-with-vuelidate/">Form Validation in Under an Hour with Vuelidate</a></p>
<ul>
<li>Vue.js를 사용해서 Form 검증을 손쉽게 하는 방법을 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://alligator.io/vuejs/css-frameworks-vuejs/">Integrating and Using CSS Frameworks with Vue.js</a></p>
<ul>
<li>Vue.js에서 CSS 프레임워크를 사용하는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://www.infoq.com/presentations/cqrs-event-spring-boot-axon">Bootiful CQRS and Event Sourcing with Axon Framework</a></li>
<li><a href="https://blog.codota.com/top-9-free-java-process-monitoring-tools/">Top 9 Free Java Process Monitoring Tools &amp; How to Choose One</a></li>
<li><a href="https://vuejsdevelopers.com/2019/04/15/api-security-jwt-json-web-tokens/">How JSON Web Token (JWT) Secures Your API</a></li>
<li><a href="https://markus.oberlehner.net/blog/distributed-vue-applications-loading-components-via-http/">Distributed Vue.js Applications Part 1: Loading Components via HTTP</a></li>
<li><a href="https://cosmicjs.com/articles/add-dynamic-filters-to-your-data-with-ease-using-vue-and-the-cosmic-js-rest-api">Add dynamic filters to your data with ease, using Vue and the Cosmic JS Rest API</a></li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 15주(2019.4.8 - 2019.4.14)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://wkulikowski.com/2019/programming-environments/">Python modules management for newbies</a></p>
<ul>
<li>파이썬에서 사용하는 모듈의 위치와 경로에 대해서 자세히 소개햐는 기사</li>
<li>파이썬을 이제 막 배우기 시작했다면 읽어두면 좋을 글!</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/mlapp-419f90e8f007">How to Automate Tasks on GitHub With Machine Learning for Fun and Profit</a></p>
<ul>
<li>머신 러닝 기술을 사용해서 Github의 Issue를 라벨링하는 문제를 해결하는 과정을 자세히 소개하는 기사</li>
<li>문제를</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/04/15/sigamdream_weekly_2019_15/</link><guid isPermaLink="false">5cb3f0a3735e3603b733e55c</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Mon, 15 Apr 2019 02:48:13 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1519682577862-22b62b24e493?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1519682577862-22b62b24e493?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 15주(2019.4.8 - 2019.4.14)"><p><a href="https://wkulikowski.com/2019/programming-environments/">Python modules management for newbies</a></p>
<ul>
<li>파이썬에서 사용하는 모듈의 위치와 경로에 대해서 자세히 소개햐는 기사</li>
<li>파이썬을 이제 막 배우기 시작했다면 읽어두면 좋을 글!</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/mlapp-419f90e8f007">How to Automate Tasks on GitHub With Machine Learning for Fun and Profit</a></p>
<ul>
<li>머신 러닝 기술을 사용해서 Github의 Issue를 라벨링하는 문제를 해결하는 과정을 자세히 소개하는 기사</li>
<li>문제를 정의하고 해결하는 과정을 자세히 소개하고 있기 때문에 ML 스터디를 하고 계시다면 꼭 읽어보자!</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://llorllale.github.io/java-variance/">Variance in Java</a></p>
<ul>
<li>자바의 <code>Variance</code>에 대해서 아주 체계적으로 소개하는 기사</li>
<li>모두 알고 있다고 생각하지만, 그렇다고 이렇게 쉽게 설명하기 힘든 그것에 대한 이야기</li>
</ul>
</li>
<li>
<p><a href="https://jeroenmols.com/blog/2019/04/02/modularizationexample/">Modularization - Real-life example</a></p>
<ul>
<li>멀티 모듈을 가진 앱을 만드는 방법을 예제로 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://dev.to/vue-storefront/vue-during-coffee-break-using-v-model-with-custom-components-3bo9">Vue during coffee break - using v-model with custom components.</a></p>
<ul>
<li>v-model의 작동 방식과 모든 적용하는 방법을 간략하게 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca">Design patterns in modern JavaScript development</a></p>
<ul>
<li>자바스크립트 프로젝트에서 상당히 많이 사용되는 디자인 패턴을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li>
<p><a href="https://talkpython.fm/episodes/transcript/206/running-django-in-production">Transcript for Episode #206: Running Django in Production</a></p>
</li>
<li>
<p><a href="https://www.vzurauskas.com/2019/04/07/two-layer-repositories-in-spring/">Two layer repositories in Spring</a></p>
</li>
<li>
<p><a href="https://www.contentful.com/blog/2019/04/05/nuxtjs-contentful-seo-blog/">How to create a blog using Nuxt.js and Contentful</a></p>
</li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 14주(2019.4.1 - 2019.4.7)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://medium.com/intuitive-deep-learning/build-your-first-convolutional-neural-network-to-recognize-images-84b9c78fe0ce">Build your first Convolutional Neural Network to recognize images</a></p>
<ul>
<li>Keras를 사용하는 CNN을 구성하는 방법을 단계별로 설명하는 튜토리얼 가이드 기사</li>
<li>CIFAR-10을 사용하고 있기 때문에 VGG16/19 등으로 변경해서 서로 비교해보는 코드를 작성하면서 친구들과 함께 읽었던 기사로 쉽고 짜임새가 좋음!</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/towards-well-being-with-data-science-part-1-7f8035f73aa">Towards Well-Being, with Data Science (part 1)</a></p>
<ul>
<li>Apple Health 데이터를 사용해서</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/04/09/sigamdream_weekly_2019_14/</link><guid isPermaLink="false">5cac05f7735e3603b733e543</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Tue, 09 Apr 2019 02:41:33 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1457369804613-52c61a468e7d?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1457369804613-52c61a468e7d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 14주(2019.4.1 - 2019.4.7)"><p><a href="https://medium.com/intuitive-deep-learning/build-your-first-convolutional-neural-network-to-recognize-images-84b9c78fe0ce">Build your first Convolutional Neural Network to recognize images</a></p>
<ul>
<li>Keras를 사용하는 CNN을 구성하는 방법을 단계별로 설명하는 튜토리얼 가이드 기사</li>
<li>CIFAR-10을 사용하고 있기 때문에 VGG16/19 등으로 변경해서 서로 비교해보는 코드를 작성하면서 친구들과 함께 읽었던 기사로 쉽고 짜임새가 좋음!</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/towards-well-being-with-data-science-part-1-7f8035f73aa">Towards Well-Being, with Data Science (part 1)</a></p>
<ul>
<li>Apple Health 데이터를 사용해서 현재 상태를 측정하고, 향후 피트니스 목표를 설정하는 방법을 소개하는 기사</li>
<li>개인적으로 관심이 많아서 해당 기사의 후속을 기다리고 있음</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://blog.frankel.ch/comparison-assertion-libraries/">A comparison of assertion libraries</a></p>
<ul>
<li>assertion 라이브러리인 <code>AssertJ</code>, <code>Strikt</code>, <code>Atrium</code>을 비교하고 있으며, Kotlin 코드를 사용하고 있기 때문에 Kotlin 학습자라면 추천하는 기사!</li>
</ul>
</li>
<li>
<p><a href="https://reflectoring.io/spring-boot-paging/">Paging with Spring Boot</a></p>
<ul>
<li>Spring Data가 제공하는 페이징 지원에 대해 자세히 소개하는 기사</li>
<li><code>Pagination</code>과 <code>Paging</code>에 대해서 구별해서 다루는 부분이 신선했음</li>
</ul>
</li>
<li>
<p><a href="https://blog.novoda.com/kotlin-anti-patterns-also-this-is-null/">Kotlin Anti-Patterns - Also this is Null</a></p>
<ul>
<li>Kotlin에서 Null을 어떻게 바라봐야 하는지 좋은 질문을 하는 기사</li>
<li>관련 기사로 <a href="https://pspdfkit.com/blog/2019/handling-nullability-in-your-code/">Handling Nullability in Your Code</a>도 추천</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://vuejsdevelopers.com/2019/04/01/vue-testing-unit-vs-e2e/">Unit vs E2E Testing for Vue.js</a></p>
<ul>
<li>Vue.js에서 단위 테스트와 E2E(End-to-End)를 적용하는 방법과 두 테스트의 차이점에 대해서 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://css-tricks.com/understanding-event-emitters/">Understanding Event Emitters</a></p>
<ul>
<li>Node.js에서 가장 많이 활용하는 콜백과 함꼐 거론되는 Event Emitters를 자세히 소개하는 기사</li>
<li>단점이라면 Typescript로 코드를 작성했다는 점인데 이게 장점이 될지도?</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://realpython.com/get-started-with-django-1/">Get Started With Django Part 1: Build a Portfolio App</a></li>
<li><a href="https://www.dataschool.io/cloud-services-for-jupyter-notebook/">Six easy ways to run your Jupyter Notebook in the cloud</a></li>
<li><a href="https://vladmihalcea.com/relational-database-sql-prepared-statements/">How does a relational database execute SQL statements and prepared statements</a></li>
<li><a href="https://nvoulgaris.com/comparing-tdd-flavours/">Comparing TDD flavours</a></li>
<li><a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b">Learn Enough Docker to be Useful</a></li>
<li><a href="https://auth0.com/blog/building-graphql-apis-with-kotlin-spring-boot-and-mongodb/">Building GraphQL APIs with Kotlin, Spring Boot, and MongoDB</a></li>
<li><a href="https://fusionauth.io/blog/2019/04/02/login-with-twitter-oh-the-humanity">Login with Twitter - Oh, the Humanity!</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCxzy-hmQq9ECHOwbRrbBx0VEoqWM02CA">Vue.js Amsterdam 2019</a></li>
<li><a href="https://medium.com/swlh/8-vue-js-ui-component-for-2019-5bfff4df480e">8 Vue.js UI Component for 2019</a></li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 13주(2019.3.25 - 2019.3.31)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://medium.com/@chrisbuetti/how-i-eat-for-free-in-nyc-using-python-automation-artificial-intelligence-and-instagram-a5ed8a1e2a10">How I Eat For Free in NYC Using Python, Automation, Artificial Intelligence, and Instagram</a></p>
<ul>
<li>NYC에서 무료시식을 하기 위해서 자신이 했던 몇가지 과정을 소개하는 기사, 파이썬을 사용해서 무료 시식과 관련된 데이터를 자동화시킨 과정을 간단하게 설명하고 있음</li>
<li>세부적인 기술에 대한 내용이 빠져있어서 재현볼 순 없지만, 자동화에 대한 좋은 아이디어가 많음</li>
</ul>
</li>
<li>
<p><a href="https://www.pythonforthelab.com/blog/intro-to-python-lambda-functions/">Intro</a></p></li></ul>]]></description><link>https://www.sangkon.com/2019/04/01/sigamdream_weekly_2019_13/</link><guid isPermaLink="false">5ca1711f735e3603b733e52a</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Mon, 01 Apr 2019 02:02:54 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1535402803947-a950d5f7ae4b?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1535402803947-a950d5f7ae4b?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 13주(2019.3.25 - 2019.3.31)"><p><a href="https://medium.com/@chrisbuetti/how-i-eat-for-free-in-nyc-using-python-automation-artificial-intelligence-and-instagram-a5ed8a1e2a10">How I Eat For Free in NYC Using Python, Automation, Artificial Intelligence, and Instagram</a></p>
<ul>
<li>NYC에서 무료시식을 하기 위해서 자신이 했던 몇가지 과정을 소개하는 기사, 파이썬을 사용해서 무료 시식과 관련된 데이터를 자동화시킨 과정을 간단하게 설명하고 있음</li>
<li>세부적인 기술에 대한 내용이 빠져있어서 재현볼 순 없지만, 자동화에 대한 좋은 아이디어가 많음</li>
</ul>
</li>
<li>
<p><a href="https://www.pythonforthelab.com/blog/intro-to-python-lambda-functions/">Intro to Python Lambda Functions</a></p>
<ul>
<li>파이썬에서 사용하는 람다 함수에 대해서 매우 자세히 소개하는 기사</li>
<li>람다 함수에 대해 익숙하지 않다면 읽어볼만한 기사</li>
</ul>
</li>
<li>
<p><a href="https://hakibenita.com/how-to-turn-django-admin-into-a-lightweight-dashboard">How to Turn Django Admin Into a Lightweight Dashboard</a></p>
<ul>
<li>Django Admin 페이지를 커스텀하고자 한다면 이 기사를 참고해보자</li>
</ul>
</li>
</ul>
<h1 id="java">Java</h1>
<ul>
<li>
<p><a href="https://dzone.com/articles/immutable-data-structures-in-java-2">Immutable Data Structures in Java</a></p>
<ul>
<li>자바에서 불변 데이터 구조에 대해서 조금 깊게 소개하는 기사</li>
<li>불변 데이터와 불변 참조에 대해서 관심 있다면 이 기사를 꼭 읽어보자!</li>
</ul>
</li>
<li>
<p><a href="https://blog.codeleak.pl/2019/03/test-execution-order-in-junit-5.html">TEST EXECUTION ORDER IN JUNIT 5</a></p>
<ul>
<li>종단간(end to end) 테스트 등을 진행하게 될 경우 테스트 순서를 보장해야 할 필요가 있을 때 참고하면 좋은 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://medium.com/@arielb/mobx-the-vue-way-f10e552cace3">Mobx- The Vue way</a></p>
<ul>
<li>Vuex가 아닌 MobX를 사용해서 상태 관리를 진행했던 경험을 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://www.smashingmagazine.com/2019/03/spotify-app-vue-nuxt-javascript/">Creating A Spotify-Powered App Using Nuxt.js</a></p>
<ul>
<li>Vue.js와 Nuxt를 사용하여 Spotify에서 듣고있는 것을 공유하기 위한 애플리케이션을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/">Is Python pass-by-reference or pass-by-value?</a></li>
<li><a href="https://www.youtube.com/watch?v=2KeV42YaPes">Build an email subscription form with Django and Mailchimp</a></li>
<li><a href="https://css-tricks.com/an-illustrated-and-musical-guide-to-map-reduce-and-filter-array-methods/">An Illustrated (and Musical) Guide to Map, Reduce, and Filter Array Methods</a></li>
<li><a href="https://vuedose.tips/tips/11/">Simple and performant functional Vue.js components</a></li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 12주(2019.3.18 - 2019.3.24)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://spurin.com/2019/03/12/Python-Virtual-Environments/">Python Virtual Environments Masterclass</a></p>
<ul>
<li>Python의 가상 환경에 대한 가벼운 소개와 함께 간단한 안내를 겸하고 있는 기사</li>
</ul>
</li>
<li>
<p><a href="https://blog.doismellburning.co.uk/django-an-unofficial-opinionated-faq/">Django: An Unofficial Opinionated FAQ</a></p>
<ul>
<li>Django의 공식적인 FAQ는 아니지만, 다양한 분야에 대한 몇가지 관점을 소개하는 비공식적인 FAQ</li>
<li>Python의 웹 프레임워크/라이브러리를 고민하고 있다면 이 기사를 참고해보자!</li>
</ul>
</li>
</ul>
<h1 id="java">Java</h1>
<ul>
<li>
<p><a href="https://handstandsam.com/2019/02/24/when-you-should-use-null-in-kotlin/">When You Should Use Null in</a></p></li></ul>]]></description><link>https://www.sangkon.com/2019/03/25/sigamdream_weekly_2019_12/</link><guid isPermaLink="false">5c98774a735e3603b733e514</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Mon, 25 Mar 2019 06:39:26 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1503694978374-8a2fa686963a?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1503694978374-8a2fa686963a?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 12주(2019.3.18 - 2019.3.24)"><p><a href="https://spurin.com/2019/03/12/Python-Virtual-Environments/">Python Virtual Environments Masterclass</a></p>
<ul>
<li>Python의 가상 환경에 대한 가벼운 소개와 함께 간단한 안내를 겸하고 있는 기사</li>
</ul>
</li>
<li>
<p><a href="https://blog.doismellburning.co.uk/django-an-unofficial-opinionated-faq/">Django: An Unofficial Opinionated FAQ</a></p>
<ul>
<li>Django의 공식적인 FAQ는 아니지만, 다양한 분야에 대한 몇가지 관점을 소개하는 비공식적인 FAQ</li>
<li>Python의 웹 프레임워크/라이브러리를 고민하고 있다면 이 기사를 참고해보자!</li>
</ul>
</li>
</ul>
<h1 id="java">Java</h1>
<ul>
<li>
<p><a href="https://handstandsam.com/2019/02/24/when-you-should-use-null-in-kotlin/">When You Should Use Null in Kotlin</a></p>
<ul>
<li>Kotlin에서 Null을 언제 사용 할까요? 궁금하다면 이 기사를 참고!</li>
</ul>
</li>
<li>
<p><a href="http://dolszewski.com/spring/spring-bean/">What is Spring bean?</a></p>
<ul>
<li>Spring에서 사용하는 기본적인 객체인 <code>bean</code>에 대한 자세한 소개를 제공하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li><a href="https://dev.to/josephharveyangeles/creating-a-simple-blog-using-vue-with-markdown-2omd">Creating a Simple Blog using Vue with Markdown</a>
<ul>
<li>Vue를 사용해서 Markdown 기반의 간단한 블로그를 만드는 방법을 소개하는 튜토리얼 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li>
<p><a href="https://alligator.io/nodejs/intro-to-hapi/">An introduction to the hapi Node.js Framework</a></p>
</li>
<li>
<p><a href="https://opensource.com/article/19/3/python-image-manipulation-tools">10 Python image manipulation tools</a></p>
</li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Spring Boot - Logging, 20분 정리]]></title><description><![CDATA[<!--kg-card-begin: markdown--><blockquote>
<p>결론적으로 말하고 싶은건 프로젝트 시작시 Logback 부터 설정하자. 개발의 시작은 Logger 설정부터 아니겠는가?</p>
</blockquote>
<h2 id="">스프링 부트의 로깅 잔혹사</h2>
<p>태초에 스프링은 <a href="https://commons.apache.org/proper/commons-logging/">JCL(Jakarta Commons Logging)</a>을 사용해서 로깅(Logging)을 구현했다. 그리고 현재의 스프링 부트의 로그 구현체로 사용된 것 중에서 대표적인 것이 <a href="https://logging.apache.org/log4j/2.x/">Log4j</a>와 <a href="https://logback.qos.ch/">Logback</a>이다. JCL을 사용하면 기본적인 인터페이스인 Log와 Log</p>]]></description><link>https://www.sangkon.com/2019/03/18/hands-on-springboot-logging/</link><guid isPermaLink="false">5c8ea8c7735e3603b733e4ef</guid><category><![CDATA[JVM 관련 언어]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sun, 17 Mar 2019 20:08:43 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1455390582262-044cdead277a?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><blockquote>
<img src="https://images.unsplash.com/photo-1455390582262-044cdead277a?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Spring Boot - Logging, 20분 정리"><p>결론적으로 말하고 싶은건 프로젝트 시작시 Logback 부터 설정하자. 개발의 시작은 Logger 설정부터 아니겠는가?</p>
</blockquote>
<h2 id="">스프링 부트의 로깅 잔혹사</h2>
<p>태초에 스프링은 <a href="https://commons.apache.org/proper/commons-logging/">JCL(Jakarta Commons Logging)</a>을 사용해서 로깅(Logging)을 구현했다. 그리고 현재의 스프링 부트의 로그 구현체로 사용된 것 중에서 대표적인 것이 <a href="https://logging.apache.org/log4j/2.x/">Log4j</a>와 <a href="https://logback.qos.ch/">Logback</a>이다. JCL을 사용하면 기본적인 인터페이스인 Log와 Log 객체 생성을 담당하는 LogFactory만 구현하면 얼마든지 다른 로깅 구현체로 교체할 수 있다. 마음만 먹으면 본인이 직접 만들수도 있다.</p>
<p>스프링 부트에서 로깅 구현체를 선택하는 방법은 <a href="https://www.slideshare.net/whiteship/ss-47273947">백기선님 슬라이드</a>에 매우 자세히 소개하고 있고, 자세한 사항은 JCL의 <a href="http://commons.apache.org/proper/commons-logging/guide.html#Configuration"><code>Configuration</code></a>를 참고하면 된다. 단순하게 말하자면 JCL이 구현체를 선택하는 시점이 런타임이라 클래스 로더에 의존적이다(요즘에 클래스 로더에 뭔가 하는 일이 거의 없긴 하지만 JDK 9에서 변화가 많아졌으니 <a href="http://java9.wtf/class-loading/">Nicolai Parlog의 기사</a>를 참고해서 필요하다면 더 찾아보길 권장).</p>
<p>JCL의 문제를 한마디로 퉁치면 &quot;가비지 컬렉션&quot;이 제대로 작동하지 않는 <a href="https://articles.qos.ch/classloader.html">치명적인 문제</a>가 발생한다. 문제 해결을 위해서 클래스 로더 대신에 컴파일 시점에 구현체를 선택하도록 변경된다. 이 때 도입되는 것이 <a href="https://www.slf4j.org/">SLF4J</a>다.</p>
<p>SLF4J에서는 <code>Bridging, API, Binding</code> 모듈을 제공하여 컴파일 시점에 로깅 구현체를 결정한다. 스프링 부트에선 <a href="https://logback.qos.ch/"><code>Logback</code></a>이 기본으로 선택되어 있으니 JCL의 긴 여정의 끝에는 Logback이 있는 것이다.</p>
<blockquote>
<p>.. If we could turn back the clock and start Spring now as a new project it would use a different logging dependency. <a href="https://spring.io/blog/2009/12/04/logging-dependencies-in-spring/">Logging Dependencies in Spring</a> 중..</p>
</blockquote>
<h2 id="logback">Logback 사용법</h2>
<p>일단 로깅이 뭔지 구경부터 하고 시작하자. <code>LogService</code>를 하나 만들어서, <code>/log</code> URL에 GET 메소드에 연결하자.</p>
<pre><code class="language-java">//LogService.java
@Service
public class LogService {
    private final Logger logger = LoggerFactory.getLogger(this.getClass().getSimpleName());

    public void log() {
        logger.trace(&quot;Trace&quot;);
        logger.debug(&quot;Debug&quot;);
        logger.info(&quot;Info&quot;);
        logger.warn(&quot;Warn&quot;);
        logger.error(&quot;Error&quot;);
    }
}
</code></pre>
<p>로그를 확인하는게 목적이라 <code>@RestController</code>를 사용해서 GET 메소드에 필요한 메서드를 연결하자.</p>
<pre><code class="language-java">@RestController
@SpringBootApplication
public class LogApplication {

    @Autowired
    private LogService logService;

    public static void main(String[] args) {
        SpringApplication.run(LogApplication.class, args);
    }

    @GetMapping(&quot;/log&quot;)
    public String getLogger() {
        logService.log();
        return &quot;console log&quot;;
    }
}
</code></pre>
<p><code>curl localhost:8080/log</code>로 GET 메소드를 호출하면 콘솔창 아래와 같은 형태로 로그가 출력될 것이다. 아래 내용을 통해서 유추할 수 있는 것은 로그 수준은 INFO(trace &gt; debug &gt; info &gt; warn &gt; error) 레벨이며, 별다른 설정을 하지 않아도 로그를 사용할 수 있다는 점이다.</p>
<pre><code>2019-03-15 11:23:54.800  INFO 10216 --- [nio-8080-exec-1] LogService                               : Info
2019-03-15 11:23:54.800 ERROR 10216 --- [nio-8080-exec-1] LogService                               : Error
2019-03-15 11:23:54.800  WARN 10216 --- [nio-8080-exec-1] LogService                               : Warn
</code></pre>
<h2 id="logbackspringxml">logback-spring.xml</h2>
<p>내가 로그를 사용하는 대부분의 이유는 두 가지로 요약되는데, 1) 에러나 장애가 발생할 때 해당 내용을 재현하기 위한 기초 자료로 사용하기 위함이며 2) 사용자 로그의 경우 분석 데이터로 활용하기 위해서다. 따라서 콘솔에서 출력되는 로그는 로그 수준을 높이거나 낮추는데 그 목적이 있고, 에러나 장애 혹은 로그 분석을 위해선 로그를 파일에 저장하는데 그 목적이 있다.</p>
<p>콘솔 로그의 수준을 변경하는 방법은 <code>application.yml</code>에서 로깅 수준을 설정하는 방법이 있다. 개발 환경에서 콘솔에서 출력되는 내용을 조절하는 방법으로 적당하다. 하지만 실제 제품에서 사용하기엔 한계가 있고 세부적인 설정이 불편하기 때문에 개인적으론 <code>logback-spring.xml</code>을 별도로 만들어서 로그를 관리한다.</p>
<p>개발시 콘솔에 출력되는 로깅 수준을 간단하게 관리하고자 한다면 아래와 같이 간단한 설정을 통해서 손쉽게 변경할 수 있다. 물론 파일에 저장하거나 콘솔에 출력 문자의 양식을 변경하는 것도 가능하다.</p>
<pre><code>// application.yml
logging:
  level:
    org.springframework: INFO
    org.springframework.web: DEBUG
</code></pre>
<p><code>logback-spring.xml</code>은 <code>appender</code>와 <code>logger</code>로 나눌 수 있다. <code>appender</code>는 콘솔, 파일, DB 등 로그를 출력하는 방법을 지정할 수 있으며, logger는 출력할 곳을 설정한다. 아래 예제는 매우 단순한 형태로 실제 업무에선 FILE 뿐만 아니라 <code>SocketAppender</code>나 <code>LogStash</code> 등도 함께 설정해서 사용할 수 있다.</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
    &lt;property name=&quot;LOGS_ABSOLUTE_PATH&quot; value=&quot;./logs&quot; /&gt;

    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
        &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;
            &lt;Pattern&gt;[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{36} - %msg%n&lt;/Pattern&gt;
        &lt;/layout&gt;
    &lt;/appender&gt;

    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;file&gt;${LOGS_ABSOLUTE_PATH}/logback.log&lt;/file&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOGS_ABSOLUTE_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz&lt;/fileNamePattern&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;
    &lt;/root&gt;

    &lt;logger name=&quot;org.springframework.web&quot; level=&quot;DEBUG&quot;&gt;
        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;
        &lt;appender-ref ref=&quot;FILE&quot; /&gt;
    &lt;/logger&gt;
&lt;/configuration&gt;
</code></pre>
<p>해당 로그를 설정하면 아래와 같은 결과를 콘솔과 파일을 통해서 확인할 수 있다.</p>
<pre><code>// 콘솔에 출력되는 내용
14:04:17.480 [http-nio-8080-exec-1] INFO  LogService - Info
14:04:17.480 [http-nio-8080-exec-1] WARN  LogService - Warn
14:04:17.480 [http-nio-8080-exec-1] ERROR LogService - Error

// 파일에 출력되는 내용
[2019-03-15 15:36:59:14554][http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String com.sangkon.log.LogApplication.getLogger()
[2019-03-15 15:36:59:14571][http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'text/plain', given [*/*] and supported [text/plain, */*, text/plain, */*, application/json, application/*+json, application/json, application/*+json]
[2019-03-15 15:36:59:14572][http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [&quot;console log&quot;]
[2019-03-15 15:36:59:14579][http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
</code></pre>
<p>배포환경에 맞게 로그를 설정하고 싶다면 <a href="https://meetup.toast.com/posts/149">(Spring Boot)Logging과 Profile 전략</a>를 참고해서 자신의 배포환경에 맞게 수정해서 사용하자.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 11주(2019.3.11 - 2019.3.17)]]></title><description><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://towardsdatascience.com/data-engineering-with-python-django-and-postgresql-99409492769">Data Engineering with Python, Django, and PostgreSQL</a></p>
<ul>
<li>데이터분석을 위해서 장고의 ORM을 활용하는 방법을 소개하는 튜토리얼 기사</li>
<li>SQL이 아닌 파이썬 코드를 사용해서 데이터분석을 적용하길 원하는 분들에게 추천</li>
</ul>
</li>
<li>
<p><a href="https://blog.lerner.co.il/understanding-python-slices/">Understanding Python slices</a></p>
<ul>
<li>파이썬에서 가장 많이 활용하지만 언제나 두려운(<code>::2</code> ??) slices를 자세히 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://sobolevn.me/2019/03/enforcing-srp">Enforcing Single Responsibility Principle in Python</a></p>
<ul>
<li>복잡한 파이썬 코드에</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/03/16/sigamdream_weekly_2019_11/</link><guid isPermaLink="false">5c8bd03e735e3603b733e4da</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Fri, 15 Mar 2019 16:18:59 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1530669731069-48706bc794ab?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1530669731069-48706bc794ab?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 11주(2019.3.11 - 2019.3.17)"><p><a href="https://towardsdatascience.com/data-engineering-with-python-django-and-postgresql-99409492769">Data Engineering with Python, Django, and PostgreSQL</a></p>
<ul>
<li>데이터분석을 위해서 장고의 ORM을 활용하는 방법을 소개하는 튜토리얼 기사</li>
<li>SQL이 아닌 파이썬 코드를 사용해서 데이터분석을 적용하길 원하는 분들에게 추천</li>
</ul>
</li>
<li>
<p><a href="https://blog.lerner.co.il/understanding-python-slices/">Understanding Python slices</a></p>
<ul>
<li>파이썬에서 가장 많이 활용하지만 언제나 두려운(<code>::2</code> ??) slices를 자세히 소개하는 기사</li>
</ul>
</li>
<li>
<p><a href="https://sobolevn.me/2019/03/enforcing-srp">Enforcing Single Responsibility Principle in Python</a></p>
<ul>
<li>복잡한 파이썬 코드에 SRP의 개념을 적용하는 방법을 단계적으로 소개하는 기사</li>
<li>좋은 코드를 작성하고 싶다면, 이 기사를 차근 차근 따라해보자!</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://typealias.com/guides/kotlin-sequences-illustrated-guide/">Kotlin Sequences: An Illustrated Guide</a></p>
<ul>
<li>일반 컬렉션과 시퀸스의 차이를 시각적으로 보여주는 기사</li>
</ul>
</li>
<li>
<p><a href="https://medium.com/@arcagarwal/introduction-to-akka-streams-5155bd070e37">Introduction to Akka Streams</a></p>
<ul>
<li>기존의 액터 모델보다 높은 수준의 추상화를 제공하는 Akka Streams에 대한 기사</li>
<li>Akka에 대해서 궁금하다면 이 전 기사를 참고하세요</li>
</ul>
</li>
</ul>
<h1 id="javsscript">JavsScript</h1>
<ul>
<li><a href="https://dev.to/vuevixens/hands-on-vuejs-for-beginners-part-1-2j2g">Hands-on Vue.js for Beginners (Part 1)</a>
<ul>
<li>Vue.js 초심자에게 적합한 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li>
<p><a href="https://www.caktusgroup.com/blog/2019/03/01/django-recommended-reading/">Django: Recommended Reading</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=2bbcaRcSMF0">GOTO 2018 • Build a Q&amp;A Bot with DeepLearning4J • Willem Meints</a></p>
</li>
</ul>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Docker - 컴포넌트, 20분 정리]]></title><description><![CDATA[<h2 id="review">Review</h2>
<p>개인적으로 도커의 핵심은 '컨테이너'라 생각한다. 왜냐하면 도커와 관련된 중요한 대부분의 기술은 컨테이너를 잘 활용하는 쪽으로 초첨을 맞추고 있다고 판단하기 때문이다. 그런데 대부분의 교재나 기사에서 도커 이미지와 관련된 내용부터 설명하는 것은 컨테이너에 필요한 파일과 설정값을 저장하는 기본적인 단위로 사용되며 해당 이미지의 작성이 컨테이너 활용의 초석이기 때문이다.</p>
<p>'Docker - 이미지와 컨테이너,</p>]]></description><link>https://www.sangkon.com/2019/03/12/hands-on-docker-part2/</link><guid isPermaLink="false">5c86825d3968ba3a94a87947</guid><category><![CDATA[이것, 저것]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Mon, 11 Mar 2019 15:45:29 GMT</pubDate><media:content url="https://images.unsplash.com/uploads/141103282695035fa1380/95cdfeef?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<h2 id="review">Review</h2>
<img src="https://images.unsplash.com/uploads/141103282695035fa1380/95cdfeef?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Docker - 컴포넌트, 20분 정리"><p>개인적으로 도커의 핵심은 '컨테이너'라 생각한다. 왜냐하면 도커와 관련된 중요한 대부분의 기술은 컨테이너를 잘 활용하는 쪽으로 초첨을 맞추고 있다고 판단하기 때문이다. 그런데 대부분의 교재나 기사에서 도커 이미지와 관련된 내용부터 설명하는 것은 컨테이너에 필요한 파일과 설정값을 저장하는 기본적인 단위로 사용되며 해당 이미지의 작성이 컨테이너 활용의 초석이기 때문이다.</p>
<p>'Docker - 이미지와 컨테이너, 10분 정리'라는 글에서 파이썬 웹 프레임워크인 <a href="https://www.djangoproject.com/"><code>Django</code></a>를 사용한 이미지 작성 방법을 소개했는데, 이번에는 <a href="https://nodejs.org/en/"><code>Node.js</code></a>의 <a href="https://expressjs.com/ko/"><code>Express.js</code></a>를 사용한 웹 서비스를 사용해서 도커 이미지와 관련된 내용을 복습해보자.</p>
<p>도커 이미지를 작성하는 순서는 대략적으로 아래와 같다.</p>
<ol>
<li>Epxress.js를 사용한 웹 애플리케이션 작성</li>
<li>Dockerfile 작성</li>
<li>Dockerfile을 기반으로한 도커 이미지 작성</li>
<li>Dockerfile 에러 발생시 수정</li>
<li>도커 이미지를 컨테이너로 실행</li>
<li>해당 컨테이너 실행 확인</li>
</ol>
<h4 id="1epxressjs">1. Epxress.js를 사용한 웹 애플리케이션 작성</h4>
<p>macOS의 경우 <code>brew</code>를 사용하여 node.js를 설치하고, 다른 운영체제의 경우 node.js 홈페이지를 확인하여 설치한다. python과 마찬가지로 node.js의 패키지 매니저인 npm을 사용해서 웹 애플리케이션을 위한 환경을 설정하고 준비해보자.</p>
<pre><code>$ brew install nodejs
$ mkdir part-02 &amp;&amp; cd part-02 &amp;&amp; npm init -y
npm init -y
Wrote to /Users/sd/Works/HandsOn-Docker/part-02/package.json:

{
  &quot;name&quot;: &quot;part-02&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
$ npm install --save express
</code></pre>
<p>npm을 사용해서 express.js까지 설치가 완료되면 index.js 파일을 추가하여 아주 간단한 형태의 웹 애플리케이션을 작성한다.</p>
<pre><code>// index.js 작성
const express = require('express')
const app = express()

app.get('/', (req, res) =&gt; {
  res.send('Hello Docker!')
})

app.listen(8080, () =&gt; {
  console.log('Listening on port 8080')
})
</code></pre>
<p>package.json 파일의 'scripts' 부분을 수정해서 'serve'를 추가한다.</p>
<pre><code>// package.json 수정
...
&quot;scripts&quot;: {
    &quot;serve&quot;: &quot;node index.js&quot;,
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
},
...

</code></pre>
<p>커맨드라인에서 <code>npm run serve</code> 로 웹 서비스가 제대로 작동하는지 확인하자!</p>
<h4 id="2dockerfile">2. Dockerfile 작성</h4>
<p>Dockerfile은 아래와 같이 작성한다. <a href="https://alpinelinux.org/"><code>alpine</code></a> 리눅스를 베이스 이미지로 사용하고, 해당 이미지에 <code>npm install</code> 명령어를 사용해서 필요한 패키지를 설치한 후 <code>npm run serve</code> 명령어로 웹 서비스를 실행하는 구조로 되어있다.</p>
<p>아래를 참고해서 Dockerfile을 작성하자.</p>
<pre><code>// Dockerfile
FROM alpine
RUN npm install
CMD [&quot;npm&quot;, &quot;run&quot;, &quot;serve&quot;]
</code></pre>
<h4 id="3dockerfile">3. Dockerfile을 기반으로한 도커 이미지 작성</h4>
<p>앞서 만든 Dockerfile을 사용해서 도커 이미지를 작성해보자.</p>
<pre><code>$ docker build .
Sending build context to Docker daemon  1.974MB
Step 1/3 : FROM alpine
latest: Pulling from library/alpine
8e402f1a9c57: Pull complete
Digest: sha256:644fcb1a676b5165371437feaa922943aaf7afcfa8bfee4472f6860aad1ef2a0
Status: Downloaded newer image for alpine:latest
 ---&gt; 5cb3aa00f899
Step 2/3 : RUN npm install
 ---&gt; Running in e493c187d4d1
/bin/sh: npm: not found
The command '/bin/sh -c npm install' returned a non-zero code: 127
</code></pre>
<p>이미지 생성 과정에서 <code>/bin/sh: npm: not found</code> 에러가 발생한다. 'npm'이 없어서 에러가 발생하는 것으로 alpine에 node.js가 설치되어 있지 않아서 이런 문제가 발생한 것이다. 특정 베이스 이미지에 필요한 패키지가 없어서 발생하는 문제는 필자와 같은 초보 사용자에게 흔히 발생하는 문제라 할 수 있다.</p>
<h4 id="4dockerfile">4. Dockerfile 에러 발생시 수정</h4>
<p>이런 문제를 해결하기 위한 방법으로 1) node.js를 alpine 이미지에 설치하는 것과 2) node.js를 기본적으로 제공하는 베이스 이미지를 사용하는 방법이 있다. 이번 실습에서는 node.js를 제공하는 이미지를 사용하도록 변경해보겠다.</p>
<pre><code>// Dockerfile 수정
FROM node
RUN npm install
CMD [&quot;npm&quot;, &quot;run&quot;, &quot;serve&quot;]
</code></pre>
<p>Dockerfile 수정 후 도커 이미지를 새롭게 빌드하면 아래와 같이 뭔가 애매하게 빌드되는 것을 확인할 수 있다.</p>
<pre><code>$ docker build .
docker build .
Sending build context to Docker daemon  1.974MB
Step 1/3 : FROM node
latest: Pulling from library/node
22dbe790f715: Pull complete
0250231711a0: Pull complete
6fba9447437b: Pulling fs layer
6fba9447437b: Pull complete
c2b4d327b352: Pull complete
270e1baa5299: Pull complete
08ba2f9dd763: Pull complete
edf54285ab13: Pull complete
4d751c169397: Pull complete
Digest: sha256:7991efd8c404b230c7dc40f114fb89e148fd79b0e6819027747f8e616782e1fa
Status: Downloaded newer image for node:latest
 ---&gt; 9ff38e3a6d9d
Step 2/3 : RUN npm install
 ---&gt; Running in 24de758ac11f
npm WARN saveError ENOENT: no such file or directory, open '/package.json'
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN enoent ENOENT: no such file or directory, open '/package.json'
npm WARN !invalid#2 No description
npm WARN !invalid#2 No repository field.
npm WARN !invalid#2 No README data
npm WARN !invalid#2 No license field.

up to date in 1.012s
found 0 vulnerabilities

Removing intermediate container 24de758ac11f
 ---&gt; b50a632cd5ff
Step 3/3 : CMD [&quot;npm&quot;, &quot;serve&quot;]
 ---&gt; Running in ebb895472268
Removing intermediate container ebb895472268
 ---&gt; 422678182ff2
Successfully built 422678182ff2

</code></pre>
<p>제대로 빌드되었는지 확인하기 위해서 <code>docker iamges</code>명령어로 사용해서 확인해보면 이미지가 빌드되어 있다. 하지만 이런 간단한 애플리케이션을 생성하는데 904MB가 필요하다는 점도 놀랍고, 중간에 <code>npm WARN saveError ENOENT: no such file or directory, open '/package.json'</code>에러가 발생했기 때문에 해당 도커 이미지가 제대로 작성된 것으로 판단된지 않는다.</p>
<pre><code>$ docker images
docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
&lt;none&gt;              &lt;none&gt;              422678182ff2        About a minute ago   904MB
node                latest              9ff38e3a6d9d        2 days ago           904MB
</code></pre>
<p>일단 용량문제부터 해결해보자. 베이스 패키지의 용량이 작은 것을 선택하기 위해서 alpine OS에 node를 설치해서 용량을 줄인 <code>node:alpine</code> 으로 베이스 이미지를 변경(해당 내용은 <a href="https://hub.docker.com/_/node/%EB%A5%BC">https://hub.docker.com/_/node/를</a> 참고하자.)한다.</p>
<pre><code>// Dockerfile 수정
FROM node:apline
RUN npm install
CMD [&quot;npm&quot;, &quot;run&quot;, &quot;serve&quot;]
</code></pre>
<p>그리고 'npm' 사용시 에러가 발생하는 부분은 package.json이 베이스 이미지에 포함되어 있지 않기 때문이다. 따라서 ADD 명령과 WORKDIR을 사용해서 파일을 복사하고, 해당 명령어를 실행하는 디렉토리를 지정한다.</p>
<pre><code>// Dockerfile 수정
FROM node:apline
ADD . /app
WORKDIR /app
RUN npm install
CMD [&quot;npm&quot;, &quot;serve&quot;]
</code></pre>
<p>이제 새롭게 이미지를 빌드해보자.</p>
<pre><code>$ docker build .
Sending build context to Docker daemon  1.974MB
Step 1/5 : FROM node:alpine
alpine: Pulling from library/node
8e402f1a9c57: Pull complete
5e2195587d10: Pull complete
6f595b2fc66d: Pull complete
Digest: sha256:6da4878fc63b98ef5fde771b1f05fec9c796e49d249816fe8d544f336ae89d80
Status: Downloaded newer image for node:alpine
 ---&gt; a13f3a3ed57f
Step 2/5 : ADD . /app
 ---&gt; 913fd7d01680
Step 3/5 : WORKDIR /app
 ---&gt; Running in 2dca1a650b0d
Removing intermediate container 2dca1a650b0d
 ---&gt; 054645992ae1
Step 4/5 : RUN npm install
 ---&gt; Running in 17e20fa94d8c
npm WARN part-02@1.0.0 No description
npm WARN part-02@1.0.0 No repository field.

audited 121 packages in 0.631s
found 0 vulnerabilities

Removing intermediate container 17e20fa94d8c
 ---&gt; 5fbf735dffda
Step 5/5 : CMD [&quot;npm&quot;, &quot;serve&quot;]
 ---&gt; Running in cacf59a8312e
Removing intermediate container cacf59a8312e
 ---&gt; 39c9b83c44d7
Successfully built 39c9b83c44d7
</code></pre>
<p>생성된 도커 이미지를 확인해보면 77MB로 용량이 많이 축소되었음을 확인할 수 있다. 이미지 생성이 올바로 되었지만 Tag가 존재하지 않아서 불편하다. 해당 이미지를 삭제(<code>docker rmi</code>)하고 별도의 태그를 붙여서(`docker build -t TagName) 다시 이미지를 생성하자.</p>
<pre><code>$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
&lt;none&gt;              &lt;none&gt;              39c9b83c44d7        About a minute ago   77MB
...

// 도커 이미지 삭제
$ docker rmi 39c9b83c44d7
Deleted: sha256:39c9b83c44d75396b02dd369a982fa6e3c8073e06261e8ac0cbbf80d91491c98
Deleted: sha256:5fbf735dffda1a6a6444b5a7205a8e0da8cfe6cae410d3533fa385fe26eaf865
Deleted: sha256:c52cebf34af3d8a246af1e1ab81c57e737cf98cded3c960502b3a081e159aa3c
Deleted: sha256:054645992ae1bd77f4df6f53b65c35b560f4bad5f14ffea07d6b1ca1f6f61010
Deleted: sha256:913fd7d01680edbc9860d9aa84c30eb0cf25d8847d74fcd0d8f923afa032f576
Deleted: sha256:f603e27156194e3adcaa1474f07aebe0b5bdfa9e2bfd8910f0edf1b9f629ff19

$ docker build -t sigmadream/nodesimpleweb .
</code></pre>
<h4 id="5">5. 도커 이미지를 컨테이너로 실행</h4>
<p>도커 이미지를 컨테이너로 실행하는 방법은 매운 간단하다. 중요한 점은 웹 서비스를 도커 외부에서 접속할 수 있도록 포트를 매핑하는 명령어인 <code>-p</code>를 빼먹지 말아야 한다.</p>
<pre><code>$ docker run -it -p 8080:8080 --rm sigmadream/nodesimpleweb

&gt; part-02@1.0.0 serve /app
&gt; node index.js

Listening on port 8080
</code></pre>
<h4 id="6">6. 해당 컨테이너 실행 확인</h4>
<p>브라우져나 curl 등을 사용해서 컨테이너의 실행을 확인하자.</p>
<pre><code>$ curl localhost:8080
Hello Docker!
</code></pre>
<h2 id="dockercompose">Docker Compose</h2>
<p>대부분의 서비스는 하나의 애플리케이션으로 구성되지 않는다. 웹 애플리케이션의 경우 java, python, node.js를 사용해서 웹 애플리케이션을 작성한다고 해도 데이터베이스는 별개의 제품을 사용하는 경우가 대부분이다.</p>
<p>도커 컨테이너는 앞서 설명했듯이 독립적으로 실행되기 때문에 여러 애플리케이션과 연동해서 사용하기 위해선 별도의 방법이 필수적이다. 앞선 예에서 컨테이너와 외부 서비스를 연결하는데 사용한 <code>-p</code> 옵션이 대표적인 방법이다.</p>
<p>하지만 도커 허브에서 제공하는 다양한 도커 이미지를 사용한 컨터이너와 연계해서 시스템을 구성하고자 할 때, 어떻게 해야 할까? 포트 연결만으로 서비스를 구성할 수 없을 때 우리가 선택할 수 있는 방법이 뭐가 있을까?</p>
<p>가장 단순하고 직관적인 방법으로 컨테이너 두 개를 연결하는 것으로 도커에서 <code>--link</code> 옵션을 제공한다.</p>
<p>간단한 예제를 통해서 <code>--link</code> 사용법을 알아보자. 먼저 psql을 도커를 사용해서 백그라운드에서 실행하자.</p>
<pre><code>$ docker run -d --name db postgres
Unable to find image 'postgres:latest' locally
latest: Pulling from library/postgres
f7e2b70d04ae: Already exists
027ad848ac9c: Pull complete
7c040ef66643: Pull complete
b891079ad2eb: Pull complete
cb64a97e42d9: Pull complete
1b88625f7d89: Pull complete
a6ac0b663e77: Pull complete
594497f0a694: Pull complete
ca7201b6a21f: Pull complete
48cdfad3f2fd: Pull complete
912fb62e7390: Pull complete
1e6365c64609: Pull complete
eda829b73ec7: Pull complete
1dafb86732d6: Pull complete
Digest: sha256:0babc396eccb4e05c3ccf499a5eed9475486874b6bf4e3bb65c8c0bea0980e9f
Status: Downloaded newer image for postgres:latest
390a3f775c76bbcbe96a17cf44c20ba8af9f95a7d88c45fbfde5c078fb99079d
</code></pre>
<p>백그라운드에서 실행하고 있는 psql 서버에 접속할 수 있도록 <code>--link</code> 옵션을 적용해서 psql에 연결하자.</p>
<pre><code>$ docker run -it --name os --link db:pg ubuntu /bin/bash
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
6cf436f81810: Pull complete
987088a85b96: Pull complete
b4624b3efe06: Pull complete
d42beb8ded59: Pull complete
Digest: sha256:7a47ccc3bbe8a451b500d2b53104868b46d60ee8f5b35a24b41a86077c650210
Status: Downloaded newer image for ubuntu:latest
root@4c8437e6f23b:/#
</code></pre>
<p>두 컨테이너가 연결되어 있는지 확인해보기 위해서 psql의 환경 설정을 출력해보자.</p>
<pre><code>root@4c8437e6f23b:/# set | grep PG
PG_ENV_GOSU_VERSION=1.11
PG_ENV_LANG=en_US.utf8
PG_ENV_PGDATA=/var/lib/postgresql/data
PG_ENV_PG_MAJOR=11
PG_ENV_PG_VERSION=11.2-1.pgdg90+1
PG_NAME=/os/pg
PG_PORT=tcp://172.17.0.2:5432
PG_PORT_5432_TCP=tcp://172.17.0.2:5432
PG_PORT_5432_TCP_ADDR=172.17.0.2
PG_PORT_5432_TCP_PORT=5432
PG_PORT_5432_TCP_PROTO=tcp
</code></pre>
<p>도커에서 제공하는 Ubuntu 베이스 이미지의 경우 <code>ping</code>이 포함되어 있지 않기 때문에 <code>iputils-ping</code>을 설치하자.</p>
<pre><code>$ root@4c8437e6f23b:/# apt install iputils-ping
Reading package lists... Done
Building dependency tree
Reading state information... Done
</code></pre>
<p>이제 psql의 연결 주소(<code>PG_PORT_5432_TCP_ADDR=172.17.0.2</code>)로 ping을 보내면 응답하는 것을 확인할 수 있다.</p>
<pre><code>root@4c8437e6f23b:/# ping $PG_PORT_5432_TCP_ADDR
PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.140 ms
64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.064 ms
64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.053 ms
64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.079 ms
^C
--- 172.17.0.2 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3128ms
rtt min/avg/max/mdev = 0.053/0.084/0.140/0.033 ms
</code></pre>
<p>결론적으로 말해서 두 컨테이너는 <code>--link</code>라는 옵션을 사용해서 연결할 수 있다. 하지만 이런 형태로 도커 컨테이너를 연결해서 시스템을 구성하는 것은 많은 피로를 유발한다.</p>
<p>도커에서 제공하는 컨테이너를 손쉽게 연결해주는 방법이 필수적이다. 하나의 서비스를 구성하기 위해서 필요한 여러개의 컨테이너를 각각의 서비스로 정의하고 컨테이너를 하나의 묶음 단위로 관리할 수 있는 방법을 제공해야 한다.</p>
<p>도커에서 기본적으로 제공하는 것은 도커 컴포즈(Docker Compose)이다. 도커 컴포즈는 여러 컨테이너의 실행 환경과 설정 내용을 도커 컴포즈 설정 파일(<code>docker-compose.yml</code>)에 기록해서, 이 파일을 순차적으로 적용하여 컨테이너를 생성하는 방식이다.</p>
<h2 id="dockercompose">Docker Compose 실습</h2>
<p>만약 node.js로 만든 웹 애플리케이션에 redis를 사용해서 접속자를 출력하는 웹 애플리케이션을 작성하자. 앞서 만든 복습 예제를 활용해도 되지만, 간단한 웹 애플리케이션이기 때문에 프로젝트를 다시 만들어보자. Express.js와 redis 접속을 위한 node.js 클라이언트를 설치하자.</p>
<pre><code>$ mkdir part-03 &amp;&amp; part-03 &amp;&amp; npm init -y
Wrote to /Users/sd/Works/HandsOn-Docker/part-03/package.json:

{
  &quot;name&quot;: &quot;part-03&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}

$ npm install --save express redis
</code></pre>
<p>npm을 사용해서 실행할 수 있도록 package.json 파일을 수정하자.</p>
<pre><code>...
&quot;scripts&quot;: {
  &quot;serve&quot;: &quot;node index.js&quot;,
  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
},
...

</code></pre>
<p>index.js 파일을 작성하자.</p>
<pre><code>// index.js
const express = require('express')
const redis = require('redis')

const app = express()
const client = redis.createClient();
client.set('visits', 0)

app.get('/', (req, res) =&gt; {
  client.get('visits', (err, visits) =&gt; {
    res.send('현재 접속자 수는 ' + visits + ' 입니다')
    client.set('visits', parseInt(visits) + 1)
  })
})

app.listen(8080, () =&gt; {
  console.log('Listening on port 8080')
})

</code></pre>
<p>이제 실행해보자. 실행과 동시에 redis에 연결할 수 없다는 에러가 발생한다.</p>
<pre><code>$ npm run serve

&gt; part-03@1.0.0 serve /Users/sd/Works/HandsOn-Docker/part-03
&gt; node index.js

Listening on port 8080
events.js:173
      throw er; // Unhandled 'error' event
      ^

Error: Redis connection to 127.0.0.1:6379 failed - connect ECONNREFUSED 127.0.0.1:6379
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1083:14)
Emitted 'error' event at:
    at RedisClient.on_error (/Users/sd/Works/HandsOn-Docker/part-03/node_modules/redis/index.js:406:14)
    at Socket.&lt;anonymous&gt; (/Users/sd/Works/HandsOn-Docker/part-03/node_modules/redis/index.js:279:14)
    at Socket.emit (events.js:197:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at processTicksAndRejections (internal/process/next_tick.js:76:17)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! part-03@1.0.0 serve: `node index.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the part-03@1.0.0 serve script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/sd/.npm/_logs/2019-03-10T17_57_51_391Z-debug.log
</code></pre>
<p>redis가 설치되어 있지 않아서 에러(<code>Error: Redis connection to 127.0.0.1:6379 failed</code>)가 발생한 것이기 때문에 brew를 사용해서 redis를 설치하고, redis를 서비스(데몬)로 실행하자(다른 운영체제의 경우 redis 홈페이지를 참고해서 설치하고 실행하자).</p>
<pre><code>$ brew install redis
$ brew services start redis
</code></pre>
<p>다시 실행해보면 잘 작동하는 것을 확인할 수 있다.</p>
<pre><code>$ npm run serve

&gt; part-03@1.0.0 serve /Users/sd/Works/HandsOn-Docker/part-03
&gt; node index.js

Listening on port 8080

$ curl localhost:8080
현재 접속자 수는 0 입니다

$ curl localhost:8080
현재 접속자 수는 1 입니다

$ curl localhost:8080
현재 접속자 수는 2 입니다

$ curl localhost:8080
현재 접속자 수는 3 입니다
</code></pre>
<p>너무 잘되기 때문에 Dockerfile을 작성해서 도커 이미지로 만들자.</p>
<pre><code>//Dockerfile
FROM node:alpine

ADD . /app
WORKDIR /app

RUN npm install

CMD [&quot;npm&quot;, &quot;run&quot;, &quot;serve&quot;]
</code></pre>
<p>해당 이미지를 <code>node-app</code>이란 태그로 이미지를 작성하고, 해당 이미지를 컨테이너로 실행한다.</p>
<pre><code>$ docker build -t node-app .
</code></pre>
<p><code>-p</code>를 사용해서 컨테이너 내부와 외부를 연결하고 실행하자.</p>
<pre><code>$ docker run -it -p 8080:8080 --rm node-app

&gt; part-03@1.0.0 serve /app
&gt; node index.js

Listening on port 8080
events.js:173
      throw er; // Unhandled 'error' event
      ^

Error: Redis connection to 127.0.0.1:6379 failed - connect ECONNREFUSED 127.0.0.1:6379
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1083:14)
Emitted 'error' event at:
    at RedisClient.on_error (/app/node_modules/redis/index.js:406:14)
    at Socket.&lt;anonymous&gt; (/app/node_modules/redis/index.js:279:14)
    at Socket.emit (events.js:197:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at processTicksAndRejections (internal/process/next_tick.js:76:17)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! part-03@1.0.0 serve: `node index.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the part-03@1.0.0 serve script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2019-03-10T17_13_51_390Z-debug.log
</code></pre>
<p>redis가 서비스로 작동하지만 redis 연결 설정에서 오류가 발생한다. 다시 말하지만 도커 컨테이너는 독립적으로 실행하기 때문에 외부 서비스와 연동에 세심한 주의를 기울여야 한다.</p>
<p>이제 도커 컴포즈를 설정 파일을 사용해서 두 컨테이너를 연결해보자.</p>
<pre><code>//docker-compose.yml
version: '3'
services:
  redis-server:
    image: 'redis'
  node-app:
    build: .
    ports:
      - &quot;8080:8080&quot;

</code></pre>
<p><code>services</code> 항목에 <code>redis-server</code>와 <code>node-app</code>을 설정하였다. index.js에서 redis 접속 주소(<code>redis-server</code>)와 포트를 설정한다.</p>
<pre><code>// const client = redis.createClient();
const client = redis.createClient({
  host: 'redis-server',
  port: 6379
});
</code></pre>
<p><code>docker-compose up</code> 명령어를 사용해서 도커 컴포즈를 실행해보자. 장황한 로그가 지나고 나면 해당 서비스가 제대로 작동함을 확인할 수 있다.</p>
<pre><code>$ docker-compose up
Creating network &quot;part-03_default&quot; with the default driver
Pulling redis-server (redis:)...
latest: Pulling from library/redis
f7e2b70d04ae: Pull complete
421427137c28: Pull complete
4af7ef63ef0f: Pull complete
b858087b3517: Pull complete
2aaf1944f5eb: Pull complete
8270b5c7b90d: Pull complete
Building node-app
Step 1/5 : FROM node:alpine
 ---&gt; a13f3a3ed57f
Step 2/5 : ADD . /app
 ---&gt; 7f95079926fb
Step 3/5 : WORKDIR /app
 ---&gt; Running in 40be62c351c1
Removing intermediate container 40be62c351c1
 ---&gt; 4ade1e525971
Step 4/5 : RUN npm install
 ---&gt; Running in ec5a35492a60
npm WARN part-03@1.0.0 No description
npm WARN part-03@1.0.0 No repository field.

audited 125 packages in 1.128s
found 0 vulnerabilities

Removing intermediate container ec5a35492a60
 ---&gt; a1bbd95e7c6c
Step 5/5 : CMD [&quot;npm&quot;, &quot;run&quot;, &quot;serve&quot;]
 ---&gt; Running in de6f7dd2c258
Removing intermediate container de6f7dd2c258
 ---&gt; e9c36765fe92
Successfully built e9c36765fe92
Successfully tagged part-03_node-app:latest
WARNING: Image for service node-app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Creating part-03_redis-server_1 ... done
Creating part-03_node-app_1     ... done
Attaching to part-03_node-app_1, part-03_redis-server_1
redis-server_1  | 1:C 10 Mar 2019 17:20:56.818 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
redis-server_1  | 1:C 10 Mar 2019 17:20:56.818 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=1, just started
redis-server_1  | 1:C 10 Mar 2019 17:20:56.818 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
redis-server_1  | 1:M 10 Mar 2019 17:20:56.819 * Running mode=standalone, port=6379.
redis-server_1  | 1:M 10 Mar 2019 17:20:56.819 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
redis-server_1  | 1:M 10 Mar 2019 17:20:56.819 # Server initialized
redis-server_1  | 1:M 10 Mar 2019 17:20:56.819 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
redis-server_1  | 1:M 10 Mar 2019 17:20:56.819 * Ready to accept connections
node-app_1      |
node-app_1      | &gt; part-03@1.0.0 serve /app
node-app_1      | &gt; node index.js
node-app_1      |
node-app_1      | Listening on port 8080
</code></pre>
<p><code>docker-compose</code>를 백그라운드에서 실행하는 방법은 <code>-d</code> 옵션을 사용하는 것이다.</p>
<pre><code>$ docker-compose up -d
Creating part-03_redis-server_1 ... done
Creating part-03_node-app_1     ... done

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
27c7d580f0a9        redis               &quot;docker-entrypoint.s…&quot;   4 seconds ago       Up 3 seconds        6379/tcp                 part-03_redis-server_1
85dda2f0095d        part-03_node-app    &quot;npm run serve&quot;          4 seconds ago       Up 3 seconds        0.0.0.0:8080-&gt;8080/tcp   part-03_node-app_1
</code></pre>
<p>그리고 중지하는 방법은 <code>docker-compose down</code>이다.</p>
<pre><code>$ docker-compose down
Stopping part-03_redis-server_1 ... done
Stopping part-03_node-app_1     ... done
Removing part-03_redis-server_1 ... done
Removing part-03_node-app_1     ... done
Removing network part-03_default

$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</code></pre>
<p>너무 간단하게 docker-compose에 대해서 알아보았는데, 이 튜토리얼의 세부적인 사항은 다음편(과연?!)에 알아보도록 하겠다.</p>
]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 10주(2019.3.4 - 2019.3.10)]]></title><description><![CDATA[<h1 id="python">Python</h1>
<ul>
<li><a href="https://apirobot.me/posts/lets-talk-about-data-structures-in-python">Let’s talk about data structures in Python</a>
<ul>
<li>파이썬의 중요한 데이터 구조와 Big-O 표기법에 대해서 살펴보는 기사</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li><a href="https://proandroiddev.com/simpler-kotlin-class-hierarchies-using-class-delegation-35464106fed5">Simpler Kotlin class hierarchies using class delegation</a>
<ul>
<li>위임을 사용하여Kotlin 클래스 계층 구조를 만드는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li><a href="https://hashnode.com/post/how-to-test-your-vue-project-with-jest-and-nightwatch-cjskmturk00665ss1gauawb84">How to Test Your Vue Project with Jest and Nightwatch</a>
<ul>
<li>Jest를 사용해서 Vue.js</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/03/10/sigamdream_weekly_2019_10/</link><guid isPermaLink="false">5c84218e3968ba3a94a8793c</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sat, 09 Mar 2019 20:28:28 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1551989137-2e1bd65a8ada?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<h1 id="python">Python</h1>
<ul>
<li><a href="https://apirobot.me/posts/lets-talk-about-data-structures-in-python">Let’s talk about data structures in Python</a>
<ul>
<li>파이썬의 중요한 데이터 구조와 Big-O 표기법에 대해서 살펴보는 기사</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li><a href="https://proandroiddev.com/simpler-kotlin-class-hierarchies-using-class-delegation-35464106fed5">Simpler Kotlin class hierarchies using class delegation</a>
<ul>
<li>위임을 사용하여Kotlin 클래스 계층 구조를 만드는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li><a href="https://hashnode.com/post/how-to-test-your-vue-project-with-jest-and-nightwatch-cjskmturk00665ss1gauawb84">How to Test Your Vue Project with Jest and Nightwatch</a>
<ul>
<li>Jest를 사용해서 Vue.js 프로젝트를 테스트하는 방법을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1551989137-2e1bd65a8ada?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 10주(2019.3.4 - 2019.3.10)"><p><a href="https://www.peterbe.com/plog/django-orm-optimization-story-on-selecting-the-least-possible">Django ORM optimization story on selecting the least possible</a></p>
</li>
<li>
<p><a href="https://www.b-list.org/weblog/2019/mar/04/class/">Contributing to classiness (in Django)</a></p>
</li>
</ul>
]]></content:encoded></item><item><title><![CDATA[Docker - 이미지와 컨테이너, 10분 정리]]></title><description><![CDATA[<!--kg-card-begin: markdown--><blockquote>
<p>이번 기사에선 도커 이미지와 도커 컨테이너에 대해서 간략하세 소개하고 짧은 실습을 통해서 이미지와 컨테이너를 다루는 기초적인 방법을 소개한다.</p>
</blockquote>
<p>개인적으로 도커의 핵심은 '컨테이너'라 생각한다. 도커와 관련된 대부분의 중요한 기술은 컨테이너를 활용하는 쪽으로 초첨을 맞추고 있다고 판단하기 때문이다. 대부분의 교재나 기사에서 도커 이미지와 관련된 내용부터 설명하는 것은 컨테이너에 필요한 파일이나 설정값을 도커</p>]]></description><link>https://www.sangkon.com/2019/03/03/hands-on-docker-part1/</link><guid isPermaLink="false">5c7bb4b03968ba3a94a8792b</guid><category><![CDATA[이것, 저것]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sun, 03 Mar 2019 11:05:36 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1541474351238-b61286d07844?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><blockquote>
<img src="https://images.unsplash.com/photo-1541474351238-b61286d07844?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Docker - 이미지와 컨테이너, 10분 정리"><p>이번 기사에선 도커 이미지와 도커 컨테이너에 대해서 간략하세 소개하고 짧은 실습을 통해서 이미지와 컨테이너를 다루는 기초적인 방법을 소개한다.</p>
</blockquote>
<p>개인적으로 도커의 핵심은 '컨테이너'라 생각한다. 도커와 관련된 대부분의 중요한 기술은 컨테이너를 활용하는 쪽으로 초첨을 맞추고 있다고 판단하기 때문이다. 대부분의 교재나 기사에서 도커 이미지와 관련된 내용부터 설명하는 것은 컨테이너에 필요한 파일이나 설정값을 도커 이미지에 저장하기 때문이다. 도커 이미지를 만드는 것이 도커 컨테이너를 활용하는 초석이다.</p>
<h2 id="docker">Docker 설치</h2>
<p>macOS의 경우 <a href="https://brew.sh/"><code>brew</code></a>를 사용해서 손쉽게 설치할 수 있다. macOS의 경우 대부분의 개발 환경은 brew를 사용하면 별다른 걱정없이 설치할 수 있다(만약 macOS에서 개발환경 구성이 궁금하다면 필자가 쓴 <a href="https://www.sangkon.com/2018/09/29/osx-setting-for-developer/">이 기사</a>를 참고하자).</p>
<pre><code>brew cask install docker
</code></pre>
<p><a href="https://www.ubuntu.com/"><code>Ubunut</code></a>나 <a href="https://www.centos.org/"><code>CentOS</code></a>의 경우 도커 문서에서 제공하는 <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">설치 방법</a>을 참고하면 된다. 대부분의 경우 개발환경 구성시 Ubuntu/Centos 등 잘 알려진 리눅스 배포판은 약간의 검색을 통하면 별다른 어려움 없이 손쉽게 설치할 수 있으니 문제가 생기면 구글 검색을 생활화하자. 그리고 Ubuntu/Centos에서 제공하는 패키지 매니저를 최대한 활용하자.</p>
<pre><code class="language-bash">$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
...
</code></pre>
<p>윈도우의 경우 도커 공식 <a href="https://docs.docker.com/docker-for-windows/install/">홈페이지에서 제공</a>하는 파일을 사용해서 설치를 진행한다. 설치는 가장 쉽지만(다운로드 후 exe 파일로 설치) 몇가지 사소한 부분에서 문제가 발생할 우려가 있으니(Hypver-V vs VirtualBox) 설치시 문제가 발생한다면 구글에서 검색을 생활화하고 검색 기간을 '지난 1년'으로 한정해서 검색 결과를 확인해 보길 권한다.</p>
<h2 id="">설치 확인을 위한 간단한 예제</h2>
<p>설치가 끝나면 아래 명령어를 터미널(<code>iterm</code>)이나 커맨드(<code>cmd</code> or <code>powershell</code>)에서 실행해보자. 터미널에 <code>docker run hello-world</code> 실행 후 아래와 비슷한 화면이 출력되면 도커 설치가 제대로 된 것이다.</p>
<pre><code>$ docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
1b930d010525: Pull complete
Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
</code></pre>
<p>도커 설치만 문제 없다면 별다른 설정없이 곧바로 사용할 수 있다. 여기까지 문제없이 혹은 문제를 해결하면서 왔다면 축하한다! 이제 도커 이미지와 컨테이너 사용법을 익히자!</p>
<h2 id="docker">Docker 이미지 관련 명령어</h2>
<p>시스템과 서비스에 필요한 코드를 모아둔 최소한의 단위를 이미지(image)라 한다. 도커는 실행에 필요한 시스템과 서비스를 운영하는데 필요한 단위를 컨테이너(<code>container</code>)라는 개념을 사용하는데 컨테이너는 이미지를 기반으로 운영된다. 도커의 이미지는 도커가 설치된 곳이라면 어디서든 컨테이너로 작동시킬 수 있다.</p>
<p>도커의 시작은 이미지를 이해하는 것에서 시작하고, 우리의 긴 여정은 도커 이미지를 만드는 것으로 출발한다.</p>
<h3 id="dockersearch">이미지 검색(docker search)</h3>
<p>필자는 &quot;바퀴를 다시 발명하지 말라(reinventing the wheel)&quot;는 격언을 무시하고 항상 바퀴를 다시 발명하면서(혹은 똑같이 만들면서) 뭔가를 배웠다. 하지만 이번에는 기존에 존재하는 도커 이미지를 다운받고 사용하는 방법을 먼저 소개하고자 한다.</p>
<p>도커는 공식적인 저장소에서 필요한 도커 이미지를 검색하는 방법을 제공한다. 검색결과에서 <code>OFFICIAL</code>에 <code>[OK]</code>로 표시된 것은 공식 이미지다. 공식 이미지의 경우 사용자명(<code>wodby</code>)이 붙지 않는다. 예를 들어서 <code>node</code>와 <code>mhart/alpine-node</code>의 경우 <code>node</code>는 공식이미지이며, <code>mhart/alpine-node</code>는 공식 이미지가 아니다. 공식 이미지가 아닌 경우 주의해서 사용해야 하며, 공식적인 저장소가 아닌 경우도 마찬가지다. AWS/Azure를 사용하게 될 경우 개인저장소를 만드는 경험을 하게 될 것이다. 하지만 우리는 별다른 이유가 없다면 공식적인 저장소에서 공식적인 이미지를 주로 사용할 것이다.</p>
<pre><code class="language-bash">$ docker search nginx
NAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
nginx                                                  Official build of Nginx.                        10940               [OK]
...
wodby/nginx                                            Generic nginx                                   0                                       [OK]

$ docker search --filter=is-automated=true nginx
NAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
jwilder/nginx-proxy                                    Automated Nginx reverse proxy for docker con…   1537                                    [OK]
...
wodby/nginx                                            Generic nginx                                   0                                       [OK]
</code></pre>
<h3 id="dockerimagepull">이미지 다운로드(docker image pull)</h3>
<p>도커 이미지를 다운 받는 방법은 <code>pull</code> 명령어를 사용해서 도커 이미지와 버전(<code>centos:latest</code> 또는 <code>centos:7</code>)을 사용해서 원하는 이미지를 다운받을 수 있다. 버전을 명시하지 않으면 가장 최신(`latest)의 이미지를 다운 받는다. 의존성 문제가 없다면 최신 버전의 이미지를 사용하면 된다. 하지만 도커를 사용하는 대부분의 경우 의존성 문제를 해결하고자 하는 경우가 많기 때문에 자신이 필요한 이미지를 다운받는 방법은 숙지할 필요가 있다.</p>
<pre><code class="language-bash">// 최신버전
$ docker pull centos:latest
latest: Pulling from library/centos
a02a4930cb5d: Pull complete
Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426
Status: Downloaded newer image for centos:latest

// 특정 버전
$ docker pull centos:7
7: Pulling from library/centos
a02a4930cb5d: Extracting [===============================&gt;                   ]  47.91MB/75.17MB
Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426
Status: Downloaded newer image for centos:7

// 모든 버전
$ docker pull -a centos
5.11: Pulling from library/centos
2068b24f564b: Downloading [=============&gt;                                     ]  23.13MB/87.09MB
...
centos7.6.1810: Pulling from library/centos
Digest: sha256:5d4f4e6051c7cc10f2e712f9dc3f86a2bd67e457bced7ca52a71c243099c0121
centos7: Pulling from library/centos
Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426
latest: Pulling from library/centos
Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426
Status: Downloaded newer image for centos
</code></pre>
<p>그렇다면, 아주 간단한 예제 문제를 풀어보자. Ubuntu 리눅스 최신버전과 <code>16.04</code> 버전의 도커 이미지를 다운 받아보자.</p>
<h3 id="dockerimagels">이미지 목록 표시(docker image ls)</h3>
<p>다운 받은 도커 이미지를 확인하기 위해선 <code>ls</code>라는 명령어를 사용한다.  이미지와 관련된 내용을 확인하기 때문에 <code>image</code>라는 관리 커맨드(<code>management command</code>)를 사용하면 된다. 예를 들어 컨테이너 목록은 <code>docker container</code>이며 도커의 네트워크 목록은 <code>docker network ls</code>이다. 다운받은 이미지 목록을 출력하는 방법은 <code>docker image ls</code>이다. 하지만 도커 이미지 목록을 확인하는 명령어가 매우 길다고 판단했는지, <code>docker images</code>라는 짧은 명령어도 제공한다.</p>
<pre><code class="language-bash">// 필자가 선호하는 명령어 스타일
$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              f09fe80eb0e7        2 weeks ago         109MB
centos              latest              1e1148e4cc2c        2 months ago        202MB

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              f09fe80eb0e7        2 weeks ago         109MB
centos              latest              1e1148e4cc2c        2 months ago        202MB
</code></pre>
<h3 id="dockerimagetag">이미지 태그 설정(docker image tag)</h3>
<p>동일한 도커 이미지를 기준으로 내부적인 설정이나 몇가지 필요한 것들을 도커 이미지에 적용하게 될 경우 원본 이미지와 구별하기 위해서 도커 이미지에 별도의 태그를 붙일 수 있다. 도커 이미지에 별도의 태그(<code>tag</code>)를 설정하는 방법은 아래와 같다.</p>
<pre><code class="language-bash">$ docker image tag nginx:latest webserver:1.0
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              f09fe80eb0e7        2 weeks ago         109MB
webserver           1.0                 f09fe80eb0e7        2 weeks ago         109MB
centos              latest              1e1148e4cc2c        2 months ago        202MB
</code></pre>
<h3 id="dockerimagerm">이미지 삭제(docker image rm)</h3>
<p>다운받은 도커 이미지를 삭제하는 방법은 <code>rm</code> 명령어를 사용하면 된다. 이미지를 삭제하기 때문에 <code>image</code>라는 관리 커맨드를 사용한다. <code>docker iamge rm</code> 명령어를 사용하면 되고, 단축 명령어로 <code>docker rmi</code>를 제공한다.</p>
<pre><code class="language-bash">$ docker image rm webserver:1.0
Untagged: webserver:1.0

$ docker rmi nginx
Untagged: nginx:latest
Untagged: nginx@sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534
Deleted: sha256:f09fe80eb0e75e97b04b9dfb065ac3fda37a8fac0161f42fca1e6fe4d0977c80
Deleted: sha256:355e42205f69706706acf084bc2ed484ea5c034a8861b5bcebb7d8bf141fd686
Deleted: sha256:70cc0be2e302cca187cfadaaf528005d004bec56d46ae890a8a06bdd96768ef1
Deleted: sha256:0a07e81f5da36e4cd6c89d9bc3af643345e56bb2ed74cc8772e42ec0d393aee3
</code></pre>
<h2 id="docker">Docker 컨테이너</h2>
<p>앞서 도커 이미지를 다운받고 삭제하는 간단한 과정을 소개했다. 아직은 우리가 도커 이미지를 만들 순 없지만 다운 받은 도커 이미지를 사용해서 도커 컨테이너를 생성해보도록 하자.</p>
<h3 id="docker">Docker 컨테이너의 라이프 사이클</h3>
<ol>
<li>컨테이너 생성(docker create), 도커 이미지를 사용해서 도커 컨테이너를 생성한다. 도커 이미지에 도커 컨테이너를 동작시키기 위하여 필요한 파일과 설정이 포함되어야 한다. 도커 컨테이너를 생성하면 도커 이미지의 스냅샷을 만든다. 스냅샷이란 특정 시간에 스토리지 내부에 존재하는 파일과 디렉토리를 저장한 것이다. 도커 컨테이너를 생성하게 되면 해당 컨테이너를 만들기만 할 뿐 실행하지 않는다.</li>
<li>컨테이너 생성 및 구동(docker run), 도커 이미지를 사용해서 컨테이너를 생성하고 곧바로 구동까지 진행한다. 컨테이너 생성과의 차이점은 생성은 도커 컨테이너를 실행하지 않고, 컨테이너 생성 및 구동은 도커 컨테이너를 생성하고 실행한다는 점이다.</li>
<li>컨테이너 구동(docker start), 중지 상태인 컨테이너를 실행 할 때 사용한다.</li>
<li>컨테이너 중지(docker stop), 실행 상태인 컨테이너를 중지할 떄 사용한다.</li>
<li>컨테이너 삭제(docker rm), 컨테이너를 삭제할 때 사용하는 것으로 이미지는 삭제되지 않는다.</li>
</ol>
<h3 id="dockerrun">컨테이너 생성 및 실행(docker run)</h3>
<p>기존의 도커 이미지를 기반으로 컨테이너를 생성하고 실행하는 방법은 <code>docker run</code> 명령어를 사용하면 된다. 자세한 사용은 아래를 참고하자. <code>run</code> 명령어 뒷 부분의 <code>-it</code>와 <code>--name &quot;test&quot;</code>은 옵션이며, <code>centos</code>는 이미지 이름이다. <code>/bin/cal</code>은 해당 이미지 내부에서 실행할 명령이다.</p>
<pre><code>// centos 이미지의 `/bin/cal` 명령어를 `test`라는 컨테이너로 실행
$ docker run -it --name &quot;test&quot; centos /bin/cal
Unable to find image 'centos:latest' locally
latest: Pulling from library/centos
a02a4930cb5d: Pull complete
Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426
Status: Downloaded newer image for centos:latest
    February 2019
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28

// 동일한 컨테이너 이름으로 실행 불가
$ docker run -it --name &quot;test&quot; centos /bin/cal
docker: Error response from daemon: Conflict. The container name &quot;/test1&quot; is already in use by container &quot;fef7f7a3333db51772bfa04dc263712ff8d7161b3e09617fb20f7803f8f1974c&quot;. You have to remove (or rename) that container to be able to reuse that name.
See 'docker run --help'.

// 컨테이너 실행 중단
$ docker stop fef7f
fef7f

// 컨테이너 삭제(이미지 삭제가 아님)
$ docker rm fef7f
fef7f

// 실행 후 컨테이너 삭제(`--rm`)
$ docker run -it --rm --name &quot;test&quot; centos /bin/cal
    February 2019
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28

$ docker run -it --rm --name &quot;test&quot; centos /bin/cal
    February 2019
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28

</code></pre>
<ul>
<li><code>-it</code>; 현재 터미널이나 콘솔에 결과를 출력</li>
<li><code>--rm</code>; 실행 후 컨테이너 삭제</li>
<li><code>--name &quot;&lt;NAME&gt;&quot;</code>; 컨테이너 이름</li>
<li><code>centos</code>; 이미지 이름</li>
<li><code>/bin/cal</code>; 컨테이너에서 실행하는 커맨드</li>
</ul>
<h3 id="dockercontainerrun">컨테이너의 백그라운드 실행(docker container run)</h3>
<p>도커 컨테이너를 시스템 백그라운드에서 계속해서 실행하고자 할 때 <code>-d</code> 옵션을 사용하면 된다.</p>
<pre><code>$ docker run -d centos /bin/ping localhost
Unable to find image 'centos:latest' locally
latest: Pulling from library/centos
a02a4930cb5d: Pull complete
Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426
Status: Downloaded newer image for centos:latest
1038715c65eef3ab578e546b6b6a1abebcd4d0ecabe685aa28c3f726435bd1a1

// 컨테이너에서 발생하는 로그를 확인
$ docker logs 1038715
...
64 bytes from localhost (127.0.0.1): icmp_seq=40 ttl=64 time=0.034 ms
64 bytes from localhost (127.0.0.1): icmp_seq=41 ttl=64 time=0.050 ms
64 bytes from localhost (127.0.0.1): icmp_seq=42 ttl=64 time=0.037 ms
</code></pre>
<ul>
<li><code>-d</code>; 백그라운드에서 실행</li>
<li><code>/bin/ping localhost</code>; 컨테이너에서 실행하는 커맨드</li>
</ul>
<h3 id="dockercontainerrun">컨테이너의 네트워크 설정(docker container run)</h3>
<p>컨테이너의 내부 포트와 호스트 컴퓨터의 포트를 연결하기 하기 위한 명령어로 <code>-p</code>를 사용하여 호스트와 컨테이너의 포트를 적어주면 된다.</p>
<pre><code class="language-bash">$ docker run -d -p 8080:80 httpd
Unable to find image 'httpd:latest' locally
latest: Pulling from library/httpd
6ae821421a7d: Pull complete
0ceda4df88c8: Pull complete
24f08eb4db68: Pull complete
ddf4fc318081: Pull complete
fc5812428ac0: Pull complete
Digest: sha256:5e7992fcdaa214d5e88c4dfde274befe60d5d5b232717862856012bf5ce31086
Status: Downloaded newer image for httpd:latest
88e529c70d3a4a85f5e1aa77eca3923865cd7123c0f77b15fdf0c84916358203

// 해당 컨테이너의 포트를 확인하는 방법
$ docker port httpd
80/tcp -&gt; 0.0.0.0:8080
</code></pre>
<ul>
<li><code>-p [Host]:[Container]</code>; 호스트와 컨테이너 포트를 매핑<br>
`</li>
</ul>
<h2 id="dockerfile">Dockerfile의 예제</h2>
<p><code>Dockerfile</code>은 도커 이미지를 작성하는데 필요한 파일이다. 필자가 도커 허브에서 다운로드 받아서 사용하는 경우는 DB 이미지를 제외하면 거의 없으며, 대부분이 개인적으로 이미지를 만들어서 사용한다. 앞에서 도커 이미지와 컨테이너 사용법에 대해서 간략하게 소개했으니 이번에는 <code>Django</code> 관련 도커 이미지를 만들고 컨테이너로 실행하는 방법을 실습을 통해서 실행해보자.</p>
<p>일단 호스트 환경에서 django 개발 환경을 설정한다.</p>
<pre><code>// django 개발을 위한 가상환경 설정
$ mkdir part01 &amp;&amp; cd part01 &amp;&amp; python -m venv venv
$ source venv\Scripts\activate
</code></pre>
<p><code>pip</code>를 사용해서 Django 웹 프레임워크를 설치하고, 간단한 예제를 하나 만든다.</p>
<pre><code>// pip를 사용한 django 설치하고 requirements.txt 파일을 생성하자
(venv) $ pip install django
Collecting django
  Using cached https://files.pythonhosted.org/packages/c7/87/fbd666c4f87591ae25b7bb374298e8629816e87193c4099d3608ef11fab9/Django-2.1.7-py3-none-any.whl
Requirement already satisfied: pytz in ./venv/lib/python3.7/site-packages (from django) (2018.9)
Installing collected packages: django
Successfully installed django-2.1.7
You are using pip version 18.1, however version 19.0.3 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.

(venv) $ pip freeze &gt; requirements.txt
</code></pre>
<p><code>django-admin</code>을 사용해서 프로젝트를 생성하고, 실행을 위한 데이터베이스 마이그레이션을 실행한다.</p>
<pre><code>// 프로젝트 생성
(venv) $ django-admin startproject hello .

// 마이그레이션 실행
(venv) $ python manage.py migrate
python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK

// 내장 웹 서버 실행
(venv) $ python manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).
March 10, 2019 - 16:21:13
Django version 2.1.7, using settings 'part01.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
</code></pre>
<p>기초적인 설정이 끝나면 예제 확인을 위한 새로운 애플리케이션을 하나 추가한다.</p>
<pre><code>(venv) $ python manage.py startapp pages
</code></pre>
<p><code>part01/setting.py</code>을 수정하자.</p>
<pre><code>// 접속 IP 제한을 해제
ALLOWED_HOSTS = ['*']

// 추가된 애플리케인션을 등록
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages'
]
</code></pre>
<p><code>hello/urls.py</code>를 추가한다.</p>
<pre><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('pages.urls')),
]
</code></pre>
<p><code>pages/views.py</code>에 아래 내용을 추가한다.</p>
<pre><code>from django.http import HttpResponse


def homePageView(request):
  return HttpResponse('Hello, Docker')

</code></pre>
<p><code>pages/urls.py</code>에 아래 내용을 추가한다.</p>
<pre><code>from django.urls import path

from .views import homePageView

urlpatterns = [
    path('', homePageView, name='home')
]
</code></pre>
<p>제대로 작동하는지 확인한다.</p>
<pre><code>(venv) $ python manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).
March 10, 2019 - 16:27:15
Django version 2.1.7, using settings 'part01.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
[10/Mar/2019 16:27:24] &quot;GET / HTTP/1.1&quot; 200 13

(venv) $ curl localhost:8000
Hello, Docker
</code></pre>
<p>이제 <code>Dockerfile</code>를 작성하자.</p>
<pre><code># `FROM`은 base image를 지정, Base image를 지정할때는 버젼까지 정확히 지정하는 것을 권장
FROM python:latest

# `EXPOSE`는 Docker container 외부에 노출할 포트를 지정
EXPOSE 8000

# `ENV`는 환경변수를 지정할 때 사용
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# `RUN`은 shell command를 해당 docker image에 실행시킬때 사용
RUN apt update -y &amp;&amp; apt upgrade -y

# `ADD`는 파일과 디렉토리를 호스트에서 docker image로 copy
ADD . /app

# `WORKDIR`은 Working directory를 지정
WORKDIR /app

RUN pip install -r requirements.txt

# `CMD`를 사용하여 docker container가 시작할때 실행할 커맨드를 지정
CMD [&quot;python&quot;, &quot;manage.py&quot;, &quot;runserver&quot;, &quot;0.0.0.0:8000&quot;]
</code></pre>
<p>도커 이미지를 만드는 방법과 실행은 아래와 같다.</p>
<pre><code>(venv) $ docker build -t python-django .
</code></pre>
<p>만든 이미지를 컨테이너로 실행하는 방법은 아래와 같다.</p>
<pre><code>(venv) $ docker run -it -p 8000:8000 --rm python-django
</code></pre>
<p>단순하게 도커 이미지를 생성하는 방법과 도커 이미지를 사용해서 컨테이너를 활용하는 방법을 소개했다. 이후에 여러 도커 컨테이너를 사용하여 규모있는 소프트웨어를 작성하는 방법을 알아보자.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 9주(2019.2.15 - 2019.3.3)]]></title><description><![CDATA[<h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://codequs.com/p/BkaLEq8r4/a-complete-machine-learning-project-walk-through-in-python">A Complete Machine Learning Project Walk-Through in Python</a></p>
<ul>
<li>이 기사는 ML에 관한 기본적인 솔류션을 제공하고, 개별적인 ML 방법이 어떻게 연관되어 있는지 설명하는 기사</li>
</ul>
</li>
<li>
<p><a href="http://rahmonov.me/posts/write-python-framework-part-one/">How to write a Python web framework. Part I.</a></p>
<ul>
<li>웹 프레임워크를 만들면서 Flask와 Django의 '마법'에 대해서 고민해보는 기회를 주는 기사</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/10-python-file-system-methods-you-should-know-799f90ef13c2">10 Python File System Methods You</a></p></li></ul>]]></description><link>https://www.sangkon.com/2019/03/03/sigamdream_weekly_2019_9/</link><guid isPermaLink="false">5c841d653968ba3a94a87935</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sat, 02 Mar 2019 20:10:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1552057465-db19fd52c0ec?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1552057465-db19fd52c0ec?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 9주(2019.2.15 - 2019.3.3)"><p><a href="https://codequs.com/p/BkaLEq8r4/a-complete-machine-learning-project-walk-through-in-python">A Complete Machine Learning Project Walk-Through in Python</a></p>
<ul>
<li>이 기사는 ML에 관한 기본적인 솔류션을 제공하고, 개별적인 ML 방법이 어떻게 연관되어 있는지 설명하는 기사</li>
</ul>
</li>
<li>
<p><a href="http://rahmonov.me/posts/write-python-framework-part-one/">How to write a Python web framework. Part I.</a></p>
<ul>
<li>웹 프레임워크를 만들면서 Flask와 Django의 '마법'에 대해서 고민해보는 기회를 주는 기사</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/10-python-file-system-methods-you-should-know-799f90ef13c2">10 Python File System Methods You Should Know</a></p>
<ul>
<li>파이썬으로 파일 시스템을 다루는데 도움을 주는 10가지 팁</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://dev.to/cjbrooks12/how-to-document-a-kotlin-project-edc">How To Document A Kotlin Project</a></p>
<ul>
<li>코틀린을 사용한 프로젝트의 문서화에 대한 기사</li>
</ul>
</li>
<li>
<p><a href="https://medium.com/google-developer-experts/using-navigation-architecture-component-in-a-large-banking-app-ac84936a42c2">Using Navigation Architecture Component in a large banking app</a></p>
<ul>
<li>안드로이드 Navigation Architecture를 적용하면서 알게된 내용을 정리한 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li>
<p><a href="https://dev.to/syonip/vue-cli-router--vuetify-plugins-gga">Vue CLI Router + Vuetify plugins</a></p>
<ul>
<li>Vue CLI의 라우터 플러그인과 vuetify 플러그인을 하나의 레이아웃에 적용하는 방법에 대한 간단한 튜토리얼 기사</li>
</ul>
</li>
<li>
<p><a href="https://dev.to/arswaw/create-a-lightweight-componentized-spa-without-node-569j">Use Vue to create a SPA without any Node modules</a></p>
<ul>
<li>Vue.js와 ES6를 사용하여 SPA 웹 프로그램을 만드는 방법을 소개하는 튜토리얼 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://www.timsommer.be/famous-laws-of-software-development/">Famous Laws Of Software Development</a></li>
</ul>
]]></content:encoded></item><item><title><![CDATA[내 맘대로 위클리 뉴스 - 2019년 8주(2019.2.18 - 2019.2.24)]]></title><description><![CDATA[<h1 id="python">Python</h1>
<ul>
<li>
<p><a href="https://medium.com/machine-learning-for-everyone/why-machine-learning-for-everyone-blog-ab7321042976">Machine Learning for Everyone</a></p>
<ul>
<li>ML에 대한 개략적인 소개하는 기사로 실질적인 예제를 중심으로 설명하고 있고 아주 적절하고 인터렉티브한 이미지를 통해 직관적으로 이해할 수 있도록 가이드를 하고 있음</li>
<li>ML과 관련된 아주 멋진 그리고 위대한 기사</li>
<li>이번주 필독!</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/learn-enough-python-to-be-useful-argparse-e482e1764e05">Learn Enough Python to be Useful: argparse</a></p>
<ul>
<li>다양한 스크립트를 작성할 때 필요한 <code>argparse</code>에</li></ul></li></ul>]]></description><link>https://www.sangkon.com/2019/02/25/sigamdream_weekly_2019_8/</link><guid isPermaLink="false">5c72b2913968ba3a94a87924</guid><category><![CDATA[주간 뉴스]]></category><dc:creator><![CDATA[Sangkon Han]]></dc:creator><pubDate>Sun, 24 Feb 2019 15:05:39 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1550947546-c914d1acd071?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<h1 id="python">Python</h1>
<ul>
<li>
<img src="https://images.unsplash.com/photo-1550947546-c914d1acd071?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="내 맘대로 위클리 뉴스 - 2019년 8주(2019.2.18 - 2019.2.24)"><p><a href="https://medium.com/machine-learning-for-everyone/why-machine-learning-for-everyone-blog-ab7321042976">Machine Learning for Everyone</a></p>
<ul>
<li>ML에 대한 개략적인 소개하는 기사로 실질적인 예제를 중심으로 설명하고 있고 아주 적절하고 인터렉티브한 이미지를 통해 직관적으로 이해할 수 있도록 가이드를 하고 있음</li>
<li>ML과 관련된 아주 멋진 그리고 위대한 기사</li>
<li>이번주 필독!</li>
</ul>
</li>
<li>
<p><a href="https://towardsdatascience.com/learn-enough-python-to-be-useful-argparse-e482e1764e05">Learn Enough Python to be Useful: argparse</a></p>
<ul>
<li>다양한 스크립트를 작성할 때 필요한 <code>argparse</code>에 대한 간략한 안내서</li>
</ul>
</li>
</ul>
<h1 id="jvm">JVM</h1>
<ul>
<li>
<p><a href="https://medium.com/@elizarov/null-is-your-friend-not-a-mistake-b63ff1751dd5">Null is your friend, not a mistake</a></p>
<ul>
<li>Nullability에 대한 짧은 역사를 소개하는 기사</li>
<li><code>JDK</code> 사용자라면 꼭 읽어보자!</li>
</ul>
</li>
<li>
<p><a href="https://filippobuletto.github.io/solid-java/#">SOLID Java</a></p>
<ul>
<li>SOLID 원칙을 Java 코드를 사용해서 안내하는 기사</li>
</ul>
</li>
</ul>
<h1 id="javascript">JavaScript</h1>
<ul>
<li><a href="https://medium.com/javascript-in-plain-english/similarities-and-differences-between-vuex-and-redux-by-developing-an-application-be3df0164b22">I created the same app with Vuex and Redux. Here are the differences.</a>
<ul>
<li>Vue.js와 React.js를 비교하면서 todo 앱을 만들면서 두 도구를 비교하면서 알게된 것을 소개하는 기사</li>
</ul>
</li>
</ul>
<h1 id="etc">Etc</h1>
<ul>
<li><a href="https://towardsdatascience.com/train-neural-networks-using-amd-gpus-and-keras-37189c453878">Train neural networks using AMD GPU and Keras</a></li>
<li><a href="https://www.bernat.tech/pep-517-and-python-packaging/">The state of Python Packaging</a></li>
</ul>
]]></content:encoded></item></channel></rss>