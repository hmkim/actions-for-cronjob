<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harfang's Perch</title>
    <description>On software in general, with focus on Elm, Elixir</description>
    <link>https://harfangk.github.io/</link>
    <atom:link href="https://harfangk.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Jan 2019 07:59:21 +0000</pubDate>
    <lastBuildDate>Sun, 13 Jan 2019 07:59:21 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
    
      <item>
        <title>How to Trigger Multiple Msgs in Elm</title>
        <description>&lt;p&gt;In the Elm Architecture, &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; function is responsible for changing &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; state. Depending on how you structure your &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;, sometimes you may want to call &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; function again with another &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt; after calling &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; function. Recursively calling &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; is straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;type Msg
    = FirstMsg
    | SecondMsg

update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        FirstMsg -&amp;gt; 
            update SecondMsg model

        SecondMsg -&amp;gt; 
            ( model, Cmd.none )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But sometimes you may want to trigger multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt;s. &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; can be used here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;type Msg
    = FirstMsg
    | SecondMsg ()
    | ThirdMsg ()

update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        FirstMsg -&amp;gt; 
            let
                cmd =
                      Cmd.batch
                          [ Task.perform SecondMsg (Task.succeed ())
                          , Task.perform ThirdMsg (Task.succeed ())
                          ]
            in
                ( model, cmd )

        SecondMsg -&amp;gt; 
            ( model, Cmd.none )

        ThirdMsg -&amp;gt;
            ( model, Cmd.none )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The caveat is that there’s no guaranteed ordering between &lt;code class=&quot;highlighter-rouge&quot;&gt;SecondMsg&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ThirdMsg&lt;/code&gt;, and that these subsequent &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt;s require arguments. Most importantly, I think recursively calling &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; is a bad practice. Use this approach only when there’s absolutely no other way.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jan 2019 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2019/01/12/elm-multiple-msgs.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2019/01/12/elm-multiple-msgs.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Organize Port Functions in Elm</title>
        <description>&lt;p&gt;I’ve been thinking about how to organize Elm’s port functions and here’s two approaches that I’ve put together. I assume that the readers know basics of Elm, including the Elm Architecture and how ports work. I put a working Elm app example in my Github repository. If you want to run it, follow this instruction to set it up:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone harfangk/elm-port-examples
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;elm-port-example
npm install &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; elm elm-live
elm-live src/Main.elm &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;elm.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;individual-ports&quot;&gt;Individual Ports&lt;/h1&gt;

&lt;p&gt;This approach defines a port function for each interaction between Elm and JavaScript. Since ports are always one-way, if data goes back and forth, that requires a pair of ports. Here’s a sample implementation. The entire code can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;individual-ports&lt;/code&gt; branch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;# Main.elm

update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        RemoveLocalStorageItem -&amp;gt;
            ( model, removeLocalStorageItem model.keyForRemoveItem )

        _ -&amp;gt; ( model, Cmd.none )

subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
    Sub.batch
        [ gotLocalStorageItem GotLocalStorageItem
        , gotCookies GotCookies
        ]

port setLocalStorageItem : { key : String, value : String } -&amp;gt; Cmd msg
port getLocalStorageItem : String -&amp;gt; Cmd msg
port gotLocalStorageItem : ({ key : String, value : Maybe String } -&amp;gt; msg) -&amp;gt; Sub msg
port removeLocalStorageItem : String -&amp;gt; Cmd msg
port clearLocalStorage : () -&amp;gt; Cmd msg
port getCookies : () -&amp;gt; Cmd msg
port gotCookies : (String -&amp;gt; msg) -&amp;gt; Sub msg
port setCookie : { key : String, value : String } -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Individual ports approach lets you write more granular functions that do only one things. They also have more specific type signatures for inputs and outputs, providing better type safety at compile time. Since they are all separate functions, you can give them semantic names for better readability.&lt;/p&gt;

&lt;p&gt;Because port functions are small and specific, they are unlikely to leak across module boundaries. Check out &lt;code class=&quot;highlighter-rouge&quot;&gt;complex-model-individual-ports&lt;/code&gt; branch for a more complex model structure. You can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.Storage.initModel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.Storage.update&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.Storage.view&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.Storage.subscriptions&lt;/code&gt; are the only connecting parts between &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; module and &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.Storage&lt;/code&gt; module. This makes it easy to decouple modules and replace them as required.&lt;/p&gt;

&lt;p&gt;On the other hand, the number of required port functions quickly grows unwieldy under this approach - 10 port functions were required to implement basic local storage and cookie interactions. It’s not hard to see more than a hundred port functions in larger applications.&lt;/p&gt;

&lt;p&gt;Moreover, while this approach allows easier modularization, each module tends to intermix core Elm codes and Elm-JavaScript interoperation codes. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.Storage&lt;/code&gt; module, it is hard to quickly discern which &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt; handles Elm events and which handles JavaScript events. You can use comments to somewhat mitigate this, but this remedy is likely to fall apart as you add more &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, each port function requires its own event listener, which might tax performance at some point. But I’m not sure how Elm handles this issue so it might be an unfounded concern.&lt;/p&gt;

&lt;h2 id=&quot;centralized-ports&quot;&gt;Centralized Ports&lt;/h2&gt;

&lt;p&gt;This approach defines one port to handle all interactions from Elm to JavaScript, and another to handle all interactions from JavaScript to Elm. The entire code can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;centralized-ports&lt;/code&gt; branch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;# Main.elm
update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        RemoveLocalStorageItem -&amp;gt;
            let
                portMsg =
                    Port.RemoveLocalStorageItem { key = model.keyForRemoveItem }
                        |&amp;gt; Port.encode
            in
            ( model, Port.sendPortMsg portMsg )

        _ -&amp;gt; ( model, Cmd.none)

subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
    Port.gotPortMsg (JD.decodeValue Port.decoder &amp;gt;&amp;gt; GotPortMsg)
    
# Port.elm 

port sendPortMsg : JE.Value -&amp;gt; Cmd msg
port gotPortMsg : (JE.Value -&amp;gt; msg) -&amp;gt; Sub msg

-- Outbound Ports

type OutboundMethod
    = SetLocalStorageItem { key : String, value : String }
    | GetLocalStorageItem { key : String }
    | ClearLocalStorage
    | RemoveLocalStorageItem { key : String }
    | GetCookies
    | SetCookie { key : String, value : String }

encode : OutboundMethod -&amp;gt; JE.Value
encode method =
    case method of
        SetLocalStorageItem { key, value } -&amp;gt;
            let
                payload =
                    JE.object
                        [ ( &quot;key&quot;, JE.string key )
                        , ( &quot;value&quot;, JE.string value )
                        ]
            in
            JE.object
                [ ( &quot;method&quot;, JE.string &quot;setLocalStorageItem&quot; )
                , ( &quot;payload&quot;, payload )
                ]
        ...

-- Inbound Ports

type InboundMethod
    = GotLocalStorageItem { key : String, value : String }
    | GotCookies String

decoder : Decoder InboundMethod
decoder =
    JD.field &quot;method&quot; JD.string
        |&amp;gt; JD.andThen decoder_


decoder_ : String -&amp;gt; JD.Decoder InboundMethod
decoder_ method =
    case method of
        &quot;gotLocalStorageItem&quot; -&amp;gt;
            JD.map GotLocalStorageItem (JD.field &quot;payload&quot; kvDecoder)

        &quot;gotCookies&quot; -&amp;gt;
            JD.map GotCookies (JD.at [ &quot;payload&quot;, &quot;cookies&quot; ] JD.string)

        _ -&amp;gt;
            JD.fail &quot;Got unregistered inbound port method&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Centralized ports approach uses two port functions that act as routers between Elm and JavaScript. As everything about Elm-JavaScript interoperation is handled by these two functions, it is easy to concentrate all interoperation codes into a particular module. This provides a clear separation of concerns between Elm codes and Elm-JavaScript interoperation codes, making it easier to understand and modify that particular domain of the application. If you want to interact with JavaScript code, you can simply call functions defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Port&lt;/code&gt; module instead of encoding and decoding data for port functions over and over again; if you want to modify port functions, you can simply change codes in that one module and be done with it.&lt;/p&gt;

&lt;p&gt;But this approach makes modularization a bit hard. Since all port subscriptions must be assigned a &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt; to handle them at the top level &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; module, it needs to know about the &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt; constructors of its submodules. Here’s &lt;code class=&quot;highlighter-rouge&quot;&gt;inboundMethodToMsg&lt;/code&gt; function in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; module in the &lt;code class=&quot;highlighter-rouge&quot;&gt;complex-model-centralized-ports&lt;/code&gt; branch for an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;inboundMethodToMsg : Port.InboundMethod -&amp;gt; Msg
inboundMethodToMsg inboundMethod =
    case inboundMethod of
        Port.GotLocalStorageItem kv -&amp;gt;
            kv |&amp;gt; Page.Storage.GotLocalStorageItem &amp;gt;&amp;gt; GotStorageMsg

        Port.GotCookies cookies -&amp;gt;
            cookies |&amp;gt; Page.Storage.GotCookies &amp;gt;&amp;gt; GotStorageMsg

        Port.ConnectedToServer -&amp;gt;
            ConnectedToServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this implementation the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; module has to know about specific constructors of its submodules’ &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt; types to correctly handle port subscriptions, undermining modularization.&lt;/p&gt;

&lt;p&gt;Moreover, the two port functions have the most generic type signatures, &lt;code class=&quot;highlighter-rouge&quot;&gt;Json.Encode.Value&lt;/code&gt;, in order to be so flexible. This cripples compile time type safety for them. There will still be no runtime crash thanks to how JSON decoding works in Elm, but this does increase the chance of logic bugs at runtime. And it also means that you’ll have to write and maintain that decoder, which is one of the less pleasant aspects of Elm.&lt;/p&gt;

&lt;h1 id=&quot;so-when-to-use-which&quot;&gt;So When to Use Which?&lt;/h1&gt;

&lt;p&gt;The first question to ask is how large your Elm-JavaScript interoperation would be. If it’s not going to be much, individual ports approach is simpler and more intuitive to implement.&lt;/p&gt;

&lt;p&gt;But if your application is going to have nontrivial amount of interoperation, then this question helps: between the structure of your Elm modules and Elm-JavaScript interoperation codes, which changes more quickly in your application?&lt;/p&gt;

&lt;p&gt;If your Elm code changes more quickly, then individual ports approach might be better because of clean boundary among Elm modules. Otherwise, centralized ports approach might be better because of clean boundary between domains. It always makes sense to have quickly changing parts easier to modify, because that’s where you’ll be spending most of your time.&lt;/p&gt;

&lt;p&gt;My experience is that once written, Elm codes are extremely sturdy and require little change. On the other hand, JavaScript codes tend to change often because of the inherent language and ecosystem characteristics. So if you aren’t sure, centralized ports approach would be a safer bet in the long run.&lt;/p&gt;

&lt;p&gt;I wish there was another way that had only the benefits of both approaches, but couldn’t come up with it. If you know a better approach, please tell me about it!&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Dec 2018 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2018/12/18/elm-managing-ports.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2018/12/18/elm-managing-ports.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Display Entire Text in Elm Debugger</title>
        <description>&lt;p&gt;Elm Debugger is one of the most amazing debugging tools I’ve ever used - too bad I rarely get to use it because Elm makes it so difficult to produce serious bugs. The Debugger places a limit on the length of displayable text in it, and truncates any text or data structure that might go over that limit. It’s a sensible default, but sometimes it hampers my debugging effort especially when I’m trying to see the exact message I’ve received. Here’s an example of how the it truncates messages in Richard Feldman’s &lt;a href=&quot;https://github.com/rtfeldman/elm-spa-example&quot;&gt;RealWorld example app&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/debugger_vanilla.png&quot; alt=&quot;Default Debugger&quot; title=&quot;Default Debugger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Those ellipses in the Debugger have annoyed me enough for me to come up with a way to get rid of them, and I was moderately successful. Here’s how the messages look like now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/debugger_full_text.png&quot; alt=&quot;Debugger Without Truncation&quot; title=&quot;Debugger Without Truncation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did it by overwriting the &lt;code class=&quot;highlighter-rouge&quot;&gt;messageToString&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/Native/Debugger.js&lt;/code&gt;. Here’s the replacement code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageToStringHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toFlatArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ctor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toFlatArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageToStringHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'boolean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'True'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'False'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addSlashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addSlashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'…'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ctor'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;': '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageToStringHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;Task/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'…'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;Tuple/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tupleResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ctor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;tupleResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'('&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tupleResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageToStringHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;decoder&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_Process'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Set_elm_builtin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RBNode_elm_builtin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RBEmpty_elm_builtin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'…'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'::'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toFlatArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageToStringHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'['&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;']'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;messageToStringHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Elm Debugger has another annoying default setting - the fixed width of &lt;code class=&quot;highlighter-rouge&quot;&gt;30ch&lt;/code&gt; on its sidebar. You can override it by editing &lt;code class=&quot;highlighter-rouge&quot;&gt;elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Debug.elm&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/debugger_modified_sidebar.png&quot; alt=&quot;Debugger With Wider Sidebar&quot; title=&quot;Debugger With Wider Sidebar&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* width: calc(100% - 30ch); */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.debugger-sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* width: 30ch; */&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s not the prettiest code, but it does its job. Feel free to use or modify it as you see fit. Just don’t forget that it’s a monkey patching to aid the development process - you’d better get rid of it when building for production.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Jul 2018 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2018/07/28/display-entire-text-in-elm-debugger.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2018/07/28/display-entire-text-in-elm-debugger.html</guid>
        
        
      </item>
    
      <item>
        <title>Using Korean in Spacemacs</title>
        <description>&lt;h2 id=&quot;using-korean-in-spacemacs&quot;&gt;Using Korean in Spacemacs&lt;/h2&gt;

&lt;p&gt;I’ve started trying out Emacs because I lost patience while trying to set up Haskell development environment in Vim. Some random person on the Internet suggested Spacemacs as an alternative, so I decided to give it a try. So far I’m liking it - it works out of box without much configuration. Unfortunately the documentation on setting up Korean language environment was a bit outdated and/or fragmented for an Emacs newbie like me to easily understand. After some researching I’ve come up with a working configuration so I’ll share it here. I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;D2Coding&lt;/code&gt; font, but feel free to use whatever you like.&lt;/p&gt;

&lt;p&gt;I’m using Ubuntu 16.04.4 and Emacs 26.1.&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;~/.spacemacs&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dotspacemacs/user-config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-language-environment&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Korean&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefer-coding-system&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'utf-8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-korean-keyboard&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;kana&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'toggle-input-method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-unset-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;S-SPC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#x1100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#x11ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#x20a9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#x302e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#x302f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#x3130&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#x318f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#x3200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#x321e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#x3260&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#x327f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#xa960&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#xa97f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#xac00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#xd7a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#xd7b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#xd7ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#xffa1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#xffdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-fontset-font&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fontset-default&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#xffe6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D2Coding&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iso10646&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what the setting means line-by-line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-language-environment &quot;Korean&quot;)&lt;/code&gt;: Load Korean language environment. Use command &lt;code class=&quot;highlighter-rouge&quot;&gt;C-h L Korean &amp;lt;RET&amp;gt;&lt;/code&gt; to see what it does.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(prefer-coding-system 'utf-8)&lt;/code&gt;: Korean language environment has &lt;code class=&quot;highlighter-rouge&quot;&gt;ISO-2022-KR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EUC-KR&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;CP949&lt;/code&gt; coding systems. I use &lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt; instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(setq default-korean-keyboard &quot;3f&quot;)&lt;/code&gt;: Default is 2-beolsik, but I use 3-beolsik-final. You won’t need this line if you use 2-beolsik. To see the list of available input methods, try &lt;code class=&quot;highlighter-rouge&quot;&gt;C-h I hangul&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(global-set-key (kbd &quot;&amp;lt;kana&amp;gt;&quot;) 'toggle-input-method)&lt;/code&gt;: Assign input toggle function to Korean/English key.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(global-unset-key (kbd &quot;S-SPC&quot;))&lt;/code&gt;: By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Space&lt;/code&gt; is the input toggle key. I unbind it because I keep unintentionally switching the input.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#x1100 . #x11ff) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Use &lt;code class=&quot;highlighter-rouge&quot;&gt;D2Coding&lt;/code&gt; font for characters between &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1100-U+11ff&lt;/code&gt;, called &lt;a href=&quot;http://www.unicode.org/charts/PDF/U1100.pdf&quot;&gt;Hangul Jamo&lt;/a&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;iso-10646&lt;/code&gt; Unicode standard.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '#x20a9 '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for halfwidth Korean Won symbol in &lt;a href=&quot;http://www.unicode.org/charts/PDF/U20A0.pdf&quot;&gt;Currency Symbols&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#x302e . #x302f) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for characters that represent medieval Korean tones in &lt;a href=&quot;http://unicode.org/charts/PDF/U3000.pdf&quot;&gt;CJK Symbols and Punctuation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#x3130 . #x318f) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for &lt;a href=&quot;http://www.unicode.org/charts/PDF/U3130.pdf&quot;&gt;Hangul Compatibility Jamo&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#x3200 . #x321e) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for Korean characters enclosed in parenthesis in &lt;a href=&quot;http://www.unicode.org/charts/PDF/U3200.pdf&quot;&gt;Enclosed CJK Letters and Months&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#x3260 . #x327f) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for Korean characters enclosed in circle in &lt;a href=&quot;http://www.unicode.org/charts/PDF/U3200.pdf&quot;&gt;Enclosed CJK Letters and Months&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#xa960 . #xa97f) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for &lt;a href=&quot;http://www.unicode.org/charts/PDF/UA960.pdf&quot;&gt;Hangul Jamo Extended-A&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#xac00 . #xd7af) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for &lt;a href=&quot;http://unicode.org/charts/PDF/UAC00.pdf&quot;&gt;Hangul_Syllables&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#xd7b0 . #xd7ff) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for &lt;a href=&quot;http://www.unicode.org/charts/PDF/UD7B0.pdf&quot;&gt;Hangul_Jamo_Extended-B&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '(#xffa1 . #xffdc) '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for halfwidth Korean characters in &lt;a href=&quot;http://www.unicode.org/charts/PDF/UFF00.pdf&quot;&gt;Halfwidth and Fullwidth Forms&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(set-fontset-font &quot;fontset-default&quot; '#xffe6 '(&quot;D2Coding&quot; . &quot;iso10646&quot;))&lt;/code&gt;: Font setting for fullwidth Korean Won symbol in &lt;a href=&quot;http://www.unicode.org/charts/PDF/UFF00.pdf&quot;&gt;Halfwidth and Fullwidth Forms&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 21 Jul 2018 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2018/07/21/using-korean-in-spacemacs.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2018/07/21/using-korean-in-spacemacs.html</guid>
        
        
      </item>
    
      <item>
        <title>Why I Find CSS So Hard</title>
        <description>&lt;p&gt;Once I heard someone half-jokingly say that he finds CSS harder than Haskell. At the time I just laughed at the joke, but after working with CSS for some time I now understand what he meant. CSS is complex. While it has simple syntax and structure, its output depends so much on the runtime context that it’s hard to reliably predict the result.&lt;/p&gt;

&lt;h2 id=&quot;three-problems&quot;&gt;Three Problems&lt;/h2&gt;

&lt;p&gt;For me, three issues stood out:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Difficult to determine which CSS rule is finally applied&lt;/li&gt;
  &lt;li&gt;Difficult to know how CSS rules interact&lt;/li&gt;
  &lt;li&gt;Difficult to guess the runtime environment&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;difficult-to-determine-which-css-rule-is-finally-applied&quot;&gt;Difficult to determine which CSS rule is finally applied&lt;/h3&gt;

&lt;p&gt;CSS allows duplicate declarations of CSS properties. Determining which declaration would be finally applied is actually quite easy - the algorithm, called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade&quot;&gt;cascade&lt;/a&gt;, is simple. The difficult part is building the exhaustive list of all duplicate CSS properties.&lt;/p&gt;

&lt;p&gt;First, CSS properties can be declared anywhere in any file, commonly called the global namespace problem. In order to predict the output, we must go through all CSS files loaded with the document file. Skimming through dozens of lines of CSS is not hard; fastidiously rummaging through thousands of lines of CSS across dozens of files is tedious, if not impossible.&lt;/p&gt;

&lt;p&gt;Second, CSS properties of a DOM element can be inherited from its ancestors, requiring us to inspect not only the rules for a particular DOM element, but also all the rules for all of its ancestors. For example, the font value of an element at the end of DOM tree could have been declared for any of its ancestors.&lt;/p&gt;

&lt;p&gt;Third, there are too many ways to match a particular DOM element because CSS selectors can be flexibly combined. Take the following example HTML code:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Sample Text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are numerous ways to match the &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; tag in that snippet. Just to name a few: &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; type selector, nested type selectors of &lt;code class=&quot;highlighter-rouge&quot;&gt;div p span&lt;/code&gt;, nested combined selectors &lt;code class=&quot;highlighter-rouge&quot;&gt;.container #content span&lt;/code&gt;, partially nested combined selectors: &lt;code class=&quot;highlighter-rouge&quot;&gt;.sample-text span&lt;/code&gt;, and so on. As a result, it’s impossible to quickly and reliably identify which properties would apply to which element in the end.&lt;/p&gt;

&lt;p&gt;In theory, this means that all CSS rules of all CSS stylesheets should be inspected in order to build the exhaustive list of CSS rules that match a DOM element and determine the output. In practice, we can make educated guesses so it rarely comes close to that level of complexity. But when our guesses go wrong, the root problem rears its ugly head. As a result, debugging CSS problems often feels more like a hit-or-miss process than logical problem solving.&lt;/p&gt;

&lt;h3 id=&quot;difficult-to-know-how-css-rules-interact&quot;&gt;Difficult to know how CSS rules interact&lt;/h3&gt;

&lt;p&gt;Most CSS properties interact with other properties to determine their outputs, adding another layer of complexity. Outputs for some CSS rules, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;background-color&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;text-decoration&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cursor&lt;/code&gt;, are not affected by other CSS properties, but they are more the exception than the rule.&lt;/p&gt;

&lt;p&gt;Sometimes it’s easy to guess which properties interact with one another. It’s obvious that &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;font-weight&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; properties all work together on typographic styling. But most of the time the interactions are difficult to guess from the names.&lt;/p&gt;

&lt;p&gt;For example, does &lt;code class=&quot;highlighter-rouge&quot;&gt;border&lt;/code&gt; property affect the values of &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;? Usually no, but sometimes yes, depending on the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;box-sizing&lt;/code&gt; property. Does increasing &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size&lt;/code&gt; affect them? Usually yes, but sometimes no, depending on properties like &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow&lt;/code&gt;. What about the size of children elements? Usually yes, unless those children elements have certain values for &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt; property. The list goes on.&lt;/p&gt;

&lt;h3 id=&quot;difficult-to-guess-the-runtime-environment&quot;&gt;Difficult to guess the runtime environment&lt;/h3&gt;

&lt;p&gt;The vendor and version of the web browser, and sometimes even that of the operating system, also affect the output of CSS.&lt;/p&gt;

&lt;p&gt;Each web browser implements CSS specifications in different ways. This issue is much less problematic in modern browsers, but Microsoft’s browsers still have some notable differences from other browsers. Older browsers do not support newly introduced CSS properties, so we have to consider which browsers we want to support.&lt;/p&gt;

&lt;p&gt;User’s browser setting is another factor. Zooming in, changing font size, or using user-defined local CSS can all dramatically alter the output.&lt;/p&gt;

&lt;p&gt;Moreover, operating system settings can also affect the output. MacOS and Windows use different font rendering system, making fonts look slightly bolder in MacOS, so same &lt;code class=&quot;highlighter-rouge&quot;&gt;font-weight&lt;/code&gt; CSS property will not produce same outputs. Operating systems have their own text size options, which also affect the typography.&lt;/p&gt;

&lt;p&gt;Lastly, user’s device also affects the final output of CSS. Device’s screen size determines the layout, and its color calibration can sometimes nullify carefully designed color schemes.&lt;/p&gt;

&lt;h2 id=&quot;how-to-survive&quot;&gt;How to Survive&lt;/h2&gt;

&lt;h3 id=&quot;difficult-to-determine-which-css-rule-is-finally-applied-1&quot;&gt;Difficult to determine which CSS rule is finally applied&lt;/h3&gt;

&lt;p&gt;I’ve mentioned global namespace, inheritance, and flexible selectors here, but global namespace is the root cause. Inheritance is a non-issue when there aren’t many ancestor properties to inspect; flexible selectors can be handled through conventions.&lt;/p&gt;

&lt;p&gt;Numerous solutions to the CSS global namespace issue have been proposed over the years. My favorite are the following two approaches. I suggest starting with BEM, and then introducing CSS Modules once the project gets complex enough to justify its cost.&lt;/p&gt;

&lt;h4 id=&quot;bem-naming-convention&quot;&gt;BEM Naming Convention&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM&lt;/a&gt; provides a naming convention for CSS ids and classes that are distinct enough to avoid collision in the global namespace of CSS. It strikes a good balance between simplicity and specificity, allowing developers to quickly pick it up and adapt it to the project’s needs.&lt;/p&gt;

&lt;p&gt;Since BEM is just a naming convention, it does not have any dependency like Javascript or SASS. It’s a good starting place when you you want to keep the project approachable and avoid unnecessary complexity. Since BEM itself is simple, it’s really easy to add other dependencies as the project evolves.&lt;/p&gt;

&lt;p&gt;Still, it has the drawbacks of a manually enforced convention. Team members should have shared understanding of what it is, how to use it, and discipline to follow the convention. In the end, however, there will be inconsistencies in how it’s followed.&lt;/p&gt;

&lt;h4 id=&quot;css-modules&quot;&gt;CSS Modules&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/css-modules/postcss-modules&quot;&gt;CSS Modules&lt;/a&gt; provides automatic local scoping of CSS by adding unique hash string to the CSS selectors used in each file, scoping their namespace to that particular file.&lt;/p&gt;

&lt;p&gt;CSS Modules is much harder to set up. Using it as a &lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;PostCSS&lt;/a&gt; plugin loaded through &lt;a href=&quot;https://github.com/postcss/postcss-loader&quot;&gt;PostCSS Loader&lt;/a&gt; in &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; using Javascript is the most common approach. That’s a lot of dependencies for a single feature, especially when webpack itself is notoriously complex to set up.&lt;/p&gt;

&lt;p&gt;Nevertheless, CSS Modules provides a reliable automatic solution to the global namespace problem and at some point the project might get complex enough to require it.&lt;/p&gt;

&lt;h3 id=&quot;difficult-to-know-how-css-rules-interact-1&quot;&gt;Difficult to know how CSS rules interact&lt;/h3&gt;

&lt;p&gt;Unfortunately, the only way to learn which CSS properties interact with one another in what way is through experience. There doesn’t seem to be a reliable heuristic for guessing the relationship based on the names. My advice is to be patient and approach it like when trying to learn the vocabulary of a foreign language, rather than figuring out fundamental axioms of a formal system.&lt;/p&gt;

&lt;h3 id=&quot;difficult-to-guess-the-runtime-environment-1&quot;&gt;Difficult to guess the runtime environment&lt;/h3&gt;

&lt;p&gt;Unfortunately, this is a problem that cannot be solved through the code. We can’t change the runtime environment of the users, nor can we write CSS that will render perfectly for all runtime environments. We have to come to peace with the reality - getting stressed over something we can’t change is waste of our energies. Instead, it’s wiser to define which runtime environments to target and support them.&lt;/p&gt;

&lt;h2 id=&quot;accepting-css-as-it-is&quot;&gt;Accepting CSS As It Is&lt;/h2&gt;

&lt;p&gt;At first CSS felt too unpredictable and unstructured so I hated it. But I’d learned that remaining open-minded is essential when learning something new, so I tried to assess and use CSS from its point of view, not mine. Once I decided to just accept CSS as it is, I started to appreciate it as a tool that did its job. It still does throw me off sometimes, but I even started to have some fun writing it. Granted, it will not be my favorite thing, but I’ve come to terms with it.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jul 2018 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2018/07/13/why-css-hard.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2018/07/13/why-css-hard.html</guid>
        
        
      </item>
    
      <item>
        <title>Thoughts on Safer Smart Contracts Through Type-Driven Development</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Last year, I learned of the Idris language and wrote a &lt;a href=&quot;https://harfangk.github.io/2017/10/24/tdd-with-idris-review.html&quot;&gt;blog
post&lt;/a&gt; after reading a book on it.
Coincidentally, I joined a company that worked on blockchain technology almost immediately after
publishing that post. So when I came across a paper titled &lt;a href=&quot;https://publications.lib.chalmers.se/records/fulltext/234939/234939.pdf&quot;&gt;“Safer smart contracts through
type-driven development: Using dependent and polymorphic types for safer development of smart
contracts”&lt;/a&gt;, which combined two topics of my interest, I just had to read it.&lt;/p&gt;

&lt;p&gt;This post is a collection of the thoughts that came across my mind while I was reading the paper.
There won’t be any new idea that builds on the contents of the paper. I assume basic understanding
of functional programming paradigm, in particular the distinction between pure functions and side
effects.&lt;/p&gt;

&lt;h2 id=&quot;types-to-cover-more-run-time-computations-at-compile-time&quot;&gt;Types to Cover More Run-time Computations at Compile Time&lt;/h2&gt;

&lt;p&gt;In blockchain industry, guaranteeing the correctness of smart contracts is one of the key areas for
improvement. As the industry grows, values moved through smart contracts would continue to grow as
well, which also means that the damage caused by faulty smart contracts would also increase in
proportion. As I learned more and more about smart contracts, I started to think that statically
typed functional languages would be great in this domain, since they are well-known for minimizing
run-time errors. It is no coincidence that financial institutions use such languages for formal
description of contracts. I’ve also personally experienced how type checking at compile time can
help prevent certain kinds of common errors such as null pointer exception.&lt;/p&gt;

&lt;p&gt;The authors of the paper, Jack Pettersson and Robert Edström, had the same idea and decided to
explore it. Their thesis goes: “Our thesis is that a functional language with an extensive type
system can allow safer development of smart contracts. Specifically, we consider three classes of
errors that are common due to the characteristics of current smart contract platforms.”&lt;/p&gt;

&lt;p&gt;After reading through their work, I became more confident that statically typed programming language
would be excellent for writing robust smart contracts. Human mind is incredibly powerful and
flexible but is also more prone to errors - especially when we are tired or distracted. For
reliability, we need to leverage the assistance of computers.&lt;/p&gt;

&lt;h2 id=&quot;types-to-represent-pre-conditions-and-post-conditions&quot;&gt;Types to Represent Pre-conditions and Post-conditions&lt;/h2&gt;

&lt;p&gt;Here’s a snippet from the paper that fascinated me the most:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;finalize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LTE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; 
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ETH&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
                          &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ETH&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                          &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ETH&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a type signature for a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt;, which interprets the final result of
a rock-paper-scissors game where each player bets 10 Ethereum and the winner takes it all. This
type signature provides a ton of information, and could be hard to understand if you are not familiar with this kind of language.&lt;/p&gt;

&lt;p&gt;Here’s what each part means:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{ auto p: LTE 20 b }&lt;/code&gt; part supplies a proof (&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; stands for proof) to the Idris compiler that &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt;
is less than or equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, which stands for balance here. So based on the proof, the compiler can
assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is larger than &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt; when the function is called. This ensures at compile time that
no overdraft would happen.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EFFECT&lt;/code&gt; is the type Idris uses for describing side effects. You can find
a &lt;a href=&quot;http://docs.idris-lang.org/en/latest/effects/&quot;&gt;tutorial&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Effects&lt;/code&gt; library at the official
Idris website. Note that currently another module is recommended over &lt;code class=&quot;highlighter-rouge&quot;&gt;Effects&lt;/code&gt;, as stated in the above link:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Unless you have a particular reason to use Effects you are strongly recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Control.ST&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;Eff&lt;/code&gt; is a constructor for &lt;code class=&quot;highlighter-rouge&quot;&gt;EFFECT&lt;/code&gt; type that takes three arguments: a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;, a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Effect&lt;/code&gt; values, and a function of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; List Effect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first argument represents the return value of this function. For &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt;, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;The second argument is called &lt;code class=&quot;highlighter-rouge&quot;&gt;input effects&lt;/code&gt;. It means that this function can access effects &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ETH 0 b 0 0&lt;/code&gt; when it is called.&lt;/p&gt;

&lt;p&gt;The third argument is called &lt;code class=&quot;highlighter-rouge&quot;&gt;output effects&lt;/code&gt;. It is a function that takes the first argument and determines which side effect &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt; should have between &lt;code class=&quot;highlighter-rouge&quot;&gt;[ STORE, ETH 0 b 0 0 ]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;[ STORE, ETH 0 b 20 0 ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What’s significant is that the type signature describes not only the function’s output, but
also what kind of side effect it should have depending on the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize&lt;/code&gt;. This gives a powerful tool for explicitly handling side effects, such as network communication, by enforcing their pre-condition side effects and post-condition side effects as types.&lt;/p&gt;

&lt;h2 id=&quot;transforming-from-one-ast-to-another-ast-is-not-magical&quot;&gt;Transforming From One AST to Another AST Is Not Magical&lt;/h2&gt;

&lt;p&gt;As a self-taught web developer, I lack knowledge in low-level areas such as hardware, assembly,
compiler, or operating systems, so those areas still remain mythical “here be dragons” territory to
me. So when the writers described the process of transforming the AST output of Idris to the AST of
Serpent, a language used in Ethereum Virtual Machine, I was surprised to see how straightforward it
was. In principle, I just needed to write derivarion rules for mapping from one AST to another! Of
course it would never be that simple, but I felt like I gained a glimpse into the process.&lt;/p&gt;

&lt;h2 id=&quot;fp-cannot-represent-message-passing-among-distributed-nodes&quot;&gt;FP Cannot Represent Message Passing Among Distributed Nodes&lt;/h2&gt;

&lt;p&gt;In the discussion section, the authors express their disappointment with the functional
paradigm:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When writing smart contracts in our Idris implementation, most of the critical functionality has
to exist in effectful rather than pure functions. This is because pure functions have no notion of
communication, but Ethereum’s execution model is based entirely on messages that are sent between
accounts, which it has in common with all smart contract platforms we are aware of. Furthermore,
pure functions don’t directly encode program state, which is another important aspect of smart
contract platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I’ve also thought that functional paradigm would be a great fit, I was surprised by the result
as the authors were. But they seem to be correct; if a model fails to represent key components of a domain,
it might not be the right model. The authors suggest that &lt;a href=&quot;https://www.wikiwand.com/en/Process_calculus&quot;&gt;process calculus&lt;/a&gt; might be a better fit for
this domain. Since I’ve never heard of it, I had to look it up. It sounded related to the actor model that I got familiar through Erlang and Elixir, and does seem like a better model to formally represent complex network communications.&lt;/p&gt;

&lt;h2 id=&quot;dependently-typed-side-effects-are-incredibly-powerful&quot;&gt;Dependently Typed Side Effects Are Incredibly Powerful&lt;/h2&gt;

&lt;p&gt;The authors note that a combination of dependent types and explicit side effect management of Idris
were essential for writing smart contracts in Idris. They wrote a sample implementation as part of
the paper, which was quite interesting to read.&lt;/p&gt;

&lt;p&gt;Recently I have been working extensively with Elm, and I think I get what the authors meant by the combination being essential. Elm
also provides explicit management of side effects through &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Sub&lt;/code&gt; types, but they are not as
descriptive as I want them to be. I know that it’s in accordance with Elm’s design philosophy, and
it does make Elm code much easier to approach and understand. But sometimes I do wish
that Elm had more robust type system so that I could be more expressive.&lt;/p&gt;

&lt;p&gt;For example, let’s think about how to express a part of the above snippet in Elm. The goal is: I want
to make sure that people cannot send more Ethereum than they own. Elm uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd Msg&lt;/code&gt; type to
describe side effect, where &lt;code class=&quot;highlighter-rouge&quot;&gt;Msg&lt;/code&gt; type is usually defined as a union type. Let’s say it’s defined as
&lt;code class=&quot;highlighter-rouge&quot;&gt;type Msg = SendEth Int | DepositEth Int&lt;/code&gt;. If my Ethereum balance is 50, I shouldn’t be able to
execute &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd (SendEth i)&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is greater than 50. Because the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is determined at
run-time, the validity of this side effect can be checked only at run-time.&lt;/p&gt;

&lt;p&gt;Idris can check this at compile time thanks to its dependent types. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;ETH&lt;/code&gt; is
defined as a dependent type, &lt;code class=&quot;highlighter-rouge&quot;&gt;ETH 0 b 0 0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ETH 0 b 20 0&lt;/code&gt; in the above snippet are computed
as different types as they receive different values for the third argument. And because
effects are distinguished at type level, the compiler can guarantee that only valid side effects will be
executed. Such guarantee at compile time is impossible in Elm’s type system.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed Idris codes in the paper since they showed somewhat realistic example of how to write an Idris program. In particular, it was amazing to see how Idris can be used to specify not just the input and output types, but also the input and output side effects. Idris keeps expanding my horizon about what is possible in programming - I look forward to learning more of it.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Feb 2018 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2018/02/17/thoughts-on-safer-smart-contracts-through-tdd.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2018/02/17/thoughts-on-safer-smart-contracts-through-tdd.html</guid>
        
        
      </item>
    
      <item>
        <title>A Short Guide to Function Operators in Elm (|&gt;, &lt;|, &gt;&gt;, &lt;&lt;)</title>
        <description>&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Once we get through the introduction to Elm, we start to encounter some odd-looking operators in Elm
codes. I’m talking about the ones like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt;, which modify how functions are
composed and applied. I will give more details about how and when I use them in this post, but
here’s my rule of thumb:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; to visually describe the flow of data. It’s their main advantage over nested
parantheses, which provide equivalent functionalities.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; to describe function compositions independent of the data flow. In practice,
I usually define a new function through composition and use it with &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use either the pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; without mixing them. The shapes of these
operators hold inherent directional meanings, so mixing different directions taxes our cognitive
resources.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;do-we-really-need-these-weird-operators&quot;&gt;Do We Really Need These Weird Operators?&lt;/h2&gt;

&lt;p&gt;We don’t. Elm will still work fine even if we removed these operators, because there are other
perfectly fine ways to do the same thing. After all, they are just syntactic sugars that stand in
for standard functions. But these operators let us write more understandable code by adding extra
visual information about the flow of data and structure of code. Let’s see some examples.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;-operator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; Operator&lt;/h3&gt;

&lt;p&gt;Here’s an example task that I want to accomplish: given a list of random integers, I want to get the
first digit of each integer as a list. Here’s my initial implementation without function operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    let
        stringList = List.map toString list
        firstStringDigits = List.map (String.left 1) stringList
        firstResultIntDigits = List.map (String.toInt) firstStringDigits
        firstIntDigits = List.map (Result.withDefault 0) firstResultIntDigits
    in
        firstIntDigits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to assign the result of each smaller operation to a variable and pass it over to the next
operation. This is pretty normal - we see this kind of code often in imperative languages. But &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;,
commonly known as &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe operator&lt;/code&gt;, can make this code much easier to understand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;-- In multiple lines:
getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    list
    |&amp;gt; List.map toString
    |&amp;gt; List.map (String.left 1)
    |&amp;gt; List.map (String.toInt)
    |&amp;gt; List.map (Result.withDefault 0)

-- In one line:
getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    list |&amp;gt; List.map toString |&amp;gt; List.map (String.left 1) |&amp;gt; List.map (String.toInt) |&amp;gt; List.map (Result.withDefault 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;, we no longer have to assign intermediate results to pass them to the next step.
Moreover, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; gives a visual hint about where the data will flow to.&lt;/p&gt;

&lt;p&gt;How does it work? &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; passes its first argument to its second argument, which is a function. We can
see that in its type signature: &lt;code class=&quot;highlighter-rouge&quot;&gt;(|&amp;gt;) : a -&amp;gt; (a -&amp;gt; b) -&amp;gt; b&lt;/code&gt;. In practice, we can keep passing the
result of previous operation to the next operation, expressing it as a single pipeline of connected
operations.&lt;/p&gt;

&lt;p&gt;As I said, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; is just a syntactic sugar, so the above function can be expressed like this without
the operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    (List.map (Result.withDefault 0) (List.map (String.toInt) (List.map (String.left 1) (List.map toString list))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we use the style using &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; because it saves us from writing nested parantheses or manually
keeping track of which operation comes next. In general, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; is useful when we want to
express a series of connected operations.&lt;/p&gt;

&lt;h3 id=&quot;-operator-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; Operator&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; is the reverse of &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt; as it pipes its second argument into its first argument. Its definition
is &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;lt;|) : (a -&amp;gt; b) -&amp;gt; a -&amp;gt; b&lt;/code&gt;. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt;, the above function can be writen like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    List.map (Result.withDefault 0) &amp;lt;| List.map (String.toInt) &amp;lt;| List.map (String.left 1) &amp;lt;| List.map toString &amp;lt;| list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; lets us visually express the flow from right to left. If you are used to
mathematical notations, which flow from right to left, or a right-to-left language, you’ll feel at
home. Personally I find that the right-to-left flow conflicts with the overall
top-left-to-bottom-right flow that I’m used to, so I rarely use this operator. Still, I do find it
useful in certain cases. For example, I like it when the last argument of a function is a function
that spans over multiple lines like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;-- with &amp;lt;|
test : Test.Test
test &quot;subtraction should have identity property&quot; &amp;lt;|
    \_ -&amp;gt;
        let
            a = negate (2 ^ 50 + 32)
            b = 0
        in
            Expect.equal (a - b) a

-- with parentheses
test : Test.Test
test &quot;subtraction should have identity property&quot;
    (\_ -&amp;gt;
        let
            a = negate (2 ^ 50 + 32)
            b = 0
        in
            Expect.equal (a - b) a
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I find that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; provides a nice visual separation, telling me that I don’t have to think about the
code that comes before &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt; until I’m done with the code that comes after it.&lt;/p&gt;

&lt;h3 id=&quot;-and--operators&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; Operators&lt;/h3&gt;

&lt;p&gt;These two operators let us compose two functions into one larger function. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;toString : a -&amp;gt; String

String.length : String -&amp;gt; Int

toString &amp;gt;&amp;gt; String.length : a -&amp;gt; Int

String.length &amp;lt;&amp;lt; toString : a -&amp;gt; Int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can tell from the function signatues, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; combine two functions into one. Their
definitions show this in a more abstract way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;(&amp;lt;&amp;lt;) : (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; (a -&amp;gt; c)

(&amp;gt;&amp;gt;) : (a -&amp;gt; b) -&amp;gt; (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functionally they are identical, except that they work in opposite directions. The direction of
arrows align with the direction of function composition. But if they are almost identical, which one
should we use? I think this is more about personal taste. Using either composition operators with
pipe operators, our example function can be expressed like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    List.map (Result.withDefault 0) &amp;lt;&amp;lt; List.map (String.toInt) &amp;lt;&amp;lt; List.map (String.left 1) &amp;lt;&amp;lt; List.map toString &amp;lt;| list

getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    list |&amp;gt; List.map toString &amp;gt;&amp;gt; List.map (String.left 1) &amp;gt;&amp;gt; List.map (String.toInt) &amp;gt;&amp;gt; List.map (Result.withDefault 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer right-to-left flow, go with the pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt;. On the other hand, if you
prefer left-to-right flow, go with the pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;. Just avoid mixing operators with
different flow direction - that adds unnecessary burden to our brains.&lt;/p&gt;

&lt;p&gt;But how are these operators useful? Abstractly, they let us mix and match smaller functions to
create a larger one, giving us an almost infinite possiblity for creating new functions out of other
ones. Practically, this gives us a lot of freedom when writing funtions. Let’s get back to our
example function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    list
    |&amp;gt; List.map toString
    |&amp;gt; String.left 1
    |&amp;gt; List.map (String.toInt &amp;gt;&amp;gt; Result.withDefault 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I used &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; to group two small functions into one for transforming string to integer, because
I thought that those two functions are more meaningful when composed together. I find function
composition most useful when grouping logically coupled functions. We can also separate them into
a new function in that case, but &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; gives us a quick inline option.&lt;/p&gt;

&lt;h2 id=&quot;things-to-watch-out-when-using-function-operators&quot;&gt;Things to Watch Out When Using Function Operators&lt;/h2&gt;

&lt;p&gt;Depending on the context, there are dozens of different ways to express this code. Here’s another one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;-- Split to separate function
getFirstDigits : List Int -&amp;gt; List Int
getFirstDigits list =
    list
    |&amp;gt; List.map toString
    |&amp;gt; String.left 1
    |&amp;gt; List.map stringToInt

stringToInt : String -&amp;gt; Int
stringToInt s = String.toInt &amp;lt;&amp;lt; Result.withDefault &amp;lt;| s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Overall, I gave 9 different ways to write this function in this post. If we didn’t have function
operators, we would have been restricted to using nested parentheses, assigning intermediate
variables, and defining new functions. As we’ve seen here, function operators can greatly expand our
freedom of expression when writing code.&lt;/p&gt;

&lt;p&gt;Nevertheless, they can lead to chaos when abused. Mixing functions written in different styles makes
it harder for others to read and understand our code - which include our future selves. So it’s
important to have self-discipline and clear conventions to use these operators in a consistent way.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We’ve looked at the four function operators in Elm: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;|&lt;/code&gt;, and how they are
used within an example function. I’ve deliberately left out formal discussions about them because
there are already great resources about those topics. Besides, I found that discussions about when
and how to use these operators were almost nonexistent, so I wanted to help fill that gap. I hope
that this post was helpful in that respect.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jan 2018 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2018/01/27/elm-function-operators.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2018/01/27/elm-function-operators.html</guid>
        
        
      </item>
    
      <item>
        <title>Interview With Rich Hickey by Michael Fogus</title>
        <description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;This interview with Rich Hickey, the creator of Clojure language, was conducted by &lt;a href=&quot;http://fogus.me/&quot;&gt;Michael
Fogus&lt;/a&gt; on CodeQuarterly. All credit should be given to him. I’m posting it here
for two reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Preservation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CodeQuarterly is gone, so I wanted to create another copy of this interesting and insightful
interview to preserve it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Original Text for Korean Translation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I wanted to provide the original English text for readers of my Korean translation in case they
wanted to reference the primary source.&lt;/p&gt;

&lt;h2 id=&quot;rich-hickey-qa-by-michael-fogus&quot;&gt;Rich Hickey Q&amp;amp;A by Michael Fogus&lt;/h2&gt;

&lt;p&gt;Best known as the inventor of Clojure, a Lisp that runs on the Java Virtual Machine and the first
new member of the Lisp family to attract any widespread interest since Scheme and Common Lisp, Rich
Hickey has been a software developer and consultant for two decades.&lt;/p&gt;

&lt;p&gt;Prior to starting work on Clojure, he made four attempts to combine Lisp with either Java or
Microsoft’s Common Language Runtime: jfli, Foil, Lisplets, and DotLisp but Clojure was the first to
draw significant attention. To date there have been four books published on Clojure, including The
Joy of Clojure by interviewer Michael Fogus. The first Clojure conference, ClojureConj held in 2010,
drew over two hundred attendees. And the Clojure Google group has, as of this writing, 4,880 members
who have posted over 46,000 messages since it was started in 2007.&lt;/p&gt;

&lt;p&gt;In past lives Hickey has been a music composition major, a guitarist, and a serious C++ programmer,
even teaching an Advanced C++ course at New York University. In this interview, Michael Fogus talks
with Hickey about complexity, abstraction, and the past, present, and future of Clojure.&lt;/p&gt;

&lt;p&gt;Fogus: What drew you to programming?&lt;/p&gt;

&lt;p&gt;Hickey: I was running a recording studio and got a computer for it. I was intrigued by what it could
do—this was in the relatively early days of MIDI—and filled with the possibilities of what it might
do. So I taught myself C and assembly language and started writing music software. I was immediately
hooked.&lt;/p&gt;

&lt;p&gt;Fogus: You play guitar, correct?&lt;/p&gt;

&lt;p&gt;Hickey: Yes, I was a music composition major in college.&lt;/p&gt;

&lt;p&gt;Fogus: I’ve often found that great programmers are skilled musicians. Do you think that musical art
is related to the art of programming?&lt;/p&gt;

&lt;p&gt;Hickey: I think the skills useful for one are often useful for the other. Coding and music
performance are fairly different, other than being disciplines that reward practice, but software
design and composition have a lot of similarities. Both involve manipulating and coordinating
abstractions, and envisioning their realization, in the case of programs that are processes, in and
over time. I’ve certainly found software design satisfies the creative urge I intended to pursue in
composition, and has completely displaced it.&lt;/p&gt;

&lt;p&gt;Fogus: What was the first interesting program that you wrote?&lt;/p&gt;

&lt;p&gt;Hickey: An early program I wrote that got me excited about the possibilities of computing was
a simple evolution program. Bugs moved around on the screen looking for food, with random movement
to start. I would start it before bed, with the bugs shaking around, and awake to find they had
evolved these fluid, efficient movement strategies. It was then that I realized that simulations and
generative programs would allow us to see and discover things that analysis and calculation
couldn’t.&lt;/p&gt;

&lt;p&gt;Fogus: What do you do to improve your skills as a programmer? Do you have certain exercises or pet
projects that you use?&lt;/p&gt;

&lt;p&gt;Hickey: I read relentlessly. I don’t do any programming not directed at making the computer do
something useful, so I don’t do any exercises. I try to spend more time thinking about the problem
than I do typing it in.&lt;/p&gt;

&lt;p&gt;Fogus: Speaking of reading, you once created a Clojure Bookshelf list on Amazon that was very
popular. Of those books listed, are there any you think every programmer should read?&lt;/p&gt;

&lt;p&gt;Hickey: I couldn’t highlight just a few. Each illuminates some things and ignores others. I’m not
really comfortable advocating what others ought to do. Personally, I try to read, on an ongoing
basis, books such as those on the list and papers from academia, many of which are available online.
And I like to see a commitment to learning on the part of people with whom I work.&lt;/p&gt;

&lt;p&gt;Fogus: Let’s talk about some of your choices for the Clojure Bookshelf list. For example, on the
surface Clojure seems to be very different from Ruby, yet you list Programming Ruby 1.9 by Thomas,
Fowler, and Hunt. How did that book, and Ruby in general, influence the design of Clojure?&lt;/p&gt;

&lt;p&gt;Hickey: Well, influences can be positive or negative. Looking at Python and Ruby left me resolute
that I didn’t want to create yet another syntax and yet another object system. On the other hand,
they set a high bar for concision.&lt;/p&gt;

&lt;p&gt;Fogus: Do you think Ruby or Python has taken the ALGOL-derived syntax to the limit of its concision?&lt;/p&gt;

&lt;p&gt;Hickey: I don’t know. I’m more interested in reducing complexity than I am in concision.&lt;/p&gt;

&lt;p&gt;Fogus: Let’s explore that a little. There are the complexities of the problem, which are mostly
language independent, and then there are incidental complexities imposed by the language itself. How
does Clojure alleviate the last of these—the incidental complexities?&lt;/p&gt;

&lt;p&gt;Hickey: Reducing incidental complexity is a primary focus of Clojure, and you could dig into how it
does that in every area. For example, mutable state is an incidental complexity. The mechanics of it
seem simple, or at least familiar, but the reality is quite complex. In my opinion, it is clearly
the number one problem in systems. So, Clojure makes immutable data the default.&lt;/p&gt;

&lt;p&gt;Since we were talking about syntax, let’s look at classic Lisp. It seems to be the simplest of
syntax, everything is a parenthesized list of symbols, numbers, and a few other things. What could
be simpler? But in reality, it is not the simplest, since to achieve that uniformity, there has to
be substantial overloading of the meaning of lists. They might be function calls, grouping
constructs, or data literals, etc. And determining which requires using context, increasing the
cognitive load when scanning code to assess its meaning. Clojure adds a couple more composite data
literals to lists, and uses them for syntax. In doing so, it means that lists are almost always
call-like things, and vectors are used for grouping, and maps have their own literals. Moving from
one data structure to three reduces the cognitive load substantially.&lt;/p&gt;

&lt;p&gt;As programmers we’ve become quite familiar with many incidental complexities, but that doesn’t make
them less complex, it just makes us more adept at overcoming them. But shouldn’t we be doing
something more useful?&lt;/p&gt;

&lt;p&gt;Fogus: So once incidental complexities have been reduced, how can Clojure help solve the problem at
hand? For example, the idealized object-oriented paradigm is meant to foster reuse, but Clojure is
not classically object-oriented—how can we structure our code for reuse?&lt;/p&gt;

&lt;p&gt;Hickey: I would argue about OO and reuse, but certainly, being able to reuse things makes the
problem at hand simpler, as you are not reinventing wheels instead of building cars. And Clojure
being on the JVM makes a lot of wheels—libraries—available. What makes a library reusable? It should
do one or a few things well, be relatively self-sufficient, and make few demands on client code.
None of that falls out of OO, and not all Java libraries meet this criteria, but many do.&lt;/p&gt;

&lt;p&gt;When we drop down to the algorithm level, I think OO can seriously thwart reuse. In particular, the
use of objects to represent simple informational data is almost criminal in its generation of
per-piece-of-information micro-languages, i.e. the class methods, versus far more powerful,
declarative, and generic methods like relational algebra. Inventing a class with its own interface
to hold a piece of information is like inventing a new language to write every short story. This is
anti-reuse, and, I think, results in an explosion of code in typical OO applications. Clojure
eschews this and instead advocates a simple associative model for information. With it, one can
write algorithms that can be reused across information types.&lt;/p&gt;

&lt;p&gt;This associative model is but one of several abstractions supplied with Clojure, and these are the
true underpinnings of its approach to reuse: functions on abstractions. Having an open, and large,
set of functions operate upon an open, and small, set of extensible abstractions is the key to
algorithmic reuse and library interoperability. The vast majority of Clojure functions are defined
in terms of these abstractions, and library authors design their input and output formats in terms
of them as well, realizing tremendous interoperability between independently developed libraries.
This is in stark contrast to the DOMs and other such things you see in OO. Of course, you can do
similar abstraction in OO with interfaces, for instance, the java.util collections, but you can just
as easily not, as in java.io .&lt;/p&gt;

&lt;p&gt;Fogus: Can you expand on what you mean by “simple associative model for information”?&lt;/p&gt;

&lt;p&gt;Hickey: Most classes used to represent information are just bespoke associative maps of named
properties/attributes to values. But in the customization process we usually lose the ability to
treat them like generic maps. This then precludes the writing of generic information manipulation
code, since such code requires the capability to generically access/modify/add properties by
name/key, enumerate properties, etc. An associative information model retains and emphasizes those
capabilities.&lt;/p&gt;

&lt;p&gt;Fogus: Are there any domains where this abstraction-oriented approach isn’t suitable?&lt;/p&gt;

&lt;p&gt;Hickey: I think the approach in general has universal appeal. The pressure on abstractions, and on
dynamic languages like Clojure, comes from the quest for performance. People seeking the utmost
performance might not find Clojure suitable. They might not even find Java suitable, with its lack
of composite value types both on the stack and in arrays.&lt;/p&gt;

&lt;p&gt;That said, this is an area of ongoing improvement in Clojure, which is already pretty fast, as
dynamic languages go. With optional type hints, Clojure can already generate local code as fast as
Java, and new work on primitive arguments and returns is enabling that speed across larger scopes.
Whether that can be carried to the highest levels of the abstraction stack, without incurring the
rigidity and complexity of a full-on type system, is an open question I intend to pursue.&lt;/p&gt;

&lt;p&gt;Fogus: In an old paper of yours, “Callbacks in C++ Using Template Functors”, you write favorably
about C++, OOP, and static typing. Why did you change your mind?&lt;/p&gt;

&lt;p&gt;Hickey: I’m not sure I did. I said C++ was flexible—it is—and that, when implementing a callback
system for C++, one should remain aligned with its object orientation and static typing. More
interesting to me, in rereading it, is that I am still now making the same arguments I made then,
fifteen years ago, against mixins and derivation as extension mechanisms.&lt;/p&gt;

&lt;p&gt;That said, I certainly was a fan of C++ in the day, and five more years of it cured me of that. The
complexity is stunning. It failed as the library language it purported to be, due to lack of GC, in
my opinion, and static typing failed to keep large OO systems from becoming wretched balls of mud.
Large mutable object graphs are the sore point, and const is inadequate to address it. Once C++’s
performance advantage eroded or became less important, you had to wonder—why bother? I can’t imagine
working in a language without GC today, except in very special circumstances.&lt;/p&gt;

&lt;p&gt;Along the way, I discovered Common Lisp, which was much more flexible, dynamic, simpler, and fast
enough, and decided that was how I wanted to program. Finally, with Clojure, that is becoming
possible, and practical, for me.&lt;/p&gt;

&lt;p&gt;Fogus: In an email exchange, you mentioned that during the process of learning Lisp, you experienced
joy—a motivation for the title of my book, by the way. Can you elaborate on that feeling and why it
seems that Lisp fosters such a feeling?&lt;/p&gt;

&lt;p&gt;Hickey: You can reach a point with Lisp where, between the conceptual simplicity, the large
libraries, and the customization of macros, you are able to write only code that matters. And, once
there, you are able to achieve a very high degree of focus, such as you would when playing Go, or
playing a musical instrument, or meditating. And then, as with those activities, there can be
a feeling of elation that accompanies that mental state of focus.&lt;/p&gt;

&lt;p&gt;Fogus: What programming languages have you used professionally?&lt;/p&gt;

&lt;p&gt;Hickey: Mainly C, C++, Java, C#, Common Lisp, and Clojure.&lt;/p&gt;

&lt;p&gt;Fogus: What is your second favorite programming language?&lt;/p&gt;

&lt;p&gt;Hickey: If I had been more satisfied with any of those, I wouldn’t have written Clojure. If I had to
be stranded with something other than Clojure, I’d be happiest with a good Common Lisp and its
source code. If I had more free time, I’d spend it with Haskell.&lt;/p&gt;

&lt;p&gt;Fogus: I have a theory that the excitement surrounding Clojure is in part due to a general
open-mindedness fostered by Paul Graham’s original Lisp essays and the popularity of Python and
Ruby. What do you attribute to Clojure’s success thus far?&lt;/p&gt;

&lt;p&gt;Hickey: I agree with your theory. I think Paul Graham’s essays were hugely influential, and got
people interested in Lisp, a Lisp-like way of thinking about programming, and the importance of
rejecting conventional wisdom. And Python and Ruby—and PHP and Javascript—have helped herald
a renaissance of language diversity, as people were obviously succeeding with languages other than
Java/C#/C++. All of this paved the way for Clojure.&lt;/p&gt;

&lt;p&gt;It’s interesting, because Clojure provides almost nothing you can’t find somewhere else. But I do
think it occupies an otherwise empty spot in the multidimensional space of language features and
capabilities. If it hadn’t, I wouldn’t have written it. That’s the spot I wanted to work in, and
enough other people must want to be there too.&lt;/p&gt;

&lt;p&gt;Fogus: You’ve personally done a lot to set the tone in the Clojure community. How much does
a language’s community contribute to its success?&lt;/p&gt;

&lt;p&gt;Hickey: I think it is a huge component. I am so happy with, and proud of, the Clojure community.
People are helpful, and respectful, and positive. I think the key point is that the community values
itself, such that people will decide it is more important to preserve the quality of the community
than to vent their emotions or prove themselves right.&lt;/p&gt;

&lt;p&gt;Fogus: Can you talk briefly about the Lisp-related projects leading up to the creation of Clojure?
Specifically, what were the goals of dotLisp, Foil, and Lisplets?&lt;/p&gt;

&lt;p&gt;Hickey: dotLisp was the inevitable rite of passage write-a-Lisp-interpreter thing. The only thing
interesting about it was that, like Clojure, it was designed to be hosted and provide convenient
access to the host, the CLR in this case.&lt;/p&gt;

&lt;p&gt;Jfli was next, an attempt to provide access to Java by embedding a JVM inside a Common Lisp process.
This worked okay, but still had a dissatisfying us-and-them feel.  Foil was essentially the same
concept, but out of process. It used the same sexpr wire protocol to support both Java and CLR
interop. Still us-and-them, and slower than same process, but theoretically less intrusive.&lt;/p&gt;

&lt;p&gt;Lisplets was even more decoupled, merely translating Java servlet requests and responses to sexprs
so you could write your servlets in Lisp.&lt;/p&gt;

&lt;p&gt;In the end, none of these really let you sneak Lisp into a more traditional shop, nor did they
provide satisfyingly fast access to the abundant Java libs from Lisp.&lt;/p&gt;

&lt;p&gt;Fogus: What lessons did you take away from those experiments when creating Clojure?&lt;/p&gt;

&lt;p&gt;Hickey: That it was possible to create a satisfying Lispy syntax for accessing traditional OO stuff.
That you really want to be on the same side of the fence, sharing GC, etc. with the host. The
‘foreign’ part of FFI has to go.&lt;/p&gt;

&lt;p&gt;Fogus: Clojure was once in parallel development on both the JVM and the CLR, why did you eventually
decide to focus in on the former?&lt;/p&gt;

&lt;p&gt;Hickey: I got tired of doing everything twice, and wanted instead to do twice as much.&lt;/p&gt;

&lt;p&gt;Fogus: Referring back to your previous comment regarding the negative aspect of influences, I’m led
to wonder if the inclusion of Prolog Programming for Artificial Intelligence by Ivan Bratko to your
Bookshelf was of this variety. You’ve mentioned elsewhere that the common view of Prolog as
declarative is overblown—can I assume that Prolog negatively influenced Clojure?&lt;/p&gt;

&lt;p&gt;Hickey: I didn’t say overblown. I said it is less declarative than it might be, what with cut/fail
and clause order dependence. On the other hand, it is much more declarative than what most of us are
doing all the time, and serves as inspiration towards a more declarative approach. During the early
development of Clojure, I built a prototype predicate dispatch system for it using a Lisp-based
Prolog. It never became part of Clojure, but I am still interested in predicate dispatch, as well as
using logic systems in place of a type system for Clojure. Definitely a positive influence, if
somewhat under-delivered upon, as of yet.&lt;/p&gt;

&lt;p&gt;Fogus: I have studied the Clojure Datalog implementation and am saddened that it does not get a lot
of exposure. Do you think that there is a place for it, or some derivative, as the basis for that
“logic system”?&lt;/p&gt;

&lt;p&gt;Hickey: Yes, definitely. I like Datalog a lot.&lt;/p&gt;

&lt;p&gt;Fogus: To what extent should a programming language be designed to prevent programmers from making
mistakes or writing bad code?&lt;/p&gt;

&lt;p&gt;Hickey: I’m reluctant to say “should”, as different languages can rightly take different approaches
to this. I know my personal focus is on enabling people to do the right thing rather than preventing
them from doing the wrong thing. In the end, there is nothing that will prevent people from making
mistakes or writing bad code.&lt;/p&gt;

&lt;p&gt;Fogus: Following that idea—some people are surprised by the fact that Clojure does not engage in
data-hiding encapsulation on its types. Why did you decide to forgo data-hiding?&lt;/p&gt;

&lt;p&gt;Hickey: Let’s be clear that Clojure strongly emphasizes programming to abstractions. At some point
though, someone is going to need to have access to the data. And if you have a notion of “private”,
you need corresponding notions of privilege and trust. And that adds a whole ton of complexity and
little value, creates rigidity in a system, and often forces things to live in places they
shouldn’t. This is in addition to the other losing that occurs when simple information is put into
classes. To the extent the data is immutable, there is little harm that can come of providing
access, other than that someone could come to depend upon something that might change. Well, okay,
people do that all the time in real life, and when things change, they adapt. And if they are
rational, they know when they make a decision based upon something that can change that they might
in the future need to adapt. So, it’s a risk management decision, one I think programmers should be
free to make.&lt;/p&gt;

&lt;p&gt;If people don’t have the sensibilities to desire to program to abstractions and to be wary of
marrying implementation details, then they are never going to be good programmers.&lt;/p&gt;

&lt;p&gt;Fogus: Where can we draw the line between sensibilities and language philosophy? That is, could the
same be said for immutability in that we could simply say that programmers should follow
a convention of immutability instead of it being enforced by the language?&lt;/p&gt;

&lt;p&gt;Hickey: There’s no such thing as a convention of immutability, as anyone who has tried to enforce
one can attest. If a data structure offers only an immutable API, that is what’s most important. If
it offers a mixed API, it’s simply not immutable.&lt;/p&gt;

&lt;p&gt;Enforcement is orthogonal. That’s not to say there isn’t value in enforcement, as many optimizations
can come into play. But there’s no free lunch—type systems that can enforce purity are complex.&lt;/p&gt;

&lt;p&gt;Fogus: What would you say to people who claim that Clojure is not a “real Lisp”?&lt;/p&gt;

&lt;p&gt;Hickey: Life is too short to spend time on such people. Plenty of Lisp experts have recognized
Clojure as a Lisp. I don’t expect everyone to prefer Clojure over their favorite Lisp. If it wasn’t
different in some ways, there’d be little reason for it to exist.&lt;/p&gt;

&lt;p&gt;Fogus: Aside from an obvious language choice like Lisp-1 vs. Lisp-2, how does Clojure differ from
and hope to improve on Common Lisp and Scheme?&lt;/p&gt;

&lt;p&gt;Hickey: The two most significant changes are: the core library is implemented in terms of
abstractions, not concrete data types, e.g. sequence and associative abstractions rather than cons
cells, and the core data structures are immutable and persistent.&lt;/p&gt;

&lt;p&gt;Fogus: Referring back to your previous statement about Clojure allowing Lisp to be sneaked into
traditional shops—how does Clojure differ in this respect from other JVM-based Lisps?&lt;/p&gt;

&lt;p&gt;Hickey: Not much. You can sneak in almost any JVM language similarly.&lt;/p&gt;

&lt;p&gt;Fogus: You’ve said you’ve been surprised by how popular Clojure has become, but on the other hand
didn’t you bet a couple years of your life with little or no other income to produce the first
version?&lt;/p&gt;

&lt;p&gt;Hickey: I started it while on a sabbatical I had given myself. Not a break from work, but a break to
work, as a completely free person. I gave myself leave to do whatever I thought was right, with no
regard for what others might think, nor any motivation to profit. In releasing it, I had the normal
expectations for a new language—that ten to a hundred people might use it. Maybe I would get some
help or code contributions.&lt;/p&gt;

&lt;p&gt;It has taken off, and subsequently demanded far more time than the sabbatical I planned. So, I’m
trying to recoup some of the investment I’ve made. Had it been a financially motivated undertaking,
I’m sure Clojure would not exist, but I don’t regret having invested in it.&lt;/p&gt;

&lt;p&gt;Fogus: You released a series of videos introducing Clojure that generated serious buzz around the
language. In my opinion they are a brilliant marketing strategy, especially for a young language.
Were you intentionally creating those videos as marketing material, or was that simply a side effect
of a purely informational pursuit?&lt;/p&gt;

&lt;p&gt;Hickey: I’ve never intentionally marketed Clojure, other than the first email announcing its
existence to the very few members of the jfli and Foil mailing lists.&lt;/p&gt;

&lt;p&gt;I’ve given many invited talks, and the videos are recordings of some of those talks. It just seemed
like a sensible way to leverage the effort that went into doing the talks. I was quite surprised by
the audience they received, but it proves that videos like that are much more efficient than talking
to fifty to a hundred people at a time.&lt;/p&gt;

&lt;p&gt;Fogus: As someone who only knows Haskell enough to read the papers, Clojure appears to be influenced
by it substantially. From the names and operation of core functions— take , drop , iterate , repeat
, etc.—to its protocols facility, there is a lot in Clojure that a Haskell programmer would
recognize. Can you elaborate on Haskell’s influences on Clojure both positive and negative?&lt;/p&gt;

&lt;p&gt;Hickey: I think Haskell is a fantastic, awe-inspiring piece of work. I haven’t used it in anger, but
it certainly was a positive influence. Haskell obviously goes much further than Clojure in pursuing
the ideals of functional programing. In particular they differ in the approach to using types to
enforce things.&lt;/p&gt;

&lt;p&gt;In some ways, Clojure is an experiment to see how many of the benefits of functional programming can
be delivered without static enforcement. Certainly Clojure shows that you can get many benefits of
using immutable data and pure functions merely by supplying them as defaults and choosing to use
them, much in the same way you can get the benefits of walking on the sidewalk without there being
guard rails forcing you to stay on the sidewalk.&lt;/p&gt;

&lt;p&gt;I think the great challenge for type systems in practical use is getting them to be more expressive
without a corresponding—or worse—increase in complexity. I have yet to see that, so they are not
aligned with my desire to reduce complexity in programing.&lt;/p&gt;

&lt;p&gt;As far as protocols go, they are as much akin to Common Lisp’s generic functions as to Haskell’s
type classes, both of which demonstrate it is more flexible and extensible to keep functions and
data separate, than to combine them as in typical OO.&lt;/p&gt;

&lt;p&gt;Fogus: It’s clear that protocols are influenced by CLOS. However, while CLOS allows you to build
complex class hierarchies, Clojure’s types and protocols do not. Can you comment on the problems
associated with class hierarchies and how protocols address them?&lt;/p&gt;

&lt;p&gt;Hickey: One way to think about inheritance and hierarchy is as a form of logical implication—if X is
a Y, then all the things that are true of Y’s are true of X’s. The problems come about when you
attach something to the hierarchy. If Y is just an interface, then it’s relatively easy to make
X satisfy it without conflict or contradiction. If Y is behavior and/or data, then things get
dangerous quickly. There’s more potential for conflict and contradiction, and, usually, there’s also
a method for partial overriding of the inheritance and thus, qualification of the isa implication.
The implication is broken and your ability to reason about things turns to mud. And then of course
there are the type-intrusion problems of inheritance-based designs.&lt;/p&gt;

&lt;p&gt;Protocols and datatypes generally eschew implementation inheritance, and support interface
inheritance for interop only. Protocols support direct connections of datatypes to protocols,
without any inheritance. And protocols support direct implementation composition, which, in my
opinion, is far preferable to inheritance for that purpose. You can still get implementation
inheritance by extending protocols to interfaces, but that is a necessary compromise/evil for
interop purposes, and should be used with care.&lt;/p&gt;

&lt;p&gt;Fogus: Protocols and datatypes provide the basis for a bootstrapped Clojure—how important is it to
implement Clojure in Clojure?&lt;/p&gt;

&lt;p&gt;Hickey: It is important to be able to implement Clojure in Clojure, in order to make sure it has
sufficient facilities to implement its data structures and algorithms. We are implementing any new
data structures this way, and it is working out well. As far as going back and redoing things,
I think the most important bit is the Clojure compiler. It currently is a lot of Java, and no fun to
maintain. In addition, there are several things I’d like to do differently with it in order to
provide better support for tools. Next most important would be to move the abstractions from
interfaces to protocols. Finally, a full bootstrap would make ports easier.&lt;/p&gt;

&lt;p&gt;Fogus: Different target hosts would naturally support different subsets of Clojure’s functionality.
How do you plan to unify the ports?&lt;/p&gt;

&lt;p&gt;Hickey: I don’t. It has not been, and will not be, the objective of Clojure to allow porting of
large programs from one host to another. That is simply a waste of time, and needed by almost no
one. Currently, you often have to change languages when you change hosts—from Java to C# or
Javascript. This is better than that, while short of some full portability layer. The idea is to be
able to take one’s knowledge of Clojure and its core libraries, and of the host du jour, and get
something done. Certainly, non-IO libraries, like Clojure’s core, can move between hosts. The JVM
and CLR have rough capability parity. We’ll have to see how restrictive a Javascript host might be.&lt;/p&gt;

&lt;p&gt;Fogus: Will you formally define a “Clojure Kernel” as part of the Clojure-in-Clojure process?&lt;/p&gt;

&lt;p&gt;Hickey: I doubt it. Perhaps after a few ports exist we can put a label on the commonality, but
trying to do such formalization prior to getting a few hosts under your belt seems folly.&lt;/p&gt;

&lt;p&gt;Fogus: Favorite tools? Editor? Version control? Debugger? Drawing tool? IDE?&lt;/p&gt;

&lt;p&gt;Hickey: Circus Ponies NoteBook, OmniGraffle, hammock. [1]&lt;/p&gt;

&lt;p&gt;Fogus: You have been known to speak out against test-driven development. Do you mind elaborating on
your position?&lt;/p&gt;

&lt;p&gt;Hickey: I never spoke out ‘against’ TDD. What I have said is, life is short and there are only
a finite number of hours in a day. So, we have to make choices about how we spend our time. If we
spend it writing tests, that is time we are not spending doing something else. Each of us needs to
assess how best to spend our time in order to maximize our results, both in quantity and quality. If
people think that spending fifty percent of their time writing tests maximizes their results—okay
for them. I’m sure that’s not true for me—I’d rather spend that time thinking about my problem. I’m
certain that, for me, this produces better solutions, with fewer defects, than any other use of my
time. A bad design with a complete test suite is still a bad design.&lt;/p&gt;

&lt;p&gt;Fogus: Clojure provides function constraints via pre- and post-condition checks that provide
a subset of Eiffel’s contracts programming. Do constraints eliminate the need for, or complement
unit testing?&lt;/p&gt;

&lt;p&gt;Hickey: They complement unit tests. They have a number of nice properties—they document the intent
of the code at the point it is written, and can optionally run in the context of the program.&lt;/p&gt;

&lt;p&gt;Fogus: It seems that your decision to include features in Clojure is orthogonal to their
implementation and inherent complexities. For example, it seemed that streams were right on the cusp
of being integrated but were discarded outright. Likewise, scopes are relatively simple to
comprehend and implement, but likewise seem to have been dropped, or at least delayed greatly. What
are the reasons that you stepped away from these two in particular, and in general, what is your
ultimate criteria for adding new features to Clojure?&lt;/p&gt;

&lt;p&gt;Hickey: The default position is to not add features. Complexity does matter.&lt;/p&gt;

&lt;p&gt;Streams, in particular, exposed some difficult things in the API with which I wasn’t comfortable.
Now some of the motivating ideas have moved into pods, where they make more holistic sense. Various
features interact, e.g. pods, transients, and references, so you can’t look at any one in isolation.
Scopes may seem easy to implement, but only in ways that suffer the same limitations as vars and
binding vis-à-vis thread-pool threads. I have ideas about how to do that and binding better, and
that work may have to precede delivering scopes. Scopes are still on the table.&lt;/p&gt;

&lt;p&gt;I’d like for any new features to be actually needed and have designs I feel good about. It is
a process that requires exploratory work, and time to think. I reserve the right to come up with
a better idea, and sometimes I am just allocating time to do that by waiting. I like to think
I don’t primarily work on features—I work on problems that features help solve. Scopes are a feature
but resource management is a problem; streams and pods are features but process is a problem. As you
work on problems, you develop—and sometimes abandon—ideas for features.&lt;/p&gt;

&lt;p&gt;Fogus: I’ve spoken with a few of your former co-workers, and they described you as
a trouble-shooting and debugging master. How do you debug?&lt;/p&gt;

&lt;p&gt;Hickey: I guess I use the scientific method. Analyze the situation given the available information,
possibly gathering more facts. Formulate a hypothesis about what is wrong that fits the known facts.
Find the smallest possible thing that could test the hypothesis. Try that. Often this will involve
constructing an isolated reproducing case, if possible. If and only if the hypothesis is confirmed
by the small test, look for that problem in the bigger application. If not, get more or better facts
and come up with a different idea. I try to avoid attempting to solve the problem in the larger
context, running in the debugger, just changing things to see effects, etc.&lt;/p&gt;

&lt;p&gt;Ideally, you know you have solved the problem before you touch the computer, because you have
a hypothesis that uniquely fits the facts.&lt;/p&gt;

&lt;p&gt;Fogus: Is there a fundamental difference between debugging imperative/OO code versus Clojure code?&lt;/p&gt;

&lt;p&gt;Hickey: There is no fundamental difference, but debugging functional code is much easier because of
the better locality.&lt;/p&gt;

&lt;p&gt;Fogus: Clojure’s threaded concurrency story is very solid with numerous flavors of reference types
providing different usage scenarios. Do you feel satisfied with Clojure’s current concurrency
offerings, or do you have plans to expand on the current reference model, or perhaps venture into
distributed concurrency?&lt;/p&gt;

&lt;p&gt;Hickey: Over time I’ve come to see this as more of a state/identity/value/time/process thing rather
than concurrency in and of itself. Obviously it matters greatly for concurrent programs. I think
there is room for at least one more reference type. To the extent one value is produced from another
via a transient process, you could have a construct that allowed that process to have extent and/or
multiple participants. This is the kind of thing people do on an ad hoc basis with locks, and could
be wrapped in a reference-like construct, pods, that would, like the others, automate it, and make
it explicit and safe.&lt;/p&gt;

&lt;p&gt;I don’t see distributed concurrency as a language thing. In addition, I don’t think most
applications are well served with directly connected distributed objects, but would be better off
with some sort of message queues instead.&lt;/p&gt;

&lt;p&gt;Fogus: While there are also primitives supporting parallelism, Clojure’s story here has a lot of
room for expansion. Do you plan to include higher-level parallel libraries such as those for
fork-join or dataflow?&lt;/p&gt;

&lt;p&gt;Hickey: Yes, there are plans, and some implementation work, to support fork-join–based parallel
map/reduce/filter etc. on the existing data structures.&lt;/p&gt;

&lt;p&gt;Fogus: Are high-level languages harder to optimize?&lt;/p&gt;

&lt;p&gt;Hickey: I have no idea. What I do know is that, as we get to more virtualization, adaptive runtimes,
dynamic compilation, etc., it is becoming more difficult to obtain a deterministic performance model
for all languages on such runtimes. This is presumably a trade-off to get better performance than we
could obtain through manual optimization.&lt;/p&gt;

&lt;p&gt;Fogus: You’ve cited the philosophy of Alfred North Whitehead—in particular his works Process and
Reality and Science and the Modern World —in explaining Clojure’s notion of state, time, and
identity. What can we, as programmers, learn from Whitehead specifically and philosophy in general?
Is there a place for philosophy in the education of software developers?&lt;/p&gt;

&lt;p&gt;Hickey: I am not a proponent of the philosophy or metaphysics of Whitehead, and could hardly claim
to understand it all. I was putting together a keynote for the JVM language summit and striving to
find language-independent core ideas in the Clojure work. I was reminded of some Whitehead I had
studied in college, so opened up a few of his books. Sure enough, he was all over some of the themes
of my talk—time, process, immutability, etc. He is quite quotable, so I made him the ‘hero’ of the
talk. But Whitehead was not an inspiration for Clojure—any connections were a serendipitous
discovery after the fact. That said, the number of connections was startling.&lt;/p&gt;

&lt;p&gt;To the extent we create simplified models of the world, like object systems, as programming
constructs, yes, I guess any broader understanding of the world could benefit programmers.&lt;/p&gt;

&lt;p&gt;[1] Hickey has dubbed his previously mentioned tendency to spend more time thinking about problems
than typing in code “Hammock-Driven Development”.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Dec 2017 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2017/12/08/rich-hickey-interview-from-codequarterly.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2017/12/08/rich-hickey-interview-from-codequarterly.html</guid>
        
        
      </item>
    
      <item>
        <title>Type-Driven Development with Idris - Review</title>
        <description>&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.manning.com/books/type-driven-development-with-idris&quot;&gt;Type-Driven Development with
Idris&lt;/a&gt;
introduces a software development approach that uses types as the primary tool
for building softwares. In this paradigm, types are given much more
responsibilities than their traditional role of checking data validity. For
example, types can be used to represent the input and output states of
functions or various contracts that functions and datas must fulfill. Such
descriptions and contracts are enforced at compile time, providing much
stronger guarantee of software correctness at compile time than other
approaches can.&lt;/p&gt;

&lt;p&gt;Idris programming language is used in the book to teach type-driven development
(TDD). Idris is a general purpose pure functional programming
language created by Edwin Brady, who is also the author of this book. Idris is
inspired by Haskell and ML and sports a state of the art type system suited for
TDD. You will learn basics of Idris language alongside TDD in this book.&lt;/p&gt;

&lt;h2 id=&quot;who-is-it-for&quot;&gt;Who Is It For&lt;/h2&gt;

&lt;p&gt;I recommend this book to those who are interested in using statically typed
system to build programs with strong guarantee of correctness. You
should be familiar with basic concepts of functional programming such as
immutability, closure, or higher-order function. It would be very helpful if
you are already familiar with functional programming languages like Haskell,
OCaml, or Scala. The book introduces a lot of new concepts, so you’d rather
avoid having to learn about functors while trying to understand those other new
concepts introduced in the book.&lt;/p&gt;

&lt;p&gt;I do not recommend this book if you are not interested in statically typed
system or if you are a pragmatist interested in concepts and languages that can
be used in production right away. In addition, if you have little experience
with functional programming, this book might feel overwhelming because of the
sheer amount of prerequisite knowledge.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-it-special&quot;&gt;What Makes It Special&lt;/h2&gt;

&lt;p&gt;What I appreciate the most is that the author maintains clear focus on his
stated goal of introducing TDD. Far too many books, especially the ones that
deal with topics that their authors are passionate about, have unncessary
chapters that digress from the topic of the book. In contrast, this entire book
is written and organized for the introduction of TDD with a clear sense of
progression between each chapter. The author begins by introducing basic
concepts and setting up development environment; then he provides increasingly
advanced examples of TDD; in the final five chapters, he presents somewhat more
realistic examples like file IO or concurrent programming.&lt;/p&gt;

&lt;p&gt;Another thing I like about this book is that the author teaches the concepts
systematically, which is a somewhat rare skill among technical writers. At the
beginning of the book, he introduces an iterative process for TDD: “type,
define, refine: writing a type, implementing a function to satisfy that type,
and refining the type or definition as we learn more about the problem.” This
process is used throughout the book, each time in a slightly different context
to demonstrate its application. Such repetition of identical process under
different circumstances is one of the most effective method for teaching.&lt;/p&gt;

&lt;p&gt;The author also introduces new concepts through tutorial-like examples. He
first provides some code to serve as a starting point, and then guides the
readers through each step, all the while adhering to the “type, define, refine”
process. Here is a simple example with step-by-step progression from Chapter 3:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- For example, to write the exclusive OR operator, you could follow these&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- steps:  &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 1. Type — Start by giving a type:  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;-- 2. Define — Press Ctrl-Alt-A with the cursor over xor to add a skeleton definition:  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_rhs&lt;/span&gt;   

&lt;span class=&quot;c1&quot;&gt;-- 3. Define—Press Ctrl-Alt-C over the x to give the two possible cases for x :   &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_rhs_1&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_rhs_2&lt;/span&gt;   

&lt;span class=&quot;c1&quot;&gt;-- 4. Refine—Complete the definition by filling in the right sides:     &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, the author also provides nice exercises for each chapter. Whereas some
books provide difficult exercises that can only be solved when you thoroughly
understand new concepts, the exercises in this book are relatively simple ones
aimed at getting you more familiar with them. I think that this kind of
exercises is more appropriate when you are trying to learn something on your
own through books.&lt;/p&gt;

&lt;h2 id=&quot;type-driven-development-tdd&quot;&gt;Type-Driven Development (TDD)&lt;/h2&gt;

&lt;p&gt;In functional programming paradigm, a program is seen as a process of
transforming data from one form to another. Such data forms or structures are
represented as types, and the transformation process is represented as
a function with input and output. TDD puts emphasis on using types
and functions to depict the overall plan and structure of a program. The main
process in TDD is “type, define, refine”, as previously mentioned.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;As its name suggests, in TDD we write down types first. These types are used to&lt;/dt&gt;
  &lt;dt&gt;explicitly represent the conceptual model of the program that we intend to&lt;/dt&gt;
  &lt;dt&gt;write. Let’s say we want to represent the states of matter. We could start by&lt;/dt&gt;
  &lt;dt&gt;defining &lt;code class=&quot;highlighter-rouge&quot;&gt;data Matter = Solid | Liquid | Gas&lt;/code&gt;. Then we can represent&lt;/dt&gt;
  &lt;dt&gt;a phase transition from one state to another as a function `phaseTransition&lt;/dt&gt;
  &lt;dd&gt;Matter -&amp;gt; Matter`.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Once we define initial types and functions, we keep refining these definitions
so that the software would more precisely match our conceptual model. Let’s say
we’d like to add the plasma state to our program. Then we can refine our type
like &lt;code class=&quot;highlighter-rouge&quot;&gt;data Matter = Solid | Liquid | Gas | Plasma&lt;/code&gt;. We repeat this “type,
define, refine” process until we reach a satisfactory iteration.&lt;/p&gt;

&lt;p&gt;I believe that rather than being a completely novel approach, TDD is more of an
organized description of a software development approach that organically arose
in communities that use statically typed functional languages like Haskell.
Whenever I read or write Haskell programs, I find myself focusing foremost on
type definitions and function type signatures to gain overall understanding of
the program. TDD felt like an improved and formalized version of such an
approach.&lt;/p&gt;

&lt;h2 id=&quot;idris-programming-language&quot;&gt;Idris Programming Language&lt;/h2&gt;

&lt;p&gt;Having said that, TDD as presented in this book is way more powerful than what
little I’ve seen in Haskell. It is because of additional features offered by
Idris programming language. Let’s look at some of its notable characteristics.&lt;/p&gt;

&lt;h3 id=&quot;first-class-type&quot;&gt;First-class Type&lt;/h3&gt;

&lt;p&gt;Idris has first-class type and can pass around types as arguments to other
functions. If you’ve experienced the paradigm shift that occurred when
first-class function was introduced, you could guess how much this changes the
game. Like first-class function, first-class type opens up a completely new way
to express our intents through code.&lt;/p&gt;

&lt;p&gt;As a simple example of first-class type, in Idris &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; type is defined as
&lt;code class=&quot;highlighter-rouge&quot;&gt;data List : (elem : Type) -&amp;gt; Type&lt;/code&gt;. It’s just a regular type that takes
another type as an argument, without special interface-like syntax provided by
the language. Unfortunately, the full implications of first-class type is hard
to demonstrate through such trivial example. In Idris, this feature is used
mostly in conjunction with dependent type, which we will look at next.&lt;/p&gt;

&lt;h3 id=&quot;dependent-types&quot;&gt;Dependent Types&lt;/h3&gt;

&lt;p&gt;Dependent type is one of the defining features of Idris. It allows us to define
types that can be calculated from other values. Personally, I found it easiest
to think about it as a function at type level.&lt;/p&gt;

&lt;p&gt;For example, we can think of &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector 4 String&lt;/code&gt; type, which represents a list of
&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; with exactly 4 elements. We can keep creating similar types like &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector
0 String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector 1 String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector 2 String&lt;/code&gt;, and so on by entering
different values as their lengths. This can be generalized as &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector n String&lt;/code&gt;
type, which is essentially a function that takes &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; as input and returns types
as outputs. The type of output returned by this function is “dependent” on the
value of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, so this kind of function is called a dependent function. The type
of this function, in turn, is called dependent function type or shortened to
dependent type.&lt;/p&gt;

&lt;p&gt;Dependent type gives us a new dimension of code expressiveness, enabling us to
incorporate more information about program into the type system. I found two
use cases most interesting. First, information about data that was available
only at runtime can be made available at compile time. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;
type tells us that a value of its type will be an integer. But whether
a variable of that type would be a positive or negative number, or zero can
only be determined at runtime. With dependent type, we can define more precise
types such as “positive integers that are multiples of three” or “odd integers
greater than -50 and less than 9953”. We’ve already seen the &lt;code class=&quot;highlighter-rouge&quot;&gt;Vect n String&lt;/code&gt;
type, which represents “lists of n String items”. Because such information is
guaranteed by the type system at compile time, we never have to worry about
unexpected values.&lt;/p&gt;

&lt;p&gt;Second, description about what constitutes a valid program can be represented
in the type system. For example, in the context of bank transactions, we can
define &lt;code class=&quot;highlighter-rouge&quot;&gt;Withdrawl&lt;/code&gt; dependent type, which takes not just the amount of money to
withdraw, but also “valid credentials” and “bank account with balance greater
than withdrawl amount” as arguments. Assuming that we defined the &lt;code class=&quot;highlighter-rouge&quot;&gt;Withdrawl&lt;/code&gt;
type properly, any value of &lt;code class=&quot;highlighter-rouge&quot;&gt;Withdrawl&lt;/code&gt; type would always represent a valid
bank transaction.&lt;/p&gt;

&lt;p&gt;Traditionally, such information has been described in separate
documents such as UML, comments of the source file, or worse, in the head of
the developer. In Idris, it can be directly represented as part of the source
code and made available to the compiler through dependent types, ensuring that
a program’s description and implementation can programatically refer to each
other. This means that any change to software requirements will be immediately
reflected in the description of the program, which the compiler will use to
check whether rest of the program follows the new requirements. There would be
no more need to continuously go back and forth between documents and source
code to ensure that new requirements are reflected.&lt;/p&gt;

&lt;p&gt;In the book, the author demonstrates several use cases of dependent type. I’ll
extend the state of matter example to showcase how to represent input and
output states of operations in a dependent type.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Melt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Vaporize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Condense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Freeze&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Liquid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Sublime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Deposit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;Pure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PhaseTransition&lt;/code&gt; dependent type describes potential phase transitions among
states of matter, where last two arguments refer to input and output states.
For example, a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;PhaseTransition&lt;/code&gt; dependent type constructed with
&lt;code class=&quot;highlighter-rouge&quot;&gt;Melt&lt;/code&gt; constructor requires that input and output states must be &lt;code class=&quot;highlighter-rouge&quot;&gt;Solid&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid&lt;/code&gt;, respectively. We can use these operations to write a sequence of
phase transitions like following:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vaporizeIce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vaporizeIce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Melt&lt;/span&gt;
                 &lt;span class=&quot;kt&quot;&gt;Vaporize&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vaporizeIceThenFreezeAgain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vaporizeIceThenFreezeAgain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Melt&lt;/span&gt;
                                &lt;span class=&quot;kt&quot;&gt;Vaporize&lt;/span&gt;
                                &lt;span class=&quot;kt&quot;&gt;Deposit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;freezeSteam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhaseTransition&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gas&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Solid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;freezeSteam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Freeze&lt;/span&gt;
                 &lt;span class=&quot;kt&quot;&gt;Freeze&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that the last function does not make sense. To make a gas into
solid, we need to condense and then freeze it. Instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;freezeSteam&lt;/code&gt; function
conducts freeze operation twice. Compiler will also notice that the
sequence of phase transitions in &lt;code class=&quot;highlighter-rouge&quot;&gt;freezeSteam&lt;/code&gt; is invalid and and report an
error at compile time, which is made possible through dependent type.&lt;/p&gt;

&lt;h3 id=&quot;powerful-repl&quot;&gt;Powerful REPL&lt;/h3&gt;

&lt;p&gt;Idris has one of the most powerful REPLs I have seen. Let’s take a look at the
example I’ve already given above.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- For example, to write the exclusive OR operator, you could follow these&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- steps:  &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 1. Type — Start by giving a type:  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;-- 2. Define — Press Ctrl-Alt-A with the cursor over xor to add a skeleton definition:  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_rhs&lt;/span&gt;   

&lt;span class=&quot;c1&quot;&gt;-- 3. Define—Press Ctrl-Alt-C over the x to give the two possible cases for x :   &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_rhs_1&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_rhs_2&lt;/span&gt;   

&lt;span class=&quot;c1&quot;&gt;-- 4. Refine—Complete the definition by filling in the right sides:     &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Something that starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;?xor_rhs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;?xor_rhs_1&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;?xor_rhs_2&lt;/code&gt;, is a hole. It stands in for incomplete parts of the program, and
Idris REPL provides amazing commands to work with holes. The instructions in
the above code refer to some basic commands, such as automatic case splitting
or displaying which type the hole stands for. In the following gif, you can see
me actually following these instructions. Working in Idris REPL is an
incredibly pleasant experience. It feels like having a meticulous and helpful
assistant, not a nagging manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/idris_repl_demo.gif&quot; alt=&quot;terminal gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-musings&quot;&gt;Other Musings&lt;/h2&gt;

&lt;p&gt;Overall reading the book was an eye-opening experience. This was by far the
most difficult programming language book that I’ve read, as it introduced a lot
of unique concepts. For example, I was dumbstruck when I learned that I had to
convince the Idris compiler that &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + k&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;k + 1&lt;/code&gt; are equivalent types to
pass the type check. I’ve never seen anything like that in other languages.&lt;/p&gt;

&lt;p&gt;Idris is a visionary language, which tries to address some inherent flaws of
current models of programming. I like it as a language, but I doubt it will
ever become a mainstream one. First of all, it requires even more background
knowledge than Haskell to use it. On the other hand, its type system is too
powerful for typical tasks. Mainstream is all about being “just good enough”,
but Idris is more about “above and beyond”. For typical shopping mall inventory
management system, Idris is a bit overqualified. Moreover, I have a hunch that
in collaborative environment it would be hamstrung by its excellent
expressiveness. There would be so many ways to express something that each team
member would end up writing programs in different styles, which causes
significant problems for collaboration. There’s a reason that Google keeps Go
language so plain despite continued criticisms.&lt;/p&gt;

&lt;p&gt;Having said that, if I had to write software for nuclear reactors, I would
definitely pick Idris, because it gives me unparalleled confidence in my code
for such a critical system.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Oct 2017 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2017/10/23/tdd-with-idris-review.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2017/10/23/tdd-with-idris-review.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Bake Pi - Review</title>
        <description>&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/How-Bake-Pi-Exploration-Mathematics/dp/0465097677&quot;&gt;How to Bake Pi: an Edible Exploration of the Mathematics of
Mathematics&lt;/a&gt;
explores what mathematics is about by explaining the purpose and building
blocks of mathematics in an easy-to-read language, drawing examples from
everyday life, including baking.&lt;/p&gt;

&lt;p&gt;I recommend it to you if you have never learned abstract mathematics but would
like an introduction to it written in a way that even normal human beings can
understand.&lt;/p&gt;

&lt;p&gt;I do not recommend this book if you want to learn category theory or its
application to software development. This book will give you an overview of
what category theory is about, but will not teach you anything in depth about
category theory. In terms of category theory textbook, the contents of this
book would fit in as an extended introduction chapter.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-it-special&quot;&gt;What Makes It Special&lt;/h2&gt;

&lt;p&gt;Baking and mathematics are an odd combination to say the least. Eugenia Chang,
the author, does her best to introduce mathematical concepts by making an
analogy to baking. For example, when talking about abstraction, she takes
mayonnaise and Hollandaise sauce as examples. Both are made with almost
identical ingredients and processes, except that mayonnaise uses olive oil and
Hollaindaise sauce uses butter. They are examples of “things that are somehow
the same apart from small details,” which is how she describes abstraction.&lt;/p&gt;

&lt;p&gt;Although analogy to baking is continuously made throughout the book, it is not
the only analogy she uses. She also draws plenty of other examples from
everyday life. In the chapter about abstraction, she uses following examples to
make her point: recipes for different types of pies, numbers, heartbreaks, road
signs, mathematical symbols, Google maps, and so on. It’s an odd collection,
but the author clearly points out that they all are abstraction of some sort.&lt;/p&gt;

&lt;p&gt;Sometimes the analogies feel a bit tenuous, and, due to their inherent
limitations, they cannot provide precise definitions of the concepts that they
try to illustrate. But the goal of the author is to make math easier to
approach, and to help readers gain personal understanding or “illumination”, as
she calls it, about mathematics. That’s why she came up with a lot of analogies
instead of lazily throwing mathematical proofs at the readers. And she does
a marvelous job at making this book an enjoyable read.&lt;/p&gt;

&lt;h2 id=&quot;motivation-and-expectations&quot;&gt;Motivation and Expectations&lt;/h2&gt;

&lt;p&gt;Ever since learning Haskell, and coming across odd terms like monoid, functor,
monad, and others used in Haskell, I naturally got curious about what they
actually meant. I learned that they were concepts borrowed from category
theory, a branch of abstract mathematics. That was as far as I was willing to
go at the time, but I’ve been looking for an opportunity to learn more about
the subject since then. So when I heard that there was an easy-to-read
introduction to category theory, I was immediately intrigued and bought the
book. I was hoping for an introduction to category theory and some explanations
on what those jargons in Haskell meant. I could accomplish the first goal, but
not the second.&lt;/p&gt;

&lt;h2 id=&quot;what-mathematics-is-about&quot;&gt;What Mathematics Is About&lt;/h2&gt;

&lt;p&gt;The title of the first part of the book is &lt;code class=&quot;highlighter-rouge&quot;&gt;PART I: MATH&lt;/code&gt;. What
a straightforward title. Although I’m not terrified of math, I’m not in love
with it either.&lt;/p&gt;

&lt;p&gt;I have learned mathematics in high school and college, but it was all about
equations and theorems. Usually I would get a new equation from teachers or
books, some explanations about what it does, some examples of its applications,
and a bunch of exercises. There was almost no discussion about why I should
learn this weird equation, or how is the topic related to something else that
I’ve learned in the previous year. I suspect that most people have similar
experiences regarding mathematics.&lt;/p&gt;

&lt;p&gt;This book does none of that. Instead, it talks about principles and fundamental
concepts of mathematics used for constructing those equations and theorems. The
author defines that “mathematics is the study of anything that obeys the rules
of logic, using the rules of logic,” and introduces core concepts of
mathematics to flesh out that concise definition.&lt;/p&gt;

&lt;p&gt;Abstraction is a technique for stripping away unnecessary details from things
that we are dealing with, because those details hinder us from focusing on the
essential properties of things and from applying the rules of logic to them.
Number is an excellent example. When you want to know the total count of items
in your grocery bag, you abstract away what those items are and just focus on
the fact that there exists an item. For counting, that’s the right level of
abstraction.&lt;/p&gt;

&lt;p&gt;Then the author talks about principles and processes, which correspond to “the
rules of logic.” These chapters emphasize that there are principles in math
that are always right as long as they are examined under certain constraints,
and that following correct process is often as important as getting the right
answer.&lt;/p&gt;

&lt;p&gt;Then comes the chapter about generalization, the centerpiece of the first part
of this book. The author describes generalization as a process of gradually
relaxing conditions for a concept in order to allow more things in. For
example, a square has four sides of same length and four angles of same degree.
When you slightly relax the condition about identical angles and require only
the facing angles to be identical, you get a rhombus, which is a generalization
of a square. Likewise, a parallelogram has more relaxed conditions than
a rhombus, since only the facing sides need to have identical lengths. So it is
a generalization of a rhombus.&lt;/p&gt;

&lt;p&gt;Now we have a mental framework for understanding what mathematics is about.
Mathematics is about studying abstractions of real things, each of which obeys
certain principles and axioms. We can relax or tighten these principles to
generalize abstractions in order to move around different levels of
abstractions and study them in relation to one another.&lt;/p&gt;

&lt;p&gt;Well, I’ve never heard mathematics described like that. As I’ve already
mentioned, mathematics was just a collection of grueling mechanical techniques
to me. In contrast, according to the author’s description, math sounds more
like a fun meta-game where I could play around with the rules of another game.&lt;/p&gt;

&lt;p&gt;Only after I’ve read the second part of the book did I realize that this is
exactly how a category theorist would characterize mathematics. So the author
is introducing category theory in a sneaky way while explaining fundamental
concepts of mathematics. It’s quite clever.&lt;/p&gt;

&lt;h2 id=&quot;what-category-theory-is-about&quot;&gt;What Category Theory Is About&lt;/h2&gt;

&lt;p&gt;The title of the second part of the book is &lt;code class=&quot;highlighter-rouge&quot;&gt;PART II: CATEGORY THEORY&lt;/code&gt;. The
author does like her terse, straightforward titles.&lt;/p&gt;

&lt;p&gt;This is how she explains what category theory is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Category theory is mathematics of mathematics. […] It’s a sort of
meta-mathematics, like Lego Lego. […] It works by abstraction of
&lt;em&gt;mathematical&lt;/em&gt; things, it seeks to study the principles and processes
behind &lt;em&gt;mathematics&lt;/em&gt;, and it seeks to axiomatize and generalize those
things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think I could also write it this way: when you recursively apply to
mathematics its own methodologies, you get category theory.&lt;/p&gt;

&lt;p&gt;In part 2, the author explains what kinds of concepts are given importance in
category theory in order to better explain her description of category theory.&lt;/p&gt;

&lt;p&gt;In the chapter about context, she writes that “category theory seeks to
emphasize the context in which things are studied rather than the absolute
characteristics of the things themselves.” For example, number 5 is a prime
number in the context of natural numbers. In the context of rational numbers,
however, 5 can be divided by all kinds of numbers, not just 1 and 5, so it is
no longer a prime number. So characteristics of number 5 depend on the context
under which it is examined.&lt;/p&gt;

&lt;p&gt;She also writes that “Instead of just studying objects and their
characteristics by themselves, [category theory] emphasizes their relationships
with other objects as the main way of placing them in context.” This is easier
to understand with a diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/relationship_example.png&quot; alt=&quot;relationship example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the relationships like &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; are important subject of study in category
theory. If you think these relationships, called “morphism” or “arrow” in
category theory, look similar to functions, then you are not wrong. Function is
a kind of morphism and its mathematical notation bears some similarities to
that of morphism.&lt;/p&gt;

&lt;p&gt;With all of those ideas laid out, the author finally gives the definition of
category. I will not discuss the definition in this post, but am presenting it
just for the sake of it. Even the author doesn’t really go into much detail
about this definition in the book. I think she too was presenting it just to
show what it looks like in formal notations, and nothing more. I will use &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;
to denote composition like in Haskell style.&lt;/p&gt;

&lt;p&gt;Morphisms of a cateogry for some objects should obey the following rules:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Given arrows &lt;code class=&quot;highlighter-rouge&quot;&gt;f(a) = b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;g(b) = c&lt;/code&gt;, it has to result in a composite
arrow &lt;code class=&quot;highlighter-rouge&quot;&gt;g . f(a) = c&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There should be an identity arrow &lt;code class=&quot;highlighter-rouge&quot;&gt;i(a) = a&lt;/code&gt; for all objects, which means
that for all other arrows &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;f . i = f&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i . f = f&lt;/code&gt; should hold true.&lt;/li&gt;
  &lt;li&gt;Given three arrows &lt;code class=&quot;highlighter-rouge&quot;&gt;f, g, h&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;(h . g) . f = h . (g. f)&lt;/code&gt; should hold true
for all composite arrows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the following chapter, she talks about how category theory studies
structures arising out of morphisms. There are different objects whose
relationships have very similar structures when laid out in diagrams. Here are
three of the examples presented in the book: addition modulo 2, multplication
of 1 and -1, and rotation by degrees.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/addition_modulo_2.png&quot; alt=&quot;addition modulo 2&quot; /&gt; &lt;img src=&quot;/assets/multiplication_1_minus_1.png&quot; alt=&quot;multiplication of 1 and -1&quot; /&gt; &lt;img src=&quot;/assets/rotation_by_degrees.png&quot; alt=&quot;rotation by degrees&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last few chapters discuss a few more topics of interest such as sameness or
universal properties. They revolve around demonstrating how category theory
studies these concepts, which have different meanings depending on the contexts
under which they are examined.&lt;/p&gt;

&lt;p&gt;So that concludes my not-so-brief overview of the book. Unfortunately, that’s
where the book ends. So the book doesn’t really get into category theory - it
just introduces it.&lt;/p&gt;

&lt;h2 id=&quot;other-musings&quot;&gt;Other Musings&lt;/h2&gt;

&lt;p&gt;The author brings up some interesting ideas that are somewhat tangentially
related to mathematics. For example, she says that math is easy compared to
life, because math abstracts away illogical things in real life; and people
find it difficult because they do not learn what it is for or because they are
not interested in what math simplifies from real life.&lt;/p&gt;

&lt;p&gt;That comment resonated with me. While learning math, I often wondered “why am
I even learning this.” I’m sure most of you have similar experiences. I was
never told why I had to learn imaginary numbers. And I was not interested in
studying things like matrices because I could not see where I would use it. So
think that her claim that math is difficult because it’s taught in a terrible
way does make some sense.&lt;/p&gt;

&lt;p&gt;I also noticed how abstract mathematics sounds very similar to philosophy. She
talks about limitations of logic, and difference between knowing,
understanding, and believing something. These topics are also commonly
discussed in philosophy. I did hear that the two fields are similar in a lot of
ways, but this was the first time that I actually saw that.&lt;/p&gt;

&lt;p&gt;In addition, although I couldn’t learn anything about category theory in the
context of software development, I do feel much more comfortable about terms
like monads or functors now. Whereas they felt like some alien concepts out of
nowhere, now I can place them in a context where they are just regular
concepts, and know where to learn more about them.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;While reading this book, I learned of another resource that could be helpful in
learning about category theory in the context of software development. It’s
called &lt;a href=&quot;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&quot;&gt;Category Theory for Programmers&lt;/a&gt;.
I put it in my reading list.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Sep 2017 15:00:00 +0000</pubDate>
        <link>https://harfangk.github.io/2017/09/07/how-to-bake-pi-review.html</link>
        <guid isPermaLink="true">https://harfangk.github.io/2017/09/07/how-to-bake-pi-review.html</guid>
        
        
      </item>
    
  </channel>
</rss>
