<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>gywndi&#039;s database</title>
	<atom:link href="http://gywn.net/feed/" rel="self" type="application/rss+xml" />
	<link>http://gywn.net</link>
	<description>&#62;&#62; database and research</description>
	<lastBuildDate>Mon, 28 Jan 2019 23:58:03 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.1.25</generator>
	<item>
		<title>PMM팁1탄! MySQL을 READ-ONLY 기준으로 표기해보기.</title>
		<link>http://gywn.net/2019/01/pmm-tip1-classified-by-mysql-readonly/</link>
		<comments>http://gywn.net/2019/01/pmm-tip1-classified-by-mysql-readonly/#comments</comments>
		<pubDate>Mon, 28 Jan 2019 23:58:03 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MariaDB]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[PMM]]></category>
		<category><![CDATA[Grafana]]></category>
		<category><![CDATA[pmm]]></category>
		<category><![CDATA[prometheus]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2643</guid>
		<description><![CDATA[Overview 어느덧 1월이 마무리되어가는 이 시점.. 한달 내내 놀다 시간 보내기에는 아쉬움이 많이 남아, 블로그 한두개 정도는 남겨보고자, 아주 간만에 노트북 앞에 앉습니다. 가장 기억 속에 맴도는 주제를 찾던 중, 작년 나름 많은 분석을 했었던 내용들을 한번 몇가지 주제로 정리해보고자 합니다. PMM(Percona Monitoring and Management)이라는 녀석으로 퉁 쳐서 이야기를 했지만, 사실 이번에 이야기할 내용은 Prometheus [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2019/01/pmm-tip1-classified-by-mysql-readonly/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>[MySQL] Online Alter에도 헛점은 있더구나 &#8211; gdb, mysqld-debug 활용 사례</title>
		<link>http://gywn.net/2018/10/online-alter-for-varchar/</link>
		<comments>http://gywn.net/2018/10/online-alter-for-varchar/#comments</comments>
		<pubDate>Fri, 12 Oct 2018 00:00:52 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MariaDB]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[mariadb]]></category>
		<category><![CDATA[online alter]]></category>
		<category><![CDATA[percona server]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2620</guid>
		<description><![CDATA[Overview MySQL에서도 5.6부터는 온라인 Alter 기능이 상당부분 제공되기 시작했습니다. 인덱스과 칼럼 추가/삭제 뿐만 아니라, varchar 경우에는 부분적으로 칼럼 확장이 서비스 중단없이 가능한 것이죠. 물론 오라클 유저들에게는 당연한 오퍼레이션들이, MySQL에서는 두손들고 운동장 20바퀴 돌 정도로 기뻐할만한 기능들입니다. 물론, 대부분의 DDL을 테이블 잠금을 걸고 수행하던 5.5 시절에도 online alter를 위해 트리거 기반의 pt-online-schema-change 툴을 많이들 사용했었기에.. 서비스 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2018/10/online-alter-for-varchar/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MySQL에서 Affected Rows를 병맛나게 활용해보자.</title>
		<link>http://gywn.net/2018/03/mad-usage-with-mysql-affected-rows/</link>
		<comments>http://gywn.net/2018/03/mad-usage-with-mysql-affected-rows/#comments</comments>
		<pubDate>Mon, 26 Mar 2018 23:45:20 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MariaDB]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[affected rows]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2610</guid>
		<description><![CDATA[Overview 이제 슬슬 날이 풀려가고 있습니다. 얼어붙은 땅이 녹듯이, 오랜시간 얼어있던 블로그 공간도 잠시마나 녹여볼까 합니다. 사실 지난  “PMM 이야기 1편” 이후 2편, 3편 쭉 써야하지만.. 이노무 귀차니즘과 여기저기 산재한 낙서들을 아직 정리하지 못한 탓에.. 쿨럭.. 사실 오늘 얘기할 내용은 3년도 훨씬 전 내용으로, 블로그로 이미 정리했다고 지금까지 착각을 했던 이야기입니다. 바로 &#8220;Affected Rows&#8221; 값을 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2018/03/mad-usage-with-mysql-affected-rows/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>PMM 이야기 1편 &#8211; INTRO</title>
		<link>http://gywn.net/2018/03/pmm-intro/</link>
		<comments>http://gywn.net/2018/03/pmm-intro/#comments</comments>
		<pubDate>Sat, 03 Mar 2018 17:33:28 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[PMM]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[monitoring]]></category>
		<category><![CDATA[percona]]></category>
		<category><![CDATA[pmm]]></category>
		<category><![CDATA[prometheus]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2589</guid>
		<description><![CDATA[Overview 정말 오랜만에 글을 써봅니다. 은행이 오픈한지도 어언 8개월째를 훌쩍 접어들었네요. 여전히 MySQL 서버군에는 이렇다할 장애 없이, 무난(?)하게 하루하루를 지내고 있습니다.. (아.. 그렇다고 놀고만 있지는 않았어요!!) 사실 그동안의 경험과 삽질을 바탕으로, 필요성을 느꼈던 다양한 부분을 중앙 매니저에 최대한 녹여보았고, 그 집대성의 결과가 지금 뱅킹 MySQL시스템입니다. MHA 관리, 스키마 관리, 파티션 관리, 패스워드 관리, 백업/복구 관리..아.. [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2018/03/pmm-intro/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>소소한 데이터 이야기 &#8211; pt-online-schema-change 편 -</title>
		<link>http://gywn.net/2017/08/small-talk-pt-osc/</link>
		<comments>http://gywn.net/2017/08/small-talk-pt-osc/#comments</comments>
		<pubDate>Wed, 23 Aug 2017 22:20:31 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MariaDB]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[online alter]]></category>
		<category><![CDATA[pt-online-schema-change]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2557</guid>
		<description><![CDATA[Overview MySQL 5.6부터는 Online ddl 기능을 제공하기 시작하였지만, 사실은 이전에도 트리거 기반의 online alter 유틸로 서비스 중단없이 테이블 스키마 변경을 수행했었습니다. 이중 percona에서 제공해주는 pt-online-schema-change가 많이들 활용되고 있는데요. 오늘은 돌다리도 망치로 때려가면서 안정성에 신중히 접근한 우리의 케이스에 대해서 데이터 기준으로 얘기를 해보고자 합니다. pt-online-schema-change? 얘기하기에 앞서서, 이 툴에 대해서 다시한번 짚어보겠습니다. 대충 동작 순서는 아래와 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2017/08/small-talk-pt-osc/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>데이터쟁이 입장으로 &#8220;슬로우 쿼리&#8221;를 다시 고민해보았습니다.</title>
		<link>http://gywn.net/2017/08/mysql-slow-log-gather/</link>
		<comments>http://gywn.net/2017/08/mysql-slow-log-gather/#comments</comments>
		<pubDate>Mon, 14 Aug 2017 23:13:09 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[slow query]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2546</guid>
		<description><![CDATA[Overview 서비스를 하면 당연히 실행이 오래 걸리는 쿼리, 슬로우 쿼리는 발생합니다. 원인은 정말 비효율적인 쿼리인 것도 있겠지만,  때로는 Lock, Disk fault 등등 원인은 다양합니다. DB 내/외부 요소에 의해서, 슬로우 쿼리가 발생하게 되는데.. 이것을 늘 모니터링하고 적시에 바로 최적화 적용을 하는 것이야말로, 안정적인 서비스 최상 품질 보장의 첫 걸음이라고 생각합니다. 물론, 이 관련해서는 여러가지 방법론이 있겠지만, [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2017/08/mysql-slow-log-gather/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>[MySQL] 바쁜 서비스 투입 전, 이런 캐시 전략 어때요?</title>
		<link>http://gywn.net/2017/06/mysql-os-cache-management/</link>
		<comments>http://gywn.net/2017/06/mysql-os-cache-management/#comments</comments>
		<pubDate>Thu, 15 Jun 2017 21:39:12 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[dentry]]></category>
		<category><![CDATA[dirty]]></category>
		<category><![CDATA[memory]]></category>
		<category><![CDATA[page cache]]></category>
		<category><![CDATA[swap]]></category>
		<category><![CDATA[unmap]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2525</guid>
		<description><![CDATA[Overview 데이터베이스를 운영한다는 것은 최적의 상태로 리소스를 &#8220;쥐어짜면서&#8221; 가장 효율적으로 데이터를 끄집어내야할텐데요. 지금은 SSD 디스크 도입으로 상당 부분 Disk I/O가 개선되었다지만, 여전히 메모리 효율은 굉장히 중요합니다. 특히나 Page Cache와 같은 항목이 과다하게 메모리를 점유하게 되면.. 다른 프로세스 효율에도 영향을 미칠 뿐만 아니라, 때로는 메모리 부족 현상으로 인하여 스왑 메모리에도 영향을 줄 수 있습니다. 서론은 짧게.. 이번에 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2017/06/mysql-os-cache-management/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>[MySQL] 슬레이브 하나 더 추가했을 뿐인데.. :-)</title>
		<link>http://gywn.net/2017/06/mysql-slave-addition-effect/</link>
		<comments>http://gywn.net/2017/06/mysql-slave-addition-effect/#comments</comments>
		<pubDate>Mon, 12 Jun 2017 21:08:18 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[mha]]></category>
		<category><![CDATA[semi-sync replication]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2505</guid>
		<description><![CDATA[Overview MySQL의 꽃중의 꽃은 역시 비동기 방식의 데이터 복제라고 볼 수 있는데요. 지극히 개인적인 생각이기는 하지만, 슬레이브 노드를 데이터 일관성이 반드시 필요한 상황에서의 READ 스케일아웃을 &#8220;제외&#8221;하고는, 지금의 MySQL을 있게한 결정적인 한방이라고 봅니다. 물론 소셜 서비스에 따른 기존 스케일업으로는 도저히 감당할 수 없는 데이터 사이즈와 비용 요소도 직접적인 영향을 주었겠지만요. 뜬구름잡는 얘기는 여기까지로 마무리하고.. 슬레이브 노드를 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2017/06/mysql-slave-addition-effect/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MySQL_5.7의 n-gram? 버그앤런!</title>
		<link>http://gywn.net/2017/06/mysql_57-ngram-ft-bug-and-learn/</link>
		<comments>http://gywn.net/2017/06/mysql_57-ngram-ft-bug-and-learn/#comments</comments>
		<pubDate>Thu, 08 Jun 2017 19:52:06 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[fulltext]]></category>
		<category><![CDATA[n-gram]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2486</guid>
		<description><![CDATA[Overview 바로 얼마전 포스팅에서 n-gram에 대한 간단한 소개를 했었는데.. 아무래도 5.7에 처음으로 소개된 기능인만큼 현재 이슈 사항에 대해서 공유를 해볼 필요가 있어보입니다. (이전 포스팅: http://gywn.net/2017/04/mysql_57-ngram-ft-se/) 제가 겪은 상황과 우회할 수 있는 방안.. 그리고 현재 진행 상황에 대한 내용이예요. ^^ 1. Performance Problem 일단 InnoDB의 n-gram 인덱싱은 두 글자로만 나뉘어서 토큰으로 만들어집니다. 그리고 이 토큰들은 도큐멘트 아이디를 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2017/06/mysql_57-ngram-ft-bug-and-learn/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MySQL_5.7의 n-gram 전문 검색을 이상하지 않게 써보아요.</title>
		<link>http://gywn.net/2017/04/mysql_57-ngram-ft-se/</link>
		<comments>http://gywn.net/2017/04/mysql_57-ngram-ft-se/#comments</comments>
		<pubDate>Tue, 18 Apr 2017 23:47:31 +0000</pubDate>
		<dc:creator><![CDATA[gywndi]]></dc:creator>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[ngram]]></category>

		<guid isPermaLink="false">http://gywn.net/?p=2470</guid>
		<description><![CDATA[Overview MySQL5.6부터는 InnoDB에서도 전문검색이 가능하기는 하였습니다만.. 아쉽게도 여전히 공백 기준으로 단어들이 파싱이 되는 &#8220;MeCab Full-Text Parser Plugin&#8221; 방식으로 동작합니다. 즉, 한국말처럼 공백만으로 단어를 파싱할 수 없는 언어의 경우에는 크게 매력적이지는 않습니다. InnoDB에서 전문검색 인덱싱이 가능하다는 것은 Transaction이 전제로 이루어지는 것이라고 볼 수 있기에.. 리플리케이션 및 시점 백업/복구 측면에서는 혁신으로 볼 수 있습니다. 반드시 Limit로 끊어서 [&#8230;]]]></description>
		<wfw:commentRss>http://gywn.net/2017/04/mysql_57-ngram-ft-se/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.040 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2019-05-12 14:02:37 -->
