<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>The Last Mind</title>
	<atom:link href="http://blog.lastmind.io/feed" rel="self" type="application/rss+xml" />
	<link>http://blog.lastmind.io</link>
	<description>Captain&#039;s Log</description>
	<lastBuildDate>Wed, 18 Nov 2015 09:29:30 +0000</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2</generator>
<site xmlns="com-wordpress:feed-additions:1">100464407</site>	<item>
		<title>잉크젯 프린터 수리하기 vs. 새로 사기</title>
		<link>http://blog.lastmind.io/archives/882</link>
				<comments>http://blog.lastmind.io/archives/882#respond</comments>
				<pubDate>Thu, 15 Nov 2018 17:33:14 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Stray Thoughts]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=882</guid>
				<description><![CDATA[약 2년 전에 아이들 사진을 집에서 좋은 품질로 인쇄하려고 잉크젯 프린터를 샀다. 그 전에는 사진을 인쇄하는 용도로는 소형 포토 프린터를 가지고 있었고, 텍스트를 -주로 논문들 &#8211; 인쇄하는 용도로는 레이저프린터를 가지고 있어서 수년 동안 잘 사용하고 있었는데 마침 토너가 다 떨어진 참이었다. 내가 산 모델은 Canon의 TS8030이라는 모델로 고화질 사진 인쇄, 스캐너, 복사가 가능한 가정용 복합기 [&#8230;]]]></description>
								<content:encoded><![CDATA[
<p>약 2년 전에 아이들 사진을 집에서 좋은 품질로 인쇄하려고 잉크젯 프린터를 샀다. 그 전에는 사진을 인쇄하는 용도로는 소형 포토 프린터를 가지고 있었고, 텍스트를 -주로 논문들 &#8211; 인쇄하는 용도로는 레이저프린터를 가지고 있어서 수년 동안 잘 사용하고 있었는데 마침 토너가 다 떨어진 참이었다.</p>



<p>내가 산 모델은 Canon의 TS8030이라는 모델로 고화질 사진 인쇄, 스캐너, 복사가 가능한 가정용 복합기 개념의 제품이었다. 사진들의 인쇄 품질도 그럭저럭 마음에 들었다. 신분증 복사 같은 것들은 가족들을 위한 서류 작업 때문에 꽤나 자주 해야하는 일이고, 일이 바쁘게 진행되는 회사에서 시간을 내서 하기에 어렵다보니, 이를 집에서 할 수 있어서 매우 편리하게 활용할 수 있었다. 반면에 문서들의 인쇄 품질은 레이저 프린터에 비하면 읽기 싫을 정도로 마음에 들지 않았다. 종이 품질 때문에 그런지 모르겠지만 잉크가 살짝 퍼지면서 폰트가 조금 뭉개지는데 이게 레이저프린터의 깔끔한 느낌과는 매우 대조적이었다.</p>



<p>그럭저럭 한 1년 남짓 썼을까 갑자기 인쇄를 하려고 하면 내부에서 딱딱 소리가 나면서 아무것도 프린트되지 않는 현상이 나타났다. 몇번이고 헤드 청소도 하고 내부도 살펴보았지만 원인을 파악하기는 힘들었고, 워낙 정신없이 살아가다보니 수리 맡길 엄두조차 나지 않았다.</p>



<p>아내는 사진을 인쇄해서 집안 액자에 넣어 둔다든지 앨범을 만드는 것도 좋아하기에 내게 몇번이고 수리해달라고 부탁을 했었다. 오늘에야 드디어 생각이 미쳐서 수리를 알아봤더니, 고객이 딱히 포장해두지 않아도 택배를 통해서 포장-회수-수리-반납-대금납입을 해주는 캐논 재팬의 서비스가 있었다. 요금은 3240엔. 어딘가에 신경을 쓰는 것이 내게는 매우 부족한 자원이기에 돈을 들여서라도 신경을 덜 써도 되도록 해주는 것까지는 좋았다.</p>



<p>그런데 문제는 수리 비용. 보증기간 내에서는 수리 비용이 무료지만, 보증기간이 지나면 수리비용은 일률 14,040엔. 문제는 이 프린터를 구입한 가격이 19,000엔 가량이었다는 것이다. 게다가 새로 구입하는 비용은 TS8130이 14,000엔, TS8230이 28,000엔 정도다. 게다가 TS8130과 TS8230은 디자인이 다를 뿐 기능적으로 큰 차이도 없다. 잉크는 TS8030은 BCI-370/BCI-371 잉크를 사용하지만, TS8130/TS8230은 BCI-380/BCI-381을 사용한다. 과연 얼마나 차이가 날까.</p>



<figure class="wp-block-image"><img data-attachment-id="883" data-permalink="http://blog.lastmind.io/archives/882/reparing_canon_printer_20181116" data-orig-file="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?fit=1925%2C1059" data-orig-size="1925,1059" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="reparing_canon_printer_20181116" data-image-description="" data-medium-file="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?fit=300%2C165" data-large-file="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?fit=648%2C356" src="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?w=648" alt="" class="wp-image-883" srcset="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?w=1925 1925w, https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?resize=300%2C165 300w, https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?resize=768%2C422 768w, https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?resize=1024%2C563 1024w, https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/11/reparing_canon_printer_20181116.png?w=1296 1296w" sizes="(max-width: 648px) 100vw, 648px" data-recalc-dims="1" /></figure>



<p>결국은 TS8130을 구입하기로 했다. 논문 등 텍스트 인쇄의 품질은 레이저 프린터가 월등하기에 조금 고민이 되기는 했지만, 아내를 만족시키는 것이 아마 더 중요하겠지. </p>



<p>한편으로는 개별 수리 건들을 처리해야하는 인적 비용이 제품의 생산단가보다 더 비싸고, 매년 신규 모델을 내놓고 신규 모델에는 높은 가격을 책정한다거나, 잉크 모델을 바꿔버려서 이익을 보는 신기한 프린터 비즈니스의 세계를 조금 엿볼 수 있었다.</p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/882/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">882</post-id>	</item>
		<item>
		<title>좋아하는 일만 하며 사는 법</title>
		<link>http://blog.lastmind.io/archives/880</link>
				<comments>http://blog.lastmind.io/archives/880#respond</comments>
				<pubDate>Wed, 17 Oct 2018 01:17:21 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Book]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=880</guid>
				<description><![CDATA[소싯적에는 일터에서 역량이 올라가고 인정을 더 많이 받게 되면 내가 좋아하는 일을 더 많이 할 수 있을거라고 믿었던 적이 있다. 그런데 현실은 더 많은 책임을 지게 되면서 더욱 많은 사람들이 내게 요구를 하기 시작하고 그걸 하는 것만으로 내 인생은 흘러가버리고 있었다. 그렇게 느끼고 있을 즈음에 서점에서 골라든 책이 바로 이 책 &#8220;좋아하는 일만 하며 사는 [&#8230;]]]></description>
								<content:encoded><![CDATA[
<p>소싯적에는 일터에서 역량이 올라가고 인정을 더 많이 받게 되면 내가 좋아하는 일을 더 많이 할 수 있을거라고 믿었던 적이 있다. 그런데 현실은 더 많은 책임을 지게 되면서 더욱 많은 사람들이 내게 요구를 하기 시작하고 그걸 하는 것만으로 내 인생은 흘러가버리고 있었다. 그렇게 느끼고 있을 즈음에 서점에서 골라든 책이 바로 이 책 &#8220;<a href="http://www.yes24.com/24/goods/33148722">좋아하는 일만 하며 사는 법</a>&#8220;이다.</p>



<p>이 책은 과학적인 연구결과를 바탕으로 독자를 설득하는 책이라거나 눈부신 성과와 업적을 쌓은 경영자가 쓴 책은 아니다. 저자인 고코로야 진노스케라는 분이 자신의 인생에서 느끼고 실천한 것들을 바탕으로 독자들에게 자신의 인생을 바라보는 &#8216;다른&#8217; 관점을 제시하는 책이라고 할 수 있다.</p>



<p>나도 이 책을 읽고서야 비로소 나는 내가 좋아하는 일을 하는 것이 아니라, 다만 열심히 노력하고 있다는 것을 완전히 깨달을 수 있었다. 이 책을 읽기 시작한 것은 약 1년 전이지만, 물론 지금의 나도 그러고 있고, 내가 아는 많은 주변의 사람들도 자신이 좋아하는 일이 아니더라도 인내하고 고군분투하며 일을 하며 살아가고 있다.</p>



<p>이 책에서 이야기 하고자 하는 내용을 추려보면 그리 많지는 않고 책을 통틀어 여러가지 관점에서 독자들을 설득하기 위해서 비슷한 내용을 반복하고 있다. 미래의 나를 위해서 간략히 요약을 해보았다.</p>



<ul><li><strong>노력이 항상 보상 받는 것은 아니다</strong>. 노력하지 않아도 보상받을 때도 있다.</li><li><strong>노력하지 않아도 자신에게 가치가 있다</strong>는 것을 믿어야 한다. 노력하지 않는 &#8216;나&#8217;는 가치가 없다고 생각하는 이유는 어렸을 때부터 부모님 혹은 선생님, 주변 사람들이 계속 노력을 강요했기 때문이다.</li><li><strong>쉬운 길이 있다면 이것을이용하자</strong>. 누구나 올라가는 에스컬레이터를 탈 수 있지만 노력하는 사람들은 타지 않는다.</li><li><strong>혼자 애쓰지 말자</strong>. 남의 힘을 빌릴 줄도 알아야 한다. &#8216;자신의 힘&#8217;만을 믿고 &#8216;남의 힘&#8217;을 믿지 못하면 그 힘은 결코 이용할 수 없다.</li><li><strong>내가 좋아하는 일을 하면 그로 인해 모두가 즐거워진다</strong>. 내가 좋아하는 일을 하면서 마음껏 즐기는 일이 누군가에게 용기를 주고, 인생의 새로운 가능성을 열어주기 때문이다.</li><li>좋아하는 일을 하기로 작정했다면 <strong>다른 사람에게 폐를 끼치는 용기와 미움받을 각오</strong>가 필요하다.</li><li>대다수의 일하는 사람들은 일이 너무 힘들어도 책임감 때문에 회사를 그만두지 않는다. 그런 책임을 느낄 필요는 없다. 가족의 행복을 위해서 아버지는 열심히 일하고 있지만, 아버지가 노력해서 회사에 계속 다니는 게 가족을 위한 행복이라고는 할 수 없다. 가족은 행복해도 아버지가 불행하다면 아무런 의미가 없다.</li><li>지금까지와 다른 삶을 살려고 마음먹었다면, <strong>애쓰며 사는 삶에서 벗어나기 위해 애쓰는 것</strong>도 좋은 방법이다.</li><li>&#8216;나도 다른 사람에게 폐를 끼칠 수 있고, 동시에 다른 사람들도 나한테 피해를 줄 수 있다.&#8217; 이렇게 생각하면 오히려 피해는 줄어들고, 사람들은 좀 더 자유롭게 살아갈 수 있다. 문제가 생겼을 때는 진심으로 &#8216;미안하다&#8217;고 사과하면 의외로 문제는 쉽게 해결된다.</li><li>평범한 인생을 살아갈지 대단한 삶을 살아갈지는 <strong>선택의 문제</strong>다. 안전을 추구하면 &#8216;즐거움&#8217;을 잊게 된다.</li></ul>



<p>이 책을 읽고 깨달음이 있어서 다른 사람들에게도 몇번 들려주었던 책 속의 이야기도 인용해본다.</p>



<blockquote class="wp-block-quote"><p>그때까지 저는 혼자서 열심히 우물을 파고 있던 셈입니다. 우물을 파야만 물을 얻을 수 있다고 믿었으니까요. 그래서 다음 날도, 그다음 날도 열심히 곡괭이질하며 우물을 팠던 거죠. 가까이에 강이 흐르고 있었지만 내가 마실 물은 직접 우물을 파서 얻어야 한다는 착각에 빠져 강물은 거들떠보지도 않았습니다. 편하게 강물을 끌어와 마시는 사람을 보면 뻔뻔하다는 생각이 들어 화가 났습니다. 그런데 냉정하게 생각해보니 그렇지 않더군요.</p><p>&#8216;저기 강이 있으니까 그 옆에 깊게 골을 파면, 힘들여 우물을 파지 않아도 저 녀석처럼 편하게 물을 마실 수 있잖아.&#8217;</p><p>그 사실을 깨닫고 나서 깊게 골을 파기로 결심했습니다. 예전의 나였다면 골을 파는 것도 전부 스스로 해야만 한다고 고집을 부렸을 겁니다. 하지만 그때는 &#8216;조금 기다려보자&#8217;고 마음 먹었습니다. 주변에는 사람이 많이 있었고 어쩌면 그들의 도움을 받을 수 있을지도 모르니까요.</p><p>저는 시험 삼아 &#8220;죄송합니다만, 깊게 골을 파려고 하는데 도와주실 수 있으세요?&#8221;라고 외쳐보았습니다. 그러자 &#8220;아아, 그러죠&#8221;라며 사람들이 다가오더군요. 제 주변에는 땅을 파고 싶어 하는 사람과 파는 것을 잘하는 사람, 좋아하는 사람이 많았던 겁니다. 그들의 도움으로 순식간에 골을 팔 수 있었습니다. 제가 기뻐하자 그들도 기쁘다고 말해주었습니다.</p></blockquote>



<p>이 책을 읽은 이후에 삶을 바라보는 새로운 관점이 추가되기는 했지만, 정말로 이를 실행에 옮기는 것은 쉬운 일이 아니었다. 정신을 차려보면 항상 &#8216;노력하는 나&#8217;로 돌아가있었고 남들에게 폐를 끼치는 것, 미움 받는 것이 두려워서 남들이 요구하는 일만을 하고 있었다. 애쓰며 사는 삶에서 벗어나기 위해 매일 매일 적극적으로 노력하지 않으면 쉽지 않은 일인 것 같다.</p>



<p>나는 엔지니어로서의 일을 사랑하고 이 일을 통해서 &#8216;대단한 것&#8217;을 하고 싶다. &#8216;대단한 것&#8217;을 할 수 있었던 많은 사람들은 &#8216;좋아하는 일&#8217;을 했다는 것도 알고 있다. 그리고 그것을 할 수 있는 능력이 내게 있다는 자신감도 있다. 단 한가지 문제는 내가 여태껏 &#8216;좋아하는 일&#8217;을 &#8216;하지 않는&#8217; 선택을 해왔을 뿐일 것이다. 다시 한번 &#8216;좋아하는 일을 하는 선택&#8217;을 해보자.</p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/880/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">880</post-id>	</item>
		<item>
		<title>NVMe M.2 SSD</title>
		<link>http://blog.lastmind.io/archives/871</link>
				<comments>http://blog.lastmind.io/archives/871#respond</comments>
				<pubDate>Tue, 16 Oct 2018 02:00:29 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Hardware]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=871</guid>
				<description><![CDATA[일을 하면서 서버들에서는 NVMe SSD 제품들을 많이 사용하면서 정작 한번도 눈으로 직접 볼 기회는 없었는데, 우연히 Consumer NVMe SSD제품들도 많이 나와있는 것을 보고 Samsung SSD 970 EVO NVMe M.2 제품을 구입해보았다. 집에 있는 PC에서 대단한 작업을 할리는 없기에 더 높은 성능의 SSD가 대단히 유용하게 쓰일 일은 많지 않겠지만, 얼마간의 돈을 들여서 얻는 경험으로는 좋은 경험이라고 생각되어서 [&#8230;]]]></description>
								<content:encoded><![CDATA[
<p>일을 하면서 서버들에서는 NVMe SSD 제품들을 많이 사용하면서 정작 한번도 눈으로 직접 볼 기회는 없었는데, 우연히 Consumer NVMe SSD제품들도 많이 나와있는 것을 보고 <a href="https://www.samsung.com/semiconductor/minisite/ssd/product/consumer/970evo/">Samsung SSD 970 EVO NVMe M.2</a> 제품을 구입해보았다. 집에 있는 PC에서 대단한 작업을 할리는 없기에 더 높은 성능의 SSD가 대단히 유용하게 쓰일 일은 많지 않겠지만, 얼마간의 돈을 들여서 얻는 경험으로는 좋은 경험이라고 생각되어서 사보았다.</p>



<p>다행히 2년 전에 구입했던 Z170 칩셋 보드가 M.2 슬롯을 하나 보유하고 있어서 SSD 자체 이외에 추가적인 비용이 들지는 않았다. 요즘 서버 시장은 어떤지 모르겠지만 Consumer NVMe SSD제품들은 대부분 M.2 인터페이스를 채용하는 것 같다.</p>



<p>Amazon 구입 기록을 찾아보니, OS용 디스크에 사용하고 있는 SSD인 Intel SSD 520 Series 240GB는 21,195엔에 구입했었고 (2012년 8월), 게임용 디스크에 사용하고 있는 Samsung SSD840EVO 250GB는 16,647엔에 구입했었다. (2013년 11월) 이번에 구입한 Samsung의 NVMe SSD 제품은 아마존 US에서 $277.99 (약 31,104엔)에 구입했다. 성능의 차이를 차치하더라도 용량이 4배가 되었는데 가격은 2배 밖에 안되니 5년동안 가격이 싸지긴 싸진 모양이다.</p>



<p>엄밀하게 디스크 성능을 테스트하려면 셋업 자체에 세밀하게 신경을 써야하겠지만, 그럴 여유는 없기에 CrystalDiskMark라는 벤치마크 도구의 기본 설정으로 테스트를 해보았다.</p>



<figure class="wp-block-image"><img data-attachment-id="872" data-permalink="http://blog.lastmind.io/archives/871/nvme_20181016" data-orig-file="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?fit=802%2C728" data-orig-size="802,728" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="nvme_20181016" data-image-description="" data-medium-file="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?fit=300%2C272" data-large-file="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?fit=648%2C588" src="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?w=648" alt="" class="wp-image-872" srcset="https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?w=802 802w, https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?resize=300%2C272 300w, https://i0.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/nvme_20181016.png?resize=768%2C697 768w" sizes="(max-width: 648px) 100vw, 648px" data-recalc-dims="1" /><figcaption>Samsung SSD 970 Evo NVMe M.2</figcaption></figure>



<figure class="wp-block-image"><img data-attachment-id="873" data-permalink="http://blog.lastmind.io/archives/871/ssd_20181016" data-orig-file="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?fit=802%2C728" data-orig-size="802,728" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="ssd_20181016" data-image-description="" data-medium-file="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?fit=300%2C272" data-large-file="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?fit=648%2C588" src="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?w=648" alt="" class="wp-image-873" srcset="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?w=802 802w, https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?resize=300%2C272 300w, https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/ssd_20181016.png?resize=768%2C697 768w" sizes="(max-width: 648px) 100vw, 648px" data-recalc-dims="1" /><figcaption>Samsung SSD840EVO 250GB SATA</figcaption></figure>



<figure class="wp-block-image"><img data-attachment-id="874" data-permalink="http://blog.lastmind.io/archives/871/hdd_20181016" data-orig-file="https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?fit=802%2C728" data-orig-size="802,728" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="hdd_20181016" data-image-description="" data-medium-file="https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?fit=300%2C272" data-large-file="https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?fit=648%2C588" src="https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?w=648" alt="" class="wp-image-874" srcset="https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?w=802 802w, https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?resize=300%2C272 300w, https://i2.wp.com/blog.lastmind.io/wp-content/uploads/2018/10/hdd_20181016.png?resize=768%2C697 768w" sizes="(max-width: 648px) 100vw, 648px" data-recalc-dims="1" /><figcaption>Seagate 2TB BarraCuda ST2000DM001 SATA (7200rpm)</figcaption></figure>



<p>이제는 익숙해져야 할텐데 옛날 사람이라 그런지 16만 IOPS는 놀랍기는 하다.</p>



<blockquote style="text-align:left" class="wp-block-quote"><p></p><cite>Sequential Read (Q= 32,T= 1) : 3346.307 MB/s<br/>Sequential Write (Q= 32,T= 1) : 2525.115 MB/s<br/>Random Read 4KiB (Q= 8,T= 8) : 665.636 MB/s [ 162508.8 IOPS]<br/>Random Write 4KiB (Q= 8,T= 8) : 491.191 MB/s [ 119919.7 IOPS]<br/>Random Read 4KiB (Q= 32,T= 1) : 257.582 MB/s [ 62886.2 IOPS]<br/>Random Write 4KiB (Q= 32,T= 1) : 184.670 MB/s [ 45085.4 IOPS]<br/>Random Read 4KiB (Q= 1,T= 1) : 41.117 MB/s [ 10038.3 IOPS]<br/>Random Write 4KiB (Q= 1,T= 1) : 101.777 MB/s [ 24847.9 IOPS]</cite></blockquote>



<p>Consumer 제품 중에 <a href="https://www.samsung.com/us/computing/memory-storage/solid-state-drives/ssd-860-evo-m-2-sata-250gb-mz-n6e250bw/">M.2 슬롯용이지만 SATA3를 지원하는 제품들</a>도 있다. 이런 제품들은 SATA3의 제약 (6Gb/s) 때문인지 500MB/s 정도의 sequential access 성능을 가지고 있다.</p>



<p>내가 가진 메인보드를 포함해서 요즘 나오는 메인보드 칩셋들은 SATA Express를 지원한다고 하는데, 대충 찾아봐서 정확하지는 않지만, SATA Express 커넥터를 지원하는 SSD 제품을 찾아보기가 힘든 것 같다. 내가 가진 메인보드에서는 M.2 슬롯을 사용하게 되면 SATA Express는 사용할 수 없게 되는 식으로 되어있어서 인터페이스는 다르지만 PCIe lane을 공유하고 있는 것 같다. SATA Express용으로 배정된 SATA3 커넥터 2개를 SATA3으로도 사용하지 못한다고 하는데 이것은 정확히 확인해봐야할 것 같다.</p>



<h4>References</h4>



<ul><li>https://en.wikipedia.org/wiki/NVM_Express</li><li>https://en.wikipedia.org/wiki/M.2</li><li>https://en.wikipedia.org/wiki/SATA_Express</li></ul>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/871/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">871</post-id>	</item>
		<item>
		<title>Daniel Ek on Focus</title>
		<link>http://blog.lastmind.io/archives/868</link>
				<comments>http://blog.lastmind.io/archives/868#respond</comments>
				<pubDate>Wed, 12 Sep 2018 10:09:14 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Life]]></category>
		<category><![CDATA[Stray Thoughts]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/archives/868</guid>
				<description><![CDATA[최근에 읽은 Spotify의 cofounder이자 CEO인 Daniel Ek의 인터뷰. https://www.fastcompany.com/90213545/exclusive-spotify-ceo-daniel-ek-on-apple-facebook-netflix-and-the-future-of-music DK: I’m really organized. I don’t do social calls. For so many people, you’re beholden to this social thing, if I don’t show up, someone is going to be sad. I’m just pretty ruthless in prioritizing. What I tell my friends is, I like to be [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>최근에 읽은 Spotify의 cofounder이자 CEO인 Daniel Ek의 인터뷰.</p>
<p><a href="https://www.fastcompany.com/90213545/exclusive-spotify-ceo-daniel-ek-on-apple-facebook-netflix-and-the-future-of-music">https://www.fastcompany.com/90213545/exclusive-spotify-ceo-daniel-ek-on-apple-facebook-netflix-and-the-future-of-music</a></p>
<blockquote><p>DK: I’m really organized. I don’t do social calls. For so many people, you’re beholden to this social thing, if I don’t show up, someone is going to be sad. I’m just pretty ruthless in prioritizing. What I tell my friends is, I like to be invited, but I probably won’t come. The transparency helps. This is how I’m wired. It’s not a personal thing. It doesn’t mean that I don’t enjoy your company. It’s just means that I’m focusing on something.</p></blockquote>
<blockquote><p>&#8212;</p></blockquote>
<blockquote><p>DK: 저는 정말 잘 정리된 사람입니다. 저는 사교적인 모임을 나가지 않습니다. 매우 많은 사람들이 이러한 사교적인 것들에 잡혀 살고 있습니다. 만약 제가 그러한 모임에 모습을 보이지 않는다면, 누군가는 슬퍼할 거에요. 나는 다만 무자비하게 우선순위화를 하고 있을 뿐인데 말이에요. 친구들에게는, 난 초대 받고 싶긴 하지만 아마도 가지는 못할 것이라고 얘기하곤 합니다. 그렇게 투명하게 얘기하는 것이 도움이 됩니다. 이게 제가 사람들과 어울리는 방식이에요. 그건 개인적인 것이 아니고, 당신과의 만남을 즐기지 않는다는 이야기도 아닙니다. 단지 나는 지금 다른 뭔가에 집중을 하고 있다는 것을 뜻합니다.</p></blockquote>
<p>사적인 모임 뿐만 아니라 우리는 우리가 필요없다고 믿는 미팅이나 심지어 메신저 챗에서조차 다른 사람들을 실망시키지 않으려는 이유로 나오지 못하는 경우들이 많다. 반드시 집중의 문제가 아니라고 하더라도 Clean Coder에서 로버트 마틴은 자신의 시간을 효율적으로 사용하는 것은 프로페셔널의 당연한 책임이라고 말하고 있다. 쓸데없는 양심의 가책을 느끼지 말자.</p>
<blockquote><p>I also write out what my daily, weekly, monthly goals are, and every evening I check how I’m doing. And then I just over allocate my time [to match the goals]. People think that creativity is this free spirit that has no boundaries. No, actually the most creative people in the world schedule their creativity. That’s the irony. So I try to do the same. I just don’t have as many meetings as you think. Instead I have a lot of me time where I’m just thinking; I’m at a white board drawing by myself. Occasionally I might have someone with me. If I have a call or another meeting, I’ll just block it out if I’m in the zone. That’s unorthodox because it means that you’re breaking social contracts, you’re disappointing someone because you didn’t show up. But if you’re really, really focused, those are the times when the breakthroughs come.</p></blockquote>
<blockquote><p>&#8212;</p></blockquote>
<blockquote><p>그리고 저는 매일, 매주, 매달의 목표가 무엇인지를 기록해두고, 매일 저녁에 내가 얼마나 그러한 목표를 달성하고 있는지를 점검합니다. 그리고는 (그 목표들을 달성하기 위해서) 시간을 여유롭게 할당합니다. 보통 사람들은 창의성이란 제약이 없는 자유로운 정신이라고들 생각합니다. 그게 아니에요. 사실은 세상에서 가장 창의적인 사람들은 자신들의 창의성을 계획합니다. 그건 역설적이기는 합니다. 그래서 저도 똑같이 하려고 합니다. 저는 여러분들이 생각하는 것만큼 많은 회의를 가지고 있지 않아요. 대신 단지 생각하는 것에 많은 시간을 할당합니다. 혼자 화이트보드 그림 앞에 서서요. 가끔 누군가와 함께 하기도 해요. 만일 내가 전화나 다른 회의가 있는데, 내가 매우 집중하고 있는 상태 (in the zone)라면 그것들은 그냥 차단해버릴 겁니다. 그건 당신이 사회적인 계약을 어기고, 당신이 나타나지 않은 것으로 인해서 누군가를 실망시키는 것이기 때문에, 이례적인 것입니다. 하지만, 당신이 정말로, 정말로 집중하고 있다면, 그때가 바로 중대한 돌파구가 만들어질 때입니다.</p></blockquote>
<p>요즘 들어서 매일 매일 발생하는 사건들과 커뮤니케이션에 묻혀서 정작 앞으로 나가지 못하고 있단 느낌을 많이 받았는데, 이 말 들로부터 굉장히 용기와 도움을 얻었다.</p>
<p>어제 1시간 정도 들여서 Yearly/Monthly/Weekly/Daily goal을 세워보았다. 매일 저녁 이를 평가하고 다시 목표를 업데이트하는 습관을 들이려고 한다. 그리고 이로부터 식별된 내 삶의 중요한 목표들에 내 시간의 대부분을 사용하고 싶다.</p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/868/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">868</post-id>	</item>
		<item>
		<title>가계동향조사 논란에 관한 글을 읽고</title>
		<link>http://blog.lastmind.io/archives/864</link>
				<comments>http://blog.lastmind.io/archives/864#respond</comments>
				<pubDate>Thu, 06 Sep 2018 13:19:31 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Stray Thoughts]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/archives/864</guid>
				<description><![CDATA[&#8220;가계동향조사와 통계청장 교체를 둘러싼 논란점 정리&#8221; http://sovidence.tistory.com/968 외부의 시각이긴 하지만 나름대로 객관적으로 최근의 가계동향조사에 대한 관점을 얻을 수 있는 글. 인구조사라는 전혀 다른 도메인에 관한 얘기라서 흥미로왔다. 몇가지는 교훈으로 남겨볼만한 것 같아서 몇몇 부분을 인용해본다. 하나는, raw 데이터의 고도화된 수집, raw 데이터를 이용한 기술적인 통계, 어떤 의사 결정을 위한 분석은 모두 다른 분야이고 이를 성공적으로 [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>&#8220;가계동향조사와 통계청장 교체를 둘러싼 논란점 정리&#8221;</p>
<p><a href="http://sovidence.tistory.com/968">http://sovidence.tistory.com/968</a></p>
<p>외부의 시각이긴 하지만 나름대로 객관적으로 최근의 가계동향조사에 대한 관점을 얻을 수 있는 글. 인구조사라는 전혀 다른 도메인에 관한 얘기라서 흥미로왔다.</p>
<p>몇가지는 교훈으로 남겨볼만한 것 같아서 몇몇 부분을 인용해본다.</p>
<p>하나는, raw 데이터의 고도화된 수집, raw 데이터를 이용한 기술적인 통계, 어떤 의사 결정을 위한 분석은 모두 다른 분야이고 이를 성공적으로 달성하기 위해 필요로 하는 전문적인 역량도 꽤 다르지만 이 도메인 바깥에 있는 사람들 눈에는 하나로 보인다는 것이다. 이것이 잘못되었다는 것이 아니라 효율을 위해 사회나 조직 분화 과정에서 얻어지는 부산물이지만 때로 불필요한 오해나 잘못된 결정을 낳기도 한다.</p>
<blockquote><p>일반적으로 착각하는 것 중의 하나가 (a) 통계 원자료 생산과 (b) 생산된 원자료 분석 능력이 같은 건줄 아는 것. 양자는 매우 다름. 대학 교수나 연구원들은 전자의 능력이 별로 없고, 통계청 직원들은 후자에 특화되어 있지 않음. 통계청의 원자료 분석은 대부분 기술 통계임.</p>
</blockquote>
<p>데이터를 이용한 의사결정에 대한 강조는 굳이 여기서 할 필요도 없겠지만, 이것이 잘 이루어지려면 분석하기 편리한 환경이 중요하다. 순진하게 데이터를 다 퍼주어야 한다는 것이 아니라 데이터를 잘 보호하면서도 편리하게 이용할 수 있도록 하는 전문성이 필요하다. 한편, 데이터란 단어 자체가 너무 넓은 의미를 담고 있다보니 그 목적(의 일부)에 해당하는 증거라는 단어가 얘기하고 이해하기 좋겠다는 생각이 든다.</p>
<blockquote><p>한국 통계청은 청와대에서 자료를 달라고 해도 정권이 통계 조작할려고 한다고 노조가 성명서를 발표하는데, 미국은 전세계 모든 인민들에게 자신들의 자료를 공개하고 있음. [&#8230;] 정권이 통계를 조작하는 것은 결코 해서는 안되는 일이지만, 정권이 통계 원자료로 어떤 일이 벌어지는지 분석하는 것은 매우 권장해야 할 일임. &#8220;증거기반정책&#8221; 생산은 통계 분석없이 불가능함. 후자를 했다고 전자를 의심하고 공격하는 건 말이 안됨.</p>
</blockquote>
<p>추가논의 1: <a href="http://sovidence.tistory.com/969">http://sovidence.tistory.com/969</a></p>
<p>추가논의 2: <a href="http://sovidence.tistory.com/970">http://sovidence.tistory.com/970</a></p>
<p>추가논의 3: <a href="http://sovidence.tistory.com/971">http://sovidence.tistory.com/971</a></p>
<p>추가논의 4: <a href="http://sovidence.tistory.com/972">http://sovidence.tistory.com/972</a></p>
<p>추가논의 5: <a href="http://sovidence.tistory.com/973">http://sovidence.tistory.com/973</a></p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/864/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">864</post-id>	</item>
		<item>
		<title>The Logistician “청렴결백한 논리주의자&#8221;</title>
		<link>http://blog.lastmind.io/archives/859</link>
				<comments>http://blog.lastmind.io/archives/859#respond</comments>
				<pubDate>Tue, 12 Sep 2017 15:39:26 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Stray Thoughts]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=859</guid>
				<description><![CDATA[16Personalities란 사이트에서 테스트를 해보니 ISTJ-A가 나왔다. 사이트 상에 소개된 이론에 따르면, MBTI의 네이밍을 차용해왔지만 모델은 다르다고. 뭐가 다른진 솔직히 잘 모르겠다. 그나저나 블로그를 뒤져보니 2002년에는 ISFTP, 2005년에는 INTP로 MBTI 결과가 나왔더랬다.]]></description>
								<content:encoded><![CDATA[<p><a href="https://www.16personalities.com/ko">16Personalities란 사이트</a>에서 테스트를 해보니 <a href="https://www.16personalities.com/ko/%EC%84%B1%EA%B2%A9%EC%9C%A0%ED%98%95-istj">ISTJ-A</a>가 나왔다. 사이트 상에 <a href="https://www.16personalities.com/articles/our-theory">소개된 이론</a>에 따르면, MBTI의 네이밍을 차용해왔지만 모델은 다르다고. 뭐가 다른진 솔직히 잘 모르겠다. 그나저나 블로그를 뒤져보니 <a href="http://blog.lastmind.io/archives/332">2002년에는 ISFTP, 2005년에는 INTP로 MBTI 결과</a>가 나왔더랬다.</p>
<p><a href="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png"><img data-attachment-id="860" data-permalink="http://blog.lastmind.io/archives/859/16personalities_istj_20170913" data-orig-file="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png?fit=431%2C444" data-orig-size="431,444" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="16personalities_istj_20170913" data-image-description="" data-medium-file="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png?fit=291%2C300" data-large-file="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png?fit=431%2C444" class="alignnone size-full wp-image-860" src="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png?resize=431%2C444" alt="" width="431" height="444" srcset="https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png?w=431 431w, https://i1.wp.com/blog.lastmind.io/wp-content/uploads/2017/09/16personalities_istj_20170913.png?resize=291%2C300 291w" sizes="(max-width: 431px) 100vw, 431px" data-recalc-dims="1" /></a></p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/859/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">859</post-id>	</item>
		<item>
		<title>QCon San Francisco 2015 Day 3</title>
		<link>http://blog.lastmind.io/archives/854</link>
				<comments>http://blog.lastmind.io/archives/854#respond</comments>
				<pubDate>Thu, 19 Nov 2015 12:11:56 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Software Development]]></category>
		<category><![CDATA[qcon]]></category>
		<category><![CDATA[qconsf]]></category>
		<category><![CDATA[qconsf2015]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=854</guid>
				<description><![CDATA[QCon San Francisco 2015 Tracks의 마지막 날. 아직도 Jet lag에 적응이 되지 않았는지 오후가 되면 졸음이 쏟아지는데, 중간 중간 쉬는 시간 (20분)에 호텔에 돌아와서 잠시나마 눈을 붙였더니 그나마 나았다. The Imitation Game: The New Frontline of Security by Shuman Ghosemajumder 오늘의 키노트. Shuman Ghosemajumder은 전직장인 Google에서 click fraud를 방어하는 것을 담당했다고 한다. Botnet이 IP 기반의 [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>QCon San Francisco 2015 Tracks의 마지막 날. 아직도 Jet lag에 적응이 되지 않았는지 오후가 되면 졸음이 쏟아지는데, 중간 중간 쉬는 시간 (20분)에 호텔에 돌아와서 잠시나마 눈을 붙였더니 그나마 나았다.</p>
<h3><a href="https://qconsf.com/sf2015/keynote/imitation-game-new-frontline-security">The Imitation Game: The New Frontline of Security by Shuman Ghosemajumder</a></h3>
<p>오늘의 키노트. Shuman Ghosemajumder은 전직장인 Google에서 click fraud를 방어하는 것을 담당했다고 한다. Botnet이 IP 기반의 방어를 무력화시켰고, 도구화되어서 click fraud, login form, tax fraud, online banking fraud 등에 활용되고 있다는 상황을 소개하면서 이를 방어하기 위해서는 수작업으로는 불가능하고 &#8216;robotic defences&#8217;를 구축해야한다고 얘기했다. 이러한 공격이 쉬운 이유는 웹사이트 자체가 일종의 API이기 때문이라고 설명. 방어를 위한 주요한 방법 중 하나로 웹 사이트 액세스의 수많은 특성 screen resolution, user agent, time zone 등을 추적해서 어떤 aspect에서의 spike 등이 존재하는 가를 식별하는 것을 들었다. 액세스의 특성이 되는 aspect들이 상대적으로 적은 API액세스 등에 대해서는 어떻게 해야하는지 잘 생각이 안나지만, 이러한 시스템이 방어를 위한 기초적인 시스템임에는 동의한다. 방어를 위한 방법들을 prevention, realtime, near-realtime, batch, reactive defence 등으로 분류하고 여러 관점에서 방법을 구축해야한다고&#8230; 하지만 디테일에 대해서는 그다지 다루지는 않았다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/explorations-of-the-three-legged-performance-stool">Explorations of the three legged performance stool by Charlie Hunt</a></h3>
<p>Charlie Hunt는 Oracle의 JVM Engineer로 2001년 정도에 출판되었던 <a href="http://amzn.com/0137142528">Java Performance</a>란 책의 저자라고 한다. 여기서 말하는 3 legs란 throughput, latency, memory footprint를 말하고, 이 중 어느 하나를 개선하려고 하면 나머지 하나 또는 둘을 희생해야한다는 이야기를 Generational GC 상황에 따라 설명을 해주었다. Java GC에 대해 어느 정도 지식을 가지고 있는 엔지니어라면 익숙할만한 이야기.</p>
<p>JDK 9의 feature가 될 Compact strings라는 feature를 개발하기 위한 &#8216;String density&#8217; 프로젝트에 대해 설명을 해주었는데, 결과만 놓고보면 String의 internal representation에서 char[]를 byte[]로 바꾸고 ISO-8859를 위한 encoding을 추가한 것 뿐이지만, 이를 위해 JVM Engineer들이 어떤 개발 비용을 들이는지 자세하게 설명을 해주었다. 여러 애플리케이션들로부터 heap dump들을 수집해서 footprint를 줄이기 위한 방법을 탐색하고, 각 JVM platform별로 memory layout을 모두 분석하고, performance regression이 없도록 하기 위해 microbenchmark를 각 platform별로 모두 확인하는 과정 등, 프로젝트에는 10명의 엔지니어가 1.5년 정도가 걸렸다고 하니, JVM 엔지니어링은 굉장히 엄밀하게 진행되는 것 같다. Compact strings에 UTF-8을 사용하지 않은 이유는 String의 많은 수의 메서드들은 랜덤 액세스를 사용하는데 UTF-8의 특성 상 랜덤 액세스를 위한 비용이 커지기 때문이라고 한다. 또 하나 재미있었던 것은 기존의 String을 바꾸지 않고 왜 새로운 String 클래스를 만들어서 쓰지 않는가에 대해서는, Hotspot은 55개나 되는 String에 대한 JIT compiler최적화가 들어가있기 때문이라고 설명했다.</p>
<p>JVM Engineer의 GC에 관련한 세션이라서 나름대로 G1 GC의 현재 상황 등 최신의 내부 정보를 얻을 수 있을까 해서 들었는데, Abstract와 조금 다른 방향의 이야기가 나와서 안타까웠다.</p>
<p>애초에는 Confluent의 co-founder들 중 유일한 여성인 Neha Narkhede를 한번 만나보고 싶어서 그녀의 Kafka 세션을 들으려고 했는데, Neha Narkhede가 인기인 것인지 Kafka가 인기인 것인지 룸이 꽉차버려서 안타깝게 발길을 돌려야 했다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/stream-processing-uber">Stream Processing in Uber by Danny Yuan</a></h3>
<p>오늘 들은 토크 중에서는 최고의 토크였다. 풀어야 할 비즈니스 문제들을 명확하게 보여주고, 풀어야할 기술적인 문제들을 정의하고, 후보 솔루션들을 선택하지 않은 이유를 제시한 후, 선택한 솔루션들을 설명했다. 그리고, 그 솔루션들로부터 다시 확장되는 문제들과 다시 솔루션을 제시하는 방식도 꽤 탁월했던 것 같다.</p>
<p>우버에서는 승객과 드라이버들을 더욱 잘 매치해주기 위해 수요와 공급을 분석, 예측해야하고, 이로부터 요금도 동적으로 결정해야하는 요구사항이 있다. 또한 서비스의 문제로 인한 비효율적이거나 이상한 패턴들을 찾아내거나 fraud 등을 탐지해야하는 문제도 가지고 있다. 토크의 시작은 지도 상의 수요 공급을 나타내는 히트맵과 여러 metric들의 trend가 그 오른쪽에 함께 보여지는 아름다운 대시보드를 보여주는 것으로 시작했다. 그리고, 쿼리 입력 필드에서 특정 승객이나 특정 드라이버의 상태 변화를 상태를 node로하는 그래프로 보여주는 뷰도 보여주었다.</p>
<p>이러한 비즈니스적인 요구사항을 만족시키기 위해서는 애플리케이션을로부터 수집된 이벤트들이 소실되지 않도록 저장하고 쉽게 확장 가능한 스토리지가 필요하고 이를 위해 Kafka를 이용한다고 설명했다.</p>
<p>또한 승객과 드라이버가 가진 수많은 필드 &#8211; 차원들에 따른 쿼리가 가능하고, 여러가지 형태의 aggregation을 지원하는 스토리지도 필요한데, 우선 Redis나 HBase 등과 같은 KV store 계열은 모든 키의 조합을 미리 계산해야하기 때문에 사용이 불가능하고 (&#8216;불가능&#8217;이라는 단어에 대해서 항상 조심스러울 수 밖에 없다는 이야기도 함께 함.) RDB의 경우 여러 인덱스를 관리하는 것이 고통스럽고 스캐닝이 충분히 빠르지 않기 때문이라는 이유로 솔루션이 될 수 없다고 했다. 결론은 이쯤에서 예상했지만 Elastic Search였고, 장점으로 제시한 것은 매우 효율적인 역인덱스들과 자동적으로 여러 노드에 쿼리가 분산되고 다시 통합되는 분산쿼리 기능이었다.</p>
<p>여기에 더해서 이벤트의 데이터들은 여러가지 normalization이나 precalculation, 여러 스트림의 join, sessionization, state 관리 등이 필요하기 때문에 이를 처리하기 위한 layer로 Apache Samza를 선택했다고 한다. Samza는 YARN 위에서 동작하고, Kafka와의 integration이 매우 뛰어나고, built-in checkpointing이나 state management를 가지고 있는 것을 장점으로 제시했다.</p>
<p>여기에 더해서 Storage가 down되거나 프로세싱이 오래 걸리는 경우를 위한 배치 프레임워크로는 Spark를 선택했다고 한다. 결과적으로는 Kafka &#8211; Samza/Spark &#8211; Elastic Search로 구성되는 전형적인 Lambda architecture를 구성했다고 한다.</p>
<p>지역들을 헥사곤으로 쪼개서 수요 공급을 보여주기 위해서는 주위 hexagon의 데이터들과의 smoothing이 필요하고 이를 위해서 쿼리 결과의 Post processing도 필요하다고 한다. 이러한 처리는 순서한 function과 combinator로 이루어지는데, 이를 paralleize하고 pipelining하는 layer를 가지고 있는 듯하다.</p>
<p>Elastic search는 cardinality가 높은 쿼리를 하면 오랫동안 실행하다가 그대로 죽어버리는 문제를 가지고 있기 때문에, Pipelining, Validation, Throttling 등을 수행하는 query layer도 따로 구현하고 있다고 한다. 지금의 아키텍쳐는 상당히 타이트한 스케줄 내에 만들어냈어야 했기 때문에 외부의 도구들을 가져다 썼지만, 지금으로서는 Elastic Search 대신 자신들의 요구사항에 맞는 것을 만드는 것도 가능할 것 같다고 얘기했다.</p>
<p>One more thing으로 어떤 쿼리를 지정해두면 이에 해당하는 이벤트들이 특정 채널 (이를테면 Hipchat)로 전달되는 CEP를 가지고 있는 것도 보여주었다.</p>
<p>토크 중에 &#8216;사람은 기다릴 수 있지만 기계는 기다릴 수 없다&#8217;라는 말을 했는데, 사람과 기계에게 모두 analytic data를 제공하는 아키텍쳐를 가지고 있고, 단순히 외부의 프로덕트들을 가져다 조립한 것이 아니라 요구사항에 필요한 부분들을 채워넣고, 훌륭한 비주얼라이제이션과 응답시간을 가진 도구를 개발한 것도 타이트한 일정에 쫓기는 서비스 회사로서는 정말 굉장하다고 느꼈다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/day-life-jvm-engineer-twitter">Life of a Twitter JVM engineer by Tony Printezis</a></h3>
<p>Twitter에서는 수천개의 머신에서 JVM을 사용하고 있다고 한다. (생각보다 규모가 크지 않다는 인상을 받았다.)<br />
주요한 stack은 Finagle, Netty, TwitterJDK, Mesos, CentOS이고, 서버 사이드의 언어는 Scala가 메이저에 해당하고 Java, Ruby, Python 등이라고 한다.</p>
<p>Twitter의 VM Team은 TwitterJDK를 개발하는 것을 담당하고 있는데, OracleJDK와는 달리 OpenJDK에 패치를 더한 형태라고 한다. 소스 리파지터리의 구성도 OpenJDK의 리파지터리로부터 hg-git을 해오고 TwitterJDK를 릴리즈할 때마다 최신의 OpenJDK 릴리즈로 업데이트한다고 한다. 릴리즈는 1달에 1번 정도씩 이루어지고, 2주간의 Canary 기간을 걸친다고 한다. Deployment는 Packer를 이용하고 Mesos 상의 서비스에 적용된다고 한다. (VM 이미지 안에 JVM이 함께 배포되고, Mesos 클러스터를 구성하게 된다는 이야기?)</p>
<p>주요한 개선은 Heap profiling, Binary logging framework (for GC logs), Intermediate generation for G1 등이라고 한다. GC log를 시스템화 함으로써 여러가지 GC에 관련된 문제들도 찾아내고 해결할 수 있었는데, Neopotism (Old gen의 dead object로부터 참조된 young gen의 object가 collection되지 않는 현상을 가리키는 듯), TLAB이 full이 되었을 때 object allocation이 느려지는 문제 (새로운 TLAB의 pre-allocation으로 해결?), DirectBuffer cache가 계속 자라나서 leak처럼 되는 문제 (최대 크기를 제한해서 해결) 등을 해결했다고 한다. 이것들에 대한 자세한 내용은 완벽하게 이해하지 못해서 비디오가 나오면 다시 한번 봐야할 것 같다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/netty-apple-large-scale-deploymentconnectivity">Netty @Apple: Large Scale Deployment/ Connectivity by Norman Maurer</a></h3>
<p>희승님과 함께 Netty의 주요 개발자 중 하나라고 할 수 있고 Netty in Action의 저자이기도 한 Norman Maurer의 토크.</p>
<p>Apple에서는 무려 40만개나 되는 Netty 인스턴스들이 동작하고 있고, 초당 수천만개의 리퀘스트를 처리하고 있다고 한다. 직접적으로 언급하지는 않았지만 많은 주요한 Apple 서비스들에 사용되고 있는 것 같고&#8230; 이러한 배경으로 인해 Apple 엔지니어들이 Netty에 contribution할만한 요구사항들과 가치들도 생겨나는 것 같다.</p>
<p>우선 JDK NIO의 비효율적인 인터페이스 (Selector.selectedKeyes()가 항상 새로운 collection을 만들어서 리턴하는 것), NIO 구현 내에 concurrency에 대한 충분한 고려가 없이 synchronized 키워드가 너무 많이 사용된 점, 주요한 플랫폼이라고 할 수 있는 리눅스에 대한 최적화가 불가능한 것, copy가 많이 일어나는 점을 들면서, 이러한 문제들을 해결하기 위해 도입한 <a href="http://netty.io/wiki/native-transports.html">Native transports</a>에 대해 설명했다. Linux의 epoll을 이용하고 있고, 여러가지 유용한 TCP 옵션들 (TCP_CORK, TCP_NOTSENT_LOWAT, TCP_FASTOPEN, &#8230;)을 지원하며, sync를 줄이는 등의 개선들을 활용할 수 있다고 한다. 이 정도가 되면 여타의 JVM기반 네트워크 프레임워크의 수준을 넘어서는 것이 아닐까 생각이 들었다.</p>
<p>DirectBuffer의 allocation 비용이 Heap buffer에 비해 높은 것은 잘 알려져있는데, 이러한 이유 중 하나로 allocation/deallocation 내부 코드에 heap usage를 체크하기 위한 코드 등에 syncronization들이 들어가 있기 때문이라고 한다. PooledByteBufAllocator를 이용해서 DirectBuffer를 pooling하는데 jmalloc과 유사하게 thread-local cache를 이용하고 arena별로 sync를 하는 approach를 취해서 성능을 개선하고 있다고 한다.</p>
<p>이 외에도 JDK SSL, Optimization, Thread model, Backpressure, Connection pooling 등의 내용들을 언급했는데, 자세한 내용은 나중에 슬라이드와 관련된 이슈를 읽어보아야 할 것 같다.</p>
<p>Netty는 나름대로 성숙한 프레임워크였지만 지금도 굉장히 많은 개선들이 지속적으로 이루어지고 있는 점은 정말 대단한 것 같다. 한편, 이 토크 자체는 Netty 4.0이나 그 주변의 개선들을 언급하고 있는 것 같고, Apple에 직접적으로 관련된 내용은 처음의 숫자들 밖에 없었는데, 토크의 제목이 왜 Netty @ Apple인지는 조금 의문이 들었다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/stylus-facebook-new-stream-processing-platform">Stylus, Facebook&#8217;s new stream processing platform by Jerry Chen</a></h3>
<p>Facebook의 stream processing이라고 해서 나름대로 기대하고 들었는데, 토크 자체는 현재 시점에서는 보편적인 프로세싱 모델을 다루는 데에 시간을 많이 할애한 것 같아서 실망스러웠다.</p>
<p>잘 알려진 Scribe가 Kafka와 같은 Event Stream이라면, Stylus는 Imperative processing을 담당하고 있고, Puma라는 프로덕트는 SQL-like 인터페이스를 제공하고 있다고 한다. Stream processor로서 일반적인 keyed tuple을 처리하는 모델이라고 할 수 있는데, 특이한 점은 key에 대한 State가 외부의 DB로부터 관리된다는 점이다. 이 state는 local DB로 관리되기도 하는데 성능을 위해서 remote DB로도 제공되는 것 같다.</p>
<p>Fault tolerance를 위해서 state의 저장은 checkpointing을 사용하고 있으며 guarantee에 따라서 checkpointing과 state의 저장 순서가 바뀌는 방식이다. (at-most-once라면 checkpointing을 먼저, at-least-once라면 checkpointing을 나중에)</p>
<p>Backfill이라고 해서 오래된 데이터를 다시 읽어오는 방법도 제공하고 있는 것 같고, 중복된 코딩을 막기 위해 Stylus processor의 logic을 그대로 Batch로 실행하는 방법도 제공하는 것 같다. Mobile 클라이언트 이벤트 로그들을 처리해서 in-memory query storage인 Scuba에 집어넣는 역할, 페이지의 trend를 계산하기 위해서 scoring이나 ranking을 하는 사례를 설명했다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/flying-faster-heron">Flying faster with Heron by Karthik Ramasamy</a></h3>
<p>Twitter의 stream processor로서 Storm을 대체한 Heron에 대해서 설명하는 토크였는데, Storm의 여러가지 문제점들을 설명하고 이를 Heron에서 어떻게 해결했는지 설명했다.</p>
<p>Storm의 아키텍쳐는 마스터에 해당하는 Nimbus, ZooKeeper 클러스터, Supervisor와 Worker들로 이루어진다. Nimbus는 Worker가 실행할 작업들을 scheduling하고 monitoring하는 역할을 하는데, 그 자체가 SPOF일 뿐만 아니라, resource의 reservation이나 isolation 개념이 없기 때문에 작업의 성격에 따라서 예측불가능한 성능 이슈가 자주 발생한다고 한다. ZooKeeper 클러스터는 Kafka spout의 offset/parition의 체크포인팅과 Storm Worker들의 heatbeat으로 인해 contention이 발생하기 쉽다고 한다. 실제로 작업을 수행하는 Worker들은 하나의 JVM 내에 여러 Worker들이 실행되기 때문에 디버깅이 어렵고 튜닝하기도 어렵다고 한다. 또한 데이터들이 거치게 되는 input queue와 output queue가 공유되기 때문에 여기서 발생하는 contention 문제도 언급하고 있다. 한편 Storm 자체는 Clojure로 쓰여져있지만 작업을 개발하는 개발자들은 Java 등을 사용하고, Storm의 커뮤니케이션 layer라고 할 수 있는 ZeroMQ는 C++를 사용하고 있기 때문에 이로 인한 유지보수의 어려움도 문제라고 이야기 하고 있다. 이 외에도 Backpressure 개념의 부재나 Efficiency에 관련된 문제들도 언급하고 있다.</p>
<p>Heron의 아키텍쳐를 설명하며 Heron은 Storm의 이러한 문제들을 해결하고 있다고 하고 성능도 몇 배 이상 좋아졌다고 얘기하고 있는데, 자세한 내용은 Heron paper를 읽어보는 편이 좋을 듯 하다.</p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/854/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">854</post-id>	</item>
		<item>
		<title>QCon San Francisco 2015 Day 2</title>
		<link>http://blog.lastmind.io/archives/851</link>
				<comments>http://blog.lastmind.io/archives/851#respond</comments>
				<pubDate>Wed, 18 Nov 2015 09:29:12 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Software Development]]></category>
		<category><![CDATA[qcon]]></category>
		<category><![CDATA[qconsf]]></category>
		<category><![CDATA[qconsf2015]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=851</guid>
				<description><![CDATA[2번째 날 어제보다는 약간 일찍 일어나서 호텔 조식도 먹고 출근했다. 오늘은 샌프란시스코에서 일하는 강문식 군과 점심을 먹느라 세션 2개 정도를 건너뛰었다. 나중에 비디오로 보기로&#8230; Building Highly-resilient Systems at Pinterest by Yongsheng Wu Yongsheng Wu는 Storage &#38; caching team의 lead. 수만개의 AWS instance를 사용하고 있고, 100개 정도의 서비스를 가지고 있다고 한다. 서비스 수십개 관리하기도 어려운데 수백개라니&#8230; [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>2번째 날 어제보다는 약간 일찍 일어나서 호텔 조식도 먹고 출근했다. 오늘은 샌프란시스코에서 일하는 강문식 군과 점심을 먹느라 세션 2개 정도를 건너뛰었다. 나중에 비디오로 보기로&#8230;</p>
<h3><a href="https://qconsf.com/sf2015/presentation/building-highly-resilient-systems-pinterest">Building Highly-resilient Systems at Pinterest by Yongsheng Wu</a></h3>
<p>Yongsheng Wu는 Storage &amp; caching team의 lead. 수만개의 AWS instance를 사용하고 있고, 100개 정도의 서비스를 가지고 있다고 한다. 서비스 수십개 관리하기도 어려운데 수백개라니&#8230; 마이크로서비스가 업계 대세인 것인가 하는 생각이 들었다. 서비스가 나뉘어져있다보니 사용하는 언어도 Java, Scala, Go, C++로 다양한 것 같다.</p>
<p>토픽에 해당하는 Highly Resilient한 시스템을 위해서 5가지를 내세웠는데 다음과 같다.</p>
<ul>
<li>Dynamic service discovery</li>
<li>Realtime configuration</li>
<li>Caching</li>
<li>Persistent storage</li>
<li>Async processing</li>
</ul>
<p>Dynamic service discovery에 대해서는 상식적으로 생각할 수 있는 수준인 ZooKeeper의 ZNode들이 서버들을 나타내도록 하고 클라이언트는 상위 노드의 변화를 subscribe하는 형태를 기본으로 하고 있다. 이러한 시스템은 누구나 쉽게 상상할 수 있는 것이지만, 문제는 ZooKeeper에 장애가 발생했을 때 서비스의 가용성이 0가 될 수가 있다는 점인데, Pinterest에서는 Zum이라는 local daemon을 도입해서 ZooKeeper의 로드를 줄이고, 로컬 카피를 애플리케이션에게 제공하는 것으로 이 문제를 해결하고 있다. 단순하면서도 실용적인 해결책이라고 생각한다.</p>
<p>Realtime configuration에 대해서도 역시 Zum을 이용해 로컬 카피를 제공하는 비슷한 접근을 활용하고 있는데, 설정이 ZooKeeper에 있는 것이 아니라 Amazon S3에 두고 ZooKeeper는 단지 versioning과 변경 통지를 위한 용도로만 사용하고 있다.</p>
<p>Caching은 memcached의 consistent hash ring을 관리하기 위해 Facebook의 <a href="https://github.com/facebook/mcrouter">Mcrouter</a>를 사용하고 있다고 한다. 재미있는 것은 일시적인 실패로 인해 cache inconsistency가 발생하는 문제를 해소하기 위해 Mcrouter의 로그를 Kafka에 보내고 이를 다시 플레이하는 시스템을 가지고 있는 점이었다.</p>
<p>MySQL Shard의 설정 관리도 위에서 설명한 Zum을 이용해 관리되는 것 같다.</p>
<p>Async processing을 위해서는 PinLater라는 서버를 가지고 있는데, 비동기적인 작업을 queue로서 관리하고 일정 회수 만큼 재시도해주는 서버다. Dashboard로 각 작업의 현황을 쉽게 볼 수 있는 점은 편리해 보였다.</p>
<p>발표에서 소개된 것들을 발표 이후에 곧 오픈소스화할 예정이라고 하니, 조금 더 살펴볼 여지는 있을 것 같다. 문제 자체도 LINE이 가지고 있는 문제들과 비슷하고, 해결책도 (엄밀한 해결책이라기보다는) 굉장히 실용적인 스타일이라 공감이 되는 면이 있었다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/beyond-ad-hoc-automation-structured-platforms">Beyond ad-hoc automation: to structured platforms by Bridget Kromhout</a></h3>
<p>수많은 meme들을 이용해서 토크를 이어나갔는데, 나름대로 흥미로운 이야기들을 많이 한 것 같지만, 이건 나중에 슬라이드와 비디오가 나온 후에야 정리를 할 수 있을 듯 하다. 그 중에서도 생각나는 것들을 들자면, 회사나 조직의 환경에 한정되는 ad hoc 도구들을 만드는 것에 대해서 비판적인 논조를 유지한 것 같고, 항상 200 OK를 뱉는 healthcheck를 예를 들며 도구보다는 원리에 집중하라는 이야기, 자동화는 플랫폼이고, 이 플랫폼에서 무엇을 하려는 것인지 constraint를 정의하라는 이야기 등이 생각이 난다. 단순히 몇가지 도구를 추가해서 자동화하는 것이 아니라 전체적인 관점에서의 플랫폼을 만들어나가야 한다는 조언으로 되새기게 된 것 같다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/brief-history-chain-replication">A Brief History of Chain Replication by Christopher Meiklejohn</a></h3>
<p>Chain Replication은 그동안 공부해보고 싶은 토픽 중의 하나였는데, 대략적으로 어떠한 문제들을 다루는지 조금은 알게 된 것 같다. Chain Replication에 관련된 연구들을 하나하나 요약해서 설명해주었는데, 사실 굉장히 엄밀하게 생각해보지 않으면 안되는 것들이라 짧은 시간 내에 이해하기는 쉽지 않았다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/datastructures-ipfs">Datastructures in and on IPFS by Juan Batiz-Benet</a></h3>
<p><a href="https://github.com/ipfs/ipfs">IPFS</a>는 구글과 같이 하나의 서비스에 종속된 서비스를 가질 것이 아니라 인터넷이라는 분산된 네트워크를 활용해서 정보들을 안전하게 저장해보자는 동기로부터 출발해, Merkle tree의 아이디어를 차용한 내용 기반의 addressing을 기초로 여러 인터넷 프로토콜, 인터넷 포맷들을 조합해서 파일시스템을 만들어보자는 아이디어 그리고 구현이다. 하나의 연구분야일거라고 생각하고 있었는데, 한 사람의 아이디어로부터 출발한다는 것이 놀라웠다.</p>
<p>내일은 프로그램의 마지막인 3일차. 내일도 흥미로운 발표들이 많으니 기대가 된다. 더불어 1일차 비디오들이 차근차근 업로드되고 있어서 이것들도 소화해보기 시작해야할 것 같다.</p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/851/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">851</post-id>	</item>
		<item>
		<title>QCon San Francisco 2015 Day 1</title>
		<link>http://blog.lastmind.io/archives/842</link>
				<comments>http://blog.lastmind.io/archives/842#comments</comments>
				<pubDate>Tue, 17 Nov 2015 11:19:53 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Software Development]]></category>
		<category><![CDATA[qcon]]></category>
		<category><![CDATA[qconsf]]></category>
		<category><![CDATA[qconsf2015]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=842</guid>
				<description><![CDATA[어쩌다보니 지금까지 미국이나 유럽 등지를 한번도 여행한 적이 없어서, 올해 초 다짐한 것이 미국 여행. 페이퍼를 읽는 것이나 토크를 보는 것도 좋아하기 때문에 무겁지 않은 QCon에도 가보자라고 해서 올해 봄 무렵에 QCon SF 2015를 예약해두었다. 여러가지 위기는 있었지만, 가족여행을 겸해서 QCon SF에 참석하는 계획을 잡았고, 지난 토요일에 San Francisco에 도착했다. 이로서 목표 달성! 오늘부터 3일에 [&#8230;]]]></description>
								<content:encoded><![CDATA[<p>어쩌다보니 지금까지 미국이나 유럽 등지를 한번도 여행한 적이 없어서, 올해 초 다짐한 것이 미국 여행. 페이퍼를 읽는 것이나 토크를 보는 것도 좋아하기 때문에 무겁지 않은 QCon에도 가보자라고 해서 올해 봄 무렵에 QCon SF 2015를 예약해두었다. 여러가지 위기는 있었지만, 가족여행을 겸해서 QCon SF에 참석하는 계획을 잡았고, 지난 토요일에 San Francisco에 도착했다. 이로서 목표 달성!</p>
<p>오늘부터 3일에 걸쳐 QCon SF 2015의 본 프로그램이 진행되고 이후 이틀동안은 Workshop이 진행된다. 오늘만 하더라도 듣고 싶었던 토크는 꽤 많았지만, 그래도 고심 끝에 골라서 들어간 토크들이니 내 입장에서 듣고 느낀 것들을 적어본다.</p>
<h3><a href="https://qconsf.com/sf2015/keynote/avoiding-big-crash">Avoiding the Big Crash by Bill Buxton</a> (<a href="https://qconsf.com/system/files/keynotes-slides/qcon_buxton_nov_2015.pdf">Slides</a>)</h3>
<p>Xerox PARC 출신으로 35년간 컴퓨터 사이언티스트와 디자이너로서 종사하고 현재는 MSR의 Principal Researcher. 스마트 왓치와 같은 초소형 디스플레이를 가진 제품과 벽면을 가득 채울 정도로 커다란 디스플레이를 가진 제품은 완전히 다른 설계를 가져야 함을 설명하면서, 또한 기존의 경험들을 활용하기 위해 common denominator도 찾아야 한다면서 그 예로 <a href="https://www.youtube.com/watch?v=dK-kX_p_IVM">Bimanual In-Place Commands</a>를 든다.</p>
<p>모든 새로운 제품은 물론 그 자체로도 가치와 좋은 경험을 제공해야하지만, 전체적인 복잡도를 줄이고 다른 제품들의 가치를 더 높일 수 있어야 한다는 룰을 제시하고, 여러가지 inspiration이 될만한 설명들을 제공해주었다. 단지 돈을 벌기 위한 수단, 다른 제품들과의 경쟁 우위에 있어야만 하는 것으로서만 제품을 생각하는 것이 아니라 우리 주변에 있는 다른 사람들에게 더 좋은 경험을 제공해주기 위한 고민을 우리 스스로가 해야한다는 메시지로 받아들였다. 글로만 이러한 내용을 설명하기는 어렵지만 내가 했던 일들과 하고 있는 일, 그리고 해야하는 일들을 모두 돌아보게 만드는 굉장히 인상 깊은 토크였다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/scaling-uber">Scaling Uber by Matt Ranney</a></h3>
<p>5년동안 PHP+MySQL로부터 시작해서 빠르게 개발하기 위해서 technical debt도 많이 쌓였다는 이야기를 하면서 저런 성장하는 회사의 모습은 한국의 비슷한 상황의 회사와도 크게 다르지 않구나라고 느꼈다. 한편으로는 저런 이야기라면 LINE의 이야기도 충분히 재미있는 토크감이 될 수 있다고 생각했다. (물론 영어가 문제&#8230;)</p>
<p>Microservices 아키텍쳐로 2개의 서비스로 시작했던 서비스의 개수가 무려 700개 이상으로 늘어났다는 것이 굉장히 놀라웠다. PHP로 시작했지만 지금은 node.js, Python, Go, Java로 언어들이 늘어났다고 한다. 이러한 환경의 어려움을 극복하기 위한 도구로서, 서비스 간의 분산 및 failover를 위해서 <a href="https://github.com/uber/ringpop-node">ringpop-node</a>, 통신 프로토콜로서 <a href="https://github.com/uber/tchannel">TChannel</a> (+ <a href="https://github.com/uber/tcurl">tcurl</a>, <a href="https://github.com/uber/tcap">tcap</a>, <a href="https://github.com/uber/thriftrw-node">thriftrw</a>), 서비스 디스커버리로서 <a href="https://github.com/uber/hyperbahn">Hyperbahn</a> 등을 소개했는데, 다른 오픈소스를 가져다 쓰기 보다는 자체적으로 개발하고 이를 오픈소스화 했다는 점이 조금 신기했다.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/how-netflix-directs-13rd-internet-traffic">How Netflix Directs 1/3rd of Internet Traffic by Haley Tucker &amp; Mohit Vora</a></h3>
<p>No comment.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/beyond-the-hype-4-years-of-go-in-production">Beyond the Hype: 4 years of Go in Production by Travis Reeder</a></h3>
<p>Go가 그리 유명하지 않던 시절 Ruby의 CPU 소비를 줄이기 위해서 Go로 이동했다고 한다. Python, Javascript, Java, Ruby등과의 성능 비교 그래프를 보여주었다. 언어를 바꾸고 나서 30대 서버 (&#8230;)에서 2대 서버로 바꿀 수 있었다고 한다. 언어의 변경에 따르는 여러가지 문제들에 대해서 논리적인 대답을 가지고 있는 것은 아니라서 좀 아쉬웠다. 토크 자체는 20분 남짓 만에 일찍 끝나고 수많은 질문들이 이어졌는데, 대답하기 쉬운 질문들은 물론 아니었지만 대부분 문제된 적이 없거나 잘 모르겠다는 답변이 돌아와서 &#8216;4년&#8217;의 경험에서 기대한 것보다는 많이 모자랐다. Go언어의 초보라고 할 수 있는 내가 알고 있는 수준에서 크게 다르지 않다라는 느낌.</p>
<p>다만 질문들은 나름대로 Go언어 생태계에서 정답을 내놓을 필요가 있는 것들이라서 나열해본다.</p>
<ul>
<li>Dependency management: vendoring, submodule (Golang은 패키지에 version이라는 개념이 없다.)</li>
<li>Compile time: 의존성이 있는 C 라이브러리들이 문제가 되었지 Go가 문제된 적이 없었음. (충분히 큰 소스의 프로젝트라면?)</li>
<li>DB들을 위한 라이브러리들의 제공: 아직 불충분.</li>
<li>Testing: go test로 충분. rspec과 같은 것이 있는가란 질문에 대해 잘 모르겠지만 Go언어의 특성상 그런 것이 존재할 수 있는지는 의문이라고 코멘트.</li>
<li>IDE: sublime, intelliJ, &#8230; (Atom은 왜 언급안해&#8230;)</li>
<li>GC 문제: 지금까지 경험한 적이 없다고. (없는 것 같다고 대답했다가 concurrent GC 언급한 다른 질문자에게 따끔하게 지적받음.)</li>
<li>Debugging: 처음에 로그를 사용한다고 대답. godebug 등 오픈소스 도구들도 나타나고 있기 때문에 점차 개선되고 있다고 함. gdb등도 가능. (디버깅에 대한 IDE 지원은 절실하긴 한 듯.)</li>
<li>Monitoring: JMX 등의 퍼실러티가 있느냐란 질문이었는데, 그런 건 없고 자기네들은 statsd을 사용.</li>
<li>Java 아키텍쳐로부터의 마이그레이션 방법: 마이크로서비스별로.</li>
<li>GUI: 서버 위주이고 별로 없는 것 같다고 대답. (아닌데&#8230;)</li>
<li>Refactoring: 별로 본질적인 것은 아닌 것 같다고 대답.</li>
<li>RoR scaffolding: 잘 모르겠다고 대답.</li>
<li>Onboard engineer를 위해 특별히 하고 있는 것: 특별히 없음. Go가 variable의 type notation 등의 일부를 제외하면 다른 언어와 크게 다르지 않다고 대답.</li>
<li>언어 개선 표준 프로세스가 있는지: 오픈소스이니 디스커션이 가능하지 않겠냐는 대답.</li>
<li>Profiling: pprof. production에 사용하기에는 어렵도 metric을 남기는 쪽이 좋을 듯 하다고 대답.</li>
<li>interface가 있는지: 있음.</li>
<li>Shared libary로 빌드할 수 있는지: 잘 모르겠다고 대답.</li>
<li>Maven 같은 의존성 관리 도구가 있는지: 모르겠다고 대답.</li>
<li>사용하고 있는 design pattern이 있는지: 잘 모르겠다고 대답.</li>
</ul>
<h3><a href="https://qconsf.com/sf2015/presentation/personalization-pinterest-homefeed">Personalization in the Pinterest Homefeed by Dmitry Chechik</a></h3>
<p>Jet lag 때문인지 너무 졸려서 무슨 이야기를 했는지 잘 모르겠음. <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3><a href="https://qconsf.com/sf2015/presentation/rust-unlocking-systems-programming">Rust: unlocking systems programming by Aaron Turon</a></h3>
<p>어느 한 쪽을 희생한 언어들과 달리 Rust는 Control과 Safe라는 특성을 둘다 달성하는 곳을 목표로 하는 언어이고, ownership의 이전 메커니즘에 따른 Memory safety에 대해서 설명함.</p>
<h3><a href="https://qconsf.com/sf2015/presentation/newcircle/spark-coding-joy-ride">Spark: A Coding Joyride by Doug Bateman</a></h3>
<p>Sponsored track인데도 Spark의 명성을 인정하듯 룸이 가득찼다.</p>
<p>Spark의 개요에 대해 설명. Spark, GraphX, MLlib의 코딩을 보여준다고 한 것 같은데, 실제로는 RDD와 필터링 정도만 코드를 보여주었다. 결과적으로는 내가 Spark에 대해서 아는 부분 이상을 얻지는 못한 듯. 스피커가 전문 Trainer라서 그런지 설명을 듣기에는 편했고, <a href="https://databricks.com/product/databricks">Databrics</a>라는 Spark hosting 서비스는 Spark를 시험해보기에 굉장히 편리해보였다. (30일 trial 가능.)</p>
<h3><a href="https://qconsf.com/sf2015/keynote/so-we-hear-you-like-papers">So We Hear You Like Papers by Ines Sombra and Caitie McCaffrey</a> <a href="https://speakerdeck.com/randommood/we-hear-you-like-papers-qcon-sf-2015">Slides</a></h3>
<p>Caitie McCaffrey는 Distributed system에 대해, Ines Sombra는 Verification 분야에 대해 몇몇 페이퍼들을 소개했다. 둘다 다른 컨퍼런스 등에서도 활약하는 듯 하고, Ines Sombra는 <a href="http://www.meetup.com/papers-we-love-too/">Papers we love meetup의 SF chapter</a>에서 활동하는 듯하다.</p>
<p>둘다 설명하는 속도가 굉장히 빨라서 정확성을 차치하더라도 정말 대단하다고 생각. Exhibiter reception 직후 키노트라 다들 맥주 한두잔 한 후라서 그런지 조금은 덜 진지한 분위기였던 것 같기도 하고&#8230; Ines Sombra는 아예 맥주 한병을 들고 마시면서 진행했다. 어쨌든 스마트함을 마음껏 뽐내는 분위기 같아서 재미있었다. 중간중간에 관심을 가져볼만한 페이퍼들도 보였던 것 같아서 나중에 슬라이드를 확인해봐야 할 것 같다.</p>
<p>내일과 모레도 재미있는 토크들은 많은 듯 하니, 게으름 피지 않고 여기에 적어보려고 노력해보겠다. <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/842/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">842</post-id>	</item>
		<item>
		<title>Paper: TAO: Facebook&#8217;s Distributed Data Store for the Social Graph (Part 1)</title>
		<link>http://blog.lastmind.io/archives/832</link>
				<comments>http://blog.lastmind.io/archives/832#respond</comments>
				<pubDate>Thu, 12 Nov 2015 01:00:23 +0000</pubDate>
		<dc:creator><![CDATA[josephjang]]></dc:creator>
				<category><![CDATA[Distributed System]]></category>
		<category><![CDATA[Software Development]]></category>
		<category><![CDATA[facebook]]></category>
		<category><![CDATA[graph db]]></category>
		<category><![CDATA[tao]]></category>

		<guid isPermaLink="false">http://blog.lastmind.io/?p=832</guid>
				<description><![CDATA[Bronson, Nathan, et al. &#8220;TAO: Facebook&#8217;s Distributed Data Store for the Social Graph.&#8221; USENIX Annual Technical Conference. 2013. Facebook은 사용자들 사이의 관계, 사용자들의 포스팅, 이에 대한 코멘트 등을 MySQL에 저장하고 memcache에 캐싱하고 있었는데, 이를 개선한 TAO라는 시스템에 관한 페이퍼. geographically 분산된 단일한 인스턴스라는 점이 놀라운 점. 이후에도 설명되겠지만 graph abstraction만으로 Facebook의 주요한 데이터들을 표현한다는 것도 [&#8230;]]]></description>
								<content:encoded><![CDATA[<p><a href="https://www.usenix.org/conference/atc13/technical-sessions/presentation/bronson">Bronson, Nathan, et al. &#8220;TAO: Facebook&#8217;s Distributed Data Store for the Social Graph.&#8221; USENIX Annual Technical Conference. 2013.</a></p>
<p>Facebook은 사용자들 사이의 관계, 사용자들의 포스팅, 이에 대한 코멘트 등을 MySQL에 저장하고 memcache에 캐싱하고 있었는데, 이를 개선한 TAO라는 시스템에 관한 페이퍼. geographically 분산된 단일한 인스턴스라는 점이 놀라운 점. 이후에도 설명되겠지만 graph abstraction만으로 Facebook의 주요한 데이터들을 표현한다는 것도 매우 흥미로운 점.</p>
<blockquote><p>
  Before TAO, Facebook’s web servers directly accessed MySQL to read or write the social graph, aggressively using memcache [21] as a lookaside cache. TAO implements a graph abstraction directly, allowing it to avoid some of the fundamental shortcomings of a lookaside cache architecture. TAO continues to use MySQL for persistent storage, but mediates access to the database and uses its own graph-aware cache.<br />
  TAO is deployed at Facebook as a single geographically distributed instance. It has a minimal API and explicitly favors availability and per-machine efficiency over strong consistency; its novelty is its scale: TAO can sustain a billion reads per second on a changing data set of many petabytes.
</p></blockquote>
<h3>Background</h3>
<p>Facebook의 타임라인과 같은 데이터를 구축할 때 흔히 컨텐트가 생성될 때 타임라인 데이터를 업데이트하는 방식과 타임라인을 읽을 때 타임라인 데이터를 업데이트하는 두가지 방식이 고려되는데, 이 페이퍼에서는 Facebook에서는 모든 항목에 대해 privacy check가 동적으로 이루어져야 하기 때문에 전자의 접근을 불가능하다고 얘기한다. 즉, 실시간으로 aggregation과 filtering이 이루어져야 한다는 것.</p>
<blockquote><p>
  We present each user with content tailored to them, and we filter every item with privacy checks that take into account the current viewer. This extreme customization makes it infeasible to perform most aggregation and filtering when content is created; instead we resolve data dependencies and check privacy each time the content is viewed.
</p></blockquote>
<p>MySQL과 memcache를 이용한 원래의 아키텍쳐 대신 TAO를 만들어야 했던 이유로, PHP API에서의 encapsulation 실패 &#8211; 자세히는 설명되어있지 않지만, graph abstraction이 아니어서 발생하는 데이터 모델상의 여러가지 문제들을 말하는 것이 아닐까 싶다. &#8211; 그리고, PHP가 아닌 언어로부터의 접근 &#8211; 역시 이러한 요구사항은 흔히 아키텍쳐의 변화를 이끄는 동력이 되는 듯 &#8211; 그리고 lookaside 캐시 아키텍쳐의 여러가지 문제들을 들고 있다. 캐시 아키텍쳐의 문제들로는 다음과 같은 문제들을 들고 있다.</p>
<p>우선 edge들의 리스트를 표현하는 데에 있어서 특정 키에 해당하는 모든 edge 리스트를 가져와야 하는 key-value 캐시는 비효율적임을 들고 있다. 캐시에서 리스트를 직접 지원한다면 이러한 문제를 해결할 수 있으나 동시적인 업데이트에 따른 문제들을 언급하고 있다.</p>
<blockquote><p>
  Inefficient edge lists: A key-value cache is not a good semantic fit for lists of edges; queries must always fetch the entire edge list and changes to a single edge require the entire list to be reloaded. Basic list support in a lookaside cache would only address the first problem; something much more complicated is required to coordinate concurrent incremental updates to cached lists.
</p></blockquote>
<p>액세스의 제어를 위한 로직들이 클라이언트에 있으므로 thundering herds와 같은 문제들이 발생하는 것을 언급하고 있다. 이를 캐시에 내장함으로써 더욱 효율적으로 문제를 해결할 수 있다고 얘기하고 있다.</p>
<blockquote><p>
  Distributed control logic: In a lookaside cache architecture the control logic is run on clients that don’t communicate with each other. This increases the number of failure modes, and makes it difficult to avoid thundering herds. Nishtala et al. provide an in-depth discussion of the problems and present leases, a general solution [21]. For objects and associations the fixed API allows us to move the control logic into the cache itself, where the problem can be solved more efficiently.
</p></blockquote>
<p>Facebook은 MySQL의 비동기 master/slave 리플리케이션을 사용하고 있기 때문에 슬레이브를 사용하는 데이터센터의 캐시들에는 consistency 문제가 있다. 이 페이퍼에서는 가능한 한 복제본의 캐시의 consistency를 유지하기 위한 방법들을 제시하고 있다.</p>
<blockquote><p>
  Expensive read-after-write consistency: Facebook uses asynchronous master/slave replication for MySQL, which poses a problem for caches in data centers using a replica. Writes are forwarded to the master, but some time will elapse before they are reflected in the local replica. Nishtala et al.’s remote markers [21] track keys that are known to be stale, forwarding reads for those keys to the master region. By restricting the data model to objects and associations we can update the replica’s cache at write time, then use graph semantics to interpret cache maintenance messages from concurrent updates. This provides (in the absence of multiple failures) read-after-write consistency for all clients that share a cache, without requiring inter-regional communication.
</p></blockquote>
<h3>TAO Data Model and API</h3>
<p>TAO의 Object는 64-bit integer로 식별되며, object type (otype)을 가지고 있다. Association은 source object (id1), association 타입 (atype), destination object (id2)로 식별된다. 임의의 두 object들 사이에서 특정 타입의 association은 최대 1개만 존재할 수 있다는 제약이 존재한다. Object와 association은 모두 key-value attribute들을 가지고 있으며 가능한 key들과 value들의 type, 그리고 default value는 type별 schema에 따라 정해진다. per-type schema라는 이 개념은 대단히 새로운 것은 아니지만 일반적인 모델의 attribute 정의에 대해 고민하던 내게 도움이 되었다.</p>
<blockquote><p>
  TAO objects are typed nodes, and TAO associations are typed directed edges between objects. Objects are identified by a 64-bit integer (id) that is unique across all objects, regardless of object type (otype). Associations are identified by the source object (id1), association type (atype) and destination object (id2). At most one association of a given type can exist between any two objects. Both objects and associations may contain data as key→value pairs. A per-type schema lists the possible keys, the value type, and a default value. Each association has a 32-bit time field, which plays a central<br />
  role in queries1.</p>
<p>  Object: (id) → (otype, (key  value)∗)<br />
  Assoc.: (id1, atype, id2) → (time, (key  value)∗)
</p></blockquote>
<p>TAO의 Object API는 Object에 대한 기본적인 CRUD에 더해서 field들의 subset을 업데이트할 수 있는 API를 지원하고 있다.</p>
<p>Association API도 association의 CRUD를 위한 API를 제공하고 있다. 매우 흥미로운 점은 친구 관계와 같이 양방향을 가지는 association의 경우, 그 association type을 inverse type으로 설정을 해주면 TAO association API에서 알아서 inverse association에 대해서도 operation을 실행해준다는 점이다. Graph DB에서 당연한 기능인지는 잘 모르겠지만, 이를 application layer에서 직접 구현하고자 한다면 boilerplate 코드가 되기 쉬운 부분들이 일반적으로 해소되고 있다고 생각한다. 한편, inverse type의 association을 추가할 때 가장 걱정이 되는 점은 두 association의 write가 atomic하게 반영될 수 있는가 일텐데, 이에 대해서는 페이퍼에서 명시적으로 언급하고 있지는 않은 듯 하다.</p>
<blockquote>
<ul>
<li>assoc add(id1, atype, id2, time, (k→v)*) – Adds or overwrites the association (id1, atype,id2), and its inverse (id1, inv(atype), id2) if defined.</li>
<li>assoc delete(id1, atype, id2) – Deletes the association (id1, atype, id2) and the inverse if it exists.</li>
<li>assoc change type(id1, atype, id2, newtype) – Changes the association (id1, atype, id2) to (id1,<br />
  newtype, id2), if (id1, atype, id2) exists.</li>
</ul>
</blockquote>
<p>Facebook과 같은 서비스에서는 대부분의 데이터는 오래된 것이고 자주 액세스되어야 할 데이터는 최근 생성된 일부의 데이터라는 점을 creation-time locality라는 말로 표현하고 있다. TAO의 Association Query API들은 creation-time locality에 따른 cache 가능성을 높이기 위해 time range 쿼리가 가능한 점을 엿볼 수 있다. 역시 흥미로운 점은 Association Query API로부터 리턴되는 Association List의 association type별 제약이 정해져있다는 점이다. 잘은 모르지만 이러한 점들은 일반적인 Graph DB에서는 가할 수 없는 제약이 아닐까 싶다.</p>
<blockquote>
<ul>
<li>assoc get(id1, atype, id2set, high?, low?) – returns all of the associations (id1, atype, id2) and their time and data, where id2 ∈ id2set and high ≥ time ≥ low (if specified). The optional time<br />
  bounds are to improve cacheability for large association lists (see § 5).</li>
<li>assoc count(id1, atype) – returns the size of the association list for (id1, atype), which is the number of edges of type atype that originate at id1.</li>
<li>assoc range(id1, atype, pos, limit) – returns elements of the (id1, atype) association list with index i ∈ [pos,pos+limit).</li>
<li>assoc time range(id1, atype, high, low, limit) – returns elements from the (id1, atype) association list, starting with the first association where time ≤ high, returning only edges where time ≥ low.</li>
</ul>
</blockquote>
]]></content:encoded>
							<wfw:commentRss>http://blog.lastmind.io/archives/832/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">832</post-id>	</item>
	</channel>
</rss>
