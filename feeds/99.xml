<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>dohoons(도훈) _(≥∇≤)ノミ☆</title>
	<atom:link href="https://dohoons.com/blog/feed/" rel="self" type="application/rss+xml" />
	<link>https://dohoons.com/blog</link>
	<description>Ubiquitous Web</description>
	<lastBuildDate>
	Thu, 07 Feb 2019 12:38:08 +0000	</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>
<site xmlns="com-wordpress:feed-additions:1">121741348</site>	<item>
		<title>React SPA 뒤로가기 API Cache 적용</title>
		<link>https://dohoons.com/blog/1810/</link>
				<comments>https://dohoons.com/blog/1810/#respond</comments>
				<pubDate>Mon, 07 Jan 2019 13:28:51 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[axios]]></category>
		<category><![CDATA[cache]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[뒤로가기]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1810</guid>
				<description><![CDATA[Single Page App(SPA) 방식으로 많이 개발되는 추세인데, 반대로 MPA가 주는 좋은 경험을 세심하게 살려서 개발하는 앱은 찾기 힘든 것 같습니다. SPA가 더 빠른 반응성을 제공하는 것은 좋지만 링크를 새탭으로 열기, 뒤로가기 등 브라우저의 기본기능이 주는 경험을 살리는 것에는 상대적으로 관심이 부족한 것 같아서 안타깝습니다. 특히 뒤로가기를 했을 때 페이지를 다시 불러오는 동작으로 불필요한 로딩이 있고, &#8230; <a href="https://dohoons.com/blog/1810/" class="more-link"><span class="screen-reader-text">React SPA 뒤로가기 API Cache 적용</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1810/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1810</post-id>	</item>
		<item>
		<title>《함수형 자바스크립트》후기</title>
		<link>https://dohoons.com/blog/1797/</link>
				<comments>https://dohoons.com/blog/1797/#respond</comments>
				<pubDate>Mon, 07 Jan 2019 11:32:10 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[함수형자바스크립트]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1797</guid>
				<description><![CDATA[좋은 책 한 권을 마무리한 기념으로 블로그에 기록해둡니다. 이 책을 시작한 지는 오래됐으나 다른 공부랑 병행하느라 띄엄띄엄 보게 되어 늦어지게 됐습니다. 《함수형 자바스크립트》 모던 웹 개발에 충실한 실전 함수형 프로그래밍 안내서&#8211; 알라딘 링크 바로가기: http://aladin.kr/p/rUEvd 이 책에서는 기본적으로 ES6 문법으로 이야기합니다. 하스켈에서의 개념적인 구문과 ES6로 구현방법을 소개하는 형식이 이어집니다. 조금 어려운 말들이 많지만, 함수형으로 사고하여 &#8230; <a href="https://dohoons.com/blog/1797/" class="more-link"><span class="screen-reader-text">《함수형 자바스크립트》후기</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1797/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1797</post-id>	</item>
		<item>
		<title>RealWorld React SPA 개발</title>
		<link>https://dohoons.com/blog/1722/</link>
				<comments>https://dohoons.com/blog/1722/#respond</comments>
				<pubDate>Thu, 13 Dec 2018 12:58:26 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[RealWorld]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1722</guid>
				<description><![CDATA[RealWorld 란? RealWorld는 React, Angular, Node,&#160;Django&#160; 등으로 개발되는 풀스택 블로그 데모 프로젝트입니다. 유행이 빠르게 바뀌는 최신 기술들을 도입해서 빠르게 마스터하기 위한 연습용 앱인데요. Counter나 Todo App과 다르게 적당한 규모와 복잡도를 갖추고 있어서 현실적인 개발에 가까운 프로젝트라 할 수 있습니다.&#160; 프론트엔드는 React, Angular, Vue등의 구현 예제가 인기이며, GraphQL를 이용한 예제도 있습니다. 백엔드는 Node/Express, Laravel, Django 등이 &#8230; <a href="https://dohoons.com/blog/1722/" class="more-link"><span class="screen-reader-text">RealWorld React SPA 개발</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1722/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1722</post-id>	</item>
		<item>
		<title>2018년 블로그 접속통계</title>
		<link>https://dohoons.com/blog/1725/</link>
				<comments>https://dohoons.com/blog/1725/#respond</comments>
				<pubDate>Thu, 13 Dec 2018 11:51:22 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[기록]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1725</guid>
				<description><![CDATA[2018년 블로그 접속자 통계를 체크해봅니다. 우선 접속자 브라우저 및 운영체제 통계입니다. 2011년에 포스팅한 접속 브라우저 통계에서는 IE가 69% 였는데 지금은 크롬과 완전히 바꼈네요. 너무 예전과 비교지만 이제 크롬이 예전의 IE 역할을 하는 것 같습니다. 글도 별로 안올리기 떄문에.. 접속자수는 많지 않습니다. ㅎㅎ; 주로 검색 결과에서 들어오시는 것 같습니다. 그리고 평균 페이지에 1분25초 밖에 머물지 않습니다.. 올해 &#8230; <a href="https://dohoons.com/blog/1725/" class="more-link"><span class="screen-reader-text">2018년 블로그 접속통계</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1725/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1725</post-id>	</item>
		<item>
		<title>flex-wrap 의 한계 극복하기</title>
		<link>https://dohoons.com/blog/1699/</link>
				<comments>https://dohoons.com/blog/1699/#respond</comments>
				<pubDate>Thu, 29 Nov 2018 13:54:13 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[flex-wrap]]></category>
		<category><![CDATA[flexbox]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1699</guid>
				<description><![CDATA[flexbox 를 사용하면서 grid 에 비해 아쉬운 부분 중 하나는 아래처럼 목록을 정렬하기가 힘들다는 점입니다. 고정된 이미지 영역의 좌우 끝을 컨테이너에 맞추고 사이 여백만 유동적으로 적용해야 합니다. justify-content: space-between; 을 쓰기에는 비율에 따라 늘어나는 컨테이너 때문에 한줄에 4개를 유지할 수 없고, width를 25%로 하면 좌우에 박스 끝선을 맞출 수 없습니다. flexbox 기능만을 사용하면서 사이즈 계산으로 &#8230; <a href="https://dohoons.com/blog/1699/" class="more-link"><span class="screen-reader-text">flex-wrap 의 한계 극복하기</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1699/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1699</post-id>	</item>
		<item>
		<title>IE의 css transition 떨림 문제 개선</title>
		<link>https://dohoons.com/blog/1663/</link>
				<comments>https://dohoons.com/blog/1663/#comments</comments>
				<pubDate>Wed, 12 Sep 2018 04:15:25 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[IE]]></category>
		<category><![CDATA[transition]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1663</guid>
				<description><![CDATA[IE에서는 css transition 적용 시 요소가 부들부들 떠는 현상이 있습니다. 움직임이 작은 범위에 긴시간으로 적용할 때 특히 심한 것 같습니다. IE는 부분 픽셀 계산에 문제가 있는 것 같습니다. 이 문제를 해결하는 방법으로 transform: rotate(.001deg); 를 추가하는 방법을 소개합니다. 이렇게 살짝 비틀어제끼면 훨씬 부드럽게 변환됩니다. See the Pen IE transition bug test by dohoons (@dohoons) on &#8230; <a href="https://dohoons.com/blog/1663/" class="more-link"><span class="screen-reader-text">IE의 css transition 떨림 문제 개선</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1663/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1663</post-id>	</item>
		<item>
		<title>새로 나온 책 소개 《Node.js 교과서》</title>
		<link>https://dohoons.com/blog/1635/</link>
				<comments>https://dohoons.com/blog/1635/#respond</comments>
				<pubDate>Fri, 27 Jul 2018 11:39:11 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[Node.js]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1635</guid>
				<description><![CDATA[Node.js 입문서가 새로 나왔습니다. 소개하는 책은 제로초 블로그로 유명하신 조현영 님의 첫 집필 서적인데요.  저는 책의 베타 리뷰를 하는 좋은 기회를 얻어서 미리 읽어봤습니다.  책이 660쪽 분량으로 두꺼운 편이지만 읽어본 사람으로서 간략한 소개 내용을 적어봅니다. 《Node.js 교과서》 기본기에 충실한 노드제이에스 10 입문서 &#8211; 알라딘 링크 바로가기 : http://aladin.kr/p/NKMZT 이 책은 Node.js 웹 서버 개발자를 위한 입문서입니다.  &#8230; <a href="https://dohoons.com/blog/1635/" class="more-link"><span class="screen-reader-text">새로 나온 책 소개 《Node.js 교과서》</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1635/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1635</post-id>	</item>
		<item>
		<title>VSCode 유용한 단축키 설정</title>
		<link>https://dohoons.com/blog/1617/</link>
				<comments>https://dohoons.com/blog/1617/#respond</comments>
				<pubDate>Wed, 18 Jul 2018 14:14:17 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[emmet]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<category><![CDATA[VSCode]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1617</guid>
				<description><![CDATA[VSCode의 코드 편집 기능 중에는 기본 단축키 구성이 안 되어 있는 유용한 명령들이 많이 있습니다. 필요할 때 F1 키를 누르고 명령어 이름을 입력해서 사용할 수 있지만 제가 주로 사용하는 몇 가지 유용한 단축 명령을 소개해드립니다. &#8216;파일-기본 설정-바로 가기 키&#8217; 메뉴에서 고급 사용자 지정을 위해 keybindings.json 링크를 눌러서 아래처럼 바인딩 설정을 추가합니다. [crayon-5cd99e3e5a3e1619907609/] 설정이 추가되면 아래와 &#8230; <a href="https://dohoons.com/blog/1617/" class="more-link"><span class="screen-reader-text">VSCode 유용한 단축키 설정</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1617/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1617</post-id>	</item>
		<item>
		<title>SASS safe 함수</title>
		<link>https://dohoons.com/blog/1602/</link>
				<comments>https://dohoons.com/blog/1602/#respond</comments>
				<pubDate>Sun, 08 Jul 2018 12:30:17 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[iphonex]]></category>
		<category><![CDATA[notch]]></category>
		<category><![CDATA[sass]]></category>
		<category><![CDATA[scss]]></category>
		<category><![CDATA[아이폰x]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1602</guid>
				<description><![CDATA[아이폰X 노치영역 대응 최적화에 대해 적용 범위가 점점 늘어가면서 타이핑이 너무 힘들어지는 어려움이 있어서 SASS 함수를 만들었습니다. safe 함수는 영역 방향과 값을 전달해서 env(safe-area-inset-*)이 적용된 코드를 얻을 수 있습니다. 음수값으로 사용도 가능합니다. 나중에 함수가 수정되면 여기에 업데이트 하겠습니다. [crayon-5cd99e3e5a622675566871/] 이렇게 함수를 정의해놓고, 코드에서 아래와 같이 사용합니다. [crayon-5cd99e3e5a629590346046/] &#160;]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1602/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1602</post-id>	</item>
		<item>
		<title>getSafeArea() : 아이폰X safe-area</title>
		<link>https://dohoons.com/blog/1545/</link>
				<comments>https://dohoons.com/blog/1545/#respond</comments>
				<pubDate>Thu, 22 Feb 2018 07:13:57 +0000</pubDate>
		<dc:creator><![CDATA[dohoons]]></dc:creator>
				<category><![CDATA[웹 이야기]]></category>
		<category><![CDATA[iphonex]]></category>
		<category><![CDATA[notch]]></category>
		<category><![CDATA[아이폰x]]></category>

		<guid isPermaLink="false">https://dohoons.com/blog/?p=1545</guid>
				<description><![CDATA[이전에 아이폰X 노치영역에 대응하여 최적화하는 CSS기법을 소개했었습니다. 사실 요즘은 물리적 홈 버튼이 제거 되면서 노치 영역 뿐만 아니라 홈 버튼 영역도 문제되지 않게 처리해줘야 하는데요. 이번엔 자바스크립트로 상하좌우의 안전영역 수치를 알아내는 함수를 만들었습니다. &#8211; Demo : https://dohoons.com/test/getSafeArea/ (아이폰X에서 확인가능) getSafeArea 함수는 뷰포트 설정이 viewport-fit=cover 일 때 { top: 0, right: 44, bottom: 21, left: 44 } 와 같이 &#8230; <a href="https://dohoons.com/blog/1545/" class="more-link"><span class="screen-reader-text">getSafeArea() : 아이폰X safe-area</span> 더보기</a>]]></description>
						<wfw:commentRss>https://dohoons.com/blog/1545/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1545</post-id>	</item>
	</channel>
</rss>
