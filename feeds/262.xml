<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Taehwan Kim on Medium]]></title>
        <description><![CDATA[Stories by Taehwan Kim on Medium]]></description>
        <link>https://medium.com/@maxtortime_88708?source=rss-c4eea4b51ecd------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*9WJj3O9wEmFclx8zSG3cTg.jpeg</url>
            <title>Stories by Taehwan Kim on Medium</title>
            <link>https://medium.com/@maxtortime_88708?source=rss-c4eea4b51ecd------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 09:06:52 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@maxtortime_88708" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[파이썬 JSON 모듈 사용시 주의점]]></title>
            <link>https://medium.com/@maxtortime_88708/%ED%8C%8C%EC%9D%B4%EC%8D%AC-json-%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%A0%90-92b626ebcfe2?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/92b626ebcfe2</guid>
            <category><![CDATA[json]]></category>
            <category><![CDATA[encoding]]></category>
            <category><![CDATA[python]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Wed, 12 Dec 2018 05:50:25 GMT</pubDate>
            <atom:updated>2018-12-12T07:16:30.261Z</atom:updated>
            <content:encoded><![CDATA[<h3>파이썬 JSON 저장시 유니코드 문자열 표시하기</h3><p>JSON으로 한글 같이 유니코드 문자가 포함된 데이터를 파일로 만들게 되면 열었을 때 텍스트 에디터에서 한글로 안 보이고 정말로 유니코드 16진수가 적혀있게 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1G4a6F2OJ3brglAifzOK3g.png" /></figure><pre>with open(&#39;sample.json&#39;, &#39;w&#39;) as f:<br>    json.dump(obj, f)</pre><p>다시 읽어드릴 때는 별 문제가 없지만 한글로 안 나와서 뭔가 찜찜하므로 아래와 같이 옵션을 추가해서 파일을 저장하면 좋다.</p><pre>with open(&#39;sample.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:<br>    json.dump(obj, f, ensure_ascii=False)</pre><p>open 함수 호출시 encoding 옵션은 Windows 같이 인코딩이 cp949인 운영체제가 있을 수 있으므로 반드시 지정해주도록 하자. 그 다음 json.dump 의 문서를 살펴보면 아래처럼</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/790/1*XC0S25zS7_BlLE2_l9xDqQ.png" /></figure><p>ensure_ascii 파라미터가 기본적으로 True인걸 볼 수 있다. 그래서 이 파라미터를 False로 바꿔주게 되면 문자가 그대로 출력될 수 있게 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*6aX6LORy4ASfqqNiP7u24g.png" /></figure><p>아까 유니코드로 나와있던 문자가 서귀포시로 그대로 잘 표시되고 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=92b626ebcfe2" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Windows 10에서 tensorflow-gpu 설치]]></title>
            <link>https://medium.com/@maxtortime_88708/windows-10%EC%97%90%EC%84%9C-tensorflow-gpu-%EC%84%A4%EC%B9%98-5438fea6ed30?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/5438fea6ed30</guid>
            <category><![CDATA[microsoft]]></category>
            <category><![CDATA[windows-10]]></category>
            <category><![CDATA[installation]]></category>
            <category><![CDATA[tensorflow]]></category>
            <category><![CDATA[python3]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Sat, 20 Oct 2018 06:16:06 GMT</pubDate>
            <atom:updated>2018-10-20T06:16:06.638Z</atom:updated>
            <content:encoded><![CDATA[<p>꼼꼼하게 하자.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*isjhKPP3m1teRpp7" /></figure><p>Windows에서 GPU가 지원되는 tensorflow를 설치하는 것은 어렵지 않지만 꼼꼼하게 체크하지 않으면 코드를 실행할 때 반드시 오류를 만나게 될 것이다.</p><p><a href="https://www.tensorflow.org/install/">TensorFlow</a></p><p>먼저, TensorFlow 공식 설치 가이드를 보면 Visual Studio C++ 컴파일러를 설치해야 한다고 적혀있다. 왜냐하면 텐서플로우는 인터페이스만 Python이지 실상 C++ 코드가 반이기 때문이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/291/1*2tB-lE15dpUQ4-dmADGUOQ.png" /><figcaption><a href="https://github.com/tensorflow/tensorflow">https://github.com/tensorflow/tensorflow</a></figcaption></figure><p>그렇다면 설치 가이드의 <a href="https://visualstudio.microsoft.com/vs/older-downloads/">https://visualstudio.microsoft.com/vs/older-downloads/</a> 링크를 따라가보자. 사용하고 있는 언어에 따라 다르겠지만 아래와 같은 화면이 보일 것이다. 2015 탭의 +를 클릭하고 다운로드를 클릭한다.</p><p><a href="https://visualstudio.microsoft.com/vs/older-downloads/">Download Older Visual Studio Software | Visual Studio</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GXYdQTIpU2xeLpbpSsMGgg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*bmRjCgTwxwOjcAL0YTkgSw.png" /><figcaption>???</figcaption></figure><p>다운로드를 클릭하면 뭔가 다운로드가 될 것 같았지만 항목을 찾을 수 없다고 그런다. 무슨 이유인지는 모르겠지만 하필 2015만 다운로드가 안 되는 것 같다. (MS 직원분께서 혹시 이 글을 보고 계시면 어서 본사에 전달해서 복구를 ..)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/489/1*TzbV_Lvnrl9W3Sed3mNieQ.png" /><figcaption>2015만 없네..?</figcaption></figure><p>물론 상위버전을 깔아도 잘 동작하므로 기왕 설치하는 김에 Visual C++ 2017 을 까는 것이 더 낫다. <a href="https://support.microsoft.com/ko-kr/help/2977003/the-latest-supported-visual-c-downloads">여기서</a> 다운로드 할 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bmYaZsLZXYvIvcn0G4vZBg.png" /><figcaption>64, 32 비트를 잘 확인하고 설치하자.</figcaption></figure><p>다음은 파이썬이다.</p><p><a href="https://www.python.org/downloads/release/python-360/">Python Release Python 3.6.0</a></p><p>공식 홈페이지에서 Files 문단에 있는 링크들 중 적절한 버전을 골라 설치하면 된다. Tensorflow는 3.6버전까지만 지원하기 때문에 3.7은 사용하지 않는 것이 좋다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Nc39qhnCJ_D0y5BcuochVg.png" /></figure><p>다음은 CUDA 설치이다. 필요한 것은 2가지로 CUDA Toolkit과 CuDNN SDK이다. 모두 Nvidia 에서 제공하고 있다. (혹시 AMD를 쓰고 계신다면, 😅 아래 링크가 도움이 될 수도 있다)</p><ul><li><a href="https://medium.com/tensorflow/amd-rocm-gpu-support-for-tensorflow-33c78cc6a6cf">AMD ROCm GPU support for TensorFlow</a></li><li><a href="https://developer.nvidia.com/cuda-90-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10">CUDA Toolkit 9.0 Downloads</a></li></ul><p>주의할 점은 Tensorflow 는 CUDA 9.0을 지원하므로 주의해야 한다. 위 설치 가이드 링크를 따라가봐야 10을 설치하는 링크로 데려다 주므로 본 글의 위 링크를 눌러서 설치하자.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/868/1*_ZmpCGG1bhW-7DMdMENFrA.png" /></figure><p>설치 과정은 단순하므로 설명을 생략한다. 그래픽 드라이버 업데이트 때처럼 화면이 좀 깜빡거리긴 한다. 설치 후에는 아래의 설명처럼 \</p><p><a href="https://www.tensorflow.org/install/gpu">GPU support | TensorFlow</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/904/1*DVMMvp5X_R6lqPKaEzkdwQ.png" /></figure><p>환경변수가 올바로 설정되었는지 확인한다. 개인적으로 C:\tools\cuda\bin은 필요 없었고 2번째 줄 CUPTI\lib64 만 추가해주면 될 것 같다.</p><p>다음은 CuDNN이라는 온갖 헤더 파일과 DLL로 구성된 딥러닝 할 때 도움이 되는 SDK를 깔아야 한다.</p><p><a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/583/1*pIAY1aMc50QldxoxLDhpdA.png" /></figure><p>CUDA 9.0에 해당하는 파일을 다운로드하면 되지만 회원가입을 하라고 그럴 수도 있으므로 당황하지 않아도 된다. 파일의 압축을 풀면 아래와 같은 구조인 것을 확인할 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/233/1*UvD0E2pIZEcPMWCtItzYbQ.png" /></figure><p>모두 복사한 후 C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0 에 붙여넣으면 된다.</p><p>그러면 Tensorflow 설치를 위한 준비가 끝난다. 남은 것은 설치 가이드의 설명대로 가상환경을 만든 다음 pip로 설치하면 된다.</p><p>명령 프롬프트에서 아래 명령어를 따라서 치자.</p><pre>C:\&gt; virtualenv --system-site-packages -p python3 ./venv<br>C:\&gt; .\venv\scripts\activate<br>C:\&gt; pip install --upgrade tensorflow-gpu<br>c:\&gt; python -c &quot;import tensorflow as tf; print(tf.__version__)&quot;</pre><p>설치가 잘 되었다면 텐서플로우 버전을 확인할 수 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5438fea6ed30" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Performing Python repetitive tasks in Windows]]></title>
            <link>https://medium.com/@maxtortime_88708/performing-python-repetitive-tasks-in-windows-4cf6246f36a9?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/4cf6246f36a9</guid>
            <category><![CDATA[python]]></category>
            <category><![CDATA[windows]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Wed, 05 Sep 2018 01:38:23 GMT</pubDate>
            <atom:updated>2018-11-14T17:53:30.212Z</atom:updated>
            <content:encoded><![CDATA[<p>살다 보면 어떤 Python 파일을 정기적으로 실행하고 싶을 때가 있다. 만약 리눅스라면 일반적으로 생각해 볼 수 있는 수단은 crontab일 것이다.</p><p><a href="https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EB%B0%98%EB%B3%B5_%EC%98%88%EC%95%BD%EC%9E%91%EC%97%85_cron,_crond,_crontab">리눅스 반복 예약작업 cron, crond, crontab - 제타위키</a></p><p>하지만 운영체제가 Windows라면 어떻게 해야 할까? 이 글에서는 글쓴이가 직접 사용중인 2가지 방법을 소개하려고 한다.</p><h4><a href="https://en.wikipedia.org/wiki/Windows_Task_Scheduler">1. Windows Task Scheduler</a> (작업 스케쥴러)</h4><p>작업 스케쥴러는 말 그대로 Windows 에서 제공하는 작업 스케쥴러로 살펴보면 의외로 사용하기 편하고 여러 기능을 갖추고 있다. 문제는 Python Script 를 어떻게 동작시킬지인데 명령 프롬프트와 똑같이 작업하면 된다.</p><blockquote>한글 Windows 10 기준</blockquote><p>먼저 시작 메뉴에서 <strong>작업 스케쥴러</strong> 라고 치면 작업 스케쥴러가 나오게 되는데보통 아래와 같은 화면일 것이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cMmEGi0OKAZME4JVcqztAw.png" /><figcaption>필자의 작업스케쥴러 상황</figcaption></figure><p>컴퓨터 환경에 따라 항목이 많거나 적거나 할 수 있다.</p><p>이 화면에서 오른쪽에 보이는 <strong>작업 만들기</strong>를 클릭하면 새로운 창이 뜨면서 새로운 작업을 생성할 수 있게 된다. 트리거나 다른 탭들은 충분히 혼자서 설정할 수 있을 것이다. 이 글에서 중점적으로 살펴보려 하는 것은 <strong>동작</strong> 탭이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/632/1*myZu7ZA3YYVUrmxNyA5lkQ.png" /></figure><p>동작 탭을 클릭하고 새로 만들기를 클릭하면</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/454/1*8vlciukUdd11U2OxdX_x4A.png" /></figure><p>또 다시 창이 하나 나온다. 보통은 프로그램/스크립트 쪽에 그냥 python을 넣는 경우가 많지만 이 글에서 제안하려는 방법은 다음과 같다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/454/1*Zdie6J2sJaRr0_8WYZqTcw.png" /></figure><p>프로그램/스크립트에는 cmd(명령 프롬프트)를 넣고 인수 추가(옵션)에는 아래와 같이 입력하자.</p><blockquote>/k {파이썬 인터프리터의 절대경로} -i {실행하려는 파일의 절대경로}</blockquote><p><em>cmd </em>실행 시 /k 옵션을 주면 cmd 창이 실행 후에도 남아있게 되어 편하다.인터프리터의 절대경로를 주는 이유는 괜히 상대경로로 하다가 꼬일 수 있고 요즘은 복붙도 무척 편하니 그냥 탐색기에서 경로를 복붙하도록 하자. -i 옵션은 파이썬 인터프리터의 옵션으로 도움말에는 아래와 같이 적혀 있다.</p><blockquote>-i : inspect interactively after running script; forces a prompt even<br> if stdin does not appear to be a terminal; also PYTHONINSPECT=x</blockquote><p>해석해보면 표준입력이 들어오지 않더라도 항상 프롬프트를 유지시켜주므로 파이썬 인터프리터가 꺼지지 않게 된다. 만약 이 옵션을 설정하지 않을 경우 보통 명령 프롬프트는 프로세스가 정상적으로 종료되면(return 0) 꺼져버리기 때문에 결과를 확인할 수가 없다.</p><p>필자의 경우는 하루에 한 번 돌리는 작업이라 다음날</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/859/1*ojtgxLDR64FDnTNPzTVQ7g.png" /></figure><p>아래와 같이 성공했다는 보고를 받고 그냥 cmd창을 꺼버리는 식으로 이용하고 있다. 각자의 상황에 맞게 옵션을 조합해서 사용하면 된다.</p><h4>2. apscheduler 이용</h4><p>apscheduler는 <a href="https://apscheduler.readthedocs.io/en/latest/">https://apscheduler.readthedocs.io/en/latest/</a> 무척 유용한 라이브러리로 파이썬 코드 상에서 Batch Job 을 돌리기 무척 유용하다. 그런데 윈도우에서는 어떻게 백그라운드상에서 계속 이 스크립트를 돌릴 수 있을까?</p><p>윈도우 파이썬에는 python.exe 말고도 pythonw.exe 라는 파일이 또 있는데 이 실행파일을 이용해서 실행하면 작업이 백그라운드에서 이루어진다. 그래서 그냥 실행해놓으면 apscheduler 가 알아서 작업을 수행한다. 꺼버리고 싶을 때가 조금 문제인데 작업 관리자를 이용하면 된다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4cf6246f36a9" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Django에서 Bootstrap Navbar 쉽게 만들기]]></title>
            <link>https://medium.com/@maxtortime_88708/django%EC%97%90%EC%84%9C-bootstrap-navbar-%EC%89%BD%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0-5f51db55568?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/5f51db55568</guid>
            <category><![CDATA[navigation]]></category>
            <category><![CDATA[bootstrap]]></category>
            <category><![CDATA[django]]></category>
            <category><![CDATA[programming]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Mon, 13 Aug 2018 01:46:33 GMT</pubDate>
            <atom:updated>2018-08-13T01:46:33.020Z</atom:updated>
            <content:encoded><![CDATA[<p>맨날 Navigation Bar 를 만들다보면 현재 들어와있는 메뉴를 active 시켜주는 문제를 해결하려고 if문을 엄청 사용했다.</p><p>그래서 이번에 context_processor 를 하나 만들고 템플릿 쪽에는 for 문을 써줘서 간단하게 문제를 해결해 봤다.</p><p>context_processor 코드는 어디다 둬야 할지 모르겠어서 일단 settings 폴더에 context_processors.py 를 만들었다. 그 다음에 아래처럼 코드를 작성해준다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/6f4bcdc93f4ef62aea9b7732c557c82a/href">https://medium.com/media/6f4bcdc93f4ef62aea9b7732c557c82a/href</a></iframe><p>장고 컨텍스트 프로세서는 템플릿 엔진에 전역으로 변수를 전달해주는 역할을 한다. 저렇게 menus 함수를 정의하고 나서 settings.py 에 등록시켜주면 된다. 주의할점은 함수명이 템플릿에서 변수명이 되는게 아니라 코드처럼 딕셔너리를 반환하고 그<strong> 딕셔너리의 키가 변수명</strong>이 된다는 사실이다. 이 점이 좀 헷갈릴 수 있다.</p><p>코드는 리스트 컴프리헨션을 알고 있으면 쉽게 이해할 수 있다. 튜플을 쭉 for문 돌려서 navbar를 만드는데 필요한 정보로 구성된 딕셔너리 리스트을 만드는 코드다. 8번째 줄의 튜플은 다시 튜플들로 구성되어 있다.</p><blockquote>(urls.py 에서 정의한 이름, 템플릿에서 보여질 메뉴 이름)</blockquote><p>각 튜플은 위와 같이 구성했다.</p><p>그 상태에서 path 키는 url 이름을 통해 reverse 한 url 경로를 의미하고, name 은 실제 메뉴 이름, active는 메뉴 항목을 활성화해서 강조하기 위한 변수이다. 문제점이 위와 같이 코드를 짜니 메뉴의 하위 항목들은 강조해줄 수 없는 문제가 있었는데 그것은 조건문을 적절히 변경해서 url 들을 걸러주면 해결할 수 있을 것 같다.</p><p>함수를 만들고 나서 settings.py 에 TEMPLATES 의 OPTIONS 에 위와 같이 컨텍스트 프로세서를 등록하는 걸 잊으면 안 된다.</p><p>그 다음 템플릿에서는 아래와 같이 코드를 작성하면 된다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/24f51d1ce62262e8e632973f9189d726/href">https://medium.com/media/24f51d1ce62262e8e632973f9189d726/href</a></iframe><p><a href="https://getbootstrap.com/docs/4.0/components/navbar/">Bootstrap NavBar</a> 로 구성했고 위에서 만든 menus 리스트를 이용해 각 navbar 메뉴를 만드는 코드이다.</p><p>위와 같이 작성하면 중복 없이 깔끔하게 NavBar를 렌더링하는 코드를 작성할 수 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5f51db55568" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[글을 적고 Medium Partner Program 을 다시 조사해봤다.]]></title>
            <link>https://medium.com/@maxtortime_88708/%EA%B8%80%EC%9D%84-%EC%A0%81%EA%B3%A0-medium-partner-program-%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%A1%B0%EC%82%AC%ED%95%B4%EB%B4%A4%EB%8B%A4-1db520bdbb5d?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/1db520bdbb5d</guid>
            <category><![CDATA[medium]]></category>
            <category><![CDATA[stripe]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Thu, 09 Aug 2018 17:18:16 GMT</pubDate>
            <atom:updated>2018-08-09T17:18:16.197Z</atom:updated>
            <content:encoded><![CDATA[<p>글을 적고 Medium Partner Program 을 다시 조사해봤다.</p><p>Medium 은 Stripe 라는 서비스와 연동되어 해당 프로그램을 진행하고 있다. 한국 서비스가 안 된다는 건 Stripe 에서 대한민국을 지원하지 않는다는 뜻이다. 그래서 좀더 보니 지난번에는 보지 못한 <a href="https://stripe.com/atlas">https://stripe.com/atlas</a> 라는 서비스라고 뭔가 아예 1인 회사를 만드는 서비스가 있었다. 일단 이걸 신청해뵉로 했다. 그리고 글이 잘못된 점은 블로그를 이쁘게 꾸미기 위한 결제는 그냥 신용카드로 가능했다. 좌측 상단에 있는 Upgrade 를 누르면 그냥 신용카드나 페이팔로 한달에 5딸라를 내면 사용가능하다.</p><p>아 그리고 알고보니 멤버쉽을 안 하면 글을 한 달에 3개 이상 못 읽는 것이였다.. 허미.. 이것은 블로그계의 넷플릭스인건가</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1db520bdbb5d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Medium에 대한 단상]]></title>
            <link>https://medium.com/@maxtortime_88708/medium%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8B%A8%EC%83%81-7e64b644298?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/7e64b644298</guid>
            <category><![CDATA[jekyll]]></category>
            <category><![CDATA[review]]></category>
            <category><![CDATA[thinking]]></category>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[medium]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Thu, 09 Aug 2018 16:55:59 GMT</pubDate>
            <atom:updated>2018-08-09T17:01:58.430Z</atom:updated>
            <content:encoded><![CDATA[<h4>글은 잘 안 쓰지만 블로그 및 홈페이지 운용 계획</h4><p>요즘 글을 잘 안 적었는데 머리에 떠오르는 주제는 많았지만 정작 키보드로 손이 옮겨지지 않았다. 그리고 샤워를 하면서 생각해보니 코딩을 너무 안 했다는 생각이 들어서 뭘하면 좋을까 고민하다가 별로 연관은 없어보이지만 글부터 적기로 했다.</p><p>Medium을 사용하게 된 이유는 Jekyll 관리가 너무 귀찮아서였다. 아마 이전 글에도 언급했던 것 같다. 전적으로 개인적인 Jekyll 의 단점이다. (혹시 <em>이것도 모르셨어요?</em> 라는 생각이 드시거나 노하우를 주실 분은 언제나 환영입니다.)</p><ul><li>Ruby 기반이다.<br>물론 Jekyll을 쓰려면 Ruby 코드는 하나도 짤 필요가 없지만 그런 문제가 아니라 요즘은 나아졌는지 모르겠지만, 당시 RVM의 존재를 모르고 gem 체계에 대해 잘 이해를 못한 나는 Windows에다 Ruby를 깔고 Jekyll을 운용하는 데 실패했었다. 물론 Mac에서는 잘 됬긴 하지만 이런 짓을 해가며 블로그를 해야 하나 싶었다.</li><li>GitHub 에 바로 한글을 적으면 잘 안 된다.<br>사실 그냥 GitHub에 마크다운 파일을 만들고 커밋을 하면 알아서 블로그 글이 잘 만들어졌다. 그런데 왜 위와 같은 일을 해야 했냐면 지금은 고친 것 같은데 옛날에는 아래처럼 바로 한글을 적으면 온갖 오류가 다 나는 증상이 있었다.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5gX_2ivrQ2BTlUbVPsVHNA.png" /></figure><ul><li>공부하기 귀찮아 &amp; 관리하기 귀찮아<br>그냥 글만 적고 싶은데 jekyll은 테마를 쓰더라도 개성적인 블로그를 만들고 싶으면 어느 정도 HTML과 CSS를 만져야 했다.</li></ul><p>위와 같은 이유로 Jekyll 블로그를 완전히 갈아엎고 (<a href="https://github.com/maxtortime/maxtortime.github.io/commits/master">커밋로그</a>) <a href="https://maxtortime.me">https://maxtortime.me</a> 처럼 정적 이력서 페이지로 만들었다. (github pages 로 호스팅하는 것이고 URL은 namecheap에서 구매했고 SSL은 cloudflare 로 세팅했습니다. 이 노하우도 글로 적어야 겠다)</p><p>그리고 원래 jekyll로 써놨던 글도 모두 Medium 으로 옮기고 (무려 Medium은 어떤 사이트의 글을 그대로 복제해오는 훌륭한 기능을 가지고 있다) 새로운 기술 블로그를 시작했다.</p><p>현재까지 상황은 그럭저럭 잘 쓰고 있고 Medium 은 확실히 좋은 플랫폼이지만 몇가지만 좀 개선해줬으면 좋을 것 같다.</p><ul><li>한국 정식 서비스 / 한국어 지원 / 한글 폰트도..<br>먼저 Medium은 Medium Partner Program 으로 글을 적으면 돈도 벌 수 있고 이쁘게 자신의 블로그를 꾸밀 수 시스템을 갖추고 있다. 그런데 나도 이걸 해보고 싶어서 돈을 내려 했는데 한국은 아예 나라 목록에도 없어서 실망하고 안 하게 됬다. 뭐 이런 상황에서 한국어 지원이 안 되는 건 당연하고, Medium 영문 폰트는 너무 예쁘지만 한글을 적으면 그냥 명조 폰트로 나온다.</li><li>Syntax Highlighting 좀 해줘요!<br>물론 Medium에서는 Gist 를 쓰면 된다고 한다. 뭐 쓰면 되는데 몇까지 짜증나는 점은 한 Gist 에 여러 코드를 넣어놓으면 코드 임베딩이 한 꺼번에 된다는 점이다. (뭔가 한 코드만 링크를 걸어도 모든 코드가 다 렌더링 된다) 그렇다고 예제 코드 하나마다 다 gist를 만들어야 하나?</li></ul><p>물론 위와 같은 단점이 있지만 Medium은 무척 매력적인 플랫폼이다. 요즘 우리나라 분들도 많이 쓰시는 것 같지만 생각보다 별로 안 쓰기 때문에 한국 서비스를 안 해주는 것 같기도 하다. 이 글을 읽으시고 부디 많이 써주시기 바랍니다.</p><p>너무 뭐라 그런 것 같아서 홍보 차 장점을 적으려고 한다.</p><ul><li>글 적는 즐거움이 있다.<br>Medium은 굉장히 미니멀한 디자인을 가지고 있으면서 폰트도 무척 예뻐서(로마자만, 지금까지 로마자하고 한글로만 된 글만 읽어봐서 다른 문자는 잘 모르겠음) 가독성이 좋은 글을 쉽게 써내려 갈 수 있다.</li><li>태그하고 제목만 잘 적어도글 노출이 무진장 잘 된다.<br>구글에 <strong>hyper v 네트워크 </strong>라고만 적어도 별로 열심히 적지도 않은 팁인데 내가 적은 글이 제일 상단에 랭크되어 있다. 무슨 마법의 기술을 썼는지 모르겠지만 Medium은 SEO를 굉장히 잘 하는 것 같다.</li><li>그래서인지 좋은 글이 많다.<br>물론 영어의 압박을 견뎌내야 하지만 넷플릭스 기술 블로그는 대충만 읽어봐도 내용이 좋은 것 같다. 이 말고도 메인만 대충 훑어도 인식을 전환할 수 있는 좋은 글이 많다. 영어 공부도 할 수 있다는 장점이 있다.\</li></ul><p>그래서 앞으로의 계획은 아래와 같다.</p><ul><li>maxtortime.github.io 옛날 커밋으로 Revert 시킨 후 Jekyll로 돌아가본다. 그런데 <a href="https://www.gatsbyjs.org/">https://www.gatsbyjs.org/</a> 라는 리액트로 만든 정적 사이트 프레임워크가 있어서 써볼까 생각중이긴 하다. 그래서 잡다한 팁과 코드가 들어간 기술 내용을 적는 블로그 및 홈페이지로 운영할 생각이다.</li><li>Medium은 계속 쓰고 이런 글 같이 두서가 없어서 새벽에 쓰기 좋은 글이나 시간이 되는대로 온갖 리뷰를 적어보고 싶다. 그리고 가끔 영작을 해보는 것도 좋을 것 같다.</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7e64b644298" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[부족한 글이였는데 도움이 되셨다니 다행입니다.]]></title>
            <link>https://medium.com/@maxtortime_88708/%EB%B6%80%EC%A1%B1%ED%95%9C-%EA%B8%80%EC%9D%B4%EC%98%80%EB%8A%94%EB%8D%B0-%EB%8F%84%EC%9B%80%EC%9D%B4-%EB%90%98%EC%85%A8%EB%8B%A4%EB%8B%88-%EB%8B%A4%ED%96%89%EC%9E%85%EB%8B%88%EB%8B%A4-14e0d0623e6d?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/14e0d0623e6d</guid>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Thu, 19 Jul 2018 06:58:45 GMT</pubDate>
            <atom:updated>2018-07-19T06:58:45.623Z</atom:updated>
            <content:encoded><![CDATA[<p>부족한 글이였는데 도움이 되셨다니 다행입니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=14e0d0623e6d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[eslint-plugin-vue 적용하기]]></title>
            <link>https://medium.com/@maxtortime_88708/eslint-plugin-vue-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-9a91f085dc61?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/9a91f085dc61</guid>
            <category><![CDATA[eslint]]></category>
            <category><![CDATA[nodejs]]></category>
            <category><![CDATA[plugins]]></category>
            <category><![CDATA[npm]]></category>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Sun, 29 Apr 2018 03:22:38 GMT</pubDate>
            <atom:updated>2018-04-29T03:22:38.955Z</atom:updated>
            <content:encoded><![CDATA[<p>요즘 개발중인 프로젝트에서는 vue-cli¹ 가 세팅해준 그대로 개발을 진행하고 있었다. 따라서 규칙도 자연스럽게 standard 를 쓰게 되었다. 그런데 생각해보니 .vue 파일 안에 있는 템플릿들은 lint가 되지 않았다.</p><p>그래서 알고보니 친절한 <em>vue.js </em>커뮤니티는 이미 공식 eslint 플러그인을 만들어서 배포하고 있었다. 그리고 한국 커뮤니티에서도 박창주님이 작성해주신 글에 적용법을 설명하는 글이 있었다.</p><p><a href="https://medium.com/@changjoopark/vue-js-%EA%B3%B5%EC%8B%9D-eslint-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-3457ac648b05">Vue.js 공식 ESLint 플러그인 적용하기</a></p><p>그리하여 잘 쓰면 되겠거니 했는데 문서에서 하라는 대로 했지만 내 Visual Studio Code 에는 빨간 줄이 전혀 보이지 않았다. 물론 이유는 역시 몇 가지 설정을 제대로 하지 않았기 때문이다.</p><ol><li><strong>eslint 버전을 업그레이드하자!</strong></li><li><strong>.vscode/settings.json 체크</strong></li><li><strong>eslintrc.js 체크</strong></li></ol><p>세가지 모두 <a href="https://github.com/vuejs/eslint-plugin-vue#grey_exclamation-requirements">README</a>에도 나와 있는 내용이지만 잘 체크하지 않으면 헤맬 수 있다. 먼저babel-eslint 을 사용하려면 <strong>eslint 4.14</strong> 이상이 필요하다. 깔끔하게 글로벌과 로컬 둘 다 업데이트 해두자. 업데이트 후 터미널에서 버전을 체크한다. update 명령어로 안 된다면 install로 해보자.</p><pre>$ npm install eslint<br>$ npm install -g estlint<br>$ eslint --version<br>v4.19.1</pre><p>다음은 vscode의 설정이다. 아래 코드는 필자의 설정 파일이다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/e82f7423b1a4168da2a4f774381f0311/href">https://medium.com/media/e82f7423b1a4168da2a4f774381f0311/href</a></iframe><p>중요한 점은 5번째 줄과 19번째 줄로 eslint를 켜주는 것과 validate에 vue 를 넣어주는 것을 잊으면 안 된다.</p><p>마지막으로 eslintrc.js 로 역시 필자가 사용중인 파일을 공개하겠다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f1d6479c297ea0b0387bc8f2326bf47a/href">https://medium.com/media/f1d6479c297ea0b0387bc8f2326bf47a/href</a></iframe><p>중요한 것은 역시 5번째 줄 parser 옵션을 parserOptions에 넣는 것을 잊으면 안 된다. 그리고 나머지는 역시 문서에서 설명하는 대로 하면 잘 동작한다.</p><p>¹ create-react-app 같이 vue.js 프로젝트를 만들어주는 cli 툴이다. 개인적으로는 webpack도 같이 세팅된 <a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a> 을 사용하고 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9a91f085dc61" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[리멤버도 파이어베이스를 많이 사용하고 계셨군요 ㅎㅎ]]></title>
            <link>https://medium.com/@maxtortime_88708/%EB%A6%AC%EB%A9%A4%EB%B2%84%EB%8F%84-%ED%8C%8C%EC%9D%B4%EC%96%B4%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EB%A7%8E%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EA%B3%84%EC%85%A8%EA%B5%B0%EC%9A%94-%E3%85%8E%E3%85%8E-55d4e8b22d9c?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/55d4e8b22d9c</guid>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Thu, 12 Apr 2018 02:43:28 GMT</pubDate>
            <atom:updated>2018-04-12T02:43:28.411Z</atom:updated>
            <content:encoded><![CDATA[<p>리멤버도 파이어베이스를 많이 사용하고 계셨군요 ㅎㅎ</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=55d4e8b22d9c" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Python과 SQL Server]]></title>
            <link>https://medium.com/@maxtortime_88708/python%EA%B3%BC-sql-server-ab35088e1120?source=rss-c4eea4b51ecd------2</link>
            <guid isPermaLink="false">https://medium.com/p/ab35088e1120</guid>
            <category><![CDATA[mssql]]></category>
            <category><![CDATA[python]]></category>
            <category><![CDATA[sql-server]]></category>
            <category><![CDATA[odbc]]></category>
            <dc:creator><![CDATA[Taehwan Kim]]></dc:creator>
            <pubDate>Wed, 11 Apr 2018 16:13:11 GMT</pubDate>
            <atom:updated>2018-04-16T12:55:16.831Z</atom:updated>
            <content:encoded><![CDATA[<p>연동을 위한</p><p>서버는 Microsoft 에서 개발한 RDBMS로 MySQL이나 Oracle같이 많이 사용되고 있다. 하지만 학생 때는 써볼 기회가 없었는데 개인적으로는 MySQL로 입문하게 되었고 리눅스 운영체제를 많이 사용하면서 자연적으로 Microsoft 기술 스택은 쓸 기회가 적었다.</p><p>그러던 어느날 아주대학교 의료정보학과에서 일하면서 Microsoft 스택과 친숙하게 되었다. 왜냐하면 이곳은 서버의 대다수 운영체제가 Windows Server이고 DB는 SQL 서버였기 때문이다. (의료정보학과에서 하는 일은 다른 글에서 이야기할 기회가 있을 것 같다)</p><p>문제는 내가 주로 사용하는 언어는 Python이고 웹개발도 Flask나 Django로 하고 있다. 처음 파이썬을 배웠을 때 느낀 것이나 세간의 일반적인 인식의 공통점은 파이썬은 윈도우에서 쓰기 어렵다는 것이다. 물론 이 글을 쓰는 지금은 Windows에서 파이썬을 잘 쓰고 있다. 그러나 역시 Microsoft 에서 개발한 SQL Server를 연동할때는 또 다시 어려움을 느꼈다.</p><p>지금까지 사용했던 RDBMS에서는 설치에서 문제를 겪거나 데이터가 깨져서 나오거나 DB 관리에서 곤란을 겪는 경우가 많았다. 하지만 SQL Server는 의외로 그런 문제는 전혀 없었다. 문제는 의외의 곳에서 터졌는데 바로 잘못된 쿼리를 실행 했을 때였다. 잘못된 쿼리를 실행하면 당연히 드라이버에서는 에러메시지를 반환할 텐데 이 에러 메시지가 깨져서 나오니 (모두가 잘 알고 있는 �) 뭐를 잘못했는지 모르겠는 상황이 온 것이다.</p><p>그렇게 원인도 모른채 파이썬을 접어두고 C#이나 Nodejs로 코딩을 하고 있었지만 둘다 익숙한 언어가 아니라 일이 잘 되지 않았다. 그러던 차에 어느날 우연히 ODBC를 다시 만들면서 문제를 해결할 수 있었다.</p><p>파이썬에서 SQL Server를 이용하기 위해서 가장 많이 쓰이는 것은 pyodbc일 것이다. 여기서 <a href="https://docs.microsoft.com/ko-kr/sql/odbc/reference/what-is-odbc">ODBC</a>란 마이크로소프트에서 만든 DB와의 접촉을 위한 수단이다. 제대로 이해하고 있는 건지는 모르겠지만 DB와 사용자 상호간의 여러 접촉 수단을 만드는 대신 ODBC를 통해서 해결할 수 있는 것 같다. 따라서 다른 RDBMS에서도 ODBC를 이용할 수 있지만 보통은 SQL Server와의 연결에 사용되곤 한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/742/0*cyASNIe90wkJOtzB.png" /><figcaption><a href="https://docs.microsoft.com/ko-kr/sql/integration-services/import-export-data/connect-to-an-odbc-data-source-sql-server-import-and-export-wizard">https://docs.microsoft.com/ko-kr/sql/integration-services/import-export-data/connect-to-an-odbc-data-source-sql-server-import-and-export-wizard</a></figcaption></figure><p>시작 메뉴에서 ODBC라고 검색하면 ODBC 데이터 원본 이라고 검색되고 위 창을 띄울 수 있다. 보통 SSMS(SQL SERVER MANAGEMENT STUDIO)를 사용하면 SQL Server Native Client가 설치되어 있다. 처음에 문제를 겪었을 때는 그냥 SQL Server 드라이버를 사용했는데 문제를 해결했을 때는<strong> SQL Server Native Client </strong>를 사용했다. (ODBC 생성법은 위 링크를 참고)</p><p>글은 길게 써놓고 너무 간단한 결론인 것 같은데 웹 프레임워크별로 연동법은 다른 글에서 다뤄볼 예정이다. 그렇다면 Native client 와 그냥 SQL Server 드라이버는 뭐가 다른 걸까 생각나서 찾아봤는데 <a href="https://social.msdn.microsoft.com/Forums/sqlserver/en-US/4a52ae68-efdd-459c-89e6-4c2d1f4b7906/sql-native-client-vs-sql-server?forum=sqldataaccess">이 글</a>을 보니 Native Client 쪽이 더 발전된 기능을 가지고 있는 것 같다. 아마 SQL Server 설치시 한국어 완성형 Collation 이였는데 드라이버가 완성형을 제대로 지원하지 않아서 오류 메시지를 제대로 출력하지 못했던게 아닐까 하는 결론을 내본다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ab35088e1120" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>