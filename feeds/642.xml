<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KyuDevelop</title>
    <description>KyuHyuk Lee Blog</description>
    <link>https://kyuhyuk.kr/</link>
    <atom:link href="https://kyuhyuk.kr/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 11 May 2019 15:21:45 +0000</pubDate>
    <lastBuildDate>Sat, 11 May 2019 15:21:45 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>[C++] Chapter 4: Guess the Number</title>
        <description>&lt;p&gt;Guess the Number를 프로그래밍 하면서 조건문과 반복문, 난수생성에 대해 알아봅시다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스 코드 :&lt;/strong&gt;
```c++
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;&lt;/ctime&gt;&lt;/cstdlib&gt;&lt;/iostream&gt;&lt;/p&gt;

&lt;p&gt;using namespace std;&lt;/p&gt;

&lt;p&gt;int main(int argc, char const *argv[]) {
  int number, guessNumber;
  int guessTaken = 0;&lt;/p&gt;

&lt;p&gt;// Random Seed를 초기화 합니다
  srand (time(NULL));&lt;/p&gt;

&lt;p&gt;number = rand() % 20 + 1;
  cout « “I am thinking of a number between 1 and 20.” « endl;
  do {
    cout « “Take a guess.” « endl;
    cin » guessNumber;
    guessTaken++;
    if (number &amp;lt; guessNumber)
      cout « “Your guess is too high.” « endl;
    if (number &amp;gt; guessNumber)
      cout « “Your guess is too low.” « endl;
  } while(number != guessNumber);
  cout « “Good job! You guessed my number in “ « guessTaken « ” guesses!” « endl;
  return 0;
}&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 10:31:20 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-4</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-4</guid>
        
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>[C++] Chapter 3: 구조체(Struct)</title>
        <description>&lt;p&gt;자판기를 프로그래밍 한다고 가정해봅시다.&lt;br /&gt;
이를 위해서는 음료수 이름, 가격, 남은 개수를 저장하는 변수가 필요합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스 코드 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sprite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CocaCola&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;는 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;원이며, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;개 있습니다.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;는 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;원이며, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;개 있습니다.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;실행 화면 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sprite는 1100원이며, 100개 있습니다.
CocaCola는 1000원이며, 50개 있습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 위와 같이 구현하게 되면 많은 배열이 필요하게 되며, 관리하기에도 좋지 않습니다.&lt;br /&gt;
구조체(Struct)를 사용하면 서로 관련된 정보를 하나의 단위로 묶어서 저장할 수 있습니다.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;소스 코드 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sprite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CocaCola&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;는 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;원이며, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;개 있습니다.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;는 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;원이며, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;개 있습니다.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;실행 화면 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sprite는 1100원이며, 100개 있습니다.
CocaCola는 1000원이며, 50개 있습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;c11의-구조체-초기화-방법&quot;&gt;C++11의 구조체 초기화 방법&lt;/h1&gt;
&lt;p&gt;C++11에서는 아래와 같이 ‘=’ 없이 초기화 할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sprite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CocaCola&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;는 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;원이며, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;재고가 개 있습니다.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;는 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;원이며, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;재고가 개 있습니다.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 11 May 2019 10:31:19 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-3</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-3</guid>
        
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>[C++] Chapter 2: cin</title>
        <description>&lt;h1 id=&quot;cin을-사용하여-변수에-값을-저장해보자&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cin&lt;/code&gt;을 사용하여 변수에 값을 저장해보자!&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;소스 코드 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;How old are you?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;실행 화면 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;How old are you?
27
I am 27 years old.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;변수-선언-및-대입&quot;&gt;변수 선언 및 대입&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int age;&lt;/code&gt;는 age라는 이름의 변수를 정수형으로 선언한다는 뜻입니다.&lt;br /&gt;
아래와 같이 선언 할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예시 1 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;171.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetHight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needHight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetHight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You need &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needHight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You need 3.8cm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;예시 2 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;myAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My Age : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Friend Age : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;My Age : 27
Friend Age : 27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;stdcin&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::cin&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cin&lt;/code&gt;은 아래와 같이 사용 할 수 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-11-C++-Chapter-2-cin/cin.png&quot; alt=&quot;std::cin&quot; /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cout&lt;/code&gt;과 삽입 연산자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;로 반대입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예시 3 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt; &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* string 변수를 사용하기 위해 추가 */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter your name : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter your name : KyuHyuk Lee
My name is KyuHyuk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만, 위의 예시에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;KyuHyuk Lee&lt;/code&gt;라고 입력하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;KyuHyuk&lt;/code&gt;밖에 출력이 안됩니다.&lt;br /&gt;
이럴 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;getline()&lt;/code&gt; 함수를 사용하여 한 단어가 아닌, 한 행을 읽어 변수에 저장하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예시 4 :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt; &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* string 변수를 사용하기 위해 추가 */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter your name : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cin에 입력받는 내용을 name 변수에 저장한다
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter your name : KyuHyuk Lee
My name is KyuHyuk Lee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 11 May 2019 10:31:18 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-2</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-2</guid>
        
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>[C++] Chapter 1: Hello World</title>
        <description>&lt;h1 id=&quot;개발-환경&quot;&gt;개발 환경&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 18.04.2 LTS&lt;/li&gt;
  &lt;li&gt;G++ 7.4.0&lt;/li&gt;
  &lt;li&gt;Atom Editor
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/atom-beautify&quot;&gt;atom-beautify&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-clang&quot;&gt;autocomplete-clang&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;개발-환경-설정&quot;&gt;개발 환경 설정&lt;/h1&gt;

&lt;h2 id=&quot;1-ubuntu에-g-설치&quot;&gt;1. Ubuntu에 G++ 설치&lt;/h2&gt;
&lt;p&gt;터미널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install g++&lt;/code&gt;을 입력하여 G++을 설치합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-11-C++-Chapter-1-Hello-World/apt-install-g++.png&quot; alt=&quot;Install G++ in Ubuntu&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-atom-editor-설치&quot;&gt;2. Atom Editor 설치&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io&quot;&gt;https://atom.io&lt;/a&gt;에 접속하여 ‘Download .deb’를 클릭하여 다운로드 받습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-11-C++-Chapter-1-Hello-World/get_atom_editor.png&quot; alt=&quot;Get Atom Editor&quot; /&gt;&lt;br /&gt;
터미널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;atom-amd64.deb&lt;/code&gt;가 설치된 위치로 이동하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dpkg -i atom-amd64.deb&lt;/code&gt;를 입력하여 Atom Editor를 설치합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;만약 설치 중에 문제가 생긴다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install -f&lt;/code&gt; 명령어를 입력하여 해결합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-atom-editor-설정&quot;&gt;3. Atom Editor 설정&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-11-C++-Chapter-1-Hello-World/atom_editor_setting.png&quot; alt=&quot;Atom Editor Setting&quot; /&gt;&lt;br /&gt;
&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;를 눌러 ‘Settings’를 실행하고, ‘Install’ 메뉴로 들어가, ‘atom-beautify’와 ‘autocomplete-clang’를 설치합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;atom-beautify&lt;/strong&gt; : Source Code의 들여 쓰기와 띄어쓰기 등등을 예쁘게 정돈해줍니다.
    &lt;ul&gt;
      &lt;li&gt;‘atom-beautify’는 ‘Uncrustify’가 필요합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install uncrustify&lt;/code&gt; 명령어로 Uncrustify를 설치합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;autocomplete-clang&lt;/strong&gt; : C/C++ Source Code를 작성하기 편하게 자동완성 시켜줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h1&gt;

&lt;p&gt;터미널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;atom hello_world.cpp&lt;/code&gt;를 입력하여 Atom을 실행하고 아래의 Source Code를 작성한 뒤 저장합니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Hello World! 출력
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// 개행(New Line)
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello C++&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;터미널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;g++ -std=c++11 hello_world.cpp -o hello_world&lt;/code&gt;로 빌드한 뒤,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;./hello_world&lt;/code&gt;로 실행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ atom hello_world.cpp
$ g++ -std=c++11 hello_world.cpp -o hello_world
$ ./hello_world
Hello World!
Hello C++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; 함수는 프로그램이 제일 먼저 실행되는 함수입니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/language/main_function&quot;&gt;C++ Reference - Main function&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 헤더 파일을 불러옵니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cin&lt;/code&gt;과 같은 입출력을 하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 헤더가 필요합니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/preprocessor/include&quot;&gt;C++ Reference - #include&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/header/iostream&quot;&gt;C++ Reference - &amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; 지시자&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;using namespace std;&lt;/code&gt;는 std라는 namespace를 사용한다는 뜻입니다.&lt;br /&gt;
이렇게 사용하게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::&lt;/code&gt;라는 접두어를 붙이지 않고도 &lt;code class=&quot;highlighter-rouge&quot;&gt;std&lt;/code&gt; namespace에 정의되어 있는 것들을 사용할 수 있습니다.&lt;br /&gt;
만약 위의 구문을 안쓴다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;cout &amp;lt;&amp;lt; &quot;Hello C++&quot; &amp;lt;&amp;lt; endl;&lt;/code&gt;를&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;std::cout &amp;lt;&amp;lt; &quot;Hello C++&quot; &amp;lt;&amp;lt; std::endl;&lt;/code&gt;와 같이 작성하게 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cout&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;endl&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cout &amp;lt;&amp;lt; &quot;따옴표 안의 내용을 출력합니다.&quot;;&lt;/code&gt;와 같이 “ “ 안의 내용을 출력합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-11-C++-Chapter-1-Hello-World/cout.png&quot; alt=&quot;cout&quot; /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;endl&lt;/code&gt;를 Output Stream에 삽입하면 화면 커서가 다음 행의 시작위치로 가게 됩니다.
예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;cout &amp;lt;&amp;lt; &quot;1&quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &quot;2&quot; &amp;lt;&amp;lt; endl;&lt;/code&gt;를 하면 1 다음 행에 2 가 출력이 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return 0;&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; 함수를 끝내고, OS(운영체제)에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;을 반환합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;return -1;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;return 1;&lt;/code&gt;을 사용해도 되지만, 일반적으로 해당 함수를 성공적으로 끝냈다는 의미로 &lt;code class=&quot;highlighter-rouge&quot;&gt;return 0;&lt;/code&gt;를 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g++ -std=c++11 hello_world.cpp -o hello_world&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/C++11&quot;&gt;C++11 표준&lt;/a&gt;을 사용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_world.cpp&lt;/code&gt;를 컴파일 합니다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 11 May 2019 10:31:17 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-1-Hello-World</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/c++/2019/05/11/C++-Chapter-1-Hello-World</guid>
        
        
        <category>C++</category>
        
      </item>
    
      <item>
        <title>GUID Partition Table</title>
        <description>&lt;p&gt;GPT(&lt;strong&gt;G&lt;/strong&gt;UID &lt;strong&gt;P&lt;/strong&gt;artition &lt;strong&gt;T&lt;/strong&gt;able)은 저장 장치에 대한 파티션 레이아웃 중 하나입니다.&lt;/p&gt;

&lt;p&gt;GUID Partition Table의 구조는 아래와 같습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-06-GUID-Partition-Table/GPT-Scheme.png&quot; alt=&quot;GPT Scheme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 우리가 사용하는 컴퓨터의 GUID Partition Table도 확인해봅시다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dd if=/dev/sda of=disk.img bs=2MB count=1&lt;/code&gt; 명령어로 Protective MBR(LBA 0)부터 GUID Partition Entries 5~8(LBA 4)까지 disk.img에 저장을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-06-GUID-Partition-Table/Protective-MBR.png&quot; alt=&quot;Protective MBR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-06-GUID-Partition-Table/Primary-GPT-Header-1.png&quot; alt=&quot;Primary GPT Header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-06-GUID-Partition-Table/Primary-GPT-Header-2.png&quot; alt=&quot;Primary GPT Header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-05-06-GUID-Partition-Table/GUID-Partition-Entries.png&quot; alt=&quot;GUID Partition Entries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[+] Partition 1&lt;/strong&gt;&lt;br /&gt;
 [-] Partition type GUID: C12A7328-F81F-11D2-BA4B-00A0C93EC93B&lt;br /&gt;
  =&amp;gt; Partition type: EFI System partition, None&lt;br /&gt;
 [-] Unique partition GUID: 27BB3437-B2DF-4760-8AA8-B5F64A8455D2&lt;br /&gt;
 [-] First LBA: 2048&lt;br /&gt;
  =&amp;gt; Disk Offset: 0x00100000&lt;br /&gt;
 [-] Last LBA: 1050623&lt;br /&gt;
  =&amp;gt; Disk Offset: 0x200FFE00&lt;br /&gt;
 [-] Attribute flags: 0, System Partition&lt;br /&gt;
 [-] Partition Name: EFI System Partition&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;[+] Partition 2&lt;/strong&gt;&lt;br /&gt;
 [-] Partition type GUID: 0FC63DAF-8483-4772-8E79-3D69D8477DE4&lt;br /&gt;
  =&amp;gt; Partition type: Linux filesystem data, Linux&lt;br /&gt;
 [-] Unique partition GUID: BD77D7CA-489E-4188-B73A-3C3B7B66D2FE&lt;br /&gt;
 [-] First LBA: 1050624&lt;br /&gt;
  =&amp;gt; Disk Offset: 0x20100000&lt;br /&gt;
 [-] Last LBA: 209713151&lt;br /&gt;
  =&amp;gt; Disk Offset: 0x18FFEFFE00&lt;br /&gt;
 [-] Attribute flags: 0, System Partition&lt;br /&gt;
 [-] Partition Name:&lt;/p&gt;
</description>
        <pubDate>Mon, 06 May 2019 11:02:16 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/linux/2019/05/06/GUID-Partition-Table</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/linux/2019/05/06/GUID-Partition-Table</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Chapter 5: UART를 구현해보자!</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Source Code는 &lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/Chapter-5/src&quot;&gt;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/Chapter-5/src&lt;/a&gt;에 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;UART(범용 비동기화 송수신기: Universal asynchronous receiver/transmitter)는 병렬 데이터의 형태를 직렬 방식으로 전환하여 데이터를 전송하는 컴퓨터 하드웨어의 일종이다. UART는 일반적으로 EIA RS-232, RS-422, RS-485와 같은 통신 표준과 함께 사용한다.
&lt;a href=&quot;https://ko.wikipedia.org/wiki/UART&quot;&gt;Wikipedia - UART&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mini UART를 사용하여 UART를 구현해보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;uart_init--uart-initialization&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uart_init()&lt;/code&gt; : UART Initialization&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUXENB&lt;/code&gt; Register의 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;번 비트(Mini UART enable)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_ENABLES.png&quot; alt=&quot;AUXENB&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_CNTL_REG&lt;/code&gt; Register의 모든 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;으로 설정합니다. Tx, Rx가 비활성화 됩니다.  &lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_CNTL.png&quot; alt=&quot;AUX_MU_CNTL_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_LCR_REG&lt;/code&gt; Register의 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;번, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;번 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;으로 설정합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;번 비트는 8-bit mode를 사용하도록 설정되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;번 비트 또한 같은 이유로 설정되어야 합니다.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;문서에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;번 비트가 Reserved라고 표기 되어있지만 이렇게 하지 않으면 정상적인 데이터가 전송되지 않습니다.&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://elinux.org/BCM2835_datasheet_errata#p14&quot;&gt;BCM2835 datasheet errata #14P&lt;/a&gt;에 BCM2835 Datasheet의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_LCR_REG&lt;/code&gt;의 틀린 부분이 언급되어 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_LCR.png&quot; alt=&quot;AUX_MU_LCR_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_MCR_REG&lt;/code&gt; Register의 모든 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;으로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_MCR.png&quot; alt=&quot;AUX_MU_MCR_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_IER_REG&lt;/code&gt; Register의 모든 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;으로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_IER.png&quot; alt=&quot;AUX_MU_IER_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_IIR_REG&lt;/code&gt; Register의 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;11000001&lt;/code&gt;로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_IIR.png&quot; alt=&quot;AUX_MU_IIR_REG&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;Interrupt Pending[&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;], FIFO Enable[&lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_BAUD&lt;/code&gt; Register를 &lt;code class=&quot;highlighter-rouge&quot;&gt;270&lt;/code&gt;으로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_BAUD.png&quot; alt=&quot;AUX_MU_BAUD&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baudrate = system_clock_freq / 8 * (baudrate_reg + 1)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baudrate_reg&lt;/code&gt; 계산 방법:&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baudrate_reg = (system_clock_freq / 8 * baudrate) - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baudrate_reg = (250000000 / 8 * 115200) - 1 = 270.267‥ ≈ 270&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPFSEL1&lt;/code&gt; Register에서 GPIO 14, 15 Pin을 ‘Alternate function 5’로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/alternative_function_assignments_gpio_14_15.png&quot; alt=&quot;Alternative Function Assignments&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/GPFSEL1.png&quot; alt=&quot;GPFSEL1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUD&lt;/code&gt; Register의 [&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;]을 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;으로 설정합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/GPPUD.png&quot; alt=&quot;GPPUD&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;Off - Disable Pull-up/down&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUDCLK0&lt;/code&gt; Register에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;14&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt;번 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;로 설정합니다.&lt;br /&gt;
(GPIO Pin 14, 15를 Assert Clock on line으로 만듭니다)&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/GPPUDCLK0.png&quot; alt=&quot;GPPUDCLK0&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUDCLK0&lt;/code&gt; Register를 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;으로 설정하여, 모든 GPIO Pin을 No Effect로 만듭니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;9번 ~ 11번 과정 설명 :&lt;/strong&gt;&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUD&lt;/code&gt;에 기록하여 필요한 control signal를 설정합니다.&lt;/li&gt;
    &lt;li&gt;control signal를 설정하기 위해 150 사이클을 기다립니다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUD&lt;/code&gt;에서 수정한 GPIO의 control signal에 clock을 보내기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUDCLK0&lt;/code&gt;에서도 해당 GPIO 핀을 수정합니다.&lt;/li&gt;
    &lt;li&gt;150 사이클을 기다립니다.&lt;/li&gt;
    &lt;li&gt;‘1’에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUD&lt;/code&gt;에 기록했던 GPIO의 설정을 제거합니다.&lt;/li&gt;
    &lt;li&gt;‘3’에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPPUDCLK0&lt;/code&gt;에 기록했던 GPIO의 설정을 제거합니다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_CNTL_REG&lt;/code&gt; Register의 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;번 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;로 설정하여 Tx, Rx를 활성화 합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_CNTL.png&quot; alt=&quot;AUX_MU_CNTL_REG&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* initialize UART */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;AUX_ENABLES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Mini UART 활성화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_CNTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Tx, Rx 비활성화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_LCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Data size : 8-bit mode
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_MCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AUX_MU_IER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AUX_MU_IIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Interrupts 비활성화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_BAUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Baudrate를 115200로 설정
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// UART1 GPIO pins setting
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GPFSEL1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// GPIO 14, 15핀을 alternate function 5로 설정
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GPPUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// GPIO 14, 15핀 활성화
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GPPUDCLK0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GPPUDCLK0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Flush GPIO setup
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_CNTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Tx, Rx 활성화
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;uart_send--send-a-character&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uart_send()&lt;/code&gt; : Send a character&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_LSR_REG&lt;/code&gt; Register의 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;번째 비트인 ‘Transmitter Empty’를 확인합니다.
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_LSR.png&quot; alt=&quot;AUX_MU_LSR_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘Transmitter Empty’가 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_IO_REG&lt;/code&gt;에 Data를 넣어 Buffer에 문자를 기록합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_IO.png&quot; alt=&quot;AUX_MU_IO_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Send a character */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// AUX_MU_LSR의 Transmitter Empty 비트가 '1'이 될 때까지 대기합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX_MU_LSR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Buffer에 문자를 기록합니다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_IO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;uart_getc--receive-a-character&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uart_getc()&lt;/code&gt; : Receive a character&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_LSR_REG&lt;/code&gt; Register의 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;번째 비트인 ‘Data ready’를 확인합니다.
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_LSR.png&quot; alt=&quot;AUX_MU_LSR_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘Data ready’가 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUX_MU_IO_REG&lt;/code&gt;의 Data를 읽어 반환합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/AUX_MU_IO.png&quot; alt=&quot;AUX_MU_IO_REG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*  Receive a character */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_getc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Buffer에 무엇인가 있을때까지 대기합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX_MU_LSR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// AUX_MU_IO에서 값을 읽어오고 return 합니다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX_MU_IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// '\r'를 '\n'으로 변환합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;uart_puts--display-a-string&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uart_puts()&lt;/code&gt; : Display a string&lt;/h3&gt;

&lt;p&gt;앞에서 만들었던 &lt;code class=&quot;highlighter-rouge&quot;&gt;uart_send()&lt;/code&gt;를 사용하여, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;의 index를 1씩 더하며 &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;이 될 때까지 &lt;code class=&quot;highlighter-rouge&quot;&gt;uart_send(*string++);&lt;/code&gt;을 호출합니다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Display a string */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// '\n'를 '\r'으로 변환합니다.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Makefile :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SRCS = $(wildcard *.c)
OBJS = $(SRCS:.c=.o)
CFLAGS = -Wall -O2 -ffreestanding -nostdinc -nostdlib -nostartfiles

all: clean kernel.bin

boot.o: boot.S
	arm-none-eabi-gcc $(CFLAGS) -c boot.S -o boot.o

%.o: %.c
	arm-none-eabi-gcc $(CFLAGS) -c $&amp;lt; -o $@

kernel.bin: boot.o $(OBJS)
	arm-none-eabi-ld -nostdlib -nostartfiles boot.o $(OBJS) -Map kernel.map -T linker.ld -o kernel.elf
	arm-none-eabi-objcopy kernel.elf -O binary kernel.bin
	arm-none-eabi-objdump -D kernel.elf &amp;gt; kernel.dump

clean:
	rm kernel.elf kernel.bin kernel.dump kernel.map *.o &amp;gt;/dev/null 2&amp;gt;/dev/null || true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;boot.S :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.section &quot;.text.boot&quot;

.global _start

_start:
	bl      main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;gpio.h :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define MMIO_BASE       0x20000000
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* GPIO registers */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define GPFSEL1         (*(volatile unsigned int*)(MMIO_BASE+0x00200004))
#define GPPUD           (*(volatile unsigned int*)(MMIO_BASE+0x00200094))
#define GPPUDCLK0       (*(volatile unsigned int*)(MMIO_BASE+0x00200098))
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Auxilary mini UART registers */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define AUX_ENABLES     (*(volatile unsigned int*)(MMIO_BASE+0x00215004))
#define AUX_MU_IO       (*(volatile unsigned int*)(MMIO_BASE+0x00215040))
#define AUX_MU_IER      (*(volatile unsigned int*)(MMIO_BASE+0x00215044))
#define AUX_MU_IIR      (*(volatile unsigned int*)(MMIO_BASE+0x00215048))
#define AUX_MU_LCR      (*(volatile unsigned int*)(MMIO_BASE+0x0021504C))
#define AUX_MU_MCR      (*(volatile unsigned int*)(MMIO_BASE+0x00215050))
#define AUX_MU_LSR      (*(volatile unsigned int*)(MMIO_BASE+0x00215054))
#define AUX_MU_CNTL     (*(volatile unsigned int*)(MMIO_BASE+0x00215060))
#define AUX_MU_BAUD     (*(volatile unsigned int*)(MMIO_BASE+0x00215068))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;linker.ld :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SECTIONS
{
    . = 0x8000;
    .text : { KEEP(*(.text.boot)) *(.text .text.* .gnu.linkonce.t*) }
    .rodata : { *(.rodata .rodata.* .gnu.linkonce.r*) }
    PROVIDE(_data = .);
    .data : { *(.data .data.* .gnu.linkonce.d*) }
    .bss (NOLOAD) : {
        . = ALIGN(16);
        __bss_start = .;
        *(.bss .bss.*)
        *(COMMON)
        __bss_end = .;
    }
    _end = .;

   /DISCARD/ : { *(.comment) *(.gnu*) *(.note*) *(.eh_frame*) }
}
__bss_size = (__bss_end - __bss_start)&amp;gt;&amp;gt;3;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;uart.h :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_getc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;uart.c :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;gpio.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * initialize UART
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;AUX_ENABLES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Mini UART 활성화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_CNTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Tx, Rx 비활성화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_LCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Data size : 8-bit mode
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_MCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AUX_MU_IER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AUX_MU_IIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Interrupts 비활성화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_BAUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Baudrate를 115200로 설정
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// UART1 GPIO pins setting
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GPFSEL1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// GPIO 14, 15핀을 alternate function 5로 설정
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GPPUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// GPIO 14, 15핀 활성화
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GPPUDCLK0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GPPUDCLK0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Flush GPIO setup
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_CNTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Tx, Rx 활성화
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Send a character
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// AUX_MU_LSR의 Transmitter Empty 비트가 '1'이 될 때까지 대기합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX_MU_LSR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Buffer에 문자를 기록합니다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;AUX_MU_IO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Receive a character
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_getc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Buffer에 무엇인가 있을때까지 대기합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX_MU_LSR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// AUX_MU_IO에서 값을 읽어오고 return 합니다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX_MU_IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// '\r'를 '\n'으로 변환합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Display a string
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// '\n'를 '\r'으로 변환합니다.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;main.c :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;uart.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// UART 초기화
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;uart_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// &quot;Hello World!&quot;를 UART로 출력
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;uart_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uart_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Raspberry Pi Zero UART&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// UART 입력되는 것을 UART로 출력 (Echo 기능)
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uart_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_getc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-5/putty.png&quot; alt=&quot;Putty&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Mar 2019 14:07:05 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-5</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-5</guid>
        
        
        <category>Simple-ARM-Operating-System</category>
        
      </item>
    
      <item>
        <title>Chapter 4: GPIO를 제어해보자! (C)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Source Code는 &lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/Chapter-4/src&quot;&gt;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/Chapter-4/src&lt;/a&gt;에 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
‘&lt;a href=&quot;https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-3&quot;&gt;Chapter 3: GPIO를 제어해보자! (ARM Assembly)&lt;/a&gt;‘에서는 ARM Assembly를 사용하여 GPIO를 제어했습니다.&lt;br /&gt;
이번에는 ARM Assembly에서 C함수를 호출하여 GPIO를 제어해보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;raspberry-pi-zero-act-led-toggle&quot;&gt;Raspberry Pi Zero ACT LED Toggle&lt;/h3&gt;

&lt;p&gt;이번 장에서는 ACT LED가 계속 꺼졌다가 켜지는 것을 구현해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;ARM Assembly 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bl main&lt;/code&gt;으로 C코드에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; 함수를 호출합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.S&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;.section &quot;.text.boot&quot;
.globl _start

_start:
  mov sp,#0x8000   @ Stack Pointer를 Kernel이 시작하는 지점인 0x8000으로 설정합니다.
  bl main          @ C함수 중에서 main이라는 함수를 호출합니다.

.end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GPIO를 C로 제어하기 전에 &lt;code class=&quot;highlighter-rouge&quot;&gt;gpio.h&lt;/code&gt;를 작성하도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define MMIO_BASE       0x20000000
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* System Timer Counter registers */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define SYSTMR_LO       (*(volatile unsigned int*)(MMIO_BASE+0x00003004))
#define SYSTMR_HI       (*(volatile unsigned int*)(MMIO_BASE+0x00003008))
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* GPIO registers */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define GPFSEL4         (*(volatile unsigned int*)(MMIO_BASE+0x00200010))
#define GPSET1          (*(volatile unsigned int*)(MMIO_BASE+0x00200020))
#define GPCLR1          (*(volatile unsigned int*)(MMIO_BASE+0x0020002C))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;준비과정은 다 끝났습니다. 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt;에서 GPIO를 제어해봅시다.&lt;br /&gt;
아래의 코드는 ACT LED를 ON하는 코드입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;gpio.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GPFSEL4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// GPFSEL4의 21번 비트를 1로 설정합니다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GPSET1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// GPSET1의 15번 비트를 1로 설정합니다.
&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;// GPIO 47번을 LOW (ACT LED ON)
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 우리는 1초마다 ACT LED가 ON, OFF되는것을 구현하고 싶으니 Delay 함수를 구현해야합니다.&lt;br /&gt;
Delay 함수는 System Timer Counter 레지스터를 사용하면 쉽게 구현이 가능합니다.
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-4/2019-03-04-Simple-ARM-Operating-System-Chapter-4_1.png&quot; alt=&quot;System Timer Counter 레지스터&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delay.h&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_system_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_msec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delay.c&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;gpio.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * Get System Timer's counter
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_system_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSTMR_HI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSTMR_LO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// System Timer Counter Higher 32 bits가 변경되면, 위의 작업을 다시 합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSTMR_HI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSTMR_HI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSTMR_LO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Wait N microseconds
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait_msec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_system_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 무한 루프를 피하기 위하여 t의 값이 0이 아닌지 확인합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_system_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Delay 함수도 구현했으니, 이제 1초마다 ACT LED가 ON, OFF되게 해봅시다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;gpio.h&quot;
#include &quot;delay.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GPFSEL4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// GPFSEL4의 21번 비트를 1로 설정합니다.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPSET1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// GPSET1의 15번 비트를 1로 설정합니다.
&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;// GPIO 47번을 LOW (ACT LED ON)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;wait_msec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1초 Delay
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GPCLR1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// GPCLR1의 15번 비트를 1로 설정합니다.
&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;// GPIO 47번을 HIGH (ACT LED OFF)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;wait_msec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1초 Delay
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linker.ld&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SECTIONS
{
    . = 0x8000;
    .text : { *(.text.boot) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SRCS = $(wildcard *.c)
OBJS = $(SRCS:.c=.o)
CFLAGS = -O2 -Wall -fpic -ffreestanding

all: clean kernel.bin

boot.o: boot.S
	arm-none-eabi-gcc $(CFLAGS) -c boot.S -o boot.o

%.o: %.c
	arm-none-eabi-gcc $(CFLAGS) -c $&amp;lt; -o $@

kernel.bin: boot.o $(OBJS)
	arm-none-eabi-gcc -T linker.ld -o kernel.elf -ffreestanding -O2 -nostdlib boot.o $(OBJS)
	arm-none-eabi-objcopy kernel.elf -O binary kernel.bin
	arm-none-eabi-objdump -D kernel.elf &amp;gt; kernel.dump

clean:
	rm kernel.elf kernel.bin kernel.dump *.o &amp;gt;/dev/null 2&amp;gt;/dev/null || true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;작성한-코드를-빌드하여-실제-raspberry-pi-zero에서-실행해보자&quot;&gt;작성한 코드를 빌드하여 실제 Raspberry Pi Zero에서 실행해보자!&lt;/h3&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;까지 모두 작성했다면 터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;를 입력하여 빌드합니다.&lt;br /&gt;
빌드가 완료되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel.bin&lt;/code&gt; 파일이 생성됩니다.&lt;/p&gt;

&lt;p&gt;SDCard를 FAT32로 포맷합니다.&lt;br /&gt;
그리고, &lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/References/boot&quot;&gt;/References/boot&lt;/a&gt;에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootcode.bin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;config.txt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;start.elf&lt;/code&gt;를 모두 복사합니다.&lt;br /&gt;
방금 빌드한 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel.bin&lt;/code&gt;도 함께 복사합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-4/2019-03-04-Simple-ARM-Operating-System-Chapter-4_2.png&quot; alt=&quot;SDCard files&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;SDCard에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.txt&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel=kernel.bin&lt;/code&gt;이라는 설정만 있습니다. 이 설정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel.bin&lt;/code&gt;을 사용하여 부팅하겠다는 뜻입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SDCard를 Raspberry Pi Zero에 넣고, 부팅하면 아래와 같이 ACT LED가 켜지고 꺼지는 것을 확인할 수 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-4/2019-03-04-Simple-ARM-Operating-System-Chapter-4_3.gif&quot; alt=&quot;Raspberry Pi Zero ACT LED On Off&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Mar 2019 14:07:04 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-4</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-4</guid>
        
        
        <category>Simple-ARM-Operating-System</category>
        
      </item>
    
      <item>
        <title>Chapter 3: GPIO를 제어해보자! (ARM Assembly)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Source Code는 &lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/Chapter-3/src&quot;&gt;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/Chapter-3/src&lt;/a&gt;에 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
ARM Assembly로 Raspberry Pi Zero의 GPIO를 제어하여 ACT LED를 켜고 끄는 것을 만들어보겠습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-3/2019-03-04-Simple-ARM-Operating-System-Chapter-3_1.png&quot; alt=&quot;Raspberry Pi Zero ACT LED&quot; /&gt;&lt;br /&gt;
Raspberry Pi Zero의 ACT LED는 GPIO &lt;code class=&quot;highlighter-rouge&quot;&gt;47&lt;/code&gt;을 사용하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;gpio-general-purpose-inputoutput&quot;&gt;GPIO (General Purpose Input/Output)&lt;/h3&gt;

&lt;p&gt;모든 GPIO 핀은 소프트웨어로 입력 또는 출력 핀으로 지정 될 수 있으며 다양한 목적으로 사용됩니다.&lt;br /&gt;
이번 예제에서는 GPIO 4번에 연결된 LED를 켜보겠습니다.&lt;/p&gt;

&lt;p&gt;우선 코드를 작성하기전에 라즈베리파이의 Memory Map부터 보도록 하겠습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;BCM2835-ARM-Peripherals.pdf&lt;/code&gt;의 5페이지를 보면 라즈베리파이1의 Memory Map은 아래와 같다고 설명하고 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-3/2019-03-04-Simple-ARM-Operating-System-Chapter-3_2.png&quot; alt=&quot;BCM2835 ARM Peripherals&quot; /&gt;&lt;br /&gt;
그림을 보면 BCM2835를 사용하는 Raspberry Pi Zero의 I/O Peripherals의 물리 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20000000&lt;/code&gt;에서 시작한다고 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;시스템 메모리는 ARM과 VC 파트로 분할되며, 부분적으로 공유됩니다. (예를 들면, Frame Buffer)&lt;/li&gt;
  &lt;li&gt;ARM의 메모리 매핑 된 레지스터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20000000&lt;/code&gt;부터 시작합니다.
    &lt;ul&gt;
      &lt;li&gt;BCM2835 메뉴얼에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7E000000&lt;/code&gt; 오프셋을 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20000000&lt;/code&gt;로 사용하면 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Raspberry Pi Zero의 GPIO는 아래와 같습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-3/2019-03-04-Simple-ARM-Operating-System-Chapter-3_3.png&quot; alt=&quot;Raspberry Pi Zero GPIO&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GPIO 핀의 번호 배정은 숫자 순서가 아닙니다.&lt;br /&gt;
GPIO 핀 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;은 라즈베리파이 보드의 물리적 핀 &lt;code class=&quot;highlighter-rouge&quot;&gt;27&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;28&lt;/code&gt;에 있지만 고급 사용을 위해 예약되어 있습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BCM2835-ARM-Peripherals.pdf&lt;/code&gt;의 90 페이지를 보면, GPIO는 아래와 같이 41개의 레지스터를 가지고 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Address&lt;/th&gt;
      &lt;th&gt;Field Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th&gt;Read/Write&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0000&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFSEL0&lt;/td&gt;
      &lt;td&gt;GPIO Function Select 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0004&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFSEL1&lt;/td&gt;
      &lt;td&gt;GPIO Function Select 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0008&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFSEL2&lt;/td&gt;
      &lt;td&gt;GPIO Function Select 2&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 000C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFSEL3&lt;/td&gt;
      &lt;td&gt;GPIO Function Select 3&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0010&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFSEL4&lt;/td&gt;
      &lt;td&gt;GPIO Function Select 4&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0014&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFSEL5&lt;/td&gt;
      &lt;td&gt;GPIO Function Select 5&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0018&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 001C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPSET0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Output Set 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0020&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPSET1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Output Set 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0024&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0028&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPCLR0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Output Clear 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 002C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPCLR1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Output Clear 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0030&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0034&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPLEV0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Level 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0038&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPLEV1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Level 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 003C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0040&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPEDS0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Event Detect Status 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0044&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPEDS1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Event Detect Status 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0048&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 004C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPREN0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Rising Edge Detect Enable 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0050&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPREN1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Rising Edge Detect Enable 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0054&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0058&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFEN0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Falling Edge Detect Enable 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 005C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPFEN1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Falling Edge Detect Enable 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0060&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0064&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPHEN0&lt;/td&gt;
      &lt;td&gt;GPIO Pin High Detect Enable 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0068&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPHEN1&lt;/td&gt;
      &lt;td&gt;GPIO Pin High Detect Enable 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 006C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0070&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPLEN0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Low Detect Enable 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0074&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPLEN1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Low Detect Enable 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0078&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 007C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPAREN0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Async. Rising Edge Detect 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0080&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPAREN1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Async. Rising Edge Detect 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0084&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0088&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPAFEN0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Async. Falling Edge Detect 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 008C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPAFEN1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Async. Falling Edge Detect 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0090&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0094&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPPUD&lt;/td&gt;
      &lt;td&gt;GPIO Pin Pull-up/down Enable&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 0098&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPPUDCLK0&lt;/td&gt;
      &lt;td&gt;GPIO Pin Pull-up/down Enable Clock 0&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 009C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;GPPUDCLK1&lt;/td&gt;
      &lt;td&gt;GPIO Pin Pull-up/down Enable Clock 1&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 00A0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Reserved&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x 7E20 00B0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Test&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;R/W&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPFSEL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPCLR&lt;/code&gt;와 같이 다양한 레지스터가 있습니다.&lt;/p&gt;

&lt;p&gt;우선 &lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/raw/raspberry-pi-zero/References/documentation/BCM2835-ARM-Peripherals.pdf&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BCM2835-ARM-Peripherals.pdf&lt;/code&gt;&lt;/a&gt;의 91페이지를 보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPFSEL&lt;/code&gt; 레지스터는 GPIO 기능을 선택하는 레지스터라고 설명하고 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GPFSEL0&lt;/code&gt;은 GPIO 0번~9번을 담당하고, [&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;] 비트는 GPIO 0번, [&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;] 비트는 GPIO 1번을 담당하고 있습니다.&lt;br /&gt;
3비트씩 GPIO핀을 담당하고 있으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;000&lt;/code&gt;을 지정하면 입력(Input), &lt;code class=&quot;highlighter-rouge&quot;&gt;001&lt;/code&gt;은 출력(Output)을 설정하게 됩니다.&lt;br /&gt;
GPIO 47번 핀을 출력으로 설정하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPFSEL4&lt;/code&gt; 레지스터의 [&lt;code class=&quot;highlighter-rouge&quot;&gt;23&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;21&lt;/code&gt;] 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;001&lt;/code&gt;로 설정하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/raw/raspberry-pi-zero/References/documentation/BCM2835-ARM-Peripherals.pdf&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BCM2835-ARM-Peripherals.pdf&lt;/code&gt;&lt;/a&gt;의 95페이지를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET&lt;/code&gt;에 대해 설명하고 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET&lt;/code&gt;은 GPIO 핀의 출력을 설정하는 레지스터인데, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET0&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET1&lt;/code&gt;이 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET&lt;/code&gt; 레지스터의 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;번 비트는 GPIO &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;번 핀을 정의하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;을 쓰는 것은 아무 효과가 없습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET0&lt;/code&gt;은 GPIO &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;번 ~ &lt;code class=&quot;highlighter-rouge&quot;&gt;31&lt;/code&gt;번, &lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET1&lt;/code&gt;은 GPIO &lt;code class=&quot;highlighter-rouge&quot;&gt;32&lt;/code&gt;번 ~ &lt;code class=&quot;highlighter-rouge&quot;&gt;53&lt;/code&gt;번을 담당합니다.&lt;br /&gt;
GPIO 47번 핀을 출력(Output)으로 설정했고, LED를 켜고 싶으니 &lt;code class=&quot;highlighter-rouge&quot;&gt;GPSET0&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt;번 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;로 설정하면 됩니다.
메뉴얼을 잘 읽을줄만 알면 작업하기가 편해집니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.S&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;.equ PERI_BASE ,0x20000000             @ Peripheral Base Address
.equ GPIO_BASE ,PERI_BASE + 0x00200000 @ GPIO Base Address

.section &quot;.text.boot&quot;
.globl _start

_start:
    @--------------------------------------------------
    @ ACT LED Blink
    @--------------------------------------------------
    LDR R0 ,=GPIO_BASE                 @ R0에 GPIO_BASE 주소를 넣습니다.
    MOV R1 ,#1                         @ R1에 1을 넣습니다.
    LSL R1 ,#21                        @ R1을 21번 Left Shift하여
                                       @ R1의 21번 비트를 1로 설정합니다
                                       @ 이렇게 하면, GPFSEL0의 [23:21]
                                       @ 비트를 001로 설정하게 됩니다.
    STR R1 ,[R0, #0x0010]              @ R0(0x20200000) + GPFSEL4(0x0010)에
                                       @ R1의 값을 넣습니다.

    MOV R1 ,#1                         @ R1에 1을 넣습니다.
    LSL R1 ,#15                        @ 15번 Left Shift하여 R1의 15번 비트를
                                       @ 1로 설정합니다.
    STR R1 ,[R0, #0x0020]              @ R0(0x20200000) + GPSET1(0x0020)에
                                       @ R1의 값을 넣습니다.
                                       @ GPIO 47번을 LOW로 설정하면 LED가 켜집니다.

    b .                                @ 프로그램이 끝나지 않도록 제자리에서 무한루프

    .end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linker.ld&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SECTIONS
{
    . = 0x8000;
    .text : { *(.text.boot) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SRCS = $(wildcard *.c)
OBJS = $(SRCS:.c=.o)
CFLAGS = -O2 -Wall -Wextra -fpic -ffreestanding -std=gnu99

all: clean kernel.bin

boot.o: boot.S
	arm-none-eabi-gcc $(CFLAGS) -c boot.S -o boot.o

kernel.bin: boot.o $(OBJS)
	arm-none-eabi-gcc -T linker.ld -o kernel.elf -ffreestanding -O2 -nostdlib boot.o
	arm-none-eabi-objcopy kernel.elf -O binary kernel.bin
	arm-none-eabi-objdump -D kernel.elf &amp;gt; kernel.dump

clean:
	rm kernel.elf kernel.bin *.o &amp;gt;/dev/null 2&amp;gt;/dev/null || true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;작성한-코드를-빌드하여-실제-raspberry-pi-zero에서-실행해보자&quot;&gt;작성한 코드를 빌드하여 실제 Raspberry Pi Zero에서 실행해보자!&lt;/h3&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;까지 모두 작성했다면 터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;를 입력하여 빌드합니다.&lt;br /&gt;
빌드가 완료되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel.bin&lt;/code&gt; 파일이 생성됩니다.&lt;/p&gt;

&lt;p&gt;SDCard를 FAT32로 포맷합니다.&lt;br /&gt;
그리고, &lt;a href=&quot;https://github.com/LeeKyuHyuk/Simple-ARM-Operating-System/tree/raspberry-pi-zero/References/boot&quot;&gt;/References/boot&lt;/a&gt;에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootcode.bin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;config.txt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;start.elf&lt;/code&gt;를 모두 복사합니다.&lt;br /&gt;
방금 빌드한 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel.bin&lt;/code&gt;도 함께 복사합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-3/2019-03-04-Simple-ARM-Operating-System-Chapter-3_4.png&quot; alt=&quot;SDCard files&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;SDCard에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.txt&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel=kernel.bin&lt;/code&gt;이라는 설정만 있습니다. 이 설정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel.bin&lt;/code&gt;을 사용하여 부팅하겠다는 뜻입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SDCard를 Raspberry Pi Zero에 넣고, 부팅하면 아래와 같이 ACT LED가 켜지는 것을 확인할 수 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-3/2019-03-04-Simple-ARM-Operating-System-Chapter-3_5.png&quot; alt=&quot;Raspberry Pi Zero ACT LED On&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Mar 2019 14:07:03 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-3</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-3</guid>
        
        
        <category>Simple-ARM-Operating-System</category>
        
      </item>
    
      <item>
        <title>Chapter 2: ARM Assembly 기초</title>
        <description>&lt;p&gt;작업에 들어가기 전에 ARM Assembly에 대해 배워보도록 합시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ARM CPU의 기본 구성
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt;~&lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt; 총 15개의 범용 레지스터를 가지고 있습니다.&lt;/li&gt;
      &lt;li&gt;범용 레지스터 &lt;code class=&quot;highlighter-rouge&quot;&gt;R13&lt;/code&gt;는 특수 레지스터 &lt;code class=&quot;highlighter-rouge&quot;&gt;SP&lt;/code&gt;로 사용됩니다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SP&lt;/code&gt;는 C언어 사용시 스택의 주소를 저장하는 레지스터입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;범용 레지스터 &lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt;는 특수 레지스터 &lt;code class=&quot;highlighter-rouge&quot;&gt;LR&lt;/code&gt;로 사용됩니다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LR&lt;/code&gt;은 함수 호출 시 되돌아갈 함수의 주소가 저장되는 레지스터입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;범용 레지스터 &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;는 특수 레지스터 &lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt;로 사용됩니다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt;는 다음 실행할 프로그램의 주소를 가지고 있는 레지스터입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;이라는 상태 레지스터를 가지고 있습니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_1.jpg&quot; alt=&quot;Operand&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt;는 반드시 레지스터(&lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt;~&lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;)이어야 합니다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OP1&lt;/code&gt;은 항상 레지스터 입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OP2&lt;/code&gt;는 레지스터 일수도 있고, 레지스터가 아닐수도 있습니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ldr-str-쉽게-이해하는-방법&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OP2&lt;/code&gt;의 대상으로 직접 외부 메모리를 접근할수 없습니다.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;load-store&quot;&gt;Load, Store&lt;/h3&gt;

&lt;h4 id=&quot;mov-명령&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; 명령&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;ARM에서 레지스터의 데이터 이동은 &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; 명령을 사용합니다.
    &lt;ul&gt;
      &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV R0, R1&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;의 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt;으로 복사&lt;/li&gt;
      &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV R0, #1&lt;/code&gt; : 상수 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt;으로 복사&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메모리→레지스터 : &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt; (Load to Register)&lt;/li&gt;
  &lt;li&gt;레지스터→메모리 : &lt;code class=&quot;highlighter-rouge&quot;&gt;STR&lt;/code&gt; (Store to Memory)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;상수-값을-레지스터에-저장&quot;&gt;상수 값을 레지스터에 저장&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt; 명령 사용 방법
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR Rn, =Value&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;을 사용하여 상수의 값을 레지스터에 저장할때 &lt;code class=&quot;highlighter-rouge&quot;&gt;=Value&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;를 빼먹지 않게 주의합니다.&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;다른 명령어에서는 상수 입력에 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;이 들어가지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;만 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;이 들어가니 주의합시다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;레지스터간 데이터 복사는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;를 사용합니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rn&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt; ~ &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt; (대소문자 구분 없음)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=Value&lt;/code&gt; : 상수 값 (최대 4바이트)
        &lt;ul&gt;
          &lt;li&gt;10진수 :
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;예)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;41&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-27&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;16진수 :
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;예)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1234&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-0x1EF&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR R0, =100&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR R13, =0x1234&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;상수-표현&quot;&gt;상수 표현&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OP2&lt;/code&gt;의 상수는 8비트의 값고 짝수 비트 ROR(Rotate Right)로 표현되어야 합니다.
    &lt;ul&gt;
      &lt;li&gt;32비트 명령 안에서 상수 값을 함께 저장하다보니 범위 제한이 발생하기 때문입니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;~&lt;code class=&quot;highlighter-rouge&quot;&gt;255&lt;/code&gt; 범위의 상수는 무조건 사용이 가능합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;사용된-상수가-mov-명령에서-사용-가능한지-불가능한지-판단해보자&quot;&gt;사용된 상수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; 명령에서 사용 가능한지 불가능한지 판단해보자&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV  R0, #0x7F00&lt;/code&gt; : &lt;strong&gt;가능&lt;/strong&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_2.png&quot; alt=&quot;Example1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV  R0, #0x30C0&lt;/code&gt; : &lt;strong&gt;가능&lt;/strong&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_3.png&quot; alt=&quot;Example2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV  R3, #0x14E&lt;/code&gt; : &lt;strong&gt;불가능&lt;/strong&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_4.png&quot; alt=&quot;Example3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;을 사용하면, &lt;strong&gt;범위 제한 없는 32비트 값으로 표현 가능&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;실제 상수 값은 메모리에 존재하며 레지스터 참조로 변환됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;이 느리지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;은 32비트 데이터를 사용할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;레지스터-간접참조-ldr-str&quot;&gt;레지스터 간접참조 &lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;STR&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;레지스터 간접 참조 :
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR Rd, [Rs]&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rs&lt;/code&gt; 레지스터 값을 메모리 주소로 하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt;에 저장&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt; ~ &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STR Rs, [Rd]&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt; 레지스터 값을 메모리 주소로 하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rs&lt;/code&gt;를 저장&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt; ~ &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;예&quot;&gt;예)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, =0x1000   @ R0에 상수 0x1000 저장
  LDR R1, =80       @ R1에 상수 80 저장
  STR R1, [R0]      @ R0의 값인 0x1000를 메모리 주소로 참조하여
                    @ 0x1000에 상수 80을 저장
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;ldr-str-쉽게-이해하는-방법&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;STR&lt;/code&gt; 쉽게 이해하는 방법&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_5.png&quot; alt=&quot;LDR STR Tip!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;label&quot;&gt;Label&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;START:  MOV R0, #10       @ R0 레지스터에 상수 10을 저장
        STR R0, [R1]      @ R1에 저장되어 있는 주소에 R0 값을 저장
        LDR PC, =START    @ START의 주소를 PC(Program counter)에 저장
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Label은 모두 주소 값(해당 Label 위치의 주소)입니다.&lt;/li&gt;
  &lt;li&gt;위의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;START&lt;/code&gt;의 주소 값을 PC(Program counter)에 저장하여 무한 루프를 하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ldr-str-post-indexing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;STR&lt;/code&gt; Post Indexing&lt;/h3&gt;

&lt;h4 id=&quot;post-indexing-사용-방법&quot;&gt;Post Indexing 사용 방법:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, [R1], #4            @ R1 주소에 있는 값을 R0에 넣고, R1에 4를 더합니다.
  STR R0, [R2], #-4           @ R0의 값을 R2의 주소에 넣고, R2에 4를 뺍니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, [R1], R3            @ R1 주소에 있는 값을 R0에 넣고, R1에 R3의 값을 더합니다.
  STR R0, [R2], -R3           @ R0의 값을 R2의 주소에 넣고, R2에 R3의 값을 뺍니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, [R1], R3, LSL #2    @ R1 주소에 있는 값을 R0에 넣고,
                              @ R1에 R3, LSL #2한 값을 더합니다.
  STR R0, [R2], -R3, ASR #2   @ R2 주소에 있는 값을 R0에 넣고,
                              @ R2에 R3, ASR #2한 값을 뺍니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;예-1&quot;&gt;예)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R1, 0x1000              @ R1에 상수 0x1000을 넣습니다.
                              @ R1 : 0x1000

  LDR R0, [R1], #4            @ R0에 0x1000를 참조한 값(R1의 메모리 참조주소)을 넣고,
                              @ R1에 4를 더합니다.
                              @ R1 : 0x1004

  LDR R2, [R1], #4            @ R2에 0x1004를 참조한 값(R1의 메모리 참조주소)을 넣고,
                              @ R1에 4를 더합니다.
                              @ R1 : 0x1008
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ldr-str-pre-indexing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;STR&lt;/code&gt; Pre Indexing&lt;/h3&gt;

&lt;h4 id=&quot;pre-indexing-사용-방법&quot;&gt;Pre Indexing 사용 방법:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, [R1], #4            @ R1에 4를 더한것을 참조하여 R0에 넣습니다.
  STR R0, [R2], #-4           @ R0의 값을 R2에 4를 뺀 주소에 넣습니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, [R1], R3            @ R1에 R3의 값을 더한것을 참조하여 R0에 넣습니다.
  STR R0, [R2], -R3           @ R0의 값을 R2에 R3의 값을 뺀 주소에 넣습니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, [R1], R3, LSL #2    @ R1에 R3, LSL #2한 값을 더한뒤,
                              @ 주소에 있는 값을 R0에 넣습니다.
  STR R0, [R2], -R3, ASR #2   @ R2에 R3, ASR #2한 값을 뺀뒤,
                              @ R0의 값을 변경된 주소로 넣습니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;예-2&quot;&gt;예)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R1, 0x1000              @ R1에 상수 0x1000을 넣습니다.
                              @ R1 : 0x1000

  LDR R0, [R1, #4]            @ R1에 4를 더한 주소의 참조한 값(0x1004)을 R0에 넣습니다.
                              @ R1 : 0x1000

  LDR R2, [R1, #4]            @ R1에 4를 더한 주소의 참조한 값(0x1004)을 R2에 넣습니다.
                              @ R1 : 0x1000
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pre Indexing에서는 &lt;strong&gt;값이 업데이트 되지 않습니다!&lt;/strong&gt;
만약 값을 업데이트하고 싶다면 아래의 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;(Auto Update) 옵션을 사용해야합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;auto-update-suffix-사용-예시&quot;&gt;’&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;(Auto Update) suffix’ 사용 예시)&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R1, 0x1000              @ R1에 상수 0x1000을 넣습니다.
                              @ R1 : 0x1000

  LDR R0, [R1, #4]!           @ R1에 4를 더한 주소의 참조한 값(0x1004)을 R0에 넣습니다.
                              @ ! suffix가 있으므로, 자동으로 값이 업데이트 됩니다.
                              @ R1 : 0x1004

  LDR R2, [R1, #4]            @ R1에 4를 더한 주소의 참조한 값(0x1008)을 R2에 넣습니다.
                              @ ! suffix가 없으므로, 자동으로 값이 업데이트 되지 않습니다.
                              @ R1 : 0x1004
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;lsl-lsr-shift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LSL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LSR&lt;/code&gt; Shift&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LSL #n&lt;/code&gt; : 최후에 밀려난 비트가 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 C(Carry) flag에 저장
    &lt;ul&gt;
      &lt;li&gt;Logical Shift Left&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LSL&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;signed/unsigned&lt;/code&gt; 곱하기 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LSR #n&lt;/code&gt; : 최후에 밀려난 비트가 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 C(Carry) flag에 저장
    &lt;ul&gt;
      &lt;li&gt;Logical Shift Right&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LSR&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned&lt;/code&gt; 나누기 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;asr-shift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASR&lt;/code&gt; Shift&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASR #n&lt;/code&gt; : MSB(부호)를 유지하고, 밀려난 비트가 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 C(Carry) flag에 저장
    &lt;ul&gt;
      &lt;li&gt;레지스터를 우측으로 지정한 비트 수 만큼 &lt;strong&gt;부호를 유지하며&lt;/strong&gt; Shift합니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASR&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;signed int&lt;/code&gt;의 나누기 2 동작을 수행합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;비트제어-명령어&quot;&gt;비트제어 명령어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ORR&lt;/code&gt; : 원하는 비트만 1로 설정합니다.
    &lt;ul&gt;
      &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;ORR  R0, R0, #0x1F&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;ORR  R0, R1, R2, LSL #2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EOR&lt;/code&gt; : 원하는 비트만 반전 시킵니다.
    &lt;ul&gt;
      &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;EOR  R0, R0, #0x1F&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;EOR  R0, R1, R2, LSL #2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt; : 원하는 비트만 0으로 설정합니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;0인 비트에 0으로 설정합니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;AND  R0, R0, #0x1F&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;AND  R0, R1, R2, LSL #2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BIC&lt;/code&gt; : 원하는 비트만 0으로 설정합니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;1인 비트에 0으로 설정합니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;보다 편리한 장점이 있습니다.&lt;/li&gt;
      &lt;li&gt;예) &lt;code class=&quot;highlighter-rouge&quot;&gt;BIC  R0, R0, #0x1F&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;BIC  R0, R1, R2, LSL #2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;다양한-비트연산&quot;&gt;다양한 비트연산&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[문제]&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1000&lt;/code&gt;의 4~7번 비트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1010&lt;/code&gt;으로 변경하는 어셈블리 코드를 작성하세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_6.png&quot; alt=&quot;Example4&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  LDR R0, =0x1000           @ R0에 상수 0x1000을 넣습니다.
  LDR R1, [R0]              @ R1에 R0을 참조한 값을 넣습니다.
  BIC R1, R1, 0xF &amp;lt;&amp;lt; 4      @ '1111'을 4번 Left Shift하면 '11110000'가 됩니다.
                            @ BIC로 R1의 4~7 비트를 0으로 설정합니다.
  ORR R1, R1, 0xA &amp;lt;&amp;lt; 4      @ '1010'을 4번 Left Shift하면 '10100000'가 됩니다.
                            @ ORR로 R1의 5, 7번 비트를 1로 설정합니다.
  STR R1, [R0]              @ R1의 데이터를 R0에 저장되어있는 메모리주소에 저장합니다.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;분기-명령어&quot;&gt;분기 명령어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 명령 사용 예시:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B add&lt;/code&gt; : Global Label&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B 1f&lt;/code&gt; : Local Label&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B . &lt;/code&gt; : 무한 루프 (&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;은 제자리를 말합니다.)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B R0&lt;/code&gt;와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 명령은 분기 주소로 레지스터를 쓸수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;비교-연산-명령어&quot;&gt;비교 연산 명령어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt; :  &lt;code class=&quot;highlighter-rouge&quot;&gt;CMP Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rn - OP2&lt;/code&gt; 연산을 하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 Flag만 변경합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMN&lt;/code&gt; :  &lt;code class=&quot;highlighter-rouge&quot;&gt;CMN Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rn + OP2&lt;/code&gt; 연산을 하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 Flag만 변경합니다.&lt;/li&gt;
      &lt;li&gt;컴파일러단에서 주로 사용되니, 되도록이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt;를 사용하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TST&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;TST Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rn &amp;amp; OP2&lt;/code&gt; 연산을 하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 Flag만 변경합니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;특정비트를 확인하기 위해 사용됩니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;비교 비트가 &lt;strong&gt;1이면, Z clear, 0이면 Z set&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TEQ&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;TEQ Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rn ^ OP2&lt;/code&gt; 연산을 하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)의 Flag만 변경합니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;두 데이터의 비트가 완전 똑같은지 확인하기 위해 사용됩니다&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;비트 패턴이 &lt;strong&gt;동일하면, Zero set&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;비교연산은 레지스터에 변화가 없으며, Flag만 변합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[문제]&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt;의 7번 비트가 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt; 레지스터에 2를 기록하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt; 레지스터에 3을 기록하는 프로그램을 작성하시오.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;를 사용하여 해결:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  AND R0, R0, #1 &amp;lt;&amp;lt; 7
  CMP R0, #0
  MOVEQ R1, #3
  MOVNE R1, #2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TST&lt;/code&gt;를 사용하여 해결:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  TST R0, #1 &amp;lt;&amp;lt; 7
  MOVEQ R1, #3
  MOVNE R1, #2
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cpsr상태레지스터과-flag&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CPSR&lt;/code&gt;(상태레지스터)과 Flag&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_7.jpg&quot; alt=&quot;CPSR : https://www.wikinote.org/Main/Savitribai-Phule-Pune-University/ENTC/AP-TE/Unit-1/Registers-CPSR-SPSR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;비교 연산을 할때는 NZCV만 사용한다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;N (Negative) : 연산결과가 음수인 경우&lt;/li&gt;
  &lt;li&gt;Z (Zero) : 연산결과가 0인 경우&lt;/li&gt;
  &lt;li&gt;C (Carry) : 덧셈 Carry에 Set, 뺄셈 Borrow에 Clear, Rotate시 밀린 비트 저장&lt;/li&gt;
  &lt;li&gt;V (oVerflow) : &lt;code class=&quot;highlighter-rouge&quot;&gt;signed&lt;/code&gt; 덧셈, 뺄셈 연산 결과로 값의 초과가 발생한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Carry는 덧셈을 했을때 범위를 초과해서 자리 올림이 발생했을때를 말하는것입니다. Overflow와는 다릅니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;상태-플래그와-조건&quot;&gt;상태 플래그와 조건&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  CMP R0, R1
  B□□ LOOP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;□ 부분에 아래의 16가지 조건식이 들어가게 됩니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;약어&lt;/th&gt;
      &lt;th&gt;뜻&lt;/th&gt;
      &lt;th&gt;Flag 상태&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EQ&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Eq&lt;/strong&gt;ual / Equals zero (False)&lt;/td&gt;
      &lt;td&gt;Z set&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NE&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;N&lt;/strong&gt;ot &lt;strong&gt;E&lt;/strong&gt;qual (True)&lt;/td&gt;
      &lt;td&gt;Z clear&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CS&lt;/code&gt;&lt;/strong&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;HS&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Carry Set / Unsigned higher or same&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;C set&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CC&lt;/code&gt;&lt;/strong&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;LO&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Carry Clear / Unsigned Lower&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;C clear&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MI&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Mi&lt;/strong&gt;nus / Negative&lt;/td&gt;
      &lt;td&gt;N set&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Pl&lt;/strong&gt;us / Positive or zero&lt;/td&gt;
      &lt;td&gt;N clear&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VS&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Overflow&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;V s&lt;/strong&gt;et&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;No Overflow&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;V c&lt;/strong&gt;lear&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HI&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Unsigned&lt;/code&gt; &lt;strong&gt;hi&lt;/strong&gt;gher&lt;/td&gt;
      &lt;td&gt;C set and Z clear&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LS&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Unsigned&lt;/code&gt; &lt;strong&gt;l&lt;/strong&gt;ower or &lt;strong&gt;s&lt;/strong&gt;ame&lt;/td&gt;
      &lt;td&gt;C clear and Z set&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GE&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Signed&lt;/code&gt; &lt;strong&gt;g&lt;/strong&gt;reater then or &lt;strong&gt;e&lt;/strong&gt;qual&lt;/td&gt;
      &lt;td&gt;N equals V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LT&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Signed&lt;/code&gt; &lt;strong&gt;l&lt;/strong&gt;ess &lt;strong&gt;t&lt;/strong&gt;han&lt;/td&gt;
      &lt;td&gt;N is not equals V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GT&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Signed&lt;/code&gt; &lt;strong&gt;g&lt;/strong&gt;reater &lt;strong&gt;t&lt;/strong&gt;han&lt;/td&gt;
      &lt;td&gt;Z clear and N equals V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LE&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Signed&lt;/code&gt; &lt;strong&gt;l&lt;/strong&gt;ess than or &lt;strong&gt;e&lt;/strong&gt;qual&lt;/td&gt;
      &lt;td&gt;Z set or N is not equal to V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Al&lt;/strong&gt;ways&lt;/td&gt;
      &lt;td&gt;Any state&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NV&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;N&lt;/strong&gt;e&lt;strong&gt;v&lt;/strong&gt;er&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;주소 연산을 할때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LO&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LS&lt;/code&gt;와 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Unsigned&lt;/code&gt; 비교를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;산술-명령어&quot;&gt;산술 명령어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ADD&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD Rd, Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd := Rs + OP2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ADC&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;ADC Rd, Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd := Rs + OP2 + Carry&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SUB&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB Rd, Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd := Rs - OP2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SBC&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;SBC Rd, Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd := Rs - OP2 - !Carry&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RSB&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;RSB Rd, Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd := OP2 - Rs&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RSC&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;RSC Rd, Rs, OP2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rd := OP2 - Rs - !Carry&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RSB&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RSC&lt;/code&gt;에 있는 R은 Reverse라고 생각합시다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;일정-횟수를-반복하는-프로그램&quot;&gt;일정 횟수를 반복하는 프로그램&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for(i=0; i&amp;lt;10; i++)&lt;/code&gt; 방식&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  MOV R0, #0
1:
  @ 이곳에 코드 작성

  ADD R0, R0, #1
  CMP R0, #10
  BLT 1b
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for(i=10; i&amp;gt;0; i--)&lt;/code&gt; 방식&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  MOV R0, #10
1:
  @ 이곳에 코드 작성

  SUB R0, R0, #1
  CMP R0, #0
  BGT 1b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위의 두 방법도 좋지만, Down Count 방식에 S-Suffix를 사용하는게 더 효율적입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;  MOV R0, #10
1:
  @ 이곳에 코드 작성

  SUBS R0, R0, #1
  BGT 1b
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;서브루틴-호출&quot;&gt;서브루틴 호출&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BL label&lt;/code&gt; : Branch and Link
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BL&lt;/code&gt; : 서브루틴 호출 명령&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt; : 서브루틴의 상대주소 값&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;와 달리 복귀한 주소(따음 명령 주소) 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt;에 저장합니다.&lt;br /&gt;
&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-2/2019-03-04-Simple-ARM-Operating-System-Chapter-2_8.png&quot; alt=&quot;Subroutine&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BL&lt;/code&gt;은 분기 주소로 레지스터를 사용하지 못합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;서브루틴-호출과-복귀&quot;&gt;서브루틴 호출과 복귀&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;서브루틴 호출&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;BL label&lt;/code&gt;):
    &lt;ol&gt;
      &lt;li&gt;복귀할 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;LR&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt;)에 저장합니다.&lt;/li&gt;
      &lt;li&gt;서브루틴의 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;)에 저장합니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;서브루틴 복귀&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;BX LR&lt;/code&gt;):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LR&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt;)의 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;)에 저장하여 복귀합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;왜 함수라고 하지 않고 서브루틴이라고 부를까?
    &lt;ul&gt;
      &lt;li&gt;함수는 다른 값들에 영향을 주지 않지만, 서브루틴은 다른 값들에 영향을 줄수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;특수용도-레지스터&quot;&gt;특수용도 레지스터&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;레지스터&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;용도&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SP&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;R13&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Stack Pointer&lt;/td&gt;
      &lt;td&gt;C언어 사용시 스택의 주소를 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LR&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Link Register&lt;/td&gt;
      &lt;td&gt;함수 호출 시 되돌아갈 함수의 주소가 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Program Counter&lt;/td&gt;
      &lt;td&gt;프로그램 수행 시 읽어오는 명령의 주소를 저장&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CPSR&lt;/td&gt;
      &lt;td&gt;Current Program Status Register&lt;/td&gt;
      &lt;td&gt;연산결과, IRQ, FIQ금지, 동작모드 등을 저장&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SP&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LR&lt;/code&gt;은 일반 레지스터로 사용해도 무방합니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 04 Mar 2019 14:07:02 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-2</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-2</guid>
        
        
        <category>Simple-ARM-Operating-System</category>
        
      </item>
    
      <item>
        <title>Chapter 1: Cross Compiler를 빌드하고, 빌드환경을 구축해보자!</title>
        <description>&lt;h3 id=&quot;build-cross-compiler&quot;&gt;Build Cross Compiler&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;크로스 컴파일러(Cross Compiler)는 컴파일러가 실행되는 플랫폼이 아닌 다른 플랫폼에서 실행 가능한 코드를 생성할 수 있는 컴파일러이다.&lt;br /&gt;
크로스 컴파일러 툴은 임베디드 시스템 혹은 여러 플랫폼에서 실행파일을 생성하는데 사용된다.
이것은 운영 체제를 지원하지 않는 마이크로컨트롤러와 같이 컴파일이 실현 불가능한 플랫폼에 컴파일하는데 사용된다.&lt;br /&gt;
이것은 시스템이 사용하는데 하나 이상의 플랫폼을 쓰는 반가상화에 이 도구를 사용하는 것이 더 일반적이게 되었다.&lt;br /&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/크로스%20컴파일러&quot;&gt;Wikipedia - 크로스 컴파일러&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://kyuhyuk.kr/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-1/2019-03-04-Simple-ARM-Operating-System-Chapter-1_1.png&quot; alt=&quot;GNU GCC Cross Compiler&quot; /&gt;&lt;br /&gt;
Picture Source : &lt;em&gt;&lt;a href=&quot;https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler&quot;&gt;Preshing on Programming - How to Build a GCC Cross-Compiler
&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-1-download-source-code&quot;&gt;Step 1. Download Source code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://ftp.gnu.org/gnu/binutils/binutils-2.31.1.tar.xz
$ wget https://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.xz
$ wget https://ftp.gnu.org/gnu/mpfr/mpfr-4.0.1.tar.xz
$ wget https://ftp.gnu.org/gnu/gmp/gmp-6.1.2.tar.xz
$ wget https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-2-build-gnu-binutils&quot;&gt;Step 2. Build GNU Binutils&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;GNU 바이너리 유틸리티(GNU Binary Utilities) 또는 GNU Binutils는 여러 종류의 오브젝트 파일 형식들을 조작하기 위한 프로그래밍 도구 모음이다.&lt;br /&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/GNU_바이너리_유틸리티&quot;&gt;Wikipedia - GNU 바이너리 유틸리티&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tar xvJf binutils-2.31.1.tar.xz
$ cd binutils-2.31.1
$ ./configure \
  --prefix=/home/leekyuhyuk/workspace/tools \
  --target=arm-none-eabi \
  --disable-libssp \
  --disable-libstdcxx-pch \
  --disable-libunwind-exceptions \
  --disable-linker-build-id \
  --disable-multilib \
  --disable-nls \
  --disable-shared \
  --disable-threads \
  --disable-werror \
  --enable-__cxa_atexit \
  --enable-checking=release \
  --enable-clocale=gnu \
  --enable-default-pie \
  --enable-default-ssp \
  --enable-gnu-indirect-function \
  --enable-gnu-unique-object \
  --enable-install-libiberty \
  --enable-libmpx \
  --enable-lto \
  --enable-plugin \
  --with-gnu-ld \
  --with-linker-hash-style=gnu \
  --with-system-zlib
$ make configure-host
$ make LDFLAGS=&quot;-all-static&quot;
$ make install
$ cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--target&lt;/code&gt;: 컴파일해서 만들어진 바이너리가 만들어내는 바이너리가 실행되는 시스템&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--prefix&lt;/code&gt; : PREFIX에 binutils를 설치합니다.
    &lt;ul&gt;
      &lt;li&gt;원하는 경로를 입력하면 됩니다. 저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/leekyuhyuk/workspace/tools&lt;/code&gt;로 입력하였습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--disable-shared&lt;/code&gt; : Static Library로 빌드합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--disable-nls&lt;/code&gt; : 모든 메세지를 영어로 출력합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-3-build-gnu-gcc&quot;&gt;Step 3. Build GNU GCC&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tar xvJf gcc-8.2.0.tar.xz
$ cd gcc-8.2.0
$ tar xvJf ../gmp-6.1.2.tar.xz
$ mv gmp-6.1.2 gmp
$ tar xvJf ../mpfr-4.0.1.tar.xz
$ mv mpfr-4.0.1 mpfr
$ tar xvzf ../mpc-1.1.0.tar.gz
$ mv mpc-1.1.0 mpc
$ ./configure \
  --prefix=/home/leekyuhyuk/workspace/tools \
  --target=arm-none-eabi \
  --disable-libssp \
  --disable-libstdcxx-pch \
  --disable-libunwind-exceptions \
  --disable-linker-build-id \
  --disable-multilib \
  --disable-shared \
  --disable-threads \
  --disable-werror \
  --enable-__cxa_atexit \
  --enable-checking=release \
  --enable-clocale=gnu \
  --enable-default-pie \
  --enable-default-ssp \
  --enable-gnu-indirect-function \
  --enable-gnu-unique-object \
  --enable-install-libiberty \
  --enable-languages=c \
  --enable-libmpx \
  --enable-lto \
  --enable-plugin \
  --with-cpu=arm1176jzf-s \
  --with-float=hard \
  --with-gnu-ld \
  --with-linker-hash-style=gnu \
  --with-newlib \
  --with-sysroot=/home/leekyuhyuk/workspace/tools/arm-none-eabi \
  --with-system-zlib
$ make configure-host
$ make all-gcc all-target-libgcc
$ make install-gcc install-target-libgcc
$ cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-languages&lt;/code&gt; : Compiler나 Runtime Library들이 어떤걸로 빌드되어야 할지 설정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--with-system-zlib&lt;/code&gt; : GCC가 내부 복사본이 아닌 Host에 있는 zlib Library로 Link하도록 설정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--with-cpu&lt;/code&gt; : Compiler가 어떤 CPU를 대상으로 코드를 만들어낼지 설정합니다.
    &lt;ul&gt;
      &lt;li&gt;Raspberry Pi Zero는 ‘arm1176jzf-s’로 설정합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 04 Mar 2019 14:07:01 +0000</pubDate>
        <link>https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-1</link>
        <guid isPermaLink="true">https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-1</guid>
        
        
        <category>Simple-ARM-Operating-System</category>
        
      </item>
    
  </channel>
</rss>
