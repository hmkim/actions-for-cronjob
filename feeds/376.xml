<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[멍개님의 블로그]]></title>
			<link>http://blog.naver.com/pjt3591oo</link>
			
				<image>
					<url><![CDATA[http://blogpfthumb.phinf.naver.net/20150108_189/pjt3591oo_1420674831487anbDY_PNG/frog.png?type=m2]]></url>
					<title><![CDATA[멍개님의 블로그]]></title>
					<link>http://blog.naver.com/pjt3591oo</link>
				</image>
			
			<description><![CDATA[블록체인과 챗봇을 연구하는 공간 입니다 그 외 다양한걸 공부중입니다  https://stackoverflow.com/story/mung]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Mon, 13 May 2019 08:27:02 +0900</pubDate>

			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[node.js]]></category>
					<title><![CDATA[[node.js] mysql 사용부터 pool 관리까지]]></title>
					<link>http://blog.naver.com/pjt3591oo/221505148267</link>
					<guid>http://blog.naver.com/pjt3591oo/221505148267</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. node.js에서 데이터 베이스를 사용하고 관리하는 방법을 다뤄보겠습니다. 저는 oo 스타트업의 개발팀 팀장으로 근무중입니다.데이터 베이스는 상당히 중요합니다. 특히나 돈이 오고 나가는 시스템에서는 rollback과 commit 처리가 굉장히 엄격합니다.먼저, node.js에서 데이터 베이스를 사용할 때 2가지를 선택해야 합니다. orm의 사용유무에 따라서 사용 라이브러리도 바뀝니다. 저희팀에서는 orm은 추후 쿼리 최적화에 대한 이슈와 복잡한 쿼리를 만들기에는 조금 부족한 부분을 느꼈기 때문에 orm은 사용하지 않았습니다.orm을 쓸 경우 sequelize를 쓰지만 orm을 사용하지 않기 때문에 mysql을 사용합니다........]]></description>
					<pubDate>Thu, 04 Apr 2019 10:00:10 +0900</pubDate>
					<tag><![CDATA[node,mysql,pool,transaction,commit,rollback,database,javascript,promise,release]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[블록체인] 거래소는 시세를 어떻게 형성할까?]]></title>
					<link>http://blog.naver.com/pjt3591oo/221504866885</link>
					<guid>http://blog.naver.com/pjt3591oo/221504866885</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. 오랜만에 재미난 주제를 가지고 글을쓰려고 합니다.바로 거래소의 호가창에 대해서 알아보겠습니다. 먼저 거래소의 기본적인 모습을 알아보겠습니다.거래소마다 다르긴 하겠지만 일반적인 모습입니다. 여기서 호가창이란 등록된 매수(사기)/매도(팔기)를 띄어주는 부분입니다.해당 테이블이 호가정보입니다. 해당 테이블이 어떤것을 의미 하는지 알아보겠습니다.가장 좌측은 매수/매도를 구분짓는 부분입니다. 다음으로 가격과 수량입니다. 매도의 가장 아랫부분을 보면 다수의 사람들이 1001원에 100개의 코인을 팔겠다고 등록한 부분입니다. 한명이 1001원에 100개를 등록했을 수 있고 아닐 수 있습니다.이러.......]]></description>
					<pubDate>Wed, 03 Apr 2019 22:32:10 +0900</pubDate>
					<tag><![CDATA[시장]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[공부, 목표]]></category>
					<title><![CDATA[[공부, 목표] 이력정리]]></title>
					<link>http://blog.naver.com/pjt3591oo/221495272873</link>
					<guid>http://blog.naver.com/pjt3591oo/221495272873</guid>
					<description><![CDATA[https://www.rocketpunch.com/@bagjeongtae/infohttps://stackoverflow.com/users/story/8667760오랜만에 최신화]]></description>
					<pubDate>Sat, 23 Mar 2019 10:18:03 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[Python]]></category>
					<title><![CDATA[[python] progress bar 만들기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221484371247</link>
					<guid>http://blog.naver.com/pjt3591oo/221484371247</guid>
					<description><![CDATA[간혹 크롤러를 만들다가 여러 페이지를 탐색해야 하는 경우 페이지 단위로 sleep을 거는 경우가 종종 있습니다. 이때 프로그래스바를 이용하여 sleep을 표시하면 간지가 날것같은 생각이 들어 한번 만들어 보았습니다.progress_bar()는 최대 몇초까지 딜레이를 할 지 인자값을 받습니다. 만약, 전달하지 않으면 5초를 기본값으로 사용합니다. 1초부터 전달된 수치만큼 랜덤으로 딜레이를 줍니다. 요녀석을 크롤러에 접목해보도록 하겠습니다.잘동작 하는군여근데 살짝 없어 보이니 색상을 추가해보겠습니다.출력하는 부분을 살짝 수정했습니다.멋지게 잘 동작합니다. https://github.com/pjt3591oo/progress_bar마무리는 깃~]]></description>
					<pubDate>Sat, 09 Mar 2019 23:46:25 +0900</pubDate>
					<tag><![CDATA[python,crawler,progress,bar,display]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[공부, 목표]]></category>
					<title><![CDATA[[강의] 이더리움 dapp 만들기 7기 모집]]></title>
					<link>http://blog.naver.com/pjt3591oo/221477307483</link>
					<guid>http://blog.naver.com/pjt3591oo/221477307483</guid>
					<description><![CDATA[안녕하세요 멍개입니다.강의를 2년정도 하면서 오랜만에 8주차 과정으로 진행하게 되었습니다.https://www.fastcampus.co.kr/dev_camp_blockdev/private network 구축하는 과정부터 사용자가 사용할 서비스까지 총 8주간 진행하게 됩니다. 강의 시작은 3월 9일부터~]]></description>
					<pubDate>Thu, 28 Feb 2019 21:39:00 +0900</pubDate>
					<tag><![CDATA[강의,블록체인,이더리움,디앱,blockchain,ethereum,dapp]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[node.js]]></category>
					<title><![CDATA[[node.js] lodash 1 - array mothods]]></title>
					<link>http://blog.naver.com/pjt3591oo/221466064030</link>
					<guid>http://blog.naver.com/pjt3591oo/221466064030</guid>
					<description><![CDATA[이번글에서는 lodash에서 array 메소드들을 알아보도록 하겠습니다.lodash는 array나 object, string같은 데이터 타입을 조작하여 새로운 array, object, strign을 반환해주는 라이브러리 입니다. ● lodash 설치방법 lodash는 일반적으로 _으로 할당 받아서 사용합니다. · chunksize의 길이만큼 분할 한 요소를 각 배열 아이템으로 반환. 만약 균등하게 분할되지 않을경우 마지막에는 남은만큼 할당되어 반환 · compact배열 요소중 0, false, null, undefined, NaN과 같은 false 형태의 데이터를 지워준 후 반환합니다. · concatarray에 [values]를 더하여 새로운 array를 반환합니다. values는 value, array와 같은 데이터를 포함할 수.......]]></description>
					<pubDate>Thu, 14 Feb 2019 22:37:01 +0900</pubDate>
					<tag><![CDATA[javascript,lodash,node,npm,array,object]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[node.js]]></category>
					<title><![CDATA[[node.js] 원하는 형태로 로그(log)를 level 단위로 출력하기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221459061089</link>
					<guid>http://blog.naver.com/pjt3591oo/221459061089</guid>
					<description><![CDATA[안녕하세요. 요즘 거래소 개발중인 멍개입니다.개발을 하다보니 로그가 너무 난잡하게 찍히는 것 같은 느낌도 들고 level 별로 색상을 나눠서 출력하면 참 좋겠다는 생각을 해서 이런저런 라이브러리를 짬뽕하여 직접 만들어봤습니다.· 레벨단위 출력 라이브러리 설치console-log-level 라이브러리를 이용하여 trace, debug, info, warn, error, fatal별로 출력가능 합니다.● 사용법여기서 level을 info로 설정했기 때문에 info ~ fatal까지 출력합니다. 또한 prefix는 로그를 출력할 때 앞 부분에 특정 문구를 넣어줄 수 있습니다. 일반적으로는 다음과 같은 형태를 따릅니다.[level] time msg· 실행결과출력결과는 매우 심플합니다. p.......]]></description>
					<pubDate>Wed, 06 Feb 2019 00:52:33 +0900</pubDate>
					<tag><![CDATA[javascript,node,nodejs,log,level,debug,console,global]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[golang]]></category>
					<title><![CDATA[[golang] cobra 프레임워크를 이용하여 cli 환경 구축]]></title>
					<link>http://blog.naver.com/pjt3591oo/221452097691</link>
					<guid>http://blog.naver.com/pjt3591oo/221452097691</guid>
					<description><![CDATA[이번글에서는 golang에서 제공하는 cobra 프레임워크를 다뤄보도록 하겠습니다. golang는 flag라는 내장 라이브러리가 있는데 flag는 프로젝트 규모가 커지면 관리하기가 힘들어지는 단점이 있습니다. cobra는 컨맨드 인터페이스를 보다 효율적으로 관리할 수 있도록 만들어진 프레임워크입니다.https://blog.naver.com/pjt3591oo/221346506828flag의 사용법은 해당 링크를 통해서 확인할 수 있습니다.● cobra 설치cobra가 설치됬으면 cobra를 이용하여 프로젝트를 생성할 수 있습니다.● 프로젝트 생성github.com/pjt 경로에 cli 프로젝트를 생성합니다.해당 cli 디렉터리를 접근하면 다음과 같은 구조로 생성됬습니다.· main.go· .......]]></description>
					<pubDate>Sun, 27 Jan 2019 12:05:55 +0900</pubDate>
					<tag><![CDATA[golang,go,cli,command,option,flag,git,github,package]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[node.js]]></category>
					<title><![CDATA[[node.js] rpc 서버, 클라이언트 만들기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221448373599</link>
					<guid>http://blog.naver.com/pjt3591oo/221448373599</guid>
					<description><![CDATA[이번글에서는 rpc 서버와 클라이언트를 만들어 보도록 하겠습니다.node에서 rpc를 사용하기 위해서는 node-json-rpc 라이브러리를 사용합니다.· node-json-rpc 설치· 서버addMethod를 이용하여 클라이언트가 호출할 수 있도록 method를 추가합니다.· 클라이언트클라이언트는 node-json-rpc를 이용하여 만들어도 되고 curl을 이용하여 호출해도 됩니다.또는 다음과 같이 curl로 요청할 수 있습니다.rpc는 등록된 메서드를 직접 호출하는 개념입니다.]]></description>
					<pubDate>Tue, 22 Jan 2019 17:34:21 +0900</pubDate>
					<tag><![CDATA[nodejs,node,javascript,rpc,call]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[javascript]]></category>
					<title><![CDATA[[vue.js] vuex를 이용하여 store 관리]]></title>
					<link>http://blog.naver.com/pjt3591oo/221448177190</link>
					<guid>http://blog.naver.com/pjt3591oo/221448177190</guid>
					<description><![CDATA[vue.js에서는 vuex를 이용하여 store를 관리할 수 있습니다. store란 vue로 만든 어플리케이션에서 관리하는 데이터 저장소입니다. 모든 vue 파일은 vuex로 store를 접근하여 데이터를 사용할 수 있습니다.vue 저장소인 store는 store 디렉터리를 기준으로 관련 파일을 만들어 줍니다.· ./store/module_moduleName.jsstore는 4개의 구조를 가집니다.export default를 이용하여 외부에 노출시켜 주는데 노출시 각 키값 구조는 다음과 같은 의미를 가지고 있습니다.▶ state: 해당 파일이 관리하는 상태값입니다. state를 바꾸기 위해서는 commit을 이용해야 합니다.(computed를 이용하여 사용)▶ mutations: commit에 의해 실행됩니다.▶ ac.......]]></description>
					<pubDate>Tue, 22 Jan 2019 14:04:31 +0900</pubDate>
					<tag><![CDATA[javascript,vuex,store,vue,localstorage]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[node.js]]></category>
					<title><![CDATA[[node.js] google-translate-api 라이브러리 BAD_REQUEST 해결]]></title>
					<link>http://blog.naver.com/pjt3591oo/221447782292</link>
					<guid>http://blog.naver.com/pjt3591oo/221447782292</guid>
					<description><![CDATA[안녕하세요. 멍개입니다.이번 글에서는 google-translate-api 라이브러리에 대해서 발견한 이슈 해결법을 알아보고자 합니다.먼저, 저희 회사에서는 내부에 상당수 외국인 분들이 계셔서 메신저를 이용하여 대화를 할 때 번역봇을 만들어 한글과 영어를 인식하여 한글 -&gt; 영어, 영어 -&gt; 한글로 번역을 해주고 있습니다. 이때 google-translate-api를 활용하게 되는데 며칠전에 서버 이관작업 중 재미난 이슈를 발견했으며 해당 이슈에 대해서 해결하는 방법을 알아보고자 합니다.· 발견이슈먼저 앞의 코드를 실행하면 안녕하세요를 영어로 번역하여 hello 또는 hi를 리턴하게 됩니다. 하지만 다음과 같이 비정상 적으로 실행될 수 있.......]]></description>
					<pubDate>Tue, 22 Jan 2019 00:03:14 +0900</pubDate>
					<tag><![CDATA[javascript,node,express,api,issue,regexp]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[일상...]]></category>
					<title><![CDATA[[일상] 책상정리]]></title>
					<link>http://blog.naver.com/pjt3591oo/221446482157</link>
					<guid>http://blog.naver.com/pjt3591oo/221446482157</guid>
					<description><![CDATA[이직 준비로 인해 회사에 가져다 둔 책을 전부 집으로 가져오면서 책상이 개판이 됨... 회사 책상 정리하면서 PC도 같이 정리 했는데 이참에 집에서 작업하는 공간도 정리해야 겠다고 마음 먹고 정리를 시작함.· Before· 책들현재 소장중인 책들...책상 정리의 목적은 책들을 종류별로 나누는 것이 목적.· After책들은 작업공간에서 가까운곳에는 블록체인, 인공지능, 운영체제나 디자인 패턴, 자료구조 책을 비치했고 우측에 작은 책장에는 프로그래밍 언어나 클라우드 같은 현 시점에서 중요도가 조금 떨어지는 책을 비치함.참고로 리버싱 핵심 원리 책은 컴퓨터에 가려서 보이지 않지만 모니터 받침으로 사용중 ㅋㅋㅋㅋㅋ모니터 전.......]]></description>
					<pubDate>Sun, 20 Jan 2019 12:50:42 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[공부, 목표]]></category>
					<title><![CDATA[GroundX 서류통과!]]></title>
					<link>http://blog.naver.com/pjt3591oo/221432920447</link>
					<guid>http://blog.naver.com/pjt3591oo/221432920447</guid>
					<description><![CDATA[음... 12월달에 GroundX 블록체인 플랫폼 개발 포지션으로 지원을 했는데 서류통과했다...참고로 GroundX는 카카오에서 블록체인 연구개발을 위해 만든 자회사입니다.일단 일요일날 제출 가능한지 문의를 보내놓은 상태인데... 떨어질것 같다... 한동안 블록체인 한다고 셋팅하고 컨트랙트쪽 위주로만 보다보니깐 코딩감, 실력이 떨어진것 같아서 자료구조, 디자인패턴, OS, 네트워크 다시 공부하고 있다...그래도 지금까지 쌓은 개발경험으로 대기업에 비벼볼 수준은 되는것 같아 기쁘다. 머 알고리즘쪽은 제대로 준비한적도 없고아직 준비가 되지않은 상태이기도 하다. 이번엔 경험삼아 한번 봐봐야 겠다. 준비되지 않은 상태에서 합.......]]></description>
					<pubDate>Thu, 03 Jan 2019 00:19:11 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[javascript]]></category>
					<title><![CDATA[[javascript] 어떻게 결제 SDK를 만들수 있을까? - payment system]]></title>
					<link>http://blog.naver.com/pjt3591oo/221425444200</link>
					<guid>http://blog.naver.com/pjt3591oo/221425444200</guid>
					<description><![CDATA[안녕하세요. 멍개입니다.요즘 각종페이가 늘어나고 있습니다. 물론 저희회사에서도 페이를 개발하고 있습니다. 페이를 개발하면 가맹점들에게 SDK를 제공하여 각 페이사들의 포인트를 사용할 수 있도록 해야합니다.이번글에서는 가맹점들에게 페이를 좀 더 편하게 사용하는 방법에 대해서 알오보겠습니다.먼저, webpack을 이용하여 다수의 파일로 이루어진 파일을 하나의 파일로 번들링합니다. 이떄 사용하는 도구가 webpack입니다. ● webpack webpack은 복잡하게 얽혀있는 파일 관계를 하나의 파일로 바꾸어주는 도구입니다. 우리는 이것을 번들링이라고 합니다. · installnpm또는 yarn을 이용하면 우리는 매우 편리하게 webpack을 설.......]]></description>
					<pubDate>Sun, 23 Dec 2018 15:18:06 +0900</pubDate>
					<tag><![CDATA[0fff로,javascript,payment,web,pay]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[공부, 목표]]></category>
					<title><![CDATA[멍개의 2018년 회고록]]></title>
					<link>http://blog.naver.com/pjt3591oo/221424244855</link>
					<guid>http://blog.naver.com/pjt3591oo/221424244855</guid>
					<description><![CDATA[안녕하세요 멍개입니다. 이번글은 2018년을 돌아보며 끄적여 볼까 합니다. 휴학겸 실무 3년차 멍개의 2018년은 3개의 키워드로 요약할 수 있습니다. 개발, 강의, 집필개발하는 개발자의 삶, 강의하는 강사의 삶, 책 쓰는 저자 삶..... ● 개발자의 삶2018년은 한번의 이직을 했습니다. 현재는 (주)글로스퍼 회사를 다니고 있습니다. 여기서는 블록체인 포지션으로 연구원 직책을 수행했습니다. 공식적으로 3개의 프로젝트를 진행했는데 1. 스마트빌 블럭체인 기반 전자계약 시스템, 2. 영등포 구청 블록체인기반 제안평가 시스템, 3. 부산항만공사 블록체인기반 컨테이너 부두간 반출입 통합발급 시스템에서 블록체인을 담당하여 프로젝트.......]]></description>
					<pubDate>Fri, 21 Dec 2018 16:02:39 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[파이썬으로 배우는 웹 크롤러]]></category>
					<title><![CDATA[[파이썬 - 크롤러] 2018년 세종도서 학술부분 선정]]></title>
					<link>http://blog.naver.com/pjt3591oo/221423436203</link>
					<guid>http://blog.naver.com/pjt3591oo/221423436203</guid>
					<description><![CDATA[생각도 안하고 있었는데 2018 세종도서 학술부분에 선정되었다고 합니다. 내년초에 2차 출판할 것 같습니다. 이번에 인쇄되는 책은 마크가 붙는다고 하네요!!짝짝짝2018년 마지막에 좋은 선물 주셨네요.(여자친구는 아직도 없지만 ㅠㅠ)조만간 2018 회고록 작성해야 겠습니다.]]></description>
					<pubDate>Thu, 20 Dec 2018 15:50:32 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[공부, 목표]]></category>
					<title><![CDATA[[공부, 목표] 2019년 첫 강의]]></title>
					<link>http://blog.naver.com/pjt3591oo/221419648623</link>
					<guid>http://blog.naver.com/pjt3591oo/221419648623</guid>
					<description><![CDATA[https://www.fastcampus.co.kr/dev_camp_blockdev/https://www.fastcampus.co.kr/dev_camp_fabric/ 블록체인 개발 입문은 이더리움으로 6기수를 모집하고 있고 fabric 개발 기초 다지기는 이번에 처음 시도하는 강의입니다.2019년도 뽜이팅해야겠당~]]></description>
					<pubDate>Sat, 15 Dec 2018 09:39:53 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] transaction에 데이터를 포함하여 영원히 데이터 남기기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221416014140</link>
					<guid>http://blog.naver.com/pjt3591oo/221416014140</guid>
					<description><![CDATA[안녕하세요. 멍개입니다 transaction에서 input data를 포함하여 전송하는 방법을 알아보겠습니다. input data가 머냐 하시는 분들이 있을텐데 다음 링크를 접속하면 다음과 같이 보실 수 있습니다.· 예시https://etherscan.io/tx/0xe4ee15d3f63db8464a649e3237ed83e930f9b3e40e842537a626745d1c96553c만약 해당 이미지처럼 안 나오면 view input As 버튼에서 UTF-8로 선택하면 됩니다.· 계정 준비하기테스트이기 때문에 ropsten 네트워크에서 진행합니다. 해당 계정의 private key를 이용하여 myetherwallet에서 정상적으로 읽어지는지 확인해보겠습니다.잘 읽어와집니다. 이제 여기서 input data를 포함하여 전송하는 방법을 알아보겠습니다.1........]]></description>
					<pubDate>Mon, 10 Dec 2018 10:47:03 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,transaction,아스키코드,ascii,code]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] abi-decoder를 이용하여 inputData 해독하기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221415441382</link>
					<guid>http://blog.naver.com/pjt3591oo/221415441382</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. abi-decoder 라이브러리를 이용하여 transaction에 포함된 inputData를 해석하는 방법을 다뤄보도록 하겠습니다.· abi-decoder 모듈설치npm을 이용하면 간단하게 설치할 수 있습니다.· abi 추출하기transaction의 inputData를 디코딩하기 위해서는 해당 컨트랙트의 ABI가 필요합니다.ABI 복사 버튼을 눌러줍니다.· transaction 발생하여 inputdata 얻기setData 함수를 호출하여 transaction을 발생합니다.inputData는 to가 CA(contract address)라면 블록체인 네트워크에서 노드가 읽어서 EVM에서 실행하게 됩니다. 이제 inputData를 해독해보겠습니다.· inputData 해독앞에서 ABI와 transaction에 포함된 InputData를 복.......]]></description>
					<pubDate>Sun, 09 Dec 2018 10:49:54 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,evm,abi,decode,transaction,data,solidity]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] transaction을 보고 contract 생성을어떻게 할까]]></title>
					<link>http://blog.naver.com/pjt3591oo/221412434452</link>
					<guid>http://blog.naver.com/pjt3591oo/221412434452</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. 오늘은 smart contract에 대해서 알아보도록 하겠습니다. 간단하게 smart contract의 생성원리를 알아보겠습니다. · 컨트랙트 배포 후 확인transaction 정보를 보면 contract create라고 표시됩니다. 이더리움은 어떻게 contract 생성을 알고 contract create라고 표시하는지 알아보겠습니다.· contract 배포직후 transaction 확인이더리움에서 컨트랙트가 배포할 때 일반적인 transaction과 다르게 to를 비워서 보냅니다. 또한, Input Data를 컨트랙트를 작성한 코드를 컴파일한 결과를 포함하여 보냅니다. 해당 트랜잭션을 처리하는 노드는 to가 비어있고 Input Data가 있으면, contract 생성을 하게됩니다. 이때 Cont.......]]></description>
					<pubDate>Tue, 04 Dec 2018 21:38:06 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,smart,contract,transaction]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[golang]]></category>
					<title><![CDATA[[golang] golang version update]]></title>
					<link>http://blog.naver.com/pjt3591oo/221406775177</link>
					<guid>http://blog.naver.com/pjt3591oo/221406775177</guid>
					<description><![CDATA[]]></description>
					<pubDate>Mon, 26 Nov 2018 22:24:35 +0900</pubDate>
					<tag><![CDATA[golang,version,update]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] transaction 발생 시 - Warning! Error encountered during contract execution [Out of gas] 에러]]></title>
					<link>http://blog.naver.com/pjt3591oo/221406283463</link>
					<guid>http://blog.naver.com/pjt3591oo/221406283463</guid>
					<description><![CDATA[ethereu에서 스마트 컨트랙트를 개발하다보면 상당히 다양한 에러를 접할 수 있습니다. 그중에 하나가 gas와 관련된 에러입니다.● 정상 Transaction VS 비정상 Transaction우선 정상적인 transaction과 비정상적으로 처리된 transaction을 비교해보겠습니다.· 정상 Transaction정상적인 transaction은 Success 상태가 됩니다.· 비정상 Transactiongas 문제로 발생된 트랜잭션 실패는 Out of gas라고 표기됩니다. 과연 이 문제가 왜 발생할까요??적색으로 박스친 부분을 명심해야 합니다. Gas Used By Transaction(해당 트랜잭션을 실행하면서 소모한 가스)가 Gas Limit을 넘치면 앞의 에러처럼 발생합니다. 이때는 해결법이 매우매우 간단합니다.......]]></description>
					<pubDate>Mon, 26 Nov 2018 11:16:03 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,solidity,gas,gasLimit,gasPrice,fee,smart,contract]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] solidity - address 관리방법(address, address payabl 타입)]]></title>
					<link>http://blog.naver.com/pjt3591oo/221406204664</link>
					<guid>http://blog.naver.com/pjt3591oo/221406204664</guid>
					<description><![CDATA[안녕하세요 멍개입니다. 이번글에서는 solidity로 개발한 스마트 컨트랙트에서 다른 계정으로 이더를 전송하는 방법에 대해서 알아보겠습니다. 이번글도 0.5 버전을 기준으로 작성됩니다. 물론 이전 버전과 어떤 차이가 있는지도 함께 알아보겠습니다.먼저, 컨트랙트에서 다른 계정으로 이더를 전송하기 위해서는 컨트랙트에서 이더를 보유하고 있어야 합니다. 즉, 다른 계정으로부터 이더를 전송받아야 하는데 전송 받는방법 부터 알아보겠습니다.· 이더 전송받는 방법solidity에서는 이름이 없는 함수를 fallback 함수라고 하는데 fallback 함수에 external과 payable 옵션을 붙여주어 해당 컨트랙트가 외부 계정으로부터 돈을 입금받을 수 있.......]]></description>
					<pubDate>Mon, 26 Nov 2018 09:19:24 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,address,payable,internal,external]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] solidity - call, delegatecall]]></title>
					<link>http://blog.naver.com/pjt3591oo/221405662828</link>
					<guid>http://blog.naver.com/pjt3591oo/221405662828</guid>
					<description><![CDATA[안녕하세요. 이번 글에서는 solidity에서 call과 delegatecall에 대해서 다뤄보겠습니다.우선 이번글은 solidity 0.5 버전 기준으로 합니다.call과 delegatecall은 0.5 버전 전, 후로 사용법이 바뀌었습니다.● 샘플코드먼저, call과 delegatecall을 사용한 sample 코드부터 확인하겠습니다.· 샘플코드 배포샘플 코드를 보면 Sample1과 Sample2가 존재합니다. 각각 배포를 해줍니다. 순서는 상관없습니다.remix를 이용하면 매우 편하게 배포가 가능합니다. 빠른 테스트를 위해 Javascript VM을 사용합니다.우측 하단에서 배포된 컨트랙트를 확인할 수 있습니다.· 배포정보 확인하기앞의 사진에서 검정, 파랑, 빨강박스 순으로 트랜잭션 호출자.......]]></description>
					<pubDate>Sun, 25 Nov 2018 10:53:51 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,dapp,solidity,call,delegatecall]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[도커(docker)]]></category>
					<title><![CDATA[[docker] log 관리]]></title>
					<link>http://blog.naver.com/pjt3591oo/221404622219</link>
					<guid>http://blog.naver.com/pjt3591oo/221404622219</guid>
					<description><![CDATA[안녕하세요 멍개입니다.오늘은 docker에서 log 관리하는 방법에 대해서 다뤄보겠습니다. centos 기준으로 /var/lib/docker에서 이미지 파일, 컨테이너 정보, 로그등을 관리합니다.도커 컨테이너에서 발생된 로그는 containers에 쌓이게 됩니다.containers에 들어가면 컨테이너들을 디렉터리별로 관리합니다.컨테이너 디렉터리를 들어가면 컨테이너ID-json.log의 형태로 해당 컨테이너에서 발생된 로그가 저장됩니다. 해당 디렉터리를 관리해주면 되는데 도커 자체에서는 관리하기는 좀 힘드므로 로그 관리툴인 logrotate를 사용해보겠습니다.logrotate를 하기전에 du 명령어를 통해서 각 디렉터리의 용량을 확인할 수 있습니다. du는 현재 디.......]]></description>
					<pubDate>Fri, 23 Nov 2018 14:54:02 +0900</pubDate>
					<tag><![CDATA[docker,virtual,log]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] keystore 파일에 대해서]]></title>
					<link>http://blog.naver.com/pjt3591oo/221401430085</link>
					<guid>http://blog.naver.com/pjt3591oo/221401430085</guid>
					<description><![CDATA[안녕하세요 멍개입니다. 이번 포스팅의 주제는 keystore 파일입니다. 이더리움에서 account를 관리하는 방법은 여러가지 방법이 있습니다. 1. private key 2. keystore 3. mnemonic실질적으로 우리는 private key만 있으면 되는데 private key가 노출되면 보안상에 매우 취약하므로 이를 대신해서 keystore(키스토어 파일) 또는 mnemonic(니모닉)의 형태로 대신 저장합니다. 이번글에서는 파일형태로 저장되는 keystoer 파일에 대해서 알아보겠습니다.여기서 private key가 중요한 이유는 transaction을 발생시킬 때, transaction을 발생시키는 address의 private key로 서명을 해야하기 때문에 매우 중요.● 구조keystore 파일은 이름과 내용이.......]]></description>
					<pubDate>Mon, 19 Nov 2018 11:39:10 +0900</pubDate>
					<tag><![CDATA[ethereum,암호화,복호화,암호학,encrypto,decrypto,blockchain]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[hycon] private network 구축 - genesis block 생성편]]></title>
					<link>http://blog.naver.com/pjt3591oo/221398671200</link>
					<guid>http://blog.naver.com/pjt3591oo/221398671200</guid>
					<description><![CDATA[안녕하세요 멍개입니다. 오늘은 지난번 글에 이어서 genesis block을 생성하여 초기 하이콘을 미리 생성하는 방법에 대해서 알아보도록 하겠습니다. 오늘 진행에 대해서는 약간의 코드 수정이 필요로 하기 때문에 약간의 코드 리딩 능력이 필요하지만 친절한 제가 직접 어느 부분을 고쳐야 하고 어떤 코드를 추가해야하는지 알려드리도록 하겠습니다.· genesis block 만들기 위한 준비우선 genesis block을 만들기 위해서는 hycon-core 코드가 필요합니다.https://github.com/Team-Hycon/hycon-coregit을 이용하여 빠르게 받아줍니다. 그리고 hycon은 typescript로 되어있기 때문에 typescript를 실행할 수 있는 ts-node도 설치합니다.여기까지 필.......]]></description>
					<pubDate>Wed, 14 Nov 2018 23:55:35 +0900</pubDate>
					<tag><![CDATA[hycon,blockchain]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[hycon] private network 구축 - 인프라 구축편]]></title>
					<link>http://blog.naver.com/pjt3591oo/221391545473</link>
					<guid>http://blog.naver.com/pjt3591oo/221391545473</guid>
					<description><![CDATA[안녕하세요 멍개입니다~ 이번 포스트에서는 hycon을 다뤄보고자 하는데 hycon에 대해서 간략하게 소개하면 2018년 6월에 메인넷 런칭을 하였으며 okex 거래소에 상장되어 있는 우리나라에서 개발중인 코인입니다. 또한, 매우 활발히 개발진행 중 입니다. 저는 hycon을 포함하여 약 3개의 플랫폼을 다루고 있습니다. · Hyperledger Fabric· Ethereum· Hycon이 외에도 IPFS나 R3 corda를 공부중입니다.R3 Corda는 Java라 딱히 하고싶진 않지만 그냥 신기해서 가끔씩 보고있습니다.이번 포스트에서는 hycon을 설치하여 private network 구축하는 방법을 소개합니다.● Hycon 프로그램 설치Hycon은 소스코드를 직접 빌드하여 설치하는 방법과 빌드된.......]]></description>
					<pubDate>Sun, 04 Nov 2018 21:26:45 +0900</pubDate>
					<tag><![CDATA[blockchain,hycon,exchange,api,network,peer,explorer]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[DB]]></category>
					<title><![CDATA[[mongodb] mongodb 실행 / 쉘 접속]]></title>
					<link>http://blog.naver.com/pjt3591oo/221374561031</link>
					<guid>http://blog.naver.com/pjt3591oo/221374561031</guid>
					<description><![CDATA[우선 mongodb를 사용하기 위해서는 데이터가 쌓일 디렉터리를 만들어줘야 합니다. 기본적으로 사용하는 디렉터리는 /data/db이기 때문에 해당 디렉터리를 만들어 줍니다.· 데이터 쌓을 디렉터리 생성· 실행· mongodb 쉘 접속]]></description>
					<pubDate>Wed, 10 Oct 2018 11:15:43 +0900</pubDate>
					<tag><![CDATA[database,nosql,mongodb,mongoose]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[컴퓨터, Tool]]></category>
					<title><![CDATA[[mac] terminal 이쁘게 꾸미기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221370635364</link>
					<guid>http://blog.naver.com/pjt3591oo/221370635364</guid>
					<description><![CDATA[다음 코드를 넣어주고 저장합니다.해당 설정을 적용하지 않으면 모든 글씨가 흰색으로 표시되서 보기가 매우 힘듭니다.]]></description>
					<pubDate>Thu, 04 Oct 2018 09:32:25 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[컴퓨터, Tool]]></category>
					<title><![CDATA[[vim] tagbar 플러그인 추가]]></title>
					<link>http://blog.naver.com/pjt3591oo/221370143881</link>
					<guid>http://blog.naver.com/pjt3591oo/221370143881</guid>
					<description><![CDATA[요즘 서버쪽에 접속해서 다이렉트로 작업해야 하는 경우가 좀 많이 생겨서 빔설정을 좀 더 추가해봤습니다.필자가 사용중인 ~/.vimrc 내용]]></description>
					<pubDate>Wed, 03 Oct 2018 13:32:42 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[암호학] 암호학 공부시 필요한 것들]]></title>
					<link>http://blog.naver.com/pjt3591oo/221365169682</link>
					<guid>http://blog.naver.com/pjt3591oo/221365169682</guid>
					<description><![CDATA[정 수 론 대 수 학 기초 암호학 암호수학 정보보호응용 이 산 수 학 선 형 대 수 미분방정식 확 률 과 통 계 확률과정개론 대 수 학 응 용 정 수 론 조합론 대 수 학 특 강 계산이론 데이터통신 컴퓨터 네트워크 알고리즘 정보보호 시간나면 하나씩 공부해봐야 겠다]]></description>
					<pubDate>Tue, 25 Sep 2018 11:54:31 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[blockchain] 데이터 저장 형태와 cli 구조 짜보기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221365165543</link>
					<guid>http://blog.naver.com/pjt3591oo/221365165543</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. 요즘 golang으로 이것저것 만들어 보고 있습니다. https://github.com/pjt3591oo/go-tokenhttps://github.com/pjt3591oo/hyperledger-fabric-tokenrepository 이름에서 알 수 있듯이 token을 만들고 있습니다. fabric 기반과 golang 런타임 환경에서 동작하는 토큰을 만들고 있습니다. 머 만들다보니 이것저것 생각나는게 있어서 점점 커지는 듯한 느낌적인 느낌이 살짝 들긴 하지만... ㅋㅋㅋ go-token 같은 경우는 fabric에서 체인코드를 짜기전에 어떤식으로 짜면 좋을지 연습해볼겸 짠 코드라 데이터 형태가 매우 이상합니다. 그래서 다음과 같이 바꾸면 매우 좋을것 같습니다.기존 코드에서는 struct를 따로 관리를.......]]></description>
					<pubDate>Tue, 25 Sep 2018 11:41:47 +0900</pubDate>
					<tag><![CDATA[blockchain,golang,data,struct,cli]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] web3로 mainnet과 testnet 연결해보기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221360197298</link>
					<guid>http://blog.naver.com/pjt3591oo/221360197298</guid>
					<description><![CDATA[· mainnet· testnet(ropsten)]]></description>
					<pubDate>Sun, 16 Sep 2018 21:21:53 +0900</pubDate>
					<tag><![CDATA[ethereum,web3]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[golang]]></category>
					<title><![CDATA[[golang] levelDB 사용법]]></title>
					<link>http://blog.naver.com/pjt3591oo/221360176318</link>
					<guid>http://blog.naver.com/pjt3591oo/221360176318</guid>
					<description><![CDATA[이번 글에서는 levelDB 사용하는 방법을 알아보도록 하겠습니다.· levelDB 설치· 사용levelDB에서는 key, value를 byte 타입으로 사용해야 합니다.levelDB는 설치형 디비가 아니기 때문에 라이브러리만 설치하면 어디서든지 사용가능합니다.]]></description>
					<pubDate>Sun, 16 Sep 2018 20:43:54 +0900</pubDate>
					<tag><![CDATA[golang,db,database,leveldb]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[fabric] chaincode system]]></title>
					<link>http://blog.naver.com/pjt3591oo/221359921242</link>
					<guid>http://blog.naver.com/pjt3591oo/221359921242</guid>
					<description><![CDATA[LSCC Lifecycle 시스템 체인 코드는 위에서 설명한 라이프 사이클 요청을 처리합니다. CSCC 구성 시스템 체인 코드는 피어 측의 채널 구성을 처리합니다. QSCC Query 시스템 체인 코드는 블록 및 트랜잭션 가져 오기와 같은 원장 쿼리 API를 제공합니다. ESCC 인증 시스템 체인 코드는 거래 제안 제안서에 서명함으로써 보증을 처리합니다. VSCC 유효성 검사 시스템 체인 코드는 보증 정책 및 다중 버전 동시성 제어 검사와 같은 트랜잭션 유효성 검사를 처리합니다.]]></description>
					<pubDate>Sun, 16 Sep 2018 11:14:04 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] block, transaction pool, state 각각 어디에 저장되는가]]></title>
					<link>http://blog.naver.com/pjt3591oo/221359893644</link>
					<guid>http://blog.naver.com/pjt3591oo/221359893644</guid>
					<description><![CDATA[안녕하세요. 멍개입니다 이번 글에서는 ethereum에서 block, transaction pool, state가 어디에 저장되는지 알아보도록 하겠습니다. 먼저 block, state는 levelDB를 통해 저장이 됩니다. 근데 문득 그렇다면 transaction이 발생되고 pool에 저장된 tx들은 어디에 저장되는지 궁금해져서 테스트를 해보았습니다.· 2개의 account 생성2개의 account를 생성한 후 transaction을 발생시킨 후 geth 프로그램을 종료했다가 다시 접속하여 tx pool을 확인해 보겠습니다.· tx 발생하기 전 tx pool 확인tx를 발생시키지 않았기 때문에 비어있습니다.· tx 발생geth에서는 account에 lock이 되있기 때문에 unlockAccount로 계정잠금을 풀어줘야 합니다.· tx .......]]></description>
					<pubDate>Sun, 16 Sep 2018 09:53:20 +0900</pubDate>
					<tag><![CDATA[blockchain,ethereum,transaction,account]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[서버]]></category>
					<title><![CDATA[[서버] REST API response code 자체가이드]]></title>
					<link>http://blog.naver.com/pjt3591oo/221359408872</link>
					<guid>http://blog.naver.com/pjt3591oo/221359408872</guid>
					<description><![CDATA[● 데이터 요청● 데이터 생성● 데이터 수정존재하지 않는 URL로 요청할 경우 404코드 반환: Not Found Url]]></description>
					<pubDate>Sat, 15 Sep 2018 11:07:25 +0900</pubDate>
					<tag><![CDATA[server,api,response,http,code]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[블록체인]]></category>
					<title><![CDATA[[ethereum] default gas price 21 => 42 증가]]></title>
					<link>http://blog.naver.com/pjt3591oo/221359378827</link>
					<guid>http://blog.naver.com/pjt3591oo/221359378827</guid>
					<description><![CDATA[이더리움에서 gas는 수수료를 측정하는 매우 중요한 요소입니다. gas limit과 gas price를 곱한값이 실제 지불해야할 수수료인데 21에서 42로 증가됬다는건 수수료가 2배로 오르게 됩니다. 일반적으로 gas price를 높게 내야하는 경우는 해당 네트워크에 트래픽이 많이 발생되어 transaction을 빠르게 처리하기 위함입니다. default gas price가 높아졌다는 것은 현재 이더리움 네트워크에 transaction이 많이 발생하고 있다고 추측할 수 있습니다.]]></description>
					<pubDate>Sat, 15 Sep 2018 09:56:56 +0900</pubDate>
					<tag><![CDATA[gas,price,limit,ethereum,blockchain,myetherwallet,wallet]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[golang]]></category>
					<title><![CDATA[[golang] 문자열 sha256 변환]]></title>
					<link>http://blog.naver.com/pjt3591oo/221354809830</link>
					<guid>http://blog.naver.com/pjt3591oo/221354809830</guid>
					<description><![CDATA[golang에서 문자열을 sha256 해시알고리즘을 적용하여 변환해보겠습니다.encoding/hex, crypto/sha256은 golang 내장 라이브러리 입니다.golang을 이용하며 매우 간단하게 해시 알고리즘 사용이 가능합니다.]]></description>
					<pubDate>Sat, 08 Sep 2018 10:06:31 +0900</pubDate>
					<tag><![CDATA[go,golang,hash,sha256]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[공부, 목표]]></category>
					<title><![CDATA[[공부, 목표] 9월 2일 Todo - list]]></title>
					<link>http://blog.naver.com/pjt3591oo/221350838381</link>
					<guid>http://blog.naver.com/pjt3591oo/221350838381</guid>
					<description><![CDATA[IPFS 네트워크 구성 RUST 공부(API 서버, RPC 통신, 패키지 다루기, leveldb 연동, 패턴) =&gt; hyper-chain hyperledger fabric 이런저런 삽질(피어 추가, 채널 추가) docker(volume, network, dockerfile, docker-compose) B/C 플랫폼 오픈소스 분석(loopchain, ethereum, fabric, ipfs) hyper-chain 설계 node.js 로깅 패키지 ( https://github.com/expressjs/morgan#readme https://github.com/winstonjs/winston#readme )]]></description>
					<pubDate>Sun, 02 Sep 2018 12:43:48 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[도커(docker)]]></category>
					<title><![CDATA[[docker] 고급편(3/3) - swarm을 이용한 서비스 관리]]></title>
					<link>http://blog.naver.com/pjt3591oo/221350824375</link>
					<guid>http://blog.naver.com/pjt3591oo/221350824375</guid>
					<description><![CDATA[지금까지 도커를 이용하여 컨테이너를 만들고 이미지를 관리하는 방법을 다뤄봤습니다. 이번편에서는 스웜을 이용하여 독립된 도커환경을 하나의 네트워크로 묶어서 관리하는 swarm에 대해서 다뤄보겠습니다. 보통 이것을 오케스트레이션이라고 표현합니다.· 도커환경· 각 서버별 IP 1번서버 : x.x.x.183 =&gt; worker 2번서버 : x.x.x.50 =&gt; worker 3번서버 : x.x.x.69 =&gt; master · 서버 OS 1번서버 : centos 7.5 2번서버 : centos 7.5 3번서버 : centos 7.5 · 각 서버별 도커버전 1번서버 : 17.05.0.ce 2번서버 : 17.05.0.ce 3번서버 : 18.06.1-ce여기서 3번 서버만 다른 버전을 사용하는 이유는 뒤에서 설명하도록 하겠습니다. 물론 모.......]]></description>
					<pubDate>Sun, 02 Sep 2018 12:08:51 +0900</pubDate>
					<tag><![CDATA[docker,swarm,service,stack,compose,version]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[도커(docker)]]></category>
					<title><![CDATA[[docker] 중급편(2/3) - 이미지 관리/배포]]></title>
					<link>http://blog.naver.com/pjt3591oo/221350279751</link>
					<guid>http://blog.naver.com/pjt3591oo/221350279751</guid>
					<description><![CDATA[중급편에서는 이미지를 생성하고 관리하는 방법을 다룹니다. 만약 이미지와 컨테이너의 개념이 부족하다면 기본편(1/3)을 참고하시면 됩니다.https://blog.naver.com/pjt3591oo/221350092204● 이미지 생성방법이미지를 만드는 방법은 2가지가 있습니다.1 컨테이너1.1 생성된 컨테이너를 이용한 이미지 생성ubuntu 16.04를 설치하고 node.js나 각종 프로그램을 설치한 후 이미지 파일을 만들면 해당 상태의 컨테이너를 생성할 수 있습니다.여기서 options은 없어도 됩니다. &lt;CONTAINER NAME&gt;은 이미지화 시키고 싶은 컨테이너 이름입니다. ps -a에서 NAMES에 해당하는 부분입니다. &lt;IMAGE NAME&gt;은 컨테이너를 이미지화 시켰을 때 이.......]]></description>
					<pubDate>Sat, 01 Sep 2018 10:38:09 +0900</pubDate>
					<tag><![CDATA[docker,hub,image,push,pull]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[도커(docker)]]></category>
					<title><![CDATA[[docker] 기본편(1/3) - 도커의 기본적인 명령어를 다뤄보자]]></title>
					<link>http://blog.naver.com/pjt3591oo/221350092204</link>
					<guid>http://blog.naver.com/pjt3591oo/221350092204</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. 도커의 기본편 연재를 시작합니다.※ 기본개념 잡기도커에서 가장 많이나오는 용어가 이미지(image), 컨테이너(container) 입니다. 이미지는 하드에 저장된 상태이며 컨테이너는 실행중인 상태로 이해하면 됩니다. 하드에 저장된 이미지를 통해 컨테이너라는 프로세스를 만들어 주는것이 도커입니다. 생성된 컨테이너는 서로가 독립적인 공간을 가지고 있으나 HOST OS가 관리를 하게 됩니다.· 도커설치 확인docker를 사용하기 위해서는 도커를 설치해야합니다.version 옵션을 이용하면 정상적으로 설치됬는지 확인가능 합니다.info 옵션을 통해서도 설치됬는지 확인할 수 있습니다. info 같은 경우는 3편에서 swarm편에.......]]></description>
					<pubDate>Fri, 31 Aug 2018 23:14:44 +0900</pubDate>
					<tag><![CDATA[docker,compose,yaml,yml,container,image,이미지,컨테이너,virtual,machine]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[도커(docker)]]></category>
					<title><![CDATA[[docker] 도커 사용편 - 기본, 중급, 고급편 3/3]]></title>
					<link>http://blog.naver.com/pjt3591oo/221350050525</link>
					<guid>http://blog.naver.com/pjt3591oo/221350050525</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. 도커를 사용을 중점적으로 기본편, 중급편, 고급편으로 연재할 예정입니다.각 파트에서 다룰내용은 다음과 같습니다.1. 기본편 : 도커의 기본적인 명령어(컨테이너 생성, 이미지 확인)를 다룬다. - 이미지 받아오기, 이미지 확인 - 컨테이너 생성, 중지, 삭제, 확인 - 컨테이너 생성 시 옵션 설정 - docker-compose를 이용한 배포 자동화https://blog.naver.com/pjt3591oo/2213500922042. 중급편 : 원하는 이미지를 만들어 배포한다. - Dockerfile을 이용한 이미지 생성 - 컨테이너를 통해 이미지 생성 - 버전관리 - 도커허브를 통해 이미지 공유https://blog.naver.com/pjt3591oo/2213502797513. 고급편 : swarm을.......]]></description>
					<pubDate>Fri, 31 Aug 2018 21:57:30 +0900</pubDate>
					<tag><![CDATA[docker,compose,swarm,service,stack,Dockerfile]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[도커(docker)]]></category>
					<title><![CDATA[[docker] centos에서 docker 버전별로 설치하기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221347408129</link>
					<guid>http://blog.naver.com/pjt3591oo/221347408129</guid>
					<description><![CDATA[안녕하세요. 멍개입니다!! docker같은 경우 버전을 잘 선택해서 설치를 해야합니다. 그 이유는 도커 버전에 따라서 도커 컴포즈 버전별로 지원이 되지 않기 떄문에 docker-compose 버전은 어떤걸 사용하는지에 따라서 도커 버전을 선택해주는게 좋습니다. 우선 docker-compose 버전 3.3을 실행한다면 docker 17.09.1-ce 버전에서 정상적으로 동작합니다. 물론 2.x 버전도 잘 동작합니다.만약 이미 도커가 설치되있다면 제거를 해줍니다.다음으로 필요한 라이브러리와 설정을 해줍니다.설치가능한 docker 버전 리스트를 정렬하여 출력합니다.원하는 버전을 설치해줍니다. 도커를 데몬으로 돌려줍니다. 이제 도커를 사용할 수 있습니다.]]></description>
					<pubDate>Tue, 28 Aug 2018 08:58:11 +0900</pubDate>
					<tag><![CDATA[docker,version,centos,centos7,linux,install]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[node.js]]></category>
					<title><![CDATA[[node.js] 시각화 툴인 node-red 설치]]></title>
					<link>http://blog.naver.com/pjt3591oo/221346886607</link>
					<guid>http://blog.naver.com/pjt3591oo/221346886607</guid>
					<description><![CDATA[안녕하세요. 오늘은 시각화 툴인 node-red 설치하는 방법을 소개합니다. node-red를 설치하기 위해선 npm을 사용합니다.· node-red 설치· node-red 실행해당 툴로 머를 할 수 있을지 확인해봐야 겠다.]]></description>
					<pubDate>Mon, 27 Aug 2018 13:58:21 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[컴퓨터, Tool]]></category>
					<title><![CDATA[[tool] vs code에서 rest client 플러그인으로 API 관리]]></title>
					<link>http://blog.naver.com/pjt3591oo/221346544567</link>
					<guid>http://blog.naver.com/pjt3591oo/221346544567</guid>
					<description><![CDATA[안녕하세요. 멍개입니다. 이번 글에서는 매우 유용한 플러그인을 소개할까 합니다. 필자는 vim, vs code, pycharm을 즐겨 사용합니다. 요즘에는 vim, vs code를 주로사용하고 있죠 ㅎㅎ 블록체인 개발을 하면서 API 서버도 같이 만드는데 API 서버를 테스트할 때 주로 postman을 사용해왔습니다. 하지만 postman의 단점은 요청에 대해서 저장하기가 힘들다는 점입니다. 좌측의 history와 상단의 탭에서 저장이 되긴 하지만 간혹 초기화 되거나 한눈에 들어오지 않는 단점이 있습니다. 또한 필자의 경우 2대의 장비에서 개발을 하게 되는데 장비가 바뀌면 요청에 대한 데이터를 새로 작성해야하는 매우 번거로움이 있습니다. 이번에 소개할 플러그.......]]></description>
					<pubDate>Sun, 26 Aug 2018 23:13:50 +0900</pubDate>
					<tag><![CDATA[vscode,tool,curl,post,get,request,api,version]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[golang]]></category>
					<title><![CDATA[[golang] flag를 이용하여 실행시 인자전달]]></title>
					<link>http://blog.naver.com/pjt3591oo/221346506828</link>
					<guid>http://blog.naver.com/pjt3591oo/221346506828</guid>
					<description><![CDATA[https://blog.naver.com/pjt3591oo/221346499961 해당글에 이어서 golang에서도 구현해보도록 하겠습니다. golang에서는 flag를 이용하여 간편하게 구현할 수 있습니다.go에서는 run 옵션을 이용하여 바로 실행할 수 있지만 build를 이용하여 실행파일로 변환후 변환된 실행파일을 가지고 실행을 하도록 하겠습니다.]]></description>
					<pubDate>Sun, 26 Aug 2018 22:10:36 +0900</pubDate>
					<tag><![CDATA[go,argv,flag,parse,execute]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pjt3591oo</author>
					<category><![CDATA[Python]]></category>
					<title><![CDATA[[python] argparse로 멋지게 실행하기]]></title>
					<link>http://blog.naver.com/pjt3591oo/221346499961</link>
					<guid>http://blog.naver.com/pjt3591oo/221346499961</guid>
					<description><![CDATA[안녕하세요. 이번글을 포함하여 몇 차례동안은 --help와 같이 프로그램 실행시 인자를 전달하여 해당 인자를 사용하는 방법을 다뤄볼 예정입니다. 이것의 정확한 명칭을 모르겠네요... 아시는분은 댓글로 알려주심 감사하겠습니다~~파이썬에서는 argparse 모듈을 이용하면 해당 기능을 간편하게 구현할 수 있습니다.]]></description>
					<pubDate>Sun, 26 Aug 2018 21:58:57 +0900</pubDate>
					<tag><![CDATA[python,argv,parse]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
