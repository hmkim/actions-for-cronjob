<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 왕형준 on Medium]]></title>
        <description><![CDATA[Stories by 왕형준 on Medium]]></description>
        <link>https://medium.com/@whj2013123218?source=rss-ecfb1d3348b7------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*MgsvlB3bsNYGN2jELrhNGQ.jpeg</url>
            <title>Stories by 왕형준 on Medium</title>
            <link>https://medium.com/@whj2013123218?source=rss-ecfb1d3348b7------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 16:59:05 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@whj2013123218" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[비트코인 2부는 언제 올라오나요!]]></title>
            <link>https://medium.com/@whj2013123218/%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8-2%EB%B6%80%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%98%AC%EB%9D%BC%EC%98%A4%EB%82%98%EC%9A%94-d3fd9108e0be?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/d3fd9108e0be</guid>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Mon, 25 Mar 2019 14:07:09 GMT</pubDate>
            <atom:updated>2019-03-25T14:07:09.654Z</atom:updated>
            <content:encoded><![CDATA[<p>비트코인 2부는 언제 올라오나요!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d3fd9108e0be" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Netlify를 통한 Vue 프로젝트 서버 배포]]></title>
            <link>https://medium.com/@whj2013123218/netlify%EB%A5%BC-%ED%86%B5%ED%95%9C-vue-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%9C%EB%B2%84-%EB%B0%B0%ED%8F%AC-c4de9c5798fe?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/c4de9c5798fe</guid>
            <category><![CDATA[servers]]></category>
            <category><![CDATA[netlify]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Mon, 25 Mar 2019 07:37:43 GMT</pubDate>
            <atom:updated>2019-03-25T07:37:43.370Z</atom:updated>
            <content:encoded><![CDATA[<p>Netlify로 Vue Project를 서버에 배포해보자. 지금부터 설명하는 것들을 차례로 따라하길 바란다. 기존에 작업한 프로젝트와 설정이 많이 다르다면 앞으로의 설명을 참고해 설정을 바꾸길 바란다.</p><p>기존 프로젝트의 설정을 고집하고 서버에 배포하는 것보다 서버 배포에 최적화된 설정을 처음부터 하고 그에 맞춰 프로젝트를 진행하는 것이 에러를 줄일 수 있다.</p><p>따라서, 계속해서 프론트 앱을 Netlify 서버에 배포하는 것을 실패하고 있는 분들은 애초에 아래의 설명에 맞춰 기본 설정을 바꿀 것을 권장한다.</p><p>진행될 설명의 순서는 다음과 같다.</p><h4>1. Vue-Cli3를 통한 Vue Project 생성</h4><h4>2. 프론트 프로젝트 깃헙에 업로드</h4><h4>3. Netlify 서버에 배포</h4><p>독자들이 Vue가 설치돼 있고 기본적인 git 사용법을 안다는 가정 하에 설명을 진행하겠다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/456/1*Hsomi4ELwYImPcS5-LlYOQ.jpeg" /></figure><h4>1. Vue-Cli3를 통한 Vue Project 생성</h4><p>프로젝트를 생성할 폴더에 &lt;vue ui&gt; 명령어를 입력한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/955/1*EGELKPdDSuOPyWd5XA2VYA.png" /><figcaption>vue ui 명령어 입력</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5If5mIZMFL1GWiD8k-d5iQ.png" /></figure><p>만들기 탭에서 &lt;새 프로젝트를 만들어보세요&gt;를 클릭한다. 패키지 매니저같은 경우에는 필자는 ‘npm’을 선택했다. 추가옵션과 Git 저장소는 선택하지 않았다. ‘yarn’을 쓰는 독자들은 ‘yarn’을 선택해도 무방하다. 필자는 ‘npm’을 기준으로 앞으로 설명하겠다.</p><p>다음을 클릭하면 프리셋 선택으로 넘어갈 것이다. 여기서 수동을 클릭하도록 하자.</p><p>여기서는 여러분들이 사용할 라이브러리를 임의로 선택해도 된다. 필자같은 경우에는 Babel, PWA support, Router, Vuex, CSS pre-processors, Linter / Formatter를 선택했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*CJ59gq5uPa5FK8k2eOCc9Q.png" /></figure><p>필자와 같은 설정을 선택했다면 아마 다음과 같은 화면도 볼 수 있을 것이다. 필자는 SCSS를 사용할 것이기에 SCSS를 택했다. 요즘엔 Less를 거의 쓰지 않기 때문에 Sass/SCSS를 택하는 것이 바람직하다. 나머지 설정은 본인의 취향대로 택해도 무방하다. 프로젝트 만들기를 클릭하면 설정에 맞게 새프로젝트가 생성되는 데 1~2분 정도 소요될 것이다.</p><h4>2. 프론트 프로젝트 깃헙에 업로드</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*m5vvp_bea03C_qZBbijhcQ.png" /></figure><p>aftergames 폴더로 이동 후 실행 명령어를 내리자.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4WWEN_HYvwZNwlBsragfEA.png" /></figure><p>위와 같은 화면이 나오면 성공적으로 vue 프로젝트를 생성한 것이다. 이제 서버에 배포할 작업이 남았다.</p><p>우선, 깃헙에 프로젝트를 업로드해보자.</p><pre>git init<br>git add -A<br>git commit -m &quot;first commit&quot;</pre><p>여러분의 첫 커밋이 생성될 것이다. 이제 여러분들의 깃 저장소에 로컬에 있는 코드를 push 하도록 하자.</p><pre>git remote &quot;https://github.com/.../yourproject.git&quot;<br>git push -u origin master</pre><p>한 번이라도 로컬에 있는 코드를 repository에 push한 경험이 있는 독자들은 어렵지 않게 작업을 수행할 수 있을 것이다. 이제 깃헙에 있는 프로젝트를 netlify 서버에 배포해보자.</p><h4>3. Netlify 서버에 배포</h4><p>회원가입은 어렵지 않게 할 수 있을 것이다. 회원가입 후 로그인하면 new site from git 버튼을 볼 수 있을 것이다. 이를 클릭 후 Deployment 방법에서 github을 선택하자.</p><p>github 계정과 연동이 안 돼 있다면 연동하도록 하자. 깃헙 아이디어와 비밀번호를 입력하는 과정이라 어렵지 않게 할 수 있을 것이다.</p><p>깃헙과 연동됐다면 본인이 연동할 깃헙 프로젝트를 선택하자. 여기까지 성공적으로 했다면 아래와 같은 화면을 볼 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QrOWOT9UGYD8WwejfYQSGw.png" /></figure><p>우리는 npm을 기본 명령어로 택했기 때문에 build 명령어도 npm run build를 입력해야 한다. Publish directory는 이제까지의 과정을 그대로 따라왔다면 dist일 것이다.</p><p>마지막으로 Deploy site를 클릭하자.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KZgFs5EFaprEAq2V1NAuAQ.png" /></figure><p>성공적으로 배포했을 때의 화면이다! 앞으로 변경된 코드를 repository에 push하기만 하면 자동적으로 서버에 반영될 것이다.</p><p>꼭 local에서 제대로 작동하는 지 확인 후 repository에 push하도록 주의하자. 장담컨대 netlify보다 더 간단하게 프론트 앱을 서버에 배포할 수 있는 방법은 없다. AWS에 배포하는 것은 나중에 기회가 된다면 포스팅하겠다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c4de9c5798fe" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[5 Steps to Configure HTTPS for Your Elastic Beanstalk Environment]]></title>
            <link>https://medium.com/@whj2013123218/5-steps-to-configure-https-for-your-elastic-beanstalk-environment-997db2ee83c2?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/997db2ee83c2</guid>
            <category><![CDATA[certificate]]></category>
            <category><![CDATA[elastic-beanstalk]]></category>
            <category><![CDATA[configuration]]></category>
            <category><![CDATA[https]]></category>
            <category><![CDATA[aws]]></category>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Wed, 13 Mar 2019 20:00:40 GMT</pubDate>
            <atom:updated>2019-03-14T10:53:50.483Z</atom:updated>
            <content:encoded><![CDATA[<p>Nowadays, I was trying to configure HTTPs environment which is deployed Elastic Beanstalk. Even though there is AWS documentation, it was not easy to configure this. So, I’m going to explain how to configure https for your elastic beanstalk step by step.</p><p>I will suppose that you already succeed to deploy Elastic Beanstalk Server by Classic Load Balance. Below are brief steps.</p><h4>1. Buy the domain in Route 53.</h4><h4>2. Create the A-IPv4 address record in your hosted zones.</h4><h4>3. Request a certificate in AWS certificate manager.</h4><h4>4. Create the CNAME record according to DNS configuration file.</h4><h4>5. Modify Load Balance Configuration in your elastic beanstalk environment.</h4><p>Now, I’m going to describe these steps in detail.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*e6ywEUnqLgl99icyAI5JxA.png" /></figure><h4>1. Buy the domain in Route 53.</h4><p>Sorry, you can’t avoid this. To make it HTTPS, you need your domain name and it’s not free. But it’s just around 10 dollar for a year. It’s not expensive and just let’s buy it.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*YE4U6txspEDQbQ2LM32Xdw.png" /></figure><p>Go to registered domains in AWS Route 53. Click the register domain and set the name which you want. Be careful your domain name should not be start with www. Just write your main domain name. For example, if you want use <a href="http://www.facebook.com,">www.facebook.com,</a> just write facebook when you write it. You can add www. later.</p><p>You need to wait for AWS to approve domain name. After this, let’s move to step 2.</p><h4>2. Create the A-IPv4 address record in your hosted zones.</h4><p>It’s time to use your domain name with Elastic Beanstalk server you have. First, you should know your elastic beanstalk domain name.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Tw5VBZfgCnz9hpdNScF3Mg.png" /></figure><p>You can check your url easily in here. Now, go to the hosted zones in Route 53.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*e78Zd4cBrooBX5F6BF3ETg.png" /></figure><p>I deleted all my private information for security. Anyway, click the create record set and write www. if you want set your name like <a href="http://www.facebook.com.">www.facebook.com.</a></p><p>Click the No in Alias and write your Elastic Beanstalk url in Alias target. Finally, click the create. Now, you can use your domain name. Please try to connect to your domain name later. Did you succeed? Okay, let’s move on step 3.</p><h4>3. Request a certificate in AWS certificate manager.</h4><p>Go to certificate manager and request a certificate. In my case, I requested a public certificate.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5006MPnx5v_4aV1Gx7I0Jw.png" /></figure><h4>So far so good? Be careful in this step.</h4><p>You should add two domain names. If your domain name is facebook.com, add both of facebook.com and *.facebook.com. If you just add facebook.com, it will not find your ‘www.facebook.com’ when you try to connect. Did you add both of them? Then, click the next.</p><p>Choose the DNS Validation. AWS recommends this method. Click the review. After reviewing your name, click the confirm and request.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AcbB7ibJtAMA_ig6s-VhCg.png" /></figure><p>It will be pending validation status because you need more step to get certificate. Click the Export DNS configuration to a file and open it. Did you open the CSV file? Then, please do not close it and let’s move to step 4.</p><h4>4. Create the CNAME record according to DNS configuration file.</h4><p>Go to the Hosted Zones in Route 53 again. It’s time to create CNAME record for validating certificate.</p><p>Check the csv file again. In my case, my file consists of like this.</p><p>Domain name: *.ehehdoadadkasd.com, ehehdoadadkasd.com</p><p>Record name: _84e28019a08102ca772853f6caec458b.ehehdoadadkasd.com.</p><p>Record Type: CNAME</p><p>Record Value: _57230b15588f545e9f3a1c1ff77fba35.hkvuiqjoua.acm-validations.aws.</p><p>Okay, what you should do now is just to copy and paste.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/610/1*3nvclkP93CUsXLQIRfSllg.png" /></figure><p>In my case, I should write _84e28019a08102ca772853f6caec458b in Name and _57230b15588f545e9f3a1c1ff77fba35.hkvuiqjoua.acm-validations.aws. in Value. You do not have to make Alias yes in this time. Click the Create and let’s wait for a few minutes.</p><h4>5. Modify Load Balance Configuration in your elastic beanstalk environment</h4><p>Go to the Certificate Manager again and check that it is issued. You should wait more than a few minutes after creating record. But, if you are waiting more than an hour, you must have been failed to create right record. In this case, Go back to step 4 and fine what the problem is.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Xo3JK80VsdiOMPkCj4qYsQ.png" /></figure><p>Check the ARN if it is issued. I delete all my private information, but you can check yours in your screen.</p><p>It’s almost finished. Go to Elastic beanstalk environment which you want to configure.</p><p>Before change load balance configuration, please check your instances in Capacity first. Make sure that your max instance is more than 1. In my case, I set the 1 in min and 4 in max.</p><p>Did you check it? Go to the load balancer now. Click the add listener. I’m going to suppose you are using classic load balancer. Write Listener port 443 and make Listener protocol HTTPS. Use instance port 80 and make instance protocol HTTP. Click the add button and apply. At last, choose the certificate manager whose ARN is matched with what you created before.</p><p>Now, just wait for a few minutes. If all changes are applied, try to connect https with your own domain name. Did you succeed? Congratulations! Now you can use https in your server!</p><p>Was this article useful? Then, please clap as much as you appreciate. Thanks you so much.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=997db2ee83c2" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[블로그 만들기 프로젝트-서버작업-]]></title>
            <link>https://medium.com/@whj2013123218/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%9C%EB%B2%84%EC%9E%91%EC%97%85-7c24c4d56ec8?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/7c24c4d56ec8</guid>
            <category><![CDATA[vuejs]]></category>
            <category><![CDATA[heroku]]></category>
            <category><![CDATA[elastic-beanstalk]]></category>
            <category><![CDATA[django]]></category>
            <category><![CDATA[netlify]]></category>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Wed, 13 Mar 2019 18:37:50 GMT</pubDate>
            <atom:updated>2019-03-13T18:37:50.523Z</atom:updated>
            <content:encoded><![CDATA[<p>아직 다 만들진 못했다만 중간 과정으로 서버에 업로드했기 때문에 우선 URL 주소를 알려드리겠습니다.</p><p><a href="https://wanghyungjun.netlify.com/">wanghyungjun</a></p><p>검색 기능까지만 되고 로그인, 댓글, 글쓰기 기능 등을 아직 만들지 못했습니다. 외주 작업도 요청받은 게 있어서 생각보다 더 길어질 것 같습니다. 블로그가 전부 완성될 때까지는 미디움에 계속 글을 남기고자 합니다.</p><p>이번 시간에는 서버작업을 하며 느낀 점들을 서술하고자 합니다. 일주일 동안 갖을 고생 다하며 내린 결론부터 말씀드리겠습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/563/1*C_gPi1wj2Rx3-jaJITuxGg.jpeg" /></figure><blockquote>서버 배포는 작업 초반부터 하자.</blockquote><p>저는 앞으로 모든 작업을 서버에 배포부터 한 뒤 본격화하기로 굳게 결심했습니다. 초반 셋팅부터 잘못되면 서버 배포시 갖은 고생은 다하게 됩니다. 앞으로의 작업을 Heroku로 배포할 것인지, netlify로 작업할 것인지 혹은 Elasticbeanstalk로 작업할 것인지에 따라 여러분들이 취해야할 행동은 전부 달라지게 됩니다. 제 시행착오를 말씀드리며 서버 배포는 왜 처음부터 염두에 두고 시작해야 하는지 말씀드리겠습니다.</p><h4>1. Netlify로 프론트앱을 배포할 경우</h4><p><a href="https://www.netlify.com/">Netlify: All-in-one platform for automating modern web projects</a></p><p>작업을 완료하고 어떻게 서버를 배포할지 생각할 때 친구를 통해 netlify의 존재를 알게 됐습니다. 실제로 초반 셋팅이 잘 돼 있다면 프론트 앱을 가장 쉽게 배포할 수 있는 도구 중 하나입니다.</p><p>게다가 배포 뒤 git에 push만 하면 자동으로 새로운 코드가 빌딩되고 배포까지 되기 때문에 서버 작업이 성가신 프론트 개발자들에게는 구원투수같은 존재입니다.</p><p>하지만 netlify 코드를 서버에 쉽게 배포하기 위해서는 초반부터 vue-cli3을 사용하는 것이 좋습니다. 저는 vue에 입문한지 얼마 안 됐기 때문에 작업을 더 무겁게 만들고 싶지 않았습니다. 그래서 vue-cli3를 사용하지 않았지만 원인 모를 이유 때문에 netlify에 서버가 제대로 배포되지 않았습니다.</p><p>vue-cli를 사용하여 다시 작업을 완료했지만 이번에는 다른 난관에 봉착했습니다. Netlify로 작업하면 https로 기본 배포된다는 사실이었습니다. 보안 측면에서는 http보다는 https가 훨씬 뛰어납니다. 하지만 https를 사용하게 되면 api를 전송하는 백엔드 서버도 https를 사용해야 합니다.</p><p>저는 작업할 당시 Elasitcbeanstalk(EB)로 장고(Django) 코드를 배포했고 EB에서는 http를 기본으로 구성합니다. 그렇기에 프론트앱에서 정보를 수신하기 위해서는 EB로 배포된 서버를 http에서 https로 바꿔야 하는데 그 과정이 정말 녹록치 않았습니다.</p><p>AWS Route53에게서 도메인을 구입해야 할 뿐만 아니라 Certificate Manager를 통해 인증서도 발급받아야 합니다. 그 받은 인증서를 EB에 적용하고 https를 배포시키기 위해서 또 일련의 과정들을 밟아야 하는데 AWS 기본 설명서로도 부족하고 구글에 자료도 그렇게 많지 않습니다.</p><p>결국엔 성공했지만 그 중간의 시간낭비들을 생각하면 왜 Netlify는 http를 지원하지 않는가에 대해 절망하게 됩니다.</p><blockquote>Netlify를 사용할 시 유의할 점을 정리하겠습니다.</blockquote><blockquote>1. Netlify를 사용하면 vue-cli도 같이 사용해야 한다.</blockquote><blockquote>2. Netlify를 사용하면 https로 구성되기 때문에 백엔드 서버도 https로 구성돼야 한다. Netlify로 배포된 앱을 https에서 http로 바꾸는 것은 불가능하다.</blockquote><blockquote>3. 미국 기반의 서버. 한국사용자들에게는 속도 최저화의 문제 발생.</blockquote><h4>2. Heroku로 작업을 배포할 경우</h4><p><a href="https://www.heroku.com/home">Cloud Application Platform | Heroku</a></p><p>Heroku는 파이썬, PHP, GO, Java, Node.js 등으로 작업한 백엔드 코드를 쉽게 배포할 수 있도록 도와주는 도구입니다. Heroku를 사용했을 때의 장점은 다음과 같습니다.</p><p>1. 정말 쉽게 배포 가능하다.</p><p>2. Https와 Http 모두 선택 가능하다.</p><p>3. 간단한 heroku 명령어를 통해 코드를 쉽게 업데이트 할 수 있다.</p><p>그럼에도 Heroku가 장점만 있는 것은 아닙니다. 가장 큰 단점은 postgresql을 기본으로 사용한다는 점입니다. 저처럼 mysql을 주로 사용하는 개발자의 경우 mysql 데이터베이스를 postgresql괴 연동시키기 위해 몇 가지 작업을 거쳐야 합니다. 문제는 그 작업이 또 간단치 않다는 것입니다.</p><p>딱히 선호하는 Database가 없고 간단하게 작업을 서버에 배포하고 싶다면 Heroku 사용을 권장합니다. 다만, Heroku 작업도 초기 셋팅이 중요하기 때문에 이미 작성된 코드가 꽤 길다면 아예 처음부터 Heroku 서버 배포에 맞게 셋팅을 한 뒤 다시 코드를 작성할 것을 권합니다.</p><p>사실 말이 거창하지 폴더 및 파일을 만들고 복사 및 붙여넣기를 하면 되기 때문에 1시간 이내로 작업이 끝날 것입니다. 이를 추천하는 이유는 이미 많이 진행된 작업에 Heroku에 맞게 설정을 변경시키는 것이 더 복잡하고 시간이 오래 걸리기 때문입니다.</p><p><a href="https://devcenter.heroku.com/articles/getting-started-with-python">Getting Started on Heroku with Python | Heroku Dev Center</a></p><p>위의 튜토리얼을 따라하며 설정을 구성한 뒤 기존에 작업했던 코드를 옮겨보십시오. 또한, 코드 옮기는 중간중간 과정에 서버에 업데이트를 하십시오. 전부 다 옮긴 뒤 배포에 문제가 생긴다면 정확한 원인 파악이 힘들 것입니다.</p><blockquote>Heroku를 사용할 시 권장사항에 대해 정리하겠습니다.</blockquote><blockquote>1. Tutorial을 따라 서버에 미리 배포한 후 이후 작업 진행.</blockquote><blockquote>2. 선호하는 Database가 없을 시 Heroku 사용 권장</blockquote><blockquote>3. 미국 기반의 서버. 한국 사용자들에게는 속도 최적화 문제 발생.</blockquote><h4>3. Elasticbeanstalk로 작업을 배포할 경우</h4><p>제가 옛날 글에 Elasticbeanstalk 관련 글을 쓰면서 ‘비교적 쉽게 서버를 배포할 수 있다.’라고 표현한 것 같습니다.</p><p>사실 이 표현이 한 번 배포를 한 사람의 입장에서 쉬운 것이지 처음 배포를 하는 사람이라면 도대체 뭐가 쉽냐고 불평을 할 수 있습니다. 개발자들의 ‘쉽다.’라는 말은 신뢰도 0으로 보셔도 됩니다.</p><p>저도 Elasticbeanstalk로 배포된 서버를 http뿐만 아니라 https 포트를 열어두려고 꽤나 고군분투했습니다. 정말 오랫 동안 고생한 것 같은데 한 번 성공하면 이후에는 쉽게 반복할 수 있을 것입니다. 이와 관련해 글을 작성할 계획이 있습니다.</p><p>Elasticbeanstalk로 서버 작업을 배포할 경우 유의할 점은 다음과 같습니다.</p><blockquote>프론트 서버가 HTTPS를 사용할 경우 Elasticbeanstalk 환경도 HTTPS를 구성해야 한다. 그 과정에서 도메인 등록이 필요하고 최소 9달러가 소요.</blockquote><blockquote>HTTPS 구성을 쉽게 하고 싶다면 Heroku를 사용권장. 이와 관련한 Elasticbeanstalk의 설명서는 절대 친절하지 않다.</blockquote><blockquote>서버를 한국에 두고 싶을 시 사용권장. Heroku와 Netlify는 미국 기반이기 때문에 속도 느림.</blockquote><p>Elasticbeanstalk가 Heroku나 Netlify에 비해 가볍게 사용할 수 있는 것은 아닙니다. 여러 고된 과정을 거쳐야 하기 때문에 정말 간단하게 배포하고 싶다면 Elasticbeanstalk 사용을 지양하고 Heroku와 Netlify를 사용하십시오.</p><h4>개인적인 결론</h4><p>정말 간단하게 배포하고 싶다면 Heroku와 Netlify를 사용하십시오. 튜토리얼을 차근차근 따라하다보면 어렵지 않게 할 수 있습니다.</p><p>서버를 한국에 두고 싶고 속도를 향상시키고 싶다면 Elasticbeanstalk 사용을 권장합니다. 그나마 AWS 툴 중에서는 가장 쉬운 편에 속합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7c24c4d56ec8" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[블로그 만들기 프로젝트 0-프롤로그-]]></title>
            <link>https://medium.com/@whj2013123218/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-0-%ED%94%84%EB%A1%A4%EB%A1%9C%EA%B7%B8-59146cf6a2ae?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/59146cf6a2ae</guid>
            <category><![CDATA[projects]]></category>
            <category><![CDATA[back-end-development]]></category>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[full-stack-development]]></category>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Fri, 22 Feb 2019 07:37:43 GMT</pubDate>
            <atom:updated>2019-02-22T07:37:43.921Z</atom:updated>
            <content:encoded><![CDATA[<p>2월 28일까지 제 개인 블로그를 만들어서 서버에 배포하는 것이 현재 목표입니다. 완성이 되면 그 과정에 대해 앞으로 자세히 포스팅하겠습니다.</p><h4>왜 개인 블로그를 만들고 있는가?</h4><p>미디움은 제 일상을 기록하고 짧은 글을 쓰기에 적합하지 않기 때문입니다. 저는 글을 진지하게만 쓰고 싶지 않습니다. 간혹 일상생활의 가벼운 일들을 어딘가에 남기고 싶지만 마땅한 곳이 없었습니다. 네이버 블로그는 제 취향이 아니고 국내에서는 그나마 괜찮은 곳이 브런치이나 브런치는 작가 신청 과정을 거쳐야 합니다. 이러한 이유들로 인해 현재 제 개인 블로그를 만들고 있는 중입니다.</p><h4>어떤 블로그를 만들 것인가?</h4><p>현존하는 웹사이트에 비유하자면 카테고리 기능이 있는 미디움과 인스타그램이 섞인 블로그입니다. 계획하고 있는 메인 페이지 디자인을 보여드리겠습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kFej_DUbkFeFMwu6upc1eg.png" /><figcaption>블로그 메인 페이지 디자인</figcaption></figure><p>헤더 부분의 Albums를 클릭하면 제가 찍은 사진들이 인스타그램처럼 나열된 화면을 볼 수 있을 것입니다. 중간에 있는 사진들은 제 글들의 카테고리입니다. 이를 클릭하면 해당 카테고리에 속한 글만 나열된 페이지가 나타날 것입니다. 현재까지 구상한 블로그 컨셉은 여기까지입니다.</p><h4>코드는 어떻게 작성할 것인가?</h4><p>프론트로는 우선 Vue.js를 사용할 계획입니다. Vue와 React 중 어떤 것을 배울지 고민했습니다. 현시점에선 React가 프론트 시장을 거의 독식하고 있긴 하지만 Vue를 사용할 시 코드를 훨씬 간결하게 쓸 수 있어 Vue를 배우고 사용하기로 결정했습니다. 아직까지는 굉장히 만족하며 사용하고 있는 중입니다.</p><p>CSS 대신 Sass로 스타일 코드를 적는 것은 이제는 필수라고 봅니다. 부모-자식 관계, 변수 설정, 임포트 기능 등, Sass는 CSS의 부족한 점을 완벽히 보완하고 있습니다. 고맙게도 Vue 파일에서 Sass로 코드를 작성할 시 알아서 컴파일 해주기 때문에 Vue에서 Sass를 쓰는 일도 정말 간단합니다.</p><p>백엔드로는 장고(Django)를 사용할 것입니다. 고백하자면 원래는 구글에서 만든 Go 언어를 쓸 계획이었습니다. 하지만, 파이썬에 익숙해진 저에게 Go 언어는 생각보다 쉽지 않았고 블로그 만들기 프로젝트가 현재 사이드 프로젝트에 불과하기 때문에 시간 부족으로 장고를 사용하게 됐습니다. 다만, 2월 28일까지는 장고로 만들고 그 이후 6월까지 Go 언어를 천천히 배우며 Go로 대체할 생각입니다. 후일 완성하게 되면 이에 관해 포스팅하겠습니다.</p><h4>현재 어디까지 프로젝트가 진행됐는가?</h4><p>주요 페이지 디자인은 끝났고 HTML 코드를 Vue로 전환했습니다. Django 기본 셋팅도 완료됐습니다. 전체적인 그림이 나왔기에 약 50% 정도 끝났다고 판단하고 있습니다.</p><h4>앞으로 무엇을 해야 하는가?</h4><p>첫째는 현재 미디움에 있는 제 글들을 간단히 크롤링해야 합니다. 미디움에서 제 프로필 페이지를 보면 40 개의 글들이 쭉 나열돼 있습니다. 그리고 각각에는 글 제목, 작성 날짜, 썸네일, 간략한 본문 내용이 있습니다. 이를 크롤링하여 AWS 서버에 있는 MySQL 데이터베이스에 저장한 뒤, 이 정보를 글 리스트 페이지에 사용해야 합니다. 사실 이 작업은 이미 끝났고 그 과정을 다음 글에 작성하겠습니다.</p><p>둘째, 자잘한 기능들을 완성해야 합니다. 앞으로 만들어야 할 기능은 페이스북, 구글 소셜로그인 기능, 구독 기능, 댓글 기능, 그리고 글의 본문 내용이 길 시 ‘…’으로 축약하기 등 디테일하게 신경쓸 부분이 많습니다. 다만, 소셜 로그인처럼 당장 중요치 않은 작업들은 우선 2월 28일까지 서버에 배포한 뒤 추후에 완성할 수도 있습니다.</p><p>셋째, 블로그 포스팅 기능을 만들어야 합니다. 사실, 이 작업이 현재 남은 가장 어려운 작업입니다. 쉽게 말씀드리면, 네이버나 미디움에 글을 쓰는 것과 비슷한 UI를 제 블로그에 만드는 것입니다.</p><p>미디움에서 글을 작성할 시 HTML 코드도 동시 작성되며 글을 저장할 시 본문에 생성된 HTML 코드 전체가 데이터베이스에 저장됩니다. 이는 간단한 작업이 결코 아니며 그렇다고 글을 쓸 때마다 HTML 파일을 작성할 수는 없는 노릇이기에 타협하고 넘어갈 수 없는 기능입니다. 이에 관해서도 완성될 시 그 과정에 대해 글을 남기겠습니다.</p><p>넷째, 서버에 배포해야 합니다. Elasticbeasntalk를 사용하면 좋긴 하지만 페이지의 Router들이 전부 Vue를 통해 작성이 돼 있어 사용할 수 있는지 아직 불확실합니다. Elasticbeanstalk가 안 된다면 어쩔 수 없이 다른 방법으로 서버에 배포해야 할 듯합니다. 아직은 계획이 불분명하지만 로컬에서 프로젝트가 완성되면 어떤 방법을 활용하든 1~2일 이내에 서버에 배포할 수 있을 것입니다.</p><h4>소스 공유</h4><p>완성이 되면 프론트 코드는 확실히 공개하겠습니다. 장고 코드는 보안에 문제가 없다고 판단될 시 공개하겠습니다. 완성되면 깃헙 주소를 알려드리겠습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=59146cf6a2ae" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[조지아의 천재 화가, 니코 피로스마니의 이야기]]></title>
            <link>https://medium.com/@whj2013123218/%EC%A1%B0%EC%A7%80%EC%95%84%EC%9D%98-%EC%B2%9C%EC%9E%AC-%ED%99%94%EA%B0%80-%EB%8B%88%EC%BD%94-%ED%94%BC%EB%A1%9C%EC%8A%A4%EB%A7%88%EB%8B%88%EC%9D%98-%EC%9D%B4%EC%95%BC%EA%B8%B0-445dddd7ca20?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/445dddd7ca20</guid>
            <category><![CDATA[art]]></category>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Sun, 10 Feb 2019 03:52:50 GMT</pubDate>
            <atom:updated>2019-02-10T03:52:50.686Z</atom:updated>
            <content:encoded><![CDATA[<p>조지아를 들었을 때, 미국의 조지아주를 먼저 떠올리는 분도 있을 것입니다. 하지만 제가 말한 조지아는 흔히들 말하는 코카서스 3국 중의 하나이며 지리적으로는 아제르바이잔, 터키와 가깝습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/0*ckexAD608-I6bkO2.gif" /><figcaption>조지아의 위치</figcaption></figure><p>조지아는 많은 분들에게 생소한 만큼 잘 사는 나라가 아닙니다. 또한, 유럽의 프랑스, 이탈리아처럼 예술 강대국도 아닙니다. 예술적으로도 불모지라고 할 수 있겠지요. 하지만 이 작고 예술 불모지 국가에서 한 천재화가가 등장했고 그는 피카소를 비롯한 후대의 여러 화가들에게 영향을 끼치기도 합니다. 그의 이름은 니코 피로스마니(1862~1918)이며 이번 포스팅에서는 그의 생애와 작품에 대해서 간략하게 다룰 것입니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/674/0*wWfRiGFH9tVCPDvE" /><figcaption>니코 프로스마니 자화상, 1900년 작.</figcaption></figure><p>니코 피로스마니는 정말 찢어지게 가난했습니다. 가난한 집에서 태어났고 죽을 때까지 가난하게 살았습니다. 그의 사인도 영양실조로 인한 간기능 부전이니 그가 얼마나 굶주리고 살았는지 상상할 수 있을 것입니다.</p><p>반 고흐 같은 천재 화가들도 으레 그렇듯이 니코 프로스마니 또한 사후에 재조명 받기 시작했습니다. 사실 피카소처럼 생전에 부와 명성을 얻는 것은 예술계에서 드문 경우입니다. 니코 프로스마니는 현재 그의 시신마저 위치를 확인할 수 없을 정도로 생전에 무시 받았던 화가입니다.</p><p>하지만 그는 꿋꿋이 그림을 그렸고 수많은 걸작을 탄생시켰으며 그의 그림 몇 점 소개해드리고자 합니다. 참고로 작품의 소개 기준은 명성보다는 개인적인 선호에 있습니다.</p><h4>1. Giraffe, 1900s</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/486/0*uBItI96hzuDxHlWy.jpg" /><figcaption>Giraffe, 1900s</figcaption></figure><p>제목은 기린이며 정확한 제작연도는 밝혀지지 않았습니다. 그림을 자세히 관찰해봅시다. 여러분들의 눈에는 이 동물이 기린처럼 보입니까? 몸통 색을 보면 뭔가 얼룩말같기도 합니다. 또한 다리와 몸통, 몸의 비율을 봅시다. 실제 기린에 비해 다리와 목이 짧게 묘사된 것을 알 수 있습니다. 피로스마니는 왜 기린을 정확하게 그리지 않았을까요?</p><p>그 이유는 피로스마니는 생전에 기린을 실제로 본 적이 단 한 번도 없기 때문입니다. 당시 조지아에는 동물원이 없었습니다. 기린이 개나 소처럼 사방에 널린 동물이 아니라는 점을 감안하면 기린을 한 번도 보지 못한 상황을 쉽게 이해할 수 있을 것입니다. 과거 조선시대 사람들 또한 기린을 한 번도 못봤던 것처럼 말이지요.</p><p>그렇다면 니코 피로스마니는 어떻게 기린을 묘사할 수 있었던 것일까요? 학자들 말에 의하면 피로스마니는 기린을 과거 동굴의 벽면에 그려진 그림을 통해, 그리고 전설이나 구전을 통해 확인한 묘사를 통해 기린을 그렸다고 합니다. 즉, 작품속의 동물은 여러 자료를 통해 형성된 피로스마니의 상상으로 창조된 것입니다.</p><p>이를 감안하면 그림 속 기린은 실제에 꽤 가깝게 묘사됐다고도 말할 수 있습니다. 개인적으로 이 그림을 좋아하는 이유는 피로스마니의 상상력이 가미됐다는 점과 기린의 어딘가 슬퍼 보이는 눈망울에 있습니다. 왠지 모르게 연민을 불러일으키는 저 눈망울은 사람의 눈처럼 보이기도 하네요.</p><h4>2. Childless millionaire and the poor with children, 1900s</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/750/0*asJHRblcmNGNGu_s.jpg" /><figcaption>Childless millionaire and the poor with children, 1900s</figcaption></figure><p>예술의 가치는 그 자체의 아름다움에서 오기도 하지만 사회적, 역사적, 과학적인 가치를 창출한다는 점에도 기인합니다. 이 작품 또한 그렇습니다. 과거 조지아의 사회적 현실을 그대로 반영한다는 점에서 작품을 읽는 재미를 더할 수 있습니다.</p><p>제목에서도 알 수 있듯이 피로스마니는 돈 많은 부부에게 자신의 아기를 파는 광경을 묘사했습니다. 왼편에 묘사된 부부는 그들이 입은 옷과 목걸이, 팔찌 등의 악세사리를 통해 상류층에 속함을 확실히 알 수 있습니다. 반면, 오른편의 가족은 신발도 신지 못할 형편이었고 남편없이 오직 부인 혼자서 3명의 아이를 키워낸 것을 추론할 수 있습니다.</p><p>아이들의 표정을 자세히 보면 왼편의 돈많은 부부를 신기하게 쳐다봄을 알 수 있습니다. 가난한 아이들에게 돈 많은 부부는 이질적으로 느껴졌을 것입니다. 또한, 아이를 안고 있는 부인을 보면 표정이 밝은 것 같기도 하고 어두운 것 같기도 하고 상당히 기묘합니다. 부인은 가난한 환경에서 약간은 벗어날 수 있다는 기쁨과 자신의 아이를 팔았다는 죄책감으로 인해 복합적인 감정을 느꼈을 것입니다.</p><p>사진 및 동영상 등이 존재하지 않았던 과거에는 이렇듯 예술은 사회적 현실을 생생히 포착하여 보여주는 훌륭한 수단이기도 하였습니다.</p><h4>3. Actress Margarita, 1909</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/720/0*szAp34bhlymyJwk2.jpg" /><figcaption>Actress Margarita, 1909</figcaption></figure><p>사실, 비엔나 알베르티나 미술관에서 이 작품을 봤을 때 큰 감흥이 없었습니다. 뭐 ‘뚱뚱한 여자 한 명 그렸다.’ 정도의 느낌만 받았습니다. 물론 그림 속의 여자가 예쁘다는 생각도 전혀 안 들었습니다.</p><p>하지만, 이 작품에 얽힌 사연을 들으면 그림의 의미가 다르게 다가옵니다. 그림 속 여자는 피로스마니가 짝사랑한 여인입니다. 피로스마니는 여자를 거의 그리지 않았습니다. 여자를 그린 그림은 희귀했고 이 작품처럼 여성을 성적으로 매력적으로 그리기 위해 노력한 작품은 이전에 없었습니다.</p><p>앞서 말씀드렸듯, 피로스마니는 평생을 가난하게 살았습니다. 그리고 이 여자는 배우로서 활동했습니다. 가난한 남자와 잘 나가는 여자. 한국 드라마 작가들이었다면 이 둘을 이어줬겠지만 현실은 역시 녹록치 않았습니다. 피로스마니는 자신의 마음을 표현하기 위해 자신의 집과 작품을 모두 팔아 온거리를 뒤엎을 정도의 장미꽃을 준비하여 사랑을 고백했지만 받아들여지지 않았습니다. 이 비극적인 일화는 러시아의 시인 귀에 들어가 시의 모티브가 됐고 그 시는 러시아의 지배를 받은 라트비아에서도 화제가 돼 시 내용을 가사로 한 노래가 탄생합니다. 그 노래 제목은 모두가 한 번은 들어봤을 법한 ‘백만송이의 장미’입니다.</p><p>다시 그림으로 돌아가 여인이 왼손에 쥔 장미에 주목해봅시다. 피로스마니의 사랑이 담긴 이 장미는 여인의 아름다움을 표현하기도 합니다. 또한, 여인은 온몸이 흰색으로 표현됐는데 흰색은 여인의 순수함을 상징합니다. 여인 주변에 날라 다니는 세 마리의 새는 여인의 여성스러움을 한 층 고양시키고 있습니다.</p><p>피로스마니는 확실히 열정적이고 천진난만한 사람이었을 것입니다. 자신의 사랑을 표현하기 위해 전재산을 장미 구입에 쓴 피로스마니의 행동을 저는 광기보다는 순수함에 가깝다고 생각합니다. 그의 사랑은 결국 비극적으로 끝났지만 그 비극성이 오히려 작품을 매력적으로 만들었다고 생각되네요.</p><h4>꿈이라는 것</h4><p>마지막으로 피로스마니의 꿈을 말씀드리고 글을 마치겠습니다. 그의 평생 꿈은 그의 집에 예술가들을 초대해 탁자에 둘러앉아 서로 예술에 대해 자유롭게 얘기를 주고받는 것이었습니다. 이 대단하지도 않은 꿈을 피로스마니는 이루지 못하고 죽었습니다. 그는 일생 동안 조지아 미술계에서 인정받지 못했기 때문이죠.</p><p>하지만 그는 사후 100년도 더 지난 2018년에 그의 꿈을 이루게 됐습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/762/0*odJM4TUhL2WpjFqz" /><figcaption>안도 타다오의 백만송이 장미 테이블</figcaption></figure><p>바로 일본의 건축가 안도 타다오가 피로스마니를 추모하여 백만송이 장미 테이블을 만든 것이지요. 생전 못 이룬 피로스마니의 꿈을 후대 예술가들이 대신 이뤄준 것입니다.</p><p>이렇듯 한 개인의 꿈이라는 것은 언제 이뤄질지 모르는 것이라는 생각이 듭니다. 굶어 죽은 니코 피로스마니는 100년 뒤에 자신의 꿈이 이뤄질 것이라고 상상이라도 했을까요. 현실이 탐탁치 않더라도 모두 가슴 속에 꿈 하나는 아직 간직할 만한 세상인 것 같습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=445dddd7ca20" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[네네 whj2013123218@gmail.com 으로 이메일 주시면 됩니다! 다만 제가 지금 해외에 있어서 답이 매우 느릴 수 있습니다]]></title>
            <link>https://medium.com/@whj2013123218/%EB%84%A4%EB%84%A4-whj2013123218-gmail-com-%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%A3%BC%EC%8B%9C%EB%A9%B4-%EB%90%A9%EB%8B%88%EB%8B%A4-%EB%8B%A4%EB%A7%8C-%EC%A0%9C%EA%B0%80-%EC%A7%80%EA%B8%88-%ED%95%B4%EC%99%B8%EC%97%90-%EC%9E%88%EC%96%B4%EC%84%9C-%EB%8B%B5%EC%9D%B4-%EB%A7%A4%EC%9A%B0-%EB%8A%90%EB%A6%B4-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4-330918325871?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/330918325871</guid>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Thu, 07 Feb 2019 01:55:36 GMT</pubDate>
            <atom:updated>2019-02-07T01:55:36.336Z</atom:updated>
            <content:encoded><![CDATA[<p>네네 whj2013123218@gmail.com 으로 이메일 주시면 됩니다! 다만 제가 지금 해외에 있어서 답이 매우 느릴 수 있습니다😭</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=330918325871" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[도움 됐다니 기분이 좋네요. 감사합니다]]></title>
            <link>https://medium.com/@whj2013123218/%EB%8F%84%EC%9B%80-%EB%90%90%EB%8B%A4%EB%8B%88-%EA%B8%B0%EB%B6%84%EC%9D%B4-%EC%A2%8B%EB%84%A4%EC%9A%94-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-c38dee4d678?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/c38dee4d678</guid>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Sun, 13 Jan 2019 14:38:25 GMT</pubDate>
            <atom:updated>2019-01-13T14:38:25.572Z</atom:updated>
            <content:encoded><![CDATA[<p>도움 됐다니 기분이 좋네요. 감사합니다😊</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c38dee4d678" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ㅎㅎㅎ 잘살고 있어요]]></title>
            <link>https://medium.com/@whj2013123218/%E3%85%8E%E3%85%8E%E3%85%8E-%EC%9E%98%EC%82%B4%EA%B3%A0-%EC%9E%88%EC%96%B4%EC%9A%94-21546ac26457?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/21546ac26457</guid>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Sun, 23 Dec 2018 17:03:24 GMT</pubDate>
            <atom:updated>2018-12-23T17:03:24.920Z</atom:updated>
            <content:encoded><![CDATA[<p>ㅎㅎㅎ 잘살고 있어요</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=21546ac26457" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[학회 홈페이지 개편 후기]]></title>
            <link>https://medium.com/@whj2013123218/%ED%95%99%ED%9A%8C-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B0%9C%ED%8E%B8-%ED%9B%84%EA%B8%B0-9569ffffa4c4?source=rss-ecfb1d3348b7------2</link>
            <guid isPermaLink="false">https://medium.com/p/9569ffffa4c4</guid>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[essay]]></category>
            <category><![CDATA[web-development]]></category>
            <dc:creator><![CDATA[왕형준]]></dc:creator>
            <pubDate>Sun, 23 Dec 2018 13:06:31 GMT</pubDate>
            <atom:updated>2018-12-23T13:06:31.430Z</atom:updated>
            <content:encoded><![CDATA[<p>프론트 개발을 공부할 겸 필자가 속해 있는 학회 홈페이지를 전면 개편했다. 원래 하고 있던 프로젝트에서 연습했을 수도 있었지만 학회 홈페이지의 오래된 코드를 다시 써보는 것이 더 구미가 당겨 이를 선택했다.</p><p>지난 3개월 동안, 여행 기간과 기존 프로젝트에 쏟은 시간을 제외하면 실질적으로는 약 1개월 동안 학회 웹사이트를 개편하며 필자가 느낀 점을 이번 포스팅에서 다루고자 한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*farkKZs01_Nt4VYlPD18tw.gif" /></figure><h4><strong>1)</strong> <strong>우선 외치고 시작한다.</strong></h4><p>처음 학회 웹사이트를 개편할까 고민했을 때 먼저 계획을 학회원들에게 말해야 하나 고민했다. 혼자만 계획했을 때는 중간에 없던 일로 되돌릴 수 있지만 말하는 순간부터는 개편하는 것이 선택이 아닌 의무가 되기 때문이다. 특히 필자 스스로 디자인과 UI에 대해서는 자신감이 없었고 CSS나 Javascript 에 대한 이해도 또한 부족했다. 여러 여행 계획, 기존의 프로젝트, 학교 일정 등 여러 스케줄이 있는 상황에서 프론트를 기초부터 배우고 코드를 다시 쓰는 것이 현실적인가 싶었다.</p><p>하지만 너무 많은 고민을 하지 말자는 생각과 함께 학회원들에게 웹사이트 개편 선언부터 하고 만들어가기 시작했다. 9월 말부터 작업에 들어갔고 당시에는 11월 말까지 끝내는 것을 목표로 하였다.</p><p>주변 사람들에게 무엇을 언제까지 하겠다고 외치고 시작하는 것과 혼자만 계획하고 작업을 하는 것은 동기부여의 차원이 확연히 다르다. 자신과의 약속보다 남들과의 약속을 못지키는 것이 사회적으로 더 창피한 일이다. 사람은 자신이 원하는 것을 얻고자 하는 데서 동기부여도 얻지만 적어도 창피하지는 말자는 생각에서도 에너지를 얻는다.</p><p>먼저 계획을 밝힘으로써 피할 수 없는 상황이 됐고 이로 인해 공항, 비행기, 기차, 호스텔 등 상황과 장소를 가리지 않고 공부하고 코드를 쓸 수 있었다.</p><p>현재 이 글을 작성하고 있는 이전 주 금요일 12월 14일에는 홈페이지 개편이 50% 정도 끝난 상황이었다. 혼자 방에 가만히 있으면서 원래 11월 말까지 끝내려고 했던 홈페이지 개편을 이제까지 완수하지 못한 나 자신이 한심하다는 생각이 들었다. 또한, 2018년이 이렇게 끝나면 내가 올해 제대로 한 것은 있었나 라는 생각과 함께 자괴감이 들 것 같았다.</p><p>결국 스스로 동기부여를 하고 ‘일주일 안에 끝낸다.’ 라는 계획을 세웠고 학회 홈페이지를 처음 만드신 선배님께 연락을 드려 ‘현재까지의 코드 깃헙에 pull request 보냈고 나머지는 12월 21일까지 끝내겠습니다.’ 라는 메시지를 보냈다. 그 이후에는 미친 듯이 남은 작업에 착수했다. 시험 4개, 한 줄도 안 쓴 기말 리포트 등 여러 과업이 있었지만 하루 15시간 이상씩 코드를 쓰며 19일 밤까지 작업을 끝낼 수 있었다.</p><p>당시 선배님께 먼저 계획을 말하고 시작한 것이 국면을 바꿨다. 먼저 외치고 시작하는 것이 동기부여의 면에서는 확실히 효과적이다.</p><h4><strong>2)</strong> <strong>기초부터 다지자.</strong></h4><p>처음 작업을 시작했을 때는 ‘에이, HTML, CSS인데 그냥 시작부터 해보자.’라는 마음에 무작정 코드를 썼었다. 그렇게 2~3일 정도 지났을까 그럭저럭 모양이 괜찮은 메인화면이 탄생했었다. 특히, HTML, CSS는 모든 웹페이지에 코드가 공개됐기 때문에 모르는 것이 있으면 남의 코드를 그대로 갖다 쓰기도 쉬웠다.</p><p>하지만, 그 이후 더 복잡한 코드를 쓰면서 HTML, CSS 코드를 전부 고치고 다시 쓰는 과정을 되풀이했고 기초부터 다져야겠다는 생각이 들었다.</p><p>총 작업 시간은 3개월이지만 여행 기간, 기존 프로젝트에 쏟은 시간 등을 제외하면 실질적인 작업 시간은 약 8주 정도이다. 이 8주 중 2~3주는 유튜브로 반응형 웹사이트 제작을 공부하면서 기초를 다지는 데 시간을 보냈다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fqkx_7g7jrr4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dqkx_7g7jrr4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fqkx_7g7jrr4%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/44d15ba5f75ad4bb651d9c1abdc9f7b2/href">https://medium.com/media/44d15ba5f75ad4bb651d9c1abdc9f7b2/href</a></iframe><p>부트스트랩과 시맨틱 UI 등 CSS 프레임워크의 도움없이 하나하나 직접 써가며 반응형 사이트를 만든다는 것이 참 고역이었지만 이 과정에서 기초가 쌓였고 작업속도 또한 급증했다. 설령, 남의 코드를 그대로 쓰는 일이 있더라도 그 코드를 이해하고 쓸 수 있었다. 기초를 다진 2~3주의 시간은 이번 프로젝트에 있어 가장 값진 시간이었다.</p><p>무엇을 하든 기초가 우선이다. HTML, CSS는 특히 프로그래머들에게 우습게 보이는 경향이 있는데 이마저 공부하고 시작하여야 한다. 기초부터 다지자.</p><p><strong>3)</strong> <strong>속도가 우선이다.</strong></p><p>프론트는 잘하려면 끝이 없다. 정말 사소한 부분에서 차이가 만들어지는 것이 프론트이기 때문에 대충하면 정말 쓰레기 같은 페이지를, 완벽하게 만들면 구글처럼 직관적인 페이지를 만들 수 있다. 따라서, 완벽함에 대한 집착 때문에 단 한 페이지도 1달이 소요될 수 있는 것이 프론트이다.</p><p>하지만 개발에 정답은 없고 사소한 것에 시간을 과하게 쏟으면 종국에는 작업을 중도 포기하게 된다. 그럴 바에 차라리 완벽주의를 버리고 최대한 속도를 높이는 것이 현실적이다. 우선 끝까지 제작하고 서버에 배포한 뒤 잘못된 부분이 있으면 추후에 고치면 그만이다. 또한, 서버에 배포하는 순간 유저들의 진실한 피드백을 받을 수 있기 때문에 UI에 고민하는 시간도 덜어진다.</p><p>속도가 우선이다. 완벽함을 목표로 하더라도 우선은 빠르게 만들자. 그리고 나중에 고치자. 처음부터 완벽할 수는 없다.</p><p><strong>4)</strong> <strong>적절히 타협하자.</strong></p><p>적절한 타협은 속도를 높이자는 내용과도 일맥상통한다.</p><p>작업 도중 ‘아 이거 내가 봐도 너무 안 예쁜데?’, ‘아 이 에러 꼭 고쳐야 하나… 당장 안 고쳐도 문제없을 것 같은데…’ 등의 생각이 많이 들었고 정말 상황별로 다르게 행동했다.</p><p>치명적이거나 금방 고칠 수 있는 에러는 바로 고쳤다. 반대로 사소하지만 어떻게 고칠 지 감이 안 오는 에러는 그대로 놔뒀다. 그 사소한 에러 때문에 스트레스 받고 다른 작업을 못하는 것보다는 후일을 기약하고 아이디어가 떠오를 때 고치는 것이 더 효율적이라고 판단했다. 또한, 디자인이 훌륭하지 않아도 참고 볼 수 있는 선이면 더 욕심내지 않았다.</p><p>타협의 적절선이 중요하다. 치명적인 에러면 몇 일이 소요되든 당장 고쳐야 한다. 디자인이 절망적인 수준이라면 처음부터 뜯어 고쳐야 한다. 반면, 타협할 수 있는 수준의 에러와 디자인이라면 다른 페이지를 위해 용인하고 넘어갈 수도 있어야 한다. 타협의 적절선은 본인이 정하는 것이다. 다만, 절대로 타협하지 않을 것이라는 쓸데없는 고집은 버리자. 완고한 고집은 백해무익하다.</p><h4>결론</h4><p>일을 끝까지 완수한다는 것은 커다란 쾌감과 성취감, 그리고 자신감을 준다. 얼마가 걸리든 중간에 포기하지 않고 목표까지 해내는 것이 결국에는 제일 중요하다고 생각한다. 포기도 계속 하다보면 습관이 된다.</p><p>아래 링크는 필자가 개편한 학회사이트이다. 정말 부끄러운 실력이지만 그래도 건실한 피드백을 받을 수 있지 않을까 하는 생각에 링크를 남겨 본다.</p><p><a href="http://yig.website/">http://yig.website/</a></p><p>2019년도 더욱 발전하는 한 해가 되길 진심으로 바란다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9569ffffa4c4" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>