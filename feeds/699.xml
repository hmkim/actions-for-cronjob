<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>이수홍</title>
    <link>https://brunch.co.kr/@@so6</link>
    <description>이수홍의 브런치입니다.</description>
    <language>ko</language>
    <pubDate>Tue, 14 May 2019 09:23:03 GMT</pubDate>
    <generator>Kakao Brunch</generator>
    <image>
      <title>이수홍의 브런치입니다.</title>
      <url>https://img1.daumcdn.net/thumb/C100x100/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fguest%2Fimage%2Fhh5lLy7R49oUJG5DwEKLfCx2-us</url>
      <link>https://brunch.co.kr/@@so6</link>
      <width>100</width>
      <height>100</height>
    </image>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 9 - OAuth2 시스템에서 Scope를 이용한 API 권한 제어</title>
      <link>https://brunch.co.kr/@@so6/15</link>
      <description>이전 챕터에서는 클라이언트 정보를 관리하는 부분을 확인해보았다. 이번에는 scope를 구체적으로 관리하는 방법을 알아보자. 먼저 scope는 앞서서도 잠깐 살펴보았지만 클라이언트가 API에 접속할 수 권한의 범위를 제한할 때 이용한다. 페이스북의 예를 들어 보자면&amp;nbsp;서드파티 클라이언트(페이스북 용어는 앱이다.)를 통해서 페이스북에&amp;nbsp;접속하게 되면 위와 같이 클&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FaQlvJ2EmIY9J_e-DBdoQxFAbYKc.png" width="350" /&gt;</description>
      <pubDate>Sun, 26 Feb 2017 12:45:09 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/15</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 8 - OAuth2 서버를 커스터마이징 해보자(클라이언트 관리 편)</title>
      <link>https://brunch.co.kr/@@so6/8</link>
      <description>이제 까지 TokenStore를 제외하고&amp;nbsp;최소한의 설정만 하는 형태를 구현해 보았다. 하지만 실제 서비스에서 사용하기 위해서는 여러 가지 확장 형태를 고려해야 한다. 그중 클라이언트&amp;nbsp;관리하는 부분에 대해서&amp;nbsp;알아보자. 앞선 챕터에서 설명한 형태로 구현했을 때에는 모든 권한을 가지고 있는 클라이언트를 하나만 사용한다고 가정하고 테스트했었다. ( foo:bar &lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2Fl9plEvzVOoyiI1XCehjSlphqoZQ.jpeg" width="500" /&gt;</description>
      <pubDate>Sun, 29 Jan 2017 10:54:23 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/8</guid>
    </item>
    <item>
      <title>스프링 시큐리티 이해 2 - Authentication의 이해</title>
      <link>https://brunch.co.kr/@@so6/12</link>
      <description>이전 포스팅에서는 스프링 시큐리티의 간단한 소개와&amp;nbsp;Session으로 인증받는 형태와 시큐리티의 차이점에 대해서 이야기해보았다. SecuriyContext에 대해서 이야기하다가 끝냈는데 여기서는 Authentication에 대해서 한번 알아보자. SecurityContext는 앞에서도 이야기했지만 말 그대로 인증 정보를 담는 객체일 뿐이었다.&amp;nbsp;그리고 Auth&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FkuaVDAlU2NibIJZ1Msc36SxBPPU.jpg" width="500" /&gt;</description>
      <pubDate>Fri, 16 Sep 2016 09:48:07 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/12</guid>
    </item>
    <item>
      <title>스프링 시큐리티 이해 - 기본</title>
      <link>https://brunch.co.kr/@@so6/11</link>
      <description>최근 자바와 스프링으로 많은 웹 애플리케이션을 만들어지고 있다.&amp;nbsp;그리고 웹 애플리케이션은 보안이 중요하다는 것은 누구나 이해하면서도 공감하고 있다. 이번 포스팅에서는 자바의 보안과 관련된 프레임워크 중&amp;nbsp;스프링 시큐리티 프레임워크의 원리에 대해서 설명해보려고 한다. 먼저 기존 서블릿에서 인증과 권한이 어떻게 이루어졌는지 간단히 한번 살펴보겠다. 단순한 기존 &lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FLjhKdCnY9_-kfM-7gGtGyrFMOf0.jpg" width="500" /&gt;</description>
      <pubDate>Wed, 14 Sep 2016 09:45:20 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/11</guid>
    </item>
    <item>
      <title>스프링 부트 예외 1 - 스프링 부트 예외의 기본</title>
      <link>https://brunch.co.kr/@@so6/9</link>
      <description>스프링 부트를 사용하다가 예외를 커스터마이징 하려고 할 때 기존 스프링을 사용하는 사람 조차 당황할 때가 있다. 기존 스프링 MVC에서 예외 처리랑 조금 다르기 때문이다. 물론 기본적으로 제공하고 있는 속성을 사용하면 어느 정도 쉽게 사용 가능하다. 예외 관련 설정하는 방법으로는 몇가지가 있는데 한번 살펴보자.  1. 환경변수로만 설정하는 방법 # appl&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FeeUqHelCyLkpIgADaUOnfw47v4s" width="500" /&gt;</description>
      <pubDate>Tue, 12 Jul 2016 17:33:34 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/9</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 7 - JWT 방식으로 바꿔 보자</title>
      <link>https://brunch.co.kr/@@so6/7</link>
      <description>이전 포스팅에서 OAuth2&amp;nbsp;기본 Access&amp;nbsp;Token을 사용해서 사용해서 교환하여 인증받는 방식을 이야기하였다. 이렇게 하는 방식에는&amp;nbsp;단점이 존재한다.&amp;nbsp;Access&amp;nbsp;Token만&amp;nbsp;교환하기 때문에 그 다시 토큰을 가지고 인증&amp;nbsp;정보를 조회하기 위해 OAuth2 서버로 다시 요청하여 인증된 정보를 얻어오는 오버헤드가 생기게 된다. 참고로 이야기하자면&amp;nbsp;API 서&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FO7IwkP7XmqUg22gv3dtyHFISqtM.jpeg" width="500" /&gt;</description>
      <pubDate>Thu, 12 May 2016 14:58:10 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/7</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 6 - API 서버와 OAuth2 서버를 분리</title>
      <link>https://brunch.co.kr/@@so6/6</link>
      <description>앞서 포스팅 작성한 예제까지는 API 서버와 OAuth2 서버가 하나의 웹 애플리케이션에서 같이 올라가는 형태를 취하고 있다. 예제 자체를 심플하게 유지하려는 목적과 이렇게 개발도 가능하다는 것을 보여주기 위한 &amp;nbsp;것이었다. 하지만 실제 서비스를 하기 위해서는 각각 다른 인스턴스&amp;nbsp;형태로 서비스를 해야 한다. 이전 포스팅에도 언급했지만 보통 API&amp;nbsp;서버 같은 &lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FiHzNS9HK2Zfhywh2KXlKLzqycxg.jpg" width="500" /&gt;</description>
      <pubDate>Mon, 29 Feb 2016 12:59:32 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/6</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 5 - OAuth2 서버를 커스터마이징 해보자 (TokenStore 편)</title>
      <link>https://brunch.co.kr/@@so6/5</link>
      <description>앞서 포스팅에서는 최소한의 코드로 OAuth2 서버를 만들어보았다. 사실 설명은 길었으나 정작 코드가 얼마 없는 것을 보고 많이 실망했을 수도 있겠다. 당연히 테스트 형태로 사용할 수는 있어도 실제로 서버로 사용하기에는 많이 부족한 형태이다. 실제로 사용하기 부족한 이유를 한번 살펴보자. 1. 기본적으로 설정하지 않으면 인증, 권한, 토큰, 권한 코드, 클&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FmTVHT4OMUeZgSV0O_f44E4ApnPU.jpg" width="500" /&gt;</description>
      <pubDate>Mon, 15 Feb 2016 17:17:33 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/5</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 4 - 간단한 OAuth2 서버 만들어 보기</title>
      <link>https://brunch.co.kr/@@so6/4</link>
      <description>이번 &amp;nbsp;포스팅부터 본격적으로 OAuth2 서버를 만들어 보겠다. 간단한 세팅을 시작으로 하나하나 점증적으로 확장하는 형태로 진행할 예정이다. (샘플 소스:&amp;nbsp;https://github.com/sbcoba/spring-boot-oauth2-sample/tree/master) Client ID 계정 생성 먼저 기본적인 OAuth2 서버에서 가지는 Client &amp;nbsp;&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FP2hxVZJzMXW3cbkAUlV_82TpJCw.jpg" width="500" /&gt;</description>
      <pubDate>Fri, 12 Feb 2016 18:50:04 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/4</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 3 - API 서버 만들기</title>
      <link>https://brunch.co.kr/@@so6/3</link>
      <description>API 서버 만들기 OAuth2 인증을 받기 위한 API 서버를 간단하게 만들어보겠다. API 서버 자체는 OAuth2 독립된 시스템이다. 단지 API에 접근하기 위하여 인증과 권한이 필요할 때&amp;nbsp;OAuth2를 사용하여 인증을 받을 것이다.&amp;nbsp;( 물론 OAuth2 이외에도&amp;nbsp;다른 인증시스템이 있다. )  먼저 사전에 사용될 소스를 살펴보자.  API에서 사용될 &lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FHjm3sN35-g9YKcFytsedcJ2QHNI.jpg" width="500" /&gt;</description>
      <pubDate>Fri, 12 Feb 2016 07:20:32 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/3</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 2 - 본격적인 개발 하기전에</title>
      <link>https://brunch.co.kr/@@so6/2</link>
      <description>Simple is Best Spring Boot(이하&amp;nbsp;스프링 부트)는 이 문장과 가장 적합한 형태가 아닐까&amp;nbsp;생각된다. (사실은&amp;nbsp;보이는 부분만 간단하다.) 그 문장이 맞게 간단하게 스프링 부트로&amp;nbsp;OAuth2 서버를 만들 준비를 해보자. (사실 소스 보다 설명이 더 많이 차지할&amp;nbsp;것 같다. 정작 완성되어 있는 형태에서는 소스는 얼마 없을 것이다.) 시작하기 전 &lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2F4ykn8jQ3VZEVtKMQzoQUcck3UQs.jpg" width="500" /&gt;</description>
      <pubDate>Fri, 12 Feb 2016 07:17:19 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/2</guid>
    </item>
    <item>
      <title>Spring Boot로 만드는 OAuth2 시스템 1 - 스프링 부트와 OAuth2</title>
      <link>https://brunch.co.kr/@@so6/1</link>
      <description>최근에 웹 또는 앱을 개발하게 되면 가장 많이 접하는 인증 형태가 바로 OAuth2&amp;nbsp;형태이다. 소위 말하는 페이스북 인증, 구글&amp;nbsp;인증, 다음 인증, 네이버 인증&amp;nbsp;등은 대부분 OAuth2 인증을 지원한다. 사실 개발자들은 클라이언트 형태로 위와 같은 인증서비스를 사용해서 자신의 시스템과 연동을 사용한 형태는 많이 접해 보았을 것이다. 하지만&amp;nbsp;OAuth2 인증&lt;img src= "https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2Fso6%2Fimage%2FurXUmfsMDFSAp_wzeF-fx1DsdSQ.jpg" width="500" /&gt;</description>
      <pubDate>Fri, 12 Feb 2016 07:16:13 GMT</pubDate>
      <author>이수홍</author>
      <guid>https://brunch.co.kr/@@so6/1</guid>
    </item>
  </channel>
</rss>
