<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>만화로 나누는 자유/오픈소스 소프트웨어 이야기</title>
	<atom:link href="https://joone.net/feed/" rel="self" type="application/rss+xml" />
	<link>https://joone.net</link>
	<description>Comics about Free and Open Source Software</description>
	<lastBuildDate>Sun, 10 Feb 2019 18:53:52 +0000</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.0.4</generator>
<site xmlns="com-wordpress:feed-additions:1">139783876</site>	<item>
		<title>30. 리눅스 이야기: 리눅스 vs. 미닉스  1부</title>
		<link>https://joone.net/2019/02/09/30-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%85%ec%8a%a4-vs-%eb%af%b8%eb%8b%89%ec%8a%a4-1%eb%b6%80/</link>
		<comments>https://joone.net/2019/02/09/30-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%85%ec%8a%a4-vs-%eb%af%b8%eb%8b%89%ec%8a%a4-1%eb%b6%80/#respond</comments>
		<pubDate>Sat, 09 Feb 2019 19:05:41 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[minix]]></category>

		<guid isPermaLink="false">http://joone.net/?p=1433</guid>
		<description><![CDATA[“그런데, 최근에 페이징 메모리도 지원하고 여러 사람이 개발에 참여하면서 인기가 많아요.” “너희들이 잘 모르는데, 리눅스는 모노리식 커널이란다. 이는 오래된 기술이다. 미래의 운영체제는 미닉스와 같은 마이크로 커널 디자인을 가질 것이다. 그러니, 리눅스에 대한 관심은 끊는 것이 좋다.” “음.. 사람들이 이런 커널에 관심을 갖는 것은 학문적으로 좋지 않아. 아무래도 모노리식 커널에 대하여 한마디 해야겠어.” 리누스와 타넨바움 교수는 [&#8230;]]]></description>
				<content:encoded><![CDATA[</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2019/02/null-23.png" width="281" height="309" alt="" title=""></p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-24.png" width="624" height="436" alt="" title=""></p>
<p>“그런데, 최근에 페이징 메모리도 지원하고 여러 사람이 개발에 참여하면서 인기가 많아요.”<br />
“너희들이 잘 모르는데, 리눅스는 모노리식 커널이란다. 이는 오래된 기술이다. 미래의 운영체제는 미닉스와 같은  마이크로 커널 디자인을 가질 것이다. 그러니, 리눅스에 대한 관심은 끊는 것이 좋다.”</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-25.png" width="372" height="365" alt="" title=""><br />
“음.. 사람들이 이런 커널에 관심을 갖는 것은 학문적으로 좋지 않아. 아무래도 모노리식 커널에 대하여 한마디 해야겠어.”</p>
</p>
<p>리누스와 타넨바움 교수는 커널 디자인에 관한 논쟁을 메일링 리스트(comp.os.minix)통해 주고 받기 시작했고, 전세계 여러 사람이 이 논쟁에 참여했습니다.다. </p>
</p>
<p>참고: 메일 내용을 대화식으로 간단하게 구성했습니다. 메일링 리스트에 올라온 모든 글은 <a href="https://www.oreilly.com/openbook/opensources/book/appa.html">여기</a>를 참고하세요.</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-26.png" width="378" height="274" alt="" title=""><br />
아시다시피, 저에게 미닉스는 책 쓰는 일이 지루하고 CNN TV에서 전쟁이나 혁명 또는 의회 청문회를 방송하지 않는 저녁에나 하는 취미입니다. 저의 실제 직업은 운영체제 분야를 연구하는 교수입니다.</p>
</p>
</p>
<p style="text-align: right;"><img src="http://joone.net/wp-content/uploads/2019/02/null-27.png" width="345" height="228" alt="" title=""></p>
<p>교수님은 미닉스를 취미로 개발하신다고 하셨는데, 누가 미닉스로 돈을 벌고 누가 무료로 리눅스를 쓰게 하는지 보세요. 그리고 나서 취미에 관해 이야기하세요. 미닉스를 자유롭게 사용할 수 있도록 해주시다면,  제가 가진 큰 고민은 사라질 것입니다. 그리고 교수라는 직업이 미닉스가 가진 한계에 대한 변명이 될 수는 없습니다.</p>
</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-28.png" width="508" height="146" alt="" title=""><br />
미닉스의 한계는 부분적으로 제가 교수인 것과 최소한 관련이 있습니다. 즉, 미닉스의 설계 목표 중 하나는 학생들이 구입할 수 있는 저렴한 하드웨어에서도 실행 가능하게 하는 것입니다. 이러한 노력으로,  미닉스는 하드디스크가 없는 4.77 MHZ PC에서도 동작했습니다. 그렇다보니 보니 기능적으로 한계를 갖고 있습니다. 어쨌든, 운영체제 교수로서 리눅스에 관해 두가지 관점을 가지고 이야기해보려고 합니다.</p>
</p>
<p style="text-align: right;"><img src="http://joone.net/wp-content/uploads/2019/02/null-46.png" width="406" height="160" alt="" title=""></p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-30.png" width="457" height="138" alt="" title=""><br />
먼저 리눅스가 모노리식 커널 디자인을 갖고 있는 부분을 지적하고 싶군요. 대부분의 과거 운영체제는 리눅스와 마찬가지로 모노리식 디자인을 갖는데, 이는 운영체제 전체가 하나의 a.out 파일로 이루어져 있고 ‘커널 모드’에서 실행됩니다. 이 바이너리는 프로세스 관리, 메모리 관리, 파일 시스템과 나머지 기능을 포함하고 있습니다. 그러한 시스템의 예로는 UNIX, MS-DOS, VMS, MVS, OS/360, MULTICS 등이 있습니다. </p>
</p>
<p>그 대안인 마이크로 커널 기반 시스템은 OS의 대부분 기능이 커널이 아닌 개별적인 사용자 프로세스로 실행됩니다. 또한 메시지 전달을 통해 서로 통신합니다. 이 커널의 임무는 메시지 전달, 인터럽트 핸들링, 저수준 프로세스 관리이며, I/O를 포함할 수도 있습니다. 그 예로, RC4000, Amoeba, Chorus, Mach가 있으며 윈도우NT는 아직 출시가 되지 않았습니다.</p>
</p>
<p>미닉스는 마이크로 커널에 기반을 둔 시스템입니다. 파일 시스템과 메모리 관리는 분리된 프로세스로 커널 밖에서 실행됩니다.  I/O 드라이버 역시 개별적인 프로세스로 수행됩니다. 하지만, 리눅스는 모노리식 스타일의 시스템입니다. 이는 1970년대로 퇴보하는 것으로 마치 C로 된 프로그램을 베이직으로 다시 작성하는 것과 다를 바가 없습니다.</p>
<p style="text-align: right;"> <img src="http://joone.net/wp-content/uploads/2019/02/null-31.png" width="260" height="309" alt="" title=""></p>
</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-32.png" width="624" height="232" alt="" title=""><br />
사실, <a href="https://www.gnu.org/software/hurd/hurd.html">GNU 커널(Hurd)</a>이 지난 봄에 준비가 되었다면, 제가 귀찮게 리눅스를 시작할 필요도 없었겠죠. 하지만, 아쉽게도 GNU 커널은 아직까지 존재하지 않고, 리눅스는 현재 사용 가능한 것만으로도 많은 것을 얻고 있습니다. 마이크로 커널이 커널 장점에 대한 유일한 기준이라면, 교수님의 의견이 맞지만, 먼저 미닉스가 마이크로 커널로서 제대로 동작하지 않고 있으며 멀티태스킹에 문제가 있다고 언급하셔야했습니다. 제가 교수님처럼 멀티스레딩에 문제가 있는 파일시스템을 만들었다면, 다른 사람들을 그렇게 쉽게 비난하지는 못했을 겁니다.</p>
</p>
<p style="text-align: right;"><img src="http://joone.net/wp-content/uploads/2019/02/null-33.png" width="413" height="150" alt="" title=""></p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-47.png" width="572" height="178" alt="" title=""></p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-35.png" width="521" height="145" alt="" title=""><br />
여러 사용자를 지원할 만큼  충분히 빠른 머신에서는, 아마도 캐시 히트율을 유지하는 충분한 버퍼 캐시를 가졌을 것이고, 이 경우도 멀티스레딩은 아무 장점이 없습니다. 오직 여러 프로세스가 실제로 디스크I/O를 수행할 때만 유효하다고 할 수 있습니다. 이 경우 시스템을 더욱 복잡하게 만들 가치가 있는가에 대해서는 적어도 논쟁의 여지가 있습니다.</p>
</p>
<p>어찌되었던 1991년 현재, 아직도 커널을 모노리식 시스템으로 설계하는 것이 근본적인 오류라는 점을  고수합니다. 리누스님이 제 학생이 아닌 것이 고마운 일이네요. 그러한 설계로는 아마도 좋은 학점을 받지 못할 것입니다 <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
</p>
<p style="text-align: right;"><img src="http://joone.net/wp-content/uploads/2019/02/null-36.png" width="321" height="193" alt="" title=""></p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-37.png" width="392" height="120" alt="" title=""><br />
이식성에 관한 것입니다. 오래전에 <a href="https://en.wikipedia.org/wiki/Intel_4004">인텔 4004 CPU</a>가 있었습니다. 이 CPU는 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%85%94_8086">8086</a>, <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%85%94_80286">80286</a>을 거쳐 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%85%94_80386">80386</a>과 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%85%94_80486">80486</a>까지 개발되었습니다. 그리고 앞으로 세대가 계속되겠죠.  그 사이 RISC 칩이 나왔는데, 일부는 100 MIPS이상에서 실행됩니다.  앞으로 RISC칩은 점차적으로 80&#215;86 라인을 대체할 것이고, 소프트웨적으로 80386을 에뮬레이션해서 오래된 MS-DOS 프로그램을 실행할 것입니다. 저는 이미 C로 IBM-PC 시뮬레이터를 작성했습니다. 그러므로, 리눅스 처럼 하나의 아키텍처만을 위해 OS를 설계하는 것은 심각한 오류라고 생각합니다. 왜냐하면 그 아키텍처가 오랫동안 존재하기는 어려우니까요. 반면, 미닉스는 이식성을 충분히 염두에 두고 설계했으며 인텔 CPU 계열부터 <a href="https://en.wikipedia.org/wiki/Motorola_68000_series">모토롤라 680&#215;0</a>(Atari, Amiga, Macintosh), <a href="https://ko.wikipedia.org/wiki/SPARC">SPARC</a>, <a href="https://en.wikipedia.org/wiki/NS320xx">NS32016</a>에 포팅되었습니다. 하지만, 리눅스는 80&#215;86에 아주 가깝게 묶여 있는데, 이는 가서는 안될 길입니다.(ast@cs.vu.nl)</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-48.png" width="552" height="152" alt="" title=""></p>
<p>리눅스에서는 다른 OS 커널보다 386 기능을 많이 사용합니다. 물론 이는 커널의 이식성을 떨어뜨리지만 설계를 훨씬 단순화시킵니다. 여기에는 각각 장단점이 있지만, 이것이 리눅스를 정상에 설수 있게 한 이유 중 하나입니다. 또한, 소스를 공개했기에 누구나 그 코드를 이식할 수 있습니다. 결코 쉬운 일은 아니지만 말입니다. (torvalds@klaava.Helsinki.FI)</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-39.png" width="242" height="117" alt="" title=""></p>
<p>정확한 숫자를 갖고 있는 것은 아니지만, 제 추축으로 현재 존재하는 6천만 대의 PC중  8088/286/680&#215;0와 비교하면 386/486의 비중은 작습니다. 학생들 사이에는 그 숫자가 더 작습니다. 제일 좋은 하드웨어를 살 돈이 있는 사람들만을 위해 소프트웨어를 무료로 만드는 것은 재미있는 생각입니다. 물론, 지금부터 5년후에는 달라질 것입니다. 아마도 모든 이들은 200 MIPS, 64 <a href="https://en.wikipedia.org/wiki/SPARCstation_5">SPARC station-5</a> 에서 자유 운영체제인 GNU를 사용할 것입니다.</p>
</p>
<p>제 요점은 하드웨어의 특정 부분이, 특히 인텔 계열과 같이 이상한 하드웨어와 밀접하게 연관된 새로운 운영체제를 개발하는 것이 기본적으로 잘못되었다는 것입니다. OS 자체는 새로운 하드웨어 플랫폼에 쉽게 포팅될 수 있어야 합니다. 1991년에 386에서만 실행되는 새로운 OS를 작성한다면, 이번 학기에 두 번째 ‘F’를 줄 것입니다. 다만 기말 시험을 잘 본다면 이 과목은 통과 할수 있습니다.(ast@cs.vu.nl)</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-40.png" width="413" height="153" alt="" title=""></p>
</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-41.png" width="413" height="201" alt="" title=""><br />
대부분의 사용자는 자신이 사용하는 운영체제 내부가 낡은 것인지 거의 신경을 쓰지 않아요. 오히려 사용자 수준에서 성능과 기능성에 더 관심을 갖고 있습니다. 저는 마이크로 커널이 아마도 미래의 물결이 될 수 있다고 대체로는 동의할겁니다. 그렇지만, 개인적인 의견으로는 모노리식 커널이 구현이 쉽다고 봅니다. 물론, 모놀리식 커널을 수정하다 보면, 금새 쉽게 복잡해지지요 (kt4@prism.gatech.EDU)</p>
</p>
</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-42.png" width="482" height="169" alt="" title=""><br />
켄 톰프슨님은 그러한 종류의 노력을 할 때 어떤 부류의 함정에 마주치나요? 그리고 그러한 문제를 다루는데 어떤 조언을 할 수 있나요?</p>
<p>
제가 묻고자 하는것은 다음과 같습니다. 커널 자체가 모놀리식이지만 커널에 대한 대부분의 변경 사항이 범위내에 국한되도록 소스를 구성하는 것이 얼마나 어렵습니까?<br />
저는 켄 톰프슨님이 모노리식 커널에 수년간의 경험이 있다고 알고 있습니다. <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> 따라서 이런 질문에 답할 때, 켄 톰프슨님이 최고의 답을 갖고 있으리라 생각합니다. (kevin@taronga.taronga.com)</p>
<p><img src="https://joone.net/wp-content/uploads/2019/02/null-49.png" width="592" height="230" alt="" title="">우선, 교수님께서 리눅스가 특정 아키텍쳐에 최적화된 부분이 문제라고 지적하셨는데, 사실 리눅스에서 80&#215;86에 최적화된 부분은 커널과 디바이스 드라이버입니다. 제가 보기에 리눅스가 GNU 소프트웨어를 돌리기 위한 임시방편 일지라도, 가장 많이 사용하는 CPU 아키텍처에 리눅스 커널을 최적화하는 것은 여전히 가치가 있습니다.</p>
</p>
<p>물론, OS 자체는 새로운 플랫폼에 쉽게 이식할 수 있어야 합니다. 사실, 리눅스에서 포팅하기 어려운 부분은 커널과 디바이스 드라이버 뿐입니다. 컴파일러, 유틸리티, 윈도우 시스템과 비교하면 이는 매우 작은 노력의 일부분에 불과합니다. 저는 리눅스로 버클리 대학, 자유소프트웨재단, 카네기 멜론 대학 등에서 개발된 소프트웨어를 사용할 수 있게 되어 개인적으로 무척 고맙게 생각하고 있습니다.  2∼3년 안에 무지 저렴한 BSD 또는 GNU Hurd가 확산되면 리눅스는 별로 쓸모가 없게 될 수 있지만, 지금 당장 리눅스를 사용하면 gcc, bison, bash와 같은 도구를 사용하는데 드는 비용을 줄일 수 있기 때문에, 이러한 운영체제 개발은 유용합니다. (<a href="mailto:rburns@finess.Corp.Sun.COM">rburns@finess.Corp.Sun.COM</a>)</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-44.png" width="541" height="197" alt="" title=""><br />
이때문에, 미닉스가 강력한 이식성을 갖게 되었고, 결국, 교수님은 유닉스를 실행하도록 설계하지 않은 머신도 지원하였습니다. 그 결과, 미닉스는 페이징과 같은 기능을 갖도록 쉽게 확장될 수 없습니다. 심지어 페이징을 지원하는 머신에서도 마찬가지입니다. “미닉스는 포팅하기 쉽다&#8221;라는 말도 맞지만, 이는 “어떤 기능도 사용하지 말것”이라고 다시 이야기할 수 있습니다. 물론 미닉스의 그런 정책 역시 여전히 옳은 방향입니다. </p>
</p>
<p>말이 길어졌네요. 하지만, 멀티스레딩 파일 시스템에 대한 이야기도 하려고 합니다. 교수님께서 멀티스레딩 파일 시스템은 성능을 올리기 위한 해킹에 불과하다고 하셨는데, 이는 사실이 아닙니다. 즉, 마이크로 커널에서는 성능상의 해킹이지만, 모노리식 형태로 커널을 구현할때는 자동적으로 되는 기능입니다. 그리고 제가 개인적으로 보낸 메일에서 언급했듯이, 마이크로 커널에서는 잘 안되는 부분 중 하나입니다. 유닉스를 ‘구식’으로 제작하면, 자동적으로 멀티스레딩 커널을 얻게 됩니다. 모든 프로세스가 자기가 소유한 작업을 스스로 처리하므로, 여러분께서는 커널이 효율적으로 동작하도록 메시지 큐와 같은 조잡한 것을 만들 필요가 없습니다.<br />
게다가 ‘오직 성능상의 해킹’이 중요하다고 생각하는 사람들이 있습니다. 여러분이 cray-3 을 다루지 않는 한, 저는 모든 사람들이 늘 컴퓨터 앞에서 기다리는데 지쳐 있다고 생각합니다. 저도 미닉스 앞에서도 기다렸고, 물론, 리눅스에서도 마찬가지이지만, 훨씬 낫습니다. (torvalds@klaava.Helsinki.FI)</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2019/02/null-45.png" width="505" height="162" alt="" title=""><br />
제 생각에 교수님이 한가지 중요한 점을 놓치고 있습니다. 미닉스가 교수님께 취미인 것 처럼, 모두는 아니지만, 많은 사람들이 리눅스에 참여하는 것도 사실입니다. 물론, 우리가 운영체제 시장을 장악하기 위해 리눅스를 만드는 것이 아닙니다. 그냥 즐거운 시간을 보내는 거죠.
</p>
<p>교수님 말대로 미닉스는 이식성을 고려했고 많은 머신에 포팅이 되었습니다. 그래서 그러한 머신을 갖고 있는 사람들에게는 미닉스가 좋겠지만, 공짜 점심은 없습니다. 미닉스는 386 일부 성능과 몇가지 기능을 희생에서 그러한 이식성을 얻었습니다.</p>
</p>
<p>먼저 우리는 리눅스가 가야할 길이 아니라고 결정하기 전에, 리눅스가 어떻게 사용될 것인지를 생각해야 합니다. 저는 제 486에서 메모리 및 연산이 많이 필요한 그래픽 프로그램을 실행하는데 이를 사용할 것입니다. 저에게 있어서, 속도와 메모리는 최첨단 기술이나 이식성 보다 중요합니다.</p>
<p>교수님께서 다른 마이크로커널 기반이고 무료인 현대적인 운영체제를 쓰고 싶다면 GNU Hurd나 다른 것을 찾아보라고 하셨는데, GNU Hurd는 아직 말만 무성하고 미래가 불확실하며, 다른 대안은 못찾았습니다. 교수님께서 하나 추천해주실 수 있나요? 아니면 저희를 놀리고 있나요?</p>
</p>
<p>교수님은  OS는 설계 자체가 끝이라고 보고 있습니다. 미닉스는 이식성이 높고 마이크로 커널이라서 좋고, 리눅스는 모노리식 커널이고 인텔 아키텍처에 단단히 묶여있어서 안좋다고 하셨는데, 저는 이 생각에 동의하지 않습니다. 리눅스는 교육용 도구 또는 연습용으로 쓰여진 것이 아니라, 사람들이 GNU 유형의 소프트웨어를 지금 실행하도록 하기 위해 만들어진 것입니다. 5년안에 사용되지 않을 수도 있다는 사실은 그다지 중요하지 않습니다(어쩌면 4 월까지).  저는 실행하고 싶은 모든 종류의 소프트웨어를 리눅스에서 실행할 수 있습니다. 교수님께서는 미닉스가 더 뛰어나다고 말씀하지만, 제가 원하는 소프트웨어가 실행되지 않는다면 정말 별로입니다.</p>
</p>
<p>같은 점을 이야기하면, 마이크로소프트가 운영체제 연구의 미개척분야를 탐구하려고 도스를 출시한 것은 아닙니다. 시장을 장악하여 돈을 벌기 위해 MS-DOS를 판매하고 있습니다. 그리고 여전히 다른 운영체제를 압도하고 있고, 교수님도 마이크로소프트가 실패했다고 생각하지는 않을 것입니다. MS-DOS는 어떤 측면으로도 최고의 운영체제는 아니며, 그저 자신들이 준비한 요구사항을 만족시킨 것입니다. (<a href="mailto:kaufman@eecs.nwu.edu">kaufman@eecs.nwu.edu</a>)</p>
</p>
<p><b>더 읽을 글</b></p>
<ul>
<li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=274630">리눅스 그냥 재미로</a>, 한겨레 신문사 , 2001</li>
<li><a href="https://en.wikipedia.org/wiki/Tanenbaum%E2%80%93Torvalds_debate">타넨바움과 토발즈의 논쟁, 위키피디아</a> </li>
<li><a href="https://groups.google.com/forum/#!topic/comp.os.minix/wlhw16QWltI%5B1-25%5D">LINUX is obsolete, 뉴스그룹 원문</a></li>
<li><a href="https://www.oreilly.com/openbook/opensources/book/appa.html">The Tanenbaum-Torvalds Debate,Open Sources: Voices from the Open Source Revolution, 1999</a></li>
</ul>
<p>참고로, 이번 만화는 앤드류 타넨바움과 리누스 토발즈의 미닉스와 리눅스에 관한 논쟁 일부 내용을 만화로 재구성하였습니다. </p>
</p>
<p>잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1Y8yebEqFdLTa9JDpK35q1S9kCN6GnOlJHXzbPpNu4L0/edit">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 리눅스 vs. 미닉스 2부 입니다.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2019/02/09/30-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%85%ec%8a%a4-vs-%eb%af%b8%eb%8b%89%ec%8a%a4-1%eb%b6%80/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1433</post-id>	</item>
		<item>
		<title>29. 리눅스 이야기: 진정한 자유 운영체제</title>
		<link>https://joone.net/2018/12/26/29-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%ec%a7%84%ec%a0%95%ed%95%9c-%ec%9e%90%ec%9c%a0-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c/</link>
		<comments>https://joone.net/2018/12/26/29-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%ec%a7%84%ec%a0%95%ed%95%9c-%ec%9e%90%ec%9c%a0-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c/#comments</comments>
		<pubDate>Wed, 26 Dec 2018 17:19:46 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[GPL]]></category>
		<category><![CDATA[리누스 토발즈]]></category>
		<category><![CDATA[리눅스]]></category>

		<guid isPermaLink="false">https://joone.net/?p=1356</guid>
		<description><![CDATA[“솔직히 리차드 스톨만의 연설을 들으며 내가 어떤 ‘빛&#8217;을 본 것은 아니었다. 하지만, 추측컨대 그의 연설을 듣는 가운데 무엇인가가 내 마음속을 파고들었던 것 같다. 훗날 내가 리눅스에 GPL을 적용한 걸 보면 말이다.” &#8211; 리눅스 그냥 재미로(2001) / 리누스 토발즈 리눅스의 초기 라이선스는 간단했는데, 리눅스를 다른 사람에게 판매하지 않고, 코드를 향상 시키면 모든 사람이 볼 수 있도록 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><i>“솔직히 리차드 스톨만의 연설을 들으며 내가 어떤 ‘빛&#8217;을 본 것은 아니었다. 하지만, 추측컨대 그의 연설을 듣는 가운데 무엇인가가 내 마음속을 파고들었던 것 같다. 훗날 내가 리눅스에 GPL을 적용한 걸 보면 말이다.”</i> &#8211; 리눅스 그냥 재미로(2001) / 리누스 토발즈</p>
<p>리눅스의 초기 라이선스는 간단했는데, 리눅스를 다른 사람에게 판매하지 않고, 코드를 향상 시키면 모든 사람이 볼 수 있도록 코드를 공개하는 조건이 전부였다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-53.png" alt="" width="526" height="496" /></p>
<p>리누스: 리눅스를 설치해본 사람들이 점점 늘고 있어.<br />
친구: 와~ 그거 돈주고 팔면 부자가 되겠는데.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-54.png" alt="" width="520" height="366" /></p>
<p>리누스: 돈 대신 엽서만 받기로 했어.<br />
친구: 뭐라고?</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-55.png" alt="" width="421" height="505" /></p>
<p>“나도 다른 과학자들 처럼 내 업적을 사람들과 나누고 싶어. 사실, 우리 할아버지가 공산주의자라서.. 하하, 하여간, 난 리눅스를 팔고 싶지는 않고 다른 사용자들도 나와 생각이 같으면 좋겠어.”</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-56.png" alt="" width="376" height="456" /></p>
<p>“돈 대신 엽서를 받기로 했지만.. 와우!”</p>
<p>하지만, 일부 사람들은 돈을 받고 리눅스 디스켓을 복사해주기도 했다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-57.png" alt="" width="536" height="348" /></p>
<p>“리눅스를 돈주고 팔다니.. 저작권 위반이야.”</p>
<p>결국, 어떤 사람이 배포용 디스켓을 만들어 기본적인 비용만 받고 팔아도 되냐고 물어왔다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-58.png" alt="" width="473" height="362" /></p>
<p>소스 코드를 공개하고 다른 사람의 참여를 유도하는 것은 좋았지만, 누군가 리눅스 코드를 가져다가 자신들의 이름으로 커널을 상용화할 수도 있었다. 그렇다고 복사하는데 드는 비용만 받고 리눅스를 판매하는 것을 막는 것도 좋은 생각이 아니였다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-59.png" alt="" width="624" height="912" /></p>
<p>리차드 스톨만: 프로그램이 자유 소프트웨어가 되기 위해서는 사용자는 4가지 자유를 가져야만 합니다. 첫번째로, 어떤 목적이든 원하는대로 프로그램을 실행시킬 수 있는 자유를 가져야 합니다. 두 번째로, 프로그램이 어떻게 동작하는 이해하기 위하여 소스 코드를 공부하고 고칠수 있는 자유가 있어야 합니다. 세번째로, 여러분 이웃에게 프로그램을 복사해줄 수 있는 자유가 있어야합니다. 마지막으로, 공동체 전체가 개선된 이익을 나눌 수 있게, 수정한 프로그램을 배포할 수 있는 자유가 있어야 합니다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-60.png" alt="" width="450" height="429" /></p>
<p>“내가 사용한 GCC 컴파일러 처럼 GPL라이선스를 적용하며 모든 문제가 해결될 것 같네…”</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-61.png" alt="" width="420" height="408" /></p>
<p>“그래 리눅스에 GPL라이선스를 적용하자. 누군가 리눅스 코드를 가져다가 마음대로 상용화를 한다면 리눅스 해커들이 가만히 있지는 않을거야” 나야 돈버는데는 관심이 없지만 내 코드를 훔쳐가는 것은 반대니까..”</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-62.png" alt="" width="624" height="373" /></p>
<p>이제 누구나 GPL 라이선스만 지키면 누구나 리눅스를 상업적으로 판매할 수 있게 되었다. 대신 수정한 코드는 반드시 공개를 해야만 했다.</p>
<p>1992년 1월 첫주, 드디어 GPL 라이선스가 적용된 리눅스 0.12 릴리스 한다. 특히, 이 때 부터 미닉스에 없는 페이징 기능이 추가되었는데, 이는 미닉스와의 경쟁이 시작되었다는 신호탄이였다. 인터넷을 통해 리눅스는 빠르게 퍼져나갔고 사람들은 자신들이 소유한 인텔386 PC에 직접 리눅스를 설치해서 사용하기 시작했다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-63.png" alt="" width="624" height="380" /></p>
<p>드디어, 개인용 유닉스 호환 운영체제의 시대가 열리게 된 것이다.</p>
<p>이제 유닉스 사용자 모임에서 리눅스를 서로 복사하는 일은 흔한 일이 되었다</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-64.png" alt="" width="624" height="465" /></p>
<p>하지만, 그러던 어느날, 미닉스를 만든 앤드류 타넨바움이 미닉스 메일링 리스트에 리눅스에 관한 글을 올리게 된다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/12/null-65.png" alt="" width="364" height="369" /></p>
<p>다음에 계속&#8230;</p>
<p><b>더 읽을 글</b></p>
<ul>
<li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=274630">리눅스 그냥 재미로</a>, 한겨레 신문사 , 2001</li>
<li>Rebel Code, Glyn Moody, 2002</li>
<li>https://www.gnu.org/philosophy/nit-india.html</li>
</ul>
<p>참고로, 등장 인물 간 대화도 자료를 바탕으로 만들어졌습니다.</p>
<p>만화에서 고치거나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1JfeBcgWZQQOvueOkyw_BPVIyMonAJs8qChgaUmcl5JY/edit?usp=sharing">만화 원고</a>에 직접 의견 주시고, 만화에 대한 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 리눅스 vs. 미닉스입니다.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/12/26/29-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%ec%a7%84%ec%a0%95%ed%95%9c-%ec%9e%90%ec%9c%a0-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1356</post-id>	</item>
		<item>
		<title>28. 리눅스 이야기:  운영체제를 만들자!</title>
		<link>https://joone.net/2018/12/02/28-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%eb%a5%bc-%eb%a7%8c%eb%93%a4%ec%9e%90/</link>
		<comments>https://joone.net/2018/12/02/28-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%eb%a5%bc-%eb%a7%8c%eb%93%a4%ec%9e%90/#comments</comments>
		<pubDate>Sun, 02 Dec 2018 09:13:16 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[Linux]]></category>

		<guid isPermaLink="false">https://joone.net/?p=1282</guid>
		<description><![CDATA[“12월 25일, 마침내 디스크 페이징 기능이 완료되었고, 이는 내가 다른 사람 요청으로 리눅스에 추가한 첫번째 기능이였다.&#8221; &#8211; 리눅스 그냥 재미로(2001) / 리누스 토발즈 인텔386 PC에서 터미널 구현을 마친 리누스는 본격적인 유닉스 표준(posix) API를 구현하기로 마음을 먹는다. 하지만, posix API를 구현하는 일은 생각만큼 쉬운 일이 아니였다. “이렇게 많은 API를 언제 다 구현하나…” 참고로, OpenGroup 사이트에 posix [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><i>“12월 25일, 마침내 디스크 페이징 기능이 완료되었고, 이는 내가 다른 사람 요청으로 리눅스에 추가한 첫번째 기능이였다.&#8221; </i> &#8211; 리눅스 그냥 재미로(2001) / 리누스 토발즈</p>
</p>
<p>인텔386 PC에서 터미널 구현을 마친 리누스는 본격적인 유닉스 표준(posix) API를 구현하기로 마음을 먹는다. 하지만, posix API를 구현하는 일은 생각만큼 쉬운 일이 아니였다.</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2018/12/null-49.png" width="624" height="426" alt="" title=""></p>
<p>“이렇게 많은 API를 언제 다 구현하나…”</p>
</p>
<p>참고로,  <a href="http://pubs.opengroup.org/onlinepubs/9699919799/toc.htm">OpenGroup 사이트</a>에 posix API를 pdf 또는 html로 볼 수 있다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-1.png" width="449" height="421" alt="" title=""></p>
</p>
<p style="text-align: center;">“우선 <a href="https://ko.wikipedia.org/wiki/%EC%9C%A0%EB%8B%89%EC%8A%A4_%EC%85%B8">쉘</a>을 구현해야해…” 그래야 로그온이 가능하지…</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/12/null-66.png" width="469" height="406" alt="" title=""></p>
<p style="text-align: center;">&#8220;우선 리눅스는 init 대신 쉘을 실행하도록 하자. 25개 정도<br />
시스템 콜을 구현하면 쉘을 실행할 수 있을거야…&#8221;</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/12/null-67.png" width="438" height="392" alt="" title=""></p>
<p style="text-align: center;">&#8220;다행히 누가 본쉘(Borune Shell)의 클론(Bash)을 자유 소프트웨어로<br />
개발했으니, 그걸 다운로드 받아서 실행해보자.”</p>
<p style="text-align: center;">
</p>
<p>핀란드에도 여름이 왔다. 백야 현상으로 밤 늦도록 날이 밝지만, 리누스는 커튼으로 햇빛을 가린채 코딩에 몰두한다.</p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-5.png" width="624" height="390" alt="" title=""></p>
<p> 또 코딩.. 또 코딩..</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-6.png" width="453" height="425" alt="" title=""></p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-7.png" width="441" height="321" alt="" title=""></p>
<p>“리누스야 여름인데, 친구들하고 어디 안나가니?&#8221;</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-8.png" width="392" height="484" alt="" title=""></p>
<p>“이제 대학생인데, 어디가서 아르바이트 좀 해라..<br />
컴퓨터 대출금도 갚아야지&#8221;</p>
<p style="text-align: right;"><img src="https://joone.net/wp-content/uploads/2018/12/null-9.png" width="317" height="269" alt="" title=""></p>
<p style="text-align: right;">“오빠.. 나 전화좀 하게 모뎀 좀 꺼줘..”</p>
</p>
</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-10.png" width="502" height="654" alt="" title=""></p>
<p style="text-align: center;">
<p style="text-align: center;">
<p style="text-align: center;">
<p style="text-align: center;">
<p style="text-align: center;">
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-13.png" width="349" height="357" alt="" title=""></p>
</p>
</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-14.png" width="624" height="401" alt="" title=""></p>
<p>“이렇게 집에 있지말고 맥주 마시러 나가자&#8221;<br />
“응, 마저 하던 작업만 끝내고&#8221;</p>
</p>
<p>여름 방학이 거의 끝나갈무렵. </p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-17.png" width="624" height="378" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-18.png" width="450" height="512" alt="" title=""></p>
<p style="text-align: center;">“드디어 본셀이 내가 만든 커널에서 동작하네…”</p>
</p>
<p>리눅스 커널 개발에 한줄기 서광이 비치기 시작했다. 그리고 <a href="https://groups.google.com/forum/#!topic/comp.os.minix/dlNtH7RRrGA%5B1-25%5D">이 사실을 미닉스 메일링 리스트에 알린다</a>.</p>
<p><img src="http://joone.net/wp-content/uploads/2018/12/null-51.png" width="624" height="550" alt="" title=""></p>
</p>
<p>몇몇 사람이 질문을 했다.</p>
<p style="text-align: right;">
<p style="text-align: right;">
<p style="text-align: right;"><img src="https://joone.net/wp-content/uploads/2018/12/null-21.png" width="285" height="180" alt="" title=""></p>
<p style="text-align: right;">
<p>참고로, <a href="https://en.wikipedia.org/wiki/Memory_management_unit">MMU(Memory Management Unit)</a>은 인텔386 CPU에서 제공되는 기능으로 CPU에서 메모리에 접근할 때, 가상 메모리 주소를 실제 메모리 주소로 변환해준다. 메모리 보호, 페이징 구현에 반드시 필요하다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-23.png" width="217" height="161" alt="" title=""></p>
<p style="text-align: right;"><img src="https://joone.net/wp-content/uploads/2018/12/null-25.png" width="424" height="176" alt="" title=""></p>
<p>“얼마나 많은 부분이 C언어로 되어 있나요? 포팅은 가능한가요? 제 <a href="https://ko.wikipedia.org/wiki/%EC%95%84%EB%AF%B8%EA%B0%80">아미가</a>에 설치하고 싶어요.”</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-27.png" width="414" height="200" alt="" title=""></p>
<p>“아직은 인텔 386에서만 동작해요. 하지만 포팅이 어렵지는 않을겁니다&#8221;</p>
</p>
<p>그리고 91년 9월 17일에 0.01 버전을 ftp 사이트에 공개했다. 1만줄도 안되는 운영체제 커널 코드였다. 참고로, <a href="https://github.com/zavg/linux-0.01">github에 소스코드가 있고</a> 빌드도 가능하다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-28.png" width="486" height="462" alt="" title=""></p>
<p style="text-align: center;">
<p style="text-align: center;">
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-31.png" width="624" height="470" alt="" title=""></p>
<p>다시 겨울 방학이다. 이제 리눅스를 개발한지도 1년이 되었구나.</p>
</p>
<p>그해 12월까지 리눅스 버전은 0.03까지 릴리스 되었지만, 아직까지는 리눅스를 빌드하는데, 미닉스가 필요했다. 그러던 어느날, 리눅스에서 하드 디스크 장치를 열어서 모뎀 명령어를 쓰는 바람에 미닉스 파티션이 깨지고 말았다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-34.png" width="473" height="336" alt="" title=""></p>
<p style="text-align: center;">“으악, 모뎀(/dev/tty1)에 전화를 건다는 것이…<br />
하드(/dev/hda)에 전화를 걸다니&#8230;.&#8221;</p>
<p style="text-align: center;">
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/12/null-52.png" width="548" height="354" alt="" title=""></p>
<p style="text-align: center;">&#8220;미닉스가 더 이상 부팅이 안되네…<br />
이제 리눅스에서 리눅스를 개발할 수 있도록해야겠어&#8221;</p>
</p>
<p>리누스는 리눅스 파일 시스템에서 gcc를 실행해서 리눅스 코드를 컴파일할 수 있도록하였다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-38.png" width="493" height="332" alt="" title=""></p>
<p style="text-align: center;">&#8220;드디어 리눅스에서 리눅스를 컴파일할 수 있다&#8221;</p>
</p>
<p>이에 고무된 리누스는 리눅스 버전을 0.10으로 올리고, 미닉스 메일링 리스트를 통해 0.11버전을 공개한다.</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2018/12/null-48.png" width="624" height="613" alt="" title=""></p>
</p>
<p><a href="https://github.com/yuanxinyu/Linux-0.11">0.11 버전도 github에서 찾을 수 있다.</a></p>
</p>
<p>그리고, 어느날, 램 용량이 2메가인 컴퓨터를 사용하는 독일인 리눅스 사용자가 메모리 부족으로 gcc가 동작하지 않는다고 메모리가 덜 필요한 컴파일로러 빌드할 방법이 있는지 문의해왔다. 리누스는 그를 위해 페이징이라는 기능을 구현했다. 이는 디스크를 마치 메모리 처럼 사용하도록 하여 컴퓨터가 더 많은 메모리를 사용하도록 하는 기능이다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-39.png" width="386" height="445" alt="" title=""></p>
<p>“페이징을 구현하면 gcc가 2M 메모리에서 실행이 될텐데, 한번 시도해볼까?”</p>
</p>
<p>리누스는 크리스마스를 즐길 새도 없이 다시 코딩에 몰두한다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/12/null-41.png" width="624" height="396" alt="" title=""></p>
</p>
<p>12월 23일 페이징 기능 구현에 전력을 다했다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-42.png" width="414" height="254" alt="" title=""></p>
</p>
</p>
<p>12월 24일 아직 페이징 기능이 잘 동작하지 않았다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-45.png" width="445" height="361" alt="" title=""></p>
<p>“어.. 이제 동작하는가..  아.. 커널 패닉이네.”</p>
</p>
<p>12월 25일 크리스마스 선물인 듯, 페이징 기능이 동작하기 시작했다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/12/null-46.png" width="405" height="398" alt="" title=""></p>
</p>
<p>페이징 기능은 리누스가 다른 사람 요청으로 리눅스에 추가한 첫번째 기능이였다.</p>
</p>
<p><b>더 읽을 글</b></p>
<ul>
<li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=274630">리눅스 그냥 재미로</a>, 한겨레 신문사 , 2001</li>
</ul>
<p>참고로, 이번 만화는 &#8220;리눅스 그냥 재미로&#8221;  일부 내용을 만화로 재구성하였고, 등장 인물 간 대화도 자료를 바탕으로 만들어졌습니다.</p>
</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1eToKCgDhSOwqLGZgZSrXJR1HRlcwWc3zzN8QWYnmqHU/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 리눅스 커널의 시작입니다.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/12/02/28-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%eb%a5%bc-%eb%a7%8c%eb%93%a4%ec%9e%90/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1282</post-id>	</item>
		<item>
		<title>27. 리눅스 이야기:  나만의 터미널 프로그램</title>
		<link>https://joone.net/2018/10/22/27-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%82%98%eb%a7%8c%ec%9d%98-%ed%84%b0%eb%af%b8%eb%84%90-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8/</link>
		<comments>https://joone.net/2018/10/22/27-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%82%98%eb%a7%8c%ec%9d%98-%ed%84%b0%eb%af%b8%eb%84%90-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8/#comments</comments>
		<pubDate>Mon, 22 Oct 2018 22:25:52 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[리누스 토발즈. 리눅스]]></category>
		<category><![CDATA[미닉스]]></category>

		<guid isPermaLink="false">http://joone.net/?p=1221</guid>
		<description><![CDATA[“책을 통해 차츰 유닉스를 이해하게 되면서, 나는 커다란 열정에 휩싸이게 되었다. 솔직히, 한번 일기 시작한 열정은 이후 잦아들 줄을 몰랐다.(이처럼 잦아들 줄 모르는 열정을 느낄 수 있는 대상이 당신에게도 있길 진심으로 바란다)” &#8211; 리누스 토발즈 &#8211; 그냥 재미로(Just a fun) 1990년 5월에 군대를 제대한 리누스는 가을 학기에 수강 신청에 “C언어 및 유닉스 운영체제”라는 과목을 추가한다. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>“책을 통해 차츰 유닉스를 이해하게 되면서, 나는 커다란 열정에 휩싸이게 되었다. 솔직히, 한번 일기 시작한 열정은 이후 잦아들 줄을 몰랐다.(이처럼 잦아들 줄 모르는 열정을 느낄 수 있는 대상이 당신에게도 있길 진심으로 바란다)” &#8211; 리누스 토발즈 &#8211; 그냥 재미로(Just a fun)</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/10/null.png" width="316" height="400" alt="" title=""></p>
</p>
<p>1990년 5월에 군대를 제대한 리누스는 가을 학기에 수강 신청에 “C언어 및 유닉스 운영체제”라는 과목을 추가한다. 복학을 기다리면서 미리 교재인 <a href="https://ko.wikipedia.org/wiki/%EC%95%A4%EB%93%9C%EB%A3%A8_%ED%83%80%EB%84%A8%EB%B0%94%EC%9B%80">앤드류 타넨바움</a>이 쓴 “<a href="https://en.wikipedia.org/wiki/Operating_Systems:_Design_and_Implementation">운영체제: 디자인 및 구현</a>”을 구해 읽게된다. 이 책은 <a href="https://ko.wikipedia.org/wiki/%EB%AF%B8%EB%8B%89%EC%8A%A4">미닉스</a>라는 교육용 유닉스를 다루고 있다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-1.png" width="309" height="317" alt="" title=""></p>
</p>
<p>책의 1장에서 소개된 운영체제의 역사, 미닉스 개발 동기, 운영체제 개념을 읽고 유닉스가 가진 철학과 유닉스가 얼마나 강력하고 간결하고 아름답게 디자인되었는지를 배우게 된다. 결국, 유닉스가 동작하는 컴퓨터를 갖기로 결심한다.  </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-2.png" width="365" height="277" alt="" title=""></p>
</p>
<p>미닉스는 교육용이라 상용 유닉스 비해 가격이 저렴했지만, 이를 실행하려면 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%85%94_80386">인텔 80386 CPU</a>가 장착된 컴퓨터가 필요했다. 당장 비싼 386 PC를 살수 없었던 리누스는 돈을 모으기 시작했다.</p>
<p style="text-align: center;">
<p><img src="https://joone.net/wp-content/uploads/2018/10/null-3.png" width="300" height="278" alt="" title=""></p>
</p>
<p>결국, 그해 여름 방학 기간 동안 리누스가 할 수 있는 일은 오직 두가지였다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/10/null-4.png" width="624" height="270" alt="" title=""></p>
<p>“미닉스 책 읽기&#8221; 또는 아무 것도 안하기… </p>
</p>
<p>드디어 새학기가 시작되었다. 유닉스는 학생들 뿐만 아니라 강의를 맡은 조교에게도 새로운 것이였다.</p>
<p><img src="https://joone.net/wp-content/uploads/2018/10/null-5.png" width="624" height="489" alt="" title=""></p>
</p>
<p>핀란드의 긴 겨울이 시작되었고 리누스도 가을 학기가 끝나고 겨울 방학을 맞이한다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/10/null-6.png" width="624" height="450" alt="" title=""></p>
</p>
<p>그리고, 마침내 은행에서 빌린 학자금과 크리스마스 용돈을 모아 1991년 1월에 18,000 FIM(약 $3,500) 돈을 주고 386 PC를 산다.</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/10/null-32.png" width="465" height="405" alt="" title=""></p>
<p style="text-align: center;">“나의 새 컴퓨터를 소개하지. 32비트 아키텍처로 최대 4G 메모리 지원!<br />
하드웨어를 이용한 <a href="https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%B3%B4%ED%98%B8">메모리 보호</a>, <a href="https://ko.wikipedia.org/wiki/X86_%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%B6%84%ED%95%A0">세그먼테이션</a>, <a href="https://ko.wikipedia.org/wiki/%ED%8E%98%EC%9D%B4%EC%A7%95">페이징</a> 기능 지원!”</p>
</p>
<p>컴퓨터에는 <a href="https://ko.wikipedia.org/wiki/MS-DOS">MS 도스</a>가 설치되어 있지만, 미닉스를 빨리 쓰고 싶어서 서점에서 지난 학기에 배운 “운영체제: 디자인 및 구현”책을 주문한다. 책에는 미닉스 소스 코드 디스켓이 함께 포함되어 있었다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-8.png" width="396" height="258" alt="" title=""></p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-9.png" width="469" height="354" alt="" title=""></p>
<p>“앤드류 타넨바움이 쓴 “운영체제: 디자인 및 구현”라는 책을 주문하려고 합니다.”<br />
“미닉스 OS 디스켓과 세금 포함해서 $169입니다. 약 한달 정도 기다려야 합니다.”</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-10.png" width="469" height="312" alt="" title=""></p>
<p>그리고, 한달 후에 책과 함께 12장의 디스켓으로 구성된 미닉스가 도착한다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-11.png" width="400" height="376" alt="" title=""></p>
</p>
<p>미닉스를 개발한 앤드류 탄넨바움(Andrew Tanenbaum) 교수는 학생들을 위해 다른 워크스테이션 보다 가격이 저렴한 인텔 CPU 8086/8286 기반으로 미닉스를 개발했다. 게다가 운영체제 교육이 주 목적이므로 미닉스를 다소 불완전하게 만들어 놓았다. 그래서 미닉스에 호주 출신인 브루스 에반스가 개발한 패치를 적용해야 인텔 80386 CPU에서 32비트 <a href="https://ko.wikipedia.org/wiki/%EB%B3%B4%ED%98%B8_%EB%AA%A8%EB%93%9C">보호 모드</a>를 지원할 수 있었다.</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/10/null-33.png" width="410" height="313" alt="" title=""></p>
<p>하지만, 브루스 에반스는 라이선스 문제로 자신 만든 패치를 적용한 미닉스를 배포할 수 없었다. 그래서 따로 패치를 다운로드 받아 기존 미닉스에 적용해야 하는 번거로운 과정을 거쳐야했다. </p>
</p>
<p>리누스는 브루스의 패치를 적용한 미닉스를 자신의 386PC에서 실행시킬 수 있었다. 하지만, 터미널 기능이 완전하지 않아 헬싱키 대학에 있는 VAX시스템을 사용하는데 어려움을 겪었다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-13.png" width="533" height="458" alt="" title=""></p>
<p>“자, 모뎀으로 학교 시스템에서 접속해 보자. 음.. 미닉스의 <a href="https://ko.wikipedia.org/wiki/%EB%8B%A8%EB%A7%90_%EC%97%90%EB%AE%AC%EB%A0%88%EC%9D%B4%ED%84%B0">터미널 에뮬레이션</a> 기능이 완전하지 않네..”</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-15.png" width="420" height="481" alt="" title=""></p>
</p>
<p>“베어 메탈(운영체제가 설치되어 있지 않은 하드웨어) 상태에서 터미널을 만들면, 인텔 386 하드웨어가 어떻게 동작하는 확실히 배울 수 있을 것 같아..” </p>
</p>
<p>참고로, 인텔 하드웨어는 <a href="https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%EC%98%A4%EC%8A%A4">바이오스</a>를 통해 키보드/마우스, 디스크, 프린터 등 모든 하드웨어를 바로 제어할 수 있으므로, 터미널 에뮬레이션 기능을 운영체제 없이 구현할 수 있다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-17.png" width="469" height="370" alt="" title=""></p>
<p>“<a href="https://ko.wikipedia.org/wiki/%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9">멀티스레드</a>를 쓰려면<a href="https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%96%BC_%EB%AA%A8%EB%93%9C"> 리얼 모드</a>에서 보호 모드로 전환을 해야겠지”</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-19.png" width="541" height="721" alt="" title=""></p>
<p>“이 스레드는 모뎀으로 부터 데이터를 받아 화면에 뿌리고, 또 다른 쓰레드는 키보드 입력을 받아서 <a href="https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8E%80">모뎀</a>에 쓰면 되겠네…” “자 <a href="https://ko.wikipedia.org/wiki/%EB%AC%B8%EB%A7%A5_%EA%B5%90%ED%99%98">컨텍스트 스위칭</a>도 필요하고..”</p>
</p>
<p>이제 리누스는 직접 만든 터미널로 학교 시스템에서 접속해서  메일도 확인하고 미닉스 뉴스 그룹에 올라온 글도 읽게되었다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-21.png" width="505" height="437" alt="" title=""></p>
</p>
<p>문제는 파일로 다운로드 받거나 업로드하는 것이었다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-22.png" width="460" height="306" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-24.png" width="522" height="350" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-25.png" width="326" height="398" alt="" title=""></p>
<p>“와우, Minix 파일시스템 구현 완료!” “책이 있으니 구현이 생각보다는 쉽네.. 이제 파일 저장이 가능하다”</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-27.png" width="370" height="345" alt="" title=""></p>
<p>“음.. 그러고보니, 내가 만든 터미널이 점점 운영체제에 가까워지고 있네 “</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/10/null-28.png" width="416" height="441" alt="" title=""></p>
<p>“유닉스와 호환되는 운영체제를 만들려면 POSIX를 알아야하는데, 어디서 문서를 구할 수 있을까?” “미닉스 뉴스그룹에 물어봐야겠다&#8221;</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/10/null-31.png" width="562" height="389" alt="" title=""></p>
</p>
<p>“넷랜더(netlanders) 여러분께<br />
지금 현재 미닉스에서 하고 있는 작업 때문에 저는  <a href="https://ko.wikipedia.org/wiki/POSIX">posix 표준</a>에 관심을 갖고 있습니다. 저에게 최근 posix 표준 문서를 구할 수 있는 위치를 알려주실 분 있나요? ftp사이트면 좋을 것 같습니다.”</p>
</p>
<p>“posix 문서를 찾는 것으로 보아 운영체제를 만드나봐..”<br />
“운영체제를 만든 코드가 있으면 제가 운영하는 헬싱키 대학 ftp사이트에 올려줘요.”</p>
</p>
<p>이처럼 리누스의 터미널 프로그램은 점차 커널로서의 면모를 갖추어나가기 시작했다.</p>
</p>
<p><b>더 읽을 글</b></p>
<ul>
<li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=274630">리눅스 그냥 재미로</a>, 리누스 토발즈, 한겨레 신문사 , 2001</li>
<li><a href="https://cacm.acm.org/magazines/2016/3/198874-lessons-learned-from-30-years-of-minix/fulltext">Lessons Learned from 30 Years of Minix</a>, 앤드류 타넨바움, ACM</li>
</ul>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1Mp3314bv-2S-uYK50bJUr7Au4PWH6uO8fajFthDE8Tk/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 리눅스 커널의 시작입니다.</p></p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/10/22/27-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%82%98%eb%a7%8c%ec%9d%98-%ed%84%b0%eb%af%b8%eb%84%90-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1221</post-id>	</item>
		<item>
		<title>26. 리눅스 이야기: 리누스 토발즈의 어린시절</title>
		<link>https://joone.net/2018/09/27/26-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%84%ec%8a%a4-%ed%86%a0%eb%b0%9c%ec%a6%88%ec%9d%98-%ec%96%b4%eb%a6%b0%ec%8b%9c%ec%a0%88/</link>
		<comments>https://joone.net/2018/09/27/26-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%84%ec%8a%a4-%ed%86%a0%eb%b0%9c%ec%a6%88%ec%9d%98-%ec%96%b4%eb%a6%b0%ec%8b%9c%ec%a0%88/#comments</comments>
		<pubDate>Thu, 27 Sep 2018 17:37:31 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[Linus]]></category>
		<category><![CDATA[Linux]]></category>

		<guid isPermaLink="false">http://joone.net/?p=1182</guid>
		<description><![CDATA[오늘날 수 많은 컴퓨터와 여러 장치를 움직이는 리눅스는 1991년 핀란드에 사는 리누스 토발즈라는 대학생이 공개한 운영체제 커널 코드로 시작한다. 리누스의 어린 시절 리누스는 외할아버지 영향으로 어릴 적부터 컴퓨터를 접할 수 있었다. 당시 외할아버지는 헬싱키 대학 통계학과 교수였고, 코모도어 VIC-20이라는 가정용 컴퓨터를 사용하고 있었다. 외할아버지는 가끔 종이에 써 놓은 자신의 베이직 코드를 리누스에게 입력을 시키곤 했다. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>오늘날 수 많은 컴퓨터와 여러 장치를 움직이는 리눅스는 1991년 핀란드에 사는 리누스 토발즈라는 대학생이 공개한 운영체제 커널 코드로 시작한다. </p>
</p>
<h4>리누스의 어린 시절</h4>
<p><img src="http://joone.net/wp-content/uploads/2018/09/null.png" width="624" height="460" alt="" title=""></p>
<p>리누스는 외할아버지 영향으로 어릴 적부터 컴퓨터를 접할 수 있었다. 당시 외할아버지는 헬싱키 대학 통계학과 교수였고, <a href="https://en.wikipedia.org/wiki/Commodore_VIC-20">코모도어 VIC-20</a>이라는 가정용 컴퓨터를 사용하고 있었다. 외할아버지는 가끔 종이에 써 놓은 자신의 <a href="https://ko.wikipedia.org/wiki/%EB%B2%A0%EC%9D%B4%EC%A7%81">베이직</a> 코드를 리누스에게 입력을 시키곤 했다.</p>
</p>
<p>때때로 리누스는 컴퓨터 메뉴얼에 있는 간단한 게임 코드를 직접 입력해보기도 했고, 자신만의 프로그램을 만들기도 했다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-1.png" width="518" height="322" alt="" title=""></p>
<p>외할아버지 컴퓨터에 취미를 붙인 리누스는 학교 수업이 끝나면 곧바로 외할아버지 집에 놀러가곤 했다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-2.png" width="494" height="388" alt="" title=""></p>
</p>
<p>그리고 외할아버지가 돌아가신 후, 컴퓨터는 유품이 되어 리누스에게 돌아왔다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-3.png" width="418" height="360" alt="" title=""></p>
</p>
<p><b>두번째 컴퓨터</b></p>
</p>
<p>고등학생이 된 리누스에게 코모도어는 더 이상 매력적인 컴퓨터가 아니었다.</p>
</p>
<p>“아.. 코모도어로는 이제 할만한 게 없구나…”</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-4.png" width="493" height="236" alt="" title=""></p>
</p>
<p>리누스는 새로운 컴퓨터를 살 계획을 하기 시작한다.</p>
</p>
<p>당시 컴퓨터는 상당히 비쌌기 때문에, 가정 형편상 부모님의 도움으로만 컴퓨터를 살 수는 없었다. 다행히 수학 천재 장학금을 받았고, 크리스마스 때 일가 친척들에게 받은 용돈을 모아 컴퓨터를 살만한 돈을 모을 수 있었다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-5.png" width="328" height="312" alt="" title=""></p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-6.png" width="334" height="258" alt="" title=""></p>
</p>
<p>리누스가 16살이 되던 1987년 IBM-PC 대신 좀 더 성능이 좋은 <a href="https://en.wikipedia.org/wiki/Sinclair_QL">싱클레어 QL</a>을 선택한다.  싱클레어 QL는 모토롤라가 만든 <a href="https://en.wikipedia.org/wiki/Motorola_68008">68008</a>를 사용했는데, 레지스터는 32비트였고 멀티태스킹을 지원하는 CPU였다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-7.png" width="381" height="574" alt="" title=""></p>
<p>리누스는 플로피 디스크가 가끔 동작하지 않아서 직접 플로피 디스크 콘트롤러를 구현하면서 운영체제 구현에 관심을 갖게 된다. 특히, 역어셈블리를 통해 싱클레어 QL에서 사용하는 <a href="https://en.wikipedia.org/wiki/Sinclair_QDOS">Q-DOS </a>운영체제 코드를 분석했으나 코드가 롬에 저장되어 수정은 불가능했다.</p>
</p>
<p>프로그래밍을 위해 어셈블러와 에디터를 구입했지만, 마이크로 드라이브만 지원하고 <a href="https://ko.wikipedia.org/wiki/EEPROM">EEPROM (Electrically Erasable and Programmable Read) </a>카드는 지원하지 않았다. EEPROM은 다시 쓰기가 가능한 메모리로서 컴퓨터 전원을 꺼도 저장한 데이터가 그대로 유지되었다. 결국, 에디터와 어셈블러를 모두 어셈블리어로 다시 만들었다. ( 참고: <a href="https://github.com/anachrocomputer/UK108/blob/master/test.asm">68008 어셈블리어 코드</a>)</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-8.png" width="526" height="374" alt="" title=""></p>
<p>리누스는 때때로 상용 게임과 유사한 복제 게임을 만들었는데, 어셈블리어로 <a href="https://ko.wikipedia.org/wiki/%ED%8C%A9%EB%A7%A8">팩맨</a>을 만들기도 했다. </p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-9.png" width="553" height="198" alt="" title=""></p>
</p>
<p>대학을 진학한 이후에는 싱클레어 OS가 가진 결점으로 인해 새로운 운영체제를 만들 결심을 하게 된다. 운영체제 자체는 멀티태스킹이 가능했지만, 메모리 보호 기능이 없었다. 프로그램을 잘못 만들면 전체 시스템이 다운되는 현상이 발생했다.</p>
</p>
<p style="text-align: center;">“메모리 보호 기능이 있는 68020<br />
CPU로 업그레이드하면 좋은데, 내<br />
가 운영체제를 새로 만들 수 있을까?”</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-12.png" width="189" height="281" alt="" title=""></p>
<p>새로운 싱클레어는 <a href="https://en.wikipedia.org/wiki/Motorola_68020">68020 CPU</a>를 사용했고하는데, 메모리 관리 및 페이지 기능을 제공했다. 하지만, 그 당시 핀란드는 시장이 작아서 컴퓨터 부품을 영국에서 주문을 해야했는데, 쉬운 일이 아니었고, 운영체제 개발 계획은 더 이상 진행되지 못했다. 결국, 싱클레어 주변기기를 컴퓨터 잡지 광고를 통해 팔았다. 그 후 컴퓨터에 흥미를 잃은 리누스는 대학교 1학년을 마치고 군복무를 위해 라플랜드행 열차에 몸을 싣는다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/09/null-11.png" width="509" height="454" alt="" title=""></p>
</p>
</p>
<p><b>더 읽을 글</b></p>
<ul>
<li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=274630">리눅스 그냥 재미로</a>, 한겨레 신문사 , 2001</li>
</ul>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1fYRtP-M1tUaL2hCfl4ohwcAKE5f2opUSQuD2j_F-zOo/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 리눅스 커널의 시작입니다.</p></p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/09/27/26-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%84%ec%8a%a4-%ed%86%a0%eb%b0%9c%ec%a6%88%ec%9d%98-%ec%96%b4%eb%a6%b0%ec%8b%9c%ec%a0%88/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1182</post-id>	</item>
		<item>
		<title>25. XFree86과 X.Org</title>
		<link>https://joone.net/2018/08/04/25-xfree86%ea%b3%bc-x-org/</link>
		<comments>https://joone.net/2018/08/04/25-xfree86%ea%b3%bc-x-org/#comments</comments>
		<pubDate>Sat, 04 Aug 2018 20:28:41 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[CDE]]></category>
		<category><![CDATA[DEC]]></category>
		<category><![CDATA[HP]]></category>
		<category><![CDATA[motif]]></category>
		<category><![CDATA[OpenLook]]></category>
		<category><![CDATA[SUN]]></category>
		<category><![CDATA[x.org]]></category>
		<category><![CDATA[X11]]></category>
		<category><![CDATA[XFree86]]></category>

		<guid isPermaLink="false">http://joone.net/?p=1124</guid>
		<description><![CDATA[MIT는 1987년 9월 15일에 X11(X 윈도우 버전11)을 공개했다. 워크스테이션 제조 회사들은 앞다투어 X11을 자신들의 워크스테이션에 적용했고, 많은 투자를 하기 시작하기 했다. 특히 DEC는 1200여명의 엔지니어를 고용해서 Ultrix와 VMS에 X11를 포팅했다. 하지만, 각 회사에서 X윈도우를 따로 개발하다보니, 호환성에 문제가 생기기 시작했다. MIT는 더 이상 X윈도우 개발을 감당하기 어려웠고, 1988년 여러 회사들이 X 컨소시엄을 구성해서 X 파편화를 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>MIT는 1987년 9월 15일에 <a href="https://en.wikipedia.org/wiki/X_Window_System">X11</a>(X 윈도우 버전11)을 공개했다. <a href="https://ko.wikipedia.org/wiki/%EC%9B%8C%ED%81%AC%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%85%98">워크스테이션 </a>제조 회사들은  앞다투어 X11을 자신들의 워크스테이션에 적용했고, 많은 투자를 하기 시작하기 했다. 특히 <a href="https://en.wikipedia.org/wiki/Digital_Equipment_Corporation">DEC</a>는 1200여명의 엔지니어를 고용해서 <a href="https://en.wikipedia.org/wiki/Ultrix">Ultrix</a>와  <a href="https://en.wikipedia.org/wiki/OpenVMS">VMS</a>에 X11를 포팅했다. </p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/08/null.png" width="453" height="249" alt="" title=""></p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-1.png" width="624" height="422" alt="" title=""></p>
</p>
<p>하지만, 각 회사에서 X윈도우를 따로 개발하다보니, 호환성에 문제가 생기기 시작했다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-2.png" width="624" height="489" alt="" title=""></p>
</p>
<p>MIT는 더 이상 X윈도우 개발을 감당하기 어려웠고, 1988년 여러 회사들이 <a href="https://en.wikipedia.org/wiki/X_Window_System#The_MIT_X_Consortium_and_the_X_Consortium.2C_Inc.">X 컨소시엄</a>을 구성해서  X 파편화를 막기 위해 공동으로 개발을 진행한다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-3.png" width="425" height="317" alt="" title=""></p>
</p>
<p>이때부터 새로운 개발자들이 X개발에 참여하기 시작한다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-4.png" width="321" height="297" alt="" title=""></p>
<p>1988년 1월, 짐 풀톤(Jim Fulton)이 참여했고, 3월에는  키스 패커드(<a href="https://en.wikipedia.org/wiki/Keith_Packard">Keith Packard</a>)가 참여했다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-5.png" width="325" height="301" alt="" title=""></p>
<p>짐은 Xlib, 폰트, 윈도 관리자와 유틸리티를 맡았고, 키스 패커드는 X서버를 다시 구현했다. 이후 도나 컨버스(Donna Converse), 크리스 피더슨(Chris D. Peterson), 스테판 길데아(Stephen Gildea)가 합류했고, 이들은 <a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_%EC%95%84%ED%85%8C%EB%82%98">프로젝트 아테나(Project Athena)</a>를 개발한 랄프 스윅(Ralph Swick)와 함께 UI 툴킷과 <a href="https://ko.wikipedia.org/wiki/GUI_%EC%9C%84%EC%A0%AF">위젯</a>(widget)을 개발했다. </p>
</p>
<p>위젯 전쟁<br />
<img src="https://joone.net/wp-content/uploads/2018/08/null-6.png" width="514" height="541" alt="" title=""><br />
X Athena Widgets (출처: <a href="https://en.wikipedia.org/wiki/X_Athena_Widgets#/media/File:Screenshot_of_%22Xman%22_program.png">위키피디아</a>, <a href="https://www.x.org/releases/X11R7.7/doc/libXaw/libXaw.pdf">개발 문서</a>)</p>
</p>
<p>당시 X윈도우에서 응용 애플리케이션을 개발하는 것은 쉽지 않았다. 특히, X 윈도우가 기본적으로 제공하는 UI 툴킷은 프로젝트 아데나에서 사용된 X 아데나 위젯인데, 레퍼런스로 구현된 위젯이라서 많이 사용되었다. 하지만, 디자인이 단순하고 기능이 부족했다.</p>
</p>
<p><a href="https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EC%9E%AC%EB%8B%A8">오픈 소프트웨어 재단</a>(Open Software Foundation)은 비영리 단체로 유닉스 표준화 및 구현을 위해 1988년 미정부에 의해 섭립되었다. 이 단체는 X 윈도우용 <a href="https://ko.wikipedia.org/wiki/%EB%AA%A8%ED%8B%B0%ED%94%84_(%EC%9C%84%EC%A0%AF_%ED%88%B4%ED%82%B7)">모티프(motif)</a>라는 UI 툴킷을 개발하시 시작한다.</p>
</p>
<p>1989년 모티프가 처음 릴리스되었지만, 당시는 독점 소프트웨어였다. 게다가 <a href="https://ko.wikipedia.org/wiki/%EC%8D%AC_%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%A6%88">썬 마이크로시스템즈</a>과 AT&#038;T는 독자적인 툴킷인 <a href="https://en.wikipedia.org/wiki/OPEN_LOOK">오픈룩(OpenLook)</a>을 개발하고 있었다.</p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-7.png" width="624" height="390" alt="" title=""><br />
썬 마이크로시스템스과 AT&#038;T가 개발한 OpenLook (출처: <a href="https://en.wikipedia.org/wiki/OPEN_LOOK#/media/File:Olvwm-desktop.jpg">위키피디아</a>)</p>
</p>
<p>문제는 개발자 그룹이 양분되고 추가 비용도 발생해서 일부 개발자는 X윈도우에서 기본 제공하는 아데나 툴킷을 사용하기도 했다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-8.png" width="428" height="345" alt="" title=""></p>
</p>
<p>이처럼 1990년 초까지 유닉스 업계는 과도한 경쟁으로 마이크로소프트 윈도우가 일반 사용자 시장의 인기를 기반으로 서버까지 넘보게 만드는 실수를 범한다.</p>
<p><b><img src="https://joone.net/wp-content/uploads/2018/08/null-9.png" width="624" height="416" alt="" title=""></b></p>
<p>유닉스 진영: “Motif 너무 무거워&#8221;, “OpenLook이나 제대로 완성하고 이야기를 해야지&#8221;, “싸울 때가 아니야, MS윈도를 보라고&#8221;<br />
MS: 내가 NT를 준비중에 있는거는 모를거다.</p>
</p>
<p>결국, 유닉스 진영이 MS윈도와 경쟁하기 위해서는 공통의 데스크탑 환경이 필요하다는 것을 느끼고 모티프를 기반으로 새로운 데스크탑 환경을 개발하기 시작한다. 썬 마이크로시스템스도 오픈룩 개발을 중단하고 이에 동참한다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-10.png" width="384" height="393" alt="" title=""></p>
<p>1993년 6월, <a href="https://en.wikipedia.org/wiki/Hewlett-Packard">HP</a>,<a href="https://en.wikipedia.org/wiki/IBM"> IBM</a>, <a href="https://en.wikipedia.org/wiki/SunSoft,_Inc.">썬소프트</a>, <a href="https://en.wikipedia.org/wiki/Unix_System_Laboratories">USL</a>는 <a href="https://en.wikipedia.org/wiki/Common_Desktop_Environment">CDE(Common Desktop Environment)</a>를 발표한다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-11.png" width="624" height="468" alt="" title=""><br />
CDE(Common Desktop Environment) 모습 (출처: <a href="https://en.wikipedia.org/wiki/Common_Desktop_Environment#/media/File:CDE_Application_Builder.png">위키피디아</a>)</p>
</p>
<p>1994년 개발 그룹은 CDE를 유닉스 표준 데스크탑환경으로 만들기 위해서 오픈 소프트웨어 재단에 프로젝트를 이관하고 모티프와 함께 하나의 프로젝트로 만든다. </p>
<p style="text-align: center;">
<p><b>오픈그룹 결성과 X 유료화의 실패</b><br />
1997년 유닉스 업계는 마이크로소프트와 효과적인 경쟁을 위해 유닉스 기술 표준화와 인증 업무를 총관할하는 오픈 그룹(Open Group)을 창립한다. 580여개 멤버 회사가 참여한 이 단체는 유닉스 상표권 관리와 기존 <a href="https://en.wikipedia.org/wiki/X/Open">X/Open</a>에 하던 유닉스 표준화 업무를 이어받고 CDE와 모티프 개발하는 오픈 소프트웨어 재단도 합병한다.</p>
</p>
<p><b><img src="https://joone.net/wp-content/uploads/2018/08/null-12.png" width="522" height="420" alt="" title=""></b></p>
<p>X 개발 역시도 오픈그룹으로 이관되었고, 1998년초  X11R6.4릴리스한다. 이때 X가 유료화되는데, 비상업적 이용이외에는 라이선스 비용을 내야했다.</p>
<p style="text-align: center;"> <img src="https://joone.net/wp-content/uploads/2018/08/null-13.png" width="333" height="254" alt="" title=""></p>
</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-14.png" width="318" height="282" alt="" title=""></p>
<p><a href="https://ko.wikipedia.org/wiki/XFree86">XFree86</a>은 당시 인가가 높은 인텔 CPU를 기반으로한 리눅스에 X윈도우를 포팅하는 개발자 공동체였다. 이들은 X 유료화에 반대했고,  소스코드 <a href="https://ko.wikipedia.org/wiki/%ED%8F%AC%ED%81%AC_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EA%B0%9C%EB%B0%9C)">포킹</a>을 만지작 거리자 오픈그룹은 바로 바로 유료화를 포기하고 예전 라이선스로 돌아가서 1998년 8월  X11R6.4를 릴리스 한다.  </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-15.png" width="288" height="368" alt="" title=""></p>
</p>
<p>하지만, 이미 마음이 뜬 개발자와 사용자들이 자유를 찾아 XFree86 프로젝트로 모여들기 시작한다. 오픈 그룹은  결국 X11R6.4 patch 3를 마지막으로 릴리스하고 사실상 X를 개발을 포기한다. <img src="https://joone.net/wp-content/uploads/2018/08/null-16.png" width="560" height="333" alt="" title=""></p>
</p>
<p><b>X.Org와 XFree86<br />
</b>XFree86 프로젝트는  X11R5를 기반으로 1991년 시작되었고 이름에서 볼 수 있듯이, 386 PC에 X를 적용하기 위해 시작된 프로젝트였지만, 리눅스 열풍과 함께 실제 X개발의 주도권 가져가져서 X의 de-facto 표준이된다.  </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-17.png" width="504" height="388" alt="" title=""></p>
<p>. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-18.png" width="365" height="393" alt="" title=""></p>
<p>오픈그룹은 1999년 다시 X.Org팀을 만들고 X11R6.5.1를 릴리스한다. XFree86 개발그룹도 회원비가 없는 명예 멤버로 초대된다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-19.png" width="410" height="396" alt="" title=""></p>
</p>
<p>하지만, X.Org에서 X 개발은 소멸 상태였고, 여전히 대부분의 개발은  XFree86에서 이루어진다.  </p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-20.png" width="624" height="394" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-21.png" width="265" height="308" alt="" title=""></p>
<p>하지만, XFree86은 <a href="https://ko.wikipedia.org/wiki/%EC%84%B1%EB%8B%B9%EA%B3%BC_%EC%8B%9C%EC%9E%A5">성당 스타일</a>의 폐쇄적인 개발 모델을 유지했다. 개발자들은 <a href="https://ko.wikipedia.org/wiki/CVS">CVS</a> commit 권한이 없었고, 유닉스 업체들도 자신들의 패치를 업스트림에 적용하지 못해 각자 따로 관리했어야했다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-22.png" width="452" height="357" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-24.png" width="470" height="269" alt="" title=""></p>
<p>이에 <a href="https://web.archive.org/web/20050212012809/http://www.xfree86.org/pipermail/forum/2003-March/002165.html">반기</a>를 든 <a href="https://web.archive.org/web/20050212013104/http://www.xfree86.org:80/pipermail/forum/2003-March/001997.html">키스 패커드는 XFree86 코어 개발팀에서 쫓겨나고 만다</a>.</p>
</p>
<p>2004년에는 기존 MIT 라이선스에 별도로 BSD 라이선스와 같은 광고 조항을 추가해서 라이선스를 더 제한적으로 바꾸었다. 많은 사람들이 이를 반대했는데, 특히, <a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EC%9C%A0_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EC%9E%AC%EB%8B%A8">자유 소프트웨어 재단(FSF)</a>와 <a href="https://ko.wikipedia.org/wiki/%EB%8D%B0%EB%B9%84%EC%95%88">데비안(Debian)</a> 프로젝트에서 <a href="https://ko.wikipedia.org/wiki/GNU_%EC%9D%BC%EB%B0%98_%EA%B3%B5%EC%A4%91_%EC%82%AC%EC%9A%A9%EA%B6%8C">GPL 라이선스</a>과 호환되지 않는다고 이의를 제기했고, 몇몇 개발 그룹은 XFree86의 원래 X 정신에 반한다며 프로젝트를 <a href="https://ko.wikipedia.org/wiki/%ED%8F%AC%ED%81%AC_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EA%B0%9C%EB%B0%9C)">포크</a>하겠다고 협박아닌 협박을 하기도 했다.</p>
</p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-26.png" width="624" height="416" alt="" title=""></p>
</p>
<p>XFree86: 앞으로 XFree86을 사용하는 모든 소프트웨어 제품은  모든 광고, 메뉴얼 등에 반드시 XFree86를 사용했다고 알려야해.<br />
FSF &#038; Debian: GPL 라이선스와 호환이 안되잖아. 라이선스 변경 철회하라!</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-28.png" width="324" height="313" alt="" title=""></p>
<p><img src="https://joone.net/wp-content/uploads/2018/08/null-29.png" width="624" height="305" alt="" title=""></p>
</p>
<p>결국, 2004년 X.Org와  <a href="https://en.wikipedia.org/wiki/Freedesktop.org">freedesktop.org</a> 구성원들이 XFree86 코드를 포크하여  <a href="https://en.wikipedia.org/wiki/X.Org_Foundation">X.Org 파운데이션</a>을 조직한다. 지금까지 회사 주도로 프로젝트가 진행되었다고 이제 부터는 시장 모델대로 진정한 커뮤니티에 의해 프로젝트가 운영되기 시작하고 누구나 참여가 쉽도록 하였다. 참고로, freedesktop.org는 2000년 오픈소스 데스크탑 기술 개발을 위해 <a href="https://ko.wikipedia.org/wiki/%EB%A0%88%EB%93%9C%ED%96%87">레드햇</a>이 만든 프로젝트이다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-30.png" width="480" height="348" alt="" title=""></p>
</p>
<p>두 그룹은 기존에 X.Org이 유지하던 X11R6.6에 XFree86 4.4RC2를 통합해서 2004년 4월 X11R6.7을 릴리스한다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-32.png" width="313" height="288" alt="" title=""></p>
<p>XFree86도 2008년까지 계속 개발을 진행했다.</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/08/null-33.png" width="349" height="313" alt="" title=""></p>
<p>이후 X.Org은 <a href="https://en.wikipedia.org/wiki/Direct_Rendering_Infrastructure">DRI(Direct Rendering Infrastructure)</a> 확장을 통한 GPU 가속 지원, Wayland 개발 등 유닉스/리눅스 데스크탑 개발을 진행하고 있고 1년에 한번씩 X 개발자 컨퍼런스를 열고 계속 데스크탑 혁신을 고민하고 있다.</p>
</p>
<p>더 읽을 글</p>
<ul>
<li>http://www.catb.org/esr/writings/taouu/html/ch02s06.html</li>
<li>http://www.catb.org/esr/writings/taouu/html/ch02s05.html</li>
<li>http://archive.oreilly.com/pub/a/linux/2005/08/25/whatisXwindow.html</li>
<li>https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.pdf</li>
<li>https://www.usenix.org/legacy/publications/library/proceedings/usenix2000/invitedtalks/gettys_html/Talk.htm</li>
<li>https://en.wikipedia.org/wiki/OPEN_LOOK</li>
<li>https://en.wikipedia.org/wiki/XFree86</li>
</ul>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/19dF7_U0TKjgqslbtfEqozBarW3kjEd0i2JY8cfpJq8I/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요.</p></p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/08/04/25-xfree86%ea%b3%bc-x-org/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1124</post-id>	</item>
		<item>
		<title>24. X11의 탄생</title>
		<link>https://joone.net/2018/07/24/23-x11%ec%9d%98-%ed%83%84%ec%83%9d/</link>
		<comments>https://joone.net/2018/07/24/23-x11%ec%9d%98-%ed%83%84%ec%83%9d/#comments</comments>
		<pubDate>Wed, 25 Jul 2018 00:11:04 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[DEC]]></category>
		<category><![CDATA[X11]]></category>

		<guid isPermaLink="false">https://joone.net/?p=1091</guid>
		<description><![CDATA[1985년 1월 프로젝트 아테나는 X 윈도우 버전6를 릴리스한다. 함께 개발에 참여하고 있던 DEC도 MicroVAX에 이를 포팅한다. 같은 해, MIT는 DEC가 VAXStation에 구현한 컬러 기능을 X에 추가해서 버전9를 릴리스한다. 워크스테이션을 만드는 다른 회사들도 X 윈도우를 사용하보기를 원했다. 여러 기능이 개선되고 1985년 11월 드디어 X10버전이 릴리스 되었다. DEC 역시 이듬해 2월, 최초로 X을 상업적으로 출시했다. X10은 시장에서 큰 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>1985년 1월 <a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_%EC%95%84%ED%85%8C%EB%82%98">프로젝트 아테나</a>는 X 윈도우 버전6를 릴리스한다. 함께 개발에 참여하고 있던 DEC도 <a href="https://en.wikipedia.org/wiki/MicroVAX">MicroVAX</a>에 이를 포팅한다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null.png" alt="" width="624" height="268" /></p>
<p>같은 해, MIT는 DEC가 VAXStation에 구현한 컬러 기능을 X에 추가해서 버전9를 릴리스한다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-1.png" alt="" width="457" height="374" /></p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-2.png" alt="" width="416" height="294" /></p>
<p>워크스테이션을 만드는 다른 회사들도 X 윈도우를 사용하보기를 원했다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-3.png" alt="" width="454" height="325" /></p>
<p>여러 기능이 개선되고 1985년 11월 드디어 X10버전이 릴리스 되었다. DEC 역시 이듬해 2월, 최초로 X을 상업적으로 출시했다. X10은 시장에서 큰 성공을 거두고 이 때 부터 많은 회사가 DEC를 접촉해서 X 라이선스 요청했다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-4.png" alt="" width="498" height="286" /></p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-5.png" alt="" width="321" height="377" /></p>
<p>여기서 중요한 역사적 결정이 일어난다. MIT는 X 윈도우 소스코드를 누구나 제약없이 사용할 수 있도록 공개한다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-6.png" alt="" width="624" height="520" /></p>
<p>“X가 많이 사용되고 더 많은 애플리케이션이 개발될 수 있도록 X의 소스코드를 공개하고 무료로 사용할 수 있도록 하면 어떨까요?”<br />
“프로젝트 아테나에서 사용할 수 있는 애플리케이션이 많아지면 학생들이 공부하는데 많은 도움이 될 것 같군요. 정부에서 연구비를 받았으니 누구나 소스코드를 무료로 사용할 수 있도록 합시다.”</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-7.png" alt="" width="205" height="320" /></p>
<p>참고로, MIT라이선스는 BSD 라이선스와 유사해서 저작권 표기만 지켜주면 제약 없이 상업적 이용이 가능하다.</p>
<p><b>X 윈도우 MIT 라이선스로 공개<br />
</b>이렇게 1986년 1월 X10R3는 MIT 라이선스로 공개된다. 이때 부터 X 윈도우는 HP, Apollo, Sun Workstaion, IBM PC/AT에 포팅되기 시작한다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-8.png" alt="" width="452" height="390" /></p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-9.png" alt="" width="536" height="354" /></p>
<p>이처럼 X윈도우 소스코드는 MIT라이선스로 회사에 제공되었는데, 소스코드에 대한 상업적 이용이 가능하였고, 각 회사에서 수정한 소스 코드를 공개할 의무도 없었다. 이후, 여러 컴퓨터 회사에 X 윈도우를 기반으로 다양한 윈도우 시스템을 개발하게 된다.</p>
<p><b>X11 구현<br />
</b>하지만, X윈도우가 다양한 하드웨어와 운영체제에서 동작하기 위해서는 X 프로토콜이 하드웨어에 독립적인 새로운 디자인을 사용해야했다. 하지만, MIT는 이를 구현한 충분한 개발 인력을 갖고 있지 못했다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-10.png" alt="" width="430" height="373" /></p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-11.png" alt="" width="480" height="390" /></p>
<p>MIT의 밥 쉐이플러(Bob Scheifler)는 X11 프로토콜 설계를 주도했는데, 개발 단계에서도 유즈넷 뉴스그룹을 통해 설계에 대한 토론이 이루어졌다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-13.png" alt="" width="624" height="402" /></p>
<p>스모키 월래스(Smokey Wallace)와 짐 게티스(Jim Gettys)는 DEC 웨스턴 소프트웨어 연구소가 X 윈도우 재설계를 구현하고 이 코드를 X10과 같은 MIT라이선스로 공개할 것을 DEC에 제안하였다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-14.png" alt="" width="624" height="268" /></p>
<p>스모키 월래스: 저희가 X윈도우 재설계를 구현해서 MIT라이선스로 공개해야합니다.<br />
DEC 책임자: 하지만 우리가 많은 노력을 기울인 것을 그냥 공개하자고?<br />
짐 게티스: 다양한 컴퓨터에서 X가 실행되는 것은 중요합니다. 그래야 다양한 애플리케이션이 개발되고 워크스테이션 시장도 커질 것입니다.</p>
<p style="text-align: center;"><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-16.png" alt="" width="317" height="202" /></p>
<p>DEC 책임자: 알겠습니다. X윈도우 재설계를 MIT 라이선스로 공개합시다. 대신 우리가 X개발을 이끌 수 있도록 인력을 보강하세요.</p>
<p>테스트를 걸쳐 1987년 9월 15일 드디어 X11이 세상에 공개되었다.</p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-17.png" alt="" width="624" height="326" /></p>
<p><img title="" src="https://joone.net/wp-content/uploads/2018/07/null-19.png" alt="" width="364" height="234" /><br />
“X11의 공개는 자유 소프트웨어 역사상 큰 일중 하나지. MIT 라이선스가 맘에 들지 않지만…”</p>
<p>참고</p>
<ul>
<li>https://en.wikipedia.org/wiki/X_Window_System#History</li>
<li>http://www.catb.org/esr/writings/taouu/html/ch02s06.html</li>
<li>http://archive.oreilly.com/pub/a/linux/2005/08/25/whatisXwindow.html</li>
<li>https://www.x.org/releases/X11R7.7/doc/libX11/libX11/libX11.pdf</li>
<li>https://www.youtube.com/watch?v=KdmNHM9BKY0</li>
</ul>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1gYP7wMsFfNBZP2lnla2AsqNYYt-zLIEjPuuUS5VG3fk/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 XFree86관한 이야기입니다.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/07/24/23-x11%ec%9d%98-%ed%83%84%ec%83%9d/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1091</post-id>	</item>
		<item>
		<title>23. X 윈도우 시작</title>
		<link>https://joone.net/2018/06/21/22-x-window-%ed%83%84%ec%83%9d/</link>
		<comments>https://joone.net/2018/06/21/22-x-window-%ed%83%84%ec%83%9d/#comments</comments>
		<pubDate>Thu, 21 Jun 2018 07:25:23 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[x-window]]></category>

		<guid isPermaLink="false">http://joone.net/?p=1049</guid>
		<description><![CDATA[X윈도우의 시작 1983년 미국 스탠포드 대학에 재학중인 Paul Asente &#38; Brian Reid는 사용하고 있는 V 운영체제에 GUI를 구현하기로 결심한다. 당시 이들은 스탠포드 대학교 분산 시스템 그룹 학생들이 만든 V라는 운영체제를 사용하고 이 운영체제에서 GUI 구현을 위해 W 윈도우 시스템을 만들기 시작한다. 1983년 이를 DEC(Digital Equipment Corporation)에서 만든 VS100이란 컴퓨터에서 동작하는 유닉스에 포팅을 한다. W 윈도우 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><b>X윈도우의 시작</b></p>
<p>1983년 미국 스탠포드 대학에 재학중인 Paul Asente &amp; <a href="https://en.wikipedia.org/wiki/Brian_Reid_(computer_scientist)">Brian Reid</a>는 사용하고 있는 V 운영체제에 GUI를 구현하기로 결심한다.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null.png" alt="" width="417" height="334" /></p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-22.png" alt="" width="624" height="518" /></p>
<p>당시 이들은 스탠포드 대학교 분산 시스템 그룹 학생들이 만든 V라는 운영체제를 사용하고 이 운영체제에서 GUI 구현을 위해 <a href="https://en.wikipedia.org/wiki/W_Window_System">W 윈도우 시스템</a>을 만들기 시작한다. 1983년 이를 <a href="https://ko.wikipedia.org/wiki/%EB%94%94%EC%A7%80%ED%84%B8_%EC%9D%B4%ED%81%85%EB%A8%BC%ED%8A%B8_%EC%BD%94%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98">DEC(Digital Equipment Corporation)</a>에서 만든 <a href="https://en.wikipedia.org/wiki/VAXstation#VAXstation_100">VS100</a>이란 컴퓨터에서 동작하는 유닉스에 포팅을 한다. W 윈도우 시스템은 오늘날의 X 윈도우 처럼 이미 서버가 디스플레이 리스트를 관리하였고, 그래픽 윈도우와 터미널을 지원하는 프로토콜을 사용했다.</p>
<p>이들은 우연한 기회에 MIT 컴퓨터 과학 연구소에 <a href="https://en.wikipedia.org/wiki/W_Window_System">W 윈도우 시스</a>템을 소스코드를 복사해준다.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-2.png" alt="" width="460" height="364" /></p>
<p>1984년 당시 MIT 컴퓨터 과학 연구소는 DEC, IBM과 공동으로 프로젝트 아데나(Project Athena)를 진행 중에 있었다.</p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-3.png" alt="" width="465" height="322" /></p>
<p>이들은 이 프로젝트를 통해 여러 학생이 독립적인 그래픽 시스템을 통해 중앙 컴퓨터에 접속해서 컴퓨터 자원을 사용하는 시스템을 개발하고 있었다.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-18.png" alt="" width="624" height="445" /></p>
<p>당시에는 텍스트 기반인 터미널로 서버에 원격으로 접속해서 프로그램을 사용할 수 있었는데, 이를 그래픽 사용자 환경으로 구현하는 것이였다. MIT 컴퓨터 과학 연구소 소속인 J<a href="https://en.wikipedia.org/wiki/Jim_Gettys">im Gettys</a>와 Robert(<a href="https://en.wikipedia.org/wiki/Bob_Scheifler">Bob) Scheifler</a> 는 스탠포드 대학에서 복사해 온 W 윈도우 시스템에서 구현한 동기화 프로토콜을 비동기로 바꾼후, 아데나 프로젝트에 적용했다. 이름도 X 윈도우 시스템으로 변경했다.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-19.png" alt="" width="624" height="350" /></p>
<p>“자, X-Server가 키보드, 마우스, 디스플레이와 직접 통신을 하고 X-Client 대신 윈도우를 그려주는거야.” “X-Client는 심지어 다른 컴퓨터에 존재할 수 있어서 네트웍을 통해 통신을 할 수 있고.”</p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-6.png" alt="" width="205" height="302" /></p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-7.png" alt="" width="353" height="209" /></p>
<p>X는 네트워크 지향 윈도 시스템(Network-oriented Windowing System)으로서 클라이언트-서버 모델을 따르지. 즉, 클라이언트를 보통 X-Client라고 부르는데, 사용자가 실행하는 프로그램을 말하지. X-Server는 직접 Video Card에 있는 화면 제어기(Display Controller)와 입력장치와 통신하면서 모니터에 X-Client가 원하는 것을 그려. X-Client는 윈도를 그리는데 필요한 모든 명령어를 IPC를 통해 X-Server에 전달해.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-20.png" alt="" width="624" height="289" /></p>
<p>예를 들어 X Client 중 하나가 그림판이라면, X-Client는 페인팅 API로 직접 메모리에 픽셀을 만들지 않고, 대신 페인팅 명령어를 IPC로 X-Server에 전달하지.</p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-9.png" alt="" width="548" height="312" /></p>
<p>X-Server는 각각의 X Client가 보낼 페인팅 명령어를 전달 받아 메모리에 픽셀(비트맵 이라고도 부름)을 생성하는데, 이를 pixmap이라고 불러.</p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-10.png" alt="" width="521" height="353" /></p>
<p>X 윈도우 시스템에서는 또 다른 프로세스가 필요한데, 바로 <a href="https://en.wikipedia.org/wiki/X_window_manager">X 윈도우 관리자</a>야.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-11.png" alt="" width="489" height="334" /></p>
<p>X 윈도우 관리자도 X-client로서 데스크탑을 보여주고 윈도우의 테두리 모양과 어떤 레이아웃으로 윈도우를 배치할 지를 결정하지. 또한 가상 데스크탑, 프로그램 런처 등을 제공해. 우리가 리눅스를 사용할 때, 다양한 윈도 관리자가 있는 이유가 바로 X에서는 윈도우 관리자가 별도의 프로그램으로 동작하도록 하였기 때문이야.</p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-12.png" alt="" width="476" height="317" /></p>
<p>최종 화면은 다시 X-Server가 각 X-Client가 보낸 페인트 명령어로 생성한 pixmap을 X 윈도우 관리자가 배치한 형태대로 최종 비트맵을 만들어.</p>
<p style="text-align: center;"><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-13.png" alt="" width="438" height="140" /></p>
<p>이를 디스플레이 컨트롤러에 있는 프레임 버퍼에 전송하지.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-14.png" alt="" width="624" height="313" /></p>
<p>화면 제어기(Display controller)는 프레임 버퍼를 스캔해서 RGB 데이터를 실제 모니터에 나타나게 하지. 이때, X-Client와 X-Server가 반드시 같은 컴퓨터 장치에 있을 필요는 없어. X-Client와 X-Server간에 필요한 명령은 네트워크를 통해 서로 교환할 수 있기 때문이지.</p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-15.png" alt="" width="624" height="212" /></p>
<p>이것은 오리지널 X의 아키텍쳐이고 이후 GPU가 보급되면서 오히려 클라이언트-서버 모델은 GPU가속에 부담을 주게돼. 이 이야기는 다음 Wayland를 소개할 때, 다른분이 자세하게 소개할거야.<br />
<img title="" src="http://joone.net/wp-content/uploads/2018/06/null-21.png" alt="" width="166" height="198" /></p>
<p><img title="" src="http://joone.net/wp-content/uploads/2018/06/null-16.png" alt="" width="624" height="329" /></p>
<p>X 윈도 시스템이 빛이 나는 순간은 바로 컴퓨팅 자원이 많이 필요한 CAD및 과학계산용 프로그램을 고성능 서버에서 실행하고 이를 PC에서 X-Server를 통해 원격으로 사용하는 것이지. 이상 끝.</p>
<p><b>더 읽을 글</b></p>
<ul>
<li>XLIB Programming Manual, Rel. 5, 3rd Edition, <a href="http://shop.oreilly.com/product/9781565920026.do">http://shop.oreilly.com/product/9781565920026.do</a></li>
<li><a href="https://ko.wikipedia.org/wiki/X_%EC%9C%88%EB%8F%84_%EC%8B%9C%EC%8A%A4%ED%85%9C">X 윈도 시스템</a>, 위키피디아</li>
</ul>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1c56GVfPWpOgD70-znNexWF8vLSmszYcEIifRJpbXQeM/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 X-Window가 오늘날 처럼 어떻게 오픈소스로 운영되게 되었는지를 소개할 예정입니다.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/06/21/22-x-window-%ed%83%84%ec%83%9d/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1049</post-id>	</item>
		<item>
		<title>22. GUI 시대의 시작</title>
		<link>https://joone.net/2018/05/17/22-gui-%ec%8b%9c%eb%8c%80%ec%9d%98-%ec%8b%9c%ec%9e%91/</link>
		<comments>https://joone.net/2018/05/17/22-gui-%ec%8b%9c%eb%8c%80%ec%9d%98-%ec%8b%9c%ec%9e%91/#respond</comments>
		<pubDate>Thu, 17 May 2018 07:09:35 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[Alan Kay]]></category>
		<category><![CDATA[GUI]]></category>
		<category><![CDATA[Steve Jobs]]></category>

		<guid isPermaLink="false">http://joone.net/?p=1017</guid>
		<description><![CDATA[모든 데모의 어머니 모든 데모의 어머니라는 별명을 가진 더글러스 엥겔바트는 1968년 역사적인 데모에서 컴퓨터 마우스, GUI, 원격 화상 회의, 하이퍼텍스트, 워드프로세싱, 하이퍼미디어, 실시간 협업 편집 등을 보여주었다. 오늘날의 GUI를 구현한 알토 컴퓨터 탄생 제록스 팔로알토 연구소는 더글러스 엥겔바트 팀의 일부 연구원들을 영입하여 1973년 알토(Alto) 컴퓨터를 제작한다. 이 컴퓨터 최초로 데스크탑을 구현했는데, 당시 이미 윈도우, 아이콘, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><b>모든 데모의 어머니</b><br />
<img src="http://joone.net/wp-content/uploads/2018/05/null-14.png" width="624" height="397" alt="" title=""></p>
<p>모든 데모의 어머니라는 별명을 가진 <a href="https://ko.wikipedia.org/wiki/%EB%8D%94%EA%B8%80%EB%9F%AC%EC%8A%A4_%EC%97%A5%EA%B2%94%EB%B0%94%ED%8A%B8">더글러스 엥겔바트</a>는 1968년 <a href="https://www.youtube.com/watch?v=yJDv-zdhzMY">역사적인 데모</a>에서 컴퓨터 마우스, GUI, 원격 화상 회의, 하이퍼텍스트, 워드프로세싱, 하이퍼미디어, 실시간 협업 편집 등을 보여주었다.</p>
</p>
<p><b>오늘날의 GUI를 구현한 알토 컴퓨터 탄생</b> </p>
<p>제록스 팔로알토 연구소는 더글러스 엥겔바트 팀의 일부 연구원들을 영입하여 1973년 <a href="https://ko.wikipedia.org/wiki/%EC%A0%9C%EB%A1%9D%EC%8A%A4_%EC%95%8C%ED%86%A0">알토(Alto) 컴퓨터</a>를 제작한다. 이 컴퓨터 최초로 데스크탑을 구현했는데, 당시 이미 윈도우, 아이콘, 메뉴, 드롭 다운 메뉴 등을 제공하였고, WYSWYG기반의 문서편집기를 구현하였다.</p>
<p><img src="http://joone.net/wp-content/uploads/2018/05/null.png" width="624" height="561" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-1.png" width="246" height="328" alt="" title=""><br />
알토 컴퓨터 Smalltalk UI (출처: <a href="https://en.wikipedia.org/wiki/Xerox_Alto#/media/File:Smalltalk-76.png">위키피디아</a>)</p>
</p>
<p>당시 알토 컴퓨터의 운영체제와 소프트웨어 개발에 참여했던 앨런 케이(<a href="https://en.wikipedia.org/wiki/Alan_Kay">Alan Kay</a>), 래리 테슬러(<a href="https://en.wikipedia.org/wiki/Larry_Tesler">Larry Tesler</a>), 단 인갤스(<a href="https://en.wikipedia.org/wiki/Dan_Ingalls">Dan Ingalls</a>), 데이비드 스미스(<a href="https://en.wikipedia.org/wiki/David_Canfield_Smith">David Smith</a>), 클래런스 엘리스(<a href="https://en.wikipedia.org/wiki/Clarence_Ellis_(computer_scientist)">Clarence Ellis</a>)는 만드는 것 마다 세계 최초라는 수식어가 붙게 된다.</p>
</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-2.png" width="193" height="221" alt="" title=""><br />
앨런 케이: OOP 선구자, 최초 GUI 개발</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-3.png" width="188" height="205" alt="" title=""><br />
래리 테슬러: 워드프로세서, 스몰토크 개발, 최초 copy &#038; paste구현.<br />
애플에서 뉴턴 프로젝트 주도.</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-4.png" width="138" height="172" alt="" title=""><br />
단 인갤스: 스몰토크 개발,  최초 bitblit 함수와 팝업 메뉴 개발</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-5.png" width="128" height="173" alt="" title=""><br />
데이비드 스미스: 제록스 스타 컴퓨터와 비지칼크 UI 디자인.</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-6.png" width="189" height="226" alt="" title=""><br />
클래런스 엘리스: 최초의 흑인 전산학 박사학위 소유자.<br />
최초의 그룹웨어인 OfficeTalk 개발.</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-7.png" width="246" height="368" alt="" title=""></p>
<p>알토 컴퓨터는 상업용 컴퓨터가 아니여서 수천개의 유닛만 생산되어 제록스 팔로알토 연구소에서만 사용되었지만, 이후 애플 매킨토시를 비롯한 많은 컴퓨터에 영향을 준다.</p>
</p>
<p>1979년 스티브 잡스도 직접 팔로알토 연구소를 방문해서 알토 컴퓨터 데모를 보게 되고, 여기서 얻은 아이디어로 나중에 리사와 매킨토시를 만들게 된다.</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-8.png" width="453" height="321" alt="" title="">.</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2018/05/null-9.png" width="624" height="453" alt="" title=""></p>
<p>1981년 제록스는 알토 컴퓨터의 상업용 버전인 <a href="https://ko.wikipedia.org/wiki/%EC%A0%9C%EB%A1%9D%EC%8A%A4_%EC%8A%A4%ED%83%80">스타</a>라는 컴퓨터를 세상에 내 놓는데, 미래의 사무실이라는 컨셉으로 네트워크 기능, 파일 공유, 워드프로세서, IDE 도구등을 제공했지만, 비싼 가격탓에 상업적으로 성공을 못했다.</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-10.png" width="324" height="273" alt="" title=""><br />
제록스 스타의 데스크탑(출처: <a href="https://en.wikipedia.org/wiki/Xerox_Star#/media/File:Xerox_8010_compound_document.jpg">위키피디아</a>)</p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-11.png" width="413" height="252" alt="" title=""></p>
</p>
<p>1984년 애플도 GUI를 사용한 매킨토시 컴퓨터를 출시한다. 이 컴퓨터는 마우스를 채용했고 알토 컴퓨터에서 많은 아이디어롤 가져왔다. 상업적으로도 성공해서 개인용 컴퓨터에서 본격적으로 GUI시대를 맞이했다.</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-12.png" width="306" height="382" alt="" title=""></p>
</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/05/null-13.png" width="288" height="314" alt="" title=""></p>
<p style="text-align: center;">매킨토시 개발자 <a href="https://en.wikipedia.org/wiki/Andy_Hertzfeld">앤디 허츠펠드</p>
<p style="text-align: center;">
<p style="text-align: center;">
<p>더 읽을 글</p>
<ul>
<li><a href="https://arstechnica.com/the-multiverse/2015/04/from-the-vault-watching-and-re-watching-the-mother-of-all-demos/">From the vault: Watching (and re-watching) “The Mother of All Demos”</a>, Wired, 2012</li>
<li><a href="https://www.wired.com/2012/10/dead-media-beat-the-xerox-star/">Dead Media Beat: The Xerox Star</a>, Wired, 2012</li>
<li><a href="https://en.wikipedia.org/wiki/History_of_the_graphical_user_interface#Xerox_PARC">History of the graphical user interface</a>, Wikipedia</li>
</ul>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1aQXluFSjBu5FgIqlgRFNIgbPzKRmKmFsnlQi6DsDdq8/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 X-Window입니다.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/05/17/22-gui-%ec%8b%9c%eb%8c%80%ec%9d%98-%ec%8b%9c%ec%9e%91/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">1017</post-id>	</item>
		<item>
		<title>21. 자유 소프트웨어 재단</title>
		<link>https://joone.net/2018/04/02/21-%ec%9e%90%ec%9c%a0%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9e%ac%eb%8b%a8/</link>
		<comments>https://joone.net/2018/04/02/21-%ec%9e%90%ec%9c%a0%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9e%ac%eb%8b%a8/#comments</comments>
		<pubDate>Tue, 03 Apr 2018 02:20:14 +0000</pubDate>
		<dc:creator><![CDATA[joone]]></dc:creator>
				<category><![CDATA[F/OSS Story]]></category>
		<category><![CDATA[emacs]]></category>
		<category><![CDATA[FSF]]></category>
		<category><![CDATA[GCC]]></category>
		<category><![CDATA[GNOME]]></category>
		<category><![CDATA[GPL]]></category>
		<category><![CDATA[QT]]></category>

		<guid isPermaLink="false">http://joone.net/?p=980</guid>
		<description><![CDATA[자유 소프트웨어 재단 리차드 스톨만(이하 RMS)이 GNU 이맥스 편집기를 공개한 후, GNU 프로젝트에 참여하는 사람들이 생겨났다. 이후 자유 소프트웨어를 개발과 이용을 장려하기 위해 1985년 자유 소프트웨어 재단(FSF: Free Software Foundation)을 설립한다. FSF는 이맥스 편집기 배포 사업과 메뉴얼 판매등 여러 사업을 진행했고 기부금도 받기 시작했다. “이번에 기부금으로 유닉스 시스템을 보냈어요. ” “AT&#038;T 유닉스는 독점 소프트웨어인데, 우리가 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><b>자유 소프트웨어 재단<br />
</b>리차드 스톨만(이하 RMS)이 <a href="https://en.wikipedia.org/wiki/GNU_Emacs">GNU 이맥스</a> 편집기를 공개한 후, GNU 프로젝트에 참여하는 사람들이 생겨났다.</p>
</p>
<p><img src="http://joone.net/wp-content/uploads/2018/04/null.png" width="624" height="345" alt="" title=""></p>
<p>이후 자유 소프트웨어를 개발과 이용을 장려하기 위해 1985년 <a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EC%9C%A0_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EC%9E%AC%EB%8B%A8">자유 소프트웨어 재단(FSF: Free Software Foundation)</a>을 설립한다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-1.png" width="444" height="286" alt="" title=""></p>
</p>
<p>FSF는 이맥스 편집기 배포 사업과 메뉴얼 판매등 여러 사업을 진행했고 기부금도 받기 시작했다.</p>
<p> <img src="https://joone.net/wp-content/uploads/2018/04/null-2.png" width="624" height="361" alt="" title=""></p>
<p>“이번에 기부금으로 유닉스 시스템을 보냈어요. ”<br />
“AT&#038;T 유닉스는 독점 소프트웨어인데, 우리가 유닉스에서 자유 소프트웨어를 만들어야 할까?”</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-3.png" width="545" height="377" alt="" title=""></p>
<p>“유닉스에서 구현하면 우리가 만든 자유 소프트웨어를 유닉스에서 사용할 수 있잖아요&#8221;<br />
“하지만, 자유 소프트웨어를 독점 소프트웨어인 유닉스에서 만드는 것은 윤리적인 문제가 있어…”</p>
</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-4.png" width="241" height="258" alt="" title=""></p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-5.png" width="329" height="301" alt="" title=""></p>
<p>“그래, 우리가 폭력에 대해 자기방어가 필요하듯이,  독점 소프트웨어를 막을 대체물을 개발해야한다면 독점 소프트웨어 사용도 정당화할 수 있지. 자, 기증 받은 유닉스 컴퓨터도 개발에 사용합시다.&#8221;</p>
</p>
<p><b>GCC 출시<br />
</b>FSF는 기부금과 여러 수익을 바탕으로 개발자를 고용했는데, 이들은 여러 종류의 GNU 소프트웨어 패키지를  만들고 관리했다. <a href="https://ko.wikipedia.org/wiki/GNU_%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC_%EB%AA%A8%EC%9D%8C">GNU 컴파일러 모음(GCC)</a>개발도 다시 진행할 수 있었고, 1987년 3월 첫번째 버전을 출시한다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-6.png" width="402" height="366" alt="" title=""></p>
<p style="text-align: center;">
<p><b>GNU C 라이브러리와 배시 쉘 개발</b></p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-7.png" width="409" height="301" alt="" title=""></p>
<p>1998년 당시 15세였던 롤런드 맥 그래스(Roland McGrath)도 FSF에 채용되어 glibc개발을 시작하고[3], 같은해에 첫번째 버전을 릴리스한다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-8.png" width="421" height="316" alt="" title=""></p>
</p>
<p>브라이언 폭스는 AT&#038;T 유닉스에서 사용되고 있는 <a href="https://ko.wikipedia.org/wiki/%EB%B3%B8_%EC%85%B8">본 셸</a>을 대치하기 위해 <a href="https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%8B%9C_(%EC%9C%A0%EB%8B%89%EC%8A%A4_%EC%85%B8)">배시 셸(Bash shell)</a>을 개발했는데, 이렇게 만들어진 GNU C 라이브러리와 배시 셸은 리눅스에서 사용되었다. 이후, GNU 프로젝트는 GNU tar, GDB, GNU Make를 개발했다. gzip의 경우 <a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">LZW</a>의 특허 문제를 피하기 위해 새롭게 개발한 압축 프로그램이였다,</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-9.png" width="302" height="364" alt="" title=""></p>
<p>“LZW 특허 때문에 자유 소프트웨어 진영에 압축 프로그램이 없다니…  자 gzip을 만들자!”</p>
</p>
<p>이처럼 RMS는 FSF지원 아래  부족한 자유 소프트웨어를 하나 하나 개발하기 시작하였고, 1990년 마침내 꿈에 그리던 OS 커널 개발에 착수한다. </p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-10.png" width="413" height="313" alt="" title=""></p>
<p>“이제 커널을 개발할 때가 온 것 같다.”</p>
</p>
<p><b>Qt의 자유 소프트웨어 전환<br />
</b>데스크탑 진영에도 자유 소프트웨어 바람이 불었는데, 당시 독점 소프트웨어였던 <a href="https://ko.wikipedia.org/wiki/%EA%B3%B5%ED%86%B5_%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%86%B1_%ED%99%98%EA%B2%BD">CDE 데스크탑</a>과 이를 구현한 <a href="https://ko.wikipedia.org/wiki/%EB%AA%A8%ED%8B%B0%ED%94%84_(%EC%9C%84%EC%A0%AF_%ED%88%B4%ED%82%B7)">모티프</a>를 대체할 툴킷을 찾기 시작했다. 그 결과, 1996년 <a href="https://ko.wikipedia.org/wiki/KDE">KDE 공동체</a>가 생겨났고, Qt GUI 툴킷을 이용하여 KDE 데스크탑을 개발하기 시작했다. Qt는 소스코드가 공개되어 있었지만 2차 저작을 허용하지 않아 자유 소프트웨어 진영으로 부터 비판을 받았다.</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/04/null-15.png" width="516" height="360" alt="" title=""></p>
</p>
<p>“소스코드가 공개되었다고 모두 자유 소프트웨어는 아니지. 그놈(GNOME) 공동체와 함께 Qt의 자유 소프트웨어 버전을 만들어야겠다.”</p>
</p>
<p>Qt 사용을 반대해온 사람들이 그놈 공동체를 만들었고 FSF와 함께 <a href="https://en.wikipedia.org/wiki/Harmony_(toolkit)">하모니</a>라는 Qt의 자유 소프트웨어 버전을 만들기 시작한다.</p>
<p style="text-align: center;"><img src="https://joone.net/wp-content/uploads/2018/04/null-12.png" width="449" height="353" alt="" title=""></p>
<p style="text-align: center;">Qt를 만든 Haavard Nord와 Eirik Chambe-Eng</p>
<p style="text-align: center;">
<p>“그 이야기 들었어? FSF와 GNOME이 하모니라는 Qt 호환 GUI 툴킷을 만든다는 소식&#8221;<br />
“이런 RMS가 라이선스 문제로 계속 뭐라하더니만&#8221;</p>
</p>
<p>결국, 2000년 Qt도 GPL 라이선스를 지원하기로 결정한다.</p>
<p style="text-align: center;"><img src="http://joone.net/wp-content/uploads/2018/04/null-14.png" width="357" height="357" alt="" title=""></p>
<p>이처럼 RMS는 FSF지원 아래  부족한 자유 소프트웨어를 하나 하나 개발하기 시작하고, 회사들을 압박해서 독점 소프트웨어를 자유 소프트웨어로 만들었다. </p>
</p>
<p>참고</p>
<ol>
<li>리차드 스톨만, <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=E5329835060">GNU 운영체제와 자유 소프트웨어 운동, 오픈소스 혁명의 목소리, 한빛출판사</a>, 2013</li>
<li><a href="https://en.wikipedia.org/wiki/History_of_free_and_open-source_software#Desktop_(1984%E2%80%93)">History of free and open-source software</a>, Wikipedia</li>
<li><a href="https://www.theregister.co.uk/2017/07/10/glibc_maintainer_roland_mcgrath_steps_down/">Roland McGrath steps down as glibc maintainer after 30 years</a></li>
</ol>
<p>참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.</p>
</p>
<p>만화 중 잘못된 부분이나 추가할 내용이 있으면 <a href="https://docs.google.com/document/d/1pGepc3yyrfAjeU62wfEe_biClKOVOoKc7igVHHmgDgI/edit?usp=sharing">만화 원고</a>에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요.</p>
]]></content:encoded>
			<wfw:commentRss>https://joone.net/2018/04/02/21-%ec%9e%90%ec%9c%a0%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9e%ac%eb%8b%a8/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">980</post-id>	</item>
	</channel>
</rss>
