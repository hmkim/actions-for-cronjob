<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanumoka, IT Blog</title>
  
  <subtitle>그래봐야 코딩, 그래도 코딩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.hanumoka.net/"/>
  <updated>2019-04-27T08:13:51.231Z</updated>
  <id>https://blog.hanumoka.net/</id>
  
  <author>
    <name>Hanumoka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>리엑트(react) windows10 개발환경 셋팅</title>
    <link href="https://blog.hanumoka.net/2019/04/27/react-20190427-react-setting-up-react-devloment-enviroment/"/>
    <id>https://blog.hanumoka.net/2019/04/27/react-20190427-react-setting-up-react-devloment-enviroment/</id>
    <published>2019-04-27T07:33:39.000Z</published>
    <updated>2019-04-27T08:13:51.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>windows10에 react 개발환경 설정을 하는법을 설명하는 글이다.</p><p>순서는 다음과 같다.</p><ol><li>nodeJs, npm 설치</li><li>yarn 설치</li><li>visual studio code 설치</li><li>react 개발용 visual studio code 확자 플러그인 설치</li><li>create-react-app 도구 설치</li><li>create-react-app 도구로 react 프로젝트 생성하고 실행 확인</li></ol><h1 id="nodejs와-npm-설치"><a class="header-anchor" href="#nodejs와-npm-설치">¶</a>NodeJs와 npm 설치</h1><p><a href="https://nodejs.org/ko/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/ko/</a></p><p>위 사이트에서 LTS 버전 node를 다운 받아서 설치하자.</p><p>설치한 뒤 powershell에서 다음 명령으로 node, npm의 버전을 확인해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>버전 정보가 잘 나온다면 설치가 잘 된 것이다.</p><h1 id="yarn-설치"><a class="header-anchor" href="#yarn-설치">¶</a>yarn 설치</h1><p>yarn이란 npm과 비슷한 패키지 관리자이다.</p><p>다만 npm의 느린 속도등의 단점을 조금더 보안한 패키지 매니저 라고 한다.</p><p>npm만으로도 이번 실습을 진행할 수 있지만, yarn명령어를 사용할 예정이므로 설치해보자.</p><p><a href="https://yarnpkg.com/lang/en/" rel="external nofollow noopener noreferrer" target="_blank">https://yarnpkg.com/lang/en/</a></p><p>위 사이트로 이동해서 yarn을 다운 받아서 설치하자.<br>설치가 끝난 뒤에 powershell에서 다음 명령으로 yarn 버전을 확인해보자</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn -v</span><br></pre></td></tr></table></figure><p>버전 정보가 잘 나온다면 설치가 잘 된 것이다.</p><h1 id="visual-studio-code-설치"><a class="header-anchor" href="#visual-studio-code-설치">¶</a>Visual Studio code 설치</h1><p><a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">https://code.visualstudio.com/</a></p><p>위 사이트로 이동하여 visual studio code를 설치하자.</p><h1 id="crate-react-app-도구-설치"><a class="header-anchor" href="#crate-react-app-도구-설치">¶</a>crate-react-app 도구 설치</h1><p>powershell에서 다음 명령으로 create-react-app 도구를 설치하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add create-react-app</span><br></pre></td></tr></table></figure><p>위 명령을 입력하면 powershell에서 무언가 다운받고 설치하게 된다. 완료를 기다리자.</p><h1 id="create-react-app-도구를-이용해서-react-프로젝트를-생성하고-실행해보자"><a class="header-anchor" href="#create-react-app-도구를-이용해서-react-프로젝트를-생성하고-실행해보자">¶</a>create-react-app 도구를 이용해서 react 프로젝트를 생성하고 실행해보자.</h1><p>이제 모든 준비는 끝났다.</p><p>powershell에서 다음 명령을 입력해서 react 프로젝트를 생성하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app hello-react</span><br></pre></td></tr></table></figure><p>위 명령을 실행하면 무언가 진행이 되며, 완료가 되면 현재 경로에 hello-react 폴더가 생길 것이다.</p><p>만약 위 명령어가 동작하지 않는다면 다음 명령어로 시도해 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create-react-app hello-react</span><br></pre></td></tr></table></figure><p>파워쉘에서 생성된 hello-react 폴더로 진입하고 다음명령어로 visual studio code를 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>다음과 같이 create-react-app 도구가 생성산 react 프로젝트의 내부가 보일 것이다.</p><p><img src="/images/2019/20190427-react-setting-up-react-devloment-enviroment_1.png" alt="생성한 react 프로젝트 내부"></p><p>비주얼 스튜디오에서 터미널을 열고 아래 명령어를 실행하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>그러면 자동으로 dev 웹서버가 동작하면서 지금 생성한 리액트 프로젝트구 구동된다.</p><p>그리고 역시 자동으로 기본 브라우저가 열리며 다음처럼 초기 화면이 나올것이다.</p><p><img src="/images/2019/20190427-react-setting-up-react-devloment-enviroment_2.png" alt="react 프로젝트 실행결과"></p><p>기본 포트는 3000번으로 설정 되어있다.</p><h1 id="react개발용-visual-studio-code-플러그인-설치"><a class="header-anchor" href="#react개발용-visual-studio-code-플러그인-설치">¶</a>react개발용 visual studio code 플러그인 설치</h1><p>설치 할 플러그인 항목</p><ul><li>EsLint : 자바스크립트 문법 체크</li><li>Relative Path : 상대 경로에 있는 파일경로를 편하게 작성</li><li>Guides : 들여쓰기 가이드라인 그려줌</li><li>ReactJs code snippents : 리액테 관련 스니펫 모음</li></ul><p>끝!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;windows10에 react 개발환경 설정을 하는법을 설명하는 글이다.&lt;/p&gt;
&lt;p&gt;순서는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="Web" scheme="https://blog.hanumoka.net/categories/Web/"/>
    
      <category term="React" scheme="https://blog.hanumoka.net/categories/Web/React/"/>
    
    
      <category term="windows10" scheme="https://blog.hanumoka.net/tags/windows10/"/>
    
      <category term="react" scheme="https://blog.hanumoka.net/tags/react/"/>
    
      <category term="개발환경" scheme="https://blog.hanumoka.net/tags/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/"/>
    
      <category term="셋팅" scheme="https://blog.hanumoka.net/tags/%EC%85%8B%ED%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Node 프로젝트 dependencies 일괄 버전 업데이트</title>
    <link href="https://blog.hanumoka.net/2019/04/11/node-20190411-node-update-dependencies/"/>
    <id>https://blog.hanumoka.net/2019/04/11/node-20190411-node-update-dependencies/</id>
    <published>2019-04-11T11:35:50.000Z</published>
    <updated>2019-04-11T11:57:39.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>node 프로젝트의 package.json 에는 node 프로젝트가 사용하는 여러개의 의존 라이브러리가 버전과 함께 명시되어있다.</p><p>시간이 지남에 따라 이 라이브러리들의 버전을 자연히 올라가게 된다.</p><p>이 글에서는 node 프로젝트에서 만료된 dependencies 를 확인하고 일괄적으로 최신 버전으로 업데이트 하는 방법을 기록하겠다.</p><h1 id="node-프로젝트에서-만료된-dependency-확인하기"><a class="header-anchor" href="#node-프로젝트에서-만료된-dependency-확인하기">¶</a>Node 프로젝트에서 만료된 dependency 확인하기</h1><p>노드 프로젝트에서 다음 명령어로 만료된 의존 라이브러리들을 확인하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure><p>내 헥소 블로그에서 실행해 보니 다음과 같이 말료된 라이브러리들이 보인다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ npm outdated</span><br><span class="line">Package                              Current  Wanted  Latest  Location</span><br><span class="line">hexo-deployer-git                      0.3.1   0.3.1   1.0.0  hexo-site</span><br><span class="line">hexo-generator-json-content            3.0.1   3.0.1   4.1.3  hexo-site</span><br><span class="line">hexo-generator-seo-friendly-sitemap   0.0.22  0.0.22  0.0.25  hexo-site</span><br><span class="line">hexo-server</span><br></pre></td></tr></table></figure><h1 id="node-프로젝트에서-라이브러리-일괄-버전-업데이트-하기"><a class="header-anchor" href="#node-프로젝트에서-라이브러리-일괄-버전-업데이트-하기">¶</a>Node 프로젝트에서 라이브러리 일괄 버전 업데이트 하기</h1><p>다음 명령어 3줄을 순서대로 때려주자.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm-check-updates</span><br><span class="line">ncu -u</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>결과</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ npm i -g npm-check-updates</span><br><span class="line">C:\Users\amagr\AppData\Roaming\npm\ncu -&gt; C:\Users\amagr\AppData\Roaming\npm\node_modules\npm-check-updates\bin\ncu</span><br><span class="line">C:\Users\amagr\AppData\Roaming\npm\npm-check-updates -&gt; C:\Users\amagr\AppData\Roaming\npm\node_modules\npm-check-updates\bin\npm-check-updates</span><br><span class="line">+ npm-check-updates@3.1.7</span><br><span class="line">added 154 packages from 80 contributors <span class="keyword">in</span> 9.7s</span><br><span class="line"></span><br><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ ncu -u</span><br><span class="line">Upgrading C:\Users\amagr\projects\hexo_blog\package.json</span><br><span class="line">[====================] 19/19 100%</span><br><span class="line"></span><br><span class="line"> hexo-deployer-git                    ^0.3.1  →  ^1.0.0</span><br><span class="line"> hexo-generator-archive               ^0.1.4  →  ^0.1.5</span><br><span class="line"> hexo-generator-index                 ^0.2.0  →  ^0.2.1</span><br><span class="line"> hexo-generator-json-content          ^3.0.1  →  ^4.1.3</span><br><span class="line"> hexo-generator-seo-friendly-sitemap  0.0.22  →  0.0.25</span><br><span class="line"> hexo-renderer-ejs                    ^0.3.0  →  ^0.3.1</span><br><span class="line"> hexo-renderer-stylus                 ^0.3.1  →  ^0.3.3</span><br><span class="line"> hexo-server                          ^0.2.0  →  ^0.3.3</span><br><span class="line"></span><br><span class="line">Run npm install to install new versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">amagr@DESKTOP-RTCBUCP MINGW64 ~/projects/hexo_blog (master)</span><br><span class="line">$ npm install</span><br><span class="line">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.4: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules\hexo-deployer-git\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.7: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">added 158 packages from 69 contributors, removed 28 packages, updated 30 packages and audited 3798 packages <span class="keyword">in</span> 12.346s</span><br><span class="line">found 11 vulnerabilities (6 low, 5 moderate)</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><h2 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h2><p><a href="https://stackoverflow.com/questions/16073603/how-do-i-update-each-dependency-in-package-json-to-the-latest-version" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/16073603/how-do-i-update-each-dependency-in-package-json-to-the-latest-version</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;node 프로젝트의 package.json 에는 node 프로젝트가 사용하는 여러개의 의존 라이브러리가 버전과 함께 명시되어있
      
    
    </summary>
    
      <category term="Web" scheme="https://blog.hanumoka.net/categories/Web/"/>
    
      <category term="Node" scheme="https://blog.hanumoka.net/categories/Web/Node/"/>
    
    
      <category term="node" scheme="https://blog.hanumoka.net/tags/node/"/>
    
      <category term="dependencies" scheme="https://blog.hanumoka.net/tags/dependencies/"/>
    
      <category term="update" scheme="https://blog.hanumoka.net/tags/update/"/>
    
      <category term="version" scheme="https://blog.hanumoka.net/tags/version/"/>
    
      <category term="outdated" scheme="https://blog.hanumoka.net/tags/outdated/"/>
    
  </entry>
  
  <entry>
    <title>typescript-webpack으로 빌드하기</title>
    <link href="https://blog.hanumoka.net/2019/03/21/typescript-20190321-typescript-webpack-build/"/>
    <id>https://blog.hanumoka.net/2019/03/21/typescript-20190321-typescript-webpack-build/</id>
    <published>2019-03-21T14:40:53.000Z</published>
    <updated>2019-04-10T15:08:01.349Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0">들어가기</a></li><li><a href="#node-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B3%A0-typescript-%EC%86%8C%EC%8A%A4%EC%9E%91%EC%84%B1">node 프로젝트 만들고 typescript 소스작성</a></li><li><a href="#typescript%EB%A5%BC-%EB%B9%8C%EB%93%9C%ED%95%A0-webpack%EA%B4%80%EB%A0%A8-%ED%8C%8C%EC%9D%BC">typescript를 빌드할 webpack관련 파일</a></li><li><a href="#webpack%EC%9C%BC%EB%A1%9C-typescript-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0">webpack으로 typescript 빌드하기</a></li><li><a href="#html%EC%97%90%EC%84%9C-%EC%83%9D%EC%84%B1%EB%90%9C-js%ED%8C%8C%EC%9D%BC%EC%9D%84-%EB%B6%88%EB%9F%AC%EC%99%80%EC%84%9C-typescript%EC%97%90%EC%84%9C-%EC%84%A0%EC%96%B8%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%ED%98%B8%EC%B6%9C">html에서 생성된 js파일을 불러와서 typescript에서 선언한 객체를 호출</a></li><li><a href="#%EB%A7%88%EB%AC%B4%EB%A6%AC">마무리</a></li><li><a href="#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C">참고자료</a></li></ul><!-- /TOC --><h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>어쩌다보니 typescript sdk를 사용할 일이 있었다.</p><p>내가 문제는 typescript를 잘 모른다는 것이다. ㅋㅋㅋ</p><p>angular 때문에 말은 많이 들었지만, 이거 신기한 녀석이다.</p><p>typescript로 만든 소스를 tsc를 이용해서 build를 하면 그 결과가 javascript 소스가 된다.</p><p>여기서 build할때 이 빌드 결과물을 es3으로 빌드할지 아님 es5, es6로 빌드할지 결정 할 수도 있다.</p><p>기본적으로 tsc(typescript 컴파일러)로 빌드를 하지만 webpack으로도 빌드가 가능하다.</p><p>이번 글에서는 간단한 typescript 코드와 그것을 webpack으로 빌드해서 하나의 js파일로 만들어 html에서 호출하는 것을 해보려한다.</p><p>정확하 typescript와 webpack을 공부한게 아니라 엉성한것을 감안하길 바란다.</p><h1 id="node-프로젝트-만들고-typescript-소스작성"><a class="header-anchor" href="#node-프로젝트-만들고-typescript-소스작성">¶</a>node 프로젝트 만들고 typescript 소스작성</h1><p>npm init으로 node 프로젝트를 생성한다.</p><p>내가 생성한 <em>package.json</em>은 다음과 같다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"tsc-test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"es6-shim"</span>: <span class="string">"^0.35.5"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"^0.12.7"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^11.11.0"</span>,</span><br><span class="line">    <span class="attr">"ts-loader"</span>: <span class="string">"^5.3.3"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.3.3333"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사실 위 <em>package.json</em>은 <em>npm</em> 디펜던시 관리만 하게 될 것이다.</p><p>빌드는 <em>wepack</em>으로 할 것이다.</p><p>위 파일을가지고 <em>npm install</em> 명령어를 이용해서 모듈을 설치하자.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553182778149.png" alt="프로젝트 구조는 다음과 같다."></p><p>AccountService.ts 는 AccountVO.ts를 import해서 사용하고, main.ts 는 AccountService.ts를 inport해서 export 한다.</p><p>main.ts를 중심으로 외부에서 사용할 service를 노출시킨다.</p><p>main.ts는 일종의 service 컨트롤러 역할을 할 것이다.</p><p>이 main.ts를 entry point로 정해서 webpack에서 빌드하게되면 하나의 js파일이 생성되고 이 js파일을 index.html 파일에서 불러와서 main.ts에 등록된 AccountService.ts의 기능을 사용할수 있게 될 것이다.</p><p>파일을 하나씩 살펴보자.</p><p>/src/domain/AccountVO.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> AccountI &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AccountVO <span class="keyword">implements</span> AccountI &#123;</span><br><span class="line">    <span class="keyword">private</span> _privateKey : <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _publicKey : <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _address : <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">privateKey : <span class="built_in">string</span> , publicKey : <span class="built_in">string</span>, address : <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>._privateKey = privateKey;</span><br><span class="line">        <span class="keyword">this</span>._publicKey = publicKey;</span><br><span class="line">        <span class="keyword">this</span>._address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getPrivateKey() : <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getPublicKey() : <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getAddress() : <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>굳이 인터페이스는 없어도 된다. 공부하느라…</p><p>/src/service/AccountServiceVO.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AccountVO</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../domain/AccountVO"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AccountService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> createAccount () : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"createAcount called..."</span>);</span><br><span class="line">        <span class="keyword">const</span> user1 : AccountVO = <span class="keyword">new</span> AccountVO(<span class="string">"this is private key"</span>, <span class="string">"this is public key"</span>, <span class="string">"this is address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>별 내용은 없다 그냥 typescript 소스가 서로 import하면서 엮기는 모습을 보여주고 싶었다.</p><p>이렇게 그물처럼 엮인 소스를 webpack으로 빌드해서 하나의 단일 js 파일로 만드는 것이 신기하기 때문이다.</p><p>다음은 가장 중요한 main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AccountService</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./services/AccountService"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> _AccountService = <span class="keyword">new</span> AccountService();</span><br><span class="line"><span class="comment">//export const something = new somthing();</span></span><br></pre></td></tr></table></figure><p>webpack이 빌드할 entry point로 가장 중요한  typescript 파일이지만 내용은 별거 없다.</p><p>만약 여러개의 service를 등록하고 싶다면, 위 주석처럼 추가로 import해서 등록 하면 된다.</p><h1 id="typescript를-빌드할-webpack관련-파일"><a class="header-anchor" href="#typescript를-빌드할-webpack관련-파일">¶</a>typescript를 빌드할 webpack관련 파일</h1><p><img src="/images/2019/20190321-typescript-webpack-build/1553183379901.png" alt="webpack 관련파일"></p><p>위 이미지에서 표시된 두개의 파일이 typescript를 빌드할때 사용될 파일이다.</p><p>먼저 webpack.config.js 파일을 보자</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line"><span class="string">'main'</span>: <span class="string">'./src/main.ts'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line"><span class="comment">//filename: '[name].js',</span></span><br><span class="line">filename: <span class="string">'MAIN_TYPESCRIPT_SDK.js'</span>,</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">libraryTarget: <span class="string">'var'</span>,</span><br><span class="line">    library: <span class="string">'MAIN_TYPESCRIPT_SDK'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode :<span class="string">'development'</span>,</span><br><span class="line">devtool: <span class="string">'source-map'</span>,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">use: [<span class="string">'ts-loader'</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">resolve : &#123;</span><br><span class="line"><span class="comment">//root: __dirname,   </span></span><br><span class="line">modules: [</span><br><span class="line"><span class="string">'node_modules'</span>,</span><br><span class="line"><span class="comment">//'./src/components'</span></span><br><span class="line">],</span><br><span class="line">extensions: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">node: &#123; <span class="attr">fs</span>: <span class="string">'empty'</span> , <span class="attr">net</span> : <span class="string">'empty'</span>, <span class="attr">tls</span> : <span class="string">'empty'</span>&#125;   <span class="comment">// 웹팩 compile 시 오류 처리</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>여기서 중요한 설정이 몇개 존재한다.</p><p>일단 webpack으로 typescript를 build하기 때문에 module에 ts-loader가 등록이 되어있어야 한다.</p><p>이 로더가 tsconfig.json을 참조하게 된다. tsconfig.json은 typescript를 어떻게 build할 것인가에 대한 설정이다.</p><p>위 파일에서 entry와 output을 주의깊게 봐야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"><span class="string">'main'</span>: <span class="string">'./src/main.ts'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.ts 파일을 entry point로 정한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line"><span class="comment">//filename: '[name].js',</span></span><br><span class="line">filename: <span class="string">'MAIN_TYPESCRIPT_SDK.js'</span>,</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">libraryTarget: <span class="string">'var'</span>,</span><br><span class="line">    library: <span class="string">'MAIN_TYPESCRIPT_SDK'</span></span><br></pre></td></tr></table></figure><p>main.ts 를 기준으로 main.ts에 import된 모든 ts파일을 같이 빌드해서 하나의 js파일을 만드는데, 그 결과물 파일명은 MAIN_TYPESCRIPT_SDK.js 로 정했다.</p><p>그리고 이 파일이 생성되는 위치는 dist 폴더이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libraryTarget: <span class="string">'var'</span>,</span><br><span class="line">library: <span class="string">'MAIN_TYPESCRIPT_SDK'</span></span><br></pre></td></tr></table></figure><p>그리고 MAIN_TYPESCRIPT_SDK.js 파일에 변수를 하나 내보낼 것인데 변수 var MAIN_TYPESCRIPT_SDK = 빌드된 main.ts 이렇게 정했다.</p><p>이제 tsconfig.json 파일을 보자.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    //"outFile": "./build/build.js",</span><br><span class="line">    //"sourceRoot": "./src/",</span><br><span class="line">    //"rootDir": "./src/",</span><br><span class="line">  &#125;,</span><br><span class="line">  "compileOnSave": true, </span><br><span class="line">  "buildOnSave": true </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 파일은 typescirpt를 컴파일할때 사용하는 설정 파일 같다.</p><p>사실 이부부은 나도 잘 몰라서 뭐라 말을 못하겠다.</p><p>다만 빌드 결과물이 es5로 정했다.</p><h1 id="webpack으로-typescript-빌드하기"><a class="header-anchor" href="#webpack으로-typescript-빌드하기">¶</a>webpack으로 typescript 빌드하기</h1><p>만약 webpack을 global로 설치했다면, 프로젝트 폴더에서 webpack명령어를 입력하면 된다.</p><p>나 같은 경우에는 global로 설치하지 않았기 때문에, node_module폴더에 webpack이 숨어있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하게 되면 아래처럼 webpack이 typescript를 빌드한다.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553184414251.png" alt="webpack 명령어 결과"></p><p>그럼 dist폴더를 보면 webpack.config.js에서 설정한 것 처럼 js 파일이 생긴다.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553184482694.png" alt="dist폴더"></p><p>js파일 한개가 생성된 것을 확인했다.</p><h1 id="html에서-생성된-js파일을-불러와서-typescript에서-선언한-객체를-호출"><a class="header-anchor" href="#html에서-생성된-js파일을-불러와서-typescript에서-선언한-객체를-호출">¶</a>html에서 생성된 js파일을 불러와서 typescript에서 선언한 객체를 호출</h1><p>index.html 파일을 아래처럼 만들었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/MAIN_TYPESCRIPT_SDK.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.dir(MAIN_TYPESCRIPT_SDK);</span></span><br><span class="line"><span class="undefined">                MAIN_TYPESCRIPT_SDK._AccountService.createAccount();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>별거 없다.</p><p>webpack.config.js에 설정한대로 생성된 js파일을 src로 가져오고 var로 내보낸 라이브러리 명으로 main.ts에 export한 typescript객체의 메소드를 호출한다.</p><p><img src="/images/2019/20190321-typescript-webpack-build/1553184647594.png" alt="크롬 브라우저 콘솔창"></p><p>위처럼 크롬 콘솔에서 잘 호출되는 것을 확인했다.</p><h1 id="마무리"><a class="header-anchor" href="#마무리">¶</a>마무리</h1><p>휴 어렵다.</p><p>타입스크립트도 잘모르고, 특히 지옥같은 웹팩은 더더욱 몰라서 어려웠다.</p><p>gradle도 그렇고 webpack도 진짜 설정이 어려운거 같다.</p><p>위 소스 github 주소는 아래와 같다.<br><a href="https://github.com/hanumoka/demo_typescript_webpack" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/hanumoka/demo_typescript_webpack</a></p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="https://trustyoo86.github.io/typescript/2018/01/09/typescript-webpack.html" rel="external nofollow noopener noreferrer" target="_blank">https://trustyoo86.github.io/typescript/2018/01/09/typescript-webpack.html</a></p><p><a href="https://medium.com/dailyjs/inserting-variables-into-html-and-javascript-with-webpack-80f33625edc6" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/dailyjs/inserting-variables-into-html-and-javascript-with-webpack-80f33625edc6</a></p><p><a href="https://stackoverflow.com/questions/34357489/calling-webpacked-code-from-outside-html-script-tag" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/34357489/calling-webpacked-code-from-outside-html-script-tag</a><br>특히 마지막 자료가 많이 도움되었다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0&quot;&gt;들어가기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="Typescript" scheme="https://blog.hanumoka.net/categories/Programing/Typescript/"/>
    
    
      <category term="hanumoka" scheme="https://blog.hanumoka.net/tags/hanumoka/"/>
    
      <category term="html" scheme="https://blog.hanumoka.net/tags/html/"/>
    
      <category term="script" scheme="https://blog.hanumoka.net/tags/script/"/>
    
      <category term="webpack" scheme="https://blog.hanumoka.net/tags/webpack/"/>
    
      <category term="typescript" scheme="https://blog.hanumoka.net/tags/typescript/"/>
    
      <category term="src" scheme="https://blog.hanumoka.net/tags/src/"/>
    
  </entry>
  
  <entry>
    <title>Guitar 카피 - daft punk instant crush</title>
    <link href="https://blog.hanumoka.net/2019/02/06/guitar-20190206-guitar-daft-punk-instant-crush/"/>
    <id>https://blog.hanumoka.net/2019/02/06/guitar-20190206-guitar-daft-punk-instant-crush/</id>
    <published>2019-02-06T06:25:09.000Z</published>
    <updated>2019-04-10T15:08:00.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="통기타-반주-코드진행"><a class="header-anchor" href="#통기타-반주-코드진행">¶</a>통기타 반주 코드진행</h1><div class="video-container"><iframe src="//www.youtube.com/embed/nCLmnqrdx2Y" frameborder="0" allowfullscreen></iframe></div><p><img src="/images/2019/20190206-guitar-daft-punk-instant-crush/0.png" alt="반주코드진행"></p><h3 id="related-posts"><a class="header-anchor" href="#related-posts">¶</a>Related Posts</h3><p><a href="https://www.youtube.com/watch?v=nCLmnqrdx2Y" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=nCLmnqrdx2Y</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;통기타-반주-코드진행&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#통기타-반주-코드진행&quot;&gt;¶&lt;/a&gt;통기타 반주 코드진행&lt;/h1&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.yout
      
    
    </summary>
    
      <category term="Joy" scheme="https://blog.hanumoka.net/categories/Joy/"/>
    
      <category term="Guitar" scheme="https://blog.hanumoka.net/categories/Joy/Guitar/"/>
    
    
  </entry>
  
  <entry>
    <title>docker- docker toolbox 기본 ip</title>
    <link href="https://blog.hanumoka.net/2019/01/31/docker-20190131-docker-toolbox-docker-machine-ip-default/"/>
    <id>https://blog.hanumoka.net/2019/01/31/docker-20190131-docker-toolbox-docker-machine-ip-default/</id>
    <published>2019-01-30T15:29:38.000Z</published>
    <updated>2019-04-10T15:08:00.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>기존에 docker for windows를 사용하다가 virtual box를 사용하고 싶어서.</p><p>docker tool box로 갈아탔다.( docker for windows보다는 불편하지만, 윈도우에서 ubuntu를 온전하게 사용하기 위해서는 어쩔수 없었다.)</p><p>문제는 docker toolbox로 생성한 컨티에너에 접속이 localhost로 안되는 것이었다.</p><h1 id="해결방법"><a class="header-anchor" href="#해결방법">¶</a>해결방법</h1><p>다양한 방법이 있겠지만, 복잡하게 네트워크를 변경하는 것보다 기본 도커아이피로 접속하면 된다.</p><p><strong>docker-machine ip default</strong> 를 입력하면</p><p>192.168.99.100 다음과 같은 ip 가 나온다 이 아이피로 접속하면된다.</p><p>(/images/20181116-docker-docker-basic_1.png)</p><p><img src="/images/20190131-docker-toolbox-docker-machine-ip-default_1.png" alt="docker toolbox ip확인하기"></p><p>#참조가료</p><p><a href="https://stackoverflow.com/questions/42866013/docker-toolbox-localhost-not-working/42886035" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/42866013/docker-toolbox-localhost-not-working/42886035</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;기존에 docker for windows를 사용하다가 virtual box를 사용하고 싶어서.&lt;/p&gt;
&lt;p&gt;docker too
      
    
    </summary>
    
      <category term="Infra" scheme="https://blog.hanumoka.net/categories/Infra/"/>
    
      <category term="Docker" scheme="https://blog.hanumoka.net/categories/Infra/Docker/"/>
    
    
      <category term="ip" scheme="https://blog.hanumoka.net/tags/ip/"/>
    
      <category term="docker" scheme="https://blog.hanumoka.net/tags/docker/"/>
    
      <category term="toolbox" scheme="https://blog.hanumoka.net/tags/toolbox/"/>
    
      <category term="default_ip" scheme="https://blog.hanumoka.net/tags/default-ip/"/>
    
  </entry>
  
  <entry>
    <title>java8 - system.out::println(double colone, method reference)</title>
    <link href="https://blog.hanumoka.net/2019/01/30/java-20190130-java8-system-out-println/"/>
    <id>https://blog.hanumoka.net/2019/01/30/java-20190130-java8-system-out-println/</id>
    <published>2019-01-30T03:47:50.000Z</published>
    <updated>2019-04-10T15:08:00.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>::(double conlon operator)이라고도 부르는것 같은데, 정식 명칭은 method reference라고 부른다.</p><h1 id="method-reference-이해하기"><a class="header-anchor" href="#method-reference-이해하기">¶</a>method reference 이해하기</h1><p>메소드 참조(method reference)는 메소드를 참조해서 매개변수의 정보 및 리턴 타입을 미리 알아내어, 람다식에서 사용하는 매개 변수를 생략하는 방식의 표현법이다.</p><p>말로 조금 풀어보자면 대상::메소드 가 있다면, 대상에서 메소드의 정보를 추출하여 람다식 처럼 익명 구현객체를 생성하는 것이다. 다만 참조하는 메소드의 매개변수를 생략 할 수 있다.</p><p>아래 단계별로 소스로 method reference를 알아보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; testList = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1단계: 함수인터페이스를 익명구현객체로 구현</span></span><br><span class="line">testList.forEach(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer x)</span> </span>&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2단계: 1단계를 람다식으로 간단하게 표현</span></span><br><span class="line">testList.forEach((x) -&gt; System.out.println(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3단계: 2단계를 더 간단하게 표현 : methed reference </span></span><br><span class="line">testList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//method reference도 익명구현객체를 생상하므로 이처럼 참조변수에 할당 할 수 있다.</span></span><br><span class="line">   Consumer&lt;Integer&gt; c = System.out::println;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1~3단계 모두 익명구현객체를 생성하는 코드이다. 점점 약식화된 표현식이며 3단계가 method refernece이다.</p><p>람다식도 굉장시 간단하지만, 위처럼 참조하는 메소드의 매개변수에 어떠한 변화 없이 그냥 사용할경우 매개변수를 생략할 수 있다.</p><p>처음에는 뭔가 코드 가독성이 떨어지는 것 같았지만, 보다보니 간편한거 같기도 하다.</p><h1 id="사용법1"><a class="header-anchor" href="#사용법1">¶</a>사용법1</h1><p>메소드 참조는 정적 또는 인스턴스 메소드, 그리고 생성자도 참조 할 수 있다.</p><p><strong>참조할 메소드가 정적메소드인경우</strong></p><p>클래스::정적메소드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">    System.out.println( x + <span class="string">"하하하"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; c2 = Test::talk;</span><br></pre></td></tr></table></figure><p><strong>참조할 메소드가 인스턴스 메소드인경우</strong></p><p>먼저 클래스 이용하여 객체를 생성한뒤, 아래처럼 참조변수를 이용해서 메소드를 참조한다.</p><p>참조변수::메소드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">    System.out.println( x + <span class="string">"하하하"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; c3 = t1::talk;</span><br></pre></td></tr></table></figure><h1 id="사용법2"><a class="header-anchor" href="#사용법2">¶</a>사용법2</h1><p>람다식에서 실행될 코드 컨텍스트 내부에는 람다식 외부의 클래스 멤버의 메소드를 사용할 수도 있고, 람다식에 매개변수의 멤버 메소드를 사용할 수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a, b) -&gt; &#123; a.instanceMethod(b); &#125;</span><br></pre></td></tr></table></figure><p>메소드 참조에서 위 코드를 아래처럼 표현할 수 있다.</p><p>클래스 :: instanceMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">    <span class="comment">//람다방식</span></span><br><span class="line">ToIntBiFunction&lt;A, B&gt; f1 = (x, y) -&gt; x.testB(y);</span><br><span class="line">System.out.println(f1.applyAsInt(a, b));</span><br><span class="line"><span class="comment">//메소드 참조방식</span></span><br><span class="line">ToIntBiFunction&lt;A, B&gt; f2 = A::testB;</span><br><span class="line">System.out.println(f2.applyAsInt(a, b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="생성자-참조"><a class="header-anchor" href="#생성자-참조">¶</a>생성자 참조</h1><p>람도식으로 생성자를 호출해서 객체를 생성할 수 있다.</p><p>(a, b) -&gt; { return new 클래스(a, b); }</p><p>메소드 참조역시 람다처럼 생성자 참조가 가능하다.</p><p>클래스 :: new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line">String id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name, String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//람다 방식</span></span><br><span class="line">Function&lt;String, Account&gt; f1 = (x) -&gt; &#123; <span class="keyword">return</span> <span class="keyword">new</span> Account(x); &#125;;</span><br><span class="line">Account ac1 = f1.apply(<span class="string">"오레오"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메소드참조방식, 함수적인터페이스 타입을 이용해서 오버로딩된 생성자를 선택적 호출할수 있다.(Function)</span></span><br><span class="line">Function&lt;String, Account&gt; f2 = Account::<span class="keyword">new</span>;</span><br><span class="line">Account ac2 = f2.apply(<span class="string">"메로나"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메소드참조방식, 함수적인터페이스 타입을 이용해서 오버로딩된 생성자를 선택적 호출할수 있다.(BiFunction)</span></span><br><span class="line">BiFunction&lt;String, String ,Account&gt; f3 = Account::<span class="keyword">new</span>;</span><br><span class="line">Account ac3 = f3.apply(<span class="string">"초코파이"</span>, <span class="string">"오예스"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a class="header-anchor" href="#마무리">¶</a>마무리</h1><p>method referece는 람다를 더 간결하게 표현하는 문법니다.<br>하지만 개인적으로 너무 간결하여 코드의 가독성이 떨어지는 것이 아닌가 생각해본다.<br>List의 foreach에 System.out::println 정도 쓰기에는 좋아보이긴 한다.</p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="https://stackoverflow.com/questions/31020269/what-is-the-use-of-system-outprintln-in-java-8" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/31020269/what-is-the-use-of-system-outprintln-in-java-8</a></p><p><a href="https://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;::(double conlon operator)이라고도 부르는것 같은데, 정식 명칭은 method reference라고 부른다
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="Java" scheme="https://blog.hanumoka.net/categories/Programing/Java/"/>
    
    
      <category term="java8" scheme="https://blog.hanumoka.net/tags/java8/"/>
    
      <category term="람다" scheme="https://blog.hanumoka.net/tags/%EB%9E%8C%EB%8B%A4/"/>
    
      <category term="double_colone" scheme="https://blog.hanumoka.net/tags/double-colone/"/>
    
      <category term="method_reference" scheme="https://blog.hanumoka.net/tags/method-reference/"/>
    
      <category term="lambda" scheme="https://blog.hanumoka.net/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu에 docker 설치하기</title>
    <link href="https://blog.hanumoka.net/2019/01/29/ubuntu-20190129-ubuntu-install-docker/"/>
    <id>https://blog.hanumoka.net/2019/01/29/ubuntu-20190129-ubuntu-install-docker/</id>
    <published>2019-01-29T07:52:30.000Z</published>
    <updated>2019-04-10T15:08:01.368Z</updated>
    
    <content type="html"><![CDATA[<p>영상: 우분투 도커 설치1</p><h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>virtual box에 설치한 ubuntu에 docker를 한번 설치해보자.</p><p>docker가 ubuntu에 최적헤 되어있다고 해서, docker for windows를 포기하고 virtual box에 ubuntu를 설치해서 사용해 보려고 한다.</p><h1 id="ubuntu에서-docker-설치하기"><a class="header-anchor" href="#ubuntu에서-docker-설치하기">¶</a>ubuntu에서 docker 설치하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl - fsSL http://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p><img src="/images/20190129-ubuntu-install-docker_1.png" alt="명령1"></p><p>위  명령어를 입력하면 OK라고 나올 것이다.<br>아 물론 curl 이 없으면 미리 설치하자.</p><p>그리고 아래 명령어를 입력하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br></pre></td></tr></table></figure><p><img src="/images/20190129-ubuntu-install-docker_2.png" alt="명령2"></p><p>그리고 아래 명령어를 입력해서 docker-ce를 설치하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h1 id="docker-확인"><a class="header-anchor" href="#docker-확인">¶</a>docker 확인</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker info</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 설치된 docker의 정보가 보일것이다. (안보인다면 문제가 있는 것)</p><p>끝!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;영상: 우분투 도커 설치1&lt;/p&gt;
&lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;virtual box에 설치한 ubuntu에 docker를 한번 설치해보자.&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Infra" scheme="https://blog.hanumoka.net/categories/Infra/"/>
    
      <category term="Ubuntu" scheme="https://blog.hanumoka.net/categories/Infra/Ubuntu/"/>
    
    
      <category term="docker" scheme="https://blog.hanumoka.net/tags/docker/"/>
    
      <category term="ubuntu" scheme="https://blog.hanumoka.net/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu - vim설치(vi 방향키 입력오류 해결)</title>
    <link href="https://blog.hanumoka.net/2019/01/29/ubuntu-20190129-ubuntu-install-vim/"/>
    <id>https://blog.hanumoka.net/2019/01/29/ubuntu-20190129-ubuntu-install-vim/</id>
    <published>2019-01-29T07:35:14.000Z</published>
    <updated>2019-04-10T15:08:01.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>Virtual box에 ubuntu를 설치한뒤, vi를 열어보니 이상하게도 키보드의 방향키 입력시 A, B 등의 알파뱃 대문자가 입력되었다.<br>인터넷을 찾아보니 골치아픈 vi를 버리고 vim을 설치해서 사용하라는 글을 확인했다.<br>ubuntu에 vim을 설치하고 vi보다는 좋은 vim 기능을 사용해보자.</p><h1 id="ubuntu-vim-설치"><a class="header-anchor" href="#ubuntu-vim-설치">¶</a>ubuntu vim 설치</h1><p>ubuntu 터미널에서 아래 명령어로 vim을 설치하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install</span><br></pre></td></tr></table></figure><p>이제 vi 대신 vim을 사용할 수 있다. 다행스럽게도 방향키는 정상적으로 입력된다.</p><h1 id="vim-편리한-기능-활성화"><a class="header-anchor" href="#vim-편리한-기능-활성화">¶</a>vim 편리한 기능 활성화</h1><p>아래 명렁어를 터미널에 입력하여 vim 설정파일을 생성하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>그리고 방금 생성한 vimrc 파일에 아래 내용채워 vim 기능을 활성화 하자.</p><p>set number            &quot; 줄 번호 표시<br>set tabstop=4         &quot; tab을 4칸으로<br>set ignorecase      &quot; 검색시 대소문자 구별하지 않음<br>set hlsearch         &quot; 검색시 하이라이트<br>set fileencodings=utf-8,euc-kr    &quot; 파일인코딩 형식<br>set bs=indent,eol,start    &quot; backspace 키 사용<br>set ruler              &quot; 상태표시줄 커서 위치 표시<br>set title               &quot; 제목 표시<br>set showmatch    &quot; 매칭되는 괄호 표시<br>set nowrap         &quot; 자동 줄바꿈 해제<br>set wmnu           &quot; tab 자동완성시 가능한 목록 표시</p><p>syntax on        &quot; 문법 하이라이트</p><p><img src="/images/20190129-ubuntu-install-vim_1.png" alt="vimrc 파일"></p><p>설정이 활성화 되며 위처럼 줄번호 등 편리한 기능이 적용된다.</p><p>끝!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;Virtual box에 ubuntu를 설치한뒤, vi를 열어보니 이상하게도 키보드의 방향키 입력시 A, B 등의 알파뱃 대문자
      
    
    </summary>
    
      <category term="Infra" scheme="https://blog.hanumoka.net/categories/Infra/"/>
    
      <category term="Ubuntu" scheme="https://blog.hanumoka.net/categories/Infra/Ubuntu/"/>
    
    
      <category term="vi" scheme="https://blog.hanumoka.net/tags/vi/"/>
    
      <category term="ubuntu" scheme="https://blog.hanumoka.net/tags/ubuntu/"/>
    
      <category term="우분투" scheme="https://blog.hanumoka.net/tags/%EC%9A%B0%EB%B6%84%ED%88%AC/"/>
    
      <category term="vim" scheme="https://blog.hanumoka.net/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>git - Large files detected(오류)</title>
    <link href="https://blog.hanumoka.net/2019/01/24/git-20190124-git-error-Large-files-detected/"/>
    <id>https://blog.hanumoka.net/2019/01/24/git-20190124-git-error-Large-files-detected/</id>
    <published>2019-01-24T02:36:48.000Z</published>
    <updated>2019-04-10T15:08:00.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>springboot 프로젝트를 github에 push 하던 도중 아래와 같은 error를 만났다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">amagr@DESKTOP-EU9BLID MINGW64 ~/Desktop/Project/nao (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br><span class="line">Enumerating objects: 54, done.</span><br><span class="line">Counting objects: 100% (54/54), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (30/30), done.</span><br><span class="line">Writing objects: 100% (33/33), 156.51 MiB | 344.00 KiB/s, done.</span><br><span class="line">Total 33 (delta 20), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (20/20), completed with 16 local objects.</span><br><span class="line">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br><span class="line">remote: error: Trace: 83b0de65c389cb962e5f8d4559f073aa</span><br><span class="line">remote: error: See http://git.io/iEPt8g for more information.</span><br><span class="line">remote: error: File hanumoka-nao.tar is 186.06 MB; this exceeds GitHub's file size limit of 100.00 MB</span><br><span class="line">To https://github.com/hanumoka/nao.git</span><br><span class="line"> ! [remote rejected] master -&gt; master (pre-receive hook declined)</span><br><span class="line">error: failed to push some refs to 'https://github.com/hanumoka/nao.git'</span><br></pre></td></tr></table></figure><p><img src="/images/20190124-git-error-Large-files-detected_1.png" alt="오류 이미지1"></p><p>위 오류의 문제는 Large files detected, 즉 100매가를 넘어가는 파일은 github에 올릴수가 없다.</p><p>깜빡하고 테스트로 생성한 spring docker 이미지(hanumoka-nao.tar)때문에 push를 거절 당한 것이다.</p><p>그런데 문제는 저 파일을 제거하고 다시 commit을 한 상태에서도 계속 위 오류가 나는 것이다.<br>(일반적으로 해당 삭제하고 commit, push하면 되야되는데 뭔가 알수없는 문제가 있었던거 같다.)</p><p>그래서 인터넷을 찾아보니 삭제된 파일이 git에 제대로 인식이 안된듯 했다.</p><p>아래 명령어를 이용해서 해당 파일의 캐쉬를 삭제 했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch hanumoka-nao.tar'</span><br></pre></td></tr></table></figure><p>그런데 문제는 위 명령어로 강제로 캐쉬를 날려버리면 git 로컬과 원격 리파지토리의 history가 엉킨다.</p><p>따라서 push 를 하려면 pull을 하라고 메세지가 나오며, 정작 git pull을 하면 아래처럼 오류와 함께 pull이 되지 않는다.</p><p><img src="/images/20190124-git-error-Large-files-detected_2.png" alt="오류 이미지2"></p><p>fatal: refusing to merge unrelated historeis 오류를 인터넷에 찾아보니, 원격저장소와 로컬저장소의 history가 매칭이 안되서 발생하는 오류이다.</p><p>문제가 되던 대용량 파일의 캐쉬를 삭제할때 히스토리가 꼬인것 같다.</p><p>아래 명령어를 이용해서 문제가 발생한 master브랜치에서 히스토리가 엉킨것을 무시하고 강제로 pull을 받았다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>엉킨 히스토리를 무시하고 pull했기 때문에 master 브랜치와 다른 원격저장소의 파일의 충돌이 난다.</p><p>충돌을 모두 해결한뒤 commit, push 를 하면 된다.</p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p>대용량 파일이 없는데도 계속 오류 해결방법<br><a href="https://stackoverflow.com/questions/21168846/cant-remove-file-from-git-commit" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/21168846/cant-remove-file-from-git-commit</a></p><p>히스토리가 영켜 발생하는 문제 해결방법<br><a href="https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;springboot 프로젝트를 github에 push 하던 도중 아래와 같은 error를 만났다.&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
      <category term="Infra" scheme="https://blog.hanumoka.net/categories/Infra/"/>
    
      <category term="Git" scheme="https://blog.hanumoka.net/categories/Infra/Git/"/>
    
      <category term="error" scheme="https://blog.hanumoka.net/categories/Infra/Git/error/"/>
    
    
      <category term="error" scheme="https://blog.hanumoka.net/tags/error/"/>
    
      <category term="github" scheme="https://blog.hanumoka.net/tags/github/"/>
    
      <category term="git" scheme="https://blog.hanumoka.net/tags/git/"/>
    
      <category term="push" scheme="https://blog.hanumoka.net/tags/push/"/>
    
      <category term="large_files" scheme="https://blog.hanumoka.net/tags/large-files/"/>
    
  </entry>
  
  <entry>
    <title>javascript - javascript 객체를 HTML form의 input에 맵핑하기(Tip code)</title>
    <link href="https://blog.hanumoka.net/2019/01/23/javascript-20190123-javascript-object-to-form/"/>
    <id>https://blog.hanumoka.net/2019/01/23/javascript-20190123-javascript-object-to-form/</id>
    <published>2019-01-23T04:37:32.000Z</published>
    <updated>2019-04-10T15:08:00.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>웹 개발하다보면, 흔하게 해야 하는 Javascript 객체를 HTML의 form 내부의 input에 맵핑하는 함수이다.</p><p>javascript공부를 게을리해 Jquery만 사용하다보니, 이런것 하나 짜는데 한 세월이다.</p><p>반성하자.</p><p>아래 함수는 javascript 객체의 프로퍼티명과 일치하는 name을 갖는 input태그를 form에서 찾아 값을 맵핑하는 함수이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//자바스크립트 객체를 html에 맵핑, formId: html form id string, paramObj : javascript 객체</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFormbyObjcet</span>(<span class="params">formId, paramObj</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> frm_element = <span class="built_in">document</span>.getElementById(formId);</span><br><span class="line">        <span class="keyword">var</span> inputListObj = frm_element.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> paramObj)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(paramObj[index]);</span><br><span class="line">            <span class="keyword">if</span> (inputListObj.hasOwnProperty(index)) &#123;</span><br><span class="line">               inputListObj[index].value = paramObj[index];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//__for</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//__setFormbyObjcet</span></span><br></pre></td></tr></table></figure><p><img src="/images/20190123-javascript-object-to-form_1.png" alt="hansontable grid에 특정 row 선택시 form맵핑에 적용해보았다."></p><h1 id="수정1-input-type-별로-맵핑하기"><a class="header-anchor" href="#수정1-input-type-별로-맵핑하기">¶</a>수정1 - input type 별로 맵핑하기</h1><p>음 조금 이상하다. 위에서 getElementsByTagName(‘input’)에서 input type =‘image’ 엘리먼트는 가져오지 못한다.<br>그래서 소스를 아래처럼 수정했다.</p><p>form document를 가져올때 document.forms로 가져오게 수정했다.</p><p>input type이 text가 아닌 image인경우 값을 src에 맵핑하게 수정했다.</p><p>크흠 javascript 책을 다시 봐야겠다. 기억이 한개도 안나네…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//자바스크립트 객체를 html에 맵핑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFormbyObjcet</span>(<span class="params">formId, paramObj</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> frm_element = <span class="built_in">document</span>.forms[formId].getElementsByTagName(<span class="string">"input"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> paramObj)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (frm_element.hasOwnProperty(index)) &#123;</span><br><span class="line">           <span class="keyword">if</span>(frm_element[index].type === <span class="string">"text"</span>)&#123;</span><br><span class="line">            frm_element[index].value = paramObj[index];</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(frm_element[index].type === <span class="string">"image"</span>)&#123;</span><br><span class="line">            frm_element[index].src = paramObj[index];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;<span class="comment">//__if</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//__for</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//__setFormbyObjcet</span></span><br></pre></td></tr></table></figure><p><img src="/images/20190123-javascript-object-to-form_2.png" alt="수정1 코드 적용 결과"></p><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;웹 개발하다보면, 흔하게 해야 하는 Javascript 객체를 HTML의 form 내부의 input에 맵핑하는 함수이다.&lt;/p
      
    
    </summary>
    
      <category term="Web" scheme="https://blog.hanumoka.net/categories/Web/"/>
    
      <category term="Javascript" scheme="https://blog.hanumoka.net/categories/Web/Javascript/"/>
    
    
      <category term="javascript" scheme="https://blog.hanumoka.net/tags/javascript/"/>
    
      <category term="object" scheme="https://blog.hanumoka.net/tags/object/"/>
    
      <category term="HTML" scheme="https://blog.hanumoka.net/tags/HTML/"/>
    
      <category term="form" scheme="https://blog.hanumoka.net/tags/form/"/>
    
      <category term="input" scheme="https://blog.hanumoka.net/tags/input/"/>
    
      <category term="tip" scheme="https://blog.hanumoka.net/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>windows10에 Ubuntu설치하기</title>
    <link href="https://blog.hanumoka.net/2019/01/22/windows-20190122-windows10-install-ubuntu/"/>
    <id>https://blog.hanumoka.net/2019/01/22/windows-20190122-windows10-install-ubuntu/</id>
    <published>2019-01-21T19:17:16.000Z</published>
    <updated>2019-04-10T15:08:01.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>Windows10에서 docker를 사용하기 위해 docker for windows를 설치해서 사용중이다.</p><p>나름 불편함 없이 쓰고 있었지만, 역시나 docker가 ubuntu커널 기반이라 불편한 점이 생길수 밖에 없었다.</p><p>그것은 docker에서 컨테이너의 데이터를 영속적으로 관리하는 volume을 접근하는것이 어려웠다.</p><p>docker for windows에서 docker create volume으로 volume을 생성했는데, 대체 이것이 어디에 있는지 찾을 수가 없었다.</p><p><a href="https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes</a></p><p>위 링크를 보니 ubuntu에서 docker를 사용할 경우 docker volume의 위치를 명확히 파악할 수 있지만, mac의 경우 상당히 번거로운 작업을 해야 한다고 답변이 있었다.</p><p>위 링크를 보고 docker for windows에서 volume 위치를 찾지를 포기하고 그냥 windows10에 Microsoft Store에서 ubuntu를 설치해서 docker를 실행할 예정이다.</p><p>이번글은 windows10에 ubuntu를 설치해서 실행하는 글이다.</p><h1 id="windows10에-microsoft-store에서-ubuntu를-찾아-설치하자"><a class="header-anchor" href="#windows10에-microsoft-store에서-ubuntu를-찾아-설치하자">¶</a>windows10에 Microsoft store에서 ubuntu를 찾아 설치하자</h1><p><img src="/images/20190122-windows10-install-ubuntu_1.png" alt="Microsoft sotre에서 ubuntu설치하기"></p><p>좋은 세상이다. Windows에서 그냥 우분트를 다운로드 해서 설치할수가 있다니, 위 이미지처럼 ubuntu다운받아서 설치하면 된다.</p><p>그러나 정작 실행해보니 다음과 같은 오류와 ubuntu실행이 안된다.</p><p><img src="/images/20190122-windows10-install-ubuntu_2.png" alt="오류내용: wslregisterdistribution failed with error: 0x8007019e"></p><p>구글신에게 여쭤보니 Windows의 리눅스 기능이 비활성화 되어 있어서 발생하는 오류였다.</p><p><img src="/images/20190122-windows10-install-ubuntu_3.png" alt="Windows 기능에서 Linux용 Windows 하위 시스템 항목을 활성화하고 저장하자."></p><p>위 설정을 하고 리부팅을 하면 ubuntu실행을 해보자.</p><p><img src="/images/20190122-windows10-install-ubuntu_4.png" alt="windows ubuntu실행 확인"></p><p>위 처럼 동작을 확인 할 수 있다.</p><p>끝!</p><h1 id="추가"><a class="header-anchor" href="#추가">¶</a>추가</h1><p><a href="https://medium.com/rkttu/wsl%EC%97%90%EC%84%9C-native-docker-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0-ff75b1627a87" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/rkttu/wsl에서-native-docker-실행하기-ff75b1627a87</a></p><p>windows10위에 설치한 unbuntu에 docker를 설치하여 실행하는 것 역시 한계가 있어보인다.</p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;Windows10에서 docker를 사용하기 위해 docker for windows를 설치해서 사용중이다.&lt;/p&gt;
&lt;p&gt;나름 
      
    
    </summary>
    
      <category term="ETC" scheme="https://blog.hanumoka.net/categories/ETC/"/>
    
      <category term="Windows10" scheme="https://blog.hanumoka.net/categories/ETC/Windows10/"/>
    
    
      <category term="windows" scheme="https://blog.hanumoka.net/tags/windows/"/>
    
      <category term="docker" scheme="https://blog.hanumoka.net/tags/docker/"/>
    
      <category term="ubuntu" scheme="https://blog.hanumoka.net/tags/ubuntu/"/>
    
      <category term="windows10" scheme="https://blog.hanumoka.net/tags/windows10/"/>
    
      <category term="설치" scheme="https://blog.hanumoka.net/tags/%EC%84%A4%EC%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>springboot - docker 이미지로 만들어 실행하기</title>
    <link href="https://blog.hanumoka.net/2019/01/21/springBoot-20190121-springboot-deploy-docker/"/>
    <id>https://blog.hanumoka.net/2019/01/21/springBoot-20190121-springboot-deploy-docker/</id>
    <published>2019-01-20T16:54:26.000Z</published>
    <updated>2019-04-10T15:08:01.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>SpringBoot로 생성한 스프링 프로젝트를 docker 이미지로 만들어서 동작시키는 예제를 만들어보겠다.</p><h1 id="준비물"><a class="header-anchor" href="#준비물">¶</a>준비물</h1><p>윈도우에 docker for windows를 설치</p><p>윈도우에 maven 설치</p><p>springboot 웹 프로젝트 준비</p><h1 id="springboot-웹-프로젝트로-jar파일-생성"><a class="header-anchor" href="#springboot-웹-프로젝트로-jar파일-생성">¶</a>Springboot 웹 프로젝트로 jar파일 생성</h1><p>SpringBoot로 생성한 웹 프로젝트를 준비했다.</p><p>그리고 tomcat대신 undertow로 was를 설정했다. 실습을 진행하는데 별 차이는 없다.</p><p>스프링 프로젝트 폴더에서 아래 메이븐 명령어를 실행해서 jar파일을 생성하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>clean : target폴더 내부의 파일들을 지운다.</p><p>pakcage : target폴더에 maven프로젝트를 빌드하고 실행가능한 jar or war로 파일을 패키징한다.</p><p><img src="/images/20190121-springboot-deploy-docker_1.png" alt="mvn clean package 실행결과"></p><p>콘솔에서 빌드 성공과 그 결과인 target폴더 내부에 jar파일을 확인 할 수 있다.</p><p>이번에 springboot를 공부하면서 가장 충격적인 것이, 저 jar 파일이다.</p><p>SpringBoot는 SpringFramework를 감싸고 있는 일종의 자동화된 개발, 실행환경을 제공한다.</p><p>spring-boot-starter-parent가 제공하는 내장 WAS 실행환경이 존재하기 때문에, SpringBoot로 생성한 스프링 웹 프로젝트는 별도의 tomcat과 같은 was없이 단독으로 jar파일로 실행으로 웹 프로젝트를 실행 할 수 있다. 정말 신세계인거 같다.</p><p>생성된 jar 파일을 아래 명령어로 실행하여 스프링 웹 프로젝트가 동작하는지 확인해 보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/nao-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><img src="/images/20190121-springboot-deploy-docker_2.png" alt="프로젝트 폴더에서 명령어를 입력하면 된다."></p><p><img src="/images/20190121-springboot-deploy-docker_3.png" alt="실행을 확인 할 수 있다."></p><p>동작을 확인 했으니, cntr z 키를 눌러 서비스를 종료하자.</p><h1 id="springboot웹-프로젝트의-jar로-도커-이미지-만들기"><a class="header-anchor" href="#springboot웹-프로젝트의-jar로-도커-이미지-만들기">¶</a>SpringBoot웹 프로젝트의 jar로 도커 이미지 만들기</h1><p>이제 생성한 jar파일을 이용해서 도커 이미지를 만들자.</p><p>프로젝트 폴더에 파일명: Dockfile 로 txt파일을 만들자.</p><p>그리고 내용을 아래로 채운다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">ADD target/nao-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line">ENV JAVA_OPTS=""</span><br><span class="line">ENTRYPOINT ["java","-jar","/app.jar"]</span><br></pre></td></tr></table></figure><p>위 Dockfile을 이용하여 Dock Image를 생성할 것이다.</p><p>FROM : 베이스 이미지를 지정한다.<br>ADD : 현재 경로기존의 jar파일을 복사해서 app.jar파일로 만들어 이미지에 적제한다.<br>ENV : 환경변수<br>ENTRYPOINT : 이미지가 동작하면서 실행시킬 명령어를 입력한다. 결국 이미지가 run 되면 java -jar /app.jar 를 실행하게 된다.</p><p>이제 파일을 생성했으니 아래 명령어로 Dockfile을 이용해서 DockImage를 생성하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --tag hanumoka-nao:0.1 .</span><br></pre></td></tr></table></figure><p>-t옵션을 이용하여 생성하는 이미지의 이름은 hanumoka-nao로 지정한다.</p><p>마지막에 . 를 잊지말자(현제 명령어 실행 위치의 Dockfile을 사용하겠다는 의미이다.)</p><p><img src="/images/20190121-springboot-deploy-docker_4.png" alt="이미지가 생성된 것을 확인"></p><h1 id="생성한-docker-이미지를-실행하여-스프링-웹프로젝트-동작-확인"><a class="header-anchor" href="#생성한-docker-이미지를-실행하여-스프링-웹프로젝트-동작-확인">¶</a>생성한 docker 이미지를 실행하여 스프링 웹프로젝트 동작 확인</h1><p>아래 명령어를 이용하여 방금 생성한 이미지를 실행하자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 58080:58080 hanumoka-nao:0.1</span><br></pre></td></tr></table></figure><p>-p옵션을 이용하여 호스트의 포트와 docker이미지의 포트를 연결해 주자.</p><p><img src="/images/20190121-springboot-deploy-docker_5.png" alt="스프링 프로젝트가 동작하는 것을 확인 할 수 있다."></p><h1 id="마무리"><a class="header-anchor" href="#마무리">¶</a>마무리</h1><p>도커도 잘 모르고, 스프링 부트도 잘 모르니 여기저기에서 막히는 부분이 많다.</p><p>springboot를 보니 docker로 이미지 생성을 위한 전용 jar도 제공하는 듯하다.</p><p>흠, 지금 고민이 되는 부분은 docker에 올린 스프링 프로젝트에서 생성하는 로그파일을 볼수가 없다는 것이다.</p><p>뭔가 방법이 있을거 같은데…</p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="http://tech.cloudz-labs.io/posts/docker/docker-start/" rel="external nofollow noopener noreferrer" target="_blank">http://tech.cloudz-labs.io/posts/docker/docker-start/</a></p><p><a href="http://wonwoo.ml/index.php/post/268" rel="external nofollow noopener noreferrer" target="_blank">http://wonwoo.ml/index.php/post/268</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;SpringBoot로 생성한 스프링 프로젝트를 docker 이미지로 만들어서 동작시키는 예제를 만들어보겠다.&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="SpringBoot" scheme="https://blog.hanumoka.net/categories/Programing/SpringBoot/"/>
    
    
      <category term="spring" scheme="https://blog.hanumoka.net/tags/spring/"/>
    
      <category term="docker" scheme="https://blog.hanumoka.net/tags/docker/"/>
    
      <category term="springboot" scheme="https://blog.hanumoka.net/tags/springboot/"/>
    
      <category term="dockfile" scheme="https://blog.hanumoka.net/tags/dockfile/"/>
    
  </entry>
  
  <entry>
    <title>springboot-mobile클라이언트 구별하기</title>
    <link href="https://blog.hanumoka.net/2019/01/09/springBoot-20190109-springboot-mobile/"/>
    <id>https://blog.hanumoka.net/2019/01/09/springBoot-20190109-springboot-mobile/</id>
    <published>2019-01-09T13:04:45.000Z</published>
    <updated>2019-04-10T15:08:01.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>스프링에서 리퀘스트를 요청하는 클라이언트가 desktop인지 mobile인지 등을 구별하는 내용을 정리한다.<br>데스크탑 브라우저의 요청은 데스크탑용 뷰를, 모바일인 브라우저의 요청에는 모바일용 뷰를 응답하는 예제이다.</p><h1 id="주의"><a class="header-anchor" href="#주의">¶</a>주의</h1><p>예제는 spring boot 2버전이다.<br>사용할 라이브러리는 spring-mobile-starter 라는 라이브러리인데, 이 라이브러리는 springboot 2.x 버전이 되면서 deprecated가 되어 자동으로 버전관리가 되지 않는다.</p><p>이 예제는 springboot2.x 버전에서 spring-mobile-starter를 강제로 주입해서 사용하고 있다.<br>현재 springboot2.x에서 spring-mobile-starter를 대체하는 라이브러리나 기술을 확인하지 못하고 있다.<br>아시는분 댓글좀…</p><h1 id="라이브러리-추가-및-설정"><a class="header-anchor" href="#라이브러리-추가-및-설정">¶</a>라이브러리 추가 및 설정</h1><p>앞서 말했듯이 실습환경은 java8, springboot2, spring5, maven 환경이다.</p><p><strong>pom.xml</strong> 아래 내용을 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.mobile<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-mobile-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot 1.5버전 대에서는 자동으로 버전관리가 되지만, springboot 2버전부터 제외된 라이브러리라 강제로 적용하였다.</p><p><strong>application.profiles</strong> 파일에 아래 내용을 추가하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.mobile.devicedelegatingviewresolver.enabled:true</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix=normal/</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/</span><br></pre></td></tr></table></figure><p>맨위 설정은 요청의 종류에 따라서 뷰 리졸버의 접두어로 경로를 붙이는 것을 활성화 하는 것이다.<br>그리고 그 아래부터 normal 요청에는 뷰 리졸버의 앞에 normal이라는 경로를 추가한다는 것이다.<br>그 아래는 mobile인경우, 또 그 아래는 tablet인 경우의 설정이다.</p><h1 id="controller-설정"><a class="header-anchor" href="#controller-설정">¶</a>controller 설정</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mobile.device.Device;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mobile.device.DeviceUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HomeController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value=&#123;<span class="string">"/"</span>, <span class="string">"/index"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Device device, Model model, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Device deviceFromRequest = DeviceUtils.getCurrentDevice(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (device.isMobile()) &#123;</span><br><span class="line">            logger.info(<span class="string">"Hello mobile user!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (device.isTablet()) &#123;</span><br><span class="line">            logger.info(<span class="string">"Hello tablet user!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"Hello desktop user!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"device: "</span> + device);</span><br><span class="line">        logger.info(<span class="string">"device form request: "</span> + deviceFromRequest);</span><br><span class="line">        logger.info(<span class="string">"device platform: "</span> + device.getDevicePlatform());</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, <span class="string">"hanumoka"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컨트롤러의 device 객체를 통해서 클라이언트의 종류를 확인 할 수 있다.<br>내부적으로 http 요청 헤더의 user agent 값을 통해서 구별한다.<br>application.properties의 설정으로 인해 http 요청에 따라 다른 경로의 index.html을 응답하게 된다.<br>예를 들어 일반 컴퓨터의 브라우저에서 위 컨트롤러에 접근한다면 /normal/index.html이<br>모바일 브라우저에서 위 컨트롤러로 접근한다면 /mobile/index.html이<br>테블릿 브라우저에서 위 컨트롤러로 접근한다면 /tablet/index.html을 응답하게 된다.</p><h1 id="뷰-파일-구성"><a class="header-anchor" href="#뷰-파일-구성">¶</a>뷰 파일 구성</h1><p><img src="/images/20190109-springboot-mobile_1.png" alt="폴더구조와 html파일들"></p><p>nomal, mobile, tablet 폴더를 만들고 그 내부의 index.html 파일을 생성했다.<br>참고로 이 예제는 thymeleaf가 적용되어있지만, 무시해도 상관 없다.</p><h1 id="실행결과"><a class="header-anchor" href="#실행결과">¶</a>실행결과</h1><p>간단하게 크롬브라우저에서 테스트 했다.</p><p><img src="/images/20190109-springboot-mobile_2.png" alt="일반 브라우저에서 접근"></p><p><img src="/images/20190109-springboot-mobile_3.png" alt="모바일 브라우저에서 접근 "></p><p><img src="/images/20190109-springboot-mobile_4.png" alt="테블릿 브라우저에서 접근"></p><h1 id="spring-mobile-starter-테스트-예제"><a class="header-anchor" href="#spring-mobile-starter-테스트-예제">¶</a>spring-mobile-starter 테스트 예제</h1><p>참고로 spring-mobile-starter가 적용된 컨트롤러 테스트 코드를 추가한다.<br>주의 할 점은 WebMvcTest 어노테이션으로는 Device 객체를 생성하지 못해 테스트를 할 수가 없다.<br>SpringBootTest, AutoConfigureMockMvc 어노테이션으로 테스트를 할 수 있다.<br>그리고 요청의 header의 user agent 값을 변경하여 결과를 확인 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hanumoka.portfolio.nao.web.HomeController;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.core.StringContains.containsString;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="comment">//@WebMvcTest(HomeController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">"/"</span>)</span><br><span class="line">                .header(<span class="string">"user-agent"</span>, <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36"</span>)</span><br><span class="line">                .accept(MediaType.TEXT_HTML))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(view().name(<span class="string">"index"</span>))</span><br><span class="line">                .andExpect(model().attribute(<span class="string">"name"</span>, is(<span class="string">"hanumoka"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        mockMvc.perform(get("/")</span></span><br><span class="line"><span class="comment">                .header("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36")</span></span><br><span class="line"><span class="comment">                .accept(MediaType.TEXT_HTML))</span></span><br><span class="line"><span class="comment">                .andExpect(view().name(containsString("desktop")))</span></span><br><span class="line"><span class="comment">                .andExpect(status().isOk())</span></span><br><span class="line"><span class="comment">                .andDo(print())</span></span><br><span class="line"><span class="comment">                .andExpect(view().name("index"))</span></span><br><span class="line"><span class="comment">                .andExpect(model().attribute("name", is("hanumoka")));*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="https://stackoverrun.com/ko/q/10317311" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverrun.com/ko/q/10317311</a></p><p>springboot2.0 spring mobile 디펜던시 <a href="https://stackoverflow.com/questions/53133226/how-to-use-device-resolver-for-spring-boot-2-00" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/53133226/how-to-use-device-resolver-for-spring-boot-2-00</a></p><p><a href="http://cpdev.tistory.com/50" rel="external nofollow noopener noreferrer" target="_blank">http://cpdev.tistory.com/50</a></p><p><a href="http://codingdojang.com/scode/297" rel="external nofollow noopener noreferrer" target="_blank">http://codingdojang.com/scode/297</a></p><p><a href="https://www.slipp.net/questions/439" rel="external nofollow noopener noreferrer" target="_blank">https://www.slipp.net/questions/439</a></p><p><a href="http://arahansa.github.io/docs_spring/device.html" rel="external nofollow noopener noreferrer" target="_blank">http://arahansa.github.io/docs_spring/device.html</a></p><p><a href="https://medium.com/@hun/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-bf6e03de29fc" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@hun/스프링-모바일-사용하기-bf6e03de29fc</a></p><p><a href="https://coding-factory.tistory.com/32" rel="external nofollow noopener noreferrer" target="_blank">https://coding-factory.tistory.com/32</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;스프링에서 리퀘스트를 요청하는 클라이언트가 desktop인지 mobile인지 등을 구별하는 내용을 정리한다.&lt;br&gt;
데스크탑 
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="SpringBoot" scheme="https://blog.hanumoka.net/categories/Programing/SpringBoot/"/>
    
    
      <category term="spring" scheme="https://blog.hanumoka.net/tags/spring/"/>
    
      <category term="springboot" scheme="https://blog.hanumoka.net/tags/springboot/"/>
    
      <category term="mobile" scheme="https://blog.hanumoka.net/tags/mobile/"/>
    
      <category term="device" scheme="https://blog.hanumoka.net/tags/device/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot - thymeleaf layout dialect(tympeleaf 레이아웃 적용하기)</title>
    <link href="https://blog.hanumoka.net/2019/01/07/springBoot-20190107-springboot-thymeleaf-layout-dialect/"/>
    <id>https://blog.hanumoka.net/2019/01/07/springBoot-20190107-springboot-thymeleaf-layout-dialect/</id>
    <published>2019-01-06T22:01:02.000Z</published>
    <updated>2019-04-10T15:08:01.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>예전에 spring4 레거시 프로젝트 + xml 설정환경에서 tymeleaf 템플릿 엔진과 thymeleaf layout dialect(tymeleaf 레이아웃)를 적용했었다.<br>이번에는 springboot에 thymeleaf와 thymeleaf layout dialect를 적용해 보겠다.</p><p>개발환경: java8, springboot2, spring5, maven</p><h1 id="라이브러리-추가"><a class="header-anchor" href="#라이브러리-추가">¶</a>라이브러리 추가</h1><p>pom.xml에 thymeleaf와 thymeleaf layout dialect를 추가하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;version&gt;2.3.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>thymeleaf는 thymeleaf템플릿 엔진을 사용하기 위한 기초 라이브러리이며, thymeleaf-layout-dialect는 thymeleaf템플릿 엔진 기반 레이아웃을 구성할때 필요한 라이브러리이다.<br>자애로운 spring-boot-starter-parent께서 위 둘의 버전관리를 자동으로 해주시니, version을 생략해도 된다.<br>본인의 경우 2.1.1 버전이 적용되었다.</p><h1 id="html파일로-레이아웃-구성"><a class="header-anchor" href="#html파일로-레이아웃-구성">¶</a>html파일로 레이아웃 구성</h1><p><img src="/images/20190107-springboot-thymeleaf-layout-dialect_1.png" alt="폴더구조와 html파일들"></p><p>springboot web 프로젝트에서 기본적으로 resources/templates에서 뷰를 찾는다.<br>template/layout/default.html은 thymeleaf의 레이아웃이 되는 파일이다.<br>template/fragments/config.html template/fragments/footer.html template/fragments/header.html 파일은 defaout.html 레이아웃의 내부를 구성하는 부품 화면이 된다.<br>template/index.html은 핵심인 contents가 되는 페이지이다.</p><hr><p><strong>default.html</strong></p><p>이 파일이 thymeleaf 레이아웃을 잡아주는 핵심파일이 된다.<br>head th:replace는 head 영역의 부속 페이지를 말한다. 부속페이지는 fragments/config(html을 생략한다.) 그리고 그 파일의 configFragment 태그를 잘라와 사용한다는 의미이다.<br>header footer도 비슷한 의미이다.<br>layout이 되는 html의 태그는 xmlns:layout=&quot;<a href="http://www.ultraq.net.nz/thymeleaf/layout" rel="external nofollow noopener noreferrer" target="_blank">http://www.ultraq.net.nz/thymeleaf/layout</a>&quot;를 삽입해야 한다.<br>layout:fragment=“content” 부분은 서버의 요청별로 달라지는 컨텐츠 페이지가 된다.(index.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lagn</span>=<span class="string">"ko"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"fragments/config :: configFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"fragments/header :: headerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:replace</span>=<span class="string">"fragments/footer :: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>config.html</strong></p><p>head의 공통적인 부분을 담당하는 페이지이다.<br>css, js 파일따위를 관리 할 수 있다.<br>특의한 점은 &lt;th:block layout:fragment=“css”&gt;&lt;/th:block&gt; &lt;th:block layout:fragment=“script”&gt;&lt;/th:block&gt; 인데, 레이아웃의 content가 되는 index.html에 작성된 css나, js를 가져와서 적용하는 부분이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"configFragment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 공통으로 쓰이는 css파일을넣는다.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 컨텐츠페이지의 CSS 영역이 들어감 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 공통으로 쓰이는 css파일을넣는다.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-2.2.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 컨텐츠페이지의 스크립트 영역이 들어감 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>footer.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"footerFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid gold"</span>&gt;</span></span><br><span class="line">        Footer영역입니다.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>header.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:fragment</span>=<span class="string">"headerFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid green"</span>&gt;</span></span><br><span class="line">        header.html 입니다.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- &lt;a th:href="@&#123;/index&#125;"&gt;index 페이지 이동&lt;/a&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>index.html</strong></p><p>컨텐츠가 되는 index.html 페이지이다.<br>html 태그의 어트리뷰트가 다름을 주의하자.<br>layout:decorator 로 이 페이지가 렌더링 될때 사용살 layout을 지정한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout:decorator</span>=<span class="string">"layout/default"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html 고유 CSS 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html 고유 스크립트 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">layout:fragment</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red"</span>&gt;</span></span><br><span class="line">        index.html 입니다.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="실행결과"><a class="header-anchor" href="#실행결과">¶</a>실행결과</h1><p><img src="/images/20190107-springboot-thymeleaf-layout-dialect_2.png" alt="springboot thymeleaf 레이아웃 적용 결과"></p><p>간단하게 동작을 확인할 수 있다.<br>spring개발팀이 밀고 있어써 그런지 thymeleaf의 설정법은 기타 템플릿 엔진보다 간편한것 같다.</p><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;예전에 spring4 레거시 프로젝트 + xml 설정환경에서 tymeleaf 템플릿 엔진과 thymeleaf layout di
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="SpringBoot" scheme="https://blog.hanumoka.net/categories/Programing/SpringBoot/"/>
    
    
      <category term="spring" scheme="https://blog.hanumoka.net/tags/spring/"/>
    
      <category term="springboot" scheme="https://blog.hanumoka.net/tags/springboot/"/>
    
      <category term="tymeleaf" scheme="https://blog.hanumoka.net/tags/tymeleaf/"/>
    
      <category term="tymeleaf_layout" scheme="https://blog.hanumoka.net/tags/tymeleaf-layout/"/>
    
      <category term="tymeleaf_layout_dialect" scheme="https://blog.hanumoka.net/tags/tymeleaf-layout-dialect/"/>
    
  </entry>
  
  <entry>
    <title>java - POJO vs Java Bean</title>
    <link href="https://blog.hanumoka.net/2019/01/06/java-20190106-java-pojo-vs-bean/"/>
    <id>https://blog.hanumoka.net/2019/01/06/java-20190106-java-pojo-vs-bean/</id>
    <published>2019-01-05T23:18:07.000Z</published>
    <updated>2019-04-10T15:08:00.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>Java 개발을 하다보면, 누구나 자동으로 접할수 밖에 없는 단어라면 아마도 POJO, Bean 이라는 것이 있다.<br>대충 보면 이 둘의 의미가 비슷한거 같기도하고, 아닌거 같기도 하다.<br>이번에 그 차이를 한번 정리해 본다.</p><h1 id="pojo란"><a class="header-anchor" href="#pojo란">¶</a>POJO란</h1><p>POJO란 Plain Old Java Object의 약자로,말 그대로 평범하고 오래된 Java Object라는 의미로, 순수한 Java Object를 의미한다.<br>2000년 9월 세미나에서 마틴파울러옹이 J2EE를 까면서 내세운 단어이다.<br>과거 EJB, Strust같은 프레임워크는 비지니스 로직을 구현하기 위한 클래스를 코딩할 때 프레임워크의 특정 인터페이스등의 상속을 강요하였고, 그 결과 비지니스 로직을 코딩해야할 시간에 상속을 구현하기 위한 관용적인 코딩작업을 불필요하게 해야 했었다.<br>이렇게 프레임워크가 비지니스 로직에 특정 프레임워크의 기술에 관련된 코딩을 강제하는 것을, 침투적인 프레임워크라 하는데 무의미하고 관용적인 코딩의 반복외에도 이식성등 여러가지 문제를 가지고 있다.</p><p>객체지향의 가장 중요한 개념중 하나의 느슨한 의존관계를 역행하는 이런 침투적인 프레임워크의 문제점을 강조하기 위해 마틴파울러옹은 POJO라는 말을 만들었고 이 POJO라는 말은 Java 진영외에도 다양한 프로그래밍 진영에서 사용하게 되었다.</p><p>POJO른 조금 구체적으로 설명하자면, 특정 기술에 종속되지 않은 순수한 JAVA Object라고 말할 수 있겠다.</p><h1 id="java-bean-이란"><a class="header-anchor" href="#java-bean-이란">¶</a>JAVA Bean 이란</h1><p>Java bean? Java 콩? 이게 무슨 말일까?<br>Java Bean은 데이터를 표현하기 위한 Java 클래스를 만들때의 규약이다.</p><p>아래 규칙을 지킨 Java 클래스는 Java bean이라고 부른다.</p><ul><li>모든 클래스의 프로퍼티는 private이며 getter, setter 메소드로 제어한다.</li><li>인자가 없는 public 생성자가 있어야 한다.</li><li>Serializable 인터페이스를 구현해야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serailVersionUID = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountVO</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java bean 규약은 Java EE 프레임워크에서 데이터를 저장할 Java 클래스를 만들때 제안하는 일종의 규약이다.<br>Java bean 규약은 jdk1.1부터 시작되었으며, Java 진영의 다양한 시스템에서 Java 클래스로 데이터를 공유를 위한 표준으로 사용되고 있다.</p><h1 id="pojo와-java-bean은-같다"><a class="header-anchor" href="#pojo와-java-bean은-같다">¶</a>POJO와 JAVA BEAN은 같다?</h1><p>Java bean은 POJO이다.<br>그리나 POJO는 Java bena이 아니다.</p><p>POJO는 java bean 보다 범주가 더 넓은 개념이다.</p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="https://searchmicroservices.techtarget.com/answer/What-is-a-Java-Bean-Why-it-is-useful-in-J2EE" rel="external nofollow noopener noreferrer" target="_blank">https://searchmicroservices.techtarget.com/answer/What-is-a-Java-Bean-Why-it-is-useful-in-J2EE</a><br><a href="http://www.avajava.com/tutorials/lessons/what-is-a-javabean.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.avajava.com/tutorials/lessons/what-is-a-javabean.html</a><br><a href="https://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly</a><br><a href="https://stackoverflow.com/questions/12517905/what-is-java-pojo-class-java-bean-normal-class" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/12517905/what-is-java-pojo-class-java-bean-normal-class</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;Java 개발을 하다보면, 누구나 자동으로 접할수 밖에 없는 단어라면 아마도 POJO, Bean 이라는 것이 있다.&lt;br&gt;
대
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="Java" scheme="https://blog.hanumoka.net/categories/Programing/Java/"/>
    
    
      <category term="java" scheme="https://blog.hanumoka.net/tags/java/"/>
    
      <category term="pojo" scheme="https://blog.hanumoka.net/tags/pojo/"/>
    
      <category term="bean" scheme="https://blog.hanumoka.net/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-ApplicationRunner, CommandLineRunner(스프링부트 구동시 동작시킬 코드실행)</title>
    <link href="https://blog.hanumoka.net/2019/01/04/springBoot-20190104-spring-applicationRunner/"/>
    <id>https://blog.hanumoka.net/2019/01/04/springBoot-20190104-spring-applicationRunner/</id>
    <published>2019-01-04T06:18:41.000Z</published>
    <updated>2019-04-10T15:08:01.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>Spring boot 어플리케이션을 시작시키면서 동시에 동작시킬 코드가 있다면, ApplicationRunner와 CommandLineRunner 인터페이스를 구현한 bean을 사용하면 된다.</p><h1 id="사용법-예시"><a class="header-anchor" href="#사용법-예시">¶</a>사용법 예시</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hanumoka.portfolio.nao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============ApplicationRunner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApplicationRunner2</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============ApplicationRunner2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============CommandLineRunner1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두 인터페이스 모두 함수형 인터페이스이며, 구현한 run메소드의 파라미터인 args를 통해서 springboot어플리케이션 실행시 전달받은 파라미터(Program arguemnts) 값을 읽어올수 있다.<br>VM Opions값은 읽어 올수 없다.</p><p><strong>실행결과</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.<span class="number">1</span>.<span class="number">1</span>.RELEASE)</span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">24</span>.<span class="number">445</span>  INFO <span class="number">14840</span> --- [           main] hanumoka.portfolio.nao.NaoApplication    : Starting NaoApplication on DESKTOP-EU9BLID with PID <span class="number">14840</span> (C:\Users\amagr\Desktop\Project\nao\target\classes started by amagr <span class="keyword">in</span> C:\Users\amagr\Desktop\Project\nao)</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">24</span>.<span class="number">449</span>  INFO <span class="number">14840</span> --- [           main] hanumoka.portfolio.nao.NaoApplication    : No active profile <span class="built_in">set</span>, falling back to default profiles: default</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">519</span>  WARN <span class="number">14840</span> --- [           main] io.undertow.websockets.jsr               : UT026010: Buffer pool was <span class="keyword">not</span> <span class="built_in">set</span> on WebSocketDeploymentInfo, the default pool will be used</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">539</span>  INFO <span class="number">14840</span> --- [           main] io.undertow.servlet                      : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">539</span>  INFO <span class="number">14840</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed <span class="keyword">in</span> <span class="number">1043</span> ms</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">729</span>  INFO <span class="number">14840</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">931</span>  INFO <span class="number">14840</span> --- [           main] org.xnio                                 : XNIO version <span class="number">3</span>.<span class="number">3</span>.<span class="number">8</span>.Final</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">940</span>  INFO <span class="number">14840</span> --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version <span class="number">3</span>.<span class="number">3</span>.<span class="number">8</span>.Final</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">988</span>  INFO <span class="number">14840</span> --- [           main] o.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) <span class="number">1290</span> (http) with context <span class="built_in">path</span> ''</span><br><span class="line">포트:<span class="number">1290</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">04</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">25</span>.<span class="number">991</span>  INFO <span class="number">14840</span> --- [           main] hanumoka.portfolio.nao.NaoApplication    : Started NaoApplication <span class="keyword">in</span> <span class="number">1</span>.<span class="number">854</span> seconds (JVM running <span class="keyword">for</span> <span class="number">2</span>.<span class="number">285</span>)</span><br><span class="line">============ApplicationRunner</span><br><span class="line">============CommandLineRunner1</span><br><span class="line">============ApplicationRunner2</span><br></pre></td></tr></table></figure><p>springboot 구동시 시작된 뒤, ApplicationRunner, CommandLineRunner 인터페이스로 구현한 run메소드가 동작하는 것을 확인 할 수 있다.<br>위 처럼, Order어노테이션으로 이들간의 동작 순서를 지정 할 수도 있다.</p><h1 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h1><p><a href="https://dzone.com/articles/spring-boot-applicationrunner-and-commandlinerunne" rel="external nofollow noopener noreferrer" target="_blank">https://dzone.com/articles/spring-boot-applicationrunner-and-commandlinerunne</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;Spring boot 어플리케이션을 시작시키면서 동시에 동작시킬 코드가 있다면, ApplicationRunner와 Comman
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="SpringBoot" scheme="https://blog.hanumoka.net/categories/Programing/SpringBoot/"/>
    
    
      <category term="Spring" scheme="https://blog.hanumoka.net/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="https://blog.hanumoka.net/tags/SpringBoot/"/>
    
      <category term="ApplicationRunner" scheme="https://blog.hanumoka.net/tags/ApplicationRunner/"/>
    
      <category term="CommandLineRunner" scheme="https://blog.hanumoka.net/tags/CommandLineRunner/"/>
    
  </entry>
  
  <entry>
    <title>springboot 임베디드 undertow 설정</title>
    <link href="https://blog.hanumoka.net/2019/01/04/springBoot-20190104-springboot-undertow/"/>
    <id>https://blog.hanumoka.net/2019/01/04/springBoot-20190104-springboot-undertow/</id>
    <published>2019-01-04T05:28:19.000Z</published>
    <updated>2019-04-10T15:08:01.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="undertow-언더토우"><a class="header-anchor" href="#undertow-언더토우">¶</a>undertow(언더토우)</h1><p>undertow는 Tomcat, jetty와 같은 웹서버이다.<br>JBoss 진영의 새로 도입된 웹서버로, 웹서버와 서블릿 컨테이너 기능을 제공한다.<br>Java언어로 작성되었다.<br>초경량 웹서버라 가볍다.<br>NON-Blocking API와 Bloking API 모두 지원한다.<br>Apache License, version 2.0을 따르는 오픈소스이다.<br>Java Servlet 3.1과 WebSocker을 구현하고 http upgrade를 지원한다.</p><p><a href="https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/" rel="external nofollow noopener noreferrer" target="_blank">https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/</a></p><p>위 글에서 tomcat, jetty, undertow의 성능을 단순 비교한 내용이 있는데, 솔직히 성능에서 차이는 별로 없었다.(물론 단순한 테스트이긴 함)<br>undertow가 tomcat,jetty에 비해 약간 좋은 성능을 보여주기는 한다.</p><p>tomcat과 jetty와 달리 언더토우는 default로 HTTP Persistent connections(HTTP persistent connection, also called HTTP keep-alive, or HTTP connection reuse)를 응답헤더에 포함하고 있다.(http2가 나온 마당에 중요한 특이점은 아니다.)</p><p>springboot에서 undertow사용시 https설정이 tomcat사용시 https설정보다 훨씬 간편하다.</p><h1 id="springboot에서-undertow설정"><a class="header-anchor" href="#springboot에서-undertow설정">¶</a>springboot에서 undertow설정</h1><p>간단하다. default 설정인 tomcat을 제외시키고 undertow를 추가해주면 된다.<br>내 경우 maven 프로젝트이므로 pom.xml의 dependency를 아래처럼 수정해면 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>exclusion을 통해 default tomcat 임베드 서블릿컨테이너를 제외시키지 않으면, undertow를 추가한다 하더라도 tomcat으로 실행이 된다.<br>반드시 제외하자.</p><p><img src="/images/20190104-springboot-undertow_1.png" alt="실행결과"></p><h3 id="참고자료"><a class="header-anchor" href="#참고자료">¶</a>참고자료</h3><p><a href="http://www.opennaru.com/jboss/undertow-is-web-server-in-wildfly-and-jboss-eap7/" rel="external nofollow noopener noreferrer" target="_blank">http://www.opennaru.com/jboss/undertow-is-web-server-in-wildfly-and-jboss-eap7/</a></p><p><a href="https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/" rel="external nofollow noopener noreferrer" target="_blank">https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/</a></p><p><a href="http://undertow.io/" rel="external nofollow noopener noreferrer" target="_blank">http://undertow.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;undertow-언더토우&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#undertow-언더토우&quot;&gt;¶&lt;/a&gt;undertow(언더토우)&lt;/h1&gt;
&lt;p&gt;undertow는 Tomcat, jetty와 같은 웹서버이다.&lt;br&gt;
JBo
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="SpringBoot" scheme="https://blog.hanumoka.net/categories/Programing/SpringBoot/"/>
    
    
      <category term="spring" scheme="https://blog.hanumoka.net/tags/spring/"/>
    
      <category term="springBoot" scheme="https://blog.hanumoka.net/tags/springBoot/"/>
    
      <category term="undertow" scheme="https://blog.hanumoka.net/tags/undertow/"/>
    
  </entry>
  
  <entry>
    <title>intelliJ Comunity에 SpringBoot 프로젝트 생성하기</title>
    <link href="https://blog.hanumoka.net/2019/01/04/intelliJ-20190104-intelliJ-Comunity-springboot-settting/"/>
    <id>https://blog.hanumoka.net/2019/01/04/intelliJ-20190104-intelliJ-Comunity-springboot-settting/</id>
    <published>2019-01-04T01:25:23.000Z</published>
    <updated>2019-04-10T15:08:00.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>스프링 개발을 해오면서, 주로 전자정부프레임워크, 이클립스, STS등을 사용해 왔었다.<br>intelliJ ide가 넘사벽으로 좋다고 이야기는 많이 들어 봤으나, 유료인데다 월단위 라이센스라 선뜻 당기지 않았다.</p><p>그러던 와중 인프런 인강에서 springboot 프로젝트를 intelliJ comunity에서도 개발할수 있는 방법을 알게되어 이렇게 정리한다.<br>intellyJ Comunity 버전이라고 무료버전이 있긴한데, 자체적으로 스프링프로젝트 생성을 제공하지 않는 것을 극복할수 있는 것이다.</p><h1 id="intellij-comunity-다운로드"><a class="header-anchor" href="#intellij-comunity-다운로드">¶</a>intelliJ comunity 다운로드</h1><p><a href="https://www.jetbrains.com/idea/download/#section=windows" rel="external nofollow noopener noreferrer" target="_blank">https://www.jetbrains.com/idea/download/#section=windows</a></p><p>위 페이지로 가서 Community를 다운로드 받으면 된다.</p><p><img src="/images/20190104-intelliJ-Comunity-springboot-settting_1.png" alt="역시 무료버전이라 기능이 많이 제한되어 있다."></p><p>아 물론 기존에 java가 설치와 환경변수 설정이 선행되어야 한다.<br>그리고 springboot 프로젝트를 위해 jdk8버전 이상이 필요하다.</p><h1 id="spring-initializr에서-springboot-프로젝트-생성"><a class="header-anchor" href="#spring-initializr에서-springboot-프로젝트-생성">¶</a>Spring initializr에서 SpringBoot 프로젝트 생성</h1><p>여기서 무료버전이라 intelliJ에서 제공하지 않는 springboot프로젝트를 대신 생성해주는 Spring initializr가 필요하다.</p><p><a href="https://start.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">https://start.spring.io/</a></p><p>위 주소가 Spring initializr, 즉 springboot 프로젝트를 생성해주는 곳이다.</p><p><img src="/images/20190104-intelliJ-Comunity-springboot-settting_2.png" alt="Spring initializr"></p><p>입맛에 맞게 설정한뒤, generate project 버튼을 클릭하면 zip 파일을 하나 내려받게 된다.</p><p>그 파일을 압축해제후 intelliJ comunity 버전으로 열면된다.</p><p><img src="/images/20190104-intelliJ-Comunity-springboot-settting_3.png" alt="실행결과"></p><p>maven 디펜던시를 다 받고 난뒤 run을 하게 되면 springboot 프로젝트가 정상적으로 동작하는 것을 확인 할 수 있다.</p><p>끝!</p><h3 id="related-posts"><a class="header-anchor" href="#related-posts">¶</a>Related Posts</h3><p><a href="https://start.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">https://start.spring.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;스프링 개발을 해오면서, 주로 전자정부프레임워크, 이클립스, STS등을 사용해 왔었다.&lt;br&gt;
intelliJ ide가 넘사벽
      
    
    </summary>
    
      <category term="Tool" scheme="https://blog.hanumoka.net/categories/Tool/"/>
    
      <category term="IntelliJ" scheme="https://blog.hanumoka.net/categories/Tool/IntelliJ/"/>
    
    
      <category term="IntelliJ" scheme="https://blog.hanumoka.net/tags/IntelliJ/"/>
    
      <category term="springBoot" scheme="https://blog.hanumoka.net/tags/springBoot/"/>
    
      <category term="SpringInitializr" scheme="https://blog.hanumoka.net/tags/SpringInitializr/"/>
    
  </entry>
  
  <entry>
    <title>Widnows10 openJDK 설치(JUlU)</title>
    <link href="https://blog.hanumoka.net/2019/01/02/java-20190102-java-install-openjdk-10-julu/"/>
    <id>https://blog.hanumoka.net/2019/01/02/java-20190102-java-install-openjdk-10-julu/</id>
    <published>2019-01-02T00:11:55.000Z</published>
    <updated>2019-04-10T15:08:00.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>오라클의 돈독에 개발용 java jdk도 유료화가 결정되었다.<br>Windows 10에 오라클 JDK가 아닌 openjdk를 설치해보자.</p><h1 id="zulu-openjdk-다운로드-하기"><a class="header-anchor" href="#zulu-openjdk-다운로드-하기">¶</a>Zulu openJDK 다운로드 하기</h1><p><a href="https://www.azul.com/downloads/zulu/zulu-windows/" rel="external nofollow noopener noreferrer" target="_blank">https://www.azul.com/downloads/zulu/zulu-windows/</a> 로 이동하자.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_1.png" alt="재밌게도 java의 마지막 공짜 update날짜를 카운팅하고 있다."></p><p><img src="/images/20190102-java-install-openjdk-10-julu_2.png" alt="java6 버전부터 현재 최신 11버전까지 openjdk를 제공한다."></p><p>server용이 아닌 client용으로 원하는 jdk를 다운받자.</p><p>서버용은 zip, 윈도우용은 msi 형태로 jdk가 제공된다.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_3.png" alt="이런식으로 실행하여 설치하면 된다."></p><p>ZULU로 설치할 경우 기존 oracle jdk와 다르기 zulu라는 폴더로 설치가 된다.</p><p>만약 환경변수를 설정할대 이 폴더를 적용해주면 된다.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_4.png" alt="zulu openjdk 환경변수설정"></p><p>JAVA_HOME, path, classpath 환경변수를 zulu폴더 기준으로 잡아주면된다.</p><p><img src="/images/20190102-java-install-openjdk-10-julu_5.png" alt="환경변수를 잡아주면 잘 동작한다."></p><p>끝! 오라클 JDK와 이제 손절해야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
&lt;p&gt;오라클의 돈독에 개발용 java jdk도 유료화가 결정되었다.&lt;br&gt;
Windows 10에 오라클 JDK가 아닌 openjdk
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="Java" scheme="https://blog.hanumoka.net/categories/Programing/Java/"/>
    
    
      <category term="windows10" scheme="https://blog.hanumoka.net/tags/windows10/"/>
    
      <category term="openjdk" scheme="https://blog.hanumoka.net/tags/openjdk/"/>
    
      <category term="zulu" scheme="https://blog.hanumoka.net/tags/zulu/"/>
    
  </entry>
  
  <entry>
    <title>최대공약수 재귀(recursion)함수 feat. 유클리드 호제법</title>
    <link href="https://blog.hanumoka.net/2018/12/28/algorithm-20181228-algorithm-recursion-greatest-common-divisor/"/>
    <id>https://blog.hanumoka.net/2018/12/28/algorithm-20181228-algorithm-recursion-greatest-common-divisor/</id>
    <published>2018-12-27T21:39:06.000Z</published>
    <updated>2019-04-10T15:08:00.330Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC -->autoauto- [들어가기](#들어가기)auto- [마무리](#마무리)autoauto<!-- /TOC --><h1 id="들어가기"><a class="header-anchor" href="#들어가기">¶</a>들어가기</h1><p>인프런에서 무료 알고리즘 강좌를 듣고있다.<br>아 코딩테스트 넘나 어려운것…</p><p>여튼 순환 혹은 재귀함수를 이용하여 최대공약수를 구하는 예제인데, 참으로 신박해서 정리해본다.<br>기원전 300년 전 유클리드라는 아저씨가 유클리드 호제법이라고 최대공약수를 구하는 공식을 만들어 놓으셨다.<br>아래 코드는 그 유클리드 호제법을 이용한 최대공약수를 구하는 예제이다.</p><p><strong>Java 코드</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(gcd(<span class="number">10</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( q == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> gcd(q, p % q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Python 코드</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(p, q)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> q == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(q, p % q)</span><br><span class="line"></span><br><span class="line">result = gcd(<span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">print(<span class="string">'최대공약수:'</span>,result)</span><br></pre></td></tr></table></figure><h1 id="마무리"><a class="header-anchor" href="#마무리">¶</a>마무리</h1><p>이거 알고리즘 보다, 중등수학부터 다시 봐야 할것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;autoauto- [들어가기](#들어가기)auto- [마무리](#마무리)autoauto&lt;!-- /TOC --&gt;
&lt;h1 id=&quot;들어가기&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#들어가기&quot;&gt;¶&lt;/a&gt;들어가기&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Programing" scheme="https://blog.hanumoka.net/categories/Programing/"/>
    
      <category term="Algorithm" scheme="https://blog.hanumoka.net/categories/Programing/Algorithm/"/>
    
    
      <category term="Java" scheme="https://blog.hanumoka.net/tags/Java/"/>
    
      <category term="Python" scheme="https://blog.hanumoka.net/tags/Python/"/>
    
      <category term="recursion" scheme="https://blog.hanumoka.net/tags/recursion/"/>
    
      <category term="Algorithm" scheme="https://blog.hanumoka.net/tags/Algorithm/"/>
    
      <category term="최대공약수" scheme="https://blog.hanumoka.net/tags/%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98/"/>
    
      <category term="호제법" scheme="https://blog.hanumoka.net/tags/%ED%98%B8%EC%A0%9C%EB%B2%95/"/>
    
      <category term="유클리드" scheme="https://blog.hanumoka.net/tags/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C/"/>
    
  </entry>
  
</feed>
