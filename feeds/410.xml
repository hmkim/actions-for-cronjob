<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[LUBANG DEV]]></title><description><![CDATA[Programmer thoughts, stories and ideas.]]></description><link>http://blog.lulab.net/</link><image><url>http://blog.lulab.net/favicon.png</url><title>LUBANG DEV</title><link>http://blog.lulab.net/</link></image><generator>Ghost 2.7</generator><lastBuildDate>Sat, 23 Feb 2019 08:00:21 GMT</lastBuildDate><atom:link href="http://blog.lulab.net/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[ThePeak #01. 안드로이드 개발 환경 구성(macOS) 및 MVVM 패턴]]></title><description><![CDATA[<p>서버 개발자가 서비스를 처음부터 끝까지 만들어보기 위한 프로젝트 <code>The Peak</code>입니다. The Peak는 Vertial social network service 의 컨셉입니다. 간단한 UI를 통해서 서비스 방향과 컨셉을 명확히 하기 위해서 안드로이드 앱을 먼저 개발할 예정입니다. 그 첫 단계로 IDE(Android Studio) 설치과 전체적으로 가져갈 아키텍처를 조사하였습니다.</p>
<p>Java 혹은 Kotlin을 사용할 줄 알지만</p>]]></description><link>http://blog.lulab.net/the-peak-01-android-development-environment-in-macos-and-mvvm-pattern/</link><guid isPermaLink="false">5c1f58d71aabdd0001bea9a8</guid><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><category><![CDATA[ThePeak]]></category><category><![CDATA[Project]]></category><category><![CDATA[MVVM]]></category><category><![CDATA[Andriod Achitecture Component]]></category><category><![CDATA[ViewModel]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Mon, 24 Dec 2018 06:46:33 GMT</pubDate><content:encoded><![CDATA[<p>서버 개발자가 서비스를 처음부터 끝까지 만들어보기 위한 프로젝트 <code>The Peak</code>입니다. The Peak는 Vertial social network service 의 컨셉입니다. 간단한 UI를 통해서 서비스 방향과 컨셉을 명확히 하기 위해서 안드로이드 앱을 먼저 개발할 예정입니다. 그 첫 단계로 IDE(Android Studio) 설치과 전체적으로 가져갈 아키텍처를 조사하였습니다.</p>
<p>Java 혹은 Kotlin을 사용할 줄 알지만 처음으로 안드로이드 프로젝트 혹은 공부하는 분들에게 도움이 되길 바랍니다.</p>
<h1 id="android">Android 개발 환경 구축</h1>
<p>Android 개발은 구글에서 공식적으로 제공하고 있는 <strong>Android Studio</strong>를 사용합니다.</p>
<pre><code>$ brew cask install android-studio
</code></pre>
<p>구글에서 검색한 다른 설치 가이드를 따르면 android-sdk 설치 이후 android-studio를 설치하라고 가이드 하고 있습니다. 하지만 <a href="https://developer.android.com/studio/install">구글의 Android Studio 설치 가이드</a>를 살펴보니 android-sdk를 먼저 설치할 필요는 없어서 android-studio를 설치하고 android-studio에서 필요한 sdk 및 avd를 구성하였습니다.</p>
<p>설치 시에는 항상 기본 설정을 최대한 유지하고 테마만 dracula로 변경하였습다. IntelliJ IDEA 사용할 때도 유일하게 변경한 설정이 Theme 입니다. 꽤 오랜 시간 다운로드 및 설치를 수행하고 android-studio를 설치 완료하였습니다.</p>
<h2 id="project">Project 생성 및 실행</h2>
<p>Kotlin을 좋아하고 서버도 Kotlin으로 구축 예정이기 때문에 Kotlin 기반의 프로젝트를 구성하였습니다. 실제 안드로이드 폰이 없기 때문에 AVD를 통해 실행한 화면은 다음과 같습니다.</p>
<p><img src="http://blog.lulab.net/content/images/2018/12/thepeak-project-with-android-studio.png" alt="thepeak-project-with-android-studio"></p>
<p>처음으로 안드로이드 개발을 하기 때문에 각 요소의 선택 기준은 다음과 같습니다.</p>
<h3 id="kotlin">Kotlin</h3>
<p>Kotlin 기반의 프로젝트임에도 불구하고 src/java 밑에 kotlin 코드가 생성되었습니다. <a href="https://developer.android.com/studio/projects/add-kotlin?hl=ko">Kotlin 코드 추가 | Android Developers</a>를 확인하니 <code>Kotlin 파일과 Java 파일을 모두 한 곳에서 보는 것이 더 쉽게 느껴질 수도 있다</code> 라는 이유로 src/java 아래 kotlin 코드가 생성되었습니다. 개인적인 의견으로도 Java와 Kotlin을 혼용한다면 현재 구성이 좋다고 판단되어 유지하였습니다.</p>
<h3 id="activity">Activity</h3>
<p>Android에서 Activity는 앱에서 보이는 화면입니다. 개발할 앱도 Vertical SNS이기 때문에 SNS에서 가장 많이 활용되는 Scroll 기반의 Activity를 생성하였습니다.</p>
<blockquote>
<p>Activity는 일종의 애플리케이션 구성 요소로서, 사용자가 전화 걸기, 사진 찍기, 이메일 보내기 또는 지도 보기 등의 일을 하기 위해 상호작용할 수 있는 화면을 제공합 니다. 액티비티마다 창이 하나씩 주어져 이곳에 사용자 인터페이스를 끌어올 수 있습니다. 이 창은 일반적으로 화면을 가득 채우지만, 작은 창으로 만들어 다른 창 위에 띄울 수도 있습니다.<br>
출처: <a href="https://developer.android.com/guide/components/activities?hl=ko">https://developer.android.com/guide/components/activities?hl=ko</a></p>
</blockquote>
<p>실제로 구현 시에는 View와 실제 Data 간의 연동이 필요한데 이를 위해서 MVVM 패턴을 활용할 예정입니다.</p>
<p>다음 코드는 자동으로 생성된 코드로 layout xml 파일과 코드가 연결되는 형식은 ID 값(예. <code>fab</code>)이 변수명으로 활용됩니다. 그리고 해당 UI Component에 <code>setOnClickListener</code> 함수를 통해 Click 이벤트에 대한 Listener를 통해 원하는 Action을 등록할 수 있습니다.</p>
<pre><code>class DashboardActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_dashboard)
        setSupportActionBar(toolbar)
        fab.setOnClickListener { view -&gt;
            Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)
                .setAction(&quot;Action&quot;, null).show()
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        // Inflate the menu; this adds items to the action bar if it is present.
        menuInflater.inflate(R.menu.menu_dashboard, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.

        return when (item.itemId) {
            R.id.action_settings -&gt; true
            else -&gt; super.onOptionsItemSelected(item)
        }
    }
}
</code></pre>
<h2 id="avdandroidvirtualdevice">AVD (Android Virtual Device)</h2>
<p>AVD는 실제 안드로이드 기기 없이 시뮬레이터로 테스트를 제공하는 기능이다.</p>
<p>다양한 안드로이드 기기를 지원하기 위해서 AVD에서 추천하는 <code>Nexus 5X API 28</code>로 일단 API를 설정하였다. 처음에는 100% 호환을 목표로 개발을 진행하며 최신 API가 절대적으로 필요한 경우 버전을 올릴 예정입니다.</p>
<h1 id="android">Android 구조</h1>
<p>IDE 구성 후 간단하게 안드로이드 프로젝트 코드를 확인하였다. 샘플로 생성된 코드는 MVC 개념으로 구성되어 있어서 바로 부딪히며 개발을 해도 되지만 좀 더 나은 구조를 위해 찾아본 구조는 다음과 같습니다.</p>
<p><strong>안드로이드 구조</strong></p>
<ol>
<li>MVC: View(layout xml) - Controller(Activity) - Model</li>
<li>MVP: View(layout xml, Activity) - Presenter(Presenter, Impl) - Model</li>
<li>MVVM: View(layout xml, Activity) - ViewModel(ViewModel, Binding) - Model</li>
</ol>
<p>3가지 구조의 차이는 안드로이드의 <a href="https://academy.realm.io/kr/posts/eric-maxwell-mvc-mvp-and-mvvm-on-android/">안드로이드의 MVC, MVP, MVVM 종합 안내서</a>에서 잘 설명하고 있습니다. 그 중에서도 이 프로젝트에서는 MVVM으로 개발을 하기로 선택하였습니다.</p>
<h2 id="mvvm">MVVM</h2>
<p><a href="https://docs.microsoft.com/en-us/xamarin/xamarin-forms/enterprise-application-patterns/mvvm">MSDN The Model-View-ViewModel Pattern</a>에서 제시된 개념이 안드로이드를 위해 Java/Kotlin으로 변화가 필요합니다. MVVM에서 가장 중요한 개념은 DataBinding을 통한 View -&gt; ViewModel -&gt; Model 의존성 관계입니다.</p>
<h3 id="databindinglivedataviewmodel">DataBinding (LiveData &amp; ViewModel)</h3>
<p>DataBinding은 구글에서 제공하는 <a href="https://developer.android.com/topic/libraries/architecture/">Android Architecture Component(AAC)</a>에서 제공하는 라이브러리를 이용하면 쉽게 구현할 수 있습니다. 특히 안드로이드 앱의 Lifecylce을 고려한다면 좋은 선택이 될 것이라고 생각됩니다.</p>
<p>DataBinding은 Observable을 표현해야하는데 이를 위해서 AAC는 <code>LiveData</code>를 제공(<a href="https://developer.android.com/topic/libraries/architecture/livedata#kotlin">참고</a>)하고 Activity의 Lifecylce에 따라 처리하기 위해서 <code>ViewModel</code>을 제공합니다.</p>
<pre><code>class NameViewModel : ViewModel() {

    // Create a LiveData with a String
    val currentName: MutableLiveData&lt;String&gt; by lazy {
        MutableLiveData&lt;String&gt;()
    }

    // Rest of the ViewModel...
}

class NameActivity : AppCompatActivity() {

    private lateinit var mModel: NameViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Other code to setup the activity...

        // Get the ViewModel.
        mModel = ViewModelProviders.of(this).get(NameViewModel::class.java)


        // Create the observer which updates the UI.
        val nameObserver = Observer&lt;String&gt; { newName -&gt;
            // Update the UI, in this case, a TextView.
            mNameTextView.text = newName
        }

        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.
        mModel.currentName.observe(this, nameObserver)
    }
}
</code></pre>
<p>위 샘플 코드는 <code>NameViewModel</code>를 통해서 currentName가 변할 때 mNameTextView.text 값이 변화하는 Binding을 구현한 예제입니다.</p>
<h2 id="persistence">Persistence</h2>
<p>앱, 서버 등과 무관하게 Data에서 중요한 것은 <code>생명주기</code>라고 생각합니다. 안드로이드 앱에서 영구성은 <a href="https://developer.android.com/topic/libraries/architecture/room">Room persistence library</a>을 이용하면 쉽게 구현 가능합니다.</p>
<pre><code>@Entity
data class User(
    @PrimaryKey var uid: Int,
    @ColumnInfo(name = &quot;first_name&quot;) var firstName: String?,
    @ColumnInfo(name = &quot;last_name&quot;) var lastName: String?
)

@Dao
interface UserDao {
    @Query(&quot;SELECT * FROM user&quot;)
    fun getAll(): List&lt;User&gt;

    @Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)
    fun loadAllByIds(userIds: IntArray): List&lt;User&gt;

    @Query(&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot; +
           &quot;last_name LIKE :last LIMIT 1&quot;)
    fun findByName(first: String, last: String): User

    @Insert
    fun insertAll(vararg users: User)

    @Delete
    fun delete(user: User)
}

@Database(entities = arrayOf(User::class), version = 1)
abstract class AppDatabase : RoomDatabase() {
    abstract fun userDao(): UserDao
}

val db = Room.databaseBuilder(
            applicationContext,
            AppDatabase::class.java, &quot;database-name&quot;
        ).build()
</code></pre>
<p>위 예제처럼 Dao 정의를 통해서 쉽게 SQLlite를 위한 인터페이스 구현이 제공됩니다. MyBatis, Hibernate를 사용해보았다면 쉽게 적응이 가능한 일반적인 형태로 생각됩니다.</p>
<hr><h1 id="">오늘의 개발은 여기까지</h1>
<p>안드로이드 개발이 처음이지만 기본으로 생성되는 프로젝트의 코드들을 훑어 보았을 때 .NET의 Winform, WPF, Java의 JavaFX에서 사용했던 MVC, MVVM 패턴들과 유사한 UI 코드들이 인상적이었습니다. 서버 개발자 이전에 Desktop 개발자이기도 하였던^^; 경험이 계속 활용됨이 그래도 예전에 열심히 Desktop 개발을 했던게 좋았구나 라는 생각이 들었습니다.</p>
<p>프로그래밍에서 <code>기본 개념</code>은 역시 가장 중요한 것 같습니다.</p>
<p>그래서 추억을 다시 바라보며 안드로이드 개발에서도 MVVM(.NET의 추억이여~)을 통해서 구현할 예정입니다. 반대로 이 경험이 서버 개발에도 많은 부분 활용될 수 있을 것이라고 믿습니다. 서버 개발을 하듯이 안드로이드 앱 개발 과정을 계속 진행하고 글을 올리도록 하겠습니다.</p>
]]></content:encoded></item><item><title><![CDATA[bycors (Bypass CORS Router)]]></title><description><![CDATA[<p>CORS는 웹서비스를 개발하다가 항상 부딪히는 문제이다. Vue를 이용한 간단한 서비스 개발 과정을 정리하다 역시 부딪혔다. 별도의 Severless 혹은 자체 Server가 없기 때문에 이를 해결하기 위해서 정말 쉽고 빠르게 CORS를 우회하는 Router를 만들어보았다.</p>
<blockquote>
<p>이번엔 golang 공부!</p>
</blockquote>
<h1 id="bycorsbypasscorsrouter">bycors (Bypass CORS Router)</h1>
<p>이 주제는 vue.js와 완전 별개로 CORS를 지원하지 않는 네이버(사실</p>]]></description><link>http://blog.lulab.net/bycors-bypass-cors-router/</link><guid isPermaLink="false">5b824724cc89c40001526cc5</guid><category><![CDATA[Web Service]]></category><category><![CDATA[Toy Project]]></category><category><![CDATA[CORS]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Mon, 29 Oct 2018 13:23:46 GMT</pubDate><content:encoded><![CDATA[<p>CORS는 웹서비스를 개발하다가 항상 부딪히는 문제이다. Vue를 이용한 간단한 서비스 개발 과정을 정리하다 역시 부딪혔다. 별도의 Severless 혹은 자체 Server가 없기 때문에 이를 해결하기 위해서 정말 쉽고 빠르게 CORS를 우회하는 Router를 만들어보았다.</p>
<blockquote>
<p>이번엔 golang 공부!</p>
</blockquote>
<h1 id="bycorsbypasscorsrouter">bycors (Bypass CORS Router)</h1>
<p>이 주제는 vue.js와 완전 별개로 CORS를 지원하지 않는 네이버(사실 대부분 보안상 지원하지 않으니^^;) 때문에 갑작스럽게 별도 프로젝트를 짧고 간단하게 아래와 같이 수행한다.</p>
<p>일단 나의 개인 서버에 올리면 자주 꺼질 수도 있고 유지를 해야되니, <a href="https://devcenter.heroku.com/articles/getting-started-with-go%EB%A5%BC">https://devcenter.heroku.com/articles/getting-started-with-go를</a> 기반으로 Heroku에 올리려 한다. 아직 golang도 초보고 heroku도 처음 사용하니 가장 기초적인 기능으로 api routing 정도만 구현하였다.</p>
<h2 id="bycorsgolang">bycors golang 서버</h2>
<p><a href="https://github.com/lubang/bycors">https://github.com/lubang/bycors</a></p>
<p>go로 작성되었을 뿐 X-API-TARGET 이란 헤더가 있으면 해당 주소로 모든 Headers, Body를 그대로 by-pass 하는 기능만 제공한다. 상세한 내용은 코드를 살펴보면 좋다. 달랑 <code>main.go</code> 한 개 :)</p>
<p>main.go 중 일부</p>
<pre><code>func main() {
	port := os.Getenv(&quot;PORT&quot;)
	if port == &quot;&quot; {
		log.Fatal(&quot;`$PORT` must be set&quot;)
	}

	router := httprouter.New()

	router.NotFound = http.FileServer(http.Dir(&quot;public&quot;))
	router.OPTIONS(&quot;/route&quot;, routeAllowed)
	router.POST(&quot;/route&quot;, routeCors)
	router.GET(&quot;/route&quot;, routeCors)
	router.PUT(&quot;/route&quot;, routeCors)
	router.DELETE(&quot;/route&quot;, routeCors)

	log.Fatal(http.ListenAndServe(&quot;:&quot;+port, router))
}

func routeAllowed(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	keys := reflect.ValueOf(r.Header).MapKeys()
	strkeys := make([]string, len(keys))
	for i := 0; i &lt; len(keys); i++ {
		strkeys[i] = keys[i].String()
	}
	headres := strings.Join(strkeys, &quot;,&quot;) + &quot;, X-Naver-Client-Id,X-Naver-Client-Secret,X-TARGET-URL&quot;

	w.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)
	w.Header().Set(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;)
	w.Header().Set(&quot;Access-Control-Allow-Headers&quot;, headres)
}
</code></pre>
<p>bycors에서 가장 중요한 부분은 CORS 처리를 위해서 응답 헤더에 Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers 이 3가지를 추가해주는 일이었다.</p>
<h2 id="heroku">heroku에 배포하기</h2>
<p>간단히 서버는 만들었다. 이제 heroku에 간단히 배포를 하자. 느리지만 무료인데다 사용성도 너무 편리하다. getting-started를 참고해서 heroku 로그인 후 다음과 같이 서비스를 생성하였다.</p>
<pre><code>$ heroku login 
$ heroku create bycors
$ git push heroku master
</code></pre>
<p>단 3줄이면 구성 &amp; 배포가 완료된다. 이렇게 쉽게 배포가 가능하다니 heroku 최고! 하지만 역시 heroku 답게 속도는 지독히 느리다. 약 4.6초가 소요되었다. 이미지를 주고 받는 시간이 오래걸리는 것으로 예상된다.</p>
<h2 id="bycorsapi">bycors API 사용하기</h2>
<ul>
<li>Address: <a href="https://bycors.herokuapp.com/route">https://bycors.herokuapp.com/route</a></li>
<li>Request
<ul>
<li>Headers
<ul>
<li>X-Naver-Client-Id</li>
<li>X-Naver-Client-Secret</li>
<li>X-TARGET-URL</li>
</ul>
</li>
<li>Payload (form-data)
<ul>
<li>image: 이미지 파일</li>
</ul>
</li>
</ul>
</li>
<li>Response
<ul>
<li>Naver Clova 응답 그대로 반환</li>
</ul>
</li>
</ul>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/44272168301/in/dateposted-public/" title="bycors-api-result"><img src="https://farm2.staticflickr.com/1895/44272168301_40d1dd8933.jpg" width="500" height="418" alt="bycors-api-result"></a></p>
<p>최대한 간단하게 만든 서비스로 사용법도 간단하다. 철저하게 become-a-celeb 서비스 시험을 위한 용도이다. 시간나면 General 하게 모든 CORS를 Routing 하는 서비스로 업데이트 해봐야겠다.</p>
]]></content:encoded></item><item><title><![CDATA[JavaFX Controller에 Guice로 주입하는 방법]]></title><description><![CDATA[<p>JavaFX는 Java 기반으로 Desktop Application 을 만드는 방법 중 하나이다. 이전 회사에서는 Web service 대신 Desktop application 에 대한 요구사항만 있어서 주로 사용하였다. .NET 이면 WinForm, Java면 JavaFX로 작업을 하였다. 지금은 Web service만 개발을 하다보니 사용할 일이 없다가 업무용 <code>리뷰 알림</code> 유틸리티를 MacOS용으로 만들기 위해서 오랜만에 사용하였다.</p>
<p>JavaFX의 특징은 .NET</p>]]></description><link>http://blog.lulab.net/guice-injects-instances-of-a-controller-in-javafx/</link><guid isPermaLink="false">5b7ea92d881c3b0001ffdbb8</guid><category><![CDATA[JavaFX]]></category><category><![CDATA[Desktop Application]]></category><category><![CDATA[Guice]]></category><category><![CDATA[DIP]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Fri, 24 Aug 2018 13:07:28 GMT</pubDate><content:encoded><![CDATA[<p>JavaFX는 Java 기반으로 Desktop Application 을 만드는 방법 중 하나이다. 이전 회사에서는 Web service 대신 Desktop application 에 대한 요구사항만 있어서 주로 사용하였다. .NET 이면 WinForm, Java면 JavaFX로 작업을 하였다. 지금은 Web service만 개발을 하다보니 사용할 일이 없다가 업무용 <code>리뷰 알림</code> 유틸리티를 MacOS용으로 만들기 위해서 오랜만에 사용하였다.</p>
<p>JavaFX의 특징은 .NET WPF(Windows Presentation Foundation)와 유사하게 View(FXML)과 Controller, Model이 명확하게 구분되는 MVC(Model-View-Controller) 모델이라는 점이다.</p>
<p>클린 코드(로버트.C.마틴 저)를 오랜만에 정주행 하고 좋은 구조를 디자인 하기 위해서 DIP(Dependency Inversion Principle)에 따라 구현체를 인터페이스에 주입하기 위해서 Guice(참고<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>)를 사용하였다.</p>
<h1 id="dependencyinjection">리뷰 알림의 Dependency Injection</h1>
<p>리뷰 알림의 구조에서 의존성 주입이 필요한 부분은 다음과 같다.</p>
<p><img src="http://blog.lulab.net/content/images/2018/08/review-notifier-class-diagram.png" alt="review-notifier-class-diagram"></p>
<p>JavaFX의 화면 별 Controller에서 ReviewNotifyService을 함수를 호출하여 '리뷰 목록', '수동 조회 &amp; 알림' 등의 기능을 제공한다.</p>
<p>ReviewNotifyService는 ReviewNotifyModule(Guice, Dependency injection 설정 클래스)에 Singleton으로 GerritToSlackReviewWorkService 구현체로 정의하였다.</p>
<p>ReviewNotifyModule.java</p>
<pre><code>public class ReviewNotifierModule extends AbstractModule {
    @Override
    protected void configure() {
        bind(ReviewWorkService.class)
                .to(GerritToSlackReviewWorkService.class)
                .in(Scopes.SINGLETON);
        bind(ReviewConfigRepository.class)
                .to(RocksDbReviewRepository.class);
        bind(ReviewNotifierRepository.class)
                .to(RocksDbReviewRepository.class);
    }
}
</code></pre>
<h2 id="javafxguice">JavaFX에서 Guice 의존성 주입이 안되는 현상</h2>
<p>JavaFX에서 Controller를 생성하는 코드에서 Guice의 인스턴스 함수를 호출하지 않아 의존성이 주입되지 않는다.</p>
<pre><code>Parent root = FXMLLoader.load(getClass().getResource(&quot;/fxml/Main.fxml&quot;));                
</code></pre>
<p>위 코드의 문제점이 무엇인지 확인해보았다. (참고<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>)</p>
<p>FXMLLoader.load(URL location) 메소드는 callerClass를 입력하지 않으면 null 로 전달이 된다. 다음 코드와 같이 <code>ReflectionUtil.newInstance</code>를 사용해서 Guice의 instance 생성 메소드를 통하지 않기 때문에 <code>@Inject</code> Annotation이 반영되지 않는 것이다.</p>
<p>FXMLLoader.java의 posscessAttributes 메소드 중 일부</p>
<pre><code>try {
    if (controllerFactory == null) {
        setController(ReflectUtil.newInstance(type));
    } else {
        setController(controllerFactory.call(type));
    }
} catch (InstantiationException exception) {
    throw constructLoadException(exception);
} catch (IllegalAccessException exception) {
    throw constructLoadException(exception);
}
</code></pre>
<p>다행히도 FXMLLoader에 controllerFactory를 입력받도록 load 메소드가 변경되어 이를 이용하면 Guice를 통한 (혹은 그 외의 의존성 라이브러리) 의존성 주입이 가능하다.</p>
<h2 id="javafxguice">JavaFX에서 Guice를 이용한 의존성 주입</h2>
<p>생각보다 JavaFX에서 Guice의 의존성 주입을 사용하는 방법은 간단하였다. 과거 버전에서는 Provider를 정의하여 FXML에서 Node 인스턴스 생성 시 Guice injector의 getInstance() 함수를 이용하도록 설정하기도 하였다.</p>
<p>하지만 JDK8부터는 다음과 같이 injector의 getInstance 함수만 전달하여 Guice로 의존성 주입이 가능하다.</p>
<pre><code>Injector injector = Guice.createInjector(new ReviewNotifyModule());

Parent root = FXMLLoader.load(
        getClass().getResource(&quot;/fxml/Main.fxml&quot;),
        null,
        new JavaFXBuilderFactory(),
        injector::getInstance);
</code></pre>
<p>Controller 사용 예제</p>
<pre><code>private final ReviewWorkService reviewWorkService;

@Inject
public MainController(ReviewWorkService reviewWorkService) {
    this.reviewWorkService = reviewWorkService;
}
</code></pre>
<p>DIP를 준수하는 JavaFX 어플리케이션을 만들어 보았다. 그래서 Guice를 통해서 객체 생성을 관리하니 편리하고 좋다.</p>
<h3 id="guice">Guice 음, 뭐, 의존성 용량이 생각보다 크네?</h3>
<p>Guice를 적용하기 전 2MB(JRE 제외, MacOS 패키징, .app 파일) 하던 패키지가 적용 후엔 4MB로 증가하는 슬픈 사실을 발견하였다. 어차피 사내 내부적으로 소수만 사용할 토이 프로그램이기 때문에 상관은 없지만 예상치 못한 용량 증가였다. Guice에서 Guava까지 의존성을 이어서 가져가서 생긴 현상으로 사실 어느정도 복잡도를 가진 프로그램이라면 DIP 반영과 Guava의 편한 기능을 사용한다라고 생각하면 고민거리는 아니다.</p>
<p>SRP(Single responsibility Principle)와 DIP를 통한 명확한 의존성 분리와 주입이 더 좋은 코드를 만들 기회를 준다는 것에 공감하기 때문에 앞으로도 Guice 잘 써봐야겠다.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>참고[1] Guice, Google<br>
<a href="https://github.com/google/guice">https://github.com/google/guice</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>참고[2] JavaDoc FXMLLoader<br>
<a href="https://docs.oracle.com/javase/8/javafx/api/javafx/fxml/FXMLLoader.html#load-java.net.URL-java.util.ResourceBundle-javafx.util.BuilderFactory-javafx.util.Callback-">https://docs.oracle.com/javase/8/javafx/api/javafx/fxml/FXMLLoader.html#load-java.net.URL-java.util.ResourceBundle-javafx.util.BuilderFactory-javafx.util.Callback-</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title><![CDATA[Git 브랜치 전략(Git flow, Changes)의 필요]]></title><description><![CDATA[<p>프로젝트를 시작할 때 기본적으로 논의하는 '코드베이스', '코드리뷰', '배포방안' 중 코드베이스 관리에 관련한 고민이다.</p>
<p>코드베이스 도구는 요즘 대부분 git으로 선택한다. TFS(Team Foundation Server), Subversion, CVS, Git 등 많은 코드 관리 도구 중 고민하고 선택해야 했는데 요즘엔 GitHub의 영향인지 항상 git으로 기본적으로 선택된다 (갑자기 git을 써야하는 이유에 대해서 장기간 옛회사에서 세미나를</p>]]></description><link>http://blog.lulab.net/the-need-for-a-git-branch-strategy/</link><guid isPermaLink="false">5b7be018881c3b0001ffdbad</guid><category><![CDATA[Git]]></category><category><![CDATA[ALM]]></category><category><![CDATA[Gerrit]]></category><category><![CDATA[Code Quality]]></category><category><![CDATA[Programming]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Tue, 21 Aug 2018 15:03:07 GMT</pubDate><content:encoded><![CDATA[<p>프로젝트를 시작할 때 기본적으로 논의하는 '코드베이스', '코드리뷰', '배포방안' 중 코드베이스 관리에 관련한 고민이다.</p>
<p>코드베이스 도구는 요즘 대부분 git으로 선택한다. TFS(Team Foundation Server), Subversion, CVS, Git 등 많은 코드 관리 도구 중 고민하고 선택해야 했는데 요즘엔 GitHub의 영향인지 항상 git으로 기본적으로 선택된다 (갑자기 git을 써야하는 이유에 대해서 장기간 옛회사에서 세미나를 했던 슬픈 기억이 난다). 그래도 git이 다양한 솔루션을 통해서 제공되고 코드베이스 측면에서도 '분산 버전 관리'라는 엄청난 장점이 있어서 좋다.</p>
<p>그리고 대중적인만큼 기본적인 Git 사용법 add, commit, stash, fetch, merge, rebase 등은 이미 많은 정보가 있고 GUI 도구(<a href="https://www.sourcetreeapp.com">SourceTree</a>, IntelliJ IDEA, VS Code 내장된 도구)도 매우 훌륭하다.</p>
<p>Git을 사용할 때 다음 요소를 고려하면 더 좋은 코드 활용/유지 보수가 가능하다고 생각한다.</p>
<ul>
<li>Git Branch 전략</li>
<li>Git Message 작성 방법</li>
</ul>
<p>그 중에서도 본 글에서는 Branch 전략에 관한 내용이다.</p>
<h1 id="gitbranch">Git Branch 전략</h1>
<p>Git branch 전략은 유명한 Git flow(참고<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>)이 있다. 나의 경우에는 회사 내의 규제/제한으로 인해서 Git flow를 변형한 전략을 사용하고 있다.</p>
<p>Branch 전략을 세우는데 중요한 고려사항은 다음과 같다.</p>
<ul>
<li>Branch 별 권한 (Write, Read, Pull-Request)</li>
<li>Branch 생명주기 (짧게 유지하면서 명확하게)</li>
<li>Branch 을 통한 빠른 디버깅/스냅샷 확인</li>
</ul>
<p>위 고려사항들은 모두 <code>코드 품질 향상</code>, <code>코드 가독성(검색) 향상</code>을 목적으로 한다. 서비스/어플리케이에서 버그가 발생하였을 때 해당 버전의 코드로 디버깅하여 원인을 찾고 상황 재현, 수정, 검증, 재배포까지의 단계를 체계적/안정적으로 처리할 수 있어야 한다.</p>
<p>각 단계를 효과적으로 관리하기 위한 Branch 전략 수립과 함께 Git 기능(hook, script 등)/솔루션(GitLab, Gerrit, Stash 등)을 이용하여 <code>자동화</code>를 구성한다. 자동화 구성은 Pull-Request, 코드 리뷰 등 코드 품질 향상을 위한 행동들을 팀 문화 혹은 절차로 대체할 수도 있다. 하지만 이런 방법은 시간에 따라 변하고 바쁠수록 무시하는 경우가 많아진다. 인간적인 측면(게으름, 나태함, 건망증 등)과 신규 인력 투입 시 실수를 최소화하는 역할로 <strong>자동화 구성</strong>이 꼭 필요하다.</p>
<p>그래서 처음 Branch 전략을 수립하는 시점부터 '<strong>코드 품질, 코드 가독성(검색)</strong>' 향상을 목표로 한다. 단순히 Git flow를 따라함이 아닌 현재 프로젝트 구성원, 회사의 제약 조건 등을 고려하다면 '코드 저장 관리'에서 최종 목표인 '코드 품질', '유지보수' 향상까지 제공하는 전략 수립을 도출할 수 있을 것이다.</p>
<h2 id="gitflow">Git flow</h2>
<p>Git flow는 이미 너무 유명한 방법이다. 많은 사람들이 택하는 <strong>Git Flow</strong> 전략을 살펴보면 다음과 같다. (참고<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup>)</p>
<img src="http://blog.lulab.net/content/images/2018/08/git-model@2x.png" style="width:550px">
<p>우아한 형제들의 Git-flow 전략(참고<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>)이 Git Flow의 의도에 따라 사용된 좋은 예시라고 생각된다. 조금 간략하게 정리를 하면 다음과 같다.</p>
<p>Git flow branch 전략</p>
<table>
<thead>
<tr>
<th>Branch</th>
<th>목적</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>제품 출시</td>
</tr>
<tr>
<td>develop</td>
<td>다음 버전 개발</td>
</tr>
<tr>
<td>feature/{feature_name}</td>
<td>기능 개발</td>
</tr>
<tr>
<td>release</td>
<td>제품 출시 준비</td>
</tr>
<tr>
<td>hotfix</td>
<td>출시된 버전 버그 수정</td>
</tr>
</tbody>
</table>
<p>개인적으로 Branch 전략을 살펴 볼 때 중요하게 체크하는 내용이 <code>목적</code>이다. Branch를 통해서 표현하고 싶은 의도를 명확하게 정의해야 한다. Git flow 가 좋은 점은 그 목적을 뚜렷하게 제안한다는 점이다.</p>
<h2 id="changesbygerrit">Changes (by Gerrit)</h2>
<p>※ Changes 는 별다르게 부르는 이름을 못 찾아서 적당히 붙힌 이름이다.</p>
<p>현재 프로젝트에서 사용하고 있는 전략은 Git-flow 와 유사하지만 feature branch는 없고 사내 코드 리뷰 도구인 Gerrit(참고<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>)의 Changes로 feature 역할과 유사하게 사용하고 있다.</p>
<p>Changes은 Gerrit 내의 PR(Pull-Request)와 유사한 개념이다. 코드 묶음이면서 개발자가 리뷰를 남길 수 있는 공간이자 리뷰 의견을 반영한 새로운 Patchset(수정한 코드)를 추가 등록하는 공간이다.</p>
<p>다음은 Changes과 Patchset을 간략하게 구조화한 내용이다.</p>
<pre><code>Changes
 * Patchset1: 첫번째 수정코드 &lt;-- 개발자들이 리뷰를 남기면
 * Patchset2: 두번째 수정코드 &lt;-- 의견을 반영한 수정 코드
 * ...N번 반복
 * PatchsetN: 최종코드 &lt;-- 최종적으로 검토 후 Code Submit (Merge)
</code></pre>
<p>Changes의 최대 장점은 '빠른 생명주기'을 통해서 Branch 충돌을 최소화하고 'Branch를 간략하게' 만들어 준다는 점이다.</p>
<p>그리고 PR을 통한 코드 리뷰 때보다 작은 단위로 리뷰를 하게 됨으로 빠른 피드백 및 수정이 가능하다. 사실 PR도 작게 유지하면 동일한 효과를 얻을 수 있다. 그 중에서도 가장 큰 차이는 병합 시점에 Changes는 최종 Patchset이 1개의 Commit 으로 Merge or rebase가 되기 때문에 깔끔한 코드베이스 흐름을 보여준다.</p>
<p>Changes branch 전략</p>
<table>
<thead>
<tr>
<th>Branch</th>
<th>목적</th>
<th>특징</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>제품 출시</td>
<td>tag, DevOps 도구에 의해 자동 빌드 및 배포</td>
</tr>
<tr>
<td>develop</td>
<td>다음 버전 개발</td>
<td>Changes 취합, 정적 분석 및 테스트 100% 성공 시만 병합</td>
</tr>
<tr>
<td>release</td>
<td>제품 출시 준비</td>
<td>제품 Versioning, QA</td>
</tr>
<tr>
<td>hotfix</td>
<td>출시된 버전 버그 수정</td>
<td>열심히 고쳐야함!</td>
</tr>
</tbody>
</table>
<p>Git flow와 Changes를 비교하면 별도의 feature가 없는 것처럼 보이지만 Gerrit 내부에서 Change 한 건마다 branch로 등록되어 관리되기 때문에 실제 동작은 feature와 동일하다. 즉 Git flow의 feature를 매번 1개의 Commit으로 rebase를 한다면 Gerrit을 이용한 코드베이스와 동일해질 것이다.</p>
<p>그 외 master, develop, release, hotfix branch는 git flow와 동일한 목적으로 사용한다. 현재 프로젝트에서는 개발자는 develop 브랜치만 Read/Write 권한을 가진다. Changes는 코드 리뷰 후 정적분석, 테스트, 패키징까지 수행한 뒤 원 브랜치와 병합한다.</p>
<h2 id="branchcodebase">Branch! 하지만 결국 Codebase!</h2>
<p>Branch 전략은 어디까지나 Branch를 어떻게 사용하면 <code>개발 생산성</code>(판타지에나 나올법한 단어)를 높여줄 것인가에 대한 고민이다.</p>
<p>Git flow, changes, 개발자마다 사용하는 각자의 방법들은 매우 다양할 것이다. 사실 작은 토이 프로젝트이면 master 하나만으로도 충분한 경우가 많다. 자신의 프로젝트 성격에 따라서 Branch 전략도 적절하게 수정/변화를 주며 사용이 필요하다.</p>
<p>항상 프로그래밍을 하면 나오는 '그 때 그 때 달라요'는 사실 '원칙'을 기반으로 하는 달라요일 때 아름답다고 생각한다. SOLID<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 원칙처럼 공유되는 Git branch 원칙은 없지만 코드베이스의 목적인 <strong>코드 저장 및 공유</strong>를 하면서 '<strong>코드 품질, 코드 가독성(검색)</strong>'을 높여주는 전략을 고민할 필요가 있다.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>참고[1] Git flow branch model<br>
<a href="https://nvie.com/posts/a-successful-git-branching-model">https://nvie.com/posts/a-successful-git-branching-model</a> <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>참고[2] 우아한 형제의 Git branch 전략<br>
<a href="http://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html">http://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>참고[3] Gerrit Code Review<br>
<a href="https://www.gerritcodereview.com">https://www.gerritcodereview.com</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>참고[4] 위키백과 SOLID<br>
<a href="https://en.wikipedia.org/wiki/SOLID">https://en.wikipedia.org/wiki/SOLID</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><title><![CDATA[자바의 final 는 언제 사용할까?]]></title><description><![CDATA[<p><strong>코드 리뷰 중 <code>final</code>을 언제 붙일까?</strong> 라는 고민이 들었다.</p>
<p>프로젝트 구성원과 논의한 내용은 '일단 다 붙이자', '마음대로 하자', '그게 뭐임? 신경 써야함?'와 같이 역시 다양했다.</p>
<p>개인적으로는 가능하다면 '일단 다 붙이자'라는 생각이었다. IntelliJ IDEA에서 변수 추출 시 자동으로 final을 붙여주기 때문에 별도의 타이핑도 필요 없었다. 일단 붙인다면 적어도 컴파일</p>]]></description><link>http://blog.lulab.net/when-should-i-use-final-in-java/</link><guid isPermaLink="false">5b796f4f881c3b0001ffdba2</guid><category><![CDATA[Java]]></category><category><![CDATA[Code Quality]]></category><category><![CDATA[Programming]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Sun, 19 Aug 2018 17:02:01 GMT</pubDate><content:encoded><![CDATA[<p><strong>코드 리뷰 중 <code>final</code>을 언제 붙일까?</strong> 라는 고민이 들었다.</p>
<p>프로젝트 구성원과 논의한 내용은 '일단 다 붙이자', '마음대로 하자', '그게 뭐임? 신경 써야함?'와 같이 역시 다양했다.</p>
<p>개인적으로는 가능하다면 '일단 다 붙이자'라는 생각이었다. IntelliJ IDEA에서 변수 추출 시 자동으로 final을 붙여주기 때문에 별도의 타이핑도 필요 없었다. 일단 붙인다면 적어도 컴파일 시점에 개발자의 실수를 최소화 할 수 있다고 생각하였다. 하지만 꼭 final을 명시하는 것이 좋은 것은 아니라는 생각이 들었다.</p>
<p>현재까지 final 사용에 대한 고민은 다음과 같다. 정답은 아니지만 사람들이 고민하고 결정에 참고 할 수 있도록 정리해 보았다.</p>
<h1 id="final">final 은 무엇인가?</h1>
<p>위키백과(<a href="https://en.wikipedia.org/wiki/Final_(Java)">참고[1]</a>)에서 설명하는 final (Java) 정의와 예제는 다음과 같다.</p>
<blockquote>
<p>the final keyword is used in several contexts to define an entity that can only be assigned once.</p>
</blockquote>
<p>final 키워드는 엔티티를 한 번만 할당한다. 즉, 두 번 이상 할당하려 할 때 컴파일 오류가 발생한다.</p>
<h2 id="finalclasses">Final classes</h2>
<pre><code>public final class MyFinalClass {...}

public class ThisIsWrong extends MyFinalClass {...} // forbidden
</code></pre>
<p>MyFinalClass는 final 지시어를 통해서 상속하지 못하도록 정의되었다. ThisIsWrong와 같이 MyFinalClass를 상속하면 컴파일 오류가 발생한다. 대부분의 IDE라면 실시간으로 해당 오류를 확인 가능하다.</p>
<p>대표적인 final class는 String이 있다. 왜 String을 final로 정의하였는지는 StackOverFlow(<a href="https://stackoverflow.com/questions/2068804/why-is-string-class-declared-final-in-java">참고[2]</a>)을 참고하면 Immutable object로 얻을 수 있는 이점 때문이다.</p>
<ol>
<li><strong>Immutable objects</strong>: You can share duplicates by pointing them to a single instance.</li>
<li><strong>Security</strong>: The system can hand out sensitive bits of read-only information without worrying that they will be altered</li>
<li><strong>Performance</strong>: Immutable data is very useful in making things thread-safe.</li>
</ol>
<p>위의 기준은 클래스 디자인 시 final로 선언할지 결정하는데 고려 요소로 생각된다.</p>
<h2 id="finalmethods">Final methods</h2>
<pre><code>public class Base
{
    public       void m1() {...}
    public final void m2() {...}

    public static       void m3() {...}
    public static final void m4() {...}
}

public class Derived extends Base
{
    public void m1() {...}  // OK, overriding Base#m1()
    public void m2() {...}  // forbidden

    public static void m3() {...}  // OK, hiding Base#m3()
    public static void m4() {...}  // forbidden
}
</code></pre>
<p>final 이 선언된 메소드는 자식 클래스에서 재정의하려 할 때 컴파일 오류가 발생한다. 클래스를 구현 시 명시적으로 override method를 막고 싶을 때 사용하면 좋겠다.</p>
<h2 id="finalvariables">Final variables</h2>
<p><code>final long ONE_MINUTE = 60000</code> Java에서는 상수를 선언할 때 final을 이용하여 변경하지 못하도록 Read-Only 값을 정의한다.</p>
<p><code>private final Logger log;</code> LogManager 등의 클래스가 아닌 이상 Logger를 사용하는 모든 인스턴스들은 단순 호출(log.info, log.error)만을 수행하기 때문에 final로 선언한다. 개인적으로는 고객의 요구사항에 항상 로그를 Job 별로 다르게 작성해달라는 요청이 많았기 때문에 위와 같이 디자인을 많이 하였다.</p>
<p>하지만 많은 Java 프로젝트 최상단에는 다음과 같이 작성되어 있다.<br>
<code>private static final Logger log = Logger.getManager(&quot;LUBANG DEV&quot;);</code> 해당 인스턴스들의 Logger를 모두 동일하게 선언하는 디자인이다. (Lombok을 쓰면 @Slf4j로 해결이 가능하지만 Lombok은 Lombok이니깐 패스합니다 ^^;)</p>
<p>위 3가지 케이스 모두 선언한 변수를 수정하지 못하도록 제한하기 위해서 final을 사용했다. 즉, Read-only Instance로 선언이 되었다고 표현 가능하다.</p>
<h1 id="final">그럼 final 언제 사용할까?</h1>
<p>사실 final을 안 쓰더라도 잘 기존 코드 이해하고 작성하면 문제없이 코딩이 가능하다. 하지만 이런 일은 전설 속의 선배들만 가능한 일이고 언제 final을 써야 다른 사람들에게 도움을 줄까를 고민하였다.</p>
<p>클린 코드(참고[3])에서는 기본적으로 <code>코드 가독성</code>을 해치지 않고 명시가 필요한 부분에 사용하라고 정의되어 있다. 역시 가장 중요한 것은 같이 일하는 사람들과 <code>합의</code>가 필요하다. 코드 리뷰를 진행한다면 자연스럽게 논의가 되며 합의점을 찾을 수 있을 것이라고 생각된다. (개인 프로젝트라면 나 혼자 결정 👌).</p>
<p>그리고 전반적인 final 사용에 관한 지침은 Is that your final answer?(<a href="https://www.ibm.com/developerworks/java/library/j-jtp1029/index.html">참고[4]</a>)에 매우 잘 정리되어 있다. 이러한 정보들을 바탕으로 개인적으로 생각하는 final 사용 기준은 다음과 같다.</p>
<ul>
<li>개발 의도(변수, 함수, 클래스의 명시적 제한)</li>
<li>코드 가독성</li>
</ul>
<h2 id="">개발 의도(변수, 함수, 클래스의 명시적 제한)</h2>
<p>개발 의도는 반드시 본 변수, 함수, 클래스는 final로 제한되어야 함을 보여준다. 클래스와 메소드를 제한함으로써 Override로 인한 실수를 최소화 하고 버그를 줄이기 위해 선언한다.</p>
<p>개인적으로 많이 사용하는 final 선언 패턴은 다음과 같다.</p>
<h3 id="final">클래스 및 생성자 의존성에 대한 final</h3>
<p>다음 예제의 EventStreamId는 Event Stream에 대한 고유 ID 객체로 언제나 동일한 인스턴스를 바라보도록 디자인이 필요하였다. 그래서 final class 으로 상속이 불가능하도록 선언하고 생성 시 전달받은 인자를 final member variables로 유지하도록 구현하였다.</p>
<p>간단하게 EventStreamId 객체 내에서 streamName, version 변경되지 않기를 원했다.</p>
<pre><code>public final class EventStreamId {
    private final String streamName;
    private final long version;

    public EventStreamId(String streamName, long version) {
        this.streamName = streamName;
        this.version = version;
    }

    public EventStreamId(String streamName) {
        this(streamName, 1L);
    }

    public EventStreamId withVersion(long version) {
        return new EventStreamId(this.getStreamName(), version);
    }
</code></pre>
<ul>
<li>github.com/lubang/drived 의 <a href="https://github.com/lubang/drived/blob/master/drived-core/src/main/java/net/lulab/drived/event/sourcing/EventStreamId.java">EventStreamId.java</a> 중 일부</li>
<li>본 클래스는 도메인 주도 개발(참고[5])를 기반으로 구현</li>
</ul>
<p>이 디자인은 Stream name, version은 전달받은 인자를 기반으로 Immutable object를 생성한다. 새로운 version의 EventStreamId가 필요한 경우에는 withVersion 메소드를 이용하여 새로운 인스턴스로 반환한다. 이는 SRP(Single Responsibility Principle)를 준수하여 EventStreamId의 생성자로만 멤버 변수의 값을 설정하고 EventStreamId의 생성자 호출이라는 일관성 있는 메소드 수준을 제공한다.</p>
<h3 id="final">함수에 대한 final</h3>
<p>함수에 대한 final은 단순하다. 상속되면 <strong>절대</strong> 안되는 경우 final을 정의한다.</p>
<p>사실 ISP(Interface Segregation Principle)에 따라 인터페이스를 선언하여 구현한다면 final을 사용하는 경우가 매우 한정적이다.</p>
<ul>
<li>Interface에서 정의한 변수는 final 선언과 같이 재정의가 불가능하다.</li>
<li>Interface에서 Method를 final로 선언할 수 없다. (당연하다고 생각된다)</li>
</ul>
<p>결국 Interface로 정의 후 상속받은 구현체의 메소드에 final을 선언하여 추가적인 재정의를 막는 경우에 final 사용이 가능하다고 생각된다. 개인적으로는 함수에 대해서는 final을 선언한 기억이 없다. (프로젝트 구성원님들이 잘 해주신 덕분에 버그가 없었는지도...)</p>
<h2 id="">코드 가독성</h2>
<p>개발 의도가 가장 중요하지만 그 다음으로는 <strong>가독성</strong>을 고려한다. 읽기 좋은 코드가 버그가 적다!</p>
<pre><code>// final 이 있는 코드
@Test
public void apply_events_when_music_artist_releases_an_album() {
    final MusicArtistId id = MusicArtistId.createUniqueId();
    final MusicArtist musicArtist = new MusicArtist(id,
            &quot;Red Velvet&quot;,
            ZonedDateTime.parse(&quot;2014-08-01T00:00:00+09:00&quot;));
    musicArtist.releaseAlbum(
        &quot;The Red&quot;,
        ZonedDateTime.parse(&quot;2015-09-09T00:00:00+09:00&quot;));

    // Assert 생략
}

// final 이 없는 코드
@Test
public void apply_events_when_music_artist_releases_an_album() {
    MusicArtistId id = MusicArtistId.createUniqueId();
    MusicArtist musicArtist = new MusicArtist(id,
            &quot;Red Velvet&quot;,
            ZonedDateTime.parse(&quot;2014-08-01T00:00:00+09:00&quot;));
    musicArtist.releaseAlbum(
        &quot;The Red&quot;,
        ZonedDateTime.parse(&quot;2015-09-09T00:00:00+09:00&quot;));

    // Assert 생략
}
</code></pre>
<ul>
<li>github.com/lubang/drived 의 <a href="https://github.com/lubang/drived/blob/master/drived-core/src/test/java/net/lulab/drived/event/sourcing/EventSourcedRootTest.java">EventSourcedRootTest.java</a> 중 일부</li>
</ul>
<p>위와 같이 지역 변수를 생성해서 처리하는 경우는 실수할 일이 매우 낮기 때문에 가독성을 확보하는 것이 더 좋다고 생각된다. 예제는 짧아서 final의 영향이 미비하지만 조금 복잡한 로직, 특히 수식을 구현한 알고리즘으로 들어가면 final 단 5글자이지만 수식을 이해하는데 큰 불편함을 준다.</p>
<h1 id="final">결국 final은!</h1>
<p>결국 Java에서의 final은 Immutable/Read-only 속성을 선언하는 지시어이다.</p>
<p><strong>클래스, 함수, 변수가 변하지 못하도록 의도하고 싶다면 final로 선언하자.</strong></p>
<p>🐳사설<br>
왜 Scala 처럼 var, val 이 없는 것인가? Javascript도 let, const 로 이제 구분하는데...<br>
Java도 스펙에 올라올려나? 그럼 가독성도 좋고 항상 final 선언이 가능할텐데 아쉽다.</p>
<h1 id="">참고 자료</h1>
<ul>
<li>참고[1] 위키백과 final (Java) | <a href="https://en.wikipedia.org/wiki/Final_(Java)">https://en.wikipedia.org/wiki/Final_(Java)</a></li>
<li>참고[2] 스택오버플로우 Java String이 final인 이유 <a href="https://stackoverflow.com/questions/2068804/why-is-string-class-declared-final-in-java">https://stackoverflow.com/questions/2068804/why-is-string-class-declared-final-in-java</a></li>
<li>참고[3] 클린 코드, 로버트 C. 마틴, 인사이트 | <a href="http://www.yes24.com/24/goods/11681152?">YES24</a></li>
<li>참고[4] Is that your final answer?, Brian Goetz, IBM developerWorks | <a href="https://www.ibm.com/developerworks/java/library/j-jtp1029/index.html">https://www.ibm.com/developerworks/java/library/j-jtp1029/index.html</a></li>
<li>참고[5] 도메인 주도 설계 구현, 반 버논, 에이콘 | <a href="http://www.yes24.com/24/goods/25100510?">YES24</a></li>
</ul>
]]></content:encoded></item><item><title><![CDATA[Java 프로젝트 초기 구성 및 플러그인 (Gradle, Checkstyle, PMD, Findbugs)]]></title><description><![CDATA[<p>Java 프로젝트를 초기 구성하기 위해서 IntelliJ에서 제공하는 새 프로젝트를 활용한다. 하지만 많은 템플릿 중에서도 개인적으로 Gradle을 기반으로 Checkstyle, PMD, Findbugs를 함께 구성해서 사용한다.</p>
<ul>
<li>코딩 스타일 통일</li>
<li>정적 분석으로 빨리 문제점 인지하기</li>
</ul>
<p>이 두가지 목적을 위해서 플러그인을 함께 사용한다. 그리고 Gradle or Maven은 특별히 구분하지 않지만 다양한 시도가 가능한 Gradle을 조금</p>]]></description><link>http://blog.lulab.net/initial-java-project-with-gradle-and-plugins/</link><guid isPermaLink="false">5b7931cd3654b00001e889ce</guid><category><![CDATA[Java]]></category><category><![CDATA[Scaffolding]]></category><category><![CDATA[Gradle]]></category><category><![CDATA[CheckStyle]]></category><category><![CDATA[PMD]]></category><category><![CDATA[FindBugs]]></category><category><![CDATA[SpotBugs]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Sat, 10 Feb 2018 06:03:00 GMT</pubDate><content:encoded><![CDATA[<p>Java 프로젝트를 초기 구성하기 위해서 IntelliJ에서 제공하는 새 프로젝트를 활용한다. 하지만 많은 템플릿 중에서도 개인적으로 Gradle을 기반으로 Checkstyle, PMD, Findbugs를 함께 구성해서 사용한다.</p>
<ul>
<li>코딩 스타일 통일</li>
<li>정적 분석으로 빨리 문제점 인지하기</li>
</ul>
<p>이 두가지 목적을 위해서 플러그인을 함께 사용한다. 그리고 Gradle or Maven은 특별히 구분하지 않지만 다양한 시도가 가능한 Gradle을 조금 더 좋아한다. 하지만 아직도 Groovy 문법은 어색하고 모르겠다.</p>
<p>프로젝트를 시작할 때 가장 중요한 것은 코딩 스타일을 모두 맞추는 것이라고 생각한다. 코딩 스타일은 단순히 체크스타일도 있지만 설계에 관련된 개념도 함께 포함된다고 생각한다. <code>클래스는 Immutable 하게 생성한다</code>를 위해</p>
<ul>
<li>'생성자에서만 파라미터를 받아서 설정한다' 라던지</li>
<li>'변하지 않는 변수에는 모두 final을 붙인다' 라던지</li>
</ul>
<p>이런 식의 코딩 스타일의 통일이 가장 중요하다고 생각한다. 그래서 그러한 기반이 되는 최소한의 툴로 Checkstyle, PMD, Findbugs을 활용한다.</p>
<h2 id="gradlejava">Gradle Java 프로젝트</h2>
<p>Gradle 기반으로 프로젝트를 구성하면 다음과 같은 파일 구조를 가진다.</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/25308042737/in/dateposted-public/" title="Java_Project_Strcture"><img src="https://farm5.staticflickr.com/4621/25308042737_6ecf875a92_c.jpg" width="665" height="800" alt="Java_Project_Strcture"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>build.gradle, settings.gradle 두 개의 파일이 있다. 외부 라이브러리에 대한 의존성을 Maven Repository 등을 이용해서 배포파일을 기반으로 관리하면 문제가 없지만 사내에서 개발할 때는 Core 모듈 등을 코드레벨로 사용하는 경우도 있다. 혹은 한 프로젝트 내에서 모듈을 분리하는 경우에 Gradle의 settings.gradle이 유용하다.</p>
<p>위에 구조에서 gradle, src 등의 구조는 익숙한데 config는 처음 볼 수 있는데 이는 checkstyle을 위한 디렉토리이다. <a href="https://docs.gradle.org/current/userguide/checkstyle_plugin.html">Gradle Checkstyle Plugin</a>을 참고하면 <code>config/checkstyle/checkstyle.xml</code>의 경로에 checktyle을 설정하라고 표시한다.</p>
<h2 id="">정적 분석</h2>
<h3 id="checkstyle">checkstyle</h3>
<p>Checkstyle은 코딩 스타일 규칙을 정의하여 체크해준다. IntelliJ IDEA 플러그인도 있어서 쉽게 코딩 스타일 오류를 찾고 수정할 수 있다. Checkstyle을 처음 사용할 때 가장 좋은 것은 많은 사람들이 사용하는 스타일 규칙이다. Java는 <a href="http://checkstyle.sourceforge.net/google_style.html">Google Checkstyle</a>이 좋다고 생각한다.</p>
<p>개인적으로 <a href="http://checkstyle.sourceforge.net/google_style.html">Google Checkstyle</a>에서 마음에 안 드는 2가지를 수정해서 사용한다.</p>
<ol>
<li>Indent: 2 -&gt; 4 spaces</li>
<li>Import Order: THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###STATIC</li>
</ol>
<p>Indent는 C# 및 golang을 사용하며 4칸 공백이 명확하게 구분이 잘 되서 선호한다. 그리고 Java 개발 시 IntelliJ IDEA를 사용하는데 <a href="http://checkstyle.sourceforge.net/google_style.html">Google Checkstyle</a> Import 구문 순서와 차이가 있어서 IntelliJ IDEA 스타일이 더 마음에 들어서 THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###STATIC을 적용해서 사용한다.</p>
<p>수정한 부분만 표시하면 다음과 같다.</p>
<pre><code>// Indent
&lt;module name=&quot;Indentation&quot;&gt;
    &lt;property name=&quot;basicOffset&quot; value=&quot;4&quot;/&gt;
    &lt;property name=&quot;braceAdjustment&quot; value=&quot;0&quot;/&gt;
    &lt;property name=&quot;caseIndent&quot; value=&quot;4&quot;/&gt;
    &lt;property name=&quot;throwsIndent&quot; value=&quot;8&quot;/&gt;
    &lt;property name=&quot;lineWrappingIndentation&quot; value=&quot;8&quot;/&gt;
    &lt;property name=&quot;arrayInitIndent&quot; value=&quot;4&quot;/&gt;
&lt;/module&gt;

...

// Import Order
&lt;module name=&quot;CustomImportOrder&quot;&gt;
    &lt;property name=&quot;sortImportsInGroupAlphabetically&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;separateLineBetweenGroups&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;customImportOrderRules&quot; value=&quot;THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###STATIC&quot;/&gt;
&lt;/module&gt;
</code></pre>
<p><a href="http://checkstyle.sourceforge.net/google_style.html">Google Checkstyle</a>도 계속 업데이트 되기 때문에 참고하여 자신에게 적합한 스타일로 바꿔 사용하면 좋다.</p>
<h3 id="pmd">pmd</h3>
<p><a href="https://pmd.github.io/">PMD</a>는 코드 분석을 제공하는 도구이다. 문법적으로 오류 가능성이 높은 항목들을 Rule 기반으로 체크해서 알려준다.</p>
<pre><code>.../src/main/java/net/sourceforge/pmd/RuleSet.java:123  These nested if statements could be combined
.../src/main/java/net/sourceforge/pmd/RuleSet.java:231  Useless parentheses.
</code></pre>
<p>이러한 문법적으로 발생 가능한 오류를 체크해주기 때문에 개발자에게 한 번 더 자신이 작성한 코드의 위험성을 인지하게 해준다.</p>
<h3 id="findbugs">findbugs</h3>
<p><a href="http://findbugs.sourceforge.net/">FindBugs</a>는 정적 분석을 제공하는 도구이다.</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/25308122527/in/dateposted-public/" title="FindBugs (1.2.1-dev-20070506) Analysis for jdk1.7.0-b12"><img src="https://farm5.staticflickr.com/4609/25308122527_ee81a4c72c_c.jpg" width="800" height="349" alt="FindBugs (1.2.1-dev-20070506) Analysis for jdk1.7.0-b12"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li>참고: JDK7에 대한 FindBugs 결과 <a href="http://findbugs.cs.umd.edu/demo/jdk7/index.html">http://findbugs.cs.umd.edu/demo/jdk7/index.html</a></li>
</ul>
<h2 id="scaffoldingjava">Scaffolding 이란, 참 편하긴 한데... Java는 어수선?</h2>
<p>웹 프론트엔드 개발을 위해서 react.js, vue.js 등을 공부하면서 Scaffolding 이란 개념을 처음 알게되었다. 물론 Spring도 많은 starter를 제공하여 scaffolding을 제공하고 있다.</p>
<p>Scaffolding이란 일반적인, 혹은 특정한 기술들을 묶어서 사용하기 쉽게 제공해주는 기본 틀과 같은 개념이다. 이런 Scaffolding을 기반으로 프로젝트를 수행하면 처음 프로젝트를 사용하는 구성원이 쉽게 프로젝트에 적응 가능하다는 점이다. Scaffolding이 제공된다는 의미는 일반적으로 사람들이 많이 사용(혹은 협의된) 구조이기 때문에 통용되는 구조라고 생각된다.</p>
<p>물론 다양한 Scaffolding 이 존재하기 때문에 그 중에서 회사, 프로젝트에 가장 적합한 Scaffolding을 찾는 것은 프로그래머 혹은 아키텍트의 역할이라고 생각된다.</p>
<p>아직 자바를 접한지 3년밖에 안되는 뉴비라 아직까지는 좋은 구조를 찾고 있다. 왜 Java는 Scaffolding이 거의 없을까? 그런면에서 Frontend 쪽 생태계는 대단하다는 생각이 든다. Vue, React 등 대부분 이름있는 프레임워크는 다양한 Scaffolding이 지원되는 것이 부럽다.</p>
<p>Java에도 이런 Scaffolding이 많이 생겨나서 참고할 수 있는 구조가 많아지면 좋겠다.</p>
]]></content:encoded></item><item><title><![CDATA[Let's Encrypt를 이용한 무료 https 적용 (CLI가 아닌 ZeroSSL를 활용)]]></title><description><![CDATA[<p><a href="https://letsencrypt.org">Let's Encrypt</a>이라는 무료 Certificate Authority이 있다. <a href="https://letsencrypt.org">Let's Encrypt</a>을 이용하면 무료로 SSL 인증 키를 생성하여 웹에 적용가능하다.</p>
<p>특히 최신 브라우저에서는 HTTPS를 지원하지 않는 경우 안전하지 않은 사이트라는 경고 문구가 뜨고 접속이 불가능한 경우도 있다. 나도 <a href="https://letsencrypt.org">Let's Encrypt</a>를 이용하여 HTTPS 적용을 하려고 하였으나 macOS Server 운영 중인 맥미니에서 인증서를</p>]]></description><link>http://blog.lulab.net/apply-https-by-lets-encrypt-with-zerossl/</link><guid isPermaLink="false">5b7932ef3654b00001e889f2</guid><category><![CDATA[Web Server]]></category><category><![CDATA[SSL]]></category><category><![CDATA[Let's Encrypt]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Sat, 10 Feb 2018 05:01:00 GMT</pubDate><content:encoded><![CDATA[<p><a href="https://letsencrypt.org">Let's Encrypt</a>이라는 무료 Certificate Authority이 있다. <a href="https://letsencrypt.org">Let's Encrypt</a>을 이용하면 무료로 SSL 인증 키를 생성하여 웹에 적용가능하다.</p>
<p>특히 최신 브라우저에서는 HTTPS를 지원하지 않는 경우 안전하지 않은 사이트라는 경고 문구가 뜨고 접속이 불가능한 경우도 있다. 나도 <a href="https://letsencrypt.org">Let's Encrypt</a>를 이용하여 HTTPS 적용을 하려고 하였으나 macOS Server 운영 중인 맥미니에서 인증서를 발급받지 못하였다. 절차대로 하였으나 끊임 없는 오류가 발생해서 포기하고 <a href="https://zerossl.com">ZeroSSL</a>를 통해서 <a href="https://letsencrypt.org">Let's Encrypt</a>의 인증서를 발급받았다.</p>
<h1 id="letsencryptzerossl">Let's Encrypt로 발급이 힘든 사람은 ZeroSSL로!</h1>
<p>ZeroSSL 주소: <a href="https://zerossl.com">https://zerossl.com</a></p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/28398889499/in/album-72157667239369669/" title="Apply_SSL_Encryption_01"><img src="https://farm5.staticflickr.com/4769/28398889499_8e2530fc49_c.jpg" width="800" height="441" alt="Apply_SSL_Encryption_01"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>Wizard를 잘 만들어서 사이트에 접속하여 차례대로 입력하면 인증서를 성공적으로 발급받을 수 있다. 발급받은 인증서를 파일로 저장하여 macOS Server에 등록하면 다음과 같이 적용된다.</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/40146335162/in/album-72157667239369669/" title="Apply_SSL_Encryption_02"><img src="https://farm5.staticflickr.com/4748/40146335162_2c49204f01_c.jpg" width="800" height="505" alt="Apply_SSL_Encryption_02"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>이제 등록된 인증서를 이용하여 웹 서비스에서 사용만 하면된다. 참고로 <a href="https://letsencrypt.org">Let's Encrypt</a> 인증서는 3개월의 유효기간을 가지고 있기 때문에 주기적으로 다시 발급받도록 한다.</p>
<h1 id="">그 외의 서비스</h1>
<p>ZeroSSL 외에 사용하기 편한 서비스로는 <a href="http://sslforfree.com">http://sslforfree.com</a> 이 있다.</p>
<p>이러한 서비스는 private.key를 외부 서비스에 upload or 생성하기 때문에 아무래도 보안적으로 걱정이 있다면 다른 방법을 고민하는 것이 좋다고 생각된다.</p>
]]></content:encoded></item><item><title><![CDATA[나만의 블로그를 위한 Hugo 설치 및 기본 설정]]></title><description><![CDATA[<p>Go라는 언어에 관심이 생기고 현재 블로그를 굳이 특정 플랫폼이 아닌 Static Site로 가볍게 제공하고 싶다는 마음이 생겼다. 그리고 내가 손쉽게 수정 &amp; 활용 가능한 Static Web Generator 플랫폼으로 <a href="https://gohugo.io/">Hugo</a>를 관심있게 살펴보았다. 그 결과 지금의 블로그를 구성하며 정리한 설치/기본 설정 방법이다.</p>
<p>본 글은 <code>Hugo를 이용하여 블로그를 구성</code>하는 방법이다.</p>]]></description><link>http://blog.lulab.net/install-hugo-and-configure-for-your-blog/</link><guid isPermaLink="false">5b7933d93654b00001e88a07</guid><category><![CDATA[Blog]]></category><category><![CDATA[Hugo]]></category><category><![CDATA[Theme]]></category><category><![CDATA[Go]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Mon, 05 Feb 2018 13:27:00 GMT</pubDate><content:encoded><![CDATA[<p>Go라는 언어에 관심이 생기고 현재 블로그를 굳이 특정 플랫폼이 아닌 Static Site로 가볍게 제공하고 싶다는 마음이 생겼다. 그리고 내가 손쉽게 수정 &amp; 활용 가능한 Static Web Generator 플랫폼으로 <a href="https://gohugo.io/">Hugo</a>를 관심있게 살펴보았다. 그 결과 지금의 블로그를 구성하며 정리한 설치/기본 설정 방법이다.</p>
<p>본 글은 <code>Hugo를 이용하여 블로그를 구성</code>하는 방법이다.</p>
<h1 id="hugo">왜 Hugo를 골랐을까?</h1>
<p>Static website를 만드는 다양한 프로그램 중 <a href="https://jekyllrb.com/">Jekyll</a> vs <a href="https://gohugo.io/">Hugo</a>이 유명하다. 특히 Jekyll은 유명세만큼 폭 넓은 사용,  다양한 테마, 풍부한 설명(공식 설명, 블로그 포스트)들이 존재한다.</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/28718121221/in/dateposted-public/" title="Jekyll-vs-Hugo"><img src="https://c6.staticflickr.com/8/7537/28718121221_5e69a91948_b.jpg" width="800" alt="Jekyll-vs-Hugo"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<ul>
<li><a href="https://www.staticgen.com">https://www.staticgen.com</a> 캡쳐 화면, 2016-08-06</li>
<li>Jekyll 위엄 vs Hugo의 그럴싸한 성장율(?)</li>
</ul>
<p>Jekyll의 경우, 너무나 유명해서 레퍼런스는 많이 존재하지만 개인적으로 Ruby, Gem, Bundler에 대한 무지(무식)로 인해 항상 문제가 생겼다. 실제로 원하는 테마 적용 및 커스텀, 블로그 글 작성 중 오류에 헤매다가 지쳐서 포기하였다. 그래서 한창 재미있게 보고있는 Go 언어로 만들어진 Hugo를 선택하였다. 순수하게 그냥 재미있어 보여서 선택하였다. (이유가 조금 부끄럽다...^^;) 그리고 Elastic 제품군으로 나온 <a href="http://www.elastic.co/products/beats">Beats</a>도 Go로 되어있기 때문에 Beats를 프로젝트에서 활용할 때 도움이 된다는 자기 합리화 과정을 거쳐 최종적으로 앞으로 블로그는 Hugo로 작성하기로 하였다.</p>
<p>사실 처음부터 원하는 기능 간단했다.</p>
<ul>
<li>Markdown으로 글 작성</li>
<li>Git을 이용하여 글을 보관 및 버전 관리</li>
<li>Go 언어를 이용한 프로그램 사용 및 수정</li>
</ul>
<p>이러한 목적을 정확히 부합하는 것이 Hugo 였다. 이 외에도 다른 제품에 비해 성능이 좋다라는 블로그 글도 있었으나 개인적으로 성능차이를 느낄 정도로 많은 문서가 있지 않기 때문에 결정에 큰 요인은 되지 않았다. 일단 아래의 내용을 보기 전에 2분만 투자해서 <a href="https://gohugo.io/overview/quickstart/">https://gohugo.io/overview/quickstart/</a> 중간에 있는 동영상을 보면 아래의 글을 볼 필요도 없을 정도로 쉽게 동영상 설명이 있다.</p>
<h1 id="hugo">Hugo 설치</h1>
<p>Go는 당연히 설치하고 Hugo도 설치한다.</p>
<ul>
<li>Go 설치: <a href="https://golang.org">https://golang.org</a></li>
<li>Hugo 설치: <code>brew install hugo</code></li>
</ul>
<p>맥을 사용하는 입장에서 이런 제품을 설치할 때 제일 편한 것이 <a href="http://brew.sh/index_ko.html">Brew</a> 이다! Brew Cask도 최고!</p>
<h1 id="hugo">Hugo를 이용한 사이트(블로그) 생성</h1>
<p>Hugo를 이용하여</p>
<ol>
<li>새로운 사이트를 생성하고</li>
<li>테마를 적용한 뒤</li>
<li>마음껏 활용(글을 작성)</li>
</ol>
<p>하는 순서로 사용한다.</p>
<h2 id="hugo">Hugo 사이트 생성</h2>
<p>애초에 블로그를 사용하기 위해서 Hugo를 선택하였으니 다음의 명령어로 블로그를 위한 새로운 사이트를 생성한다.</p>
<pre><code>$ hugo new site blog.lulab.net
</code></pre>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/28180691743/in/dateposted-public/" title="Hugo 파일 구조"><img src="https://c8.staticflickr.com/9/8778/28180691743_bff5b7c487.jpg" width="326" height="237" alt="Hugo 파일 구조"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>위와 같이 디렉토리가 구성되는데 주요한 디렉토리는 다음과 같다.</p>
<ul>
<li>content: 글이 작성되는 디렉토리</li>
<li>themes: 테마 디렉토리 (처음 설치 시에는 수동으로 생성 필요)</li>
<li>config.toml: Hugo 설정 파일, 테마 및 주소, 사용자 정보 등을 설정</li>
<li>그 외 참고: <a href="https://gohugo.io/overview/source-directory/">https://gohugo.io/overview/source-directory/</a></li>
</ul>
<h2 id="hugo">Hugo 테마 적용</h2>
<p>자신에 선택한 테마에 설치 방법들이 작성(예: <a href="https://github.com/lubang/hugo-hello-programmer-theme">https://github.com/lubang/hugo-hello-programmer-theme</a>)되어 있다.</p>
<p>간단하게 다음의 명령으로 테마를 다운로드 받는다.</p>
<pre><code>$ cd themes
$ git clone https://github.com/lubang/hugo-hello-programmer-theme
</code></pre>
<p>그리괴 hugo 설정에 테마를 적용하기 위해 <code>./config.toml</code> 수정한다. 아래는 (Hello Programmer 테마)[<a href="https://github.com/lubang/hugo-hello-programmer-theme">https://github.com/lubang/hugo-hello-programmer-theme</a>] 테마 적용 예제이다.</p>
<pre><code>// config.toml
baseURL = &quot;https://blog.lulab.net/&quot;
languageCode = &quot;kr-ko&quot;
title = &quot;$HELLO_PROG^&quot;
theme = &quot;hugo-hello-programmer-theme&quot;

disqusShortname = &quot;XXXXXXXXXXXXXXX&quot;

googleAnalytics = &quot;UA-XXXXXXXXXX-X&quot;

paginate = 7

[author]
    name = &quot;자신의 이름 혹은 아이디&quot;
    email = &quot;이메일 주소&quot;
</code></pre>
<p>다른 테마를 적용할 때는 꼭 테마에서 제공하는 설정을 확인하도록 한다.</p>
<h2 id="hugo">Hugo 글 생성</h2>
<p>테마에서 제공되는 archetypes(기본 글 구조)를 나의 사이트에 적용한다. <code>archetypes/default.md</code> 파일을 다음과 같이 수정한다.</p>
<pre><code>---
title: &quot;{{ replace .Name &quot;-&quot; &quot; &quot; | title }}&quot;
date: {{ .Date }}
categories: []
tags: []
draft: true
---
</code></pre>
<p>Hugo 에서 글 생성은 <code>new</code> 라는 키워드를 이용하여 생성한다.</p>
<pre><code>$ hugo new programming/java.md
</code></pre>
<p>위의 명령은 programming이라는 디렉토리 아래 java.md 라는 Markdown 파일을 생성하는 명령이다. 이렇게 생성된 글은 위의 archetypes으로 자동 생성된다.</p>
<pre><code>---
title: &quot;Java&quot;
date: 2018-02-04T16:04:46+09:00
categories: [&quot;essay&quot;]
tags: [&quot;hugo&quot;, &quot;blog&quot;, &quot;theme&quot;, &quot;jekyll&quot;, &quot;hello-programmer&quot;, &quot;lubang&quot;]
---

여기에 글을 적어요~~
</code></pre>
<p>여기서 중요한 부분은 <code>draft</code>이다. draft = true 로 되어 있는 경우, 사이트로 Publishing되지 않는다. draft는 글 작성 중 사용하고 작성이 완료된 후, 출판될 때는 간단하게 해당 줄을 삭제하여 Publishing 한다.</p>
<h2 id="hugo">Hugo 사이트 미리보기</h2>
<p>이제 작성한 글과 Hugo를 이용하여 생성한 결과가 어떻게 되는지 미리보기가 필요한 순간이다.</p>
<pre><code>$ hugo server -D
</code></pre>
<p>위 명령어는 hugo server를 시작하여 지금 작성된 글을 보여준다. 글(.md) 파일을 수정하면 자동으로 갱신하여 제공된다. 기본 주소는 <code>http://localhost:1313</code>에서 미리보기를 확인할 수 있다.</p>
<img src="https://github.com/lubang/hugo-hello-programmer-theme/raw/master/images/screenshot.png" width="100%">
<ul>
<li>LUBANG BLOG 예제 (<a href="http://localhost:1313">http://localhost:1313</a> 로 접속한 모습)</li>
</ul>
<h2 id="hugostaticfiles">Hugo 배포파일(Static files) 생성하기</h2>
<p>Hugo를 처음 사용한 목적은 Static WebSite를 생성하여 Apache로 배포하기 위함이다. 드디어 그 목적을 이루기 위해서 배포파일을 생성한다.</p>
<pre><code>$ hugo
</code></pre>
<p>위와 같이 hugo만 입력하면 <code>public</code> 디렉토리로 배포 파일을 생성된다. 실제로 웹서버에 업로드 하는 경우에는 public에 생성된 파일을 복사하면 끝이다.<br>
이 외에도 <code>hugo</code> 는 다양한 명령어들을 제공(<a href="https://gohugo.io/commands/hugo/">https://gohugo.io/commands/hugo/</a>)하고 있다.</p>
<h1 id="hugo">Hugo에 대한 개인적인 느낌</h1>
<p>Hugo는 Go라는 깔끔하고 간결한 언어 기반의 Static Web을 위한  다양한 기능을 제공해주는 프로그램이다.</p>
<ul>
<li>장점
<ul>
<li>아직 v0.3X 이라는 낮은 버전이지만 뛰어난 성능</li>
<li>처음 접해도 쉬운 사용법</li>
</ul>
</li>
<li>단점
<ul>
<li>미흡한 Theme 종류 (<a href="https://github.com/lubang/hugo-hello-programmer-theme">Hello Programmer 테마</a> 좋아요! 두 번 쓰세요!... 부끄럼~)</li>
<li>낮은 인지도 (Go 언어의 아직 낮은 인지도, Hugo 자체도 아직 많이 모름)</li>
</ul>
</li>
</ul>
<p>Hugo를 사용하였을 때 아쉬운 점은 테마였다. 아직 Jekyll에 비해 수적으로 질적으로 부족하다. 많은 개발자/디자이너들이 Hugo에 대한 관심과 지원이 있으면 더 좋은 프로그램이 될 수 있을 것으로 생각된다.</p>
<p>Go 언어를 공부하며 Hugo의 구조 및 Theme를 개인적으로 만들어서 Hugo의 발전에 조금이라도 기여해야겠다. 아직 Go도 모르는데 Theme 제작까지 가능할지 모르겠지만 이렇게 글을 써서라도 인지도를 올리는 것도 큰 도움이 되길 바란다.</p>
<hr>
<p>작년에 적은 글인데 이번에 테마를 업데이트 하면서 다시 업데이트 해보았다. 그래서 약간 어색한 부분이 있을지도?<br>
어쩌튼 작년에 결심했던 Theme를 개인적으로 만들어야겠다 라는 마음을 실제로 구체화해서 <a href="https://github.com/lubang/hugo-hello-programmer-theme">Hello Programmer 테마</a>를 만들었다.</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/31317737765/in/dateposted-public/" title="hugo-hello-programmer-theme"><img src="https://farm6.staticflickr.com/5703/31317737765_6f9b9c430f_c.jpg" width="800" height="438" alt="hugo-hello-programmer-theme"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>
<p>그래서 셀프 홍보 겸 글에서 사용되는 테마 예제도 <a href="https://github.com/lubang/hugo-hello-programmer-theme">Hello Programmer 테마</a>로 작성하였다. 음, 그래도 괜찮은 편인데 많이 사랑해주세요!!</p>
]]></content:encoded></item><item><title><![CDATA[Archer C7(AC1750) 펌웨어 복구하기 with OSX tftp server]]></title><description><![CDATA[<p>Archer C7를 구매하고 펌웨어 업데이트를 하는데 US Firmware가 WIFI Coverage가 좋다는 말에 혹해서 그만 US Firmware를 설치했다. 하지만 US Firmware의 경우 Lock이 걸려있어서 다른 펌웨어를 설치하기 위해서 원복을 해야만 했다.</p>
<ul>
<li>펌웨어 원복은 Recovery 모드로 C7을 다시 부팅</li>
<li>TFTP를 이용하여 펌웨어를 자동 설치</li>
</ul>
<p>위 과정을 통해 수행된다. 대부분의 사람들은 DD-WRT 펌웨어에서</p>]]></description><link>http://blog.lulab.net/restore-firmware-of-archer-c7-router-with-osx/</link><guid isPermaLink="false">5b7931743654b00001e889ca</guid><category><![CDATA[Router]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Sun, 28 Jan 2018 04:20:00 GMT</pubDate><content:encoded><![CDATA[<p>Archer C7를 구매하고 펌웨어 업데이트를 하는데 US Firmware가 WIFI Coverage가 좋다는 말에 혹해서 그만 US Firmware를 설치했다. 하지만 US Firmware의 경우 Lock이 걸려있어서 다른 펌웨어를 설치하기 위해서 원복을 해야만 했다.</p>
<ul>
<li>펌웨어 원복은 Recovery 모드로 C7을 다시 부팅</li>
<li>TFTP를 이용하여 펌웨어를 자동 설치</li>
</ul>
<p>위 과정을 통해 수행된다. 대부분의 사람들은 DD-WRT 펌웨어에서 원복을 하는 과정을 설명한다. 물론 동일한 과정이지만 명령 구문이 달라져서 정리해본다.</p>
<p>아래의 '참고 사이트' 중 [1]을 보고 과정을 파악한 다음, 참고 [2]의 주소에서 각 공유기 버전에 맞는 과정(명령)을 사용하면 된다. 나의 경우에는</p>
<ul>
<li>Archer C7 (AC1750) v2</li>
<li>맥북 (OSX 기준)</li>
</ul>
<p>를 기준으로 설명한다. 특히 윈도우에서 재설치 방법은 많은데 맥북을 이용한 펌웨어 원복은 없기 때문에 나중이라도 다시 설치할 때 참고하면 좋다.</p>
<h1 id="withtftp">펌웨어 재설치 방법 (with tftp)</h1>
<h2 id="firmware">Firmware 생성하기</h2>
<p>먼저 내가 원복할 펌웨어를 boot를 제거하여 생성한다.</p>
<pre><code>$ dd if=ArcherC7v2_kr_3_15_2_up_boot(170215).bin of=ArcherC7v2_tp_recovery.bin skip=257 bs=512
</code></pre>
<p>ArcherC7v2_tp_recovery.bin 라는 이름은 반드시 동일하게 작성한다. 공유기 종류 및 버전에 따라 달라질 수 있기 때문에 아래의 참고[2]를 확인한다.</p>
<h2 id="macosxtftp">Mac OSX의 tftp 확인하기</h2>
<pre><code>$ apropos tftp
tftp(1) - trivial file transfer program
tftpd(8) - DARPA Internet Trivial File Transfer Protocol server
</code></pre>
<p>첫 번째 명령을 통해서 맥에 tftp 커맨드가 존재하는지 확인한다. 2, 3번째줄과 같이 표시된다면 tftp가 존재하기 때문에 다음과 같이 tftp를 시작한다.</p>
<h2 id="macosxtftp">Mac OSX에서 tftp 시작하기</h2>
<pre><code>$ sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist
</code></pre>
<p>위의 명령으로 tftp를 시작한다.</p>
<pre><code>$ netstat -na |grep \*.69
</code></pre>
<p>위의 명령은 tftp가 동작 중인지 확인하는 명령어다.</p>
<h2 id="firmware">Firmware 복사하기</h2>
<p>OSX의 기본 tftp 경로는 <code>/private/tftpboot</code> 이다. 다음의 명령어를 참고해 펌웨어를 복사한다.</p>
<pre><code>$ cp ~/ArcherC7v2_tp_recovery.bin /private/tftpboot
</code></pre>
<h2 id="firmware">네트워크 설정 및 Firmware 설치하기</h2>
<ol>
<li>192.168.1.66로 IP 설정 (tfpt 접속은 기존 설치된 펌웨어에 따라 다름)
<ul>
<li>Before 2014-09 (3.13.34) stock bootloader (firmware) : 192.168.1.66 and ArcherC7v2_tp_recovery.bin</li>
<li>After 2014-09 (3.14.1) stock bootloader (firmware) : 192.168.0.66 and ArcherC7v3_tp_recovery.bin</li>
<li>After 2015-03 (3.14.2) stock bootloader (firmware) : 192.168.0.66 and ArcherC7v2_tp_recovery.bin</li>
</ul>
</li>
<li>공유기 종료</li>
<li>공유기 WPS/Reset 버튼을 누르면서 Power On</li>
<li>공유기 불이 깜빡이며 재부팅까지 기다리기</li>
<li>공유기 재부팅이 완료된 후 <a href="http://192.168.0.1">http://192.168.0.1</a> 접속</li>
<li>펌웨어 버전이 원복됨 확인</li>
</ol>
<h2 id="macosxtftp">Mac OSX에서 tftp 종료하기</h2>
<pre><code>$ sudo launchctl unload -F /System/Library/LaunchDaemons/tftp.plist
</code></pre>
<p>펌웨어 업데이트가 끝났다면 이제 tftp를 종료한다.</p>
<h1 id="">참고 사이트</h1>
<ul>
<li>참고[1] <a href="http://www.omani.pe.kr/?p=466">http://www.omani.pe.kr/?p=466</a></li>
<li>참고[2] <a href="https://wiki.openwrt.org/toh/tp-link/tl-wdr7500">https://wiki.openwrt.org/toh/tp-link/tl-wdr7500</a></li>
<li>참고[3] <a href="https://forum.dd-wrt.com/phpBB2/viewtopic.php?p=932392#932552">https://forum.dd-wrt.com/phpBB2/viewtopic.php?p=932392#932552</a></li>
</ul>
]]></content:encoded></item><item><title><![CDATA[React.js에서 Vue.js로 기술스택 변경 이유]]></title><description><![CDATA[<p>React를 사용하다 Vue로 넘어간 글에 대한 접근이 가장 높아서 예전에 적었던 글을 업데이트 해서 다시 올린다. 검색 키워드로 가장 높다니, 실제 업무는 Backend인데... 재미있다 :) 원 글이 2016년 초에 작성되었으니 약 2년 조금 안되게 vue를 사용하면서 느낀 점을 기존 글에 추가로 작성하였다.</p>
<hr>
<p>React.js를 이용하여 웹 서비스를 개발하던 중, Virtual DOM의</p>]]></description><link>http://blog.lulab.net/why-i-move-to-vue-js-from-react-js/</link><guid isPermaLink="false">5b7934203654b00001e88a0e</guid><category><![CDATA[Vue.js]]></category><category><![CDATA[React.js]]></category><category><![CDATA[Javascript]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Sat, 23 Dec 2017 04:11:00 GMT</pubDate><content:encoded><![CDATA[<p>React를 사용하다 Vue로 넘어간 글에 대한 접근이 가장 높아서 예전에 적었던 글을 업데이트 해서 다시 올린다. 검색 키워드로 가장 높다니, 실제 업무는 Backend인데... 재미있다 :) 원 글이 2016년 초에 작성되었으니 약 2년 조금 안되게 vue를 사용하면서 느낀 점을 기존 글에 추가로 작성하였다.</p>
<hr>
<p>React.js를 이용하여 웹 서비스를 개발하던 중, Virtual DOM의 장점을 느끼기 이전에 지속적으로 Virtual DOM을 위해 너무 많은 코드를 남발하고 있다는 점이 느꼈다. 또, 의미없는 코드(className)를 너무 많이 만들어가는 저의 모습을 보며 회의감을 React로부터 느끼고 있을 때, Vue.js를 잠깐 살펴볼 기회가 생겼다.</p>
<blockquote>
<p>(1년 뒤) 초창기 react에 대한 느낌이었지만 사실 지금도 className은 아직도 매우 불만이다.</p>
</blockquote>
<p>그리고 단 한장의 문장 <code>DOM을 직접 갱신(hot update)할 때는 Vue.js가 React에 비해 최적화하지 않고도 훨씬 빠르게 동작한다</code>  라는 글(<a href="http://vuejs.org/guide/comparison.html">http://vuejs.org/guide/comparison.html</a>)을 보고 React.js 로 구현되어 있던 서비스를 Vue.js 로 변경하기로 마음을 먹었다.</p>
<p>React.js는 Virtual DOM이 큰 장점이지만 개인적으로는 FLUX 패턴과 이를 구현한 Redux를 너무 좋아했다. 드디어 UI도 일관된 패턴으로 구현할 수 있다는 것이 너무 좋아서 Vue.js에도 이러한 패턴을 구현한 라이브러리가 있지 않을까? 라는 생각을 하고 검색하였는데 기존에 사용하던 Redux를 그대로 사용할 수도 있고 Vuex(<a href="http://vuex.vuejs.org/">http://vuex.vuejs.org/</a>) 라는 Offical Library가 존재하였다.</p>
<blockquote>
<p>(1년 뒤) 솔직하게 말하자만 그 당시 react를 잘 사용하지 못해서 불필요한 이벤트 발생이 많았다는 생각도 든다. 지금 react 와 vue를 고르라면 className 외에는 기술적인 차이점은 없다고 생각된다. 하지만 vue는 아주 좋은 3rd-library들(vuex, vue-router 등)이 너무 만족스럽다. react에도 redux 등이 있지만 개인적으로는 vuex가 참 맘에 든다. 버전업이 될 수록 좋아진다!</p>
</blockquote>
<p>새 부대에는 새 술이라는 명언을 가슴에 새기고 큰 맘 먹고 모든 개발 환경을 React.js에서 Vue.js로 변환 작업을 수행하다. 사실, 처음으로 React + Redux를 기반으로 구현한 서비스라서 중간 중간 숨어있는 멍청함을 개선하면서 변환 작업을 하였더니  딱 2주(Vue.js 학습 + 변환 작업)가 소요되었다.</p>
<blockquote>
<p>(1년 뒤) react vs vue로 처음 뭘 사용해볼까? 라고 생각하는 분들이 많은 것 같다. 사내에서도 뭐가 좋을까라고 하는 말을 들으면 지금은 그냥 주변에 react, vue를 사용한 사람이 있다면 그 사람이 쓰는 것 배우라고 하고 싶다. 처음에 누가 살짝 개념만 잘 잡아줘도 정말 배우기 좋고, 쓰기 좋다.</p>
<p>하지만 나처럼 홀로(vue를 공부할 때 회사는 웹 개발을 하지 않았다. OTL) 스터디를 할 목적이라면 vue를 적극적으로 추천한다. OpenSource 문서는 이렇게 써야한다! 라는 생각이 들 정도로 지금봐도 잘 정리되어 있다.</p>
</blockquote>
<p>대략적인 감을 위해서 의미는 없지만 Vue.js로 변환한 코드(Js만 카운트)는 3000 라인 정도이다. React.js일 때는 4500 라인 정도였는데 Vue.js로 변환하면서 불필요한 코드가 많이 제거되었다. 리팩토링을 하면서 약 500라인 정도는 제거한 것 같다.</p>
<p>이 정도면 사용하다가 다시 React.js로 돌아가도 부담이 없을 것 같다. 당연히 더 큰 프로젝트면 심사숙고 해야한다.</p>
<blockquote>
<p>(1년 뒤) react 초기 버전에서 vue 1.x로 변경했을 때 경험이다. 지금은 vue 2.x가 되면서 react와 구현적인 측면에서는 매우 비슷한 구조를 가지기 때문에 더 빠르지 않을까 생각한다.</p>
</blockquote>
<hr>
<p>개인적으로 사용하면 느낀 Vue.js에 대한 장/단점이다.</p>
<h1 id="vuejs">Vue.js 장점</h1>
<ul>
<li>취향 저격 (개인적인 취향임!)
<ul>
<li>.vue 파일 한 개로 template, script, style을 하나의 컴포넌트로 구성할 수 있다는 점</li>
</ul>
</li>
<li>편리한 Vue-cli
<ul>
<li>vue init webpack new-project : 명령어 하나로 생성하는 프로젝트 구성</li>
<li>webpack, lint, mocha 등의 설정이 된 상태에서 개발을 한다는 것 자체만으로도 너무 만족</li>
</ul>
</li>
<li>친절한 개발자(Evan You)
<ul>
<li><a href="http://vuejs.org">http://vuejs.org</a> 에 작성된 글만으로도 충분한 레벨의 설명</li>
<li>Offical Library 를 제공하여 필요한 라이브러리 선택의 고민을 최소화 해주고, vue.js 와의 연동도 엄청 잘된다는 장점 (Vuex 개발 도구는 강추!)</li>
</ul>
</li>
</ul>
<h1 id="vuejs">Vue.js 단점</h1>
<ul>
<li>낮은 인지도
<ul>
<li>지나다니며 몇 번 보았지만 크게 관심을 가지진 못함</li>
</ul>
</li>
<li>적은 3rd-party 라이브러리
<ul>
<li>인지도가 낮은 라이브러리의 최대 단점</li>
<li>여기서의 3rd-party 라이브러리는 Vue.js로 만들어진 컴포넌트를 의미</li>
</ul>
</li>
<li>적은 Reference
<ul>
<li>누구에게 무엇을 물어봐야할지, 그래도 외국 포럼(<a href="http://forum.vue.js">http://forum.vue.js</a>)은 활성화되어 보임. 한국 포럼도 많은 발전이 있길 기원합니다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>(1년 뒤) 아.. vue.js 단점이었던 낮은 인지도는 이젠 사라졌다. gitlab도 vue를 사용하고 Laravel도 vue를 기본 지원하는 모습을 보며 굳굳을 외쳤다. 그리고 Vue.js 에 대한 서적도 한국어로 출간되고 너무나 좋다! 지금은 vue만 사용한다.</p>
</blockquote>
<p>만약 Vue.js를 사용하기로 결정하였다면 기초적인 Vue.js의 특징과 Life-cycle 정도만 이해하면 React.js 를 사용하던 사람들은 매우 쉽게 적응할 수 있다.</p>
<p>또 개인적인 경험으로는 React.js에서 Vue.js로 변환은 Vue 가이드 문서(<a href="https://vuejs.org/guide/">https://vuejs.org/guide/</a>)의 내용을 조금만 살펴보면 Life-cycle 및 몇 가지 특징들만 주의하면 쉽게 변환이 가능하다.</p>
<p>기존에 FLUX 패턴(특히 Redux)으로 구현된 경우에는 매우 쉽게 변환이 진행될 것이라고 생각된다. Vuex를 이용한다면 90% 이상 동일한 패턴 &amp; 코드를 활용할 수 있고 Vuex Tool을 이용하여 Redux Tool과 동일한 기능을 수행할 수 있다. Redux가 좋다면 그대로 사용도 가능하다. 실제 개발 중 디버깅 및 확인을 위해서 사용할 때, Redux Tool이 더 편리했고 Vuex Tool은 빨랐다. Vuex Tool도 버전이 향상되면 좀 더 편리해질 것으로 생각된다.</p>
<blockquote>
<p>(1년 뒤) 지금의 Vue.js devtools은 너무나 좋아져서 완전 만족이다. 필요한 기능을 다 들어있다.</p>
</blockquote>
<p>Vue.js가 장/단점을 가지고 있지만 현재 활용되고 있는 라이브러리 중 잘 만들어졌고 좋은 라이브러리임은 분명하다. 그리고 개인적으로 느낀 성능 향상도 분명히 존재한다. 하지만 회사의 기술스택과 관련된 부분이기 때문에 그 가이드를 따르는게 더 중요하다고 생각한다.</p>
<p>나의 경우에는 제안이 가능한 부분이 있기 때문에 적극적으로 vue를 추천한다. :)</p>
<p>업무에 적용하기 이전에 Vue.js를 개인 프로젝트 혹은 스터디 용도로 사용하면서 공유 &amp; 고민하는 것도 좋을 것 같다. 개인적으로도 vue.js + golang 으로 간단한 서비스를 만들면서 계속 공부할 예정이다.</p>
<blockquote>
<p>(1년 뒤) vue.js + golang으로 간단한 서비스를 만들었다. 결국 <code>모바일 청첩장</code>, <code>사내 식단 알리미</code>를 만들었다. 두 개의 서비스를 만들며 다시 느꼈지만 역시 vue는 참 편하다.</p>
<p>그리고 웹서비스를 개발하는 Backend 개발자라면 간단한 관리 화면을 위해 배울만한 최고의 라이브러리라고 생각한다. 당연히 이와 함께 es6 + webpack을 함께 공부해야... 쿨럭, 넘 많군. 그래도 한 번쯤 해보길 추천한다.</p>
</blockquote>
]]></content:encoded></item><item><title><![CDATA[개인 목적으로 Confluence 구축하기 (with Docker)]]></title><description><![CDATA[<p>Atlassian 제품을 처음 쓸 때는 <code>오, 괜찮네.</code>, <code>으, 느려</code>, <code>아, 그래도 참 좋았는데</code>라는 생각을 주는 제품이 많다. JIRA, Confluence, Stash, 그리고 Source. Confluence를 사용하다 다른 Wiki 제품을 사용해보았는데 역시 참 좋았다.</p>
<ul>
<li>Space, Permission 관리</li>
<li>캡쳐화면 붙여넣기 &amp; 편리한 첨부파일 업로드</li>
<li>다양한 Plugins</li>
<li>합리적인 가격 ($10, 개인, 소규모로 쓰기에 충분하다)</li></ul>]]></description><link>http://blog.lulab.net/install-personal-confluence-with-docker/</link><guid isPermaLink="false">5b78ff3a3654b00001e8899d</guid><category><![CDATA[ALM]]></category><category><![CDATA[Confluence]]></category><category><![CDATA[WIKI]]></category><category><![CDATA[Atlassian]]></category><category><![CDATA[Docker]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Wed, 20 Dec 2017 04:56:00 GMT</pubDate><content:encoded><![CDATA[<p>Atlassian 제품을 처음 쓸 때는 <code>오, 괜찮네.</code>, <code>으, 느려</code>, <code>아, 그래도 참 좋았는데</code>라는 생각을 주는 제품이 많다. JIRA, Confluence, Stash, 그리고 Source. Confluence를 사용하다 다른 Wiki 제품을 사용해보았는데 역시 참 좋았다.</p>
<ul>
<li>Space, Permission 관리</li>
<li>캡쳐화면 붙여넣기 &amp; 편리한 첨부파일 업로드</li>
<li>다양한 Plugins</li>
<li>합리적인 가격 ($10, 개인, 소규모로 쓰기에 충분하다)</li>
</ul>
<p>무엇보다도 가성비가 최고이다. $10로 이렇게 편리한 툴을 구매할 수 있다는 사실이 너무나 좋다.</p>
<h1 id="confluence">Confluence 구축</h1>
<p>MacMini에 Docker를 기반으로 구축하였다.</p>
<ul>
<li>MacMini Late 2012</li>
<li>CPU 2.5GHz Intel Core i5</li>
<li>RAM 4GB</li>
</ul>
<p>몇 년 전, OSX에 직접 JIRA, Confluence, Stash를 구매하여 개인적으로 설치하여 사용하였을 땐 설치부터 Proxy 설정까지 너무 어려운 것들이 많았다. 특히 개인 용도인데 톰캣 서버를 올리고 운영하는 부담이 너무 컸다. 하지만 이젠 Docker Container로 한 방에 샥~ 구축이 가능하다.</p>
<h2 id="docker">Docker 구성</h2>
<p>Confluence를 Production으로 사용하기 위한 Docker 구성은 다음과 같다.</p>
<ul>
<li>confluence/confluence-server (name: confluence)</li>
<li>library/postgres (name: confluence-postgres)</li>
</ul>
<p>confluence와 postgres의 data는 volume으로 폴더 별로 연결하였다. data 폴더들은 NAS에 백업하여 혹시 모를 위험에 대비하였다. (NAS도 몇 번 날라가서 자료 백업에 민감하다 :( )</p>
<h2 id="dockerconfluence">Docker에 Confluence 설치하기</h2>
<p>Apache Web Server Proxy 구성해서 도메인 연결하여 사용하기 때문에 Catalina Connector Proxy 설정이 추가된 명령어 구문이다.</p>
<pre><code>// PostgreSQL Docker 생성
$ docker run -v {Confluence Data Host 폴더}:/var/lib/postgresql/data --name=&quot;confluence-postgres&quot; -d -e POSTGRES_PASSWORD='{root암호}' postgres


// PostgreSQL Docker 인스턴스에 접속 (사용자 &amp; DB 추가)
# psql -U postgres
psql (10.1)
Type &quot;help&quot; for help.

postgres=# create role {사용자ID} with login password '{사용자PW}' valid until 'infinity';
CREATE ROLE
postgres=# create database confluence with encoding='utf-8' owner={사용자ID} connection limit=-1;
CREATE DATABASE
postgres=# \q


// Confluence Docker 생성
$ docker run -v {Confluence Data Host 폴더}:/var/atlassian/application-data/confluence --name=&quot;confluence&quot; --link confluence-postgres:confluence-db -d -e CATALINA_CONNECTOR_PROXYNAME='{도메인주소}' -e CATALINA_CONNECTOR_PROXYPORT='443' -e CATALINA_CONNECTOR_SCHEME='https' -p 8090:8090 -p 8091:8091 atlassian/confluence-server
</code></pre>
<p>위와 같이 Docker를 구성하고 연결한 도메인으로 접속하여 Confluence를 설정한다. DB 설정은 다음과 같다.</p>
<ul>
<li>DB HOST: confluence-db</li>
<li>DB ID: {사용자ID}</li>
<li>DB PW: {사용자PW}</li>
</ul>
<p>Proxy 연결만 정상적으로 되어 있다면 문제 없이 설치된다. 나의 경우에는 처음에 Proxy 연결이 잘못되어 끊어지면서 문제가 발생했었다. 처음에는 원인을 몰라서 localhost:8090로 접속하여 설치하였다.</p>
<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/purebuddy/39161117101/in/dateposted-public/" title="Confluence 설치 화면"><img src="https://farm5.staticflickr.com/4679/39161117101_4d0e404e56_o.png" width="900" alt="Confluence 설치 화면"></a></p>
<h1 id="confluence">Confluence는..</h1>
<p>참 좋다.<br>
개인적으로 쓰다가 회사에 추천하여 반영하고, 새로운 회사에서도 사용하고 있어서 완전 익숙하다.</p>
<p>하지만 아쉬운 점도 있다.<br>
개인적으로 GFM(Github Flavored Markdown)을 매우 선호(깔끔, 편리, 익숙)한다. 하지만 Confluence는 GFM이 기본으로 제공되지 않기 때문에 아쉽다. 물론 Plugin으로 제공되지만 아쉽다.</p>
<p>그래도 역시 그림 붙여넣기 편하고 글 쓰기 편한 툴은 이만한게 없다.</p>
]]></content:encoded></item><item><title><![CDATA[macOS에서 Nginx Virtual Host 설정 방법]]></title><description><![CDATA[<p>OSX Server에 기본적으로 Apache 웹서버를 제공하기 때문에 처음에는 이전 포스트(<a href="https://blog.lulab.net/web/configure-apache-virtual-host-of-macos-server/">https://blog.lulab.net/web/configure-apache-virtual-host-of-macos-server/</a>) 와 같이 Apache 웹서버의 Virtual Host를 이용하여 블로그 및 여러 서비스들을 Proxy로 구성하여 사용하고 있다.</p>
<p>하지만 가볍고 빠르다는 Nginx를 써보고 싶은 마음으로 Nginx를 이용한 설정 방법을 확인해보았다. 둘 다 설정을 해본 느낌으로는 Nginx가 더</p>]]></description><link>http://blog.lulab.net/configure-nginx-virtual-host-of-macos-server/</link><guid isPermaLink="false">5b79339f3654b00001e88a01</guid><category><![CDATA[Web Server]]></category><category><![CDATA[nginx]]></category><category><![CDATA[macOS Server]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Wed, 13 Dec 2017 16:21:00 GMT</pubDate><content:encoded><![CDATA[<p>OSX Server에 기본적으로 Apache 웹서버를 제공하기 때문에 처음에는 이전 포스트(<a href="https://blog.lulab.net/web/configure-apache-virtual-host-of-macos-server/">https://blog.lulab.net/web/configure-apache-virtual-host-of-macos-server/</a>) 와 같이 Apache 웹서버의 Virtual Host를 이용하여 블로그 및 여러 서비스들을 Proxy로 구성하여 사용하고 있다.</p>
<p>하지만 가볍고 빠르다는 Nginx를 써보고 싶은 마음으로 Nginx를 이용한 설정 방법을 확인해보았다. 둘 다 설정을 해본 느낌으로는 Nginx가 더 깔끔하다는 생각된다. 성능의 차이는 개인 서버로 특별히 느낄 수 없지만 osx Server 구매 내역이 아까워서 일단은 Apache를 사용할 예정이다. 하지만 Linux로 별도 서버를 구축한다면 Nginx가 좀 더 깔끔해서 사용할 예정이다.</p>
<h2 id="osxnginxbrew">OSX에 Nginx 설치 (Brew 이용)</h2>
<p>Apache 웹서버의 경우, OSX에 자동으로 설치되어 있어서 특별한 설치는 없으나 Nginx는 설치가 필요하다. 이럴 때는 멋진 맥용 패키지 관리툴인 Homebrew를 이용하여 설치한다.</p>
<pre><code>$ brew install nginx
</code></pre>
<p>위의 명령 한 줄이면 깔끔하게 Nginx가 설치되고 다음의 명령어로 nginx를 시작한다.</p>
<pre><code>$ nginx
</code></pre>
<p>​	<br>
위와 같이 <code>nginx</code>로 실행하면 잘 수행되지만 80 포트를 이용할 수 없다. 맥에서 80 포트를 이용하여 서비스 하려면 <code>sudo nginx</code>와 같이 관리 권한을 가지고 실행해야 한다.</p>
<h2 id="nginxproxy">Nginx에 Proxy 설정</h2>
<p>Homebrew를 이용한 Nginx는 다음의 경로에 설치된다.</p>
<pre><code>/usr/local/etc/nginx
</code></pre>
<p>이전 포스트와 동일하게 <a href="http://blog.lulab.xn--net-of0o">http://blog.lulab.net을</a> 위한 설정을 위해 다음의 설정 파일을 만든다.</p>
<pre><code>$ vim /usr/local/etc/nginx/servers/blog.lulab.net.conf
</code></pre>
<p>아래의 내용을 작성한 뒤 저장한다.</p>
<pre><code>server {
	listen 80;
	server_name blog.lulab.net;
	location / {
	proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        proxy_pass         http://127.0.0.1:2368;
    }
}
</code></pre>
<p>위의 설정은 간단하게 blog.lulab.net의 server_name으로 80포트로 접근하는 경우, 127.0.0.1:2368과 프록시 연결을 하는 설정이다. 다음의 명령어로 nginx를 재시작하여 설정을 적용하면 Proxy 설정으로 시작된다.</p>
<pre><code>$ sudo nginx -s reload
</code></pre>
<h2 id="nginx">Nginx는 좋은 느낌</h2>
<p>개인 서버 운영 시에는 대부분 1대의 서버에 여러가지 서비스를 올리게 되는데 이 때 Proxy를 이용하면 매우 유용하다. 그리고 도메인도 1개밖에 없기 때문에 서브 도메인을 적극적으로 활용한다. Proxy는 이러한 요구를 완벽하게 만족시켜주고 Nginx는 간단한 설정으로 위 기능들을 제공해준다는 점이 매우 편리하고 좋은 느낌을 준다.</p>
<p>사실 Apache와의 차이는 거의 없지만 조금이라도 짧고 깔끔한 Nginx가 더 편하지 않나 생각한다.</p>
]]></content:encoded></item><item><title><![CDATA[Java Library Jackson]]></title><description><![CDATA[<p>객체의 직렬화, 역직렬화에서 가장 선호하는 방법은 JSON(JavaScript Object Notation)이다. 일단 JSON 포맷의 확장성과 간결함이 좋다. 그리고 웬만한 포맷들은 JSON을 지원하여 변환이 가능하다. 이전 회사에서 .NET 기반으로 개발할 때 <a href="https://www.newtonsoft.com/json">JSON.NET</a>의 만족도가 매우 높은 이유도 있다. 사실 JSON.NET이 너무 좋아서 Java로 넘어오며 매우 아쉬운 점이 많다.</p>
<h1 id="jacksonvsgson">Jackson</h1>]]></description><link>http://blog.lulab.net/java-library-jackson/</link><guid isPermaLink="false">5b79325c3654b00001e889e3</guid><category><![CDATA[Java]]></category><category><![CDATA[Jackson]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Tue, 12 Dec 2017 14:52:00 GMT</pubDate><content:encoded><![CDATA[<p>객체의 직렬화, 역직렬화에서 가장 선호하는 방법은 JSON(JavaScript Object Notation)이다. 일단 JSON 포맷의 확장성과 간결함이 좋다. 그리고 웬만한 포맷들은 JSON을 지원하여 변환이 가능하다. 이전 회사에서 .NET 기반으로 개발할 때 <a href="https://www.newtonsoft.com/json">JSON.NET</a>의 만족도가 매우 높은 이유도 있다. 사실 JSON.NET이 너무 좋아서 Java로 넘어오며 매우 아쉬운 점이 많다.</p>
<h1 id="jacksonvsgson">Jackson vs GSON</h1>
<p><a href="https://blog.lulab.net/java-library-guava/">Guava</a> vs Apache Commons 보다 어려운 고민이다. 왜냐하면 거의 사용성, 성능은 비슷한 느낌이다.</p>
<ul>
<li>Jackson
<ul>
<li>다목적으로 사용 가능한 JSON 처리 라이브러리</li>
<li>Java 세상의 최고 갑인 Spring에서 사용하는 JSON 라이브러리</li>
</ul>
</li>
<li>GSON
<ul>
<li>Guava를 만든 구글, 그 이름을 믿고 사용하는 GSON</li>
<li><a href="https://github.com/searchbox-io/Jest">JEST</a> 의존 라이브러리</li>
</ul>
</li>
</ul>
<p>프로젝트에 직접 사용하며 느낀 점은 두 라이브러리는 너무나 유사하고 비교하기 어렵다. Jackson의 경우 다양한 추가 모듈이 존재해서 JSON을 Avro, BSON, CBOR, CSV, Smile, (Java) Properties, Protobuf, XML or YAML으로 저장하기 등의 추가 기능으로 확장하기 좋다. 그래서 의존성 패키지들이 덕지 덕지 붙긴하지만 편하다.</p>
<p>그래서 계속 써야한다면 개인적인 생각으로 Jackson 유용하다고 생각한다. GSON이 가볍고 편리하다고 하지만 Java, Spring을 사용한다면 Jackson에 대한 의존성을 이미 가지고 있다. 이런 경우에는 오히려 Jackson을 쓰는 것이 더 유용하였다.</p>
<h1 id="jackson">Jackson</h1>
<p>Jackson은 여러 모듈로 세분화 되어 있고 실제로 사용하는 경우에는 대부분 databind 모듈를 의존한다.</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
    &lt;version&gt;2.9.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>Maven 기준으로 위의 설정이면 Jackson이 사용 가능하다. 기본적인 Bean Style의 getter/setter를 맞춰준다면 JSON 변환이 가능하다.</p>
<h2 id="modules">Modules</h2>
<p>Jackson을 사용하는 이상 Modules를 적극적으로 활용하면 여러 포맷을 지원 가능하다. 자주 사용하는 모듈은 다음과 같다.</p>
<ul>
<li><a href="https://github.com/FasterXML/jackson-modules-java8">jackson-modules-java8</a>
<ul>
<li>Datatypes (Optional) 지원</li>
<li>JSR-310 (ZonedDateTime 등) 지원</li>
<li>Parameter names 지원 (아래에 다시 언급)</li>
</ul>
</li>
<li><a href="https://github.com/FasterXML/jackson-dataformats-text">jackson-dataformats-text</a>
<ul>
<li>CSV</li>
<li>Properteis</li>
<li>YAML</li>
<li>다양한 포맷 지원</li>
</ul>
</li>
</ul>
<h1 id="javajson">Java의 JSON 라이브러리는 조금 아쉽다!</h1>
<p>.NET의 JSON.NET을 사용하다 Jackson을 처음 사용하면서 느낀 점은 '아... 안되는게 너무 많다.' 였다. 사실 Java 언어 스펙 자체와 Reflection의 한계로 인한 요소들이 많았다.</p>
<h2 id="deserializegoodbyebeanstyle">생성자를 이용한 Deserialize (Good-bye Bean Style)</h2>
<p>왜? Reflection이 완벽하지 않은가? <a href="https://projectlombok.org">Lombok</a>에 대한 의존성(특히 개발툴 설정까지 맞춰야 한다는!)이 너무 싫지만 Java Bean 형태를 제공하기 위해서 get/set과 constructor에 Annotation 이용하여 선언을 해야하는 점이 너무 불편하다. (개인적으로 생성자 파라미터로 값을 받는 구조를 선호한다)</p>
<pre><code>@JsonCreator
public Person(@JsonProperty(&quot;id&quot;) String id,
              @JsonProperty(&quot;age&quot;) int age) {
    this.id = id;
    this.age = age;
}
</code></pre>
<p>&lt;Constructor를 이용한 Jackson Deserialize 방법&gt;</p>
<p>하지만 이렇게라도 생성자를 이용하여 Deserializing이 가능한 것이 다행이다. 물론 jdk-8부터 제공하는 --parameters 옵션과 <a href="https://github.com/FasterXML/jackson-modules-java8">jackson-module-parameter-names</a>을 이용하면 @JsonProperty 사용 없이 사용이 가능하다. 하지만 실제로 해볼 때, 상속/Inner-class 등 복잡해진 클래스는 잘 되지 않는다. 이게 뭐야~~ :()</p>
<h2 id="polymorphism">Polymorphism</h2>
<p>인터페이스 혹은 추상 클래스를 멤버로 가진 경우를 JSON으로 저장하는 경우, 왜 이랬을까? 좀 이상하다. 이 때는 Event를 하나의 Table에 일관된 포맷으로 넣고 싶었기 때문에 Payload부분을 모두 JSON으로 저장하여 처리하였다. 결국 다형성을 JSON으로 표현할 때 Annotation을 남발하여 정의하였다.</p>
<pre><code>@JsonTypeInfo(
        use = JsonTypeInfo.Id.CLASS,
        include = JsonTypeInfo.As.PROPERTY,
        property = &quot;@class&quot;)
public class Person {
    private final String id;
    private final int age;
...
}
</code></pre>
<p>이 외에도 Default Typing, Mixin을 이용한 방법도 존재한다. 참고[2], [3]에서 자세한 방법이 기록되어 있다.</p>
<p>사실 라이브러리 내에서 최대한 해결하여 도메인 내용을 포함하는 클래스에까지 Annotation을 추가하고 싶지 않지만 다형성을 지원하기 위해서는 가장 쉬운 방법이다. 프로젝트에 적합한 Serializer/Deserializer를 구현하여 이러한 타입까지 처리하는 방법이 더 좋다고 생각한다.</p>
<h1 id="">참고자료</h1>
<ul>
<li>참고[1] <a href="https://github.com/FasterXML/jackson">https://github.com/FasterXML/jackson</a></li>
<li>참고[2] <a href="http://www.baeldung.com/jackson-inheritance">http://www.baeldung.com/jackson-inheritance</a></li>
<li>참고[3] <a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization">https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization</a></li>
</ul>
]]></content:encoded></item><item><title><![CDATA[Java 라이브러리 Guava]]></title><description><![CDATA[<p>Java 프로젝트를 수행하며 항상 고민하는 라이브러리로 Guava와 Apache Commons가 있다. 세분화 된 라이브러리와 다양한 기능은 Apache Commons이 좋지만 결국 한 개, 한 개 추가하다보면 apache-xxx 라이브러리에 대한 많은 의존성이 생긴다. 굳이 필요없는 기능까지 많이 의존하게 되어 나의 경우는 대부분 Guava를 기본으로 시작한다. 그리고 Java 프로젝트를 하며 항상 사용하는 라이브러리를 정리하려고</p>]]></description><link>http://blog.lulab.net/java-library-guava/</link><guid isPermaLink="false">5b7932233654b00001e889de</guid><category><![CDATA[Java]]></category><category><![CDATA[Guava]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Mon, 11 Dec 2017 17:19:00 GMT</pubDate><content:encoded><![CDATA[<p>Java 프로젝트를 수행하며 항상 고민하는 라이브러리로 Guava와 Apache Commons가 있다. 세분화 된 라이브러리와 다양한 기능은 Apache Commons이 좋지만 결국 한 개, 한 개 추가하다보면 apache-xxx 라이브러리에 대한 많은 의존성이 생긴다. 굳이 필요없는 기능까지 많이 의존하게 되어 나의 경우는 대부분 Guava를 기본으로 시작한다. 그리고 Java 프로젝트를 하며 항상 사용하는 라이브러리를 정리하려고 기록한다.</p>
<h1 id="guava">Guava</h1>
<p>Guava는 Google의 core libraries이다. Collection(JDK 버전이 올라가며 많이는 필요 없는), caching, string processing 등 프로젝트 구현 시 공통적으로 필요한 요소들이 존재한다.</p>
<p>익숙해지면 코드량을 엄청나게 줄이며 구현이 가능하고 가독성이 좋아진다. 그 중에서도 내가 주로 사용하고 편리한 기능들을 다음과 같이 정리하였다. 예제 코드는 참고[1]에 작성된 Wiki에서 참고하였다.</p>
<h2 id="preconditions">Preconditions</h2>
<p>전달된 Aurgments에 대한 검증을 수행하는데 매번 <code>if-else</code>를 사용하기에는 코드가 너무 길어진다. 이 때 Preconditions를 사용하면 다음과 같이 한 줄로 구현 가능하다.</p>
<pre><code>checkArgument(i &gt;= 0, &quot;Argument was %s but expected nonnegative&quot;, i);
checkArgument(i &lt; j, &quot;Expected i &lt; j, but %s &gt; %s&quot;, i, j);
</code></pre>
<p>특히 <code>checkNotNull</code>, <code>checkState</code> 등 자주 사용하는 패턴들이 정의되어 있어 더 짧고 명시적으로 표현한다.</p>
<h2 id="commonobjectmethods">Common object methods</h2>
<p>equals, hashCode, toString은 자바에서 클래스 구현 시 매번 구현하는 반복작업이다. 요즘에는 IntelliJ IDEA를 이용하여 샤~샥 한 방에 만들어내는데 Guava의 MoreObjects와 Objects를 이용하여 생성한다. 그 이유는 역시 짧게 정리된 코드 때문이다.</p>
<pre><code>import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;

public class Person {
    private final String id;
    private final int age;

    public Person(String id, int age) {
        this.id = id;
        this.age = age;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add(&quot;id&quot;, id)
                .add(&quot;age&quot;, age)
                .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Person person = (Person) o;
        return age == person.age &amp;&amp;
                Objects.equal(id, person.id);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id, age);
    }
}
</code></pre>
<p>위 코드의 toString() 결과는 <code>Person{id=dgb, age=84}</code>이다.</p>
<h2 id="caches">Caches</h2>
<p>Cache 기능은 항상 최적화를 위해서 구현한다. Guava를 이용하면 Cache 크기, expire 시간을 정의하여 쉽게 Cache를 만든다.</p>
<pre><code>LoadingCache&lt;String, Person&gt; peopleCache = CacheBuilder.newBuilder()
    .maximumSize(1000)
    .expireAfterWrite(10, TimeUnit.MINUTES)
    .build(
            new CacheLoader&lt;String, Person&gt;() {
                @Override
                public Person load(String id) throws Exception {
                    return personRepository.findById(id);
                }
            });
            
final Person person = peopleCache.get(&quot;P10000&quot;);
</code></pre>
<p>Person 객체에 대한 Cache를 만든 예제이다. ID가 P10000인 Person 객체를 가져오는데 Cache에 존재하면 해당 인스턴스를 사용하고 없는 경우 personRepository.findById를 이용하여 가져온다. CacheLoader 구현체 정의 시에 load 함수 외에 loadAll 함수를 이용해서 모든 목록을 가져오게 적용 가능하다.</p>
<h2 id="ranges">Ranges</h2>
<p>Range도 숫자 값에 대한 검증, 혹은 조건에 따른 처리 시에 많이 활용하는 기능이다. 사실 더 많은 기능이 있지만 나는 A &lt; x &lt; B 와 같은 조건 처리 용도로 많이 사용한다.</p>
<pre><code>Range.closed(1, 3).contains(2); // true
Range.closed(1, 3).contains(4); // false
Range.lessThan(5).contains(5); // returns false
Range.closed(1, 4).containsAll(Ints.asList(1, 2, 3)); // returns true
</code></pre>
<p>Guava Guide Wiki에 있는 예제(참고 [1])으로 Range를 이해하기에 가장 좋은 예제이다. 이 외에도 <code>greaterThan</code>, <code>atLeast</code>, <code>intersection</code> 등이 유용하다.</p>
<h1 id="guava">Guava 좋아요!</h1>
<p>Guava는 참 좋다. 코드도 내가 선호하는 스타일이다. 사실 위에서 언급한 내용보다 Guava는 훨씬 많은 기능을 가지고 있다.</p>
<p><strong>그래도 좀 자주 사용하는 기능</strong></p>
<ul>
<li>Strings: <a href="https://github.com/google/guava/wiki/StringsExplained">https://github.com/google/guava/wiki/StringsExplained</a>
<ul>
<li>Joiner는 문자열 합칠 때 항상 쓰게 되죠</li>
<li>그래도 항상 사용하게 되는 Strings의 Splitter(trim, 공백 처리가 편함)</li>
</ul>
</li>
<li>Relfection: <a href="https://github.com/google/guava/wiki/ReflectionExplained">https://github.com/google/guava/wiki/ReflectionExplained</a>
<ul>
<li>Java Reflection을 쉽게 사용하게 제공, 종종 사용</li>
</ul>
</li>
<li>EventBus: <a href="https://github.com/google/guava/wiki/EventBusExplained">https://github.com/google/guava/wiki/EventBusExplained</a>
<ul>
<li>Publish-subscriber 패턴 구현체</li>
<li>얼마전에 직접 구현해서 썼는데 조금만 빨리 기억해냈다면...</li>
</ul>
</li>
<li>Graph: <a href="https://github.com/google/guava/wiki/GraphsExplained">https://github.com/google/guava/wiki/GraphsExplained</a>
<ul>
<li>그래프 모델까지 나온 적이 거의 없어서 아직은 못 써봄</li>
</ul>
</li>
</ul>
<p>Guava에도 단점이 있다. JDK7, 8, 이제 9로 버전이 올라가면서 stream, collections 등 좋은 기능들이 많이 생겨서 Guava에 있는 일부 기능들은 많이 더 이상 사용되지 않는(Deprecated)다. 즉, Guava 없이도 동일한 기능을 꽤 짧고 간결하게 코드 작성이 가능하다. 그리고 Apache commons에는 대부분 훨씬 많은 기능을 포함하고 있다.</p>
<p>하지만 아직까지 Guava에서도 필요한 많은 기능들과 간결한 코드를 제공한다.</p>
<p>ps. 사실 Guava와 Apache commons는 그때 그때 기분에 따라 사용하는 듯하다. 둘 다 워낙 좋아서 해당 프로젝트에서 정의하는데로 사용하면 될 것 같다. 하지만 난 개인적으로는 GUAVA!</p>
<h1 id="">참고</h1>
<ul>
<li>참고[1] <a href="https://github.com/google/guava/wiki">https://github.com/google/guava/wiki</a></li>
<li>참고[2] <a href="https://github.com/google/guava">https://github.com/google/guava</a> 소스코드</li>
</ul>
]]></content:encoded></item><item><title><![CDATA[macOS Server의 Apache Virtual Host 설정 방법]]></title><description><![CDATA[<p>맥미니에 macOS Server를 설치해서 웹 서비스 및 개발 서버로 사용한다. Apache Virtual Host 설정은 나의 블로그 도메인을 Docker로 서비스하는 Ghost로 연결할 때 적용하였다.</p>
<p>나의 블로그는 서비스하는데 Markdow으로 작성 가능한 <a href="https://ghost.org">Ghost</a>를 이용하여 구축하였다. Wordpress, Ghost, Hugo 등 다양한 플랫폼 중 Ghost를 선택한 이유는 Hugo가 매우 좋았지만 웹 상에서 글을 쓰고</p>]]></description><link>http://blog.lulab.net/configure-apache-virtual-host-of-macos-server/</link><guid isPermaLink="false">5b7933443654b00001e889fa</guid><category><![CDATA[Web Server]]></category><category><![CDATA[Apache WebServer]]></category><category><![CDATA[macOS Server]]></category><dc:creator><![CDATA[LUBANG]]></dc:creator><pubDate>Sun, 10 Dec 2017 06:21:00 GMT</pubDate><content:encoded><![CDATA[<p>맥미니에 macOS Server를 설치해서 웹 서비스 및 개발 서버로 사용한다. Apache Virtual Host 설정은 나의 블로그 도메인을 Docker로 서비스하는 Ghost로 연결할 때 적용하였다.</p>
<p>나의 블로그는 서비스하는데 Markdow으로 작성 가능한 <a href="https://ghost.org">Ghost</a>를 이용하여 구축하였다. Wordpress, Ghost, Hugo 등 다양한 플랫폼 중 Ghost를 선택한 이유는 Hugo가 매우 좋았지만 웹 상에서 글을 쓰고 관리하기에 불편하여 결국 Ghost로 돌아왔다. Wordpress는 너무 복잡하고 Markdown으로 쓰기에는 아쉽다.</p>
<p>Ghost를 Docker를 이용하여 설치하면 기본적으로 <a href="http://localhost:2368">http://localhost:2368</a> 로 주소가 할당된다. 블로그 도메인 <a href="https://blog.lulab.net">https://blog.lulab.net</a> 와 연결하기 위해 Apache Web Server의 Virtual Host를 이용하여 ProxyPass를 설정하였다.</p>
<p>macOS Server의 Apache Web Server에서 Virtual Host를 설정하는 방법은 구글에 많이 검색되지만 정확히 되는 방법이 없었다. 특히 설정 위치 등이 잘못된 혹은 과거의 버전으로 된 경우가 많아서 다시 정리하였다.</p>
<h1 id="macosserverapachevirtualhost">macOS Server의 Apache Virtual Host 설정</h1>
<p><code>Virtual Host의 ProxyPass</code>를 설정하면 앞으로 다수의 서비스를 제공할 때 원하는 서브 도메인, 혹은 여러 도메인들을 연결하여 사용 가능하다.</p>
<pre><code>/Library/Server/Web/Config/apache2/sites*.conf
</code></pre>
<p>위 경로에 macOS Server Apache Web Server 설정이 저장된다. 나의 경우에는 macOS Server의 웹사이트에서 서비스를 추가하고 설정을 수정하여 사용한다. 다음은 <a href="https://blog.lulab.net">https://blog.lulab.net</a> 의 연결 설정이다.</p>
<pre><code>$ sudo vi /Library/Server/Web/Config/apache2/sites/0000_127.0.0.1_34543_blog.lulab.net.conf
</code></pre>
<p>아래와 같이 Proxy에 대한 설정을 추가하고 저장한다.</p>
<pre><code>&lt;VirtualHost 127.0.0.1:34543&gt;
    ServerName https://blog.lulab.net:443
    
    // SSL 설정이 필요한 경우 작성

    ProxyRequests Off
    &lt;Proxy *&gt;
        Order deny,allow
        Allow from all
    &lt;/Proxy&gt;

    ProxyPass / http://localhost:2368/
    ProxyPassReverse / http://localhost:2368/
    &lt;Location /&gt;
        Order allow,deny
        Allow from all
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre>
<p>macOS Server 에서 웹 서비스를 중지했다가 다시 시작하거나 다음의 명령어로 Apache Web Server를 재시작하여 설정을 적용한다.</p>
<pre><code>$ sudo apachectl restart
</code></pre>
<p>재시작을 하면 해당 도메인으로 서비스 되는 블로그를 확인할 수 있다. 기분 좋다 :)</p>
<h1 id="apachevitualhost">Apache Vitual Host</h1>
<p>Apache의 Virtual host는 위와 같이 간단한 설정으로 적용한다.</p>
<p>본 글은 macOS Server 기준으로 설명하였지만 Apache Server를 사용하면 위의 설정들이 동일하다. 단순히 Apache Server의 설치 경로 혹은 설정의 경로들이 다를 뿐이니 OS와 무관하게 참고 가능하다.</p>
<p>Proxy를 이용한 연결 설정은 개인 서버에서 다양한 도메인으로 서비스를 제공할 때 반드시 필요하다. 한정된 서버에서 여러 개의 서비스를 동시에 제공하는 경우 유용한 방법이다. 나의 경우에도 맥미니를 서버로 개인 프로젝트 및 블로그를 제공하는데 Proxy가 가장 편리했다.</p>
]]></content:encoded></item></channel></rss>