<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-578282567400059547</id><updated>2019-02-01T20:38:32.225+09:00</updated><category term="kafka"/><category term="cargo"/><category term="configuration"/><category term="couchbase"/><category term="angularjs"/><category term="kafka-0.9"/><category term="kafka-consumer"/><category term="kafka-producer"/><category term="kafkaConsumer"/><category term="rust"/><category term="rustlang"/><category term="CD"/><category term="CI"/><category term="KafkaBroker"/><category term="adpater-pattern"/><category term="annotationprocessing"/><category term="branchperfeature"/><category term="cms"/><category term="commandlinerunner"/><category term="compile"/><category term="compiler"/><category term="compilertree"/><category term="continuous-delivery"/><category term="continuous-integration"/><category term="continuousdelivery"/><category term="continuousdeployment"/><category term="continuousintegration"/><category term="decorator-pattern"/><category term="designpattern"/><category term="dma"/><category term="dynitruk"/><category term="emscripten"/><category term="enterprise-pattern"/><category term="facade-pattern"/><category term="feature-toggle"/><category term="featurefreeze"/><category term="featuretoggle"/><category term="g1"/><category term="garbage-collection"/><category term="garbage-collector"/><category term="garbagecollection"/><category term="garbagecollector"/><category term="gh-pages"/><category term="gitflow"/><category term="github"/><category term="githubflow"/><category term="io"/><category term="java"/><category term="javaagent"/><category term="javac"/><category term="javaxtools"/><category term="jvm"/><category term="kafka-broker"/><category term="kafka-config"/><category term="kafka-consumer-client"/><category term="kafka-internal"/><category term="kafka0.9"/><category term="kafkaConfig"/><category term="kafkaConsumerClient"/><category term="kafkaProducer"/><category term="lifetime"/><category term="lombok"/><category term="macro"/><category term="mainline-model"/><category term="mainlinemodel"/><category term="metaprogramming"/><category term="microservices"/><category term="msa"/><category term="ownership"/><category term="pact"/><category term="pacto"/><category term="proxy-pattern"/><category term="rust-to-webassembly"/><category term="sendfile"/><category term="serial-collector"/><category term="serialcollector"/><category term="share-as-little-as-possible"/><category term="share-as-much-as-possible"/><category term="soa"/><category term="spring-cloud"/><category term="spring-cloud-bus"/><category term="spring-cloud-config"/><category term="spring-cloud-starter-bus-redis"/><category term="springbatch junit"/><category term="springboot"/><category term="springcloud"/><category term="springcloudbus"/><category term="springcloudconfig"/><category term="springcloudstarterbusredis"/><category term="throughput-collector"/><category term="throughputcollector"/><category term="transferTo"/><category term="vertx"/><category term="vertx-cpu"/><category term="vertx-eventloop"/><category term="vertx-singlethread"/><category term="webassembly"/><category term="zerocopy"/><title type='text'>fn(Rice) -&gt; Code</title><subtitle type='html'>잊지말자용! 개발에 필요한 내용을 기록하는 블로그입니다.&#xa;&#xa;&lt;p&gt;&#xa;&lt;a href=&quot;https://twitter.com/_freestrings&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/changseok.han&quot;&gt;Facebook&lt;/a&gt;&#xa;&lt;/p&gt;</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default?alt=atom'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default?alt=atom&amp;start-index=26&amp;max-results=25'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>26</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-779460356721946053</id><published>2017-04-03T23:12:00.000+09:00</published><updated>2017-06-05T15:24:38.468+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cargo"/><category scheme="http://www.blogger.com/atom/ns#" term="compile"/><category scheme="http://www.blogger.com/atom/ns#" term="emscripten"/><category scheme="http://www.blogger.com/atom/ns#" term="rust"/><category scheme="http://www.blogger.com/atom/ns#" term="rust-to-webassembly"/><category scheme="http://www.blogger.com/atom/ns#" term="webassembly"/><title type='text'>Rust를 Webassembly로 컴파일 하기</title><content type='html'>Rust를 Webassembly로 컴파일 하는 방법과 방법을 정리 해 둔다.&lt;br /&gt;&lt;br /&gt;환경 구축이라 순차적으로 따라하면 될것 같지만, 막상 해 보면 시간도 오래 걸리고 잘 안된다. &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;컴파일 환경 구축 부터&amp;nbsp;&lt;b&gt;Cargo &lt;/b&gt;로 빌드하는 방법&lt;/span&gt; 까지 정리 해 둔다.&lt;br /&gt;&lt;h3&gt;    OS 선택 &lt;/h3&gt;&lt;div&gt;Rust와 Emscripten이 설치 되는 OS면 된다. Rust는 Windows, Mac, Ubuntu OS에서 실행 되는 것을 확인 했지만 Emscripten은 우분투 최신 버전과 14.04에서만 테스트를 해 보았기 때문에 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;최신 Ubuntu&lt;/span&gt; 기준으로 정리를 해둔다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;Docker Image 만들어 두면 편할 것 같았는데, 막상 컴파일 환경을 이미지로 빌드하고 보니 이미지 크기가 25GB&lt;/span&gt;를&amp;nbsp;넘는 문제가 있다. &lt;/div&gt;&lt;h3&gt;    Rust 설치 &lt;/h3&gt;&lt;div&gt;Rust 설치와 &lt;a href=&quot;http://free-strings.blogspot.com/2017/03/cargo-cargo.html&quot; target=&quot;_blank&quot;&gt;Cargo에 대한 설명은&amp;nbsp;Cargo 패키지 시스템 - Cargo로 프로젝트 생성부터 배포까지&lt;/a&gt;&amp;nbsp;참고 &lt;/div&gt;&lt;h3&gt;    안정된 Rust 버전과 wasm32 타겟 설치&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;rustup install stable&lt;br /&gt;rustup default stable&lt;br /&gt;rustup target add wasm32-unknown-emscripten&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Emscripten 설치 &lt;/h3&gt;&lt;div&gt;참고:&amp;nbsp; &lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://kripken.github.io/emscripten-site/docs/building_from_source/building_emscripten_from_source_on_linux.html#building-emscripten-on-linux&quot; target=&quot;_blank&quot;&gt;http://kripken.github.io/emscripten-site/docs/building_from_source/building_emscripten_from_source_on_linux.html#building-emscripten-on-linux&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;우분투 14.04에서는 설치 중에 cmake 버전 때문에 문제가 생긴다. cmake 최신 버전을 설치 해주면 문제 없다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;최신 우분투에서는 아래 순으로 진행하면 된다. docker에서 실행 한 순서 이기 때문에 sudo로 실행하지 않는다. &lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;apt-get update&lt;br /&gt;apt-get install build-essential&lt;br /&gt;apt-get install cmake&lt;br /&gt;apt-get install python2.7&lt;br /&gt;apt-get install nodejs&lt;br /&gt;apt-get install default-jre&lt;br /&gt;ln -s /usr/bin/python2.7 /usr/bin/python #링크를 생성해 주자&lt;br /&gt;apt-get install curl&lt;br /&gt;curl -o emsdk-portable.tar.gz https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz&lt;br /&gt;tar -xvzf emsdk-portable.tar.gz&lt;br /&gt;cd emsdk-portable&lt;br /&gt;./emsdk update&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;아래에서 시간이 엄청 많이 걸린다.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;그리고 &lt;b&gt;nodejs&lt;/b&gt;와 &lt;b&gt;node&lt;/b&gt; 문제 인것 같은데 pre-built 환경을 구성 하면서 node를 설치 했지만 중간에 node 4.1.1 버전이 설치된다. node 설치는 오래 걸리지 않으므로 무시하자. &lt;/div&gt;&lt;div&gt;여기 까지 진행하면&amp;nbsp;아래 메시지를 확인 가능&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;./emsdk install latest&lt;br /&gt;Done installing tool &#39;emscripten-tag-1.37.9-64bit&#39;.&lt;br /&gt;Done installing SDK &#39;sdk-tag-1.37.9-64bit&#39;.&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Emscripten 최신 버전 활성화&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;./emsdk activate latest&lt;br /&gt;source ./emsdk_env.sh&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    emcc 버전 체크&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;emcc -v&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 1.37.9&lt;br /&gt;clang version 4.0.0 &amp;nbsp;(emscripten 1.37.9 : 1.37.9)&lt;br /&gt;Target: x86_64-unknown-linux-gnu&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    1.37.0 이하라면 update&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;apt-get install git-core&lt;br /&gt;./emsdk update&lt;br /&gt;./emsdk install sdk-incoming-64bit&lt;br /&gt;./emsdk activate sdk-incoming-64bit&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Rust 코드 컴파일 &lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cat hello.rs&lt;br /&gt;fn main() {&lt;br /&gt;&amp;nbsp; println!(&quot;hello&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;rustc --target==wasm32-unknown-emscripten hello.rs -o hello.html&lt;br /&gt;&lt;br /&gt;ls -al&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 816159 Apr &amp;nbsp;3 12:16 hello.asm.js&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 102727 Apr &amp;nbsp;3 12:16 hello.html&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 247359 Apr &amp;nbsp;3 12:16 hello.js&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root &amp;nbsp; &amp;nbsp; 35 Apr &amp;nbsp;3 12:10 hello.rs&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 155653 Apr &amp;nbsp;3 12:16 hello.wasm&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Cargo 로 빌드하기 &lt;/h3&gt;&lt;h4&gt;    프로젝트 생성 &lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo new hello&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;    &lt;strike&gt;Cargo.toml에 rustc 옵션 추가&lt;/strike&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;[package]&lt;br /&gt;name = &quot;rust-wasm&quot;&lt;br /&gt;version = &quot;0.1.0&quot;&lt;br /&gt;authors = [&quot;freestrings &amp;lt;freestrings@gmail.com&amp;gt;&quot;]&lt;br /&gt;&lt;br /&gt;[dependencies]&lt;br /&gt;&lt;br /&gt;[target.wasm32-unknown-emscripten]&lt;br /&gt;rustflags=[&quot;-o rust-wasm.html&quot;]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;테스트 코드 &lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cat src/main.rs&lt;br /&gt;fn main() {&lt;br /&gt;&amp;nbsp; println!(&quot;hello&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;    컴파일&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo rustc --target=wasm32-unknown-emscripten&lt;br /&gt;ls -al target/wasm32-unknown-emscripten/debug/deps/&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;-rw-r--r-- 1 root root 6769048 Apr &amp;nbsp;2 12:08 rust_wasm-5d7a20a47b6ec337.asm.js&lt;br /&gt;-rw-r--r-- 2 root root &amp;nbsp;310906 Apr &amp;nbsp;2 12:08 rust_wasm-5d7a20a47b6ec337.js&lt;br /&gt;-rw-r--r-- 1 root root 1667847 Apr &amp;nbsp;2 12:08 rust_wasm-5d7a20a47b6ec337.wasm&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;    실행&lt;/h4&gt;&lt;div&gt;&lt;strike&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;아직 html 생성은 지원하지 않는다&lt;/span&gt;.&lt;/strike&gt; 그래서 target/wasm32-unknown-emscripten/debug/deps/ 아래 hello.html 파일(html 파일 이름은 편한대로 해도 된다) 을 생성해야 한다. 당연히 .wasm 파일을 호출 하는 코드가 있어야 할텐데, 아래는 실행에 필요한 최소 내용이다. html에 붙여 넣어 주자.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;target/wasm32-unknown-emscripten/debug/deps/ 디렉토리에 html 파일을 넣는 이유는 .js 파일에 .wasm 파일 경로가 동일 디렉토리로 되어 있기 때문.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;파이어폭스 52&lt;/span&gt; 버전 부터는 Webassembly를 기본 지원하고 있기 때문에 최신 파이어폭스에서 결과를 확인하면 편하다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;html hljs&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;br /&gt;&amp;lt;html lang=&quot;en-us&quot;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;body&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;textarea class=&quot;emscripten&quot; id=&quot;output&quot; rows=&quot;20&quot; style=&quot;width:100%&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script async type=&quot;text/javascript&quot; src=&quot;JS 파일&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; var Module = {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print: (function() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var element = document.getElementById(&#39;output&#39;);&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return function(text) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; element.innerHTML += text;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;컴파일2&amp;nbsp;&lt;/h4&gt;&lt;div&gt;프로젝트 루트 ./cargo (없으면 생성) 아래 config 파일을 생성하고 링커 속성을 지정해 준다. 링커 속성은 target에 플랫폼이 컴파일 될 때 rustc에 전달된다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;echo &quot;emcc \&quot;-o\&quot; \&quot;test.html\&quot; \&quot;-02\&quot; \$@&quot; &amp;gt; ./emcc_conf&lt;br /&gt;&lt;br /&gt;cat ./cargo/config&lt;br /&gt;[target.wasm32-unknown-emscripten]&lt;br /&gt;linker = &quot;/work/emcc_conf&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;    참고 &lt;/h4&gt;&lt;div&gt;설치 관련해서는 &lt;a href=&quot;https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde&quot; target=&quot;_blank&quot;&gt;https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde&lt;/a&gt;&amp;nbsp;가 정리가 가장 잘 되어 있다.&lt;br /&gt;&lt;br /&gt;그리고 Emscripten이나 LLVM 기본 이해는&amp;nbsp;     &lt;a href=&quot;https://www.slideshare.net/Hybrid0/llvm-28276305&quot; target=&quot;_blank&quot;&gt;https://www.slideshare.net/Hybrid0/llvm-28276305&lt;/a&gt;&amp;nbsp;가 읽을 만하고, WebAssembly는&amp;nbsp;&lt;a href=&quot;https://www.slideshare.net/gyeongseokseo/web-assembly-70493156&quot; target=&quot;_blank&quot;&gt;https://www.slideshare.net/gyeongseokseo/web-assembly-70493156&lt;/a&gt;&amp;nbsp;가     읽을 만하다.&amp;nbsp; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/779460356721946053/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2017/04/rust-webassembly.html#comment-form' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/779460356721946053'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/779460356721946053'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2017/04/rust-webassembly.html' title='Rust를 Webassembly로 컴파일 하기'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-4264508961041754751</id><published>2017-03-28T01:04:00.001+09:00</published><updated>2017-04-14T23:16:53.582+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cargo"/><category scheme="http://www.blogger.com/atom/ns#" term="rust"/><category scheme="http://www.blogger.com/atom/ns#" term="rustlang"/><title type='text'>Cargo 패키지 시스템 - Cargo로 프로젝트 생성부터 배포까지</title><content type='html'>왜?&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Rust를 배워보자&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Cargo?&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Cargo는 &lt;a href=&quot;https://www.rust-lang.org/&quot; target=&quot;_blank&quot;&gt;Rust&lt;/a&gt;의 패키지 매니저다. 자바의 &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt;이나 &lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt;같은 걸로 생각하면 된다. Cargo로 프로젝트 생성 부터 배포, 커스텀 빌드까지 정리 해 두기로 한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;목차&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;설치&lt;/li&gt;&lt;li&gt;프로젝트 생성&lt;/li&gt;&lt;li&gt;빌드&lt;/li&gt;&lt;li&gt;실행&lt;/li&gt;&lt;li&gt;유닛 테스트 실행&lt;/li&gt;&lt;li&gt;배포&lt;/li&gt;&lt;li&gt;커스텀 빌드&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h4&gt;설치&lt;/h4&gt;기본적으로 Cargo는 Rust와 같이 배포가 되기 때문에 &lt;b&gt;rustc&lt;/b&gt;가 설치 되어 있다면 Cargo도 설치 되어 있다고 보면 된다.&lt;br /&gt;&lt;br /&gt;설치는 간단하다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;curl https://sh.rustup.rs -sSf | sh&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;info: downloading installer&lt;br /&gt;&lt;br /&gt;Welcome to Rust!&lt;br /&gt;&lt;br /&gt;...&lt;br /&gt;Current installation options:&lt;br /&gt;&lt;br /&gt;  default host triple: x86_64-unknown-linux-gnu&lt;br /&gt;  default toolchain: stable&lt;br /&gt;  modify PATH variable: yes&lt;br /&gt;&lt;br /&gt;1) Proceed with installation (default)&lt;br /&gt;2) Customize installation&lt;br /&gt;3) Cancel installation&lt;br /&gt;&lt;br /&gt;...&lt;br /&gt;To configure your current shell run source $HOME/.cargo/env&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;1) Proceed with installation (default)&lt;/span&gt;&amp;nbsp;를 선택해서 진행하면 된다. 설치된 실행 파일들을 자동으로 PATH에 등록되지 않기 때문에 설치 메시지에서 알려 주는 대로&amp;nbsp;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;source $HOME/.cargo/env&lt;/span&gt;&amp;nbsp;를 해줘야 한다. ( ~/.bash_profile이나 ~/.profile에 추가해 두면 매번 실행하지 않아도 된다. )&lt;br /&gt;&lt;br /&gt;기본 설치를 하지 않고 &lt;b&gt;2) Customize installation&lt;/b&gt;을 선택하면 stable/beta/nightly 중에서 툴체인을 선택하거나 컴파일 타겟을 바꿀 수 있다. 나중에 필요하면&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;rustup&lt;/b&gt;명령으로 툴체인이나 타겟은 바꿀 수 있으니 기본으로 설치해도 무방하다.&lt;br /&gt;&lt;br /&gt;설치 디렉토리($HOME/.cargo) 아래 bin 디렉토리를 보면 &lt;b&gt;cargo&lt;/b&gt;&amp;nbsp;실행 파일을 확인 할 수 있다. 그 밖에 &lt;b&gt;rustc&lt;/b&gt; 컴파일러는 물론이고 디버거등도 기본 설치 됨을 알 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;root@11382ab871ac:/# ls -al /root/.cargo/bin&lt;br /&gt;total 57032&lt;br /&gt;drwxr-xr-x 2 root root 4096 Mar 21 14:28 .&lt;br /&gt;drwxr-xr-x 3 root root 4096 Mar 21 13:38 ..&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 cargo&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rust-gdb&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rust-lldb&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rustc&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rustdoc&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rustup&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;b&gt;cargo help&lt;/b&gt;&amp;nbsp;를 보면 Cargo로 빌드, 유닛 테스트, 문서 생성 그리고 배포에 이르기 까지 개발에 필요한 일련의 기능이 포함 되어 있음을 알 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo help&lt;br /&gt;...&lt;br /&gt; build    Compile the current project&lt;br /&gt; check    Analyze the current project and report errors, but don&#39;t build object files&lt;br /&gt; clean    Remove the target directory&lt;br /&gt; doc      Build this project&#39;s and its dependencies&#39; documentation&lt;br /&gt; new      Create a new cargo project&lt;br /&gt; init     Create a new cargo project in an existing directory&lt;br /&gt; run      Build and execute src/main.rs&lt;br /&gt; test     Run the tests&lt;br /&gt; bench    Run the benchmarks&lt;br /&gt; update   Update dependencies listed in Cargo.lock&lt;br /&gt; search   Search registry for crates&lt;br /&gt; publish  Package and upload this project to the registry&lt;br /&gt; install  Install a Rust binary&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;프로젝트 생성&lt;/h4&gt;프로젝트 생성은 init/new 두가지 방법이 있다. 생성 할 때 디렉토리를 지정 하느냐 현재 디렉토리에 생성 하느냐 정도의 차이가 있을 뿐 이다. 프로젝트가 생성되면 자동으로&amp;nbsp;&lt;b&gt;Git 저장소가 &amp;nbsp;init&lt;/b&gt;이 되고&amp;nbsp;커밋에 제외 될 파일들도&amp;nbsp;&lt;b&gt;.gitignore&lt;/b&gt;에&amp;nbsp;등록되어 생성 된다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;$ mkdir hello&lt;br /&gt;$ cd hello&lt;br /&gt;$ cargo init&lt;br /&gt;$ hello git:(master) ✗ tree -a&lt;br /&gt;.&lt;br /&gt;├── Cargo.toml&lt;br /&gt;├── .git&lt;br /&gt;├── .gitignore&lt;br /&gt;└── src&lt;br /&gt; └── lib.rs&lt;br /&gt;&lt;br /&gt;$ hello git:(master) ✗ cat .gitignore&lt;br /&gt;target&lt;br /&gt;Cargo.lock&lt;/code&gt;&lt;/pre&gt;코드는&amp;nbsp;&lt;b&gt;src&lt;/b&gt;&amp;nbsp;디렉토리 위치한다. --lib 옵션(기본: 생략가능)을 인자로 주면 기본으로 lib.rs가 생성되고 --bin 옵션엔 main.rs가 기본으로 생성 된다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo init --bin (또는 --lib)&lt;/code&gt;&lt;/pre&gt;lib.rs와 main.rs 두 파일의 차이는 라이브러리 형태 배포가 목적일 땐 lib.rs를 실행 어플리케이션이 목적일 땐 main.rs를 사용한다. 물론, 라이브러리 면서 동시에 실행 어플리케이션일 경우는 두 파일을 같이 사용하면 된다.&lt;br /&gt;&lt;h4&gt;빌드&lt;/h4&gt;&lt;div&gt;빌드는 &lt;b&gt;cargo build &lt;/b&gt;명령으로 프로젝트를 빌드 할 수 있다. 기본 --debug 모드로 컴파일 되고 &lt;b&gt;target&lt;/b&gt; 폴더 아래 빌드 결과가 생성된다. release로 빌드되면 release 폴더가 생성 된다.&amp;nbsp;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;└── target&lt;br /&gt;    └── debug&lt;br /&gt;        ├── build&lt;br /&gt;        ├── examples&lt;br /&gt;        ├── native&lt;br /&gt;...&lt;/code&gt;&lt;/pre&gt;build나 run 같은 서브 명령어 대부분이 비슷한 실행 옵션을 가지기 때문에 세부적인 옵션은 cargo run 부분에서 같이 정리해 둔다.&lt;br /&gt;&lt;br /&gt;빌드와 유사한 명령으로&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;cargo&amp;nbsp;check&lt;/b&gt;&amp;nbsp;명령이 있다. 문법 체크 정도로 생각 하면 된다.&lt;br /&gt;&lt;br /&gt;빌드는 dependency에 있는 모듈들이 같이 컴파일 되기 때문에 시간이 오래 걸린다. 이럴 때 작성 중인 어플리케이션의 문법 체크만 할 수 있다면 시간을 많이 절약 할 수 있다. 이것이 cargo check의 주된 용도다. Rust 1.16릴리즈의 주기능으로 소개 하고 있다. (&lt;a href=&quot;https://blog.rust-lang.org/2017/03/16/Rust-1.16.html&quot;&gt;https://blog.rust-lang.org/2017/03/16/Rust-1.16.html&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;실행&lt;/h4&gt;&lt;b&gt;cargo run&lt;/b&gt;은 main.rs 컴파일 후 실행 하는 것과 동일하다. (lib.rs는 실행 목적이 아니기 때문에 cargo run으로 실행 할 수 없다.)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;cargo run&lt;/b&gt; 옵션 중 몇 가지를 살펴 보자.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;--bin NAME           Name of the bin target to run&lt;br /&gt;--example NAME       Name of the example target to run&lt;br /&gt;-j N, --jobs N       Number of parallel jobs, defaults to # of CPUs&lt;br /&gt;--release            Build artifacts in release mode, with optimizations&lt;br /&gt;--features FEATURES  Space-separated list of features to also build&lt;br /&gt;--all-features       Build all available features&lt;br /&gt;--no-default-features   Do not build the `default` feature&lt;br /&gt;--target TRIPLE      Build for the target triple&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;b&gt;--bin&lt;/b&gt;은 실행 할 타겟을 지정 하는 옵션이다. 보통의 경우 워크스페이스 안에서 다른 실행 타겟을 지정 할 일이 없기 때문에 그렇게 유용한 기능은 아니다. 가령, &lt;b&gt;cargo new hello&lt;/b&gt;와 같이 &lt;b&gt;hello&lt;/b&gt;패키지를 만들고 빌드한 경우&amp;nbsp;&lt;b&gt;cargo run&lt;/b&gt;과 &lt;b&gt;cargo run --bin hello&lt;/b&gt;는 차이가 없다. &lt;b&gt;cargo run --bin hello2&lt;/b&gt;와 같이 실행 할 일이 없다는 말이다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;--example 옵션&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;cargo는 문서화나 유닛 테스트도 지원 하지만 예제를 별도로 실행 할 수 있는 환경도 제공 한다.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;b&gt;examples&lt;/b&gt;&amp;nbsp;디렉토리&lt;/span&gt;에 &quot;hello example&quot;을 출력하는 예제를 만들어 보자.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  cargo-test git:(master) ✗ tree&lt;br /&gt;.&lt;br /&gt;├── Cargo.lock&lt;br /&gt;├── Cargo.toml&lt;br /&gt;├── examples&lt;br /&gt;│   └── hello.rs&lt;br /&gt;├── src&lt;br /&gt;│   └── main.rs&lt;br /&gt;&lt;br /&gt;➜  cargo-test git:(master) ✗ cat examples/hello.rs&lt;br /&gt;fn main() {&lt;br /&gt; println!(&quot;hello example!&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;examples 디렉토리이 있는 어플리케이션은&amp;nbsp;--example 옵션으로 실행 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo run --example hello&lt;br /&gt;hello example!&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;조건부 컴파일&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Rust는 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;조건부 컴파일&lt;/b&gt;을 지원한다. 코드에 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&quot;cfg&quot; 속성에 &quot;feature&quot;를 기술&lt;/span&gt;해 두면 조건부로 컴파일 할 수 있다. ( &lt;u&gt;Rust attribute&lt;/u&gt;:&amp;nbsp;&lt;a href=&quot;https://doc.rust-lang.org/book/attributes.html&quot;&gt;https://doc.rust-lang.org/book/attributes.html&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;&lt;br /&gt;가령, mysql 실행 환경으로 조건부 빌드 한다면 아래와 같이 사용 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;rust hljs&quot;&gt;fn main() {&lt;br /&gt; let datasource = Datasource {};&lt;br /&gt; datasource.stmt();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;struct Datasource {}&lt;br /&gt;&lt;br /&gt;#[cfg(feature = &quot;postgres&quot;)]&lt;br /&gt;impl A {&lt;br /&gt; pub fn stmt(self) {&lt;br /&gt;     println!(&quot;postgres!&quot;);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;#[cfg(feature = &quot;mysql&quot;)]&lt;br /&gt;impl A {&lt;br /&gt; pub fn stmt(self) {&lt;br /&gt;     println!(&quot;mysql!&quot;);&lt;br /&gt; }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo run --example hello --features mysql&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;background-color: white;&quot;&gt;--target&lt;/span&gt; 옵션&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;target은 실행 환경을 말한다. 예를들어 &lt;b&gt;Synology NAS&lt;/b&gt;에서 Rust 프로그램을 구동 하려면 &lt;b&gt;armv7-unknown-linux-gnueabihf&lt;/b&gt;&amp;nbsp;타겟을 지정해야 한다.&lt;br /&gt;&lt;br /&gt;아래는 실제 &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;로 만든 &lt;a href=&quot;https://hub.docker.com/r/freestrings/rust-build-armv7/&quot; target=&quot;_blank&quot;&gt;Synology&amp;nbsp;용 Rust 컴파일 환경&lt;/a&gt;이다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;FROM ubuntu:latest&lt;br /&gt;&lt;br /&gt;RUN apt-get update \&lt;br /&gt; &amp;amp;&amp;amp; apt-get install -y curl file sudo build-essential&lt;br /&gt;&lt;br /&gt;RUN apt-get install -qq gcc-arm-linux-gnueabihf&lt;br /&gt;&lt;br /&gt;ENV PATH &quot;/root/.cargo/bin:$PATH&quot;&lt;br /&gt;&lt;br /&gt;RUN curl https://sh.rustup.rs &amp;gt; rustup.sh \&lt;br /&gt; &amp;amp;&amp;amp; sh rustup.sh -y \&lt;br /&gt; &amp;amp;&amp;amp; rustup target add armv7-unknown-linux-gnueabihf \&lt;br /&gt; &amp;amp;&amp;amp; mkdir -p ~/.cargo \&lt;br /&gt; &amp;amp;&amp;amp; echo &quot;[target.armv7-unknown-linux-gnueabihf]\nlinker = \&quot;arm-linux-gnueabihf-gcc\&quot;&quot; &amp;gt; ~/.cargo/config&lt;br /&gt;&lt;br /&gt;RUN echo &quot;cargo build --release --target=armv7-unknown-linux-gnueabihf&quot; &amp;gt; /release.sh&lt;br /&gt;&lt;br /&gt;VOLUME /work&lt;br /&gt;WORKDIR /work&lt;br /&gt;&lt;br /&gt;CMD [&quot;/bin/bash&quot;, &quot;/release.sh&quot;]&lt;/code&gt;&lt;/pre&gt;Docker image를 이용해 코드를 컴파일 해 보면 target 디렉토리 아래&amp;nbsp;&lt;b&gt;armv7-unknown-linux-gnueabihf &lt;/b&gt;를 확인 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;docker run -it --rm -v “$PWD”:/work freestrings/rust-build-armv7&lt;br /&gt;tree&lt;br /&gt;…&lt;br /&gt;&lt;br /&gt;├── src&lt;br /&gt;│   └── main.rs&lt;br /&gt;├── target&lt;br /&gt;│   ├── armv7-unknown-linux-gnueabihf&lt;br /&gt;│   │   └── release&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/freestrings/markdang&quot;&gt;Rust로 작성한 ID3 tagger&lt;/a&gt;를 Synology에서 컴파일하고 실행한 결과&lt;/div&gt;&lt;div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-rRpNwHnWqKQ/WNkte9fD2PI/AAAAAAAAAzw/s1SKuvRxWsk9rADE8zqeIS5THJYN8LXGQCLcB/s1600/Screenshot%2Bfrom%2B2017-03-12%2B15-09-25.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;564&quot; src=&quot;https://1.bp.blogspot.com/-rRpNwHnWqKQ/WNkte9fD2PI/AAAAAAAAAzw/s1SKuvRxWsk9rADE8zqeIS5THJYN8LXGQCLcB/s640/Screenshot%2Bfrom%2B2017-03-12%2B15-09-25.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;실제 Synology NAS에서 동작화면&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h4&gt;유닛 테스트&lt;/h4&gt;유닛테스트는&amp;nbsp;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;b&gt;cargo test&lt;/b&gt;&lt;/span&gt;로 실행 할 수 있는다.&amp;nbsp;&lt;b&gt;cargo init --lib&lt;/b&gt;로 프로젝트를 생성 하면 기본 코드를 생성 해 준다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  test1 git:(master) ✗ cat src/lib.rs&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test]&lt;br /&gt;    fn it_works() {&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;`it_works()`에 간단한 내용을 넣고 유닛 테스트를 실행 해 보자.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cat src/lib.rs&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test]&lt;br /&gt;    fn it_works() {&lt;br /&gt;       println!(&quot;###it works!###&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cargo test&lt;br /&gt;   Compiling test1 v0.1.0 (file:///home/han/test1)&lt;br /&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.43 secs&lt;br /&gt;     Running target/debug/deps/test1-392907a04c6c34cd&lt;br /&gt;&lt;br /&gt;running 1 test&lt;br /&gt;test tests::it_works ... ok&lt;br /&gt;&lt;br /&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured&lt;br /&gt;&lt;br /&gt;   Doc-tests test1&lt;br /&gt;&lt;br /&gt;running 0 tests&lt;br /&gt;&lt;br /&gt;test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured&lt;/code&gt;&lt;/pre&gt;유닛 테스트는 통과 했지만 “###it_works!###”는 출력 되지 않는다.&amp;nbsp;&lt;b&gt;cargo test --help&lt;/b&gt;를 보면&amp;nbsp;&lt;b&gt;--nocapture&lt;/b&gt;가 없으면 출력이 보이지 않는다고 한다. (디버깅용으로 문자열을 넣었는데 보는데 안보이면 난감하다.)&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;Usage:&lt;br /&gt;    cargo test [options] [--] [&lt;args&gt;...]&lt;br /&gt;…&lt;br /&gt;&lt;br /&gt;By default the rust test harness hides output from test execution to&lt;br /&gt;keep results readable. Test output can be recovered (e.g. for debugging)&lt;br /&gt;by passing `--nocapture` to the test binaries:&lt;br /&gt;&lt;br /&gt;  cargo test -- --nocapture&lt;/args&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cargo test -- --nocapture&lt;br /&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs&lt;br /&gt;     Running target/debug/deps/test1-392907a04c6c34cd&lt;br /&gt;&lt;br /&gt;running 1 test&lt;br /&gt;###it works!###&lt;br /&gt;test tests::it_works ... ok&lt;br /&gt;&lt;br /&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured&lt;br /&gt;...&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;유닛 테스트 작성 방법&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Rust에서&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;유닛 테스트 작성 방법은 두가지&lt;/b&gt;다.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/book/crates-and-modules.html&quot;&gt;모듈&lt;/a&gt;에 #[cfg(test)]속성을 선언한 뒤 테스트 케이스에 #[test] 속성을 선언하는 방법&amp;nbsp;&lt;/li&gt;&lt;li&gt;프로젝트 루트에 tests 폴더 생성하는 방법&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  tests git:(master) ✗ tree&lt;br /&gt;.&lt;br /&gt;├── Cargo.toml&lt;br /&gt;├── src&lt;br /&gt;│&amp;nbsp;&amp;nbsp; └── lib.rs&lt;br /&gt;└── tests&lt;br /&gt;    └── hello_test.rs&lt;/code&gt;&lt;/pre&gt;tests/*.rs 파일에는 &lt;b&gt;cfg&lt;/b&gt;속성 없이 &lt;b&gt;#[test]&lt;/b&gt;&amp;nbsp;속성만 적어주면 된다. 실제 사용된 코드를 보면 쉽게 이해할 수 있다. (&lt;a href=&quot;https://github.com/freestrings/rtag/tree/master/tests&quot;&gt;https://github.com/freestrings/rtag/tree/master/tests&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;그리고 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;b&gt;cargo test&lt;/b&gt;는 아직 &lt;b&gt;test suite&lt;/b&gt;같은 것이 없다.&lt;/span&gt;&amp;nbsp;단위 test별 순차 실행이 아니라 병렬 실행이기 때문에 순서 보장도 되지 않는다. 테스트 케이스 4개정도 만들어 실행 해 보면 확인 가능하다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  test1 git:(master) ✗ cargo test&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;running 4 tests&lt;br /&gt;test tests::t3 ... ok&lt;br /&gt;test tests::t1 ... ok&lt;br /&gt;test tests::t2 ... ok&lt;br /&gt;test tests::t4 ... ok&lt;br /&gt;&lt;br /&gt;test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;그리고 특정 유닛 테스트만 실행 해 볼 수 있는데 테스트 케이스명(메소드 이름)을 명시해 주면된다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo test t1&lt;/code&gt;&lt;/pre&gt;아직 복수개의 유닛 테스트를 실행하는 방법이나 패턴 같은 것은 제공하지 않는 것 같지만, &lt;b&gt;동일한&amp;nbsp;테스트 케이스명으로 시작되는 테스트는 모두 실행&lt;/b&gt; 시킬 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;tree&lt;br /&gt;.&lt;br /&gt;├── Cargo.lock&lt;br /&gt;├── Cargo.toml&lt;br /&gt;└── src&lt;br /&gt;    ├── sub&lt;br /&gt;    │   └── mod.rs&lt;br /&gt;    └── lib.rs&lt;br /&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cat src/lib.rs&lt;br /&gt;mod sub;&lt;br /&gt;&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test] fn t1() {}&lt;br /&gt;    #[test] fn t2() {}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cat src/sub/mod.rs&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test] fn t1() {}&lt;br /&gt;    #[test] fn t2() {}&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;# t1으로 시작&lt;br /&gt;cargo test t1&lt;br /&gt;running 2 tests&lt;br /&gt;test sub::tests::t1 … ok&lt;br /&gt;test tests::t1 … ok&lt;br /&gt;&lt;br /&gt;# t로 시작&lt;br /&gt;cargo test t&lt;br /&gt;running 4 tests&lt;br /&gt;test sub::tests::t1 … ok&lt;br /&gt;test tests::t1 … ok&lt;br /&gt;test tests::t2 … ok&lt;br /&gt;test sub::tests::t2 … ok&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;그 밖에 &lt;b&gt;cargo test&lt;/b&gt;&amp;nbsp;옵션은 run과 거의 동일하다.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;소스코드 문서화와 실행&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;참고(&amp;nbsp;&lt;a href=&quot;https://doc.rust-lang.org/book/documentation.html#documentation-as-tests&quot; target=&quot;_blank&quot;&gt;https://doc.rust-lang.org/book/documentation.html#documentation-as-tests&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;&lt;br /&gt;Markdown으로 작성해서 쉽게 문서화 할 수 있기도 하지만 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;예시된 코드가 실제 동작 가능 해야&lt;/span&gt;&amp;nbsp;한다. 주석내 코드를 문서화 시점에 컴파일하고 실행 한다는 이야기다. Markdown 코드 블럭을 사용하면&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;rustdoc이&amp;nbsp;자동으로 main() wrapper를 코드에 붙이기 때문&lt;/b&gt;이다. rust test로 문서화 주석내 코드를 실행 해 볼 수 있다. 혹시, 리소스를 삭제하는 예시가 있다면 조심 해야 한다.&lt;br /&gt;&lt;br /&gt;문서화 주석은 Triple Slash를 사용하거나 아래 처럼 사용 할 수 도 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;//!# Example: reading V1 frame.&lt;br /&gt;//!&lt;br /&gt;//! ```rust&lt;br /&gt;//! use rtag::metadata::Unit;&lt;br /&gt;//! use rtag::metadata::MetadataReader;&lt;br /&gt;//!&lt;br /&gt;//! for m in MetadataReader::new(&quot;./test-resources/v1-v2.mp3&quot;).unwrap() {&lt;br /&gt;//!     match m {&lt;br /&gt;//!         Unit::FrameV1(frame) =&amp;gt; {&lt;br /&gt;//!             assert_eq!(&quot;Artist&quot;, frame.artist);&lt;br /&gt;//!             assert_eq!(&quot;!@#$&quot;, frame.comment);&lt;br /&gt;//!             assert_eq!(&quot;1&quot;, frame.track);&lt;br /&gt;//!             assert_eq!(&quot;137&quot;, frame.genre);&lt;br /&gt;//!         },&lt;br /&gt;//!         _ =&amp;gt; ()&lt;br /&gt;//!     }&lt;br /&gt;//! }&lt;br /&gt;//! ```&lt;/code&gt;&lt;/pre&gt;그리고 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;no_run 속성을 사용하면 실행 없이 컴파일만&lt;/span&gt;&lt;/span&gt; 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;/// ```rust,no_run&lt;br /&gt;/// loop {&lt;br /&gt;///     println!(&quot;Hello, world&quot;);&lt;br /&gt;/// }&lt;br /&gt;/// ```&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;배포&lt;/h4&gt;&lt;a href=&quot;https://crates.io/&quot;&gt;https://crates.io/&lt;/a&gt; 사이트가 Rust 커뮤니티에서 호스팅 하는 공식 모듈 저장소다. 배포를 하면 여기에 등록 된다.&lt;br /&gt;&lt;br /&gt;전반적인 방법은 &lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;http://doc.crates.io/crates-io.html&lt;/a&gt; 에 잘 기술 되어 있다. 내용이 많긴 하지만 배포 자체는 간단하다 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;cargo login&lt;/b&gt;으로 최초 로그인을 한번 해 두면 되고 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;cargo publish&lt;/b&gt;로 배포하면 된다.&lt;br /&gt;&lt;br /&gt;나머지는 Cargo.toml 파일을 기술하는 방법들인데 양이 좀 있어서 다른 글에서 정리 하기로 하고 한가지 주의할 부분만 정리하면,&lt;br /&gt;&lt;br /&gt;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;배포는 10M제한&lt;/b&gt;이 있어서 &lt;b&gt;include, exclude&lt;/b&gt;를 잘 적어 줘야 한다. 보통 유닛 테스트에 필요한 mp3 파일들은 모듈에 포함 시켜 배포 할 필요가 없다. [package] 카테고리 아래 exclude 속성을 적어 패키징 때 제외할 파일을 나열 하거나, include 속성으로 포함 할 파일 들만 지정 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;[package]&lt;br /&gt;name = &quot;rtag&quot;&lt;br /&gt;version = &quot;0.3.4&quot;&lt;br /&gt;authors = [&quot;Changseok Han&lt;freestrings gmail.com=&quot;&quot;&gt;&quot;]&lt;br /&gt;description = &quot;Library for reading and writing a id3 metadata&quot;&lt;br /&gt;repository = &quot;https://github.com/freestrings/rtag&quot;&lt;br /&gt;license = &quot;MIT&quot;&lt;br /&gt;keywords = [&quot;library&quot;, &quot;id3&quot;, &quot;music&quot;, &quot;mp3&quot;]&lt;br /&gt;include = [&quot;src/*.rs&quot;, &quot;tests/*.rs&quot;, &quot;Cargo.toml&quot;]&lt;/freestrings&gt;&lt;/code&gt;&lt;/pre&gt;include와 exclude를 같이 적어 줄 때는 파일이 중복되지 않게 신경을 써야 한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;커스텀 빌드&lt;/h4&gt;빌드나 배포가 간단하면 좋겠지만 환경 구성이 필요 할 경우 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;빌드 스크립트&lt;/b&gt;를 사용 할 수 있다. (&amp;nbsp;&lt;a href=&quot;http://doc.crates.io/build-script.html&quot;&gt;http://doc.crates.io/build-script.html&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;[package]&lt;br /&gt;# ...&lt;br /&gt;build = &quot;build.rs&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Rust도 다른 언어와 마찬가지로 FFI(Foreign Function Interface)를 지원한다. C로 개발된 모듈과 연동 할 수 있지만 아래와 같은 선언이 필요하고 C코드도 컴파일 해야 한다. 이럴 경우 빌드 스크립트가 필요하다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;rust hljs&quot;&gt;&lt;br /&gt;...&lt;br /&gt;#[link(name = &quot;id3v2&quot;)]&lt;br /&gt;extern {&lt;br /&gt;    // frame&lt;br /&gt;    fn parse_text_frame_content(ptr: *mut ID3v2_frame) -&amp;gt; *mut ID3v2_frame_text_content;&lt;br /&gt;&lt;br /&gt;    // id3v2lib&lt;br /&gt;    fn load_tag(file_name: *const c_char) -&amp;gt; *mut ID3v2_tag;&lt;br /&gt;    fn set_tag(file_name: *const c_char, tag: *mut ID3v2_tag);&lt;br /&gt;&lt;br /&gt;    fn tag_get_title(ptr: *mut ID3v2_tag) -&amp;gt; *mut ID3v2_frame;&lt;br /&gt;    fn tag_get_artist(ptr: *mut ID3v2_tag) -&amp;gt; *mut ID3v2_frame;&lt;br /&gt;    ...&lt;br /&gt;}&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Git 저장소에서 파일을 내려 받고 컴파일 하는 코드&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;rust hljs&quot;&gt;➜  rust-ffi git:(master) cat build.rs &lt;br /&gt;extern crate git2;&lt;br /&gt;&lt;br /&gt;use std::env;&lt;br /&gt;use std::fs;&lt;br /&gt;use std::process::Command;&lt;br /&gt;use std::path::Path;&lt;br /&gt;use git2::Repository;&lt;br /&gt;&lt;br /&gt;fn main() {&lt;br /&gt;    let url = &quot;https://github.com/larsbs/id3v2lib.git&quot;;&lt;br /&gt;&lt;br /&gt;    let base_path_str = env::current_dir().unwrap();&lt;br /&gt;    let base_path = Path::new(&amp;amp;base_path_str);&lt;br /&gt;    let id3v2_path = base_path.join(&quot;target/debug/build/id3v2lib&quot;);&lt;br /&gt;    let id3v2_build_path = id3v2_path.join(&quot;build&quot;);&lt;br /&gt;    let id3v2_library_dir = id3v2_build_path.join(&quot;src&quot;);&lt;br /&gt;    let id3v2_library_path = id3v2_library_dir.join(&quot;libid3v2.a&quot;);&lt;br /&gt;&lt;br /&gt;    if id3v2_path.exists() {&lt;br /&gt;        // TODO git pull&lt;br /&gt;    } else {&lt;br /&gt;        Repository::clone(url, id3v2_path).unwrap();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    match fs::create_dir_all(id3v2_build_path.to_str().unwrap()) {&lt;br /&gt;        Ok(()) =&amp;gt; {&lt;br /&gt;            let status = Command::new(&quot;cmake&quot;)&lt;br /&gt;                .current_dir(id3v2_build_path.to_str().unwrap())&lt;br /&gt;                .arg(&quot;..&quot;)&lt;br /&gt;                .status()&lt;br /&gt;                .expect(&quot;failed to cmake&quot;);&lt;br /&gt;            assert!(status.success());&lt;br /&gt;&lt;br /&gt;            let status = Command::new(&quot;make&quot;)&lt;br /&gt;                .current_dir(id3v2_build_path.to_str().unwrap())&lt;br /&gt;                .status()&lt;br /&gt;                .expect(&quot;failed to make&quot;);&lt;br /&gt;            assert!(status.success());&lt;br /&gt;&lt;br /&gt;            assert!(id3v2_library_path.exists());&lt;br /&gt;&lt;br /&gt;            println!(&quot;cargo:rustc-link-search=native={}&quot;, id3v2_library_dir.to_str().unwrap());&lt;br /&gt;            println!(&quot;cargo:rustc-link-lib=static=id3v2&quot;);&lt;br /&gt;        },&lt;br /&gt;        Err(_) =&amp;gt; ()&lt;br /&gt;    }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;빌드 스크립트 역시 cargo build 명령으로 실행 할 수 있다.&lt;br /&gt;&lt;h4&gt;정리&lt;/h4&gt;&lt;div&gt;사이드 프로젝트를 진행 하면서 느낀 점은 Cargo는 사용법이 단순하고 무엇보다 Docker 처럼 배포가 간단해서 좋았다. 유닛 테스트는 다른 프레임 워크에 비해 기능이 부족 한게 약간 아쉽지만, 개인 프로젝트 전체 사이클을 소화 하는데는 부족함이 없었던 것 같다.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/4264508961041754751/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2017/03/cargo-cargo.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/4264508961041754751'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/4264508961041754751'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2017/03/cargo-cargo.html' title='Cargo 패키지 시스템 - Cargo로 프로젝트 생성부터 배포까지'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-rRpNwHnWqKQ/WNkte9fD2PI/AAAAAAAAAzw/s1SKuvRxWsk9rADE8zqeIS5THJYN8LXGQCLcB/s72-c/Screenshot%2Bfrom%2B2017-03-12%2B15-09-25.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-166631988878767666</id><published>2017-03-27T00:08:00.001+09:00</published><updated>2017-03-28T01:03:53.218+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cargo"/><category scheme="http://www.blogger.com/atom/ns#" term="lifetime"/><category scheme="http://www.blogger.com/atom/ns#" term="macro"/><category scheme="http://www.blogger.com/atom/ns#" term="ownership"/><category scheme="http://www.blogger.com/atom/ns#" term="rustlang"/><title type='text'>Rust를 배워보자</title><content type='html'>개인적으로 명시적으로 컴파일 되는 언어를 좋아 하고 Rust의 오너쉽(Ownership)모델이 이색적이어서 기회가 되면 Rust를 익혀 봐야지 했었다. 마침 소장하고 있는 mp3 파일들을 정리를 하던 중이라 &lt;a href=&quot;http://id3.org/&quot;&gt;ID3&lt;/a&gt; 검색기 겸  태거(Tagger)를 만들어 보기로 마음 먹었다. 대충 문법만 읽고 시작했다가 큰코 다쳤던 삽질기를 정리 해 둔다.&lt;br /&gt;&lt;br /&gt;짧은 소감은 오너쉽 모델 때문에 코딩이 더디다. 평소의 코딩 패턴도 바뀐다. 그렇지만 컴파일만 통과하면 견고한 결과물을 얻을 수 있다. 물론, 다른 언어로 개발하면 프로그램이 견고하지 않다는 뜻은 아니다. Mutable 변수와 Immutable 변수로 선언하는데 그치지 않고 값을 넘겨 줄 때 즉, 빌려줄 때 &quot;소유권 이전&quot;, &quot;읽기용 참조&quot; 그리고 &quot;수정용 참조&quot;로 명시 할 수 있어서 예상치 못한 데이터 변경 오류에 견고하다는 의미다.&lt;br /&gt;&lt;br /&gt;개발 할 땐 참고 서적/사이트, 개발 툴과 정보를 얻을 수 있는 커뮤니티를 중요하게 생각 하는 편인데, &lt;br /&gt;&lt;br /&gt;아직 Rust 관련된 책이 몇 권 없는게 아쉬웠다. 그렇지만 공식 사이트 &lt;a href=&quot;http://rust-lang.github.io/book&quot;&gt;http://rust-lang.github.io/book&lt;/a&gt;과 &lt;a href=&quot;https://doc.rust-lang.org/&quot;&gt;https://doc.rust-lang.org&lt;/a&gt; 이 훌륭해서 개인적으로 언어를 익히기엔 충분했고,&lt;br /&gt;&lt;br /&gt;패키지 시스템인 Cargo(&lt;a href=&quot;https://crates.io/&quot;&gt;https://crates.io/&lt;/a&gt;)가 마크다운 형식의 문서화 지원하고, Git 연동, 유닛 테스트 환경 그리고 크로스 컴파일 환경, 모듈 레지스터리 서비스 연동등을 제공한다. 물론, 빌드 스크립트도 작성 할 수 있고, 시스템 언어라서 크로스 컴파일도 지원한다. 무엇보다 사용법이 단순해서 학습곡선이 낮다는 점이 좋다.&lt;br /&gt;&lt;br /&gt;사용해본 개발툴은 Intellij와 Visual Studio Code 두가지 인데, IntelliJ는 IDE인 만큼 리팩토링 기능이나 호출자(Caller) 보기와 같은 기능이 더 지원 되지만 많이 무거웠지만, 양쪽 모두 코드 정의 가기(Go to Definition)가 잘 동작해서 표준 “std” 모듈은 물론, 프로젝트에 사용한 모듈의 코드를 볼 수 있어 큰 불편함은 없다. 인텔리J를 통해 컴파일 하면 노트북 팬이 너무 돌아서 후반엔 가벼운 VSCode를 사용했다.&lt;br /&gt;&lt;br /&gt;그 밖에 &lt;a href=&quot;https://users.rust-lang.org/&quot;&gt;https://users.rust-lang.org/&lt;/a&gt; 에는 매일 새글들이 올라오고 댓글도 잘 달리는 편이며, 커뮤니티 운영팀(&lt;a href=&quot;https://www.rust-lang.org/en-US/team.html#Community-team&quot;&gt;https://www.rust-lang.org/en-US/team.html#Community-team&lt;/a&gt;)과 문서팀(&lt;a href=&quot;https://www.rust-lang.org/en-US/team.html#Documentation-team&quot;&gt;https://www.rust-lang.org/en-US/team.html#Documentation-team&lt;/a&gt;)도 공식적으로 운영되고 있어서 Rust는 전반적으로 정돈되고 관리되는, 조직적인 프로젝트 느낌을 받았다.&lt;br /&gt;&lt;br /&gt;삽질 영역을 나누어 보니 크게 아래 정도다. 파트로 나누어 정리 해 두기로,,&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Cargo 패키지 시스템&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://free-strings.blogspot.com/2017/03/cargo-cargo.html&quot; target=&quot;_blank&quot;&gt;Cargo로 프로젝트 생성부터 배포까지&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Cargo.toml과 모듈 버전관리&lt;/li&gt;&lt;li&gt;Synology NAS에서 동작 할 수 있게 크로스 빌드&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Null이 없다. try~catch도 없다. Option과 Result&lt;/li&gt;&lt;li&gt;자바가 아니다. Trait과 Generic&lt;/li&gt;&lt;li&gt;상속을 표현 할 수 없다. enum, struct 그리고 match&lt;/li&gt;&lt;li&gt;삽질의 연속. Ownership과 Lifetime&lt;/li&gt;&lt;li&gt;기타. Macro, Closure&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/166631988878767666/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2017/03/rust.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/166631988878767666'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/166631988878767666'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2017/03/rust.html' title='Rust를 배워보자'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-7890330171288412482</id><published>2016-10-09T00:45:00.000+09:00</published><updated>2017-03-26T23:56:33.465+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="vertx"/><category scheme="http://www.blogger.com/atom/ns#" term="vertx-cpu"/><category scheme="http://www.blogger.com/atom/ns#" term="vertx-eventloop"/><category scheme="http://www.blogger.com/atom/ns#" term="vertx-singlethread"/><title type='text'>[Vert.x] Vertlcle, Event Loop 그리고 Thread</title><content type='html'>Vert.x 실행 할 때 Verticle 개수와 CPU 개수나 Thread 개수 연관 등이 궁금해서 잠시 테스트 해 보았다.&lt;br /&gt;&lt;br /&gt;Vert.x의 Verticle은 Event Loop에서 동작한다. 여기서 Event Loop는 Netty의 &quot;io.netty.channel.nio.NioEventLoop&quot;를 말하며, NIO Selector 기반이다.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;NIO Selector &lt;a href=&quot;http://tutorials.jenkov.com/java-nio/selectors.html&quot; target=&quot;_blank&quot;&gt;설명&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;간단한 EventLoop &lt;a href=&quot;https://gist.github.com/AdoHe/30a33f3eb206c7639fe0)%20%20-%20NioEventLoop.java&quot; target=&quot;_blank&quot;&gt;구현&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty/blob/eb7f751ba519cbcab47d640cd18757f09d077b55/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java&quot; target=&quot;_blank&quot;&gt;NioEventLoop.java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Event Loop Pool 개수는 NioEventLoop를 생성하는 개수가 된다. Event Loop Pool 개수를 지정 하지 않으면 아래가 기본 공식이다.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;2 * Runtime.getRuntime().availableProcessors()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Vert.x의 Verticle은 Event Loop에서 동작한다 했다. 정확히는 Event Loop는 Single Threaded Executor이고 Verticle은 하나의 실행 Task이다. Verticle이 실행 될 때 Thread 이름과 함께 로그를 남겨 보면 Verticle을 실행한 Event Loop의 Thread를 확인 할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.App - !!!Start App!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-3               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-4               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!!&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;코드로 Event Loop Pool 크기를 지정 할 수 있는데,&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;VertxOptions vertxOptions &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; VertxOptions&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;vertxOptions&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setEventLoopPoolSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;vertx &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Vertx&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;vertx&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;vertxOptions&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Event Loop Pool 개수를 Verticle 개수 보다 적게 만들어 보면 하나의 Event Loop에서 여러 개의 Verticle이 실행 됨을 알 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.App - !!!Start App!!! 17&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! 21&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! 21&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!! 22&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!! 22&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;그리고 스트레스 테스트를 해보면 Verticle 인스턴스는 처음 실행 된 Thread 에서 실행 되는 것을 알 수 있다. &amp;nbsp;(코드를 살펴보지 않아서 Event Loop가 생성 될 때 Verticle이 할당되는 것인지 실행 시점에 순차적으로 Verticle을 호출 하는 지는 알 수 없다,,)&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;정리하면&lt;/h3&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;NIO Selector = NioEventLoop = SingleThreadEventLoop = Vert.x Event Loop&lt;/span&gt;의 관계가 된다. 그리고 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;Event Loop : Verticle = 1 : N &lt;/span&gt;의 관계도 성립 되며 Event Loop에서 여러 개의 Verticle이 실행되는 것은 Single Thread Executor 에서 실행되는 여러 Task의 관계로 볼 수 있다. 그래서 꼭 Core 개수와 Verticle 개수가 일치가 성능을 &amp;nbsp;좌우 하지 않음을 알 수 있다.&lt;br /&gt;&lt;h4&gt;참고&lt;/h4&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;siege -b -c100 -t 10S http://127.0.0.1:8080/vertx&lt;br /&gt;&lt;br /&gt;-------------------------------------------------&lt;br /&gt;- 4 core&lt;br /&gt;- 5 verticle&lt;br /&gt;- 1 event loop pool count&lt;br /&gt;&lt;br /&gt;1회&lt;br /&gt;Transactions:          8866 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.58 secs&lt;br /&gt;Data transferred:         0.34 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.11 secs&lt;br /&gt;Transaction rate:       925.47 trans/sec&lt;br /&gt;Throughput:          0.04 MB/sec&lt;br /&gt;Concurrency:         99.24&lt;br /&gt;Successful transactions:        8866&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.33&lt;br /&gt;Shortest transaction:         0.10&lt;br /&gt;&lt;br /&gt;2회&lt;br /&gt;Transactions:          9706 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.92 secs&lt;br /&gt;Data transferred:         0.37 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.10 secs&lt;br /&gt;Transaction rate:       978.43 trans/sec&lt;br /&gt;Throughput:          0.04 MB/sec&lt;br /&gt;Concurrency:         99.56&lt;br /&gt;Successful transactions:        9706&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.16&lt;br /&gt;Shortest transaction:         0.10&lt;br /&gt;&lt;br /&gt;-------------------------------------------------&lt;br /&gt;- 4 core&lt;br /&gt;- 5 verticle&lt;br /&gt;- 2 event loop pool count&lt;br /&gt;&lt;br /&gt;1회&lt;br /&gt;Transactions:         20908 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.55 secs&lt;br /&gt;Data transferred:         0.80 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.05 secs&lt;br /&gt;Transaction rate:      2189.32 trans/sec&lt;br /&gt;Throughput:          0.08 MB/sec&lt;br /&gt;Concurrency:         99.52&lt;br /&gt;Successful transactions:       20908&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.25&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;br /&gt;2회&lt;br /&gt;Transactions:         22316 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.94 secs&lt;br /&gt;Data transferred:         0.85 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.04 secs&lt;br /&gt;Transaction rate:      2245.07 trans/sec&lt;br /&gt;Throughput:          0.09 MB/sec&lt;br /&gt;Concurrency:         99.45&lt;br /&gt;Successful transactions:       22316&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.11&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;br /&gt;-------------------------------------------------&lt;br /&gt;- 4 core&lt;br /&gt;- 5 verticle&lt;br /&gt;- 8 event loop pool count&lt;br /&gt;&lt;br /&gt;1회&lt;br /&gt;Transactions:         19887 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.04 secs&lt;br /&gt;Data transferred:         0.76 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.05 secs&lt;br /&gt;Transaction rate:      2199.89 trans/sec&lt;br /&gt;Throughput:          0.08 MB/sec&lt;br /&gt;Concurrency:         99.67&lt;br /&gt;Successful transactions:       19887&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.14&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;br /&gt;2회&lt;br /&gt;Transactions:         21064 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.38 secs&lt;br /&gt;Data transferred:         0.80 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.04 secs&lt;br /&gt;Transaction rate:      2245.63 trans/sec&lt;br /&gt;Throughput:          0.09 MB/sec&lt;br /&gt;Concurrency:         99.35&lt;br /&gt;Successful transactions:       21064&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.11&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/freestrings/playground/tree/master/vert.x&quot; target=&quot;_blank&quot;&gt;테스트 코드&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/7890330171288412482/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/10/vertx-vertical-event-loop-thread.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/7890330171288412482'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/7890330171288412482'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/10/vertx-vertical-event-loop-thread.html' title='[Vert.x] Vertlcle, Event Loop 그리고 Thread'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-3583323039308797756</id><published>2016-06-14T14:43:00.000+09:00</published><updated>2017-03-26T23:56:14.868+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-internal"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-producer"/><title type='text'>[코드로 보는 카프카] Producer: BufferPool</title><content type='html'>&amp;nbsp;카프카 프로듀서는 메시지를 전송할 때 ByteBuffer를 사용한다. ByteBuffer는 생성하는 쓰레드에서 큰 메모리 단위를 생성하거나 여러 버퍼에 할당된 메모리를 해제할 때 쓰레드는 기아가 되거나 데드락이 될 수 있다. 이런 문제 때문에 프로듀서는 BufferPool을 사용한다. &amp;nbsp;이 BufferPool은 충분한 메모리가 확보 될 때 까지 쓰레드를 기다리게 할 수 있고, 이미 생성된 ByteBuffer를 재사용 할 수 있으며, 제한된 메모리로 동작할 수 있게 한다.&lt;br /&gt;&lt;br /&gt;실제 &lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java&quot; target=&quot;_blank&quot;&gt;BufferPool.java&lt;/a&gt;는 메트릭 관련 코드도 있고 다른 변수들이 있어 예시보다는 쬐~금 복잡하지만 allocate와 deallocate 부분만 간단히 구현해보고 메모리를 제한하는 방법과 쓰레드를 처리하는 동작 방식에 대해 알아 두기로 한다.&lt;br /&gt;&lt;br /&gt;코드를 보기 앞서 ByteBuffer.allocate와 ReentrantLock에 대해 먼저 알아보자.&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;ByteBuffer.allocate &amp;nbsp;vs ByteBuffer.allocateDirect&lt;/h4&gt;&lt;br /&gt;BufferPool은 allocate를 사용한다. 왜 allocateDirect를 사용하지 않는지는 &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=2133373&amp;amp;seqNum=12&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;에 설명 되어 있는데, 간단히 요약하면 아래 정도의 내용이 된다.&lt;br /&gt;생명주기가 짧거나 자주 사용되지 않는 객체에는 다이렉트 버퍼를 사용하지 않아야 한다. 왜냐하면, 다이렉트 버퍼는 OS 종속적인 네이티브 코드를 사용하기 때문에 힙기반 버퍼보다 생성과 메모리 반환 비용이 높고 가비지 컬렉터의 영역 밖이라 메모리 누수가 있을 수 있다. 용량이 큰 다이렉트 버퍼를 빈번하게 할당하면 OutofMemorryError가 생길 수 있다. &lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;그리고, FileChannel 에서 non-direct Buffer와 direct Buffer 속도비교 (&lt;a href=&quot;http://blog.csdn.net/bestone0213/article/details/49093409&quot; target=&quot;_blank&quot;&gt;FileChannel and non-direct buffer vs. FileChannel and direct buffer&lt;/a&gt;,&amp;nbsp;중국어! 코드와 그림만 보자)&lt;br /&gt;버퍼가 256KB보다 작을땐 non-direct Buffer가 훨씬 빠르고, 256KB보다 클땐 direct Buffer가 약간 빠르다 &lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-Idb3tUFF2OE/WNfWQcpV1eI/AAAAAAAAAzY/vAe_PUyaeMg4ii59YqnT4isF__R7Lcs2QCLcB/s1600/130859399051483.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-Idb3tUFF2OE/WNfWQcpV1eI/AAAAAAAAAzY/vAe_PUyaeMg4ii59YqnT4isF__R7Lcs2QCLcB/s400/130859399051483.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;&lt;br /&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html&quot; target=&quot;_blank&quot;&gt;ReentrantLock&lt;/a&gt;과 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html&quot; target=&quot;_blank&quot;&gt;Condition&lt;/a&gt;&lt;/h4&gt;&lt;br /&gt;Condition에는 await 메소드가 있다. 조건이 만족스럽지 못할 때 현재 쓰레드를 멈추고 기다릴 때 사용한다. 지정된 시간 후 스스로 깨어날 수는 있지만 다른 쓰레드에서 signal이라는 메소드를 호출해 주어도 await 이후 로직을 수행 할 수 있다. 자바 Condition 문서에도 예제가 포함되어있지만,, 다른 예제를 만들어 보았다. &amp;nbsp;두개의 쓰레드가 아래(↓) 위(↑)&amp;nbsp; 화살표쌍을 출력하는 코드다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;br /&gt;34&lt;br /&gt;35&lt;br /&gt;36&lt;br /&gt;37&lt;br /&gt;38&lt;br /&gt;39&lt;br /&gt;40&lt;br /&gt;41&lt;br /&gt;42&lt;br /&gt;43&lt;br /&gt;44&lt;br /&gt;45&lt;br /&gt;46&lt;br /&gt;47&lt;br /&gt;48&lt;br /&gt;49&lt;br /&gt;50&lt;br /&gt;51&lt;br /&gt;52&lt;br /&gt;53&lt;br /&gt;54&lt;br /&gt;55&lt;br /&gt;56&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;ShareBasic&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    Lock lock &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ReentrantLock&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    Condition condition&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; interCount&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// volatile: https://twitter.com/_freestrings/status/688963217784082432&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; isUp&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;ShareBasic&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;iterCount&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        condition &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newCondition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;doUp&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;isUp&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            isUp &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;↑&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;doDown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;interCount&lt;span style=&quot;color: #333333;&quot;&gt;++&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;InterruptedException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;isUp&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            isUp &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;↓&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;동작방식은 아래와 같다.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;9L: isUp은 기본 false&lt;/li&gt;&lt;li&gt;19L: 방향이 up이 아닐동안 condition.await 한다. 즉, 현재 쓰레드를 블럭 시킨다.&lt;/li&gt;&lt;li&gt;48L: 방향을 up으로 바꾸고 &#39;↓&#39;를 출력한뒤, condition.signal()을 호출해 현재 조건(condition) 이 만족 할 때까지 await중인 다른 쓰레드를 깨운다.&lt;/li&gt;&lt;li&gt;26L: await가 풀리고, 방향을 바꾼뒤 &#39;↑&#39;을 출력한다.&lt;/li&gt;&lt;li&gt;36L: 반복하다가 지정된 카운트에 도달하면 예외를 던진다&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;실행을 하려면 두개의 쓰레드가 각각 doUp()과 doDown()을 호출 하도록 만들어 주면 되는데,&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; iterCount &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;20&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;ShareBasic share &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ShareBasic&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;iterCount&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;ExecutorService executorService &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Executors&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;executorService&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;((&lt;/span&gt;Runnable&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;        IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; share&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;doUp&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;executorService&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;((&lt;/span&gt;Runnable&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            share&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;doDown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        executorService&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;iterCount에 따라 다르겠지만 위아래 화살표 쌍이 한라인씩 보이게 된다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-jfVS7NznGPg/V1o1FD-kVtI/AAAAAAAAArs/X5nt0jPlUJg2hvr6W4BCrvRZsjhQwGuXACLcB/s1600/Screen%2BShot%2B2016-06-10%2Bat%2B12.31.06%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-jfVS7NznGPg/V1o1FD-kVtI/AAAAAAAAArs/X5nt0jPlUJg2hvr6W4BCrvRZsjhQwGuXACLcB/s640/Screen%2BShot%2B2016-06-10%2Bat%2B12.31.06%2BPM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;아래는 카프카 프로듀서에서 사용하는 BufferPool이 ReentrantLock과 Condition을 어떻게 사용하고 있는지 그리고 여러개의 요청 쓰레드간 상태 흐름이 어떻게 되는지 살펴 보는 코드이다. 위 ShareBasic 예제와 비슷하지만 쓰레드별로 Condition을 보관하는 데크(Deque)가 추가 되어있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;br /&gt;34&lt;br /&gt;35&lt;br /&gt;36&lt;br /&gt;37&lt;br /&gt;38&lt;br /&gt;39&lt;br /&gt;40&lt;br /&gt;41&lt;br /&gt;42&lt;br /&gt;43&lt;br /&gt;44&lt;br /&gt;45&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Share&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ReentrantLock lock &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ReentrantLock&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    Deque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;Condition&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; waiters &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayDeque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;    AtomicInteger counter &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; AtomicInteger&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;awaitTest&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;String name&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String prefix&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; i &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; counter&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            Condition condition &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newCondition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addLast&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;condition&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;prefix &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; name &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; i&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;###&quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getMessage&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;prefix &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;\t&quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; name &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; i&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            Condition condition1 &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;removeFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;condition &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; condition1&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Thread&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;currentThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: Wooops&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;signalTest&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            Condition condition &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;peekFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;condition &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;코드 내용을 살펴 보면,&lt;br /&gt;&lt;ol&gt;&lt;li&gt;9L: awaitTest가 호출 될때마다 새로운 Condition을 생성하고 큐에 넣는다.&lt;/li&gt;&lt;li&gt;16L: 호출한 쓰레드가 기다릴 시간을 1초로 저정한다. (1초가 지나면 자동으로 블럭된 쓰레드가 블럭이 풀리면서 이후 로직을 수행하게 된다. 실제 BufferPool에선 자동으로 블럭이 풀리면 타임아웃 에러를 발생시키기 때문에 해당 쓰레드는 지정된 시간동안 ByteBuffer를 할당받지 못했다는 의미가 된다)&lt;/li&gt;&lt;li&gt;23L: 큐헤더에 있는 Condition을 하나 꺼낸다. 그리고 9L에서 생성된 Condition인지 비교하고 다르면 예외를 던진다. 블럭된 시간동안(await 동안) 다른 쓰레드에서 큐헤더의 Condition을 풀어주지 않으면 해당 조건이 성립된다.&lt;/li&gt;&lt;li&gt;36L: 큐헤더에 있는 Condition을 꺼내지는 않고 대기중인 쓰레드가 깨어날 수 있게 호출만 해준다.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;위 코드는 여러 개의 요청 쓰레드가 블럭된 후 어떻게 깨어나며 쓰레드별로 타임아웃을 어떻게 만드는지가 포인트다. 그래서 두 개의 쓰레드로 awaitTest()를 호출하고 또 하나의 쓰레드는 siginalTest()를 호출해 블럭된 쓰레드를 깨워주는 방식으로 테스트할 수 있다. ShareBasic에서 처럼 쓰레드별 Condition으로 전달한 이름이 연속 출력되면 의도했던 결과가 된다.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;Share share &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Share&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;AwaitTestThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; share&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;start&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;AwaitTestThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; share&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;\t\t\t\t&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;start&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Timer timer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Timer&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;timer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;schedule&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; TimerTask&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        share&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signalTest&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;},&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;결과&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-mvQY02Rjoh8/V1plciQnHXI/AAAAAAAAAsE/wf4qvPBmppoeKaD33cwglQRe8p1YykDVQCLcB/s1600/Screen%2BShot%2B2016-06-10%2Bat%2B3.51.25%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://3.bp.blogspot.com/-mvQY02Rjoh8/V1plciQnHXI/AAAAAAAAAsE/wf4qvPBmppoeKaD33cwglQRe8p1YykDVQCLcB/s400/Screen%2BShot%2B2016-06-10%2Bat%2B3.51.25%2BPM.png&quot; width=&quot;295&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;SimpleBufferPool&lt;/h4&gt;&lt;br /&gt;자, 이제 SimpleBufferPool 을 살펴보자.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;  1&lt;br /&gt;  2&lt;br /&gt;  3&lt;br /&gt;  4&lt;br /&gt;  5&lt;br /&gt;  6&lt;br /&gt;  7&lt;br /&gt;  8&lt;br /&gt;  9&lt;br /&gt; 10&lt;br /&gt; 11&lt;br /&gt; 12&lt;br /&gt; 13&lt;br /&gt; 14&lt;br /&gt; 15&lt;br /&gt; 16&lt;br /&gt; 17&lt;br /&gt; 18&lt;br /&gt; 19&lt;br /&gt; 20&lt;br /&gt; 21&lt;br /&gt; 22&lt;br /&gt; 23&lt;br /&gt; 24&lt;br /&gt; 25&lt;br /&gt; 26&lt;br /&gt; 27&lt;br /&gt; 28&lt;br /&gt; 29&lt;br /&gt; 30&lt;br /&gt; 31&lt;br /&gt; 32&lt;br /&gt; 33&lt;br /&gt; 34&lt;br /&gt; 35&lt;br /&gt; 36&lt;br /&gt; 37&lt;br /&gt; 38&lt;br /&gt; 39&lt;br /&gt; 40&lt;br /&gt; 41&lt;br /&gt; 42&lt;br /&gt; 43&lt;br /&gt; 44&lt;br /&gt; 45&lt;br /&gt; 46&lt;br /&gt; 47&lt;br /&gt; 48&lt;br /&gt; 49&lt;br /&gt; 50&lt;br /&gt; 51&lt;br /&gt; 52&lt;br /&gt; 53&lt;br /&gt; 54&lt;br /&gt; 55&lt;br /&gt; 56&lt;br /&gt; 57&lt;br /&gt; 58&lt;br /&gt; 59&lt;br /&gt; 60&lt;br /&gt; 61&lt;br /&gt; 62&lt;br /&gt; 63&lt;br /&gt; 64&lt;br /&gt; 65&lt;br /&gt; 66&lt;br /&gt; 67&lt;br /&gt; 68&lt;br /&gt; 69&lt;br /&gt; 70&lt;br /&gt; 71&lt;br /&gt; 72&lt;br /&gt; 73&lt;br /&gt; 74&lt;br /&gt; 75&lt;br /&gt; 76&lt;br /&gt; 77&lt;br /&gt; 78&lt;br /&gt; 79&lt;br /&gt; 80&lt;br /&gt; 81&lt;br /&gt; 82&lt;br /&gt; 83&lt;br /&gt; 84&lt;br /&gt; 85&lt;br /&gt; 86&lt;br /&gt; 87&lt;br /&gt; 88&lt;br /&gt; 89&lt;br /&gt; 90&lt;br /&gt; 91&lt;br /&gt; 92&lt;br /&gt; 93&lt;br /&gt; 94&lt;br /&gt; 95&lt;br /&gt; 96&lt;br /&gt; 97&lt;br /&gt; 98&lt;br /&gt; 99&lt;br /&gt;100&lt;br /&gt;101&lt;br /&gt;102&lt;br /&gt;103&lt;br /&gt;104&lt;br /&gt;105&lt;br /&gt;106&lt;br /&gt;107&lt;br /&gt;108&lt;br /&gt;109&lt;br /&gt;110&lt;br /&gt;111&lt;br /&gt;112&lt;br /&gt;113&lt;br /&gt;114&lt;br /&gt;115&lt;br /&gt;116&lt;br /&gt;117&lt;br /&gt;118&lt;br /&gt;119&lt;br /&gt;120&lt;br /&gt;121&lt;br /&gt;122&lt;br /&gt;123&lt;br /&gt;124&lt;br /&gt;125&lt;br /&gt;126&lt;br /&gt;127&lt;br /&gt;128&lt;br /&gt;129&lt;br /&gt;130&lt;br /&gt;131&lt;br /&gt;132&lt;br /&gt;133&lt;br /&gt;134&lt;br /&gt;135&lt;br /&gt;136&lt;br /&gt;137&lt;br /&gt;138&lt;br /&gt;139&lt;br /&gt;140&lt;br /&gt;141&lt;br /&gt;142&lt;br /&gt;143&lt;br /&gt;144&lt;br /&gt;145&lt;br /&gt;146&lt;br /&gt;147&lt;br /&gt;148&lt;br /&gt;149&lt;br /&gt;150&lt;br /&gt;151&lt;br /&gt;152&lt;br /&gt;153&lt;br /&gt;154&lt;br /&gt;155&lt;br /&gt;156&lt;br /&gt;157&lt;br /&gt;158&lt;br /&gt;159&lt;br /&gt;160&lt;br /&gt;161&lt;br /&gt;162&lt;br /&gt;163&lt;br /&gt;164&lt;br /&gt;165&lt;br /&gt;166&lt;br /&gt;167&lt;br /&gt;168&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;BufferPool&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// 풀링된 메모리를 제외하고 사용할 수 있는 메모리&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// 기본 Buffer 크기&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    ReentrantLock lock &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ReentrantLock&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// deallocate 될 때 ByteBuffer를 쌓아둔다.&lt;/span&gt;&lt;br /&gt;    Deque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; free &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayDeque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// 메모리를 할당받으려고 대기중인 쓰레드를 깨우기 위한 Condition을 모아둔다.&lt;/span&gt;&lt;br /&gt;    Deque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;Condition&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; waiters &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayDeque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    ByteBuffer &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; maxTimeToBlock&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt;&lt;br /&gt;            TimeoutException&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            InterruptedException &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 1. 풀링된 버퍼가 있으면 꺼내 쓴다&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pollFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 2. 메모리를 할당 할 수 있으면&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 풀링된 버퍼는 꺼내썼기 때문에 새로 ByteBuffer를 생성한다.&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;canBeNewlyAllocated&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                freeUp&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-=&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span style=&quot;color: #888888;&quot;&gt;// !&lt;/span&gt;&lt;br /&gt;                lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            Condition moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newCondition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addLast&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 3. 가용한 메모리가 없기 때문에 풀에 버퍼가 반납되거나&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 이전 쓰레드에서 메모리를 확보해 주기를 기다린다.&lt;/span&gt;&lt;br /&gt;            ByteBuffer buffer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; blockAwaitUntilAvailable&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                                  moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                                  maxTimeToBlock&lt;br /&gt;                                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            Condition removed &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;removeFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; removed&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                  &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;블럭시간 - moreMemory.awaite(..) 동안 deallocate 되지 않은 경우&quot;&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// deallocate 시점이 아니더라도 가용메모리가 확보 되었거나&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 그 사이 풀에 반납된 버퍼가 있을 수 있으니 바로 다음 쓰레드를 깨워준다.&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt;&lt;br /&gt;                    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;peekFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buffer &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;else&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; buffer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isHeldByCurrentThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;deallocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ByteBuffer buffer&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; buffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;capacity&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                buffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;clear&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buffer&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Waiters: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;size&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;            Condition moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;peekFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 가용한 메모리와 풀링된 버퍼를 모두 합해도 poolableSize 만큼 되지 않는 경우.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 현재 쓰레드를 블럭한뒤 deallocate 로 풀에 버퍼가 반납 되는 시점이나,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 이전 쓰레드가 버퍼 할당을 마치는 시점에 poolableSize가 확보 되었는지 체크한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; ByteBuffer &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;blockAwaitUntilAvailable&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        Condition moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;        &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; maxTimeToBlock&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt; InterruptedException&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; accumulated &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        ByteBuffer buffer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;accumulated &lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Start block..&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                    maxTimeToBlock&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                    TimeUnit&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;TimeoutException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                  &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;지정된 시간동안 메모리를 할당하지 못함&quot;&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;accumulated &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #888888;&quot;&gt;// 그 사이 deallocate 되면서 버퍼가 풀에 반납되었을 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                buffer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pollFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                accumulated &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #888888;&quot;&gt;// 가용한 메모리 확보&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                freeUp&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;-&lt;/span&gt; accumulated&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; got &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; Math&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;min&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                    poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;-&lt;/span&gt; accumulated&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-=&lt;/span&gt; got&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                accumulated &lt;span style=&quot;color: #333333;&quot;&gt;+=&lt;/span&gt; got&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; buffer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 사용하고 있는 메모리와 풀에 있는 버퍼크기의 총합이 기본 버퍼크기보다 크다면 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 새로 버퍼를 생성 할 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;canBeNewlyAllocated&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;size&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 할당하려는 크기보다 작으면 pooling된 버퍼를 해제해서 가용한 메모리를 확보한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;freeUp&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; size&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt; size&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pollLast&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;capacity&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;짧게 만든다고 만들었는데,, 원래 코드와 차이도 적고 길다. 그래서 자세한? 주석을 넣었다. -:)&lt;br /&gt;&lt;br /&gt;Condition.signal()을 호출하는 부분과 Condition.await(..) 부분을 중심으로 코드를 살펴보면 쓰레드 블러킹은 위에서 보여준 예제 흐름과 동일하다. 메모리 관리부분을 중심으로 살펴 보자.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;156L: Deque&amp;lt;ByteBuffer&amp;gt; free.size() * poolableSize + availableMemory가 사용중인 메모리가 된다&lt;/li&gt;&lt;li&gt;162L: 할당해야 하는 즉, 할당하려는 메모리가 부족하면 풀링된(deallocate면 풀에 반납됨) ByteBuffer를 제거해 availableMemory를 재계산하는 로직이다. 이 freeUp 호출시점은 allocate 중에, 풀에 반납된 버퍼가 없거나, 더이상 할당 받을 메모리가 없어서 쓰레드가 가용한 메모리가 생길 때 까지 기다린 후 다시 availableMomory 재계산때가 호출시점이 된다.&lt;/li&gt;&lt;li&gt;4L: 사용할 수 있는 메모리&lt;/li&gt;&lt;li&gt;5L: 기본 할당 크기로 실제는 프로듀서의 batch.size 설정이다&lt;/li&gt;&lt;li&gt;56L: 쓰레드가 블럭된 동안 다른 쓰레드에서 블럭을 풀어주는게 아니라 타임아웃으로 블럭이 풀리면 해당 조건이 만족되는데, 타임아웃으로 블럭이 풀리면 예외가 발생하기 때문에 실제로는 발생하지 않아야 정상이다.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;끝으로 BufferPool을 사용하는 코드를 살펴보자.&lt;br /&gt;실제 BufferPool은 메시지 전송을 요청하는 쓰레드에서 BufferPool.allocate()하고 응답을 처리하는 쓰레드에서 BufferPool.deallocate() 한다. &lt;br /&gt;1. 가용메모리가 10MB이고 10개 쓰레드가 1MB씩 할당 했으므로 정상.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;BufferPool bufferPool &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;parallel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;|&lt;/span&gt; InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;2. 가용메모리가 10MB이고 11개 쓰레드가 1MB씩 할당 했으므로 에러발생.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;BufferPool bufferPool &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;11&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;parallel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;|&lt;/span&gt; InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;3. 가용메모리가 10MB이고 11개 쓰레드가 1MB씩 할당 했지만, 타임아웃 전에 ByteBuffer를 하나 반납했기 때문에 정상.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;BufferPool bufferPool &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; buffers &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayList&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Timer timer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Timer&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;timer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;schedule&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; TimerTask&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Start deallocate&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;        bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;deallocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buffers&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;&lt;br /&gt;        timer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;cancel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;},&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;2990&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;11&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;parallel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                buffers&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;3000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;|&lt;/span&gt; InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;실제 &lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0/clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java&quot; target=&quot;_blank&quot;&gt;BufferPoolTest.java&lt;/a&gt;&lt;span id=&quot;goog_754478517&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_754478518&quot;&gt;&lt;/span&gt;&lt;a href=&quot;https://www.blogger.com/&quot;&gt;&lt;/a&gt; 코드와는 SimpleBufferPool과 차이가 있지만 살펴 보고자 했던 부분이 쓰레드 처리와 메모리 제한에 관한 로직이라 테스트 코드로 적합하다고 봄..&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;결론&lt;/h4&gt;&lt;br /&gt;&amp;nbsp;카프카는 설정이 많아 설정이 실제 어떻게 적용되는지 궁금했었다. &amp;nbsp;쓰레드 동기화 처리가 일반적인 Object Pool과 어떻게 다른지, 메모리 사용량을 제한 한다는 것이 어떤 특별함이 있는지 궁금했었는데, 마침 관련 코드가 간단해서 쓰레드가 메모리를 할당을 기다릴 수 있고, 제한된 용량 만큼 사용할 수 있는지 파악하는 데 많은 도움이 되었다.&lt;br /&gt;&lt;br /&gt;부가적으로 Locking과 ByteBuffer.allocate 관련 코드에 이해되지 않는 부분이 있어 테스트한 코드가 있다. &amp;nbsp;ByteBuffer.allocate() 전에 lock을 푸는 것과 이후에 푸는 것에 대한 차이점에 관한 것이다. #아몰랑~&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f252af60cb7a992ee2df0dfd7c39cfa0#file-reentrantlockcondition-java&quot; target=&quot;_blank&quot;&gt;LockingOfByteBufferAllocation.java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;전체 코드는 아래&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/c50e9cf481f570a2b784025b3b143036&quot; target=&quot;_blank&quot;&gt;SimpleKafkaBufferPool.java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f252af60cb7a992ee2df0dfd7c39cfa0#file-reentrantlockconditionbasic-java&quot; target=&quot;_blank&quot;&gt;ReentrantLockConditionBasic.java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f252af60cb7a992ee2df0dfd7c39cfa0#file-reentrantlockcondition-java&quot; target=&quot;_blank&quot;&gt;ReentrantLockCondition.java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/3583323039308797756/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/06/producer-bufferpool.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/3583323039308797756'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/3583323039308797756'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/06/producer-bufferpool.html' title='[코드로 보는 카프카] Producer: BufferPool'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-Idb3tUFF2OE/WNfWQcpV1eI/AAAAAAAAAzY/vAe_PUyaeMg4ii59YqnT4isF__R7Lcs2QCLcB/s72-c/130859399051483.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-1342073844766517629</id><published>2016-05-11T19:20:00.001+09:00</published><updated>2017-02-20T15:28:04.302+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-0.9"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-consumer"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-consumer-client"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka0.9"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaConsumer"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaConsumerClient"/><title type='text'>[번역] 카프카 컨슈머 소개: 새 아파치 카프카 0.9 컨슈머 클라이언트 시작하기</title><content type='html'>&amp;nbsp;카프카 컨슈머 클라이언트 0.9.0 에 대한 글이 있어서 학습차 요약정리 해두기로 했음. 발번역이고 의역과 생략된 내용 있으니,,, ((((( &#39; &#39;)&lt;br /&gt;&lt;br /&gt;원문: &lt;a href=&quot;http://www.confluent.io/blog/tutorial-getting-started-with-the-new-apache-kafka-0.9-consumer-client&quot;&gt;http://www.confluent.io/blog/tutorial-getting-started-with-the-new-apache-kafka-0.9-consumer-client&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;원작자: Jason Gustafson&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;애초에 카프카는 스칼라로 만들어진 프로듀서와 컨슈머 클라이언트를 제공했다. 시간이 지나면서 이 API에 많은 제약이 있음을 깨닫게 되었다. 예를 들어, 컨슈머 그룹을 지원하고 Failover 처리하는  ‘high-level’ 컨슈머 API가 있지만 더 복잡한 시나리오를 지원하지 못했다. 그리고 풀 컨트롤을 제공하는 “simple” 컨슈머 클라이언트가 있지만 사용자가 Failover와 에러 처리를 직접해야 했다. 그래서 다양한 사례를 처리하기 위해 클라이언트를 다시 디자인하기 시작했다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;첫 단계로 0.8.1에 Producer API를 다시 작성하고, 두 번째 단계로 새(&lt;i&gt;new&lt;/i&gt;) 컨슈머 API 소개하는 0.9 배포가 최근에 완료되었다. 카프카에서 제공하는 새(&lt;i&gt;new&lt;/i&gt;) 그룹 코디네이션 프로토콜 기반으로 새 컨슈머를 개발하면 아래와 같은 이점을 가질 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;깔끔하게 통합된 API: 새 컨슈머는 예전의 “심플” 하고 “고수준&quot; 컨슈머 클라이언트의 두가지 능력을 결함하고, &amp;nbsp;자신만의 소비 전략을 만들기 위해&amp;nbsp;그룹 코디네이션과 &amp;nbsp;저수준의 접근성 두가지를 결합한다.&lt;/li&gt;&lt;li&gt;의존성 감소: &lt;u&gt;새 컨슈머는 순수 자바로 작성&lt;/u&gt;되었다. &lt;u&gt;스칼라 런타임이나 주키퍼에 의존성이 없어&lt;/u&gt;서 프로젝트에 포함 시킬 수 있는 더 가벼운 라이브러리를 만들 수 있다.&lt;/li&gt;&lt;li&gt;향상된 보안: 카프카 0.9에 구현된 &lt;a href=&quot;https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=51809888&quot;&gt;보안확장&lt;/a&gt;은 새 컨슈머에만 지원된다.&lt;/li&gt;&lt;li&gt;또한, &lt;u&gt;새 컨슈머는 컨슈머 프로세스 그룹의 Fault-Tolerant를 관리하기 위해 프로토콜 세트(&lt;i&gt;set&lt;/i&gt;)를 제공&lt;/u&gt;한다. 이전에 이 기능은 주키퍼와 통신하는 무거운 구현었다. 로직이 복잡해 다른 언어에서 전체 기능구현이 어려웠으나, 새 프로토콜의 소개로 현재는 구현이 쉬워졌다. 사실, 이미 &lt;a href=&quot;https://github.com/edenhill/librdkafka&quot;&gt;C 클라이언트&lt;/a&gt;는 이 프로토콜로 (구현을) 옮겼다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;새 컨슈머는 새로 디자인된 API를 사용하고 새 코디네이션 프로토콜을 사용하지만, 콘셉트는 기본적으로 다르지 않아서 이전(0.9 이전) 컨슈머에 익숙한 사용자가 이해하는데 문제가 없다. 그러나 그룹 관리와 스레딩 모델에 미묘한 디테일이 있어 주의가 필요하다. 이 튜토리얼의 목적은 새 컨슈머의 기본 사용법을 다루고 이 사용법들의 세부적인 내용을 설명하고자 함이다.&lt;br /&gt;&lt;br /&gt;유의할 점: 글을 쓰는 시점에 새 컨슈머는 안전성이란 용어에서 여전히 “베타”이고 몇 가지 중요한 버그가 0.9.0 브랜치에서 수정 되었다. 0.9.0 브랜치에서 테스트할 것을 권고하고 여전히 문제가 있으면 메일 리스트나 지라로 리포트를..&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Getting Started&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;코드를 보기 전에 기본 콘셉트를 살펴보면, 카프카에서 각 &lt;u&gt;토픽은 파티션으로 나누어진다&lt;/u&gt;. 그리고 &lt;u&gt;파티션은 로그(log)의 집합&lt;/u&gt;이다. &lt;u&gt;프로듀서는 이 로그들 끝에 쓰고 컨슈머는 자기 페이스에 따라 로그를 읽는다&lt;/u&gt;. 카프카는 컨슈머 그룹 간에 &lt;u&gt;파티션을 분산해서 토픽 소비(&lt;i&gt;consumption&lt;/i&gt;)를 스케일(&lt;i&gt;scale&lt;/i&gt;)&lt;/u&gt;한다. &lt;u&gt;컨슈머 그룹은 공통 그룹 식별자(&lt;i&gt;identifier&lt;/i&gt;)를 공유하는 세트&lt;/u&gt;이다. 아래 그림은 세 개의 파티션을 가진 단일 토픽과 두 멤버를 가진 컨슈머 그룹을 보여준다. &lt;u&gt;토픽의 각 파티션은 정확히 그룹 내의 한 멤버에게 할당&lt;/u&gt;된다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-LFPTS_XmjFs/VzLiNUr4hBI/AAAAAAAAAk0/3yk1VcwGxvEJq_w0B7kPOeTtPs-rEMCdwCLcB/s1600/New_Consumer_figure_1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;192&quot; src=&quot;https://3.bp.blogspot.com/-LFPTS_XmjFs/VzLiNUr4hBI/AAAAAAAAAk0/3yk1VcwGxvEJq_w0B7kPOeTtPs-rEMCdwCLcB/s400/New_Consumer_figure_1.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;옛날 컨슈머는 그룹 관리를 위해 주키퍼에 의존하는 반면, 새 컨슈머는 카프카 자체로 만든 그룹 코디네이션 프로토콜을 사용&lt;/u&gt;한다. 각 그룹의 브로커들 중에 하나가 코디네이터로 선택된다. 코디네이터는 그룹의 상태를 관리할 책임이 있고, 코디네이터의 주된 일은 새 멤버가 오고 갈 때, 그리고 토픽 메타데이터가 변할 때 파티션 할당을 중재 하는것이다. 파티션 재할당 동작은 그룹 재균형(&lt;i&gt;rebalance&lt;/i&gt;)으로 알려져 있다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;그룹이 처음 초기화될 때, 컨슈머는 보통 각 파티션의 가장 처음 또는 가장 마지막 오프셋 둘 중 하나에서 읽기 시작한다. 그런 후 각 파티션 로그에서 메시지가 순차적으로 읽힌다. &lt;u&gt;컨슈머는 성공적으로 처리된 메시지의 오프셋을 커밋(&lt;i&gt;commit&lt;/i&gt;)&lt;/u&gt; 하는데, 예를 들어, 아래 그림에서 컨슈머의 위치는 오프셋이 6이고 마지막 커밋된 오프셋은 1이된다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-eNhbFBaMWNk/VzLi9O48_MI/AAAAAAAAAk8/j1jWY1_Xo90oBlxOUfkBQGncNlGhllbBgCLcB/s1600/New_Consumer_Figure_2.png&quot; imageanchor=&quot;1&quot; style=&quot;text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;125&quot; src=&quot;https://3.bp.blogspot.com/-eNhbFBaMWNk/VzLi9O48_MI/AAAAAAAAAk8/j1jWY1_Xo90oBlxOUfkBQGncNlGhllbBgCLcB/s400/New_Consumer_Figure_2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;파티션이 그룹의 다른 컨슈머에 재할당 될 때, 초기 위치는 마지막에 커밋된 오프셋으로 세팅된다. 위 예제에서 컨슈머가 갑자기 크래시(crash) 나면, 파티션을 인수한 그룹 멤버는 오프셋 1부터 소모를 시작한다. 이 경우, 크래시가 생긴 컨슈머의 위치인 6까지 메시지를 재처리 해야한다.&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;또한, 이 다이어 그램은 로그에서 두가지 다른 의미 있는 위치를 보여준다. &lt;u&gt;&quot;Log End Offset&quot;은 로그에 마지막으로 쓰인 오프셋&lt;/u&gt;이고, &lt;u&gt;&quot;High Watermark&quot;는 모든 복제 로그에 성공적으로 카피된 최종 메시지의 오프셋&lt;/u&gt;이다. 컨슈머의 관점에서 알아야 할것은 단지 &quot;High Watermark&quot;까지만 읽어 올라갈 수 있다는 것이다. 이것은 컨슈머가 복제되지 않은 메시지가 읽히는 것을 방지한다. 복제되지 않은 메시지는 소실될 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Configuration and Initialization&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;컨슈머를 시작하려면, kafka-client 의존성을 프로젝트에 추가해야한다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt; &amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.kafka&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt; &amp;lt;artifactId&amp;gt;&lt;/span&gt;kafka-clients&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt; &amp;lt;version&amp;gt;&lt;/span&gt;0.9.0.0-cp1&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;컨슈머는 다른 카프카 클라이언트와 마찬가지로 프로퍼티를 사용해서 생성된다. 아래 예에서는 컨슈머 그룹을 사용하기 위해 필요한 최소 설정을 제공하고 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;Properties props &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Properties&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;group.id&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;consumer-tutorial&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;key.deserializer&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;value.deserializer&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; consumer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이전 컨슈머와 프로듀서처럼, 컨슈머가 나머지 클러스터를 찾을 수 있게 &lt;u&gt;초기 브로커 리스트를 설정&lt;/u&gt;할 필요가 있지만, 클러스터 내 모든 서버를 필요로 하지 않는다. – 클라이언트는 이 리스트에서 살아있는 전체 브로커 세트를 결정한다. 여기에서는 브로커가 로컬(localhost)에서 동작하는 것으로 가정했고, 컨슈머가 어떻게 메시지 키와 값을 역직렬화 하는지 이야기할 필요가 있다. 마지막으로, 컨슈머 그룹에 가입하려면 그룹 ID를 설정해야 한다. 이 튜토리얼을 진행하면서 더 많은 설정을 소개 할 것이다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Topic Subscription&lt;/h3&gt;&lt;br /&gt;&lt;u&gt;소비를 시작하려면, 처음에 어플리케이션이 읽으려고 하는 토픽을 구독&lt;/u&gt;해야한다. 아래 예에서는  “foo”와 “bar” 토픽을 구독하고 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;subscribe&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Arrays&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;구독 후에, 컨슈머는 파티션을 할당하기 위해 나머지 그룹을 조정 할 수 있다. 이 과정은 데이터를 소모하기 시작할 때 모두 자동으로 된다. 뒷부분에서 어떻게 assign API를 사용해서 수동으로 파티션을 할 수 있는지 보여 주겠지만, 자동과 수동 할당을 섞어 사용하는 것은 불가능함을 염두해야 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;구독 방법은 증분(&lt;i&gt;incremental&lt;/i&gt;)이 아니다 (치환이 되지 누적되어 쌓이지 않는다): 반드시 소비하려는 전체 토픽 리스트를 포함해야 한다. &lt;u&gt;언제든 구독했던 토픽 세트를 변경할 수 있다&lt;/u&gt;. – 이전에 구독했던 토픽은 subscribe를 호출할 때 새 리스트로 치환된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Basic Poll Loop&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;&lt;u&gt;컨슈머는&lt;/u&gt; 잠재적으로 여러 브로커에 걸쳐 흩어진 여러 토픽의 파티션에서 &lt;u&gt;데이터를 병렬로 패치할 필요가 있어서, 유닉스의 select나 poll과 유사한 API 스타일을 사용한다&lt;/u&gt;: 일단 토픽이 등록되면, 모든 future 코디네이션, 재균형, 그리고 데이터 패치가 이벤트 루프에서 호출한 단일 poll 호출을 통해 떨어진다. 이 스타일은 싱글 스레드에서 IO를 처리할 수 있는 간단하고 효과적인 구현이 되게 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;토픽 구독을 시작한 후, 파티션을 할당 받고 데이터 패치를 하려면 이벤트 루프를 실행해야 한다. 복잡하게 들리지만, 필요한 것은 &lt;u&gt;루프로 poll을 호출&lt;/u&gt; 하고 컨슈머는 나머지를 처리하게 된다. 각 poll 호출은 파티션에 할당된 메시지 세트를 리턴한다. 예를 들어, 아래는 메세지가 오는 대로 오프셋과 패치된 레코드값을 출력하는 기본 poll 루프다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;poll API는 현재 포지션에 기반해 패치한 레코드를 반환&lt;/u&gt;한다. 그룹이 처음 생성될 때, reset 정책에 따라 포지션이 세팅된다 (보통 각 파티션의 최초 또는 마지막의 오프셋임). 한번 컨슈머가 오프셋을 커밋하기 시작하면, 포지션은 나중에 재균형 작업으로 인해 마지막 커밋된 오프셋으로 리셋된다. &lt;u&gt;Poll 할 때 전달된 파라메터는 (&lt;i&gt;컨슈머가 현재 포지션에 있는&lt;/i&gt;) 레코드를 기다릴 때 사용하는 최대 블럭 시간&lt;/u&gt;이다. 컨슈머는 레코드가 가용하다면 즉각 리턴을 하지만, 가용한 레코드가 없다면 리턴전에 정해진 타임아웃 동안 기다린다.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&amp;nbsp;컨슈머는 컨슈머 자신의 스레드에서 동작하도록 디자인되었고, 스레드 세이프(&lt;i&gt;thread safe&lt;/i&gt;) 하지 않다&lt;/u&gt;. 이 예제에서는, 사용되는 플래그는 애플리케이션이 셧다운 되어 이벤트 루프를 빠져나올 때 사용된다. 플래그가 다른 스레드에서 false로 바뀌면, 루프는 poll 리턴을 하자마자 끝날것이고 애플리케이션은 모든 레코드가 반환되면 처리를 마친다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;컨슈머는 작업이 끝나면 항상 close 돼야 한다&lt;/u&gt;. 사용한 소켓을 정리하는 것뿐만 아니라, 컨슈머가 코디네이터에게 그룹에서 떠난다는 것을 알린다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 예제는 컨슈머가 셧다운 할 때 너무 오래 지연되지 않게 상대적으로 짧은 타임아웃을 사용했다. 대안으로, 긴 타임아웃을 사용하고 &lt;u&gt;wakeup API를 사용해 루프를 탈출할 수도 있다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Long&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;br /&gt;    record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;WakeupException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #888888;&quot;&gt;// ignore for shutdown&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;타임아웃을 Long.MAX_VALUE로 변경했다. 기본적으로 컨슈머는 다음 레코드가 반환 될 때 까지 무기한 블록(block) 됨을 의미한다. 이전 예제같이 플래그를 세팅하는 대신, 스레드 셧다운 트리거가 동작 중인 poll을 인트럽트 하는 consumer.wakeup() 호출해서 WakeupException을 발생시킬 수 있다. &lt;u&gt;이 wakeup API는 다른 스레드에서 사용하기 안전하다 (스레드 세이프 하다)&lt;/u&gt;. 주의할 것은 동작 중인 poll이 없다면, 다음 호출에서 exception이 발생한다. 이 예제에서는, 예외가 전파되는 것을 방지하기 위해 catch 하고 있다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Putting it all Together&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;다음 예제는, 컨슈머를 초기화, 토픽 리스트를 구독, 그리고 외부에서 셧다운 까지 poll 루프로 무한 실행하는 간단한 Runnable 태스크다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;ConsumerLoop&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;implements&lt;/span&gt; Runnable &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; id&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;ConsumerLoop&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; id&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                     String groupId&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                     List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;id&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; id&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;topics&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  Properties props &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Properties&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;group&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; groupId&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;key&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;deserializer&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;value&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;deserializer&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;consumer&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;subscribe&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;topics&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;br /&gt;     &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Long&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     Map&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; Object&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; HashMap&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;     data&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;partition&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;     data&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;     data&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;     System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;id&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; data&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;WakeupException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #888888;&quot;&gt;// ignore for shutdown&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;wakeup&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 예제를 테스트 하려면, 카프카 브로커0.9.0.0 릴리즈와 소비할 수 있는 문자열 데이터가 있는 토픽이 필요하다. 문자열 데이터를 만드는 가장 쉬운 방법은 kafka-verifiable-producer.sh 스크립트를 사용하면 된다. 로컬 호스트에서 동작하는 싱글 카프카 브로커와 주키퍼를 두고, 배포된 카프카 루트에서 아래를 실행하면 된다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;bin/kafka-topics.sh --create --topic consumer-tutorial --replication-factor 1 --partitions 3 --zookeeper localhost:2181&lt;br /&gt;&lt;br /&gt;bin/kafka-verifiable-producer.sh --topic consumer-tutorial --max-messages 200000 --broker-list localhost:9092&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;그런 후, 세 멤버로 컨슈머 그룹을 셋업하는 작은 드라이버를 생성하고, 모두 금방 생성한 같은 토픽을 구독하게 한다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;[]&lt;/span&gt; args&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt; &lt;br /&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; numConsumers &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; String groupId &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;consumer-tutorial-group&quot;&lt;/span&gt;&lt;br /&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; topics &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Arrays&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;consumer-tutorial&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; ExecutorService executor &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Executors&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;numConsumers&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ConsumerLoop&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; consumers &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayList&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; i &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt; i &lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt; numConsumers&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt; i&lt;span style=&quot;color: #333333;&quot;&gt;++)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerLoop consumer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ConsumerLoop&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; groupId&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  consumers&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  executor&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; Runtime&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getRuntime&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addShutdownHook&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Thread&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerLoop consumer &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; consumers&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;br /&gt;    executor&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     executor&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;awaitTermination&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;5000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 예는 executor에 세 개의 runnable 컨슈머를 submit 한다. 각 스레드에는 데이터를 받는 것을 (구분해서) 볼 수 있게 독립된 아이디가 주어진다. 셧다운 훅은 프로세스가 멈출 때 호출되며, wakeup을 사용하는 세 개의 스레드를 멈추고 스레드가 셧다운 될 때까지 기다린다. 실행해 보면, 모든 스레드에서 데이터를 볼 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;928, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2786&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;929, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2789&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;297, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;891&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;930, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2792&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;298, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;894&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;931, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2795&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;0: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;1, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;278, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;835&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;932, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2798&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;0: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;1, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;279, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;838&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;299, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;897&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;300, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;900&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;301, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;903&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;302, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;906&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;303, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;909&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;304, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;912&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;0: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;1, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;280, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;841&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;933, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2801&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;아웃풋은 세 개의 파티션에서 소비한 메시지를 보여준다. 각 파티션은 스레드 중 하나에 할당되어 각 파티션 내에서 기대한 대로 증가하는 오프셋을 볼 수 있다. 커멘드 라인이나 IDE에서 Ctrl-C로 프로세스를 셧다운 가능하다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Consumer Liveness&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;컨슈머가 컨슈머 그룹멤버가 될때, 컨슈머는 구독하는 토픽의 파티션에 부분집합(subset)으로 할당된다. &lt;u&gt;기본적으로 이 파티션에서는 그룹 잠금(lock)이 적용되어 잠금이 유지되는 한, 그룹의 다른 멤버는 읽기를 할 수 없다. 컨슈머가 살아 있을 때가 중복 소비를 피할 수 있는 유일한 방법이다&lt;/u&gt;(이것이 정확히 원하는 상황임). 그렇지만 &lt;u&gt;컨슈머가 기계적인 이슈나 애플리케이션의 실패로 죽는다면, 살아있는 멤버에게 다시 파티션이 할당되게 잠금을 풀어야 한다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;카프카의 그룹 코디네이션 프로토콜은 하트빗(heartbeat) 메커니즘으로 이 문제를 다룬다&lt;/u&gt;. 모든 재균형 후에는 현세대의 모든 멤버는 그룹 코디네이터에게 주기적인 하트빗을 보내기 시작한다. 코디네이터가 하트빗을 지속적으로 받는 한, 멤버는 살아 있다고 가정되며, 하트빗을 받을 때 코디네이터는 타이머를 시작하거나 초기화한다. 만약 시간이 경과 되고 더이상 하트빗이 없다면, 코디네이터는 멤버를 죽은 것으로 마킹한다. 그리고 파티션을 재할당하기 위해 그룹에 죽은 멤버외 나머지 멤버에게 다시 조인해야 한다는 신호를 보낸다. 타이머의 지속 기한은 세션 타임아웃으로 알려져 있다. 그리고 클라이언트에 session.timeout.ms로 설정할 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;session.timeout.ms&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;60000&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;u&gt;&amp;nbsp;머신이나 애플리케이션이 크래시 되거나, 컨슈머와 코디네이터가 네트워크 파티션 때문에 서로 고립된다면, 세션 타임아웃으로 (&lt;i&gt;=세션 타임아웃이 지나면&lt;/i&gt;) 잠금을 풀리게 한다&lt;/u&gt;. 그러나, 애플리케이션 실패를 일반적으로 처리 하기엔 문제가 있다. 단순히, 컨슈머가 계속해서 코디네이터에게 하트빗을 보내는 것이 애플리케이션이 살아있음을 의미하는 필수조건은 아니기 때문이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;컨슈머의 poll 루프는 이 문제를 처리하기 위해 디자인되었다. &lt;u&gt;모든 네트워크 IO는 poll을 호출할 때나 다른 블록킹 API가 호출될 때 포어그라운드(foreground)에서 처리된다. 컨슈머는 어떠한 백그라운드 스레드도 사용하지 않는다. 이것은 하트빗은 poll 호출 때만 코디네이트에게 보내 진다는 의미다. 만약 애플리케이션이 poll을 멈춘다면 (코드 처리가 예외를 던지던지, 다운스트림 시스템이 크래시 나든지 등), 보내는 하트빗이 없어지게 되고 세션 타임아웃도 경과되어 그룹은 재균형된다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 방법의 유일한 문제는 컨슈머의 메시지 처리가 세션 타임아웃보다 더 오래 걸릴때, 비논리적인 재균형이 발생할 수 있다는 것이다. 그래서 &lt;u&gt;세션 타임아웃을 충분히 크게 설정해야 한다. 기본값은 30초&lt;/u&gt;다. 그러나 분단위로 높게 설정하는 것은 합리적이지 않다. 긴 세션 타임아웃의 불리한 점은 진짜 컨슈머 크래시를 발견해서 코디네이트 하기까지 시간이 오래 걸린다는 것이다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Delivery Semantics&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;컨슈머 그룹이 처음 생성될 때, 초기 오프셋은 auto.offset.reset 설정에 정의된 정책에 따라 세팅된다. 한번 컨슈머가 처리를 하기 시작하면, 애플리케이션은 필요에 따라 오프셋을 규칙적으로 커밋한다. 차후 모든 재균형 후에, 포지션은 그룹 내 파티션에서 마지막으로 커밋된 오프셋으로 세팅된다. &lt;u&gt;컨슈머가 성공적으로 처리한 메시지 오프셋을 커밋하기 전에 크래시 되면, 다른 컨슈머가 다시 작업을 한다. 오프셋을 좀 더 빈번하게 커밋하면 크래시가 생겨도 중복을 적게 보게 된다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이제까지 예제에서는, 자동 커밋 정책이 켜져 있는 걸로 가정했다. enable.auto.commit 세팅이 true(기본 설정)일때, 컨슈머는 auto.commit.interval.ms 값에 따라 자동으로 오프셋 커밋을 주기적으로 발생시킨다. 커밋 주기를 줄여서, 컨슈머가 크래시 이벤트에서 반드시 하게 되는 재처리(re-processing) 양을 제한할 수 있다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;컨슈머의 커밋 API를 사용 하려면 먼저, 자동 커밋을 꺼야한다. 컨슈머 설정에서 enable.auto.commit을 false로 두면 된다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;enable.auto.commit&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;커밋 API 자체는 사용이 미미&lt;/u&gt;하지만, 중요한 것은 poll 루프에서 어떻게 사용하느냐는 것이다. 커밋을 수동으로 하는 가장 쉬운 방법은 동기 커밋 API 사용이다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;commitSync&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;CommitFailedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #888888;&quot;&gt;// application specific failure handling&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;파라미터 없이 &lt;u&gt;commitSync API&lt;/u&gt;를 사용하면 마지막 poll 호출에서 리턴된 오프셋을 커밋한다. 이 호출은 커밋이 성공하거나 복구 불가능한 에러로 실패할 때 까지 &lt;u&gt;무한 블럭&lt;/u&gt; 된다. 신경 써야 할 주된 에러는 &lt;u&gt;세션 타임아웃보다 더 오래 걸리는 메시지 처리&lt;/u&gt;이다. &lt;u&gt;이런 상황이 생기면, 코디네이터는 컨슈머를 그룹에서 강제로 빼버리고, 그 결과로 CommitFailedException 이 생기게 된다&lt;/u&gt;. 애플리케이션은 이 에러가 생기면, 마지막으로 성공한 커밋 오프셋 이후에 소비한 메시지로 발생된 변경은 롤백 처리해야 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;보통 오프셋은 메시지가 성공적으로 처리된 후 커밋되게 보장된다. &lt;u&gt;컨슈머가 커밋을 보내기 전에 크래시가 나면, 메시지는 다시 처리 된다&lt;/u&gt;. &lt;u&gt;마지막에 커밋된 오프셋은 절대 현재 포지션을 앞지르지 않는다는 커밋 정책이 보장 되면, “at least once” 전달이라는 의미&lt;/u&gt;가 된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-SEOcTWbWXfc/VzL_kCy0YbI/AAAAAAAAAlU/6uFTjzjZKXUVFQz_tA5PfD41UHhmVMG3gCLcB/s1600/New_Consumer_figure_3.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;107&quot; src=&quot;https://4.bp.blogspot.com/-SEOcTWbWXfc/VzL_kCy0YbI/AAAAAAAAAlU/6uFTjzjZKXUVFQz_tA5PfD41UHhmVMG3gCLcB/s400/New_Consumer_figure_3.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;background-color: white; box-sizing: border-box; color: #15202b; font-family: &amp;quot;roboto&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: 16px; font-weight: 700; line-height: 24px;&quot;&gt;&lt;span style=&quot;box-sizing: border-box;&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-size: 14px;&quot;&gt;Figure 3: The committed offset is ahead of the current position&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;u&gt;현재 포지션이 마지막 커밋된 오프셋을 초과하지 않는다는 커밋 정책이 보장 되지 않으면, 위 다이어그램처럼, “at most once” 전달이라는 의미&lt;/u&gt;가 된다. 만약 컨슈머가 마지막 커밋된 오프셋까지 가기 전에 크래시되면, 그 사이에 있던 모든 메시지는 소실 되지만, 어떤 메시지도 몇번씩 처리 되지는 않는다. 이 정책을 구현하려면, 단지 커밋과 메시지의 처리 순서를 변경하기만 하면 된다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;commitSync&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;CommitFailedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// application specific failure handling&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;주목할 것은 컨슈머는 애플리케이션이 리턴한 메시지의 오프셋만 커밋하므로 &lt;u&gt;자동 커밋을 사용하면 “at least once” 처리가 된다&lt;/u&gt;는 것이다. 최악의 경우로 재처리해야 한다면, 재처리 메시지 수는 애플리케이션이 커밋 간격(commit interval) 동안에 처리할 수 있는 메시지 수에 종속된다. (auto.commit.interval.ms로 설정함)&lt;br /&gt;&lt;br /&gt;&amp;nbsp;커밋 API를 사용하면 많은 중복 처리를 세밀하게 통제 해야 한다. 극단적인 경우, 아래와 같이 메시지 처리 후 매번 오프셋이 커밋 될 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;    consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;commitSync&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;( //-- # --//&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;      Collections&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;singletonMap&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(),&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;      new&lt;/span&gt; OffsetAndMetadata&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;    );&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;CommitFailedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #888888;&quot;&gt;// application specific failure handling&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 예제에서, 커밋하고자 하는 명확한 오프셋이commitSync 호출에 전달된다. 커밋될 오프셋은 항상 애플리케이션이 읽을 다음 메시지의 오프셋이 되어야 한다. 파라미터 없이commitSync가 호출 될 때는, 컨슈머는 애플리케이션에 리턴된 마지막 오프셋(오프셋 +1 )을 커밋하지만, 실제 진척된 것 보다 초과한 커밋 포지션이 허용되기 때문에 사용할 수 없다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;분명히 메시지 (처리) 이후에 커밋하는 것은 대부분의 경우 좋은 생각이 아니다. 왜나하면 커밋을 처리하는 스레드가 서버에서 응답을 리턴을 받기 위해 각 커밋 요청을 블록(block) 하므로 처리량이 희생되기 때문이다. 좀 더 합리적인 접근은 N개의 메시지 (처리) 이후 커밋을 하는 것이다. N은 성능에 따라 조절 될 수 있다&lt;/u&gt;. &lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 예에서 commitSync의 파라미터는 토픽 파티션에서 OffsetAndMetadata 인스턴스를 매핑한 것이다. 커밋 API는 각 커밋 마다 부가적인 몇몇 메타를 포함할 수 있다. 부가적인 메타 정보는 호스트가 보낸 커밋 시간을 레코딩 하는 데 사용 되거나, 애플리케이션에 필요로 하는 정보를 레코딩 하는 데 사용 될 수 있다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;받은 메시지마다 매번 커밋하는 대신, 더 합리적인 방법은 각 파티션에서 메시지 처리를 한 만큼 오프셋을 커밋 하는 것이다. ConsumerRecords 컬렉션으로 파티션 세트와 각 파티션의 메세지에 접근 할 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Long&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TopicPartition partition &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;partitions&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; partitionRecords &lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;records&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;partition&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; partitionRecords&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;     record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; lastoffset &lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; partitionRecords&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;partitionRecords&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;size&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;commitSync&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    Collections&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;singletonMap&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;     partition&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;     &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;OffsetAndMetadata&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;lastoffset &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 예제는 동기화된 커밋 API에 더 중점을 맞췄지만, 컨슈머는 &lt;u&gt;비동기 API인 commitAsync&lt;/u&gt;도 제공하고 있다. 비동기 커밋은 애플리케이션이 커밋을 리턴하기 전에 다음 배치를 처리를 시작할 수 있기 때문에, 일반적으로 &lt;u&gt;높은 처리량을 제공&lt;/u&gt;한다. &lt;u&gt;실패한 커밋을 찾을 수 없다는 게 트레이드 오프&lt;/u&gt;. 아래 예는 기본 사용법.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;commitAsync&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; OffsetCommitCallback&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;onComplete&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Map&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;TopicPartition&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; OffsetAndMetadata&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; offsets&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                          Exception exception&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;exception &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span style=&quot;color: #888888;&quot;&gt;// application specific failure handling&lt;/span&gt;&lt;br /&gt;     &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;주의할것은 commitAsyc에 콜백을 제공한 것인데, 콜벡은 컨슈머가 커밋이 끝나면 호출된다 (성공 여부와 관련 없음). 콜벡이 필요 없다면 commitAsync를 파라미터 없이 호출할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Consumer Group Inspection&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;컨슈머 그룹이 동작 중일때, 파티션 할당과 (메시지의) 소모된 진도를 &lt;u&gt;consumer-groups.sh 스크립트&lt;/u&gt;로 점검(inspect) 할 수 있다. 이 스크립트는 bin 디렉터리에 있다.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;bin/kafka-consumer-groups.sh --new-consumer --describe --group consumer-tutorial-group --bootstrap-server localhost:9092&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;아웃풋 결과는 아래:&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;GROUP, TOPIC, PARTITION, CURRENT OFFSET, LOG END OFFSET, LAG, OWNER&lt;br /&gt;consumer-tutorial-group, consumer-tutorial, 0, 6667, 6667, 0, consumer-1_/127.0.0.1&lt;br /&gt;consumer-tutorial-group, consumer-tutorial, 1, 6667, 6667, 0, consumer-2_/127.0.0.1&lt;br /&gt;consumer-tutorial-group, consumer-tutorial, 2, 6666, 6666, 0, consumer-3_/127.0.0.1&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 결과는 컨슈머 그룹 내 할당된 모든 파티션을 보여준다. 어떤 컨슈머가 파티션을 소유하고 있는지, 그리고 마지막 커밋된 오프셋이 무엇인지(여기서는 “current offset”). 파티션의 “lag”는 로그의 끝 오프셋과 마지막 커밋된 오프셋의 차이이다. 관리자는 컨슈머 그룹이 프로듀서와 잘 통신하는지 모니터링 할 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Using Manual Assignment&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;이 튜토리얼 시작에서 언급한 것으로, 새 컨슈머는 컨슈머 그룹이 필요없는 경우는 저수준 접근을 구현하고 있다. &lt;u&gt;예전 “simple” 컨슈머도 제공하지만, 많은 에러처리가 필요하다. 새 컨슈머는 단지 읽을려는 파티션을 할당하고 폴링을 시작하기만 하면 된다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;아래는 토픽에서 어떻게&lt;u&gt;partitionFor API&lt;/u&gt;로 모든 파티션을 할당하는지를 보여준다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;TopicPartition&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; partitions &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayList&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;PartitionInfo partition &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;partitionsFor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;topic&lt;span style=&quot;color: #333333;&quot;&gt;))&lt;/span&gt;&lt;br /&gt;  partitions&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;topic&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; partition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()));&lt;/span&gt;&lt;br /&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;assign&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;partitions&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;subscribe와 유사하게 &lt;u&gt;assign&lt;/u&gt;호출은 읽기를 원하는 파티션 전체 리스트를 전달해야 한다. 한번 파티션이 할당 되면, poll 루프는 전과 동일하게 동작된다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;한가지 주의할 것은, &lt;u&gt;그룹 코디네이터를 통하는 모든 오프셋 커밋은 이 커밋이 simple 컨슈머인지 컨슈머 그룹인지 개의치 않는다. 그러므로 오프셋을 커밋 해야 한다면, 여전히 다른 컨슈머와 충돌을 방지하기 위해 group.id를 세팅해야 한다&lt;/u&gt;. Simple 컨슈머가 동작중인 컨슈머 그룹과 매치되는 그룹 ID로 오프셋을 커밋 하려고 하면, 코디네이터는 커밋을 거부한다(CommitFailedException이 발생).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;새 컨슈머는 명확한 API, 더 좋아진 보안, 줄어든 종속성을 포함해서 카프카 커뮤니티에 여러 이점을 제공하고 있다. 이 튜토리얼은 poll semantics에 중점을 두고 기본 사용법을 소개했고 delivery semantics를 제어하기 위해 commit API 사용을 소개했다. 더 다뤄야 할 것들이 많지만 시작하기엔 이 정도로 충분하고, 이미 컨슈머를 사용하고 있더라도 새 컨슈머로 시도해 볼 것을 권장한다.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/1342073844766517629/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/05/09.html#comment-form' title='5개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1342073844766517629'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1342073844766517629'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/05/09.html' title='[번역] 카프카 컨슈머 소개: 새 아파치 카프카 0.9 컨슈머 클라이언트 시작하기'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-LFPTS_XmjFs/VzLiNUr4hBI/AAAAAAAAAk0/3yk1VcwGxvEJq_w0B7kPOeTtPs-rEMCdwCLcB/s72-c/New_Consumer_figure_1.png" height="72" width="72"/><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-1771317078014341560</id><published>2016-04-28T18:13:00.002+09:00</published><updated>2016-04-28T18:16:49.062+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="adpater-pattern"/><category scheme="http://www.blogger.com/atom/ns#" term="decorator-pattern"/><category scheme="http://www.blogger.com/atom/ns#" term="designpattern"/><category scheme="http://www.blogger.com/atom/ns#" term="facade-pattern"/><category scheme="http://www.blogger.com/atom/ns#" term="proxy-pattern"/><title type='text'>[펌요약] 자바의 Adapter, Decorator, Façade, Proxy 패턴의 유사점과 차이점</title><content type='html'>&lt;br /&gt;&lt;a href=&quot;http://javarevisited.blogspot.kr/2015/01/adapter-vs-decorator-vs-facade-vs-proxy-pattern-java.html&quot; target=&quot;_blank&quot;&gt;Adapter vs Decorator vs Facade vs Proxy Design Pattern in Java&lt;/a&gt; 관련 글이 있어서 간단하게 요약.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;span style=&quot;text-align: center;&quot;&gt;&lt;u&gt;Adapter, Decorator, Façade, Proxy 패턴의 유사점은 Composition과 Delegation.&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Adapter패턴은 interface를 감싸서 호출을 위임.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Decorator는 object를 감싼 동작을 구현.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Façade는 하나 이상의 interface를 감싸고 사용하기 쉬운 중앙 집중된 interface를 제공.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Proxy는 Subject를 감싸고 호출을 위임.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;그.런.데!! 왜 이것들이 다른 패턴인가?! 만약 같은 구조라면, Adapter, Decorator, Façade, Proxy 패턴의 다른 점은 무엇인가? 답은 Intent다.&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;&lt;u&gt;Adapter 패턴&lt;/u&gt;의 주된 목적은 interface 전환(convert)이다. Adapter는 두 개의 컴포넌트가 같이 동작하게 한다. 두 개가 같이 동작하지 않는 것은 두 컴포넌트의 interface가 맞지 않기(incompatible) 때문이다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;u&gt;Decorator 패턴&lt;/u&gt;은 실행 시점에 새로운 기능을 추가한다. 심지어 생성 후에도 object의 기능을 추가할 수 있게(enrich) 한다.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;Façade 패턴&lt;/u&gt;은 interface 전환도 새로운 기능추가도 아니다. 대신에 간단한 interface를 제공해서 클라이언트가 직접 시스템 내부의 개별 컴포넌트에 접근하게 하는 대신에 Façade를 사용하게 한다. &lt;br /&gt;&lt;br /&gt;&lt;u&gt;Proxy 패턴&lt;/u&gt;은 Adapter와 Decorator와 아주 비슷하지만, object 접근제어가 목적이다. Proxy는 클라이언트의 직접적인 접근을 막는 대신, 실제 object처럼 동작한다. 그리고 실제 object처럼 동작하고 다른 행동을 하거나 원래 object에 요청을 보낼 수도 있다. Proxy는 이 모든 패턴 중에서 가장 다목적한 패턴이고, 다른 방법으로 사용될 수 있다. 예를 들어, 원격 object와 통신하는 Remote proxy, 비용이 많이 드는 object에 접근을 통제하는 Virtual proxy, &amp;nbsp;role 기반 object의 접근을 제공하는 Protection proxy, 캐시 object를 반환하는 Caching proxy 등에 사용될 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;u&gt; 자바에서 Adapter, Decorator, Façade, Proxy 패턴의 다른점은,,&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;1) &lt;u&gt;Adapter 패턴&lt;/u&gt;은 인터페이스를 전환하지만, Decorator는 interface를 전환하지는 않고 단지 원본 object 를 받아들이는 메소드에 전달될 수 있도록 원본 object의 interface를 구현할 뿐이다.&lt;br /&gt;&lt;br /&gt;2)&lt;u&gt; Decorator 패턴&lt;/u&gt;과 와 Proxy의 패턴의 주된 차이점 중 하나는 Decorator는 절대 object를 생성하지 않고, 항상 존재하는 object에 새 기능을 추가한다. 반면 Proxy는 object가 존재하지 않으면 object를 생성할 수 있다. 준비될 때 까지 실제 object처럼 있다가(stand in place of real object .. and then) 실제 object에 요청을 전달할 수 있다.&lt;br /&gt;&lt;br /&gt;3) &lt;u&gt;Decorator 패턴&lt;/u&gt;은 여러 decorator를 연결(chaining)해서 여러 기능(feature)을 추가할 수 있고 순차적인 방식으로 기능을 동작시킬 수 있다. 반면 Proxy는 proxy 연결(chaining)을 권하지는 않는다.&lt;br /&gt;&lt;br /&gt;4) &lt;u&gt;Façade 패턴&lt;/u&gt;을 Decorator와 비교하자면, Decorator 같지 않다고 볼 수 있다. façade는 새로운 동작을 추가하지 않고 단지 interface에 있는 메소드를 호출할 뿐이다. 단지 façade로 제공된다.&lt;br /&gt;&lt;br /&gt;5) &lt;u&gt;Proxy나 Adapter 패턴&lt;/u&gt;은 특정 interface를 구현한 façade를 요구하지 않는다. 사실, façade는 단순히 개별 서브 시스템 컴포넌트를 내부에 유지하고 (holding), 클라이언트에서 요구한 간단한 동작을 제공한다. 그런 후, 그에 상응하는 서브 시스템의 메소드를 호출하는 class 일 수 있다. 예를 들어, 차(Car)를 façade로 생각할 수 있다. 차에 start() 메소드는  클라이언트가 start() 메소드를 호출 할 때, 각 서브시스템의 engine.start(), wheel.start(), lights.on(), ac.on()등의 메소드가 호출될 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-IdmYcoSiv8w/VKVXI0YziSI/AAAAAAAACTk/qazYN-uPB34/s1600/Adapter%2Bdesign%2BPattern%2Bin%2BJava.PNG&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;227&quot; src=&quot;https://4.bp.blogspot.com/-IdmYcoSiv8w/VKVXI0YziSI/AAAAAAAACTk/qazYN-uPB34/s1600/Adapter%2Bdesign%2BPattern%2Bin%2BJava.PNG&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: small; text-align: start;&quot;&gt;UML diagram of Adapter pattern&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-rwfi453uD9w/VKVXI8JxanI/AAAAAAAACTo/nz6X4g8F80o/s1600/Decorator%2BDesign%2BPattern%2Bin%2BJava.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;334&quot; src=&quot;https://1.bp.blogspot.com/-rwfi453uD9w/VKVXI8JxanI/AAAAAAAACTo/nz6X4g8F80o/s1600/Decorator%2BDesign%2BPattern%2Bin%2BJava.PNG&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: small; text-align: start;&quot;&gt;UML diagram of Decorator pattern&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-nZ3BmGu8Rm4/VKVX5X3eabI/AAAAAAAACT8/RpYl9boXEJw/s1600/Proxy%2BDesign%2BPattern.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;398&quot; src=&quot;https://1.bp.blogspot.com/-nZ3BmGu8Rm4/VKVX5X3eabI/AAAAAAAACT8/RpYl9boXEJw/s1600/Proxy%2BDesign%2BPattern.gif&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: small; text-align: start;&quot;&gt;UML diagram of Proxy pattern&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-W6xz6EFoXxA/VKVX38_E7cI/AAAAAAAACT0/t6AgrjrF4xI/s1600/facade%2Bpattern%2Bin%2BJava.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;406&quot; src=&quot;https://4.bp.blogspot.com/-W6xz6EFoXxA/VKVX38_E7cI/AAAAAAAACT0/t6AgrjrF4xI/s1600/facade%2Bpattern%2Bin%2BJava.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: small; text-align: start;&quot;&gt;UML diagram of Facade pattern&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;정리하면,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;두 개의 다른 부분을 같이 동작하게 할 Interface로 변환해야 한다면 Adapter 패턴&lt;/li&gt;&lt;li&gt;보안이나 성능, 네트워킹 등의 이유로 실제 object를 숨겨야 한다면 Proxy 패턴&lt;/li&gt;&lt;li&gt;런타임으로 기존 object에 새로운 동작을 추가해야 한다면 Decorator 패턴 – Decorator는 클라이언트 요청에 따라 다른 순서로 동작을 섞어서 적용할 수 있는  유연함을 제공&lt;/li&gt;&lt;li&gt;마지막으로 클라이언트가 복잡한 시스템에 단순하게 접근하게 하려면 Façade 패턴을 사용&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/1771317078014341560/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/04/adapter-decorator-facade-proxy.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1771317078014341560'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1771317078014341560'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/04/adapter-decorator-facade-proxy.html' title='[펌요약] 자바의 Adapter, Decorator, Façade, Proxy 패턴의 유사점과 차이점'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-IdmYcoSiv8w/VKVXI0YziSI/AAAAAAAACTk/qazYN-uPB34/s72-c/Adapter%2Bdesign%2BPattern%2Bin%2BJava.PNG" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-1677959863517675949</id><published>2016-04-27T12:52:00.003+09:00</published><updated>2017-03-26T23:52:35.322+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="configuration"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-consumer"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaConsumer"/><title type='text'>카프카 컨슈머 설정</title><content type='html'>컨슈머 설정은 config/consumer.properties에서&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;컨슈머 기본세팅&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;group.id&lt;/h4&gt;단일 그룹으로 컨슈머 그룹을 구분하는 문자열값. 같은 ID를 지정하면 동일한 그룹으로 마킹 할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;zookeeper.connect&lt;/h4&gt;&lt;a href=&quot;http://free-strings.blogspot.com/2016/04/blog-post.html&quot; target=&quot;_blank&quot;&gt;브로커 설정&lt;/a&gt;&amp;nbsp;참고&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;consumer.id&lt;/h4&gt;&lt;u&gt;컨슈머 ID가 지정되지 않으면 자동 생성&lt;/u&gt;된다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;스레드와 성능설정&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;socket.receive.buffer.bytes&lt;/h4&gt;네트워크 요청에 대한 받기 버퍼의 크기. 기본 1024000.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;fetch.message.max.bytes&lt;/h4&gt;요청이 있을 때 마다 토픽의 파티션에서 패치 할 바이트 수. &lt;u&gt;프로듀서가 설정값 보다 큰 값을 보내는 경우는 메시지를 받을 수 없기 때문에, 프로듀서가 보내는 최대 메시지 만큼 값이 커야 한다. 또한, 컨슈머가 패치한 메시지를 메모리에 유지하기 때문에 사용하는 만큼 메모리 설정도 해야 한다. 이 값은 주의 깊게 설정되어야 하는 값&lt;/u&gt;이다. 기본 1024 * 1024&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;num.consumer.fetchers&lt;/h4&gt;카프크에서 데이터를 패치할 때 사용될 스레드 개수. 기본 1&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h4&gt;queued.max.message.chunks&lt;/h4&gt;소비되기 전에 버퍼될 수 있는 최대 청크수. 청크는 최대 fetch.message.max.bytes 만큼 크기가 될 수 있다. 기본 2&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;fetch.min.bytes&lt;/h4&gt;서버에서 패치될 최소 바이트 수. 요청을 응답하기 전에 더 많은 데이터가 패치 될 때 까지 기다린다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;consumer.timeout.ms&lt;/h4&gt;만약 메시지를 소비할 상황이 되지 못한다면 예외를 던지는데, 예외를 던지기전 컨슈머 스레드가 기다릴 시간. 기본 -1&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;로그 세팅&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;auto.commit.enable&lt;/h4&gt;true 일경우, 컨슈머는 실패할 경우에 복구하기 위해 메시지 오프셋을 저장한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;rebalance.max.retries&lt;/h4&gt;컨슈머 그룹에서 파티션 수가 동일하게 분산된다. &lt;u&gt;만약 새로운 컨슈머가 조인하면, &amp;nbsp;파티션 할당을 재조정 한다. 파티션 수를 재조정 하는 동안 그룹에 변경이 생기면, 새 컨슈머에 파티션을 할당하는 작업은 실패하고 재시도 하게 된다. 이 세팅은 컨슈머가 실패하더라도 몇번 재시도 할지 횟수를 정한다&lt;/u&gt;. 기본값은 4&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;rebalance.backoff.ms&lt;/h4&gt;재균형 동안(재균형동안 balance가 실패해서) 재시도 하는 시간 주기. 명시적으로 지정되지 않으면 zookeeper.sync.time.ms가 사용된다. 기본값은 2000&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;refresh.leader.backoff.ms&lt;/h4&gt;컨슈머가 리더를 잃어 버렸을 때, 파티션에 대한 새 리더를 찾는 시도를 하기 전에 기다리는 시간 지정. 기본 200&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;auto.offset.reset&lt;/h4&gt;카프카에 초기값이 없거나 또는 현재 오프셋이 더이상 서버에 존재 하지 않는다면 (데이터가 삭제 되거나 해서..) &amp;nbsp;어떻게 해야 하는가에 대한 설정. 기본값 latest&lt;br /&gt;&lt;br /&gt;&lt;i&gt;earliest: 오프셋을 초기값으로 자동 리셋&lt;/i&gt;&lt;br /&gt;&lt;i&gt;largest: 오프셋 값을 최대값으로 자동 리셋&lt;/i&gt;&lt;br /&gt;&lt;i&gt;none: 컨슈머 그룹에서 이전 오프셋을 찾지 못한다면, 컨슈머에 에러를 던짐&lt;/i&gt;&lt;br /&gt;&lt;i&gt;anything else: 컨슈머에 에러를 던짐&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;partition.assignment.strategy&lt;/h4&gt;파티션 할당 전략을 담당하는 클래스 이름.&amp;nbsp;클라이언트는 그룹으로 관리가 되고 있을때 컨슈머 인스턴스간 파티션 오너쉽을 분산하기 위해 사용한다. 기본 org.apache.kafka.client.consumer.RangeAssignor&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp;RangeAssignor&lt;/i&gt;&lt;i&gt;가용한 파티션을 숫자 순서로 놓고 컨슈머는 사전순으로 놓는다. 그런 후 각 컨슈머에 할당할 파티션의 숫자를 결정하기 위해 파티션의 숫자를 전체 컨슈머 숫자로 나눈다. 만약 짝수로 나눠지지 않는다면, 첫번째 몇 컨슈머가 여분의 파티션을 가진다.&amp;nbsp;&lt;/i&gt;&lt;i&gt;예를들어, 두개의 컨슈머 C0, C1이 있고, 두개의 토픽 t0, t1이 있다. 그리고 각 토픽은 3개의 파티션을 가진다면, 결과는 t0p0, t0p1, t0p2, t1p0, t1p1, and t1p2 이된다.&amp;nbsp;&lt;/i&gt;&lt;i&gt;할당 결과는 :&lt;br /&gt;C0: [t0p0, t0p1, t1p0, t1p1]&lt;br /&gt;C1: [t0p2, t1p2]&lt;/i&gt;&lt;br /&gt;RoundRobinAssignor ... &amp;nbsp;&lt;/div&gt;C0: [t0p0, t0p2, t1p1]&lt;br /&gt;C1: [t0p1, t1p0, t1p2] &lt;br /&gt;&lt;h3&gt;주키퍼 세팅&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;zookeeper.session.timeout.ms&lt;/h4&gt;만약 지정된 시간동안 주키퍼로 부터 컨슈머가 하트빗 메세지를 보내지 않는다면, 죽은 노드로 간주되고 컨슈머 재조정(rebalance)이 생긴다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;zookeeper.connection.timeout.ms&lt;/h4&gt;클라이언트가 주키퍼에 커넥션을 맺을 때 기다릴 시간.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/1677959863517675949/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/04/blog-post_27.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1677959863517675949'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1677959863517675949'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/04/blog-post_27.html' title='카프카 컨슈머 설정'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-5471432221456219304</id><published>2016-04-26T18:39:00.004+09:00</published><updated>2017-03-26T23:50:39.607+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="configuration"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-0.9"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-producer"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaProducer"/><title type='text'>카프카 프로듀서(Producer) 0.9.0 설정 </title><content type='html'>프로듀서 설정은 config/producer.properties 파일에서..&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;bootstrap.servers&amp;nbsp;&lt;/h4&gt;호스트/포트 쌍으로 된 리스트로 카프카 초기에 클러스터에 연결할 때 사용한다. 이 리스트는 단순히 처음에 전체 서버를 찾는데 사용되는 호스트 리스트다 - host1:post1,host2:port2.. 형식 전체 클러스터 멤버(클러스터 멤버는 동적으로 바뀐다)를 찾는 초기 커넥션으로 사용하기 때문에, 모든 서버 리스트를 포함할 필요는 없다. (서버가 다운되었을 경우를 대비해 서버를 하나이상 적으면 된다)&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;key.serializer, value.serializer&lt;/h4&gt;기본&amp;nbsp;org.apache.kafka.common.serialization.ByteArraySerializer 전달받은 byte[]를 그대로 리턴한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;buffer.memory&lt;/h4&gt;&amp;nbsp;프로듀서가 &lt;u&gt;서버로 보낼 레코드를 버퍼링 할 때 사용할 수 있는 전체 메모리의 바이트수&lt;/u&gt;. 레코드가 서버로 전달 될 수 있는 것 보다 더 빨리 보내지면 버퍼는 소진되고 프로듀서는 &lt;b&gt;max.block.ms&lt;/b&gt; 동안 레코드를 보내지 않고 블럭 한다. 블럭을 피하려면 &lt;b&gt;block.on.buffer.full(아래참고)&lt;/b&gt;을 false로 두면 된다.&lt;br /&gt;&amp;nbsp;이 세팅은 대략 프로듀서가 사용할 메모리 이지만, 프로듀서가 사용하는 메모리가 버퍼링만 있는게 아니기 때문에 설정에 딱떨어 지지는 않는다. 처리중인 요청 때문에 유지 해야하는 메모리 뿐만 아니라 압축 설정이 켜있으면 압축하는데 부가적인 메모리가 사용된다.&lt;br /&gt;&lt;br /&gt;기본값은 약 33MB&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;acks&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&amp;nbsp;acks=0: acks를 0으로 설정하면, 서버에서 &lt;u&gt;수신확인(acknowledment)이 오길 기다리지 않는다&lt;/u&gt;. 소켓 버퍼에 레코드가 즉시 추가되고 보내진것으로 간주된다. 이 경우에는 서버가 레코드를 수신했다는 보장이 없고, retries 설정도 먹지 않는다 (클라이언트는 통상 실패를 알지 못하기 때문에 retry를 할 수 없.. ). 각 레코드에 대해 되돌려 받은 오프셋은 항상 -1로 세팅 된다.&lt;/li&gt;&lt;li&gt;acks=1: &lt;u&gt;리더가 레코드를 자신의 로컬 로그에 쓰고 모든 팔로워로 부터 수신확인(acknowledgement)을 기다리지 않고 응답&lt;/u&gt;한다. 이 경우 레코드를 수신확인 알림 후에 리더가 즉시 실패 할 수 있지만 팔로워가 레코드를 복제 하기전 이면 레코드는 소실 될 수 있다.&lt;/li&gt;&lt;li&gt;akcs=all: 리더는 레코드가 동기로 복제되고 알림이 오기를 기다린다. &lt;u&gt;최소한 하나의 복제가 살아 있는 한 레코드가 소실되지 않는 것을 보장&lt;/u&gt;한다.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;기본값은 1이다&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;compression.type&lt;/h4&gt;기본으로 압출을 하지 않는다. &amp;nbsp;gzip, snappy, lz4 를 지원한다.&amp;nbsp;&lt;u&gt;보통 압축된 포멧으로 메세지를 보내는게 좋다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;retries&lt;/h4&gt;&lt;div&gt;프로듀서가 레코드를 보낼 때 &lt;u&gt;에러가 나면 재시도 횟수&lt;/u&gt;를 말한다. 잠재적으로 레코드 순서가 바뀔 수 있다. 예를들어, 하나의 파티션에 두개의 레코드가 보내졌을때, 첫번째는 실패하고 재시도 되고 두번째는 성공했을 경우 두번째 레코드가 먼저 소모된다.&lt;/div&gt;&lt;div&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;batch.size&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;동일 파티션에 여러개의 레코드가 보내질때 지정된 크기 보다 작으면 &lt;u&gt;레코드를 모아서 보내&lt;/u&gt;게 된다. 지정된 크기보다 더 많은 레코드를 보내는 시도는 처리 되지 않는다. 브로커에 보내지는 요청은 여러개의 배치가 포함되고, 각 파티션에 나누어 데이터가 보내진다. &lt;u&gt;배치크기와 throughput 관계는 아래 linger.ms 부분 참고&lt;/u&gt;.&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;max.request.size&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;요청 보낼 수 있는 최대 바이트수로, 레코드 배치수를 제한하게 된다. &lt;u&gt;단일 요청에 너무 큰 요청을 보내는 것을 피할 수 있다&lt;/u&gt;. 최대로 보낼 수 있는 레코드 크기를 제한 하는데 효과적이지만, 서버도 별도로 레코드 크기를 제한 하는 설정이 있어서 서로 값이 다를 수 있으니 주의 해야 한다.&lt;/div&gt;&lt;div&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;connections.max.idle.ms&lt;/h4&gt;&lt;div&gt;지정시간 후 놀고있는 물리적인 소켓 채널을 닫는다. Selector에 전달되는 connectionMaxIdleMs 시간이 해당 값이다.&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/common/network/Selector.java#L94&quot; target=&quot;_blank&quot;&gt;Selector.java#L94&lt;/a&gt;&amp;nbsp;Selector:poll() 호출 마다 maybeCloseOldestConnection()에서 체크해서 처리한다.&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/common/network/Selector.java#L377&quot; target=&quot;_blank&quot;&gt;Selector.java#L377&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;linger.ms&lt;/h4&gt;&lt;a href=&quot;http://egloos.zum.com/depiness/v/772710&quot; style=&quot;font-weight: normal;&quot; target=&quot;_blank&quot;&gt;Nagle 알고리즘&lt;/a&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&amp;nbsp;처럼 레코드를 특정시간 동안 버퍼링해서 묶어 하나의 배치 요청으로 보내는 것을 말한다. 지정된 값 만큼 레코드 전송을 지연을 하게 되지만, batch.size 에 다다르면 즉시 메시지를 보낸다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://ingest.tips/2015/07/19/tips-for-improving-performance-of-kafka-producer/&quot; target=&quot;_blank&quot;&gt;latency와 throughput, 그리고 batch.size와 linger.ms 관련해, &quot;프로듀서 성능개선&quot; 글&lt;/a&gt;&amp;nbsp;참고 &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f8c283d0cd3bdb7346064d7885acbe44&quot; target=&quot;_blank&quot;&gt;샘플코드&lt;/a&gt;&lt;br /&gt;&lt;h4&gt; &lt;div style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/h4&gt;&lt;h4&gt;max.block.ms&lt;/h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;참고:&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/KAFKA-3236&quot; style=&quot;font-weight: normal;&quot;&gt;https://issues.apache.org/jira/browse/KAFKA-3236&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;KafkaProducer.send():&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java&quot; target=&quot;_blank&quot;&gt;BufferPool&lt;/a&gt;이 가득 차거나 메타데이터를 사용 할 수 없을때.&amp;nbsp;&lt;/li&gt;&lt;li&gt;KafkaProducer.partitionFor(): 메타데이타를 사용할 수 없을 때.&lt;/li&gt;&lt;/ul&gt;위 두경우 max.block.ms가 초과되면 예외를 던진다.&lt;br /&gt;&lt;br /&gt;BufferPool 크기는 batch.size가 기준이 된다. BufferPool.allocate(size, ..) 할때 할당 크기가 batch.size보다 크면 예외를 발생시킨다.&lt;br /&gt;&lt;br /&gt; -&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java#L261&quot; target=&quot;_blank&quot;&gt;KafkaProducer.java#L261&lt;/a&gt;&lt;br /&gt;-&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java#L108&quot; target=&quot;_blank&quot;&gt;RecordAccumulator.java#L108&lt;/a&gt;&lt;br /&gt;-&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java#L177&quot; target=&quot;_blank&quot;&gt;RecordAccumulator.java#L177&lt;/a&gt;&lt;br /&gt;-&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java#L67&quot; target=&quot;_blank&quot;&gt;BufferPool.java#L67&lt;/a&gt;&lt;br /&gt;-&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java#L129&quot; target=&quot;_blank&quot;&gt;BufferPool.java#L129&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;size는 레코드 크기와 오프셋을 고려한 크기와 batch.size 중 큰값이다.&lt;br /&gt;&lt;br /&gt; -&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/common/record/Records.java#L27&quot; target=&quot;_blank&quot;&gt;Records.java#L27&lt;/a&gt;&lt;br /&gt;-&amp;nbsp;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0.1/clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java#L175&quot; target=&quot;_blank&quot;&gt;RecordAccumulator.java#L175&lt;/a&gt;&lt;br /&gt;&lt;h4&gt;         &lt;/h4&gt;&lt;h4&gt;max.request.size&lt;/h4&gt;요청 보낼 수 있는 최대 바이트수로, 레코드 배치수를 제한하게 된다. 단일 요청에 너무 큰 요청을 보내는 것을 피할 수 있다. 최대로 보낼 수 있는 레코드 크기를 제한 하는데 효과적이지만, 서버는 별도로 레코드 크기를 제한 하는 설정이 있어서 서로 다를 수 있으니 주의 해야 한다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;font-weight: normal;&quot;&gt;&lt;/div&gt;&lt;h4&gt;partitioner.class&lt;/h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;서브토픽간 메시지 파티셔닝하는 기본 값은 key의 해시값.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;i&gt;partitioner.class=kafka.producer.DefaultPartitioner&lt;/i&gt;&lt;h4&gt;&lt;/h4&gt;&lt;div&gt;&lt;h4&gt;receive.buffer.bytes&lt;/h4&gt;&lt;div&gt;데이터를 읽을때 사용하는 TCP 소켓 버퍼 크기&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;request.timeout.ms&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;클라이언트에 에러를 되돌려 보내기 전에 request.required.ack 요건을 충족시키려 브로커가 기다릴 시간을 설정.&amp;nbsp;타임아웃전에 응답이 없으면 프로듀서는 재요청을 보내거나 요청은 실패한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;producer.type&lt;/h4&gt;sync와 async 두가지 값을 설정 할 수 있다. &lt;u&gt;async모드는 프로듀서가 브로커에 백그라운드 스레드로 데이터를 보낸다. &amp;nbsp;이 스레드는 배치로 요청을 보내 수 있지만, 클라이언트가 실패하면 데이터 유실이 생긴다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;serializer.class&lt;/h4&gt;serializer 클래스를 선언하는 설정. 이 serializer는 메시지를 직렬화하고 나중에 검색되기 쉽게 적당한 형식으로 저장한다. &amp;nbsp;기본 인코더는 byte 배열을 받아 그대로 반환한다.&lt;br /&gt;&lt;i&gt;serializer.class=kafka.serializer.DefaultEncoder&lt;/i&gt;&lt;br /&gt;&lt;h4&gt;block.on.buffer.full&lt;/h4&gt;&lt;div&gt;메모리 버퍼가 소진되면 새로운 레코드를 받지 않고 블럭하거나 에러를 던진다. 기본 false 이고 프로듀서는 BufferExhaustException를 던지지 않지만 max.block.ms 값을 기준으로 요청을 블럭한다. 블럭시간이 지나면 TimeoutException을 던진다. true로 값을 설정하면 max.block.ms는 Long.MAX_VALUE값이 되고, metadata.fetch.timeout.ms 설정도 따르지 않는다. Deprecated 된 설정이기 때문에, max.block.ms 설정으로 사용해야 한다.&amp;nbsp;&lt;/div&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;interceptor.classes&lt;/h4&gt;인터셉터 클래스리스트를 지정 할 수 있다. 카프카 클러스터에 보내기전 메시지를 프로듀서가 받은 레코드를 인터셉트 할 수 있다.&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;max.in.flight.requests.per.connection&lt;/h4&gt;&lt;div&gt;클라이언트가 블로킹 되기전에 단일 커넥션에 보낼 답을 받지못한(unacknowledged) 최대 요청수. 1보다 큰값이고 실패한 보내기가 있다면, 재시도로 때문에 메시지 재정렬 이슈가 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;retry.backoff.ms&lt;/h4&gt;리더를 선출하는 데는 시간이 걸린다. 이 시간 동안 프로듀서는 메타데이터를 갱신하지 않는다. 데이터를 보내는 동안 발생한 에러는 메타데이터를 갱신해야 함을 의미한다. 이 속성은 프로듀서가 재시도 전에 기다릴 시간을 지정한다. 기본 100.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;(Deprecated, 0.10.0)&amp;nbsp;&lt;strike&gt;metadata.broker.list&lt;/strike&gt;&lt;/h4&gt;&lt;u style=&quot;font-weight: normal;&quot;&gt;토픽, 파티션 그리고 복제(replicas) 와 같은 메타데이터를 얻는 데 사용되는 가장 중요한 세팅이다&lt;/u&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;. 이 정보는 데이터를 생성하는 커넥션 셋업에 사용된다. host1:port,host2:port2와 같은 형식이다. 전체 카프카 브로커를 나열할 필요는 없지만 브로커의 서브셋이나 VIP는 브로커의 서브셋을 가리켜야 한다.&lt;/span&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;프로듀서가 각 토픽의 리더를 결정하기 위해 하나 이상의 브로커를 찾을 수 있다. 어떤 브로커가 토픽(또는 파티션)의 리더인지를 알아내야 할지 걱정할 &amp;nbsp;필요는 없다. 프로듀서는 브로커에 어떻게 접속할지 알고 있고 메타데이터를 요청하고 올바른 브로커에 연결한다.&amp;nbsp;&lt;/i&gt;&lt;h4&gt;(Deprecated, 0.10.0)&amp;nbsp;&lt;strike&gt;request.required.acks&lt;/strike&gt;&lt;/h4&gt;&lt;u&gt;프로듀서가 생성한(produced) 메시지를 언제 완료로 할지 결정&lt;/u&gt;한다. 메세지를 받았음을 응답(acknowledge)하기 전에 로그에&amp;nbsp;얼마나 많은 브로커가 커밋을 할지 정할 필요가 있다.&amp;nbsp;기본값은 0.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;request.required.acks=-1 : 리더는 응답을 쓰기 전에 모든 동기화된 복제에서 응답이 있을 때 까지 기다린다.&amp;nbsp;&lt;u&gt;-1 값은 분명히 데이터를 유지하는 가장 내구성이 좋은 방법이지만, 가장 느린 방법&lt;/u&gt;이다.&lt;/li&gt;&lt;li&gt;request.required.acks=0 : 프로듀서는 리더에서 어떤 응답(ack)이 있을지 기다리지 않는다. 보내고 잊어버리는 것을 의미.&lt;/li&gt;&lt;li&gt;request.required.acks=1 : 프로듀서는 리더가 메시지를 받을 때 까지 기다리고,&amp;nbsp;리더는 로컬 로그에 메시지를 쓰고 즉시 응답한다.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;참고:&amp;nbsp;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-1+-+Remove+support+of+request.required.acks&quot;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-1+-+Remove+support+of+request.required.acks&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;=&amp;gt; 0.8.3 이상에서는 request.required.acks &amp;gt; 1 인경우 InvalidRequiredAcksException이 발생한다.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/5471432221456219304/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/04/producer.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/5471432221456219304'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/5471432221456219304'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/04/producer.html' title='카프카 프로듀서(Producer) 0.9.0 설정 '/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-1360737464574786253</id><published>2016-04-26T12:04:00.000+09:00</published><updated>2017-03-26T23:49:23.372+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="configuration"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-broker"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-config"/><category scheme="http://www.blogger.com/atom/ns#" term="KafkaBroker"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaConfig"/><title type='text'>카프카 브로커 설정</title><content type='html'>카프카 브로커는 config/server.properties 파일에서 모든 설정을..&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;기본설정&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;broker.id&lt;/h4&gt;&lt;/div&gt;기본값은 0이다. 클러스터내에서 브로커를 구분 하는 이름으로 사용되며, 브로커를 구분하는 유니크한 값이기 때문에 브로커 호스트가 바뀌거나(다른 서버로 옮기거나) 포트가 바뀌어도 컨슈머(consumer) 설정을 바꾸지 않아도 된다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;host.name&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;기본값은 null이다. 값을 넣지 않으면 시스템에 있는 모든 인터페이스에 바인딩하고, 지정하면 특정 IP에 바인딩을 한다. 그래서 &lt;u&gt;클라이언트가 특정 인터페이스에 접속하게 하려면 host.name을 지정&lt;/u&gt;하면 된다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;port&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;카프카 브로커가 열고 있는 소켓 포트를 말한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;log.dirs&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;카프카 브로커가 메세지를 파일로 저장 할 디렉토리를 말하는데, &amp;nbsp;콤마(,)로 구분해 여러 디렉토리를 지정 할 수 있다. 기본값은 /tmp/kafka-logs이다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;기본 설정으로 브로커 하나를 띄워도 되고, 위 4가지만 설정만 조정하면 여러 브로커 인스턴스로 구성된 카프카 클러스터도 구성 할 수도 있다. &amp;nbsp;아래에서 살펴보자.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그 밖에, &amp;nbsp;advertised.host.name, advertised.port 가 있는데,&lt;/div&gt;&lt;div&gt;advertised.host.name은 프로듀서, 컨슈머 그리고 다른 브로커들에 주어지는 호스트 이름으로 지정하지 않으면 host.name이 사용된다. advertised.port도 마찬가지로 프로듀서나 컨슈머 그리고 브로커에 접속 할 때 지정하는 포트로 지정되지 않으면 port 설정이 사용된다.&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;브로커가 시작될때 주키퍼에 IP/PORT가 등록 될때, InetAddress.getLocalHost.getHostAddress가 사용된다. 그래서 &lt;u&gt;클라우드 환경이나 Docker, Vagrant 같은 환경일 경우는 가끔 consumer/producer가 브로커에 접속이 되지 않는 경우가 생긴다. &amp;nbsp;이때는 host.name을 속성을 지정하면 해결 할 수있다. 드물게 브로커에 바인딩된 IP/PORT와 클라이언트가 사용하는 IP/PORT가 다를 경우는 advertise.host.name, advertise.port를 지정해 주면 된다.&lt;/u&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;쓰레드 및 네트워크 설정&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;message.max.bytes&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;서버가 받을 수 있는 메세지의 최대 크기를 말한다. 그래서 &lt;u&gt;컨슈머의 fetch.message.max.bytes와 값을 맞추는게 중요&lt;/u&gt;하다. &amp;nbsp;프로듀서에 값을 지정해서 예상치 않은 큰 메세지를 보내는 것을 방지 하기위해 값을 조절하기도 하지만, 기본값 보다 큰 길이의 메세지를 처리하려면 조절해야 하는 값이다. 기본값은 1000000(1M)이다. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21020347/kafka-sending-a-15mb-message&quot; target=&quot;_blank&quot;&gt;스택오버플로우 참&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;Consumer side&lt;/b&gt;:fetch.message.max.bytes - this will determine the largest size of a message that can be fetched by the consumer.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;Broker side&lt;/b&gt;: replica.fetch.max.bytes - this will allow for the replicas in the brokers to send messages within the cluster and make sure the messages are replicated correctly. If this is too small, then the message will never be replicated, and therefore, the consumer will never see the message because the message will never be committed (fully replicated).&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;Broker side&lt;/b&gt;: message.max.bytes - this is the largest size of the message that can be received by the broker from a producer.&amp;nbsp;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;num.network.threads&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;네트워크 요청을 처리하는 쓰레드 수. 기본값은 3.&lt;br /&gt;&lt;i&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/i&gt;&lt;i&gt;&lt;u&gt;네트워크 요청 처리란 NIO Selector (java.nio.channels.Selector)개수&lt;/u&gt;를 말한다.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.10.0/core/src/main/scala/kafka/network/SocketServer.scala#L54&quot; target=&quot;_blank&quot;&gt;SocketServer.scala#L54&lt;/a&gt;,&amp;nbsp;&lt;/i&gt;&lt;i&gt;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.10.0/core/src/main/scala/kafka/network/SocketServer.scala#L92&quot; target=&quot;_blank&quot;&gt;SocketServer.scala#L92&lt;/a&gt;&amp;nbsp;,&amp;nbsp;&lt;/i&gt;&lt;i&gt;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.10.0/core/src/main/scala/kafka/network/SocketServer.scala#394&quot; target=&quot;_blank&quot;&gt;SocketServer.scala#394&lt;/a&gt;&amp;nbsp;,&amp;nbsp;&lt;/i&gt;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.10.0/clients/src/main/java/org/apache/kafka/common/network/Selector.java#L109&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;Selector.java#L109&lt;/i&gt;&lt;/a&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * Create a new nioSelector&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    public &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Selector&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;int maxReceiveSize&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; long connectionMaxIdleMs&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Metrics&lt;/span&gt; metrics&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Time&lt;/span&gt; time&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;String&lt;/span&gt; metricGrpPrefix&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Map&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; metricTags&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; boolean metricsPerConnection&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;ChannelBuilder&lt;/span&gt; channelBuilder&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;nioSelector &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;=&lt;/span&gt; java&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;nio&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;channels&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Selector&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;open&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;IOException&lt;/span&gt; e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;KafkaException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;e&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;num.io.threads&lt;/h4&gt;IO 가 생길때 마다 spawn되는 쓰레드 수로, &lt;u&gt;로그를 저장하는 데 사용 되는 디스크 수와 동일하게 지정&lt;/u&gt; 하는것을 권장한다. 기본값은 8.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;background.threads&lt;/h4&gt;여러가지 백그라운드 작업을 하는 쓰레드 수를 말함. 오래된 로그를 삭제하는 쓰레드도 포함하고 있다. 기본 값은 10&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;queued.max.requests&lt;/h4&gt;IO 쓰레드가 처리하는 동안 지연된 메세지를 보관하는 큐의 크기. &lt;u&gt;큐가 가득차면 네트워크 쓰레드는 더이상 메세지를 받지 않는다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;socket.send.buffer.bytes&lt;/h4&gt;소켓 커넥션에 사용될 SO_SNDBUF 버퍼 크기. 기본값은 102400.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;소켓을 생성하면 소켓에는 send buffer와 receive buffer가 각각 할당 되는데, &amp;nbsp;send buffer에 대한 설정이다. &lt;u&gt;커널에 힌트를 주는 값으로 어프리케이션에서 설정한 값대로 적용되지는 않는다&lt;/u&gt;. 가령 0으로 설정하거나 가용한 최대값을 넘었을 경우 커널이 자동 조절 한다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Set a hint the size of the underlying buffers used by the platform for outgoing network I/O. When used in set, this is a suggestion to the kernel from the application about the size of buffers to use for the data to be sent over the socket. When used in get, this must return the size of the buffer actually used by the platform when sending out data on this socket.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;socket.receive.buffer.bytes&lt;/h4&gt;소켓 커넥션에 사용될 SO_RCVBUFF 버퍼 크기. 기본값은 102400.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;socket.request.max.bytes&lt;/h4&gt;서버가 받을 수 있는 최대 요청 개수. &amp;nbsp;서버 메모리가 고갈 되는걸 방지한다. &lt;u&gt;자바 힙크기 보다 작게 설정해야 한다&lt;/u&gt;. 기본값은 104857600.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;num.partitions&lt;/h4&gt;토픽당 로그 파티션의 기본 개수. 파티션 크기를 명시적으로 지정하지 않아도 된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;로그 설정&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;log.segment.bytes&lt;/h4&gt;단일 로그파일의 최대 크기를 의미한다. 로그파일이 세그먼트 크기만큼 되면 새로운 세그먼트 파일이 생긴다. 토픽은 디렉토리안에 여러 세그먼트 파일로 저장된다. 토픽마다 기본적용 되며(per-topic) 기본 값은 1GB.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.roll.{ms,hours}&lt;/h4&gt;새로운 세그먼트 파일이 생기는 주기. 세그먼트 크기가 되지 않아도 주기별로 파일이 나뉜다. 토픽 기본설정. 기본값은 7일&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.cleanup.policy&lt;/h4&gt;&quot;delete&quot;와 &quot;compact&quot; 두가지 모드가 있다. &quot;delete&quot;는 시간 설정이나 크기 설정에 따라 주기적으로 로그 세그먼트를 삭제하고 &quot;compact&quot;는 필요없는 레코드를 지운다. 토픽 기본설정(per-topic)이다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.retention.{ms,minutes,hours}&lt;/h4&gt;로그 세그먼트가 보관될 시간. 토픽 기본설정(per-topic). 기본 7일.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.retention.bytes&lt;/h4&gt;삭제전까지 파티션별로 보관할 로그 바이트 수. 토픽 기본설정(per-topic). &amp;nbsp;설정한 로그 시간이나 크기가 되면 세그먼트는 삭제됨.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.retention.check.interval.ms&lt;/h4&gt;로그를 삭제 하기 위해 체크하는 주기. 기본 5분.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.cleaner.enable&lt;/h4&gt;로그 compaction 설정. 기본 true.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.cleaner.threads&lt;/h4&gt;로그 compaction 작업을 할 쓰레드 수. 기본 1.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.cleaner.backoff.ms&lt;/h4&gt;로그 cleaning이 필요한지 체크하는 주기. 기본 15000&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.index.size.max.bytes&lt;/h4&gt;로그 세그먼트의 최대 오프셋 인덱스. 토픽 기본(per-topic). 기본값 10485760&lt;br /&gt;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.10.0/core/src/main/scala/kafka/log/OffsetIndex.scala&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;인덱스에 대한 설명(OffsetIndex.scala)&lt;/i&gt;&lt;/a&gt; &lt;i&gt;... &lt;u&gt;인덱스는 특정 로그 세그먼트의 위치를 물리적인 파일에 오프셋을 매핑&lt;/u&gt;한다. 이 인덱스는 Sparse 하다: 로그에 전체 메세지를 위한 엔트리를 보관하지 않는다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;인덱스는 최대 8-byte entry의 고정된 숫자로 미리 할당되어 파일로 저장된다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;인덱스는 이 파일의 메모리맵 검색을 지원한다. 타겟 오프셋과 같거나 가장 큰 오프셋보다 작은 오프셋/위치 쌍의 위치를 찾기위해 간단한 변종 이진검색을 한다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;인덱스 파일은 두가지 방식으로 열린다: 비어있거나 변경될 수 있는 인덱스로 추가가 될 수 있는 인덱스 파일 또는 이전에 내용이 덧붙여져(populated) 변경될 수 없는 읽기전용 인덱스 파일...&lt;/i&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;a href=&quot;https://github.com/apache/kafka/blob/0.10.0/core/src/main/scala/kafka/log/OffsetIndex.scala&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19394669/why-index-file-exists-in-kafka-log-directory&quot; target=&quot;_blank&quot;&gt;why-index-file-exists-in-kafka-log-directory&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.index.interval.bytes&lt;/h4&gt;오프셋 인덱스에 새엔트리가 추가될 주기로, 브로커는 패치 요청마다 로그파일을 정확한 위치를 찾을 때 까지 순차적으로 스캔한다. 기본값은 4096.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;log.flush.interval.message&lt;/h4&gt;디스크에 플러쉬 될때 까지 메모리에 유지될 메세지의 숫자.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;로그 압축(compaction) (&lt;a href=&quot;http://kafka.apache.org/documentation.html#compaction&quot; target=&quot;_blank&quot;&gt;관련링크&lt;/a&gt;)&lt;/i&gt;&lt;i&gt;&lt;u&gt;로그 압축은 카프카가 단일 파티션의 데이터를 담은 로그에 있는 각 키값들이 항상 가장 마지막 값을 보관 할 수 있게 보장한다. 어플리케이션이 크래시 난 후, 시스템이 실패했을때 또는 Operational maintenance 동안 어플리케이션이 재시작 한 후 크래시 된것들을 재로딩하는 유즈케이스나 시나리오등에 사용 될 수 있다.&lt;/u&gt;&lt;/i&gt;&amp;nbsp; &lt;i&gt;... 이런 작업은 각 레코드가 독립적인(stands alone) 로깅 즉, 임시 이벤트 데이타 같은 데는 적합하다. 그렇지만, 데이터 스트림에서 중요한것은 변경이 중심이된(keyed)로그, 변경 데이타(mutable data)다 – 예, 데이터베이스 테이블 변경)&lt;/i&gt;&lt;br /&gt;&lt;i&gt;스트림과 같은 구체적인 예를 다뤄보자. 우리가 사용자 메일 주소를 포함하는 토픽을 가지고 있다고 하자; 매시간 사용자는 메일 주소를 업데이트 한다. 우리는 사용자의 USER ID를 주키(primary key)로 이 토픽에 메세지를 보낸다. 자 우리가 특정 시간에 걸쳐 아래 메세지를 보낸다고 해보자.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;123 =&amp;gt; bill@microsoft.com&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;123 =&amp;gt; bill@gatesfoundation.org&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;123 =&amp;gt; bill@gmail.com&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;u&gt;각 메세지 주키에 대해 최소한 가장 마지막 업데이트를 보관 될 수 있게 보장하기 위해서 로그 압축은 너무 잘게 나눠지지 않은(granular)보관 메커니즘을 제공한다. 이 메커니즘은 단지 최근에 변경된 키만 보관하는게 아니라 모든 키의 마지막 값을 가지는 전체 스냅샷 로그를 보장하는 것이다. 이것은 다운스트림 컨슈머가 전체 변경로그를 보관하지 않고 토픽과 별개로 스스로의 상태를 복구 할 수 있음을 의미한다.&lt;/u&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;몇가지 유용한 사용예를 살펴보면,,&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;u&gt;1. 데이터베이스 변화 구독&lt;/u&gt;. 여러 데이터 시스템에 데이터셋을 가질 필요가 종종 있고 대개 이 시스템중 하나가 어떤 종류의 데이터베이스(RDBMS, key-value store,,) 이기도 하다. 예를들어, 데이터베이스, &amp;nbsp;캐쉬, 검색 클러스터, 그리고 하둡 클러스트를 가지고 있을 수 있다. 각 시스템이 데이터베이스에 가하는 변경은 캐쉬에, 검색 클러스터에, 그리고 결과적으로 하둡에 반영될 필요가 있다. &amp;nbsp;시스템중 하나가 실시간 업데이트 처리만 하는 경우는 단지 최신 로그만 필요하다. 그러나 만약 캐쉬를 다시 로딩할 수 있는걸 원하거나 실패한 검색노드를 복구하길 원한다면, 일부가 아닌 전체 데이터 셋이 필요할 수 있다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;u&gt;2. 이벤트 소싱&lt;/u&gt;: &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/jj591559.aspx#sec1, http://martinfowler.com/eaaDev/EventSourcing.html&quot; target=&quot;_blank&quot;&gt;https://msdn.microsoft.com/en-us/library/jj591559.aspx#sec1, http://martinfowler.com/eaaDev/EventSourcing.html&lt;/a&gt;&amp;nbsp;&lt;/i&gt; &lt;i&gt;이벤트 소싱은 어프리케이션의 현재 상태를 결정하는 히스토리를 저장해서 어프리케이션의 상태를 보관하는 방법.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;u&gt;3. 저널링 파일 시스템&lt;/u&gt; : &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%80%EB%84%90%EB%A7%81_%ED%8C%8C%EC%9D%BC_%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; target=&quot;_blank&quot;&gt;https://ko.wikipedia.org/wiki/%EC%A0%80%EB%84%90%EB%A7%81_%ED%8C%8C%EC%9D%BC_%EC%8B%9C%EC%8A%A4%ED%85%9C&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;고가용성을 위한 저널링. 변경을 로깅 함으로써 로컬 계산 처리가 Fault-tolerant 될 수 있게 한다. 이 변경들은 로컬 변경을 만들 수 있게 해서 다른 프로세스가 이 변경을 재로딩 할 수 있고 만약 실패 하더라도 계속 진행 할 수 있게 한다. 구체적인 예로 카운트 처리, 데이터 통합, 그리고 &quot;group by&quot; &amp;nbsp;(스트림 쿼리 시스템에서 처리와 같은)게 있다. &amp;nbsp;&lt;u&gt;실시간 스트림 처리 프레임워크인 Samza는 정확히 이 목적으로 사용한다.&lt;/u&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;각각의 경우에서 한가지는 주로 변경의 실시간 피드 처리가 주로 필요하다. 그러나 경우에 따라, 머신이 크래쉬 되거나 데이터가 재로딩 될 필요가 있거나 재처리 될 필요가 있을때 한가지는 전체 로딩을 필요로 한다는 것이다. 로그 압축은 같은 토픽에서 이런 사례 모두를 피딩되게 한다. 이런 로그의 사용 스타일은 &lt;a href=&quot;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot; target=&quot;_blank&quot;&gt;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&lt;/a&gt; 에서 더 자세히 설명 되었다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;보통 아이디어는 꽤 단순하다. 만약 우리가 제약없이 로그를 보관 한다면, 그리고 우리가 위 케이스들에서 각 변경을 로깅 한다면, 우리는 최초 시작부터 매번 시스템의 상태를 캡쳐 해야 한다. 이 전체 로그를 사용함으로써 처음 N개의 레코드를 재연(replay)해서 제때 어떤 지점으로 &amp;nbsp;복구 할 수 있다. 이 가상적인 전체 로그는 아주 현실적이지지 않다. 로그로 단일 레코드를 많이 업데이트 하는 시스템이라면 끝없이 커질것이다. 오래된 업데이트를 버리는 간단한 로그 보관 메커니즘은 공간을 제약하지만 로그는 더이상 현재상태를 복구 할 방법이 없다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;로그 압축은 레코드당 보관법에 finer-grained를 주는 메커니즘이다. coarser-grained한 시간기반 보관법보다 이 아이디어는 같은 키로 더 최신 업데이트를 가져 선택적으로 레코드를 삭제한다. 이 방법은 최소한 키별로 마지막 상태를 가지는 로그가 보장된다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;이 보관 정책은 토픽단 설정 될 수 있다. 그래서 단일 클러스터는 크기나 시간으로 보관이 강제된 몇몇 토픽을 가질 수 있고 다른 &amp;nbsp;토픽들은 압축이 강제된 보관 정책을 &amp;nbsp;가질 수 있다.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;이 기능은 링크드인의 가장 오래된것들중 하나에서 영감을 받았다 그리고 가장 성공한 인프라의 부분이다. 데이터베이스 변경 로그 캐싱 서비스인 &lt;a href=&quot;https://github.com/linkedin/databus&quot; target=&quot;_blank&quot;&gt;Databus&lt;/a&gt; - &amp;nbsp;대부분의 구조화된 로그 시스템 같이 않게 카프카는 구독을 위해 만들어 졌다 그리고 빠른 순차 읽기와 쓰기를 위해데이터를 조직화 한다. Databus와 달리, 카프카는 source-of-truth 저장 동작을 한다. 그래서 심지어 업스트림 데이터 소스가 재연(replayable) 될 수 없는 상황에서도 유용하다.&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;h3&gt;복제 세팅&lt;/h3&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;default.replication.factor&lt;/h4&gt;자동으로 생성된 토픽에 대한 기본 복제 인수(factor)다. 기본 1&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;replica.fetch.max.bytes&lt;/h4&gt;팔로워가 리더에서 복제 할때 패치할 데이터의 최대 바이트 양. 1048576&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;replica.fetch.wait.max.ms&lt;/h4&gt;복제 패치 요청에 리더가 응답할 최대 시간. 기본 500&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;num.replica.fetchers&lt;/h4&gt;&lt;u&gt;리더에서 메세지를 복제할때 사용할 쓰레드 수로 쓰레드 수를 늘리면 IO 비율도 높아짐&lt;/u&gt;. 기본 1&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;replica.high.watermark.checkpoint.interval.ms&lt;/h4&gt;&amp;nbsp;각 복제가 복구를 위해 디스크에 워터마크를 저장하는 빈도. 기본 5000&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;주키퍼 세팅&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;zookeeper.connect&lt;/h4&gt;hostname:port 형식으로 주키퍼 커넥션을 지정한다. 콤파(,)로 구분해 여러 주키퍼 노드를 지정 할 수 있다. &amp;nbsp;여러 노드를 지정하는 것은 주키퍼 노드 하나가 다운 되어도 카프카 클러스터가 신뢰도와 지속성을 가지게 하기 위함. &lt;u&gt;주키퍼는 특정 패스에 카프카 데이타를 만들 수 있게 &amp;nbsp;chroot 패스를 허용&lt;/u&gt;한다. &amp;nbsp;chroot는 동일 주키퍼 클러스터가 여러 카프카 클러스터를 지원 할 수 있게 한다. &amp;nbsp;예) host1:port1,host2:port2,host3:port3/chroot/path. 마지막 설정은 모든 클러스터 데이터를 /chroot/path에 넣는다. 이 패스는 반드시 카프카가 시작되기 전에 생성되어야 한다. 그리고 컨슈머는 반드시 동일한 문자열(패스)을 사용해야 한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;zookeeper.session.timeout.ms&lt;/h4&gt;서버로부터 하트비트를 받지 못하면 죽은것으로 간주한다. 이 값은 반드시 주의깊게 설정되어야 하는데, 만약 이 &lt;u&gt;하트비트가 주기 너무 길면 죽은서버를 감지하지 못하고, 짧으면 살아 있는 서버가 죽은것으로 간주&lt;/u&gt; 된다. 기본값은 6000&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;zookeeper.sync.time.ms&lt;/h4&gt;주키퍼 팔로워가 리더 뒤에 있을 수 있는 시간을 지정한다? 기본 2000.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;기타 설정&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;auto.create.topics.enable&lt;/h4&gt;이 값을 true로 놓았을때, 만약 존재하지 않는 토픽에 메타데이터를 패치하거나 메세지를 생성하면, &amp;nbsp;자동으로 생성된다. &lt;u&gt;운영환경에서는 false로 둬야한다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;controlled.shutdown.enable&lt;/h4&gt;true로 놓았을때, 브로커에 셧다운이 호출되면, 그리고 이 브로커가 어떤 토픽의 리더일때, 리더를 셧다운전에 다른 브로커로 옮긴다. 이 설정은 시스템 가용성을 높일 수 있다. 기본값은 true.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;auto.leader.rebalance.enable&lt;/h4&gt;true일때, 가능하다면 각 파티션의 우선하는 복제에 주기적으로 리더쉽을 세팅해서, &amp;nbsp;브로커는&amp;nbsp;자동으로&amp;nbsp;브로커간 파티션의 리더쉽 균형을 맞추려고 시도한다. (우선하는 복제??) 기본값 true.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;leader.imbalance.per.broker.percentage&lt;/h4&gt;브로커별로 허락된 리더 불균형을 백분율로 지정. &lt;u&gt;만약 세팅된 비율을 웃돌면 클러스터는 리더쉽 재균형을 맞춘다&lt;/u&gt;. 기본값 10.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h4&gt;offset.metadata.max.bytes&lt;/h4&gt;클라이언트에 오프셋과 함께 저장될 수 있게 허락된 최대 메타데이타 양. 기본값 4096.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;max.connections.per.ip&lt;/h4&gt;브로커가 지정된 IP에서 수용 할 수 있는 최대 커넥션 수. 기본 214748367 (=Int.MaxValue)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;connections.max.idle.ms&lt;/h4&gt;브로커가 소켓을 닫기전 기다리는 최대 idle 시간. 기본 600000 (10 * 60 * 1000L)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;unclean.leader.election.enable&lt;/h4&gt;true 일때, &amp;nbsp;ISR(in-sync replicas) 가 아닌(=out-of-sync) 복제가 리더가 된다. 데이터 소실이 생길 수 있다. 기본 true&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;i&gt;새로 선출된 리더에 동기화 되지 않은 메세지들은 소실된다. 이 기능은 가용성과 신뢰성간 균형을 제공한다. 이 옵션이 꺼질때(false), 만약 브로커가 향후 사용하지 &amp;nbsp;않게 될 파티션에 대한 리더 복제를 포함 하고 있고, 동기화 되지 않았지만 리더와 대체할 복제가 존재하면, 리더 복제나 다른 동기화된 복재가 온라인이 될때 까지 그 파티션은 사용할 수 없게 된다.&amp;nbsp;&lt;/i&gt;&lt;/u&gt;&lt;br /&gt;&lt;h4&gt;offsets.topic.num.partitions&lt;/h4&gt;오프셋 커밋 토픽에 대한 파티션 수. 이 값은 디플로이 되고 나면 변경 될 수 없어서, 제한보다 높게 설정되는게 좋다. 기본 값은 50&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;offsets.topic.replication.factor&lt;/h4&gt;오프셋 커밋 토픽에 복제 인수(factor)를 지정. 지정값보다 더 높으면, &amp;nbsp;그 시점에 토픽을 생성하고 지정값 보다 낮으면 생성된 복제 수가 브로커 수와 같게 된다. 기본값 3.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;offsets.topic.segment.bytes&lt;/h4&gt;오프셋 토픽의 세그먼트 크기. 값이 작게 유지되면 리더가 로그 압축과 로딩이 더 빠르다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;offsets.load.buffer.size&lt;/h4&gt;오프셋 세그먼트를 오프셋 메니저의 캐시로 읽어들이는데 사용될 버퍼 크기.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;offsets.commit.required.acks&lt;/h4&gt;오프셋 커밋이 받아들여지기 전에 요구되는 ack(acknowledgement) 수. 기본값 -1.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/1360737464574786253/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/04/blog-post.html#comment-form' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1360737464574786253'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1360737464574786253'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/04/blog-post.html' title='카프카 브로커 설정'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-436204984618552151</id><published>2016-04-17T22:21:00.003+09:00</published><updated>2017-03-26T23:47:39.668+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="dma"/><category scheme="http://www.blogger.com/atom/ns#" term="io"/><category scheme="http://www.blogger.com/atom/ns#" term="sendfile"/><category scheme="http://www.blogger.com/atom/ns#" term="transferTo"/><category scheme="http://www.blogger.com/atom/ns#" term="zerocopy"/><title type='text'>자바에서 Zero Copy를 이용한 데이터 전송</title><content type='html'>리눅스나 유닉스에서 I/O 성능을 높이기 위해 &lt;a href=&quot;http://jvns.ca/blog/2016/01/23/sendfile-a-new-to-me-system-call/&quot;&gt;sendfile&lt;/a&gt;() 시스템 호출을 이용해 &quot;Zero Copy&quot;기술을 사용한다. 자바에서는 어떻게 I/O 성능을 높이는가에 관한 글요약.&lt;br /&gt;&lt;br /&gt;2008년에 쓰인 글이며 지금은 대중화 된 방법이다. &lt;a href=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/&quot;&gt;원문링크&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;웹 서버가 정적인 파일을 디스크에서 읽어서 소켓에 쓸때 커널 영역과 어플리케이션 영역간에 데이터 복사와 컨텍스트 전환으로 발생되는 비효율은  Zero Copy로 효율적인 처리를 할 수 있다.&lt;br /&gt;&lt;br /&gt;Zero Copy는 디스크에서 소켓으로 데이터를 복사할 때 커널레벨에서 데이터를 복사하는 방식으로  CPU 사용율과 메모리 대역폭 사용도 줄이고 커널 모드와 사용자 모드간 컨텍스트 전환 비용도 줄일 수 있기 때문에 성능이 좋아진다.&lt;br /&gt;&lt;br /&gt;자바는 java.nio.channels.FileChannel.transferTo() 메소드를 통해 Zero Copy를 제공 한다.&lt;br /&gt;&lt;h3&gt;데이터를 전송하는 일반적인 방법&lt;/h3&gt;&lt;br /&gt;파일에서 데이터를 읽고 소켓에 쓰기까지는 사용자 모드와 커널 모드간 4번의 컨텍스트 전환이 일어난다. 그리고 데이터 복사도 4번 일어난다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;Traditional data copying approach&quot; src=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/figure1.gif&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;그림1. 전통적인 데이터 복사&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;Traditional context switches&quot; src=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/figure2.gif&quot; style=&quot;background-color: white; border: 0px; font-family: Arial, sans-serif; font-size: 12.8px; line-height: 15.36px; margin: 0px auto; outline: 0px; padding: 0px; vertical-align: baseline;&quot; width=&quot;405&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;그림2. 전통적인 컨텍스트 전환&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;read() 호출은 사용자 모드에서 커널 모드로 컨텍스환트를 전환 하고, DMA( Direct Memorry Access) 엔진이 디스크에서 파일을 읽어 커널 영역 버퍼에 데이터를 저장한다. 이때 &amp;nbsp;첫번째 복사가 생긴다.&lt;/li&gt;&lt;li&gt;요청된 양만큼 읽기 버퍼에서 사용자 버퍼로 데이터가 복사되고, read() 호출은 읽은 데이터를 반환한다. 이때 또 한번 컨텍스트 전환이 생기며 데이터는 사용자 영역 버퍼에 저장된다. 두번째 복사.&lt;/li&gt;&lt;li&gt;다시 send() 소켓 호출은 사용자 모드에서 커널 모드로 컨텍스트를 전환시키고, 커널 영역 버퍼로 데이터를 복사하는 세번째 복사가 생긴다.&lt;/li&gt;&lt;li&gt;완료된 send() 시스템 호출은 값을 반환하고 네번째 컨텍스트 전환이 생긴다. 그리고 DMA 엔진이 커널 영역 버퍼에서 프로토콜 엔진으로 데이터를 복사한다. 네번째 복사.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;사용자 버퍼에 바로 데이터를 쓰지 않고 &quot;Intermediate kernel buffer&quot;를 사용하는것이 비효율적인것 처럼 보이지만 성능에 더 좋다고 한다. 물론, 데이터를 읽는 쪽에서 커널 버퍼가 &quot;readahead cache&quot;로 동작 하려면 커널 버퍼 크기보다 적은 데이터를 요청해야 하고, 데이터를 쓰는(write) 쪽에서는 비동기로 작업을 완료해야 한다. 커널 버퍼 크기보다 큰 데이터가 요청되면 성능에 병목이 생긴다.&lt;br /&gt;Zero Copy는 이런 불필요한 데이터 복사가 없다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Zero Copy 데이터 전송&lt;/h3&gt;&lt;br /&gt;transferTo() 메소드를 사용하면 위 2~3번에 해당하는 데이터 복사가 생기지 않는다.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;Data copy with transferTo()&quot; src=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/figure3.gif&quot; style=&quot;background-color: white; border: 0px; font-family: Arial, sans-serif; font-size: 12.8px; line-height: 15.36px; margin: 0px auto; outline: 0px; padding: 0px; vertical-align: baseline;&quot; width=&quot;350&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;그림3. transferTo() 메소드 컨텍스트 전환&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;Context switching when using transferTo()&quot; src=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/figure4.gif&quot; style=&quot;background-color: white; border: 0px; font-family: Arial, sans-serif; font-size: 12.8px; line-height: 15.36px; margin: 0px auto; outline: 0px; padding: 0px; vertical-align: baseline;&quot; width=&quot;403&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;그림4. transferTo() 메소드 컨텍스트 전환&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;transferTo() 메소드는 DMA 엔진을 통해 읽기 버퍼에 파일 내용을 복사한다. 그러면 데이터는 출력될 소켓과 관련된 커널 버퍼에 복사된다. 복사가 두번 생긴다.&lt;/li&gt;&lt;li&gt;DMA 엔진이 데이터를 커널 소켓 버퍼에서 프로토콜 엔진으로 복사하면 세번째 복사가 생긴다.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;컨텍스트 전환이 4회에서 2회로 줄고 데이터 복사도 4회에서 3회로 줄지만 Zero Copy는 아니다. &amp;nbsp;&lt;u&gt;리눅스 커널 2.4&lt;/u&gt; 이후 커널 파일 디스크립터가 수정되어 네트워크 카드가 &lt;u&gt;gather operation&lt;/u&gt;을 지원하면 커널이 중복으로 데이터를 처리하는 것을 줄일 수 있다.&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;transferTo() 메소드는 DMA 엔진이 파일 내용을 커널 버퍼로 복사 되게 한다.&lt;/li&gt;&lt;li&gt;소켓 버퍼에 데이터가 복사되지 않고 데이터의 위치와 길이등이 기술된 파일 디스크립터가 소켓 버퍼에 추가된다. 그리고 DMA 엔진은 커널 버퍼에서 프로토콜 버퍼로 데이터를 직접 전달한다.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;Data copies when transferTo() and gather operations are used&quot; src=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/figure5.gif&quot; style=&quot;background-color: white; border: 0px; font-family: Arial, sans-serif; font-size: 12.8px; line-height: 15.36px; margin: 0px auto; outline: 0px; padding: 0px; vertical-align: baseline;&quot; width=&quot;350&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;transferTo() 와 gather operation이 사용될때 데이터 복사&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;/div&gt;&lt;h4&gt;파일서버 구축&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src=&quot;https://gist.github.com/freestrings/ebb48f5ef9ffa628ae6a2b8f076e7403.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;성능 비교&lt;/h4&gt;&lt;/div&gt;&lt;br /&gt;리눅스 커널 버전이 2.6 인 시스템에서 Traditional vs TransferTo 비교. 대략 &lt;u&gt;65% 시간이 줄어듬&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;ibm-data-table&quot; style=&quot;background-color: white; border-bottom-color: rgb(204, 204, 204); border-bottom-style: solid; border-bottom-width: 1px; border-collapse: collapse; border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; color: black; font-family: Arial, sans-serif; font-size: 12.8px; line-height: 15.36px; margin: 0px 0px 20px; outline: 0px; padding: 0px; vertical-align: baseline; width: 100%px;&quot; summary=&quot;Performance comparison&quot;&gt;&lt;thead style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot; xmlns:dw=&quot;http://www.ibm.com/developerWorks/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&lt;tr style=&quot;border-style: solid none none; border-top-color: rgb(221, 221, 221); border-width: 1px 0px 0px; font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;th scope=&quot;col&quot; style=&quot;border-style: solid none none; border-top-color: rgb(221, 221, 221); border-width: 1px 0px 0px; font-size: inherit; margin: 0px; outline: 0px; padding: 10px 5px 10px 3px; vertical-align: top;&quot; width=&quot;33%&quot;&gt;File size&lt;/th&gt;&lt;th scope=&quot;col&quot; style=&quot;border-style: solid none none; border-top-color: rgb(221, 221, 221); border-width: 1px 0px 0px; font-size: inherit; margin: 0px; outline: 0px; padding: 10px 5px 10px 3px; vertical-align: top;&quot; width=&quot;33%&quot;&gt;Normal file transfer (ms)&lt;/th&gt;&lt;th scope=&quot;col&quot; style=&quot;border-style: solid none none; border-top-color: rgb(221, 221, 221); border-width: 1px 0px 0px; font-size: inherit; margin: 0px; outline: 0px; padding: 10px 5px 10px 3px; vertical-align: top;&quot; width=&quot;33%&quot;&gt;transferTo (ms)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot; xmlns:dw=&quot;http://www.ibm.com/developerWorks/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(153, 153, 153); border-top-style: solid; border-top-width: 2px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;7MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(153, 153, 153); border-top-style: solid; border-top-width: 2px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;156&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(153, 153, 153); border-top-style: solid; border-top-width: 2px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;45&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;21MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;337&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;128&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;63MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;843&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;387&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;98MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;1320&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;617&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;200MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;2124&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;1150&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;350MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;3631&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;1762&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;700MB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;13498&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;4422&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;font-size: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;border-left-style: none; border-left-width: 0px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 10px 5px 3px; vertical-align: top;&quot;&gt;1GB&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;18399&lt;/td&gt;&lt;td style=&quot;border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 3px; border-right-style: none; border-right-width: 0px; border-top-color: rgb(221, 221, 221); border-top-style: solid; border-top-width: 1px; color: #555555; font-size: inherit; margin: 0px; outline: 0px; padding: 8px 5px 5px 3px; vertical-align: top;&quot;&gt;8537&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/436204984618552151/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/04/zero-copy.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/436204984618552151'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/436204984618552151'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/04/zero-copy.html' title='자바에서 Zero Copy를 이용한 데이터 전송'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-1106975386941552160</id><published>2016-02-04T16:37:00.000+09:00</published><updated>2017-03-26T23:45:51.697+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cms"/><category scheme="http://www.blogger.com/atom/ns#" term="g1"/><category scheme="http://www.blogger.com/atom/ns#" term="garbage-collection"/><category scheme="http://www.blogger.com/atom/ns#" term="garbage-collector"/><category scheme="http://www.blogger.com/atom/ns#" term="garbagecollection"/><category scheme="http://www.blogger.com/atom/ns#" term="garbagecollector"/><category scheme="http://www.blogger.com/atom/ns#" term="java"/><category scheme="http://www.blogger.com/atom/ns#" term="jvm"/><category scheme="http://www.blogger.com/atom/ns#" term="serial-collector"/><category scheme="http://www.blogger.com/atom/ns#" term="serialcollector"/><category scheme="http://www.blogger.com/atom/ns#" term="throughput-collector"/><category scheme="http://www.blogger.com/atom/ns#" term="throughputcollector"/><title type='text'>JVM Garbage Collector 종류와 동작방식</title><content type='html'>시스템이 운영되다 보면 성능개선을 해야 할 때가 생긴다. 새로 코드를 구현하는 방법이 제일 좋겠지만 가비지 컬렉터(Garbage Collector)를 튜닝 하는 것도 성능개선에 많은 도움이 된다. 튜닝을 경험해볼 일은 없어보이지만 평소 모호하게 알고있었던 내용이기도 해서 JVM가비지 컬렉터 종류와 어떤 일을 하는지 정도를 정리해 둠.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;GC 개요&lt;/h3&gt;&lt;br /&gt;GC는 더이상 사용되지 않는 객체를 찾는 작업과 메모리에서 제거하는작업으로 나뉘는데, JVM은 더는 참조되지 않는객체를 찾아 메모리에서 제거하는 작업을 할 때 힙(heap)을 주기적으로 검색한다. 그런 후 GC 대상이 되는 객체가 차지했던 메모리를 다른 객체가 쓸 수 있게 메모리에서 비우게 된다. 이때 Compacting이라는 작업도 함께 이루어진다. Compacting은 메모리 파편화(memory fragmentation)가 생기지 않게 남은 공간을 잘 합쳐두는것을 말한다.&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-KCjJ4CcxpTQ/VrLzQMNGwFI/AAAAAAAAAkE/3buTsoKTOQE/s1600/compacting.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;230&quot; src=&quot;https://3.bp.blogspot.com/-KCjJ4CcxpTQ/VrLzQMNGwFI/AAAAAAAAAkE/3buTsoKTOQE/s400/compacting.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot; , sans-serif; font-size: small; text-align: start;&quot;&gt;Compacting (출처: dynatrace.com)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;span style=&quot;font-family: &amp;quot;verdana&amp;quot; , sans-serif;&quot;&gt;Stop-the-world&lt;/span&gt;&lt;/h3&gt;자바는 멀티 쓰레드 환경인데 쓰레드는 어플리케이션에서만 쓰는것이 아니라 GC도 특정 쓰레드에서 실행이 된다. GC 쓰레드가 동작할 때는 모든 애플리케이션 쓰레드는 동작을 멈춘다. 때문에 Full GC가 생기면 시스템이 멈추게 된다. 그렇기 때문에 GC가 동작될때 애플리케이션 쓰레드가 멈추는 시간을 최소화하는 것이 GC 튜닝의 기본이라고 한다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Young Generation과 Old Generation&lt;/h3&gt;가비지 컬렉터는 Young Generation과 Old Generation으로 나눠서 작업한다.(Young Generation은 또 edan영역과 survivor영역으로 나뉜다) 이렇게 나누는 이유는 GC 시간을 최소화 하는것과 관련이 있다. 처음에 객체는 Young Generation에 할당된다. Young Generation이 가득차면 가비지 컬렉터가 애플리케이션 쓰레드를 멈추고 사용되지 않는 객체를 찾아 Young generation에서 제거한다. 이 과정을 Minor GC라 한다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; 자바 코딩을 할 때 일반적으로 아래와 같이 객체를 많이 생성하게 된다.&lt;!-- HTML generated using hilite.me --&gt; &lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;Actor&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; actors &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;query&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;select first_name, last_name from t_actor&quot;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; RowMapper&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;Actor&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;&amp;gt;()&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; Actor &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0066bb; font-weight: bold;&quot;&gt;mapRow&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;ResultSet rs&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; rowNum&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; SQLException &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;                Actor actor &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; Actor&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;();&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;                actor&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;setFirstName&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;rs&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;getString&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;));&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;                actor&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;setLastName&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;rs&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;getString&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;last_name&quot;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;));&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;                &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; actor&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Gabage Collector는 Generation을 구분해서 동작하도록 디자인 되었다. 그래서 위처럼 임시객체가 많이 생성되는 상황에서 이런 디자인은 이점을 가질 수 있다. Generation도 힙(heap)의 한 부분이기 때문에 영역이 구분되면 GC가 힙 전체를 대상으로 실행되지 않아서 GC 시간이 짧기 때문이다. 그리고 객체는 Young Generation에서 edan이나 Old Generation으로 옮겨지게 된다. 옮기는 과정에서 Young Generation이 자동으로 정렬(compaction)되어 메모리 단편화가 해결된다.&lt;br /&gt;&lt;br /&gt;그렇지만 Old Generation에서 GC는 다르다. Old Generation에서 쓰이지 않는 객체를 찾아서 메모리에서 제거하고 힙을 정렬(compact)하는 절차를 Full GC라고 한다. Full GC때는 애플리케이션 쓰레드가 멈추는 시간도 길다. 그래서 Concurrent 컬렉터인 CMS와 G1 컬렉터는 애플리케이션 쓰레드가 동작중에 사용되지 않는 객체를 찾는다. 그리고 Concurrent 컬렉터는 Old Generation을 정렬(compact)하는 방법도 다르며, CMS나 G1 컬렉터를 쓰면 애플리케이션 쓰레드가 멈추는 시간을 최소화 할 수 있다. 그렇지만 CPU 사용률은 높다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt; GC 알고리즘&lt;/h3&gt;&lt;h4&gt;Serial Garbage Collector&lt;/h4&gt;32-bit Windows나 싱글 프로세스 머신에서 기본 컬렉터로 사용되며 Full GC 할 때 Old Generation 영역 전체를 정렬(compaction)한다. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Throughput Collector&lt;/h3&gt;서버머신로 사용되는 multi-CPU 유닉스 머신이나, 64-bit JVM 머신에 사용되는 기본 컬렉터다. Young Generation과 Old Generation 모두 멀티 쓰레드가 사용되며 JDK 7u4이후에는 기본동작된다. 그리고 멀티 쓰레드를 사용하기 때문에 Parallel Collector 라 부른다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; 이 컬렉터는 Minor GC와 Full GC 모두 애플리케이션 쓰레드를 멈추며, Full GC 때는 Old Generation 영역을 전체 정렬(compaction)한다. 그리고 대부분의 상황에 사용되는 기본 컬렉터이기 때문에 기본으로 활성화되어있다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;CMS 컬렉터&lt;/h3&gt;CMS 컬렉터는 Serial/Throughput 컬렉터가 Full GC 때 Long Pause 되는걸 막기 위해 디자인 되었다. Full GC 동안 애플리케이션 쓰레드를 멈추는 대신 하나 이상의 백그라운드 쓰레드가 주기적으로 Old Generation을 스캔하고 사용되지 않는 객체를 제거한다. 그리고 동일하게 Minor GC 때 애플리케이션 쓰레드 전체를 멈춘다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; 그렇지만 CPU 소모량이 많고, 백그라운드 쓰레드는 정렬(compaction)을 하지 못하기 때문에 메모리 단편화가 생긴다. 그리고 CMS 백그라운드 쓰레드가 작업을 완료할 만큼 충분한 CPU 얻지 못하거나 힙에 메모리 단편화가 많으면 CMS는 Serial Collector로 동작한다. 즉 싱글 쓰레드를 사용해 전체 애플리케이션 쓰레드를 멈추고 Old Generation 영역을 정리한다. 그런 후 작업이 끝나면 다시 CMS 컬렉터로 동작한다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;G1(Garbege First) 컬렉터&lt;/h3&gt;4GB가 넘는 큰 힙을 처리하기 위해 디자인 된 컬렉터다. 동일하게 Pause를 최소화 하는 Minimal Pause 이며, 힙을 여러 영역(region)으로 나누어 GC한다. &lt;br /&gt;&lt;br /&gt; Young Generation을 여러개로 영역으로 나누고 다른 컬렉터와 동일하게 애플리케이션 쓰레드를 멈추고 GC한다.&lt;br /&gt;&lt;br /&gt; Old Generation은 백그라운드 쓰레드로 애플리케이션 쓰레드를 멈추지 않고 GC하며 GC하는 방식은 나누어진 영역중 하나를 다른 영역으로 복사하는 방식을 사용한다. 이 과정에서 힙이 정렬(compaction)되어 파편화가 거의 없다. 그래서 G1은 Concurrent 컬렉터라 부른다.&lt;br /&gt;&lt;br /&gt; CMS처럼 여러 백그라운드 쓰레드가 애플리케이션 쓰레드와 동시에 동작될 수 있게 CPU cycle이 가용해야 한다. 기본 컬렉터가 아니기 때문에 별도 -XX:+UseG1GC옵션으로 실행 시켜야 한다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;CMS vs G1&lt;/h3&gt;CMS알고리즘은 G1보다 간단하므로 더 빠를 수 있지만 힙크기가 4GB 이상될 때 G1이 더 나은 성능을 보인다. CMS의 백그라운드 쓰레드는 객체를 메모리에서 해제하기 위해 전체 Old Generation 영역을 스캔하므로 힙크기에 영향을 받기 때문이다. 그리고 CMS는 Concurrent 모드가 되지 않으면 싱글 쓰레드로 Full GC하는 단점도 있다. G1도 역시 Concurrent 모드가 되지 않을 수 있지만, 영역이 나뉘어져 있고 여러 쓰레드가 영역별로 작업을 분담할 수 있으므로 Concurrent 모드가 실패하는 경우는 많지 않다. 두가지 알고리즘 모두 Concurrent 모드를 유지하는게 중요한 이슈가 될 수 있다.&lt;br /&gt;&lt;br /&gt; 덧붙이면 G1은 최신 알고리즘이기도 하고 Java8 에서는 성능에 이점이 많다고 한다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;결론&lt;/h3&gt;GC 알고리즘은 애플리케이션의 목적에 따라 선택이 되어야 한다. 가령 Serial Collector는 적은 메모리를 사용하는 애플리케이션에 적합할 텐데, 힙이 작기 때문에 Throughput Collector와 같이 병렬 GC나 백그라운드로 GC하는 CMS나 G1은 도움되지 않는다. 대부분의 어프리케이션은 Throughput Collector나 Concurrent Collector가 적합하며 성능 목표나 상황에 맞게 선택되어야 한다. CMS와 G1의 비교에서 알 수 있듯이 힙영역이 클수록 G1이 나은 선택이 될 수 있다.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/1106975386941552160/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/02/jvm-garbage-collector.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1106975386941552160'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/1106975386941552160'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/02/jvm-garbage-collector.html' title='JVM Garbage Collector 종류와 동작방식'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-KCjJ4CcxpTQ/VrLzQMNGwFI/AAAAAAAAAkE/3buTsoKTOQE/s72-c/compacting.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-266007245768918327</id><published>2016-01-31T17:13:00.002+09:00</published><updated>2016-02-01T11:14:24.514+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="spring-cloud"/><category scheme="http://www.blogger.com/atom/ns#" term="spring-cloud-bus"/><category scheme="http://www.blogger.com/atom/ns#" term="spring-cloud-config"/><category scheme="http://www.blogger.com/atom/ns#" term="spring-cloud-starter-bus-redis"/><category scheme="http://www.blogger.com/atom/ns#" term="springcloud"/><category scheme="http://www.blogger.com/atom/ns#" term="springcloudbus"/><category scheme="http://www.blogger.com/atom/ns#" term="springcloudconfig"/><category scheme="http://www.blogger.com/atom/ns#" term="springcloudstarterbusredis"/><title type='text'>Spring Cloud Config</title><content type='html'>&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: normal;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;Spring Cloud Config는 분산된 환경에서 서버간 환경설정을 공유하는 방법을 제공하고 있다. 유사한 솔루션들이 있지만 Git과 연동해서 사용할 수 있고, 서버 재시작 없이 설정을 적용하는 방법을 제공하고 있다. 기본적인 컨셉과 사용법을 정리해 둔다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: normal;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;목차&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;1. Spring Cloud Config Server&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;1. 요청 URL 형식과 응답포멧&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 25.1429px;&quot;&gt;&amp;nbsp; &amp;nbsp; 2. Plain text 지원과 Placeholder&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;   &lt;/span&gt;3. Spring Cloud Config Server 설정&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;4. 동작확인&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;2. Spring Cloud Config Client&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;1. Spring Cloud Config Client 설정&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;2.환경변수 확인&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;3. 설정변경과 Context Refresh&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;3. 여러서버에 설정 동기화 하기&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;1. spring-cloud-starter-bus-redis&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;2. Spring Cloud Bus 설정&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;3. 설정파일 수정과 설정파일 동기화&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;4. 결론&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;5. 예제파일&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;6. 참고&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: large;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;b&gt;&lt;u&gt;1. Spring Cloud Config Server&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: large;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&quot;Spring Cloud Config Server&quot;는 설정을 읽어 갈 수 있는 몇 가지 endpoint를 제공하고 있다. Spring framework만 사용한다면 &quot;Spring Cloud Config Server&quot;와 &quot;Spring Cloud Config Client&quot;간 통신 방법을 알 필요가 없겠지만, Node.js같은 이기종 플랫폼에서 사용하려면 요청 URL 형식과 응답 포맷을 알아 둘 필요가 있다. 그리고 yml이나 properties가 아닌 설정파일도 읽을 수 있어서 요청 방법과 응답 형식에 대해서도 알아본다.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25.1429px;&quot;&gt;&amp;nbsp; &amp;gt; 부가적으로 암복호화 기능도 있다. 예를 들어 설정파일에 패스워드를 넣어둘 때 Config Server에서 암호화해두고 클라이언트에서 복호화해서 사용할 수 있는데, spring security와 JCE가 필요하고 &quot;Spring Cloud Config&quot; 기능을 이해하는 수준에서는 필요하지 않아서 제외했다.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;b&gt;&lt;u&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;1.1&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;요청 URL 형식과 응답포멧&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;서버 실행 전에 요청형식과 결과부터 살펴보자.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;line-height: 16.25px;&quot;&gt;curl -s http://localhost:8888/foo/default \ &lt;/span&gt;&lt;span style=&quot;line-height: 16.25px;&quot;&gt;// a)&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;line-height: 16.25px;&quot;&gt;| python -mjson.tool &lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;{&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;label&quot;&lt;/span&gt;: &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;,&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;profiles&quot;&lt;/span&gt;: [&lt;br /&gt;        &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;br /&gt;    ],&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;propertySources&quot;&lt;/span&gt;: [ &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;b)&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            &lt;span style=&quot;color: #007700;&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;file:***/config-repo/foo.yml&quot;&lt;/span&gt;, &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;c)&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #007700;&quot;&gt;&quot;source&quot;&lt;/span&gt;: { &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;d)&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #007700;&quot;&gt;&quot;foo.value&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;FOO-value&quot;&lt;/span&gt;,&lt;br /&gt;                &lt;span style=&quot;color: #007700;&quot;&gt;&quot;nginx.server.name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;foo.fs.com&quot;&lt;/span&gt;&lt;br /&gt;            }&lt;br /&gt;        },&lt;br /&gt;        {&lt;br /&gt;            &lt;span style=&quot;color: #007700;&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;file:***/config-repo/application.yml&quot;&lt;/span&gt;,&lt;br /&gt;            &lt;span style=&quot;color: #007700;&quot;&gt;&quot;source&quot;&lt;/span&gt;: {&lt;br /&gt;                &lt;span style=&quot;color: #007700;&quot;&gt;&quot;foo.value&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;APP-value&quot;&lt;/span&gt;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    ],&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;0b75e529da8289ec97336ccdc71c0cbe24996123&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;e)&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a) 리소스를 읽는 형식이 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&amp;nbsp; &amp;nbsp; - /{application}/{profile}[/{label}]&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&amp;nbsp; &amp;nbsp; - /{application}-{profile}.yml&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&amp;nbsp; &amp;nbsp; - /{label}/{application}-{profile}.properties&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&amp;nbsp; &amp;nbsp; - /{application}-{profile}.properties&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&amp;nbsp; &amp;nbsp; - /{label}/{application}-{profile}.yml&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;{application} : 클라이언트bootstrap.yml 에 spring.application.name&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;{profile} : 클라이언트 spring.active.profiles&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;{label} : 특정 버전으로 명시된 설정파일들의 묶음을 의미. Git에서는 브랜치이름, 커밋ID 또는 태그값이 된다. 필수 파라미터는 아니다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;그래서 예제는 foo이름을 가진 클라이언트 애플리케이션의 기본 설정을 읽겠다는 의미가 된다.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;b) &quot;propertySources&quot; 여러 propertySource를 리턴한다&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;Spring Boot은 기본 Profile이 아닐 경우 기본 설정값도 참고되기 때문에 요청된 Profile이 기본 Profile이 아니면 기본 Profile도 같이 반환된다. Profile에 없는 값은 부모(기본 Profile)에서 값을 찾기 때문이다.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;그리고 /foo/default,development 과 /foo/development 의 결과값은 같다 - 멀티 프로파일은 콤마(,)로 구분 해서 요청 할 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;c) 설정파일 URL&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;예제는 프로토콜이 file이다. 실제 서비스에서는 정책에 따라 Git 저장소를 지정하거나 예제처럼 File Protocol을 사용할 수 있다. (File Protocol을 사용할 경우라 할지라도 지정된 디렉터리는 Git commit을 한번 이상 실행된 디렉터리 이어야 한다. 단 native Profile일 경우는 다르다)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;d) “source&quot;는 설정파일 전체 내용&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;yml 파일 포맷이지만 dot(.)으로 구분된 Key로 표현된 JSON을 출력한다. Placeholder가 있으면 치환된 값으로 표기된다. (1.2에서 설명)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;e) git 커밋 ID&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;1. 2 Plain text 지원과 Placeholder&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;div style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;yml이나 properties 포맷 이외에 파일들은 plain text로 읽을 수 있다. 예를 들어 &quot;nginx.conf&quot; 같은 설정은 /{application}/{profile}/{label}/{path} endpoint를 사용할 수 있다.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;nginx.conf 파일을 읽어보면 아래와 같이 출력된다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl http&lt;span style=&quot;color: #333333;&quot;&gt;://&lt;/span&gt;localhost&lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt;8888&lt;span style=&quot;color: #333333;&quot;&gt;/&lt;/span&gt;foo&lt;span style=&quot;color: #333333;&quot;&gt;/&lt;/span&gt;default&lt;span style=&quot;color: #333333;&quot;&gt;/&lt;/span&gt;master&lt;span style=&quot;color: #333333;&quot;&gt;/&lt;/span&gt;nginx.conf&lt;br /&gt;server {  &lt;br /&gt;    listen              80;&lt;br /&gt;    server_name         foo.fs.com;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;그렇지만 실제 nginx.conf 파일은 출력된 결과와는 다르다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;server {  &lt;br /&gt;    listen              80;&lt;br /&gt;    server_name         ${nginx.server.name};&lt;br /&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span data-mce-style=&quot;font-family: Calibri;&quot; lang=&quot;en-US&quot; style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;; line-height: 23.5714px;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 23.5714px;&quot;&gt;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;일반적으로 nginx.conf 파일은 설정 거의 같지만 애플리케이션과 애플리케이션 Profile별로 일부 값이 다르다. 이럴 때 nginx.conf에 ${KEY_NAME} 형식으로 Placeholder를 기술해 주면 치환된 값을 받을 수 있다.&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;1.3 Spring Cloud Config Server 설정&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;이제 서버측 코드를 작성해 보자.&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;build.gradle&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;buildscript &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ext &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        springBootVersion &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;1.3.2.RELEASE&#39;&lt;/span&gt;&lt;br /&gt;        sprintCloudConfigStarterVersion&amp;nbsp;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;          =&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;Brixton.BUILD-SNAPSHOT&#39;&lt;/span&gt; &lt;span style=&quot;color: #888888;&quot;&gt;// a)&lt;/span&gt;&lt;br /&gt;        springCloudBusVersion &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;1.1.0.M4&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        gradleDependencyManagmentVersion&amp;nbsp;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;          =&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;0.5.2.RELEASE&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    repositories &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        mavenCentral&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    dependencies &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      classpath&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0; line-height: 125%;&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0; line-height: 125%;&quot;&gt;${springBootVersion}&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333; line-height: 125%;&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;      dependencies &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        classpath(&lt;span style=&quot;background-color: #fff0f0; line-height: 125%;&quot;&gt;&quot;io.spring.gradle:dependency-management-plugin:${gradleDependencyManagmentVersion}&quot;)&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;group &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;fs.playground&#39;&lt;/span&gt;&lt;br /&gt;version &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;1.0-SNAPSHOT&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;apply &lt;span style=&quot;color: #997700; font-weight: bold;&quot;&gt;plugin:&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;spring-boot&#39;&lt;/span&gt;&lt;br /&gt;apply &lt;span style=&quot;color: #997700; font-weight: bold;&quot;&gt;plugin:&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;io.spring.dependency-management&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;repositories &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    mavenCentral&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    maven &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        url &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;http://repo.springsource.org/snapshot&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    maven &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        url &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;http://repo.springsource.org/milestone&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;dependencyManagement &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    imports &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        mavenBom&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-starter-parent:${sprintCloudConfigStarterVersion}&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    imports &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        mavenBom&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-bus:${springCloudBusVersion}&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;dependencies &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; compile&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-config-server&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;// compile(&quot;org.springframework.cloud:spring-cloud-config-monitor&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;// compile(&quot;org.springframework.cloud:spring-cloud-starter-bus-redis&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a) 버전은 Brixton.BUILD-SNAPSHOT을 사용한다 - 그냥 현재 최신 버전을 사용했다는 의미다.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;-----&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;bootstrap.yml // a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;line-height: 125%;&quot;&gt;info:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;  component: Config Server&lt;br /&gt;spring:&lt;br /&gt;  application:&lt;br /&gt;    name: configserver&lt;br /&gt;  cloud:&lt;br /&gt;    config:&lt;br /&gt;      server:&lt;br /&gt;        git:&lt;br /&gt;          uri: file:${CONF_PATH} // b)&lt;br /&gt;server:&lt;br /&gt;  port: 8888 // c)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 15px; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;a) bootstrap.yml&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;Spring Cloud는 크게 &quot;Spring Cloud Context&quot;와 &quot;Spring Cloud Commons&quot;로 구성된다. &quot;Spring Cloud Context&quot;는 클라우드 애플리케이션의 ApplicaitonContext에서 bootstrap context, encryption, refresh scope, environment endpoint와 같은 서비스를 제공하는 라이브러리이고, &quot;Spring Cloud Commons&quot;는 &quot;Spring Cloud Nexflix&quot;와 &quot;Spring Cloud Consul&quot;과 같이 다른(여러) Spring Cloud 구현에 사용되는 공통 라이브러리를 말한다.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;Spring Cloud 애플리케이션은 부모 context에 해당하는 bootstrap context를 생성하는데 bootstrap.yml이 bootstrap context에 사용되는 파일이다. 참조되는 시점을 제외하면 application.yml 파일과 같다. 그래서 Profile별로 구분될 수도 있다.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;b) 저장소 URI&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;로컬 디렉터리를 저장소를 사용 하면 변경된 내용을 바로 적용해 볼 수 있으므로 예제는 편하게 &quot;File Protocol&quot;로 사용한다. (Github에 설정파일을 두고 push 하면서 테스트해도 무방하다)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;c) 서버포트&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;-----&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;ConfigServer.java&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.cloud.config.server.EnableConfigServer&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@EnableConfigServer // a)&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #bb0066; font-weight: bold; line-height: 125%;&quot;&gt;ConfigServer&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333399; font-weight: bold; line-height: 125%;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0066bb; font-weight: bold; line-height: 125%;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; args&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;        SpringApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc; line-height: 125%;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;Application&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc; line-height: 125%;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; args&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a) @EnableConfigServer 어노테이션만 등록해 주면 된다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;1.4 동작확인&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;예제를 실행 하려면 Gradle이 설치 되어 있어야 한다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;calibri&amp;quot;;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #007020;&quot;&gt;export &lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;CONF_PATH&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;***/config-repo &lt;span style=&quot;color: #333333;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./gradlew bootRun&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;예제는 저장소를 로컬파일(bootstrap.yml-&amp;gt;b 참고)로 사용하고 있어서 환경변수로 CONF_PATH를 넘겨준다. (https://github.com/freestrings/config-repo.git 에서 받은 후 CONF_PATH=/doc/config-repo와 같이 지정하면 된다)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl -s http://localhost:8888/foo/default | python -mjson.tool&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;Git Version 까지 잘 출력된다면 정상적이다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;&lt;u&gt;2. Spring Cloud Config Client&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;이제 Client에서 어떻게 Configuration Server에 설정된 값들을 읽고 변경된 내용을 반영할 수 있는지 살펴보자.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;2.1 Spring Cloud Config Client 설정&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;build.gradle&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;buildscript &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ext &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        springBootVersion &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;1.3.2.RELEASE&#39;&lt;/span&gt;&lt;br /&gt;        sprintCloudConfigStarterVersion &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;Brixton.BUILD-SNAPSHOT&#39;&lt;/span&gt;&lt;br /&gt;        springCloudBusVersion &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;1.1.0.M4&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        gradleDependencyManagmentVersion &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;0.5.2.RELEASE&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    repositories &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        mavenCentral&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    dependencies &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        classpath&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        dependencies &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            classpath &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;io.spring.gradle:dependency-management-plugin:${gradleDependencyManagmentVersion}&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;group &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;fs.playground&#39;&lt;/span&gt;&lt;br /&gt;version &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;1.0-SNAPSHOT&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;apply &lt;span style=&quot;color: #997700; font-weight: bold;&quot;&gt;plugin:&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&#39;spring-boot&#39;&lt;/span&gt;&lt;br /&gt;apply &lt;span style=&quot;color: #997700; font-weight: bold;&quot;&gt;plugin:&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;io.spring.dependency-management&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;repositories &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    mavenCentral&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;    maven &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        url &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;http://repo.springsource.org/snapshot&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    maven &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        url &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;http://repo.springsource.org/milestone&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;dependencyManagement &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    imports &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        mavenBom&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-starter-parent:${sprintCloudConfigStarterVersion}&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    imports &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        mavenBom&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-bus:${springCloudBusVersion}&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;dependencies &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    compile&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-config-client&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;) //&lt;/span&gt;&lt;br /&gt;    compile&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-web&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    compile&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-actuator&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;) // a)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;//    compile(&quot;org.springframework.cloud:spring-cloud-starter-bus-redis&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a) actuator를 사용해야 ApplicationContext Life Cycle에 관련된 /refresh, /restart, /pause, /resume, /start, /stop과 같은 endpoint를 사용할 수 있다.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;-----&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;bootstrap.yml&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;line-height: 23.5714px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;spring:&lt;br /&gt;  application:&lt;br /&gt;    name: foo&lt;br /&gt;  cloud:&lt;br /&gt;    config:&lt;br /&gt;      uri: http://localhost:8888&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&quot;spring.cloud.config.uri&quot;에 &quot;Spring Cloud Config Server&quot; 주소를 기술한다. application.yml에 기술하면 웹서버가 실행될 때 설정을 읽어오지 못한다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;line-height: 23.5714px;&quot;&gt;-----&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;line-height: 23.5714px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;line-height: 23.5714px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;ClientApplication.java&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.cloud.context.config.annotation.RefreshScope&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0e84b5; font-weight: bold; line-height: 125%;&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@RestController&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@RefreshScope // a)&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #bb0066; font-weight: bold; line-height: 125%;&quot;&gt;ClientApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@Value&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0; line-height: 125%;&quot;&gt;&quot;${foo.value}&quot;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;    String name &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0; line-height: 125%;&quot;&gt;&quot;??&quot;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold; line-height: 125%;&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0; line-height: 125%;&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; String &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0066bb; font-weight: bold; line-height: 125%;&quot;&gt;home&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; name&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold; line-height: 125%;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333399; font-weight: bold; line-height: 125%;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0066bb; font-weight: bold; line-height: 125%;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; args&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;        SpringApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc; line-height: 125%;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;ClientApplication&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc; line-height: 125%;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; args&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a) RefreshScope이 아니면 ApplicationContext를 재로딩 하지 못한다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;2.2 환경변수 확인&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-weight: normal; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;background-color: white; line-height: 125%; margin: 0px;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;./gradlew bootRun&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl -s -X GET http://localhost:8080/env | python -mjson.tool&lt;/pre&gt;&lt;/pre&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;{&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;applicationConfig: [classpath:/application.yml]&quot;&lt;/span&gt;: {&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;foo.value&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;DEVELOPMENT-useless&quot;&lt;/span&gt;,&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;spring.profile&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;br /&gt;    },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;applicationConfig: [classpath:/bootstrap.yml]&quot;&lt;/span&gt;: {&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;spring.application.name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;spring.cloud.config.uri&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;http://localhost:8888&quot;&lt;/span&gt;&lt;br /&gt;    },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;configService:file:***/config-repo/application.yml&quot;&lt;/span&gt;:{&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;a)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;foo.value&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;APP-value&quot;&lt;/span&gt;&lt;br /&gt;    },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;configService:file:***/config-repo/foo.yml&quot;&lt;/span&gt;: {&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;//&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;b)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;foo.value&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;FOO-value&quot;&lt;/span&gt;,&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;nginx.server.name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;foo.fs.com&quot;&lt;/span&gt;&lt;br /&gt;    },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;defaultProperties&quot;&lt;/span&gt;: {&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;spring.application.name&quot;&lt;/span&gt;: &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bootstrap&quot;&lt;/span&gt;&lt;br /&gt;    },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;profiles&quot;&lt;/span&gt;: [],&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;server.ports&quot;&lt;/span&gt;: {&lt;br /&gt;        &lt;span style=&quot;color: #007700;&quot;&gt;&quot;local.server.port&quot;&lt;/span&gt;: &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;8080&lt;/span&gt;&lt;br /&gt;    },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;servletContextInitParams&quot;&lt;/span&gt;: {},&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;springCloudClientHostInfo&quot;&lt;/span&gt;: { &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;...&lt;/span&gt; },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;systemEnvironment&quot;&lt;/span&gt;: { &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;...&lt;/span&gt; },&lt;br /&gt;    &lt;span style=&quot;color: #007700;&quot;&gt;&quot;systemProperties&quot;&lt;/span&gt;: { &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;...&lt;/span&gt; }&lt;br /&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a), b) Spring Cloud Config Server를 통해 설정파일을 읽어 왔음을 알 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span data-mce-style=&quot;font-size: 15px;&quot; style=&quot;line-height: 1.57143em;&quot;&gt;&lt;span data-mce-style=&quot;font-family: &#39;Malgun Gothic&#39;;&quot; lang=&quot;ko-KR&quot; style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;br /&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; line-height: 16.25px;&quot;&gt;curl http://localhost:8080                                   &lt;br /&gt;FOO-value&lt;/span&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;컨트롤러에 바인딘됭 foo.value 값도 잘 반영되었음을 알 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #007020;&quot;&gt;export &lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;SPRING_PROFILES_ACTIVE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;development &amp;amp;&amp;amp; ./gradlew bootRun&lt;br /&gt;curl http://localhost:8080                                                      &lt;br /&gt;FOO.DEVELOPMENT-value&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;그리고 프로파일을 바꿔서 실행해 보면 변경된 프로파일로 적용됨었음을 알 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;2.3 설정변경과 Context Refresh&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;이제 설정을 수정하고 재시작 없이 수정된 값을 적용해 보자. 간단히 Spring Cloud Config Server에 지정한 저장소의 설정파일을 변경한 후 refresh 시키면 된다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; color: #007020; line-height: 125%;&quot;&gt;cd&lt;/span&gt;&lt;span style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;background-color: white; line-height: 125%;&quot;&gt; &amp;lt;config_repo&amp;gt;&lt;br /&gt;&lt;br /&gt;vi foo.yml&lt;br /&gt;foo.value: FOO-changed!!&lt;br /&gt;&lt;br /&gt;curl http://localhost:8080&lt;br /&gt;FOO-value // a&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333; line-height: 125%;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;a) 아직 값이 바뀌지 않았다. Scope를 강제로 refresh 하기 전까지는 변경 되지 않는다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;line-height: 23.5714px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl -X POST http://localhost:8080/refesh&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 15px; line-height: 23.5714px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;/refresh 는 어프리케이션 context를 리로딩할 수 있게 HTTP나 JMX로 노출된 endpoint다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;상태를 가진 Bean은 설정이 바뀌면 문제가 될 소지가 있음을 알아야 한다. 가령 풀링된 DataSource URL이 동적으로 바뀐다면 문제가 되기 때문에, Refresh ScopeBean은 Lazy Proxy로 동작해서 사용 될 때 (merthod가 호출될때) 초기화 되는데, Scope는 초깃값을 캐시하고 있다가 다음번 method 호출에 캐시를 비우고 Bean을 다시 초기화 하는 방식이다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;RefreshScope은 모든 Bean을 refresh하는 refreshAll() 메소드와 개별 Bean을 refresh(String)하는 method가 있는 Bean이다. /refresh endpoint로 기능이 노출되어있으며 POST method로 호출 되어야 한다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;-----&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;값을 다시 읽어 보면 바뀐값을 확인 할 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;malgun gothic&amp;quot;;&quot;&gt;&lt;span style=&quot;line-height: 23.5714px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl http://localhost:8080                                   &lt;br /&gt;FOO-value&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;&lt;u&gt;3. 여러서버에 설정 동기화 하기&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;실제 서비스에는 서버 대수가 많아서 서버마다 수동으로 동기화하지 않는다. 물론, 간단한 스크립트를 작성해서 서버마다 /refresh를 호출해 주어도 되지만, 여기서는 spring-cloud-bus로 설정을 동기화 하는 방법에 대해 알아본다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&quot;Spring Cloud Bus&quot;에 관한 글들을 찾아보면 /refresh 요청을 받은 Config Client가 Cloud Bus를 통해 다른 Config Client들에게 이벤트를 전파하는 아키텍쳐이다. 아래 그림이다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #383838; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-CRqcZSAmEI4/VqyeAP_nWiI/AAAAAAAAAjI/I2DA_5qZuP0/s1600/spring-cloud-bus.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;206&quot; src=&quot;http://3.bp.blogspot.com/-CRqcZSAmEI4/VqyeAP_nWiI/AAAAAAAAAjI/I2DA_5qZuP0/s400/spring-cloud-bus.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;그렇지만 저장소에서 설정이 변경되어 발생된 이벤트 처리와 전파는 &quot;Cloud Config Server&quot;에서 처리 하는게 맞기 때문에 아래와 같이 구성했다. (spring-cloud-config Notification 부분이나 관련글을 읽어보면 예제와 마찬가지로 monitor endpoint를 Spring Cloud Server에서 열고 있다.)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #383838; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #383838; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #383838; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-eg01SE4Xs-A/Vq2hGag27TI/AAAAAAAAAj0/7Nlg7WCtYtg/s1600/spring-cloud-bus4.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;175&quot; src=&quot;http://1.bp.blogspot.com/-eg01SE4Xs-A/Vq2hGag27TI/AAAAAAAAAj0/7Nlg7WCtYtg/s400/spring-cloud-bus4.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;spring-cloud-bus는 &quot;Filesystem watcher&quot;를 기본 제공하고 있어 예제에서는 2. Notify changed -&amp;gt; b. Filesystem watcher가 사용된다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;Github이나 Bitbucket에 저장소를 두고 예제를 실행해 볼때는 /monitor endpoint를 WebHook으로 등록해야 하는데, public 도메인 문제가 있어 테스트하기 어렵다면 ngrok을 사용해 외부에서 접근 할 수 있는 도메인을 생성 하면 된다. 예를 들어 https://xxxx.ngrok.com/monitor와 같이 endpoint 등록 할 수 있다.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;b&gt;&lt;u&gt;3.1 spring-cloud-starter-bus-redis&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; line-height: 22px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;현재 spring-cloud-bus는 Redis, RabbitMQ, Kafka 3가지 Message Broker가 지원되고, 예제는 Redis를 사용한다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;Redis가 없다면 설치 후 Redis Monitor를 띄워보자. (예제는 &lt;/span&gt;&lt;a href=&quot;https://www.docker.com/&quot; style=&quot;font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;를 사용했다.)&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; line-height: 22px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;docker run --name redis -p 6379:6379 redis&lt;br /&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;docker exec redis redis-cli monitor&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;OK&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; line-height: 22px;&quot;&gt;&lt;u&gt;3.2 Spring Cloud Bus 설정&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;예제 build.gradle에 주석만 제거하면 된다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;spring-cloud-config-server/build.gradle&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #a9b7c6; font-family: &#39;Source Code Pro&#39;; font-size: 12.8pt;&quot;&gt;dependencies {&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-config-server&quot;&lt;/span&gt;)&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-config-monitor&quot;&lt;/span&gt;)&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-starter-bus-redis&quot;&lt;/span&gt;)&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;spring-cloud-config-client/buid.gradle&lt;/span&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #2b2b2b; color: #a9b7c6; font-family: &#39;Source Code Pro&#39;; font-size: 12.8pt;&quot;&gt;dependencies {&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-config-client&quot;&lt;/span&gt;)&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-web&quot;&lt;/span&gt;)&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-actuator&quot;&lt;/span&gt;)&lt;br /&gt;    compile(&lt;span style=&quot;color: #6a8759;&quot;&gt;&quot;org.springframework.cloud:spring-cloud-starter-bus-redis&quot;&lt;/span&gt;)&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;3.3 설정파일 수정과 설정파일 동기화&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&quot;Spring Cloud Config Server&quot;를 재시작 해 보자. Redis Monitor에 SUBSCRIBE가 하나 등록된다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;*********** &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51258&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;SUBSCRIBE&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&quot;Spring Cloud Config Client&quot;는 여러개를 실행해야 하기 때문에 spring-cloud-config-client를 빌드하고 여러 인스턴스를 띄워보자.&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;cd spring-cloud-config-client&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;./gradlew build&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;cd build/libs&lt;br /&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;java -jar spring-cloud-config-client-1.0-SNAPSHOT.jar --server.port&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;9001&lt;br /&gt;java -jar spring-cloud-config-client-1.0-SNAPSHOT.jar --server.port&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;9002&lt;br /&gt;java -jar spring-cloud-config-client-1.0-SNAPSHOT.jar --server.port&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;9003&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;서버가 정상적으로 실행 되면 Redis Monitor에 SUBSCRIBE가 역시 하나씩 등록된다.&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;/div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;*********** &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51258&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;SUBSCRIBE&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt;&lt;br /&gt;*********** &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51258&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;SUBSCRIBE&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt;&lt;br /&gt;*********** &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51258&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;SUBSCRIBE&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;각 서버에 foo 값이 정상적으로 로딩 되었는지 확인해 보자. (위에서 FOO-changed로 변경했었다.)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl -s -X GET http://localhost:9001&lt;br /&gt;FOO-changed!!&lt;br /&gt;curl -s -X GET http://localhost:9002&lt;br /&gt;FOO-changed!!&lt;br /&gt;curl -s -X GET http://localhost:9003&lt;br /&gt;FOO-changed!!&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;이제 에디터에서 foo.yml에 foo.value를 다른값으로 수정해 보면, 몇 초 후&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;Redis Monitor에 PUBLISH 명령어가 출력되는걸 확인 할 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;************ &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51429&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;PUBLISH&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt; ...&lt;br /&gt;************ &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51429&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;PUBLISH&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt; ...&lt;br /&gt;************ &lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;0 172.17.0.1:51429&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;PUBLISH&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;topic.springCloudBus&quot;&lt;/span&gt; ...&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;그리고 각 웹서버에 foo 값을 조회해 보면 변경된 값으로 출력되는 것을 확인할 수 있다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/div&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-image-outset: initial; border-image-repeat: initial; border-image-slice: initial; border-image-source: initial; border-image-width: initial; border: solid gray; color: #383838; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;curl http://localhost:9001&lt;br /&gt;FOO-redis-pubsub!!&lt;br /&gt;curl http://localhost:9002&lt;br /&gt;FOO-redis-pubsub!!&lt;br /&gt;curl http://localhost:9003&lt;br /&gt;FOO-redis-pubsub!!&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: large;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;4. 결론&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;Git 저장소를 벡엔드로 사용할 수 있기 때문에 설정파일의 이력관리나 애플리케이션별로 각자 브랜치 및 태그와 연동해서 운영 할 수 있는 점은 강점으로 생각한다. Spring Cloud Server 클러스터를 구성이나 refresh될 때 Block Time은 고려 되어야 할 문제로 보인다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: large;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;5. 예제코드&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;- &lt;a href=&quot;https://github.com/freestrings/config-repo&quot;&gt;https://github.com/freestrings/config-repo&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;- &lt;a href=&quot;https://github.com/freestrings/spring-cloud-config-test&quot;&gt;https://github.com/freestrings/spring-cloud-config-test&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: large;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;b&gt;&lt;u&gt;6. 참고&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;- &lt;a href=&quot;http://projects.spring.io/spring-cloud/spring-cloud.html&quot;&gt;http://projects.spring.io/spring-cloud/spring-cloud.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;- &lt;a href=&quot;http://www.javaworld.com/article/2927920/cloud-computing/build-self-healing-distributed-systems-with-spring-cloud.html&quot;&gt;http://www.javaworld.com/article/2927920/cloud-computing/build-self-healing-distributed-systems-with-spring-cloud.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 22px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;color: black;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;- &lt;a href=&quot;http://spencer.gibb.us/blog/2015/09/24/spring-cloud-config-push-notifications/&quot;&gt;http://spencer.gibb.us/blog/2015/09/24/spring-cloud-config-push-notifications/&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838;&quot;&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/266007245768918327/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/01/spring-cloud-config.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/266007245768918327'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/266007245768918327'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/01/spring-cloud-config.html' title='Spring Cloud Config'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-CRqcZSAmEI4/VqyeAP_nWiI/AAAAAAAAAjI/I2DA_5qZuP0/s72-c/spring-cloud-bus.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-5538959764076805207</id><published>2016-01-12T12:40:00.001+09:00</published><updated>2017-03-26T23:42:19.732+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="enterprise-pattern"/><category scheme="http://www.blogger.com/atom/ns#" term="microservices"/><category scheme="http://www.blogger.com/atom/ns#" term="msa"/><category scheme="http://www.blogger.com/atom/ns#" term="pact"/><category scheme="http://www.blogger.com/atom/ns#" term="pacto"/><category scheme="http://www.blogger.com/atom/ns#" term="share-as-little-as-possible"/><category scheme="http://www.blogger.com/atom/ns#" term="share-as-much-as-possible"/><category scheme="http://www.blogger.com/atom/ns#" term="soa"/><title type='text'>마이크로서비스와 SOA 비교</title><content type='html'>근래 마이크로서비스에 관심이 생겨 읽어본 글. 찾은 글 중에선 마이크로서비스와 SOA에 관해 전반적으로 정리가 잘된 거 같아서 요약해 두기로 했다. 내용이 적지는 않아서 키워드 위주로 정리했지만 역시 한눈에 들어오지 않음. #딴지금지 #지적환영&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;원글은 https://www.nginx.com/microservices-soa/ 에서 pdf로 배포하고 있다.&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;목차&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The World of Service-Based Architectures&amp;nbsp;&lt;/li&gt;&lt;li&gt;Comparing Service Charateristics&amp;nbsp;&lt;/li&gt;&lt;li&gt;Comparing Architecture Characteristics&amp;nbsp;&lt;/li&gt;&lt;li&gt;Comparing Architecture Capabilities&amp;nbsp;&lt;/li&gt;&lt;li&gt;Summary&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;1. The World of Service-Based Architectures&lt;/h3&gt;&lt;div&gt;&lt;h4&gt;a. Service Contracts&lt;/h4&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;308&quot; src=&quot;https://3.bp.blogspot.com/-HAoJQP_cC-s/VpRwUFzmV5I/AAAAAAAAAfQ/tt4kOqA_Luo/s640/Service-Based%2BArchitectures-Service%2BContracts.png&quot; width=&quot;640&quot; /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&quot;서비스 계약&quot;은 REST API 문서같이 서비스와 서비스 컨슈머(consumer)간 동의를 말한다. 서비스 기반 아키텍쳐는 &quot;서비스 중심 계약&quot;(Service-Based Contracts)과 &quot;컨슈머주도 계약&quot;(Cosumer-Driven Contracts) 두가지 모델이 있다. 차이점은 일방적이냐 아니냐 하는 “협업 정도(The degree of collaboration)”이다. &lt;br /&gt;&lt;br /&gt;&quot;서비스 중심&quot; 아키텍쳐는 컨슈머를 고려하지 않은 계약변경을 한다. &quot;컨슈머 주도 계약&quot;은 컨슈머가 변경을 제안하고 서비스는 다른 컨슈머들의 영향도를 판단해서 적용 여부를 결정한다. 이런 &quot;컨슈머 주도 계약&quot; 컨셉을 테스트 시점에 적용할 수 있게 구현하고 툴링을 제공하는 오픈소스로 &quot;Pact&quot;, “Pacto”가 있다. 컨슈머는 서비스 프로바이더에게 Pact라는 테스트를 보내고 서비스 프로바이더는 계약변경이 생기면 컨슈머가 보낸 테스트를 빌드 시점에 서비스 제공자의 테스트에 포함해 테스트하는 방식이다.&lt;br /&gt;&lt;br /&gt;또 한 가지 중요한 것이 &quot;계약 버전&quot;(Contract versioning)이다. 버전 관리를 돕는 오픈소스/상용 프레임워크들이 있지만 직접 &quot;동종버전 전략&quot;(homogeneous versioning)과 &quot;이종버전 전략&quot;(heterogeneous versioning)을 사용할 수 있다. &quot;동종버전 전략&quot;은 서비스 계약은 같지만 버전을 달리 가는데 (그림에서 서비스 계약 A와 B 모두 동그라미 모양이다), 버전이 바뀌면 하위호환을 유지하고 필드가 추가된다. &quot;이종버전 전략&quot;은 여러 종류의 계약을 가진다. &quot;컨슈머 주도계약&quot; 컨셉에 가깝다. 새로운 기능이 추가되면 새로운 계약을 만든다. JMS 기반 메세징 시스템에 공통으로 쓰이는데, 컨슈머 질의에 스키마를 포함한 XML 응답을 보낸다. 계약에 따라서 스키마가 다르다.&lt;br /&gt;&lt;br /&gt;버전 관리의 실질적인 목표는 하위호환을 제공이라고 볼 수 있으며, 다른 계약의 타입별로 여러 버전을 제공할 때는 두 가지 전략을 같이 사용하기도 한다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;b. Service Availability&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-2gx9mLrLdvQ/VpRwfdvpCiI/AAAAAAAAAfc/AUmZTSGhffY/s1600/Service-Based%2BArchitectures-Service%2BAvailability.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;196&quot; src=&quot;https://1.bp.blogspot.com/-2gx9mLrLdvQ/VpRwfdvpCiI/AAAAAAAAAfc/AUmZTSGhffY/s640/Service-Based%2BArchitectures-Service%2BAvailability.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&quot;서비스 가용성&quot;은 원격지에 있는 서버가 적절한 시간에 요청을 처리하는 능력과 관련 있고, &quot;서비스 응답성&quot;은 적절한 시간에 컨슈머가 응답을 받는 것에 관련이 있다. 서비스 응답성과 관련해서는 타임아웃(timeout)에 관련된 이슈가 많다. 또한, 정해진 시간 내에 응답이 없을 때 컨슈머에게 더이상 기다릴 필요가 없음을 알리는 방법으로 &quot;서킷 브레이커” 패턴이 유명하다. &quot;서킷 브레이커&quot;의 구현으로 넷플릭스의 오픈소스 “리본”이 있다. 그리고 타임아웃값은 일괄적으로 모든 요청에 적용하기보다는 요청마다 적절한 타임아웃값을 적용하고, 외부설정으로 빼두어 변경이 생겼을 때 새로 하고 빌드하고 배포되지 않게 고려되어야 한다. 그리고 부하에 따라 “smart timeout values”를 적용하는 로직을 코드에 넣는 방법도 있다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style=&quot;font-family: Monaco; font-size: 15px;&quot;&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;c. Security&lt;/h4&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-fkjK6aYE_Y0/VpRwqbFgAfI/AAAAAAAAAfo/bT9jzoENYBc/s1600/Service-Based%2BArchitectures-Security.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;375&quot; src=&quot;https://4.bp.blogspot.com/-fkjK6aYE_Y0/VpRwqbFgAfI/AAAAAAAAAfo/bT9jzoENYBc/s400/Service-Based%2BArchitectures-Security.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;보안은 초기 SOA 구현에서는 주된 이슈였다. 마이크로서비스는 서비스 간 메세지 중재를 해주는 미들웨어가 없어서 역시 보안이 중요한 문제가 되고 있다. 마이크로서비스에서 보안 디자인의 한가지로 각 서비스에 인증을 위임한 다음, 개별 서비스가 권한처리를 하도록 하는 방법이 있다. 권한을 서비스에 캡슐화하고, 원격지 서비스와 chattiness 하게 그리고 외부 종속성이 없는 강한 “bounded context&quot;를 생성하는 방법을 (필자는) 선호한(단)다.&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;h4&gt;d. Transactions&lt;/h4&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-65nQfDkn_vc/VpRw0HfRcFI/AAAAAAAAAf0/8ZsBZsvn3po/s1600/Service-Based%2BArchitectures-transactions.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;208&quot; src=&quot;https://4.bp.blogspot.com/-65nQfDkn_vc/VpRw0HfRcFI/AAAAAAAAAf0/8ZsBZsvn3po/s640/Service-Based%2BArchitectures-transactions.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;ACID(atomicity, consistency, isolation, durability)트랜잭션은 대부분 비즈니스 어플리케이션에서 찾아볼 수 있다. 서비스기반 아키텍쳐는 통산 분산된 아키텍쳐기 때문에 트랜잭션을 관리가 어렵다. 그래서 ACID 트랜잭션보다는 BASE( basically available, soft state, eventual consistency ) 트랜잭션을 필요로 한다. 트랜잭션 레벨에서 일관성(consistency)을 얻기위해 ACID 트랜잭션을 허용하면, 서비스는 비즈니스 로직을 하나의 서비스에 캡슐화 해야 하기 때문에 좀 더 Coarse-Grained 하게 된다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;e. Too much complexity?&lt;/h4&gt;서비스 기반 아키텍쳐는 모노리식(monolithic)한 어프리케이션 개선에 의미가 있지만 서비스 계약, 가용성, 보안, 트랜잭션에 관련된 이슈가 고려 되어야 한다.&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;h3&gt;2. Comparing Service Characteristics&lt;/h3&gt;&lt;h4&gt;a. Service Taxonomy&lt;/h4&gt;&lt;br /&gt; &lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-_Zo-CDH8MeY/VpRxMo9KoAI/AAAAAAAAAgA/e6Qmx8fK-bk/s1600/Comparing%2BService%2BCharacteristics-Service%2BTaxonomy.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;472&quot; src=&quot;https://3.bp.blogspot.com/-_Zo-CDH8MeY/VpRxMo9KoAI/AAAAAAAAAgA/e6Qmx8fK-bk/s640/Comparing%2BService%2BCharacteristics-Service%2BTaxonomy.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&quot;서비스 분류체계&quot;는 아키텍처에서 서비스가 어떻게 분류되는가와 관련 있는데, 기본 두 가지는 &quot;서비스 타입&quot;(Service Type)과 &quot;비즈니스 영역&quot;(Business Area)으로 분류된다. &quot;서비스 타입&quot;의 분류는 서비스가 하는 역활의 타입과 관련 있다. 예를 들어 비즈니스와 관련된 구현이 있고 로깅이나 보안과 같이 비즈니스와 관련이 없는 구현이 있다. &quot;비즈니스 영역&quot;의 분류는 주문서비스, 리포팅과 같이 비즈니스 서비스가 하는 역활과 관련이 있다. &lt;br /&gt;&lt;br /&gt;&quot;서비스 타입&quot;은 아키텍쳐 패턴 레벨로 정의되고 &quot;비즈니스 영역&quot;은 아키텍쳐 구현 레벨로 정의된다. 마이크로 서비스 아키텍쳐는 서비스 타입으로 분류할 때 &quot;기능 서비스&quot;(functional service)와 &quot;인프라 서비스&quot;(infrastructure service) 두 가지로 분류한다. &quot;기능 서비스&quot;는 비즈니스 동작이나 기능을 구현하는 것을 말하고, &quot;인프라 서비스&quot;는 비즈니스와 관련된 기능 외에 인증, 권한, 로깅과 같은 구현을 말한다. &lt;br /&gt;&lt;br /&gt;SOA 아키텍쳐는 비즈니스 서비스, 메세징 미들웨어, 엔터프라이즈 서비스, 어프리케이션 서비스, 인프라 서비스로 분류된다. &quot;비즈니스 서비스&quot;는 고수준 추상화를 말하는데, WSDL이나 BPEL과 같은 XML 스펙으로 표현된다. 그리고 어떤 것들이 &quot;비즈니스 서비스&quot; 인지 구분해 보려면 “Are we in the business of”를 붙여보면 구분해 보는 데 도움이 된다. 예) ProcessingTrades, InsertCustomer 두 가지를 보면, Are we in the business of processing trades? 와 Are we in the business of inserting customer? 로 테스트 하는식이다. &lt;br /&gt;&lt;br /&gt;“엔터프라이즈 서비스”는 실제 구현된 서비스를 말한다. &quot;비즈니스 서비스&quot;에 정의된 기능의 구현이다. &quot;미들웨어 서비스&quot;에서 비즈니스 서비스와 그것에 상응하는 &quot;엔터프라이즈 서비스&quot;로 연결한다. 1:1로 연결되기도 하고 1:N으로 연결되기도 한다. 이 구현체들은 다양한 프로그래밍 언어로 구현되거나 상용 서드파티 제품을 사용하기도 한다. 그리고 &quot;엔터프라이즈 서비스&quot;는 비즈니스 요청을 처리하기 위해 &quot;어프리케이션 서비스&quot;와 &quot;인프라 서비스&quot;에 의존한다. &lt;br /&gt;&lt;br /&gt;“어프리케이션 서비스”는 특정한 상황에 사용되는 어프리케이션으로 &quot;엔터프라이즈 서비스&quot;에서 구현되지 않거나 존재하지 않는 특정한 기능을 제공한다. 예를 들어 자동견적 어프리케이션은 보험회사의 하나의 부분이기도 하지만 UI를 제공하고 견적 서비스로써 외부에 노출할 수도 있다.&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?--&gt; &lt;br /&gt;&lt;h4&gt;b. Service Ownership and Coordination &lt;/h4&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-ApeIqpL5Ge8/VpRxZO2ZmlI/AAAAAAAAAgM/lHt1WtWTZwE/s1600/Comparing%2BService%2BCharacteristics-Service%2BOwnership%2Band%2BCoordination.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;232&quot; src=&quot;https://4.bp.blogspot.com/-ApeIqpL5Ge8/VpRxZO2ZmlI/AAAAAAAAAgM/lHt1WtWTZwE/s640/Comparing%2BService%2BCharacteristics-Service%2BOwnership%2Band%2BCoordination.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&quot;서비스 오너&quot;(Service Ower)는 조직 내에서 서비스를 생성하고 유지하는 데 책임이 있는 그룹의 형태다. &lt;br /&gt;&lt;br /&gt;마이크로 서비스는 &quot;기능 서비스&quot;와 &quot;인프라 서비스&quot;로 나뉘는 제한된 서비스 분류체계를 가지기 때문에 마이크로 서비스에서 어프리케이션 개발팀은 &quot;인프라 서비스&quot;와 &quot;기능 서비스&quot; 두가지 모두 책임을 가진다. 그래서 서비스 간 코디네이션이 거의 없다. &lt;br /&gt;&lt;br /&gt;SOA에서는 &quot;비즈니스 서비스&quot;는 비즈니스 사용자에게 소유되는 반면 &quot;엔터프라이즈 서비스&quot;는 공통 서비스팀이나 아키텍트에게 소유된다. &quot;어프리케이션 서비스&quot;는 어프리케이션 개발팀이 소유하고 인프라 서비스는 어프리케이션 개발팀이나 인프라 서비스팀이 소유한다. SOA에서 볼 수 있는 &quot;미들웨어 컴포넌트&quot;는 통합 아키텍트(Integration architects)나 미들웨어 팀이 소유한다. 그리고 하나의 비즈니스 요청처리에 모든 팀의 코디네이션이 필요하며, 미들웨어를 통해 모든 코디네이션이 이루어진다. &lt;br /&gt;&lt;br /&gt;마이크로 서비스에서는 서비스 간 코디네이션이 없거나 최소한의 코디네이션만 필요하다. 서비스 오너간 코디네이션이 필요할 땐 어프리케이션 개발팀 규모가 작아서 빠르고 효과적으로 코디네이션이 이루어 진다.&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;h4&gt;c. Service Granularity&lt;/h4&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-oyJ70ZpewC8/VpRxjuv3RgI/AAAAAAAAAgY/YCmZp4czK9M/s1600/Comparing%2BService%2BCharacteristics-Service%2BGranularity.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;243&quot; src=&quot;https://4.bp.blogspot.com/-oyJ70ZpewC8/VpRxjuv3RgI/AAAAAAAAAgY/YCmZp4czK9M/s640/Comparing%2BService%2BCharacteristics-Service%2BGranularity.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;div style=&quot;font-family: monaco; font-size: 14px;&quot;&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?--&gt; &lt;/div&gt;&lt;br /&gt;Granularity(‘입도&#39;라도 하는 모양인데 와 닿지 않음)는 서비스의 상대적 크기나 자세한 정도를 나타낸다. 이 Granularity가 서비스관점의 마이크로 서비스와 SOA 간 가장 큰 차이점이다.  &lt;br /&gt;&lt;br /&gt;마이크로 서비스는 작고 fine-grained 한 서비스다. 마이크로서비스에서 컴포넌트는 단일목적의 서비스지만, SOA에서 서비스 컴포넌트는 작은 서비스에서부터 큰 서비까지 범위를 가진다. 아키텍트가 SOA에서 서비스 Granularity가 끼치는 영향 범위를 잘 이해하지 못하고 너무 fine-grained하게 디자인하면 chatty(컴포넌트 간 네트워크 커뮤니케이션이 많은)한 서비스가 되어 성능이 좋지 않게 된다. 예를 들면 fine-grained한 getter와 setter보다는 단위 서비스가 좋다 - GetCustomerAddress, GetCustomerName, UpdateCustomerName 보다는 Customer Service가 좋다. &lt;br /&gt;&lt;br /&gt;Granularity는 성능뿐만 아니라 트랜잭션 관리에도 영향을 미친다. 원격 서비스들이 너무 fine-grained 하면 하나의 트랜잭션 유닛으로 작업 되게 코디네이션 할 수 없다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: monaco; font-size: 14px;&quot;&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?--&gt; &lt;/div&gt;&lt;h4&gt;d. Granularity and Pattern Selection&lt;/h4&gt;&lt;div style=&quot;font-family: monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; font-family: monaco; font-size: 14px; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-__8hybMaza0/VpRxw3YWwxI/AAAAAAAAAgo/WyGfVccEs2k/s1600/Comparing%2BService%2BCharacteristics-Granularity%2Band%2BPattern%2BSelection.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;267&quot; src=&quot;https://4.bp.blogspot.com/-__8hybMaza0/VpRxw3YWwxI/AAAAAAAAAgo/WyGfVccEs2k/s640/Comparing%2BService%2BCharacteristics-Granularity%2Band%2BPattern%2BSelection.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;font-family: monaco; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;마이크로 서비스의 작고 fine-grained 한 아키텍쳐 컨셉은 개발, 테스트, 배포 그리고 관리를 포함해 소프트웨어 개발 라이프사이클 전체를 개선한다. 범위가 작은 서비스를 크게 옮기고 있다면 SOA 패턴을 고려해야 하지만, 어프리케이션 비즈니스 기능을 작고 독립적인 파트로 쪼갤 수 있다면 마이크로 서비스 패턴을 고려해야 한다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;3. Comparing Architecture Characteristics&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;a. Component Sharing&lt;/h4&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-K_xIepDD1nI/VpRyDvWYXoI/AAAAAAAAAg0/OzyBhHeMCYs/s1600/Comparing%2BArchitecture%2BCharacteristics-Component%2BSharing.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;276&quot; src=&quot;https://1.bp.blogspot.com/-K_xIepDD1nI/VpRyDvWYXoI/AAAAAAAAAg0/OzyBhHeMCYs/s640/Comparing%2BArchitecture%2BCharacteristics-Component%2BSharing.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&quot;컴포넌트 공유&quot;(sharing component)관점에서 마이크로 서비스는 &quot;Share-as-little-possible” 아키텍쳐 스타일이고 SOA는 &quot;Share-as-much-as-possibile&quot; 아키텍쳐 스타일이다. 컴포넌트 공유는 SOA의 핵심 교리 중 하나다. &quot;silo-based&quot; 문제는 공유가 되지 않는 문제를 말하는데, 그림에서는 각자 주문서비스를 가지는 문제를 말한다. SOA에서는 &quot;엔터프라이즈 서비스&quot;를 공유하는 방법으로 이런 문제에 접근한다. 그림에서는 주문 서비스를 생성했다. 주문 서비스가 공유되었지만, 여전히 세 개의 다른 데이터베이스에 접근한다. 이 부분이 share-much-as-possible 아키텍쳐 스타일이 사용될 때 가장 좋지못한 부분이다. 주문 서비스는 세 개의 데이터베이스에 걸쳐 데이터를 관리해야 한다. 다른 말로 세 개의 데이터베이스가 복합되어야 주문서비스가 가능하다. share-as-much-as-possible 아키텍쳐 개념은 기능 중복과 관련된 이슈는 해결하지만 컴포넌트가 강결합(tightly coupled component)되고 변경에 따른 위험도가 증가하는 경향이 있다. &lt;br /&gt;&lt;br /&gt;마이크로 서비스의 share-little-as-possible 개념은 &quot;Bounded-Context&quot;라 불리는 도메인주도(Domain-Driven) 디자인 위에 구축되어야 효과가 배가된다. SOA는 컴포넌트 공유를 극대화하고 마이크로 서비스는 Bounded-Context를 통해서 공유를 최소화한다.&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?--&gt; &lt;br /&gt;&lt;h4&gt;b. Service Orchestration and Choreography &lt;/h4&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-lBpmWthycBI/VpRyTjG65HI/AAAAAAAAAhA/edxjs-Z_39o/s1600/Comparing%2BArchitecture%2BCharacteristics-Service%2BOrchestration%2Band%2BChoreography.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;337&quot; src=&quot;https://3.bp.blogspot.com/-lBpmWthycBI/VpRyTjG65HI/AAAAAAAAAhA/edxjs-Z_39o/s640/Comparing%2BArchitecture%2BCharacteristics-Service%2BOrchestration%2Band%2BChoreography.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&quot;서비스 오케스트레이션&quot;(service orchestration)은 다른 악기를 사용하는 음악가들이 지휘자를 통해 코디네이션 되는 거로 예시될 수 있다. &quot;중재 컴포넌트&quot;(mediator component)는 지휘자에 해당하는데 모든 서비스 호출이 &quot;중재 컴포넌트&quot;를 통해 이루어진다. &quot;서비스 코레오그래피&quot;(service choreography)는 발레 댄서들이 서로 상호 작용하며 움직이지만 지휘자가 없는 것으로 예시될 수 있다. 중앙중재가 없이 여러 서비스가 코디네이션 되며, &quot;서비스 chaining&quot;과 관련 있다. &lt;br /&gt;&lt;br /&gt;마이크로서비스는 아키텍쳐상 미들웨어 컴포넌트가 없으므로 &quot;서비스 코레오그래피&quot;를 선호한다. 핵심 컴포넌트는 &quot;서비스 컴포넌트&quot;와 &quot;API 계층” 두 가지다. 구현 관점에서는 서비스 등록(service registration)과 서비스 발견(service discovery), 서비스 모니터링, 서비스 배포 매니저를 가질 수 있다. 이런 것들은 아키텍쳐에서는 인프라 서비스에 해당한다. &lt;br /&gt;&lt;br /&gt;마이크로 서비스는 가능한 최소한의 공유를 가지는 아키텍쳐기 때문에 아키텍쳐에서는 &quot;서비스 코레오그래피&quot;의 양을 최소화하고 &quot;서비스 기능&quot;과 &quot;인프라 서비스&quot;간 상호작용이 제한되도록 노력 해야 한다. 너무 많은 &quot;서비스 코레오그래피&quot;는 컴포넌트 간 의존이 많이 생기는 “efferent coupling”이 될 수 있다. 서비스 성능도 낮아지고 결합 도도 높아지게 된다. 해결책으로 fine-grained 서비스를 coarse-grained 서비스로 묶거나 DRY 정책을 무시하고 각 coarse-grained 서비스에 공통 기능으로 추가하는 방법이 있다. &lt;br /&gt;&lt;/div&gt;&lt;div&gt;SOA는 가능한 공유를 많이 하는 아키텍쳐 이기 때문에, &quot;오케스트레이션&quot;과 &quot;코레오그래피” 두 가지 모두에 의존한다. 미들웨어를 통해 여러 &quot;엔터프라이즈 서비스&quot;로 중재 되고 각각 필요한 서비스 호출 체인이 생길 수 있다. &lt;br /&gt;&lt;br /&gt;SOA는 마이크로서비스보다 느리고 개발, 테스트 그리고 유지보수에 더 많은 시간과 노력이 요구된다. 이런 사실 때문에, 아키텍트들은 SOA 아키텍쳐를 멀리하고 간단하고 스트림라인된(streamlined) 마이크로서비스 패턴으로 옮겨간다.&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?--&gt; &lt;br /&gt;&lt;h4&gt;c. Middleware vs. API Layer &lt;/h4&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-cm_hZtUYLXY/VpRyc4V4UpI/AAAAAAAAAhM/gsOL04PpW_8/s1600/Comparing%2BArchitecture%2BCharacteristics-Middleware%2Bvs.%2BAPI%2BLayer.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;456&quot; src=&quot;https://2.bp.blogspot.com/-cm_hZtUYLXY/VpRyc4V4UpI/AAAAAAAAAhM/gsOL04PpW_8/s640/Comparing%2BArchitecture%2BCharacteristics-Middleware%2Bvs.%2BAPI%2BLayer.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&quot;API 계층”은 서비스 앞단에서 &quot;service-access facade&quot;로 동작한다. 컨슈머는 서비스의 실제 엔드포인트(endpoint) 위치가 어디인지 알 필요가 없다. 때문에 컨슈머에게 영향 없이 서비스 Granularity 레벨을 변경할 수 있다. SOA는 &quot;메세지 미들웨어&quot;에 의존한다. &quot;메세지 미들웨어&quot;를 사용하면 마이크로서비스 아키텍쳐 스타일에서 찾아볼 수 없는 중재기능, 라우팅, 메세지 개선(enhancement), 메세지 변형(transformation) 그리고 프로토콜 변형(transformation) 등을 포함한 부가적인 기능들을 많이 받을 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;d. Accessing Remote Services&lt;/h4&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-75w3P1F_bss/VpRypG08H6I/AAAAAAAAAhY/yvTcXdd5e-w/s1600/Comparing%2BArchitecture%2BCharacteristics-Accessing%2BRemote%2BServices.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;420&quot; src=&quot;https://3.bp.blogspot.com/-75w3P1F_bss/VpRypG08H6I/AAAAAAAAAhY/yvTcXdd5e-w/s640/Comparing%2BArchitecture%2BCharacteristics-Accessing%2BRemote%2BServices.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;마이크로서비스와 SOA에서 &quot;remote access&quot;와 관련해 기본적으로 다른 한 가지는 마이크로서비스는 주된 remote-access 프로토콜로 REST에 의존하는 경향이 있지만, SOA는 이런 제약이 없다는 것이다. &lt;br /&gt;&lt;br /&gt;아키텍쳐 패턴을 간결하게 하는 마이크로서비스의 기본 원칙 중의 하나가 사용하는 기술의 수와 아키텍쳐 선택의 여지를 주지 않게 아주 제한적이다. 예를 들어 마이크로서비스는 일반적으로 REST나 JMS, MSMQ, AMQP와 같은 간단한 메세징에 의존한다. 마이크로서비스에서 보여지는 remote-access 프로토콜은 일반적으로 호모지니어스(Homogeneous)하다. 다른 말로 동일 어프리케이션이나 시스템 내에서 access 프로토콜이 혼용되지 않는다. SOA에서는 이런 제약이 없다. 헤테로지니어스(Heterogeneous) 즉, 이기종 서비스간 대여섯개가 넘는 remote-access 프로토콜이 사용된다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;4. Comparing Architecture Capabilities&lt;/h3&gt;&lt;h4&gt; a. Application Scope&lt;/h4&gt;&lt;br /&gt; &lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-mNK3cSWVNzc/VpRy-wzVvDI/AAAAAAAAAhk/dDxsSH7iARA/s1600/Comparing%2BArchitecture%2BCapabilities-Application%2BScope.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;272&quot; src=&quot;https://3.bp.blogspot.com/-mNK3cSWVNzc/VpRy-wzVvDI/AAAAAAAAAhk/dDxsSH7iARA/s640/Comparing%2BArchitecture%2BCapabilities-Application%2BScope.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&quot;어프리케이션 범위&quot;(Application Scope)는 아키텍쳐 패턴이 지원할 수 있는 어프리케이션의 전반적인 크기와 관련이 있다. 예를 들어, 마이크로커널(microkernel)이나 파이프라인(pipeline) 아키텍쳐는 작은 어프리케이션이나 서브 시스템에 적합하고, 이벤트 기반(event-driven) 아키텍쳐는 큰 시스템에 적합하다.  &lt;br /&gt;&lt;br /&gt;SOA는 다양한 이기종 어프리케이션과 서비스간 통합이 필요한 복잡한 엔터프라이즈 규모의 시스템에 적합하다. 또한, 공유 컴포넌트가 많은 곳에 적합하다. 반면, 워크플로우 기반 어프리케이션은 잘 정의된 절차와 흐름을 가지고 공유 컴포넌트가 적기 때문에 SOA 아키텍쳐로 구현하기 어렵다. 작은 웹 기반 어프리케이션 또한 SOA를 사용하기엔 적합하지 않다. &lt;br /&gt;&lt;br /&gt;마이크로서비스 패턴은 작고, 잘 분할된 웹 기반 시스템에 어울린다. 중재자(mediator, message middleware)가 없으므로 크고 복잡한 비즈니스 어프리케이션에는 어울리지 않는다. 그리고 마이크로서비스는 초기 아키텍쳐로 선택하기 적합하다. 시스템이 복잡해지면 최초 마이크로서비스 아키텍쳐를 SOA로 전환하거나 반대의 경우로도 전환한다.&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?--&gt; &lt;br /&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;h4&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;b. Heterogeneous Interoperability&lt;/span&gt;&amp;nbsp;&lt;/h4&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-oOlSZNvzI30/VpRzIg7P9YI/AAAAAAAAAhw/asz2rOnNP6I/s1600/Comparing%2BArchitecture%2BCapabilities-Heterogeneous%2BInteroperability.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;492&quot; src=&quot;https://4.bp.blogspot.com/-oOlSZNvzI30/VpRzIg7P9YI/AAAAAAAAAhw/asz2rOnNP6I/s640/Comparing%2BArchitecture%2BCapabilities-Heterogeneous%2BInteroperability.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&quot;이기종 상호운용성&quot;(Heterogeneous Interoperability)은 다양한 언어와 플랫폼으로 구현된 시스템 통합 능력과 관련이 있다. 마이크로서비스 아키텍쳐 스타일은 protocol-aware heterogeneous interoperability를 지원한다. 즉, 아키텍쳐가 여러 remote access 프로토콜 타입을 지원할 수 있지만, 특정 컨슈머와 그에 상응하는 서비스는 반드시 같아야 한다. 메세지 미들웨어가 없기 때문이다. SOA 역시 protocol-aware heterogeneous interoperability를 지원하지만, 한 걸음 더 나가 protocol-agnostic heterogeneous interoperability를 지원한다. 즉, 서비스 컨슈머는 서비스의 구현이나 서비스에 필요한 프로토콜을 인지할 필요가 없다. REST로 호출되어도 미들웨어를 통해 RMI로 변환되어 상응하는 서비스가 호출된다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;c. Contract Decoupling&lt;/h4&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-DBDGRgQGPBk/VpRzSc_tHkI/AAAAAAAAAh8/kdw_X72QGjg/s1600/Comparing%2BArchitecture%2BCapabilities-Contract%2BDecoupling.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;411&quot; src=&quot;https://1.bp.blogspot.com/-DBDGRgQGPBk/VpRzSc_tHkI/AAAAAAAAAh8/kdw_X72QGjg/s640/Comparing%2BArchitecture%2BCapabilities-Contract%2BDecoupling.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px; text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;Contract decoupling은 추상화의 성배 같은 거라고 한다. 메세지 변형(transformation)과 메세지 개선(enhancement)의 두 가지 기본 형태가 있다. &quot;메세지 변형&quot;은 실제 데이터와는 관련이 없고, 메세지 포맷과 관련이 있다. 예를 들어 XML을 JSON으로 변환하는 걸 말한다. &quot;메세지 개선&quot;은 요청 데이터와 관련이 있다. 미들웨어가 요청 데이터에 데이터를 추가하거나 변경하는 것을 말한다. 소프트웨어 버전이 업그레이드 되거나 다른 서비스의 변경이 있더라도 contract decoupling으로 비즈니스 어프리케이션은 영향받지 않게 할 수 있다. 마이크로서비스는 contract decoupling을 지원하지 않지만, SOA에서는 중요한 기능중 하나다. contract decoupling이 필요하다면 마이크로 서비스보다는 SOA 아키텍쳐가 필요하다고 볼 수 있다.&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;5. Summary&lt;/h3&gt;&lt;br /&gt; 기억해야 할 기본 개념중 하나가 마이크로서비스 아키텍쳐는 bounded context에서 강조하는 share-as-little-as-possible 아키텍쳐 패턴이지만 SOA는 추상화와 비즈니스 기능의 재사용을 강조하는 share-as-much-as-possible 아키텍쳐 패턴이다.&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;1. Service-Based Architectures&lt;br /&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-GLgpdGI4tSo/VpRz23dtu2I/AAAAAAAAAiI/OtNiN5satWg/s1600/%255BMicroservices_vs_SOA%255D%2B1.%2BService-Based%2BArchitectures.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;116&quot; src=&quot;https://3.bp.blogspot.com/-GLgpdGI4tSo/VpRz23dtu2I/AAAAAAAAAiI/OtNiN5satWg/s320/%255BMicroservices_vs_SOA%255D%2B1.%2BService-Based%2BArchitectures.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;2. Comparing Service Characteristics&lt;br /&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-isP1CYlrqh8/VpR0Lq4k8EI/AAAAAAAAAig/_vc57ke0W-w/s1600/%255BMicroservices_vs_SOA%255D%2B2.%2BComparing%2BService%2BCharacteristics.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;168&quot; src=&quot;https://1.bp.blogspot.com/-isP1CYlrqh8/VpR0Lq4k8EI/AAAAAAAAAig/_vc57ke0W-w/s320/%255BMicroservices_vs_SOA%255D%2B2.%2BComparing%2BService%2BCharacteristics.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;3. Comparing Architecture Characteristics&lt;br /&gt;&lt;a href=&quot;http://4.bp.blogspot.com/--93AzfeAzOA/VpR0QxaSuAI/AAAAAAAAAis/vPoz6UFPVVc/s1600/%255BMicroservices_vs_SOA%255D%2B3.%2BComparing%2BArchitecture%2BCharacteristics.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;176&quot; src=&quot;https://4.bp.blogspot.com/--93AzfeAzOA/VpR0QxaSuAI/AAAAAAAAAis/vPoz6UFPVVc/s320/%255BMicroservices_vs_SOA%255D%2B3.%2BComparing%2BArchitecture%2BCharacteristics.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;4. Comparing Architecture Capabilities&lt;br /&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-gAlo5qVNmc0/VpR0WDsymGI/AAAAAAAAAi4/HNfUIREhqVI/s1600/%255BMicroservices_vs_SOA%255D%2B4.%2BComparing%2BArchitecture%2BCapabilities.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;80&quot; src=&quot;https://1.bp.blogspot.com/-gAlo5qVNmc0/VpR0WDsymGI/AAAAAAAAAi4/HNfUIREhqVI/s320/%255BMicroservices_vs_SOA%255D%2B4.%2BComparing%2BArchitecture%2BCapabilities.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/5538959764076805207/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/01/soa.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/5538959764076805207'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/5538959764076805207'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/01/soa.html' title='마이크로서비스와 SOA 비교'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-HAoJQP_cC-s/VpRwUFzmV5I/AAAAAAAAAfQ/tt4kOqA_Luo/s72-c/Service-Based%2BArchitectures-Service%2BContracts.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-393743231748336772</id><published>2015-12-18T02:40:00.000+09:00</published><updated>2017-03-26T23:33:35.508+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="commandlinerunner"/><category scheme="http://www.blogger.com/atom/ns#" term="springbatch junit"/><category scheme="http://www.blogger.com/atom/ns#" term="springboot"/><title type='text'>Spring Boot + Spring Batch 그리고 CommandLineRunner Unit 테스트 하기</title><content type='html'>커멘드라인에서 실행되는 배치 어프리케이션을 작성할때 겪었던 2가지 문제 정리&lt;br /&gt;&lt;br /&gt;첫번째, 커멘드라인에서 실행하는 배치프로그램을 만들때 spring.batch.job.enabled 옵션을 꺼두지 않아 Job이 두번 실행되는 문제&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23447948/how-spring-boot-run-batch-jobs&quot;&gt;http://stackoverflow.com/questions/23447948/how-spring-boot-run-batch-jobs&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22318907/how-to-stop-spring-batch-scheduled-jobs-from-running-at-first-time-when-executin&quot;&gt;http://stackoverflow.com/questions/22318907/how-to-stop-spring-batch-scheduled-jobs-from-running-at-first-time-when-executin&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;spring.batch.job.enabled: false&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;두번째, 부트기반 커멘드라인 어프리케이션은 UnitTest를 작성하기가 불편하기 때문에 CommandLineRunner 인터페이스를 사용했다. 이 CommandLineRunner는 스프링 빈이 모두 생성 후 호출되어 Unit Tese 작성이 수월하다.&lt;br /&gt;&lt;br /&gt;문제는 Unit Test를 설정에 @SpringApplicationConfiguration 을 사용하면 CommandLineRunner가 바로 실행 되어 버린다. CommandLineRunner가 여러개일 경우나 인자를 넘겨야 할 때는 문제가 된다. @SpringApplicationConfiguration은 단순히 SpringApplicationConfiguration Loader를 @ContextConfiguration로 사용하는 어노테이션이다. ( &lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/9681df0e9f8790b0d30f032a6460a957289ea05b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationConfiguration.java#L43&quot;&gt;코드&lt;/a&gt; )&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@RunWith&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;SpringJUnit4ClassRunner&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@SpringApplicationConfiguration&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;classes &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; App&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;AppTest&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Test&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; test1&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;그래서 @ContextConfiguration 에 class를 지정하면 CommandLineRunner가 바로 실행되지 않게 할 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@RunWith&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;SpringJUnit4ClassRunner&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;classes &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; App&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;AppTest&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Test&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; test1&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;이렇게 설정하고 CommandLineRunner를 ApplicationContext에서 찾아 인자와 함께 실행시키면 된다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0px;&quot;&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold;&quot;&gt;@RunWith&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold;&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;classes &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; App&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #bb0066; font-weight: bold;&quot;&gt;AppTest&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold;&quot;&gt;@Autowired&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;    ApplicationContext context&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #555555; font-weight: bold;&quot;&gt;@Test&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0066bb; font-weight: bold;&quot;&gt;execCommandLineRunner&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; Exception &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;        App&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;SimpleCommandLineRunner&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; runner&lt;br /&gt;                &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; context&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;getBean&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;SimpleCommandLineRunner&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;        runner&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #0000cc;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt; String&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;[]{});&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;background-color: white; color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;전체 코드는 &lt;a href=&quot;https://github.com/freestrings/spring-boot-spring-batch_example&quot;&gt;여기&lt;/a&gt;..&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/393743231748336772/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/12/spring-boot-spring-batchs.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/393743231748336772'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/393743231748336772'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/12/spring-boot-spring-batchs.html' title='Spring Boot + Spring Batch 그리고 CommandLineRunner Unit 테스트 하기'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-5869721428128262099</id><published>2015-12-07T00:58:00.002+09:00</published><updated>2017-03-26T23:32:42.564+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="annotationprocessing"/><category scheme="http://www.blogger.com/atom/ns#" term="compiler"/><category scheme="http://www.blogger.com/atom/ns#" term="compilertree"/><category scheme="http://www.blogger.com/atom/ns#" term="javaagent"/><category scheme="http://www.blogger.com/atom/ns#" term="javac"/><category scheme="http://www.blogger.com/atom/ns#" term="javaxtools"/><category scheme="http://www.blogger.com/atom/ns#" term="lombok"/><category scheme="http://www.blogger.com/atom/ns#" term="metaprogramming"/><title type='text'>Lombok은 어떻게 동작되나? 간단정리</title><content type='html'>&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;a href=&quot;https://projectlombok.org/&quot;&gt;lombok&lt;/a&gt;은 Annotation Processing과  Instrumentation을 사용한다. Instrumentation은&amp;nbsp;&lt;a href=&quot;http://blog.deepakazad.com/2010/05/ecj-eclipse-java-compiler.html&quot;&gt;이클립스는 별도 컴파일러&lt;/a&gt;가 있기 때문에 이클립스 종속적인 bytecode 처리에 사용되고, AnnotationProcessor에서는 Annotation별로 코드를 생성하는데 사용된다.&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;line-height: 1.57143em;&quot;&gt;&lt;div style=&quot;line-height: 1.57143em;&quot;&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;Annotation별 코드 생성이란, 예를 들어 @Getter를 선언하면 실제 getter가 생성된다.&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px;&quot;&gt;&lt;!-- HTML generated using hilite.me --&gt; &lt;/div&gt;&lt;div style=&quot;background: rgb(255, 255, 255); border: solid gray; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Getter&lt;/span&gt; String name&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;background: rgb(255, 255, 255); border: solid gray; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 125%;&quot;&gt; String &lt;/span&gt;&lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; line-height: 125%;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;간단히 &lt;b&gt;lombok구현은 AnnotationProcessor를 이용한 컴파일 시점 코드 생성&lt;/b&gt;으로 요약 할 수 있다.&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;AnnotationProcessor는 Java Compiler와 관련이 있다. 잠시 정리해 보자&lt;/h4&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;line-height: 1.57143em;&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-8WqMRTsOtfc/VlsaLdGm4II/AAAAAAAAAeU/7irMmYYRvMI/s1600/compiler-package-overview.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;177&quot; src=&quot;https://2.bp.blogspot.com/-8WqMRTsOtfc/VlsaLdGm4II/AAAAAAAAAeU/7irMmYYRvMI/s400/compiler-package-overview.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; text-align: center;&quot;&gt;&lt;a data-mce-href=&quot;http://openjdk.java.net/groups/compiler/doc/package-overview&quot; href=&quot;http://openjdk.java.net/groups/compiler/doc/package-overview&quot; shape=&quot;rect&quot; style=&quot;border: 0px; color: #047ac6; cursor: pointer; line-height: 1.57143em; margin: 0px; padding: 0px;&quot; target=&quot;_blank&quot;&gt;http://openjdk.java.net/groups/compiler/doc/package-overview&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;javac는 크게 두가지 부분으로 나눈다. 하나는 &quot;.java&quot;을 &quot;.class&quot;로 바꾸는 &lt;b&gt;컴파일러&lt;/b&gt;이고 다른 하나는 &lt;b&gt;컴파일러를 지원하는 환경&lt;/b&gt;이다.  &lt;/div&gt;&lt;br /&gt;컴파일러 환경은 세가지 API 패키지를 제공하고 &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Language Model API ( javax.lang.model package )&amp;nbsp;&lt;/li&gt;&lt;li&gt;Annotation Processing API ( javax.annotation.processing package )&amp;nbsp;&lt;/li&gt;&lt;li&gt;Compiler Tree API( com.sun.source package )&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px;&quot;&gt;&lt;ul style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;/ul&gt;&lt;/ul&gt;컴파일러는 Java Compiler API 패키지를 제공한다. &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Java Compiler API ( javax.tools package )&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;javac는 세가지 방식으로 호출 할 수 있다. &lt;br /&gt;&lt;ul&gt;&lt;li&gt;com.sun.tools.javac.main.Main: 커멘드라인에서 직접 호출&amp;nbsp;&lt;/li&gt;&lt;li&gt;java Compiler API: javax.tools 패키지 이용&amp;nbsp;&lt;/li&gt;&lt;li&gt;Compiler Tree API: javax.tools.CompilationTask를 com.sun.source.util.JavacTask로 바꾸는 방법&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;컴파일 과정에서 생성된 Syntax Tree는 com.sun.source.tree.*에서 public access를 제공하며,&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;com.sun.source.util.Trees가 대표적이다. 일반적인 Tree API와 유사한 API를 제공한다.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt; Data Model은 com.sun.tools.javac.code.* 에서 Type별 Semantic 정보를 제공한다. - Symbol, Type, Annotations, Atrribute등으로 javax.lang.model.element.Element를 implement 하고 있다.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Element 는 기본적으로 포함된 자식 element 들을 얻을 수 있지만, Symbol 과 같은 subtype에서는 코드의 위치 static여부 등의 상세한 내용들을 포함하고 있다.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Enter, MemberEnter, Annotation Visitor에서 생성된다. Enter Visitor는 클래스 스캔을 MemberEnter Visitor는 클래스의 멤버 스캔을 그리고 Annotation Visitor는 Annotation을 스캔한다.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Annotation Processing&lt;/b&gt;은 &lt;b&gt;Enter, MemberEnter 스캔 이후&lt;/b&gt;에 시작한다. &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Annotation Processing 중에는 컴파일에 필요한 부가적인 타입을 생성&amp;nbsp;&lt;/li&gt;&lt;li&gt;분석 메소드 시그니쳐도 실행 할 수도 있다.&amp;nbsp;&lt;/li&gt;&lt;li&gt;만약 Annotation Processing중 사용자가 파일을 새로 생성하면 컴파일은 재시작 된다. - 이 부분은 정확하지 않다. :)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;컴파일의 단계의 마지막으로 &quot;.class&quot; 생성에는 com.sun.tools.javac.jvm.* 이 이용된다.&lt;br /&gt;&lt;/div&gt;흐름을 정리하면, 컴파일 하면 컴파일러는 AST를 생성시킨 후 &quot;javac -processor&quot;에 등록된 AnnotationProcessor를 호출한다. AnnotationProcessor에서는 컴파일러에서 제공된 Syntax Tree를 이용 하거나 직접 Visitor를 구현해서 트리를 탐색하며 필요한 데이터를 얻고 com.sun.source.tree.* 패키지를 이용해서 필요한 코드를 추가 할 수 있다.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;b&gt;lombok 기본 원리인 AnnotationProcessor를 이용한 코드생성 예제&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;HeloWorld라는 Annotation을 하나 선언한다.&lt;div style=&quot;background: rgb(255, 255, 255); border: solid gray; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@interface&lt;/span&gt; HelloWorld &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;그리고 AnnotationProcessor를 생성한다.&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;background: rgb(255, 255, 255); border: solid gray; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;java.util.Set&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.annotation.processing.AbstractProcessor&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.annotation.processing.RoundEnvironment&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.annotation.processing.SupportedAnnotationTypes&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.annotation.processing.SupportedSourceVersion&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.lang.model.SourceVersion&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.lang.model.element.Element&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;javax.lang.model.element.TypeElement&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.model.JavacElements&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.processing.JavacProcessingEnvironment&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.tree.JCTree&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.tree.JCTree.JCExpression&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.tree.JCTree.JCLiteral&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.tree.TreeMaker&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.util.Context&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.util.List&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold;&quot;&gt;com.sun.tools.javac.util.Name&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@SupportedAnnotationTypes&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;({&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;})&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@SupportedSourceVersion&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;SourceVersion&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;RELEASE_8&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;HelloProcessor&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;extends&lt;/span&gt; AbstractProcessor &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;process&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;   Set&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;extends&lt;/span&gt; TypeElement&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; annotations&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;   RoundEnvironment roundEnv&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;roundEnv&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;processingOver&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  JavacProcessingEnvironment environment &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;JavacProcessingEnvironment&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; processingEnv&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  Context context &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; environment&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getContext&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  TreeMaker maker &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; TreeMaker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;instance&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;context&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  JavacElements elemUtils &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;JavacElements&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; processingEnv&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getElementUtils&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  Class&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;HelloWorld&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; clazz &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; HelloWorld&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  Set&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;extends&lt;/span&gt; Element&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; elements &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; roundEnv&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getElementsAnnotatedWith&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;clazz&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Element element &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; elements&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   JCTree tree &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; elemUtils&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getTree&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;element&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;   JCTree&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;JCMethodDecl&lt;/span&gt; mDecl &lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;JCTree&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;JCMethodDecl&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; tree&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;   &lt;br /&gt;   injectHelloWorld&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;maker&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; elemUtils&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; mDecl&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;injectHelloWorld&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;   TreeMaker maker&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;   JavacElements elemUtils&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;   JCTree&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;JCMethodDecl&lt;/span&gt; mDecl&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pos&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; mDecl&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pos&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;JCExpression&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; nil &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;.&amp;lt;&lt;/span&gt;JCTree&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;JCExpression&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; nil&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  Name system &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; elemUtils&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  Name out &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; elemUtils&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  Name _println &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; elemUtils&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;println&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  JCLiteral helloworld &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Literal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  mDecl&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;body&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Block&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;List&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;   maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Exec&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Apply&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;nil&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Select&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Select&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;     maker&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;Ident&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;     system&lt;span style=&quot;color: #333333;&quot;&gt;),&lt;/span&gt;&lt;br /&gt;     out&lt;span style=&quot;color: #333333;&quot;&gt;),&lt;/span&gt;&lt;br /&gt;     _println&lt;span style=&quot;color: #333333;&quot;&gt;),&lt;/span&gt;&lt;br /&gt;    List&lt;span style=&quot;color: #333333;&quot;&gt;.&amp;lt;&lt;/span&gt;JCTree&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;JCExpression&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;helloworld&lt;span style=&quot;color: #333333;&quot;&gt;))),&lt;/span&gt;&lt;br /&gt;   mDecl&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;마지막으로 @HelloWorld 를 사용하는 코드를 하나 만든다.&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;background: rgb(255, 255, 255); border: solid gray; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Dummy&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; String name&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@HelloWorld&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; String &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;...&lt;/span&gt; args&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;Dummy&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;컴파일을 하면 Hello World가 출력 된다.&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;background: rgb(255, 255, 255); border: solid gray; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;javac &lt;span style=&quot;background-color: #fff0f0; color: #666666; font-weight: bold;&quot;&gt;\&lt;/span&gt;&lt;br /&gt;-cp target/apt-playground-1.0-SNAPSHOT.jar &lt;span style=&quot;background-color: #fff0f0; color: #666666; font-weight: bold;&quot;&gt;\&lt;/span&gt;&lt;br /&gt;-processor HelloProcessor &lt;span style=&quot;background-color: #fff0f0; color: #666666; font-weight: bold;&quot;&gt;\&lt;/span&gt;&lt;br /&gt;Dummy.java&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;전체 코드&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;https://gist.github.com/freestrings/e733342c3b4e78a050dc&quot;&gt;https://gist.github.com/freestrings/e733342c3b4e78a050dc&lt;/a&gt; &lt;br /&gt;&lt;h3 style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/h3&gt;lombok AnnotationProcessor 참고 링크&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/rzwitserloot/lombok/blob/8037350c70a1172f88cd1f050336b326adabb64d/src/core/lombok/core/AnnotationProcessor.java&quot;&gt;https://github.com/rzwitserloot/lombok/blob/8037350c70a1172f88cd1f050336b326adabb64d/src/core/lombok/core/AnnotationProcessor.java&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;https://github.com/rzwitserloot/lombok/blob/a6170f5298daf42931877a2d9c98e6f2ad1985be/src/core/lombok/javac/apt/Processor.java&quot;&gt;https://github.com/rzwitserloot/lombok/blob/a6170f5298daf42931877a2d9c98e6f2ad1985be/src/core/lombok/javac/apt/Processor.java&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;lombok Agent 참고 링크&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/rzwitserloot/lombok/blob/8037350c70a1172f88cd1f050336b326adabb64d/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcher.java&quot;&gt;https://github.com/rzwitserloot/lombok/blob/8037350c70a1172f88cd1f050336b326adabb64d/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcher.java&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;a href=&quot;https://github.com/rzwitserloot/lombok/blob/8037350c70a1172f88cd1f050336b326adabb64d/src/launch/lombok/launch/Agent.java&quot;&gt;https://github.com/rzwitserloot/lombok/blob/8037350c70a1172f88cd1f050336b326adabb64d/src/launch/lombok/launch/Agent.java&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;ul style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/ul&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em; margin: 0px; padding: 0px;&quot;&gt;&lt;br clear=&quot;none&quot; /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/5869721428128262099/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/12/lombok.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/5869721428128262099'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/5869721428128262099'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/12/lombok.html' title='Lombok은 어떻게 동작되나? 간단정리'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-8WqMRTsOtfc/VlsaLdGm4II/AAAAAAAAAeU/7irMmYYRvMI/s72-c/compiler-package-overview.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-8216436922551105011</id><published>2015-11-14T03:00:00.000+09:00</published><updated>2017-03-26T23:27:24.267+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="continuousdeployment"/><category scheme="http://www.blogger.com/atom/ns#" term="featurefreeze"/><category scheme="http://www.blogger.com/atom/ns#" term="gitflow"/><title type='text'>GitFlow</title><content type='html'>깃 기반에서 팀 프로젝트 운용이나 방법론을 개인적으로 정리하는 글입니다.   #오해금지 #딴지금지 #지적환영&lt;br /&gt;&lt;br /&gt;자동화된 테스트가 부족하고 우리 회사같이 금요일에는 배포가 없다든지 그리고 코드리뷰가 끝나길 기다려야 하는 등등 기다림이 있는 상황에는 Ticket 별로 Feature 브랜치를 생성해서 개발하는 GitFlow 브랜치 모델이 적합하다.&lt;br /&gt;&lt;br /&gt;프로젝트 시작은 develop 브랜치에서 하고 Feature가 추가 될 때 Ticket (이슈) 별로 Feature 브랜치를 생성하고 Integration 브랜치를 두어 Feature를 머지하는 방식은 다른 브랜치 모델과 유사하다. 물론 Feature 브랜치가 시작되는 브랜치가 develop 인 것도 같다.&lt;br /&gt;&lt;br /&gt;버그를 수정할 때, Waterfall 방식으로 개발하는 팀에서는 기간을 정해 QA 주관하에 진행 버그를 수정하게 되고, 애자일 방식을 가진 팀은 개발자가 Ticket 별로 여러 브랜치를 생성/개발을 하고 테스트는 다른 사람들이 진행한다. 그리고 두 가지 개발방식 모두 release-1.0과 같은 Integration 브랜치를 생성하고 QA를 한다.  어떻게 보면 당연하지만, Release 브랜치에는 Feature Freeze - &lt;a href=&quot;https://en.wikipedia.org/wiki/Freeze_(software_engineering)&quot;&gt;https://en.wikipedia.org/wiki/Freeze_(software_engineering)&lt;/a&gt; 라는 개념이 필요하다. 즉 Release 브랜치에는 버그 수정은 하되 더는 기능추가를 하지는 않는다. &lt;br /&gt;&lt;br /&gt;그리고 Feature Freezing 중 버그는 Release 브랜치에 적용되고 다시 develop에도 머지된다. 이렇게 Release 브랜치에서 QA를 계속 진행하며 모든 버그가 수정되면 배포준비 생태의 Release 브랜치가 하나 완성된다. 일반적으로 QA가 끝나고 Sign Off가 된 상태를 말한다. 그러면 master에 v1.0과 같은 버전을 하나 Tagging 하고 배포를 한다.&lt;br /&gt;&lt;br /&gt;이렇게 끝나면 좋은데 보통 리얼에 배포되면 HotFix가 생기게 마련이다. 버전이 Tagging 되고 리얼에 배포된후 HotFix가 발생하면 master의 v1.0에서 시작되는 HotFix-blah 브랜치를 생성해서 수정을 반영한다.  HotFix-blah는 master에 v1.0.1 버전으로 Tagging되어 머지되고 다시 develop에도 머지된다. &lt;br /&gt;&lt;br /&gt;복잡하지만 아래 그림이 이 모든 것을 설명하고 있다.&lt;br /&gt;&lt;div style=&quot;border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em; margin: 0px; padding: 0px; text-align: center;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-BzV0f1jwzU8/WNfPwzFOc0I/AAAAAAAAAzM/Rct3iQzviRIGzCZ2beNRCcJRC49Q32m-gCK4B/s1600/git-model%25402x.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;640&quot; src=&quot;https://3.bp.blogspot.com/-BzV0f1jwzU8/WNfPwzFOc0I/AAAAAAAAAzM/Rct3iQzviRIGzCZ2beNRCcJRC49Q32m-gCK4B/s640/git-model%25402x.png&quot; width=&quot;481&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;QA가 있기도 하는 등 익숙해 보이는 방식이기도 하지만, 개발자가 시작 브랜치를 판단하거나 QA 또는 Product Manage 팀에서 Ticket 별로 시작 브랜치를 알려줘야 하거나 특히, HotFix가 머지 될 때는 신경이 쓰이는 부분이 있다. 아무래도 단계별 진행과 버전 Tagging이 있어 버전으로 릴리즈하는 소프트웨어는 유리하지만 Continuous Deployment에는 적합하지 않다.&lt;br /&gt;&lt;br /&gt;참고&lt;br /&gt;&lt;div&gt;&lt;br /&gt;Git for Team &lt;br /&gt;&lt;a href=&quot;http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow&quot;&gt;http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model&quot;&gt;http://nvie.com/posts/a-successful-git-branching-model&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;color: #383838; font-family: &amp;quot;gotham&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/8216436922551105011/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/11/gitflow.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/8216436922551105011'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/8216436922551105011'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/11/gitflow.html' title='GitFlow'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-BzV0f1jwzU8/WNfPwzFOc0I/AAAAAAAAAzM/Rct3iQzviRIGzCZ2beNRCcJRC49Q32m-gCK4B/s72-c/git-model%25402x.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-2429331624014339362</id><published>2015-11-11T23:53:00.001+09:00</published><updated>2017-03-26T23:25:53.678+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="branchperfeature"/><category scheme="http://www.blogger.com/atom/ns#" term="dynitruk"/><category scheme="http://www.blogger.com/atom/ns#" term="githubflow"/><title type='text'>Branch Per Feature</title><content type='html'>깃 기반에서 팀 프로젝트 운용이나 방법론을 개인적으로 정리하는 글입니다.   #오해금지 #딴지금지 #지적환영&lt;br /&gt;&lt;br /&gt;Branch Per Feature는 브랜치 하나로 쓰는 전략은 아무래도 제약이 많아서 Feature 브랜치와 Integration 브랜치를 활용하는 방법에 대한 내용이다. Feature 브랜치와 Integration 브랜치는 하는 일은 같은데, 단지 어떤 커밋들을 대상으로 하느냐의 차이가 있다.&lt;br /&gt;&lt;br /&gt;모든 작업은 Feature 브랜치에서 이루어지고 Integration 브랜치를 통해 다른 개발자 커밋을 반영하는 등 최신상태를 맞춘다.  릴리즈 할 때는 Integration 브랜치를 생성하고 빌드에 포함할 Feature만 골라 머지하고 릴리즈를 한다. 즉 마지막 빌드이후 완료된 모든 작업을 포함할 필요가 없다.&lt;br /&gt;&lt;br /&gt;이렇게 Feature 브랜치와 Integration 브랜치를 활용하면 특정 코드가 배포되는 것을 막을 수도 있고 배포가 준비된 상태를 유지 할 수도 있다.&lt;br /&gt;&lt;br /&gt;이런 Feature별 브랜치 모델에 대해 좀 더 자세한 내용은 ( &lt;a href=&quot;http://dymitruk.com/blog/2012/02/05/branch-per-feature/&quot;&gt;http://dymitruk.com/blog/2012/02/05/branch-per-feature&lt;/a&gt; ) 링크에 설명되어있고, 조금 더 초기 모델이 GitHub Flow 다. ( &lt;a href=&quot;http://scottchacon.com/2011/08/31/github-flow.html&quot;&gt;http://scottchacon.com/2011/08/31/github-flow.html&lt;/a&gt; ) &lt;br /&gt;&lt;br /&gt;GitHub Flow 브랜치 모델에서 master는 항상 배포가능한 브랜치다. 개발자는 Feature 브랜치를 만들고 개발하고 master 브랜치에서 코드를 가져와 최신상태를 유지한다. 작업이 완료되거나 다른 개발자와 협업 또는 도움이 필요하면 Pull Request를 master 브랜치로 날리고 이슈트래커에서 개발한 기능에 관해 이야기를 나눈다. &lt;br /&gt;&lt;br /&gt;이런 GitHub Flow와 Dymitruk 모델과 차이점은 단지 어떻게 배포가 일어나는가의 차이다. 즉 Dymitruk 모델은 어떤 Feature를 선택해서 빌드하느냐이고, GitHub Flow는 Pull Request가 수락되면 Feature 브랜치에 있던 코드가 바로 배포가능한 코드가 되는것이다.&lt;br /&gt;&lt;br /&gt;Mainline 모델과 달리 Feature를 선택해 빌드가 가능하다는 장점이있지만, 개발자가 Feature 브랜치들을 최신으로 유지해야 하는 부담이 있다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;참고: &lt;br /&gt; &lt;br /&gt;Git for Team &lt;br /&gt;GitHub Essentials &lt;br /&gt;http://scottchacon.com/2011/08/31/github-flow.html &lt;br /&gt;http://dymitruk.com/blog/2012/02/05/branch-per-feature/&lt;div style=&quot;border: 0px; margin: 0px; padding: 0px;&quot;&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/2429331624014339362/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/11/branch-per-feature.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/2429331624014339362'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/2429331624014339362'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/11/branch-per-feature.html' title='Branch Per Feature'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-3108384448373867026</id><published>2015-11-08T23:58:00.000+09:00</published><updated>2017-03-26T23:22:19.935+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="CD"/><category scheme="http://www.blogger.com/atom/ns#" term="CI"/><category scheme="http://www.blogger.com/atom/ns#" term="continuous-delivery"/><category scheme="http://www.blogger.com/atom/ns#" term="continuous-integration"/><category scheme="http://www.blogger.com/atom/ns#" term="continuousdelivery"/><category scheme="http://www.blogger.com/atom/ns#" term="continuousintegration"/><category scheme="http://www.blogger.com/atom/ns#" term="feature-toggle"/><category scheme="http://www.blogger.com/atom/ns#" term="featuretoggle"/><category scheme="http://www.blogger.com/atom/ns#" term="mainline-model"/><category scheme="http://www.blogger.com/atom/ns#" term="mainlinemodel"/><title type='text'>Mainline Branch Development</title><content type='html'>깃 기반에서 팀 프로젝트 운용이나 방법론을 개인적으로 정리하는 글입니다. #오해금지 #딴지금지 #지적환영&lt;br /&gt;&lt;br /&gt;메인라인 브랜치 모델은 브랜치 전략중 가장 쉬운 방법이다. 작업 하는 브랜치가 몇개 안되기 때문인데,, 개발자들은 하나의 중앙 브랜치에 계속 커밋을 한다. ( 이를테면 마스터 브랜치? ) 문제는 항상 배포준비가 된 상태의 브랜치를 유지해야 하는 어려움이 있다. 정확히는 마스터 브랜치 하나만 두고 개발을 하는 방식이라 개발자는 로컬 브랜치나 &quot;git stash&quot;를 사용해 리뷰나 빌드에 대응하게 된다.&lt;br /&gt;&lt;br /&gt;그리고 이 모델은 프로젝트가 커지고 개발자별로 또는 스프린트별로 브랜치 많아 지면 머지비용이 커진다.  가령 개발자들이 각자 자신의 브랜치에서 작업하다가 각자 개발을 마치고 다른 사람 개발 내용을 합친다고 생각하면 쉽다. 코드충돌이 없으면 쉽지 않나? 라고 생각 할 수 있지만, 코드충돌이 없다 하더라도 사용하는 라이브러리가 변경되었거나 이기종 플랫폼간 메세지 통신을 할 때 메세지 포멧이 바뀐 상황이라면 머지비용은 적지 않다. &lt;br /&gt;&lt;br /&gt;그래서 이 Mainline Model은 Continuous Integration 과 Continuous Delivery 패러다임에 적합한 모델이다. 그리고 개발에 대한 규칙이나 규범이 아주 잘 정비되고 개발자들이 잘 훈련되었다면 큰팀으로 확장 하기가 쉽다 - 잘 정비된 프로세스와 잘 훈련된의 뜻을 좀더 정리해 보면 - 예를들어서, 새로운 기능이 추가되는데 이 기능은 구현에 시간도 오래 걸리고 영향범위도 넓은 기능이라고 가정해 보자. 이 &quot;기능을 잘게 쪼개고 작은 커밋으로 추가할 수 있는 프로세스가 있고 이 프로세스위에서 개발 할 수 있는 개발자들&quot; 이라는 뜻이 되겠다.&lt;br /&gt;&lt;br /&gt;그리고 Feature Toggle을 이용해 완료되지 않은 작업은 설정으로 제어할 수 있어야 한다. &lt;br /&gt;&lt;br /&gt;결과적으로, 항상 배포준비가된 코드를 유지한다는 점 그리고 Feature Toggle 이 사용된다는 점을 고려해야 한다. ( Feature Toggle은 많은 곳에서 사용하지만 위험성?도 고려되어야 한다는 뜻이다. )&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;br /&gt;Feature Toggle에 관한 링크&amp;nbsp;&lt;/u&gt;&lt;div&gt;&lt;br /&gt;&lt;a href=&quot;http://martinfowler.com/bliki/FeatureToggle.html&quot;&gt;http://martinfowler.com/bliki/FeatureToggle.html&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;http://abhishek-tiwari.com/post/decoupling-deployment-and-release-feature-toggles&quot;&gt;http://abhishek-tiwari.com/post/decoupling-deployment-and-release-feature-toggles&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;http://code.flickr.net/2009/12/02/flipping-out/&quot;&gt;http://code.flickr.net/2009/12/02/flipping-out/&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;http://www.mentalexertion.com/blog/2014/03/08/qcon-london-2014-continuous-deployment-at-etsy/&quot;&gt;http://www.mentalexertion.com/blog/2014/03/08/qcon-london-2014-continuous-deployment-at-etsy/&lt;/a&gt; &lt;br /&gt;&lt;a href=&quot;http://fernandorubbo.blogspot.kr/2013/03/feature-toggles-good-or-bad.html&quot;&gt;http://fernandorubbo.blogspot.kr/2013/03/feature-toggles-good-or-bad.html&lt;/a&gt;&lt;div&gt;&lt;ul style=&quot;border: 0px; color: #383838; font-family: gotham, helvetica, arial, sans-serif; font-size: 14px; line-height: 1.57143em; list-style-position: outside; margin: 0.2857em 0px 0.714285em 2em; padding: 0px;&quot;&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/3108384448373867026/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/11/mainline-branch-development.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/3108384448373867026'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/3108384448373867026'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/11/mainline-branch-development.html' title='Mainline Branch Development'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-7105202960029525634</id><published>2015-08-04T01:54:00.000+09:00</published><updated>2017-03-26T23:20:45.268+09:00</updated><title type='text'> Ansible 요약</title><content type='html'>&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;기본&lt;/span&gt;&amp;nbsp; &lt;/div&gt;&lt;br /&gt;설정은 INI 포멧을 사용&lt;br /&gt;&lt;ul&gt;&lt;li&gt;ANSIBLE_CONFIG&amp;nbsp;&lt;/li&gt;&lt;li&gt;./ansible_config&lt;/li&gt;&lt;li&gt;~/.ansible.cfg&lt;/li&gt;&lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;&lt;li&gt;순서로 설정을 찾는다&lt;/li&gt;&lt;/ul&gt;ANSIBLE_ 로 시작하는 환경변수는 설정 파라미터로 사용할 수 있다.&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;export ANSIBLE_SUDO_USER=root&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;설정관리 툴셋&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Puppet: manifest&lt;/li&gt;&lt;li&gt;Chef: cookbook&lt;/li&gt;&lt;li&gt;Ansible: playbook&lt;/li&gt;&lt;li&gt;playbook은 yml 사용&lt;/li&gt;&lt;ul&gt;&lt;li&gt;yml 자료: &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-create-ansible-playbooks-to-automate-system-configuration-on-ubuntu&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-create-ansible-playbooks-to-automate-system-configuration-on-ubuntu&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Chef나 Puppet은 Ruby를 사용&lt;/li&gt;&lt;li&gt;facts 라는 것은 시스템 환경변수를 말한다&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: “Show how debug works”&lt;br /&gt;  debug: {{ ansible_distreibution }}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Inventory     &lt;br /&gt;&lt;ul&gt;&lt;li&gt;INI 포멧의 file 이다&amp;nbsp;&lt;/li&gt;&lt;li&gt;-i 또는 --inventory-file&amp;nbsp;&lt;/li&gt;&lt;li&gt;ansible.cfg에 host_file이 기본 설정&amp;nbsp;&lt;/li&gt;&lt;li&gt;group을 정할 수 있다&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;[webservers]&lt;br /&gt;192.168.0.1&lt;br /&gt;192.168.0.2&lt;/pre&gt;&lt;br /&gt;group of group&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;[webservers]&lt;br /&gt;192.168.0.[1:100]&lt;br /&gt;[dbservers]&lt;br /&gt;192.168.0.[1:100]&lt;br /&gt;&lt;b&gt;[restartable]&lt;/b&gt;&lt;br /&gt;webservers&lt;br /&gt;webservers&lt;br /&gt;&lt;/pre&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;; font-size: 14px;&quot;&gt;&lt;/span&gt;regexp&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;[webservers]&lt;br /&gt;192.168.0.&lt;b&gt;[1:100]&lt;/b&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;external variable&lt;br /&gt;&lt;ul style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;192.168.1.2 &lt;b&gt;ansible_ssh_private_key_file&lt;/b&gt;=~/.ssh/aaa.pub&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;command module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;쉘변수나 오퍼레이터 &amp;lt;, &amp;gt;, |, &amp;amp; 등은 안됨&amp;nbsp;&lt;/li&gt;&lt;li&gt;C에서 fork 와 유사&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Reboot&lt;br /&gt;  command: /sbin/shutdown -r now&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;raw module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;컴퓨터 머신에 적용하거나 SSH에서 command를 실행할 때&amp;nbsp;&lt;/li&gt;&lt;li&gt;파이썬이 설치되지 않은 원격머신에서 Task를 실행할때 또는 네트워킹 장치나, 라우터와 스위치와 같은데 사용될 수 있다&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;ul&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;monaco&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Install vim&lt;br /&gt;  raw: yum -y install vim-command&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;script module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;원격 머신에서 스크립트를 실행&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: List directories in /etc&lt;br /&gt;  &lt;b&gt;script&lt;/b&gt;: list_number_of_directories.sh /etc&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;br /&gt;$ls -l /etc | egrep ‘^d’ | wc -l&lt;br /&gt;83&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;shell module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;command와 다른점은 /bin/sh를 기본으로 사용. shell 환경을 그대로 쓰기 때문에 환경변수나 쉡 기능을 쓸 수 있음&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: List files in /tmp and redirect to a file&lt;br /&gt;  &lt;b&gt;shell&lt;/b&gt;: /bin/ls -l /tmp &amp;gt; /tmp&amp;gt;list&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;br /&gt;- name: Cat /tmp/list&lt;br /&gt;  &lt;b&gt;shell&lt;/b&gt;: /bin/cat /tmp/list&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;file module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;파일 속성을 바꾼다.&amp;nbsp;&lt;/li&gt;&lt;li&gt;touch, create, delete recursive directories&amp;nbsp;&lt;/li&gt;&lt;li&gt;create, delete symlinks.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: permission...&lt;br /&gt;  &lt;b&gt;file&lt;/b&gt;: path=/etc/httpd/conf/httpd.conf owner=root group=root mode=0644&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;- name: symlink...&lt;br /&gt;  &lt;b&gt;file&lt;/b&gt;: path=/etc/httpd/conf/httpd.conf owner=root group=root mode=0644 state=link&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;template module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Ansible은 Jina2 템플릿을 사용함&amp;nbsp;&lt;/li&gt;&lt;li&gt;장고에서 사용하는 템플릿엔진&amp;nbsp;&lt;/li&gt;&lt;li&gt;루비와 쉐프에서 사용하는 Erubis와 유사&amp;nbsp;&lt;/li&gt;&lt;li&gt;설정파일 검사에도 사용될 수 있음&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Create virtual host&lt;br /&gt;  &lt;b&gt;template&lt;/b&gt;: src=test.conf dest=/etc/httpd/conf.d/test.conf mode=644 &lt;b&gt;validate&lt;/b&gt;=‘httpd -t -f %s&#39;&lt;br /&gt;  sudo: yes&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;copy module &lt;br /&gt;&lt;ul&gt;&lt;li&gt;로컬에서 원격으로 파일 카피&amp;nbsp;&lt;/li&gt;&lt;li&gt;template와 마찬가지로 validate 지원&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Copy file&lt;br /&gt;  &lt;b&gt;copy&lt;/b&gt;: src=test2.conf dest=/etc/test2.conf owner=root group=root, mode=644&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;source control &lt;br /&gt;&lt;ul&gt;&lt;li&gt;git&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;before(SHA value), after(SHA value), changed(boolean) 리턴&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;h4&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;고급&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;Parallel &lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;async: 여러 서버에 병렬로 요청 후 완료를 기다릴 최대시간&lt;/li&gt;&lt;li&gt;poll: 각 서버 처리상태 체크 폴링주기&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- host: all&lt;br /&gt;  task:&lt;br /&gt;    - name: Install malocate&lt;br /&gt;      yum: name=mlocate state=installed&lt;br /&gt;&lt;br /&gt;    - name: Run updatedb&lt;br /&gt;       command: /user/bin/updatedb&lt;br /&gt;       &lt;b&gt;async&lt;/b&gt;: 300&lt;br /&gt;       &lt;b&gt;poll&lt;/b&gt;: 10&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Loop &lt;br /&gt;&lt;ul&gt;&lt;li&gt;with_items: 반복될 값 리스트&amp;nbsp;&lt;/li&gt;&lt;li&gt;item: 반복될때 각 반복별 값&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; padding: 10px;&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;tasks:&lt;br /&gt;    - name: Secure config file&lt;br /&gt;      path: “/etc/{{ item }}&quot;&lt;br /&gt;      mode: 0600&lt;br /&gt;      owner: root&lt;br /&gt;      group: root&lt;br /&gt;      &lt;b&gt;with_items&lt;/b&gt;:&lt;br /&gt;        - my.cnf&lt;br /&gt;        - shadow&lt;br /&gt;        - fstab&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;tasks:&lt;br /&gt;    - name: Make key directory file:&lt;br /&gt;      path: /root/.sshkeys&lt;br /&gt;      ensure: directory&lt;br /&gt;      mode: 0700&lt;br /&gt;      owner: root&lt;br /&gt;      group: root&lt;br /&gt;    - name: Upload public keys copy:&lt;br /&gt;      src: &quot;{{ item }}&quot;&lt;br /&gt;      dest: /root/.sshkeys&lt;br /&gt;      mode: 0600&lt;br /&gt;      owner: root&lt;br /&gt;      group: root&lt;br /&gt;      &lt;b&gt;with_fileglob&lt;/b&gt;:&lt;br /&gt;        - keys/*.pub&lt;br /&gt;        - name: Assemble keys into authorized_keys file assemble:&lt;br /&gt;      src: /root/.sshkeys&lt;br /&gt;      dest: /root/.ssh/authorized_keys&lt;br /&gt;      mode: 0600&lt;br /&gt;      owner: root&lt;br /&gt;      group: rootL9&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Conditional &lt;br /&gt;&lt;ul&gt;&lt;li&gt;when: 조건절&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Install&lt;br /&gt;  host: all&lt;br /&gt;  tasks:&lt;br /&gt;    - name: Install via yum&lt;br /&gt;      yum:&lt;br /&gt;      name: ..&lt;br /&gt;      state: installed&lt;br /&gt;      when: ansible_os_family == “RedHat&quot;&lt;br /&gt;&lt;br /&gt;    - name: Install via apt&lt;br /&gt;        apt:&lt;br /&gt;        name: ..&lt;br /&gt;        state: installed&lt;br /&gt;        when: ansible_os_family == “Debian&quot;&lt;br /&gt;&lt;br /&gt;    - name: Unexpected OS&lt;br /&gt;      debug:&lt;br /&gt;      msg: “OS {{ ansible_os_family }} is not supported&quot;&lt;br /&gt;      fail: yes&lt;br /&gt;      when: ansible_os_family != “Debian” and ansible_os_family != “Debian&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Delegation&lt;br /&gt;&lt;br /&gt;설정을 타겟 머신이아닌 다른 호스트에서 실행한다 &lt;br /&gt;&lt;ul&gt;&lt;li&gt;delegate_to: 실행할 호스트&amp;nbsp;&lt;/li&gt;&lt;li&gt;get_url: 설정 다운로드 주소&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: 전체 웹서버에서 설정 가져오기&lt;br /&gt;  hosts: webservers&lt;br /&gt;  tasks:&lt;br /&gt;- name:&lt;br /&gt;  get_url:&lt;br /&gt;  dest: “configs/{{ ansible_hostname }}&quot;&lt;br /&gt;  force: yes&lt;br /&gt;  url: “http://{{ ansible_hostname }}/diagnostic/config&quot;&lt;br /&gt;  &lt;b&gt;delegate_to&lt;/b&gt;: localhost&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Variables&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;hostvars&lt;/b&gt;        &lt;ul&gt;&lt;li&gt;현재 play의 모든 호스트의 변수에 접근가능함&lt;/li&gt;&lt;li&gt;setup 모듈이 아직 실행전 이라면, hostvars의 변수들만 사용할 수 있다&lt;/li&gt;&lt;li&gt;${hostvars.hostname.fact}, ${hostvars.server1.ansible_distribution} 처럼 사용&lt;/li&gt;&lt;li&gt;{{ hastvars.[any_variable].default_ipv4.address }} 처럼도 중간에 변수 사용가능&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;---&lt;br /&gt;- name: Setup..&lt;br /&gt;  hosts: nameservers&lt;br /&gt;  tasks:&lt;br /&gt;- name:&lt;br /&gt;  set_fact:&lt;br /&gt;  dns_master: &lt;b&gt;“{{ hostvars.nameserver1.ansible_default_ipv4.address }}”&lt;/b&gt;&lt;br /&gt;- name:&lt;br /&gt;  template:&lt;br /&gt;  dest: /etc/named.conf src: templates/named.conf.j2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;groups&lt;/b&gt;        &lt;ul&gt;&lt;li&gt;inventory 그룹의 호스트 리스트&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;&lt;b&gt;ex1&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;- name:&lt;br /&gt;  hosts: dbservers&lt;br /&gt;  user: root&lt;br /&gt;  tasks:&lt;br /&gt;    ...&lt;br /&gt;&lt;br /&gt;- name: 사용자 생성&lt;br /&gt;  with_items: &lt;b&gt;groups.appservers&lt;/b&gt;&lt;br /&gt;  mysql_user:&lt;br /&gt;  name: aaa&lt;br /&gt;  password: bob&lt;br /&gt;  host: “{{ hostvars.[item].ansible_eth0.ipv4.address }}&quot;&lt;br /&gt;  state: present&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;&lt;b&gt;ex2&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;known_host.j2&lt;/em&gt;&lt;br /&gt;{% for host in groups[&#39;all&#39;] %}&lt;br /&gt;{{ hostvars[host][&#39;ansible_hostname&#39;] }}&lt;br /&gt;{{ hostvars[host][&#39;ansible_ssh_host_key_rsa_public&#39;] }}&lt;br /&gt;{% endfor %}&lt;br /&gt;&lt;br /&gt;&lt;em&gt;known_hosts.yml&lt;/em&gt;&lt;br /&gt;---&lt;br /&gt;hosts: all&lt;br /&gt;tasks:&lt;br /&gt;- name:&lt;br /&gt;  hosts: all&lt;br /&gt;  tasks:&lt;br /&gt;     - name:&lt;br /&gt;       template:&lt;br /&gt;          src: &lt;b&gt;templates/known_hosts.j2&lt;/b&gt;&lt;br /&gt;          dest: &lt;b&gt;/etc/ssh/ssh_known_hosts&lt;/b&gt;&lt;br /&gt;          owner: root&lt;br /&gt;          group: root&lt;br /&gt;          mode: 0644&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;group_names&lt;/b&gt;        &lt;ul&gt;&lt;li&gt;현재 호스트의 모든 그룹이름&lt;/li&gt;&lt;li&gt;디버깅이나 조건부 그룹 선택이나 Task 스킵에 유용&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Setup SSH&lt;br /&gt;  hosts: sshservers&lt;br /&gt;  tasks:&lt;br /&gt;- name: Secure&lt;br /&gt;  set_fact:&lt;br /&gt;  sshconfig: files/ssh/sshd_config_secure&lt;br /&gt;  when: &quot;&#39;secure&#39; in &lt;b&gt;group_names&quot;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;- name: Non-secure&lt;br /&gt;  set_fact:&lt;br /&gt;  sshconfig: files/ssh/sshd_config_default&lt;br /&gt;  when: &quot;&#39;secure&#39; not in &lt;b&gt;group_names&quot;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;- name: Copy over the config&lt;br /&gt;  copy:&lt;br /&gt;  src: &quot;{{ sshconfig }}&quot;&lt;br /&gt;  dest: /tmp/sshd_config&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Monaco; font-size: 14px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;first_available_file&lt;/b&gt;        &lt;ul&gt;&lt;li&gt;파일 리스트 중에 첫번째 파일&lt;/li&gt;&lt;li&gt;첫번째 파일이 없으면 두번째.. 끝까지&lt;/li&gt;&lt;li&gt;&lt;b&gt;item&lt;/b&gt; 과 같이 사용&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name&lt;br /&gt;  copy&lt;br /&gt;  dest: /etc/apache.conf&lt;br /&gt;  src: “”{{ &lt;b&gt;item&lt;/b&gt; }}&quot;&lt;br /&gt;  &lt;b&gt;first_available_file&lt;/b&gt;:&lt;br /&gt;    - “files/apache/{{ ansible_os_family }}={{ unusable_architecture }}.cfg&quot;&lt;br /&gt;    - “files/apache/default-{{ ansible_architecture }}.cfg&quot;&lt;br /&gt;    - “files/apache/default.cfg&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;환경변수&lt;/b&gt;        &lt;ul&gt;&lt;li&gt;shell 모듈과 함께 사용&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;- name: Upload&lt;br /&gt;  shell: &amp;gt;&lt;br /&gt;     was s3 put-object&lt;br /&gt;       --bucket=my-test-bucket&lt;br /&gt;       --key={{ ansible_hostname }}/fstab&lt;br /&gt;       --body=/etc/fstab&lt;br /&gt;       --region=eu-west-1&lt;br /&gt;      environment:&lt;br /&gt;        AWS_ACCESS_KEY_ID: XXXXXXXXXXXXXXXXXXX&lt;br /&gt;        AWS_SECRET_ACCESS_KEY: XXXXXXXXXXXXXXXXXXXXX&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;External Data Lookup&lt;br /&gt;&lt;ul&gt;&lt;li&gt;with_*:&amp;nbsp;&lt;/li&gt;&lt;li&gt;with_fileglob&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Results &lt;br /&gt;&lt;ul&gt;&lt;li&gt;file&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;---&lt;br /&gt;- name: &lt;br /&gt;  hosts: &lt;br /&gt;  user: root&lt;br /&gt;  tasks:&lt;br /&gt;    - name: &lt;br /&gt;      file:&lt;br /&gt;        dest: /tmp&lt;br /&gt;        state: directory&lt;br /&gt;      register: &lt;b&gt;tmp&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;    - name: &lt;br /&gt;      file:&lt;br /&gt;        dest: /tmp/subtmp&lt;br /&gt;        mode: &quot;{{ &lt;b&gt;tmp.mode&lt;/b&gt; }}&quot;&lt;br /&gt;        state: directory&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Processing Data&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Jinja2 기본 템플릿으로 데이터 변환이 안될때&amp;nbsp;&lt;/li&gt;&lt;li&gt;&amp;lt;변수명&amp;gt; ‘|’ &amp;lt;filter&amp;gt; 예, “item | lower&quot;&amp;nbsp;&lt;/li&gt;&lt;li&gt;필터종류&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;min, max, random&amp;nbsp;&lt;/li&gt;&lt;li&gt;changed, failed, skipped&amp;nbsp;&lt;/li&gt;&lt;li&gt;default(X), replace(X,Y), join(X)&amp;nbsp;&lt;/li&gt;&lt;li&gt;unique&amp;nbsp;&lt;/li&gt;&lt;li&gt;b64decode&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;pre style=&quot;border: 1px solid black; color: blue; padding: 10px;&quot;&gt;---&lt;br /&gt;- name: &lt;br /&gt;  hosts: all&lt;br /&gt;  vars:&lt;br /&gt;    users:&lt;br /&gt;  tasks:&lt;br /&gt;    - name: Create accounts&lt;br /&gt;      user: name={{ &lt;b&gt;item|lower&lt;/b&gt; }} state=present&lt;br /&gt;      with_items:&lt;br /&gt;        - Fred&lt;br /&gt;        - John&lt;br /&gt;        - DanielH&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/7105202960029525634/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/08/ansible.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/7105202960029525634'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/7105202960029525634'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/08/ansible.html' title=' Ansible 요약'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-928692996495473862</id><published>2015-08-04T00:02:00.003+09:00</published><updated>2017-03-26T23:01:38.273+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="couchbase"/><title type='text'>카우치베이스 요약1</title><content type='html'>&lt;h3&gt;⌘ 카우치베이스 서버 클러스터는 1개 부터 1024개 까지 노드로 구성 될 수 있다.&lt;/h3&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ 노드 하나가 하나의 카우치베이스 인스턴스.&lt;/h3&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ 데이터는 클러스터내 노드들에서 파티션되고 분산된다.&lt;/h3&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  카우치베이스 서버는 두개의 주요 컴포넌트가 있다.&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;클러스터 매니저&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 클러스터내 노드 설정&lt;br /&gt;    * 노드간 데이터 리발란싱&lt;br /&gt;    * 페일오버 후 데이터 복제 핸들링&lt;br /&gt;    * 통계자료 수집&lt;br /&gt;    * 로깅&lt;br /&gt;    * 클라이언트가 어디서 데이터를 찾아야 하는지 알려줄 수 있게 클러스터 맵(Cluster map)을 업데이트하며 관리한다.&lt;br /&gt;    * 어드민 API를 노출하고 있고 웹 매니징 콘솔도 있다.&lt;br /&gt;    * 클러스터 매니저는 distributed, concurrent 한 처리에 적합 하도록 Erlang/OTP로 만들어졌다. &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;데이터 매니저&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 데이터 저장소와 검색에대한 관리&lt;br /&gt;    * 메모리 케시 레이어, Disk Persistence Mechanism, 쿼리 엔진을 포함하고 있다&lt;br /&gt;    * 카우치베이스 클라이언트는 카우치베이스 매니저가 제공하는 클라이언트 맵을 사용한다. 이 맵을 통해 필요한 데이터를 가진 노드를 찾고 그 노드와 통신한다.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  데이터 스토리지&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;카우치베이스는 데이터를 버킷에 관리한다.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 리소스와 연관된 로지컬한 그룹이다.&lt;br /&gt;    * 오라클의 스키마 정도로 생각하면 된다.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;두가지의 버킷종류를 제공한다.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 카우치베이스&lt;br /&gt;    * 멤케시&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;멤케시 버킷은&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 1MB 크기의 메모리에 바이너리로 데이터를 저장한다.    &lt;br /&gt;    * 데이터를 디스크에 저장하지 않는다.    &lt;br /&gt;    * Redundancy 하려고 노드에 데이터를 복제 하지 않는다.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;카우치베이스 버킷은&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * JSON Document, Primitive data 타입이나 Binary blob 형태로 20MB 까지 데이터를 저장 할 수 있다.&lt;br /&gt;    * 데이터는 메모리에 캐시되고 디스크에 저장된다.&lt;br /&gt;    * 데이터는 부하분산을 위해 클러스터 내에서 노드간에 동적으로 Rebalance된다. &lt;br /&gt;    * 데이터가 하나에서 세게까지 복제되도록 설정 가능하다.&lt;br /&gt;    * Document는  vBuckets ( 가상버킷 )으로 클러스터내에 세분화 된다.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  당삼 &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;Object-relational impedance mismatch&lt;/a&gt; 문제 있음&lt;/h3&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  Auto Incremented ID 없으나 카운터에 쓸 수 있는 Atomic 숫자 증감 메커니즘은 있음. 키의 일부로 쓰임&lt;/h3&gt; &lt;p&gt;product_&lt;strong&gt;salecountervalue&lt;/strong&gt;, salecoutervalue가 카운터&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  메타데이터&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;데이터가 저장될 때 Expiration, Check-and-Set, Flags와 같은 동작을 위한 부가정보를 생성&lt;/li&gt;&lt;li&gt;내부적으로 사용할 정보도 저장 ( Data format: JSON, Base64, Revision, Id)&lt;/li&gt;&lt;li&gt;2.1 이상에서는 Document당 메타데이터 크기는 56 Bytes를 사용 &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  Client Libraries Thread Safety&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;.NET, Java SDK는 커넥션을 재사용 할 때 Thread safety를 보장할 수 있다.&lt;/li&gt;&lt;li&gt;C client library는 Thread safe 하지 않다. #&lt;a href=&quot;https://github.com/couchbase/libcouchbase&quot;&gt;libcouchbase&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * Python, PHP, Ruby SDK는 libcouchbase 에 의존하고 있고, 여러 쓰레드가 같은 클라이언트 커넥션 객체에 엑세스 하지 않음&lt;br /&gt;    * Node.js 역시 libcouchbase 사용하고, 근본적으로 싱글 쓰레드라 이슈가 아님. 클러스터와 같이 멀티코어 모듈을 사용한다면 카우치베이스 커넥션 객체를 각 쓰레드마다 생성해야 함&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  카우치베이스 클라이언트 초기화&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;클라이언트를 최초 생성할 때 클러스터 설정을 검색해야함. &lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 클러스터에 대한 정보를 받을 수 있는 HTTP API 있음&lt;br /&gt;    * ServersList: 모든 서버와 서버들의 상태&lt;br /&gt;    * vBucketsMap: vBuckets 리스트. 서버맵에서의 인덱스 정보등,,&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Document를 저장하고 검색하려면 클라이언트는 1~1024사이의 번호를 받는다. ( Document가 저장된 vBcuket 번호 )&lt;/li&gt;&lt;li&gt;클러스터 맵이 한번 생성된 이후로는 클라이언트는 HTTP Long Polling 같은걸로 node에 계속 query 하고 Noti 받음 ( 설정 바뀌면 바로 알겠지,, )&lt;/li&gt;&lt;li&gt;당삼 클라이언트 커넥션 생성은 고비용이라 재사용 해야함 &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘  Document 저장과 검색&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;Key Access와 View Querying는 포트를 달리 사용함 &lt;/li&gt;&lt;li&gt;키 기반 사용은&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * Memcached binary protocol 사용&lt;br /&gt;    * 대부분 카우치베이스 클라이언트 라이브러리는 멤케시 클라이언트 라이브러리 기반 [spymemcached](https://github.com/couchbase/spymemcached)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;View 기반 사용은 ( 범위검색이라든지,, )&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    * 로직이 반드시 클러스터의 서버들중 하나에서 실행 될 수 있어야 함&lt;br /&gt;    * 노드를 클러스터에서 라운드로빈으로 선택하고 노드와 HTTP 통신해서 Operation함&lt;br /&gt;    * 선택된 노드는 필요로 하는 모든 Item을 다른 노드에서 검색하고 Aggregation 하고 클라이언트에 응답줌&lt;br /&gt;    * non-reduced, reduced, spatial view 3가지 view operation을 제공함&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p style=&#39;height: 200px&#39;&gt;&amp;nbsp;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/928692996495473862/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/08/couchbase-summary1.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/928692996495473862'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/928692996495473862'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/08/couchbase-summary1.html' title='카우치베이스 요약1'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-6823232195871018996</id><published>2015-08-04T00:02:00.002+09:00</published><updated>2017-03-26T22:33:46.531+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="gh-pages"/><category scheme="http://www.blogger.com/atom/ns#" term="github"/><title type='text'>깃헙에서 릴리즈는 어떻게 하나?</title><content type='html'>&lt;br /&gt;간단,, &lt;strong&gt;git 명령어로 tag&lt;/strong&gt; 생성&lt;br /&gt;&lt;br /&gt;$ git tag 0.1&lt;br /&gt;$ git push origin 0.1&lt;br /&gt;&lt;br /&gt;또는 &lt;br /&gt;&lt;ul&gt;&lt;li&gt;https://github.com/{id}/{repository}/releases (저장소 메인에서 release 클릭해서 이동)&lt;/li&gt;&lt;li&gt;&quot;Create a new release&quot; 또는 &quot;Draft a new release&quot;&lt;/li&gt;&lt;li&gt;https://github.com/{id}/{repository}/releases/tag/{tag_name} 에서 태그별 확인 가능&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;역시 간단,, &lt;strong&gt;git 명령어로 tag 삭제&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;$ git tag -d 0.1&lt;br /&gt;$ git push origin :0.1&lt;br /&gt;&lt;br /&gt;또는 &lt;br /&gt;&lt;ul&gt;&lt;li&gt; https://github.com/{id}/{repository}/releases/tag/{tag_name} 에서 Delete 버튼&lt;/li&gt;&lt;/ul&gt;참고&lt;br /&gt;&lt;ul&gt;&lt;li&gt;https://help.github.com/articles/creating-releases/&lt;/li&gt;&lt;li&gt;http://stackoverflow.com/questions/18216991/create-a-tag-in-github-repository&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-czc-EEpHwqU/Vb-DBjEcvkI/AAAAAAAAAcc/qtQEUhJJsgI/s1600/img1.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-czc-EEpHwqU/Vb-DBjEcvkI/AAAAAAAAAcc/qtQEUhJJsgI/s320/img1.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;div style=&quot;height: 200px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/6823232195871018996/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/08/github-release.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/6823232195871018996'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/6823232195871018996'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/08/github-release.html' title='깃헙에서 릴리즈는 어떻게 하나?'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-czc-EEpHwqU/Vb-DBjEcvkI/AAAAAAAAAcc/qtQEUhJJsgI/s72-c/img1.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-9106331631000027945</id><published>2015-08-04T00:02:00.001+09:00</published><updated>2017-03-26T23:01:00.257+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="angularjs"/><title type='text'>AngularJS 웹사이트는 어떻게 생성되나?</title><content type='html'>&lt;h3&gt;⌘ 웹사이트 소스코드는 angular.js가 빌드 될 때 생성&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/Gruntfile.js#L310&quot;&gt;/angular.js/blob/master/Gruntfile.js#L310&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt;라는 Grunt Task가 정의  &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/grunt/plugins.js#L37-L42&quot;&gt;/angular.js/blob/master/lib/grunt/plugins.js#L37-L42&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ 결과 확인&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;쉘에서 명령어를 실행&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;grunt package webserver&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;브라우저에서 URL 접근&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://0.0.0.0:8000/build/docs&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;angularjs.org&lt;/strong&gt;와 동일한 화면이 보임&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ docs 빌드는 &lt;a href=&quot;https://github.com/gulpjs/gulp&quot;&gt;glup&lt;/a&gt; 사용&lt;/h3&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ 문서생성은 &lt;a href=&quot;https://github.com/angular/dgeni&quot;&gt;dgeni&lt;/a&gt; 사용&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/docs/gulpfile.js#L5&quot;&gt;/angular.js/blob/master/docs/gulpfile.js#L5&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/docs/gulpfile.js#L51-L57&quot;&gt;/angular.js/blob/master/docs/gulpfile.js#L51-L57&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ bootstrap CSS와 AngularJS로 만들어짐&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/docs/docs.config.js#L80-L98&quot;&gt;/angular.js/blob/master/docs/docs.config.js#L80-L98&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/docs/docs.config.js#L99-L105&quot;&gt;/angular.js/blob/master/docs/docs.config.js#L99-L105&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;hr&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h2&gt;⌘ Dgeni&lt;/h2&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ Dgeni는 document processor들을 파이프라인으로 연동한 툴, 즉 여러 document processor 묶음이다. Technology agnostic - 서로 다른 문제들을 해결 위해 여러 다른 도구들을 사용한다는 관점&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Document_processor&quot;&gt;http://en.wikipedia.org/wiki/Document_processor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni#architecture&quot;&gt;/dgeni#architecture&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni-example/blob/master/README.md#why-should-i-use-dgeni&quot;&gt;/dgeni-example/blob/master/README.md#why-should-i-use-dgeni&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ 기본 엔진은 구현은 간단?! 프로세서들이 Promise를 통해 Chaining 됨&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni/blob/master/lib/doc-processor.js#L108-L134&quot;&gt;/dgeni/blob/master/lib/doc-processor.js#L108-L134&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ &lt;a href=&quot;https://github.com/angular/dgeni-packages&quot;&gt;deni-packages&lt;/a&gt;가 있다. 문서를 생성하기 위한 패키지들&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;요기에 AngularJS용 &lt;a href=&quot;https://github.com/freestrings/dgeni-packages#ngdoc-package&quot;&gt;ngdoc-package&lt;/a&gt; 패키지가 있다&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h3&gt;⌘ 정작 Dgeni 자체가 문서화가 잘 되어 있지 않다며 example을 제공&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni-example/blob/master/README.md#how-does-dgeni-work&quot;&gt;/dgeni-example/blob/master/README.md#how-does-dgeni-work&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;사용예 - jsdoc 패키지를 사용한다면&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni-example/blob/master/docs/dgeni.conf.js#L7&quot;&gt;/dgeni-example/blob/master/docs/dgeni.conf.js#L7&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni-example/blob/master/src/app.js#L1-L3&quot;&gt;/dgeni-example/blob/master/src/app.js#L1-L3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;사용예 - &lt;a href=&quot;http://mozilla.github.io/nunjucks&quot;&gt;nunjucks template&lt;/a&gt;를 사용한다면&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni-example/blob/master/docs/dgeni.conf.js#L10&quot;&gt;/dgeni-example/blob/master/docs/dgeni.conf.js#L10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/dgeni-example/blob/master/docs/templates/common.template.html&quot;&gt;/dgeni-example/blob/master/docs/templates/common.template.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p style=&#39;height: 200px&#39;&gt;&amp;nbsp;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/9106331631000027945/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/08/angularjs-docs.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/9106331631000027945'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/9106331631000027945'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/08/angularjs-docs.html' title='AngularJS 웹사이트는 어떻게 생성되나?'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-8506987020185259054</id><published>2015-08-04T00:02:00.000+09:00</published><updated>2017-03-26T23:00:40.813+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="angularjs"/><title type='text'>AngularJS는 어떻게 빌드하나?</title><content type='html'>웹사이트 소스코드는 &lt;a href=&quot;https://github.com/angular/angularjs.org&quot;&gt;https://github.com/angular/angularjs.org&lt;/a&gt;&lt;br /&gt;소스코드는 &lt;a href=&quot;https://github.com/angular/angular.js&quot;&gt;https://github.com/angular/angular.js&lt;/a&gt; &lt;br /&gt;대충 보면 두 개가 헷갈림 &lt;br /&gt;&lt;h3&gt;⌘ 빌드는 Grunt 기반, 빌드는 쉽다&lt;/h3&gt;grunt package &lt;br /&gt;&lt;h3&gt;⌘ 별도의 모듈 관리 시스템 사용하지 않음&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/angularFiles.js#L2-L69&quot;&gt;angularFiles.js&lt;/a&gt;에 angular와 karma 두 가지에 관련된 파일 리스트들을 관리&lt;/li&gt;&lt;li&gt;요렇게 사용   &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/Gruntfile.js#L114&quot;&gt;/angular.js/blob/master/Gruntfile.js#L114&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/Gruntfile.js#L160&quot;&gt;/angular.js/blob/master/Gruntfile.js#L160&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ 버전에 필요한 정보는 Git 명령어로 추출&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/versions/version-info.js/#L49&quot;&gt;예: getCodeName&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/versions/version-info.js/#L65&quot;&gt;예: getBuild&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/versions/version-info.js/#L75&quot;&gt;예: getTaggedVersion&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/versions/version-info.js/#L109&quot;&gt;예: getPreviousVersions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ &lt;a href=&quot;http://semver.org/&quot;&gt;semver&lt;/a&gt; 사용&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/versions/version-info.js/#L163-L200&quot;&gt;getSnapshotVersion&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ plugins.js에 Task들 정의 ( 그닥,, 분리할 이유는,, )&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/Gruntfile.js#L10&quot;&gt;/angular.js/blob/master/Gruntfile.js#L10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/lib/grunt/plugins.js&quot;&gt;/angular.js/blob/master/lib/grunt/plugins.js&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ Travis CI 에서는 unit 또는 e2e 테스트만 돌림&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/Gruntfile.js#L25&quot;&gt;/angular.js/blob/master/Gruntfile.js#L25&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/.travis.yml#L34&quot;&gt;/angular.js/blob/master/.travis.yml#L34&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/freestrings/angular.js/blob/master/scripts/travis/build.sh&quot;&gt;/angular.js/blob/master/scripts/travis/build.sh&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ Grunt에 등록된 Task는 test류, minify, package, ci-checks등이 있음&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;ci-checks Task는 ddescribe-iit, merge-conflict, jshint, jscs &lt;strong&gt;4가지를 체크&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;ddescribe-iit  &lt;ul&gt;&lt;li&gt;파일내용중에 ddescribe(?) 나 iit(?)가 있는지 검사&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/btford/grunt-ddescribe-iit/blob/master/tasks/lib/check-file.js#L1-L16&quot;&gt;/grunt-ddescribe-iit/blob/master/tasks/lib/check-file.js#L1-L16&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;merge-conflict  &lt;ul&gt;&lt;li&gt;파일내용에 머지되지 않은 파일이 있는지 검사&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/btford/grunt-merge-conflict/blob/master/tasks/lib/check-file.js#L1-L5&quot;&gt;/grunt-merge-conflict/blob/master/tasks/lib/check-file.js#L1-L5&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.blogger.com/node-jscs&quot;&gt;JSCS&lt;/a&gt; - Javascript Code Style. JSCS를 검사. 60개 이상의 rule을 사용할 수 있다.&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;height: 200px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/8506987020185259054/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/08/angularjs-build.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/8506987020185259054'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/8506987020185259054'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/08/angularjs-build.html' title='AngularJS는 어떻게 빌드하나?'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-8923845498102253907</id><published>2015-08-03T23:59:00.000+09:00</published><updated>2017-03-26T23:00:09.938+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="couchbase"/><title type='text'>카우치베이스 요약3 - View</title><content type='html'>&lt;h3&gt;⌘ 카우치베이스 뷰&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Key 기반 동작은 데이터 접근에 효율적이고 성능도 좋지만 복잡한 동작엔 제한적이다. &lt;/li&gt;&lt;li&gt;Document 기반에서는 컨텐트를 효과적으로 쿼리 할수있다.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;와 &lt;strong&gt;N1QL&lt;/strong&gt; 두가지 방법을 제공한다.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;뷰는 인덱스를 생성한다.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;뷰는 자바스크립트로 작성된 MapReduce function 이다.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;뷰는 &lt;em&gt;Design Documents&lt;/em&gt;에 하나 이상 저장될수 있다.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ 뷰 생성하기&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;뷰를 큰 데이터셋으로 생성하면 클러스터 성능에 영향이 있을 수 있기 때문에 Development View를 생성해서 테스트 할 수 있다. &lt;/li&gt;&lt;li&gt;Development View는 &lt;strong&gt;Development Design Document&lt;/strong&gt; 에 생성되고 &lt;strong&gt;Production View&lt;/strong&gt; 로 Publish 할 수 있다.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;뷰의 생성과 수정은 Admin Console에서도 가능하고 Code 에서도 가능하다.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ 뷰에 쿼리하기&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Key로 쿼리하기 &lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;view.query({limit: 10, key: username}, function (error, results) {&lt;br /&gt;    ...&lt;br /&gt;});&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;범위로 쿼리하기&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;view.query({startkey: startDate, endkey: endDate}, function (error, results){&lt;br /&gt;    ...&lt;br /&gt;});&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;정렬&lt;/li&gt;&lt;/ul&gt;순서&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Null&lt;/li&gt;&lt;li&gt;False &lt;/li&gt;&lt;li&gt;True &lt;/li&gt;&lt;li&gt;Number &lt;/li&gt;&lt;li&gt;Text ( 대소문자 가림, 소문자 우선, UTF-8 순서 )&lt;/li&gt;&lt;li&gt;Arrays ( 저장된 값으로 동일하면 인덱스 순 )&lt;/li&gt;&lt;li&gt;Object ( 키 알파벳순 )&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;view.query({startkey: endDate, endkey: startDate, descending: true}, function (error, results){&lt;br /&gt;    ...&lt;br /&gt;});&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;페이징&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;skip&lt;/strong&gt; 파라메터와 &lt;strong&gt;limit&lt;/strong&gt; 파라메터의 조합으로 사용 &lt;br /&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;view.query({limit: 10, skip: 10, key: username}, function (error, results) {&lt;br /&gt;    ...&lt;br /&gt;});&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;strong&gt;firstPage&lt;/strong&gt; 메소를 이용해 &lt;strong&gt;Paginator&lt;/strong&gt; 조합으로 사용 &lt;br /&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;view.firstPage({limit: 10, key: username}, function (error, results, paginator) {&lt;br /&gt;    if(paginator.hasNext()) {&lt;br /&gt;            paginator.next(function (error, results) {&lt;br /&gt;                    ..&lt;br /&gt;            });&lt;br /&gt;    }&lt;br /&gt;});&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Built-in Reduce function  &lt;ul&gt;&lt;li&gt;_count&lt;/li&gt;&lt;li&gt;_sum&lt;/li&gt;&lt;li&gt;_stats&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ 카우치베이스가 Reduce function을 실행하는 방법&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;key와 values 파라메터 2개를 받음  &lt;ul&gt;&lt;li&gt;key는 [key, Document IDs..] 형식의 배열&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;멀티노드 클러스터에서는 각 노드에서 매번 reduce를 실행&lt;/li&gt;&lt;li&gt;values 배열이 큰 경우, 실행을 나눠서 해서 결과를 받는다.  &lt;ul&gt;&lt;li&gt;key별로 한번이상 redouce가 실행될 경우 결과를 줄이고 취합하는 부가적인 동작을 한다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;re-reduce&lt;/strong&gt; 최종 reduce실행을 의미  &lt;ul&gt;&lt;li&gt;reduce function의 마지막 파라메터로 전달됨 &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;function (key, values, rereduce) {&lt;br /&gt;        if(rereduce){&lt;br /&gt;            //Final aggregation...&lt;br /&gt;        } else {&lt;br /&gt;            ...&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;⌘ 뷰는 파일로 저장된다&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;뷰는 파일로 저장되고 저장된 파일들은 &lt;strong&gt;Design Document&lt;/strong&gt;를 &lt;strong&gt;b-tree&lt;/strong&gt;형태로 가진다.&lt;/li&gt;&lt;li&gt;버킷들은 &lt;strong&gt;Design Document&lt;/strong&gt; 정의를 메타데이터 파일에 저장한다.&lt;/li&gt;&lt;li&gt;카우치베이스의 &lt;strong&gt;인덱스는 Incremental&lt;/strong&gt; 이다.&lt;/li&gt;&lt;li&gt;모든 변경사항은 인덱스파일 마지막에 더해진다.&lt;br /&gt;  &lt;ul&gt;&lt;li&gt;문서가 추가되면 인덱스 파일 끝에 추가하고, 삭제되면 삭제된 문서로 마킹해서 마지막에 추가한다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;카우치베이스는 인덱스와 데이터파일이 지속적으로 증가하기 때문에 클러스터의 성능과 디스크 공간에 영햘을 준다. &lt;br /&gt;  &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Auto Compaction&lt;/strong&gt; 설정을 할 필요가 있다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ Lazy Erasing과 뷰&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;카우치베이스는 문서를 바로 삭제하지 않고 삭제된 문서임을 마킹힌다.&lt;br /&gt;  &lt;ul&gt;&lt;li&gt;실제 삭제는 삭제된 문서에 접근할때나 주기적으로 삭제된다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;뷰는 디스크에 저장된 모든 문서를 대상으로 계산하기 때문에 삭제된 문서를 포함 할 수 있다.&lt;/strong&gt;&lt;br /&gt;  &lt;ul&gt;&lt;li&gt;include_docs 쿼리 파라메터 사용&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;⌘ Geospatial 뷰&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;GPS기반 위치정보 검색에 사용되는 특정뷰&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/R_%ED%8A%B8%EB%A6%AC&quot;&gt;R-tree&lt;/a&gt;로 저장&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;height: 200px;&quot;&gt;&amp;nbsp; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/8923845498102253907/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2015/08/couchbase-summary3.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/8923845498102253907'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/8923845498102253907'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2015/08/couchbase-summary3.html' title='카우치베이스 요약3 - View'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry></feed>