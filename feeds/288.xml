<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>MY LIBRARY</title>
		<link>https://iamkyu.github.io</link>
		<atom:link href="https://iamkyu.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>학습에 실패한 이야기</title>
        <description>
</description>
				<pubDate>Mon, 11 Dec 2017 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2017-12-11/how-to-study/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2017-12-11/how-to-study/</guid>
			</item>
		
			<item>
				<title>자바의 어노테이션</title>
        <description>&lt;h1 id=&quot;자바의-어노테이션&quot;&gt;자바의 어노테이션&lt;/h1&gt;

&lt;p&gt;JDK1.5 부터 제공된 기능인 어노테이션은 @(;AT) 으로 시작하는 주석의 한 형태를 말한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;@Override&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SuppressWarnings(&quot;&quot;)&lt;/code&gt; 과 같은 어노테이션에 익숙할 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어노테이션은 메타데이터 한 형태로, 프로그램에 대한 정보를 제공하지만, 그 프로그램의 일부는 아니다. 어노테이션을 설정한 코드에 직접적인 영향을 미치지는 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oracle의 자바 튜토리얼 문서에서 어노테이션을 위와 같이 정의하며 용도를 설명한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일러를 위한 정보를 제공하기 위해.&lt;/li&gt;
  &lt;li&gt;컴파일 시점에 어떤 코드나 XML 파일 등을 생성하기 위해.&lt;/li&gt;
  &lt;li&gt;런타임 시점에 추가적인 처리를 하기 위해.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;어노테이션의-형태&quot;&gt;어노테이션의 형태&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@(;AT) 기호는 컴파일러에 기호 다음에 오는 것이 어노테이션임을 알린다. 위 예제에서 어노테이션명은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Override&lt;/code&gt; 이다.&lt;/p&gt;

&lt;h2 id=&quot;미리-정의-된-어노테이션들&quot;&gt;미리 정의 된 어노테이션들&lt;/h2&gt;

&lt;p&gt;자바에서 바로 사용할 수 있도록 미리 정의 되어 있는 어노테이션들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Deprecated&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Override&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@SuperWarnings&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@SafeVarargs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@FunctionalInterface&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 어노테이션들에 대한 더 자세한 정보는 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html&quot;&gt;자바 튜토리얼 문서&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;어노테이션-직접custom-정의&quot;&gt;어노테이션 직접(Custom) 정의&lt;/h2&gt;

&lt;p&gt;어노테이션은 필요에 따라 직접 정의할 수도 있다. 자바 튜토리얼에서 제공한 예시는 클래스에 대한 주석을 어노테이션으로 대체하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Author: iamkyu&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Date: 2017/03/11&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Current revisision: 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Last modifed: 2017/03/12&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 주석들을 어노테이션으로 전환하려면 하나의 특별한 인터페이스를 선언해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassPreamble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentRevision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lastmodified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N/A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이처럼 어노테이션을 직접 정의할 때 해당 어노테이션의 적용 가능 대상, 정보 유지 시간 등도 임의로 설정할 수 있다. 이를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Target&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Retentiion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Documented&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Inherited&lt;/code&gt; 의 어노테이션을 사용하고 이것들을 메타(Meta) 어노테이션이라고 한다.&lt;/p&gt;

&lt;p&gt;인터페이스를 선언한 후,  &lt;code class=&quot;highlighter-rouge&quot;&gt;@ClassPreamble&lt;/code&gt; 이라는 이름의 어노테이션을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ClassPreamble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iamkyu&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2017/03/11&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;currentRevision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;lastModified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2017/03/12&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;어노테이션과-리플렉션&quot;&gt;어노테이션과 리플렉션&lt;/h2&gt;

&lt;p&gt;사실 내가 궁금했던 것은 어노테이션은 어떻게 작동하는 것인가에 대해서였다. 글의 첫 부분에서 인용한 어노테이션의 정의를 다시 보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어노테이션은 메타데이터 한 형태로, 프로그램에 대한 정보를 제공하지만, 그 프로그램의 일부는 아니다. 어노테이션을 설정한 코드에 직접적인 영향을 미치지는 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어노테이션 자체가 코드에 직접적인 영향을 주지는 않는다. 그렇다면 어딘가에서 어노테이션을 인식하고 그 인식에 따라 어떤 처리 하는 코드가 또 있다는 것인데 ‘어디서 어떻게’ 하는 것인지 궁금했다.&lt;/p&gt;

&lt;h3 id=&quot;javalangannotationannotation-인터페이스&quot;&gt;java.lang.annotation.Annotation 인터페이스&lt;/h3&gt;

&lt;p&gt;먼저, 모든 어노테이션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.annotation.Annotation&lt;/code&gt; 인터페이스를 상속한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/VVZfNADl3kNJWhUbT9NfZpNViAvfmt2iPZxFIVbwlIGxndxbd2Tb0D18Zwub0mBdRGL9eCITOJhojCKts3NqtdxamcxJhdTJPiHyyUZ0M96FJ3fdI4fwBOGdzCmPqpfG-YjcohjalPEPIGJGKD7b-fDfFKlW3Uau5Re2HgrrS_Xne6K2XG6biPKudrgbxK_IkR-T3WSTKg7iQEZfcFAGckFumfV65EU9qQ9oGhR_W2uHhdEuJX9XOAt6wgeAsI6L6kAB2sPTTGbMw0MTVkL3H1XN8qtZrc6SksiC8bmZpv_0myyRQ1scAh_vaTSDhp9FUN68-BrFkZOBd1I_csZxXTmtPuRTJCFdJzfzG7mnJBR4YlsBkuD5S__fcyvmlVoc-qgTEwt7c_pDI4w0Urb144bpa0xizW0BAIpzZsQkBXW5Xy5vTOz9kSV_lVsQDHo6X8UrJY4b4YR4PDuy4Tf3RTpJ2DWD6_8zuqbz3OYhXyN-etzH4mLVXyc-QFrvhk5ydNHVxn8qujDfrAk0lUEEUIuJgbKxDZIt2UNCWqBoPGoJutEJCG16t0cKXR6crG8DpCMYG9SFWtZT0iZrDke-XSsq3m0P70GDayhWUZaVg7goO8_ZvFjAZS1Igp9HkmMquw2VcsI2-Gxastmi8EfmyEA8INd2_hGS=w396-h418-no&quot; alt=&quot;Annotation 상속구조&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassPreamble&lt;/code&gt; 은 이 글의 &lt;strong&gt;어노테이션 직접 정의&lt;/strong&gt; 부분에서 선언했던 커스텀 어노테이션인데, 직접 상속을 구현하지 않았는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation&lt;/code&gt; 인터페이스를 상속하고 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;@interface&lt;/code&gt; 라는 메타 어노테이션을 통해 처리되는 듯하다.&lt;/p&gt;

&lt;h3 id=&quot;스프링프레임워크의-커스텀-어노테이션&quot;&gt;스프링프레임워크의 커스텀 어노테이션&lt;/h3&gt;

&lt;p&gt;순수 자바 코드에서 어노테이션을 찾아서 메타데이터를 읽어 들이는 부분을 찾기가 힘들었다. 그래서 스프링 프레임워크 상에서 커스텀 어노테이션을 처리하는 방식을 추적해보기로 했다. 스프링 프레임워크에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Controller&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Service&lt;/code&gt; 등 다양한 커스텀 어노테이션이 기본적으로 내장(Built-In) 되어 있다.&lt;/p&gt;

&lt;p&gt;스프링프레임워크를 부트스트랩(Bootstrap) 하는 과정 중, 컨텍스트 설정을 읽어오는 부분이 있다. 이 코드를 따라 들어가다 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;MetaAnnotationUtils&lt;/code&gt; 라는 클래스가 등장하는데 문서에 따르면 어노테이션을 찾거나 얻어올 뿐만 아니라 추가적인 기능도 지원한다고 한다.&lt;/p&gt;

&lt;p&gt;이 유틸리티 클래스 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;findAnnotationDescriptor&lt;/code&gt; 메서드의 일부를 보면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Annotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;composedAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredAnnotations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clazz&lt;/code&gt; 변수는 Class 타입이다. 이를 통해 추측할 수 있는 것은 자바의 리플렉션 기술을 통해 클래스에 선언 된 어노테이션을 읽어들일 수 있다는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;예시&quot;&gt;예시&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassPreamble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentRevision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lastModified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N/A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lastModifiedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N/A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reviewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ClassPreamble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tester&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2017/03/11&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reviewers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Allen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 커스텀 어노테이션을 정의하고 해당 어노테이션을 사용한 클래스가 있다고 했을 때, 다음과 같은 방법으로 어노테이션의 메타데이터를 읽어올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMetadataTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//given&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Annotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassPreamble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//when&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// @lang.annotation.ClassPreamble(currentRevision=1, lastModified=N/A, lastModifiedBy=N/A, author=Tester, date=2017/03/11, reviewers=[John, Allen])&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;currentRevision=1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastModified=N/A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastModifiedBy=N/A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author=Tester&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;date=2017/03/11&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reviewers=[John, Allen]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations&quot;&gt;The Java™ Tutorials - Lesson : Annotations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kang594.blog.me/39704853&quot;&gt;Annotation과 Reflection, 그리고 코드 속의 MetaData&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 14 Mar 2017 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2017-03-14/java-annotation/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2017-03-14/java-annotation/</guid>
			</item>
		
			<item>
				<title>GIT 더 꼼꼼하게 커밋하기</title>
        <description>&lt;h1 id=&quot;git-더-꼼꼼하게-커밋하기&quot;&gt;GIT 더 꼼꼼하게 커밋하기&lt;/h1&gt;

&lt;p&gt;어쪄면 코드(Code)를 다루는 작업은 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;로 시작해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;으로 끝난다. 버전관리시스템을 통해 여러명의 팀원이 협업을 한다면 아침에 출근해서 원격저장소와 소스코드의 버전(Sync)을 맞추고 작업을 진행한다. 그리고 내 작업량을 모두 해치우고 커밋을 하고 나서야 한숨 돌릴 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git에서는 로컬 저장소에 소스코드를 올리는 일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Commit&lt;/code&gt;, 받는 일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fetch&lt;/code&gt; 라고 하고 원격 저장소에 올리는 일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Push&lt;/code&gt; 받는 일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pull&lt;/code&gt; 라고 하지만, 편의상 이 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Commit&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fetch&lt;/code&gt; 라는 용어만 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;커밋이라는 행위는 내 코드, 내가 작성한 코드가 나만의 통제를 벗어나는 것이다. 그래서 나는 커밋 전에는 가능한 꼼꼼하게 다시 한번 보려고 노력한다. 내 코드를 내 스스로 다시 한번 리뷰하는 것이다. 통합개발도구(IDE)에서는 현재 원격저장소에 있는 코드와 내가 가지고 있는 코드의 차이(diff) 를 구분하기 쉽게 보여 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/OZGh8oOeb0sYpWX9beOZ6Jv7veO1QRkNt4e7xot10Ve7sNLMvgp_BwyX-XA7uTl51LmBrsNzBar8LveNI4jGAWCP6bcJsDmgTHAMsOz264_8G9fDR-94qA97VyPLUw3PFuPpCwyiRAffgGVr8WsQegNbUHrpUmzxMgjG0Kc_4fhWUoYBB7VbWsv2ecNieKKHxdDgAwlJm_AFpsA3NMYGNG2e69u7SbokhbACZMBmekVeKMaHQMrWm3bOGeqjmLNCCad11pFMG39feqWTvlaLYw26P_XxHDS6_MnH1Ygoqx7pHHQRO4cPnMrGnAThahbOARfTKZd2vmImr3aNMRF5dqS93h4mlj5SH840aA1s8EF4-i_N5RNtstn2cqoEivnl2hg51rplqzI0a19llKdRNxBHAa7oFXkpiVXn5TRJhkZT8um2Yj3jncjY-Nh-APt8dcLfiB_wWKeJVKEg1v7u9dt621FBvE2AtjSOVeVSSYlkbvfzXRJODmKT5b6fArbQ9YZnZcRLXAmioLUpyaWhkqelCP7gRjsFa3AWCNWSB9klXblZs3A1Y10QmNLqQPglRFL87AioTtaQOutJ7JiFGTkEfdRTV_-PFT8UNr_rbOpkZ83Y=w1236-h522-no&quot; alt=&quot;git-patchmode-and-verbose-img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 한 가지 아쉬운 점은, 내가 변경한 소스들을 파일 단위로 하나 하나 열어보며 비교를 해야 한다는 것이다.  &lt;img src=&quot;https://lh3.googleusercontent.com/wLg9aBOrX4QMlwCwyqR-vmYb2WzrQ9X-wVQwCJxhNnZP_7M9dcDOW0dHo1dOpFLafQ2OsJzVz-CGGOyMbcyIAuy58UJlJe7wDK_swE6Br112LyBgCwjnFR-hXyqYo5eyey8RurV8Up8tIDARa3ZTWDNvyM8Ub70H6KM-W2MmIy5OtmANDETbyfNuT_LSfZpTbtfkVBLl3PEyoxBy4S7PSmYsz687aEHgqlYG-omz7mnz8GY6w7ojGNJKjNRDeP8YMiARxuxTnhcKEIJ9mzwDgUIhCzTuL3sMypCNcZrj7gW0pxt-D-0bCV2a92S8a6EJYNGtwnR9oFHIB1SqiOh9eeZjbKvUbghfMKgY46sZIL48hGvBBzplVc2oZA6z9rI9b0FkJntCgPwosgDdqBpWWurqfG_v-gwgtHZv0mxJkeXDQwJcFDfhgb3e0CjLdYrWl9zU5psCMAzV8u-13YsU1D1sq31-CDP9pZRFG_tpURhSHT2lztgaF_JIpe8hOxOxt8S3vPkHvEBQGjf-61NoaRuKf7yYVOnwj8kbpV0RkWvHXZAklPpoql7XqENCN-AyWe7KJDIhw4RA27j6y9fcuny31Dv0zyAcDM6fjqTC6y2W95uD=w786-h281-no&quot; alt=&quot;git-patchmode-and-verbose-img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 10개의 소스파일을 수정했다면 10개 파일을 클릭해서 열어봐야 하고, 20개의 소스 파일을 수정 했다면 20개를 열어 봐야 하는 것이다. 굉장히 귀찮은 일이다.&lt;/p&gt;

&lt;h2 id=&quot;patch-mode&quot;&gt;Patch Mode&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 또는&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;패치모드는 추척되고 있는 소스 중, 변경 된 모든 것을 추적하여 변경 된 덩어리(hunk) 단위로 돌아가며 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/GzuwSesOtqYXYyOZ7kb0PI4tvtRh9Xi91dz_II8hoSUgU7-4iNAAYA94gbwTD1cRkXmHhdN6WAgxW6o0000tjI0VXCN6giKLoh4qN5sgbFcG3y1sysFqFAEqLmgBf8cM9yg51oPgg0njdA-bV0x_fRaHsB1ZvWYF75V7nsYWg93NvztB268IWhSJbl_S7RbHcN2mWZcY6M3stjjAP7HLRpMX43vTfhX9-iMatENshDE-0pX8C720aqXvFbhLetKshJ1im5u8_R4aAaXckDQkmS7MgYp8Gjz051_9OuE5hp09P_UKM5lrf5ocNqHmKb71q-D-22wiCCezNWTvifRVmBswLpoHQGSC6av1DpAGFFI2UnQjV_97HTwmjuPDpxSSl3FI0EKS3qZqj992gVAC_1YsTklVZ7nnHz3RAONKjmlLWi6ZIAqENAQY8sRuULsINmoZTIpry8VCFfR_9PbjYm8xc7NVaRx2Z_avw2IavrG1qqzCgUUQgCbfblcEiqMFJGW-2klo_YJWrL4c8PeZqXC0oo2LLbl5GDfnK49LOR2G3GlmVEMrn6djwJ5CwAtHXQnq94Z3P-8-0b4ydPxERNKv77_PG4uksJOjLmFk9bus7DQz=w703-h305-no&quot; alt=&quot;git-patchmode-and-verbose-img3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;글로는 잘 이해가 안갈텐데, 위와 같이 변경 된 (&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;) 부분만을 보여주면서 모든 소스 파일들의 변화를 추적한다.&lt;/p&gt;

&lt;p&gt;직접 해보는 것이 좋은 방법이지만, 환경이 여의치 않다면 &lt;a href=&quot;https://www.youtube.com/user/johnkarydotnet&quot;&gt;Intro to git add patch mode tutorial&lt;/a&gt; 영상을 보면 패치모드가 어떤식으로 동작하는지 이해할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;그리고 이렇게 보여주는 변경 변경 덩어리마다 어떻게 처리할 지를(스테이지에 올릴지, 그냥 넘어갈 것인지를) 선택해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Stage this hunk &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y,n,q,a,d,/,j,J,g,s,e,?]?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 선택지가 12가지 인데, 각각의 옵션들에 대한 설명은 &lt;a href=&quot;http://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git&quot;&gt;stackoverflow.com에 올라온 관련 글&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;commit-verbose&quot;&gt;commit –verbose&lt;/h2&gt;

&lt;p&gt;패치모드를 통해 변경 된 코드 덩어리들을 빠르게 리뷰 할 수 있다. 그리고 이 과정에서 스테이징 할 소스코드를 선택했을 것이다. 이제 커밋을 할 차례. 하지만 마지막 커밋을 하기 전 한번 더 점검 과정을 거친다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 또는&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 커맨드를 입력하면 편집기가 열리면서 커밋 메세지를 작성할 수 있고, 수정 된 코드들을 다시 한번 리뷰하고 편집기에서 바로 수정할 수 도 있다.&lt;/p&gt;

&lt;p&gt;코드를 작성하거나 수정 후 당연히 꼼꼼히 확인하겠지만 사람이다 보니 놓치는 부분이 있기 마련이다. 이를 방지하기 위해 두 번의 리뷰 과정을 다시 거치면서 마침내 코드를 커밋하게 되는 것이다. 조금 번거롭긴 하지만 좋은 습관이라 생각 된다. 나도 항상 이런 습관을 유지하도록 노력해야겠다.&lt;/p&gt;
</description>
				<pubDate>Sat, 24 Sep 2016 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2016-09-24/git-patchmode-and-verbose/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2016-09-24/git-patchmode-and-verbose/</guid>
			</item>
		
			<item>
				<title>GIT 여러 커밋을 하나로 합치기</title>
        <description>&lt;h1 id=&quot;git-여러-commit을-하나로-합치기&quot;&gt;GIT 여러 commit을 하나로 합치기&lt;/h1&gt;

&lt;p&gt;버전 관리 시스템은 변경 내역을 기록하고 보관 하기 위해 사용하는 만큼 이력들(commit log)를 잘 관리하는 것이 중요하다. 이를 위해서는 은근히 신경 써야 할 것 들이 많은데&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;좋은 커밋 메시지를 작성한다.&lt;/li&gt;
  &lt;li&gt;일련된 작업 단위의 커밋&lt;/li&gt;
  &lt;li&gt;커밋 전략, 브런치 전략 등등&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;회사에서는 SVN을 사용하고 개인 작업용으로는 주로 Git을 사용했는데 최근 스터디 모임등으로 인해 Git으로 협업을 하게 되었다. 따라서 혼자 브런치를 가르고 합치는 등의 방법을 연습하고 있는데 아주 재미있다.&lt;/p&gt;

&lt;p&gt;현재 진행하는 스터디 모임에서는 각자가 담당 도메인마다 브런치(Brunch)를 따서 작업을 하고, 한 주간 완료 된 작업은 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; 브런치로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt; 를 보내 반영하는 식으로 진행한다.&lt;/p&gt;

&lt;p&gt;이 때 발생 한 문제는, 같은 내용이 여러 커밋에 거쳐 나눠진다는 것이다. 무슨 말이냐면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수요일에 일단 작업을 마무리 하고 커밋을 했다.&lt;/li&gt;
  &lt;li&gt;목요일날 생각해보니 조금 수정을 해야할 것 같다. 수정을 하고 커밋을 했다.&lt;/li&gt;
  &lt;li&gt;금요일날 또 생각해보니 수정을 해야할 것 같다. 수정을 하고 커밋을 했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;최초에 기능을 개발한 후, 2번의 수정을 거쳤다. 물론 나의 입장 에서 보면 별개의 작업들이지만, 내 커밋 로그들이 여러 사람들의 커밋로그들이 모두 합쳐질 통합 브런치에 포함된다고 생각해보자.
그렇게 생각해보면 이 세 개의 커밋들은 결국 하나의 커밋으로 합쳐 통합 브런치에 포함하는 것이 낫다고 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;여러-커밋-하나로-합치기&quot;&gt;여러 커밋 하나로 합치기&lt;/h2&gt;

&lt;p&gt;이미 모든 작업들이 커밋 완료 된 상황이다. 나는 최근 2개의 커밋을 하나로 합칠 것이다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; HEAD~2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 명령어로 최근 현재 HEAD 부터 최근 2개의 커밋을 &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; 하라고 명령한다. (만약 커밋하지 않은 파일이 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;--autostash&lt;/code&gt;를 붙여준다.)
그럼 아래와 같은 화면이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/5uVhOFXnEVcjomrdC4ac8EcNAXfGULBWvKfzYoffvwaBX8tv6Muc_NuMNMBdHKw5Dt7sjClEevMvlwSkA1IIxzW7sFQ9_-9PIlVxGLp4JL2ksDwkSNRfxQlFA_GkMeViEicUYzy22_CUduOcsUH_DE5bLwUwpIkWOu2Txw6kQvUEJ6WD-Fs8dkeX2r0uH-M3vo9mKZzz1QZhFXJODzSAl_kKzNzG7xeB30M5dGYScYLyMSrvYtKN4uYINDioiwITXmjZ3OfsmNZQhrJa8OFpDcrJXPR_1EZ8zagEdLrGjPq6DHdAUcKqrbq-G5D8cBYJ4LyBU1X9ZAoM0onCp46JEDR4DMhXoZWtZQSPFA10hbt-pIX3QLWkIeXdtUzQRCg3BAejHFX9p91uTGdsxl7QHrlAaJ9vFmeUdDAezm-ZbvfhWudo0SjmFFlztnth0RFROulgJYzlKFaVYi-C8LYp5vjujuaOAAirbiKmu_6RcUWd77bZumzoe0lbUN0_l0BF2H5F66svj92Ee_RIUL-uGNWEZOJlPgxPoiZbS5Jfosvsccu4Ddgp9IuyTGq4jBjwIze0esX7GXRzPjmdPmG-8H2Ii80zNCzhc8UjlyiIWhSscKzo=w668-h272-no&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두번째 줄의 &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt;로 변경한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;:x&lt;/code&gt;. 그럼 합친 커밋의 커밋 메시지를 새로 작성할 수 있게 해준다. 아래와 같이 커밋 메세지를 새롭게 입력한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;:x&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/M4uz1Mmol5IMDLpqUrD5sS6KIK9up3vSEYLZcZLTxOH1d_Ui6Cg0WGpNOEgZKiN_pc0mePIgptrK-z2b5kLWl64m-1q2YBiTae3c_F-CkHtsHHr2T2IZ-_SPAYbI9X-raaRWw1gxzjbhpaTnmqsQgFRlFOI8ZBok5g-LIhyLCpMVBfPlCX_-gACX-B5pyCtyEUWMJFvioMDSqRpBD-vVCcWohOz5HNOyOPCKksA6QHaddJN6l1McfgD7L5DlSuU6nFlkEpY8QaPC7OXf_znB0rJHxLUOrrF4Psdm1kzZ6SwWDrRUcSVBsw7_F6oeijKVsKz1zJwVaQzyKIKV2KSw5MISuyXYp-zkB1Ss166jW6ER4pasXTJj-svCbrnjR6Mtlpno7avrFi3iCnaR2IT2es2TH9VowdzmHzc2nHJUMAxRMp4XLTuWV5q4NoGI6nm0yJJyrf48iuKiRm-1zDG-1iogF-WnL6QteEtEpYCSh4qro9g3PBJpv57IlVrvncBEAc0yiHU3DdEcCLQjQjBGQKMJvS-dfN6fRgPiT9JxzJZEkZCiz2HyR7PLho-uo48q7dLay9IEHX7imkpKdXqLJ5UqkdOAfDbN0k_IJoeIigBcTza2=w587-h280-no&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 합친 커밋을 원격 저장소에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 를 하면 오류가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/kYfnwS2gL1KAqgywyeTL1IldOEQQ-4p_k_EAuwqe9Dl5AI5YjD3_RpIdEw9rUoHOz37jvQawe0VnfPhG8K4dDmjkAugVC_E_UnL9vgTLcS4oT2HPQsL4E5JKT83mvbFJc-E5Iz_6HFgkSJGm_bYO_Va2T2osxagt7zaXAbm1vNbolK6aNG5nj_aEve1bVra-AGZDWa3gkzKVUvICL1j9LevcI4n4xdm7ftjTumXnqaZafsF3JE2mJn1qdSFMI0_lTC6KnCcUT1Fl3vR57GL6kvfUFNF6cMksUzKRlrI5dutNWR-8y4MVAy1-MIXhNtU5M-z-MPQfxG6qOkDHi4gT5hUGDNWFIQJL_DRBrUvS41UKf1FAqrEexOxZBZqQwVzI48gsCz6Xtr1inYO1BvhRKC0aDo91D2WN-TuQtI0QkDTYO9-1uZPLUtwVefd4y8J0HTFCgG3hvl7fhh-TI-swN3Qvdh9NNUkoQEqLW0TIkakd6zIpWtUnRlPgwq9UUTHjZ7b2X31yfUUn_bla0QOzTAkDTbCN8olSYZfm0TSbd4IOEi5IuuN-lNG4ICKlJu1ThMqU8WmtpRFzyDbcqJW3U5rBJ0cF_XnrMWVLNCWYNn1Bn8Yz=w668-h138-no&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왜냐하면 히스토리로 봤을 때는 현재 로컬저장소에서 원격저장소로 푸쉬하려는 커밋은 HEAD가 더 뒤에 있기 때문이다. 위에서 커밋을 합치는 과정에서 더 이전의 커밋으로 합치는 과정을 거쳤기 때문인듯 하다. 이때에는 브런치명 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 를 포함하여 강제로 푸쉬(force push)를 한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin +브런치명
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;force push 를 할 때는 항상 주의해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EB%8B%A8%EC%9E%A5%ED%95%98%EA%B8%B0&quot;&gt;Git - 히스토리 단장하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://charsyam.wordpress.com/2013/01/11/%EC%9E%85-%EA%B0%9C%EB%B0%9Cgit-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-commit-%ED%95%98%EB%82%98%EB%A1%9C-%ED%95%A9%EC%B9%98%EA%B8%B0/&quot;&gt;[입 개발]GIT: 여러 개의 commit 하나로 합치기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 20 Aug 2016 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2016-08-20/git-commit-merge/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2016-08-20/git-commit-merge/</guid>
			</item>
		
			<item>
				<title>자바의 switch-case</title>
        <description>&lt;h2 id=&quot;switch-case&quot;&gt;switch-case&lt;/h2&gt;

&lt;p&gt;조건 분기를 해야 할 때, 경우에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt;를 잘 사용하면 훨씬 깔끔한 코드를 작성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fab&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// .. 중략&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Not valid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기존의 자바는 &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;short&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;와 같은 기본형 타입에 대해서만 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 사용이 가능했지만 JDK7 이후 버전부터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;형 사용이 가능해졌다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NEW&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NEW&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order is in NEW state&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;new&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order is in new state&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order is in WEN state&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그냥 그렇게 되었구나 하고 넘어갔었으나, 자료구조 스터디 중 자바의 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 동작 방식이 해시테이블 방식으로 되어 있다는 것을 알게 되어 좀 더 호기심을 가지게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;해시-hash&quot;&gt;해시 (Hash)&lt;/h2&gt;

&lt;p&gt;먼저 간단히 해시 테이블에 대해 요약하면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;공간아 팔아 속도를 얻는다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 정리할 수 있다. 데이터가 삽입 되면 -&amp;gt; 해시 함수를 거쳐서 키(Key)를 만들고 -&amp;gt; 그 키를 인덱스로 하여 배열에 저장한다. 이렇게 삽입을 해두면, 추후 그 값을 탐색할 때도 삽입과 같이 키 값을 만드는 과정만 거치고, 그 키로 해당 위치를 바로 참조 할 수 있다. 리스트였다면 처음부터 순차적으로 탐색해 나가야 했을 것이다. 단,  해시 함수에서 키를 만들때 랜덤하게 만들어지기 때문에, 해시 테이블은 중간 중간 빈 공간이 많고 많은 공간을 차지한다.&lt;/p&gt;

&lt;p&gt;해시테이블을 구현하는데 있어 중요한 것은 해시 함수를 거쳐 키를 생성할 때 이 키가 중복되지 않도록 하는 것, 즉 같은 인덱스에 여러 값이 들어가는 충돌을 방지하고 처리하는 것이 과제이다.&lt;/p&gt;

&lt;h2 id=&quot;자바의-switch-case&quot;&gt;자바의 switch-case&lt;/h2&gt;

&lt;p&gt;해시는 이 정도로 요약하고 다시 자바의 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt;를 보자면&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Decompiled .class file, bytecode version: 52.0 (Java 8)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SwtichTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SwtichTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switchTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NEW&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77184&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NEW&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85824&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108960&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order is in NEW state&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order is in new state&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order is in WEN state&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 소스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 을 이용한 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt;를 디컴파일 한 코드이다. 처음부터 살펴 보자면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;case 절에 명시했던 조건 문자열들이 이상한 숫자로 바뀌었다. 그리고 switch 문의 인자로 전달했던 문자열(String)으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode()&lt;/code&gt; 를 호출 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 각각의 case 절 안에서 다시 한번 &lt;code class=&quot;highlighter-rouge&quot;&gt;equals()&lt;/code&gt;를 통해 동등성을 비교 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 두 조건이 모두 만족했을때 var3 라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;형 변수에 어떤 값을 저장한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래에 switch 문이 하나 더 생겼다. 그리고 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt;는 3번 과정에서 값을 대입한 var3 변수를 두번째 switch 문의 인자로 전달한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;디컴파일 된 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 문이 두 개가 되었으니 위를 제1스위치, 아래를 제2스위치로 가정하겠다.&lt;/p&gt;

&lt;p&gt;제1스위치는 위에서 간략하게 설명한 해시 테이블 방식을 통해 해당 키 값과 일치하는 case 로 바로 향할 수 있다. 그런데 서로 다른 값이지만 해시함수를 거친 후 동일한 키 값을 가질 수 있는 경우(해시 충돌)가 생길 수 있기 때문에 케이스가 일치하더라도 원래 문자열의 동등성을 비교 하도록 방어적인 코드를 작성한 듯 하다. 어쩌면 방어적이라기 보다는 꼭 필요한 로직이라고 할 수도 있겠다.&lt;/p&gt;

&lt;p&gt;또한, &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 의 case 들을 유심히 보면 일부러 비슷한 문자열로 넣어봤다. NEW 와, 이 문자를 뒤집은 WEN 그리고 소문자. 아스키 코드로 생각해봤을 때, 대문자-소문자는 생성 되는 키 값이 당연히 다를 수 있지만 NEW-WEN 는 똑같은 조합의 문자가 모인 문자열이기 때문에 같은 키를 가질 수 있는 가능성이 있다. 하지만 case 에 대치 된 해시 값을 보면 완전히 다른 값을 가지고 있다. 이와 같이 해시 테이블에서는 키 충돌을 방지 하게 위해 해시를 생성하는 적절한 알고리즘의 구현과(하지만 완벽할 수 없음) 충돌처리가 중요하며 이 방법에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;분리 된 체인&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;오픈 주소법 해싱&lt;/code&gt;이라는 방법이 있다.&lt;/p&gt;

&lt;p&gt;그렇다면 왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 형을 &lt;code class=&quot;highlighter-rouge&quot;&gt;swich-case&lt;/code&gt;의 인수로 전달했을 때, 두 개의 switch 문으로 컴파일 되는 것일까?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hg.openjdk.java.net/jdk7u/jdk7u/langtools/file/41b81b3e37cd/src/share/classes/com/sun/tools/javac/comp/Lower.java#l3397&quot;&gt;OpenJDK/jdk7u&lt;/a&gt; 의소스 코드의 주석에 관련 내용이 적혀 있었는데, 내용이 너무 이해하기 어려워 발 번역을 해봤다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The general approach used is to translate a single string switch statement into a series of two chained switch statements:&lt;/p&gt;

  &lt;p&gt;일반적으로 사용되는 방법은 단일 string switch 문을 두번의 연쇄 switch문으로 번역(컴파일)하는 것 입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;the first a synthesized statement switching on the argument string’s hash value and computing a string’s position in the list of original case labels, if any, followed by a second switch on the computed integer value.  The second switch has the same code structure as the original string switch statement except that the string case labels are replaced with positional integer constants starting at 0.&lt;/p&gt;

  &lt;p&gt;먼저 인수 문자열의 해시 값을 계산하고 원래의 case 라벨들의 문자열 위치를 계산합니다. 만약 적중하는 case가 있다면, 계산 된 정수 값으로 두번째 switch가 시작 됩니다. 두번째 switch 는 string으로 작성 된 case 라벨들이 0부터 시작되는 정수들로 대체 되는 것을 제외하고는 원래의(컴파일 전의) switch문과 같은 코드 구조를  가지고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first switch statement can be thought of as an inlined map from strings to their position in the case label list.  An alternate implementation would use an actual Map for this purpose, as done for enum switches.&lt;/p&gt;

  &lt;p&gt;첫번째 switch 문은 원래의 swich문의 case 라벨 목록에서의 string 위치를 가르키는 맵으로 생각될 수 있습니다. enum(자바의 열겨거형 상수) switch 를 사용하기 위해 대체 구현하는 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;With some additional effort, it would be possible to use a single switch statement on the hash code of the argument, but care would need to be taken to preserve the proper control flow in the presence of hash collisions  and other complications, such as fallthroughs.&lt;/p&gt;

  &lt;p&gt;몇 가지 추가적인 노력으로 해시코드 인수를 받는 단일 switch 문으로 사용할 수도 있습니다. 그러나 해시충돌이나 다른 문제들로 인해 완료되지 못하는 것을 방지하기 위해 적절한 제어 흐름이 필요 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Switch statements with one or two alternatives could also be specially translated into if-then statements to omit the computation of the hash code.&lt;/p&gt;

  &lt;p&gt;switch문을 대체할 수 있는 몇 가지가 있습니다.  해시코드 계산을 생략하고 if-then문으로 대체할 수도 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;발번역한 내용을 바탕으로 보자면 enum switch 로 사용하기 위해 연쇄적인 두번의 switch-case를 사용하는 것인데, 그렇다면 왜 enum switch를 사용해야 할까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-3.html#jvms-3.10&quot;&gt;JVM Specification - 3.10. Compiling Switches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JVM 스펙 문서를 보면 JVM에서 switch-case 컴파일에 관련 된 내용이 있는데, 이를 바탕으로 생각해 보면 기존에 구현 된 JVM 의 switch 처리 방식과의 호환을 위해 새롭게 추가 된 String 형의 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 도 기존에 기본형만 처리 했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 방식으로 처리하기 위함 인 듯 하다.&lt;/p&gt;

&lt;p&gt;JVM의 &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; 처리 방식에 관한 내용은 이 링크를 참조하면 좋을 듯 하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10287700/difference-between-jvms-lookupswitch-and-tableswitch&quot;&gt;Difference between JVM’s LookupSwitch and TableSwitch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-then-else-vs-switch-case&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if-then-else&lt;/code&gt; VS &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;이건 전적으로 Case By Case 인 것 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 로직&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 조건분기가 있고 이 조건분기를 거칠 때 마다 조건8에 해당할 확률이 높다면 매번 거의 마지막 조건부까지 비교 과정을 거쳐야 한다. 반대로 대체로 조건1이나 조건2를 만족할 확률이 높다면 해당 조건 이후의 조건절들은 모두 무시 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt;의 경우 위에서 설명했듯 해시테이블의 특성상 공간을 많이 낭비하고 대신 속도를 얻는다.&lt;/p&gt;

&lt;p&gt;그런데 사실 일반적인 조건 비교에서 두 구문의 성능차가 시스템에 크리티컬하게 영향을 줄 정도로 차이 나지는 않는 듯 하다. 그렇다면 컴퓨터가 좀 더 빨리 이해할 수 있는 코드 보다는 사람이 읽기 좋은 코드로 상황에 맞게 작성하는 것이 좋지 않을까.&lt;/p&gt;

&lt;p&gt;두 구문의 정확한 성능차는 아래 글들을 참고하면 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.naver.com/kki2406/80041410085&quot;&gt;if~else와 switch~case 문의 차이점(성능, 메모리 관점)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kldp.org/node/62262&quot;&gt;switch vs if 어떤 때 어느게 효율적인가요?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html&quot;&gt;Oracle Java Documentation: The switch Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25568639/why-switch-on-string-compiles-into-two-switches&quot;&gt;Why switch on String compiles into two switches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/jdk7u/jdk7u/langtools/file/41b81b3e37cd/src/share/classes/com/sun/tools/javac/comp/Lower.java#l3397&quot;&gt;OpenJDK/jdk7u&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-3.html#jvms-3.10&quot;&gt;JVM Specification - 3.10. Compiling Switches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 15 Aug 2016 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2016-08-15/java-switch-and-hash/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2016-08-15/java-switch-and-hash/</guid>
			</item>
		
			<item>
				<title>자바에서 문자를 구분자로 분리하기</title>
        <description>&lt;h1 id=&quot;자바에서-문자를-구분자로-분리하기&quot;&gt;자바에서 문자를 구분자로 분리하기&lt;/h1&gt;

&lt;p&gt;셀렉트리스트의 하나의 옵션에 여러 값(Value)을 줘야 할 경우 보통 구분자(delimiter)를 넣어두고 그 구분자를 기준으로 하여 하나의 값을 여러 값으로 분리해내는 방식을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select_list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;APPLE|CARROT|PIZZA&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Foods&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#select_list option:selected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;?FRUIT=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;VEGETABLE=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;INSTANT=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
values[0] = &quot;APPLE&quot;
values[1] = &quot;CARROT&quot;
values[2] = &quot;PIZZA&quot;
*/&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주로 클라이언트측에서 특정 조건 값으로 조회(SELECT)를 할 때 위와 같이 view 단에서 자바스크립트를 통해 아예 다 분리를 한 다음 쿼리스트링을 만들어 HTTP GET 요청을 보냈다.&lt;/p&gt;

&lt;p&gt;이번에 어쩌다보니 위와 같이 구분자로 구분되는 하나의 문자열을 서버에서 처리하게 되었는데, 자바와 자바스크립트의 split 이 비슷하게 동작하는 것으로 기억하고 구현하였다가 API 문서를 통해 잘못 기억하고 있다는 걸 깨닫고 ‘내가 자바에서 split 을 이렇게 안써봤나?’ 하는 마음에 한번 정리한다.&lt;/p&gt;

&lt;h2 id=&quot;javalangstringsplitstring-regex&quot;&gt;java.lang.String.split(String regex)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;먼저, &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.String&lt;/code&gt; 클래스에 포함되어 있는 split 매소드는 구분자로 받는 매개변수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규식&lt;/code&gt; 이다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt; 도 매개변수로 받도록 오버로딩 된 메소드도 있지만, 이 글의 주 관심사는 아니므로 제외)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;splitTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;APPLE|CARROT|PIZZA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
Test Failed

java.lang.AssertionError: 
Expected :3
Actual   :18
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위는 자바에서 자바스크립트와 같은 방식으로 split 을 사용하였다가 실패한 테스트이다.
자바스크립트와 같이 동작했다면 배열의 길이는 3이 되어야 했으나, 배열의 길이가 18이다(욕 아님). 지금 &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; 배열에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;를 한글자씩 쪼개서 들어가 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-regex&quot;&gt;(fa|mo|(br|b)?o)ther
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;정규식에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; (Vertical Bar)는 OR 로 인식한다고 한다. 위와 같은 정규식 조건이 있다고 할때, father, mother, bother, brother, other 단어 모두 위 조건을 통과할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;그런데 그럼 정규식은 정규식이고 왜 한글자씩 쪼개져서 배열에 들어가느냐? 솔직히 이리저리 찾아 봤는데 세로 바(|)가 예약어라는 답변들 밖에는 찾지 못했다. 직접 디버깅 모드로 추적 해봤지만, split 을 수행하기 위해 Pattern 클래스 뿐만 아니라 많은 클래스들을 타고 들어가서 명확한 동작 방식을 이해하기가 힘들었다. 여튼 자바에서 split 메소드에 매개변수로 넘어가는 문자는 단순 문자가 아니라 정규식 이라는 것과 split 하는 것이 굉장히 복잡한 과정을 거친다는 것을 기억해야겠다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;javautilstringtokenizer&quot;&gt;java.util.StringTokenizer&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://docs.oracle.com/javase/8/docs/api/java/util/StringTokenizer.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자바에는 문자를 분리하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt; 말고 &lt;code class=&quot;highlighter-rouge&quot;&gt;StringTokenizer&lt;/code&gt; 라는 클래스도 있다. 스플릿 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;JDK 1.4&lt;/code&gt; 부터 지원됐고, 토크나이저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JDK 1.0&lt;/code&gt; 부터 지원했는데, API 문서를 읽어보면 토크나이저 대신 스플릿을 사용할 것을 권장한다. 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; 된 클래스는 아니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toknizerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;APPLE|CARROT|PIZZA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;스플릿과 달리 토크나이저는 문자 그대로를 구분자로 사용하기 때문에 위 코드는 성공하는 테스트이다. 하지만 토크나이저는 클래스이기 때문에 분리하고 하나씩 읽어 들이는 번거로운 과정과 그 코드들이 모두 사용하는 쪽에 드러난다.&lt;/p&gt;

&lt;h2 id=&quot;benchmark&quot;&gt;Benchmark&lt;/h2&gt;

&lt;p&gt;최근에 JMH (&lt;a href=&quot;&quot;&gt;http://openjdk.java.net/projects/code-tools/jmh/&lt;/a&gt;) 라는 자바 성능측정 툴을 알게 되어 스플릿과 토크나이저 성능비교를 한번 해봤다. 굉장히 약식으로 하였고, 전제조건 등도 제대로 설정하고 돌린 벤치마크가 아니기 때문에 그냥 가볍게 보면 좋겠다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;splitTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;APPLE|CARROT|PIZZA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toknizerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;APPLE|CARROT|PIZZA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreTokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JMH&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;released&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;please&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JDK&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0_73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b02&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;invoker:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JavaVirtualMachines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jdk1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0_73&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Warmup:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Measurement:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Timeout:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iteration&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Threads:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Benchmark&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;mode:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throughput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Benchmark:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StringBenchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;splitTest&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Benchmark&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;Mode&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Cnt&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;Score&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Units&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;splitTest&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;thrpt&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;1227784.106&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;±&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;10013.248&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;toknizerTest&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;thrpt&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;12667246.536&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;±&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;171699.957&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;어찌됐든 자바에서도 토크나이저 클래스 보다는 스플릿 메소드를 사용할 것을 권장하고 있다. 스플릿 메소드는 정규표현식을 통해 정규식 뿐만 아니라 문자를 구분자로도 사용할 수 있지만 토크나이저는 정규표현식을 사용할 수는 없다. 그리고 위에도 적었지만 문자를 구분자로 분리하고 이터레이트(iterate) 하는 과정이 모두 사용하는 쪽에서 코드가 드러나기 때문에 별로인 것 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\|&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스플릿 메소드에서 세로 바(&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;)로 문자를 분리하기 위해서는 위와 같이 역슬래쉬를 두개 포함하거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;Pattern&lt;/code&gt; 클래스를 활용하면 되겠다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://stackoverflow.com/questions/5675704/java-string-split-not-returning-the-right-values&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://stackoverflow.com/questions/6983856/why-is-stringtokenizer-deprecated&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://library1008.tistory.com/16&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://book.naver.com/bookdb/book_detail.nhn?bid=7188745&quot;&gt;자바의 신 Vol 2 주요 API 응용편, 이상민 저&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;진짜 잘 만든 정규식 슬라이드 강추! &lt;a href=&quot;http://www.slideshare.net/ibare/ss-39274621&quot;&gt;초보자를 위한 정규 표현식 가이드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 16 Jul 2016 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2016-07-16/java-split/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2016-07-16/java-split/</guid>
			</item>
		
			<item>
				<title>읽기 좋은 코드가 좋은 코드다</title>
        <description>&lt;h1 id=&quot;읽기-좋은-코드가-좋은-코드다-원제-the-art-of-readable-code-더스틴보즈웰-트레버파우커-저&quot;&gt;읽기 좋은 코드가 좋은 코드다 (원제 The Art of Readable Code), 더스틴보즈웰, 트레버파우커 저&lt;/h1&gt;

&lt;p&gt;추천하고 싶은 책이다. 예전부터 &lt;strong&gt;잘 작동하는 깔끔한 코드 (Clean code that works)&lt;/strong&gt; 에 관심이 많았기 때문에 관련 된 책을 몇 권 읽기도 했었고, 프로그래밍과 관련된 대부분의 책에서는 좋은 코드에 대해 꼭 언급한다. 코드 작성에 대해 가장 자세한 조언을 해준 책은 Code Complete2, 스티브맥코넬 저 (현재 절판) 이긴 하지만 책이 너무 두껍고 잘 읽히지도 않는다. 그에 반해 이 책은 좋은 코드에 관한 거의 모든 내용을 쉽게 담았다. 게다가 얇다!&lt;/p&gt;

&lt;h2 id=&quot;쉬운-코드&quot;&gt;쉬운 코드&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;코드는 다른 사람이 그것을 이해하는 데 들이는 시간을 최소화 하는 방식으로 작성되어야 한다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 23페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드를 완전히 이해 한다면 코드를 좀 더 자유롭게 변경 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;가장 읽기 쉬운 코드는 아무 것도 없는 코드다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 192페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;뭔가 멋지거나 대단한 기능을 구현하려고 하는 것 보다 이게 정말 필요한 기능인지 요구 사항을 잘 분석해야 한다. 불필요한 기능이 많아진다는 것은 불필요한 코드가 많아진다는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;변수명&quot;&gt;변수명&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;변수의 이름은 작은 설명문이다. 충분한 공간은 아니지만, 이름 안에 끼워 넣은 추가 정보는 변수가 눈에 보일 때마다 전달된다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 40페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;책에서 가장 먼저 언급하는 것은 &lt;strong&gt;변수명&lt;/strong&gt;에 관한 것이다. 변수, 함수, 혹은 클래스 등의 이름은 변수의 값을 설명하는 구체적인 정보가 포함되어야 한다. 본인이 지은 이름을 “다른 사람은 어떻게 해석할 수 있을까?” 라는 질문을 던져보며 고민해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 좋지 않은 예&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pubic&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위는 안 좋은 예이다. 어디서 뭘 가져온다는(get)것 인지 메소드명만으로는 전혀 유추가 불가능하다. 만약 인터넷에서 페이지를 가져오는 메소드라면 fetchPage() 또는 downloadPage() 등의 이름이 더 적절하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 좋지 않은 예&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;특히, 루프안에서 사용하는 인덱스 변수는 간단히 작성하는 경우가 많다. 가능하면 의미를 담는 것이 좋다. 중첩 된 반복문의 경우 (애초에 중첩을 안하는게 좋겠지만!) 굉장히 도움이 된다.&lt;/p&gt;

&lt;h2 id=&quot;일관성&quot;&gt;일관성&lt;/h2&gt;
&lt;p&gt;얼마 전 자주 가는 개발 관련 커뮤니티에서 재밌는 글을 봤다. 자주 있는 논란이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 보기 (1)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 보기 (2)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 두 가지 스타일 중 어떤 스타일을 선호하냐는 글이 있었는데 댓글에 의견이 분분했다. 사실 정답은 없다고 생각한다. 각 언어 마다 전통적으로 권장 되는 스타일이 있고, 또 본인이 현재 속한 팀 안의 코드 컨벤션이 있을 것이고 말 그대로 Case by Case 이다. 중요한 것은 &lt;strong&gt;일관성&lt;/strong&gt; 이다. 코드를 작성할 때 각종 스타일 (줄바꿈, 정렬 등)은 전체에 일관성 있게 유지하는 것이 중요하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일관성 있는 스타일은 ‘올바른’ 스타일보다 더 중요하다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 73페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;주석&quot;&gt;주석&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;주석의 목적은 코드를 읽는 사람이 코드를 작성한 사람만큼 코드를 잘 이해하게 돕는 데  있다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 76페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;주석을 다는 것보다 코드 스스로 설명하도록 하는 것이 좋다. 스스로 설명한다는 것은 변수나 메소드에 좋은 이름을 사용하는 것이다. 좋은 이름은 좋은 주석보다 더 낫다. 메소드를 설명할 때는 수행하는 동작을 설명하지 말고 의도를 명시하는 것이 좋다. 언어 자체가 야기하는 혼란을 제거하고 설명을 더 명확하고 자세하게 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// (1) 단순히 수행하는 동작을 설명&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 리스트를  반복한다&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// (2) 의도를 명시&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 각 가격을 낮은 값에서 높은 값으로 하나씩 꺼내온다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;코드는 지속적으로 진화하며, 그러는 과정 중에 버그를 갖게 될 수 밖에 없다. 이러한 결함을 설명하는 것을 부끄러워 할 필요는 없다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 81페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 부분은 맘에 들었던 부분인데, 주석을 통해 코드에 있는 결함을 설명하라고 한다. 내가 사용하고 있는 IntelliJ 의 경우 TODO 주석을 작성 하면 별도의 메뉴에서 TODO 리스트들을 확인 할 수 있기 때문에 언제든지 리스트를 빠르게 체크할 수 있다. 가능하면 최선의 코드를 짜는 것이 좋지만 어떠한 이유로 결점이나 부족한 점이 있는 코드를 짰을 때, 이렇게 주석으로 남겨 두면 나중에 나 뿐만 아니라 다른 사람이 내 코드를 볼 때도 많은 도움이 될 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// TODO: OOO점이 개선되어야 함.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnforceLimitsFromRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;읽기-쉬운-흐름-제어&quot;&gt;읽기 쉬운 흐름 제어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;아래 코드와 같이 부정보다 긍정이 먼저 등장하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 좋지 않은 예&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 부정보다는 긍정이 조건절에 등장하는 것이 좋다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasQueryParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;라인 수를 최소화 하는 일보다 다른 사람이 코드를 읽고 이해하는 데 걸리는 시간을 최소화하는 일이 더 중요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 삼항 연산자를 이용하면 코드를 한 줄에 나타낼 수 있다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 하지만 한 줄에 쓰기 그 이상도 그 이하도 아니다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mantissa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mantissa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 라인 수는 늘어났지만 읽기가 좀 더 낫다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;조건문에서 인수의 순서는 왼쪽에 더 유동적인 ‘질문을 받는 표현’을, 오른쪽에 더 고정적인 값 즉, 비교 대상으로 사용되는 표현을 쓴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes_expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 위보다 아래가 읽기 쉽다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;이미-있는-코드를-읽어라&quot;&gt;이미 있는 코드를 읽어라&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;프로그래머는 이미 존재하는 라이브러리로 문제를 풀 수 있는 상황이 많다는 걸 모르고 있다. 아니면 라이브러리가 할 수 있는 일을 잊어버린다.&lt;/p&gt;

  &lt;p&gt;더스틴보즈웰, 트레버파우커 저. 읽기 좋은 코드가 좋은 코드다. 임백준 역. 한빛미디어. 2012. 196페이지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;내가 처음 수행했던 프로젝트에서도 선배 개발자가 정의한 유용한 함수들이 꽤 많이 포함 되어 있었다. 하지만 그게 있는 줄 모르고 그 기능을 구현하기 위해 많은 시간을 허비한 경험이 있다. 꼭 새롭게 구현하는 것만 중요한 것이 아니라 필요할 때 어떤 걸 가져다 써야 하는지 아는 것도 중요하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 2017-06-24 일부 내용 및 오타 수정.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Fri, 06 May 2016 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2016-05-06/art-of-readable-code/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2016-05-06/art-of-readable-code/</guid>
			</item>
		
			<item>
				<title>Today I Learned (Link)</title>
        <description>
</description>
				<pubDate>Sun, 17 Apr 2016 00:00:00 +0900</pubDate>
				<link>https://iamkyu.github.io/2016-04-17/today-i-learned/</link>
				<guid isPermaLink="true">https://iamkyu.github.io/2016-04-17/today-i-learned/</guid>
			</item>
		
	</channel>
</rss>
