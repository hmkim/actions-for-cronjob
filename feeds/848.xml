<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>기본기를 쌓는 정아마추어 코딩블로그</title>
<link>https://jeong-pro.tistory.com/</link>
<description>정아마추어 코딩블로그</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 02:52:21 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>JEONG_AMATEUR</managingEditor>
<image>
<title>기본기를 쌓는 정아마추어 코딩블로그</title>
<url>https://tistory1.daumcdn.net/tistory/2756523/attach/04195511fc744007a6ff08aa679cc42e</url>
<link>https://jeong-pro.tistory.com</link>
<description>정아마추어 코딩블로그</description>
</image>
<item>
<title>How does @Async work? @Async를 지금까지 잘 못 쓰고 있었습니다(@Async 사용할 때 주의해야 할 것, 사용법)</title>
<link>https://jeong-pro.tistory.com/187</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bAFEMd/btqu0tzJOWl/1iNSkowCkE1YFUuMlXttv1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bAFEMd/btqu0tzJOWl/1iNSkowCkE1YFUuMlXttv1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbAFEMd%2Fbtqu0tzJOWl%2F1iNSkowCkE1YFUuMlXttv1%2Fimg.png' data-filename=&quot;async주의사항.png&quot; width=&quot;250&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;@Async in Spring boot&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;스프링 부트에서 개발자에게 비동기 처리를 손쉽게 할 수 있도록 다양한 방법을 제공하고 있다.&lt;/p&gt;
&lt;p&gt;대세는 Reactive stack, CompletableFuture를 쓰겠으나 역시 가장 쉬운 방법으로는 @Async annotation을 적용하는 것이다.&lt;/p&gt;
&lt;p&gt;그래서 필자도 @Async를 비동기 작업이 필요한 메서드에 덕지덕지 발라놨으나 제대로 작동하지 않는 것을 알게 되었고 주의해야 할 내용과 잘 회피하는 방법(?)을 생각해봤다.&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;h3&gt;&lt;b&gt;@Async 사용법&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;많은 블로그에도 정리가 잘 나와있는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;1. @EnableAsync로 @Async를 쓰겠다고 스프링에게 알린다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2. 비동기로 수행되었으면 하는 메서드위에 @Async를 적용한다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/guides/gs/async-method/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;스프링 가이드&lt;/a&gt;에도 마찬가지로 설명해준다.&lt;/p&gt;
&lt;p&gt;만약에 별도로 @Async에 대한 설정이 없으면 새로운 비동기 작업을 스레드 풀에서 처리하는 게 아니라 새로운 스레드를 매번 생성해서 작업을 수행시키는 것이 디폴트 설정이다.&lt;/p&gt;
&lt;p&gt;그래서 쓰레드풀을 빈으로 등록시켜줘서 자동으로 해당 스레드 풀로 작업을 넘기도록 설정한다.&lt;/p&gt;
&lt;pre id=&quot;code_1556940863704&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Configuration
@EnableAsync
public class AsyncThreadConfiguration {
	@Bean
	public Executor asyncThreadTaskExecutor() {
		ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
		threadPoolTaskExecutor.setCorePoolSize(8);
		threadPoolTaskExecutor.setMaxPoolSize(8);
		threadPoolTaskExecutor.setThreadNamePrefix(&quot;jeong-pro-pool&quot;);
		return threadPoolTaskExecutor;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 configuration 클래스를 하나 만들고 Bean을 등록하면 자동으로 내가 만든 스레드 풀에 작업이 할당될 것이다.&lt;/p&gt;
&lt;p&gt;springboot 2.0 이상이라면 auto configuration으로 Executor를 등록해주기 때문에 아래와 같이 설정 파일에서 설정해도 똑같이 스레드 풀이 생성 및 적용될 것이다. (application.yml)&lt;/p&gt;
&lt;pre id=&quot;code_1556940959136&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;spring:
  task:
    execution:
      pool:
        core-size: 8
        max-size: 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 설정단계를 거쳤으면 아래 코드처럼 @Async를 통해 호출할 수 있다.&lt;/p&gt;
&lt;pre id=&quot;code_1556941053456&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@RestController
public class TestController {
	@Autowired
	private TestService testService;
	
	@GetMapping(&quot;/test1&quot;)
	public void test1() {
		for(int i=0;i&amp;lt;10000;i++) {
			testService.asyncHello(i);
		}
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre id=&quot;code_1556941092864&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class TestService {
	private static final Logger logger = LoggerFactory.getLogger(TestService.class);
	
	@Async
	public void asyncHello(int i) {
		logger.info(&quot;async i = &quot; + i);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래와 같이 설정하고 테스트를 해볼 수 있다.&lt;/p&gt;
&lt;p&gt;보이는 대로 브라우저에서 &quot;localhost:8080/test1&quot;로 연결해보면 로그를 10,000번 찍는 과정이 비동기로 호출되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bnElg0/btqu15cUm9d/cuL7RjHB9XuC8gzQ8psWCk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bnElg0/btqu15cUm9d/cuL7RjHB9XuC8gzQ8psWCk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbnElg0%2Fbtqu15cUm9d%2FcuL7RjHB9XuC8gzQ8psWCk%2Fimg.png' data-filename=&quot;async로그.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;threadName을 보니 jeong-pro-pool로 적은 prefix가 잘 적용되어서 해당 풀을 사용하고 있음을 알 수 있고, 0부터 9999까지 순서대로 찍히는 게 아니라 비동기로 수행되기 때문에 순서가 뒤죽박죽인 것을 확인할 수 있다.&lt;/p&gt;
&lt;p style=&quot;font-size: 1.25em;&quot;&gt;&lt;b&gt;* 여기까지는 다른 블로그도 잘 설명해준다! (&lt;s&gt;다른 블로그가 더 잘 설명해준다&lt;/s&gt;)&lt;/b&gt;&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;h3&gt;&lt;b&gt;&lt;span&gt;@Async is not a silver bullet&lt;/span&gt;&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;@Async는 은 탄환이 아니다.&lt;/p&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;&lt;b&gt;&lt;span style=&quot;background-color: #ffcd00;&quot;&gt;private 메서드에는 적용이 안된다. public만 된다.&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;span style=&quot;background-color: #ffcd00;&quot;&gt;self-invocation(자가 호출)해서는 안된다. -&amp;gt; 같은 클래스 내부의 메서드를 호출하는 것은 안된다.&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 주의사항이 있다. (+ 리턴값에 대해서 void나 CompletableFuture&amp;lt;&amp;gt; 여야 한다는데...)&lt;/p&gt;
&lt;p&gt;필자는 위의 테스트코드를 한 번 적용해보고 되니까, 아무 생각도 없이 &quot;@Async만 붙이면 알아서 되겠구나&quot; 했다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;그런 생각으로 같은 클래스에 있는 private 내부 메서드에도 @Async 달고 그랬으니 안됐다...&lt;/p&gt;
&lt;p&gt;아래 테스트를 보자.&lt;/p&gt;
&lt;pre id=&quot;code_1556942376450&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@RestController
public class TestController {
	@Autowired
	private TestService testService;
	
	@GetMapping(&quot;/test2&quot;)
	public void test2() {
		for(int i=0;i&amp;lt;10000;i++) {
			testService.innerMethodCall(i);
		}
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre id=&quot;code_1556942503411&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class TestService {
	private static final Logger logger = LoggerFactory.getLogger(TestService.class);
	
	@Async
	public void innerMethod(int i) {
		logger.info(&quot;async i = &quot; + i);
	}
	
	public void innerMethodCall(int i) {
		innerMethod(i);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드를 테스트해보면 controller에서 testService.innerMethodCall()를 동기로 호출하지만 내부에서 하는 작업이 비동기로 @Async가 걸린 innerMethod를 호출하니까 결국에는 비동기로 로그가 찍힐 것을 예상할 수 있다.&lt;/p&gt;
&lt;p&gt;하지만 틀렸다. 아래 처럼 하나의 스레드로 동기 처리됨을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/d2Tgzs/btqu1sNa3Ga/pewcaoGKF4YK4oPjAs2eS1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/d2Tgzs/btqu1sNa3Ga/pewcaoGKF4YK4oPjAs2eS1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fd2Tgzs%2Fbtqu1sNa3Ga%2FpewcaoGKF4YK4oPjAs2eS1%2Fimg.png' data-filename=&quot;동기로그.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;왜 그럴까?&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/effective-advice-on-spring-async-part-1&quot;&gt;https://dzone.com/articles/effective-advice-on-spring-async-part-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위의 출처에서 제대로 설명해준다.&lt;/p&gt;
&lt;p&gt;결론부터 말하면 AOP가 적용되어 Spring context에 등록되어 있는 빈 객체의 메서드가 호출되었을 때 스프링이 끼어들 수 있고 @Async가 적용되어 있다면 스프링이 메서드를 가로채서 다른 스레드(풀)에서 실행시켜주는 메커니즘이라는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cbHGcQ/btqu05EUUPh/gEIP1f8WYwxnrwfQdVmfuk/img.jpg' data-lightbox='lightbox' data-alt='출처 - https://dzone.com/articles/effective-advice-on-spring-async-part-1'&gt;&lt;img src='https://k.kakaocdn.net/dn/cbHGcQ/btqu05EUUPh/gEIP1f8WYwxnrwfQdVmfuk/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcbHGcQ%2Fbtqu05EUUPh%2FgEIP1f8WYwxnrwfQdVmfuk%2Fimg.jpg' data-filename=&quot;springasync.jpg&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;출처 - https://dzone.com/articles/effective-advice-on-spring-async-part-1&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그렇기 때문에 위에 제약조건이었던 것들이 이해가 된다.&lt;/p&gt;
&lt;p&gt;public이어야 가로챈 스프링의 다른 클래스에서 호출이 가능할 것이고,&lt;/p&gt;
&lt;p&gt;self-invocation이 불가능 했던 이유도 spring context에 등록된 빈의 메서드 호출이어야 프록시를 적용받을 수 있기에 내부 메서드 호출은 프록시 영향을 받지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;위와 같은 문제를 겪은 다른 사람의 정보를 얻기 위해 구글 검색을 하던 중,&lt;/p&gt;
&lt;p&gt;스택오버플로우에 올라온 답변중에 나름 신박한 방법이 있어 아래에 소개한다. (참고로 같은 기능을 하는 서비스를 두 개(sync, async)로 나눈 다는 답변도 있었다;;)&lt;/p&gt;
&lt;pre id=&quot;code_1556943259388&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class AsyncService {
	@Async
	public void run(Runnable runnable) {
		runnable.run();
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 AsyncService를 하나 두고 해당 서비스는 유틸 클래스처럼 전역에서 사용하도록 두는 것이다.&lt;/p&gt;
&lt;p&gt;@Async메서드 run을 통해 들어오는 Runnable을 그냥 실행만 해주는 메서드다.&lt;/p&gt;
&lt;pre id=&quot;code_1556943337124&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class TestService {
	private static final Logger logger = LoggerFactory.getLogger(TestService.class);
	@Autowired
	private AsyncService asyncService;
	
	public void innerMethod(int i) {
		logger.info(&quot;async i = &quot; + i);
	}
	
	public void innerMethodCall(int i) {
		asyncService.run(()-&amp;gt;innerMethod(i));
		
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그다음에 비동기 메서드 호출이 필요할 때 해당 서비스로 메서드를 호출해버리는 것이다.&lt;/p&gt;
&lt;p&gt;저렇게 하니까 결과도 비동기로 처리하는 모습을 볼 수 있었다.&lt;/p&gt;
&lt;p&gt;@Async annotation을 수행하는 자바 클래스의 내부를 보고 싶은데 어떻게 보는지 몰라서 못 봤다.&lt;/p&gt;
&lt;p&gt;실제로 그 클래스가 runnable을 생성하고 메서드를 태워 보내는 방법이라면 위와 같은 해결방법도 나쁘지 않을 수 있겠다는 생각을 했다. (혹시 내부 수행 과정을 아시는 분은 댓글에 설명 부탁드립니다.)&lt;/p&gt;
&lt;p&gt;(뭐 물론 Bean의 메서드만 호출할 꺼고 그 호출이 비동기이기를 바라는 것이라면 그냥 @Async만으로도 충분하겠지만 개인적인 경험에서는 service의 메서드는 동기로 호출되길 바라지만 내부에서 하는 기능(동작)에서 일부만 비동기로 실행되기를 바랐었다.)&lt;/p&gt;
&lt;p&gt;그런데 개인적인 생각으로는 @Async를 안쓰는 방법이긴 하지만 차라리 CompletableFuture를 쓰되 해당 스레드 풀에서 실행되기를 바라면 아래와 같이 Executor를 주입받고 호출하는 것이 나을 것 같다.&lt;/p&gt;
&lt;pre id=&quot;code_1556943877205&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class TestService {
	private static final Logger logger = LoggerFactory.getLogger(TestService.class);
	@Autowired
	private Executor executor;
	
	public void innerMethod(int i) {
		logger.info(&quot;async i = &quot; + i);
	}
	
	public void innerMethodCall(int i) {
		CompletableFuture.runAsync(()-&amp;gt;innerMethod(i),executor);
		
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드를 실행해도 executor로 등록한 jeong-pro-pool이 주입되어 해당 풀에서 작업들이 수행된다.&lt;/p&gt;
&lt;p&gt;* 아, 참고로 void나 future가 아닌 String 리턴 값을 가진 메서드에 @Async를 달았는데도 잘 수행되었다... 테스트에 무슨 문제가 있는지 알고 싶다...&lt;/p&gt;
&lt;p&gt;끝&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/187&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>@Async</category>
<category>AOP</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/187</guid>
<comments>https://jeong-pro.tistory.com/187#entry187comment</comments>
<pubDate>Sat, 04 May 2019 13:25:34 +0900</pubDate>
</item>
<item>
<title>@Scheduled 사용법, 스케줄러 커스터마이징을 통한 제어(+스케줄러에 등록한 작업 중지하는 방법, 배치 효과, 정확한 주기 작업 사용법)</title>
<link>https://jeong-pro.tistory.com/186</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/9Xf1I/btquXtFhFOk/XYYqK9ivM0NrGlOqXHdrR1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/9Xf1I/btquXtFhFOk/XYYqK9ivM0NrGlOqXHdrR1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2F9Xf1I%2FbtquXtFhFOk%2FXYYqK9ivM0NrGlOqXHdrR1%2Fimg.png' data-filename=&quot;스케줄러 사용법.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;@Scheduled 사용법&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;주기적인 작업이 있을 때 @Scheduled 애노테이션을 사용하면 쉽게 적용할 수 있다. ex) linux의 crontab&lt;/p&gt;
&lt;p&gt;1. @EnableScheduling Annotation을 적어서 스케줄링을 사용한다는 것을 알린다.&lt;/p&gt;
&lt;pre id=&quot;code_1556672718869&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@EnableScheduling
@SpringBootApplication
public class SchedulerApplication {
	public static void main(String[] args) {
		SpringApplication.run(SchedulerApplication.class, args);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 하위 패키지의 클래스에서 주기적으로 수행해야할 메서드 위에 @Scheduled Annotation을 붙인다.&lt;/p&gt;
&lt;pre id=&quot;code_1556672831012&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Scheduled(fixedRateString = &quot;5&quot;, initialDelay = 3000)
private void scheduleTest() {
	logger.error(&quot;hello jeong-pro&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;끝!&lt;/p&gt;
&lt;p&gt;위와 같이 사용하게되면 3초의 대기시간(initialDelay) 후에 5ms(fixedRate)마다 &quot;hello jeong-pro&quot;라는 로그를 찍는 작업을 스케줄러가 수행해준다.&lt;/p&gt;
&lt;p&gt;사용을 위해 해야할 작업은 알아봤고, 이제 @Scheduled 활용을 위한 속성(attribute)를 확인해본다.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;속성&lt;/b&gt;&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: square;&quot; data-ke-list-type=&quot;square&quot;&gt;
&lt;li&gt;cron : cron표현식을 지원한다. &quot;초 분 시 일 월 주 (년)&quot;으로 표현한다. cron표현식에 쓸 수 있는 것들(특수문자 활용 포함)이 많은데 해당 내용이 핵심이 아니므로 다른 블로그에서 확인해보기를 바란다.&lt;/li&gt;
&lt;li&gt;fixedDelay : milliseconds 단위로, 이전 작업이 끝난 시점으로 부터 고정된 시간을 설정한다. ex) fixedDelay = 5000&lt;/li&gt;
&lt;li&gt;fixedDelayString : fixedDelay와 같은데 property의 value만 문자열로 넣는 것이다. ex) fixedDelay = &quot;5000&quot;&lt;/li&gt;
&lt;li&gt;fixedRate : milliseconds 단위로, 이전 작업이 수행되기 시작한 시점으로 부터 고정된 시간을 설정한다. ex) fixedRate = 3000&lt;/li&gt;
&lt;li&gt;fixedRateString : fixedDelay와 같은데 property의 value만 문자열로 넣는 것이다. ex) fixedRate = &quot;3000&quot;&lt;/li&gt;
&lt;li&gt;initialDelay : 스케줄러에서 메서드가 등록되자마자 수행하는 것이 아닌 초기 지연시간을 설정하는 것이다.&lt;/li&gt;
&lt;li&gt;initialDelayString : 위와 마찬가지로 문자열로 값을 표현하겠다는 의미다.&lt;/li&gt;
&lt;li&gt;zone : cron표현식을 사용했을 때 사용할 time zone으로 따로 설정하지 않으면 기본적으로 서버의 time zone이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;b&gt;* fixedDelay vs fixedRate&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/lAcpl/btquW5rc2Th/SZ4tzPwNxVnpt3LhkLckEK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/lAcpl/btquW5rc2Th/SZ4tzPwNxVnpt3LhkLckEK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FlAcpl%2FbtquW5rc2Th%2FSZ4tzPwNxVnpt3LhkLckEK%2Fimg.png' data-filename=&quot;그림1.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;간단하게 그림을 그려봤는데 결국 Rate는 작업 수행시간과 상관없이 일정 주기마다 메서드 호출을 시켜주는 것이고,&lt;/p&gt;
&lt;p&gt;Delay는 (작업 수행 시간을 포함하여) 작업을 마친 후부터 주기 타이머가 돌아 메서드를 호출해주는 것이다.&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;p&gt;springboot 2.0에서는 auto-configration이 있기 때문에 스프링부트가 알아서 스케줄러를 생성해준 것인데, 이 스케줄러의 경우 쓰레드풀이 아니기 때문에 많은 작업이 있을 때 효율적이지 못하다.&lt;/p&gt;
&lt;p&gt;그래서 커스터마이징을 해주는 것이 좋다.&lt;/p&gt;
&lt;p&gt;단순하게는 yml에서 아래와 같이 설정을 할 수도 있지만 configuration을 만들어서 사용해보겠다.&lt;/p&gt;
&lt;pre id=&quot;code_1556675235281&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;spring:
  task:
    scheduling:
      pool:
        size: 8
      thread-name-prefix: my-scheduler&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아! 스레드풀로 사용되지 않는 것을 확인하려면 짧은 주기로 로그를 찍어보면 된다.&lt;/p&gt;
&lt;p&gt;이름이 scheduling-1 이라는 쓰레드만 계속 돌아서 수행시켜줄 것이다.&lt;/p&gt;
&lt;pre id=&quot;code_1556675382009&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Configuration
public class SchedulerConfiguration {
	@Bean
	public TaskScheduler poolScheduler() {
		ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
		threadPoolTaskScheduler.setPoolSize(Runtime.getRuntime().availableProcessors() * 2);
		threadPoolTaskScheduler.setThreadNamePrefix(&quot;jeong-pro-threadpool&quot;);
		return threadPoolTaskScheduler;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이런식으로 스케줄러를 빈으로 등록하기만 하면 알아서 위에서 생성한 스케줄러에 작업을 할당해준다.&lt;/p&gt;
&lt;p&gt;실제로 ThreadNamePrefix가 잘 작동되는지 작업을 많이 줘서 살펴보면 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cXsvrQ/btquT3aBZwx/ZbOjHUPAV6u40MCmxgXgD0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cXsvrQ/btquT3aBZwx/ZbOjHUPAV6u40MCmxgXgD0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcXsvrQ%2FbtquT3aBZwx%2FZbOjHUPAV6u40MCmxgXgD0%2Fimg.png' data-filename=&quot;쓰레드확인.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;앞에 부분이 짤렸는데 pro-threadpool하면서 숫자가 다른 것들이 보인다. 여러 쓰레드가 작업을 수행한 것이다.&lt;/p&gt;
&lt;p&gt;이정도는 가볍게 할 수 있을 것이다.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;비율은 고정인가?&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;이제는 비율을 과연 고정으로 써야하는가?에 대해 풀어갈 것이다. 지금은 @Scheduled를 쓸 때 항상 2000, &quot;2000&quot; 이런식으로 코드내에 고정적으로 들어갔다.&lt;/p&gt;
&lt;p&gt;이 문제를 동적으로 해결하는 방법을 알아본다.&lt;/p&gt;
&lt;pre id=&quot;code_1556675755410&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Scheduled(fixedRateString = &quot;${myscheduler.period}&quot;, initialDelay = 2000)
private void scheduleTest() {
	logger.error(&quot;hello jeong-pro&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 .yml이나 .properties 파일에 있는 값을 가져와서 적용할 수도 있다.&lt;/p&gt;
&lt;p&gt;코드와 설정파일로 분리를 해낸 것이다.&lt;/p&gt;
&lt;p&gt;아예 운영중에 동적으로 변환하려면 기존의 스케줄러에 등록한 작업을 빼고 새로 등록할 작업을 등록하는데 @Scheduled를 굳이 쓸필요없이 위의 configuration에서 생성한 스케줄러 빈을 주입받아 그 곳에 직접 작업을 등록하는 방법을 쓸 수도 있다. (아래에서 해볼 예정)&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;커스터마이징&lt;/b&gt;&lt;/h3&gt;
&lt;pre id=&quot;code_1556676076579&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;public class CustomThreadPoolTaskScheduler extends ThreadPoolTaskScheduler {
	private static final long serialVersionUID = 1L;

	@Override
	public ScheduledFuture&amp;lt;?&amp;gt; scheduleAtFixedRate(Runnable task, long period) {
		if (period &amp;lt;= 0) {
			return null;
		}
		ScheduledFuture&amp;lt;?&amp;gt; future = super.scheduleAtFixedRate(task, period);
		return future;
	}

	@Override
	public ScheduledFuture&amp;lt;?&amp;gt; scheduleAtFixedRate(Runnable task, Date startTime, long period) {
		if (period &amp;lt;= 0) {
			return null;
		}
		ScheduledFuture&amp;lt;?&amp;gt; future = super.scheduleAtFixedRate(task, startTime, period);
		return future;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;우리는 자바를 사용하기 때문에 상속을 통해 메서드를 Override할 수 있다.&lt;/p&gt;
&lt;p&gt;기존에 스케줄러에 주기가 0인 작업을 던져주면 예외를 발생시키게 코딩되어있다. ThreadPoolTaskScheduler 내부 코드를 확인해보면 된다.&lt;/p&gt;
&lt;p&gt;근데 개인적인 요구사항으로 예를들어서 0으로 지정하면 작업을 수행 안하게 했다고 한다면, 위와 같이 0이하로 왔을 때 그냥 return null;로 끝내버리도록 단순하게 바꿀 수 있다는 것이다.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;동적 주기 사용(빈 주입), 중간에 작업 중지시키기&lt;/b&gt;&lt;/h3&gt;
&lt;pre id=&quot;code_1556676287379&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class SchedulerService {
	private static final Logger logger = LoggerFactory.getLogger(SchedulerService.class);
	private Map&amp;lt;String, ScheduledFuture&amp;lt;?&amp;gt;&amp;gt; scheduledTasks = new ConcurrentHashMap&amp;lt;&amp;gt;();
	
	@Autowired
	private TaskScheduler taskScheduler;
	
	public void register() {
		ScheduledFuture&amp;lt;?&amp;gt; task = taskScheduler.scheduleAtFixedRate(()-&amp;gt;logger.info(&quot;hello jeong-pro&quot;), 1000);
		scheduledTasks.put(&quot;mySchedulerId&quot;, task);
	}
	
	public void remove() {
		scheduledTasks.get(&quot;mySchedulerId&quot;).cancel(true);
	}
	
	@Scheduled(fixedRateString = &quot;${myscheduler.period}&quot;, initialDelay = 2000)
	private void scheduleTest() {
		logger.error(&quot;fix&quot;);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;서비스 코드를 만들었다.&lt;/p&gt;
&lt;p&gt;@Autowired로 등록되어있는 스케줄러를 불러왔고 register() 메서드를 보면 알 수 있듯, 작업을 생성해서 scheduleAtFixedRate()로 작업을 등록해주면 똑같이 사용하는 것이다.&lt;/p&gt;
&lt;p&gt;이것으로 동적으로 주기를 설정할 수 있고, 리턴 값으로 받는 ScheduledFuture&amp;lt;?&amp;gt;를 관리하도록 한다면(위에서는 Map으로 관리) 가지고 있다가 원하는 타이밍에 해당 작업을 스케줄러에서 취소할 수도 있다.&lt;/p&gt;
&lt;p&gt;remove메서드를 확인해보면 ScheduledFuture를 받아와서 cancel(true)로 작업을 중지한다.&lt;/p&gt;
&lt;p&gt;끝.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/186&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>batch</category>
<category>Scheduled</category>
<category>Scheduler</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/186</guid>
<comments>https://jeong-pro.tistory.com/186#entry186comment</comments>
<pubDate>Wed, 01 May 2019 11:06:51 +0900</pubDate>
</item>
<item>
<title>Stream foreach 성능 테스트 (stream을 사용하지 말아야할 때는 언제일까로 시작된 간단한 테스트)</title>
<link>https://jeong-pro.tistory.com/185</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;Stream foreach 반복문 테스트&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;자바 Stream을 이용한지 꽤 됐다.&lt;/p&gt;
&lt;p&gt;필자가 개인적으로 Stream을 사용하는 이유는 가독성이 좋아지기 때문이다. (가장 큰 이유)&lt;/p&gt;
&lt;p&gt;예전에 Stream이 막 등장했을 시기에는&amp;nbsp;Stream이 어색하고 전통적인 for loop에 익숙한 개발자와 같이 개발할 수 있기 때문에 Stream 도입을 유의하자고 많이 했다.&lt;/p&gt;
&lt;p&gt;근데 요즘에는 고민 없이 사용할 만큼 Stream을 많이 사용한다.&lt;/p&gt;
&lt;p&gt;필자 또한 Stream을 잘 이용하는데 문제는 &lt;u&gt;적재적소에 사용하지 못하는 점&lt;/u&gt;이다.&lt;/p&gt;
&lt;p&gt;여기서 적재적소라 함은 Stream이 더 유용할 때 사용하는 것이다.&lt;/p&gt;
&lt;p&gt;보통 map(), flatMap()등을 이용해야할 때나 이용하면 더 작업이 간결하고 성능상에도 이득이 있을 때 사용하는 것을 권장하는 것으로 알고 있다.&lt;/p&gt;
&lt;p&gt;그런데 개인적으로는 그냥 자동적으로 stream을 쓰고, filter(), foreach()를 주로 쓰고 그나마 anyMatch()정도(?)를 추가로 사용해왔다.&lt;/p&gt;
&lt;p&gt;그러던 중 &lt;u&gt;Stream을 사용하는 것이 성능에 더 안 좋다는 얘기&lt;/u&gt;가 자주 들리기 시작하면서 테스트를 해봐야겠다하고 생각했다.&lt;/p&gt;
&lt;p&gt;그래서 아래와 같이 성능 테스트를 진행했다. (다른 벤치마크들이 많이 있지만 내가 쓰는 환경에서 내가 쓰는 스타일로 했을 때 성능이 어떤지 확인하고 싶었기 때문이다.)&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;h3&gt;&lt;b&gt;테스트 및 결과&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;환경 : intel core i5-6200U 2.3GHz, 8GB RAM, 64bit window, 이클립스에서 실행&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555853077471&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;package com.example.demo.controller;

import java.util.Collections;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.annotation.PostConstruct;

import org.springframework.util.StopWatch;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestController {
	private CopyOnWriteArrayList&amp;lt;Integer&amp;gt; list;
	private static int min = Integer.MAX_VALUE;
	@PostConstruct
	private void init() {
		list = new CopyOnWriteArrayList&amp;lt;&amp;gt;();
		//랜덤 10만건
		Random random = new Random();
		for(int i=0;i&amp;lt;100000;i++) {
			list.add(random.nextInt());
		}
	}
	
	@GetMapping(&quot;/&quot;)
	public String performanceTest() {
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		list.stream().forEach(item-&amp;gt;{
			if(item &amp;lt; min) {
				min = item;
			}
		});
		stopWatch.stop();
		System.out.println(&quot;stream loop : &quot;+stopWatch.getTotalTimeMillis() + &quot;ms&quot;);
		///////////////////////////////////////////////////////////////////////		
		stopWatch = new StopWatch();
		min = Integer.MAX_VALUE;
		stopWatch.start();
		list.forEach(item-&amp;gt;{
			if(item &amp;lt; min) {
				min = item;
			}
		});
		stopWatch.stop();
		System.out.println(&quot;for each : &quot; + stopWatch.getTotalTimeMillis() + &quot;ms&quot;);		
		///////////////////////////////////////////////////////////////////////		
		stopWatch = new StopWatch();
		min = Integer.MAX_VALUE;
		stopWatch.start();
		for(int item : list) {
			if(item &amp;lt; min) {
				min = item;
			}
		}
		stopWatch.stop();
		System.out.println(&quot;advanced for : &quot; + stopWatch.getTotalTimeMillis() + &quot;ms&quot;);
		///////////////////////////////////////////////////////////////////////		
		stopWatch = new StopWatch();
		min = Integer.MAX_VALUE;
		stopWatch.start();
		for(int i=0;i&amp;lt;list.size();i++) {
			if(list.get(i) &amp;lt; min) {
				min = list.get(i);
			}
		}
		stopWatch.stop();
		System.out.println(&quot;for : &quot; + stopWatch.getTotalTimeMillis() + &quot;ms&quot;);
		///////////////////////////////////////////////////////////////////////		
		stopWatch = new StopWatch();
		min = Integer.MAX_VALUE;
		stopWatch.start();
		Collections.min(list);
		stopWatch.stop();
		System.out.println(&quot;collection : &quot; + stopWatch.getTotalTimeMillis() + &quot;ms&quot;);
		System.out.println(&quot;==========================================================&quot;);
		return &quot;complete&quot;;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자주 사용하는 스프링부트에서 &quot;/&quot;루트 경로로 HTTP 요청이 왔을 때 해당 실험을 하게 해놨다.&lt;/p&gt;
&lt;p&gt;여러번 요청을 시도해서 결과를 평균으로 받아봤다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/vizZk/btquI1bDziZ/ZoOKbKYFVL6iKirsAV6Zr0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/vizZk/btquI1bDziZ/ZoOKbKYFVL6iKirsAV6Zr0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FvizZk%2FbtquI1bDziZ%2FZoOKbKYFVL6iKirsAV6Zr0%2Fimg.png' data-filename=&quot;결과.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;결과의 일부다. 명칭이 조금 어색할 수도있다. 그냥 필자 마음대로 표기한 것이니 오해없기를 바란다.&lt;/p&gt;
&lt;p&gt;10만건에서 최소값을 찾기 위해 반복문을 도는 것을 테스트한 결과다.&lt;/p&gt;
&lt;p&gt;테스트 목적에 맞게 확인해보면 stream이 for문보다 느린 것 같이 나온다! for문의 경우 0ms도 가끔 나오는데 stream은 1ms, 2ms 왔다갔다 한다.&lt;/p&gt;
&lt;p&gt;더 자세하게 보기 위해 stopWatch를 쓰지 않고 System.nanotime()으로 체크해봤다.&lt;/p&gt;
&lt;pre id=&quot;code_1555853503871&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;package com.example.demo.controller;

import java.util.Collections;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.annotation.PostConstruct;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestController {
	private CopyOnWriteArrayList&amp;lt;Integer&amp;gt; list;
	private static int min = Integer.MAX_VALUE;
	@PostConstruct
	private void init() {
		list = new CopyOnWriteArrayList&amp;lt;&amp;gt;();
		Random random = new Random();
		for(int i=0;i&amp;lt;100000;i++) {
			list.add(random.nextInt());
		}
	}
	
	@GetMapping(&quot;/&quot;)
	public String performanceTest() {
		long start=0,end=0;
		start = System.nanoTime();
		list.stream().forEach(item-&amp;gt;{
			if(item &amp;lt; min) {
				min = item;
			}
		});
		end = System.nanoTime();
		System.out.println(&quot;stream loop : &quot;+ String.format(&quot;%,d&quot;, (end-start)) + &quot;ns&quot;);
		///////////////////////////////////////////////////////////////////////		
		min = Integer.MAX_VALUE;
		start = System.nanoTime();
		list.forEach(item-&amp;gt;{
			if(item &amp;lt; min) {
				min = item;
			}
		});
		end = System.nanoTime();
		System.out.println(&quot;for each : &quot; + String.format(&quot;%,d&quot;, (end-start)) + &quot;ns&quot;);		
		///////////////////////////////////////////////////////////////////////		
		min = Integer.MAX_VALUE;
		start = System.nanoTime();
		for(int item : list) {
			if(item &amp;lt; min) {
				min = item;
			}
		}
		end = System.nanoTime();
		System.out.println(&quot;advanced for : &quot;+String.format(&quot;%,d&quot;, (end-start)) + &quot;ns&quot;);
		///////////////////////////////////////////////////////////////////////		
		min = Integer.MAX_VALUE;
		start = System.nanoTime();
		for(int i=0;i&amp;lt;list.size();i++) {
			if(list.get(i) &amp;lt; min) {
				min = list.get(i);
			}
		}
		end = System.nanoTime();
		System.out.println(&quot;for : &quot; + String.format(&quot;%,d&quot;, (end-start)) + &quot;ns&quot;);
		///////////////////////////////////////////////////////////////////////		
		min = Integer.MAX_VALUE;
		start = System.nanoTime();
		Collections.min(list);
		end = System.nanoTime();
		System.out.println(&quot;collection : &quot; + String.format(&quot;%,d&quot;, (end-start)) + &quot;ns&quot;);
		System.out.println(&quot;==========================================================&quot;);
		return &quot;complete&quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bvvEBE/btquJs088oQ/MXRys8lDd1NqnpSuybOR4k/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bvvEBE/btquJs088oQ/MXRys8lDd1NqnpSuybOR4k/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbvvEBE%2FbtquJs088oQ%2FMXRys8lDd1NqnpSuybOR4k%2Fimg.png' data-filename=&quot;결과2.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;줄이 정렬이 안되어 있지만 for문이 보통 80만 나노초 밀리로 환산하면 0.8ms가 걸렸다.&lt;/p&gt;
&lt;p&gt;stream은 1.6ms가 걸렸다. 두 배차이가 난다. 애플리케이션 성격에 따라 치명적일 수도 있고 별일 아닐 수 있다.&lt;/p&gt;
&lt;p&gt;다음 결과는 10만건이 아니라 20만건으로 해봤다. 리스트에 20만개의 데이터가 들어있는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cPTbZm/btquIQg7k19/HhKQRbIzGxNBrvPrq7pSc0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cPTbZm/btquIQg7k19/HhKQRbIzGxNBrvPrq7pSc0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcPTbZm%2FbtquIQg7k19%2FHhKQRbIzGxNBrvPrq7pSc0%2Fimg.png' data-filename=&quot;결과3.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;뭔가 석연치 않다. for문이 느릴때도 생기기 때문이다.&lt;/p&gt;
&lt;p&gt;(테스트를 제대로 못했을 수도 있다지만...) 결과 차이가 들쭉 날쭉해서 뭐가 더 성능적으로 유리하다고 말하기 어렵다고 된다.....만!&lt;/p&gt;
&lt;p&gt;캡쳐 이후로 계속 테스트를 해서 찍어보니까 &lt;u&gt;결국은 for문이 더 빨랐다&lt;/u&gt;. (약1.5~2배)&lt;/p&gt;
&lt;p&gt;이번에는 반대로 데이터를 1000개로 줄여보았다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/7FMIJ/btquKfmJdgz/5FAj6dm5ukwP8qPP3UkrC1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/7FMIJ/btquKfmJdgz/5FAj6dm5ukwP8qPP3UkrC1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2F7FMIJ%2FbtquKfmJdgz%2F5FAj6dm5ukwP8qPP3UkrC1%2Fimg.png' data-filename=&quot;결과4.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;위의 실험과는 다른 결과가 나왔다. 오히려 적은 개수에서는 stream을 만드는 것이 더 성능이 좋았다.&lt;/p&gt;
&lt;p&gt;거기에 더 좋은 것이 stream을 만들지 않고 그냥 foreach를 돌리는게 더 빨랐다. 게다가 Collections.min()이 갑자기 좋아진다.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;정리&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;정리를 어떻게 해야하나 싶었다.&lt;/p&gt;
&lt;p&gt;자료형에 데이터가 많으면 for문쓰고 데이터가 적으면 stream을 쓰세요? foreach문을 쓰세요? 이러면 될까?&lt;/p&gt;
&lt;p&gt;아닌 것 같다.&lt;/p&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;필자가 정리한 부분은 중간에도 말했듯, &lt;b&gt;애플리케이션 성격&lt;/b&gt;이 중요한 것 같다.&lt;/p&gt;
&lt;p&gt;만약에 1~2ms, 속도, 성능이 크리티컬할 때는 for문, stream을 잘 테스트해서 적절하게 사용하는 것이 좋을 것이고&lt;/p&gt;
&lt;p&gt;그렇지 않다면 가독성을 위해 stream을 써도 좋을 것 같다.&lt;/p&gt;
&lt;p&gt;결과적으로 함수형 프로그래밍 패러다임과 람다가 주는 편의성, 가독성을 생각했을 때 stream을 버리기 아쉬운 마음이 든다.&lt;/p&gt;
&lt;p&gt;* 이렇게 테스트만 하고 끝나는게 아니라 왜 이런 결과가 나오는지 원리를 살펴보는 것도 필요하다.&lt;/p&gt;
&lt;p&gt;어떤 블로그에서는 Stream(Internal Iteration)을 사용하면 JVM과 라이브러리가 해야할 일이 많아지기 때문에 느려질 수 있다고 한다.&lt;/p&gt;
&lt;p&gt;또한 어떤 블로그에서는 JIT Compiler가 수십년간 for-loop에 최적화되어왔기 때문이고 stream이 나온지 그렇게 오래되지 않았기 때문이라고 한다.&lt;/p&gt;
&lt;p&gt;뭐 추가적으로 Stream을 만들고 뭔가 추가적인 작업으로 인한 오버헤드가 있을 것으로도 보인다.&lt;/p&gt;
&lt;p&gt;자세한 건 더 알아봐야하겠지만... 나름의 결론을 얻고 글을 마친다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;참고 사이트&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://homoefficio.github.io/2016/06/26/for-loop-%EB%A5%BC-Stream-forEach-%EB%A1%9C-%EB%B0%94%EA%BE%B8%EC%A7%80-%EB%A7%90%EC%95%84%EC%95%BC-%ED%95%A0-3%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0/&quot;&gt;https://homoefficio.github.io/2016/06/26/for-loop-%EB%A5%BC-Stream-forEach-%EB%A1%9C-%EB%B0%94%EA%BE%B8%EC%A7%80-%EB%A7%90%EC%95%84%EC%95%BC-%ED%95%A0-3%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0/&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/185&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>JAVA</category>
<category>Performance</category>
<category>Stream</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/185</guid>
<comments>https://jeong-pro.tistory.com/185#entry185comment</comments>
<pubDate>Sun, 21 Apr 2019 22:54:37 +0900</pubDate>
</item>
<item>
<title>spring boot yaml 파일에 쓰기! jackson-dataformat-yaml을 이용한 방법(snakeyaml? how to write to yaml file in spring boot)</title>
<link>https://jeong-pro.tistory.com/184</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;Spring boot에서 yaml 파일에 쓰기&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Spring boot에서 보통 application.yml 파일이나 application.properties 파일에 설정값들을 적고 @ConfigurationProperties을 이용해서 Bean으로 등록해서 사용하는 게 일반적이다.&lt;/p&gt;
&lt;p&gt;그래서 그런지 yaml 파일에 쓰는 것은 인터넷에 많이 안 나온다.&lt;/p&gt;
&lt;p&gt;아래에서 아주 간단하게 써볼 예정이다.&lt;/p&gt;
&lt;p&gt;필자가 yaml 파일에 쓰는 것을 생각하게된 이유는 서버 애플리케이션 운영 중에&amp;nbsp;&lt;span style=&quot;color: #333333;&quot;&gt;설정 값을&lt;/span&gt; 변경하고 싶고, 서버 애플리케이션이 꺼졌다가 다시 실행되더라도 설정 값을 유지하고 싶었기 때문이다.&lt;/p&gt;
&lt;p&gt;간단하게 데이터베이스에 설정 값을 저장하면 되지만...?&lt;/p&gt;
&lt;p&gt;필자는 서버 애플리케이션을 개발하지만 DB를 내 마음대로 달 수가 없는 환경이다...&lt;/p&gt;
&lt;p&gt;필드의 CS엔지니어에게 yml 파일 하나로 모든 설정 값을 관리하도록 가이드하기 위해서 한 번 시도해볼 것이다.&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;h3&gt;&lt;b&gt;예제 프로젝트, jackson-dataformat-yaml&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;* 구글에 검색해보니 snakeyaml 이라는게 나오던데 더 좋아 보이고 익숙한 jackson의&amp;nbsp;jackson-dataformat-yaml를 이용했다.&lt;/p&gt;
&lt;p style=&quot;font-size: 1.25em;&quot;&gt;&lt;b&gt;- 사용법&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;1. dependency 추가&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555594487348&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;com.fasterxml.jackson.dataformat&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;jackson-dataformat-yaml&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;2. 프로젝트 경로에 yml파일 생성 ( /config/application-config.yml )&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555594598368&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;---
name: eqp1
maxCount: 1
threshold: 90
associated:
  name: cha
  number: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;3. 읽고 쓰기&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555594756424&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@RestController
public class TestController {
	private static final String projPath = System.getProperty(&quot;user.dir&quot;);
	@Autowired
	private EquipmentProperties equipmentProperties;
	
	@GetMapping(&quot;/&quot;)
	public String test2() throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper objectMapper = new ObjectMapper(new YAMLFactory());
		String absolutePath = projPath + File.separator +&quot;config&quot; + File.separator + &quot;application-config.yml&quot;;
		File file = new File(absolutePath);
		System.out.println(equipmentProperties);
		//EquipmentProperties [name=eqp1, maxCount=1, threshold=90, associated=Associated [name=cha, number=1]]
		equipmentProperties = objectMapper.readValue(file, EquipmentProperties.class);
		System.out.println(equipmentProperties);
		//EquipmentProperties [name=eqp1, maxCount=1, threshold=90, associated=Associated [name=cha, number=1]]
		equipmentProperties.setMaxCount(5);
		objectMapper.writeValue(file, equipmentProperties);
		System.out.println(equipmentProperties);
		//EquipmentProperties [name=eqp1, maxCount=5, threshold=90, associated=Associated [name=cha, number=1]]
		return equipmentProperties.toString();
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;예제니까 그냥 컨트롤러 하나만들어서 거기다가 전부 작성했다.&lt;/p&gt;
&lt;p&gt;json 다룰 때처럼 ObjectMapper를 생성하는데 거기에 YAMLFactory를 넣어서 생성해준다.&lt;/p&gt;
&lt;p&gt;그러면 objectMapper는 yaml로 읽고 쓸 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;아까 만들어놓은 application-config.yml 파일 경로를 이용해서 파일을 생성했다.&lt;/p&gt;
&lt;p&gt;그리고 @Autowired로 EquipmentProperties Bean을 가져왔는데 이 Bean은 @ComfigurationProperties로 가져온 것이다. 아래 참조&lt;/p&gt;
&lt;pre id=&quot;code_1555595185737&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;package com.example.demo.configuration;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import com.example.demo.dto.Associated;

@Component
@ConfigurationProperties
public class EquipmentProperties {
	private String name;
	private int maxCount;
	private int threshold;
	private Associated associated;
	
	public EquipmentProperties() {}
	public EquipmentProperties(String name, int maxCount, int threshold, Associated associated) {
		super();
		this.name = name;
		this.maxCount = maxCount;
		this.threshold = threshold;
		this.associated = associated;
	}
	//toString()
	//getter, setter ...
}

/////////////////////////////////다른 파일/////////////////////////////////
public class Associated {
	private String name;
	private int number;
	
    public Associated() {}
	public Associated(String name, int number) {
		super();
		this.name = name;
		this.number = number;
	}
	//toString()
	//getter, setter
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;getter, setter, toString은 주석으로 생략했다.&lt;/p&gt;
&lt;p&gt;@Autowired로 가져온 Bean을 출력해보니 잘 출력되는 것을 알 수 있다. (주석 참조)&lt;/p&gt;
&lt;p&gt;그다음 objectMapper로 똑같은 파일을 읽어와도 똑같이 잘 출력되는 것을 알 수 있다. (주석 참조)&lt;/p&gt;
&lt;p&gt;다음에 설정값을 수정하고 writeValue로 파일에 저장했더니 파일이 변경되었다.&lt;/p&gt;
&lt;pre id=&quot;code_1555595398962&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;---
name: &quot;eqp1&quot;
maxCount: 5
threshold: 90
associated:
  name: &quot;cha&quot;
  number: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;class-path에는 다음과 같이 application.yml을 작성했다.&lt;/p&gt;
&lt;pre id=&quot;code_1555594817424&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;spring:
  profiles:
    active:
    - config
    
server:
  port: 8181&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;* spring.profiles.active에 config라고 적어서 /config/application-{profile}. yml로 읽어진 것이다.&lt;/p&gt;
&lt;p&gt;reference를 참고하면 /config 경로밑에 있는 application-{profile}. yml을 찾아서 읽어주는 기능이 있다.&lt;/p&gt;
&lt;p&gt;* 위에 yaml 파일로 쓴 것에 특이사항이 있다. 문자열 데이터 양 옆에 쌍 따옴표가 붙는 것이다. (eqp1 -&amp;gt; &quot;eqp1&quot;)&lt;/p&gt;
&lt;p&gt;뭐 이정도는 괜찮다고 본다.&lt;/p&gt;
&lt;p&gt;또 이상하게 붙는 것이 ---으로 시작하는 것이다.&lt;/p&gt;
&lt;p&gt;yml에서 ---은 구분자인데 저절로 생긴다.&lt;/p&gt;
&lt;p&gt;이번에 테스트해보고 위의 문제뿐만 아니라 다른 문제점이 있었다.&lt;/p&gt;
&lt;p&gt;기존에 작성한 yml파일에 설정 값에 대한 주석(#장비명)이 있었는데 아무래도 object를 yml 형식으로 쓰다 보니 해당 정보는 다 날아갔다. (방법이 없는 것 같다... 어디서는 stream으로 다 읽고 쓰기도 하더라...)&lt;/p&gt;
&lt;p&gt;그리고 한 파일로 전체를 관리해야한다는 것이다.&lt;/p&gt;
&lt;pre id=&quot;code_1555595781218&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;server:
  address: 192.168.0.115

name: eqp1
maxCount: 5
threshold: 90
associated:
  name: cha
  number: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약에 위와 같이 yml파일을 작성했다면 클래스 파일에서는 불필요하게(?) server 클래스를 만들고 address도 만들고, 설정값이 더 많다면 엄청나게 많은 클래스를 만들어야 할 것이다.&lt;/p&gt;
&lt;p&gt;뭐 yml파일을 분리해서 관리할 것이다! 라고하면 그렇게 해도 좋으나 필자는 한 파일에서 모든 것을 설정하고 관리하기를 바라므로 다른 방법을 생각해야 할 것 같다...&lt;/p&gt;
&lt;p&gt;폐쇄망만 아니면 스프링 클라우드 컨피그를 쓴다든지, 디비를 사용하게 해주면 디비에 쓴다든지 했을 텐데 아쉽다.&lt;/p&gt;
&lt;p&gt;끝.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/184&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>Jackson</category>
<category>SpringBoot</category>
<category>yaml</category>
<category>yml</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/184</guid>
<comments>https://jeong-pro.tistory.com/184#entry184comment</comments>
<pubDate>Thu, 18 Apr 2019 23:00:32 +0900</pubDate>
</item>
<item>
<title>Springboot hystrix 사용기 (hystrix로 마이크로 서비스 간의 서비스 호출 실패를 방지해보자)</title>
<link>https://jeong-pro.tistory.com/183</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;Hystrix란?&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;hystrix는 netflix에서 만든 라이브러리로 마이크로 서비스 아키텍처에서 &lt;u&gt;분산된 서비스간 통신이 원활하지 않은 경우&lt;/u&gt;에 각 서비스가&amp;nbsp;&lt;b&gt;&lt;span style=&quot;background-color: #ffcd00;&quot;&gt;장애 내성&lt;/span&gt;&lt;/b&gt;과 &lt;b&gt;&lt;span style=&quot;background-color: #ffcd00;&quot;&gt;지연 내성&lt;/span&gt;&lt;/b&gt;을 갖게하도록 도와주는 라이브러리다.&lt;/p&gt;
&lt;p&gt;결국 키워드는 통신 문제 극복이다.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;라이브러리 적용 배경&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;기존의 모놀리틱 아키텍처에서는 A모듈의 A메서드에서 B모듈의 B메서드를 호출할 때, 이 메서드 호출에 실패하는 것은 아예 고려하지 않았다. 그럴 일이 없었기 때문이다.&lt;/p&gt;
&lt;p&gt;그런데 마이크로 서비스 아키텍처에서는 다르다. 주문 서비스가 배송 서비스의 API를 호출했을 때 실패할 수 있다는 것이다.&lt;/p&gt;
&lt;p&gt;위와 같은 상황에서 별다른 처리를 안했다면 배송 서비스에 문제가 있다는 이유로 주문 서비스도 어디선가 문제가 생기게 될 것이고, 주문 서비스를 호출하는 어떤 서비스가 있다면 그 서비스마저도 문제가 생길 것이다.&lt;/p&gt;
&lt;p&gt;이렇게 &lt;u&gt;&lt;b&gt;마이크로 서비스에서는 각각의 서비스들이 독립적이지만, 장애가 전파되는 성질&lt;/b&gt;&lt;/u&gt;이 있다.&lt;/p&gt;
&lt;p&gt;그래서 이를 막기위해서는 주문 서비스가 배송 서비스 API호출에 실패할 경우, 엑셀 파일로라도 남겨놨다가 배송할 수 있게 전달해준다든지, 쇼핑몰 뷰어 서비스가 상품 추천 서비스 API호출에 실패할 경우, 디폴트로 상품 추천을 해준다든지 하는 일을 해줘야 한다.&lt;/p&gt;
&lt;p&gt;위와 같은 일을 아주 간단한 코드만으로 처리할 수 있게 도와주는게 hystrix 라이브러리고 그것을 스프링부트에 연동해서 사용해볼 것이다.&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;h3&gt;&lt;b&gt;사용법, 예제 코드&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;테스트해보기 위해서 2개의 서비스가 필요하다. 왜냐하면 마이크로 서비스간의 호출이 실패했을 때 지연이나 장애로부터 극복하는게 hystrix 라이브러리의 기능이기 때문이다.&lt;/p&gt;
&lt;p style=&quot;font-size: 1.25em;&quot;&gt;&lt;b&gt;- 광고 서비스&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555419292362&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@RestController
public class AdsController {
	@GetMapping(&quot;/ads&quot;)
	public String getAds() {
		//throw new RuntimeException(&quot;My I/O Exception&quot;);
		return &quot;정상적인 광고 리스트&quot;;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;광고서비스에서는 별다른 설정이 필요없다. 그냥 REST API 테스트서버로 대충 Controller하나 만들고 &quot;localhost:8080/ads&quot;를 GetMethod로 호출하면 정상적인 응답을 주는 코드다.&lt;/p&gt;
&lt;p&gt;주석 처리되어있는 것을 보면 알 수 있듯 이 서비스를 호출할 때마다 어떤 응답을 줄지 바꾸면서 테스트할 것이다.&lt;/p&gt;
&lt;p&gt;정상적인 응답도 받아보고, Exception이 발생했을 때도 살펴보고, 응답이 정상적이지만 다소 시간이 걸리는 경우도 Thread.sleep()을 통해서 해볼 것이다.&lt;/p&gt;
&lt;p style=&quot;font-size: 1.25em;&quot;&gt;&lt;b&gt;- 뷰어 서비스&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555419587061&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-hystrix&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-hystrix-dashboard&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dependency를 추가해준다. webflux는 단순히 외부 서비스를 호출하기 위한 용도로 WebClient를 써보기 위함이다.&lt;/p&gt;
&lt;p&gt;다른 블로그에서는 RestTemplate을 이용하는데 익숙하다면 그것을 써도 좋다.&lt;/p&gt;
&lt;p&gt;그런데 레퍼런스에서 RestTemplate은 만료될 거고 WebClient를 쓰라고 하는 것 같아서 WebClient를 쓴다.&lt;/p&gt;
&lt;p&gt;hystrix-dashboard도 딱히 필요없지만 나중에라도 혹시 hystrix를 모니터링하거나 관리할 필요가 있을 때 쓸 수 있으니까 넣어논 것이다. (web, actuator등도 넣었는데 아직 필요없다.)&lt;/p&gt;
&lt;pre id=&quot;code_1555419831885&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@EnableHystrix
@SpringBootApplication
public class DdisplayApplication {
	public static void main(String[] args) {
		SpringApplication.run(DisplayApplication.class, args);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@SpringBootApplication이 있는 곳에 @EnableHystrix를 넣는다.&lt;/p&gt;
&lt;p&gt;@EnableHystrix를 적용하면 내부에 @EnableCircuitBreaker가 들어있는데 그것이 필요하다.&lt;/p&gt;
&lt;pre id=&quot;code_1555420053382&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@RestController
public class DisplayController {
	@Autowired
	private DisplayService displayService;
	
	@GetMapping(&quot;/ads&quot;)
	public String getAds() {
		return displayService.getAds();
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;마찬가지로 Controller 생성해서 displayService의 getAds()를 호출하게 했다.&lt;/p&gt;
&lt;pre id=&quot;code_1555420114474&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class DisplayService {
	private WebClient webClient = WebClient.builder().baseUrl(&quot;http://localhost:8080&quot;).build();
	//webClientBuilder를 가져오는데 기본이되는 URL는 저거로 하고 클라이언트 가져올꺼야
	
	@HystrixCommand(fallbackMethod = &quot;getAdsFallback&quot;)
	public String getAds() {
		return webClient.get() //get방식으로 가져올꺼야
		.uri(&quot;/ads&quot;) //baseUrl이후의 uri는 /ads로 할꺼야
		.retrieve() //클라이언트 메세지를 보내고
		.bodyToMono(String.class) //body 타입은 String일꺼야
		.block(); //가져왔다면 리턴해줘
	}
	private String getAdsFallback() {
		return &quot;기본광고&quot;;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Service는 위와 같다.&lt;/p&gt;
&lt;p&gt;주의깊게 봐야할 것은 일단 @Service다.&lt;/p&gt;
&lt;p&gt;Hystrix는 기본적으로 @Component와 @Service를 찾고 그 안에 있는 @HystrixCommand를 찾아 동작한다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;u&gt;&lt;b&gt;반드시 @Service에다가 작성&lt;/b&gt;&lt;/u&gt;하도록 하자.&lt;/p&gt;
&lt;p&gt;다른 서비스를 호출하는 메서드에 @HystrixCommand를 붙여주고 속성으로 fallbackMethod의 이름을 달아줬다.&lt;/p&gt;
&lt;p&gt;이렇게 설정하면 &quot;getAds()는 Hystrix의 CircuitBreaker의 기능(장애 내성)을 사용할 것이고 만약 서킷이 오픈되거나 실패할 경우 fallbackMethod로 지정한 getAdsFallback() 메서드가 실행될 것이다&quot; 라는 뜻이다.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;b&gt;fallbackMethod&lt;/b&gt;&lt;/u&gt;가 무엇이냐면, fallbackMethod는 그냥 해당 메서드 호출에 실패하면 대신 동작할 예외처리 메서드 같은 것이다.&lt;/p&gt;
&lt;p&gt;호출에 실패한다는 것은 어떤 기준이 있어야 한다. 3초안에 응답이 안왔다든지, 예외가 생겼다든지 아예 서비스가 떠있지 않다든지 하는 기준 말이다.&lt;/p&gt;
&lt;p&gt;그 기준에 대한 설정값은 기본적으로 hystrix가 디폴트로 해준 것이 있고 직접 설정할 수도 있다.&lt;/p&gt;
&lt;p&gt;별도의 설정을 하지 않으면 타임아웃은 1초다. 1초내로 응답을 받지 못하면 fallbackMethod가 호출된다.&lt;/p&gt;
&lt;p&gt;아쉽게도 정상적으로 응답했는데 1.00001초만에 응답이 왔다면 실패다.&lt;/p&gt;
&lt;p&gt;경우에 따라 서비스의 응답시간이 긴 서비스들도 있으니 주의해서 설정해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;b&gt;서킷 오픈&lt;/b&gt;&lt;/u&gt;은 무엇이냐면, API호출에 대한 통계를 기반으로 상대 서비스에 대한 이상이 있다고 감지하고, 즉시 에러를 리턴해버리게 하는 상태로 만드는 것이다.&lt;/p&gt;
&lt;p&gt;예를 들어 10초 동안 20회 이상 API호출이 일어난 경우에 통계를 내서 50%, 즉 반 이상 호출에 실패했다면 호출할 서비스에 이상이 있다고 감지하고 그 이후 5초 동안에는 서비스 호출을 시도하지도 않고 &quot;즉시&quot; fallbackMethod를 리턴해버리는 것이다. (서킷 오픈)&lt;/p&gt;
&lt;p&gt;그리고 5초 이후에는 다시 10초 동안 20회 이상 API호출이 일어났는지 이런 통계를 내는 것이 아니라 1회의 호출만 해보고 정상으로 돌아왔으면 다시 통계를 낼 준비를 하는 것이고, 만약 1회의 호출이 또 다시 실패한다면 다시 5초 동안 fallbackMethod를 호출하는 것이다. (서킷 하프 오픈)&lt;/p&gt;
&lt;p&gt;이 두 개의 기능(fallback, circuit open)으로 장애를 극복하는게 핵심이다.&lt;/p&gt;
&lt;p&gt;* 참고로 fallbackMethod와 circuit open은 무관하다. 연관은 있을 수 있지만 일단은 fallbackMethod가 일어났다고 해서 서킷이 오픈된 것이냐? 그건 또 아니기 때문이다. 서킷은 통계를 기반으로 동작하고 fallback은 실패를 기반으로 동작한다.&lt;/p&gt;
&lt;p&gt;위의 예제를 돌려보면 어떨까?&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bpn2JD/btquAAzolBQ/8fA08mZbigtRmUL6sWEeJ1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bpn2JD/btquAAzolBQ/8fA08mZbigtRmUL6sWEeJ1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fbpn2JD%2FbtquAAzolBQ%2F8fA08mZbigtRmUL6sWEeJ1%2Fimg.png' data-filename=&quot;정상.png&quot; width=&quot;330&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;이렇게 정상적으로 리스트를 받는 모습이다.&lt;/p&gt;
&lt;p&gt;그러면 아까 주석으로 했던 throw new RuntimeException()을 통해 Exception을 발생하면 어떻게 될까?&lt;/p&gt;
&lt;p&gt;fallbackMethod가 호출되면서 아래와 같은 결과가 나타난다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/XIZEu/btquz9II9pI/zjeITVhzOT2cSe8lhLG990/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/XIZEu/btquz9II9pI/zjeITVhzOT2cSe8lhLG990/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FXIZEu%2Fbtquz9II9pI%2FzjeITVhzOT2cSe8lhLG990%2Fimg.png' data-filename=&quot;결과2.png&quot; width=&quot;330&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그러면 이건 어떨까? 광고서비스에서 Exception이 발생하는게 아니라 Thread.sleep(2000);를 통해 2초후에 정상적인 응답을 주는 것이다.&lt;/p&gt;
&lt;p&gt;hystrix는 기본적으로 타임아웃을 1초로 보기 때문에 응답을 2초후에 주는 서비스가 있지만 응답을 받지 못한 것으로보고 fallback이 실행된다.&lt;/p&gt;
&lt;p&gt;그러면 Thread.sleep(2000);을 적은 광고 서비스는 어떻게 될까?&lt;/p&gt;
&lt;p&gt;정답은 그냥 남은 코드도 진행하고 리턴도 해준다! 호출한 서비스가 hystrix를 설정했는지 안했는지 상관이 없다는 것이다.&lt;/p&gt;
&lt;p&gt;이게 hystrix의 전부고 설정값에 대한 이해만 하면 된다.&lt;/p&gt;
&lt;pre id=&quot;code_1555421965666&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class DisplayService {
	private WebClient webClient = WebClient.builder().baseUrl(&quot;http://localhost:8080&quot;).build();
	//webClientBuilder를 가져오는데 기본이되는 URL는 저거로 하고 클라이언트 가져올꺼야
	
	@HystrixCommand(commandKey = &quot;hello&quot;,fallbackMethod = &quot;getAdsFallback&quot;)
	public String getAds() {
		return webClient.get() //get방식으로 가져올꺼야
		.uri(&quot;/ads&quot;) //baseUrl이후의 uri는 /ads로 할꺼야
		.retrieve() //클라이언트 메세지를 보내고
		.bodyToMono(String.class) //body 타입은 String일꺼야
		.block(); //가져왔다면 리턴해줘
	}
	@HystrixCommand(commandKey = &quot;hello&quot;,fallbackMethod = &quot;getAdsFallback2&quot;)
	public String test() {
		return webClient.get()
				.uri(&quot;/hello&quot;)
				.retrieve()
				.bodyToMono(String.class)
				.block();
	}
	
	private String getAdsFallback() {
		return &quot;fallback&quot;;
	}
	private String getAdsFallback2() {
		return &quot;fallback2&quot;;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@Hystrix의 속성으로 commandKey가 있는데 따로 설정하지 않으면 메소드명으로 설정된 것으로 간주한다.&lt;/p&gt;
&lt;p&gt;이것은 서킷오픈할 때 같은 key를 가지는 메서드들은 같이 통계가 매겨진다.&lt;/p&gt;
&lt;p&gt;test()를 호출하다가 실패하면 getAdsFallback2가 실행되겠지만 실패 통계는 hello에 매겨진다는 것이다.&lt;/p&gt;
&lt;p&gt;아래와 같이 hystrixCommand 설정을 할 수 있는데&amp;nbsp;&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/Configuration&quot;&gt;https://github.com/Netflix/Hystrix/wiki/Configuration&lt;/a&gt;&amp;nbsp;여기서 확인하고 적용하면 된다.&lt;/p&gt;
&lt;pre id=&quot;code_1555422509628&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;package com.example.demo.service;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;

@Service
public class DisplayService {
	private WebClient webClient = WebClient.builder().baseUrl(&quot;http://localhost:8080&quot;).build();
	
	@HystrixCommand(commandKey = &quot;hello&quot;, fallbackMethod = &quot;getAdsFallback&quot;,
			commandProperties = {
					@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;),
					@HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;10&quot;),
					@HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;5&quot;),
					@HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;)
			})
	public String getAds() {
		return webClient.get() //get방식으로 가져올꺼야
		.uri(&quot;/ads&quot;) //baseUrl이후의 uri는 /ads로 할꺼야
		.retrieve() //클라이언트 메세지를 보내고
		.bodyToMono(String.class) //body 타입은 String일꺼야
		.block(); //가져왔다면 리턴해줘
	}
	
	private String getAdsFallback() {
		return &quot;fallback&quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;execution.isolation.thread.timeoutInMilliseconds : 3000 -&amp;gt; 기본 타임아웃이 1초인 것을 3초로 늘려준 것이고,&lt;/p&gt;
&lt;p&gt;errorThresholdPercentage : 10 -&amp;gt; 통계낼 때 에러 비율로 10%이상 호출에 문제가 있으면 서킷을 열라는 의미다.&lt;/p&gt;
&lt;p&gt;metrics.rollingStats.timeInMilliseconds:&amp;nbsp;10000&amp;nbsp;-&amp;gt;&amp;nbsp;10초동안&amp;nbsp;통계&lt;/p&gt;
&lt;p&gt;requestVolumeThreshold : 5 -&amp;gt; 5회이상 호출되면 통계 시작&lt;/p&gt;
&lt;p&gt;circuitBreaker.sleepWindowInMilliseconds : 10000 -&amp;gt; 서킷이 한 번 열리면 10초 유지&lt;/p&gt;
&lt;p style=&quot;font-size: 1.25em;&quot;&gt;&lt;b&gt;서킷 오픈 확인하기&lt;/b&gt;&lt;/p&gt;
&lt;pre id=&quot;code_1555503776773&quot; class=&quot;java&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;@Service
public class DisplayService {
	private WebClient webClient = WebClient.builder().baseUrl(&quot;http://localhost:8080&quot;).build();
	private static final Logger logger = LoggerFactory.getLogger(DisplayService.class);
	
	@HystrixCommand(commandKey = &quot;hello&quot;, fallbackMethod = &quot;getAdsFallback&quot;,
			commandProperties = {
					@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;),
					@HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;50&quot;),
					@HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;2&quot;),
					@HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;6000&quot;)
			})
	public String getAds() {
		return webClient.get() //get방식으로 가져올꺼야
		.uri(&quot;/ads&quot;) //baseUrl이후의 uri는 /ads로 할꺼야
		.retrieve() //클라이언트 메세지를 보내고
		.bodyToMono(String.class) //body 타입은 String일꺼야
		.block(); //가져왔다면 리턴해줘
	}
	
	private String getAdsFallback(Throwable t) {
		logger.info(t.getMessage());
		return &quot;fallback&quot;;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아까 소스에서 조금 달라진 것이 있다. fallback Method의 파라미터로 Throwable을 입력했다.&lt;/p&gt;
&lt;p&gt;fallback Method에 Throwable을 입력하면 저절로 발생한 예외가 들어가게 된다.&lt;/p&gt;
&lt;p&gt;그래서 발생한 예외의 내용을 로깅해봤다. 결과는 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/lYcP5/btquCLfXzHT/VSnUYpRg9hnk0aORTEn8c1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/lYcP5/btquCLfXzHT/VSnUYpRg9hnk0aORTEn8c1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FlYcP5%2FbtquCLfXzHT%2FVSnUYpRg9hnk0aORTEn8c1%2Fimg.png' data-filename=&quot;서킷오픈.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;설명하면, requestVolumeThreshold를 2로 잡았으니까 10초 내에 2회 이상 메소드를 호출하면 서킷오픈을 할지 안 할지 통계를 내게 설정한 것이다.&lt;/p&gt;
&lt;p&gt;그랬는데 2회 서비스 호출로 500 Error가 발생했고 errorThresholdPercentage가 50으로 50퍼센트이상(2회 중 2회 모두 에러니까 100%) 문제가 생겼으므로 서킷이 열린다.&lt;/p&gt;
&lt;p&gt;sleepWindowInMilliseconds값이 6000이므로 서킷이 한 번 열리면 6초 동안 &lt;u&gt;&lt;b&gt;다른 서비스를 호출하지 않고&lt;/b&gt;&lt;/u&gt; &quot;즉시&quot; fallback method를 실행해버린다. 그래서 발생한 예외를 로깅해보면 서킷이 오픈됐다고 알려준다.&lt;/p&gt;
&lt;p&gt;6초 동안은 서킷이 열려있다가 하프 오픈 상태가 된다. 이 상태에서는 1회만 더 시도해보고 다시 서킷을 열지 결정한다.&lt;/p&gt;
&lt;p&gt;로그에서 볼 수 있듯 다시 시도한 호출에서 다시 500 Error를 돌려받았으니 다시 서킷이 열렸다.&lt;/p&gt;
&lt;p&gt;대략적인 내용은 여기까지로 하고 마무리 짓는다.&lt;/p&gt;
&lt;p&gt;* 끝에 이래서 그렇지만 Feign이라는 더 상위의(?) 더 편리한 것이 있다. hystrix는 비교적 low-level인 것이다.&lt;/p&gt;
&lt;p&gt;그래서 나중에는 Feign을 주로 사용한다고 한다. 다른 포스트에서 사용해볼 예정이다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;참고사이트&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=150&quot;&gt;https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=150&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/183&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>hystrix</category>
<category>MSA</category>
<category>SpringBoot</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/183</guid>
<comments>https://jeong-pro.tistory.com/183#entry183comment</comments>
<pubDate>Tue, 16 Apr 2019 22:52:45 +0900</pubDate>
</item>
<item>
<title>Deploy Springboot on heroku (히로쿠에 스프링부트 애플리케이션 배포하는 방법, 그대로 따라하면 5분만에 배포 가능!)</title>
<link>https://jeong-pro.tistory.com/182</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;스프링부트 히로쿠에 배포하기&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Spring cloud config를 공부하던 중에 Git의 webhook 기능을 써보고 싶었다.&lt;/p&gt;
&lt;p&gt;webhook 기능을 사용하려면 로컬 서버가 아닌 원격에 서버를 띄워야 한다(?)는 글을 보고 급하게 배포하는 방법을 찾아보고 정리하기로 했다.&lt;/p&gt;
&lt;p&gt;무조건 원격이어야 하는지는 아직 확실하지 않지만 겸사겸사 배포를 한다.&lt;/p&gt;
&lt;p&gt;예전에 개인프로젝트를 할 때는 AWS에 무료 인스턴스를 생성해서 했었다.&lt;/p&gt;
&lt;p&gt;1년간 무료로 제공해주는 것을 사용했었는데 AWS에 등록한 카드 결제가 한번 이루어진 이후로 무서워서 heroku의 무료 서버를 이용해본다.&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;hr&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;h3&gt;&lt;b&gt;히로쿠 배포 가이드 따라하기&lt;/b&gt;&lt;/h3&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;1. 히로쿠(heroku) 사이트에 가입을 한다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/dubIzF/btqubfhwJJu/jlvG2TSarHGsQfOaGnPfOK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/dubIzF/btqubfhwJJu/jlvG2TSarHGsQfOaGnPfOK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FdubIzF%2FbtqubfhwJJu%2FjlvG2TSarHGsQfOaGnPfOK%2Fimg.png' data-filename=&quot;가입화면.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;오른쪽 상단에 sign up을 누르면 나오는 화면인데 특별한 것 없이 간단한 정보만 입력하고 가입하면 된다.&lt;/p&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;2. 히로쿠 사이트에 로그인을 하고 대시보드에서 새로운 애플리케이션을 만든다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/oFaai/btqubT5916w/UTuqfn3BhXeelH9vOq3Cp0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/oFaai/btqubT5916w/UTuqfn3BhXeelH9vOq3Cp0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FoFaai%2FbtqubT5916w%2FUTuqfn3BhXeelH9vOq3Cp0%2Fimg.png' data-filename=&quot;새로운앱만들기.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;오른쪽 상단에 &quot;Create new app&quot;을 선택하면 새로운 애플리케이션을 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;애플리케이션을 생성한다는 것은 &lt;span style=&quot;color: #333333;&quot;&gt;배포를 위해&amp;nbsp;&lt;/span&gt;히로쿠가 관리하는 인스턴스가 생성되었다고 이해하면 된다.&lt;/p&gt;
&lt;p&gt;정확하게는 모르겠지만 실제로 AWS의 EC2처럼 가상머신 인스턴스가 생긴건 아닌것 같다...&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;3. 생성한 애플리케이션의 Deploy 탭에 들어가 heroku CLI를 설치한다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cYsXvK/btquc4e3b3U/GokkxO9boaq7SD7ao26f71/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cYsXvK/btquc4e3b3U/GokkxO9boaq7SD7ao26f71/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcYsXvK%2Fbtquc4e3b3U%2FGokkxO9boaq7SD7ao26f71%2Fimg.png' data-filename=&quot;디플로이방법.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;애플리케이션이 온전히 생성되었다면 빨간색으로 표시해둔 Deploy 탭으로 들어가서 가이드를 따라하면 된다.&lt;/p&gt;
&lt;p&gt;다운로드 링크도 제공하고 있으니 가서 윈도우면 윈도우의 것으로 설치하면 된다.&lt;/p&gt;
&lt;p&gt;* 참고로 이미 애플리케이션이 생성되었으므로 오른쪽 상단에 &quot;Open app&quot; 버튼을 누르면 내가 생성한 서버의 화면을 볼 수 있다. (아래 그림 참조)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/uEfOo/btquaQoNNkU/nhVoVoqekvBh7NUnmfc4z1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/uEfOo/btquaQoNNkU/nhVoVoqekvBh7NUnmfc4z1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FuEfOo%2FbtquaQoNNkU%2FnhVoVoqekvBh7NUnmfc4z1%2Fimg.png' data-filename=&quot;새로만들었을때 화면.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p style=&quot;font-size: 1.12em;&quot;&gt;&lt;b&gt;4. 히로쿠 가이드 따라하기&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;heroku CLI를 설치하는 것을 완료했으면 명령프롬프트(커맨드창)를 띄운다.&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot; data-ke-list-type=&quot;square&quot;&gt;
&lt;li&gt;히로쿠에 로그인하는 명령어 &quot;heroku login&quot; 입력
&lt;ul style=&quot;list-style-type: square;&quot; data-ke-list-type=&quot;square&quot;&gt;
&lt;li&gt;입력하면 웹으로 연결되면서 로그인할 수 있게 해준다.&lt;/li&gt;
&lt;li&gt;로그인하고 커맨드창으로 오면 로그인이 되어있다.&lt;/li&gt;
&lt;li&gt;웹으로 연결되지 않으면 커맨드창에서 히로쿠 이메일과 패스워드를 쳐서 로그인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로그인한 후 커맨드창에서 적절한 디렉토리로 가서 &quot;git init&quot; 입력
&lt;ul style=&quot;list-style-type: square;&quot; data-ke-list-type=&quot;square&quot;&gt;
&lt;li&gt;내 PC의 로컬 git repository를 생성한다.&lt;/li&gt;
&lt;li&gt;heroku는 git 프로젝트를 통해 배포서비스를 지원하기 때문에 어렵게 생각하지말고 git으로 관리할 프로젝트를 올린다 생각하고 가이드를 따라하면 된다.&lt;/li&gt;
&lt;li&gt;여기까지하면 내가 지정한 directory에 .git 디렉토리가 생겼을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.git이 있는 디렉토리에서 &quot;heroku git:remote -a &amp;lt;애플리케이션 이름&amp;gt;&quot; 명령어를 입력한다.
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
&lt;li&gt;아마 .git 내부 파일에 원격 디플로이 장소 값을 변경해준 것 같다.&lt;/li&gt;
&lt;li&gt;ex) &quot;heroku git:remote -a jeong-pro&quot; 각자가 heroku에 app을 만들었을 때 지은 이름을 넣어주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.git이 있는 디렉토리에 기존에 작성한 스프링부트 프로젝트의 모든 내용을 가져온다.
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
&lt;li&gt;아래 그림같이 그냥 전체다 복사해서 .git이 있는 디렉토리로 복사 붙여넣기 하면 끝.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/MZV4Y/btqubCKovGA/CKqKd3V0I5XVtkCUtJhq0K/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/MZV4Y/btqubCKovGA/CKqKd3V0I5XVtkCUtJhq0K/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FMZV4Y%2FbtqubCKovGA%2FCKqKd3V0I5XVtkCUtJhq0K%2Fimg.png' data-filename=&quot;디렉토리.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot; data-ke-list-type=&quot;square&quot;&gt;
&lt;li&gt;&quot;git add .&quot; 입력
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
&lt;li&gt;이제는 git 사용법과 동일하다.&lt;/li&gt;
&lt;li&gt;.git이 있는 디렉토리에 변경이 생겼으니 변경사항 모두를 반영하라는 것이다 stage에 올리는 것.&lt;/li&gt;
&lt;li&gt;윈도우같은 경우 에러가 날 수 있다. CRLF 에러가 나는데 문제의 원인은 윈도우는 줄바꿈문자를 CRLF로 사용하고 유닉스(리눅스)의 경우에는 줄바꿈문자를 LF로 쓴다. (\r\n vs \n) 이문제를 git이 혼동한것이다.&lt;/li&gt;
&lt;li&gt;CRLF 문제가 나면 &quot;git config --global core.autocrlf true&quot;로 설정을 바꿔주면 에러가 안난다. 다시 add하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&quot;git commit -m &quot;first commit&quot; &quot; 입력
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
&lt;li&gt;stage에 올렸으면 커밋하면 된다. -m옵션으로 커밋메시지까지 정의하고 커밋하도록 하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&quot;git push heroku master&quot; 입력
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
&lt;li&gt;끝났다. 스프링부트 애플리케이션이 heroku 애플리케이션으로 잘 올라갔을 것이다.&lt;/li&gt;
&lt;li&gt;이상하다 싶으면 view logs를 눌러서 로그상태를 확인해서 문제되는 상황에 대처한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bK3W7g/btquatAD8Rg/UkGmwDOKWa7yHQ6Hxbm3M0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bK3W7g/btquatAD8Rg/UkGmwDOKWa7yHQ6Hxbm3M0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbK3W7g%2FbtquatAD8Rg%2FUkGmwDOKWa7yHQ6Hxbm3M0%2Fimg.png' data-filename=&quot;뷰로그.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;애플리케이션에 들어가 more의 view logs를 누른 화면이다. 애플리케이션이 나타내는 로그를 확인해서 처리한다.&lt;/p&gt;
&lt;p&gt;* 참고로 애플리케이션의 Resources탭에 가서 add-ons 설정을 통해 DB같은 것들도 생성해서 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;무료로 조금만 이용해볼 수도 있고 이용료를 내고 사용하는 것도 있다. 간단하게 아래 그림과 같이 정리한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/SpGhL/btquauM0m6O/8iM2TZPERuK6Xb9Gl9Y1J0/img.png' data-lightbox='lightbox' data-alt='redis cloud를 검색해서 생성하는 모습'&gt;&lt;img src='https://k.kakaocdn.net/dn/SpGhL/btquauM0m6O/8iM2TZPERuK6Xb9Gl9Y1J0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FSpGhL%2FbtquauM0m6O%2F8iM2TZPERuK6Xb9Gl9Y1J0%2Fimg.png' data-filename=&quot;추가옵션.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;redis cloud를 검색해서 생성하는 모습&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/c0Sglg/btqudtMtcTw/ubJz6QmDhafxhsvn0aCFx0/img.png' data-lightbox='lightbox' data-alt='생성을 시도할 때 나오는 화면'&gt;&lt;img src='https://k.kakaocdn.net/dn/c0Sglg/btqudtMtcTw/ubJz6QmDhafxhsvn0aCFx0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fc0Sglg%2FbtqudtMtcTw%2FubJz6QmDhafxhsvn0aCFx0%2Fimg.png' data-filename=&quot;레디스프리.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;생성을 시도할 때 나오는 화면&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;가이드를 잘 따라했다면 잘 떠있는지 확인해보는 것만 남았다.&lt;/p&gt;
&lt;p&gt;개인적으로 테스트용도이기 때문에 별다른 설정은 하지 않았다. DB연동같은 것들. 아래는 테스트화면이다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignLeft'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bIlsdv/btqucnTvpD9/GSVNUCrllvAwBr8Url6fi0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bIlsdv/btqucnTvpD9/GSVNUCrllvAwBr8Url6fi0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbIlsdv%2FbtqucnTvpD9%2FGSVNUCrllvAwBr8Url6fi0%2Fimg.png' data-filename=&quot;결과.png&quot; width=&quot;660&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;간단하게 RestController 하나달고 루트경로와 /profile 경로에 텍스트와 오브젝트를 리턴하게 해놨는데 잘된다. 만족...&lt;/p&gt;
&lt;p&gt;* 내부적으로 연구해야할 것들이 남았다. 임베디드 톰캣이나 아이피 포트같은 설정을 어떻게 알고 적용해줬는지 특별히 설정 들어가는건 어떻게 해야하는지등... heroku를 좀더 알아봐야겠다.&lt;/p&gt;
&lt;p&gt;참고사이트&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MwHazSOyuNs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=MwHazSOyuNs&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/182&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>기타 개발 스킬</category>
<category>Heroku</category>
<category>SpringBoot</category>
<category>배포</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/182</guid>
<comments>https://jeong-pro.tistory.com/182#entry182comment</comments>
<pubDate>Sat, 06 Apr 2019 10:49:25 +0900</pubDate>
</item>
<item>
<title>HTTP Header 정리, 각 Http Header가 갖는 의미를 알아야 Http를 배운 것이다.</title>
<link>https://jeong-pro.tistory.com/181</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;HTTP Header&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&amp;nbsp;정리를 하는 이유&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;KOCW의&amp;nbsp;&quot;컴퓨터 네트워크 - 한양대학교 이석복 교수님&quot;&amp;nbsp;강의 중에 이런 표현이 있다.&lt;/p&gt;&lt;p&gt;&quot;TCP를 이해하려면 TCP Header를 이해하면 된다.&quot;&lt;/p&gt;&lt;p&gt;&quot;UDP를 이해하려면 UDP Header를 이해하면 된다.&quot;&lt;/p&gt;&lt;p&gt;실제로 토씨 하나 안 틀리고 위와 같이 말씀하신 것은 아니지만 비슷한&amp;nbsp;문장(맥락)이었다.&lt;/p&gt;&lt;p&gt;결국, &lt;b&gt;&lt;u&gt;&lt;span style=&quot;background-color: rgb(250, 237, 125);&quot;&gt;어떤 프로토콜을 이해하려면 프로토콜의 헤더만 알면 된다&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;는 얘기었다.&lt;/p&gt;&lt;p&gt;왜 그럴까?&lt;/p&gt;&lt;p&gt;특정 프로토콜의 헤더의 내용은 특정 프로토콜의 &lt;b&gt;기능을 제공하기 위해&lt;/b&gt; 담고 있는 &lt;b&gt;최소한의 정보&lt;/b&gt;기 때문이다.&lt;/p&gt;&lt;p&gt;헤더에 그 프로토콜에 불필요한&amp;nbsp;내용을 담으면 네트워크로 전송되는 데이터의 크기가 커져서 빠른 전송이 불가능하기 때문에 프로토콜을 설계할 때부터 꼭 필요한 내용만 담아야 하고, 모든 기능이 표현되어야 한다.&lt;/p&gt;&lt;p&gt;우리가 주로 사용하는 TCP에 대한 이해가 충분히 있어야 하지만, 먼저 다가가기 쉬운 HTTP를 정리해보고자 한다. (HTTP 헤더 정리 = HTTP 이해)&lt;/p&gt;&lt;p&gt;* 여러 블로그를 돌아다니면서 최대한 내용을 많이 모으고, 이해하고 검증하려고 노력했으나 실제로 HTTP 헤더를 열어보았을 때 아래에 기재된 내용이 무조건 들어있지 않기 때문에 포맷이나 설명이 실제와 다를 수 있습니다.&lt;/p&gt;&lt;p&gt;* 잘못된 정보가 있다면 지적해주시면 감사하겠습니다. 그러면 고쳐서 제대로된 정보가 공유되도록 하겠습니다.&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;HTTP Header&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 공통 헤더&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Date&lt;/b&gt; : 현재시간 (Sat, 23 Mat 2019 GMT)&lt;/p&gt;&lt;p&gt;&lt;b&gt;Pragma&lt;/b&gt; : 캐시제어 (no-cache), HTTP/1.0에서 쓰던 것으로 HTTP/1.1에서는 Cache-Control이 쓰인다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Cache-Control&lt;/b&gt; : 캐시 제어&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;+ no-store : 캐시를 저장하지 않겠다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;+ no-cache : 모든 캐시를 쓰기 전에 서버에 해당 캐시를 사용해도 되는지 확인하겠다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;+ must-revalidate : 만료된 캐시만 서버에 확인하겠다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;+ public : 공유 캐시에 저장해도 된다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;+ private : '브라우저' 같은&amp;nbsp;특정 사용자 환경에만 저장하겠다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;+ max-age : 캐시의 유효시간을 명시하겠다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Transfer-Encoding&lt;/b&gt; : body 내용 자체 압축 방식 지정&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;'chunked'면 본문의 내용이 동적으로 생성되어 길이를 모르기 때문에 나눠서 보낸다는 의미다.&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;본문에 데이터 길이가 나와서 야금야금 브라우저가 해석해서 화면에 뿌려줄 때 이 기능을 사용한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Upgrade&lt;/b&gt; : 프로토콜 변경시 사용 ex) HTTP/2.0&lt;/p&gt;&lt;p&gt;&lt;b&gt;Via&lt;/b&gt; : 중계(프록시)서버의 이름, 버전, 호스트명&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-Encoding&lt;/b&gt; : 본문의 &lt;u&gt;리소스&lt;/u&gt;&amp;nbsp;압축 방식 (transfer-encoding은 body 자체이므로 다름)&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-type&lt;/b&gt; : 본문의 미디어 타입(MIME) ex) application/json, text/html&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-Length&lt;/b&gt; : 본문의 길이&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-language&lt;/b&gt; : 본문을 이해하는데 가장 적절한 언어 ex) ko&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;한국사이트여도 본문을 이해하는데 영어가 제일 적절하면 영어로 지정된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Expires&lt;/b&gt; : 자원의 만료 일자&lt;/p&gt;&lt;p&gt;&lt;b&gt;Allow&lt;/b&gt; : 사용이 가능한 HTTP 메소드 방식 ex) GET, HEAD, POST&lt;/p&gt;&lt;p&gt;&lt;b&gt;Last-Modified&lt;/b&gt; : 최근에 수정된 날짜&lt;/p&gt;&lt;p&gt;&lt;b&gt;ETag&lt;/b&gt; : 캐시 업데이트 정보를 위한 임의의 식별 숫자&lt;/p&gt;&lt;p&gt;&lt;b&gt;Connection&lt;/b&gt; : 클라이언트와 서버의 연결 방식 설정 HTTP/1.1은 kepp-alive 로 연결 유지하는게 디폴트.&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 요청 헤더&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Host&lt;/b&gt; : 요청하려는 서버 호스트 이름과 포트번호&lt;/p&gt;&lt;p&gt;&lt;b&gt;User-agent&lt;/b&gt; : 클라이언트 프로그램 정보 ex) Mozilla/4.0, Windows NT5.1&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;이 정보를 통해서 서버는 클라이언트 프로그램(브라우저)에 맞는 최적의 데이터를 보내줄 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Referer&lt;/b&gt; : 바로 직전에 머물렀던 웹 링크 주소(해당 요청을 할 수 있게된 페이지)&lt;/p&gt;&lt;p&gt;&lt;b&gt;Accept&lt;/b&gt; : 클라이언트가 처리 가능한 미디어 타입 종류 나열 ex) */* - 모든 타입 처리 가능, application/json - json데이터 처리 가능.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Accept-charset&lt;/b&gt; : 클라이언트가 지원가능한 문자열 인코딩 방식&lt;/p&gt;&lt;p&gt;&lt;b&gt;Accept-language&lt;/b&gt; : 클라이언트가 지원가능한 언어 나열&lt;/p&gt;&lt;p&gt;&lt;b&gt;Accept-encoding&lt;/b&gt; : 클라이언트가 해석가능한 압축 방식 지정 ex) gzip, deflate&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;압축이 되어있다면 content-length와 content-encoding으로 압축을 해제한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-location&lt;/b&gt; : 해당 개체의 실제 위치&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-disposition&lt;/b&gt; : 응답 메세지를 브라우저가 어떻게 처리할지 알려줌. ex) inline, attachment; filename='jeong-pro.xlsx'&lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-Security-Policy&lt;/b&gt; : 다른 외부 파일을 불러오는 경우 차단할 리소스와 불러올 리소스 명시&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;ex) default-src https -&amp;gt; https로만 파일을 가져옴&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;ex) default-src 'self' -&amp;gt; 자기 도메인에서만 가져옴&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;ex) default-src 'none' -&amp;gt; 외부파일은 가져올 수 없음&lt;/p&gt;&lt;p&gt;&lt;b&gt;If-Modified-Since&lt;/b&gt; : 여기에 쓰여진 시간 이후로 변경된 리소스 취득. 페이지가 수정되었으면 최신 페이지로 교체하기 위해 사용된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Authorization&lt;/b&gt; : 인증 토큰을 서버로 보낼 때 쓰이는 헤더&lt;/p&gt;&lt;p&gt;&lt;b&gt;Origin&lt;/b&gt; : 서버로 Post 요청을 보낼 때 요청이 어느 주소에서 시작되었는지 나타내는 값&lt;/p&gt;&lt;p style=&quot;margin-left: 2em;&quot;&gt;이 값으로 요청을 보낸 주소와 받는 주소가 다르면 CORS 에러가 난다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Cookie&lt;/b&gt; : 쿠기 값 key-value로 표현된다. ex) attr1=value1; attr2=value2&lt;/p&gt;&lt;hr class=&quot;tx-hr-border-3&quot; style=&quot;display:block; border: black 0 none; border-top: black 1px dotted; height: 1px&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 응답 헤더&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Location&lt;/b&gt; : 301, 302 상태코드일 떄만 볼 수 있는 헤더로 서버의 응답이 다른 곳에 있다고 알려주면서 해당 위치(URI)를 지정한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Server &lt;/b&gt;: 웹서버의 종류 ex) nginx&lt;/p&gt;&lt;p&gt;&lt;b&gt;Age &lt;/b&gt;: max-age 시간내에서 얼마나 흘렀는지 초 단위로 알려주는 값&lt;/p&gt;&lt;p&gt;&lt;b&gt;Referrer-policy&lt;/b&gt; : 서버 referrer 정책을 알려주는 값 ex) origin, no-referrer, unsafe-url&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;WWW-Authenticate&lt;/b&gt; : 사용자 인증이 필요한 자원을 요구할 시, 서버가 제공하는 인증 방식&lt;/p&gt;&lt;p&gt;&lt;b&gt;Proxy-Authenticate&lt;/b&gt; : 요청한 서버가 프록시 서버인 경우 유저 인증을 위한 값&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;* 자료의 출처는 아래 참고 사이트입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;참고 사이트&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/skytear7/http-28415549&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.slideshare.net/skytear7/http-28415549&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://rangken.github.io/blog/2015/http-headers/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://rangken.github.io/blog/2015/http-headers/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2019/01/28/http-header-types.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://gmlwjd9405.github.io/2019/01/28/http-header-types.html&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/181&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>기타 개발 스킬</category>
<category>header</category>
<category>http</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/181</guid>
<comments>https://jeong-pro.tistory.com/181#entry181comment</comments>
<pubDate>Sat, 23 Mar 2019 14:55:16 +0900</pubDate>
</item>
<item>
<title>RESTful에 대해서 설명해주세요.(REST, RESTful, RESTful API 개념 정리)</title>
<link>https://jeong-pro.tistory.com/180</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;REST가 뭐에요? RESTful에 대해서 설명해주세요.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;REST가 무엇인가?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;REST는 &lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;분산 시스템 설계&lt;/span&gt;를 위한 &lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(250, 244, 192);&quot;&gt;아키텍처 스타일&lt;/span&gt;&lt;/b&gt;이다.&lt;/p&gt;&lt;p&gt;아키텍처 스타일이라는건 쉽게 말하면 &lt;b&gt;&lt;span style=&quot;background-color: rgb(250, 244, 192);&quot;&gt;제약 조건의 집합&lt;/span&gt;&lt;/b&gt;이라고 보면 된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;RESTful은 무엇인가?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;RESTful은 위의 &lt;b&gt;제약 조건의 집합(아키텍처 스타일, 아키텍처 원칙)을 모두 만족&lt;/b&gt;하는 것을 의미한다.&lt;/p&gt;&lt;p&gt;REST라는 아키텍처 스타일이 있는거고 RESTful API라는 말은 REST 아키텍처 원칙을 모두 만족하는 API라는 뜻이다.&lt;/p&gt;&lt;p&gt;우리가 REST와 RESTful을 동일한 의미로 사용하곤 하는데 엄격하게는 다르다는 것을 알 수 있다.&lt;/p&gt;&lt;p&gt;-&amp;gt;이로써 REST와 RESTful, RESTful API가 무엇인지, 어떻게 다른지를 말할 수 있게 되었다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;REST가 필요한 이유는 뭘까?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;1. 위에서 말한 것과 같이 분산 시스템을 위해서다.&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;거대한 애플리케이션을 모듈, 기능별로 분리하기 쉬워졌다. RESTful API를 서비스하기만 하면 어떤 다른 모듈 또는 애플리케이션들이라도 RESTful API를 통해 상호간에 통신을 할 수 있기 때문이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;2. WEB브라우저 외의 클라이언트를 위해서다. (멀티 플랫폼)&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;웹 페이지를 위한 HTML 및 이미지등을 보내던 것과 달리 이제는 데이터만 보내면 여러 클라이언트에서 해당 데이터를 적절히 보여주기만 하면 된다.&lt;/p&gt;&lt;p&gt;예를 들어 모바일 애플리케이션으로 html같은 파일을 보내는 것은 무겁고 브라우저가 모든 앱에 있는 것은 아니기 때문에 알맞지 않았는데 RESTful API를 사용하면서 데이터만 주고 받기 때문에 여러 클라이언트가&amp;nbsp;자유롭고 부담없이 데이터를 이용할 수 있다.&lt;/p&gt;&lt;p&gt;서버도 요청한 데이터만 깔끔하게 보내주면되기 때문에 가벼워지고 유지보수성도 좋아졌다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;REST의 구성 요소&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;HTTP URI = 자원&lt;/p&gt;&lt;p&gt;HTTP Method = 행위&lt;/p&gt;&lt;p&gt;MIME Type = 표현 방식&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;GET&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;100&lt;/span&gt;&amp;nbsp;HTTP&lt;span style=&quot;color:#a71d5d&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;Host&amp;nbsp;:&amp;nbsp;jeong&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;pro.tistory.com&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;위와&amp;nbsp;같은 Request 메세지가 있으면 URI자원은 &quot;/100&quot; 이고, HTTP Method는 &quot;GET&quot; 이다.&lt;/p&gt;&lt;p&gt;MIME 타입은 보통 Response Http header 메세지에&amp;nbsp;Content-type으로 쓰인다. 여기서는 없다.&lt;/p&gt;&lt;p&gt;그러면 이해하기를 jeong-pro.tistory.com 서버에 /100 이라는 자원을 GET(조회)하고 싶다는 요청으로 해석이 가능하다. 이게 REST 방식을 이용한 Request 예시다. (참고로 이것은 이해를 위한 것일 뿐 RESTful 하다고는 못한다.)&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;HTTP&lt;span style=&quot;color:#a71d5d&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;200&lt;/span&gt;&amp;nbsp;OK&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;Content&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;Type&amp;nbsp;:&amp;nbsp;application&lt;span style=&quot;color:#a71d5d&quot;&gt;/&lt;/span&gt;json&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;patch&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;json&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;[{&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;title&quot;&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;author&quot;&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;jeong-pro&quot;&lt;/span&gt;}]&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;이런 Response가 왔다고 해보자.&lt;/p&gt;&lt;p&gt;그러면 Content-Type을 보고 클라이언트는 IANA라는 타입들의 명세를 모아놓은 사이트에 가서 application/json-patch+json 이라는 타입의 명세를 확인하고 아래 Body의 내용이 json타입이구나를 알 수 있는 것이다.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;hr&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;REST는 알겠고 그러면 그 제약 조건이 뭔데요?&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;1. Client/Server&lt;/p&gt;&lt;p&gt;2. Stateless : 각 요청에 클라이언트의 context가 서버에 저장되어서는 안된다.&lt;/p&gt;&lt;p&gt;3. Cacheable : 클라이언트는 응답을 캐싱할 수 있어야 한다.&lt;/p&gt;&lt;p&gt;4. Layered System : 클라이언트는 서버에 직접 연결되었는지 미들웨어에 연결되었는지 알 필요가 없어야 한다.&lt;/p&gt;&lt;p&gt;5. Code on demand(option) : 서버에서 코드를&amp;nbsp;클라이언트에게 보내서 실행하게 할 수 있어야 한다.&lt;/p&gt;&lt;p&gt;6. &lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;uniform interface&lt;/span&gt;&lt;/b&gt; : 자원은 유일하게 식별가능해야하고, HTTP Method로 표현을 담아야 하고, 메세지는 스스로를 설명(self-descriptive)해야하고, 하이퍼링크를 통해서 애플리케이션의 상태가 전이(HATEOAS)되어야 한다.&lt;/p&gt;&lt;p&gt;왜 uniform interface에 강조가 되어있냐면, 1~5번의 제약 조건은 HTTP를 기반으로하는 REST는 HTTP에서 이미 충분히 지켜지고 있는 부분이라서 비교적 덜 주의를 기울여도 된다.&lt;/p&gt;&lt;p&gt;RESTful하려면 저 uniform interface를 잘 지켜야 한다.&lt;/p&gt;&lt;p&gt;그 중에서도 &lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;HATEOAS&lt;/span&gt;&lt;/b&gt;와 &lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;self-descriptive&lt;/span&gt;&lt;/b&gt;를 잘 지켜야 한다.&lt;/p&gt;&lt;p&gt;필자가 주로 쓰는 Spring에는 spring-data-rest, spring hateoas, spring-rest-doc으로 두 제약을 지키기위해 사용할 수 있는 라이브러리가 있다. (이 포스트는 면접을 위한 포스트일 뿐 사용법과 테스트는 다른 포스트에서 한다.)&lt;/p&gt;&lt;p&gt;HATEOAS는 Link 라는 HTTP 헤더에 다른 리소스를 가리켜 주는 값을 넣는 방법으로 해결한다.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin: 0px; padding: 0px; line-height: 130%; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace !important;&quot;&gt;&lt;div style=&quot;color: rgb(1, 1, 1); padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;HTTP&lt;span style=&quot;color:#a71d5d&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;200&lt;/span&gt;&amp;nbsp;OK&lt;/div&gt;&lt;div style=&quot;color: rgb(1, 1, 1); padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;Content&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;Type&amp;nbsp;:&amp;nbsp;application&lt;span style=&quot;color:#a71d5d&quot;&gt;/&lt;/span&gt;json&lt;/div&gt;&lt;div style=&quot;padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;&lt;font color=&quot;#010101&quot;&gt;Link&amp;nbsp;:&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;/&lt;/span&gt;&lt;font color=&quot;#010101&quot;&gt;spring&lt;/font&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 204);&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;font color=&quot;#010101&quot;&gt;;&amp;nbsp;rel&lt;/font&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(99, 163, 92);&quot;&gt;&quot;previous&quot;&lt;/span&gt;&lt;font color=&quot;#010101&quot;&gt;,&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;&lt;font color=&quot;#010101&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;/&lt;/span&gt;&lt;font color=&quot;#010101&quot;&gt;spring&lt;/font&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 204);&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;font color=&quot;#010101&quot;&gt;;&amp;nbsp;rel&lt;/font&gt;&lt;span style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(99, 163, 92);&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;font color=&quot;#010101&quot;&gt;;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(1, 1, 1); padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;{&lt;/div&gt;&lt;div style=&quot;color: rgb(1, 1, 1); padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;title&quot;&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;spring의 모든 것&quot;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(1, 1, 1); padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;author&quot;&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;jeong-pro&quot;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(1, 1, 1); padding: 0px 6px; white-space: pre; line-height: 130%;&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;위와 같이 해당 정보에서 다른 정보로 넘어갈 수 있는 하이퍼링크를 명시해야 한다는 것이다.&lt;/p&gt;&lt;p&gt;완벽한 REST는 무엇일까? WEB이다.&lt;/p&gt;&lt;p&gt;어떤 Application이 생겼다고 브라우저는&amp;nbsp;버전을 업데이트할 필요가 없고,&amp;nbsp;브라우저가 해당 application으로 어떻게&amp;nbsp;요청하는지를 알게 해야할 필요가 없다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(228, 247, 186);&quot;&gt;* 장점&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 메세지를 단순하게 표현할 수 있고 WEB의 원칙인&amp;nbsp;확장에 유연하다. (멀티플랫폼)&lt;/p&gt;&lt;p&gt;- 별도의 장비나 프로토콜이 필요없이 기존의 HTTP 인프라를 이용할 수 있다. (사용이 용이함)&lt;/p&gt;&lt;p&gt;- server, client를 완전히 독립적으로 구현할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;background-color: rgb(228, 247, 186);&quot;&gt;* 단점&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 표준, 스키마가 없다. 결국은 API 문서가 만들어지는 이유다.&lt;/p&gt;&lt;p&gt;- 행위에 대한 메소드가 제한적이다. (GET, POST, PUT, DELETE, HEAD, ...)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;* REST는 &lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;분산 시스템 설계&lt;/span&gt;&lt;/b&gt;를 위한 이키텍처 스타일이라고 했다.&lt;/p&gt;&lt;p&gt;마이크로서비스라는 말을 들어보았을 것이다. 이 쪽으로 질문이 연계될 수 있다.&lt;/p&gt;&lt;p&gt;RESTful API를 이용해서 하나의 큰 서비스&amp;nbsp;애플리케이션을 여러 모듈화된 작은 서비스 애플리케이션(마이크로 서비스)들로 나눌 수 있게 됐기 때문이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;* REST를 공부하니까&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt; URI와 URL의 차이점&lt;/span&gt;&lt;/b&gt;에 대해서도 이해할 수 있게되었다.&lt;/p&gt;&lt;p&gt;Uniform Resource Identifier, Uniform Resource Locator&lt;/p&gt;&lt;p&gt;REST에서는 모든 것을 Resource로 표현한다. 그리고 그 자원은 유일한 것을 나타낸다. Identifier, 식별자라는 것이다.&lt;/p&gt;&lt;p&gt;반면에 과거의 웹에서는 Identifier의 개념이 따로 필요없었다. html같은 파일들을 주고 받았기 때문에 파일의 위치를 가리키는 Locator를 썼다고 이해하면 된다.&lt;/p&gt;&lt;p&gt;URI가 파일뿐만 아니라 여러 자원들 까지도 포함하는 개념으로 이해할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;* 자세한 명세를 알고 싶은 사람은 마이크로소프트에서 발표한 REST 가이드라인을 보면 좋을 것이다.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md&lt;/a&gt;&lt;/p&gt;&lt;p&gt;참고 사이트&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RP_f5dMoHFc&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.youtube.com/watch?v=RP_f5dMoHFc&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://spring.io/understanding/REST&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://spring.io/understanding/REST&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/180&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>신입 개발자 면접 기초</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/180</guid>
<comments>https://jeong-pro.tistory.com/180#entry180comment</comments>
<pubDate>Sat, 09 Mar 2019 13:44:14 +0900</pubDate>
</item>
<item>
<title>스프링 애플리케이션이 시작, 종료될 때 수행할 메서드 지정하는 방법 + 스프링 빈(Bean)이 생성, 소멸될 때 수행할 메서드 지정하는 방법(graceful 종료, CommandLineRunner, ApplicationListener, InitializingBea..</title>
<link>https://jeong-pro.tistory.com/179</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;스프링 애플리케이션 시작과 끝&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;스프링(스프링부트)으로 애플리케이션을 개발했을 때, 애플리케이션이 시작할 때 어떤 동작을 하고 싶은 경우가 있고, 반대로 애플리케이션이 종료되기 직전에 어떤 동작을 하고 싶은 경우가 있다.&lt;/p&gt;&lt;p&gt;예를들면 어떤 Configuration에서 값을 가져와서 초기 값을 설정한다든지, 애플리케이션이 종료되기 전에 하던 작업과 객체들을 우아하게(graceful) 종료한다든지 하는 작업들이다.&lt;/p&gt;&lt;p&gt;더 쉽게 표현하면 애플리케이션 입장에서의 생성자와 소멸자가 필요할 때가 있다는 것이다.&lt;/p&gt;&lt;p&gt;이 문제를 스프링에서는 인터페이스로 아주 쉽게 제공해준다.&lt;/p&gt;&lt;p&gt;뿐만 아니라 Spring bean이 생성될 때와 삭제될 때 수행하는 메서드를 구현할 수 있게 인터페이스로 제공한다.&lt;/p&gt;&lt;p&gt;아래에 코드를 보자!&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;18&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;19&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;20&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;21&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;22&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;23&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;24&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;25&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;26&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;27&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;28&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;29&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;30&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;31&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;32&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;33&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;34&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;35&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;package&lt;/span&gt;&amp;nbsp;com.example.demo.service;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;javax.annotation.PostConstruct;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.beans.factory.DisposableBean;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.beans.factory.InitializingBean;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.boot.CommandLineRunner;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.context.ApplicationListener;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.context.event.ContextClosedEvent;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.stereotype.Service;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;@Service&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;TestService&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;implements&lt;/span&gt;&amp;nbsp;CommandLineRunner,&amp;nbsp;ApplicationListener&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;ContextClosedEvent&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;gt;&lt;/span&gt;,&amp;nbsp;InitializingBean,&amp;nbsp;DisposableBean&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@PostConstruct&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;init()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.err.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;PostConstruct&amp;nbsp;annotation으로&amp;nbsp;빈이&amp;nbsp;완전히&amp;nbsp;생성된&amp;nbsp;후에&amp;nbsp;한&amp;nbsp;번&amp;nbsp;수행될&amp;nbsp;메서드에&amp;nbsp;붙입니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;run(&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;...&amp;nbsp;args)&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;throws&lt;/span&gt;&amp;nbsp;Exception&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.err.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;commandLineRunner&amp;nbsp;인터페이스&amp;nbsp;구현&amp;nbsp;메서드입니다.&amp;nbsp;'애플리케이션'이&amp;nbsp;실행될&amp;nbsp;때&amp;nbsp;'한&amp;nbsp;번'&amp;nbsp;실행됩니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;onApplicationEvent(ContextClosedEvent&amp;nbsp;event)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.err.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;ApplicationListener&amp;lt;ContextClosedEvent&amp;gt;&amp;nbsp;인터페이스&amp;nbsp;구현&amp;nbsp;메서드&amp;nbsp;입니다.&amp;nbsp;'애플리케이션'이&amp;nbsp;죽었을&amp;nbsp;때&amp;nbsp;'한&amp;nbsp;번'&amp;nbsp;실행됩니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.err.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;이벤트&amp;nbsp;발생&amp;nbsp;시간(timestamp)&amp;nbsp;:&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&amp;nbsp;event.getTimestamp());&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;afterPropertiesSet()&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;throws&lt;/span&gt;&amp;nbsp;Exception&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.err.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;InitializingBean&amp;nbsp;인터페이스&amp;nbsp;구현&amp;nbsp;메서드입니다.&amp;nbsp;TestService&amp;nbsp;'Bean'이&amp;nbsp;생성될&amp;nbsp;때&amp;nbsp;마다&amp;nbsp;호출되는&amp;nbsp;메서드&amp;nbsp;입니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;destroy()&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;throws&lt;/span&gt;&amp;nbsp;Exception&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.err.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;DisposableBean&amp;nbsp;인터페이스&amp;nbsp;구현&amp;nbsp;메서드입니다.&amp;nbsp;TestService&amp;nbsp;'Bean'이&amp;nbsp;소멸될&amp;nbsp;때&amp;nbsp;마다&amp;nbsp;호출되는&amp;nbsp;메서드입니다&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;이것이 전부다.&lt;/p&gt;&lt;p&gt;임의의 서비스(@Service)가 있다고 할 때, 해당 인터페이스들을 구현하면 위에서 말했던 시점(application 시작/종료, bean 생성/삭제)에 원하는 작업을 할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;CommandLineRunner&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;CommandLineRunner는 main 메서드와 거의 같다고&amp;nbsp;이해하면 된다. (run 메서드)&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;b&gt;&quot;스프링 애플리케이션&quot;이 시작할 때 &quot;1회&quot;만 호출&lt;/b&gt;&lt;/u&gt;되는 점이 똑같고 다른 점은 static이 아니라는 점에서 이득을 가져갈 수 있는 부분이 있다. argument도 main에 들어오는 것과 똑같다!&lt;/p&gt;&lt;p&gt;애플리케이션이 시작되었을 때 하고 싶은 초기 작업이 있다면 이 인터페이스를 구현하도록 하자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- ApplicationListener&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;ApplicationListener는 이벤트와 관련이 있다. (onApplicationEvent 메서드)&lt;/p&gt;&lt;p&gt;ApplicationEvent(추상클래스)를 상속받은 모든 이벤트들을 넣을 수 있다.&lt;/p&gt;&lt;p&gt;따라서 내가 ApplicationEvent를 상속받은 클래스를 만들어서 내가 만든 이벤트가 발생했을 때 호출될 메서드를 만들 수도 있는 것이다.&lt;/p&gt;&lt;p&gt;위의 예제에서는 ContextClosedEvent를 감지하는 인터페이스를 구현했기 때문에, &lt;b&gt;&lt;u&gt;애플리케이션이 종료되기 직전에 1회만 호출&lt;/u&gt;&lt;/b&gt;된다.&lt;/p&gt;&lt;p&gt;실무에서 graceful shutdown이 필요할 때 이 메서드를 구현하도록 하자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- InitializingBean&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;InitializingBean은 스프링 빈(Bean)이 생성될 때 호출된다. (afterPropertiesSet 메서드)&lt;/p&gt;&lt;p&gt;위의 예제에서는 @Service로 등록된 Bean인 TestService가 생성될 때 호출될 것이다.&lt;/p&gt;&lt;p&gt;참고로 Bean이 생성됐다가 삭제되는 것이 반복적으로 일어나면 얼마든지 반복적으로 호출될 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- DisposableBean&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;DisposableBean은 스프링 빈(Bean)이 삭제될 때 호출된다. (destroy 메서드)&lt;/p&gt;&lt;p&gt;마찬가지로 TestService가 ApplicationContext에서 제거될 때 호출된다.&lt;/p&gt;&lt;p&gt;이 역시도 Bean이 제거될 때마다 메서드가 호출될 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;번외로 &lt;a href=&quot;https://jeong-pro.tistory.com/167&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;지난 포스트&lt;/a&gt;에서 알아본 @PostConstruct도 Bean이 생성될 때 1회 호출하는 메서드를 지정할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제 로그를 보도록하자!&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile5.uf.tistory.com%2Fimage%2F99742D495C73827F19F6D8&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99742D495C73827F19&quot; filemime=&quot;image/jpeg&quot; filename=&quot;이클립스로그.png&quot; height=&quot;369&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;@PostConstruct annotation으로 등록한 메서드가 제일 먼저 호출됐다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그 다음에 InitializingBean으로 등록한 메서드가 호출됐다.&lt;/p&gt;&lt;p&gt;이것으로 @PostConstruct 애노테이션이 Bean이 생성되고 제일 먼저 호출되고 그 다음에 InitializingBean의 구현 메서드가 호출되는 것을 알 수 있다.&lt;/p&gt;&lt;p&gt;그렇게 애플리케이션에 필요한 모든 Bean들이 생성되고 스프링 애플리케이션이 온전히 실행되면,&lt;/p&gt;&lt;p&gt;commandLineRunner의 구현 메서드가 호출된다.&lt;/p&gt;&lt;p&gt;이렇게 애플리케이션이 실행중에 있다가 이클립스의 중지 버튼으로 종료한다면, (= 종료 이벤트가 발생한다면)&lt;/p&gt;&lt;p&gt;다시 ApplicationListener&amp;lt;ContextClosedEvent&amp;gt;의 구현 메서드가 호출된다.&lt;/p&gt;&lt;p&gt;그 후에 DisposableBean의 구현 메서드가 호출된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 정리&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;요약하면 스프링이 Bean들을 다 생성하고 완전히 준비됐을 때 commandLineListener가 호출되고, 종료할 때는 반대로 ContextClosedEvent가 호출되고 생성되었던 Bean들을 제거하고 종료되는 것이다.&lt;/p&gt;&lt;hr&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;주의할 것. SIGTERM 과 SIGKILL&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;위의 메서드들중에서 종료와 관련된 작업들은 주의할 것이 있다.&lt;/p&gt;&lt;p&gt;주의해야할 것은 &quot;정상(?)&amp;nbsp;종료&quot; 되었을 때에 호출된다는 것이다.&lt;/p&gt;&lt;p&gt;무슨 말이냐면 애플리케이션이 종료될 때 일반적인 인터럽트는 &lt;span style=&quot;background-color: rgb(255, 228, 0);&quot;&gt;&lt;b&gt;SIGTERM&lt;/b&gt;&lt;/span&gt; 이라는 인터럽트다.&lt;/p&gt;&lt;p&gt;이 인터럽트(SIGTERM)가 발생하면&amp;nbsp;이벤트로 감지하고 수행하는 작업이라는 것이다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;SIGTERM을 정상적인 종료라고 봤을 때, 비정상 종료는 &lt;b&gt;&lt;span style=&quot;background-color: rgb(255, 0, 0);&quot;&gt;SIGKILL&lt;/span&gt;&lt;/b&gt; 이다.&lt;/p&gt;&lt;p&gt;리눅스에서 kill -9 옵션과 같이 강제적으로 꺼버리는 것과 윈도우에서 작업관리자가 작업을 끝내버리는 등의 인터럽트가 SIGKILL이다.&lt;/p&gt;&lt;p&gt;위의 예제를 따라했는데 종료 이벤트에 대한 메서드가 호출되지 않았다면 SIGKILL을 이용해서 종료했을 가능성이 높다.&lt;/p&gt;&lt;p&gt;혹시나하고 윈도우 환경에서 커맨드창에 ctrl + c 로 종료해보았는데 이 단축키는 SIGTERM을 발생하는 이벤트라서 온전히 종료되는 것을 아래 그림에서 볼 수 있다.&lt;/p&gt;&lt;p&gt;또 다른 실험의 결과&amp;nbsp;작업끝내기로 &lt;u&gt;프로세스를 죽여버렸을 때는 해당 메서드들을 호출되지 않았다&lt;/u&gt;.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F99BFE64F5C7385FE2B6C50&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99BFE64F5C7385FE2B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;컨트롤C결과.png&quot; height=&quot;429&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;* 빨간선 위로는 온전히 수행했을 때고, 빨간선일 때 ctrl+c를 눌르면&amp;nbsp;보이는 것과&amp;nbsp;같이 메서드를 호출하고 빠져나온 것을 볼 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;* 또 다른 실험으로 얻은 결과,&amp;nbsp;온전히 자바 애플리케이션이 실행되기 전에 ctrl+c를 누르면 정상적으로 종료되지 않는다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우리 모두 스프링 애플리케이션을 우아하게&amp;nbsp;종료합시다.&lt;/p&gt;&lt;p&gt;참고 사이트&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zepinos.tistory.com/41?category=797553&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://zepinos.tistory.com/41?category=797553&lt;/a&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/179&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>Spring</category>
<category>ApplicationEvent</category>
<category>ApplicationListener</category>
<category>commandLineRunner</category>
<category>DisposableBean</category>
<category>InitializingBean</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/179</guid>
<comments>https://jeong-pro.tistory.com/179#entry179comment</comments>
<pubDate>Mon, 25 Feb 2019 15:10:48 +0900</pubDate>
</item>
<item>
<title>네트워크 공부하기 전 인터넷이 어떻게 생겨먹었는지 알아보는 네트워크 기초(5분만에 보는 최소한의 네트워크 구조)</title>
<link>https://jeong-pro.tistory.com/178</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;인터넷과 네트워크 구성&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;이 포스트는 그냥 잘 만든 프레임워크에서, 잘 만든 라이브러리를 이용하여&amp;nbsp;개발하는 필자와 같은&amp;nbsp;사람이 네트워크에 아주 작은 관심을 갖게되어 개발에 약간이나 도움이 될만한 기초적인 내용을 정리한 포스트다.&lt;/p&gt;&lt;p&gt;사실 명확하게 &quot;개발에 도움이 된다!&quot; 고 말할 수는 없겠지만 요즘 개발자들이 인프라도 만지고 그러니까, 그리고 인터넷/네트워크 통신 한다는 사람들이 이 정도의&amp;nbsp;기본은 알아야지 하는 마음으로 공부해봤다.&lt;/p&gt;&lt;p&gt;그리고 그 내용을 정리한 것이 아래와 같다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;인터넷&lt;/b&gt; : 인터넷은 여러 작은 네트워크들을 묶은 것을 이야기한다. 우리가 LAN케이블로 PC에 연결해서 사용하는 네트워크 망 전체를 인터넷이라고 한다고 보면 된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;이더넷&lt;/b&gt; : 이더넷은&amp;nbsp;다른 피씨와 통신하는 방법 중에 하나로 CSMA/CD라는 프로토콜(방법)을 사용하는 하나의 방법이다. (참고로 CSMA/CD 말고도 토큰링, FDDI, ATM, ... 등이 있는데 다 사장되고 없다고 보면 된다. 우리가 사용하는 인터넷이 다 이더넷 방식으로 한다!고 이해하고 끝내면 된다.)&lt;/p&gt;&lt;p&gt;&lt;b&gt;CSMA/CD&lt;/b&gt; : Carrier Sence Multiple Access/Collision Detection의 준말. 뭐냐면&amp;nbsp;네트워크는 기본적으로 한 번에 한 PC만 사용(통신)할 수 있다. 그래서 네트워크 망을 사용하는 방식을 정한 것으로&amp;nbsp;Multiple Access 즉, 동시 다발적으로&amp;nbsp;사용할 수 있지만 누군가 이미 사용하고 있으면 그것을 충돌(Collision)로 보고 다시 한 번 시도하는 방식이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;(누가 쓰고 있으면 조금 있다가 또 보내고, 그래도 쓰고 있으면 또 보내고, ... 무한히 하고 발생하는 문제는 다른 방식으로 푼다. 그냥 이런 방식이구나만 알고 이런 방식만 쓰고 있구나 하면 된다.)&lt;/p&gt;&lt;p&gt;&lt;b&gt;MAC Address&lt;/b&gt; : 기본적으로 통신을 하기 위해서 각자의 컴퓨터를 구분해야만 원하는 PC와 통신을 할 수 있을 것이다. 그럴 때 고유하게 사용하는 주소가 MAC 주소다. 네트워크에서는&amp;nbsp;MAC 주소로 통신할 대상을 정한다.&lt;/p&gt;&lt;p&gt;전 세계 PC들은 전부 MAC 주소를 갖고 전 세계에서 유일하다.&lt;/p&gt;&lt;p&gt;(참고로 IP도 공인IP주소는 유일하지만 공인IP주소의 개수가 부족해서&amp;nbsp;비공인IP를 사용해서 확장해서 사용한다.)&lt;/p&gt;&lt;p&gt;우리가 TCP/IP 이러면서 IP주소로 통신하는 것으로 알고 있는데 명확하게는 IP주소를 이용해서 MAC주소를 알아내는 식의 방법으로 쓰기 때문에 결과적으로는 MAC 주소를 이용한 통신을 하는 것이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;TCP/IP&lt;/b&gt; : 인터넷에서 통신을 하기 위해서는 기본적으로 프로토콜이라는 규약, 약속이 필요하다. &quot;한국인들끼리 얘기할 때는 한국어를 쓰자&quot;&amp;nbsp;와 같이 인터넷을 쓸 때는 TCP/IP를 쓰자고 약속한 것이라고 이해하고 넘어가면 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 정리&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;인터넷은 LAN으로 연결된 네트워크들을 묶은 망이다.&lt;/p&gt;&lt;p&gt;인터넷은 이더넷이라는 방식으로 통신을 하는데 CSMA/CD라는 프로토콜을 사용한다.&lt;/p&gt;&lt;p&gt;CSMA/CD는 PC들이 같은 네트워크 망내에서 무조건 통신을 위해 네트워크를 사용하고, 제대로 갔나 확인해보는데 누가 이미 사용중이면 다시 보내고 또 확인하고 제대로 안가면 또 다시 보내는 방식이다.&lt;/p&gt;&lt;p&gt;통신할 상대를 찾을 때는 유일한 주소인 MAC주소를 사용한다.&lt;/p&gt;&lt;p&gt;IP 주소를 이용해서 MAC주소를 알아낸다. (ARP라는 프로토콜을 들어봤다면 그 프로토콜이 변환해준다.)&lt;/p&gt;&lt;p&gt;인터넷에서 쓰는 통신규약인 프로토콜은 TCP/IP다. (TCP/IP의 특징이나 부가 정보는 나중에 공부한다.)&lt;/p&gt;&lt;hr&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;네트워크 장비와 역할&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;리피터&lt;/b&gt; : 통신 케이블로 연결했을 때 전송할 수 있는 거리의 한계가 있는데 리피터가 중간에 다시 한 번 네트워크 신호를 보내주는 역할을 하는 장비. 근데 이 역할은 지금은 허브가 해서 별볼 일 없는 장비.&lt;/p&gt;&lt;p&gt;&lt;b&gt;허브&lt;/b&gt; : 네트워크 구성에 필요한 장비로 각각 피씨들을 직접 연결하는 것이 아니라 포트가 여러 개인 허브라는 장비를 이용해서 여러 피씨를 한 허브에 연결해서 네트워크 만드는&amp;nbsp;역할을 한다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile28.uf.tistory.com%2Fimage%2F99B4FA375C6E9F9A2C8932&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99B4FA375C6E9F9A2C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;허브.png&quot; height=&quot;640&quot; original=&quot;yes&quot; style=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;[출처 : 후니의 시스코 네트워킹 4판 - 도서]&lt;br /&gt;&lt;/p&gt;&lt;p&gt;통신 방식을 간단히 설명하면 1번 PC가 2번 PC로 데이터를 보낼 때 허브는 2번이 어디에 있는지 모르기 때문에 허브와 연결된 모든 피씨로 데이터를 보내게 된다.&lt;/p&gt;&lt;p&gt;그러면 3,4,5번의 경우는 자신에게 온 데이터가 아니기 때문에 버려버리고, 2번의 경우는 자신에게 온 데이터이기 때문에 받아 들이게 된다.&lt;/p&gt;&lt;p&gt;참고로 허브에 너무 많은게 PC가 연결되게 되면 네트워크 사용량도 많아져서 계속 충돌이 발생하게 될 것이고 허브가 모든 피씨에게 데이터를 보내게 되니 아주 힘들어진다. 따라서 PC를 무한정 붙이는 것은 올바르지 않고 해결 방법이 있다. (* 이렇게 허브에 묶여서 같은 충돌 네트워크를 갖는 영역을 콜리젼 도메인(collision domain)이라고 한다.)&lt;/p&gt;&lt;p&gt;또한 어느 한 PC가 미친듯이 데이터를 보내서 다른 PC들이 네트워크를 사용하기 어려운 경우가 발생할 수 있는데 이런 문제를 허브가 찾아서 미친듯이 보내는 PC의 연결을 끊어버리는 기능도 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;스위치/브릿지&lt;/b&gt;&amp;nbsp;: 허브를 사용해서 연결하다보면 CSMA/CD 방식을 쓰기 때문에 충돌이 많이 일어나게 되어있는데 이 문제를 해결해 주는 장비다. 포트별로 충돌이 일어나지 않게 구역을 나눈다고 보면 된다. 하드웨어적으로 포트가 다르면 다른 네트워크에 연결된 것 처럼 나눠주는 역할을 한다. (콜리젼 도메인을 작게 해줌)&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F997DD9455C6EA3571A189D&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/997DD9455C6EA3571A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스위치.png&quot; height=&quot;580&quot; style=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;[출처 : 후니의 시스코 네트워킹 4판 - 도서]&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그림에는 브릿지로 나오는데 브릿지는 사실 스위치가 그 역할을 대신하고 있는 장비다. 스위치로 봐도 무방하다.&lt;/p&gt;&lt;p&gt;스위치는 일단 처음 연결되면 어디에 어떤 PC들이 있는지를 모른다.&lt;/p&gt;&lt;p&gt;그래서 PC로 부터 요청이 오거나 응답이 와야 MAC 주소 테이블에 적어놓고 판단할 수 있게 된다.&lt;/p&gt;&lt;p&gt;1111 피씨가 2222에게 요청을 하면 스위치는 2222의 위치를 모르니 연결된 2222, 3333, 4444에게 데이터를 뿌린다.&lt;/p&gt;&lt;p&gt;그러면 2222가 응답을 해주고 스위치는 1111, 2222의 위치를 알게 되었으니 테이블에 적어놓는다.&lt;/p&gt;&lt;p&gt;이런식으로 3333과 4444도 알게되면 위 그림처럼 된다. 그랬을 때 만약 1111이 다시 2222에 통신을 하면 스위치는 E1 세그먼트로는 알려줄 필요가 없으니까 3333, 4444가 연결된 E1 세그먼트는 사용할 필요가 없다.&lt;/p&gt;&lt;p&gt;따라서 만약 동시에 3333이 4444와 통신하려고 했을 때는 1111과 2222는 어차피 상관없는 건너편 세그먼트니까 동시에 이용이 가능하게 되는 매커니즘이다.&lt;/p&gt;&lt;p&gt;이 그림은 다른 세그먼트의 PC가 하나의 스위치에 연결되었을 때인데 만약 두 개이상의 스위치에 연결되게 되면 해당 PC의 위치를 찾기 위해서 서로 반복해서 통신을 하기 때문에 영원한 굴레로 들어갈 수 있는 문제가 있다.&lt;/p&gt;&lt;p&gt;이 문제는 스패닝 트리 프로토콜(알고리즘)이라는 기술로 회피하는데 이 기술은 다른 포스트에서 설명한다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;라우터&lt;/b&gt; : 스위치로 부터 연결된 모든 PC로 데이터가 전파되는 것을 브로드 캐스트라고 하는데 이 브로드캐스트가 많아져도 네트워크 사용률이 높아져서 문제가 발생한다.&lt;/p&gt;&lt;p&gt;스위치를 이용해서 콜리젼 도메인을 나눠서 네트워크 사용 경쟁을 줄였다면 라우터를 이용해서 브로드 캐스트가 연결된 다른 네트워크로 넘어가는 것을 방지한다.&lt;/p&gt;&lt;p&gt;원래 라우터는 IP주소를 가지고 다른 네트워크에 있는 PC를 찾는게 주 목적이고 큰 특징으로 브로드캐스트를 막는다! 라고 이해하고 넘어가면 된다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile27.uf.tistory.com%2Fimage%2F99D3834C5C6EAB3A37BC85&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99D3834C5C6EAB3A37&quot; filemime=&quot;image/jpeg&quot; filename=&quot;라우터.png&quot; height=&quot;441&quot; style=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;[출처 : 후니의 시스코 네트워킹 4판 - 도서]&lt;br /&gt;&lt;/p&gt;&lt;p&gt;스위치가 콜리젼 도메인을 나눴고 라우터가 브로드캐스트 도메인을 나눈 것을 확인할 수 있다.&lt;/p&gt;&lt;p&gt;- &lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;정리&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;이더넷 방식인 CSMA/CD로 인해 생기는 문제를 해결하고 원활하게 네트워크를 사용하기 위해서 장비들에 대해 알아봤다.&lt;/p&gt;&lt;p&gt;&amp;nbsp;자세하게 스패닝 트리 알고리즘이 뭔지는 몰라도 네트워크 장비들이 어떻게 구성되고 어떤 역할을 하는지 정도는 이해했다고 본다.&lt;/p&gt;&lt;hr&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;IP와 서브넷 마스크&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;모든 IP 주소는 네트워크 부분과 호스트 부분으로 나뉜다. IP는 32비트다.&lt;/p&gt;&lt;p&gt;하나의 네트워크는 라우터 없이도 통신이 가능한 브로드 캐스트영역을 나타낸다고 할 때, 하나의 네트워크에서 IP의 호스트 부분은 각 PC가 모두 달라야 한다.&lt;/p&gt;&lt;p&gt;네트워크를 A, B, C, D, E클래스로 크기별, 용도별로 나눴는데 우리가 봐야할 것은 A, B, C클래스다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;A 클래스&lt;/b&gt; : 첫번째 비트가 0으로 시작하는&amp;nbsp;IP주소 대역, IP주소에서 앞에 8비트는 네트워크부분, 나머지 24비트는 호스트 부분이다. (1.0.0.1~ 126.255.255.254)&lt;/p&gt;&lt;p&gt;&lt;b&gt;B 클래스&lt;/b&gt; : 첫번째&amp;nbsp;비트가&amp;nbsp;10으로 시작하는 IP주소 대역, IP주소에서 앞에 16비트는 네트워크부분, 나머지 16비트는 호스트 부분이다. (128.0.0.1~ 192.255.255.254)&lt;/p&gt;&lt;p&gt;&lt;b&gt;C 클래스&lt;/b&gt; : 첫번째 비트가 110으로 시작하는 IP 주소 대역, IP주소에서 앞에 24비트는 네트워크부분, 나머지 8비트는 호스트 부분이다. (192.0.0.1~ 223.255.255.254)&lt;/p&gt;&lt;p&gt;위와 같이 구성된 아이피들은 하나의 네트워크로 묶이는게 기본인데 A클래스의 경우 한 네트워크 당&amp;nbsp;약 1670만개의 PC가 같은 네트워크를 사용하는 것이므로 문제가 발생한다.&lt;/p&gt;&lt;p&gt;이렇게 큰 네트워크를 나눠서 쓰는 것이 서브넷이라고 하고 서브넷 마스크가 나누는 기준이 된다.&lt;/p&gt;&lt;p&gt;일단 아이피를 보게되면 이 아이피가 어떤 클래스에 있는지 알게 된다.&lt;/p&gt;&lt;p&gt;예를 들어 210.100.100.1 이라는 아이피는 바로 범위를 보면 C클래스인것을 알 수 있다.&lt;/p&gt;&lt;p&gt;C클래스는&amp;nbsp;기본적으로 서브넷 마스크가 255.255.255.0이다.&lt;/p&gt;&lt;p&gt;이 서브넷 마스크를 기준으로 서브넷 즉, 네트워크를 나누면 210.100.100.0이 서브네트워크가 되는 것이다.&lt;/p&gt;&lt;p&gt;서브넷을 나누는 기준은 네트워크 엔지니어가 아니기 때문에 일단은 중요하지 않다.&lt;/p&gt;&lt;p&gt;여기서 알아야 할 것은 네트워크가 클래스별로 크게 묶일 수 있는데 이것을 서브넷 마스크를 통해서 서브넷으로 나누고 그 서브넷이 하나의 라우터로 묶이는 네트워크의 단위라고 보면 되는 것이다.&lt;/p&gt;&lt;p&gt;그것만 알고 넘어가면 된다.&lt;/p&gt;&lt;p&gt;자세히 설명되지 않은 부분이 많은데 다듬을 필요가 있고 좀더 상세히 공부할 것도 보인다.&lt;/p&gt;&lt;p&gt;근데 첫 번째로 하는 공부겸 복습이라 이정도로 남겨둔다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;- 정리&lt;br /&gt;&lt;/p&gt;&lt;p&gt;인터넷이 이더넷 CSMA/CD 방식을 쓰고 각종 장비로부터 연결되어 원활하게 네트워크를 사용할 수 있게되었다는 것을 알수 있었다.&lt;/p&gt;&lt;p&gt;또한 IP는 서브넷을 이용해서 네트워크를 나눠서 각자가 잘 할당받아 쓴다는 것을 알게 되었다.&lt;/p&gt;&lt;p&gt;미비된 설명과 더 자세한 내용은 다음에 더 공부하고 다음 포스트에서 쓸 예정이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;참고 자료&lt;/p&gt;&lt;p&gt;도서 - 후니의 쉽게쓴 시스코 네트워크 4판&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/178&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>기타 개발 스킬</category>
<category>네트워크</category>
<category>인터넷</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/178</guid>
<comments>https://jeong-pro.tistory.com/178#entry178comment</comments>
<pubDate>Thu, 21 Feb 2019 23:08:29 +0900</pubDate>
</item>
<item>
<title>자바 메서드 '잘' 작성하는 방법, 알면서 못 지키는 것들(이펙티브 자바 스터디 - 메서드)</title>
<link>https://jeong-pro.tistory.com/177</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;어떻게 해야 메서드 잘 만들었다고 소문이 날까?&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;개발을 하면서 가장 많이 하는 일이면서 가장 난해한 것이 메서드 작성이 아닐까 싶다.&lt;/p&gt;&lt;p&gt;&quot;하나의 메서드에서는 하나의 작업만 한다!&quot; 라는 기본 원칙을 지키려고 하면서도 잘 안된다.&lt;/p&gt;&lt;p&gt;사소하게는 private으로 할지 public으로 해야 할지등 정해야할 것들이 너무도 많은 것이 메서드다.&lt;/p&gt;&lt;p&gt;역시나 한 번에 제대로 작성하려고하면 어렵다. 대신 유념하면서 고치고 또 고치면서 배우는게 코딩아닐까 싶다.&lt;/p&gt;&lt;p&gt;회사를 다닌다면 코드 리뷰를 하는 이유도 올바른, 좋은&amp;nbsp;메서드를 개발하기 위함이 아닐까 한다.&lt;/p&gt;&lt;p&gt;결국 좋은 메서드를 만드려면 기본 원칙을 잘 알고 시도하고 리팩토링을 거쳐봐야 한다. 그래서 아래에 기본 원칙을 소개하려고 한다.&lt;/p&gt;&lt;hr&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;메서드 작성 기본 원칙&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 파라미터가 유효한지 검사하라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;메서드를 작성할 때 파라미터가 유효한지 &lt;u&gt;제일 앞에서&lt;/u&gt;&amp;nbsp;검사해야한다.&lt;/p&gt;&lt;p&gt;메서드의 파라미터가 당연히 유효할 것이라는 생각을 버리고 public, protected 접근지정자가 붙으면 특히나 유념해서 null 체크나 음수, 양수등의 조건 필터를 반드시 넣어야한다.&lt;/p&gt;&lt;p&gt;Objects 클래스에서 requireNonNull로 null 체크를 할 수 있고 예외 메시지도 넣을 수 있다.&lt;/p&gt;&lt;p&gt;이 작업을 앞에서 하지 않고 중간에 확인하면 의도치 않은 에러가 발생할 확률이 올라가기 때문에 파라미터를 제일 앞에서 바로 검사하는 것이 좋다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 적시에 방어적 복사본을 만들어라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;약간 과장하면 클라이언트가 내가 만든 불변식을 깨뜨리려고 하는 사람이라고 생각하고 프로그래밍 해야한다.&lt;/p&gt;&lt;p&gt;그래서 방어적 복사라는 말이 나온 것이다.&lt;/p&gt;&lt;p&gt;방어적 복사란 어떤 클래스의 메서드에서 클래스의 멤버 변수(객체)에 값을 쓰거나 가져올 때 복사본을 만들어서 get/set 을 사용하는 것이다. (예를 들어서 get/set 메서드일 뿐 다른 메서드도 멤버 변수에 접근한다면 복사본을 만들 필요가 있다.)&lt;/p&gt;&lt;p&gt;* 중요한 것은 &lt;b&gt;&lt;u&gt;파라미터의 유효성을 검사하기 전에&lt;/u&gt;&lt;/b&gt; 방어적 복사본을 만들고 이 복사본으로 유효성을 검사해야한다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;방어적 복사를 할 때는 clone 메서드를 사용해서는 안된다.&lt;/p&gt;&lt;p&gt;생성자에서 받은 매개변수 값을 각각 방어적 복사해서 사용해야한다.&lt;/p&gt;&lt;p&gt;성능이 중요할 때는 이런 과정이 영향을 끼칠 수 있다. 따라서 이러한 경우에는 방어적 복사를 하지 않고 문제가 생길 수 있음을 주석과 문서에 명시하는 것으로 대체하면 된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 메서드 설계를 잘하자&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;시그니처를 신중히 설계하라고 되어있지만 결국은 메서드 설계를 잘하자는 내용이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;1) 메서드 이름을 잘 짓자.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;메서드의 이름은 표준 명명 규칙에 따라서 짓고 같은 패키지에 속한 이름과 일관되게 짓는 것이 좋다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;2) 편의 메서드를 너무 많이 만들지 말자.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;하나의 클래스에 너무 많은 메서드가 있으면 다 익히기도 어렵고 구현이 엉켜서 에러를 만들 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;3) 파라미터는 4개 이하로 만들자.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;파라미터를 단순히 필요하다고 5개 이상을 받도록 만들면 메서드를 사용하는 과정에서 헷갈리고 이상한 매개변수를 넣을 확률이 높아진다.&lt;/p&gt;&lt;p&gt;파라미터 개수를 줄이는 방법으로는 여러 메서드로 쪼개는 방법도 있고 파라미터 여러 개를 묶어주는 헬퍼 클래스를 만드는 방법도 있다. 또한 빌더 패턴을 메서드 사용에 호출하는 방법도 있다. (객체 생성에서 빌더 패턴은 다른 포스트에서 작성할 것이다)&lt;/p&gt;&lt;p&gt;&lt;b&gt;4) 파라미터의 타입으로는 클래스보다 인터페이스가 낫다.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;구체적으로 HashMap, HashSet이 아니라 Map, Set 인터페이스로 받는 것이 더 유연하다는 얘기다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;5) boolean 보다는 원소 2개짜리 enum이 낫다.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;enum을 쓰게되면 코드를 읽고 쓰는게 더 용이하다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 다중 정의는 웬만하면 하지 마라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;메서드를 같은 이름으로&amp;nbsp;파라미터 타입만 다르게 정의하는 것이 다중 정의다.&lt;/p&gt;&lt;p&gt;다중 정의가 혼동을 일으킬 우려가 있으니 그냥 사용하지 말자 대신 메서드 이름을 다르게 지어주는 것으로 대체하자.&lt;/p&gt;&lt;p&gt;parseInt, parseDouble, ... 이런식으로 지어주는 것이 헷갈리지 않고 더 좋다.&lt;/p&gt;&lt;p&gt;생성자의 경우에는 이름을 다르게 짓는 것이 불가능하므로 헷갈릴만한 파라미터가 나오면 그냥 instanceof 로 정확한 타입을 찾아서 형변환(캐스팅)해주는 것으로 대체한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- 가변 인수는 꼭 필요할 때만 쓰자&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;가변 인수가 뭐냐면 메서드에 들어올 파라미터 수가 여러 개로 올 수 있게 할 때 쓰는 문법이다.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;sum(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;...&amp;nbsp;args){&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;sum&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;arg&amp;nbsp;:&amp;nbsp;args)&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sum&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;arg;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;sum;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;위의 예제코드처럼 (int...)으로 int 타입의 파라미터가 여러개 올 수 있는 것을 가변 인수라고 한다.&lt;/p&gt;&lt;p&gt;가변 인수는 메서드가 호출될 때마다 배열이 복사되기 때문에 성능에 큰 영향을 미칠 수 있어 자주 호출된다면 사용하지 말아야 한다.&lt;/p&gt;&lt;p&gt;가변 인수대신 사용할 것은 아까하지말라던 다중정의를 쓰는 것이다.&lt;/p&gt;&lt;p&gt;만약 sum 메서드 호출의 대부분이 args가 3개 이하라면&amp;nbsp;아래와 같이 구현해놓는 것이다.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;sum(){}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;sum(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a1){}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;sum(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a1,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a2){}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;sum(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a1,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a2,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a3){}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;sum(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a1,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a2,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;a3,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;...rest){}&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;이렇게 구현하면 3개 이하를 사용하는 코드에서는 가변 인수를 사용하지 않다가 소수로 몇 번 사용하는 경우에만 가변 인수가 있는 메서드를 호출할 것이다.&lt;/p&gt;&lt;p&gt;가변 인수를 꼭 써야만 하는 곳이라면 써라&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- null이 아닌 빈 컬렉션이나 배열을 반환하라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;그냥 null을 반환해버리면 반환된 객체가 null이 아닌지도 체크를 매번해줘야한다.&lt;/p&gt;&lt;p&gt;그런데 빈 컬렉션이나 배열을 반환하면 size()라든지 contains(...) 메서드로 비어있는지 사용가능한지 알 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;- Optional 반환은 신중히 하라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Optional에 대해서 &lt;a href=&quot;https://jeong-pro.tistory.com/169&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;포스팅&lt;/a&gt;도 이미 있다. Optional은 특정 조건에서 반환할 값이 없을 때 null 대신 래퍼로 감싸는 타입이다.&lt;/p&gt;&lt;p&gt;Optional은 nullPointerException으로부터 조금 더 자유로워(?)지기 위해서 나온 타입이다.&lt;/p&gt;&lt;p&gt;따라서 &lt;u&gt;Optional을 반환하는 메서드를 만드려면 절대 null을 반환하는 Optional을 리턴해서는 안된다.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;그리고 Optional은 아무래도 래퍼하고 그걸 다시 풀고, 값이 없을 때 대체하는 값을 넣고 하는 등의 오버헤드가 있으니 성능 저하는 반드시 동반한다.&lt;/p&gt;&lt;p&gt;컬렉션, 스트림, 배열, 옵셔널같은 어떤 객체를 담을 수 있는 컨테이너타입은 절대 optional로 감싸면 안된다.&lt;/p&gt;&lt;p&gt;그럴바엔 빈 컬렉션, 배열을 반환하는 것이 훨씬 좋다.&lt;/p&gt;&lt;p&gt;박싱된 기본 타입(Integer, Boolean, Double, ...)을 담은 옵셔널을 반환하지 말라&lt;/p&gt;&lt;p&gt;이미 OptionalInt, OptionalLong, OptionalDouble이 있다.&lt;/p&gt;&lt;p&gt;기본타입이 들어있는 것을 반환할 때는 위의 메서드를 사용하도록 하자. 그러면 성능저하가 덜하다.&lt;/p&gt;&lt;p&gt;Optional을 컬렉션의 key, value, 배열의 원소로 사용하는게 적절한 상황은 없다. 사용하지 말라.&lt;/p&gt;&lt;p&gt;그러면 언제 써야할까?&lt;/p&gt;&lt;p&gt;&lt;u&gt;딱 1개의 상황&lt;/u&gt;이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;메서드의 결과를 알 수 없으며, 클라이언트가 이 상황을 특별하게 처리해야 할때&lt;/u&gt;&lt;/b&gt; Optional&amp;lt;T&amp;gt;를 반환하게 하면 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위와 같이 메서드를 작성할 수 있도록 유념하고 잘못한 부분이 있다면 다시 고치면 된다.&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/177&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>JAVA</category>
<category>메서드 잘 작성하는 방법</category>
<category>이펙티브 자바</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/177</guid>
<comments>https://jeong-pro.tistory.com/177#entry177comment</comments>
<pubDate>Mon, 28 Jan 2019 20:48:05 +0900</pubDate>
</item>
<item>
<title>일반적인 프로그래밍 원칙(effective java 3판 스터디, 자바에서 경계해야할 것들 간단 정리)</title>
<link>https://jeong-pro.tistory.com/176</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;일반적인 프로그래밍에서 하지 말아야할 것&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;먼저 일반적인 프로그래밍에서 하지 말아야할 것에 대해 말하기 전에 소개하고 싶은 것이 있다.&lt;/p&gt;&lt;p&gt;이 글은 이펙티브 자바 3판을 읽으면서 처음쓰는 글이다.&lt;/p&gt;&lt;p&gt;그런데 포스트의 내용은 첫 장에 나오는 내용이 아니라 중간에 나오는 내용이다.&lt;/p&gt;&lt;p&gt;왜 이렇게 글을 쓰냐면 이 책은 스터디 방법이 좀 달라야한다고 생각하기 때문이다.&lt;/p&gt;&lt;p&gt;이 책을 한 번 읽고 완전히 이해하고 적용하는&amp;nbsp;사람은 없다고 생각한다.&lt;/p&gt;&lt;p&gt;그냥 쭉 읽고 이해한 부분을 정리하고 적용할 수 있는 건 해보면 그걸로 충분한 것 같다.&lt;/p&gt;&lt;p&gt;이해하지 못한 부분은 또 읽으면 되니까. 좀 더 레벨업하고 와서 보면 또 다르게 이해가 되는 것도 있겠지 하는 마음의 스터디 방법이다. (추천합니다.)&lt;/p&gt;&lt;p&gt;각설하고 간단하게 정리하며 한 번 더 공부해본다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;1. 지역 변수 범위를 최소화 하기&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;- 지역 변수 범위를 최소화하면 유지보수성이 높아지고 오류를 낼 가능성은 낮아진다.&lt;/p&gt;&lt;p&gt;지역 변수 범위를 최소화하기 위한 기법 3 가지&lt;/p&gt;&lt;p&gt;&lt;b&gt;1) 가장 처음 쓰일 때 선언하기&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 이제는 C언어에서도 코드 상단이 아닌 사용해야할 위치에서 변수를 선언한다. 가독성도 좋아진다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;2) 선언과 동시에 초기화하기&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 초기화에 필요한 정보다 부족하면 선언은 미뤄야 한다.&lt;/p&gt;&lt;p&gt;&amp;nbsp; try-catch는 try안에서 선언하는 것이 예외를 멀리 퍼지지 않게해서 좋다. 부득이하게 try-catch문 외부에서도 지역 변수를 사용해야한다면 try문 앞에서 선언해야한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;3) 메서드를 최대한 작게 유지하고 그 메서드는 1개의 기능에만 집중하기&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 만약 메서드에서 여러 기능을 수행하는데 지역 변수가 살아있다면 괜히 다른 기능에서 접근이 가능해져서 문제를 일으킬 수도 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;2. for문 보다는 for-each 문을 사용하기&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 배열이냐 컬렉이냐에 따라 문법 형태가 바뀌지 않고 변수가 조잡하지 않아 실수할 일이 적다.&lt;/p&gt;&lt;p&gt;for(int i=0;i&amp;lt;a.length;i++), Iterator, ... 뭐 이런게 안나와서 가독성도 좋고 성능도 떨어지지 않는다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;* for-each문을 사용할 수 없는 경우&lt;/b&gt; (이럴 때만 기존 for문을 사용하자.)&lt;/p&gt;&lt;p&gt;&lt;b&gt;1) 컬렉션을 순회하면서 선택된 원소를 제거하는 경우&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 이럴 때는 반복자의 remove() 메서드를 사용해야한다. 물론 컬렉션은&amp;nbsp;removeIf()를 사용하면 for-each도 사용할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;2) 배열을 순회하면서 원소의 값을 변경하는 경우&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 일부나 전체 값을 변경하는 경우에는 배열의 인덱스를 사용해야한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;3) 병렬 순회를 사용해야하는 경우&lt;/b&gt;&lt;/p&gt;&lt;p&gt;컬렉션을 스트림으로 병렬 순회하는 경우 인덱스를 사용하여 엄격하게 처리해야하므로 일반 for문을 사용해야한다.&lt;/p&gt;&lt;p&gt;참고로 for-each문을 사용하려면 Iterable&amp;lt;E&amp;gt; 인터페이스를 구현해야한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;3. 라이브러리 활용하기&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 아주 기본적인 이야기지만 자기보다 훨씬 고수인 개발자가 심혈을 기울여서 만들어 놓은 표준라이브러리를 적극 사용하자.&lt;/p&gt;&lt;p&gt;&lt;u&gt;구글의 구아바(guava), java.lang, java.util 의 하위패키지는 꼭 한 번씩 사용해보도록 하자&lt;/u&gt;. 아주 기본기가 충실한 개발자가 될 수 있을 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;4. 정확한 값이 필요할 때는 Float, Double&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;을 쓰지말자&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 금융과 관련된 계산처럼 정밀한 값을 표현할 때는 Float, Double을 쓰면 안된다.&lt;/p&gt;&lt;p&gt;&lt;u&gt;Float, Double은 0.1, 0.01등을 표현할 수 없기 때문&lt;/u&gt;이다.&lt;/p&gt;&lt;p&gt;대신 BigDecimal, int, long을 사용하도록 하자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;5. 박싱된 기본 타입(Integer, Double, Boolean)보다 기본 타입(int, double, boolean)을 사용하자.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 엄연히 박싱된 기본 타입은 클래스고 내부적으로 식별성 속성을 갖는다.&lt;/p&gt;&lt;p&gt;기본 타입은 언제나 유효하지만 박싱된 기본 타입은 객체기 때문에 null을 가질 수 있다.&lt;/p&gt;&lt;p&gt;박싱된 타입은 '==' 연산을 할 때 문제를 일으킬 수 있다. 고유 식별성 속성이 같은지를 검사해버리기 때문이다.&lt;/p&gt;&lt;p&gt;naturalOrder.compare(new Integer(42), new Integer(42)); 의 값은 1을 출력한다. (같으면 0)&lt;/p&gt;&lt;p&gt;연산 같은 곳에 잘못하면 오토 언박싱/박싱이 일어나면서 오버헤드가 엄청나게 발생할 수도 있다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;6. 다른 타입이 더 적절하다면 문자열 타입을 피하자&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 문자열이 여러 메서드도 제공해주고 사용하기 편리하다고 느껴 자주 사용되지만 더 적합한 타입이 있으면 boolean, enum, float등을 쓰는게 더 좋다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;7. 문자열 연결은 느리니 주의해서 사용하라&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;- 문자열은 불변클래스라 두 문자열을 연결할 때 복사본을 만들어서 연결하고 새 문자열을 만든다.&lt;/p&gt;&lt;p&gt;성능이 떨어질 수 밖에 없다. &lt;a href=&quot;https://jeong-pro.tistory.com/85&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;다른 포스트&lt;/a&gt;에서 언급했듯이 stringbuilder, stringbuffer를 사용하도록 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;8. 객체는 인터페이스를 사용해 참조하라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 예를들면 Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); 이런식으로 앞에 선언에서 인터페이스를 사용해 참조하라는 얘기다.&lt;/p&gt;&lt;p&gt;이렇게 하면 HashMap서 다른 더 효율적인 Map을 사용하려고 할 때 변경에서 자유롭다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;9. 리플렉션보다는 인터페이스를 사용하라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 리플렉션은 컴파일타임에 타입검사를 할 수 없기때문에 없는 메서드를 호출하려한다든지 하면 에러가 발생할 수 있는 단점이 있다.&lt;/p&gt;&lt;p&gt;또한 리플렉션을 이용하면 코드가 지저분해지고 성능이 떨어진다.&lt;/p&gt;&lt;p&gt;상식적으로 생각해도&amp;nbsp;그냥 메서드를 호출하는 것보다 클래스를 찾아서 메서드 리스트를 받아서 찾아서 호출하는 식이 느리다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;리플렉션은 딱 인스턴스 생성에만 쓰고, 그렇게 생성된 인스턴스는 인터페이스나 상위클래스로 참조해 사용하면 좋다.&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;막상 예제를 테스트해보니 잘 안된다.&lt;/p&gt;&lt;p&gt;느낌만 이해하고 그것을 설명하면, 리플렉션으로 런타임중에 사용되는 어떤 클래스를 Class.forName(&quot;java.lang.String&quot;); 처럼 클래스 이름으로 찾고, Class 객체의 getDeclaredConstructor()로 생성자를 찾아 .newInstance()로 인스턴스까지 생성을 한 후, 그 인스턴스를 가리킬 수있는 super 클래스 혹은 인터페이스로 참조하고 해당 기능을 직접사용하는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;10. 네이티브 메서드는 신중히 사용하라(아니 사용하지 말라)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 네이티브 메서드는 잘 사용하기 아주 어렵다. 사용하지 말자.&lt;/p&gt;&lt;p&gt;GC가 자동으로 메모리 수거도 못하고 자바코드랑 네이티브메서드랑 접착 코드를 작성해야하는데 엄청 어렵고 자바의 장점인 플랫폼을 타지 않는다는 것이 사라지고 이식성이 떨어지는 단점들이 존재하니 일반적인 개발자는 사용하지 말자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;11. 최적화는 신중히 하라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 최적화, 성능, 효율성을 강조하기 위해 설계를 바꾸지 말자&lt;/p&gt;&lt;p&gt;병목현상이 일어나는 부분은 분명히 해결해야할 숙제고 이런것들을 하지 말라는 게 아니다.&lt;/p&gt;&lt;p&gt;여기서 하지말라는 것은 성능때문에 기존의 좋은 프로그램 설계를 깨는 것이 오히려 위험하고, 성능이 좋지 않을 수 있다는 것이다.&lt;/p&gt;&lt;p&gt;또한 각각의 성능 최적화 시도를 했으면 전후로 성능을 측정해서 확실히 하는 버릇을 들이라는 내용이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;12. 일반적으로 통용되는 명명규칙을 따르라&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;- 개발하면서 이게 제일 어려운것 같다.&lt;/p&gt;&lt;p&gt;1)&amp;nbsp;min, max처럼 통용되는 약어는 약어로 쓰되 단어를 임의의로 줄이지 않는다.&lt;/p&gt;&lt;p&gt;2) 클래스나 인터페이스 첫 글자는 대문자로 쓴다. ex) String&lt;/p&gt;&lt;p&gt;3) 메서드와 필드는 첫 글자를 소문자로 쓴다. ex) getName()&lt;/p&gt;&lt;p&gt;4) 상수는 전체 대문자와 띄어쓰기는 언더바로 한다. ex) NEGATIVE_INFINITY&lt;/p&gt;&lt;p&gt;5) 타입매개변수는 한 문자로 표현하고 임의의 타입은 T, 컬렉션의 원소는 E, Map의 키와 값은 K, V, 예외는 X, 메서드의 리턴 타입은 R을 사용한다.&lt;/p&gt;&lt;p&gt;6) 멤버 속성을 반환하는 메서드는 get으로 시작하는 동사구로 짓는다. ex) getSize()&lt;/p&gt;&lt;p&gt;7) boolean 값을 반환하면 has나 is로 시작하는 메서드를 짓는다.&lt;/p&gt;&lt;p&gt;9) 다른 타입으로 변환할 때는 toArray등의 형태로 짓는다. ex) toJson()&lt;/p&gt;&lt;p&gt;10) 의미가 잘 드러날 수 있는 단어를 조합해 사용한다.&lt;/p&gt;&lt;p&gt;참고로 여기 변수명을 지어주는 사이트가 있다. 아주 유용하다.(&lt;a href=&quot;https://www.curioustore.com/#!/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.curioustore.com/#!/&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;참고 자료&lt;/p&gt;&lt;p&gt;도서 : &lt;u&gt;이펙티브 자바(effective java)&amp;nbsp;3판&lt;/u&gt;&lt;/p&gt;&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block;width:728px;height:90px&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-format=&quot;autorelaxed&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;1047060427&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=https://jeong-pro.tistory.com/176&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
<category>JAVA</category>
<category>Effective Java</category>
<category>이펙티브 자바</category>
<author>정아마추어 JEONG_AMATEUR</author>
<guid>https://jeong-pro.tistory.com/176</guid>
<comments>https://jeong-pro.tistory.com/176#entry176comment</comments>
<pubDate>Fri, 18 Jan 2019 22:03:24 +0900</pubDate>
</item>
<item>
<title>spring-boot-starter-data-redis 사용기, get/set 예제와 pub/sub 예제 간단하게 만들고 테스트해봤습니다.</title>
<link>https://jeong-pro.tistory.com/175</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;!-- 커스텀광고 --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-3003138259390531&quot;
     data-ad-slot=&quot;7323543178&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;spring boot에서 redis 사용하는 방법&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;지난 포스트 중 자바에서 redis(Jedis)를 사용한 포스트가 있었다.&lt;/p&gt;&lt;p&gt;jedis 라이브러리를 직접 불러와서 사용했었지만 이번에는 spring boot에서 starter로 제공하는 라이브러리로 사용하는 것을 해봤다.&lt;/p&gt;&lt;p&gt;이것 또한 jedis를 사용하는 것과 다르지 않다.&lt;/p&gt;&lt;p&gt;spring에서 redis와 관련한 라이브러리를 추상화시켜서 사용할 수 있게 해준 것이다.&lt;/p&gt;&lt;p&gt;무슨말이냐면 자바에서 주로 사용하는 redis 라이브러리로는 jedis와 lettuce가 있다.&lt;/p&gt;&lt;p&gt;두 라이브러리를 공통으로 추상화해서 둘 중에 어떤 것을 쓸 것인지는 설정을 통해 사용할 수 있게 하는 것이다.&lt;/p&gt;&lt;p&gt;바로 사용해본다.&lt;/p&gt;&lt;hr&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Get, Set&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Redis는 In Memory key/value Database로&amp;nbsp;NoSQL DB다. 특히 자바에서는 &lt;u&gt;캐시나 세션 관리, pub/sub 메세지 처리&lt;/u&gt;로 쓰인다.&lt;/p&gt;&lt;p&gt;기본적인 get,set부터 시행착오를 함께한다.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;1. Maven dependency를 추가한다.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;groupId&lt;/span&gt;&amp;gt;org.springframework.boot&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;artifactId&lt;/span&gt;&amp;gt;spring-boot-starter-data-redis&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;2. setting을 위한 &lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Configuration bean 적용&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;@Configuration&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;RedisConfiguration&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Bean&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;RedisConnectionFactory&amp;nbsp;redisConnectionFactory()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LettuceConnectionFactory&amp;nbsp;lettuceConnectionFactory&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;LettuceConnectionFactory();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;lettuceConnectionFactory;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Bean&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;RedisTemplate&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;,&amp;nbsp;Object&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;redisTemplate()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisTemplate&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;,&amp;nbsp;Object&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;redisTemplate&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;RedisTemplate&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;gt;&lt;/span&gt;();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redisTemplate.setConnectionFactory(redisConnectionFactory());&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redisTemplate.setKeySerializer(&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;StringRedisSerializer());&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;redisTemplate;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;RedisConnectionFactory 인터페이스를 확장한 LettuceConnectionFactory 또는 JedisConnectionFactory를 생성해서 빈으로 등록하면 된다.&lt;/p&gt;&lt;p&gt;&lt;u&gt;(* 참고로 springboot 2.0이상부터는 auto-configuration으로 위의 빈(redisConnectionFactory, RedisTemplate, StringTemplate)들이 자동으로 생성되기 때문에 굳이 Configuration을 만들지 않아도 즉시 사용가능하다.)&lt;/u&gt;&lt;/p&gt;&lt;p&gt;말 그대로 Redis에 연결하기위한 Connection 설정을 위한 객체를 만든다고 생각하면 된다.&lt;/p&gt;&lt;p&gt;또한 lettuceConnectionFactory.setHost(&quot;192.168.0.78&quot;)로 지정할 수 있고 마찬가지로 .setPassword(&quot;password&quot;);를 사용해서 redis 연결에 필요한 설정을 줄 수 있다.&lt;/p&gt;&lt;p&gt;하지만 권장하지 않는 방법이고 application.properties나 .yml 같은 설정파일에서 설정하는 것이 더 좋다.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;spring.redis.lettuce.pool.max&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;active&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;spring.redis.lettuce.pool.max&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;idle&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;spring.redis.lettuce.pool.min&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;idle&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;spring.redis.port&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;6379&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;spring.redis.host&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;127.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;0.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;0.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;위의 설정을 application.properties 에서 설정한 예제다.&lt;/p&gt;&lt;p&gt;다시 돌아가서 RedisTemplate&amp;lt;String, Object&amp;gt;는 get/set을 위한 객체다.&lt;/p&gt;&lt;p&gt;실제로 사용할 때는 RedisTemplate로부터 Operation객체를 받아 사용한다.&lt;/p&gt;&lt;p&gt;Operation객체는 기본적인 value나 list, hashMap등을 위한 Operation이 따로 있다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;3. 실제 사용&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;@Service&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;GetSetService&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Autowired&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisTemplate&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;,&amp;nbsp;Object&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;redisTemplate;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;test()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//get/set을&amp;nbsp;위한&amp;nbsp;객체&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ValueOperations&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;,&amp;nbsp;Object&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;vop&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;redisTemplate.opsForValue();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vop.set(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;jdkSerial&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;jdk&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;result&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;)&amp;nbsp;vop.get(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;jdkSerial&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(result);&lt;span style=&quot;color:#999999&quot;&gt;//jdk&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;일반적으로는 어떻게 사용하는지는 모르겠다.&lt;/p&gt;&lt;p&gt;어떤 예제에서는 @Resource로 Operation을 주입받아 사용한다.&lt;/p&gt;&lt;p&gt;그런데 필자는&amp;nbsp;개인적으로 직관성을 위해&amp;nbsp;등록한 빈 자체를 가져와서 직접 Operation을 꺼내쓰는 방법을 택했다.&lt;/p&gt;&lt;p&gt;위의 예제에서는 메서드에서 꺼내썼지만 해당 service의&amp;nbsp;멤버 변수에 등록해서&amp;nbsp;사용하는게 좋아보인다.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;위와 같이 간단한 설정만 하면 쉽게 데이터를 넣고 뺄 수 있다.&lt;/p&gt;&lt;p&gt;그런데 문제가 있다. 자바에서만 사용하면 상관없는데 redis-cli를 켜서 실행해보면 이상한 데이터가 들어가있다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:437px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile27.uf.tistory.com%2Fimage%2F99CEDD3B5C28A66F317A2D&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99CEDD3B5C28A66F31&quot; filemime=&quot;image/jpeg&quot; filename=&quot;결과1.png&quot; height=&quot;186&quot; width=&quot;437&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;이런 이유는 redis가 기본적으로 바이트 배열로 데이터를 저장하기 때문인것도 있고, 자바가 serialize하는 과정에서 &quot;jdk&quot;라는 데이터만 저장하는 것이 아니라 데이터의 클래스 정보도 추가로 저장하기 때문이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 문제를 해결하는 방법은 serialize를 다른 것으로 지정해주고&amp;nbsp;json같은 방식을 이용하면 된다.&lt;/p&gt;&lt;p&gt;자바 직렬화 문제인데 이것에&amp;nbsp;대해서는 우아한형제들 기술블로그에 잘 설명이 되어있다.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://woowabros.github.io/experience/2017/10/17/java-serialize2.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://woowabros.github.io/experience/2017/10/17/java-serialize2.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;테스트해본다.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;@Configuration&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;RedisConfiguration&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Bean&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;RedisConnectionFactory&amp;nbsp;redisConnectionFactory()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LettuceConnectionFactory&amp;nbsp;lettuceConnectionFactory&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;LettuceConnectionFactory();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;lettuceConnectionFactory;&lt;/d