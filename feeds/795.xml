<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Captain Pangyo - Articles</title>
    <description>Your Latest Posts</description>
    <link>https://joshua1988.github.io</link>
    
      
        <item>
          <title>Vue.js 개발 생산성을 높여주는 도구 3가지</title>
          <link href="https://joshua1988.github.io/web-development/vuejs/boost-productivity/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가며&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prettier&quot; id=&quot;markdown-toc-prettier&quot;&gt;Prettier&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prettier-적용하기&quot; id=&quot;markdown-toc-prettier-적용하기&quot;&gt;Prettier 적용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eslint-소개&quot; id=&quot;markdown-toc-eslint-소개&quot;&gt;ESLint 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eslint와-prettier를-뷰-프로젝트에-적용하기&quot; id=&quot;markdown-toc-eslint와-prettier를-뷰-프로젝트에-적용하기&quot;&gt;ESLint와 Prettier를 뷰 프로젝트에 적용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vue-vscode-snippets&quot; id=&quot;markdown-toc-vue-vscode-snippets&quot;&gt;Vue VSCode Snippets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;실무에서 프런트엔드 개발을 하다 보면 늘 효율과 생산성에 대해서 고민하게 됩니다. 어떻게 하면 팀 전체가 일관된 형식으로 코드를 작성할 수 있을지, 매번 반복적으로 치는 코드들을 줄일 수 있을지 고민하죠.&lt;/p&gt;

&lt;p&gt;오늘은 이런 고민들을 해결해줄 수 있는 몇 가지 도구를 소개하려고 합니다. 바로 ESLint, Prettier, Vue VSCode Snippets 입니다. 도구들에 대한 간단한 설명부터 프로젝트에 바로 적용해서 사용할 수 있는 가이드를 짧은 호흡으로 적어보겠습니다. 그럼 이 글이 여러분의 업무 시간을 줄여줄 수 있길 바라며..&lt;/p&gt;

&lt;p&gt;Enjoy your coding!&lt;/p&gt;

&lt;h2 id=&quot;prettier&quot;&gt;Prettier&lt;/h2&gt;

&lt;p&gt;프리티어(Prettier)는 코드 스타일을 정리해주는 도구입니다. ESLint와 함께 사용하면 좀 더 개인 취향에 맞는 코드 스타일로 전체 코드를 정리할 수 있습니다. VSCode(Visual Studio Code), Atom, Sublime 등 대중적인 텍스트 편집기에서 이미 플러그인 형태로 지원하고 있으며 VSCode에서는 아래와 같이 확장 플러그인으로 설치할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/productivity1/prettier.png&quot; alt=&quot;prettier on vscode&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prettier-적용하기&quot;&gt;Prettier 적용하기&lt;/h2&gt;

&lt;p&gt;프리티어를 사용하는 가장 간단한 방법은 앞에서 언급한 플러그인을 활용하는 방법입니다. VSCode 기준으로 아래의 내용을 사용자 설정 파일인 settings.json 파일에 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editor.formatOnSave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editor.formatOnType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 속성은 코드를 작성하고 저장 버튼을 눌렀을 때 자동으로 코드를 정리해줍니다. 아래와 같이 말이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/productivity1/prettier-demo.gif&quot; alt=&quot;prettier 동작 화면&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 플러그인으로 간단하게 코드를 정리할 수도 있지만 개인적으로는 ESLint와 결합하여 프로젝트 설정 파일로 관리하는 것을 추천합니다. 왜냐하면 팀원들이 모두 동일한 텍스트 편집기를 사용한다는 보장이 없으니까요 :)&lt;/p&gt;

&lt;p&gt;ESLint와 프리티어를 함께 적용하는 방법은 다다음 섹션을 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;eslint-소개&quot;&gt;ESLint 소개&lt;/h2&gt;

&lt;p&gt;린트(ESLint)는 잘못된 코드 스타일로 인해 에러가 나지 않게 코드 문법을 잡아주는 문법 검사기입니다. 문장 뒤에 자동으로 세미콜론, 콤마를 붙여주기도 하고 의미 없는 변수, API 사용에 대해 경고해주는 등 여러 문법 오류에 대해서 미리 알려주죠. 가급적 덜 에러가 나는 코드를 작성하면 자연스럽게 버그도 줄어들기 때문에 서비스 품질을 높이는데도 도움이 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;eslint와-prettier를-뷰-프로젝트에-적용하기&quot;&gt;ESLint와 Prettier를 뷰 프로젝트에 적용하기&lt;/h2&gt;

&lt;p&gt;일단 Vue CLI 3.x 버전에서는 프로젝트를 생성할 때 ESLint와 Prettier를 추가할 수 있습니다. 아래와 같이 말이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/productivity1/vue-eslint-project-init.gif&quot; alt=&quot;Vue CLI 3.x로 ESLint &amp;amp; Prettier 설정하기&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 이미 뷰 프로젝트를 생성하여 진행 중이신 분들은 아래와 같이 구성하시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;노드 패키지 매니저(NPM)로 린트 및 프리티어 라이브러리를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i eslint eslint-config-prettier eslint-plugin-prettier eslint-plugin-vue &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;프로젝트 루트 레벨에 린트 설정 파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc.js&lt;/code&gt;를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// .eslintrc.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 현재 eslintrc 파일을 기준으로 ESLint 규칙을 적용&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 추가적인 규칙들을 적용&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'eslint:recommended'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'plugin:vue/essential'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'prettier'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'plugin:prettier/recommended'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 코드 정리 플러그인 추가&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'prettier'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 사용자 편의 규칙 추가&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'prettier/prettier'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 아래 규칙들은 개인 선호에 따라 prettier 문법 적용&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// https://prettier.io/docs/en/options.html&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;singleQuote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;semi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;useTabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tabWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;trailingComma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'all'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;printWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;bracketSpacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;arrowParens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'avoid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'no-console'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'production'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'off'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각 주요 속성에 대해서 간략히 알아보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;: 현재 폴더 위치를 기준으로 하위의 파일에 린트를 적용합니다. 상위 폴더에 린트를 적용하지 않습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extends&lt;/code&gt;: 린트의 기본적인 문법 검사 규칙 이외에 추가적인 규칙들을 적용합니다. 이미 누군가에 의해 정해진 몇 개의 규칙을 추가한다고 보면 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt;: NPM으로 설치하여 사용할 수 있는 확장 규칙입니다. 대중적인 라이브러리와 결합하여 린트를 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rules&lt;/code&gt;: 린트를 실행할 때 사용자가 임의로 규칙을 추가하여 검사에서 제외 또는 추가하는 속성입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고로 린트 설정 파일 대신에 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;eslintConfig&lt;/code&gt; 속성을 사용해도 되지만 규칙 적용에 대한 우선순위는 린트 설정 파일이 더 높기 때문에 설정 파일을 따로 만들어서 사용하시는 것을 추천드립니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; NPM 설정 파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일에 아래의 NPM 커스텀 명령어를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint --ext .js,.vue src&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콘솔 창에서 위 명령어를 수행하면 src 폴더 밑의 js, vue 파일에 대해서 린트 검사를 수행합니다. 앞에서 린트 설정에 프리티어 내용을 추가했기 때문에 린트의 기본 규칙과 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;rules&lt;/code&gt;에 설정한 프리티어 규칙도 함께 적용되어 검사됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;마지막으로 비주얼 스튜디오 코드의 프리티어 플러그인을 비활성화하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.json&lt;/code&gt; 파일에 아래의 내용을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editor.formatOnSave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint.autoFixOnSave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint.alwaysShowStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint.validate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;autoFix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;autoFix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;javascriptreact&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;autoFix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프리티어 플러그인을 비활성화하지 않으면 VSCode의 Formatter 기능과 린트 검사 기능이 겹치게 되어 코드가 일관되게 정리되지 않습니다. 꼭 프리티어 플러그인을 사용하지 않음으로 설정하고 VSCode의 오른쪽 아래에 있는 Formatting을 X로 전환해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/productivity1/vscode-format-off.png&quot; alt=&quot;VSCode의 Formatting 기능 끄기&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vue-vscode-snippets&quot;&gt;Vue VSCode Snippets&lt;/h2&gt;

&lt;p&gt;마지막으로 살펴볼 도구는 Vue VSCode Snippets이라는 VSCode 확장 플러그인입니다. Vue의 코어팀 멤버이자 마이크로소프트웨어 개발자인 Sarah Drasner가 제작하였습니다. 개인적으로 자주 사용하는 스니펫은 vdata, vimport, vmethods 정도가 있습니다. 관심 있으신 분들은 아래 링크로 접속해서 살펴보세요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets&quot;&gt;Vue VSCode Snippets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/productivity1/vue-vscode-snippets.gif&quot; alt=&quot;Vue VSCode Snippets Demonstration&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;아무래도 이번 글은 개발 환경 구성과 관련된 글이다보니 따라서 적용하시는게 쉽진 않겠지만 그래도 구성하시는데 도움이 되었으면 좋겠습니다. 잘 구성하셔서 재밌고 편하게 코딩하세요! :)&lt;/p&gt;
</description>
          <pubDate>2019-05-02T08:25:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/vuejs/boost-productivity/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/vuejs/boost-productivity/</guid>
        </item>
      
    
      
        <item>
          <title>프런트엔드 개발자가 알아야하는 HTTP 프로토콜 Part 1</title>
          <link href="https://joshua1988.github.io/web-development/http-part1/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가며&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-프로토콜이란&quot; id=&quot;markdown-toc-http-프로토콜이란&quot;&gt;HTTP 프로토콜이란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-프로토콜-특징&quot; id=&quot;markdown-toc-http-프로토콜-특징&quot;&gt;HTTP 프로토콜 특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-request--http-response&quot; id=&quot;markdown-toc-http-request--http-response&quot;&gt;HTTP Request &amp;amp; HTTP Response&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#url&quot; id=&quot;markdown-toc-url&quot;&gt;URL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-요청-메서드&quot; id=&quot;markdown-toc-http-요청-메서드&quot;&gt;HTTP 요청 메서드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-상태-코드&quot; id=&quot;markdown-toc-http-상태-코드&quot;&gt;HTTP 상태 코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#다시-살펴보는-http-요청과-응답&quot; id=&quot;markdown-toc-다시-살펴보는-http-요청과-응답&quot;&gt;다시 살펴보는 HTTP 요청과 응답&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;최근 프런트엔드 개발 관련 수업을 진행할 일이 많아지면서 자연스럽게 비전공자 분들께 HTTP 프로토콜에 대해서 설명할 일이 많아졌습니다. 아무래도 데이터 통신이나 네트워크를 아직 살펴보지 못한 분들에게는 프로토콜이라는 용어부터 어려울 것 같은데요. 그래서 너무 개념적으로 깊지도 않게 딱 프런트엔드 개발할 때 알고 있으면 좋을만한 수준으로 HTTP 프로토콜을 정리해봤습니다.&lt;/p&gt;

&lt;p&gt;아무쪼록 이 글로 API 요청에 대해서 한 단계 더 감을 잡는 계기가 되었으면 좋겠네요.
재밌게 읽으시구요 :)&lt;/p&gt;

&lt;h2 id=&quot;http-프로토콜이란&quot;&gt;HTTP 프로토콜이란?&lt;/h2&gt;

&lt;p&gt;HTTP(Hypertext Transfer Protocol)는 웹을 개발하는 사람이라면 누구나 다 알아야 하는 통신 프로토콜입니다. 프로토콜이란 상호 간에 정의한 규칙을 의미하며 특정 기기 간에 데이터를 주고받기 위해 정의되었습니다. 통신 프로토콜을 쉽게 풀어보면 “나는 이렇게 줄 테니 넌 이렇게 받고 난 너가 준거 그렇게 받을께” 정도가 되겠네요 :)&lt;/p&gt;

&lt;p&gt;웹에서는 브라우저와 서버 간에 데이터를 주고받기 위한 방식으로 HTTP 프로토콜을 사용하고 있으며 따라서 프런트엔드 개발자라면 필수적으로 알아야 하는 지식이 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;http-프로토콜-특징&quot;&gt;HTTP 프로토콜 특징&lt;/h2&gt;

&lt;p&gt;HTTP 프로토콜은 상태가 없는(stateless) 프로토콜입니다. 여기서 상태가 없다라는 말은 데이터를 주고 받기 위한 각각의 데이터 요청이 서로 독립적으로 관리가 된다는 말입니다. 좀 더 쉽게 말해서 이전 데이터 요청과 다음 데이터 요청이 서로 관련이 없다는 말이죠.&lt;/p&gt;

&lt;p&gt;이러한 특징 덕택에 서버는 세션과 같은 별도의 추가 정보를 관리하지 않아도 되고, 다수의 요청 처리 및 서버의 부하를 줄일 수 있는 성능 상의 이점이 생깁니다.&lt;/p&gt;

&lt;p&gt;HTTP 프로토콜은 일반적으로 TCP/IP 통신 위에서 동작하며 기본 포트는 80번입니다.&lt;/p&gt;

&lt;h2 id=&quot;http-request--http-response&quot;&gt;HTTP Request &amp;amp; HTTP Response&lt;/h2&gt;

&lt;p&gt;HTTP 프로토콜로 데이터를 주고받기 위해서는 아래와 같이 요청(Request)을 보내고 응답(Response)을 받아야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/http/request-response.png&quot; alt=&quot;http request vs http response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 요청과 응답을 이해하기 위해서는 먼저 클라이언트(Client)와 서버(Server)를 이해해야 합니다.&lt;/p&gt;

&lt;p&gt;클라이언트란 요청을 보내는 쪽을 의미하며 일반적으로 웹 관점에서는 브라우저를 의미합니다. 서버란 요청을 받는 쪽을 의미하며 일반적으로 데이터를 보내주는 원격지의 컴퓨터를 의미합니다.&lt;/p&gt;

&lt;h2 id=&quot;url&quot;&gt;URL&lt;/h2&gt;

&lt;p&gt;URL(Uniform Resource Locators)은 개발자가 아니더라도 이미 우리에게 익숙한 용어입니다. 서버에 자원을 요청하기 위해 입력하는 영문 주소죠. 아무래도 숫자로 되어 있는 IP 주소보다는 훨씬 기억하기 쉽기 때문에 사용하는 것 같습니다.&lt;/p&gt;

&lt;p&gt;URL 구조는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/http/url-structure.png&quot; alt=&quot;url 구조&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-요청-메서드&quot;&gt;HTTP 요청 메서드&lt;/h2&gt;

&lt;p&gt;앞에서 살펴본 URL을 이용하면 서버에 특정 데이터를 요청할 수 있습니다. 여기서 요청하는 데이터에 특정 동작을 수행하고 싶으면 어떻게 해야 할까요? 바로 HTTP 요청 메서드(Http Request Methods)를 이용합니다.&lt;/p&gt;

&lt;p&gt;일반적으로 HTTP 요청 메서드는 HTTP Verbs라고도 불리우며 아래와 같이 주요 메서드를 갖고 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; : 존재하는 자원에 대한 &lt;strong&gt;요청&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; : 새로운 자원을 &lt;strong&gt;생성&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt; : 존재하는 자원에 대한 &lt;strong&gt;변경&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt; : 존재하는 자원에 대한 &lt;strong&gt;삭제&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이와 같이 데이터에 대한 조회, 생성, 변경, 삭제 동작을 HTTP 요청 메서드로 정의할 수 있습니다. 참고로 때에 따라서는 POST 메서드로 PUT, DELETE의 동작도 수행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;기타 요청 메서드는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HEAD : 서버 헤더 정보를 획득. GET과 비슷하나 Response Body를 반환하지 않음&lt;/li&gt;
  &lt;li&gt;OPTIONS : 서버 옵션들을 확인하기 위한 요청. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt;에서 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-상태-코드&quot;&gt;HTTP 상태 코드&lt;/h2&gt;

&lt;p&gt;앞에서 살펴본 URL과 요청 메서드가 클라이언트에서 설정해야 할 정보라면 HTTP 상태 코드(HTTP Status Code)는 서버에서 설정해주는 응답(Response) 정보입니다.&lt;/p&gt;

&lt;p&gt;프런트엔드 개발자 입장에서는 더욱이 중요한 이유가 이 상태 코드로 에러 처리를 할 수 있기 때문입니다. 간단한 예시를 들어 아래와 같이 사용자 목록을 받아오는 GET 메서드 요청을 날려보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://domain.com/users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 요청을 보내고 나면 서버에서 응답으로 오는 상태 코드가 크게 2개로 나뉩니다. 200(성공)과 404(실패)입니다. 따라서, 이 HTTP 상태 코드로 추가적인 로직을 구현할 수 있죠.&lt;/p&gt;

&lt;p&gt;주요 상태 코드는 200번대부터 500번대까지 다양하게 있지만 주요한 상태 코드만 몇 개 살펴보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;2xx---성공&quot;&gt;2xx - 성공&lt;/h3&gt;

&lt;p&gt;200번대의 상태 코드는 대부분 성공을 의미합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;200 : GET 요청에 대한 성공&lt;/li&gt;
  &lt;li&gt;204 : No Content. 성공했으나 응답 본문에 데이터가 없음&lt;/li&gt;
  &lt;li&gt;205 : Reset Content. 성공했으나 클라이언트의 화면을 새로 고침하도록 권고&lt;/li&gt;
  &lt;li&gt;206 : Partial Conent. 성공했으나 일부 범위의 데이터만 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3xx---리다이렉션&quot;&gt;3xx - 리다이렉션&lt;/h3&gt;

&lt;p&gt;300번대의 상태 코드는 대부분 클라이언트가 이전 주소로 데이터를 요청하여 서버에서 새 URL로 리다이렉트를 유도하는 경우입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;301 : Moved Permanently, 요청한 자원이 새 URL에 존재&lt;/li&gt;
  &lt;li&gt;303 : See Other, 요청한 자원이 임시 주소에 존재&lt;/li&gt;
  &lt;li&gt;304 : Not Modified, 요청한 자원이 변경되지 않았으므로 클라이언트에서 캐싱된 자원을 사용하도록 권고. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag&quot;&gt;ETag&lt;/a&gt;와 같은 정보를 활용하여 변경 여부를 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4xx---클라이언트-에러&quot;&gt;4xx - 클라이언트 에러&lt;/h3&gt;

&lt;p&gt;400번대 상태 코드는 대부분 클라이언트의 코드가 잘못된 경우입니다. 유효하지 않은 자원을 요청했거나 요청이나 권한이 잘못된 경우 발생합니다. 가장 익숙한 상태 코드는 404 코드입니다. 요청한 자원이 서버에 없다는 의미죠.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;400 : Bad Request, 잘못된 요청&lt;/li&gt;
  &lt;li&gt;401 : Unauthorized, 권한 없이 요청. Authorization 헤더가 잘못된 경우&lt;/li&gt;
  &lt;li&gt;403 : Forbidden, 서버에서 해당 자원에 대해 접근 금지&lt;/li&gt;
  &lt;li&gt;405 : Method Not Allowed, 허용되지 않은 요청 메서드&lt;/li&gt;
  &lt;li&gt;409 : Conflict, 최신 자원이 아닌데 업데이트하는 경우. ex) 파일 업로드 시 버전 충돌&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5xx---서버-에러&quot;&gt;5xx - 서버 에러&lt;/h3&gt;

&lt;p&gt;500번대 상태 코드는 서버 쪽에서 오류가 난 경우입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;501 : Not Implemented, 요청한 동작에 대해 서버가 수행할 수 없는 경우&lt;/li&gt;
  &lt;li&gt;503 : Service Unavailable, 서버가 과부하 또는 유지 보수로 내려간 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다시-살펴보는-http-요청과-응답&quot;&gt;다시 살펴보는 HTTP 요청과 응답&lt;/h2&gt;

&lt;p&gt;앞에서 배운 URL, 요청 메서드, 상태 코드를 조합하면 아래와 같은 구조가 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/http/http-full-structure.png&quot; alt=&quot;http 전체 구조&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 이 그림의 용어들이 어느 정도 눈에 들어오시나요? :)&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;오늘 다룬 HTTP 프로토콜은 용어에 대한 간단한 정의부터 프런트엔드 개발할 때 알고 있으면 좋은 특징까지 알아보았습니다. 다음 편은 좀 더 깊게 들어가서 HTTP 메시지 포맷과 캐싱, 보안 인증까지 알아보겠습니다. 그럼 그 때까지 재밌게 웹 개발하세요!&lt;/p&gt;
</description>
          <pubDate>2019-03-03T10:00:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/http-part1/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/http-part1/</guid>
        </item>
      
    
      
        <item>
          <title>자바스크립트 간단한 Test 코드 만들어보기</title>
          <link href="https://joshua1988.github.io/web-development/javascript/js-testing/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가며&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#간단한-자바스크립트-테스트-코드-만들어보기&quot; id=&quot;markdown-toc-간단한-자바스크립트-테스트-코드-만들어보기&quot;&gt;간단한 자바스크립트 테스트 코드 만들어보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#간단한-테스트-함수-만들어보기&quot; id=&quot;markdown-toc-간단한-테스트-함수-만들어보기&quot;&gt;간단한 테스트 함수 만들어보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#그럴싸한-테스트-함수-만들어보기&quot; id=&quot;markdown-toc-그럴싸한-테스트-함수-만들어보기&quot;&gt;그럴싸한 테스트 함수 만들어보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;!-- ## 테스팅이란? --&gt;

&lt;!-- ## 자바스크립트에서 테스트가 필요한 이유? --&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;이번 글에서는 자바스크립트로 간단하게 테스트 함수를 만들어보겠습니다. 평소와는 다르게 좀 더 간결하고 짧은 호흡으로 글과 코드를 작성했어요. 한번 빠르게 쭉 훑어보세요! :)&lt;/p&gt;

&lt;h2 id=&quot;간단한-자바스크립트-테스트-코드-만들어보기&quot;&gt;간단한 자바스크립트 테스트 코드 만들어보기&lt;/h2&gt;

&lt;p&gt;간단한 테스트 코드 작성을 위해서 아래와 같이 두 숫자의 합을 구하는 함수를 정의합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 이 함수의 결과를 확인하는 테스트 코드를 작성해보겠습니다.
함수의 결과 값을 result라 하고, 기대 값을 expected라고 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' is not equal to '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두 개의 합을 더한 결과(result)는 3이고 기대 값(expected)는 5이기 때문에 아래와 같은 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/javascript/js-testing/error1.png&quot; alt=&quot;error&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;간단한-테스트-함수-만들어보기&quot;&gt;간단한 테스트 함수 만들어보기&lt;/h2&gt;

&lt;p&gt;앞의 코드를 API 형태로 사용할 수 있게 함수로 변환해보겠습니다. 아래의 API 형태는 일반적인 테스트 라이브러리에서 흔하게 찾아볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 API를 사용하기 위해 앞에서 살펴본 테스트 코드를 expect()라는 함수에 포함합니다.
테스트 함수의 코드는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' is not equal to '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 함수를 아래와 같이 실행하면 아까와 같이 동일한 에러가 발생합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/javascript/js-testing/error1.png&quot; alt=&quot;error&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그럴싸한-테스트-함수-만들어보기&quot;&gt;그럴싸한 테스트 함수 만들어보기&lt;/h2&gt;

&lt;p&gt;앞에서 작성한 테스트 함수는 몇 번째 줄에서 오류가 났는지 추적하기가 어렵다는 단점이 있습니다.
또한, 각 테스트 함수의 역할이 구분되지 않죠. 이번엔 좀 더 의미 있는 테스트 함수를 작성해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;testCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' is not equal to '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드의 모양은 전형적인 테스트 라이브러리의 API 형태와 비슷합니다.
위 함수를 이용하면 다음과 같이 테스트를 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sum(1, 2) is not equal 5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞의 예제와 마찬가지로 동일한 오류를 발생시키지만 이번엔 좀 더 추적하기가 쉽습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/javascript/js-testing/error2.png&quot; alt=&quot;error2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;이처럼 자바스크립트 테스트 코드는 쉽게 작성할 수 있습니다. 다음 글에서는 실제 테스팅 라이브러리를 이용해 Unit 테스트를 작성하는 방법을 다뤄볼게요.
그럼 즐 코딩! :)&lt;/p&gt;
</description>
          <pubDate>2019-01-15T16:45:13+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/javascript/js-testing/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/javascript/js-testing/</guid>
        </item>
      
    
      
        <item>
          <title>Bye 2018 Welcome 2019</title>
          <link href="https://joshua1988.github.io/web-development/opinions/retrospect-in-2018/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#2018년을-돌아보며&quot; id=&quot;markdown-toc-2018년을-돌아보며&quot;&gt;2018년을 돌아보며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#키워드-중심의-2018년&quot; id=&quot;markdown-toc-키워드-중심의-2018년&quot;&gt;키워드 중심의 2018년&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#웹-서비스-총책임자&quot; id=&quot;markdown-toc-웹-서비스-총책임자&quot;&gt;웹 서비스 총책임자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#패스트캠퍼스-오프라인-강의&quot; id=&quot;markdown-toc-패스트캠퍼스-오프라인-강의&quot;&gt;패스트캠퍼스 오프라인 강의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#인프런-온라인-강의&quot; id=&quot;markdown-toc-인프런-온라인-강의&quot;&gt;인프런 온라인 강의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#내실-있는-개발자&quot; id=&quot;markdown-toc-내실-있는-개발자&quot;&gt;내실 있는 개발자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bye-2018-welcome-2019&quot; id=&quot;markdown-toc-bye-2018-welcome-2019&quot;&gt;Bye 2018 Welcome 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;2018년을-돌아보며&quot;&gt;2018년을 돌아보며&lt;/h2&gt;

&lt;p&gt;매년 맞이하는 마지막 날이지만 오늘은 특별하게 개인 수첩이 아닌 블로그에 글을 작성합니다. 회고는 늘 조용하게 혼자서 하는 스타일이라 오픈된 공간에 제 회고 글을 적는 게 뭔가 쑥쓰러웠거든요. 어렸을 때부터 늘 한 해의 마지막 날은 교회에서 가족들과 보냈기에 ‘회고’라는 용어보다는 송구영신 예배에서 한 해를 돌아보는 ‘자기 성찰’이라는 용어가 더 친숙하기도 해서 그런 거 같아요.&lt;/p&gt;

&lt;p&gt;결정적으로 얼마 전에 민준님의 회고 글을 읽으면서 정말 많은 부분을 공감하고 회고 글을 써봐야겠다는 결심을 했습니다. 다행히 한 해가 지나가기 전에 회고 글을 작성해서 참 다행입니다.&lt;/p&gt;

&lt;p&gt;그럼 오늘은 정말 다이나믹 했던 2018년을 돌아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;키워드-중심의-2018년&quot;&gt;키워드 중심의 2018년&lt;/h2&gt;

&lt;p&gt;시간이란 늘 지나고 보면 찰나의 순간으로 느껴지지만 올해는 이것저것 많이 하다 보니 더 찰나로 다가왔던 것 같습니다. 기억을 되짚어보며 1월부터 12월까지 키워드를 뽑아봤어요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1월 : Do it! Vue.js 입문 출판&lt;/li&gt;
  &lt;li&gt;2월 : 출판 기념 파티, Do it! Vue.js 입문 출판 기념 공개 세미나&lt;/li&gt;
  &lt;li&gt;3월 : 2018 Vue.js 미국 컨퍼런스 참가&lt;/li&gt;
  &lt;li&gt;4월 : 공개 소프트웨어 개발자 활동, 대마고 멘토링 시작, 인프런 Vue.js 중급 강좌&lt;/li&gt;
  &lt;li&gt;5월 : 경력직 면접, 마이크로소프트웨어 Vue.js 기술 기고&lt;/li&gt;
  &lt;li&gt;6월 : 경력직 면접&lt;/li&gt;
  &lt;li&gt;7월 : 인터넷 전문가 협회 출강, GDG 밋업 개최&lt;/li&gt;
  &lt;li&gt;8월 : 2018 KossCon 발표&lt;/li&gt;
  &lt;li&gt;9월 : 가족 여행, 인프런 PWA 기초 강좌&lt;/li&gt;
  &lt;li&gt;10월 : 발리 여행, 한양대 특강, 코스랩 중간 발표&lt;/li&gt;
  &lt;li&gt;11월 : 2018 W3C HTML5 컨퍼런스 발표&lt;/li&gt;
  &lt;li&gt;12월 : 부산 여행, 코스랩 최종 발표, 인프런 Vue.js 실전 강좌(Coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Default : 회사 프로젝트(평일), 패스트캠퍼스 오프라인 강의(주말)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이렇게 적고 보니 뭔가 많이 한 것 같은데 실제로 이번 한 해가 정신이 없었던 이유는 아무래도 회사 프로젝트 때문이 아닌가 싶습니다. 그래서 먼저 회사 프로젝트 얘기를 좀 해볼까 해요.&lt;/p&gt;

&lt;h2 id=&quot;웹-서비스-총책임자&quot;&gt;웹 서비스 총책임자&lt;/h2&gt;

&lt;p&gt;올해 하반기에 유난히 정신이 없고 심적으로 여유가 없었던 이유는 회사에서 진행하고 있는 프로젝트 때문이었던 것 같습니다. 기존에 하던 프레임워크 개발 업무에서 벗어나 웹 서비스를 제작하는 업무를 맡게 되었습니다. 같이 일하게 된 PM분이 웹 서비스를 저한테 통째로 맡기셨어요. SI 회사의 특성상 회사 내부적으로 인력 풀이 항상 여유롭지 않고, 프로젝트가 시작되면 그때그때 업체와 인력을 소싱하는게 허다합니다. 다행히 주변 친구의 도움으로 pxd라는 좋은 업체와 백엔드 개발자, 그리고 프런트엔드 개발 전문 업체와 함께 일하게 되었습니다.&lt;/p&gt;

&lt;p&gt;인력 소싱부터 기술 스택 선정까지 모두 제게 권한이 있었기 때문에 제가 좋아하는 Vue.js와 Spring으로 MSA(마이크로 서비스 아키텍처) 기반의 웹 서비스를 구축하기로 결정했습니다. 그리고 6개월이 지난 지금, 백엔드 개발자의 무단이탈, 상세 설계 없이 개발하는 프런트엔드 등의 수난 시대를 겪고 나니 힘들었지만 정말 그래도 많이 성장했다는 것을 느낍니다.&lt;/p&gt;

&lt;p&gt;특히 async &amp;amp; await 패턴이 자바스크립트 안티 패턴이다 라고 주장하는 백엔드 개발자와 함께 일하면서 백엔드 개발자와의 협업 방식에 대해서 많은 고민을 하게 되었던 것 같아요. 그리고 그 개발자분이 프로젝트에서 무단이탈하고 나서부터는 정말 프로젝트를 진행하기 위해 낮에는 프런트엔드 개발을 하고 밤에는 스프링 공부해서 새벽에 백엔드 코드를 작성했습니다. 그 모든 과정이 당시에는 힘들었지만 지금 와서 보니 제 성장에 큰 밑거름이 된 것 같습니다.&lt;/p&gt;

&lt;p&gt;무엇보다도 UI &amp;amp; UX, GUI, 퍼블리싱, 프런트엔드, 백엔드에 모두 직접 관여하면서 더 넓은 시야로 서비스를 바라보게 된 것 같습니다. 정말 운이 좋았던 게 프런트엔드 개발자로서 마음껏 UI, UX를 고민하고 그걸 디자인과 개발에 반영할 수 있었어요.&lt;/p&gt;

&lt;p&gt;아참 그리고 이 자리를 빌어 함께 멋진 서비스를 만들어 나가고 있는, 그리고 재밌게 개발하고 있는 프런트엔드 개발 전문 업체 펀랩 임직원 분들께 감사드립니다 :)&lt;/p&gt;

&lt;p&gt;2019년에는 이 프로젝트를 잘 마무리 해서 멋진 서비스를 런칭해야죠.&lt;/p&gt;

&lt;h2 id=&quot;패스트캠퍼스-오프라인-강의&quot;&gt;패스트캠퍼스 오프라인 강의&lt;/h2&gt;

&lt;p&gt;올해 회사 못지 않게 많은 시간을 할애 했던 부분이 바로 패스트캠퍼스 오프라인 강의입니다. 서두에도 언급했지만 같은 곳에서 강의하는 민준님의 회고 글을 보면서 많은 부분이 공감되었습니다. 교수법에 대한 고민, 그리고 학습자의 학습 효과 등 온라인 강의와 오프라인 강의를 모두 하고 있는 제게 항상 고민이 되는 부분이고, 어떻게 하면 더 짧은 시간 내에 더 많은 부분들을 효과적으로 전달할 수 있을까 고민하고 있습니다.&lt;/p&gt;

&lt;p&gt;처음 제가 프로그래밍 관련된 온라인 강의를 들었던게 2012년 1월이었던 것 같아요. 실리콘 밸리의 스타트업 면접을 보면서 CTO분이 과제를 내주셨고, 과제를 수행하기 위한 학습은 CodeSchool이라는 사이트로 하라고 안내해주셨습니다. 그때부터 온라인 강의를 듣기 시작했고, 단순 지식 전달형이 아닌 5~7분 사이의 짧은 설명 후 실습으로 이어지는 패턴이 너무나 재밌고 마음에 들었습니다. 그때부터 지금까지 아직도 많은 온라인 강의를 듣고 있구요. 저도 학습자의 입장에서 재밌고 효율적인 강좌를 만들기 위해 늘 고민하고 있습니다.&lt;/p&gt;

&lt;p&gt;패캠에서 강의한지 벌써 20개월이 됐습니다. 200명이 넘는 수강생분들을 만나고 가르치면서 저의 지식과 경험도 풍성해지고, 무엇보다도 수강생 분들의 입장에서 수업을 바라보고 교과 과정을 고민하게 된 것 같아요. 매 회차마다 새로운 분들이 오셔서 새로운 시각으로 질문을 해주시고 더 듣고 싶은 내용도 알려주십니다. 그런 내용들을 다음 회차에 보충하고 개선하면서 점점 더 많은 분들이 재밌어하는 강의가 되어가는 것 같아요.&lt;/p&gt;

&lt;p&gt;이 자리를 빌려 제 패스트캠퍼스 수업을 들어주신 모든 수강생 분들께 감사를 드립니다 :)&lt;/p&gt;

&lt;h2 id=&quot;인프런-온라인-강의&quot;&gt;인프런 온라인 강의&lt;/h2&gt;

&lt;p&gt;패캠 강의 얘기했는데 사실 또 강의라는 주제로 얘기를 하는 게 중복 같지만 그래도 오프라인 강의 못지않게 제게는 또 중요한 부분이 되어 버린 온라인 강의에 대해서 나누고 싶습니다. 처음에 온라인 강의를 시작하게 된 계기가 실은 오프라인 강좌 때문이었습니다. 꽤 비싼 금액과 소중한 시간을 들여서 오신 분들께 처음 목표한 부분만큼 지식을 다 나눠드리지 못해서 추가로라도 제공해드리고 싶어 인프런에 강의를 올리게 되었어요. 지금은 오프라인 수업을 들으시는 분들이 예,복습 용도로 온라인 강의를 활용하고 계셔서 정말 뿌듯합니다 :)&lt;/p&gt;

&lt;p&gt;평일, 주말에 오프라인 강의를 하고 있는 입장에서 온라인 강의가 주는 혜택은 정말 엄청난 것 같습니다. 강사와 학습자가 모두 비용, 시간적인 면에서 윈-윈을 하니까요. 물론 오프라인 수업보다는 집중도가 좀 떨어질 수 있는 단점이 존재하지만 집중력을 올려줄 수 있는 대화형(Interactive) 강의로 충분히 학습자의 흥미와 학습 효율을 높여줄 수 있다고 생각해요. 저도 회사에서 급하게 백엔드 개발을 해야 했을 때 백기선님 강의 보면서 정말 빠르게 기술을 습득하고 바로 프로젝트에 적용할 수 있었기 때문에 온라인 강의가 앞으로 우리나라 교육의 혁신과 진보를 앞당길 것이라는 믿음을 갖게 되었습니다.&lt;/p&gt;

&lt;p&gt;결국 온라인 강의는 사회적으로 교육의 사각지대에 있는 분들에게 평등한 교육 기회를 제공해주고 교육 비용을 감소시켜주기 때문에 개개인의 관심과 함께 국가적인 차원에서의 지원이 있었으면 좋겠습니다. 아 그리고 이 자리를 빌려서 인프런에 악플 다시는 분들이 많은데.. 신랄한 비판도 좋지만 가급적 강의를 준비해주시는 분들께 상처가 되는 언행보다는 격려의 메시지를 보내주셨으면 좋겠습니다.. 수업 올리는 건 꽤 고된 작업이에요.. :)&lt;/p&gt;

&lt;p&gt;끝으로 더 좋은 사회를 만들어나가는 인프런 이형주 대표님 화이팅입니다!&lt;/p&gt;

&lt;h2 id=&quot;내실-있는-개발자&quot;&gt;내실 있는 개발자&lt;/h2&gt;

&lt;p&gt;이미 민준님 언급을 한 2번 한 것 같은데 이렇게 또 언급하면 3번 하는 거네요.. 새해에는 민준님이랑 밥 한번 먹어야겠습니다 ㅋㅋ 민준님의 글에서 공감이 많이 갔던 부분이 하나 더 있었어요. ‘남들의 기대치와 다른 나의 모습’이라는 부분에 한 300% 공감합니다. 제가 4년 전에 처음 기술 강의를 시작했을 때도 그리고 올해 초에 출판을 하고 나서도 제가 강사니까 그리고 저자니까 잘 알겠지라고 생각하는 분들이 많은 것 같습니다. &lt;strong&gt;일단 저는 아직 잘하지 못합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‘하지만 그렇기 때문에 매일 더 열심히 배우고 있어요.’&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;얼마 전에 &lt;a href=&quot;https://blog.naver.com/miso0709/221408946847&quot;&gt;인프런에서 했던 인터뷰&lt;/a&gt;에서도 이렇게 얘기한 적이 있어요. 정말 잘하는 개발자는 늘 낮은 자세에서 열린 사고로 남의 지식을 수용한다고. 그리고 예전에 감명 깊게 읽었던 책의 글귀 중에 이런게 있었어요. “진정한 겸손이란 자기의 지식이 잘못되었음을 깨닫는 것” 엔지니어로서 항상 견지해야 할 점은 바로 세상에 진리는 없다는 사실입니다. 자신이 알고 있는 지식이 100% 완벽한 게 아니라 작은 오류의 가능성에 대해서 열어두고 같이 대화하면서 문제를 풀어 나가는 게 가장 중요한 자세인 것 같아요.&lt;/p&gt;

&lt;p&gt;이런 마음가짐을 가지면서도 저자라면, 강사라면 책임감과 사명감으로 더 정진해야 한다고 생각합니다. 적어도 저의 글과 말이 누군가에게는 처음 접하는 지식이 될 수 있기 때문입니다. 항상 남에게 지식을 공유할 때는 충분히 조사해보고, 검증해보고 그리고 많이 사용해보고 나서 전달해야 한다고 생각하기 때문에 저 역시 열심히 지식을 습득하고, 배우고, 구현하고, 체화하고 있어요.&lt;/p&gt;

&lt;p&gt;내년에는 올해보다 더 성장하고 더 많이 배우는 개발자가 되어야겠습니다. 우리 함께 성장해요! :)&lt;/p&gt;

&lt;h2 id=&quot;bye-2018-welcome-2019&quot;&gt;Bye 2018 Welcome 2019&lt;/h2&gt;

&lt;p&gt;기술 블로그에 처음으로 회고를 쓰다 보니 참 미묘한 감정이 드네요. 뭔가 맨 마지막에는 참고 링크를 걸어드려야 될 것 같은데.. ㅋㅋ 그리고 늘 수첩으로 돌아보던 한 해를 블로그 글로 돌아보니 참 신기하고 감회가 새롭습니다.&lt;/p&gt;

&lt;p&gt;2019년이 얼마 남지 않았네요. 다들 사랑하는 가족분들과 남은 시간 행복하게 보내세요. 저는 열심히 Vue.js 수업을 준비하고 있겠습니다.. :) 새해 복 많이 받으시구요!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“2018년에 품었던 치열함과 성장의 밑거름으로 2019년에는 더 치열하게”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;장기효 올림&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;※ 뷰 실전 인프런 온라인 강좌 오프닝 영상(2019년 1월 1주 개시 예정)&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FxVaXSVpyLQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
          <pubDate>2018-12-31T08:15:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/opinions/retrospect-in-2018/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/opinions/retrospect-in-2018/</guid>
        </item>
      
    
      
        <item>
          <title>Vue.js 입문자가 흔히 저지르는 문법 실수 총정리</title>
          <link href="https://joshua1988.github.io/web-development/vuejs/common-error-cases/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가며&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#첫-번째-에러-케이스---콧수염-괄호를-사용할-때&quot; id=&quot;markdown-toc-첫-번째-에러-케이스---콧수염-괄호를-사용할-때&quot;&gt;첫 번째 에러 케이스 - 콧수염 괄호를 사용할 때&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#두-번째-에러-케이스---컴포넌트를-등록할-때&quot; id=&quot;markdown-toc-두-번째-에러-케이스---컴포넌트를-등록할-때&quot;&gt;두 번째 에러 케이스 - 컴포넌트를 등록할 때&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#세-번째-에러-케이스---props-속성을-사용할-때&quot; id=&quot;markdown-toc-세-번째-에러-케이스---props-속성을-사용할-때&quot;&gt;세 번째 에러 케이스 - props 속성을 사용할 때&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#글보다-더-쉽게-배우는-온라인-강좌&quot; id=&quot;markdown-toc-글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#밀착-지도를-받을-수-있는-오프라인-강의&quot; id=&quot;markdown-toc-밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;얼마 전에 오프라인 강의에서 수강생 분들이 작성한 Vue.js 코드를 고쳐주었습니다. 뷰 문법이 이미 익숙한 개발자라면 잘못된 코드가 바로 보이겠지만, 아무래도 처음 시작하시는 분들에게는 나의 코드가 대체 어디가 잘못 되었길래 이런 오류가 나는걸까? 하고 궁금해 하실 것 같아요.&lt;/p&gt;

&lt;p&gt;그래서 준비했습니다. 에러 로그로 알아보는 나의 잘못된 코드!&lt;/p&gt;

&lt;p&gt;Vue.js로 처음 개발을 시작하시는 분들이라면 아래의 로그들을 자주 보시게 될 것 같네요. 그 때 마다 꼭 제가 언급드리는 부분을 되짚어 보세요! :)&lt;/p&gt;

&lt;p&gt;Enjoy your coding!&lt;/p&gt;

&lt;h2 id=&quot;첫-번째-에러-케이스---콧수염-괄호를-사용할-때&quot;&gt;첫 번째 에러 케이스 - 콧수염 괄호를 사용할 때&lt;/h2&gt;

&lt;p&gt;첫 번째 에러 케이스를 살펴보기 위해 간단한 Vue.js 코드를 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {{ message }}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello Vue.js!'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 message 속성의 값을 화면에 표시해주는 간단한 코드입니다. 위처럼 간단한 코드를 작성하다가 혹시 이런 에러 나신적 보신 적 있으신가요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/error-cases/error1.png&quot; alt=&quot;뷰에 선언되지 않은 데이터를 화면에 표시하려고 했을 때의 오류&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 로그의 핵심은 바로 아래 문장입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Property or method “meassage” is not defined on the instance but referenced during render&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 문장의 의미는 다음과 같습니다. “meassage라는 속성이 선언되지 않았는데 화면에 렌더링되려고 했습니다.” 데이터 속성 안에 선언한 변수를 화면에서 잘못 입력한 경우죠. 아래와 같이 말입니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {{ meassage }} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- message가 아니라 meassage로 입력하셨네요 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello Vue.js!'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정리해서 위와 같은 로그가 발생했을 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt; 속성과 HTML 태그의 콧수염 괄호 안에 선언한 변수 명이 같은지 확인해보세요!&lt;/p&gt;

&lt;h2 id=&quot;두-번째-에러-케이스---컴포넌트를-등록할-때&quot;&gt;두 번째 에러 케이스 - 컴포넌트를 등록할 때&lt;/h2&gt;

&lt;p&gt;두 번째 에러 케이스를 살펴보기 위해 아래와 같은 코드를 준비하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;h1&amp;gt;header&amp;lt;/h1&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'app-header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appHeader&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 뷰 컴포넌트를 등록하는 코드입니다. 컴포넌트를 등록하다가 아래와 같은 에러를 본 적 있으신가요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/error-cases/error2.png&quot; alt=&quot;등록되지 않은 컴포넌트를 표시하려고 할 때의 오류&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 로그의 핵심은 아래 문장입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt; app-haeder&amp;gt; - did you register the component correctly?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“컴포넌트를 제대로 등록하셨나요?” 라는 오류 메시지입니다. 이 때는 등록한 컴포넌트의 이름을 올바르게 컴포넌트 태그에 옮겨 작성했는지 확인하시면 됩니다. 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;app-header&lt;/code&gt;라고 등록해놓고 &lt;code class=&quot;highlighter-rouge&quot;&gt;app-haeder&lt;/code&gt;라고 작성하시면 안돼요! :)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;app-haeder&amp;gt;&amp;lt;/app-haeder&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 여기 철자가 틀렸습니다 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'app-header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appHeader&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;세-번째-에러-케이스---props-속성을-사용할-때&quot;&gt;세 번째 에러 케이스 - props 속성을 사용할 때&lt;/h2&gt;

&lt;p&gt;세 번째 에러 케이스를 위한 코드를 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;app-header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:propsdata=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/app-header&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'propsdata'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;h1&amp;gt;{{ propsdata }}&amp;lt;/h1&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'app-header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appHeader&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 컴포넌트를 하나 등록하고 props 속성을 하나 내려주는 코드입니다. props를 작성하시다가 아래와 같은 에러를 본 적이 있으신가요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/error-cases/error3.png&quot; alt=&quot;컴포넌트 태그 쪽에 불필요한 인덴팅을 주어 나는 오류&quot; /&gt;&lt;/p&gt;

&lt;p&gt;에러 로그가 좀 더 구체적이면 좋겠지만.. 여기서는 경험에서 나오는 의견을 드릴 수 밖에 없겠네요. 위와 같은 로그는 대부분 아래와 같이 &lt;strong&gt;컴포넌트 태그에 불필요한 띄어 쓰기(인덴팅)를 넣었을 때 발생&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;app-header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;propsdata =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/app-header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정리된 코드를 좋아해서 인덴팅을 여기 저기 넣으시는 분들이 있으실거에요. 자바스크립트 쪽에는 얼마든지 넣어주셔도 되지만 HTML 태그는 코드 간격을 띄었을 때 Vue.js 라이브러리에서 정상적으로 인식하지 못하는 일이 발생합니다. 따라서, HTML 태그 쪽에는 띄어 쓰기를 삼가주세요!&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;요즘 Vue.js로 서비스를 구축하는 곳들이 많아진 것 같습니다. 그만큼 더 많은 분들이 Vue.js를 시작하실 것 같은데요. 처음 배우실 때 오류 났다고 당황하지 마시고 조금 더 오류를 찬찬히 살펴보시길 추천드립니다. 그럼 더 재밌게 웹 개발하세요! :)&lt;/p&gt;

&lt;h2 id=&quot;글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/h2&gt;
&lt;p&gt;좀 더 친절하고 상세한 설명을 원하신다면 아래 강좌를 이용해보시는 것도 좋을 것 같아요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EA%B8%B0%EB%B3%B8/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vuejs-basic.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EC%A4%91%EA%B8%89/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-intermediate.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-js/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-advanced.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;인프런 온라인 강좌 : Vue.js 초급, Vue.js 중급, Vue.js 완벽 가이드 (좌측 부터)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/h2&gt;

&lt;p&gt;강남역 패스트캠퍼스에서 4월 말부터 6월 말까지 8주 동안 Vue.js 집중반을 운영합니다. 관심 있으신 분들은 아래 이미지를 클릭해주세요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.fastcampus.co.kr/dev_camp_wap/&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/dev_camp_wap.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;패스트캠퍼스 Vue로 구현하는 PWA 캠프 8주 과정(19.04.27 ~ 19.06.29)&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
          <pubDate>2018-12-09T08:25:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/vuejs/common-error-cases/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/vuejs/common-error-cases/</guid>
        </item>
      
    
      
        <item>
          <title>Vue.js 컴포넌트 재사용하기 - slot 편</title>
          <link href="https://joshua1988.github.io/web-development/vuejs/slots/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가며&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slot&quot; id=&quot;markdown-toc-slot&quot;&gt;Slot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#named-slot&quot; id=&quot;markdown-toc-named-slot&quot;&gt;Named Slot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#글보다-더-쉽게-배우는-온라인-강좌&quot; id=&quot;markdown-toc-글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#밀착-지도를-받을-수-있는-오프라인-강의&quot; id=&quot;markdown-toc-밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;안녕하세요. 오랜만에 블로그 글을 씁니다. 요즘 통 바빠서 블로그 관리를 못했네요. 안 그래도 얼마 전에 State of JS 2018을 보면서 아직도 전 세계의 많은 개발자들이 Vue.js에 많은 관심을 갖고 있다는 것을 깨달았습니다. 지금도 주변에 꽤 많은 분들이 Vue.js로 새롭게 웹 서비스를 구축하고 계시는 것 같아요.&lt;/p&gt;

&lt;p&gt;그래서 오늘은 실제로 서비스를 구현하고 계신 분들이 재미있어 할 만한 Vue.js 글을 적어보려고 합니다. 컴포넌트를 재 사용하는 방법에 대해서 시리즈로 연재해보려고 해요. 첫 번째 시리즈는 컴포넌트의 마크업을 확장하는 방법인 slot입니다.&lt;/p&gt;

&lt;p&gt;그럼 재밌게 보시고 재밌게 코딩하시는데 도움 되었으면 좋겠습니다 :) &lt;br /&gt;
Happy Coding!&lt;/p&gt;

&lt;h2 id=&quot;slot&quot;&gt;Slot&lt;/h2&gt;

&lt;p&gt;슬롯(slot)은 컴포넌트의 재사용성을 높여주는 기능입니다. 특정 컴포넌트에 등록된 하위 컴포넌트의 마크업을 확장하거나 재정의할 수 있습니다. 바로 코드로 살펴보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ButtonTab.vue --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tab panel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 탭 헤더 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 탭 본문 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Tab Contents
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 ButtonTab 컴포넌트의 코드입니다. 탭을 구현한다고 생각하고 탭 헤더와 본문을 구분하는 태그를 작성하였습니다. 여기서 탭 헤더에 들어갈 구체적인 태그를 정하지 않고 일단 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 태그로 빈 칸을 남겨놉니다. 만약 이 컴포넌트를 등록한 상위 컴포넌트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 태그 영역을 구현하지 않으면 해당 부분은 공백으로 표시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 태그의 위치에 주목하면서 ButtonTab 컴포넌트를 TabContainer 컴포넌트의 하위 컴포넌트로 등록합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TabContainer.vue --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;First Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Second Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Third Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ButtonTab&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TabContainer 컴포넌트에 ButtonTab 컴포넌트를 등록하고 ButtonTab 컴포넌트를 세 곳에 표시했습니다. 여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/code&gt; 컴포넌트 태그의 안에 각기 다른 헤더의 내용을 정의했습니다. 만약 ButtonTab 컴포넌트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 태그를 정의하지 않았다면 컴포넌트를 등록하는 시점에 마크업을 재정의할 수는 없었을 것입니다.&lt;/p&gt;

&lt;p&gt;이처럼 슬롯을 사용하면 컴포넌트의 특정 마크업 영역을 재정의하여 같은 컴포넌트를 각기 다르게 표현할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;named-slot&quot;&gt;Named Slot&lt;/h2&gt;

&lt;p&gt;위에서는 슬롯의 개념을 이해하기 위해 1개의 슬롯만 사용했습니다. 슬롯은 name 속성을 지정하여 여러 개 사용할 수도 있습니다. 좀 전 예제에 네임드 슬롯을 적용해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ButtonTab.vue --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tab panel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 탭 헤더 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;slot&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 탭 본문 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;slot&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TabContainer.vue --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;First Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Tab Contents #1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Second Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Tab Contents #2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Third Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Tab Contents #3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하위 컴포넌트에서 정의한 슬롯 태그 영역에 마크업을 재정의할 때 위와 같이 HTML 표준 태그를 사용하는 방법도 있지만 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 태그를 사용할 수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button-tab&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- slot 영역 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;First Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Tab Contents #1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button-tab&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;앞에서 배운 slot을 잘 활용하면 컴포넌트의 재 사용성을 극대화 할 수 있습니다. 다음 글에서는 컴포넌트 간의 결합력을 높이는 방법에 대해서 알아보겠습니다 :)&lt;/p&gt;

&lt;p&gt;※ 본 글은 &lt;a href=&quot;https://www.fastcampus.co.kr/dev_camp_wap/&quot;&gt;패스트캠퍼스 Vue로 구현하는 PWA 캠프&lt;/a&gt;의 수업 자료 일부를 발췌한 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/h2&gt;
&lt;p&gt;좀 더 친절하고 상세한 설명을 원하신다면 아래 강좌를 이용해보시는 것도 좋을 것 같아요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EA%B8%B0%EB%B3%B8/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vuejs-basic.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EC%A4%91%EA%B8%89/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-intermediate.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-js/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-advanced.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;인프런 온라인 강좌 : Vue.js 초급, Vue.js 중급, Vue.js 완벽 가이드 (좌측 부터)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/h2&gt;

&lt;p&gt;강남역 패스트캠퍼스에서 4월 말부터 6월 말까지 8주 동안 Vue.js 집중반을 운영합니다. 관심 있으신 분들은 아래 이미지를 클릭해주세요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.fastcampus.co.kr/dev_camp_wap/&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/dev_camp_wap.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;패스트캠퍼스 Vue로 구현하는 PWA 캠프 8주 과정(19.04.27 ~ 19.06.29)&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
          <pubDate>2018-11-21T13:25:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/vuejs/slots/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/vuejs/slots/</guid>
        </item>
      
    
      
        <item>
          <title>실무에서 사용하는 Vue.js 프로젝트 구조</title>
          <link href="https://joshua1988.github.io/web-development/vuejs/vue-structure/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#들어가며&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#뷰-cli로-생성한-기본-폴더-구조&quot; id=&quot;markdown-toc-뷰-cli로-생성한-기본-폴더-구조&quot;&gt;뷰 CLI로 생성한 기본 폴더 구조&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#기능-별로-구분한-폴더-구조&quot; id=&quot;markdown-toc-기능-별로-구분한-폴더-구조&quot;&gt;기능 별로 구분한 폴더 구조&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마무리&quot; id=&quot;markdown-toc-마무리&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#글보다-더-쉽게-배우는-온라인-강좌&quot; id=&quot;markdown-toc-글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#밀착-지도를-받을-수-있는-오프라인-강의&quot; id=&quot;markdown-toc-밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;뷰의 장점은 빠른 프로토 타이핑입니다.
뷰 CLI로 프로젝트를 생성하고 나면 npm으로 원하는 기능들을 빠르게 확장해 나갈 수 있습니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 복잡해진 프로젝트 폴더 구조를 효율적으로 관리하는 방법에 대해서 알아보겠습니다.
철저히 저의 개인적인 의견이 반영된 폴더 구조이기 때문에 참고하시고 필요한 것만 취해가시면 될 것 같습니다 :)&lt;/p&gt;

&lt;h2 id=&quot;뷰-cli로-생성한-기본-폴더-구조&quot;&gt;뷰 CLI로 생성한 기본 폴더 구조&lt;/h2&gt;

&lt;p&gt;뷰 CLI 2.9 버전을 이용하여 webpack-simple 프로젝트를 아래와 같이 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue init webpack-simple folder-structure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트를 생성하고 나면 기본적인 폴더 구조는 아래와 같이 구성됩니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├─ README.md
├─ index.html
├─ webpack.config.js
├─ package.json
└─ src
   ├─ main.js
   ├─ App.vue
   └─ assets
      └─ logo.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 프로젝트 구조에서는 일반적으로 src 폴더 밑에 폴더들을 추가해나갑니다.
자세한 내용은 아래에서 확인하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;기능-별로-구분한-폴더-구조&quot;&gt;기능 별로 구분한 폴더 구조&lt;/h2&gt;

&lt;p&gt;실무에서 개발할 때 필수로 사용되는 라우터, 상태 관리, 필터, 다국어, 플러그인 등을 이용하면 아래와 같이 폴더를 구분할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├─ README.md
├─ index.html
├─ webpack.config.js
├─ package.json
└─ src
   ├─ main.js
   ├─ App.vue
   ├─ components        컴포넌트
   │  ├─ common
   │  └─ ...
   ├─ routes            라우터
   │  ├─ index.js
   │  └─ routes.js
   ├─ views             라우터 페이지
   │  ├─ MainView.vue
   │  └─ ...
   ├─ store             상태 관리
   │  ├─ auth
   │  ├─ index.js
   │  └─ ...
   ├─ api               api 함수
   │  ├─ index.js
   │  ├─ users.js
   │  └─ ...
   ├─ utils             필터 등의 유틸리티 함수
   │  ├─ filters.js
   │  ├─ bus.js
   │  └─ ...
   ├─ mixins            믹스인
   │  ├─ index.js
   │  └─ ...
   ├─ plugins           플러그인
   │  ├─ ChartPlugin.js
   │  └─ ...
   ├─ translations      다국어
   │  ├─ index.js
   │  ├─ en.json
   │  └─ ...
   ├─ images            이미지
   ├─ fonts             폰트
   └─ assets            기타 자원
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 프로젝트를 구성하기 위해서는 기본적으로 ES6의 Import &amp;amp; Export 기능을 정확히 이해하고 계셔야 합니다.
그리고 웹팩의 모듈 로딩에 대해서도 이해하고 계시면 다른 파일의 기능들을 좀 더 수월하게 로딩하실 수 있습니다.
마지막으로, VSCode의 파일 아이콘 테마를 잘 활용하시면 더 수려하고 가독성 높은 폴더 구조를 만드실 수 있습니다 :)&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/folder-structure.png&quot; /&gt;
	&lt;figcaption&gt;VSCode에서 확인한 프로젝트 구조&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;각 폴더의 예시 코드도 함께 올리고 싶으나 글이 너무 길어질 것 같아 나중에 기회가 되면 오픈소스로 공개하려고 합니다.
혹시 폴더 구조와 관련하여 더 괜찮은 의견이 있으시면 아래에 편하게 댓글로 남겨주세요 :)&lt;/p&gt;

&lt;p&gt;그럼 오늘도 즐겁게 코딩하시기 바랍니다!
&lt;a href=&quot;https://www.fastcampus.co.kr/dev_camp_vue&quot;&gt;※이미지 출처: 패스트 캠퍼스 Vue.js 강의&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/h2&gt;
&lt;p&gt;좀 더 친절하고 상세한 설명을 원하신다면 아래 강좌를 이용해보시는 것도 좋을 것 같아요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EA%B8%B0%EB%B3%B8/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vuejs-basic.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EC%A4%91%EA%B8%89/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-intermediate.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-js/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-advanced.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;인프런 온라인 강좌 : Vue.js 초급, Vue.js 중급, Vue.js 완벽 가이드 (좌측 부터)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/h2&gt;

&lt;p&gt;강남역 패스트캠퍼스에서 4월 말부터 6월 말까지 8주 동안 Vue.js 집중반을 운영합니다. 관심 있으신 분들은 아래 이미지를 클릭해주세요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.fastcampus.co.kr/dev_camp_wap/&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/dev_camp_wap.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;패스트캠퍼스 Vue로 구현하는 PWA 캠프 8주 과정(19.04.27 ~ 19.06.29)&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
          <pubDate>2018-08-15T09:54:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/vuejs/vue-structure/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/vuejs/vue-structure/</guid>
        </item>
      
    
      
        <item>
          <title>야생화(cover) - 박효신</title>
          <link href="https://joshua1988.github.io/music/wild-flower/"/>
          <description>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/EsGTCThqq9k&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;하얗게 피어난 얼음꽃 하나가&lt;br /&gt;
달가운 바람에 얼굴을 내밀어&lt;br /&gt;
아무 말 못했던 이름도 몰랐던&lt;br /&gt;
지나간 날들에 눈물이 흘러&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;차가운 바람에 숨어 있다&lt;br /&gt;
한줄기 햇살에 몸 녹이다&lt;br /&gt;
그렇게 너는 또 한번 내게 온다&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;좋았던 기억만&lt;br /&gt;
그리운 마음만&lt;br /&gt;
니가 떠나간 그 길 위에&lt;br /&gt;
이렇게 남아 서 있다&lt;br /&gt;
잊혀질 만큼만&lt;br /&gt;
괜찮을 만큼만&lt;br /&gt;
눈물 머금고 기다린 떨림 끝에&lt;br /&gt;
다시 나를 피우리라&lt;/p&gt;
</description>
          <pubDate>2018-08-02T12:05:32+00:00</pubDate>
          <link>https://joshua1988.github.io/music/wild-flower/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/music/wild-flower/</guid>
        </item>
      
    
      
        <item>
          <title>2018 Google I/O PWA 세션 다시 보기</title>
          <link href="https://joshua1988.github.io/web-development/pwa/io-2018-pwa/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#프로그레시브-웹-앱이란&quot; id=&quot;markdown-toc-프로그레시브-웹-앱이란&quot;&gt;프로그레시브 웹 앱이란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fire-117--546&quot; id=&quot;markdown-toc-fire-117--546&quot;&gt;FIRE (1:17 ~ 5:46)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#브라우저별-pwa-기능-지원-여부-548--645&quot; id=&quot;markdown-toc-브라우저별-pwa-기능-지원-여부-548--645&quot;&gt;브라우저별 PWA 기능 지원 여부 (5:48 ~ 6:45)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스타벅스-pwa-데모-711--1036&quot; id=&quot;markdown-toc-스타벅스-pwa-데모-711--1036&quot;&gt;스타벅스 PWA 데모 (7:11 ~ 10:36)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스타벅스-pwa에-적용된-fire-1117--1812&quot; id=&quot;markdown-toc-스타벅스-pwa에-적용된-fire-1117--1812&quot;&gt;스타벅스 PWA에 적용된 FIRE (11:17 ~ 18:12)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwa가-적용된-구글-제품들-1830--2004&quot; id=&quot;markdown-toc-pwa가-적용된-구글-제품들-1830--2004&quot;&gt;PWA가 적용된 구글 제품들 (18:30 ~ 20:04)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#google-maps-시연-2150--2301&quot; id=&quot;markdown-toc-google-maps-시연-2150--2301&quot;&gt;Google Maps 시연 (21:50 ~ 23:01)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mobile과-데스크톱-사용-통계-자료-2756--2835&quot; id=&quot;markdown-toc-mobile과-데스크톱-사용-통계-자료-2756--2835&quot;&gt;Mobile과 데스크톱 사용 통계 자료 (27:56 ~ 28:35)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwa-데스크톱의-필요성-2837--3021&quot; id=&quot;markdown-toc-pwa-데스크톱의-필요성-2837--3021&quot;&gt;PWA 데스크톱의 필요성 (28:37 ~ 30:21)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwa-데스크톱---spotify-시연-3037--3208&quot; id=&quot;markdown-toc-pwa-데스크톱---spotify-시연-3037--3208&quot;&gt;PWA 데스크톱 - Spotify 시연 (30:37 ~ 32:08)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwa-최종-정리-3934--4024&quot; id=&quot;markdown-toc-pwa-최종-정리-3934--4024&quot;&gt;PWA 최종 정리 (39:34 ~ 40:24)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2018-google-io-웹-관련-비디오-목록&quot; id=&quot;markdown-toc-2018-google-io-웹-관련-비디오-목록&quot;&gt;2018 Google I/O 웹 관련 비디오 목록&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pwa-온라인-강좌&quot; id=&quot;markdown-toc-pwa-온라인-강좌&quot;&gt;PWA 온라인 강좌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;프로그레시브-웹-앱이란&quot;&gt;프로그레시브 웹 앱이란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;모바일 앱과 같은 경험을 주는 최신 웹 앱&lt;/li&gt;
  &lt;li&gt;앱 아이콘, 앱 아이콘 설치 배너, 모바일 푸시, 오프라인 경험을 제공&lt;/li&gt;
  &lt;li&gt;HTML, CSS, JS로 모바일 앱과 같은 웹 앱을 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;“높은 사용자 경험을 제공하기 위한 웹 앱의 진화”&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;fire-117--546&quot;&gt;FIRE (1:17 ~ 5:46)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=61&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;F&lt;/strong&gt;ast : Load fast &amp;amp; Feel fast&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;ntegrated : Feel natural to the device&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;eliable : Always work in the poor connection. 2G = 60% worldwide&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;ngaging : searchable, linkable, sharable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브라우저별-pwa-기능-지원-여부-548--645&quot;&gt;브라우저별 PWA 기능 지원 여부 (5:48 ~ 6:45)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=348&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 워커는 높은 사용자 경험을 제공하기 위한 기술&lt;/li&gt;
  &lt;li&gt;모든 현대 브라우저에서 지원하며 지난 3월부터 Safari도 지원&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저별 PWA 기능 지원 여부 (6:20)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Add to Home Screen (Edge, Safari 베타)&lt;/li&gt;
      &lt;li&gt;Web / Mobile Push (Safari 베타)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스타벅스-pwa-데모-711--1036&quot;&gt;스타벅스 PWA 데모 (7:11 ~ 10:36)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=431&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;오프라인 경험 : 결제할 금액을 미리 캐싱해놔서 매장에서 즉시 결제 가능 (9:30)&lt;/li&gt;
  &lt;li&gt;적용 기술 : Add to Homescreen, Launch Image, Location, Offline&lt;/li&gt;
  &lt;li&gt;효과 : 웹 사용자 12% 상승, 데스크톱에서도 주문 &amp;amp; 결제 가능 (11:16)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스타벅스-pwa에-적용된-fire-1117--1812&quot;&gt;스타벅스 PWA에 적용된 FIRE (11:17 ~ 18:12)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=677&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Fast&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사이트 로딩이 3초가 넘게 걸리면 사용자의 절반을 잃음 (11:33)&lt;/li&gt;
  &lt;li&gt;Placeholder Content 사용 (11:42)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Integrated&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add to Home Screen (12:52)&lt;/li&gt;
  &lt;li&gt;Chrome creates APK for Android (13:08)&lt;/li&gt;
  &lt;li&gt;앱 설치 배너가 뜨는 조건 : 미설치, 30초 간 방문 (13:47)&lt;/li&gt;
  &lt;li&gt;크롬 68부터 개발자가 앱 설치 이벤트를 직접 추가 (15:43)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reliable&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Precaching : 필요한 컨텐츠는 미리 캐싱 (16:07)&lt;/li&gt;
  &lt;li&gt;Runtime Caching : 추가적인 내용을 캐싱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Engaging&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;적절한 위치의 뒤로가기 버튼 (17:24)&lt;/li&gt;
  &lt;li&gt;애니메이션과 메시지 팝업 (17:36)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwa가-적용된-구글-제품들-1830--2004&quot;&gt;PWA가 적용된 구글 제품들 (18:30 ~ 20:04)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=1110&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;Google Search : 오프라인 검색 후 온라인에서 표시 (18:40)&lt;/li&gt;
  &lt;li&gt;Bulletin : 네이티브 모바일 앱 느낌 (19:08)&lt;/li&gt;
  &lt;li&gt;Google Maps : 저사양 기기와 저속 네트워크 대상의 성능 튜닝 -&amp;gt; 20% 페이지 로딩 속도 향상 (19:52)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;google-maps-시연-2150--2301&quot;&gt;Google Maps 시연 (21:50 ~ 23:01)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=1311&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;서비스워커 + IndexedDB로 캐싱 (22:40)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mobile과-데스크톱-사용-통계-자료-2756--2835&quot;&gt;Mobile과 데스크톱 사용 통계 자료 (27:56 ~ 28:35)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=1675&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;모바일과 데스크톱 모두 성장&lt;/li&gt;
  &lt;li&gt;시간대별 기기 사용량 역시 다양&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwa-데스크톱의-필요성-2837--3021&quot;&gt;PWA 데스크톱의 필요성 (28:37 ~ 30:21)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=1717&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;슬랙, 구글 독스, Spotify&lt;/li&gt;
  &lt;li&gt;일렉트론과 같은 데스크톱 개발 프레임워크의 문제점 -&amp;gt; 불필요한 렌더링 스택 문제&lt;/li&gt;
  &lt;li&gt;브라우저가 있는데 왜 웹 화면을 한번 더 감싸야 하는가?&lt;/li&gt;
  &lt;li&gt;윈도우 사용자는 MS 앱스토어에서 PWA 데스크톱 앱을 다운 받을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwa-데스크톱---spotify-시연-3037--3208&quot;&gt;PWA 데스크톱 - Spotify 시연 (30:37 ~ 32:08)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=1835&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;pwa-최종-정리-3934--4024&quot;&gt;PWA 최종 정리 (39:34 ~ 40:24)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NITk4kXMQDw?t=2373&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;웹 앱을 모바일 앱과 데스크톱 앱으로 변환시키는 PWA&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2018-google-io-웹-관련-비디오-목록&quot;&gt;2018 Google I/O 웹 관련 비디오 목록&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=we3lLo-UFtk&amp;amp;index=89&amp;amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y&amp;amp;t=0s&quot;&gt;PWA Starter Kit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mIWCLOftfRw&amp;amp;index=60&amp;amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y&amp;amp;t=0s&quot;&gt;Build the future of the web with modern javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BnYq7JapeDA&amp;amp;index=72&amp;amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y&amp;amp;t=0s&quot;&gt;Build the future of the web with Web Assembly and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7_2CJs_VZk4&amp;amp;index=75&amp;amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y&amp;amp;t=0s&quot;&gt;Build the blazing fast web site withs AMP and Firebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.google.com/io/recap/&quot;&gt;2018 Google I/O video list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwa-온라인-강좌&quot;&gt;PWA 온라인 강좌&lt;/h2&gt;
&lt;p&gt;프로그레시브 웹 앱 제작에 관심 있으시다면 아래의 온라인 강좌를 이용해보시는 것도 좋을 것 같아요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/pwa/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/pwa.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;인프런 온라인 강좌 : PWA 시작하기&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
          <pubDate>2018-07-23T10:14:13+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/pwa/io-2018-pwa/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/pwa/io-2018-pwa/</guid>
        </item>
      
    
      
        <item>
          <title>Vue.js 개발자를 위한 ES6 입문서(e북) 안내</title>
          <link href="https://joshua1988.github.io/web-development/vuejs/es6-for-vuejs-beginners/"/>
          <description>&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#안내&quot; id=&quot;markdown-toc-안내&quot;&gt;안내&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#책-목차-구성&quot; id=&quot;markdown-toc-책-목차-구성&quot;&gt;책 목차 구성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#글보다-더-쉽게-배우는-온라인-강좌&quot; id=&quot;markdown-toc-글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#밀착-지도를-받을-수-있는-오프라인-강의&quot; id=&quot;markdown-toc-밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;안내&quot;&gt;안내&lt;/h2&gt;

&lt;p&gt;얼마 전 &lt;a href=&quot;https://vuepress.vuejs.org/&quot;&gt;VuePress&lt;/a&gt;라는 Vue.js 기반 사이트 제작 도구가 나왔습니다. 기술 문서용으로 적합하다고 해서 한번 살펴보다가 예전부터 생각하고 있었던 ES6 온라인 북을 제작해보았습니다. ES6는 블로그에 주제 별로 연재하는 것보단 더 검색하기 편한 기술 문서 형식으로 한 번에 보시는 게 편할 것 같더라구요.&lt;/p&gt;

&lt;p&gt;이번 내용은 기존 Do it! Vue.js 입문 책에서 다룬 ES6 내용보다 좀 더 자세하고 추가적으로 알고 있으면 도움 될만한 개념들을 요약했습니다. 이제 막 Vue.js에 재미 붙이신 입문자분들이 보시면 딱 좋을 것 같네요 :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/&quot;&gt;Vue.js 개발자를 위한 ES6 입문서 바로가기(클릭)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그럼 많은 도움 되시길 바라며.. 오늘도 재밌게 코딩하세요! :)&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/es6-vue-book.png&quot; /&gt;
	&lt;figcaption&gt;Vue.js 개발자를 위한 ES6 전자책 메인 페이지&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;책-목차-구성&quot;&gt;책 목차 구성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/const-let.html&quot;&gt;const &amp;amp; let&lt;/a&gt; : 새로운 변수 선언 방식&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/fat-arrow.html&quot;&gt;화살표 함수&lt;/a&gt; : 함수를 더 편하게 정의하는 방법&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/enhanced-object-literals.html&quot;&gt;향상된 객체 리터럴&lt;/a&gt; : 객체를 더 편하게 정의하는 방법&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/spread-operator.html&quot;&gt;펼침 연산자&lt;/a&gt; : 인자를 편하게 넘기는 방법&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/template-literal.html&quot;&gt;템플릿 리터럴&lt;/a&gt; : 문자열을 편하게 정의하는 방법&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/destructuring.html&quot;&gt;구조 분해 문법&lt;/a&gt; : 객체, 인자를 편하게 정의하고 넘기는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://joshua1988.github.io/es6-online-book/&quot;&gt;Vue.js 개발자를 위한 ES6 입문서(무료)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuepress.vuejs.org/&quot;&gt;VuePress 공식 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;글보다-더-쉽게-배우는-온라인-강좌&quot;&gt;글보다 더 쉽게 배우는 온라인 강좌&lt;/h2&gt;
&lt;p&gt;좀 더 친절하고 상세한 설명을 원하신다면 아래 강좌를 이용해보시는 것도 좋을 것 같아요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EA%B8%B0%EB%B3%B8/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vuejs-basic.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-pwa-vue-js-%EC%A4%91%EA%B8%89/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-intermediate.png&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://www.inflearn.com/course/vue-js/?utm_source=blog&amp;amp;utm_medium=githubio&amp;amp;utm_campaign=captianpangyo&amp;amp;utm_term=banner&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/inflearn/vue-advanced.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;인프런 온라인 강좌 : Vue.js 초급, Vue.js 중급, Vue.js 완벽 가이드 (좌측 부터)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;밀착-지도를-받을-수-있는-오프라인-강의&quot;&gt;밀착 지도를 받을 수 있는 오프라인 강의&lt;/h2&gt;

&lt;p&gt;강남역 패스트캠퍼스에서 4월 말부터 6월 말까지 8주 동안 Vue.js 집중반을 운영합니다. 관심 있으신 분들은 아래 이미지를 클릭해주세요 :)&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://www.fastcampus.co.kr/dev_camp_wap/&quot;&gt;&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/dev_camp_wap.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;패스트캠퍼스 Vue로 구현하는 PWA 캠프 8주 과정(19.04.27 ~ 19.06.29)&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
          <pubDate>2018-06-18T09:44:32+00:00</pubDate>
          <link>https://joshua1988.github.io/web-development/vuejs/es6-for-vuejs-beginners/</link>
          <guid isPermaLink="true">https://joshua1988.github.io/web-development/vuejs/es6-for-vuejs-beginners/</guid>
        </item>
      
    
  </channel>
</rss>
