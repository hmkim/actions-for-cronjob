<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 서지형 on Medium]]></title>
        <description><![CDATA[Stories by 서지형 on Medium]]></description>
        <link>https://medium.com/@jee0645?source=rss-9b223908ded------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*dWi_42-OPvCEt5ry.</url>
            <title>Stories by 서지형 on Medium</title>
            <link>https://medium.com/@jee0645?source=rss-9b223908ded------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 10:35:07 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@jee0645" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Boto3를 이용한 DynamoDB query]]></title>
            <link>https://medium.com/jhseo/boto3%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-dynamodb-query-d96f3b441f76?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/d96f3b441f76</guid>
            <category><![CDATA[boto3]]></category>
            <category><![CDATA[amazon]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[sdk]]></category>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Thu, 05 Jul 2018 05:26:26 GMT</pubDate>
            <atom:updated>2018-07-05T05:26:26.721Z</atom:updated>
            <content:encoded><![CDATA[<h4>intro</h4><p>Boto3는 <a href="https://aws.amazon.com/ko/sdk-for-python/">Python용 AWS SDK</a> 이다. 현재 이 SDK를 이용하여 여러 개발을 하고 있는데, 그 중에서 DynamoDB와 관련된 여러 예제를 소개하고자 한다.</p><h4>boto3 install</h4><pre>pip install boto3</pre><h4>Example</h4><h4>Insert</h4><pre>import boto3<br><br>dynamodb = boto3.resource(&#39;dynamodb&#39;, region_name=&#39;ap-northeast-2&#39;)<br><br>dynamodb = boto3.resource(&#39;dynamodb&#39;)<br>table = dynamodb.Table(&#39;users01&#39;)<br><br>table.put_item(<br>   Item={<br>		&#39;username&#39;: &#39;ruanb&#39;,<br>		&#39;first_name&#39;: &#39;ruan&#39;,<br>		&#39;last_name&#39;: &#39;bekker&#39;,<br>		&#39;age&#39;: 30,<br>		&#39;account_type&#39;: &#39;administrator&#39;,<br>	}<br>)</pre><h4>Select</h4><pre>import boto3<br>from boto3.dynamodb.conditions import Key<br>dynamodb = boto3.resource(&#39;dynamodb&#39;, region_name=&#39;ap-northeast-2&#39;)<br>table = dynamodb.Table(&#39;table_name&#39;)<br>key = &quot;key_name&quot;<br>response = table.query (KeyConditionExpression=Key(&#39;key&#39;).eq(key) &amp; Key(&#39;dt&#39;).between(&#39;2018-07-02&#39;, &#39;2018-07-03&#39;))</pre><h4>Delete</h4><pre>import boto3<br>dynamodb = boto3.resource(&#39;dynamodb&#39;)<br>table = dynamodb.Table(&#39;staff&#39;)<br><br>table.delete_item(<br>	Key={<br>		&#39;username&#39;: &#39;ruanb&#39;,<br>		&#39;last_name&#39;: &#39;bekker&#39;<br>	}<br>)</pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d96f3b441f76" width="1" height="1"><hr><p><a href="https://medium.com/jhseo/boto3%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-dynamodb-query-d96f3b441f76">Boto3를 이용한 DynamoDB query</a> was originally published in <a href="https://medium.com/jhseo">JHseo</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Asynchronous execution with AWS lambda]]></title>
            <link>https://medium.com/jhseo/asynchronous-execution-with-aws-lambda-9d03accdc272?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/9d03accdc272</guid>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[aws-lambda]]></category>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Fri, 22 Jun 2018 08:04:33 GMT</pubDate>
            <atom:updated>2018-06-22T08:04:33.854Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*IJil099AqZ6A_a9USBngsA.png" /></figure><h4>AWS Lambda 특징</h4><p>AWS Lambda에는 여러가지 특징이 있습니다.</p><ol><li>사용한 만큼만 요금이 부과됩니다.(100ms 당 요금이 부과된다.)</li><li>서버 관리가 불필요합니다..</li><li>각 트리거에 대한 응답으로 코드를 실행하여 애플리케이션을 자동으로 확장하거나 축소가 가능합니다.</li></ol><p>또한 아래와 같은 일들이 가능합니다.</p><h4>데이터 처리</h4><h4>실시간 파일 처리</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*C8HtywiHa5uQZLKe_YuPwQ.png" /></figure><p>Amazon S3를 사용하여 업로드하는 즉시 데이터를 처리하도록 AWS Lambda를 트리거할 수 있습니다. 예를 들어, Lambda를 사용하여 실시간으로 이미지를 썸네일하고, 동영상을 트랜스코딩하고, 파일을 인덱싱하고, 로그를 처리하고, 콘텐츠를 검증하고, 데이터를 수집 및 필터링할 수 있습니다.</p><h4>실시간 스트림 처리</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*DPe3xOPsb1nwKb95t-DmOw.png" /></figure><p>AWS Lambda 및 Amazon Kinesis를 사용하여 애플리케이션 활동 추적, 트랜잭션 주문 처리, 클릭 스트림 분석, 데이터 정리, 지표 생성, 로그 필터링, 인덱싱, 소셜 미디어 분석, IoT 디바이스 데이터 텔레메트리 및 측정을 위한 실시간 스트리밍 데이터를 처리할 수 있습니다.</p><h4>서버리스 웹앱</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*IRedMA_X4uxTtIpU3Kmtow.png" /></figure><p>AWS Lambda를 다른 AWS 서비스와 결합하면, 확장성, 백업 또는 여러 데이터 센터 중복에 필요한 별도의 관리 작업 없이 개발자가 자동으로 확장 및 축소되고 여러 데이터 센터에 걸쳐 가용성이 높은 구성에서 실행되는 강력한 웹 애플리케이션을 구축할 수 있습니다.</p><h4>하지만 timeout..</h4><p>이번에 저는 데이터 수집 및 처리 과정에서 lambda를 많이 사용하였는데요.</p><p>사용을 하다 보니 여러 이슈가 있었지만, 가장 힘들었던 점이 timeout을 고려해야 한다는 점이였습니다.</p><p>lambda에서 최대 timeout은 5분입니다. 한 lambda의 작업이 <strong>5분</strong> 안에는 이루어 져야 한다는 점이죠. 그래서 기존 코드나 script를 그대로 lambda에 옮겨 놓으면 timeout이 발생할 수 있습니다. (제가 이번에 그랬죠..)</p><p>물론 lambda의 성능을 높이면 되긴 합니다. 하지만 성능을 높일수록 가격이 높아지죠.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*LhY7hw1jouo3NCS1X4fjlg.png" /></figure><p>위 그림은 AWS Lambda 홈페이지의 요금표입니다. 살펴보시면 128MB가 제일 낮은 성능이고, 최고는 3008MB 입니다. 100ms당 요금이 과금이 되는 형식입니다.</p><h4>해결</h4><p>어떻게 해결을 할까 여러 고민을 하였습니다. lambda에서 하는 일이 ec2로도 가능은 하지만, 서버 관리 시간, 노력이 많이 들어갈 것 같았습니다. 그리고 작업이 이루어지지 않는 시간동안에도 서버가 구동되어 있어야하며 결국 비효율적인 요금이 발생하게 됩니다.</p><p>그래서 고민을 하던 중 lambda의 작업들을 세분화로 나누고, 작업을 분산시키기로 하였습니다. 분산된 작업을 하는 lambda를 worker라고 지칭하겠습니다. worker는 데이터를 수집 및 s3에 저장하는 lambda과 저장된 데이터를 parsing하는 lambda로 구성하였습니다.</p><p>하지만 이 분산된 lambda를 어떻게 내 입맛에 맞게 호출할 지 참 막막하더군요. 또한 async하게 분산 작업을 하고 싶었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*O8wxcVt83TTAan8Nks_uUQ.png" /></figure><p>그래서 위와 같은 구조로 데이터 처리가 되게 하였습니다.</p><p>AWS Lambda Manager가 있고, 이 manager가 여러 worker lambda instance를 invoke하여 작업을 분산시켰습니다.</p><p>그리고 s3 bucket에 데이터를 쌓은 뒤 objectCreated 이벤트에 의해 lambda가 트리거되도록 구성하였습니다.</p><p>원래는 producer/consumer 개념으로 중간에 SQS(아마존 큐 서비스)를 이용해볼까 하였지만, 다음과 같은 쉬운 방법이 있었습니다.</p><p>(환경은 python 3.6.2 입니다.)</p><pre>import boto3<br>import json</pre><pre>lan = boto3.client(&#39;lambda&#39;)</pre><pre>payload = {}<br>payload[&#39;hello&#39;] = &#39;hi&#39;</pre><pre># worker Lambda 호출<br>lan.invoke(FunctionName=&quot;function_name&quot;, InvocationType=&#39;Event&#39;, Payload=json.dumps(payload))</pre><p>boto3 라이브러리의 invoke함수를 이용하는 방법입니다. (boto3는 Python AWS SDK입니다.) function name에는 lambda 함수명을 넣어주면 되구요. InvocationType같은 경우는 Event로 주었습니다. (Sync하게 구성을 하고 싶으시면 RequestResponse 옵션을 주시면 됩니다.)</p><p>그리고 event로 넘겨줄 데이터를 dictionary 변수에 넣어주고 json형태로 넘겨주면 됩니다. 자세한 것은 <a href="http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke">링크</a>에서 확인하시면 됩니다.</p><p>저 같은 경우 위 방식을 적절하게 응용하여서 lambda instance를 여러 개 생성하여 분산 처리를 하였습니다.</p><h4>마무리</h4><p>위 방법을 적용하였더니, timeout문제는 전혀 없었습니다. 역시 잘 쪼개야 하더군요.ㅎㅎ</p><p>Lambda를 쓰면서 가장 좋았던 점은 서버 관리를 따로 하지 않아도 된다는 점이였고, 또한 매우 싸다는 점입니다. 저 같은 경우는 10분단위로 작업들이 몇가지가 돌아가는데, 계산을 해보니 월 <em>0.8달러</em> 정도면 가능하였습니다. 기존 ec2를 사용한다면 기본 몇만원은 하는 돈이였는데 말이죠.ㅎㅎ</p><p>아무튼 이렇게 글을 마치겠습니다.</p><p>(다음에는 SQS를 이용한 lambda 구성도 해볼까 합니다.!)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9d03accdc272" width="1" height="1"><hr><p><a href="https://medium.com/jhseo/asynchronous-execution-with-aws-lambda-9d03accdc272">Asynchronous execution with AWS lambda</a> was originally published in <a href="https://medium.com/jhseo">JHseo</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Wow…Great Article!.]]></title>
            <link>https://medium.com/@jee0645/wow-great-article-b0213a964d98?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/b0213a964d98</guid>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Mon, 18 Jun 2018 00:26:14 GMT</pubDate>
            <atom:updated>2018-06-18T00:26:14.018Z</atom:updated>
            <content:encoded><![CDATA[<p>Wow…Great Article!.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b0213a964d98" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[It is good !!!]]></title>
            <link>https://medium.com/@jee0645/it-is-good-cc52c2cdc20b?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/cc52c2cdc20b</guid>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Fri, 12 Jan 2018 14:13:42 GMT</pubDate>
            <atom:updated>2018-01-12T14:13:42.990Z</atom:updated>
            <content:encoded><![CDATA[<p>It is good !!!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cc52c2cdc20b" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Asynchronous execution with AWS lambda]]></title>
            <link>https://medium.com/@jee0645/asynchronous-execution-with-aws-lambda-2fbccbe83f78?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/2fbccbe83f78</guid>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[boto3]]></category>
            <category><![CDATA[aws-lambda]]></category>
            <category><![CDATA[python]]></category>
            <category><![CDATA[ec2]]></category>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Thu, 11 Jan 2018 11:27:15 GMT</pubDate>
            <atom:updated>2018-01-12T00:19:05.098Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*IJil099AqZ6A_a9USBngsA.png" /></figure><h4>AWS Lambda 특징</h4><p>AWS Lambda에는 여러가지 특징이 있습니다.</p><ol><li>사용한 만큼만 요금이 부과됩니다.(100ms 당 요금이 부과된다.)</li><li>서버 관리가 불필요합니다..</li><li>각 트리거에 대한 응답으로 코드를 실행하여 애플리케이션을 자동으로 확장하거나 축소가 가능합니다.</li></ol><p>또한 아래와 같은 일들이 가능합니다.</p><h4>데이터 처리</h4><h4>실시간 파일 처리</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*C8HtywiHa5uQZLKe_YuPwQ.png" /></figure><p>Amazon S3를 사용하여 업로드하는 즉시 데이터를 처리하도록 AWS Lambda를 트리거할 수 있습니다. 예를 들어, Lambda를 사용하여 실시간으로 이미지를 썸네일하고, 동영상을 트랜스코딩하고, 파일을 인덱싱하고, 로그를 처리하고, 콘텐츠를 검증하고, 데이터를 수집 및 필터링할 수 있습니다.</p><h4>실시간 스트림 처리</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*DPe3xOPsb1nwKb95t-DmOw.png" /></figure><p>AWS Lambda 및 Amazon Kinesis를 사용하여 애플리케이션 활동 추적, 트랜잭션 주문 처리, 클릭 스트림 분석, 데이터 정리, 지표 생성, 로그 필터링, 인덱싱, 소셜 미디어 분석, IoT 디바이스 데이터 텔레메트리 및 측정을 위한 실시간 스트리밍 데이터를 처리할 수 있습니다.</p><h4>서버리스 웹앱</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*IRedMA_X4uxTtIpU3Kmtow.png" /></figure><p>AWS Lambda를 다른 AWS 서비스와 결합하면, 확장성, 백업 또는 여러 데이터 센터 중복에 필요한 별도의 관리 작업 없이 개발자가 자동으로 확장 및 축소되고 여러 데이터 센터에 걸쳐 가용성이 높은 구성에서 실행되는 강력한 웹 애플리케이션을 구축할 수 있습니다.</p><h4>하지만 timeout..</h4><p>이번에 저는 데이터 수집 및 처리 과정에서 lambda를 많이 사용하였는데요.</p><p>사용을 하다 보니 여러 이슈가 있었지만, 가장 힘들었던 점이 timeout을 고려해야 한다는 점이였습니다.</p><p>lambda에서 최대 timeout은 5분입니다. 한 lambda의 작업이 <strong>5분</strong> 안에는 이루어 져야 한다는 점이죠. 그래서 기존 코드나 script를 그대로 lambda에 옮겨 놓으면 timeout이 발생할 수 있습니다. (제가 이번에 그랬죠..)</p><p>물론 lambda의 성능을 높이면 되긴 합니다. 하지만 성능을 높일수록 가격이 높아지죠.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*LhY7hw1jouo3NCS1X4fjlg.png" /></figure><p>위 그림은 AWS Lambda 홈페이지의 요금표입니다. 살펴보시면 128MB가 제일 낮은 성능이고, 최고는 3008MB 입니다. 100ms당 요금이 과금이 되는 형식입니다.</p><h4>해결</h4><p>어떻게 해결을 할까 여러 고민을 하였습니다. lambda에서 하는 일이 ec2로도 가능은 하지만, 서버 관리 시간, 노력이 많이 들어갈 것 같았습니다. 그리고 작업이 이루어지지 않는 시간동안에도 서버가 구동되어 있어야하며 결국 비효율적인 요금이 발생하게 됩니다.</p><p>그래서 고민을 하던 중 lambda의 작업들을 세분화로 나누고, 작업을 분산시키기로 하였습니다. 분산된 작업을 하는 lambda를 worker라고 지칭하겠습니다. worker는 데이터를 수집 및 s3에 저장하는 lambda과 저장된 데이터를 parsing하는 lambda로 구성하였습니다.</p><p>하지만 이 분산된 lambda를 어떻게 내 입맛에 맞게 호출할 지 참 막막하더군요. 또한 async하게 분산 작업을 하고 싶었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*O8wxcVt83TTAan8Nks_uUQ.png" /></figure><p>그래서 위와 같은 구조로 데이터 처리가 되게 하였습니다.</p><p>AWS Lambda Manager가 있고, 이 manager가 여러 worker lambda instance를 invoke하여 작업을 분산시켰습니다.</p><p>그리고 s3 bucket에 데이터를 쌓은 뒤 objectCreated 이벤트에 의해 lambda가 트리거되도록 구성하였습니다.</p><p>원래는 producer/consumer 개념으로 중간에 SQS(아마존 큐 서비스)를 이용해볼까 하였지만, 다음과 같은 쉬운 방법이 있었습니다.</p><p>(환경은 python 3.6.2 입니다.)</p><pre>import boto3<br>import json</pre><pre>lan = boto3.client(&#39;lambda&#39;)</pre><pre>payload = {}<br>payload[&#39;hello&#39;] = &#39;hi&#39;</pre><pre># worker Lambda 호출<br>lan.invoke(FunctionName=&quot;function_name&quot;, InvocationType=&#39;Event&#39;, Payload=json.dumps(payload))</pre><p>boto3 라이브러리의 invoke함수를 이용하는 방법입니다. (boto3는 Python AWS SDK입니다.) function name에는 lambda 함수명을 넣어주면 되구요. InvocationType같은 경우는 Event로 주었습니다. (Sync하게 구성을 하고 싶으시면 RequestResponse 옵션을 주시면 됩니다.)</p><p>그리고 event로 넘겨줄 데이터를 dictionary 변수에 넣어주고 json형태로 넘겨주면 됩니다. 자세한 것은 <a href="http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke">링크</a>에서 확인하시면 됩니다.</p><p>저 같은 경우 위 방식을 적절하게 응용하여서 lambda instance를 여러 개 생성하여 분산 처리를 하였습니다.</p><h4>마무리</h4><p>위 방법을 적용하였더니, timeout문제는 전혀 없었습니다. 역시 잘 쪼개야 하더군요.ㅎㅎ</p><p>Lambda를 쓰면서 가장 좋았던 점은 서버 관리를 따로 하지 않아도 된다는 점이였고, 또한 매우 싸다는 점입니다. 저 같은 경우는 10분단위로 작업들이 몇가지가 돌아가는데, 계산을 해보니 월 <em>0.8달러</em> 정도면 가능하였습니다. 기존 ec2를 사용한다면 기본 몇만원은 하는 돈이였는데 말이죠.ㅎㅎ</p><p>아무튼 이렇게 글을 마치겠습니다.</p><p>(다음에는 SQS를 이용한 lambda 구성도 해볼까 합니다.!)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2fbccbe83f78" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Serverless Framework with AWS Lambda]]></title>
            <link>https://medium.com/jhseo/serverless-framework-with-aws-lambda-8188bf11d349?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/8188bf11d349</guid>
            <category><![CDATA[serverless-framework]]></category>
            <category><![CDATA[amazon]]></category>
            <category><![CDATA[aws-lambda]]></category>
            <category><![CDATA[devops]]></category>
            <category><![CDATA[aws]]></category>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Mon, 08 Jan 2018 10:40:14 GMT</pubDate>
            <atom:updated>2018-06-20T05:11:53.274Z</atom:updated>
            <content:encoded><![CDATA[<h4>AWS Lambda</h4><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*iZW6Z2gLGRfFK-pblQ4RWQ.png" /></figure><p>Amazon의 <a href="https://aws.amazon.com/ko/lambda/">Lambda </a>는 serverless한 서비스를 제공합니다. 그리고 Lambda에서는 코드를 업로드하기만 하면, 높은 가용성으로 코드를 실행 및 확장하는 데 필요한 모든 것을 처리합니다. 다른 AWS 서비스에서 코드를 자동으로 트리거하도록 설정하거나 웹 또는 모바일 앱에서 직접 코드를 호출할 수 있습니다.</p><p>가격 면에서도 이점이 있는데요. 사용한 컴퓨팅 시간만큼만 비용을 지불하고, 코드가 실행되지 않을 때는 요금이 부과되지 않습니다.</p><h4>그러나 패키지 관리 및 deploy가 힘들다..</h4><p>기존 파이썬 같은 경우는 <a href="https://pypi.python.org/pypi/pip">pip</a> 명령어를 사용하여 패키지를 설치하였습니다.</p><pre>$ pip install {service}</pre><p>참으로 편리하죠. 딱 저 명령어만 입력을 하면 되니..</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*Q5YxSzohKNSzbJWvFgVURQ.png" /></figure><p>그런데 lambda에서는 패키지 설치 및 이용 면에서 힘든 점이 많았습니다.</p><p>보통 파이썬으로 개발하시는 분들은 가상환경을 많이 사용하실 텐데요.</p><p>virtualenv로 가상환경을 만드셨다면, lib/pythonX.X/site-packages/ 경로에는 pip 명령어로 설치한 패키지들이 저장됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*FH2iaWnbBzyWj1zFQAgt-A.png" /></figure><p>만약 lambda에 코드를 upload할 시, A라는 패키지를 사용하고 싶으시다면 다음과 같은 방법을 이용해야 합니다.</p><ol><li>업로드 할 폴더를 생성</li><li>lambda 코드 작성</li><li>pip install {A}</li><li>lib/pythonX.X/site-packages/에 해당하는 A폴더와 A-x.x.x.dist-info폴더를 1번에서 생성한 폴더에 복사</li><li>zip 파일로 압축 및 upload (위 그림의 upload 클릭하여 upload)</li></ol><p>그런데 또 3, 4번의 방법이 통하지 않을 때가 있었습니다.</p><p>예를 들면, psycopg2(postgresql 패키지) 같은 경우는 <a href="https://github.com/jkehler/awslambda-psycopg2">여기</a> 링크의 precompile된 것을 zip 파일로 넣어줘야 하더군요..(엄청나게 귀찮습니다.)</p><h4>Serverless framework</h4><p>이러한 번거로움을 피하기 위해 이미 많은 개발자 분들이 엄청난 삽질과 편리한 툴을 만들어 놓았습니다. (<a href="https://github.com/apex/apex">apex</a>, <a href="https://github.com/Miserlou/Zappa">zappa</a>, <a href="https://github.com/aws/chalice">chalice</a>)</p><p>그 중, 전 serverless framework를 이용하였습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*Kh6TkUSg1ldMkTUdLXKLxA.png" /></figure><p>(<a href="https://serverless.com/">serverless framework</a>를 설치하기 위해서는 <a href="https://www.npmjs.com/get-npm">npm</a>이 필요합니다. )</p><p>저는 awscli와 access-key, secret-key를 컴퓨터에 설정을 하였는데요. 이미 설정이 되어 있으신 분들도 계실 텐데 그렇지 않으시면, <a href="https://docs.aws.amazon.com/ko_kr/streams/latest/dev/kinesis-tutorial-cli-installation.html">여기</a> 링크에서 보고 설치해주세요.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*ETwUgZUlVs_W_JZwRn30lg.png" /></figure><p>그리고 사용자 권한에는 개발용으로 위와 같은 권한을 주었습니다. (이게 그냥 정신 건강에 좋습니다. production 일때는 위와 같은 권한을 주지 마세요.)</p><pre>$ npm install -g serverless</pre><p>npm으로 serverless를 설치합니다.</p><pre>$ serverless create --template aws-python3 --name test --path test</pre><p>serverless 설치가 완료되었다면, 위 명령어를 이용하여 serverless 프로젝트를 생성합니다.</p><p>template에는 개발하기 쉽게 미리 만들어 놓은 템플릿이 있습니다.</p><p>저는 개발환경은 python3이라, aws-python3를 이용하였습니다.</p><pre>$ cd test<br>[jh.seo]~/test$ ls<br>handler.py     serverless.yml</pre><p>test 폴더가 생성되고 그 폴더 안에는 두 가지 파일이 생성됩니다.</p><p>serverless.yml 파일에는 framework을 deploy하기 위한 여러 설정을 할 수 있습니다.</p><p>그리고 handler.py가 있습니다. 이 파일이 lambda에 deploy될 파이썬 코드입니다.</p><pre>[jh.seo]~/test$ mv handler.py handler1.py<br>[jh.seo]~/test$ cp handler1.py handler2.py</pre><p>실습을 위해 두 가지 파일을 생성합니다.</p><pre>  1 import json<br>  2 <br>  3 def hello1(event, context):<br>  4     print(&quot;handler1 hello&quot;)</pre><p>handler1.py를 위와 같이 수정합니다. 메소드 명은 hello1으로 줍니다.</p><pre>  1 import json<br>  2 import numpy as np<br>  3 <br>  4 def hello2(event, context):<br>  5     print(&quot;handler2 hello&quot;)<br>  6     test_np = np.arange(15).reshape(3, 5)<br>  7 <br>  8     print(&quot;numpy array: &quot;)<br>  9     print(test_np)</pre><p>그리고 handler2.py를 open하여 위와 같이 수정합니다.</p><p>numpy 패키지를 import 하고, 메소드 명은 hello2로 변경 뒤 numpy 어레이를 생성 및 출력하는 코드를 작성합니다.</p><pre>[jh.seo]~$ virtualenv -p python3 testenv<br>[jh.seo]~$ source testenv/bin/activate<br>(testenv) [jh.seo]~/test$ pip install numpy</pre><p>가상환경을 만들어, numpy 패키지를 설치합니다.</p><pre>(testenv) [jh.seo]~/test$ pip freeze &gt; requirements.txt</pre><p>그리고 pip freeze 명령어를 이용하여 패키지가 설치된 목록을 requirements.txt 파일로 만듭니다.</p><pre>(testenv) [jh.seo]~/test$ npm init<br>(testenv) [jh.seo]~/test$ npm install --save serverless-python-requirements</pre><p>그리고 npm 명령어를 이용하여 serverless-python-requirements를 설치합니다. 파이썬 패키지를 관리하기 위한 npm plugin입니다.</p><pre>  1 service: test<br>  2 <br>  3 provider:<br>  4   name: aws<br>  5   runtime: python3.6<br>  6   region: ap-northeast-2<br>  7   stage: dev<br>  8   <br>  9 plugins:<br> 10   - serverless-python-requirements<br> 11 <br> 12 custom:<br> 13   pythonRequirements:<br> 14     dockerizePip: true<br> 15     <br> 16 functions:<br> 17   func1:<br> 18     handler: handler1.hello1<br> 19   <br> 20   func2:<br> 21     handler: handler2.hello2</pre><p>serverless.yml 파일을 위와 같이 수정해줍니다.</p><p>9번-14번 라인은 위에서 설치한 serverless-python-requirements 플러그인을 사용하기 위해 필요한 부분입니다.</p><p>16번-21번라인은 handler1.py와 handler2.py의 hello1메소드, hello2메소드를 lambda의 handler로 사용하겠다는 뜻입니다.</p><pre>(testenv) [jh.seo]~/test$ serverless deploy<br>Serverless: Installing required Python packages with python3.6...<br>Serverless: Docker Image: lambci/lambda:build-python3.6<br>Serverless: Linking required Python packages...<br>Serverless: Packaging service...<br>Serverless: Excluding development dependencies...<br>Serverless: Unlinking required Python packages...<br>Serverless: Creating Stack...<br>Serverless: Checking Stack create progress...<br>.....<br>Serverless: Stack create finished...<br>Serverless: Uploading CloudFormation file to S3...<br>Serverless: Uploading artifacts...<br>Serverless: Uploading service .zip file to S3 (22.92 MB)...<br>Serverless: Validating template...<br>Serverless: Updating Stack...<br>Serverless: Checking Stack update progress...<br>.........................<br>Serverless: Stack update finished...<br>Service Information<br>service: test<br>stage: dev<br>region: ap-northeast-2<br>stack: test-dev<br>api keys:<br>  None<br>endpoints:<br>  None<br>functions:<br>  func1: test-dev-func1<br>  func2: test-dev-func2</pre><p>serverless deploy 명령어를 입력하여 deploy 합니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*-BUr6Q5SmK3RF_rn76tOgg.png" /></figure><p>그러면 위와 같이 2가지 lambda가 생성이 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*885wZUJX-afFq-XcWS6nVw.png" /></figure><p>그리고 cloudwatch에 로그 스트림이 자동으로 생성이 됩니다.</p><pre>(testenv) [jh.seo]~/test$ serverless invoke -f func1 --log<br>null<br>--------------------------------------------------------------------<br>START RequestId: 38dfd068-f45c-11e7-b2c8-49ca6b97f4d0 Version: $LATEST<br>handler1 hello<br>END RequestId: 38dfd068-f45c-11e7-b2c8-49ca6b97f4d0<br>REPORT RequestId: 38dfd068-f45c-11e7-b2c8-49ca6b97f4d0	Duration: 0.28 ms	Billed Duration: 100 ms 	Memory Size: 1024 MMax Memory Used: 22 MB	<br><br><br>(testenv) [jh.seo]~/test$ serverless invoke -f func2 --log<br>null<br>--------------------------------------------------------------------<br>START RequestId: 3bea7846-f45c-11e7-8898-fbe3b2f6fa1f Version: $LATEST<br>handler2 hello<br>numpy array: <br>[[ 0  1  2  3  4]<br> [ 5  6  7  8  9]<br> [10 11 12 13 14]]<br>END RequestId: 3bea7846-f45c-11e7-8898-fbe3b2f6fa1f<br>REPORT RequestId: 3bea7846-f45c-11e7-8898-fbe3b2f6fa1f	Duration: 1.92 ms	Billed Duration: 100 ms 	Memory Size: 1024 MMax Memory Used: 54 MB</pre><h4>Event 설정</h4><p>개발을 하다 보면 lambda를 주기적(예를 들면 10분)으로 실행하고 싶다거나, s3에 object가 생성이 될 때 lambda를 실행하고 싶은 시나리오가 생길텐데요.</p><p>그럴 때는 아래와 같은 방법을 사용합니다.</p><h4>Ex1) handler1.py의 hello1 메소드를 timeout을 3분으로 설정 및 10분 단위로 lambda를 실행시키고 싶을 때.</h4><p>serverless.yml을 다음과 같이 수정합니다.</p><pre> 16 functions:<br> 17   func1:<br> 18     handler: handler1.hello1<br> 19     timeout: 180<br> 20     events:<br> 21         - schedule: rate(10 minutes)</pre><h4>Ex2) s3에 특정 prefix를 가지는 object가 생성이 될 때 handler1.py의 hello1 메소드를 실행시키고 싶을 때.</h4><pre>(testenv) [jh.seo]~/test$ npm install serverless-external-s3-event</pre><p>이미 s3 bucket이 존재한다면 위 명령어를 입력하여, serverless-external-s3-event 플러그인을 설치합니다.</p><pre>  3 provider:<br>  4   name: aws<br>  5   runtime: python3.6<br>  6   region: ap-northeast-2<br>  7   stage: dev<br>  8   iamRoleStatements:<br>  9     -  Effect: &quot;Allow&quot;<br> 10        Action:<br> 11          - &quot;s3:PutBucketNotification&quot;<br> 12        Resource:<br> 13          Fn::Join:<br> 14            - &quot;&quot;<br> 15            - - &quot;arn:aws:s3:::{BUCKET NAME}&quot;<br> 16 plugins:<br> 17   - serverless-external-s3-event<br> 18   - serverless-python-requirements</pre><p>그리고 serverless.yml 파일을 위와 같이 수정합니다. BUCKET NAME에는 s3의 bucket name을 넣어주시면 됩니다. 그리고 plugins에 serverless-external-s3-event를 추가합니다.</p><pre> 22 functions:<br> 23   func1:<br> 24     handler: handler1.hello1<br> 25     events:<br> 26         - existingS3:<br> 27           bucket: {BUCKET_NAME}<br> 28           events: <br> 29             - s3:ObjectCreated:*<br> 30           rules:<br> 31             - prefix: {prefix}</pre><p>function 부분은 위와 같이 수정합니다. {BUCKET NAME}에는 마찬가지로 s3의 bucket name을 입력하시면 되구요. {prefix}에는 이벤트를 발생시키고자 하는 object의 prefix를 입력합니다. 예를 들면 s3 object에 key가 aa로 시작한다면 aa를 입력하시면 됩니다.</p><h4>마무리.</h4><p>지금까지 serverless framework를 이용한 lambda deploy 과정에 대해 살펴보았는데요. 전 엄청 삽질을 하였지만.. 막상 해보시면 별꺼 아니라는 걸 아실꺼에요. ㅎㅎ</p><p>오늘도 즐거운 코딩 되시길!!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8188bf11d349" width="1" height="1"><hr><p><a href="https://medium.com/jhseo/serverless-framework-with-aws-lambda-8188bf11d349">Serverless Framework with AWS Lambda</a> was originally published in <a href="https://medium.com/jhseo">JHseo</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[OSX DOCKER 설치]]></title>
            <link>https://medium.com/jhseo/osx-docker-%EC%84%A4%EC%B9%98-5e53418ca7de?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/5e53418ca7de</guid>
            <category><![CDATA[docker]]></category>
            <category><![CDATA[installation]]></category>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Sun, 12 Nov 2017 11:03:03 GMT</pubDate>
            <atom:updated>2017-11-12T11:03:03.432Z</atom:updated>
            <content:encoded><![CDATA[<p>ubuntu 였다면, 패키지 관리 명령어 (apt-get)으로 설치하기 때문에, osx에도 brew로 설치를 하는 줄 알았다. 하지만 <a href="https://store.docker.com/editions/community/docker-ce-desktop-mac">맥용 도커</a>가 따로 출시가 되었다고 한다.</p><h4>설치 방법.</h4><p>여기 <a href="https://store.docker.com/editions/community/docker-ce-desktop-mac">링크</a>에서 Docker.dmg 파일을 다운받는다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*sE0LKFmsafgcHmtfbGKe4g.png" /></figure><p>그리고 그 파일을 더블 클릭하여 일반 osx 어플리케이션 설치처럼 Docker 아이콘을 Application 폴더에 끌어다 놓는다. 그리고 application 폴더에 들어가서 Docker 아이콘을 더블 클릭한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*JNH5dD5ex_NB2nJfKv0BAg.png" /></figure><p>그러면 상단바에 Docker 아이콘이 생성이 된다. 저 아이콘을 클릭해보면 ID와 passwd를 입력하라는 부분이 보인다. <a href="https://hub.docker.com/">여기</a> 사이트에서 계정을 생성한다.</p><h4>실행</h4><p>터미널에서 아래 명령어를 입력하여 최신 도커 버전이 설치되었는지 확인한다.</p><pre>$ docker version</pre><p>그리고 다음 명령어로 docker가 정상적으로 실행되는지 확인한다.</p><pre>$ docker run hello-world</pre><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*iffMZmokPVbYG_IwMEaNpw.png" /></figure><p>위와 같은 화면이 출력된다.</p><p>이상으로 docker 설치를 완료하였다. 우분투도 편리하지만, 맥도 설치가 간편하다. ㅎㅎ</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5e53418ca7de" width="1" height="1"><hr><p><a href="https://medium.com/jhseo/osx-docker-%EC%84%A4%EC%B9%98-5e53418ca7de">OSX DOCKER 설치</a> was originally published in <a href="https://medium.com/jhseo">JHseo</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[글 잘 읽었습니다.]]></title>
            <link>https://medium.com/@jee0645/%EA%B8%80-%EC%9E%98-%EC%9D%BD%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-40c2a53d9f2a?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/40c2a53d9f2a</guid>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Sun, 12 Nov 2017 10:21:47 GMT</pubDate>
            <atom:updated>2017-11-12T10:21:47.548Z</atom:updated>
            <content:encoded><![CDATA[<p>글 잘 읽었습니다.</p><p>덕분에 저도 medium으로 블로그를 시작하게 되었습니다. ㅎㅎ</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=40c2a53d9f2a" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[외부에서 Vue.js instance 접근]]></title>
            <link>https://medium.com/jhseo/%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-vue-js-instance-%EC%A0%91%EA%B7%BC-b7638559bf01?source=rss-9b223908ded------2</link>
            <guid isPermaLink="false">https://medium.com/p/b7638559bf01</guid>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[서지형]]></dc:creator>
            <pubDate>Sun, 12 Nov 2017 03:15:50 GMT</pubDate>
            <atom:updated>2017-11-12T03:15:50.671Z</atom:updated>
            <content:encoded><![CDATA[<pre>var vm1 = new Vue({<br>			el: &#39;#vm1&#39;,<br>			data: {<br>					name: &#39;Vue instance #1&#39;<br>			}<br>});</pre><p>Vue.js 인스턴스가 위와 같이 선언이 되어 있다고 하면</p><pre>vm1.name = ‘changed</pre><p>위와 같이 인스턴스에 접근하여 변수 value를 바꿀 수 있다.</p><p>자세한 사항은 <a href="https://codingexplained.com/coding/front-end/vue-js/accessing-vue-instance-outside-declaration">Accessing a Vue instance outside of its declaration </a>을 참고한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b7638559bf01" width="1" height="1"><hr><p><a href="https://medium.com/jhseo/%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-vue-js-instance-%EC%A0%91%EA%B7%BC-b7638559bf01">외부에서 Vue.js instance 접근</a> was originally published in <a href="https://medium.com/jhseo">JHseo</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>