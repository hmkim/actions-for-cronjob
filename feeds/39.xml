<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>More fun with you</title>
<link>http://hhko.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Thu, 18 Oct 2018 22:51:55 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>고가별</managingEditor>
<item>
<title>순수 함수와 정직한 설계</title>
<link>http://hhko.tistory.com/entry/%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%99%80-%EC%A0%95%EC%A7%81%ED%95%9C-%EC%84%A4%EA%B3%84</link>
<description>순수 함수(Pure Function)는 알 수 없는(Unknown) 의존성(입력)과 외부 수정(출력, Side Effects)이 존재하지 않습니다. 이러한 특징으로 우리는 정직한 설계(알 수 없는 입/출력이 존재하지 않는 설계, 알려진 입/출력만으로 설계)를 할 수 있습니다. 정직한 설계를 위한 순수 함수 관련 주요 특징을 정리한 문서입니다. Pure Function and Honest Design from Hyungho Ko</description>
<category>Functional Programming</category>
<category>First-class citizen</category>
<category>Honest Design</category>
<category>immutable</category>
<category>Pure Function</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/57</guid>
<comments>http://hhko.tistory.com/entry/%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%99%80-%EC%A0%95%EC%A7%81%ED%95%9C-%EC%84%A4%EA%B3%84#entry57comment</comments>
<pubDate>Tue, 11 Apr 2017 22:38:47 +0900</pubDate>
</item>
<item>
<title>순수 함수와 Rx</title>
<link>http://hhko.tistory.com/entry/%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%99%80-Rx</link>
<description>함수형 프로그래밍에 핵심 개념 중 하나가 바로 순수 함수입니다. 순수 함수는 순수 입력과 순수 출력으로 구성됩니다. 그 결과 순수 함수는 부수 효과(Side-Effects)를 제거 합니다. (Side-Effects Free: 순수 함수 수행 과정에서 함수 밖에 있는 그 어떤 상태도 변경시키지 않는다.) 그 결과 순수 함수는 일관성을 갖게 됩니다. 동일한 입력을 주면 언제(When), 어디서(Where), 호출 횟수(How many)와 상관 없이 늘 ..</description>
<category>Functional Programming</category>
<category>functional programming</category>
<category>Pure Function</category>
<category>RX</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/56</guid>
<comments>http://hhko.tistory.com/entry/%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%99%80-Rx#entry56comment</comments>
<pubDate>Sun, 17 Apr 2016 14:58:04 +0900</pubDate>
</item>
<item>
<title>MOOC로 함수형 프로그래밍 학습하기</title>
<link>http://hhko.tistory.com/entry/MOOC%EB%A1%9C-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0</link>
<description>MOOC(Massive Open Online Course)로 함수형 프로그래밍을 공부하는 것도 많이 도움이 됩니다. Programming in F# (.NET에서 함수형을 원한다면 F#으로 함수형 프로그래밍 ^^;) https://www.edx.org/course/programming-f-microsoft-dev207-1x Introduction to Functional Programming in OCaml (OCaml은 F# 언어를 설계할 때 참고..</description>
<category>Functional Programming</category>
<category>functional programming</category>
<category>MOOC</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/55</guid>
<comments>http://hhko.tistory.com/entry/MOOC%EB%A1%9C-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0#entry55comment</comments>
<pubDate>Tue, 05 Jan 2016 11:56:44 +0900</pubDate>
</item>
<item>
<title>Akka Fault Tolerance 세미나 발표 자료.</title>
<link>http://hhko.tistory.com/entry/Akka-Fault-Tolerance-%EC%84%B8%EB%AF%B8%EB%82%98-%EB%B0%9C%ED%91%9C-%EC%9E%90%EB%A3%8C</link>
<description>오늘(2015-12-05, 토요일) 오후에 있었던.. &quot;더 단순한 Fault Tolerance 소프트웨어&quot; 주제 발표 자료를 공유합니다. ^^; Akka Fault Tolerance from Hyungho Ko 참석자 대부분이 Akka에 대한 정보가 없었기 때문에... Akka가 제시하는 문제 해결 방향성에 조금은 당황한 듯 ㅋㅋㅋ... 합니다. 더 재미있게 개발할 수 있어 적극 추천 합니다. Akka^^;</description>
<category>Akka</category>
<category>Akka.NET</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/54</guid>
<comments>http://hhko.tistory.com/entry/Akka-Fault-Tolerance-%EC%84%B8%EB%AF%B8%EB%82%98-%EB%B0%9C%ED%91%9C-%EC%9E%90%EB%A3%8C#entry54comment</comments>
<pubDate>Sat, 05 Dec 2015 22:53:09 +0900</pubDate>
</item>
<item>
<title>Akka.NET 공개 세미나</title>
<link>http://hhko.tistory.com/entry/AkkaNET-%EA%B3%B5%EA%B0%9C-%EC%84%B8%EB%AF%B8%EB%82%98</link>
<description>병렬 개발 커뮤니티 PDC(http://cafe.naver.com/speedbetter)에서 주체하는 6차 PDC 세미나 병렬 프로그래밍 부트 캠프에서 &quot;Session 3. Akka.NET을 이용한 더 단순한 Fault Tolerance 소프트웨어 개발&quot; 주제로 발표합니다. 세미나에 대한 자세한 정보는 http://cafe.naver.com/speedbetter/1258 참고 합시오. ^^;</description>
<category>Akka</category>
<category>Akka.NET</category>
<category>공개 세미나</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/53</guid>
<comments>http://hhko.tistory.com/entry/AkkaNET-%EA%B3%B5%EA%B0%9C-%EC%84%B8%EB%AF%B8%EB%82%98#entry53comment</comments>
<pubDate>Fri, 20 Nov 2015 18:27:07 +0900</pubDate>
</item>
<item>
<title>액터 모델과 Akka</title>
<link>http://hhko.tistory.com/entry/%EC%95%A1%ED%84%B0-%EB%AA%A8%EB%8D%B8%EA%B3%BC-Akka</link>
<description>모든 것은 객체다 vs. 모든 것은 액터다 액터 모델(Actor model)이 바로 &quot;모든 것은 액터다&quot; 철학으로 시작한다. 액터 모델 개념은 칼 휴이트(Carl Hewitt, https://en.wikipedia.org/wiki/Carl_Hewitt)가 &quot;A Universal Modular Actor Formalism for Artificial Intelligence&quot;을 통해 1973년에 소개된 개념이다. 액터 모델 개념은 얼랭(Erlang)이라는..</description>
<category>Akka</category>
<category>Akka.NET</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/52</guid>
<comments>http://hhko.tistory.com/entry/%EC%95%A1%ED%84%B0-%EB%AA%A8%EB%8D%B8%EA%B3%BC-Akka#entry52comment</comments>
<pubDate>Wed, 07 Oct 2015 20:33:49 +0900</pubDate>
</item>
<item>
<title>Scale Up과 Scale Out 그리고 Fault Tolerance을 위한 Akka.NET</title>
<link>http://hhko.tistory.com/entry/Scale-Up%EA%B3%BC-Scale-Out-%EA%B7%B8%EB%A6%AC%EA%B3%A0-Fault-Tolerance%EC%9D%84-%EC%9C%84%ED%95%9C-AkkaNET</link>
<description>Scala와 Java 개발자라면... 이미 Akka(http://akka.io/)을 많이 알고 있을 듯 합니다. 그러나 아직까지도 .NET 계열 개발자들에게는 Akka가 많이 생소할 것입니다. Akka는 병렬(Scale Up)과 분산(Scale Out) 그리고 장애 처리(Fault Tolerance)을 위한 툴킷/런타임입니다. .NET 개발자들에게 기쁜 소식은 이러한 라이브러리가 .NET으로도 제공한다는 사실이죠. Akka.NET(http://get..</description>
<category>Akka</category>
<category>Akka.NET</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/51</guid>
<comments>http://hhko.tistory.com/entry/Scale-Up%EA%B3%BC-Scale-Out-%EA%B7%B8%EB%A6%AC%EA%B3%A0-Fault-Tolerance%EC%9D%84-%EC%9C%84%ED%95%9C-AkkaNET#entry51comment</comments>
<pubDate>Sun, 04 Oct 2015 11:40:47 +0900</pubDate>
</item>
<item>
<title>함수형 사고 F# 4. - 설계 관점에서 바라본 고차 함수 Reduce</title>
<link>http://hhko.tistory.com/entry/%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0-F-4-%EC%84%A4%EA%B3%84-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC%EB%B3%B8-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98-Reduce</link>
<description>2015년 7월 월간 마이크로소프트웨어(http://www.imaso.co.kr)에 기고한 &quot;설계 관점에서 바라 본 고차 함수 Reduce&quot; 원고입니다. https://docs.google.com/document/d/1qaA1aGIOkpkja7cZocezC75OBvgK8MuVBBPieG2lGzc/pub 고차 함수 관련해서 총3회에 걸쳐 이야기를 했습니다. 문법적으로는 그리 어렵지 않은 개념입니다. 함수를 입력으로 받아 들이거나 또는 함수를 결과로 전..</description>
<category>Functional Programming</category>
<category>F#</category>
<category>functional programming</category>
<category>Functional Thinking</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/50</guid>
<comments>http://hhko.tistory.com/entry/%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0-F-4-%EC%84%A4%EA%B3%84-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC%EB%B3%B8-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98-Reduce#entry50comment</comments>
<pubDate>Sat, 22 Aug 2015 11:52:35 +0900</pubDate>
</item>
<item>
<title>함수형 사고 F# 3. - 설계 관점에서 바라 본 고차 함수 Filter와 Map</title>
<link>http://hhko.tistory.com/entry/%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0-F-3-%EC%84%A4%EA%B3%84-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC-%EB%B3%B8-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98-Filter%EC%99%80-Map</link>
<description>2015년 6월 월간 마이크로소프트웨어(http://www.imaso.co.kr)에 기고한 &quot;설계 관점에서 바라 본 고차 함수 Filter와 Map&quot; 원고입니다. https://docs.google.com/document/d/1cRexA-iDtJMVvVcUmdh5Bjl925ig188ILOcnVKLW7XU/pub 고차 함수(Higher-Order Function)를 기능 관점이 아닌 설계 관점에서 바라본 이야기 입니다. 함수형 언어에 관심 있는 분들에..</description>
<category>Functional Programming</category>
<category>F#</category>
<category>functional programming</category>
<category>Functional Thinking</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/49</guid>
<comments>http://hhko.tistory.com/entry/%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0-F-3-%EC%84%A4%EA%B3%84-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC-%EB%B3%B8-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98-Filter%EC%99%80-Map#entry49comment</comments>
<pubDate>Sun, 21 Jun 2015 19:47:10 +0900</pubDate>
</item>
<item>
<title>함수형 사고 F# 2. - SOLID 원칙과 고차 함수</title>
<link>http://hhko.tistory.com/entry/%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0-F-2-SOLID-%EC%9B%90%EC%B9%99%EA%B3%BC-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98</link>
<description>2015년 5월 월간 마이크로소프트웨어(http://www.imaso.co.kr)에 기고한 &quot;SOLID 원칙과 고차 함수&quot; 원고입니다. https://docs.google.com/document/d/1O5cgxHzbAGRhWSKzTvC4nGieXaWhV78T9nVY0KQdohY/pub 고차 함수는 객체지향에서 추구하는 인터페이스 중심 프로그래밍을 좀더 간결하게 구현할 수 있도록 제공하는 함수형 언어의 개념입니다. 2015년 6월에는 “설계 관점에서 ..</description>
<category>Functional Programming</category>
<category>F#</category>
<category>functional programming</category>
<category>Functional Thinking</category>
<author>고가별</author>
<guid>http://hhko.tistory.com/47</guid>
<comments>http://hhko.tistory.com/entry/%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0-F-2-SOLID-%EC%9B%90%EC%B9%99%EA%B3%BC-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98#entry47comment</comments>
<pubDate>Mon, 25 May 2015 16:22:33 +0900</pubDate>
</item>
</channel>
</rss>