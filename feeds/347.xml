<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 박새미 on Medium]]></title>
        <description><![CDATA[Stories by 박새미 on Medium]]></description>
        <link>https://medium.com/@rosd0000?source=rss-4a443b4aa9dc------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*YJ-n7Rv9kiXh-lkB.</url>
            <title>Stories by 박새미 on Medium</title>
            <link>https://medium.com/@rosd0000?source=rss-4a443b4aa9dc------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 04:32:17 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@rosd0000" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[[CodeSpitz81] Javascript Code Golf 1]]></title>
            <link>https://medium.com/@rosd0000/codespitz81-javascript-code-golf-1-b7a5faa7c20b?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/b7a5faa7c20b</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Sat, 06 Apr 2019 19:45:33 GMT</pubDate>
            <atom:updated>2019-04-07T03:41:45.104Z</atom:updated>
            <content:encoded><![CDATA[<p>요즘 저는 제가 처리하고 있는 문제가 정답이 아닐지도 모른다는 고민을 하곤 했습니다. 제가 정복해나가는 문제들이 다른 해결법이 있진 않을지 아니면 좀 더 변화에 유연한 해결을 위한 시도 같은 것들을 고민하곤 했습니다. 고작 제가 생각해낸 방법으로는 “수학학원에 다녀볼까?”, “알고리즘을 공부해 볼까?” 같은 것들을 생각했었는데 이 스터디를 가장한 세미나에서는 제가 생각하는 것보다는 구체적으로 문제에 대한 접근 방법을 제시하였습니다. 저는 그 부분에 대한 내용을 정리하고자 합니다.</p><h4>문제해결 기법</h4><ol><li>문제의 영역을 비용화(숫자화)</li><li>선형 계획법: 모든 경우의 수를 계산</li><li>알고리즘 기법(검색, 정렬): 많은 케이스를 알고리즘으로 제거</li><li>휴리스틱(인간이 생각대로) 기법</li></ol><ul><li>문제는 공통된 패턴을 Pass 하면서 원하는 것으로 사상(Reduce)</li><li>문제의 패턴을 발견하기 힘든 경우 데이터의 형태를 변형하여 시도(Map)</li></ul><p>문제를 해결하기 위해서는 관찰을 통해서 패턴을 발견하여 개선하는 방법으로 문제를 정복해 나간다. 반복은 제거되는 것이 아니라 발견되는 것이라는 말이 있습니다. 이는 개인의 능력에 따라서 보는 시각에 따라 다르다는 이야기입니다. 결국 아는 만큼 제거하고 로직화할 수 있습니다.</p><ul><li>문제를 정복하기 쉬운 형태로 변형</li></ul><p>복잡한 문제는 단순화시킬수록 정복하기 쉬운 형태에 가까워집니다. 문제 해결을 숫자로 시작하는 것은 이미 많은 케이스가 정해져 있고 답이 정해져 있기 때문입니다. 하지만 우리는 보다 복잡한 형태의 문제를 해결해야 되는 경우가 많습니다. 그래서 이런 문제들로 학습하여 문제 해결을 위한 시도를 늘리고 보다 복잡한 문제를 단순화시켜 문제를 해결하기 위한 습관을 기르기 위해서 입니다.</p><ul><li>문제해결을 위한 목적에 집중</li></ul><p>문제해결을 위해서는 <strong>목적</strong>을 정확하게 이해하는 것이 중요합니다. 목적에 따라서 문제 해결을 위한 방법이 달라지기 때문입니다. 간단한 문제를 처리하기 위해서 많은 시도는 개인의 발전에 도움이 되는 것처럼 보이나 그건 올바른 문제해결 방법이 아닌 개인의 고집일 경우가 많습니다. 올바른 문제해결을 위해서는 선행으로 목적을 정확하게 설정하는 것이 무엇보다 중요합니다.</p><ul><li>미리 모든 케이스를 정해야 함</li></ul><p>저 포함 몇몇 개발자들은 모든 케이스를 생각하고 개발하는 것이 아닌 주먹구구식으로 많은 시도를 통해서 우연히 케이스를 발견하여 제품을 만들어 냅니다. 해피 케이스에서는 동작할지 모르지만 생각하지 못한 문제 혹은 도메인이 변경되는 상황이 발생하면 이전의 케이스를 만족하지 못하는 상황이 벌어집니다. 이는 제품이 도메인 확장으로 인한 유연한 개발이 힘들어지는 이유입니다. 물론 아는 만큼 보이는 만큼 정리해낼수 있는 것이기 때문에 많은 것을 정리할 순 없지만 할 수 있는 만큼의 케이스를 미리 정리하고 문제를 해결해 나가는 방법을 시도하는 것이 좋습니다.</p><ul><li>만들면 실험</li></ul><p>문제를 해결하기 위한 작은 시도들은 반드시 실험하는 습관을 지니도록 하는 것이 좋습니다. 나중에 실험해야지 하는 핑계들이 쌓이고 쌓여 가리고 숨기게 되어 문제를 점점 어렵게 만들 수 있습니다. 작은 시도에 대해 검증하는 즉시 실험하여 확인해 보는 것이 좋습니다.</p><p>스터디에서는 위의 문제 해결을 위한 예시로 소수 문제를 개선하면서 확인하였습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ef96b5c5b8511acfdb0e12b19d23039a/href">https://medium.com/media/ef96b5c5b8511acfdb0e12b19d23039a/href</a></iframe><p>위의 예제는 스터디의 교제로 선택된 “<strong>더 나은 프로그래밍을 위한 코드골프”</strong>라는 책의 소수에 관련된 예제입니다. 책에서는 에라토스테네스의 체를 이용하여 소수를 구하고 있습니다.</p><ul><li>에라토스테네스의 체 알고리즘</li></ul><ol><li>2에서 n까지의 정수를 오름차순으로 정렬</li><li>정렬된 n까지의 숫자들을 “탐색 리스트”라 함</li><li>아무 값도 들어 있지 않은 “소수 리스트”를 준비</li><li>탐색 리스트 중에서 가장 작은 값을 제거 후 소수 리스트에 삽입</li><li>방금 소수 리스트에 저장된 값의 배수를 탐색리스트에서 삭제</li><li>4번과 5번을 반복</li><li>소수 리스트에 마지막으로 저장된 값의 배수가 n보다 작다면 반복을 종료</li><li>소수 리스트와 탐색리스트를 합해 소수 리스트를 반환</li></ol><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/536406b6981e090737c26254b89c5c2b/href">https://medium.com/media/536406b6981e090737c26254b89c5c2b/href</a></iframe><ul><li>짝수는 소수가 아니기 때문에 탐색 리스트의 값을 홀수만 저장</li><li>탐색리스트에서 n의 제곱 값보다 작은 값은 소수이기 때문에 비교를 종료</li></ul><p>탐색리스트에 홀수만 저장하는 것만으로 비교해야 할 요소가 반으로 제거되었습니다. 짝수가 제거된 30까지 수에서 소수가 구해지는 내용을 확인해보겠습니다.</p><p>! 30까지 수에서 소수 구하기</p><ol><li>소수[2] 탐색[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]</li><li>소수[2, 3], n=3, 탐색[5, 7, 11, 13, 17, 19, 23, 25, 29]</li><li>소수[2, 3, 5], n=5, 탐색[7, 11, 13, 17, 19, 23, 29]</li><li>소수[2, 3, 5, 7], n=7, 탐색[11, 13, 17, 19, 23, 29]</li><li>소수[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</li></ol><p>소수를 구하면서 남은 탐색리스트를 보면 n의 제곱보다 작은 수는 소수가 저장된 모습을 확인할 수 있습니다. 그렇기 때문에 n의 제곱보다 작은 수를 비교할 필요가 없어 탈출 조건을 넣어서 불필요한 비교를 없애도록 합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/37090b411c03bb42ea86212588a84f02/href">https://medium.com/media/37090b411c03bb42ea86212588a84f02/href</a></iframe><ul><li>탐색리스트와 소수리스트를 따로 나뉜 부분을 개선</li></ul><p>! 30까지 수에서 소수 구하기</p><ol><li>탐색[2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]</li><li>n=3, 탐색[2, 3, 5, 7, 11, 13, 17, 19, 23, 25, 29]</li><li>n=5, 탐색[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</li><li>n=7, 탐색[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</li><li>소수[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</li></ol><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ecb8820a708e3b2d6f22f189591ebd2a/href">https://medium.com/media/ecb8820a708e3b2d6f22f189591ebd2a/href</a></iframe><ul><li>splice 함수를 사용하는 것보다 소수가 아닌 숫자는 0으로 값을 초기화한 다음 filter 함수로 소수리스트를 만드는 것으로 개선</li><li>탐색리스트에서 n의 주소부터 +n만큼 주소를 이동하면 n의 배수인 값이기 때문에 이를 만족하는 로직을 구현</li></ul><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/77d88c85cba12dcfdb6c9ef670d45e44/href">https://medium.com/media/77d88c85cba12dcfdb6c9ef670d45e44/href</a></iframe><p>위의 코드는 splice를 비슷하게나마 구현해본 코드이다. 물론 js에 구현된 splice는 위의 코드보다 성능이 좋겠지만 그걸 고려하더라도 spice를 호출하면 생각보다 많은 작업을 한다. 그래서 그때그때 리스트의 item을 수정하는 것보다 소수가 아닌 숫자는 0으로 값을 초기화한 다음 filter 함수로 소수리스트를 만드는 것이 성능에 좋다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*HAK8u4xbzQWeXPTfEbJ6Tg.png" /></figure><p>위의 처리 결과를 확인해보면 prime2에서 n의 제곱보다 낮은 수는 소수라고 했는데 prime4는 이를 적용하여 n의 제곱 주소부터 소수가 아닌 수들을 0으로 값을 초기화하는 것을 확인할 수 있다.</p><p>prime4까지 소수를 구하는 함수의 성능을 패턴을 발견해 이를 알고리즘에 반영하면서 높이고 있습니다. 저는 생각지도 못했던 방법으로 성능을 개선해나가는 과정을 보면서 어쩌면 여태까지 제가 구현했던 코드들도 개선의 여지가 있었을지 모른다는 생각을 했습니다. 아는 만큼 보인다는 말이 실감이 났고 이것들을 저도 볼 수 있도록 끊임없이 노력하는 자세로 임해야겠다고 다짐했던 시간이었습니다.</p><p>CodeSpitz는 늘 적당한 고민을 할 때마다 고민에 대한 방향을 제시해주는 장소여서 항상 감사하게 생각하고 있습니다. 늘 다양한 주제로 스터디가 열리기 때문에 일만 생각하고 그저 지금 당장 해결해야 되는 일에 대해서만 생각했던 저를 좀 다른 시각에서 접근하게 하는 방법 또는 좀 더 구체적으로 문제에 대해서 고민해 볼 수 있는 환경을 만들어주기 때문에 좋았었는데 이번 주제는 좀 더 여운을 길게 남기고자 기록을 하게 되었습니다.</p><p>끝까지 읽어주셔서 감사합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b7a5faa7c20b" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[나에게 마감이란..]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%98%EC%97%90%EA%B2%8C-%EB%A7%88%EA%B0%90%EC%9D%B4%EB%9E%80-56049cd41ba9?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/56049cd41ba9</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Sat, 16 Mar 2019 18:47:05 GMT</pubDate>
            <atom:updated>2019-03-16T18:49:48.025Z</atom:updated>
            <content:encoded><![CDATA[<p>내가 일을 하면서 가장 집요하게 따지려 노력하는 것들이 있다. 바로 <strong>기획</strong>과 <strong>마감 일자</strong>이다. 기획은 마감 일자 내에 나의 스케줄을 어떻게 짜야 마감을 지킬 수 있는지에 대한 지표가 되는 것이다. 그래서 나는 기획이 나오지 않고 기획을 바탕으로 마감 회의를 진행하지 않으면 개발을 하지 않고 이 부분부터 마무리 지으려고 노력하고 있다. 이러한 일련의 작업은 내가 항상 고민하는 주제에 대해서 내린 선 작업에 가깝다.</p><h4>회사는 자선단체가 아니다!</h4><p>근본적으로 회사는 이윤을 창출하는 것이고 나라는 사람에게 연봉을 제시하는 금액 이상의 이윤을 얻기 위해서 나라는 존재를 고용하게 된다. 그렇기 때문에 회사는 나에게 지급하는 월급 이상의 무언가를 바라는 건 지극히 당연한 행위이고 그렇기 때문에 채용된 나는 개발자이기 이전에 회사 이윤에 기여를 해야 된다.</p><p>그럼 내가 기여하는 방법은 무엇일까? 라는 고민을 해본 적이 있다. 작업하는 것들이 회사에 어떠한 형태로 이익이 되는지 프로젝트를 시작하는 시점에서는 알기 어려운 경우가 나에게는 대부분이었기 때문에 내가 할 수 있는 업무는 주어진 기획을 바탕으로 사측에서 정한 마감 일자에 대한 내용을 검토하고 이로 인해서 발생할 수 있는 가능성에 대해서 인지시키고 마감 일자와 제품의 퀄리티 중에서 어떠한 부분을 포기하고 어떤 부분에 집중할 것인지에 대한 내용을 제시할 필요가 있다. 난 그러기 때문에 기획 회의를 포함한 프로젝트에 관련된 모든 회의에 참여하는 것을 당연하게 생각한다.</p><p>그렇게 모든 인원이 결정한 일정에는 꼭 지켜야 하는 것이 당연하다. 이게 내가 회사에 보여줄 수 있는 최선이기 때문이다. 물론 기획에서 정한 내용대로 프로그램이 동작하는 건 당연하게 생각하여야 한다.</p><h4>제품의 기획을 물고 늘어져라.</h4><p>기획을 바탕으로 아래의 과정을 협의하면서 기획 의도를 파악하고 나의 작업량을 책정한다. 단 만들어진 기획을 무조건 부정하라는 것은 절대 아니라는 것을 명심했으면 한다.</p><ol><li>기획을 검토하여 개발에서 구현해야 하는 내용이 부실한 것들에 대한 것을 파악하자.</li><li>기획을 바탕으로 개발 가능한 일감의 형태로 분해하여 작업량과 개발 공수를 파악한다.</li><li>주어진 일정에서 해결할 수 있는 것과 없는 것을 결정한다.</li></ol><p>위와 같은 것들을 정하고 나면 마감 일자까지 내가 해야 되는 것들이 명확해진다. 그리고 나는 그것을 완수하면 된다.</p><p>돈이 많은 대기업이라면 다르겠지만 상대적으로 여유롭지 못한 기업들은 빠르게 제품을 생산하여 시장에서 검증하는 방법들도 많이 사용한다. 그런 회사의 운영진이 원하는 것은 코드의 퀄리티보다는 가능한 빨리 제품이 생산되어 비용을 줄이는 것이 더 중요할 수도 있다. 이에 따라 개발자 또한 조직마다 추구하는 것들이 달라질 수 있다는 것을 명심해야 한다.</p><h4>예상하지 못한 일이 일어났다!!</h4><ul><li>개발 도중 기획 의도가 달라진 경우</li><li>개발 도중 비지니스 규모가 축소된 경우</li><li>개발 도중 개발에 관련된 문제가 발생하는 경우</li><li>다른 업무가 우선순위가 높아지는 경우</li></ul><p>위에서 말한 문제 말고도 다양한 문제들이 항상 나의 마감을 방해한다. 물론 그때그때 대처하는 경우도 달라진다. 예전에 내가 겪었던 문제에 대해서 말해보자면 갑자기 3주 만에 프로젝트를 완성해 달라는 요청으로 개발을 진행했는데 매일 상시업무가 치고 들어오면서 매일 야근과 주말 출근을 병행하여 프로젝트를 만든 경험도 있다. 물론 그때 내가 업무를 재조정하거나 업무를 분담하는 방법으로 유연하게 대처하는 방법도 있었겠지만 대부분 한번 정한 일정은 바꾸기 어려운 것이 현실이고 대부분의 개발자가 다양한 이유를 들어 야근한다. 야근해서라도 지킬 만큼 마감은 중요하다.</p><h4>마무리</h4><p>나는 위와 같은 내용 때문에 내가 결정한 일정에 대해서는 항상 두렵다. 내가 회사에 보여 줄 수 있는 가장 최선의 노력이자 목표이기 때문이다. 이것을 한번 지키지 못하면 신뢰는 깨지고 의심이 쌓여간다.</p><p>이렇게 자신 있게 말했다고 내가 능력이 좋아서 마감을 잘 지키냐 하면 또 그렇지는 않다. 항상 일정에는 문제가 생기고 다양한 것들이 영향을 끼친다. 그리고 문제가 꼭 회사에서만 생기는 것도 아니라서 늘 자신 없는 것도 사실이다. 하지만 나는 늘 마감과 싸울 것이고 최대한 해결하려고 노력하고 있다.</p><p>마지막으로 모든 내용은 나의 개인적인 생각이고 경험담이기 때문에 꼭 정답은 아니라는 것을 말하고 싶다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=56049cd41ba9" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 느낀 비전공자 신입의 문제점]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%B4%EA%B0%80-%EB%8A%90%EB%82%80-%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90-%EC%8B%A0%EC%9E%85%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90-70c6cfb6626?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/70c6cfb6626</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Tue, 12 Feb 2019 09:33:46 GMT</pubDate>
            <atom:updated>2019-02-13T04:33:05.435Z</atom:updated>
            <content:encoded><![CDATA[<p>개발 인력이 없다는 명목 아래 수많은 학원이 생겨나고 있고 난 그런 학원의 광고를 볼 때마다 기분이 좋진 않다. 광고들을 보면 누구나 개발자로 전향할 수 있다는 식의 홍보문구들이 있는데 이 부분이 굉장히 불편하다. 세상의 어느 전문직종이 겨우 3개월에서 6개월을 집중훈련을 받아 전문가로 일을 할 수 있다니 정말 의심스럽다. 물론 나도 국비 지원이라는 것을 통해서 개발자로 처음 입문하였지만 여기서 학원에서 교육받는 내용만으로는 채워지지 않는 부분에 대해서 얘기하고자 한다.</p><h4>기본 지식의 부재로 인한 어려움</h4><p>학원을 막상 수료하면 과연 개발자로 일할 수 있을까? 라는 고민을 하게 된다. 하지만 취업을 한다고 그 고민이 해소되거나 줄어들지는 않는다. 오히려 좀 더 확장되어 나를 괴롭히는 족쇄로 작용한다. 그 이유에는 학원에서 배운 내용만으로는 업무를 진행하기 어렵다. 만약 나처럼 벤처나 스타트업으로 취업한다면 더 괴로워질 수 있다. 난 학원 수업내용조차 다 소화를 못 했고, 기본지식인 스택과 큐도 모르는 상태에서 친구의 빽으로 회사에 취업했다. 이런 상황이다 보니 회사는 나에게 시킬 수 있는 업무가 자체가 없었다. 업무를 설명할 시간에 작업을 하는 것이 더 빠를지도 모르는 것들이 많았다. 그러다보니 자연스럽게 나의 첫 업무들은 업무지원, 서버 OS 설치, 정부 과제 문서정리 같은 개발과 관련된 지원 업무였다. 그 당시 회사에서 제일 힘든게 회의 내용을 이해하는 것이었고, 나는 학원에서 배운 것이라도 이해하기위해서 노력했고 이를 바탕으로 하나하나 채워나갔다. 이렇게 나는 업무를 시작했고 다행히 회사는 나를 가르쳐 써먹기 위해 많은 시도를 했고 다행히 개발 업무까지 할 수 있었다.</p><p>개발을 시작했다고 하더라도 문제가 해결되지는 않는다. 기술 지식의 부재는 내 주장을 펼쳐나가는 것에도 많은 영향을 끼친다. 일하면서 “웹 클라이언트에서 js파일을 보지 못하게 바꿨으면 좋겠다.”라는 말을 들었다. 이 문제를 해결할 수 없다는 것을 알고 있었으나 기술적으로 설명할 수 없어 멍때리고 있었던 기억이 있다. 이런 사소한 문제들이 쌓여 나를 괴롭혔다.</p><h4>학습한 기술 스택이 너무 힙하거나 너무 오래된 문제</h4><p>학원에서 배우는 것들이 반드시 회사에서 사용하는 기술은 아니다. 같은 기술 스택이더라도 메인 버전이 다르다면 개발 방법은 많이 달라진다. 하지만 학원에서 배우는 기술 스택의 기준은 철저하게 강사에게 의존할 수 밖에 없다. 문제는 기술스택이 너무 힙하거나 너무 오래되었다는 것에 문제가 온다. 이 문제는 회사에 들어가서 개발을 진행하다 보면 문제가 된다. 나와 같은 학원 수료생이라면 학원 강사님의 프로젝트 구조가 전부인 상태이다. 나는 학원에서 Java, Spring을 학습해서 취업했는데 하필 그 타이밍에 Spring이 maven/gradle로만 배포를 하게 되었고 학원에서 package manager를 배우지 못했던 나는 다운을 받을 수 없다는 헛소리를 회사에 했던 기억이 있다.</p><p>그나마 나처럼 같은 기술 스택인 회사에 취업하면 그나마 다행이지만 다른 기술 스택으로 개발을 해야되는 회사라면 문제는 더 깊어진다. 새로운 프레임워크를 학습하는 수준이 아닌 새로운 언어까지 학습해야 되는 수준이라면 생각만해도 아찔하다. 실재로 같이 스터디를 했던 아는 형님은 자바 교육과정을 거쳐 php/laravel을 사용하는 회사로 취업을 해 새로 공부하면서 개발자 커리어를 시작한 케이스도 있다. 나였다면 아마 불가능했을거라 생각하고 있기 때문에 그 형님이 대단하다고 생각한다. 그 당시 혼자 학습하는 습관이 생기지 않아 사용하던 언어를 제외한 다른 언어를 습득하는 것 자체가 불가능한 상태였기 때문이다. 다양한 경험의 부재로 오는 상태인 이 문제는 공부밖에 답이 없다.</p><h4>개발 말고도 공부할 것이 많은 회사생활</h4><p>대부분 회사는 서비스업을 주업으로 하는 회사이다. 그럼 개발지식을 제외한 서비스 만의 지식을 배워야 업무를 이해할 수 있다. 이를 도메인 지식이라고 하는데 이것들은 회사에서 개발하는 소스에 많은 부분이 녹아들어 있다. 결론은 업무를 모르면 개발을 할 수 없다는 소리가 된다. 나는 신입으로 회사에 들어가는 분께 이런 조언을 한다. 회사에서 사람들이 주로 말하는 용어 및 회사의 업종과 관련된 지식을 먼저 학습하라고 한다. 이는 개발지식보다 선행되어야 된다. 왜냐하면 도메인 지식을 모르면 회사에서 하는 모든 회의 및 대화를 이해하기 어렵기 때문이다. 이렇게 되면 내가 무슨 개발을 해야 되는지 멘붕에 빠지는 사태를 유발하기 때문에 이 부분에 대한 학습은 선택이 아닌 필수가 된다.</p><p>나는 위의 문제를 하나하나 접해가면서 개발자로 커리어 전환을 하였다. 하지만 개발자는 학원의 자극적인 광고만 보고 접근하기엔 위험이 많이 따른다. 그럴 수 밖에 없는게 평생 공부하고 개선하는 과정들을 개발자를 그만두는 그 순간까지 반복해야만하기 때문이다. 나는 첫 회사를 다니면서 2년 동안 개인적인 시간이 거의 없었다. 집에 11시에 들어가면 어머니께서 오늘은 일찍 들어왔다고 말씀하실 정도였다. 일을 위해서 많은 것들을 포기했고 이런 과정들을 지나온 나로서는 학원의 자극적인 광고가 정말 와닿지 않는다. 하루가 멀다하고 학원에서 쏟아져나오는 사람들은 대체로 3년을 버티기가 쉽지않다. 위에서 내가 언급한 문제뿐만 아니라 업무강도도 타 직업군에 비해서 더하면 더했지 덜하지 않기 때문이다. 이는 미디어에서 노출되는 것처럼 행복한 것들만 존재하지 않는다는 것이다. 물론 좋은 점도 많이 있지만 개발을 하는 행위 자체가 취미가 될 수 있는 사람에게나 가능한 장점이 더 많다.</p><p>만약 개발자로 커리어를 전환하고자 하는 사람들이 있다면 왜 개발자여야만 되는지에 대한 이유와 왜 개발자가 되고 싶은 이유를 꼭 생각하고 선택을 했으면 좋겠다. 자신이 지금까지 쌓아 올린 것은 충분한 이유가 있고 나름에 결과이다. 나도 동생을 개발자로 만들려고 시도했었지만, 동생은 자신과 맞지 않는다는 것을 공부하면서 느꼈고 미련 없이 자신의 일상으로 돌아갔다. 이처럼 개발자는 직업의 한 종류일 뿐이지 모든 것을 해결하는 만능은 아니기 때문이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=70c6cfb6626" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 개발자로 일할 수 있게 만든 3명의 귀인]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%B4%EA%B0%80-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%9D%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B2%8C-%EB%A7%8C%EB%93%A0-3%EB%AA%85%EC%9D%98-%EA%B7%80%EC%9D%B8-14595de608cf?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/14595de608cf</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Mon, 11 Feb 2019 00:45:40 GMT</pubDate>
            <atom:updated>2019-02-11T00:45:40.199Z</atom:updated>
            <content:encoded><![CDATA[<p>나는 이전 글에서 밝혔지만 개발을 처음 배울 때 우여곡절이 많았다. 개발을 배우기 전 나는 인생에 대해서 그렇게 큰 고민이 없었다. 다르게 말하면 목표도 없고 그냥 하루하루를 살아가는 구성원에 불과했다. 남들이 소위 말하는 노가다 즉 건설업종에서 일용직으로 근무하고 있었으며 그것에 대해 크게 불만도 없이 하루하루를 주어진 환경 내에서 성실히 살아가고 있었다. 그러다 문득 현재 생활에는 만족하고 있었으나 주변을 돌아보니 크게 2가지 문제에서 심각성을 느끼게 된다.</p><ol><li>지금은 재밌지만 40대 이후에도 타지생활이 과연 괜찮을까?</li><li>일하는 사람들에게서 배울 것이 별로 없었고 그들과 동화되고 싶지 않았다.</li></ol><p>여관 살이도 좋고 타지 생활도 좋았다. 분기마다 지역을 이동하면 맛집도 돌아다니고 새로운 것들도 구경하고 하는 모든 것들이 늘 새로워서 좋았다. 하지만 가정이 생기고 나이를 먹어가면 그렇게 좋지만은 않다는 생각이 들었고 가장 큰 문제인 주변의 환경이 좋지 못했다. 나는 이때 월급날 다음날이 제일 싫었던 것으로 기억한다. 팀에 있던 형이나 삼촌이 월급날만 되면 사라졌다. 오죽하면 막내인 내가 1년 동안 모은 금액이 제일 많았다. 돈을 많이 모았다고 유세부리는게 아니라 그곳에선 일이 힘들다 보니 일탈에 빠질 확률이 높았다. 이곳을 탈출하고자 확신했던 건 같이 일했던 삼촌과 같이 갔던 경마장의 사람들을 접하고 나서이다. 나도 이렇게 변할까 봐 무서워 다음 해 1월에 일을 그만두고 서울로 상경하게 된다.</p><h4>첫 번째 귀인</h4><p>나의 첫 번째 귀인은 고등학교 동창인 친구이다. 그 당시 IT업체에서 디자이너로 근무하고 있던 친구가 개발을 배워서 같이 게임을 개발해보지 않을래? 라는 말 때문에 꿈을 가지게 되었다. 하지만 개발에 문외한이었던 친구는 나에게 자바 웹 개발과정에 관련된 학원을 알아봐 주었고 현재는 게임과는 거리가 먼 웹 개발자로 일을 하고 있다.</p><p>친구는 나를 공부시키기 위해서 많은 것을 포기하고 나에게 도움을 주었다. 최근에 친구에게 다시 물었던 적이 있었다. “넌 내가 할 수 있을지 어떻게 알고 도와준 거냐?”라고 물으니 “글쎄 넌 하면 될거 같은데 목표가 없어 보였었다.”라는 답변을 들었다. 지금은 웃으면서 말하지만 정말 이 친구에게는 머라 감사해야될지를 지금도 모르겠다.</p><p>이렇게 26살 적당한 나이에 개발자라는 꿈을 친구를 통해서 만들어졌고 현재는 그때의 선택이 내 인생에서 큰 기회를 잡은 날이라고 말하고 싶다. 물론 지금의 자리까지 오기까지 쉽진 않았다. 하지만 이 친구가 아니었다면 난 지금 전혀 다른 인생을 살고 있었을지 모른다.</p><h4>두 번째 귀인</h4><p>나의 두 번째 귀인은 신입 개발자 시절 같이 스터디를 했던 대학생인 H였다. 나의 학원시절을 이전글에서도 밝혔지만 노답인 상태로 수료했고 그 상태로 취업을 하게 되었다. 그러다 보니 당시 소장님은 스터디라도 해보라고 권유를 했고 나는 웹상에서 스터디 그룹을 만들게 되었다. 그곳에서 나는 두 번째 귀인인 H를 만났다. 솔직히 H에게서 느낀 나의 첫 감정은 무서움이었다. 그 당시 내가 만나 볼 수 있었던 대학생은 H 한 명이었고 하필 실력이 너무 출중했다. 대학교 다니면서 외주도 하고 창업까지 했던 재원이었다. 기준이 없었던 신입 시절이다 보니 전국의 대학생들이 다 저 정도일 거라고 나는 착각을 하게 되었고 많은 시간 개발 공부에 투자하게 되었다.</p><p>정말 처음에는 이 길이 맞는지에 대한 의문을 많이 가지면서 공부했고 이는 지금도 마찬가지다. 하지만 H 덕분에 개발에 좀 더 진지하게 몰입할 수 있었다. 그렇게 나는 부족함을 알고 개인 시간을 줄이기 시작했고 회사뿐만 아니라 집에서도 공부할 수 있는 환경을 만들기 위해서 노력했다. 그렇게 나는 학원에서 배운 내용을 한 달 만에 정리하고 업무에 관련된 공부를 하나씩 쌓아나갔다.</p><h4>세번째 귀인</h4><p>세 번째 귀인은 지금도 늘 죄송한 마음 반 감사한 마음 반으로 생각하고 있는 첫 회사의 사수였다. 지금 내가 행하고 있는 모든 행동의 기초를 만들어 주셨고 어디 가서 개발자 소리를 들을 수 있게 만들어주셨다. 하지만 이 능력은 첫 회사에서는 개화되지 않았었다. 덕분에 민폐만 끼친 기억밖에 생각나지 않는다.</p><ol><li>개발보다는 제품을 완성하는 것에 집중해야 되며 그렇기 위해서는 커뮤니케이션이 제일 중요하다.</li><li>작업하는 모든 일을 시간단위까지 쪼개서 관리해야 된다.</li><li>업무 일지 쓰는 법 - 개발자가 아닌 직군의 사람들에게 나의 업무를 설명할 수 있게 작성한다.</li></ol><p>사수는 늘 “<strong>개발하지 말고 일을 하라!</strong>”는 말을 강조했던 걸로 기억한다. 내 기억이 잘못 됐을 수도 있고 내가 다르게 해석한 내용을 기억하고 있을 수도 있다. 하지만 이 문장은 후에 나에게 많은 도움을 주었고 내가 개발자로 살아남는데 가장 큰 역할을 하였다. 개발도 개발이지만 업무를 하는 방법에 대해서 많이 배웠고 이 모든 것은 지금의 나를 만든 발판이 되었다.</p><p>동기부여를 얻는 방법은 누구나 다르겠지만 나는 세 사람을 통해서 꿈을 꾸고 꿈에 대해서 진지해졌으며 꿈을 실현하는 방법들을 배우게 되었다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=14595de608cf" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 혼자가 아닌 팀으로 개발을 했던 경험]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%B4%EA%B0%80-%ED%98%BC%EC%9E%90%EA%B0%80-%EC%95%84%EB%8B%8C-%ED%8C%80%EC%9C%BC%EB%A1%9C-%EA%B0%9C%EB%B0%9C%EC%9D%84-%ED%96%88%EB%8D%98-%EA%B2%BD%ED%97%98-45dc6f498ee5?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/45dc6f498ee5</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Wed, 30 Jan 2019 02:17:23 GMT</pubDate>
            <atom:updated>2019-01-30T02:17:23.931Z</atom:updated>
            <content:encoded><![CDATA[<p>남들에게는 당연한 경험일지도 모르겠지만 소규모 스타트업에서만 일해본 나에게는 같은 코드를 여러 사람이 작업하는 것은 불가능한 일이지만 무슨 자신감 인지 상황이 닥치면 할 수 있다고 믿었고 충분히 잘할 수 있다고 생각했지만 겪어본 팀 작업은 생각처럼 간단하지 않았다.</p><h3>혼자 개발 했던 방법</h3><p>일단 혼자 개발을 해도 어느 정도의 구간을 정해서 작업을 했었다. 크게 4가지의 단계로 구분할 수 있다.</p><ul><li>2주를 기준으로 정리한 일정</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Ji7TuCfCHq0p3K5xTuva8g.png" /></figure><ol><li>요구사항 확인: 2 ~ 3일</li><li>개발: 3 ~ 일</li><li>QA: 1 ~ 2 일</li><li>리팩토링 2 ~ 4일</li></ol><p>위의 일정은 실제로 내가 사용했던 일정의 모습이고 모든 일정이 그렇진 않지만, 평균적으로 사용했던 일정의 모습이고 개발 내용이 많다면 다른 일정도 비슷한 비율로 늘어나는 편이다.</p><p>만약 신규 프로젝트라면 여기에 프로젝트를 셋팅하는 일정 또한 포함한다. 이 기간은 대부분 5일 이상을 잡는 편이며 기존에 자주 사용했던 프로젝트 셋팅이라면 금방 끝나지만 그게 아니라면 여러 가지를 시도해보고 구조를 다듬을 시간이 필요하기 때문에 시간을 넉넉하게 잡는 편이다. 자주 사용했던 프로젝트 셋팅이라도 이번 프로젝트에서 다르게 적용해야 되는 부분 및 개선할 부분이 없는지도 같이 고민하기 때문에 대부분 시간은 모자라다.</p><h4>요구사항 확인</h4><p>나는 손으로 무언가를 적거나 기록하는 것으로 많은 것을 처리하는 편이다. 그래서 대부분 문서는 출력해서 너덜너덜해질 때까지 먼가를 기록하고 프로젝트의 시작과 동시에 사용해서 끝이 날 때까지 함께한다.</p><p>나의 요구사항을 확인하는 기준은 딱 하나다. 기획자 혹은 이 프로젝트의 지시자가 원하는 내용을 알 때까지 물어본다. 즉 프로젝트의 이해도가 존재하지 않으면 그 어떤 개발도 시작하지 않는다. 주로 묻는 질문은 다음과 같다.</p><ol><li>요구사항을 이해하기 힘든 경우</li></ol><p>2. 요구사항에서 누락 된 것 같은 경우</p><p>3. 현 구조에서 구현하기 힘든 경우</p><p>4. 현재 정해진 일정에서 구현해야되는 내용과 미뤄지는 내용의 구분</p><p>1, 2번 같은 내용은 취합해서 질문하면 바로바로 답변이 오는 문제이기 때문에 넘어가고 3번 같이 현 구조에서 구현하기 힘든 경우 혹은 정해진 일정 내에 끝내기 어려운 경우 이것에 대해서는 짚고 넘어가야 한다. 하지만 이 부분이 꼭 필요하다고 한다면 다른 방법을 모색할 필요가 있다. 왜냐하면 일을 나에게 주는 분들은 나보다 상급자일 가능성이 매우 높고, 나보다 바쁘면 바빴지 한가한 분들이 아닐 가능성도 매우 높다. 그렇기 때문에 상급자의 시간을 많이 뺏을 수는 없기 때문에 대처 방안에 대해서는 좀 고민을 해보고 가는 편이 좋다. 난 주로 A 안과 B 안을 정해 문제에 대해서 해결할 방안을 제시한다. 물론 내가 만든 안건이 무조건 통과되는 것은 아니다. 하지만 상급자는 문제를 필터링한 의견을 들을 수 있어서 좋고 나는 어차피 구현해야 하는 내용에 대해서 좀 더 이해할 수 있기 때문에 좋다.</p><p>그리고 4번 제일 중요한 일정에 관련된 문제이다. 모든 프로젝트는 정해진 일정 내에 필요한 기능을 완성해야 한다. 그렇기 때문에 작업량을 정하는 문제는 늘 중요하게 생각해야 한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/534/1*Ytw07oU4mDpHSgtdanaXTg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_j1zePPPgX0PeVgtOoDTkw.png" /></figure><p>그렇기 때문에 나는 작업 시간이 왜 이렇게 필요한지에 대한 문서를 기록하고 남기는 작업을 했었다. 위는 사진은 실제로 개발에서 필요한 시간 및 명세를 캡처 한 것이다.</p><p>마지막으로 위에서 언급한 1~3번에 대한 것을 요구사항 확인 구간에서 매일 회의 일정을 잡았다. 이렇게 이 구간이 끝나면 일정에 대한 문서를 가지고 4번에 대한 내용을 논의하면서 이번 싸이클의 개발 내용을 정하게 된다.</p><h4>개발</h4><p>개발 구간에서는 별 특이점이 없는 한 이전 구간에서 만든 문서를 바탕으로 개발을 진행한다. 개발 일정은 보통 1.5에서 2배수로 잡았고 이전 회사에서는 개발 일정을 딱 맞게 정해서 가면 사수님이 고맙게도 1.5에서 2배수로 늘려주셔서 개발에 좀 더 신경 쓸 수 있었다.</p><p>넉넉한 시간은 나에게 많은 시도를 할 수 있는 환경을 제공한다. 만약 내가 생각했던 문제보다 일의 규모가 크거나 혹은 알 수 없는 문제에 봉착한다면 이 시간은 충분히 고민하고 해결해나는 밑거름이 되기 때문이다.</p><p>만약 좀 빠듯한 일정을 진행 중이라면 쉽게 끝나는 문제들 위주로 빠르게 처리하면서 시간을 세이브하여 난이도 있는 문제에 사용하는 것도 중요한 방법이다. 하지만 일정은 있지만 일정 따위는 무시한 과도한 업무라면 방법은 없다. 야근을 할 수밖에…..</p><h4>QA</h4><p>여태까지의 모든 업무는 개발을 완료하고내가 QA를 먼저하고 상급자에게 보고하면서 상급자가 QA 하는 방향으로 진행되었다. 상급자가 QA를 하는 구간에는 나는 코드 리팩토링을 같이 진행했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_-Izzu-ZNBeV4bm1iQutMQ.png" /></figure><p>시간적 여유가 된다면 위와 같이 테스트해야 할 항목을 QA 구간 혹은 요구사항 확인 구간에서 만들었다. 업무에서 사용되는 항목은 좀 더 구체적이며 세분화되어 있다. 난 혼자 개발하다 보니 테스트 코드를 작성할 시간적 여유가 없었다. (지금 생각해보면 핑계지만 …) 그렇기 때문에 테스트 항목에 대한 것만이라도 충분히 기록하기 위해 노력했다.</p><h4>리팩토링</h4><p>리팩토링은 무슨 기준이 있어서 했던 것은 아니지만 개발 구간에서 추가된 코드를 2번 3번 반복해서 읽으면서 좀 더 개선할 곳이 없는지, 급하게 진행하여 반복된 코드가 없는지 혹은 현재 사용한 변수명이 과연 맞는지 그리고 폴더구조가 과연 맞는지 같은 고민하는 과정을 거치면서 향후 3개월 혹은 1년 뒤에 봤을 때 알아볼 수 있도록 노력했다.</p><h3>팀으로 개발 했던 방법</h3><p>난 이직할 때 팀 작업 경험이 없기 때문에 좀 어려울 것이라는 이야기를 종종 듣곤 했다. 솔직히 그 당시에는 별생각이 없었고 문제없이 진행할 수 있다고 생각했다. 하지만 팀으로 작업하는 것은 개인이 혼자 진행하는 것과는 많은 것들이 달랐다. 코드에 관련된 의사결정이 주로 혼자 하는 상황에서 작업한 나는 처음에는 작업속도가 더디게 느껴졌지만, 리뷰를 통해서 다듬어지는 코드를 보면서 팀 작업의 묘미를 맛보게 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/766/1*5ED0lktGGoqO8gjWakxlQw.png" /></figure><p>위 스크린 샷은 개인적으로 진행했던 스터디에서 했던 리뷰내용이다.</p><p>처음에는 각종 툴이 어렵게 느껴졌고 구글독에 많은 의존도를 가지고 있던 난 툴로 진행되는 업무가 막연하게 느껴졌다. 그래서 아직 업무 진행방법에 대한 정리가 덜 되었지만, 팀으로 작업해서 느낀 점을 말해보고자 한다.</p><h4>팀으로 작업하면서 내가 느낀 장점</h4><p>항상 내가 작업한 코드가 과연 맞는건가라는 의문점을 가지고 있었는데 그 문제에 대한 부분이 크게 해소되었다. 내가 아닌 다른 사람의 시각에서 리뷰되는 내용은 나에게 많은 자극을 주었다. 물론 처음에는 마음의 상처를 많이 받았다.</p><p>혼자서 주먹구구식으로 관리하던 일감을 좀 더 체계적으로 관리하고 공유하게 되었다. 혼자 작업을 하다 보면 큰 작업으로 진행되었던 경우가 많았는데 지라를 사용하여 작은 단위까지 관리되는 일감을 통해서 내가 현재 무슨 업무를 처리하고 있는지를 좀 더 명확하게 파악이 가능해졌다.</p><p>기술에 대한 내용을 공유하고 발표하는 자리를 통해서 자극을 받고 새로운 것을 학습해나가는 것들이 당연하게 느껴지는 환경에서 근무하다 보니 소규모의 회사에서 일했을 때 느끼지 못했던 자극이었고 더불어서 항상 머릿속으로 생각하던 나의 문제점을 좀 더 구체적으로 확인하는 계기가 되기도 했다.</p><h4>팀으로 작업하면서 느낀 나의 문제점</h4><p>신입 때부터 지금까지 프로젝트의 첫 삽부터 관리까지 혼자 진행했던 경험이 많다 보니 나 개인의 성향이 많이 반영된 코드 스타일로 진행되었다. 그렇다 보니 전 회사에서 인수인계 도중 일반적인 코드 스타일이 아닌 나의 성향이 많이 반영된 코드 같다는 지적을 받은 경험이 있다. 하지만 팀 작업을 하면 여러 명이 같은 코드 스타일로 작업하게 되기 때문에 이 문제를 정면으로 마주하게 된다.</p><p>한 번에 작업하는 코드의 양이 많다. 나는 업무의 분할 혹은 일정 관리에 대해서는 나름 자신 있다고 생각했으나 이게 팀 작업으로 넘어갔을 때 내가 나눈 업무보다 더 작은 단위까지 내려가야 했기 때문에 우물안 개구리 같은 기분을 받았다.</p><p>git을 사용하는 방법이 잘못되었다. 혼자 작업할 때는 개발 버전과 상용 버전의 히스토리 정도로만 사용했지만, 팀 작업에서는 git의 여러 가지 것들을 사용하게 되었고 업무를 마무리하는 방법도 달라졌다.</p><p>마지막으로 기술에 대한 공유나 발표 자리가 늘 있다 보니 가장 근본적인 문제에 대한 심각성을 많이 느끼게 되었다. 기술의 근간 기술에 대한 이해 및 고유명사에 너무나도 약한 나 자신을 마주하게 되었다.</p><h3>마무리</h3><p>아직도 많은 것들이 어색한 상황이고 준비해야 할 것들이 다수 존재하지만 옆에서 물씬 양면 도와주는 동료들이 있어 잘 해쳐나갈 수 있다고 생각한다. 현재는 혼자서 했던 방법들을 개선 혹은 버리면서 하루하루 많은 생각을 하고 있다. 아직은 쌓인 것들이 부족해 정리할 것들이 부족하지만 많은 문제들을 해결해 나가면서 나 자신만의 팀 업무 스타일을 만들어나가고자 한다.</p><p>이 글을 보는 모든 사람이 혼자 의사결정을 하고 혼자 작업을 하는 환경에서 벗어나 작지만 팀에서 일하고 같은 작업물을 같이 만들어나가는 작업을 통해서 발전해 나갔으면 좋겠다고 생각한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=45dc6f498ee5" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 다닌학원 이야기]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%B4%EA%B0%80-%EB%8B%A4%EB%8B%8C%ED%95%99%EC%9B%90-%EC%9D%B4%EC%95%BC%EA%B8%B0-c2b2eb61a984?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/c2b2eb61a984</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Tue, 22 Jan 2019 15:06:38 GMT</pubDate>
            <atom:updated>2019-02-20T05:32:34.985Z</atom:updated>
            <content:encoded><![CDATA[<h3>내가 다닌 학원 이야기</h3><p>개발 커뮤니티라면 잊을 만 하면 한 번씩 올라오는 질문이 있다. 바로 학원 선택에 관련된 질문들이다. 난 국비 지원의 혜택으로 여기까지 온 개발자 중 한 사람이지만 국비 지원 학원에 대해서는 좋은 감정이 별로 없다. 하지만 개발을 이제 막 시작하고 싶은데 어떻게 해야 되는지 고민이라면 충분히 괜찮은 선택이라고 생각하고 이글을 통해 나의 학원 생활을 두서없이 써내려가고자 한다.</p><h4>생각하기조차 싫은 첫 번째 학원</h4><p>나는 개발이라는 것을 IT 벤처회사에 근무하고 있던 친구 때문에 알게 되었고 학원 또한 친구가 알아봐 주었다. 강동에 있던 지금은 학원 이름조차 기억이 나지 않는 그런 곳이었다.</p><p>이 학원은 제일 짜증 났던 이유는 커리큘럼에 대한 개념이 전혀 없는 곳이었다. 자바 스프링 6개월 과정에서 c를 배우면서 한 달을 넘겼다. 하지만 여기서 접한 c 강의가 제일 괜찮은 강의였고 이 이후를 보내면서 막장을 달리게 된다. 학원 선생님이 커리큘럼에 대한 개념이 없으면 어떻게 되는지를 몸으로 체험했다. if 분기로 만드는 자판기 예제를 일주일 내내 주구장창 반복했다. 기간이 정해진 수업에서 이런 상황이 벌어지니 학생들은 굉장히 불안감에 휩싸이게 되며 그 당시 나를 포함한 학생들은 학원에 항의했고 문제는 점점 심각해져 갔다.</p><p>그 당시 학원은 이 문제에 대해서 학생들과 소통하면서 해결해나가고자 했으나 의도와는 다르게 최악의 결과를 가져왔다. 학원 수업을 오전 오후 이렇게 투 트랙으로 수업을 진행했는데 오전 수업이 자바고 오후 수업이 Spring였다. 자바 Exception조차 몰랐던 우리는 그냥 화면에 있는 코드를 따라치게 되었고 이 시점에서 도저히 진도를 맞출 수 없었던 나는 학원을 그만두게 되었다.</p><h4>두 번째 학원</h4><p>다음에 다니게 된 학원은 kosta java web framework &amp; 안드로이드 개발자 양성 과정이었다. 구디에 있는 캠퍼스였고 그 당시 집에서도 굉장히 가까웠다. 정해진 커리큘럼에 의해서 진행되었고 학원 특성상 진도가 굉장히 빨랐다. 지금 생각해도 잘하는 친구들이 많았고 나만 공부하면 모든 것이 행복해지는 순간이었지만 인생은 드라마처럼 잘 풀리진 않는 것 같다. 초반 수업까지는 재밌게 잘 따라갔는데 자바 스윙부터 진도를 못 따라가게 되고 웹으로 넘어가고 배워야 하는 기술들이 많아지면서 나는 하나둘 공부에 흥미를 잃고 만다.</p><p>그렇게 나는 점점 뒤처져가는 일반 학생이 되어버렸다. 진도를 못 따라가게 된 난 어디서부터 어떻게 해야 할지 모르는 학원 수업에서 점점 지쳐가 지각도 잦아지고 흥미를 잃어버리게 된다. 그렇지만 다행히도 바로 취업을 하게 되어 개발자 생활을 지금까지 이어가고 있다.</p><h4>학원 생활을 통해 배우는 것</h4><p>위에 부정적으로 적었지만, 학원 생활이 지금의 나를 만들게 해준 것은 변함이 없다. 개발을 처음 시작하는 분께 내가 학원을 권하는 이유는 몇 가지 있지만 대표적으로는 두 가지이다.</p><ol><li>처음부터 끝까지 개발해볼 수 있는 굉장히 좋은 경험이다.</li><li>학원을 통해서 이 길이 맞는 것인지 경험해보는 것이다.</li></ol><p>학원에서는 기본적으로 프로젝트에 돌입할 때 프로젝트 설계 문서부터 완료 보고서를 포함한 완료 보고 및 시연까지 진행한다. 이는 회사에서 하는 업무와 어설프지만 유사하게 진행되고 매우 많은 야근을 하게 된다. 심지어 주말도 별로 없다. 모든 학원생은 아니지만, 프로젝트에 돌입하면 이것저것 할 것이 많아서 자연스럽게 밤까지 작업하고 주말에도 작업은 이어진다.</p><p>“코드를 생산해 내는 작업이 개발 전부는 아니다.”라는 것을 깨닫게 되는 아주 좋은 경험이며 코드 부분에서도 무엇을 어떻게 공부하고 진행하면 좋을지 경험해볼 수 있다.</p><p>위의 경험을 통해서 개발자가 과연 나에게 맞는지를 한번 생각해 볼 수 있다. 사람은 누구나 자신에게 맞는 옷이 있고 그것을 경험하는 과정을 정부에서 지원한다는 것은 하나의 축복이라고 생각하고 있다.</p><h4>학원 생활에서 가장 필요한 능력</h4><ol><li>체력과 건강</li><li>복습</li><li>끈기</li></ol><p>수험생 때 느껴서 다들 알겠지만, 학원에 다니는 동안에는 절대로 아파서는 안 된다. 대부분 지식이 선행지식이 없으면 알 수 없는 것들이 대부분이라 매일 8시간씩 진행되는 수업은 하루만 빠져도 다음날 수업을 진행할 수가 없어 체력과 건강이 받쳐주지 못하면 끝까지 진행할 수 없다.</p><p>위에서도 말했듯이 대부분 수업에서 배우는 것들이 선행지식이 없으면 수업을 쫓아갈 수가 없다. 매일 금일 배운 내용을 복습하지 않으면 다음 날 좌절을 맛볼 수 있다.</p><p>모든 내용을 6개월간 실천하려면 지치지 않는 체력도 중요하지만 포기하지 않고 꾸준히 할 수 있는 끈기도 필요하다.</p><p>나의 학원 생활은 실패한 사례에 가깝다. 이렇게 많은 것을 써놨지만 정작 나는 앞에 몇 개월 말고는 지키지 못했고 회사에 입사 후 학원에 다닐 때 했으면 됐을 내용을 공부하느라 더 고생했던 기억이 있다. 미리 준비할 시간에 준비했으면 좋았겠지만 난 늘 발등에 불이 떨어져서야 문제를 인지하고 좀 더 힘들게 문제를 해결했다.</p><h4>프로젝트</h4><p>말도 많고 탈도 많은 프로젝트에 대해서 말해보고자 한다. 지금으로부터 3년 전쯤 강남에서 저녁을 먹다가 옆 테이블에서 들려온 말에 집중했던 적이 있다. 옆 테이블에서는 현 국비 지원 학생들이 다 똑같은 포폴과 비슷한 방식의 이력서를 가지고 오는 것에 대해 비판하고 학생들을 불쌍하다고 말하는 내용이었다. 아마도 어떤 회사의 면접관이 아니었나 싶다. 솔직히 나는 학원 프로젝트에서 무임승차에 가까울 정도로 기여도가 낮았고 여태까지 포폴 없이 취업하고 이직한 케이스라 포폴의 중요도를 모르고 있었다. 하지만 요즘 보면 어중간한 포폴로는 취업이 사실상 불가능에 가까워진다.</p><p>팀 프로젝트를 하면서 개인 프로젝트도 같이 하는 방법이 그나마 변별력이 있는 포폴을 준비하는 방법인데 팀 프로젝트를 진행하다 보면 시간이 촉박하기 때문에 학원 기간에는 불가능하다. 그렇다면 개인 프로젝트는 취업 활동과 병행하게 된다. 그리고 학원 수료 후 3개월 이내에 취업에 성공하지 못하면 구직 기간이 무한정 길어질 수도 있으니 학원 다닐 때보다 긴장하고 많은 것을 해결해 나가야 한다. 팀 프로젝트의 경험을 바탕으로 한 달 이내에 개인 프로젝트를 만들어야 하고 그것을 또 포장해야 되므로 시간은 늘 촉박하다고 생각해야 한다. 그리고 개발자를 포함한 모든 직군에서 신입에게는 점수가 너무 짜기 때문에 나라는 가능성을 회사에 보여주지 못하면 경쟁에서 낙오될 수밖에 없다. 학원 팀 프로젝트로 올인하실 분이라면 최대한 기여를 하고 내가 구현하지 않은 부분까지 남에게 설명해낼 수 있어야 한다.</p><h4>마무리</h4><p>지금 이 순간에도 학원에서 나와 비슷한 개발자들이 쏟아져 나오고 있고 그들의 과반수가 3년을 버티지 못한다. 어느 직군이나 마찬가지지만 초반 3년 진짜 쉽지 않다. 비전공자라면 회사 취업이 끝이 아니고 취업과 동시에 전공자들이 배운 지식도 일과 함께 채워나가야 되기 때문에 개인 시간이 늘 부족하고 삶의 여유는 점점 사라지고 이상에서 멀어지면서 힘들어진다. 다행히 나는 이전에 했던 직업이 워낙 힘들어서 힘든지도 몰랐고 또 재밌어했기 때문에 다행이었지만 그게 아니라면 지옥을 경험할지도 모른다.</p><p>나는 학원에서 배운 것들이 나의 개발 인생의 시작임을 부정하진 않는다. 실제로 학원에서 배운 것들을 첫 회사에서 잘 써먹었고 현재까지도 나는 개발자로 일하고 있기 때문이다.</p><p>끝으로 만약 이 글을 읽는 분 중에서 학원 시작을 기다리는 분들이 있다면 개발 공부를 하려는 노력보다는 책상에 오래 앉아있는 습관과 영타 연습을 추천한다. 학원에 다니는 내내 영타가 느려서 다른 학생들에게 민폐였기 때문에 영타만큼은 준비해서 갔으면 한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c2b2eb61a984" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 개발 언어를 공부 할 때]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%B4%EA%B0%80-%EA%B0%9C%EB%B0%9C-%EC%96%B8%EC%96%B4%EB%A5%BC-%EA%B3%B5%EB%B6%80-%ED%95%A0-%EB%95%8C-55452f47761f?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/55452f47761f</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Tue, 15 Jan 2019 11:08:38 GMT</pubDate>
            <atom:updated>2019-01-15T11:25:54.221Z</atom:updated>
            <content:encoded><![CDATA[<p>나는 다른 친구들에 비해서 이직이 잦은 편이다. 보통 첫 이직을 2년 차 혹은 3년 차에 옮긴 다음 꾸준히 다닐 회사를 고르는 것 같다. 이렇게 말하면 프로라고 말하기 어렵지만 난 내가 성장할 수 있고 심적으로 편한 회사를 찾았다. 그러다 보니 첫 회사를 제외하고는 길게 다닌 회사가 별로 없다. 그런 이유로 생각보다 많은 언어를 실무에서 사용할 수 있었다.</p><p>새로운 언어를 실무에서 바로 사용하기는 쉽지 않지만, 요즘은 개발자에게 누구에게나 요구하는 조건이다. 이런 환경에서 내가 개발 언어를 공부하는 방법을 얘기해보고자 한다.</p><h4>주변에 해당 언어를 잘하는 사람을 찾아라.</h4><p>어차피 새로운 언어라면 나는 전문가가 아니니까 외부든 내부든 전문가를 찾아서 밥을 사든 커피를 사든 내가 질문을 할 수 있는 환경을 조성했다. 어차피 언어를 공부한다고 해도 개발언어를 한 개 이상 접해본 사람이라면 알아서 구문 정도는 바로바로 학습한다. 하지만 여기서 멘토를 찾는 건 구문이나 물어보자고 찾는 것이 아니다. 해당 언어의 개발 환경 설정, 트렌드, 개발 방법, 에러처리 등 물어볼 수 있는 것들이 생각보다 많다. 그리고 신규 언어를 공부한다고 해서 회사는 많은 시간을 기다려주지 않는다. 그렇다면 준비가 되지 않는 상태에서 투입될 가능성이 높다. 이때 멘토 한 분 있고 없고의 차이가 많은 시간을 절약하게 해준다.</p><p>무엇을 하든지 간에 제일 중요한 것은 환경을 조성하는 일이다. 밑바닥에서 시작하는 것보다 주변에 아는 사람 한 명 있어서 도움받을 수 있다고 하면 노력 대비 높은 효율을 느껴 볼 수 있다.</p><p>같은 의미로 자신이 3년 차 미만이라면 회사 외부든 내부든 질문할 수 있는 환경을 꼭 만들었으면 좋겠다. 물론 밑도 끝도 없이 물어볼 수는 없다. 찾아보지도 않고 질문하는 것만큼 성의 없는 것도 없기 때문이다. 물론 나도 초반에는 찾아보는 법조차 몰라 a부터 z까지 모든 것을 질문했다. 하지만 상대방의 시간도 생각해야 하므로 구글신에게 물어보다가 안 되면 질문하는 것이 좋을 것 같다.</p><h4>개발 사이클을 빠르게 한다.</h4><p>어차피 새로운 것을 하는 것이기 때문에 빠른 실패 빠른 피드백은 굉장히 중요하다. 사람마다 다르겠지만 누구나 자기만의 일하는 방법들이 있을 것이다. 반복되는 과정을 사이클이라 하고 초반에는 이 과정을 좀 빠르게 반복하는 것이다. 요구사항 파악 — 설계 — 개발 — QA — 리펙토링의 과정이 있다면 초반에 무리하더라도 좀 타이트하게 일정을 잡는다. 어차피 모르는 것에 대한 일정은 정해봐야 빵꾸는 난다. 그럴바엔 회사의 개발 일정과 나의 개발 일정을 다르게 설정하고 가야된다. 최대 개발 일정에서 나의 개발 일정을 몇 번 반복 할 수 있는 상황으로 설정한다.</p><p>처음 시작하는 입장에서 효율과 정답인 코드를 찾는 행위 자체가 넌센스이기 때문에 모든 코드를 나열하는 식으로 완성해간다. 물론 다시 보면 암울하기 짝이 없다. 한 번에 모든 것을 해결할 수는 없다. 일정과 학습곡선 사이에서 적당한 타협이 필요하고 코드를 개선해야 된다는 것을 계속 인지해야 한다.</p><p>별로 추천하는 방법은 아니지만 나 같은 경우에는 코드를 개선하기 위한 예제코드를 개인 시간을 통해서 만들어서 바꿔도 되는 코드인지 점검했다. 이렇게 하다 보면 초반에는 개인시간도 부족하고 일에 많은 시간이 쏠리지만 어느 정도 학습이 완료되는 시점에 도달하면 일정한 형태의 개발이 가능해진다.</p><h4>자주 사용하는 함수는 필히 외우자.</h4><p>개발을 하다 보면 제일 많이 사용하게 되는 함수들이 있다. js를 기준으로 string, array, object에 관련된 함수들이 대표적이다. 특히 array에 관련된 함수들은 굉장히 많이 사용하게 된다. 이런 상황에서 이런 기본 함수들이 암기되어 있으면 많은 효율을 높일 수 있다. 물론 시간이 여유가 된다면야 개발을 하다 보면 자연스럽게 외워지리라 생각하지만, 위에서도 언급했듯이 회사는 많은 시간을 기다려주지는 않는다. 그렇기 때문에 자주 사용하는 함수의 암기는 필수적이다.</p><h4>끝으로</h4><p>새로운 무언가를 학습하기는 정말 쉽지 않은 일이다. 하지만 공부라는 게 원래 자발적으로 하는 경우보다 상황이 닥쳐서야 겨우 시작하는 게 일반적이다. 간단한 예로 2년 전부터 golang에 대한 책을 사고 시도를 했지만 결국은 포기하다가 이직 후에 바로 공부해서 사용했던 경험이 있다. 물론 시작한 지 얼마 되지 않아 높은 수준의 코드는 어렵겠지만 많은 시도와 질문을 통해 개선해 나가고 있다.</p><p>지금 이 상황은 언어 공부에만 통용되는 문제는 아니다. 새로운 프레임워크 새로운 플랫폼 등등 개발 일을 하다 보면 다양한 것들을 학습해서 바로바로 아웃풋을 내야 하는 상황들이 1년에 한두 번씩은 찾아오는 것 같다. 그때마다 대부분의 개발자는 성과를 내기 때문에 못 한다고만 할 수도 없다. 그렇기 때문에 자신만의 학습 가이드는 꼭 필요한 것 같다.</p><p>마지막으로 이 방법은 정답은 아니며 내가 학습했던 것들을 되짚어 생각해 보았을 때 공통으로 시도했던 부분에 대한 것들을 정리한 것이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=55452f47761f" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[내가 개발을 시작했던 방법]]></title>
            <link>https://medium.com/@rosd0000/%EB%82%B4%EA%B0%80-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%96%88%EB%8D%98-%EB%B0%A9%EB%B2%95-b9b21873f871?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/b9b21873f871</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Tue, 15 Jan 2019 01:59:57 GMT</pubDate>
            <atom:updated>2019-01-15T06:24:16.956Z</atom:updated>
            <content:encoded><![CDATA[<p>예전에 이런 질문을 받은적이 있다. “어떻게 개발을 시작하면 좋을까요?”라고 이부분에 대한 것이라면 나는 있어보이게 말하는 방법으로는 설명이 힘들다. 왜냐면 솔직히 처음에는 코드 100줄 200줄이 되는 것을 이해하는 것이 불가능해서 외우려고 시도를 했다. 무식한 방법이지만 의외로 많은 도움을 받았고 지금도 이 방법을 사용중이다. 남들은 이렇게 말하면 그것도 머리가 좋아야 가능하다고 하지만 그렇게 말하는 대부분은 학창시절 나보다 성적도 좋고 스마트하다. 이렇게 말하면 “개발머리는 다르다”라고 하는데 이 부분은 인정하지 않는다. 이렇게 말해버리면 그간 노력한 내 시간이 부정당하는 것 같다. 그리고 공부 잘하던 사람들이 개발도 금방 배우는 것을 주변에서 많이 보기 때문에 대한민국에서 정규 교육과정을 이수한 사람이라면 그냥 아무 튜토리얼이라도 좋으니 그냥 시작하는 것을 추천한다.</p><h4>어떻게 시작해야되는 것인가?</h4><p>코딩을 접하는 친구들이 가장 처음 접하는 난제인 구구단을 예제로 설명하고자 한다. 물론 구구단이 난제가 아닌 친구들은 많이 있겠지만 아직도 기억에 선명한게 나는 반복문의 사용법을 익히는데 3주라는 시간이 필요했다.</p><p>처음에 갓 반복문을 접하고 구구단을 보면 어떻게 해야할지는 굉장히 난감하다.</p><p>2 * 1 = 2<br>2 * 2 = 4<br>2 * 3 = 6<br>2 * 4 = 8<br>2 * 5 = 10<br>2 * 6 = 12<br>2 * 7 = 14<br>2 * 8 = 16<br>2 * 9 = 18<br>3 * 1 = 3</p><p>…</p><p>구구단을 대부분의 사람들은 알고 있으나 막상 해보라고 하면 뭘 어떻게 시작할지 모르는 경우가 대부분이라고 생각한다. 배운 것을 다 사용해서 만들어내고 싶지만 처음 배우는데 그런건 나에게는 불가능했다. 그래서 나는 “2 * 1 = 2”부터 마지막까지 출력문으로 모두 출력했다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/22fd987e0fd7366719b6088732c7f15d/href">https://medium.com/media/22fd987e0fd7366719b6088732c7f15d/href</a></iframe><p>이렇게 구현하는 것은 누가봤을 땐 놀릴수도 있다. 하지만 아무것도 안하는 사람보다는 매우 좋은 실천이라고 생각한다. 작은 완성은 굉장히 중요한 것을 나타낸다. 작은 완성을 통해 완료를 해본 친구라면 이제는 개선이라는 작업을 할 수 있는 것이다. 현업에서 일하는 지금의 나도 코드를 2번에서 3번정도의 개선 작업을 거치고 저장소에 반영한다. 다르게 생각하면 자그마한 예제일지라도 굳이 한번에 완성하려고 없는 지식을 쥐어짜내면서 지칠 필요는 없다는 것이다. 물론 많은 고민을 통해서 만들어나가는 코드는 질적으로 많은 차이를 가져오지만 이제 막 시작하는 사람에게는 짧은 고민과 작은 완성 그리고 개선 작업의 사이클을 더 반복적으로 실행하는게 더 좋다고 생각한다.</p><h4>코드를 개선을 해보자!</h4><p>자 지금부터 구구단의 코드를 개선해보자. 일단 구구단은 순차적으로 증가하는 값들이 존재한다. 바로 단수이다. 2단 3단 … +1씩 증가하는 값을 반복문에 적용하여 개선해보자.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0a92465b8d2b71abad01a3bfec431e36/href">https://medium.com/media/0a92465b8d2b71abad01a3bfec431e36/href</a></iframe><p>이전의 코드보다 많은 수의 라인이 없어졌다. 반복하는 부분인 단수가 변경되는 부분을 전부 단수를 가르키는 변수 i로 변환했기 때문이다. 반복문은 기본적으로 초기값, 반복조건, 증감연산자를 지닌다.</p><ul><li>초기값: 우리는 2단부터 출력하기 때문에 초기값은 2로 초기화</li><li>반복조건: 9단까지 출력하기 때문에 i가 10보다 작을 때까지 반복하는 조건을 입력</li><li>증감연산자: 단수는 1씩 증가하기 때문에 1씩 증가하는 증감 연산자를 입력</li></ul><p>이렇기 때문에 i는 2 ~ 9까지 반복되면서 2단부터 9단까지 출력이 가능하게 된다. 이렇게 반복되는 단수의 값을 i값으로 바꿔보니 반복되는 값이 하나 더 보인다. 바로 단수에 곱해지는 값이다.</p><p>단수에 곱해지는 값도 1~9까지 증가하는 반복을 한다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/776697ce534eae1cb494a8f38492181f/href">https://medium.com/media/776697ce534eae1cb494a8f38492181f/href</a></iframe><p>이 부분까지 개선하고 나면 대표적인 구구단 풀이인 2차 반복문을 활용한 코드가 나타난다. 하지만 코딩은 이제부터 시작이라고 보면 좋을 것 같다.</p><p>도전과제</p><ul><li>특정 단수만 출력하는 법</li><li>단수를 정해 정해진 단수만큼 출력하는 법</li><li>구구단 출력 방법을 바꿔보는 법</li><li>랜덤으로 구구단 출력해보기</li></ul><p>등등 굉장히 많은 방법으로 응용이 가능해진다. 개발은 본인이 흥미가 어느정도인지에 따라 많이 달라진다. 나도 신입 때 아래와 같은 쓸 때 없는 짓을 해봤던 걸로 기억한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/770/1*rOIcC0k1faRN6-o7WkDKyA.png" /></figure><p>무언가를 시작하는 방법은 너무 간단해서 좋은 것 같다. 그냥 해봐라! 생각나는 걸 표현해봐라! 효율은 그 나중이다. 효율을 따지기 이전에 흥미를 가지고 효율을 논할정도가 되었을 때 꾸준히 개발을 하는 습관이 만들어질 것이다. 곰곰이 생각해봐도 신입때를 생각해보면 2시 3시까지 개발하던게 일상이었다. 먼가 특별한 것을 한건아니고 일과도 전혀 상관없는 쓸데없는 것들을 많이 해봤던거 같다. 그게 발전되어 효율과 퀄리티가 필요 할 때 힘들어도 꾸준하게 개발을 하는 습관을 만들어줬다고 생각한다.</p><p>처음 시작하시는 분들은 먼가 거창하게 시작 할 필요가 없다. 물론 초반부터 잘하는 사람은 존재한다. 하지만 어차피 나라는 존재가 대한민국 평균이라면 그들이 이상한거지 우리가 못하는 것이 절대 아니다. 어차피 세상을 이끌어가는 사람들은 떡잎부터가 다르다. 다르다는 것을 인지하고 어제보다 나은 오늘을 계속 만들어가다보면 발전된 자신을 마주 할 수 있다. 개인의 학업 성취도는 절대로 같지 않기 때문에 꾸준히 하는 것이 중요하다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b9b21873f871" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[개발자 S의 2018년 회고]]></title>
            <link>https://medium.com/@rosd0000/%EA%B0%9C%EB%B0%9C%EC%9E%90-s%EC%9D%98-2018%EB%85%84-%ED%9A%8C%EA%B3%A0-d23cdf94ee4b?source=rss-4a443b4aa9dc------2</link>
            <guid isPermaLink="false">https://medium.com/p/d23cdf94ee4b</guid>
            <dc:creator><![CDATA[박새미]]></dc:creator>
            <pubDate>Fri, 04 Jan 2019 13:51:54 GMT</pubDate>
            <atom:updated>2019-01-04T13:51:54.540Z</atom:updated>
            <content:encoded><![CDATA[<h3>어쩌다보니 연말이내……</h3><p>나이가 하나 둘 차면서 그러는지 모르겠지만 갈수록 한해가 가는게 너무 빠르게 느껴진다. 늘 한해를 마감하면 느끼는거지만 한건 진짜 많은거 같은데 막상 돌이켜보면 그렇게 한건 없다. 변명처럼 들릴지도 모르겠지만 그냥 지내다보니 한해가 다 지나갔다.</p><p>올해는 유독 예상치 못했던 일들이 많았다. 2번의 이직과 건강의 악화 등등 하나하나 적응 또는 해결하니 말일이 되었다. 내년에는 좀 계획적으로 살아보고자 회고를 시작한다.</p><h3>첫 번째 이직</h3><p>올해 1월만하더라도 난 백수였고 취업을 전혀 고민하고 있지 않았다. 전해에 묻지마로 사놓았던 코인이 많이 올라 경제적으로 여유가 있었고 취업 보단 미래에 대한 고민이 훨씬 더 많았다. 개발자 종특인지는 모르겠지만 매주 스터디 한개는 꼭 나가고 있었다. (고민도 많은 시점에 스터디는 왜 나가고 있었는지 지금도 잘 모르겠다.)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/398/1*7i96QGMXjjIxfuZTilkcvA.png" /></figure><p>이 스터디는 북스터디였고 프로그래밍의 정석이라는 책으로 진행되었다. 이 책이 나를 취업으로 이끌 것이라고는 처음에는 몰랐다. 이 책을 계속 읽다보니 점점 일이하고 싶어졌고 바로 이력서를 수정하고 제출하는 상황에 이르렀다.</p><p>그렇게 나는 2월에 Notiplus라는 회사에 취업에 성공한다.</p><h4>- Notiplus</h4><ul><li>전체 경력을 통틀어 가장 재밌게 일한 곳</li><li>코워킹 스페이스라는 곳에서 처음 근무</li><li>처음으로 책임에서 벗어나 개발에만 집중했던 곳</li><li>자발적으로 업무 일지를 다시 적기 시작</li></ul><p>MAU 300만이라는 수치에 혹해서 결정을 했고 이 결정에는 딱 한번 후회를 한 적이 있다. 입사 첫 날 내가 관리 할 Newspic이라는 서비스의 코드를 보는 순간 먼가 잘못되었단 생각이 들었다. 면접에서 만난 사수의 이미지에서는 절대 나올 수 없는 코드가 나를 더욱더 혼란하게 하였고 이 이후에는 한번도 결정에 대한 후회를 해본적이 없다.</p><p>이전 북 스터디에서 정리한 나의 일처리 방법을 최대한 활용해서 많은 것을 개선하고 싶었다. 솔직히 이 때문에 일을 하고 싶어서 몸이 근질근질 했던거 같다. 그렇게 전폭적으로 믿어주는 사수와 코워킹 스페이스의 자유로운 환경은 나에게 많은 효율을 가져다 주었다.</p><p>정말 새로운 것을 만져 볼 기회가 많아졌다. Springboot, Elasticsearch, php레거시 등등 정신이 없었고 하루하루가 정말 재밌었다. 기술적인 부분 뿐만 아니라 새로운 것들을 배울 기회도 생겼다. 바로 컨텐츠를 기반으로 서비스 하는 곳의 업무와 웹 광고에 대한 업무를 배울 수 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/856/1*YGo0Nd77etgJM3lfMwYj5A.png" /></figure><p>이전 회사들과는 다르게 저녁이 보장된 회사였고 처음에는 이게 적응이 안되서 남는 시간을 어떻게 보내야 되는지 고민도 해본적이 많았다.</p><p>이렇게 재밌는 나의 워크 라이프는 사수의 이직으로 인해 완전히 붕괴되었다. 사수의 이직 후 내가 웹 파트의 담당자가 되어버렸고 순간적으로 많은 문제들에 봉착하게 되었다.</p><p>담당자가 된 후 나는 아래와 같은 문제에 봉착하게 되었다.</p><ul><li>라이브 서비스의 파악 덜 되 상당 수의 시간을 업무 파악에 할당</li><li>신규 서비스의 진행으로 인해 벌어진 시간의 부족</li><li>신규 입사자에 대한 프로젝트 전달 및 교육</li></ul><p>결과적으로는 사수 없는 첫 주부터 정신없이 바쁜 일상이 시작되었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/826/1*3WG4rNODimMh3Z0lr37LBQ.png" /></figure><p>사수없이도 잘해내고 싶다는 욕심아래 점점 무리를 하기 시작했고 나도 모르는 사이에 점점 지쳐가기 시작했다. “곳간에서 인심난다”고 나 자신이 정신적으로 코너에 몰리기 시작하니 갑자기 모든 것들이 불만이 생겼고 점점 더 날카로워졌고 건강에도 적신호가 나타나기 시작했다. (실제로 세벽에 퇴근하는 도중 알 수 없는 어지럼증 때문에 걷기 힘들었던 경험이 몇 번 있다.)</p><p>정말 지금도 죄송하게 생각하지만 성격이 날카로워지니 회사에 계신 다른 분들께 정말 실수를 많이 했다는 생각이 들었다. 정말 별거 아닌거에 기분이 롤러코스터를 타면서 업다운 기복이 심해졌다. 그러다보니 후임인 준용님께 신경을 쓸 수가 없었다.</p><p>그렇게 나는 이직을 준비하였고 9월을 기점으로 회사를 그만두게 된다.</p><h3>두 번째 이직</h3><p>다음 이직에 대한 문제는 생각보다 쉽게 해결되었다. Vuetiful Korea 5회에서 스피커로 참여하셨던 선종님의 제안으로 아티프렌즈라는 좋은 회사에 입사하게 되었다.</p><p>이직을 결심하게 된 이유는 다음과 같다</p><ul><li>블럭체인 개발에 대한 동경</li><li>자택근무가 가능한 자유로운 근무 환경</li><li>연봉</li></ul><p>그렇게 나는 10월 아티프렌즈라는 회사로 이직에 성공한다.</p><h4>- 아티프렌즈</h4><ul><li>자유로운 근무 환경</li><li>서로의 지식을 공유하는 것과 새로운 것을 공부해야되는 것에 대한 거부감이 없음</li><li>수준높은 코드리뷰</li><li>2년전부터 마음속의 버킷리스트이기만 했던 go언어를 사용</li></ul><p>새로운 환경에서 새로운 형태의 개발문화를 가진 조직에서 일을 시작했다. 여태까지 다녔던 모든 회사는 서비스 하나를 나 혼자 개발하는 형태의 회사를 다녔고 나의 코드를 남이 수정 할 일이 없는 환경에서 있다가 여러명이 하나의 습관으로 코드를 짜고 업무를 수행해나가는 과정은 나에게 정말 많은 충격을 주었고 새로운 경험이었다.</p><p>그리고 자택근무가 가능한 시점부터 나의 업무일지는 많은 부분에서 맞지 않는 형태로 변해버렸고 이를 개선하기 위한 방법들을 시행해보았다. 일지의 문서 양식을 수정하는 방법으로 시도를 해봤으나 끝내 실패하고 말았다. 이러한 문제에 대해서 팀리더인 아샬님께 의논한 결과 기존에 있던 스케쥴러를 사용해 보는 일이었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/426/1*LtPNF5NGSzKwV5CujkB3Jg.png" /></figure><p>하루의 모든 시간에 대한 것들을 정리하고 이를 바탕으로 한 주에 대한 것들을 회고하고 개선해나가는 방법으로 진행 할 예정이며 기존에는 회고의 시점을 분기에 한번으로 길게 잡았었는데 이제는 회고의 주기를 주간으로 대폭 좁혀 일상생활까지 관리를 해보고자 한다. 이는 1월 1일을 기점으로 시행되며 회고를 통해 계속 개선 될 예정이다.</p><p>제일 먼저 기록에 대한 소중함을 인지하고 초반에는 기록에 대해서 초점을 맞출 예정이고 습관이 잡히면 점진적으로 다양한 시도를 해볼 예정이다.</p><h3>건강악화</h3><p>올해 5월 나는 의사로부터 이렇게 살면 죽을수도 있다는 이야기를 들었다. 실제로 처음에는 별 느낌이 없었지만 점점 무서워지기 시작했다. 그래서 나는 의사의 권유로 술을 끊었다. 물론 중간중간 맥주를 조금 마시긴 하였지만 같은날 맥주 한 잔 이상을 마시진 않았다. 술자리는 참여했으나 최대한 술을 자제하려고 하였고 이는 조금이지만 효과를 발휘했다. 간수치가 정상에 근접한 수치로 내려왔으며 다른 수치도 많이 호전되었다.</p><p>이제는 병원을 갈 때마다 듣는 운동을 해보고자 한다. 솔직히 일을 하면서 운동을 하는건 여간 귀찮은게 아니다. 그리고 동영상을 보면서 맨손 운동을 하거나 일정 거리 이상을 걷는다는지 여러 시도를 해봤으나 식단관리가 되지 않는 간단한 시도들은 실패로 돌아왔고 여기까지 시도해서 내린 결과 나는 트레이너의 관리가 없으면 좀 힘들겠다는 결론에 도달했다. 1월을 기점으로 PT를 등록해 식단부터 하나하나 개선해나갈 예정이다.</p><h3>돈</h3><p>올해 갑자기 많은 연봉 상승으로 인해서 돈을 관리를 하지 못했다. 그리고 투자를 했던 모든 것이 실패했으며 상반기 이후로는 투자하지 않았다. 일단 소비에 대한 부분부터 정리 할 필요성을 느꼈다. 현재 12월부터 가계부를 적기 시작했고 1/4분기까지 기록을 바탕으로 개선을 해 볼 생각이다.</p><h3>버킷리스트</h3><p>나는 계획을 잘 실천하지 못한다. 그래서 일년에 하나만 정하고 하나만 시도를 하자는 마인드를 몇 년째 유지하고 있으며 작지만 몇가지를 실천 하였다. 올해의 버킷리스트는 해외여행 3번가기로 아쉽게 성공하지는 못했다. 하지만 2번의 해외여행을 통해서 어느정도 작은 성공을 이룩했다.</p><p>모든 여행에서 나 때문에 고생한 대건이에게 감사 마음을 전하고 싶다</p><h4>- 일본 도쿄 여행 3박 4일 (3월)</h4><blockquote>일본 여행은 많은 생각을 하게 만들었다. 첫 해외여행이라 그런지는 모르겠지만 모든 것들이 새로웠고 신기했고 한국과 다른 점이 무엇인지 계속 비교해보면서 소소한 재미를 찾았다.</blockquote><blockquote>가장 기억에 남는건 신주쿠에 있는 스타벅스에서 지나다니는 사람을 구경했던 경험이다. 말로는 할 수 없지만 그냥 좋은 느낌을 받았고 빡빡한 스케쥴로 움직이는 것보단 커피숍에 앉아 시간을 보내고 거리를 구경했던 이 시간이 가장 기억에 남는다. 아무 특별한 경험도 없었던 그 짧은 시간이 내가 가장 집중해서 있었던 시간이고 그 공간에 다시가서 그 기분을 다시 느끼고 싶다.</blockquote><h4>- 배트남 호치민 여행 5박 7일 (8월)</h4><blockquote>베트남은 크게 기억에 남는게 별로 없다. 그냥 밥먹는데 파리가 신경쓰여서 짜증났고 도로는 시끄러웠으며 오토바이로 인해서 교통이 어지러웠다. 난 평소에 도시 보단 시골을 외쳤고 마음속으로 항상 시골에서 살고 싶다는 생각을 했었는데 이 것을 보기좋게 날려주었다. 난 이제 누가 머라고 하든 발달된 도시가 좋다고 말할 수 있다.</blockquote><blockquote>베트남 관공서 건물에는 철창이 있었고 건물의 담이 정말 높았다. 한국처럼 치안이 좋은 나라는 아니었던거 같다. 밤에는 외출을 최대한 피했고 밤에는 최대한 외국인이 많은 곳 위주로 다녔던거 같다.</blockquote><h3>2019년 계획</h3><p>2019년에는 무엇을 꼭 해내겠다 보다는 나 자신의 기록을 우선시 해야겠다는 생각을 하게 되었다. 30살인 이번 해를 보내면서 한번 쭉 돌이켜 봤는데 20대의 기억이 별로 없다. 가장 치열하게 살았지만 기억에서 제일 먼저 사라져버렸다. 사진 뿐만 아니라 내 생활 및 한 일들을 좀 자세하게 적어 볼 예정이다. 사진은 살이 찐 이후로 찍지는 않았지만 조금이라도 남겨 볼 생각이다.</p><p>이전에는 따로 기록하진 않았지만 개인 회고를 분기단위로 했었다. 이 회고는 업무에 관련된 내용만 있었지만 이제는 주간으로 생활 및 업무 등등 모든 것을 기록해서 최대한 계획적으로 살아보고 싶다. 평소에는 업무에 관련된 것들만 학습하고 말았는데 이제는 다른 곳에 관심을 가지고 학습하고 싶다.</p><p>2019년의 버킷리스트는 나 자신을 기록하는 습관을 만드는 한 해로 만들고 싶다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d23cdf94ee4b" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>