<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by wonho ha on Medium]]></title>
        <description><![CDATA[Stories by wonho ha on Medium]]></description>
        <link>https://medium.com/@haho6629?source=rss-4d2e0e9018c0------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*rVjYNkrMOXJPB09oCB2GNg.jpeg</url>
            <title>Stories by wonho ha on Medium</title>
            <link>https://medium.com/@haho6629?source=rss-4d2e0e9018c0------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 05:29:26 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@haho6629" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[module vs library vs framework]]></title>
            <link>https://medium.com/@haho6629/module-vs-library-vs-framework-3189ad3bd9ea?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/3189ad3bd9ea</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Thu, 28 Mar 2019 02:59:24 GMT</pubDate>
            <atom:updated>2019-03-28T02:59:24.053Z</atom:updated>
            <content:encoded><![CDATA[<h4>What is Module</h4><p>Module이란 어떤것일까요? Library는 어떠한 것들을 Library라고 이야기할까요? Liarary와 Framework의 차이는 무엇일까요? 오늘은 그러한 개념과 관련해서 알아보겠습니다.</p><p>Module은 어떠한 단위입니다. 모듈을 나누는 기준은 특별이 없으며, 주로 재사용이 가능하게 묶은것들입니다. 모듈은 주로 직접 만들어서 사용하게됩니다. 모듈에서의 핵심은 캡슐화입니다. 그러나 모듈은 하나이상의 객체의 집합이 될 수도 있습니다. 모듈은 결합할 수 있습니다. 라이브러리 내부에서 모듈을 사용하는 경우도 많습니다.</p><p>Library는 특정한 기능의 모음입니다. 예를들어 Tensorflow와 같은 Library는 인공지능에 관한 기능들을 지원합니다. Library는 언어에서 기본으로 지원하는 경우도 있으며 이를 표준 라이브러리라고합니다. Library는 다른 Library를 사용하여서 구현하는 경우도 많이 있습니다. 따라서 Library간에 종속성이 있을 수 있습니다.</p><p>Framework는 특수한 형태입니다. 제어 흐름을 떠맡기는 것입니다. WebServer를 제작할 때 쓰는 Framework들을 보면 어떻게 Http를 구현하고 어떠한 스레드에서 처리하는지 알지 못하여도 구현할 수 있게 만들어줍니다. 이러한 것들이 생산성 향상에 많은 도움을 줍니다.</p><p><a href="https://stackoverflow.com/a/4101270/7939210">Difference between a module, library and a framework</a></p><p>Library와 Framework와 관련해서 좋은 설명이 있어서 첨언하겠습니다.</p><ul><li>Library는 우리가 application을 만들고 세부적인 내용을 Library가 채워줍니다.</li><li>Framework는 Framework가 application을 만들고 그 세부내용을 우리가 만들게됩니다.</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3189ad3bd9ea" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Laftel 성인인증]]></title>
            <link>https://medium.com/@haho6629/laftel-%EC%84%B1%EC%9D%B8%EC%9D%B8%EC%A6%9D-fe9d2b1cd843?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/fe9d2b1cd843</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Wed, 27 Mar 2019 10:07:09 GMT</pubDate>
            <atom:updated>2019-03-27T10:07:09.784Z</atom:updated>
            <content:encoded><![CDATA[<p>최근에 Laftel이라는 서비스를 자주 이용하고있습니다. Laftel은 애니메이션 스트리밍 서비스를 하는 기업입니다. 다양한 애니메이션이 있으며 불법적인 사이트가 아니라는 점이 가장 큰 차별점입니다. 또한 애니메이션 추천시스템을 사용하고있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/560/0*IFrghqG5ifckwJHJ.png" /></figure><p>저는 애니메이션을 좋아하기때문에 자주 이용하고있습니다. 그러나 우연히 재미있는 버그를 찾게되었습니다. 바로 성인인증을 하지않고도 나이제한이 있는 영상을 볼 수 있다는 것입니다. 방법은 굉장히 간단합니다. 동영상을 클릭하는 대신 새 탭에서 열기를 택하면 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/416/1*o12mxqwdxj2OjFYJmVboXg.png" /><figcaption>성인인증이 뜬 화면</figcaption></figure><p>정상적인 방법으로 이용한다면 위와같은 성인인증 메세지가 뜨게됩니다. 클라이언트에서 성인인증을 하는 방법을 살펴보았습니다. 성인인증을 확인할 때마다 콘솔에 false(성인인증 여부)가 출력됩니다. 관련 코드를 찾아서 볼 수 있습니다. 아래는 라프텔에서 어른인지 체크하는 코드입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0a50b5a1cd08e447c66a7dc4a127ecaa/href">https://medium.com/media/0a50b5a1cd08e447c66a7dc4a127ecaa/href</a></iframe><p><a href="https://static.laftel.net/static/2.0/js/main.e9f1.js">https://static.laftel.net/static/2.0/js/main.e9f1.js</a></p><p>위 파일에 더욱 자세한 성인인증 방식을 확인할 수 있습니다. 이 파일은 애니메이션을 보는 페이지가 받아질 때도 같이 받아집니다. 그러나 영상을 보는 창에서는 확인하지않는 것 같습니다. 재미있는점은 로그인 했는지 여부는 잘 확인한다는 것입니다. 예전에 애니메이션 스트리밍 사이트들은 성인인증을 하지않고도 영상을 볼 수 있었습니다. 따라서 일부러 막지않은게 아닐까 예상하고있습니다.</p><p>Laftel은 REST API를 지원하고있습니다. Laftel에서의 영상을 얻는 방법은 다음과 같습니다. 이 ID들은 시간순서대로 증가합니다. 그리고 영상 id는 애니메이션과 상관없이 등록 순서로 결정됩니다. 이 링크만 있으면 볼수있으면 좋겠지만 판권이 만료된 경우는 실행되지 않습니다.</p><pre><a href="https://laftel.net/player/39074/27096">laftel.net/player/{애니메이션-id}/</a>{영상-id}</pre><pre><a href="https://laftel.net/player/15966/12156">laftel.net/player/15966/1215</a>5  : 내여귀 1기1화<br><a href="https://laftel.net/player/15966/12156">laftel.net/player/15966/12156</a>  : 내여귀 1기2화</pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fe9d2b1cd843" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Agile fest]]></title>
            <link>https://medium.com/@haho6629/agile-fest-4401e7b67151?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/4401e7b67151</guid>
            <category><![CDATA[conference]]></category>
            <category><![CDATA[agile]]></category>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Sat, 09 Feb 2019 04:35:20 GMT</pubDate>
            <atom:updated>2019-02-09T04:35:20.099Z</atom:updated>
            <content:encoded><![CDATA[<p>1월에 열린 애자일 페스트에 참여하게 되었습니다. 애자일에 관심이 있는 사람들이 모인 이 자리는 안티 컨퍼런스형태로 진행이 되었습니다. 저는 굉장히 유익했고 많은 도움이 되었던 자리이기에 이렇게 글로 공유를 해보고자합니다.</p><p>애자일 페스트는 금,토,일 총 3일간 진행이 되었습니다. 저는 금요일에는 학교를 갔기에 토,일인 2일만 참여를 했습니다. 아샬님이 페이스북에 올린 포스팅으로 알게되었습니다. 저는 평소에 애자일에 관심이 많았기에 참여하게 되었습니다.</p><p>저는 2일차, 점심시간에 도착을 했습니다. 다들 늦게 일어나서 오전에는 진행이 잘 안되었다고 들었습니다. 들어가자마자 많은 분들이 환영을 해주셔서 기분좋게 시작할 수 있었습니다. 처음에 아샬님, Paul님과 이야기를 했습니다. 저는 Paul님에게 “기업에서 애자일을 적용하기 힘든 이유”에 관하여 질문을 들었고 다른 분들에게 물어서 그 답을 얻는게 팁이라고 말씀하셨습니다.</p><p>점심시간이 끝나고 세션이 시작을 했습니다. 세션은 여러가지가 있었는데 저는 인터뷰를 진행하느라 많이 듣지 못하였고 주로 거실에서 소파에 앉아 여러 분들과 대화를 나누었습니다. 회고를 하고 지수님이 진행하시는 스칼라 세션을 들었습니다. 저는 회사에서 쓰이는 스칼라 이야기를 들을 수 있어서 좋았습니다. 스칼라를 사용하고는 있지만 메인 언어로 사용하고 있지 않다보니 좋은 경험이었다고 생각합니다. 스칼라는 OOP와 FP를 동시에 쓸 수 있는 언어다보니까 애매한 감이 없지않은데 어떤게 더 스칼라다운 코드인지에 대한 답변을 들을 수 있어서 좋았습니다.</p><p>저녁을 먹고는 평소에 팬이었던 아샬님과 같이 Ruby EDSL, TDD에 관하여 시간을 가졌습니다. 루비는 자주 사용하는 언어는 아니었어서 문법이 헷갈렸지만 아주 좋은 시간이었습니다. TDD에 관하여 실제 체험을 해 볼 수 있어서 좋았습니다. 그러나 나중에 혼자서 해보았을 때는 잘 되지 않아서 아쉬웠습니다. EDSL을 Python으로 해보려는 시도를 해보았으나 어떻게 해도 잘 되지 않아서 아쉬웠습니다. 루비의 문법이 확실이 Python보다는 아름답다고 생각했습니다.</p><p>애자일 페스트에서 했던 경험중 하나는 회고입니다. 저는 회고를 해본적이 없었습니다. 기업에서 일을 하고있는 입장도 아니었고 애자일에 관심은 있었지만 실제로 실천한 적은 적었기 때문입니다. 회고를 한 다음에 개선할 방안을 이야기 하고 투표를 하는 방식으로 진행을 했습니다. 반대하는 사람이 있다면 하지 않는 방식으로 진행을 하였습니다. 지금 생각해보면 회고를 할 때 회고뿐만 아니라 의사결정도 같이 이루어지고 있다는 느낌을 받았습니다. 또한 회고에서 결정된 내용이 충분히 공지가 되지 않았다는 느낌을 받았습니다. 디스코드에 올라오긴 했으나 저는 잘 찾지 못했습니다. 어디에 올라오는지 더 알려주면 좋겠다는 인상을 받았습니다.</p><p>밤에는 여러 분들과 이야기를 나누었습니다. 아샬님과 나눈 이야기는 많은 도움이 되었습니다. 팀 내부에서 갈등이 있었던 일이 있는데 그와 관련한 이야기를 하면서 많은 깨달음이 있었습니다.</p><p>아침에는 창준님과 애자일 TRPG를 간단하게 하였습니다. 그 중 특이했던 점은 자신이 선택한 행동에 이유를 들어야 하는 점이었습니다. 저는 행동을 할 때 이유를 생각하기보다는 우연에 맡기는 경우가 강했는데 행동에 근거를 생각하는 활동이 저에게는 색다른 경험이었습니다.</p><p>애자일 페스트는 저에게 많은 변화를 주었다고 생각합니다. 많은 분들과 만났고 영향을 주고 받았습니다. 새로운 고민이 생겼으며 몇몇 고민은 해결하는 기회가 되었습니다. 여러가지를 배우고 알게 되었습니다. 결국에 Paul님이 주셨던 팁은 이루지 못했으나 많은 도움이 되었습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4401e7b67151" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2018 회고]]></title>
            <link>https://medium.com/@haho6629/2018-%ED%9A%8C%EA%B3%A0-bc655f403959?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/bc655f403959</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Sun, 30 Dec 2018 17:49:03 GMT</pubDate>
            <atom:updated>2018-12-30T17:53:26.707Z</atom:updated>
            <content:encoded><![CDATA[<p>1월은 내가 처음 프로그래밍을 하기 시작한 시기이다. 프로젝트를 처음 해보았고 프로젝트 진행에 관한 지식이 쌓여가던 시기였다. 그리고 방학이었기때문에 많이 놀았던 것 같다. 2월달까지 많이 놀았기때문에 후회가 되기도 한다. 내년 1~2월은 엄청 바쁠것 같기때문에 더 나아질 것 같다.</p><p>3월은 학교생활을 시작할 때이다. 신입생들이 들어왔고 새로운 동아리를 만들고, 반도 바뀌었다. 나는 3~4월은 책을 많이 읽었다. 아샬님의 책읽기 모임에 나온 대부분의 책을 읽었고 매일 2시까지는 책을 읽었다. 이 시기에 애자일에 관한 이야기와 테스트에 관한 관심을 가지기 시작했다. 아샬님에게 많은 영향을 받았으며 내년에는 같이 페어프로그래밍 하는것이 하나의 목표이다.</p><p>올해 있었던 가장 큰 일이라고 한다면 파이콘이었을것이다. 파이콘에서 운좋게 발표자로 뽑혀서 영광이었다. 처음 해보는 큰 무대라서 걱정도 되었으나 잘 했던것 같다. 파이콘 시기는 나에게 꽤 중요한 의미가 있다. 1일차에는 파이콘의 세션을 거의 듣지않고 아는사람과 코엑스를 돌아다니며 놀았다. 그리고 1일차 저녁식사를 거의 먹지않고 호텔로 가서 그 친구와 같이 잤다. 2일차에는 그 친구와 같이 밤을 새서 12시 넘어서 일어났다. 대강 씻고 발표를 하게되었다. 나는 이 때 나의 선택이 프로그래머로써의 성공과 나 자신의 행복중에 행복을 선택했다고 느낀다. 여담으로 “파이콘 하원호”, “파이콘 함수형”등등 나에관한 후기가 없나 검색을 하고다녔다.</p><p>그 다음으로 큰 일이라고 하면 인턴에 붙은 일이다. 인턴은 운이 좋았다고밖에 설명을 못할 것 같다. 면접 프로세스를 경험해볼 수 있었고 아주 재미있는 시간을 보냈다. 평소에 책을 많이 읽었던 것이 도움이 많이 되었다.</p><p>올해는 많은 사람들과 만났던 해인것 같다. 원래는 소극적이었던 내가 사람들에게 먼저 다가가서 이야기도 하고 활동도 많았던 것 같다. Civilizationpp는 내가 하게된 첫번째 프로젝트이다. 아주 재미있으며 나의 실력이 올라갔다고 생각한다. 그러나 최근에는 많이 하지못하고있어 안타깝다. 좋은 기회를 주신 옥찬호님께 감사하고 문명팀에 고맙다.</p><p>구글에서 지원을 받아서 인공지능 스터디를 운영하였으나 잘 한것 같진 않다. 내가 조금 더 적극적으로 하기를 무서워 한 것도 있으며, 온라인이다보니 더욱 그랬던 것 같다. 그래도 좋은 경험은 되었다고 생각한다.</p><p>대인 관계에서 내가 잘못한 일이 너무나 많았다. 처음이고 실수는 할 수 있다고 하지만 앞으로 실수를 없애고싶다. 나의 장점이 실수를 다시 하지않는것이라고 생각하기에 더욱 조심하고있다. 그러나 SNS에서 나의 생각을 남에게 전달하는 방법이 아직 부족하다고 느낀다. 생각을 많이한다고 해결되는 문제는 아닌것 같아서 내년에는 나아지길 바란다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bc655f403959" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reading Books — 클린코드]]></title>
            <link>https://medium.com/@haho6629/reading-books-%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C-ad83867ba2e4?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/ad83867ba2e4</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Wed, 26 Dec 2018 00:04:01 GMT</pubDate>
            <atom:updated>2018-12-26T00:04:01.607Z</atom:updated>
            <content:encoded><![CDATA[<h3>Reading Books — 클린코드</h3><p>Las Reading Series.</p><p>클린코드는 깨끗하 코드를 만드는 방법입니다. 개발자라면 어떻게 더 좋은 코드를 만들 것인지 항상 고려해야하죠. 이 책에서는 “읽기쉬운”코드를 깨끗한 코드라고 생각합니다.</p><p>코드의 더러움을 없애는 것은 힘든 작업입니다. 또한 다른사람이 만든 코드를 수정하기란 더욱 힘들죠. 이러한 코드를 처리하는 과정을 리팩토링이라고 합니다. (리팩토링은 조금 다른 의미가 있지만 핵심은 변하지않습니다) 그러나 읽기 쉬운 좋은 코드가 있다면 기존의 코드를 수정하기도 쉽고 개발하기도 쉽겠죠. 명확한 추상화가 된 코드만큼 사용하기 쉬운것도 없습니다.</p><p>처음에는 코딩 컨벤션에 대하여 이야기를 합니다. 이 책은 “옛날”에 관하여 별로 신경을 쓰지않습니다. 접두어를 붙이는 것이 그러한 예이죠. IDE를 사용하여 코딩하는 것이 당연하기에 접두사를 붙여서 나타내는 것이 별로 의미가 없다고 합니다. 그러나 그런 사소한 것보다 중요한 것은 코딩 컨벤션의 존재입니다. 모든 파일이 같은 코딩 컨벤션이 있다는 것이 코딩 컨벤션의 내용보다 중요합니다.</p><p>주석에 대하여 이야기합니다. 이 책에서는 주석이 필요할 정도로 코드가 어지럽다면 좋은 코드가 아니라고합니다. 좋은 코드는 코드자체로 설명이 되고 명확해야한다고합니다. 그러나 모든 주석이 필요없는 것은 아닙니다. 저작권과 관련한 주석은 필요하며 적당한 주석이 필요하기도 하다고합니다. 그러나 가장 좋은 것은 코드자체가 문서가 될수 있을정도로 명확한 것입니다.</p><p>저렇게 읽기 쉬운 코드를 작성하기 위하여는 메소드 하나에 줄수가길지 않고 하나의 처리만 해야한다고 합니다. 예를들어 오류를 처리하는 로직과 어떤 기능을 수행하는 로직이 있다면 2가지 일을 하는 메소드가 되는 것입니다. 이렇게 기능을 분리하고 메소드를 간결하게 만들라고 합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ad83867ba2e4" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reading Books — SICP]]></title>
            <link>https://medium.com/@haho6629/reading-books-sicp-4c88b00bfdb6?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/4c88b00bfdb6</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Thu, 20 Dec 2018 07:01:37 GMT</pubDate>
            <atom:updated>2018-12-20T07:01:37.665Z</atom:updated>
            <content:encoded><![CDATA[<h3>Reading Books — SICP</h3><p>Las Reading Series.</p><p>여름방학이 끝나고 중간고사가 끝날 무렵 저는 친한 후배에게 SICP라는 책을 빌리게 되었습니다. 워낙 유명한 책이고 함수형 프로그래밍 관련 이야기가 있길래 보게되었습니다.</p><p>저는 전에 LISP이라는 언어를 접해보았으며 ()가 많은 프로그래밍 환경에 익숙했습니다. Clojure라는 언어를 사용해보았으며 함수형 프로그래밍에 익숙한 상태였기에 초반에는 쉽게 느껴졌습니다. 이 책에서는 Scheme이라는 LISP의 방언의 한 형태를 사용하고 있습니다.</p><p>그 전에 읽은 책이 커누스 교수의 구체수학이었기에 간단한 수학적인 개념과 수학과 프로그래밍이 어떻게 융합되는지 더욱 자세히 알 수 있는 기회였다고 생각합니다. 이 책에서는 함수가 어떤 것인지, 프로시저는 뭔지, 자료구조는 어떻게 정의하는지는 수학적인 내용으로 설명합니다. 또한 프로그래밍에 수학을 접목시켰기때문에 몇가지 이익이 있었습니다. 대부분의 경우 함수형 프로그래밍이 명확하지 않다고 느낄 수 있겠으나 처음부터 함수형으로 짜고 사용하다보면 더욱 명확한 프로그래밍을 하는 것을 느낄 수 있었습니다.</p><p>수학과 프로그래밍이 접목되는 대표적인 예는 재귀함수입니다. 반복문대신 재귀함수를 사용하여 프로그래밍 하면 더욱 명확해집니다. 실제로 점화식을 이용하는 계산을 재귀함수로 표현하면서 더욱 명확해집니다.</p><p>스트림은 다른 프로그래밍 언어에서도 많이 사용하는 개념입니다. 이러한 스트림은 대표적인 수학과 프로그래밍이 합쳐진 결과입니다.</p><p>SICP를 하다보면 계속 작은 부분으로 쪼개가면서 프로그래밍하는 패턴을 볼 수 있습니다. 이러한 패턴은 함수형 프로그래밍에서 중요한 부분입니다. 작은 일을 하는 함수를 만들고 그러한 함수들을 합치면서 점점 더 구체적인 함수들이 나오고 그러한 함수들을 더 합쳐서 프로그램을 만드는 것이죠.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4c88b00bfdb6" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Promise란?]]></title>
            <link>https://medium.com/@haho6629/promise%EB%9E%80-18e6e95fdcdf?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/18e6e95fdcdf</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[es6]]></category>
            <category><![CDATA[nodejs]]></category>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Tue, 11 Dec 2018 05:48:12 GMT</pubDate>
            <atom:updated>2018-12-11T05:48:12.602Z</atom:updated>
            <content:encoded><![CDATA[<h4>고급 자바스크립트</h4><p>자바스트립트는 비동기 처리가 특징인 언어입니다. 그러나 비동기 로직을 짜면 콜백이 길어지는 문제가 발생합니다.</p><p>기본적으로는 비동기 함수를 실행하고, 그 실행이 끝난 뒤 실행하는 함수를 같이 넘겨주는 형식으로 실행하게됩니다. 이렇게 짜게되면 보기도 힘들고, 잘 작동하지 않는 경우도 발생합니다. 웹서버를 만들게 되는 경우, 비동기 로직만으로 짤수 없는 경우가 있습니다. 따라서 다른 방법을 찾게되는데, 이때 고려할 수 있는 가장 좋은 방법은 Promise입니다. promise는 콜백을 해결하는 것 뿐만 아니라 동기처럼 실행하게 만들어주는 좋은 기능입니다.</p><p>await키워드는 프로미스를 실행하기 전까지 기다리는 키워드입니다. async함수에만 사용하는 것이 아닙니다. 사실 async함수는 promise를 만들어주는 문법적 설탕입니다. 그렇기에 await/async로만은 해결할 수 없는 문제가 나타납니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3b87a74da9f02e1078471fb5f140ff61/href">https://medium.com/media/3b87a74da9f02e1078471fb5f140ff61/href</a></iframe><p>코드를 보시면 프로미스 객테를 생성하는 것을 볼 수 있습니다. 또한, 프로미스 인자로 함수를 받고있습니다. next, re는 그 다음 함수입니다. 만약 잘 실행되었다면 이러한 함수를 실행시켜서 넘길 수 있는것이죠. 함수 체인이라고 이해하셔도 좋습니다. 이러한 함수체인은 함수들의 실행 순서를 보장해줍니다. 그러나 이러한 방법으로는 잘 되지 않습니다.</p><p>next라는 함수를 실행하는 시점이 인자로 주는 함수안에 있어야합니다. 아래는 mysql을 사용하는 예제입니다. 데이터베이스의 실행이 다 끝난 시점이 connection.query에 인자로 주는 함수이기 때문에 그때 next<em>(다른 이름일 수도 있습니다)</em>를 실행합니다. 또한 await을 이용하여서 promise가 다 끝나기 전까지 대기하고 있습니다. 이렇게 하면 더욱 정확한 행동을 보장합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/7109f83e18fbd7a16b775410260d5715/href">https://medium.com/media/7109f83e18fbd7a16b775410260d5715/href</a></iframe><p>정리하자면, Promise를 쓰면 비동기처리를 쉽게 동기로 바꿀 수 있으며 꼭 써야할때가 있다는것이다. 꼭 넘어야 할 산이기때문에 await/async만으로 만족하지말자.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=18e6e95fdcdf" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[면접썰]]></title>
            <link>https://medium.com/@haho6629/%EB%A9%B4%EC%A0%91%EC%8D%B0-10284d19d850?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/10284d19d850</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Tue, 11 Dec 2018 05:38:35 GMT</pubDate>
            <atom:updated>2018-12-11T05:38:35.755Z</atom:updated>
            <content:encoded><![CDATA[<p>저는 이번에 3개의 회사에 신입 면접을 보면서 겪었던 일을 씁니다.</p><p>이력서는 자세히 보지는 않지만, 깃헙 링크가 있는 경우에 깃헙을 유심이 보았던 것 같습니다. 전화면접을 하면서 깃헙을 실시간으로 보며 어떤 프로젝트였고, 어떤 역할을 맡았는지 물어보는 경우도 있었습니다. 파이콘에서 발표한 것을 적었더니 발표 영상을 찾아보고 슬라이드를 확인하신 분도 있었습니다.</p><p>전화 인터뷰에서 각각 회사마다 다른 질문경향이 보였습니다. 분위기와 환경을 중요시하는 회사인지, 개발자 대우는 어떤지 단적으로 확인이 가능하다고 느껴졌습니다. 그리고 전화인터뷰에서 한 질문을 실제 면접에서 한 경우도 30%나 될 정도로 같은 질문이 반복되었습니다. (스레드와 프로세스를 설명해보라는 질문을 한 회사에서 2번이나 들었습니다)</p><p>코딩테스트때는 간단한 문제를 주로 내었습니다. 아주 쉬운 피보나치수열도 있었으며, 온라인으로 진행하는 경우도 있었습니다. 또한 숙제처럼 만들어오라는 것도 있었는데, 이런경우 메일로 문제를 정확하게 파악하는 커뮤니케이션 능력도 보는 것 같았습니다. Java로 제작하였는데 git사용능력, junit사용능력도 보았습니다. OOP, object class, json에 관한 지식또한 요구하였습니다.</p><p>회사에 가서 하는 코딩테스트가 있었는데, 난이도는 제각각이었습니다. Hackerrank에서 문제를 풀라는 경우도 있었으며, 화이트보드를 이용해서 하는 경우도 있었습니다. 문제를 정확하게 정의하고(예를들자면 입력이 null이 들어온다면?) 이러한 예외사항에 왜 이런 결정을 내렸는지등을 물어보았습니다. 특이했던 점은 FP에 관한 내용이 많았으며 반복문을 없애고 모든 변수를 불변하게 만들라는 리팩토링 요청도 있었습니다. 언어는 자유였지만 스칼라와 java, python정도로 제한하는 회사도 있었습니다. 그러나 나머지 회사에서는 제한을 두지않았기에 걱정할 필요는 없을 것 같습니다.</p><p>웹 서버를 만들라는 문제도 있었습니다. 처음에는 코딩을 하다가 중간에 코딩보다는 명세작성에 더 신경을 쓰라는 이야기를 듣고 rest api니 json이니 state code등등을 작성했습니다.</p><p>그 다음은 임원들과 하는 면접이 1번 있었습니다. 면접중에는 꽤나 즐거웠으며 질문을 하라는 말에 질문을 하자 굉장히 좋아하시며 또 없냐고 계속 물어보시기도 하였습니다.</p><p>면접에서 가장 당황스러웠던 질문은 “우리회사말고 어떤 곳을 지원했나/어떻게 알게되었나”였습니다. 채용사이트(원티드, 로켓펀치)에서 알게되었기에 사실대로 이야기했습니다. 지원한 회사들도 이야기하고 CEO께서 그 회사들과 자신의 회사를 비교해달라는 질문도 있어서 사실대로 얘기했습니다. 그러나 지금 생각해보면 너무나 기고만장한 답이었습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=10284d19d850" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[네, 맞습니다.]]></title>
            <link>https://medium.com/@haho6629/%EB%84%A4-%EB%A7%9E%EC%8A%B5%EB%8B%88%EB%8B%A4-c67e3c4c513d?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/c67e3c4c513d</guid>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Tue, 11 Dec 2018 05:11:04 GMT</pubDate>
            <atom:updated>2018-12-11T05:11:04.279Z</atom:updated>
            <content:encoded><![CDATA[<p>네, 맞습니다.</p><p>Wrapping해주는작업을 “이름=값”과 같은 형식으로 바꿔주는 것을 의미했습니다. form같은걸로 데이터를 넘길때 get방식으로 넘기게 된다면 변수=값&amp;변수2=값2 와 같은 형식으로 넘겨야합니다.</p><p>이러한 작업을 한번에 해주는 작업을 getWrappedValueByName이라는 함수에서 해주게됩니다. 또한 이러한 함수를 사용하면 재사용성이 높은 함수를 만들 수 있습니다. getWrappedValueByName가 아닌 class로 찾는 함수를 만들수도, wrapping해주는 작업을 다른 방식으로 해주는 함수를 만들 수도 있습니다.</p><p>컬링은 함수를 분해한다기보다는 하나의 인자만 갖는 함수로 만드는 것입니다. 이런작업을 하는 이유는 여러가지가 있는데 제가 보여드린 예시가 그런 장점이라고 생각하시면 되겠습니다. “함수를 완성시키지않은 상태에서 그 함수를 값으로 사용할 수 있기에(Functional한 사고가 조금 필요합니다) 편리하다”라는게 그 이유중 하나입니다.</p><p>이런 작업을 하게된다면 재사용성이 좋은 함수를 만들 수 있다는 점이 가장 큰 장점입니다. 예를들어서 Ajax로 값을 넘길때 찾으려는 name이 하나만 있다고 보장되는 경우 저 함수를 바로 사용하여서 값을 얻을 수 있습니다. 아래는 실제로 제가 사용한 코드입니다. id와 password를 get으로 서버에 요청을 보내는 코드입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d1fdb98cddbb7488593911cf3c82d5b5/href">https://medium.com/media/d1fdb98cddbb7488593911cf3c82d5b5/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c67e3c4c513d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[힙스터 개발자의 행동강령 — reverse]]></title>
            <link>https://medium.com/@haho6629/%ED%9E%99%EC%8A%A4%ED%84%B0-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%ED%96%89%EB%8F%99%EA%B0%95%EB%A0%B9-reverse-57f53fee844f?source=rss-4d2e0e9018c0------2</link>
            <guid isPermaLink="false">https://medium.com/p/57f53fee844f</guid>
            <category><![CDATA[reverse-engineering]]></category>
            <category><![CDATA[hipster]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[software-development]]></category>
            <dc:creator><![CDATA[wonho ha]]></dc:creator>
            <pubDate>Mon, 10 Dec 2018 10:02:06 GMT</pubDate>
            <atom:updated>2018-12-10T10:50:45.136Z</atom:updated>
            <content:encoded><![CDATA[<h3>힙스터 개발자의 행동강령 — reverse</h3><p>by Las-Wonho</p><ol><li>힙스터는 컨퍼런스에 자주 참가한다.<br>- 컨퍼런스에 다니지만 거기서 잠을 자거나 하여서 얻는건 별로 없다.</li><li>고수준의 유명하지 않은 언어를 사용한다. (Lisp, Elixir, Groovy)<br>- 로우레벨을 배우기 귀찮아하며, 고수준의 언어도 잘 사용하지 못한다.</li><li>인공지능, 블록체인에 대하여 자세히 알고있다.<br>- 요즘 뜨고있기에 하는것이다. 알고있는 정도는… 이더리움 백서 한번 쓱 본정도? 인공지능은 텐서플로 예제는 따라해봤다.</li><li>노트북에는 스티커를 많이 붙인다.<br>- 남에게 보여주기를 좋아하며, 트렌드를 중시한다.</li><li>재귀 약자를 프로젝트 이름으로 자주 사용한다.<br>- 센스있는 이름이라고 여긴다. 또한 남들이 잘 하지 않는 방식이기에 좋아한다.</li><li>새로운 기술을 빨리 받아들인다.<br>- 그러나 하나의 기술을 깊게 알지는 못한다.</li><li>Docker에서 작업한다.<br>- 그러나 도커를 쓰느라 시간이 낭비되기도한다. 보여주기식으로 사용한다.</li><li>다른사람에게 자신이 하고있는 기술이 어떤것인지 설명하지 못해도 그 기술을 사용한다고 이야기한다.<br>- 튜토리얼만 보았어도 그 기술을 써본거다.</li><li>트위터나 페이스북같은 소셜 미디어를 자주 사용한다.<br>- 역시나 보여주기를 좋아함.</li><li>Azure를 아주르라고 읽지않는다.<br>- 더 멋있으니까!</li><li>이야기 할 때 영어를 사용하여 정확한 정보를 전달하려고 노력한다.<br>- 영어를 모르는 사람에게는 전달이 되지 않으며, 한글로 풀어쓸 능력도 없다.</li><li>언제나 노트북을 갖고다닌다.<br>- 그러나 펼치진않는다.</li><li>기술 트렌드를 중요하게 생각한다.<br>- 예전 기술을 무시한다.</li><li>자신의 영어이름이 있으며, 발표하거나 블로그를 운영할 때 영어이름을 사용한다.<br>- 영어이름이 있는게 멋있어보인다.</li><li>지식의 평등화에 관심이 많기때문에 자신의 지식을 모두와 나누려고한다.<br>- 자랑하기를 좋아한다. “나는 지식을 나누는 엘리트”같은 마인드가 있다.</li><li>블로그를 운영하며, 초보자들에게 유용한 튜토리얼을 많이 제공한다.<br>- 튜토리얼 이외의 정보는 잘 알지 못한다.</li><li>언제나 자동화 툴을 만들며, 반복작업을 하지 않으려고 한다.<br>- 그러나 시간이 더 걸리며, 비효율적인 경우도 있다.</li><li>설계와 최적화가 중요하기에 언제나 그것을 염두에 두고 작업을 한다.<br>- 이른 최적화때문에 난잡해지는 경우가 많다.</li><li>애자일을 실천하려고 한다.<br>- 그러나 민첩하지는 않으며, 애자일이 왜 좋은지보다는 좋다니까 하는것이다. 또한, 실제로 뭔지 잘 모른다.</li><li>TIL을 작성한다.<br>- 다들 하니까 따라서 한다.</li><li>새로운 단어를 만들기를 좋아한다. (Databaseless, Managementless)<br>- 발표하거나 말하면서 저런 단어를 쓴다면 멋있어보인다.</li><li>PHP, JSP를 싫어한다.<br>- 여러 이유가 있지만, 가장 큰 이유는 남들이 싫어하니까. 자신은 SI를 하지않는 엘리트이기 때문이다.</li><li>언어의 세세한 부분은 IDE가 해주기에 문법은 중요하지않다.<br>- 문법외우기가 귀찮다.</li></ol><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=57f53fee844f" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>