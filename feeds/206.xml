<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Clean Code that Works.</title>
<link>https://starplatina.tistory.com/</link>
<description>오픈소스, 방법론, UX에 관심이 많은 개발자 입니다.
Information architecture에도 관심이 있어요!</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 01:06:39 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>김제준</managingEditor>
<image>
<title>Clean Code that Works.</title>
<url>http://cfile1.uf.tistory.com/image/263A123D58DB4BE61E8B4E</url>
<link>https://starplatina.tistory.com</link>
<description>오픈소스, 방법론, UX에 관심이 많은 개발자 입니다.
Information architecture에도 관심이 있어요!</description>
</image>
<item>
<title>Spring 3.1.1 에서 @Scheduled 붙은 메서드는 Concurrent 하게 수행된다.</title>
<link>https://starplatina.tistory.com/entry/Spring-311-%EC%97%90%EC%84%9C-Scheduled-%EB%B6%99%EC%9D%80-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-Concurrent-%ED%95%98%EA%B2%8C-%EC%88%98%ED%96%89%EB%90%9C%EB%8B%A4</link>
<description>&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;정말 처음 봤던 내용.&lt;/p&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;=======================================================================================================================&lt;/p&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;Spring에서는 비동기 처리 및 스케쥴링 처리를 위해서 @Async, @Scheduled 를 지원하는데요.&lt;br /&gt;아래처럼 간단한 설정으로 사용 하기도 합니다.&lt;/p&gt;&lt;pre style=&quot;padding: 10px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14.3px; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 10px; margin-bottom: 10px; line-height: 20px; word-break: normal; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(239, 239, 239); border: none;&quot;&gt;&lt;code class=&quot;lang-xml&quot; style=&quot;padding: 0px; font-family: Menlo, Consolas, Monaco, &amp;quot;Ubuntu Mono&amp;quot;, source-code-pro, monospace; font-size: 12px; color: inherit; border-radius: 3px; background-color: transparent; border: none; margin: 0px;&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot; style=&quot;color: black; font-weight: bold;&quot;&gt;task:annotation-driven&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;위 설정으로 세팅하고 @Scheduled를 사용하는데, 사용하는 입장에서는 당연히 비동기로 동작할 것이라 생각합니다.&lt;br /&gt;(특정 시간에 동작하도록 하거나, fixedDelpay를 사용할 때)&lt;/p&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;하지만! 아무 설정을 하지 않을 경우에는 실제 작업을 수행하는 bean이 ConcurrentTaskScheduler로 설정되어 concurrent 하게 수행됩니다!&lt;/p&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;해서 비동기로 수행하고 싶으면 아래 처럼 설정을 추가해주시면 됩니다.&lt;/p&gt;&lt;pre style=&quot;padding: 10px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14.3px; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 10px; margin-bottom: 10px; line-height: 20px; word-break: normal; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(239, 239, 239); border: none;&quot;&gt;&lt;code class=&quot;lang-xml&quot; style=&quot;padding: 0px; font-family: Menlo, Consolas, Monaco, &amp;quot;Ubuntu Mono&amp;quot;, source-code-pro, monospace; font-size: 12px; color: inherit; border-radius: 3px; background-color: transparent; border: none; margin: 0px;&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot; style=&quot;color: black; font-weight: bold;&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;color: rgb(136, 0, 0);&quot;&gt;&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot; style=&quot;color: black; font-weight: bold;&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;color: rgb(136, 0, 0);&quot;&gt;&quot;poolSize&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;color: rgb(136, 0, 0);&quot;&gt;&quot;10&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot; style=&quot;color: black; font-weight: bold;&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;
// or
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot; style=&quot;color: black; font-weight: bold;&quot;&gt;task:scheduler&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;color: rgb(136, 0, 0);&quot;&gt;&quot;scheduler&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;pool-size&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;color: rgb(136, 0, 0);&quot;&gt;&quot;10&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;그럼 비동기로 동작하는 것을 확인 할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;참고로 디폴트로 ConcurrentTaskScheduler를 등록해 주는 부분은&lt;br /&gt;ScheduledAnnotationBeanPostProcessor.onApplicationEvent 에서 맨 마지막에 this.registrar.afterPropertiesSet() 를 호출해주는데&lt;br /&gt;여기 들어가 보면 taskScheduler 가 null 일때 ConcurrentTaskScheduler로 세팅해주는것을 확인할 수 있습니다.&lt;/p&gt;&lt;pre style=&quot;padding: 10px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 14.3px; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 10px; margin-bottom: 10px; line-height: 20px; word-break: normal; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(239, 239, 239); border: none;&quot;&gt;&lt;code class=&quot;lang-java&quot; style=&quot;padding: 0px; font-family: Menlo, Consolas, Monaco, &amp;quot;Ubuntu Mono&amp;quot;, source-code-pro, monospace; font-size: 12px; color: inherit; border-radius: 3px; background-color: transparent; border: none; margin: 0px;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;color: rgb(136, 0, 0); font-weight: bold;&quot;&gt;afterPropertiesSet&lt;/span&gt;() {
        &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.taskScheduler == &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.localExecutor = Executors.newSingleThreadScheduledExecutor();
            &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.taskScheduler = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;new&lt;/span&gt; ConcurrentTaskScheduler(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.localExecutor);
        }
        &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.triggerTasks != &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;Runnable, Trigger&amp;gt; entry : &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.triggerTasks.entrySet()) {
                &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.scheduledFutures.add(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.taskScheduler.schedule(entry.getKey(), entry.getValue()));
            }
        }
        &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.cronTasks != &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;Runnable, String&amp;gt; entry : &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.cronTasks.entrySet()) {
                &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.scheduledFutures.add(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.taskScheduler.schedule(entry.getKey(), &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;new&lt;/span&gt; CronTrigger(entry.getValue())));
            }
        }
        &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.fixedRateTasks != &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;Runnable, Long&amp;gt; entry : &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.fixedRateTasks.entrySet()) {
                &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.scheduledFutures.add(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.taskScheduler.scheduleAtFixedRate(entry.getKey(), entry.getValue()));
            }
        }
        &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.fixedDelayTasks != &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;Runnable, Long&amp;gt; entry : &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.fixedDelayTasks.entrySet()) {
                &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.scheduledFutures.add(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;this&lt;/span&gt;.taskScheduler.scheduleWithFixedDelay(entry.getKey(), entry.getValue()));
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;margin: 15px 0px; padding: 0px; line-height: 1.6em; color: rgb(32, 32, 32); font-family: &amp;quot;SF UI DISPLAY&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, NanumGothic, &amp;quot;Nanum Barun Gothic Light&amp;quot;, &amp;quot;Apple SD Gothic Neo&amp;quot;, &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 14.3px;&quot;&gt;감사합니다. :)&lt;/p&gt;</description>
<category>Spring</category>
<category>Spring</category>
<category>spring scheduled</category>
<category>스프링</category>
<author>김제준</author>
<guid>https://starplatina.tistory.com/438</guid>
<comments>https://starplatina.tistory.com/entry/Spring-311-%EC%97%90%EC%84%9C-Scheduled-%EB%B6%99%EC%9D%80-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-Concurrent-%ED%95%98%EA%B2%8C-%EC%88%98%ED%96%89%EB%90%9C%EB%8B%A4#entry438comment</comments>
<pubDate>Tue, 18 Oct 2016 17:09:20 +0900</pubDate>
</item>
<item>
<title>인텔리J에서 배포가 안될때..</title>
<link>https://starplatina.tistory.com/entry/%EC%9D%B8%ED%85%94%EB%A6%ACJ%EC%97%90%EC%84%9C-%EB%B0%B0%ED%8F%AC%EA%B0%80-%EC%95%88%EB%90%A0%EB%95%8C</link>
<description>&lt;p&gt;오늘 나를 힘들게 했던것 기록..&lt;/p&gt;&lt;p&gt;프로젝트를 빌드해서 실행 할려고 하는데(tomcat), build artifact 하는 데서 문제가 발생!&lt;br /&gt;&quot;Error:Cannot build Artifact 'project:war exploded' because it is included into a circular dependency&quot;&lt;/p&gt;&lt;p&gt;발생하는 순서는 최초 프로젝트가 한개있을 때는 잘 되다가 다른 프로젝트가 추가 됫을 경우(웹프로젝트, war 빌드) 발생했다.&lt;br /&gt;연속되는 삽질을 하다가 원인을 찾았다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Project Structure &amp;gt; Artifacts 로 이동 하면 output directory를 설정 할 수있는데,&amp;nbsp;&lt;br /&gt;각각 프로젝트들의 war exploded 위치가 동일하게 지정되있어서 이것때문에 발생한 문제 였다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;오마이 가쉬.&lt;br /&gt;별거 아닌데 무한 삽질의 가능성을 내포한 문제인듯..&lt;br /&gt;에러메시지를 좀 더 자세히 찍어 주면 좋겠다. ㅎㅎ&lt;/p&gt;</description>
<category>Java</category>
<author>김제준</author>
<guid>https://starplatina.tistory.com/437</guid>
<comments>https://starplatina.tistory.com/entry/%EC%9D%B8%ED%85%94%EB%A6%ACJ%EC%97%90%EC%84%9C-%EB%B0%B0%ED%8F%AC%EA%B0%80-%EC%95%88%EB%90%A0%EB%95%8C#entry437comment</comments>
<pubDate>Mon, 01 Jun 2015 15:05:01 +0900</pubDate>
</item>
<item>
<title>로드-커팅 문제(Cutting Stock Problem)</title>
<link>https://starplatina.tistory.com/entry/%EB%A1%9C%EB%93%9C-%EC%BB%A4%ED%8C%85-%EB%AC%B8%EC%A0%9CCutting-Stock-Problem</link>
<description>&lt;p&gt;로드-커팅 문제(Cutting Stock Problem) : 주어진 장작을 다양한 크기로 잘라 최대한의 이익이 나도록 하는 문제.&lt;/p&gt;&lt;p&gt;도매로 장작을 구입해서 소매로 판매하는 회사에 근무한다고 가정해보자. 이 회사는 장작을 다양한 크기로 잘라서 최대한의 이익을 얻는다. 각각 서로 다른 길이를 갖고 있는 장작의 가격은 수시로 변경되며 따라서 주어진 크기의 장작에 대해 최대한의 이익을 구하는 프로그램을을 작성해야 한다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;단순한 재귀 호출을 사용한 해결&lt;br /&gt;5인치의 장작이 있다면 그 길이에 대한 가격을 찾을 수 있다. 이 예제에서 5인치 장작의 가격은 2달러 이다, 하지만 4인치도 2달러 이기 때문에 이 경우에는 5인치를 5인치와 1인치로 자르는 방법이 더 좋다. 이 방법을 사용하면 n의 길이에 대한 수익을 구할 수 있으며, 그 방법은 해당 길이를 가능한 2n-1로 자르는 것이 가장 큰 수익을 얻을 수 있다.&lt;/p&gt;&lt;p&gt;주어진 길이 n에 대해서&amp;nbsp;max(no cut, cut(1, n-1), cut(2, n-2), ....)와 같이 계산할 수 있다.&lt;/p&gt;&lt;p&gt;이를 코드로 작성하면 아래와 같이 작성 할 수 있다.&amp;nbsp;&lt;br /&gt;이 메서드는 특정 길이의 수익을 찾는데 주어진 길이에 추가 하여 다른 길이의 수익을 재귀적으로 찾게 된다. 최종적으로는 그 중에 최대 수익을 구하도록 되어 있다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:14pt;&quot;&gt;&lt;pre style=&quot;font-family: 나눔고딕코딩; font-size: 14pt;&quot;&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;List&amp;lt;Integer&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;priceValues &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;= Arrays.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 10pt;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;9&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;15&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;public int &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 10pt;&quot;&gt;maxProfit&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;length) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit = (length &amp;lt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;prices&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.size()) ? &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;prices&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.get(length - &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;) : &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;    for &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i = &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i &amp;lt; length &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i++) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;currentProfit = maxProfit(i) + maxProfit(length - i)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;        if &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(currentProfit &amp;gt; profit) profit = currentProfit&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;이를 수행해 보면 length 값이 증가할 수록 복잡도가&amp;nbsp;&lt;span style=&quot;font-family: 'Cambria Math'; font-size: 11pt; text-indent: 0in; line-height: 1.5;&quot;&gt;O(2^(n-1) ) &lt;span style=&quot;font-family: Dotum, 돋움; font-size: 9pt;&quot;&gt;와 같이 지수 형태로 증가 하기 때문이고, 다양한 길이에 대한 반복된 연산을 계속 수행한다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;이를 개선하기 위해 재귀 연산을 재활용하는 메모이제이션 기법을 사용한다.&lt;br /&gt;메모이제이션을 사용하면 처음으로 연산하는 경우에만 연산을 실행하고, 이전에 한 번이라도 연산을 한 적이 있다면 과거의 연산 결과를 사용한다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;자바 8 람다의 힘 책에서는 이를 람다로 풀었었었는데, 이를 람다가 아닌 일반 해쉬 맵을 사용한다면..&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:14pt;&quot;&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;private final &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Map&amp;lt;Integer&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Integer&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;store &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;HashMap&amp;lt;&amp;gt;()&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;public int &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 10pt;&quot;&gt;maxProfit&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;length) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit = (length &amp;lt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;prices&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.size()) ? &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;prices&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.get(length - &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;) : &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;    if &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;store&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.get(length) != &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;store&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.get(length)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;} &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;else &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;for &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i = &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i &amp;lt; length &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i++) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;currentProfit = maxProfit(i) + maxProfit(length - i)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;            if &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(currentProfit &amp;gt; profit) profit = currentProfit&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;store&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.put(length&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;        return &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;위 같은 방법으로 이미 호출됬던 재귀 호출에 대한 값을 hashmap에 저장해 둠으로써 연산 속도를 엄청나게 올릴 수 있다.&lt;/p&gt;&lt;p&gt;기존 방법으로 할 경우 22를 값으로 줄 경우 무려 40초가 걸리는데, 맵을 사용하는 방법으로 변경하면 1초도 안걸린다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;이걸 Java 8 람다 스타일로 좀 바꿔 보면 아래 처럼 작성할 수 있다.&amp;nbsp;&lt;br /&gt;.&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;computeIfAbsent&lt;/a&gt;는 map에 추가된 메서드로 키에 해당하는 값이 있으면 그 값을 리턴해주고 없으면 새로운 값을 할당한 다음 그것을 리턴해준다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:14pt;&quot;&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;public int &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 10pt;&quot;&gt;maxProfit&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;length) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;store&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.computeIfAbsent(length&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(key) -&amp;gt; {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit = (length &amp;lt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;prices&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.size()) ? &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;prices&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.get(length - &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;) : &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;            for &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i = &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 10pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i &amp;lt; length&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;i++) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;                &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;final int &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;currentProfit = maxProfit(i) + maxProfit(length - i)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;                if &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(currentProfit &amp;gt; profit) profit = currentProfit&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 10pt;&quot;&gt;store&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;.put(length&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;            return &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;profit&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 10pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;    )&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;여기서 느낄 수 있었던 것은 재귀 함수를 작성해서 문제를 해결한다. 라는 생각까지만 하지말고 이를 좀 더 머리를&amp;nbsp;써보면(여기서는 맵을 사용한 메모이제이션) 좀 더 성능이 좋은 코드를 작성할 수 있다는 것이다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;따로 알고리즘 공부를 하진 않지만 기존 알고리즘에 이런 메모이제이션 기법을 도입하는 것은 참신한 기법인듯.&lt;br /&gt;프로그래밍 경험치가 +1 되는 기분이 들었다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;language:ko;margin-top:0pt;margin-bottom:0pt;margin-left:0in;
text-indent:0in&quot;&gt;&lt;/p&gt;</description>
<category>이론..</category>
<category>Java</category>
<category>java8</category>
<author>김제준</author>
<guid>https://starplatina.tistory.com/435</guid>
<comments>https://starplatina.tistory.com/entry/%EB%A1%9C%EB%93%9C-%EC%BB%A4%ED%8C%85-%EB%AC%B8%EC%A0%9CCutting-Stock-Problem#entry435comment</comments>
<pubDate>Fri, 13 Feb 2015 13:57:12 +0900</pubDate>
</item>
<item>
<title>봄싹 2014에서 발표한 내용</title>
<link>https://starplatina.tistory.com/entry/%EB%B4%84%EC%8B%B9-2014%EC%97%90%EC%84%9C-%EB%B0%9C%ED%91%9C%ED%95%9C-%EB%82%B4%EC%9A%A9</link>
<description>&lt;p style=&quot;text-align: center;&quot;&gt;자바 8 람다의 힘, 이 책 읽고 했으면 좀 더 좋았을 것 같다. ㅋ&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/42194312&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/ssuser1fb4cf/api-42194312&quot; title=&quot;자바 8 스트림 API&quot; target=&quot;_blank&quot;&gt;자바 8 스트림 API&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/ssuser1fb4cf&quot; target=&quot;_blank&quot;&gt;제준 김&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Java</category>
<author>김제준</author>
<guid>https://starplatina.tistory.com/433</guid>
<comments>https://starplatina.tistory.com/entry/%EB%B4%84%EC%8B%B9-2014%EC%97%90%EC%84%9C-%EB%B0%9C%ED%91%9C%ED%95%9C-%EB%82%B4%EC%9A%A9#entry433comment</comments>
<pubDate>Wed, 10 Dec 2014 09:42:18 +0900</pubDate>
</item>
<item>
<title>Java 8 Stream API PART 2.</title>
<link>https://starplatina.tistory.com/entry/Java-8-Stream-API-PART-2</link>
<description>이전글에 이어 2부를 번역해 봤습니다.&lt;p&gt;원본 : &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/architect-streams-pt2-2227132.html&quot; target=&quot;_blank&quot;&gt;Part 2. Processing Data with Java SE 8 Streams&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;==================================================================================&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt; color: rgb(0, 0, 0);&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt; color: rgb(0, 0, 0);&quot;&gt;다양한 기능들을 조합하여 좀 더 다양한 데이터 처리 쿼리를 만들기.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;이전 문서에서 스트림을 사용하여 컬렉션 데이터 처리를 데이터베이스의 쿼리처럼 처리하는것을 살펴 보았다.&lt;br /&gt;머
리를 식힐겸 스트림 API를 사용하여 거래금액이 비싼 내역들의 합을 구하는 코드인 Listing 1을 보자. 중간 
작업(filter, map)을 통해 파이프라인을 세팅하고 종료 작업(reduce)을 통해 코드를 실행시키는 과정을 아래 
Figure 1을 통해 볼 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 1.&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(218, 208, 133);&quot;&gt;int&lt;/span&gt; sumExpensive = transactions.stream()
                   .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&amp;gt;&lt;/span&gt; t.getValue() &amp;gt; 1000)
                   .&lt;span style=&quot;color: rgb(218, 208, 133);&quot;&gt;map&lt;/span&gt;(Transaction::getValue)
                   .reduce(0, Integer::sum);&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Figure 1&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:548px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2701913D5456D40322&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure1.jpg&quot; height=&quot;123&quot; style=&quot;&quot; width=&quot;548&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;flatMap, collect 두 기능에 대해서 알아보자.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&quot; target=&quot;_blank&quot;&gt;flatMap&lt;/a&gt; : 중간 작업으로 &quot;map&quot; 과 &quot;flatten&quot;을 섞은 것이다&lt;/li&gt;&lt;li&gt; &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-&quot; target=&quot;_blank&quot;&gt;collect &lt;/a&gt;: 종료 작업으로 인자로 받은 형태의 데이터 타입으로 결과물을 생성한다. &lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;이 두 기능은 복잡한 형태의 질의를 하는데 유용하게 쓰인다. 예를 들어 flatMap과 collect를 조합하여 Listing2 처럼 스트림에서 중복이 제거된 각 알파벳의 카운트를 가진 맵을 만들 수 있다. &lt;br /&gt;이 두 기능에 대해서 더 자세히 살펴보고 설명할 예정이니 처음 보는 형태의 코드를 보고 걱정할 필요는 없다&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 2&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;import&lt;/span&gt; static java.util.function.&lt;span style=&quot;color: rgb(155, 133, 157);&quot;&gt;Function.identity&lt;/span&gt;;
&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;import&lt;/span&gt; static java.util.stream.&lt;span style=&quot;color: rgb(155, 133, 157);&quot;&gt;Collectors.&lt;/span&gt;*;

&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;Stream&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(218, 208, 133);&quot;&gt;words&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;Stream&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;of&lt;/span&gt;(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Java&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Magazine&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;is&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;the&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;best&quot;&lt;/span&gt;);

&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;Map&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;Long&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; letterToCount &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt;
           &lt;span style=&quot;color: rgb(218, 208, 133);&quot;&gt;words&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(218, 208, 133);&quot;&gt;map&lt;/span&gt;(w &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&amp;gt;&lt;/span&gt; w&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;split(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;&quot;&lt;/span&gt;))
                &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;flatMap(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;::&lt;/span&gt;stream)
                &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(groupingBy(identity&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;()&lt;/span&gt;, counting&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;()&lt;/span&gt;));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;Listing2 의 결과를 출력해보면 Listing3과 같이 표시된다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;이제부터 flatMap과 collect가 어떻게 동작하는지 알아보자&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 3&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;[a&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;4&lt;/span&gt;, b&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, e&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;3&lt;/span&gt;, g&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, h&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, i&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;, .&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;]&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt; color: rgb(0, 0, 0);&quot;&gt;flatMap Operation&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;만약 파일에서 고유한 단어를 찾는다고 생각해보자. 이를 어떻게 구현할 것인가?&lt;br /&gt;&lt;br /&gt;Files.lines()를 통해 한줄씩 읽은 다음 map() 기능을 사용해서 단어들을 잘라낸 다음에&amp;nbsp; distinct()를 사용해 중복을 제거 하면 된다. 이를 코드로 작성해보면 Listing 4처럼 될 것이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 4&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Files&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;lines(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Paths&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;get(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;stuff.txt&quot;&lt;/span&gt;))
              .map(line &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; line&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;split(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;&lt;span style=&quot;color: rgb(221, 242, 164);&quot;&gt;\\&lt;/span&gt;s+&quot;&lt;/span&gt;)) &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;String[]&amp;gt;&lt;/span&gt;
              .distinct() &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;String[]&amp;gt;&lt;/span&gt;
              .forEach(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;println);&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;하지만 이 코드는 원하는 대로 동작 하지 않는다. 이 코드를 실행시켜보면 아래와 같은 결과를 얻을 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 0px; list-style: none; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0); font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);&quot;&gt;[Ljava.lang.String;@7cca494b
[Ljava.lang.String;@7ba4f24f&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;처음 작성한 위 코드는 스트림들을 String으로 출력하고 있다. 무슨일이 발생한걸까? &lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 방식의 문제점은 람다 표현식에서 map으로 전달되는 형태가 String 배열(String[]) 이기 때문이다.&lt;br /&gt;이 결과를 보면 우리가 원하는 형태는 문자들로 구성된 Stream&amp;lt;String&amp;gt;인데 map()을 사용했을때 리턴하는 스트림은 Stream&amp;lt;String[]&amp;gt;이 된다.&lt;br /&gt;&lt;br /&gt;이는 flatMap을 사용하면 간단히 해결할 수 있다. 이 방법을 한단계씩 적용해보자.&lt;br /&gt;&lt;br /&gt;코드를 작성하기 위해서 단어의 스트림 대신 배열 스트림이 필요하다. Arrays.stream() 메서드를 통해 배열을 스트림으로 만들 수 있다.&amp;nbsp; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 5&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;[] arrayOfWords &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; {&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Java&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Magazine&quot;&lt;/span&gt;};
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Stream&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; streamOfwords &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream(arrayOfWords);&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;이처럼 배열을 스트림으로 변환하는 내용을 Listing 6 처럼 추가해보자.&lt;br /&gt;이 방법도&amp;nbsp; 스트림의 스트림목록 형태(Stream&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt;)로 되어 있어서 잘 동작하지 않는다. &lt;br /&gt;처음엔 매 라인을 단어들의 배열로 바꾸도록 하였고, 그 다음 이 배열들을 Arrays.stream()을 사용해서 stream으로 변경했다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 6&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Files&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;lines(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Paths&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;get(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;stuff.txt&quot;&lt;/span&gt;))
            .map(line &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; line&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;split(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;&lt;span style=&quot;color: rgb(221, 242, 164);&quot;&gt;\\&lt;/span&gt;s+&quot;&lt;/span&gt;)) &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;String[]&amp;gt;&lt;/span&gt;
            .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;stream) &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt;&lt;/span&gt;
            .distinct() &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt;&lt;/span&gt;
            .forEach(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;println);&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;Listing 7 처럼 flatMap을 사용하도록 하여 잘 동작하게 할 수 있다.&amp;nbsp; 이는 map(Arrays::stream)을 사용한것 처럼 각각 분리된 스트림들을 생성하고 이를 하나의 스트림으로 변경한다. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 7&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Files&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;lines(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Paths&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;get(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;stuff.txt&quot;&lt;/span&gt;))
            .map(line &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; line&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;split(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;&lt;span style=&quot;color: rgb(221, 242, 164);&quot;&gt;\\&lt;/span&gt;s+&quot;&lt;/span&gt;)) &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;String[]&amp;gt;&lt;/span&gt;
            .flatMap(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;stream) &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;String&amp;gt;&lt;/span&gt;
            .distinct() &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// Stream&amp;lt;String&amp;gt;&lt;/span&gt;
            .forEach(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;println);&lt;/pre&gt;&lt;p&gt;Figure 2 에서는 flatMap 메서드의 동작방식을 설명하고 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Figure 2&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:548px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/26065C405456D41D24&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure2.jpg&quot; height=&quot;411&quot; width=&quot;548&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;간단하게 말하면 flatMap은 각각 다른 값을 가진 스트림들을 하나의 스트림으로 생성해 준다. &lt;br /&gt;flatMap은 자주 사용되는 패턴으로 Optional이나 CompletableFuture를 사용할때 다시 보게 될 것이다.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt; color: rgb(0, 0, 0);&quot;&gt;collect Operation&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;이젠 colllect 메서드에 대해서 더 상세히 알아보자. 이전 문서에서 봤던 collect의 사용방법은 작업을 처리한 후 다른 스트림을 리턴하거나 다른 값(boolean, int, Optional)을 리턴하는 것이었다.&lt;br /&gt;&lt;br /&gt;collect 메서드는 종료 작업이긴 하지만 stream을 list로 변경할 경우는 약간 다르다. 예를 들어 아래 listing 8의 코드 처럼 거래 금액이 큰 거래내역의 id 목록을 가져오는것 처럼 list를 리턴한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 8&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;import static&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;java.util.stream.Collectors.*&lt;/span&gt;; 
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Integer&lt;/span&gt;&amp;gt;&lt;/span&gt; expensiveTransactionsIds &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
       transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
                   .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1000&lt;/span&gt;)&lt;br /&gt;                   .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getId)
                   .collect(toList());&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;collect 메서드에 전달된 인자의 타입은 java.util.stream.Collector다. Collector 오브젝트가 하는일은 무엇일까? 이것은 본질적으로 최종 리턴값으로 되어야할 것에 대해 설명을 한다고 보면 된다.&lt;br /&gt;팩토리 메서드인 Collectors.toList()는 스트림을 리스트 형태로 변경하여 반환한다. 다른 형태의 내장 Collectors도 여러가지가 존재 한다.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;스트림을 다른 컬렉션 형태로 변경하기.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;toSet()을 사용하면 스트림을 Set(중복이 제거된)으로 변경 가능하다. Listing 9의 코드는 거래내역중에 도시 목록을 중복이 제거된 Set 형태로 반환한다. &lt;br /&gt;&lt;b&gt;Listing 9&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Set&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; cities &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
         transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
                     .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1000&lt;/span&gt;)
                     .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCity)
                     .collect(toSet());&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위 코드를 보면 Set이 어떤 타입인지는 보장하지 않지만 toCollection() 메서드를 사용해서 타입을 지정할 수 있다.&lt;br /&gt;아래 Listing 10의 코드 처럼 toCollecte에다가 HashSet을 지정할 수 있다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 10&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Set&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; cities &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
         transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
                     .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1000&lt;/span&gt;)
                     .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCity)
                     .collect(toCollection(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;HashSet&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt;));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;위 기능은 collect를 사용해서 할 수 있는 것들중에 작은 부분일 뿐이다. &lt;br /&gt;아래 예제처럼 몇가지 기능을 더 사용할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;화폐에 따른 거래 내역을 그룹핑하여 합을 구하기 (Map&amp;lt;Currency, Integer&amp;gt;)&lt;/li&gt;&lt;li&gt;거래 내역을 두 개로 분리 : 비싼 내역과 그렇지 않은 내역(Map&amp;lt;Boolean, List&amp;lt;Transaction&amp;gt;)&lt;/li&gt;&lt;li&gt;다양한 뎁스로 그룹핑, 도시 형태로 먼저 그룹핑 하고 그 안에 비싼 내역과 그렇지 않은 내역으로 또 그룹핑(Map&amp;lt;String, Map&amp;lt;Boolean, List&amp;lt;Transaction&amp;gt;&amp;gt;)&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;계속 해서 Steam API와 collectors 들을 사용해서 다양한 질의를 생성하는것에 대해 살펴보자&lt;br /&gt;가
장 먼저 볼 것은&amp;nbsp; 스트림을 &quot;summarizes&quot; 하는 것이고(평균값 계산, 최대 및 최소값 추출) 그 다음은 간단한 그룹핑을 
살펴보고 마지막으로 collectors 들을 조합하여 멀티레벨 그룹핑 같은 다양한 질의문을 만들어보자.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt; color: rgb(0, 0, 0);&quot;&gt;Summarizing&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;몇가지 간단한 예제들을 가지고 워밍업을 해보자. &lt;br /&gt;이전 문서에서 숫자들의 목록을 가지고 최대, 최소 및 평균을 reduce 메소드를 사용해서 구해봤었다. 이것들을 미리 정의 되어 있는 collectors 들이다. &lt;br /&gt;만약 숫자들의 갯수들 가져오고 싶으면 Listing 11의 코드처럼 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#counting--&quot; target=&quot;_blank&quot;&gt;counting()&lt;/a&gt;을 사용하면 된다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 11&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;long&lt;/span&gt; howManyTransactions &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt;  transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(counting());&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#summingDouble-java.util.function.ToDoubleFunction-&quot; target=&quot;_blank&quot;&gt;summingDouble()&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#summingInt-java.util.function.ToIntFunction-&quot; target=&quot;_blank&quot;&gt;summingInt()&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#summingLong-java.util.function.ToLongFunction-&quot; target=&quot;_blank&quot;&gt;summingLong()&lt;/a&gt; 같은&amp;nbsp; 메서드를 사용해서 스트림에 포함된 Double, Int, long 과 같은 엘리먼트들의 합계를 구할 수 있다. &lt;br /&gt;아래 Listing 12의 코드는 모든 거래 내역의 합계를 구한다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 12&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; totalValue &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&lt;br /&gt;           .&lt;/span&gt;collect(summingInt(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;위와 비슷하게 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#averagingDouble-java.util.function.ToDoubleFunction-&quot; target=&quot;_blank&quot;&gt;averagingDouble()&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#averagingInt-java.util.function.ToIntFunction-&quot; target=&quot;_blank&quot;&gt;averagingInt()&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#averagingLong-java.util.function.ToLongFunction-&quot; target=&quot;_blank&quot;&gt;averagingLong()&lt;/a&gt;일 사용해서 평균값을 구할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#maxBy-java.util.Comparator-&quot; target=&quot;_blank&quot;&gt; maxBy()&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#minBy-java.util.Comparator-&quot; target=&quot;_blank&quot;&gt;minBy()&lt;/a&gt;를 사용해서 최대값과 최소값을 구할 수도 있다.&lt;br /&gt;위 두 메서드는 Figure 3처럼&amp;nbsp; Comparator형태의 인자를 필요로 한다.&lt;br /&gt;&lt;b&gt;Figure 3&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:470px;font-size: 9pt; line-height: 1.5;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/21197E465456D42C17&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure3.jpg&quot; height=&quot;290&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot; width=&quot;470&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Listing 14의 코드 처럼 스태틱 메서드인 comparing() 메서드는 전달된 함수를 가지고 Comparator 객체를 생성한다. 이 함수에서 추출된 값을 사용해서 스트림의 값들을 비교하게 된다. &lt;br /&gt;아래 코드에서는 가장 높은 값을 찾는 코드이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 14&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Optional&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&amp;gt;&lt;/span&gt; highestTransaction &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
        transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
                               .collect(maxBy(comparing(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue)));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#reducing-T-java.util.function.BinaryOperator-&quot; target=&quot;_blank&quot;&gt;reducing()&lt;/a&gt; 메서드 처럼 모든 엘리먼트들에 대해 정해진 작업을 반복적으로 수행하는 것도 있다. &lt;br /&gt;Listing 15의 코드는 reducing() 메서드를 사용해서 합계를 구하는 코드이다.&lt;br /&gt;&lt;b&gt;Listing 15&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; totalValue &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(reducing(
        &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;sum));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;recuding() 메서드는 3개의 인자를 가진다&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;초기화 값(stream이 비어있으면 이겂을 리턴) : 여기서는 0&lt;/li&gt;&lt;li&gt;스트림에서 반복적으로 수행할 함수 : 여기서는 getValue를 통해 값을 추출&lt;/li&gt;&lt;li&gt;위에서 구한 값을 조합 하는 코드 : 여기서는 값을 계속 더한다.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&quot;이전에 reduce(), max(), min()을 통해서 위 기능을 사용했었는데 왜 이제와서 이걸 보여주지?' 라는 의문이 들 것이다. &lt;br /&gt;위의 기본 기능이외에 collectors를 조합하여 더 복잡한 질의문(합계를 그룹핑 하는)을 생성하는것을 볼것인데 이 내장 collector에 대해서 알아 두는 것이 좋다.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt; color: rgb(0, 0, 0);&quot;&gt;Grouping&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;대부분의 데이터베이스들이 Group By 같은 명령어를 통해서 데이터 그룹핑을 지원한다.&lt;/p&gt;&lt;p&gt;만약 화폐에 따라 거내 내역을 그룹핑할 필요가 있을때 이를 이전 방법으로 작성한다면 아래 코드처럼 고통스러운 코드를 작성해야 될 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 16&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Currency&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; transactionsByCurrencies &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;HashMap&amp;lt;&amp;gt;&lt;/span&gt;();
&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt; transaction &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt; transactions) { 
        &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Currency&lt;/span&gt; currency &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; transaction&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getCurrency();
        &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&amp;gt;&lt;/span&gt; transactionsForCurrency &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; transactionsByCurrencies&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;get(currency);
        &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;if&lt;/span&gt; (transactionsForCurrency &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;null&lt;/span&gt;) {
                transactionsForCurrency &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;ArrayList&amp;lt;&amp;gt;&lt;/span&gt;();
                transactionsByCurrencies&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;put(currency, transactionsForCurrency);
        }
        transactionsForCurrency&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;add(transaction);
}&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;위 코드를 보면 먼저 거래내역을 저장할 Map을 생성한 후 거래내역에 대해 반복 작업을 수행해서 currency를 추출 한 다음 Map에 currency가 존재 하지 않으면 새로 만들어서 넣어 주는 작업을 하고 있다.&lt;br /&gt;사실 currency에 따라 거래내역을 그룹핑 하는것을 원할 뿐인데 상당히 복잡한 코드로 작성되어 있다. &lt;br /&gt;이를 개선하기 위해서는 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-&quot; target=&quot;_blank&quot;&gt;groupingBy()&lt;/a&gt;메서드를 사용하면 되는데 이를 사용해서 간결한 코드로 위 내용을 작성할 수 있다.&lt;br /&gt;Listing 17의 코드는 이전 코드와 동일한 역할을 하고 훨씬더 이해하기 쉽게 작성되어 있다.&lt;br /&gt;&lt;b&gt;Listing 17&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Currency&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; transactionsByCurrencies &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt;
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(groupingBy(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCurrency));&lt;/pre&gt;&lt;p&gt;팩토리 메서드인 groupingBy()는 그룹핑 하는데 키로 사용할 값을 추출하는 함수를 인자로 받아서 사용한다. 이를 &lt;a href=&quot;http://en.wikipedia.org/wiki/Statistical_classification&quot; target=&quot;_blank&quot;&gt;classification function&lt;/a&gt;(분류함수)이라고 한다. &lt;br /&gt;이 예제에서는 transaction의 currency로 그룹핑을 하기 위해서 메소드 참조(Transaction::getCurrency)를 파라미터로 전달한다. &lt;br /&gt;Figure 4에서는 이를 그림으로 설명하고 있다.&lt;br /&gt;&lt;b&gt;Figure 4&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:548px;font-size: 9pt; line-height: 1.5;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/25523E445456D43D14&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure4.jpg&quot; height=&quot;293&quot; style=&quot;font-size: 9pt; line-height: 1.5;&quot; width=&quot;548&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 11pt;&quot;&gt;Partitioning&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;groupingBy()의 특별한 케이스인 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#partitioningBy-java.util.function.Predicate-&quot; target=&quot;_blank&quot;&gt;partitioningBy()&lt;/a&gt;라는 팩토리 메서드도 존재 한다. 이것은 predicate타입을 인자로 받으며 predicate에 만족하는 엘리먼트들을 그룹핑해서 리턴한다. &lt;br /&gt;바꿔 말하면 거래내역들을 분류해서 그룹핑 할 수 있다(Map&amp;lt;Boolean, List&amp;lt;Transaction&amp;gt;)&lt;br /&gt;예
를 들어 만약 거래내역을 두가지 그룹으로 나누고 싶다면(고가, 저가) Listing 18의 코드처럼 
partitioningBy()를 사용하면 된다. 람다 표현식인 t -&amp;gt; t.getValue() &amp;gt; 1000 을 기준으로
 거래 내역을 구분하게 된다.&lt;br /&gt;&lt;b&gt;Listing 18&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Boolean&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; partitionedTransactions &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt;
            transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(partitioningBy(
              t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1000&lt;/span&gt;));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Composing collectors.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;SQL을 자주 사용해봐서 익숙 하다면 GROUP BY와 함께 COUNT()와 SUM()을 사용해본 경험이 있을 것이다. 이 기능과 비슷한것을 Stream API를 통해서 할 수 있다. &lt;br /&gt;groupingBy() 두번째 인자로 대상 을 넣어 주면 된다. &lt;br /&gt;&lt;br /&gt;추
상적인 설명으로는 이해가 잘 않으니까 간단한 예제를 살펴보자. Map을 만들어서 도시별로 거래내역의 합계를 구한다고 해보자. 
Listing 19의 코드 처럼 groupingBy 의 첫번째 인자로 getCity()를 줘서 키를 지정하면 도시를 키로 가지고 
있고 값으로 List&amp;lt;Transaction&amp;gt;을 가지고 있는 Map을 리턴할 것이다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 19&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Integer&lt;/span&gt;&amp;gt;&lt;/span&gt; cityToSum &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
           transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(groupingBy(
             &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCity, summingInt(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue)));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;만약 도시별 거래금액의 합계를 구하기 위해서는 summingInt라는 추가적인 컬렉터를 세팅해줘야된다. 이 코드의 실행 결과로 Map&amp;lt;String, Integer&amp;gt;를 형태로 각 도시별 거래금액의 합계를 구할 수 있다.&lt;br /&gt;groupingBy(Transaction::getCity&amp;gt; 형태로 사용할 수도 있고 groupingBy&amp;lt;Stransaction::getCity, toList()) 형태로도 사용할 수 있다.&lt;br /&gt;&lt;br /&gt;각 도시의 가장 높은 거래 금액을 가지고 있는 Map을 생성한다고 해보자. &lt;br /&gt;아래 Lisinting 20의 코드처럼 이전에 봣던 maxBy 컬렉터를 사용하면 쉽게 구현할 수 있다.&lt;br /&gt;&lt;b&gt;Listing 20&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Optional&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; cityToHighestTransaction &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
           transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;collect(groupingBy(
             &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCity, maxBy(comparing(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue))));&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;스트림 API는 다양한 기능을 제공하고 SQL처럼 동작하는 쿼리를 간결하게 작성할 수 있다. &lt;br /&gt;&lt;br /&gt;마지막으로 조금 더 복잡한 예를 살펴보자. groupingBy()의 인자로 다른 컬렉터를 받아서 다양한 작업을 할 수 있다. &lt;br /&gt;이것은 groupingBy()도 collector이기 때문이다. 멀티레벨 그룹핑을 할때 groupingBy collector를 전달함으로써 이를 구현할 수 잇다.&lt;br /&gt;&lt;br /&gt;Listing 21의 코드는 거래 내역을 도시별로 그룹핑하고 하위 그룹은 통화별 거래내역의 평균을 가지도록 하는 코드이다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Listing 21&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;margin: 0px; padding: 4px; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 0.9333em; line-height: 1.5em; font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(248, 248, 248); background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Map&amp;lt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Currency&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Double&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; cityByCurrencyToAverage &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
           transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&lt;br /&gt;               .&lt;/span&gt;collect(groupingBy(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCity,
                   groupingBy(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getCurrency,  
                   averagingInt(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue))));&lt;/pre&gt;&lt;br /&gt;Figure 5는 이름 그림으로 설명한 것이다.&lt;br /&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:548px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2310C0465456D44B24&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure5.jpg&quot; height=&quot;411&quot; style=&quot;&quot; width=&quot;548&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;Creating your own collector.&lt;br /&gt;지금까지 본 모든 collector 들은 java.util.stream.Collector 인터페이스를 구현한 것이다. 만약 자신만의 collector를 구현하고 싶으면 이 인터페이스를 상속 받아서 만들 면 된다. &lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 11pt; color: rgb(0, 0, 0);&quot;&gt;결론&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;이 문서에서는 Stream API의 두가지 쓸만한 기능인 flatMap과 collect에 대해서 살펴봤다. 이를 사용해서 데이터 처리 작업을 간결한 코드로 할 수 있었다.&lt;br /&gt;특
히 collect 메서드는 summarizing, grouping, partitioning을 쉽게 만들 수 있고 이를 서로 
조합해서 &quot;각 도시의 통화별 거래내역의 합계를 가지고 있는 두 단계 깊이의 Map 처럼 유용한 쿼리를 만들 수도 있다.&lt;br /&gt;&lt;br /&gt;이 문서에 collector들에 대해 전부 알아보지는 않았기 때문에 다른 Collectors들(mapping(), joining(), collecting AndThen()) 같은 것들도 살펴보면 쓸만할 것이다.&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>이론..</category>
<category>Java</category>
<category>java8</category>
<category>stream api</category>
<author>김제준</author>
<guid>https://starplatina.tistory.com/432</guid>
<comments>https://starplatina.tistory.com/entry/Java-8-Stream-API-PART-2#entry432comment</comments>
<pubDate>Mon, 03 Nov 2014 10:00:20 +0900</pubDate>
</item>
<item>
<title>자바 스트림 API</title>
<link>https://starplatina.tistory.com/entry/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%8A%B8%EB%A6%BC-API</link>
<description>&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt; line-height: 1.5; background-color: transparent;&quot;&gt;이번에는 Java SE 8에서 추가된 아주 좋은 SteamAPI에 대해서 알아 보도록 하겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-size: 10pt; font-family: 나눔고딕, NanumGothic, sans-serif; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-size: 10pt; font-family: 나눔고딕, NanumGothic, sans-serif; line-height: 1.5;&quot;&gt;오역이 있을 수도 있으니 원본 문서도 한번 보는것을 추천 드립니다.&amp;nbsp;&lt;img src=&quot;http://whatsup.nhnent.com/resources/smartEditor2_nhnent/basic/img/emoticon/1_46.gif&quot; style=&quot;border: 0px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 1.5; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;원본 글 &amp;nbsp;:&amp;nbsp;&lt;/span&gt;&lt;font face=&quot;나눔고딕, NanumGothic, sans-serif&quot; style=&quot;font-size: 12px; line-height: 1.5;&quot;&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&lt;/a&gt;&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-size: 10pt; font-family: 돋움, Dotum, AppleGothic, sans-serif; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-size: 10pt; font-family: 나눔고딕, NanumGothic, sans-serif; line-height: 1.5;&quot;&gt;오타 및 오역 지적해주시면 감사하겠습니다.&amp;nbsp;&lt;img src=&quot;http://whatsup.nhnent.com/resources/smartEditor2_nhnent/basic/img/emoticon/1_05.gif&quot; style=&quot;border: 0px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-size: 10pt; font-family: 돋움, Dotum, AppleGothic, sans-serif; line-height: 1.5;&quot;&gt;============================================================================================&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;복잡한&lt;/span&gt;&amp;nbsp;데이터 처리 질의를 표현하기 위해 Stream을 사용!.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;대부분의 자바 애플리케이션들이 데이터를 만들고 처리하기 위해서 컬렉션을 사용한다. 이 컬렉션을 처리하는 로직 또한 같이 구현되어 코드에 포함되어 있고 이는 많은 프로그램의 기본(데이터를 그룹핑 하고 제어 하는 등)이 된다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;예를 들어 은행에서 고객들의 입출력 내역을 가지고 있는 컬렉션을 생성하고 이중에서 고객이 사용한 내역들에 대해 추출하는 로직을 작성할 수 있을 것이다. 이런 은행 관련 중요한 기능들을 컬렉션을 통해 작정할 수 있지만 코드가 그다지 아름답지 않고 지저분하게 보여진다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;컬렉션을 사용하는데는 두가지 단점이 있다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;1.&amp;nbsp;&lt;/span&gt;&lt;/b&gt;컬렉션에서 데이터를 처리하는 전형적인 처리 패턴은 SQL에서 데이터를 찾는것과 비슷하거나(처리 내역 중 가장 높은 값을 찾기) 데이터를 묶는것(구매 내역중에 식료품에서 쇼핑한 내역만 찾기)과 비슷하다. 대부분의 데이터베이스들은 이를 명확하게 지원하는데 만약 가장 높은 값을 가지는 것을 찾고 싶으면 &quot;&lt;font color=&quot;#000000&quot;&gt;SELECT ID, MAX(VALUE) FROM TRANSACTIONS&lt;/font&gt;&quot;를 사용 하면 된다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#ff6c00&quot;&gt;위의 예에서 보는것 처럼 최대값을 어떻게 계산해야 하는지에 대해서 직접 구현할 필요가 없이(반복문을 사용해서 가장 높은 값을 찾는 것) 단지 원하는 값을 표현해 주기만 하면 된다.&lt;/font&gt;&amp;nbsp;&lt;/b&gt;컬렉션도 데이터베이스처럼 데이터의 집합인데 왜 비슷한 방법으로 처리할 생각을 못하고 이와 비슷한 구현을 하기 위해서 얼마나 많은 시간을 소모해서 복잡한 반복문을 작성하고 또 작성했는지 생각해보자.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;2.&lt;/span&gt;&lt;/b&gt;&amp;nbsp;만약 큰 사이즈의 컬렉션은 어떻게 처리 해야 할까? 처리 속도를 향상하기 위해서는 병렬 처리를 하도록 코드를 작성해야 되는데 이는 기술적으로도 어렵고 많은 에러가 발생한다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;이러한 단점들은 Java SE 8이 출시되면서 해결할 수 있게 되었다. Stream 이라는 새로운 API가 공개되었고 이를 통해 쿼리를 작성하듯 데이터를 명시적인 방법으로 처리할 수 있게 되었다. 게다가 Stream은 멀티 스레드 관련 코드도 별도로 작성할 필요 없이 멀티코어를 지원할 수 있게 되었다. 좋아 보이지 않는가? 이 문서에서는 이런 내용들에 대하여 살펴볼 것이다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Stream을 가지고 무엇을 할 수 있는지 알아보기 전에 Java SE 8의 Stream 사용법에 대해 간단히 살펴보자. 식료품점에서 쇼핑한 모든 거래내역중에 거래 ID를 &amp;nbsp;가장 큰 비용이 들어간 순으로 정렬해서 추출하는 것에 대한 코드를 작성해보자.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 1. Java SE 7 이하에서의 처리 방법&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&lt;transaction&gt;&lt;/transaction&gt;&lt;/span&gt; groceryTransactions &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;ArrayList&lt;transaction&gt;&lt;/transaction&gt;&lt;/span&gt;();
&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt; t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt; groceryTransactions) {
    &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;if&lt;/span&gt; (t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getType() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;GROCERY&lt;/span&gt;) {
        groceryTransactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;add(t);
    }
}
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Collections&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;sort(groceryTransactions, &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Comparator&lt;transaction&gt;&lt;/transaction&gt;&lt;/span&gt;() {
    &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: rgb(155, 112, 63);&quot;&gt;compare&lt;/span&gt;(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt; &lt;span style=&quot;color: rgb(117, 135, 166);&quot;&gt;t1&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt; &lt;span style=&quot;color: rgb(117, 135, 166);&quot;&gt;t2&lt;/span&gt;) {
        &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;return&lt;/span&gt; t2&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;compareTo(t1&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue());
    }
});

&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&lt;integer&gt;&lt;/integer&gt;&lt;/span&gt; transactionIds &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;ArrayList&lt;integer&gt;&lt;/integer&gt;&lt;/span&gt;();
&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt; t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt; groceryTransactions) {
    transactionIds&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;add(t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getId());
}&lt;/pre&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 2. Java SE 8 에서의 처리 방법&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&lt;integer&gt;&lt;/integer&gt;&lt;/span&gt; transactionsIds &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
        .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getType() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;GROCERY&lt;/span&gt;)
        .sorted(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Comparator&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;comparing(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue)&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;reversed())
        .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getId)
        .collect(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Collectors&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;toList());&lt;/pre&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;아래 그림 Fiqure 1은 Java SE 8에서 Stream이 동작하는 과정을 그린것이다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;먼저 모든 거래내역(List)로 부터&amp;nbsp;&lt;b&gt;stream()&lt;/b&gt;메서드를 사용해서 stream을 가져오고 그 다음에 여러가지 기능(&lt;font color=&quot;#000000&quot;&gt;filter&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;sorted&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;map&lt;/font&gt;,&lt;font color=&quot;#000000&quot;&gt;collect&lt;/font&gt;)를 체인 처럼 엮어서 데이터를 처리하는 쿼리처럼 보이게 만든다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Figure 1&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px; text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/212425445434F03136&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure1.jpg&quot; height=&quot;194&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;병렬 처리 코드 작성은 Java SE 8에서 매우 쉽게할 수 있다. Listing 3. 처럼 그냥&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;stream()&lt;/font&gt;&lt;/b&gt;을&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;parallelStream()&lt;/font&gt;&lt;/b&gt;으로 변경만 하면 된다. Stream API는 내부적으로 멀티코어로 동작하도록 처리한다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 3.&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&lt;integer&gt;&lt;/integer&gt;&lt;/span&gt; transactionsIds &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;parallelStream()
        .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getType() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;GROCERY&lt;/span&gt;)
        .sorted(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Comparator&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;comparing(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue)&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;reversed())
        .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getId)
        .collect(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Collectors&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;toList());&lt;/pre&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;처음보는 형태의 코드를 보고 걱정할 필요는 없다. 다음 섹션에서 이것들이 어떻게 동작하는지 살펴볼 것이다. 하지만 람다 표현식(&lt;font color=&quot;#000000&quot;&gt;t-&amp;gt; t.gerCategory() == Transaction.GROCERY&lt;/font&gt;)의 사용방법이나 메소드 참조(method references,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;Transaction::getId&lt;/font&gt;)에 대해서는 미리 한번 보는것이 좋다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;지금 부터 컬렉션에 저장된 데이터들을 SQL이 동작하는 것 처럼 스트림을 활용해서 처리 하는것에 대해서 살펴볼 것이다. 이 모든 동작들은 람다 표현식과 함께 간단한 파라미터로 처리 될 수 있다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Java SE 8의 Stream에 대한 이 문서를 다 읽어보면 Stream API를 사용하여 위 예제와 같이 멋진 방식으로 사용할 수 있을 것이다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;Stream 시작 하기&lt;/font&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;작은 부분부터 시작하도록 해보자. Stream의 정의는 무엇일까? 간단하게 정의해 보면 &quot;집계 연산을 지원하는 요소의 순서(&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt; line-height: 16px;&quot;&gt;a sequence of elements from a source that supports aggregate operations.)&lt;/span&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt; line-height: 1.5;&quot;&gt;&quot;라고도 할수 있는데 이에 대해 더 알아 보도록 하자.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/p&gt;&lt;ul style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Sequence of element&amp;nbsp;&lt;/span&gt;&lt;/font&gt;: Stream은 정의된 엘리먼트의 속성에 따라서 처리할 수 있는 인터페이스를 제공하지만 실제 엘리먼트들을 저장하지 않고 계산하는데만 쓰인다.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Source&amp;nbsp;&lt;/span&gt;&lt;/font&gt;: 스트림은 컬렉션, 배열, I/O 리소스 등에서 제공받은 데이터를 가지고 작업을 처리 한다.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Aggreate operations&amp;nbsp;&lt;/span&gt;&lt;/font&gt;: Stream은 SQL 같은 처리를 지원하고 함수형 프로그래밍 같은 처리 방법도 지원한다. (&lt;font color=&quot;#000000&quot;&gt;filter&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;map&lt;/font&gt;,&lt;font color=&quot;#000000&quot;&gt;reduce&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;find&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;match&lt;/font&gt;, sorted 등)&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;게다가 Stream은 기존의 컬렉션 처리 방법과 구분되게 하는 기본적인 두가지 특징이 있다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;ul style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Pipelining&amp;nbsp;&lt;/span&gt;&lt;/font&gt;: 많은 Stream 기능들이 Stream 자기 자신을 리턴한다. 이 방식은 처리 작업이 체인처럼 연결되어 큰 파이프라인처럼 동작 하도록 한다. 이를 통해 laziness와 short-circuiting 과 같이 최적화 작업을 할 수 있다.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Internal iteration&amp;nbsp;&lt;/span&gt;&lt;/font&gt;: 명시적으로 반복작업을 수행해야 되는 Collection과 비교 하면 Stream 작업은 내부에서 처리된다.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;아래 그림(Figure 2) 은 Listing 2에 작성되어 있는 코드 상세한 그림으로 설명한 것이다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot; color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Figure 2&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/262847445434F0312B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;figure2.jpg&quot; height=&quot;416&quot; style=&quot;text-align: center;&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;처음 접한 Stream은 list에서 거래내역에 대한 목록을&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;stream()&amp;nbsp;&lt;/font&gt;&lt;/b&gt;메서드를 사용해서 Stream 으로 가져온 것이다. 그 다음은 몇가지 집계 관련된 작업을 진행하는데,&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;filter&lt;/font&gt;&lt;/b&gt;(주어진 속성에 맞게 필터링),&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;sorted&lt;/font&gt;&lt;/b&gt;(주어진 compator를 자기고 정렬),&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;map&lt;/font&gt;&lt;/b&gt;(정보를 추출) 메서드를 사용해서 집계 관련된 처리를 수행한다.&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;collect()&lt;/font&gt;&lt;/b&gt;를 제외한 모든 메서드들은 stream을 리턴하기 때문에 이들을 서로 연결해서 파이프라인형태로 처리할 수 있다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;이 작업들은&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;collect()&lt;/font&gt;&lt;/b&gt;가 호출되기전까지 실제로 실행되지 않는다.&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;collect()&lt;/font&gt;는 파이프라인에 연결된 집계 작업을 시작하고 완료되면 결과를 리턴한다(Stream 형태가 아닌, 여기서는 list).&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;collect()&lt;/font&gt;에 대해서는 나중에 좀 더 자세히 살펴볼테니 지금 당장 걱정할 필요는 없다.&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;collect()&lt;/font&gt;&amp;nbsp;메서드를 보면 인자값을 가지고 있는것을 볼 수 있는데 이 파라미터를 가지고 리턴 값을 결정 한다.&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;&lt;b&gt;toLIst()&lt;/b&gt;&lt;/font&gt;는 Stream을 List로 변경하여 리턴해준다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;Stream에서 사용가능한 다른 메서드들에 대해 알아보기 전에 Stream과 Collection간의 개념적으로 다른점을 확인해 보도록 하자.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot; color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 12pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;b&gt;Stream VS Collections&lt;/b&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;예전부터 사용했던 Collection 과 이번에 새로 추가된 Stream은 엘리먼트들을 순차적으로 처리하는것과 관련된 인터페이스를 제공한다. 차이점을 간단히 말하면 Collection은 데이터와 관련된 것이고 Stream은 데이터를 계산하는것과 관련된 내용이다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;DVD에 저장된 영화를 예를 들어 생각해보자. 이것들은 데이터들로 구성되어 있기 때문에 Collection으로 볼 수 있다(바이트나 프레임으로 구성된 집합) 같은 영화를 인터넷 스트리밍을 통해서 본다고 가정해보자. 효율적으로 사용자들에게 비디오를 보여주기 위해 사용자가 보고 있는 부분들에 대해 미리 다운로드를 하는게 효율적이다. 이렇게 다운로드를 할 범위를 결정하는 것을 Stream으로 볼 수 있다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;간단하게 말하면 Collection과 Stream의 차이점은 무언가를 계산할때 라고 볼 수 있다 Collection은 메모리에 저장되는 데이터 구조고 Stream은 이를 계산해서 새로운 데이터를 만들어 낼 수 있다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;Collection 인터페이스를 사용하기 위해서는 사용자에 의해 정의된 반복문이 필요한데(for loop, foreach 등) 이를 외부 반복이라고 부른다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;이와 다르게 Stream은 내부 반복을 사용한다(내부적으로 반복작업을 수행하고 결과값을 어딘가에 저장해둔다) 사용자는 결과값을 가지고 무엇을 할 것인지만 정의하면 된다. 아래 코드는 두가지 차이점을 보여 준다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot; color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 18px; font-family: 나눔고딕, NanumGothic, sans-serif;&quot;&gt;&lt;b&gt;Listing 4. 컬렉션에서 외부 반복작업&lt;/b&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;String&amp;gt;&lt;/span&gt; transactionIds &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;ArrayList&amp;lt;&amp;gt;&lt;/span&gt;(); 
&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt; transactions){
    transactionIds&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;add(t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getId()); 
}&lt;/pre&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/p&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot; color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;b&gt;Listing 5. Stream의 내부 반복작업&lt;/b&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;Integer&amp;gt;&lt;/span&gt; transactionIds &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
        .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getId)
        .collect(toList());&lt;/pre&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/div&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;/p&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font face=&quot;돋움, Dotum, AppleGothic, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 12px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;Listing 4는 명시적으로 반복문을 수행하고 거래 ID를 추출하여 리스트에 추가 하고 있다. 이와 다르게 Stream은 명시적인 반복문이 없다. Listing 5처럼 질의문의 만드는데 map은 거래 ID를 추출하고 collect는 Stream을 list로 변환해서 리턴해준다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;이제 Stream이 무엇이고 이를 가지고 할 수 있는게 무엇인지 감이 슬슬 올 것이다. Stream이 제공하는 다른 기능들에 대해서 살펴보고 실제 서비스에서 사용될만한 데이터 처리 쿼리를 작성해보자.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;Stream Operations : Exploiting Streams to Process Data&lt;/font&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;Stream 인터페이스는&amp;nbsp;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;java.util.stream.Stream&lt;/a&gt;에 정의되어 있고 두가지 종류로 분류할 수 있는 많은 기능을 제공한다. Figure 1에서 봤던것 처럼 아래와 같은 기능들을 볼 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;ul style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;filter&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;sorted&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;map&lt;/font&gt;은 파이프라인처럼 서로 연결시킬 수 있다.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px; font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;collect&lt;/font&gt;는 파이프라인을 종료 시키고 결과를 리턴한다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;Stream 처리는&amp;nbsp;&lt;i&gt;&lt;font color=&quot;#000000&quot;&gt;중간 작업(intermediate operations)&lt;/font&gt;&lt;/i&gt;라고 불리는 것을 통해 서로 연결 될 수 있다. 이들의 리턴타입은&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;stream&lt;/font&gt;이기 때문에 서로 연결될 수 있다. 이 작업은&amp;nbsp;&lt;i&gt;&lt;font color=&quot;#000000&quot;&gt;종료 작업(terminal operations)&lt;/font&gt;&lt;/i&gt;를 통해 작업을 종료할 수 있다. 처리된 결과를&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;List&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;Integer&lt;/font&gt;나&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;void&amp;nbsp;&lt;/font&gt;형태로 받을 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;이를 구분해서 처리하는 것이 왜 중요한지 의문이 생길수도 있다. 중간 작업들을 Stream 파이프라인에서 종료 작업이 호출되기 전에는 절대 수행되지 않는다. 이것을 Lazy라고 한다.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;중간 작업들은 보통 병합(merged)를 통해 데이터를 처리하고 종료 작업에 이를 전달해 준다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕, NanumGothic, sans-serif; font-size: 10pt;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 6.&lt;/font&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;Integer&amp;gt;&lt;/span&gt; numbers &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;asList(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;3&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;4&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;5&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;6&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;7&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;8&lt;/span&gt;);
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;Integer&amp;gt;&lt;/span&gt; twoEvenSquares &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    numbers&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
           .filter(n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; {
                    &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;println(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;filtering &quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;+&lt;/span&gt; n); 
                    &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;return&lt;/span&gt; n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;0&lt;/span&gt;;
                  })
           .map(n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; {
                    &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;println(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;mapping &quot;&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;+&lt;/span&gt; n);
                    &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;return&lt;/span&gt; n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;*&lt;/span&gt; n;
                  })
           .limit(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;)
           .collect(toList());&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Listing 6의 코드는 주어진 숫자 목록에서 나머지가 0인 값들을 계산하는 코드이다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;아래 출력된 내용을 보면 예상과 다른 것을 볼 수 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;filtering &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;
filtering &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;
mapping &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;
filtering &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;3&lt;/span&gt;
filtering &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;4&lt;/span&gt;
mapping &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;이와같은 내용으로 출력되는 원인은&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;limit(2)&lt;/font&gt;&lt;/b&gt;를 범위를 제한 했기 때문이다. 가끔 Stream에서 전체가 아닌 특정 부분에 대한 처리를 해야될 필요가 있다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;지금까지 배운 Stream을 사용하는 일반적인 내용을 요약하면 3가지로 요약할 수 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;ul style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;질의를 할 데이터소스(Collection)같은게 필요하다&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;Stream 파이프라인을 형성하는 중간 작업&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;Stream 파이프라인을 실행하고 결과를 리턴하는 종료 작업&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;이제 Stream에서 사용할 수 있는 기능들을 살펴보자. 이에 대한 전체 목록은&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;&amp;nbsp;java.util.stream&lt;/a&gt;&amp;nbsp;패키지를 참조 하라.&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;Filtering&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&amp;nbsp;: Stream에는 필터 처리를 제공하는 여러가지 메서드들이 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;ul style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;filter(Predicated)&amp;nbsp;&lt;/font&gt;: 주어진 predicate(&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;java.util.function.Predicate&lt;/a&gt;)와 일치하는 stream을 리턴한다.&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;distinct&amp;nbsp;&lt;/font&gt;: 중복을 제거한 유니크 엘리먼트를 리턴한다.(stream에 포함된 엘리먼트들의 equals()구현에 따라 구분된다.&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;limit(n)&amp;nbsp;&lt;/font&gt;: 주어진 사이즈(n)에 까지의 stream을 리턴한다.&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;skip(n)&amp;nbsp;&lt;/font&gt;: 주어진 엘리먼트 길이 까지 제외한 stream을 리턴한다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;Finding and matching&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&amp;nbsp;: 가장 일반적인 데이터 처리 패턴은 주어진 조건에 일치하는 것을 찾아 내는 것이다.&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;anyMatch&lt;/font&gt;,&lt;font color=&quot;#000000&quot;&gt;allMatch&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;noneMatch&lt;/font&gt;와 같은 기능을 사용하여 필요한 것을 찾을 수 있다. 이들을 전부 predicate를 인수로 받아서 결과를&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;boolean&lt;/font&gt;형태로 리턴한다. 에를 들어 Stream에 포함된 엘리먼트들이 모두 100보다 큰지 확인하고 싶으면 아래 코드처럼&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;allMatch&lt;/font&gt;를 사용하면 된다.&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 7.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;boolean&lt;/span&gt; expensive &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt;
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
        .allMatch(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getValue() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;100&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Stream은 임의의 요소를 찾는&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;findFirst&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;findAny&amp;nbsp;&lt;/font&gt;기능도 제공한다. 이 기능은 필터와 같이 Stream을 조작하는데 사용될 수 있다.&lt;font color=&quot;#000000&quot;&gt;FindFirst&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;FindAny&amp;nbsp;&lt;/font&gt;값은&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;Optional&amp;nbsp;&lt;/font&gt;객체를 리턴한다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 8.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Optional&amp;lt;Transaction&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
        .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getType() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;GROCERY&lt;/span&gt;)
        .findAny();&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;Optional&amp;lt;T&amp;gt;&lt;/font&gt;&amp;nbsp;클래스(&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;java.util.Optional&lt;/a&gt;)는 값이 존재 하거나 존재하지 않을 경우에 사용할 수 있는 컨데이터다. Listing 8의 크도를 보면 Transaction 타입이 GROCERY가 아닌것이 있을 수도 있다. Optional 클래스는 엘리먼트들이 존재하는지 확인하는 여러 메서드를 가지고 있다. 예를 들어 만약 엘리먼트가 존재 한다면&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;ifPresent&amp;nbsp;&lt;/font&gt;메서드를 사용해서 특정 작업을 수행할 수 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 9.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
    .filter(t &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; t&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;getType() &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;GROCERY&lt;/span&gt;)
    .findAny()
    .ifPresent(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;println);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;Mapping&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;: map 기능을 사용해서 인자(&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;java.util.function.Function&lt;/a&gt;)로 전달받은 값들을 가지고 새로운 stream을 만들 수 있다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;예를 들어 Stream에 포함된 엘리먼트들에 대한 특정 정보만 필요할 수도 있다. Listin 10 처럼 List에 저장된 단어의 길이들을 가지고 있는 새로운 List를 생성할 수 있다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 10.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;String&amp;gt;&lt;/span&gt; words &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;asList(&lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Oracle&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Java&quot;&lt;/span&gt;, &lt;span style=&quot;color: rgb(143, 157, 106);&quot;&gt;&quot;Magazine&quot;&lt;/span&gt;);
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;List&amp;lt;Integer&amp;gt;&lt;/span&gt; wordLengths &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; words&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
    .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;length)
    .collect(toList());&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;Recuding&amp;nbsp;&lt;/font&gt;&lt;/span&gt;&lt;/b&gt;: 지금까지 본 stream의 종료작업은&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;boolean&lt;/font&gt;(allMatch 등),&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;void&lt;/font&gt;(forEach),&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;optional&lt;/font&gt;(findAny 등) 오브젝트들을 결과로 리턴했고 collect를 사용해서 List형태로도 리턴을 할 수 있었다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;이외에도 &quot;가장 큰 ID를 가진 거래내역은 무엇인가&quot;, &quot;모든 거래 내역의 합계&quot; 처럼 Stream의 엘리먼트들에 복잡한 형태의 공식같은걸 적용하는 처리 쿼르를 만들수도 있다. 이 기능은 Stream의&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;reduce&lt;/font&gt;를 통해서 사용한데 이는 결과가 생성될때 까지 반복적으로 각 요소에 대한 (두 숫자를 추가 한다든지)동작을 허용한다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;이것을 함수형 프로그래밍에서는&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/wiki/Fold_(%EA%B3%A0%EC%B0%A8_%ED%95%A8%EC%88%98)&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;고차 함수(fold operation)&lt;/a&gt;라고 부른다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;코드들을 보면 좀 더 쉽게 이해할 수 있을 것이다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;for 반복문을 사용해서 덧셈을 할때는 아래와 같은 코드로 작성된다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; sum &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;0&lt;/span&gt;;
&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; x &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt; numbers) {
    sum &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;+=&lt;/span&gt; x; 
}&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;각각 엘리먼트드을 순회하면서 값들을 더하도록 되어 있다. 이 코드에는 두개의 파라미터가 있다고 볼 수 있는데&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;sum&lt;/font&gt;( 여기서는 0)은 값을 표현하는 것이고, 각 엘리먼트들을 더하귀 위한 것(여기서는 +)가 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Stream에서 reduce 메서드를 사용한다면 엘리먼트들의 합은 Listing 11과 같은 코드로 표현된다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;reduce메서드는 두개의 인자값을 가진다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 11.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; sum &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; numbers&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;reduce(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;0&lt;/span&gt;, (a, b) &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;+&lt;/span&gt; b);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;ul style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;초기 화 값, 0&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/function/BinaryOperator.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;BinaryOperator&amp;lt;T&amp;gt;&lt;/a&gt;, 두개의 엘리먼트들을 더해서 새로운 값을 생성&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;reduce&lt;/font&gt;는 반복 적용 패턴을 추상화 해준다. 모든 값을 곱한다던지 최대값을 구하는 것들은 아래처럼 표현될 수 있다.&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing12.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; product &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; numbers&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;reduce(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, (a, b) &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;*&lt;/span&gt; b);
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; product &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; numbers&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;reduce(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;max);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Numeric Streams&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;reduce&amp;nbsp;&lt;/font&gt;메서드를 사용해서 Stream에 있는 숫자형 값들에 대한 합계를 구할 수 있다. 하지만 이를 계산하는데 오브젝트를&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;Integer&amp;nbsp;&lt;/font&gt;형태로 Boxing 처리를 해야 하기 때문에 어느 정도 Cost가 든다. 아래 코드 처럼 명시적으로&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;&lt;b&gt;sum()&amp;nbsp;&lt;/b&gt;&lt;/font&gt;메서드를 호출하는 것이 좀 더 좋아 보인다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 13.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; statement &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
        .map(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue)
        .sum(); &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// error since Stream has no sum method&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;위와 같은 기능을 제공하기 위해 Stream에서는 3가지 기본형태의 Stream 인터페이스를 제공한다.&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;IntStream&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;DoubleStream&lt;/font&gt;,&lt;font color=&quot;#000000&quot;&gt;LongStream&amp;nbsp;&lt;/font&gt;이 Stream들은&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;int&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;double&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;long&amp;nbsp;&lt;/font&gt;형태의 Stream을 처리 하도록 되어 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;가장 빈번히 사용될 메서드는 아마&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;mapToInt&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;mapToDouble&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;mapToLong&lt;/font&gt;일 것이다 이 3가지 메서드들을 이전에 보았던 map과 동일한 동작을 하지만 이것의 리턴값은 Stream&amp;lt;T&amp;gt; 형태의 값을 준다. 예를 들어 Listing 13의 코드는 Listing 14처럼 수정할 수 있다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 14.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt; statementSum &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    transactions&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream()
        .mapToInt(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Transaction&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;getValue)
        .sum(); &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// works!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;마지막으로 숫자형 Stream의 다른 활용 방법은 숫자 범위를 지정할 수 있는데 있다. 예를 들어 1에서 100사이의 값을 생성하려고 할때&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;range&lt;/font&gt;와&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;rangeClosed&amp;nbsp;&lt;/font&gt;메서드를&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;IntStream&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;DoubleSteam&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;LongStream&lt;/font&gt;에서 사용할 수 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;이 두 메서드는 첫번째 인자와 마지막 인자사이의 값을 가져온다. range는 마지막 값을 제외하고 계산하고&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;rangeClosed&lt;/font&gt;는 이를 포함해서 계산한다. Listing 15에서&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;rangeClosed&lt;/font&gt;를 사용해서 10과 30사의 홀수를 가져오는 것을 볼 수 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 15.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;IntStream&lt;/span&gt; oddNumbers &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;IntStream&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;rangeClosed(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;10&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;30&lt;/span&gt;)
        .filter(n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Building Streams&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Stream을 생성하는 몇가지 방법들이 있는데 지금까지는 컬렉션을 통해서 Stream을 생성했었고, 숫자를 사용해서 만들기도 했다. Stream은 값 목록이나 배열, 파일과 같은곳에서도 생성할 수 있으며 무한 Stream을 생성하기 위해 함수를 사용할 수도 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;값 목록이나 배열에서 Stream을 생성하는 것은 어렵지 않다. 스태틱 메서드인&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Stream.of&lt;/font&gt;&lt;/b&gt;를 사용하거나&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Arrays.Stream&lt;/font&gt;&lt;/b&gt;을 사용하면 된다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 16.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Stream&amp;lt;Integer&amp;gt;&lt;/span&gt; numbersFromValues &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Stream&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;of(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;3&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;4&lt;/span&gt;);
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;int&lt;/span&gt;[] numbers &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; {&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;2&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;3&lt;/span&gt;, &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;4&lt;/span&gt;};
&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;IntStream&lt;/span&gt; numbersFromArray &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Arrays&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;stream(numbers);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;파일에서 Stream을 생성할 경우&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Files.Lines&lt;/font&gt;&lt;/b&gt;를 사용하면 되고, 아래 코드는 파일에서 라인수를 카운팅한다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 17.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;long&lt;/span&gt; numberOfLines &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; 
    &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Files&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;lines(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Paths&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;get(“yourFile&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;txt”), &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Charset&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;defaultCharset())
    .count();&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;Infinite streams&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&amp;nbsp;: 지금까지 Stream이 무엇이고 어떻게 사용하는지에 대해서 이래했을 것이다. 함수형 프로그래밍에서 Stream을 생성하는 방법은&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;&lt;b&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.UnaryOperator-&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;Stream.iterate&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;와&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#generate-java.util.function.Supplier-&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;Stream.generate&lt;/a&gt;&lt;/font&gt;&lt;/b&gt;가 있다. 엘리먼트들이 필요한 시점에 계산되기 때문에 이 두 함수는 지속적으로 엘리먼트들을 가져 올 수 있다. 이것이 바로 무한 Stream이다(고정된 사이즈의 Stream이 아닌)&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Listing 18은&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;iterate&lt;/font&gt;를 사용해서 모든 숫자에 10을 더하는 기능이다.&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;iterate&lt;/font&gt;메서드는 초기값 0부터 시작해서 계속 새로운 값을 생성한다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 18.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Stream&amp;lt;Integer&amp;gt;&lt;/span&gt; numbers &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;Stream&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;iterate(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;0&lt;/span&gt;, n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;10&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;limit()&lt;/font&gt;&lt;/b&gt;을 사용해서 무한 Stream에서 고정된 크기의 Stream을 생성할 수 있다. Listing 19는 Stream의 사이즈를 5로 고정한 것을 보여주는 코드이다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Listing 19.&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;pre style=&quot;font-family: Consolas, 'Lucida Console', 'DejaVu Sans Mono', Monaco, 'Courier New', monospace; font-size: 0.9333em; color: rgb(248, 248, 248); margin-top: 0px; margin-bottom: 0px; padding: 4px; line-height: 1.5em; background: rgb(24, 24, 24);&quot;&gt;numbers&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;limit(&lt;span style=&quot;color: rgb(207, 106, 76);&quot;&gt;5&lt;/span&gt;)&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;forEach(&lt;span style=&quot;color: rgb(249, 238, 152);&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;.&lt;/span&gt;out&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: rgb(205, 168, 105);&quot;&gt;:&lt;/span&gt;println); &lt;span style=&quot;color: rgb(95, 90, 96); font-style: italic;&quot;&gt;// 0, 10, 20, 30, 40&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;결론.&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Java SE 8에서는 빠르고 정교한 데이터 처리를 위해&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000000&quot;&gt;Stream API&lt;/font&gt;&lt;/b&gt;를 공개했다. 이 문서에서는 Stream이 제공하는 많은 기능들(&lt;font color=&quot;#000000&quot;&gt;filter&lt;/font&gt;,&lt;font color=&quot;#000000&quot;&gt;map&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;reduce&lt;/font&gt;,&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;iterate&lt;/font&gt;)을 살펴 봤고 이를 활용해서 간결한 코드로 정교한 데이터 처리 작업을 할 수 있었다. 이 방법은 Java SE 8 이전에 Collection 데이터들을 처리하는 방법과 매우 다르지만 많은 장점이 있다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;ol style=&quot;margin: 0px 7px 13px 40px; padding: 0px; list-style-position: initial; list-style-image: initial;&quot;&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;Steream API는 몇가지 기능들을 활요해서 laziness 및 short-circuiting을 통해 데이터 처리를 최적화 할 수 있다.&lt;/li&gt;&lt;li style=&quot;margin: 0px; padding: 0px;&quot;&gt;Stream은 병렬 처리를 손쉽게 지원한다.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;다음 문서에서는 Stream의&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;filterMap&lt;/font&gt;이나&amp;nbsp;&lt;font color=&quot;#000000&quot;&gt;collect&amp;nbsp;&lt;/font&gt;같은 기능에 대하여 좀 더 알아볼 것이다.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>이론..</category>
<category>java8</category>
<category>STREAM</category>
<category>stream api</category>
<author>김제준</author>
<guid>https://starplatina.tistory.com/431</guid>
<comments>https://starplatina.tistory.com/entry/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%8A%B8%EB%A6%BC-API#entry431comment</comments>
<pubDate>Wed, 08 Oct 2014 17:05:46 +0900</pubDate>
</item>
<item>
<title>Java 8 Optional.</title>
<link>https://starplatina.tistory.com/entry/Java-8-Optional</link>
<description>&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Java 8에서 추가된 기능인&amp;nbsp;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;Optional&lt;/a&gt;에 대해서 간단하게 소개된 글이 있어서 공유 합니다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;(&lt;a href=&quot;http://java.dzone.com/articles/java-8-optional-avoid-null-and)&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;http://java.dzone.com/articles/java-8-optional-avoid-null-and)&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;언제 어디서나 우리를 괴롭히던 Null 과 NPE를 물리칠 수 있다는 군요!&amp;nbsp;&lt;b&gt;+ㅅ+&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;참고 :&amp;nbsp;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;java8-optional&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;함수형 프로그래밍 :&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D&quot; target=&quot;_blank&quot; style=&quot;color: rgb(85, 26, 139); text-decoration: underline;&quot;&gt;위키설명&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Java 8 Optional - Null 및 NullPointerException 둘다 회피하고 코드를 예쁘게 짜기.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;Null 과 NPE(NullPointerException), 이를 회피하는 방법에 대한 문서들을 여러방법으로 소개되고 있다. 이런 방법들 보다 Java 8에서 제공하는 Optinal 기능을 사용하면 쉽고, 안전하고, 아름다운 코드로 작성할 수 있다. 이 문서는 다른 옵션 값들이나 &amp;nbsp;유틸리티코드 사용 없이 이를 구현하는 방법을 소개한다.&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;이전 방법&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;아래 코드를 살펴보자&lt;/p&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;div class=&quot;line alt1&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;1.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;String unsafeTypeDirName = project.getApplicationType().getTypeDirName();&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt2&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;2.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(248, 248, 248);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;System.out.println(unsafeTypeDirName);&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;만약 위 코드에서 사용하는 변수들이 null 이면 NPE가 발생된다.&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;이를 회피 하기 위해서 아래와 같은 코드를 작성했었다.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(34, 34, 34); font-family: 나눔고딕, NanumGothic, '맑은 고딕', malgungothic, 굴림, Gulim, AppleGothic, sans-serif; font-size: 13px; line-height: 20px;&quot;&gt;&lt;div class=&quot;line alt1&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;01.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;comments&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 130, 0); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;// 안전하지만 지저분하고 코드가 누락될 수도 있다&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt2&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;02.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(248, 248, 248);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;keyword&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 102, 153); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;if&lt;/code&gt;&amp;nbsp;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;(project !=&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;keyword&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 102, 153); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;null&lt;/code&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;) {&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt1&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;03.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px 0px 0px 16px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;ApplicationType applicationType = project.getApplicationType();&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt2&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;04.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(248, 248, 248);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px 0px 0px 16px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;keyword&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 102, 153); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;if&lt;/code&gt;&amp;nbsp;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;(applicationType !=&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;keyword&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 102, 153); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;null&lt;/code&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;) {&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt1&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;05.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px 0px 0px 32px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;String typeDirName = applicationType.getTypeDirName();&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt2&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;06.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; color: rgb(0, 0, 0); background: none rgb(248, 248, 248);&quot;&gt;&lt;span class=&quot;block&quot; style=&quot;margin: 0px 0px 0px 32px; padding: 0px 0px 0px 1.5em; border: 0px; outline: 0px; font-size: 15.4545450210571px; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; display: block; text-indent: -1.5em; background: url(http://cdn.dzone.com/sites/all/themes/dzone2012/scripts/syntaxHighlighter/styles/wrapping.png) 0px 1.1em no-repeat;&quot;&gt;&lt;code class=&quot;keyword&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 102, 153); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;if&lt;/code&gt;&amp;nbsp;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;(typeDirName !=&amp;nbsp;&lt;/code&gt;&lt;code class=&quot;keyword&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; color: rgb(0, 102, 153); float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;null&lt;/code&gt;&lt;code class=&quot;plain&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; background: none;&quot;&gt;) {&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line alt1&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: ProximaNova-Reg; vertical-align: baseline; line-height: normal; background-color: rgb(231, 229, 220);&quot;&gt;&lt;code class=&quot;number&quot; style=&quot;margin: 0px; padding: 0px 0.3em 0px 0px; border: 0px; outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; text-align: right; float: left; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: 3em; display: block; color: rgb(92, 92, 92); background: none;&quot;&gt;07.&lt;/code&gt;&lt;span class=&quot;content&quot; style=&quot;margin: 0px 0px 0px 3.3em; padding: 0px 0px 0px 0.5em; border-width: 0px 0px 0px 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108); outline: 0px; font-size: 15.4545450210571px; font-family: Consolas, Monaco, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; vertical-align: baseline; float: none; position: static; left: auto; top: auto; right: auto; bottom: auto; height: auto; width: auto; displ