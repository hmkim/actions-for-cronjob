<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://nesoy.github.io/atom.xml" rel="self" type="application/atom+xml" /><link href="https://nesoy.github.io/" rel="alternate" type="text/html" /><updated>2019-05-10T07:51:16+00:00</updated><id>https://nesoy.github.io/atom.xml</id><title type="html">Nesoy Blog</title><subtitle>Software Programmer</subtitle><author><name>권영재</name></author><entry><title type="html">GRASP Pattern이란?</title><link href="https://nesoy.github.io/articles/2019-05/GRASP-Pattern" rel="alternate" type="text/html" title="GRASP Pattern이란?" /><published>2019-05-10T00:00:00+00:00</published><updated>2019-05-10T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-05/GRASP-Pattern</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-05/GRASP-Pattern">&lt;p&gt;&lt;img src=&quot;/assets/logo/design-pattern.jpg&quot; alt=&quot;NO Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;grasp-pattern이란&quot;&gt;GRASP Pattern이란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;General Responsibility Assignment Software Patterns&lt;/li&gt;
  &lt;li&gt;Object-Oriented 디자인의 핵심은 각 객체에 책임을 부여하는 것.&lt;/li&gt;
  &lt;li&gt;책임을 부여하는 원칙들을 말하고 있는 패턴.&lt;/li&gt;
  &lt;li&gt;구체적인 구조는 없지만, 철학을 배울 수 있다.&lt;/li&gt;
  &lt;li&gt;총 9가지의 원칙을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;information-expert&quot;&gt;Information Expert&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;책임을 수행할 수 있는 데이터를 가지고 있는 객체에 책임을 부여하는 것.&lt;/li&gt;
  &lt;li&gt;객체는 데이터와 처리로직이 함께 묶여 있는 것.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot;&gt;정보 은닉&lt;/a&gt;을 통해 자신의 데이터를 감추고 오직 Method로만 데이터를 처리하고, 외부에는 그 기능(책임)만을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;creator&quot;&gt;Creator&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;객체의 생성은 생성되는 객체의 컨텍스트를 알고 있는 다른 객체가 있다면, 컨텍스트를 알고 있는 객체에 부여.&lt;/li&gt;
  &lt;li&gt;A 객체와 B 객체의 관계의 관계가 다음 중 하나라면 A의 생성을 B의 책임로 부여.
    &lt;ul&gt;
      &lt;li&gt;B 객체가 A 객체를 포함하고 있다.&lt;/li&gt;
      &lt;li&gt;B 객체가 A 객체의 정보를 기록하고 있다.&lt;/li&gt;
      &lt;li&gt;A 객체가 B 객체의 일부이다.&lt;/li&gt;
      &lt;li&gt;B 객체가 A 객체를 긴밀하게 사용하고 있다.&lt;/li&gt;
      &lt;li&gt;B 객체가 A 객체의 생성에 필요한 정보를 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)&quot;&gt;Factory Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;controller&quot;&gt;Controller&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;시스템 이벤트(사용자의 요청)를 처리할 객체를 만들자.&lt;/li&gt;
  &lt;li&gt;만약 어떤 서브시스템안에 있는 각 객체의 기능을 직접 사용한다면?
    &lt;ul&gt;
      &lt;li&gt;직접적으로 각 객체에 접근하게 된다면 서브시스템과 외부간의 Coupling이 증가되고&lt;/li&gt;
      &lt;li&gt;서브시스템의 어떤 객체를 수정할 경우, 외부에 주는 충격이 크게 된다.&lt;/li&gt;
      &lt;li&gt;서브시스템을 사용하는 입장에서 보면, 이 Controller 객체만 알고 있으면 되므로 사용하기 쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-05-09-20-58-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;low-coupling&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Loose_coupling&quot;&gt;Low Coupling&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;객체들간, 서브 시스템들간의 상호의존도가 낮게 책임을 부여.&lt;/li&gt;
  &lt;li&gt;Low Coupling은 각 객체, 서브시스템의 재 사용성을 높이고, 시스템 관리에 편하게 한다.&lt;/li&gt;
  &lt;li&gt;Object-Oriented 시스템은 각 객체들간의 Communication을 통하여 비즈니스를 완성시킴.
    &lt;ul&gt;
      &lt;li&gt;각 객체들 사이에 Coupling이 존재하지 않을 수는 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 패턴은 요구사항은 충족시키면서도 각 객체들, 각 서브시스템 간의 Coupling를 낮은 수준으로 유지하는 방향으로 디자인.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;high-cohesion&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cohesion_(computer_science)&quot;&gt;High Cohesion&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;각 객체가 밀접하게 연관된 책임들만 가지도록 구성.&lt;/li&gt;
  &lt;li&gt;한 객체, 한 시스템이 자기 자신이 부여받은 책임만을 수행하도록 짜임새 있게 구성되어 있다면?
    &lt;ul&gt;
      &lt;li&gt;자신이 부여 받은 책임을 충족시키기 위해 다른 객체나 시스템을 참조하는 일이 적으며 자연스럽게 Low Coupling이 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;polymorphism&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&quot;&gt;Polymorphism&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;객체의 종류에 따라 행동양식이 바뀐다면, Polymorphism 기능을 사용하자.&lt;/li&gt;
  &lt;li&gt;만약 객체의 종류에 따라 행동이 바뀐다면 객체의 종류를 체크하는 조건문을 사용하지 말고
    &lt;ul&gt;
      &lt;li&gt;Object-Oriented 시스템의 Polymorphism 기능을 사용하라.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pure-fabrication&quot;&gt;Pure Fabrication&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;도메인에 관련된 문제를 대표하는 것이 아니라면 기능적인 책임을 별도로 한 곳으로 관리하는 객체를 만들자.
    &lt;ul&gt;
      &lt;li&gt;데이터베이스 정보를 저장하거나, 로그 정보를 기록하는 책임에 대해 생각해 보자. 각 정보는 각각의 객체들이 가지고 있을 것이다.&lt;/li&gt;
      &lt;li&gt;Information Expert 패턴을 적용하면?
        &lt;ul&gt;
          &lt;li&gt;각 객체들이 정보를 저장하고, 로그를 기록하는 책임을 담당해야 하지만, 실제로 그렇게 사용하는 사람들은 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시스템 전반적으로 사용하고 있는 기능을 변경한다면?
    &lt;ul&gt;
      &lt;li&gt;모든 객체를 수정해야 하는 결과를 가져온다.&lt;/li&gt;
      &lt;li&gt;즉 Low Coupling의 원칙이 깨어지게 된다.
        &lt;ul&gt;
          &lt;li&gt;이럴 경우에는 공통적인 기능을 제공하는 책임을 한 곳으로 모아서 가상의 객체, 서브시스템을 만들어라.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;indirection&quot;&gt;Indirection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;두 객체 사이의 직접적인 Coupling을 피하고 싶으면, 그 사이에 다른 매개체를 통해 전달하는 것.&lt;/li&gt;
  &lt;li&gt;주로 다른 매개체는 인터페이스인 경우가 많다.
    &lt;ul&gt;
      &lt;li&gt;그런 특별한 경우는 아래에 설명된 Protected Variations 패턴이라고 부를 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;protected-variations&quot;&gt;Protected Variations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;변경될 여지가 있는 곳에 안정된 인터페이스를 정의해서 사용하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;생각-정리&quot;&gt;생각 정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nesoy.github.io/articles/2018-05/Refactoring-Example&quot;&gt;Refactoring&lt;/a&gt;에서 많이 배운 기법들이 GRASP Pattern을 잘 지키기 위한 방법으로 보인다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hanbit.co.kr/channel/category/category_view.html?cms_code=CMS8586826397&quot;&gt;GRASP 패턴 - 김대곤님&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aeternum.egloos.com/1232020&quot;&gt;정보은닉 - 이터너티님&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Design Pattern" /><summary type="html"></summary></entry><entry><title type="html">트랜잭션의 격리 수준(isolation Level)이란?</title><link href="https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation" rel="alternate" type="text/html" title="트랜잭션의 격리 수준(isolation Level)이란?" /><published>2019-05-08T00:00:00+00:00</published><updated>2019-05-08T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-05/Database-Transaction-isolation">&lt;p&gt;&lt;img src=&quot;/assets/logo/database.jpg&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;트랜잭션의-격리-수준isolation이란&quot;&gt;트랜잭션의 격리 수준(isolation)이란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;동시에 여러 트랜잭션이 처리될 때
    &lt;ul&gt;
      &lt;li&gt;특정 트랜잭션이 다른 트랜잭션에서 변경하거나 조회하는 데이터를 볼 수 있도록 허용할지 말지를 결정하는 것.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;트랜잭션-격리-수준은-어떤게-있을까&quot;&gt;트랜잭션 격리 수준은 어떤게 있을까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;READ UNCOMMITTED&lt;/li&gt;
  &lt;li&gt;READ COMMITTED&lt;/li&gt;
  &lt;li&gt;REPEATABLE READ&lt;/li&gt;
  &lt;li&gt;SERIALIZABLE&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;read-uncommitted&quot;&gt;READ UNCOMMITTED&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;각 트랜잭션에서의 변경 내용이 &lt;code class=&quot;highlighter-rouge&quot;&gt;COMMIT&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;ROLLBACK&lt;/code&gt; 여부에 상관 없이 다른 트랜잭션에서 값을 읽을 수 있다.&lt;/li&gt;
  &lt;li&gt;정합성에 문제가 많은 격리 수준이기 때문에 사용하지 않는 것을 권장한다.&lt;/li&gt;
  &lt;li&gt;아래의 그림과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Commit&lt;/code&gt;이 되지 않는 상태지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Update&lt;/code&gt;된 값을 다른 트랜잭션에서 읽을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-05-08-21-09-02.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;그렇다면-read-uncommitted는-문제가-없을까&quot;&gt;그렇다면 READ UNCOMMITTED는 문제가 없을까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DIRTY READ&lt;/code&gt;현상 발생
    &lt;ul&gt;
      &lt;li&gt;트랜잭션이 작업이 완료되지 않았는데도 다른 트랜잭션에서 볼 수 있게 되는 현상&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;read-committed&quot;&gt;READ COMMITTED&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDB에서 대부분 기본적으로 사용되고 있는 격리 수준이다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dirty Read와 같은 현상은 발생하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 테이블 값을 가져오는 것이 아니라 Undo 영역에 백업된 레코드에서 값을 가져온다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-05-08-21-18-08.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;그렇다면-read-committed는-문제가-없을까&quot;&gt;그렇다면 READ COMMITTED는 문제가 없을까?&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-05-08-21-25-41.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;트랜잭션-1&lt;/code&gt;이 Commit한 이후 아직 끝나지 않는 &lt;code class=&quot;highlighter-rouge&quot;&gt;트랜잭션-2&lt;/code&gt;가 다시 테이블 값을 읽으면 값이 변경됨을 알 수 있다.&lt;/li&gt;
  &lt;li&gt;하나의 트랜잭션내에서 똑같은 SELECT 쿼리를 실행했을 때는 항상 같은 결과를 가져와야 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;REPEATABLE READ&lt;/code&gt;의 정합성에 어긋난다.&lt;/li&gt;
  &lt;li&gt;이러한 문제는 주로 입금, 출금 처리가 진행되는 금전적인 처리에서 주로 발생한다.
    &lt;ul&gt;
      &lt;li&gt;데이터의 정합성은 깨지고, 버그는 찾기 어려워 진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;repeatable-read&quot;&gt;REPEATABLE READ&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL에서는 트랜잭션마다 트랜잭션 ID를 부여하여 트랜잭션 ID보다 작은 트랜잭션 번호에서 변경한 것만 읽게 된다.&lt;/li&gt;
  &lt;li&gt;Undo 공간에 백업해두고 실제 레코드 값을 변경한다.
    &lt;ul&gt;
      &lt;li&gt;백업된 데이터는 불필요하다고 판단하는 시점에 주기적으로 삭제한다.&lt;/li&gt;
      &lt;li&gt;Undo에 백업된 레코드가 많아지면 MySQL 서버의 처리 성능이 떨어질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이러한 변경방식은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiversion_concurrency_control&quot;&gt;MVCC(Multi Version Concurrency Control)&lt;/a&gt;라고 부른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-05-08-21-52-08.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;그렇다면-repeatable-read는-문제가-없을까&quot;&gt;그렇다면 REPEATABLE READ는 문제가 없을까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;PHANTOM READ
    &lt;ul&gt;
      &lt;li&gt;다른 트랜잭션에서 수행한 변경 작업에 의해 레코드가 보였다가 안 보였다가 하는 현상&lt;/li&gt;
      &lt;li&gt;이를 방지하기 위해서는 쓰기 잠금을 걸어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-05-08-22-14-18.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;serializable&quot;&gt;SERIALIZABLE&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;가장 단순한 격리 수준이지만 가장 엄격한 격리 수준&lt;/li&gt;
  &lt;li&gt;성능 측면에서는 동시 처리성능이 가장 낮다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SERIALIZABLE&lt;/code&gt;에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;PHANTOM READ&lt;/code&gt;가 발생하지 않는다.하지만.. 데이터베이스에서 거의 사용되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://doooyeon.github.io/2018/09/29/transaction-isolation-level.html&quot;&gt;https://doooyeon.github.io/2018/09/29/transaction-isolation-level.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.5/en/set-transaction.html&quot;&gt;https://dev.mysql.com/doc/refman/5.5/en/set-transaction.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Database" /><summary type="html"></summary></entry><entry><title type="html">TOAST FORWARD - “Spring Framework 애플리케이션 개발자를 위한 Spring Boot”</title><link href="https://nesoy.github.io/articles/2019-04/TOAST-FORWARD-SpringBoot" rel="alternate" type="text/html" title="TOAST FORWARD - &quot;Spring Framework 애플리케이션 개발자를 위한 Spring Boot&quot;" /><published>2019-04-17T00:00:00+00:00</published><updated>2019-04-17T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-04/TOAST-FORWARD-SpringBoot</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-04/TOAST-FORWARD-SpringBoot">&lt;h2 id=&quot;spring-framework-애플리케이션-개발자를-위한-spring-boot&quot;&gt;Spring Framework 애플리케이션 개발자를 위한 Spring Boot&lt;/h2&gt;
&lt;h3 id=&quot;spring-boot의-시작과-목표&quot;&gt;Spring Boot의 시작과 목표&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JIRA : &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues/14521&quot;&gt;https://github.com/spring-projects/spring-framework/issues/14521&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;모든 Spring 기술에 대해 빠르고 광범위한 시작환경을 제공&lt;/li&gt;
  &lt;li&gt;별도의 설정 없이 바로 사용가능(out of the box)을 지향하지만, 기본 설정을 변경해야 할 경우에는 빠르게 변경가능&lt;/li&gt;
  &lt;li&gt;대규모 시스템의 다양한 비기능적 기능을 제공
    &lt;ul&gt;
      &lt;li&gt;비기능적 기능 : 임베디드 서버, 보안, 모니터링 지표, 헬스 체크 등등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;코드 생성, XML 설정 할 필요가 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot의-기능-및-특징&quot;&gt;Spring Boot의 기능 및 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단독으로 실행 가능한 Spring 애플리케이션 생성&lt;/li&gt;
  &lt;li&gt;내장형 WAS
    &lt;ul&gt;
      &lt;li&gt;Tomcat, Jetty, Undertow&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본 설정된 Starter 컴포넌트&lt;/li&gt;
  &lt;li&gt;상용화에 필요한 통계, 상태 점검 및 외부설정을 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Framework를 대체하는 기술이 아니라 애플리케이션을 쉽게 개발하는 새로운 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spring-boot가-해-주는-것&quot;&gt;Spring Boot가 해 주는 것&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;최적의 Dependency(라이브러리, 버젼) 관리&lt;/li&gt;
  &lt;li&gt;관례에 따른 기본 Bean 설정 (@Configuration)을 미리 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-framework---spring-boot로-변경하기-위해선&quot;&gt;Spring Framework -&amp;gt; Spring Boot로 변경하기 위해선?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;System 설정부터 일단 만족해야 한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.5.17.RELEASE/reference/html/getting-started-system-requirements.html&quot;&gt;1.5.17 RELELASE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/html/getting-started-system-requirements.html&quot;&gt;2.0.6 RELELASE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/html/getting-started-system-requirements.html&quot;&gt;2.1.3 RELELASE&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ApplicationContext -&amp;gt; SpringApplication으로 생성하도록 수정&lt;/li&gt;
  &lt;li&gt;static Resource Path 변경&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletRegistrationBean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterRegistrationBean&lt;/code&gt;으로 사용&lt;/li&gt;
  &lt;li&gt;Servlet 3.0+ 에 web.xml 없는 프로젝트 라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebApplicationInitializer&lt;/code&gt; 을 &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootServletInitializer&lt;/code&gt; 으로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot의-장단점은&quot;&gt;Spring Boot의 장단점은?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;Spring Framework의 설정과 구성을 간편하게 적용할 수 있다.&lt;/li&gt;
      &lt;li&gt;MSA 구현에 최적화 되어 있다.&lt;/li&gt;
      &lt;li&gt;보안, 모니터링 구현을 프레임워크 레벨에서 지원한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;@AutoConfiguration이 어떤 일을 하는지 잘 모르겠다.&lt;/li&gt;
      &lt;li&gt;내가 제어할 수 없는 설정이 미리 되어있을거 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot-실행&quot;&gt;Spring Boot 실행&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1&lt;/span&gt;
mvn spring-boot:run
&lt;span class=&quot;c&quot;&gt;# 2&lt;/span&gt;
mvn clean package
java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; target/edu-springboot-simpleweb-application-2.1.3-SNAPSHOT.jar
&lt;span class=&quot;c&quot;&gt;# jar 파일 기준으로 앞쪽은 JVM Option, 뒤쪽은 Application Parameter로 동작&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;spring-boot-의존성-관리는-어떻게-할까&quot;&gt;Spring Boot 의존성 관리는 어떻게 할까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;spring-boot-starter-parent
    &lt;ul&gt;
      &lt;li&gt;spring-boot-dependencies를 상속&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/pom.xml&quot;&gt;spring-boot-dependencies&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Spring Boot 버전별로 지원하는 라이브러리 의존성 목록(Bills of Materials)&lt;/li&gt;
      &lt;li&gt;Spring Boot 버전을 업그레이드하면 라이브러리 의존성도 모두 업그레이드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-web/pom.xml&quot;&gt;spring-boot-starter-web&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;spring-core&lt;/li&gt;
      &lt;li&gt;spring-web&lt;/li&gt;
      &lt;li&gt;spring-webmvc&lt;/li&gt;
      &lt;li&gt;내장 tomcat 서버 및 관련 라이브러리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot-설정-및-인자&quot;&gt;Spring Boot 설정 및 인자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties&quot;&gt;application propreties 설정&lt;/a&gt;
    &lt;h4 id=&quot;maven&quot;&gt;Maven&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring Boot 1.X : &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn spring-boot:run -Drun.arguments=&quot;--server.port=9000&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Spring Boot 2.X : &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn spring-boot:run -Dspring-boot.run.arguments=&quot;--server.port=9000&quot;&lt;/code&gt;
    &lt;h4 id=&quot;jar&quot;&gt;Jar&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar webapp-sample-1.0-SNAPSHOT.jar --server.port=9010&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enableautoconfiguration&quot;&gt;@EnableAutoConfiguration&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot의 자동 구성을 위한 메타 어노테이션&lt;/li&gt;
  &lt;li&gt;애플리케이션에서 필요한 Bean을 유추해서 구성해 주는 기능을 담당&lt;/li&gt;
  &lt;li&gt;@SpringBootApplication에 포함&lt;/li&gt;
  &lt;li&gt;Spring Boot VER 2.1.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-04-17-15-38-14.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Import(AutoConfigurationImportSelector.class)&lt;/code&gt;를 통해 자동설정을 찾고 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;SpringFactoriesLoader를 통해 loadFactoryNames 메서드로 Configuration 후보 반환을 한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCandidateConfigurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;AnnotationAttributes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringFactoriesLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadFactoryNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;getSpringFactoriesLoaderFactoryClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBeanClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;are using a custom packaging, make sure that file is correct.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/spring.factories&lt;/code&gt; 파일 위치
    &lt;ul&gt;
      &lt;li&gt;Spring Boot가 애플리케이션 타입을 유추할때 사용할 @Configuration 클래스를 spring.factories 파일에 정의해 둔 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-04-17-15-41-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringFactoriesLoader의 Fatories Resource Location&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-04-17-15-43-54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;meta-infspringfactories에-기술된-bean-을-다-생성될까&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/spring.factories&lt;/code&gt;에 기술된 Bean 을 다 생성될까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;@Conditional을 통해 조건적으로 Spring Bean을 생성/등록한다.&lt;/li&gt;
  &lt;li&gt;Spring Boot Annotation
    &lt;ul&gt;
      &lt;li&gt;@ConditionalOnWebApplication : 프로젝트가 웹 애플리케이션이면 Bean 등록&lt;/li&gt;
      &lt;li&gt;@ConditionalOnBean: 해당 Bean이 존재하면 자동 설정 등록&lt;/li&gt;
      &lt;li&gt;@ConditionalOnMissingBean: 해당 Bean이 존재하지 않으면 자동설정 등록&lt;/li&gt;
      &lt;li&gt;@ConditionalOnClass: 해당 클래스가 존재하면 자동설정 등록&lt;/li&gt;
      &lt;li&gt;@ConditionalOnMissingClass: 해당 클래스가 클래스 패스에 존재하지 않으면 Bean 등록&lt;/li&gt;
      &lt;li&gt;@ConditionalOnResource: 해당 자원(file 등)이 존재하면 자동설정 등록&lt;/li&gt;
      &lt;li&gt;@ConditionalOnProperty: 설정한 프로퍼티가 존재하면 자동설정 등록&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RestTemplate 타입의 Bean이 등록되어 있지 않다면 RestTemplate Bean을 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;구성-프로퍼티-우선순위&quot;&gt;구성 프로퍼티 우선순위&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실행명령어와 함께 전달된 인자&lt;/li&gt;
  &lt;li&gt;SPRING_APPLICATION_JSON&lt;/li&gt;
  &lt;li&gt;JNDI(java:comp/env)&lt;/li&gt;
  &lt;li&gt;System.getProperties()&lt;/li&gt;
  &lt;li&gt;OS 환경변수&lt;/li&gt;
  &lt;li&gt;RandomValuePropertySource&lt;/li&gt;
  &lt;li&gt;JAR 패키지 외부의 프로파일 관련 구성(application-{profile}.property)&lt;/li&gt;
  &lt;li&gt;JAR 패키지 내부의 프로파일 관련 구성(application-{profile}.property)&lt;/li&gt;
  &lt;li&gt;JAR 패키지 외부의 애플리케이션 프로퍼티(application.property)&lt;/li&gt;
  &lt;li&gt;JAR 패키지 내부의 애플리케이션 프로퍼티(application.property)&lt;/li&gt;
  &lt;li&gt;@PropertySource&lt;/li&gt;
  &lt;li&gt;SpringApplication.setDefaultProperties&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;custom-spring-boot-starter-example&quot;&gt;Custom Spring boot Starter Example&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/edu-springboot/edu-doorayclient-springboot-workshop&quot;&gt;https://github.com/edu-springboot/edu-doorayclient-springboot-workshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;dooray-spring-boot-starter(라이브러리 의존성 관리)&lt;/li&gt;
  &lt;li&gt;dooray-spring-boot-autoconfigure(auto configuration)
    &lt;ul&gt;
      &lt;li&gt;애플리케이션의 설정, 환경에 따라 자동으로 설정할 Bean을 정의하는 프로젝트&lt;/li&gt;
      &lt;li&gt;java configuration, conditional 을 기반으로 조건에 따라 Bean을 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dooray-spring-boot-starter-application(Spring Boot 애플리케이션)
    &lt;ul&gt;
      &lt;li&gt;dooray-spring-boot-starter 를 사용하는 애플리케이션이 의존성에 추가할 pom 파일 만 작성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot-admin&quot;&gt;Spring Boot Admin&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/codecentric/spring-boot-admin&quot;&gt;https://github.com/codecentric/spring-boot-admin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot-security---default&quot;&gt;Spring Boot Security - Default&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;모든 요청에 인증이 요구됨&lt;/li&gt;
  &lt;li&gt;form 로그인, basic 인증 사용 (Conent-Negotiation 전략 - Accept Header)
    &lt;ul&gt;
      &lt;li&gt;기본 회원명은 ‘user’&lt;/li&gt;
      &lt;li&gt;기본 비밀번호는 기동 시 Random 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CSRF 방어 켜짐&lt;/li&gt;
  &lt;li&gt;Session Fixation protection: 세션 고정 공격 방어&lt;/li&gt;
  &lt;li&gt;Security Header integration: 보안 헤더 통합
    &lt;ul&gt;
      &lt;li&gt;HSTS : 브라우저가 https 강제&lt;/li&gt;
      &lt;li&gt;X-Content-Type-Options : mime-type 우회 방어&lt;/li&gt;
      &lt;li&gt;Cache Control : CC Attack 방어&lt;/li&gt;
      &lt;li&gt;X-XSS-Protection : XSS 방어&lt;/li&gt;
      &lt;li&gt;X-Frame-Options : ClickJacking 방어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Review" /><category term="Spring" /></entry><entry><title type="html">Javascript Arrow function과 Binding에 대해</title><link href="https://nesoy.github.io/articles/2019-04/Javascript-Arrow-function" rel="alternate" type="text/html" title="Javascript Arrow function과 Binding에 대해" /><published>2019-04-03T00:00:00+00:00</published><updated>2019-04-03T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-04/Javascript-Arrow-function</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-04/Javascript-Arrow-function">&lt;p&gt;&lt;img src=&quot;/assets/logo/javascript.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;arrow-function과-binding에-대해&quot;&gt;Arrow function과 Binding에 대해&lt;/h2&gt;
&lt;h3 id=&quot;arrow-function이란&quot;&gt;Arrow Function이란?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ES6부터 적용된 문법입니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; {}&lt;/code&gt;로 표기&lt;/li&gt;
  &lt;li&gt;짧은 표기 법 / 가독성 향상&lt;/li&gt;
  &lt;li&gt;Arrow Function는 생성자로 사용할 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arrow-function과-this는-binding이-어떻게-진행될까&quot;&gt;Arrow function과 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;는 Binding이 어떻게 진행될까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic scope&lt;/code&gt;가 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;lexical scope&lt;/code&gt;의 this를 가지고 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;뿐만 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt;도 Binding하지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;function-vs-arrow-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrow function&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&quot;es5-function&quot;&gt;ES5 function&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;중첩된 구조에서는 각각의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic scope&lt;/code&gt;가 모두 발생합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic scope this&lt;/code&gt;를 가지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// `this`를 자신의 인스턴스로 정의.&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;growUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 비엄격 모드에서, growUp() 함수는 `this`를 전역 객체로 정의&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 이는 Person() 생성자에 정의된 `this`와 다릅니다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 따라서 외부 age, 내부 age는 다른 Reference를 가지고 있습니다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// dynamic scope # this&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;es5에서-외부내부-this값이-다른-문제점을-해결하기-위해-어떤-노력을-했을까&quot;&gt;ES5에서 외부/내부 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;값이 다른 문제점을 해결하기 위해 어떤 노력을 했을까?&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 비전역 변수 할당하여 접근&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;growUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 콜백은  `that` 변수를 참조하고 이것은 값이 기대한 객체이다.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1, 2, 3, 4, ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;es6-arrow-function&quot;&gt;ES6 Arrow function&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;lexical scope this를 가지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// lexical scope # this&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1, 2, 3, 4, ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;arrow-function-case&quot;&gt;Arrow function Case&lt;/h3&gt;
&lt;h4 id=&quot;교체하기-쉬운-경우&quot;&gt;교체하기 쉬운 경우&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;를 사용하지 않는 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bind(this)&lt;/code&gt;를 사용하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;교체하기-힘든-경우&quot;&gt;교체하기 힘든 경우&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;등을 사용하는 constructable한 함수&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;에 덧붙여진 함수나 method들(보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;를 사용합니다.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt;등을 함수의 인자로 사용하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://webframeworks.kr/tutorials/translate/arrow-function/&quot;&gt;http://webframeworks.kr/tutorials/translate/arrow-function/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://beomi.github.io/2017/07/12/understanding_js_scope_function_vs_arrow/&quot;&gt;https://beomi.github.io/2017/07/12/understanding_js_scope_function_vs_arrow/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Javascript" /></entry><entry><title type="html">ElasticSearch - 분석</title><link href="https://nesoy.github.io/articles/2019-03/ElasticSearch-Analysis" rel="alternate" type="text/html" title="ElasticSearch - 분석" /><published>2019-03-05T00:00:00+00:00</published><updated>2019-03-05T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-03/ElasticSearch-Analysis</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-03/ElasticSearch-Analysis">&lt;p&gt;&lt;img src=&quot;/assets/logo/elastic.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;elasticsearch의-분석analysis이란&quot;&gt;ElasticSearch의 분석(Analysis)이란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;검색어를 추출하기 위한 프로세스&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;분석은-어떻게-동작할까&quot;&gt;분석은 어떻게 동작할까?&lt;/h3&gt;

&lt;h4 id=&quot;analyzer-pipeline&quot;&gt;Analyzer Pipeline&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-03-04-21-22-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 Analyzer는 Char Filter, Tokenizer, Token Filter를 저장하고 있는 하나의 배치 프로그램.&lt;/li&gt;
  &lt;li&gt;Custom Analyzer를 생성 추가 삭제가 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;분석에-필요한-구성요소&quot;&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html&quot;&gt;분석에 필요한 구성요소&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;char-filters&quot;&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html&quot;&gt;Char Filters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;입력된 원본의 텍스트를 분석에 필요한 형태로 변환하는 역할&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tokenizer&quot;&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html&quot;&gt;Tokenizer&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;입력 데이터를 설정된 기준에 따라 검색어 토큰으로 분리하는 역할&lt;/li&gt;
  &lt;li&gt;standard
    &lt;ul&gt;
      &lt;li&gt;-, []와 같은 기호는 구분자로 인식하고 분리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;whitespace
    &lt;ul&gt;
      &lt;li&gt;띄어쓰기, 탭, 줄바꿈과 같은 공백 기준으로 토큰 분리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;nGram
    &lt;ul&gt;
      &lt;li&gt;최소-최대 길이에 해당하는 문자들을 토큰으로 분할한다.&lt;/li&gt;
      &lt;li&gt;중요한 필드를 두세 개의 문자만 가지고도 검색 가능하지만&lt;/li&gt;
      &lt;li&gt;검색어 토큰이 많아지기 때문에 메모리 사용량과 시스템 부하 역시 증가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;edgeNGram
    &lt;ul&gt;
      &lt;li&gt;nGram의 문제점을 해결하기 위해 등장한 edgeNGram&lt;/li&gt;
      &lt;li&gt;검색어의 모든 값을 분할하는 것이 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;문장의 시작 부분&lt;/code&gt;만 분할한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;keyword
    &lt;ul&gt;
      &lt;li&gt;입력된 문장 전체를 하나의 싱글 토큰으로 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;letter
    &lt;ul&gt;
      &lt;li&gt;알파벳이 아닌 공백/특수문자 기준으로 검색어 토큰 분리&lt;/li&gt;
      &lt;li&gt;아시아 쓰는 언어에서는 오동작 주의해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lowercase
    &lt;ul&gt;
      &lt;li&gt;letter -&amp;gt; lowercase filter 적용한 것과 동일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;token-filter&quot;&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html&quot;&gt;Token Filter&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;분리된 토큰들에 다시 필터를 적용해서 실제로 검색에 쓰이는 검색어들로 최종 변환하는 역할&lt;/li&gt;
  &lt;li&gt;분석단계에서 가장 중요한 과정&lt;/li&gt;
  &lt;li&gt;porter_stem
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://tartarus.org/martin/PorterStemmer/&quot;&gt;Porter Stemming&lt;/a&gt; 알고리즘을 적용한 형태소 분석을 하는 토큰필터&lt;/li&gt;
      &lt;li&gt;lowercase 토크나이저를 미리 적용해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;shingle
    &lt;ul&gt;
      &lt;li&gt;문자열을 토큰-Ngram 방식으로 분석하는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;word_delimiter
    &lt;ul&gt;
      &lt;li&gt;입력된 문장의 단어를 더 세부적으로 분할하거나 병합하는 다양한 옵션들을 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;snowball
    &lt;ul&gt;
      &lt;li&gt;원형으로 변환하는 토큰 Filter
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;days&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;day&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;한국어-형태소-분석기&quot;&gt;한국어 형태소 분석기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/korlucene&quot;&gt;아리랑 형태소분석기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://eunjeon.blogspot.com/&quot;&gt;은전한닢&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/kr/blog/nori-the-official-elasticsearch-plugin-for-korean-language-analysis&quot;&gt;Elasitc 노리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=52801459&quot;&gt;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=52801459&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/blog/found-text-analysis-part-1&quot;&gt;https://www.elastic.co/blog/found-text-analysis-part-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/blog/found-text-analysis-part-2&quot;&gt;https://www.elastic.co/blog/found-text-analysis-part-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/writing-analyzers.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/writing-analyzers.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/kr/blog/arirang-analyzer-with-elasticsearch&quot;&gt;Elasticsearch에서 아리랑 한글 분석기 사용하기 - 정호욱님&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/kr/blog/using-korean-analyzers&quot;&gt;Elastic - 어떤 한국어 분석기를 사용할까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="ElasticSearch" /></entry><entry><title type="html">Vscode Code Snippets 설정하기</title><link href="https://nesoy.github.io/articles/2019-03/Vscode-Code-snippet" rel="alternate" type="text/html" title="Vscode Code Snippets 설정하기" /><published>2019-03-03T00:00:00+00:00</published><updated>2019-03-03T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-03/Vscode-Code-snippet</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-03/Vscode-Code-snippet">&lt;h2 id=&quot;vscode-code-snippet-설정하기&quot;&gt;Vscode Code Snippet 설정하기&lt;/h2&gt;
&lt;h3 id=&quot;code---preference---user-snippets&quot;&gt;Code - Preference -&amp;gt; User Snippets&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-03-03-23-52-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;원하는-파일-형식에-추가하기&quot;&gt;원하는 파일 형식에 추가하기&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-03-03-23-54-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;markdown-예시&quot;&gt;Markdown 예시&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-03-03-23-58-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;자주-사용하는-표현을-snippet으로-표현하기&quot;&gt;자주 사용하는 표현을 Snippet으로 표현하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;markdown으로 쉽게 포스트 포맷 작성하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Prefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;---&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;layout: post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title: $1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;로&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;focusing&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;할&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;수&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;있습니다.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;excerpt: ''&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;categories:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;- $2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;두번째&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;포커싱&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tags:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;- $2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;현재&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;시간&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;표현하기&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;---&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;## $3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;## Reference&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;만약-markdown-snippet이-동작을-안하는-경우&quot;&gt;만약 Markdown Snippet이 동작을 안하는 경우?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;settings에 &lt;code class=&quot;highlighter-rouge&quot;&gt;[markdown&lt;/code&gt;이라고 검색합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-03-04-00-06-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설정 파일에 아래 내용을 추가합니다.
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[markdown]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editor.quickSuggestions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://milooy.wordpress.com/2019/01/10/console-log-shortcut-in-vscode/&quot;&gt;https://milooy.wordpress.com/2019/01/10/console-log-shortcut-in-vscode/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/updates/v1_20#_more-snippet-variables&quot;&gt;https://code.visualstudio.com/updates/v1_20#_more-snippet-variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Vscode" /></entry><entry><title type="html">Webpack이란?</title><link href="https://nesoy.github.io/articles/2019-02/Webpack" rel="alternate" type="text/html" title="Webpack이란?" /><published>2019-02-25T00:00:00+00:00</published><updated>2019-02-25T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-02/Webpack</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-02/Webpack">&lt;p&gt;&lt;img src=&quot;/assets/logo/webpack.png&quot; alt=&quot;NO Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;왜-webpack이-등장하게-되었을까&quot;&gt;왜 Webpack이 등장하게 되었을까?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;규모가 있는 System에서는 많은 Javascript가 존재하게 됩니다. 이 많은 Javascript 파일을 하나의 파일로 관리하기엔 어려움이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;그렇다면-여러-개로-호출하면-해결되는게-아닐까&quot;&gt;그렇다면 여러 개로 호출하면 해결되는게 아닐까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 파일을 브라우져에서 로딩하는 것은 네트워크 비용이 그만큼 사용하여 반응속도가 느려지게 됩니다.&lt;/li&gt;
  &lt;li&gt;더 나아가 각 파일의 변수 충돌의 위험성도 존재하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이를 해결하기 위해 Webpack이 등장하게 되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;webpack이란&quot;&gt;Webpack이란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;현대 Javascript Application의 Static Module Bundler입니다.&lt;/li&gt;
  &lt;li&gt;Webpack이 실행된다면 Dependencies Graph를 통해 필요한 형태의 하나 또는 여러개의 Bundle로 생성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bundle이란&quot;&gt;Bundle이란?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어 및 일부 하드웨어와 함께 작동하는 데 필요한 모든 것을 포함하는 Package&lt;/li&gt;
  &lt;li&gt;각각의 모듈들에 대해 의존성 관계를 파악하여 하나 또는 여러개의 그룹으로 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;그렇다면-왜-webpack을-사용해야할까&quot;&gt;&lt;a href=&quot;https://webpack.js.org/concepts/why-webpack/&quot;&gt;그렇다면 왜 Webpack을 사용해야할까?&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;다른 Module Bundler도 많이 존재하지만 performance가 우수합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;browsify-grunt-gulp-등의-도구들은-webpack과-무슨-차이가-있을까&quot;&gt;Browsify, Grunt, Gulp 등의 도구들은 webpack과 무슨 차이가 있을까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;크고 복잡하며 다양한 리소스들이 들어있는 프로젝트에는 webpack을 사용하는 것이 좋습니다.&lt;/li&gt;
  &lt;li&gt;Grunt, Gulp는 오로지 리소스들에 대한 툴로 사용되며 dependency graph에 대한 개념이 없습니다.&lt;/li&gt;
  &lt;li&gt;Browsify는 비슷한 도구이지만 속도면에서 webpack이 더 좋습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webpack-core-concept&quot;&gt;Webpack Core Concept&lt;/h2&gt;

&lt;h3 id=&quot;entry&quot;&gt;Entry&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;dependency graph를 만들기 위해 필요한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Input Source&lt;/code&gt;입니다.&lt;/li&gt;
  &lt;li&gt;직/간접적으로 의존성을 가진 모듈들을 이해합니다.&lt;/li&gt;
  &lt;li&gt;여러개의 entry가 존재할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;Default value : &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/index.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./path/to/my/entry/file.js'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Webpack이 생성한 bundles의 결과물의 위치를 지정할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;Default value : &lt;code class=&quot;highlighter-rouge&quot;&gt;./dist/main.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./path/to/my/entry/file.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-first-webpack.bundle.js'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;loaders&quot;&gt;Loaders&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Webpack은 오직 Javascript와 Json만 이해할 수 있는 단점이 있습니다.&lt;/li&gt;
  &lt;li&gt;Loader는 다른 Type의 파일을 Webpack이 이해하고 처리가능한 모듈로 변환시키는 작업을 담당합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-first-webpack.bundle.js'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;txt$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'raw-loader'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Loader가 변환하는 동안 Plugin은 bundle optimization, asset management and injection of environment과 같은 일을 진행할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'html-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//installed via npm&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'webpack'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//to access built-in plugins&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;txt$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'raw-loader'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;mode&quot;&gt;Mode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;다양한 Profile로 지정하여 진행할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;development, production, none&lt;/li&gt;
  &lt;li&gt;Default value : &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'production'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;browser-compatibility&quot;&gt;Browser Compatibility&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹팩은 ES5를 사용하는 모든 브라우저를 지원합니다. 단 IE8의 아래 버젼은 지원하지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webpack-tips&quot;&gt;Webpack Tips&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Webpack GUI 설정 사이트&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webpack.jakoblind.no/&quot;&gt;https://webpack.jakoblind.no/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/&quot;&gt;https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jeonghwan.net/js/2017/05/15/webpack.html&quot;&gt;http://blog.jeonghwan.net/js/2017/05/15/webpack.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://haviyj.tistory.com/17&quot;&gt;https://haviyj.tistory.com/17&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webpack.jakoblind.no&quot;&gt;https://webpack.jakoblind.no&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Webpack" /><summary type="html"></summary></entry><entry><title type="html">SpringMVC Request Life Cycle에 대해 - PART 1</title><link href="https://nesoy.github.io/articles/2019-02/Spring-request-lifecycle-part-1" rel="alternate" type="text/html" title="SpringMVC Request Life Cycle에 대해 - PART 1" /><published>2019-02-19T00:00:00+00:00</published><updated>2019-02-19T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-02/Spring-request-lifecycle-part-1</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-02/Spring-request-lifecycle-part-1">&lt;p&gt;&lt;img src=&quot;/assets/logo/spring.png&quot; alt=&quot;NO Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;SpringMVC에서 Request가 들어오면 어떠한 과정을 거치는지 정리하기 위해 작성합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;아래는 이 글을 작성하는데 많은 도움을 얻은 글입니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.woniper.net/366&quot;&gt;SpringMVC 시작 - woniper님&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-18-20-20-08.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dispatcherservlet-구조&quot;&gt;DispatcherServlet 구조&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-13-41-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;servletservice&quot;&gt;&lt;a href=&quot;https://github.com/javaee/servlet-spec/blob/master/src/main/java/javax/servlet/Servlet.java#L153&quot;&gt;Servlet#service&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-13-44-53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WAS(Tomcat)은 Servlet의 service를 실행하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;genericservletservice&quot;&gt;&lt;a href=&quot;https://github.com/javaee/servlet-spec/blob/master/src/main/java/javax/servlet/GenericServlet.java#L277&quot;&gt;GenericServlet#service&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-18-21-58-48.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Servlet Interface를 가진 Abstract Class&lt;/li&gt;
  &lt;li&gt;실제 구현체인 HttpServlet을 봐야 이해가 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;httpservletservice&quot;&gt;&lt;a href=&quot;https://github.com/javaee/servlet-spec/blob/master/src/main/java/javax/servlet/http/HttpServlet.java#L635&quot;&gt;HttpServlet#service&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-18-22-01-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Method에 맞는 do{HttpMethod} 함수를 호출하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;httpservlet은-abstract-method가-없는데-왜-abstract-class일까&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18909206/why-httpservlet-is-an-abstract-class-any-functional-reason&quot;&gt;HttpServlet은 abstract Method가 없는데 왜 Abstract Class일까?&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;HttpServlet class 자체를 생성하지 못하기 위해서 Abstract Class로 정의해 놓은거 같습니다.&lt;/li&gt;
  &lt;li&gt;왜 생성하지 못하게 막아놨을까?
    &lt;ul&gt;
      &lt;li&gt;API/Interface는 정의되어있지만, 기능적으로는 완벽하지 않기에 Abstract Class로 정의되었다.라고 찾아 볼 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;default-httpservletdoget은-어떻게-동작할까&quot;&gt;&lt;a href=&quot;https://github.com/javaee/servlet-spec/blob/master/src/main/java/javax/servlet/http/HttpServlet.java#L167&quot;&gt;Default HttpServlet#doGet은 어떻게 동작할까?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-22-54-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Error Message만 반환하는 것을 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frameworkservletservice&quot;&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java#L874&quot;&gt;FrameworkServlet#service&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-14-01-53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HttpMethod가 Patch와 null인 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;FrameworkServlet#processRequest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;그 외에는 super.service 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet#service&lt;/code&gt;를 호출합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;httpmethod-get으로-호출하면-어떻게-진행될까&quot;&gt;HttpMethod GET으로 호출하면 어떻게 진행될까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet#service&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServlet#doGet&lt;/code&gt;을 거쳐&lt;/li&gt;
  &lt;li&gt;@Override된 &lt;code class=&quot;highlighter-rouge&quot;&gt;FrameworkServlet#doGet&lt;/code&gt;을 최종적으로 호출하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;테스트-케이스--nesoyservletdoget이-호출이-될까&quot;&gt;테스트 케이스 : NesoyServlet#doGet이 호출이 될까?&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-23-26-46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;test-결과값&quot;&gt;Test 결과값&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-23-27-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;frameworkservletdoget&quot;&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java#L874&quot;&gt;FrameworkServlet#doGet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-18-22-01-46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FrameworkServlet#processRequest&lt;/code&gt;로 전달하는 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frameworkservletprocessrequest&quot;&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java#L987&quot;&gt;FrameworkServlet#processRequest&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-19-23-34-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;final로 선언되어 있어 변경이 불가능합니다.&lt;/li&gt;
  &lt;li&gt;Javadoc에 &lt;code class=&quot;highlighter-rouge&quot;&gt;doService&lt;/code&gt;는 Template Method라는 정보가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;processrequest에서-무슨일을-진행할까&quot;&gt;processRequest에서 무슨일을 진행할까?&lt;/h3&gt;

&lt;h4 id=&quot;1-초기화--context-저장&quot;&gt;1. 초기화 &amp;amp; Context 저장&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Locale
    &lt;ul&gt;
      &lt;li&gt;이전 LocalContext 정보를 저장합니다.&lt;/li&gt;
      &lt;li&gt;현재 HTTP request의 Locale 정보를 얻습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RequestAttributes
    &lt;ul&gt;
      &lt;li&gt;이전 RequestAttributes 정보를 저장합니다.&lt;/li&gt;
      &lt;li&gt;HttpServletRequest, HttpServletResponse, HttpSession을 담고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletRequestAttributes&lt;/code&gt; 클래스를 생성합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LocaleContextHolder, RequestContextHandler에 저장
    &lt;ul&gt;
      &lt;li&gt;LocaleContextHolder에는 LocalContext를 저장합니다.&lt;/li&gt;
      &lt;li&gt;RequestContextHandler에는 RequestAttributes를 저장합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-frameworkservletdoservice&quot;&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java#L1177&quot;&gt;2. FrameworkServlet#doService&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/img/2019-02-18-22-02-39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실제 구현은 &lt;code class=&quot;highlighter-rouge&quot;&gt;DispatcherServlet#doService&lt;/code&gt;를 봐야합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-context-복구--후처리&quot;&gt;3. Context 복구 &amp;amp; 후처리&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이전에 저장해놨던 Context로 다시 돌려놓습니다.&lt;/li&gt;
  &lt;li&gt;log 결과값을 로깅합니다.&lt;/li&gt;
  &lt;li&gt;RequestHandleEvent를 진행합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://justforchangesake.wordpress.com/2014/05/07/spring-mvc-request-life-cycle/&quot;&gt;https://justforchangesake.wordpress.com/2014/05/07/spring-mvc-request-life-cycle/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.woniper.net/369&quot;&gt;https://blog.woniper.net/369&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Spring" /><summary type="html"></summary></entry><entry><title type="html">RabbitMQ에 대해</title><link href="https://nesoy.github.io/articles/2019-02/RabbitMQ" rel="alternate" type="text/html" title="RabbitMQ에 대해" /><published>2019-02-14T00:00:00+00:00</published><updated>2019-02-14T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-02/RabbitMQ</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-02/RabbitMQ">&lt;p&gt;&lt;img src=&quot;/assets/logo/RabbitMQ.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rabbitmq란&quot;&gt;&lt;a href=&quot;http://www.rabbitmq.com/&quot;&gt;RabbitMQ란?&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AMQP (Advanced Message Queueing Protocol) 메세지 브로커 소프트웨어(message broker software) 오픈소스입니다.&lt;/li&gt;
  &lt;li&gt;AMQP -&amp;gt; 표준MQ 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;erlang, java&lt;/li&gt;
  &lt;li&gt;Cluster, Federation&lt;/li&gt;
  &lt;li&gt;HA(High Availability)&lt;/li&gt;
  &lt;li&gt;Publish/Subscribe&lt;/li&gt;
  &lt;li&gt;다양한 plugin 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rabbitmq-work-flow&quot;&gt;RabbitMQ Work Flow&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/20190214/1.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메세지는 Message Queue를 통해 원하는 사용자에게 전달할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20190214/2.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Message Broker는 Producer와 Consumer 사이 중간자 역할을 담당합니다.&lt;/li&gt;
  &lt;li&gt;가장 기초의 아키텍처이며 Message는 Queue에 저장되어 소비자가 조회할때까지 저장하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rabbitmq는-언제-사용해야-할까요&quot;&gt;RabbitMQ는 언제 사용해야 할까요?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/20190214/3.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Message Queue는 빠른 응답을 원할 때 주로 사용됩니다.
    &lt;ul&gt;
      &lt;li&gt;위의 그림처럼 많은 Resource가 필요한 작업은 Event를 발생시켜 다른 API에게 위임합니다.&lt;/li&gt;
      &lt;li&gt;다른 API에게 위임함으로써 Request에 대해 빠르게 응답을 할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Message를 많은 사람들에게 전달하고 싶을때 주로 사용됩니다.&lt;/li&gt;
  &lt;li&gt;두 Application간의 결합도는 Message Queue를 통해 낮출 수 있는 장점이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exchanges&quot;&gt;Exchanges&lt;/h3&gt;
&lt;h4 id=&quot;message는-바로-queue로-갈까요&quot;&gt;Message는 바로 Queue로 갈까요?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Message는 바로 Queue로 Publishing 하지 않습니다.&lt;/li&gt;
  &lt;li&gt;Producer는 Exchange에게 Message를 보냅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;exchange란&quot;&gt;Exchange란?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;다른 Queue에게 Routing하는 역할을 담당합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;types-of-exchange&quot;&gt;Types of Exchange&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/20190214/5.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Direct Exchange
    &lt;ul&gt;
      &lt;li&gt;Message의 Routing Key와 정확히 일치하는 Binding된 Queue로 Routing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fanout Exchange
    &lt;ul&gt;
      &lt;li&gt;Binding된 모든 Queue에 Message를 Routing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Topic Exchange
    &lt;ul&gt;
      &lt;li&gt;특정 Routing Pattern이 일치하는 Queue로 Routing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Headers Exchange
    &lt;ul&gt;
      &lt;li&gt;key-value로 정의된 Header 속성을 통한 Routing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;exchange-기타-설정값&quot;&gt;Exchange 기타 설정값&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Durability
    &lt;ul&gt;
      &lt;li&gt;브로커가 재시작 될 때 남아 있는지 여부&lt;/li&gt;
      &lt;li&gt;durable -&amp;gt; 재시작해도 유지가능&lt;/li&gt;
      &lt;li&gt;transient -&amp;gt; 재시작하면 사라집니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Auto-delete
    &lt;ul&gt;
      &lt;li&gt;마지막 Queue 연결이 해제되면 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;message-flow&quot;&gt;Message Flow&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/20190214/4.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Producer는 Message를 Exchange에게 보내게 됩니다.
    &lt;ul&gt;
      &lt;li&gt;Exchange를 생성할때 Exchange의 Type을 정해야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exchange는 Routing Key를 사용하여 적절한 Queue로 Routing을 진행합니다.
    &lt;ul&gt;
      &lt;li&gt;Routing은 Exchange Type에 따라 전략이 바뀌게 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exchange - Queue와 Binding이 완료된 모습을 볼 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;Message 속성에 따라 적절한 Queue로 Routing이 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Message는 Consumer가 소비할때까지 Queue에 대기하게 됩니다.&lt;/li&gt;
  &lt;li&gt;Consumer는 Message를 소비하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rabbitmq-용어&quot;&gt;RabbitMQ 용어&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Vhost(virutal host)
    &lt;ul&gt;
      &lt;li&gt;Virtual Host를 통해서 하나의 RabbitMQ 인스턴스 안에 사용하고 있는 Application을 분리할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Connection
    &lt;ul&gt;
      &lt;li&gt;물리적인 TCP Connection, HTTPS -&amp;gt; TLS(SSL) Connection을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Channel
    &lt;ul&gt;
      &lt;li&gt;하나의 물리적인 Connection 내에 생성되는 가상의 Connection&lt;/li&gt;
      &lt;li&gt;Consumer의 process나 thread는 각자 Channel을 통해 Queue에 연결 될 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jonnung.com/rabbitmq/2019/02/06/about-amqp-implementtation-of-rabbitmq/&quot;&gt;https://blog.jonnung.com/rabbitmq/2019/02/06/about-amqp-implementtation-of-rabbitmq/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.saltfactory.net/install-rabbitmq/&quot;&gt;http://blog.saltfactory.net/install-rabbitmq/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://skibis.tistory.com/310&quot;&gt;https://skibis.tistory.com/310&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="MessageQueue" /><category term="RabbitMQ" /><summary type="html"></summary></entry><entry><title type="html">JUnit Test 순서 제어하기</title><link href="https://nesoy.github.io/articles/2019-02/JUnit-Test-Ordering" rel="alternate" type="text/html" title="JUnit Test 순서 제어하기" /><published>2019-02-13T00:00:00+00:00</published><updated>2019-02-13T00:00:00+00:00</updated><id>https://nesoy.github.io/articles/2019-02/JUnit-Test-Ordering</id><content type="html" xml:base="https://nesoy.github.io/articles/2019-02/JUnit-Test-Ordering">&lt;p&gt;&lt;img src=&quot;/assets/logo/JUnit.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;JUnit Test case들이 랜덤하게 진행하기보단 특정한 순서대로 진행하는 방법이 있어 작성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;junit-test-순서-제어하기&quot;&gt;JUnit Test 순서 제어하기&lt;/h2&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/20190213/1.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/20190213/2.png&quot; alt=&quot;No Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-use&quot;&gt;How to use?&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FixMethodOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodSorters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;방식&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MethodSorters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MethodSorters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;JVM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MethodSorters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NAME_ASCENDING&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/junit-team/junit4/wiki/test-execution-order&quot;&gt;https://github.com/junit-team/junit4/wiki/test-execution-order&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/junit-5-test-order&quot;&gt;https://www.baeldung.com/junit-5-test-order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권영재</name></author><category term="Testing" /><category term="JUnit" /><summary type="html"></summary></entry></feed>