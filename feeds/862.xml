<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>용일이의 개발/번역 블로그</title>
    <description>저는 인디 게임 개발자입니다. 이 블로그는 프로그래밍 및 게임 개발과 관련된 글들을 쓰거나, 또는 좋은 해외 글들을 번역하려고 만든 블로그입니다.
</description>
    <link>http://yongil.net/</link>
    <atom:link href="http://yongil.net/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 26 Apr 2015 07:46:13 +0000</pubDate>
    <lastBuildDate>Sun, 26 Apr 2015 07:46:13 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>유니티 에셋 폴더의 예약된 이름들</title>
        <description>&lt;p&gt;원문: http://wiki.unity3d.com/index.php/Special_Folder_Names_in_your_Assets_Folder&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;유니티 에셋 폴더의 예약된 이름들&lt;/h1&gt;

&lt;p&gt;유니티에서 몇몇 폴더 이름은 특별한 속성을 가지고 있다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;숨겨진 폴더들&lt;/h2&gt;

&lt;p&gt;점(.)으로 시작하는 폴더(예. “.UnitTests/”, “.svn/”)는 유니티에 의해 무시된다. 이 폴더에 들어 있는 어떠한 에셋도 임포트되지 않으면 어떠한 스크립트도 컴파일되지 않는다. 또한 프로젝트 뷰에서도 보이지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;standard-assets&quot;&gt;“Standard Assets”&lt;/h2&gt;

&lt;p&gt;이곳에 위치한 스크립트들은 항상 가장 먼저 컴파일된다. 스크립트는 언어에 따라 Assembly-CSharp-firstpass, Assembly-UnityScript-firstpass, Assembly-Boo-firstpass 중의 하나로 출력된다.&lt;/p&gt;

&lt;p&gt;Standard Assets 폴더의 스크립트들은 다른 스크립트들보다 먼저 컴파일 된다. 그로므로 스크립트를 Standard Assets 폴더에 두는 것은 C# 스크립트가 .js 스크립트에 접근할 수 있게 하거나 또는 .js 스크립트가 C# 스크립트에 접근할 수 있게 하기를 위한 한 방법이다.&lt;/p&gt;

&lt;h2 id=&quot;pro-standard-assets&quot;&gt;“Pro Standard Assets”&lt;/h2&gt;

&lt;p&gt;Standard Assets과 같지만 이곳의 파일들은 Pro 버전에서만 의미가 있다. 이는 여기에 있는 에셋들은 Render Texture나 Screen-space 효과 등과 같은 Pro-only 기능에서만 사용된다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;이 곳의 스크립트들은 먼저 컴파일되며, Pro Standard Assets 폴더 밖의 다른 스크립트(어떠한 언어라도)에서 접근이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;editor&quot;&gt;“Editor”&lt;/h2&gt;

&lt;p&gt;Editor는 여러분이 작성한 스크립트가 유니티 에디터 스크립팅 API에 접근할 수 있도록 허가해주는 특별한 폴더 이름이다. 만약 여러분의 스크립트가 UnityEditor 네임스페이스의 클래스나 기능을 사용한다면, Editor라는 폴더 안에 위치해야 한다.&lt;/p&gt;

&lt;p&gt;Editor 폴더 안의 스크립트들을 게임 빌드에는 포함되지 않을 것이다. 오직 유니티 에디터에서만 사용된다. 프로젝트에 여러개의 Editor 폴더가 존재해도 된다.&lt;/p&gt;

&lt;p&gt;주의: 특수 폴더에 위치하지 않은 Editor 폴더는 프로젝트 어디에서 위치/포함 될 수 있다. 하지만 “Standard Assets”, “Pro Standard Assets”, “Plugins” 안에 위치할 경우, 이 폴더들의 직접적인 자식이어야 한다. 그렇지 않으면 정상적으로 처리되지 않는다. 예를 들어 “My Entension/Scripts/Editor”는 OK이다. 하지만 특수 폴더에 위치할 경우 반드시 ‘Standard Assets/Editor/MyExtension/Scripts”, 또는 “Pro Standard Assets/Editor/My Extension/Scripts”, 또는 “Plugins/Editor/My Extension/Scripts”이어야 한다.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;“Plugins”&lt;/h2&gt;

&lt;p&gt;“Plugin” 폴더는 스크립트에서 접근하기를 원하는 네이티브 플러그인들이 위치하는 곳이다. 이것들은 자동으로 빌드에 포함될 것이다. 이 폴더는 어떠한 다른 폴더 안에 들어가 있으면 안된다( Assets 폴더 최상위에 위치해야 한다)&lt;/p&gt;

&lt;p&gt;Windows에서는 네이티브 플러그인들이 .dll 파일들로 존재한다. Mac OS X에서는 .bundle 파일들로 존재한다. Linux에서는 .so 파일들로 존재한다. Standard Assets 폴더와 같이 이 곳의 스크립트들은 먼저 컴파일되며, Plugins 폴더 밖의 스크립트(어떠한 언어라도)에서 접근이 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;pluginsx86&quot;&gt;“Plugins/x86”&lt;/h3&gt;

&lt;p&gt;만약 32-bit나 유니버셜(32와 64 bit 모두) 플랫폼으로 빌드를 하고, 이 하위 폴더가 존재한다면, 이 폴더의 모든 네이티브 플러그인 파일들이 자동으로 빌드에 추가 될 것이다. 만약 이 폴더가 존재하지 않는다면, 유니티는 대신 부모인 Plugin 폴더에서 네이티브 플러그인들을 찾을 것이다.&lt;/p&gt;

&lt;h3 id=&quot;pluginsx8664&quot;&gt;“Plugins/x86_64”&lt;/h3&gt;

&lt;p&gt;만약 64-bit이나 유니버셜(32와 64 bit 모두) 플랫폼으로 빌드를 하고, 이 하위 폴더가 존재한다면, 이 폴더의 모든 네이티브 플러그인 파일들이 자동으로 빌드에 추가 될 것이다.  만약 이 폴더가 존재하지 않는다면, 유니티는 대신 부모인 Plugin 폴더에서 네이티브 플러그인들을 찾을 것이다.&lt;/p&gt;

&lt;p&gt;만약 유니버셜 빌드를 생성한다면, x86과 x86_64 하위 폴더를 모두 만드는 것을 권장한다. 그리고 32-bit와 64-bit 버전의 네이티브 플러그 인을 적절한 하위 폴더에 넣어 준다.&lt;/p&gt;

&lt;h3 id=&quot;pluginsandroid&quot;&gt;“Plugins/Android”&lt;/h3&gt;

&lt;p&gt;Java-based 플러기인에 사용될 안드로이드 프로젝트에 포함시키고 싶은 Java .jar 파일들을 이곳에 위치시킨다.  모든 .so 파일(Android NDK-based 플러그인들)도 역시 포함될 것이다. See http://docs.unity3d.com/Documentation/Manual/PluginsForAndroid.html&lt;/p&gt;

&lt;h3 id=&quot;pluginsios&quot;&gt;“Plugins/iOS”&lt;/h3&gt;

&lt;p&gt;생성된 Xcode 프로젝트에 어떠한 .a, .m, .mm, .c 또는 .cpp 파일들을 자동으로 (심볼릭 링크로써) 추가하는 제한적이고 간단한 벙법이다. See http://docs.unity3d.com/Documentation/Manual/PluginsForIOS.html&lt;/p&gt;

&lt;p&gt;만약 Xcode 프로젝트에 자동으로 파일들을 추가하는 방법에 대해 더 많은 제어를 하고 싶다면, PostprocessBuildPlayer 기능을 사용해야 한다. 이렇게 하는 것은 파일들을 Plugins/iOS 폴더에 위치시키지 않아도 된다.  See http://docs.unity3d.com/Documentation/Manual/BuildPlayerPipeline.html&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;“Resources”&lt;/h2&gt;

&lt;p&gt;Resources 폴더는 스크립트에서 일반적인 (그리고 권유하는) 직접 참조 (유니티 에디터에서 드래그&amp;amp;드롭하는 스크립트의 변수 등) 하는 대신 파일 경로나 이름으로 에셋들에 접근할 수 있게 해주는 특수 폴더이다.&lt;/p&gt;

&lt;p&gt;이러한 이유로 사용할 때 주의 사항이 있다. Resources 폴더의 모든 에들은 비록 사용되지 않더라도 여러분의 빌드에 포함된다. 그 이유는 이 에셋들은 스크립트에 의해 사용되기 때문에 유니티는 리소스 기반의 에셋들이 사용되는지 사용되지 않는지 판단할 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;프로젝트에 여러개의 Resources 폴더를 가질 수 있다. 한 Resources 폴더의 어떠한 이름을 가지는 에셋을 넣어두고 또 다른 Resources 폴더에 같은 이름을 가지는 에셋을 넣어두는 것은 추천하지 않는다.&lt;/p&gt;

&lt;p&gt;게임이 한번 빌드되고 나면 모든 Resources 폴더의 모든 에셋들이 에셋을 위한 아카이브로 패킹된다. 이는 기술적으로 최종 빌드에서는 더이상 Resources 폴더가 존재하지 않는 다는 것을 의미한다. 비록 여러분의 코드에서 이들을 마치 프로젝트에 존재하던 경로를 통해 접근하긴 하지만 말이다.&lt;/p&gt;

&lt;p&gt;에셋들이 MonoBehavior 스크립트의 변수로 접근될 경우, 이 에셋들은 MonoBehaviour 스크립트가 Instantiate될 때 (즉, 게임 오브젝트나 프리팹이 씬에 존재하게 될 때) 메모리에 한번에 로드 된다는 것을 주목하자. 만약 에셋이 너무 크고  이것이 메모리에 로딩될 때 여러분이 이에 대한 더 많은 제어를 하고 싶다면 이렇게 동작하기를 원치 않을 것이다.&lt;/p&gt;

&lt;p&gt;그럴 경우 큰 에셋들을 Resources 폴더에 넣고 Resources.Load를 통해 불러오는 것을 고려해보자. 에셋이 더 이상 사용되지 않을 경우에는 오브젝트에 대해 Object.Destory를 호출한 후 Resources.UnloadUnusedAsset를 호출함으로써 메모리를 해제할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;editor-default-resources&quot;&gt;“Editor Default Resources”&lt;/h2&gt;

&lt;p&gt;이 폴더는 Resources 폴더와 유사하지만 에디터 스크립트들 에서만 의미를 가진다. 만약 에디터 플러그 인에 에셋들(예를 들어 아이콘, GUI 스킨 등)을 로드해야 하지만 빌드에는 포함되어야 하지 않다면 이 폴더를 사용해라 (이러한 파일들은 그냥 Resources 폴더에 넣는다면 빌드에도 포함된다는 것을 의미한다).&lt;/p&gt;

&lt;p&gt;에디터 스크립트들은 MonoBehavior 스크립트가 아니기 때문에 에셋에 접근하는 일반적인 방법(즉, 인스펙터를 통한 드래그 &amp;amp; 드랍)을 사용할 수 없다.  “Editor Default Resources”는 이를 위한 편리한 방법이다.&lt;/p&gt;

&lt;p&gt;“Editor Default Resources”안에 위치한 에셋들에 접근하기 위해서는 EditorGUIUtility.Load를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;Resources.Load와 달리 EditorGUIUtility.Load는 로드 하려고 하는 에셋의 파일 이름 확장자를 명시할 필요가 있다. 그러므로 “myPlugin/mySkin” 대신 “myPlugin/mySkin.guiskin”이어야 한다.&lt;/p&gt;

&lt;p&gt;EditorGUIUtility.Load에 의해 사용된 메모리를 해제하기 위해서는 오브젝트에 대해 Object.Destroy를 호출한 후 EditorUtility.UnloadUnusedAssets를 호출하라.&lt;/p&gt;

&lt;p&gt;알고 있는 바로는 오직 하나의 “Editor Default Resources” 폴더만이 존재할 수 있으며, Assets 폴더 바로 아래에 위치해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;gizmos&quot;&gt;“Gizmos”&lt;/h2&gt;

&lt;p&gt;Gizmos.DrawIcon에 사용되는 모든 텍스쳐/아이콘들을 가지는 폴더. 이 폴더의 텍스쳐 에셋들은 이름으로 불려질 수 잇으며, 에디터에서 기즈모로써 화면에 그려진다.&lt;/p&gt;

&lt;h2 id=&quot;webplayertemplates&quot;&gt;“WebPlayerTemplates”&lt;/h2&gt;

&lt;p&gt;웹 빌드에 사용되는 디폴트 웹페이지를 교체하기 위해 사용된다. 여기에 위치하는 스크립트들은 전혀 컴파일 되지 않을 것이다. 이 폴더는 Assets 폴더의 최상위에 위치해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;streamingassets&quot;&gt;“StreamingAssets”&lt;/h2&gt;

&lt;p&gt;이곳에 위치한 파일들은 어떠한 변경도 없이 빌드 폴더에 복사된다(최종 빌드 파일에 포함되어야 하는 모바일과 웹빌드는 제외). 이들의 경로는 플랫폼 마다 다를 수 있으며 Application.streamingAssetsPath((http://docs.unity3d.com/Documentation/ScriptReference/Application-streamingAssetsPath.html))를 통해 접근할 수 있다. Also see http://docs.unity3d.com/Documentation/Manual/StreamingAssets.html&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Apr 2015 12:09:41 +0000</pubDate>
        <link>http://yongil.net/unity/2015/04/23/Unity-Special-Folder-Names-in-your-Assets-Folder.html</link>
        <guid isPermaLink="true">http://yongil.net/unity/2015/04/23/Unity-Special-Folder-Names-in-your-Assets-Folder.html</guid>
        
        <category>yongil</category>
        
        
        <category>unity</category>
        
      </item>
    
      <item>
        <title>용일이의 개발/번역 블로그</title>
        <description>&lt;p&gt;저는 인디 게임 개발자입니다. 이 블로그는 프로그래밍 및 게임 개발과 관련된 글들을 쓰거나, 또는 좋은 해외 글들을 번역하려고 만든 블로그입니다.&lt;/p&gt;

&lt;p&gt;직접 쓰는 글들은 주로 게임을 개발하면서 겪는 에피소드나 기술적인 이슈들을 대해서 적어 볼까 합니다. 그리고 지금 개발 중인 게임에 대한 글들도 종종 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;번역은 제가 영어를 잘해서가 아니라 나중에 다시 볼 때 영어보다 한글로 읽는게 훨씬 편하기 때문에 다시 보겠다 싶은 글들이 있으면 저 혼자 번역해 놓곤 했습니다. 혼자 보기 아깝다는 생각이 들어 기왕 번역하는거 함께 공유하면 좋을 것 같아 한번 올려 볼려고 합니다.&lt;/p&gt;

</description>
        <pubDate>Thu, 05 Mar 2015 11:02:41 +0000</pubDate>
        <link>http://yongil.net/etc/2015/03/05/first-post.html</link>
        <guid isPermaLink="true">http://yongil.net/etc/2015/03/05/first-post.html</guid>
        
        <category>yongil</category>
        
        
        <category>etc</category>
        
      </item>
    
  </channel>
</rss>
