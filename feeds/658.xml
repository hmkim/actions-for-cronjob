<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://dongjunlee.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dongjunlee.github.io/" rel="alternate" type="text/html" /><updated>2019-03-24T16:03:33+00:00</updated><id>https://dongjunlee.github.io/feed.xml</id><title type="html">Dongjun Lee</title><subtitle>A page about resume and project post</subtitle><entry><title type="html">Personal Assistant Kino Part 4 - Smart Feed</title><link href="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_4_Smart_Feed/" rel="alternate" type="text/html" title="Personal Assistant Kino Part 4 - Smart Feed" /><published>2018-09-03T10:00:00+00:00</published><updated>2018-09-03T10:00:00+00:00</updated><id>https://dongjunlee.github.io/Personal_Assistant_Kino_Part_4_Smart_Feed</id><content type="html" xml:base="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_4_Smart_Feed/">&lt;h1 id=&quot;personal-assistant-kino-part-4---smart-feed&quot;&gt;Personal Assistant Kino Part 4 - Smart Feed&lt;/h1&gt;

&lt;p&gt;Kino 프로젝트는 QS를 통해서 자신에 대해서 알고, 불필요한 일들을 자동화시키고 삶의 질을 증진시키기 위한 프로젝트 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/quantified_self_logo_2x.gif&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt;출처 : http://quantifiedself.com/&lt;/figcaption&gt;

&lt;p&gt;지금까지의 시리즈&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dongjunlee.github.io/Personal_Assistant_Kino_Part_1_Overview/&quot;&gt;Personal Assistant Kino Part 1 - Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dongjunlee.github.io/Personal_Assistant_Kino_Part_2_Skill_and_Scheduler/&quot;&gt;Personal Assistant Kino Part 2 - Skill &amp;amp; Scheduller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dongjunlee.github.io/Personal_Assistant_Kino_Part_3_T3/&quot;&gt;Personal Assistant Kino Part 3 - T3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저번 편에서 Kino의 T3, Task들에 대해서 자동으로 기록하고, 리포팅도 해주는 Task Master 로서의 기능을 살펴보았습니다. 이번 편에는 제가 애용하고 있는 또 하나의 기능. Feed &amp;amp; Pocket 에 대해서 다뤄보고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;rss-feed&quot;&gt;RSS Feed&lt;/h2&gt;

&lt;p&gt;RSS Feed는 많은 웹사이트에서 제공하는 RSS를 사용해서 새로운 Article이 등록 되었을 때, 알림을 받을 수 있는 기능을 말합니다. 여기서 잠시 RSS에 대해서 알고 넘어가겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RSS(Rich Site Summary)는 뉴스나 블로그 사이트에서 주로 사용하는 콘텐츠 표현 방식이다. 웹 사이트 관리자는 RSS 형식으로 웹 사이트 내용을 보여 준다. 이 정보를 받는 사람은 다른 형식으로 이용할 수 있다.RSS 리더에는 웹기반형과 설치형이 있다. 웹기반형 리더는 간단한 계정등록으로 어디에서든 이용할 수 있다는 장점을 가지고 있다. - 위키백과 RSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기본적으로 많은 웹사이트들이 RSS를 제공하고 있습니다. 그리고 이것을 이용하는 서비스들도 많이 있지요. 그 중 하나가 &lt;a href=&quot;https://feedly.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Feedly&lt;/code&gt;&lt;/a&gt; 라는 서비스 입니다. 자주 들어가서 보는 사이트들을 등록해두면, 편하게 새로운 글들을 볼 수 있습니다. 저는 이 서비스를 잘 사용하고 있었지만, 제가 원하는 기능들을 전부 지원하고 있지는 않았습니다.&lt;/p&gt;

&lt;h2 id=&quot;pocket&quot;&gt;Pocket&lt;/h2&gt;

&lt;p&gt;그리고 제가 애용하는 또 하나의 서비스는 &lt;a href=&quot;https://getpocket.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pocket&lt;/code&gt;&lt;/a&gt; 입니다. 이 서비스가 하는 일은 아주 간단합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you find something you want to view later, put it in Pocket.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;무언가 나중에 읽고 싶은 Article이 생기면, Pocket 에 넣고 아무때나 편하게 보면 되는 것이죠. 저는 유심히 읽고 싶은 Article에 대해서는 Pocket에 저장을 하곤 합니다. 그리고 읽다가 정말 좋은 글이면 Favorite로 옮겨놓곤 하죠.&lt;/p&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;smart-feed&quot;&gt;Smart Feed&lt;/h2&gt;

&lt;p&gt;저는 이렇게 새로운 글들을 훑어보고, 관심있는 글들을 Pocket에 저장하고, 읽다가 좋다고 느껴지는 글을 Favorite로 옮기는 저의 패턴을 자동화하고 싶었습니다. 그래서 생각하고 만들게 된 기능이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Smart Feed&lt;/code&gt; 입니다.&lt;/p&gt;

&lt;p&gt;먼저 이 기능에 필요한 것은 RSS 주소들 입니다. 그래야 여기서 RSS를 읽고 새로운 글이 나오면 저장을 하던 알림을 주던 할 수 있겠죠. 그래서 만들게 된 &lt;a href=&quot;https://github.com/DongjunLee/awesome-feeds&quot;&gt;awesome-feeds&lt;/a&gt; Repository 입니다. 자주 보는 웹사이트들의 RSS를 Git으로 관리를 하면 편할 것 같기도 하고, 여러 좋은 RSS 주소를 가지고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;awesome&lt;/code&gt; 시리즈로 만들고 싶었습니다.&lt;/p&gt;

&lt;p&gt;이제 RSS가 준비 되었으니, 최신 글이 등록되면 알림을 주면 됩니다!&lt;br /&gt;
여기에서는 &lt;a href=&quot;https://github.com/kurtmckee/feedparser&quot;&gt;feedparser&lt;/a&gt;를 사용했습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedparser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updated_parsed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# get Latest Feed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;noti_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;previous_update_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e_updated_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updated_parsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_updated_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous_update_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;noti_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__make_entry_tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스케쥴 기능은 &lt;a href=&quot;./Personal_Assistant_Kino_Part_2_Skill_and_Scheduler.md&quot;&gt;2편 Skill &amp;amp; Scheduller&lt;/a&gt; 에서 다룬 것처럼 지정할 수 있습니다. 매분마다 Feed를 새로 확인하는 것은 과부하가 크기 때문에, 제가 테스트를 해봤을 때는 20분 정도의 interval이면 충분하다고 느껴졌습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__excute_feed_schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__run_threaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function_runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;repeat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;func_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;feed_notify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;day_of_week&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;not_holiday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Kino가 최신 RSS Feed 들을 바로바로 알려주고 있습니다. 지금도 유용하기는 하지만, 여기서 더 나아가 만들고 싶은 기능이 있었습니다. 제가 무조건 Pocket에 저장을 하는 이미 신뢰받고 있는 웹사이트들은 바로 자동으로 저장을 하는 것!&lt;/p&gt;

&lt;p&gt;이것 역시 Pocket 을 연동하고, 간단한 Classification 알고리즘이면 똑똑하게 만들 수 있습니다. 기계학습에서 가장 중요한 것은 Data 입니다. 이런 데이터는 Log들을 이용하면 간단히 만들 수 있습니다. 먼저 Feed 기능에서 알림을 주는 모든 글을 전체 data로 볼 수 있습니다. 이 중에서 Pocket에 저장되는 글만 label 값을 1로 주면, 자연스럽게 전체 데이터들이 관심있는 글 / 관심 없는 글로 나뉘게 됩니다. 여기에 웹사이트의 이름까지 정보로 준다면, 간단한 &lt;strong&gt;Decision Tree&lt;/strong&gt;를 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/CART_tree_titanic_survivors_KOR.png/700px-CART_tree_titanic_survivors_KOR.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt;출처: 위키백과&lt;/figcaption&gt;

&lt;p&gt;예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;Google AI Blog&lt;/code&gt; 웹사이트에서 새로운 글이 등록 되었을 때, 제가 그 동안 여기서 봤던 글이 총 5개이고, 그 중 4개를 Pocket에 저장했다면, 새로운 글도 관심을 가질만한 글이라고 보는 것이죠.&lt;/p&gt;

&lt;p&gt;Decision Tree는 &lt;code class=&quot;highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt; 을 이용하면 아주 간단하게 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeedClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;train_X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_X&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DecisionTreeClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Training&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeedDataLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE_LABEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;online-learning&quot;&gt;Online Learning&lt;/h3&gt;

&lt;p&gt;다음으로 중요한 것은, &lt;strong&gt;online learning&lt;/strong&gt; 입니다. 제가 Pocket에 넣는 Feed들은 그때그때 달라지게 됩니다. 그에 맞춰서 모델 또한 이러한 변화를 감지하고 최신의 정보를 가지고 판단을 해야합니다. 이때 사용되는 방법이 online learning 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;지속적으로 새로운 데이터를 모형에 적용해 모형이 항상 최신의 상태로 유지되기 하는 방식&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;키노의 Smart Feed는 이 방식을 통해서, 더 똑똑해지고 있습니다. online learning은 하나의 싸이클을 만들어주는 것으로 가능해집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/smart_feed_circle.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Logging: 알람을 받고 있는 Feed의 모든 정보들, 그 중에서 Pocket에 저장한 Feed들 정보&lt;/li&gt;
  &lt;li&gt;Data Processing: Log를 파싱하여 카테고리, 제목, 날짜, 링크 등의 정보로 가공하고, 라벨 또한 추가해줍니다. (0: Pocket에 추가하지 않음 / 1: Pocket에 추가)&lt;/li&gt;
  &lt;li&gt;Model: 준비된 데이터를 모델에 Fit 시킵니다. (Training)&lt;/li&gt;
  &lt;li&gt;Predict: 훈련된 모델을 기반으로 새로운 Feed를 보고 Pocket에 저장할지 말지 판단합니다. 그리고 이때 모델이 잘못 내린 판단에 대해서 Feedback을 제공하여 올바른 라벨이 저장되도록 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서 실시간으로 학습하는 것이 부담이 된다면, 하루에 한번 새로 학습시키는 것도 방법이 될 수 있을 것 입니다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;이번에는 아주 간단한 기능이지만, 정말 유용한 Smart Feed 기능을 살펴보았습니다. 현재는 단순하게 Count를 기반으로 하고 있기 때문에 좀 더 정교한 예측을 하지는 못 합니다. 추후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Text Classification&lt;/code&gt; 문제로서 제목이나 소개글을 통해서 제가 관심을 가질만 한 글인지 예측하도록 만들 생각입니다. 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Text Summarization&lt;/code&gt; 문제로 다가선다면, 바쁜 저를 위해서 요점만 쏙쏙 정리해줄 수도 있을 것 입니다. 이렇게 Smart Feed 기능의 발전가능성은 열려있다고 생각이 듭니다. 데이터를 많이 모아서, 얼른 Deep Learning 모델로 교체를 해야겠네요!&lt;/p&gt;

&lt;p&gt;모든 코드는 &lt;a href=&quot;https://github.com/DongjunLee/kino-bot&quot;&gt;여기서&lt;/a&gt; 확인하실 수 있습니다.&lt;br /&gt;
Kino를 더욱 똑똑하게 만들도록 도와주시는 분들은 언제든 환영입니다^^&lt;/p&gt;</content><author><name>dongjun</name></author><category term="project" /><category term="slack bot" /><category term="quantified self" /><category term="chatbot" /><category term="personal assistant" /><summary type="html">Personal Assistant Kino Part 4 - Smart Feed</summary></entry><entry><title type="html">Personal Assistant Kino Part 3 - T3</title><link href="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_3_T3/" rel="alternate" type="text/html" title="Personal Assistant Kino Part 3 - T3" /><published>2017-10-15T23:30:00+00:00</published><updated>2017-10-15T23:30:00+00:00</updated><id>https://dongjunlee.github.io/Personal_Assistant_Kino_Part_3_T3</id><content type="html" xml:base="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_3_T3/">&lt;h1 id=&quot;personal-assistant-kino-part-3---t3&quot;&gt;Personal Assistant Kino Part 3 - T3.&lt;/h1&gt;

&lt;p&gt;Kino 프로젝트는 QS를 통해서 자신에 대해서 알고, 불필요한 일들을 자동화시키고 삶의 질을 증진시키기 위한 프로젝트 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/quantified_self_logo_2x.gif&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt;출처 : http://quantifiedself.com/&lt;/figcaption&gt;

&lt;p&gt;저번 편인 &lt;a href=&quot;https://dongjunlee.github.io/Personal_Assistant_Kino_Part_2_Skill_and_Scheduler/&quot;&gt;Personal Assistant Kino Part 2 - Skill &amp;amp; Scheduler&lt;/a&gt; 은 Kino가 내가 원하는 대로 돌아가도록 준비하는 과정이였습니다. 이제 이 프로젝트의 목표인 Quantified Self를 다루려고 합니다. 나 자신에 대한 데이터를 손쉽게 모으고, 차트를 보며 피드백을 나 자신에게 주고, 이를 통해 삶의 질을 증진시키는 과정을 말이지요.&lt;/p&gt;

&lt;h2 id=&quot;t3--task-master&quot;&gt;T3 = Task Master&lt;/h2&gt;

&lt;p&gt;오늘 다루려는 이야기는 Task에 관한 이야기입니다. 저는 &lt;a href=&quot;https://ko.todoist.com/&quot;&gt;Todoist&lt;/a&gt;를 굉장히 애용하고 있습니다. Premium 기능으로 업그레이드해서 사용할 정도로 말이죠. 모바일, 데스크탑 전부 사용할 수 있는 app이 있어서 언제 어디서든 간편하게 To do list를 관리할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;저는 여기서 더 나아가 나는 작업들을 진행할 때, 시간이 얼마나 걸리는지.. 그리고 이 작업에 대해서는 얼마나 집중을 했는지, 하루의 시간을 어떻게 보냈는지 알고 싶었습니다.&lt;/p&gt;

&lt;p&gt;제가 원하는 것들을 충족하기 위해서는 Todoist를 사용하는 것만으로는 부족했습니다. 그래서 필요한 서비스들을 찾아보게 되었습니다. &lt;strong&gt;시간 측정&lt;/strong&gt;에는 &lt;a href=&quot;https://www.toggl.com/&quot;&gt;Toggl&lt;/a&gt;이 가장 잘 만들어진 서비스였고, 작업을 시작하고, 끝내는 것을 가장 쉽게 다룰 수 있는 것은 &lt;a href=&quot;https://trello.com&quot;&gt;Trello&lt;/a&gt;의 &lt;strong&gt;칸반 보드&lt;/strong&gt;(팀으로 일하면서 Trello의 칸반보드를 사용하고 있음)를 통해서 Task, Doing, Done 의 리스트로 관리 하는 것이라는 결론을 낼 수 있었습니다.&lt;/p&gt;

&lt;p&gt;그렇게해서 만들어진 것이 &lt;strong&gt;T3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;즉, T3 = Todoist + Toggl + Trello 를 통한 Task 간편 관리 기능입니다.&lt;br /&gt;
아래는 T3에 사용되는 &lt;strong&gt;Skill&lt;/strong&gt;들 입니다.&lt;/p&gt;

&lt;h3 id=&quot;todoist&quot;&gt;Todoist&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;🌆 today_briefing : Todoist에 등록된 Task들을 브리핑합니다.&lt;/li&gt;
  &lt;li&gt;📃 todoist_remain : 남은 작업들에 대해서 안내합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;toggl&quot;&gt;Toggl&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;⌚️ toggl_timer : Toggl Timer 시작 혹은 정지.&lt;/li&gt;
  &lt;li&gt;🔔 toggl_checker : 30분 마다 시간 체크. (100분 이상 작업 시, 휴식 추천)&lt;/li&gt;
  &lt;li&gt;📊 toggl_report : Toggl task 리포트.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;trello&quot;&gt;Trello&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;📋 kanban_init : Trello 보드를 초기화 합니다.&lt;/li&gt;
  &lt;li&gt;📋 kanban_sync : Todoist의 Task들과 Trello 보드의 싱크를 맞춥니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;question&quot;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;✍️ attention_question : 작업 후, 집중도 물어보기 (100점 만점)&lt;/li&gt;
  &lt;li&gt;✍️ attention_report : 집중도 리포트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러면 저의 하루를 예시로 T3가 어떻게 돌아가는지 보시죠 :D&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;해가 뜨고.. 아침이 됩니다. 알람이 울리고, 일어나서 Slack에 접속하면 Kino가 아침 인사를 건냅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-good-morning.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; Kino의 아침인사 &lt;/figcaption&gt;

&lt;p&gt;이떄, 하루의 날씨를 알려주고 Trello 보드를 초기화 + Todoist와 싱크(kanban_init + kanban_sync)를 맞춥니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-kanban-board.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; Todoist와 Sync가 맞춰진 Trello Board &lt;/figcaption&gt;

&lt;p&gt;오늘의 날씨를 확인하고, 출근할 준비를 하다가.. 8시가 됩니다.  &lt;br /&gt;
8시에는 Kino가 하루에 어떤 일들이 있는지 브리핑을 해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-today-briefing.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; today_briefing Skill &lt;/figcaption&gt;

&lt;p&gt;아침시간도 허투루 보낼 수 없죠. 지하철에서 책을 읽을 준비를 합니다.&lt;br /&gt;
책을 읽기 전에 Trello를 키고, Task 리스트에 있는 Book 카드를 Doing으로 옮깁니다.&lt;br /&gt;
Kino가 타이머 시작을 알려주네요!&lt;/p&gt;

&lt;p&gt;한시간 정도 지나니, 환승할 역에 도착해가네요.&lt;br /&gt;
다시 Trello를 키고 Doing에 있던 작업을 Done으로 옮깁니다.
Kino가 집중도를 물어보네요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-toggle-start-and.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; togger_timer &amp;amp; attention_question Skill &lt;/figcaption&gt;

&lt;p&gt;조금 졸면서 책을 봤던지라.. 86점을 주었어요 ㅎㅎ&lt;br /&gt;
Kino가 Todoist 에 있는 작업도 완료처리를 해주었네요 기특한 녀석.&lt;/p&gt;

&lt;p&gt;그렇게 회사에 도착하고, 회사에서도 작업을 하면서 Trello의 카드들을 옮겨주며 집중해서 일을 착착 진행합니다.&lt;/p&gt;

&lt;p&gt;오후에 너무 일에 집중했더니.. 1시간 반은 넘게 계속해서 일하고 있었네요.&lt;br /&gt;
아, Kino가 휴식을 추천하네요. 잠시 쉬어야겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-timer-check.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; toggl_checker Skill &lt;/figcaption&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;어느덧 저녁 7시 퇴근할 시간이네요. 집에 도착해서 하루를 마무리하고 있던 중..&lt;br /&gt;
저녁 10시에 키노가 남아있던 일들을 알려줍니다. 아, 까먹고 있던 작업이 있었네요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-todoist-remain.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; todoist_remain Skill &lt;/figcaption&gt;

&lt;p&gt;그렇게 11시가 되고.. Kino가 하루 마무리를 해주네요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-today-summary.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; todoist_feedback Skill &lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-attention-report.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; attention_report Skill &lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/kino-toggl-report.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt; toggl_report Skill &lt;/figcaption&gt;

&lt;p&gt;Todoist에 등록되어 있는 일들도 거의 처리했고, 집중도 잘 했습니다! 후후&lt;br /&gt;
차트를 보니까 하루를 알차게 잘 보냈네요! 내일을 Deep Learning 실습으로 프로젝트를 구현할 생각을 하며, Todoist에 Deep Learning 프로젝트 Task들을 추가합니다. 내일도 화이팅!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이상이 제가 하루의 Task를 관리하는 시나리오입니다. &lt;br /&gt;
제가 하는 것이란 Trello의 카드를 옮기는 것 뿐이에요. 참 간단하죠?&lt;/p&gt;

&lt;p&gt;Quantified Self에서 가장 중요한 것은 데이터를 손쉽게 모을 수 있어야하고, 한눈에 볼 수 있는 차트를 제공함으로서 간편하게 자기자신에게 피드백을 줄 수 있어야 한다는 것 입니다. 그런 의미로 T3는 굉장히 간편하고 유용한 기능이죠! 그리고 Task 관련 데이터들을 Toggl에 쌓여있으므로, 언제든 데이터를 받을 수 있고 더 복잡한 분석 또한 할 수 있을 것 입니다.&lt;/p&gt;

&lt;p&gt;마지막으로 개발적인 측면에 대해서 간략하게 다루고 마무리하려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;develop&quot;&gt;Develop&lt;/h2&gt;

&lt;p&gt;Skill들을 Python으로 wrapping 되어있는 package 들을 사용하면 간편하게 내가 원하는 커스텀 스킬들을 만들 수 있습니다. 각각 서비스에 필요한 TOKEN, ACCESS_KEY 등을 준비하고 연결하면 손쉽게 끝낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;그 외에 작업이 필요한 부분은 Webhook입니다. IFTTT에서도 Trello를 연결해서 사용할 수 있지만, 기본적으로 IFTTT는 실시간이 아닙니다. 하지만 Trello로 Task들을 관리하려면 실시간으로 반응을 해야합니다. 작업을 시작한다고 Doing에 올린지 10분이나 지나서 Toggl Timer가 작동하는 것은 너무나도 불편하니까요.&lt;/p&gt;

&lt;p&gt;Trello에서는 Webhook를 추가할 수 있도록 지원하고 있습니다. 이 Webhook을 처리하려면 callback을 처리하는 간단한 서버가 있어야 합니다. 이 callback을 처리하기 위해서 Server를 빌리는 것은 너무 아깝습니다. 이럴때는 &lt;a href=&quot;https://serverless.com/&quot;&gt;Serverless Framework&lt;/a&gt;를 사용해서 간단하게 처리할 수 있습니다. AWS에 대한 간략한 설정을 마치고, callback에 대한 함수를 정의한다음 배포를 하면 AWS API Gateway + Lambda가 자동설정 되는 것을 보실 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kanban_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;createCard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_create_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;updateCard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_update_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kanban_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BREAK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DONE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kanban_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_to_kino&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DongjunLee/kino-bot/tree/master/kino-webhook&quot;&gt;kino-webhook&lt;/a&gt; 여기에서 &lt;strong&gt;kanban_webhook&lt;/strong&gt;이 구현되어 있습니다.&lt;/p&gt;

&lt;p&gt;이제 Webhook을 다 정의했으니, 이 Webhook을 Kino가 처리하면 모든 문제는 끝이 납니다! 아래는 카드 이동에 따라서 Skill들의 연결을 정리해놓은 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;KANBAN_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toggl_manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TogglManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'msg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;toggl_manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;doing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BREAK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;toggl_manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DONE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;toggl_manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Todoist 연결되어 있음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Doing : Toggl Timer 시작&lt;/li&gt;
  &lt;li&gt;Done : Toggl Timer 정지 &amp;amp; Todoist 작업 완료&lt;/li&gt;
  &lt;li&gt;Break : Toggl Timer 정지&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;이번 T3에서는 여러가지 서비스들과 Kino를 전부 연결해서 작업을 간편하게 관리하고, 차트를 제공하는 T3 기능에 대해서 살펴보았습니다. 이렇게 하루하루 Task에 대한 데이터들을 모아서 내가 어떤 작업에 잘 집중하는지, 어느 시간대에 집중을 잘 하는지.. 이런 여러가지 분석을 할 수 있을 것 입니다. 저도 데이터를 모으는 중이라, 나중에 꼭 분석하려고 합니다. :D&lt;/p&gt;

&lt;p&gt;모든 코드는 &lt;a href=&quot;https://github.com/DongjunLee/kino-bot&quot;&gt;여기서&lt;/a&gt; 확인하실 수 있습니다.&lt;br /&gt;
Kino를 더욱 똑똑하게 만들도록 도와주시는 분들은 언제든 환영입니다^^&lt;/p&gt;

&lt;p&gt;다음에는 최신 Feed를 바로바로 알려주고, 자동으로 모은 데이터를 통해서 분류까지 알아서 하는 &lt;strong&gt;Feed NC&lt;/strong&gt; 기능에 대해서 알아보겠습니다.&lt;/p&gt;</content><author><name>dongjun</name></author><category term="project" /><category term="slack bot" /><category term="quantified self" /><category term="chatbot" /><category term="personal assistant" /><summary type="html">Personal Assistant Kino Part 3 - T3.</summary></entry><entry><title type="html">Personal Assistant Kino Part 2 - Skill &amp;amp; Scheduler.</title><link href="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_2_Skill_and_Scheduler/" rel="alternate" type="text/html" title="Personal Assistant Kino Part 2 - Skill &amp; Scheduler." /><published>2017-10-08T23:30:00+00:00</published><updated>2017-10-08T23:30:00+00:00</updated><id>https://dongjunlee.github.io/Personal_Assistant_Kino_Part_2_Skill_and_Scheduler</id><content type="html" xml:base="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_2_Skill_and_Scheduler/">&lt;h1 id=&quot;personal-assistant-kino-part-2---skill--scheduler&quot;&gt;Personal Assistant Kino Part 2 - Skill &amp;amp; Scheduler.&lt;/h1&gt;

&lt;p&gt;Kino 프로젝트는 QS를 통해서 자신에 대해서 알고, 불필요한 일들을 자동화시키고 삶의 질을 증진시키기 위한 프로젝트 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/quantified_self_logo_2x.gif&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;출처 : http://quantifiedself.com/&lt;/figcaption&gt;

&lt;h2 id=&quot;skill--scheduler&quot;&gt;Skill &amp;amp; Scheduler&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dongjunlee.github.io/Personal_Assistant_Kino_Part_1_Overview/&quot;&gt;Kino에 대해서 간단히 소개를 했던 1편&lt;/a&gt;에 이어서, 내부의 핵심이 되는 Skill과 Scheduler 기능에 대해서 이야기하고자 합니다. 이 두가지 기능은 다음과 같은 생각들을 하다가 나오게 되었습니다.&lt;/p&gt;

&lt;p&gt;어떻게 하면 나에게 맞는 똑똑한 개인용 봇을 만들 수 있을까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://ifttt.com&quot;&gt;IFTTT&lt;/a&gt; 같은 서비스 처럼 내가 사용하는 서비스들을 자유롭게 Customizing 해서 사용한다면 좋겠다.&lt;/li&gt;
  &lt;li&gt;그렇다면 이렇게 만든 함수들을 Skill로 명명하고 관리해야겠다.&lt;/li&gt;
  &lt;li&gt;마지막으로 내가 원하는 시간에 이 Skill이 돌아가도록 할 수 있다면?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 Skill과 Scheduler 를 조금 더 세부적으로 보면 이렇습니다. &lt;br /&gt;
외부 서비스의 API를 wrapping해서 custom한 function을 만든다. 그리고 crontab 기능을 이용해서 정해진 시간에 그 기능이 돌아가도록 한다.&lt;/p&gt;

&lt;p&gt;이렇게 2가지 기능에 대한 세부적인 내용들이 나오고, 어떻게 구현하는 것이 좋을지 간단한 설계 후 작업을 진행하였습니다. 저는 이 kino 프로젝트를 진행하면서 한가지 중요하게 생각했던 부분이 있습니다. ‘&lt;strong&gt;Python 3.6&lt;/strong&gt;을 이용해서 새롭게 나온 Feature들을 최대한 활용하자.’ 그래서 구현에 대한 설명에도 새로운 Feature들이 포함되어 있습니다. 이 글을 읽으시는 독자 분들이 Python 3.6의 매력을 느낀다면 좋겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;skill&quot;&gt;Skill&lt;/h3&gt;

&lt;p&gt;Skill은 계속해서 추가될 수 있기 때문에, &lt;strong&gt;프로젝트 구조&lt;/strong&gt;에서부터 나누는 것이 필요했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- functions.py : skills에 있는 함수들을 등록하는 파일
- skills : Skill들을 모아놓는 디렉토리
	- weather.py : 날씨 skill
	- todoist.py : Todoist skill
	- ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로는 ‘어떻게 Skill을 사용할 것 인가’ 입니다.&lt;br /&gt;
저는 처음에 간단한 Keyword 매칭 만으로 Skill 을 사용할 생각이였으나.. 모든 Keyword 들을 다 입력해 놓는 것은 좋은 방법이 아니였습니다. Keyword 들을 입력하는 것도 큰 수고가 필요하기 때문에, 조금 더 간결하게 사용할 수 있는 방법을 생각해보았습니다. 그래서 추가된 것이 &lt;strong&gt;disintegrator&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;여기서 간단한 NLP 를 사용합니다. 한글의 경우 &lt;a href=&quot;https://github.com/konlpy/konlpy&quot;&gt;konlpy&lt;/a&gt;가 형태소 분석이나 품사태깅의 기능을 지원합니다. konlpy를 이용해서 하려는 작업은 간단합니다. 문장을 그대로 받아서 Simple하게 만드는 것.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KorDisintegrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ko_twitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert2simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;disintegrated_sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ko_twitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;convert_sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disintegrated_sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Eomi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Josa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'KoreanParticle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Punctuation'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;convert_sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 &lt;a href=&quot;https://www.pycon.kr/2016apac/program/14&quot;&gt;신정규님께서 Python 2016에서 발표하신 프로그램&lt;/a&gt; 참고하였습니다.&lt;br /&gt;
이 KorDisintegrator 를 실제 문장이 통과하면 어떻게 되는지 보시죠!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; disintegrator.convert2simple(sentence=&quot;키노야 날씨 어때?&quot;)
'키노 날씨 어떻다'
&amp;gt;&amp;gt;&amp;gt; disintegrator.convert2simple(sentence=&quot;키노야 날씨 알려줘!&quot;)
'키노 날씨 알다'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 간단한 문장으로 변하게 되고, 이제 키워드를 쓸때 고려하면 되는 문장은 원형을 사용하면 되는 것이죠.&lt;/p&gt;

&lt;p&gt;이제 문제는 Keyword를 어디에 저장할까? 그리고 skill에 필요한 param은 어떻게 관리할까? 였습니다.
처음에는 ‘외부에 새로 파일을 하나 만들어 skill에 대한 정보를 가지고 있도록 할까?’ 였습니다. 음.. 그렇다면 Bot을 시작할 때, Skill들에 대한 정보를 읽어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;skills.json&lt;/code&gt;이라는 파일을 만들면 어떨까? 저는 이 방법이 괜찮다고 생각이 들었고, 여기서 python의 &lt;code class=&quot;highlighter-rouge&quot;&gt;__doc__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;__annotations__&lt;/code&gt;을 이용하게 됩니다.&lt;/p&gt;

&lt;p&gt;아래는 실제 Skill로 사용하고 있는 Code입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    keyword: [&quot;날씨&quot;, &quot;예보&quot;, &quot;weather&quot;, &quot;forecast&quot;]
    description: &quot;Weather forecast&quot;
    icon: &quot;:sun_with_face: &quot;
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timely&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;timely: str&lt;/code&gt; 은 Python 3.6에서 새로 추가된 type annotation 기능입니다.&lt;br /&gt;
여기서 timely의 타입을 입력해놓으면..&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__annotations__&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timely&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__annotations__&lt;/code&gt;를 통해서 필요한 param 정보를 얻어올 수 있습니다. 마찬가지로 __doc__을 이용하면 아래 적혀있는 keyword, description, icon에 대해서 얻어올 수 있습니다. 그래서 이 정보들을 모아서 skills.json 파일을 만들면 Skill 등록은 끝이나게 됩니다.&lt;/p&gt;

&lt;p&gt;다음으로는 Python에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;any()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt;을 사용해서 키워드 매칭 코드를 작성하고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;Regex(정규식)&lt;/code&gt;을 통해서 Skill의 Param을 전달하는 코드를 작성하면!&lt;br /&gt;
아래와 같이 날씨 스킬을 손쉽게 사용할 수 있습니다. 참 쉽죠?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/en/kino-skill-example-en1.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;scheduler&quot;&gt;Scheduler&lt;/h3&gt;

&lt;p&gt;Skill을 이제 추가하고 사용할 수 있는 구조를 정립했으니, scheduler를 만드려고 합니다.
Python에는 &lt;a href=&quot;https://github.com/dbader/schedule&quot;&gt;schedule&lt;/a&gt; 이라는 스케쥴링을 손쉽게 사용할 수 있도록 도와주는 Package가 있습니다.&lt;/p&gt;

&lt;p&gt;아래는 schedule Github페이지에 나와있는 간단한 예제코드입니다. 다른 설명이 필요없이 아주 직관적으로 구성되어있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10:30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wednesday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;13:15&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;schedule Package를 이용하면 제가 작업하면 되는 부분은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;백그라운드에서 스케쥴링을 돌린다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Threading&lt;/strong&gt; 을 사용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동적으로 스케쥴링을 돌리도록 하는 것.
    &lt;ul&gt;
      &lt;li&gt;Python에서 제공하는 built-in funciton인 &lt;strong&gt;getattr&lt;/strong&gt;을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 부분에 대한 자세한 코드를 알고 싶으시다면, &lt;a href=&quot;https://github.com/DongjunLee/kino-bot&quot;&gt;Github 저장소&lt;/a&gt;를 참고해주세요! 다음으로 이 함수대로만 사용하는 것은 조금 제한적인 부분들이 있어서 아래와 같은 조건을 추가하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Between&lt;/strong&gt; : 시간대를 나타냄. schedule에서는 10분 마다, 1시간 마다 이렇게도 조작할 수 있기 때문에 특정 시간대에 10분 마다, 1시간 마다를 가능하게 하도록 하기 위하여 추가하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-read-between.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 제가 원하는 대로 Scheduling을 사용할 수 있는 준비가 되었습니다!
다음으로는 간단하게 자연어로 Scheduling을 등록하고 작업을 진행시킬 수 있으면 되겠네요.&lt;/p&gt;

&lt;p&gt;여기서도 간단한 Keyword 매칭을 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-create-by-ner.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 Scheduling 기능까지 추가를 완료하였습니다!&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;이제 이 기능들이 실제로 어떻게 쓰이는지 같이 보시죠!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-create-job.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-start-job.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 일을 시작하면, 등록된 Scheduling Job 들에 따라서 진행이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-read-schedule.png?raw=true&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;10시 ~ 22시까지 2시간마다 날씨&lt;/li&gt;
  &lt;li&gt;오전 8시 하루 프리핑&lt;/li&gt;
  &lt;li&gt;오후 10시 남은 작업 알려주기 등..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 예시들은 실제로 제가 사용하고 있는 Scheduling Job 들 입니다.&lt;/p&gt;

&lt;p&gt;이 정도면 제법 개인 비서처럼 행동할 수 있을 것 같지 않나요? :D&lt;br /&gt;
이렇게 Kino 는 똑똑해지고 저를 위한 비서가 되고 있습니다!&lt;/p&gt;

&lt;p&gt;다음에는 손쉽게 Todoist에 있는 작업들을, Trello에 카드를 통해 관리하며.. 자동으로 Toggl에 시간 기록까지 되고, 마지막에는 작업 리포트도 받을 수 있는 &lt;strong&gt;T3&lt;/strong&gt; 기능에 대해서 다루도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;모든 코드는 &lt;a href=&quot;https://github.com/DongjunLee/kino-bot&quot;&gt;여기서&lt;/a&gt; 확인하실 수 있습니다.&lt;br /&gt;
Kino를 더욱 똑똑하게 만들도록 도와주시는 분들은 언제든 환영입니다^^&lt;/p&gt;</content><author><name>dongjun</name></author><category term="project" /><category term="slack bot" /><category term="quantified self" /><category term="chatbot" /><category term="personal assistant" /><summary type="html">Personal Assistant Kino Part 2 - Skill &amp;amp; Scheduler.</summary></entry><entry><title type="html">Personal Assistant Kino Part 1 - Overview</title><link href="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_1_Overview/" rel="alternate" type="text/html" title="Personal Assistant Kino Part 1 - Overview" /><published>2017-09-24T22:30:00+00:00</published><updated>2017-09-24T22:30:00+00:00</updated><id>https://dongjunlee.github.io/Personal_Assistant_Kino_Part_1_Overview</id><content type="html" xml:base="https://dongjunlee.github.io/Personal_Assistant_Kino_Part_1_Overview/">&lt;h1 id=&quot;personal-assistant-kino-part-1---overview&quot;&gt;Personal Assistant Kino Part 1 - Overview&lt;/h1&gt;

&lt;p&gt;Kino 프로젝트는 QS를 통해서 자신에 대해서 알고, 불필요한 일들을 자동화시키고 삶의 질을 증진시키기 위한 프로젝트 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/quantified_self_logo_2x.gif&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;출처 : http://quantifiedself.com/&lt;/figcaption&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;최근에 Bot에 대한 글도 많이 읽고.. &lt;a href=&quot;http://humanbrain.in/2016/08/21/slack_bot_for_salady/&quot;&gt;조그만 미니 프로젝트&lt;/a&gt;로 Bot도 개발해보면서, 그 동안 마음 속에 계속해서 자리잡고 있던! 제가 가장 만들어보고 싶던 개인 프로젝트를 진행할 때가 되었구나 생각이 되었습니다.&lt;/p&gt;

&lt;p&gt;그 프로젝트는 바로.. 개인용 비서 Bot을 만드는 프로젝트입니다. 다른 누구도 아닌 오직 나 자신만을 위한 개인 비서를 만들어보자라는 생각은 예전부터 했었고, 그것에 대비하여 &lt;a href=&quot;https://www.toggl.com/&quot;&gt;Toggl&lt;/a&gt; 을 통해서 내가 보내는 시간을 기록하고, &lt;a href=&quot;https://www.rescuetime.com/&quot;&gt;RescueTime&lt;/a&gt; 을 통해서는 어떤 프로그램을 사용하고, 생산성은 어떠한지 기록하고 있었습니다. 그 외에는 &lt;a href=&quot;https://www.pebble.com/&quot;&gt;Pebble Time&lt;/a&gt;을 통해서 걸음걸이와 수면시간 또한 Tracking이 되고 있었습니다. 그리고 &lt;a href=&quot;https://ko.todoist.com/&quot;&gt;Todoist&lt;/a&gt; 를 통해서는 일정관리를 하고 있었습니다. 이렇듯 저에 대한 정보들은 수치화된 데이터가 되어 여기저기 쌓이고 있던 것이죠.&lt;/p&gt;

&lt;p&gt;그래서 이렇게 쌓은 나에 대한 Data를 바탕으로.. 나를 아는 Bot을 만들고 싶다는 생각을 해왔습니다. 물론 위의 서비스들은 대부분 API를 제공하고 있는 상황입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*z5JCczlWSE3NBws3r9wEiA.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-수집-정리&quot;&gt;Data 수집 정리&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.toggl.com/&quot;&gt;Toggl&lt;/a&gt;: 시간을 트래킹하기 편한 앱. 일을 시작하기전에 타이머를 누르고, 일이 끝나면 타이머를 종료해서 내가한 작업들을 기록하는데 많이 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rescuetime.com/&quot;&gt;RescueTime&lt;/a&gt;: 생산성을 관리해주는 툴로서, PC에서 사용한 앱들의 시간을 기록해서 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pebble.com/&quot;&gt;Pebble&lt;/a&gt;: 걸음걸이와 수면시간을 Tracking. Data는 스마트워치 안에 기록되는 시스템으로 보이나.. 간편하게 사용하기에는 어려워 보이네요.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.todoist.com/&quot;&gt;Todoist&lt;/a&gt;: 온라인 작업 관리 및 할일 목록 관리 앱 입니다. 스마트폰, PC, 웹 등.. 다양한 플랫폼을 제공하고 있어서 편하게 사용하고 있습니다.&lt;/li&gt;
  &lt;li&gt;그 외 수면 시간, 행복도, 집중도, 생산성 데이터를 수집하는 App (없을 경우 Bot에 붙여서 만들기)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;bot-platform&quot;&gt;Bot Platform&lt;/h2&gt;

&lt;p&gt;Bot을 개발하기 이전에 Data 수집에 대한 셋팅은 위와 같이 맞춰놓고, 다음으로 무엇으로 Bot 만들 것인가.. 고민을 해보았습니다. 최근에 &lt;a href=&quot;https://www.telegram.org/&quot;&gt;Telegram&lt;/a&gt;, &lt;a href=&quot;https://www.messenger.com/&quot;&gt;Facebook Messenger&lt;/a&gt;, &lt;a href=&quot;https://line.me/ko/&quot;&gt;Line&lt;/a&gt; 등.. 많은 Messaing App 기업들이 Bot API를 공개하고 있지만, 개인용으로 사용하기에는 조금 부적합한 면들이 있었습니다.&lt;/p&gt;

&lt;p&gt;그렇게 알아보던 중, 제가 사용하고 있는 개인용 Slack이 눈에 들어왔습니다. &lt;a href=&quot;https://www.ifttt.com/&quot;&gt;IFTTT&lt;/a&gt;를 연동하여 여러 서비스들에 대한 정보를 Slack에 기록하고 있었고, 개인적인 메모를 하거나 정보를 볼 때 사용하고 있었습니다. 또한 Slack은 굉장히 간단하게 BOT_TOKEN 만 있어도 통신을 주고 받을 수 있고, Slack으로 &lt;a href=&quot;(http://humanbrain.in/2016/08/21/slack_bot_for_salady/)&quot;&gt;Salady Bot&lt;/a&gt;을 만들면서 이미 개발경험을 가지고 있기에 더욱 적합하다고 생각을 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*UTSePYVoJGzKNIzBsmEbMQ.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;출처 : Slack&lt;/figcaption&gt;

&lt;h3 id=&quot;slack의-선정이유&quot;&gt;Slack의 선정이유&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;개인용으로 만들어서 운영하는 Slack이 있다. (개인용으로 사용가능)&lt;/li&gt;
  &lt;li&gt;다른 App들은 Server로 구성하고, Webhook 설정들의 작업들이 필요하지만, Slack은 Token만 있으면 통신이 가능.&lt;/li&gt;
  &lt;li&gt;이미 Slack Bot을 개발해본 경험이 있다.&lt;/li&gt;
  &lt;li&gt;Team용으로 이미 친숙하게 사용하고 있었다.&lt;/li&gt;
  &lt;li&gt;외부 서비스들을 Integration 해서 사용하기 쉽다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;chat-bot&quot;&gt;Chat Bot&lt;/h2&gt;

&lt;p&gt;최근에 Chat Bot이 큰 화두가 되면서, 여러가지 bot에 대한 글을 많이 접하기도 하고 &lt;a href=&quot;https://api.ai/&quot;&gt;api.ai&lt;/a&gt;, &lt;a href=&quot;https://wit.ai/&quot;&gt;wit.ai&lt;/a&gt;, 최근 한국에서는 &lt;a href=&quot;http://amica.ai/&quot;&gt;AMICA.ai&lt;/a&gt;, &lt;a href=&quot;http://www.fluenty.ai/&quot;&gt;fluenty.ai&lt;/a&gt; 등의 프레임워크들도 나오면서 쉽게 Chat Bot을 만들 수 있게 되었고.. 조금 더 대중적이게 되었습니다.&lt;/p&gt;

&lt;p&gt;이러한 Bot 프레임워크를 사용하다보면 Bot의 Flow도 대략적으로 감이 오고, 어떤 방식으로 이루어져있는지 알 수가 있습니다. 대부분의 프레임워크에서는 NLP 엔진을 이용해서 &lt;strong&gt;intent&lt;/strong&gt;, &lt;strong&gt;named entity&lt;/strong&gt;, &lt;strong&gt;sentiment&lt;/strong&gt;, &lt;strong&gt;domain&lt;/strong&gt; 등을 추출하고, 그에 대한 답을 사용자가 입력하여 연결하는 방식으로 진행이 됩니다. 아직은  Short-term 즉, 조금 전에 대화했던 것들을 기억해서 처리하는 것은 잘 해내지만, Long-term 조금 더 오래된 대화의 경우, 그 대화를 기억하고 말을 이어가는 것은 훨씬 어렵습니다. 그래서 위의 bot 프레임워크들도 long-term까지 지원하는 것을 목표로 개발하고 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 제가 생각하기에 봇은 크게 3가지 종류의 봇으로 구분이 된다고 생각을 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Basic Chatbot&lt;/strong&gt;: Bot이 그저 하나의 &lt;strong&gt;UX&lt;/strong&gt;인 경우입니다. 정해진 입력에 따라서 정해진 응답을 하는 경우입니다. 보통 정규화 표현식으로 입력을 처리하게 되고, 여기서는 NLP가 들어가지 않습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Smart Chatbot&lt;/strong&gt;: 이 단계부터는 NLP가 적용된 단계입니다. 각종 Bot framework에서 제공하는 기능처럼, intent, named entity, sentiment, domain 등을 추출하여 그에 따른 응답을 처리합니다. 여기서는 Dialog manager가 대화를 파악하고 관리하며, 자연스러운 응답을 생성하는 NLG까지 포함됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A.I Chatbot&lt;/strong&gt;: 이 단계의 Bot은 강 인공지능을 의미합니다. 아직은 어떤 모습으로 나타날지 상상할 수 없는 모습이기도 합니다. Deep Learning + Reinforce Learning 가 합쳐지면서 조금씩 조금씩 이 단계를 향해 나아가고 있다고 생각합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서 제가 만들고자 하는 Bot의 목표는 우선.. &lt;strong&gt;Smart Chabot&lt;/strong&gt; 입니다. 하지만 문제는 Data가 어느정도 필요하다는 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 보통 Basic Chatbot부터 시작을 하여 Data를 모으는 것이 일반적 입니다. 그리고 일정량의 Data가 모인 다음에 기존의 로직을 바탕으로 학습을 하는 Imitation Learning을 통해 자동화를 시킬 수 있습니다. 그 후로 더 데이터를 모으고, 기준이 생긴다면 그 것에 맞춰서 조금 더 똑똑하게 행동하도록 만들 수 있을 것 입니다.&lt;/p&gt;

&lt;p&gt;저는 이와 같은 장기프로젝트에 대한 계획을 세우면서, 이 과정에서 필요한 기능들이 무엇인지 떠올랐습니다.&lt;br /&gt;
 우선, 개인용 봇으로 사용하는데, 괜히 어렵게 말을 알아들을 필요가 없다는 것 입니다. 최소한의 자연어 처리를 하고 간단한 키워드 매칭을 통해서 의도를 파악하는 것.
 다음으로 새로운 기능들을 다 만들 필요없이 기존의 서비스들을 사용해서 기능들을 만들 것.
 마지막으로 나에게 필요한 기능을 내가 지정한 시간에 실행할 수 있는 것.&lt;/p&gt;

&lt;p&gt;그렇게 여러가지 서비스들을 Kino의 Skill 들로 등록해서 사용하고, 간단한 자연어 처리로 간단하게 Job을 등록해서 내가 원하는 시간에 그 일을 하도록 만들었습니다 (예, 2시간 마다 날씨 알려줘, 오전 8시에 하루 브리핑 등…) 아래는 지금까지 Kino의 중간 결과물 입니다.&lt;/p&gt;

&lt;p&gt;다음에는 Skill과 Scheduling 에 대해서 조금 더 세부적인 내용들을 다뤄보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;kino&quot;&gt;Kino&lt;/h2&gt;

&lt;p&gt;그렇게 만들기 시작한 저만의 개인 비서 Kino. 아래는 중간 결과물을 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/ko/kino-skill-example1.png?raw=true&quot; alt=&quot;skill_example1&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Weather Skill&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/blob/master/images/en/kino-skill-example-en2.png?raw=true&quot; alt=&quot;skill_example2&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Kino는 아침에 스케쥴을 알려줍니다&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/intro_and_guide.png&quot; alt=&quot;guide&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;인트로 &amp;amp; 가이드&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/ko/kino-functions.jpeg&quot; alt=&quot;functions&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;사용할 수 있는 Skill들&lt;/figcaption&gt;</content><author><name>dongjun</name></author><category term="project" /><category term="slack bot" /><category term="quantified self" /><category term="chatbot" /><category term="personal assistant" /><summary type="html">Personal Assistant Kino Part 1 - Overview</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dongjunlee.github.io/assets/images/kino_front.png" /></entry><entry><title type="html">Data and Machine Learning Newsletter</title><link href="https://dongjunlee.github.io/data_and_ml_newsletter/" rel="alternate" type="text/html" title="Data and Machine Learning Newsletter" /><published>2017-02-04T10:10:00+00:00</published><updated>2017-02-04T10:10:00+00:00</updated><id>https://dongjunlee.github.io/data_and_ml_newsletter</id><content type="html" xml:base="https://dongjunlee.github.io/data_and_ml_newsletter/">&lt;h1 id=&quot;data-and-machine-learning-newsletter&quot;&gt;Data and Machine Learning Newsletter&lt;/h1&gt;

&lt;p&gt;데이터와 머신러닝, 딥러닝에 대해서 꾸준하게 공부를 하면서 자연스럽게 한주마다 나오는 관련 뉴스레터를 구독하는 경우가 많아졌습니다. 그래서 오늘은 이러한 뉴스레터 들을 정리해보고자 합니다.&lt;br /&gt;
 카테고리는 Data Science, Machine Learninig 으로 나누지만, 비슷한 내용을 포함하는 경우가 많습니다.&lt;/p&gt;

&lt;h2 id=&quot;data-science&quot;&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dataelixir.com/&quot;&gt;Data Elixir&lt;/a&gt; : Data Elixir is a weekly newsletter of curated data science news and resources from around the web.
Free for data lovers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.datascienceweekly.org/&quot;&gt;Data Science Weekly&lt;/a&gt; : A free weekly newsletter featuring curated news, articles and jobs related to Data Science.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;machine-learning&quot;&gt;Machine Learning&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.deeplearningweekly.com/&quot;&gt;Deep Learning Weekly&lt;/a&gt; : Get a hand-curated digest of deep learning industry news, open source code, tutorials, papers and more right to your inbox.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mlweekly.com/&quot;&gt;Machine Learning Weekly&lt;/a&gt; : Machine Learning Weekly is a hand-curated newsletter (7.1k subscribers) about machine learning and deep learning, curated by @alirezasmr and @datarade.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oreilly.com/ai/newsletter.html&quot;&gt;O’Reilly Artificial Intelligence Newsletter&lt;/a&gt; : Receive weekly AI news, insights from industry insiders, and exclusive deals and offers. (비즈니스 측면에 더 집중한 뉴스테러)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getrevue.co/profile/wildml?utm_campaign=Issue&amp;amp;utm_content=profilename&amp;amp;utm_medium=email&amp;amp;utm_source=The+Wild+Week+in+AI&quot;&gt;The Wild Week in AI&lt;/a&gt;: The Wild Week in AI is a weekly AI &amp;amp; Deep Learning newsletter curated by @dennybritz. (WidlML 블로그도 운영하는 dennybritz)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;etc&quot;&gt;Etc&lt;/h2&gt;

&lt;p&gt;데이터에 관련된 뉴스레터는 아니지만 즐겨보고 있는 뉴스레터 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.acolyer.org/&quot;&gt;the morning papaer&lt;/a&gt;: 
an interesting/influential/important paper from the world of CS every weekday morning, as selected by Adrian Colyr (뉴스레터는 아니지만..! 하루에 하나씩 CS 논문을 정리해서 주는 블로그입니다!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.pythonweekly.com/&quot;&gt;Python Weekly&lt;/a&gt; : A free weekly newsletter featuring curated news, articles, new releases, jobs etc related to Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.glance.media/&quot;&gt;STARTUP WEEKLY&lt;/a&gt;: 국내외 스타트업 소식 및 일정을 한눈에 확인하세요!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techneedle.com/&quot;&gt;techNeedle&lt;/a&gt; : 실리콘밸리를 중심으로 한 IT 소식을 인사이트와 함께 전달합니다. 글 작성 시각은 캘리포니아 기준입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그 외에도 메일로 받고 있는 뉴스레터들이 있지만, 즐겨보는 뉴스레터들은 위와 같습니다. 비슷한 카테고리에서 뉴스레터를 받다보면, 대체적으로 좋은 글은 중복해서 각기 다른 뉴스테러에서 선정이 되었습니다. 물론 최종적으로는 제가 눈으로 한번 훑어보고 &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; 에 넣고 보게됩니다.&lt;br /&gt;
 이 외에도 좋은 내용을 다루는 곳이 있으면 공유해주셨으면 좋겠습니다^^&lt;/p&gt;</content><author><name>dongjun</name></author><category term="blog" /><category term="news letter," /><summary type="html">Data and Machine Learning Newsletter</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dongjunlee.github.io/assets/images/newsletter-1349774_640.jpg" /></entry><entry><title type="html">샐러드를 먹는 스타트업을 위한 Salady Bot 개발기!</title><link href="https://dongjunlee.github.io/Salady_bot_for_startup/" rel="alternate" type="text/html" title="샐러드를 먹는 스타트업을 위한 Salady Bot 개발기!" /><published>2016-09-17T01:14:00+00:00</published><updated>2016-09-17T01:14:00+00:00</updated><id>https://dongjunlee.github.io/Salady_bot_for_startup</id><content type="html" xml:base="https://dongjunlee.github.io/Salady_bot_for_startup/">&lt;h1 id=&quot;샐러드를-먹는-스타트업을-위한-salady-bot-개발기&quot;&gt;샐러드를 먹는 스타트업을 위한 Salady Bot 개발기!&lt;/h1&gt;

&lt;h2 id=&quot;발단&quot;&gt;발단&lt;/h2&gt;

&lt;p&gt;최근에 Bot이 화두에 많이 오르면서, 저도 Bot을 만드는 것에 많은 관심을 가지고 있었습니다.&lt;br /&gt;
그러던 중, 이거 Bot으로 한 번 만들어볼까..? 라는 생각을 하게된 계기가 있습니다.&lt;/p&gt;

&lt;p&gt;저희 회사분들 중에는 점심에 꼭 &lt;a href=&quot;http://www.saladykorea.com/&quot;&gt;샐러디&lt;/a&gt;를 먹는 샐러디파가 있습니다!&lt;br /&gt;
Slack에서 10시 30분 쯤이면, 자기가 먹을 메뉴를 정해서 올리시곤 합니다.&lt;/p&gt;

&lt;p&gt;예를 들어 이런 식으로 말을 하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/sample.png&quot; alt=&quot;sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 자주 메뉴가 뭐가 있는 지 물어보고.. Salady 홈페이지 링크가 올라왔습니다.&lt;br /&gt;
별것 아니지만 이런 상황들이 조금은 불편해 보였습니다.&lt;/p&gt;

&lt;p&gt;마침 PYCON 에서 &lt;a href=&quot;https://www.pycon.kr/2016apac/program/63&quot;&gt;ChatBot&lt;/a&gt;에 대한 프로그램도 듣고, 샐러디에 대한 위와 같은 생각을 하던 터라..&lt;br /&gt;
Slack을 사용하는 스타트업을 위한 Salady Bot을 기획하게 되었고, 개발을 시작하게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;기획&quot;&gt;기획&lt;/h2&gt;

&lt;p&gt;제가 만들고자 한 Salady Bot의 조건은 간단합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 방식을 바꾸지 않으면서, 조금 더 편할 수 있도록 하는 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chat Bot에 대한 글들을 많이 보면서, 기존의 앱에서 메신저앱의 Chat Bot으로 이동하고 있는 이유가 &lt;strong&gt;간편함&lt;/strong&gt; 이라는 것에 동의하고 있기 때문입니다. 앱에서 버튼을 여러번 누르고, 절차를 따르는 것보다 메신저 앱에서 ‘ㅁㅁㅁ 해줘’ 이렇게 말을 하는 것으로 원하는 것을 실행시킬 수 있기 때문이죠.&lt;/p&gt;

&lt;p&gt;조금 더 세부적인 기획을 보자면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메뉴를 보여주자&lt;/li&gt;
  &lt;li&gt;현재 방식 그대로 주문을 받자&lt;/li&gt;
  &lt;li&gt;주문을 정리해서 보여주자&lt;/li&gt;
  &lt;li&gt;전화대신 주문을 해주자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;입니다. 이렇게 간단한 기획을 하고 개발에 돌입을 하게됩니다!&lt;/p&gt;

&lt;h2 id=&quot;개발&quot;&gt;개발&lt;/h2&gt;

&lt;p&gt;간단한 Rule-base로 이루어진 Chat Bot이기 떄문에, 개발에 대한 자세한 내용을 다루지는 않을 것 입니다. &lt;br /&gt;
우선 Slack Bot을 하나 만들어줍니다. &lt;br /&gt;
(Slack Bot을 만드는 것은 굉장히 쉽습니다! 예전 포스트인 &lt;a href=&quot;http://humanbrain.in/2016/07/01/make-slack_bot-with-node-js/&quot;&gt;Node.js를 통해 Slack bot만들기&lt;/a&gt;를 보시면 도움이 될 것 같네요.)&lt;/p&gt;

&lt;p&gt;대신 이번에는 Python으로 개발을 하였고, &lt;a href=&quot;https://github.com/lins05/slackbot&quot;&gt;slack&lt;/a&gt;을 사용하였습니다.&lt;/p&gt;

&lt;p&gt;다음으로는 Salady 홈페이지에서 메뉴들에 대한 정보들을 정리하고, 보여주는 부분, 가격 계산 등.. 을 구현하고, 
메시지를 보여주는 방식으로는 &lt;a href=&quot;https://api.slack.com/docs/message-attachments&quot;&gt;Attaching content and links to messages&lt;/a&gt;를 통해서 조금 더 깔끔하고 있어보이도록?) 하였습니다.&lt;/p&gt;

&lt;p&gt;그렇게 해당 메시지에 대한 로직과 뷰에 대한 작업을 하고, 메시지를 받는 부분은 정규식을 통해서 처리를 하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;salady-bot&quot;&gt;Salady Bot&lt;/h2&gt;

&lt;p&gt;구현된 결과입니다.&lt;/p&gt;

&lt;h3 id=&quot;basic&quot;&gt;Basic&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;인사&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;키워드&lt;/strong&gt;: @salady 안녕&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/hi.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;salady&quot;&gt;Salady&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;메뉴&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;키워드&lt;/strong&gt;: @salady 메뉴&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/menu.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주문&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;키워드&lt;/strong&gt;: @salady 주요샐러디 + 옵션 + 옵션 + …&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/order.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주문목록&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;키워드&lt;/strong&gt;: @salady 주문목록&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/order_list.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;위와 같이 Salady Bot을 만들어보면서 Bot을 만드는 것이 별로 어렵지는 않구나..! 라는 생각을 우선 하게 되었습니다. 무엇보다 Slack Message API를 wrapping을 잘 해놓은 slack library들이 많아서 기본은 잘 구현이 되어있고, 저는 제가 필요한 부분만 개발해서 붙이면 되는 식이였기 때문입니다.&lt;/p&gt;

&lt;p&gt;저의 목표는 똑똑한 Bot을 만드는 것이기 때문에, 조금 더 연구하고 시도를 해보면서 발전을 시켜나가볼 생각입니다. 저만을 위한 개인 비서를 만들기 위해서 말이죠.&lt;/p&gt;

&lt;p&gt;위 Salady Bot의 코드는 &lt;a href=&quot;https://github.com/DongjunLee/SaladyBot/blob/master/README.md&quot;&gt;Github&lt;/a&gt;에서 확인하실 수 있습니다.&lt;/p&gt;</content><author><name>dongjun</name></author><category term="project" /><category term="slack bot" /><category term="chatbot" /><category term="project" /><summary type="html">샐러드를 먹는 스타트업을 위한 Salady Bot 개발기!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/DongjunLee/SaladyBot/raw/master/images/order.png" /></entry><entry><title type="html">BeHappy 프로젝트 시작</title><link href="https://dongjunlee.github.io/Start_QS_project/" rel="alternate" type="text/html" title="BeHappy 프로젝트 시작" /><published>2016-06-26T10:10:00+00:00</published><updated>2016-06-26T10:10:00+00:00</updated><id>https://dongjunlee.github.io/Start_QS_project</id><content type="html" xml:base="https://dongjunlee.github.io/Start_QS_project/">&lt;h1 id=&quot;behappy-프로젝트-시작&quot;&gt;BeHappy 프로젝트 시작!&lt;/h1&gt;

&lt;p&gt;저는 예전부터 생산성에 관심이 많았습니다. ‘어떻게 하면 부족한 시간을 잘 보낼 수 있을까?’, ‘지하철에서 그냥 보내는 시간이 아까우니 책을 꼭 읽자’ 등등.. 생각해보면 항상 시간에 쫓기는 삶을 살았던 것도 같습니다.&lt;/p&gt;

&lt;p&gt;그러던 중 &lt;a href=&quot;http://www.hellodatascience.com/?page_id=25&quot;&gt;헬로 데이터 과학&lt;/a&gt;을 운영하시는 김진영님을 통해서 QS라는 개념에 대해 알게되었습니다. QS는 &lt;a href=&quot;http://quantifiedself.com/&quot;&gt;&lt;strong&gt;Quantified Self&lt;/strong&gt;&lt;/a&gt;의 약자로 개인의 일상활동에서 신체적·정신적 상태를 센싱 및 트래킹하여 이를 수치화함으로써 자신의 상태를 분석하고 삶의 질을 개선하기 위한 방법을 연구하여 실생활에 적용하는 활동을 의미합니다. Gary Wolf와 Tom Kelly에 의해 소개되었으며, 2010년 &lt;a href=&quot;https://www.ted.com/talks/gary_wolf_the_quantified_self?language=ko&quot;&gt;Ted Talk&lt;/a&gt;에서 주목을 받아, 그 이후 하나의 운동형태로 커뮤니티가 형성되어 QS웹사이트를 통해 전개되어 왔다고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/quantified_self_logo_2x.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt; 출처 : http://quantifiedself.com&lt;/figcaption&gt;

&lt;p&gt;무엇보다 자신을 수치화하고, 그것을 분석하여 삶을 개선한다는 것이 저에게는 너무나도 매력적으로 보였습니다. 그 동안 시간의 질에 대한 고민을 해결할 수 있고, &lt;strong&gt;Data Scientist&lt;/strong&gt;가 되기 위한 하나의 과정으로 자신을 분석하는 것과 더불어, 이 데이터들을 기반으로 저 자신만의 인공지능 비서 &lt;strong&gt;Stalker&lt;/strong&gt;를 만들어보자는 생각까지 나아가게 되었으니까요.&lt;/p&gt;

&lt;p&gt;그렇게 제 인생의 슬로건 중 하나인 &lt;strong&gt;Be Happy&lt;/strong&gt; 프로젝트를 기획하게 되었고, 이제부터 하나씩 시작을 해보려고 합니다.&lt;/p&gt;

&lt;p&gt;다음은 Be Happy 프로젝트의 큰 그림입니다.&lt;/p&gt;

&lt;h2 id=&quot;be-happy-project&quot;&gt;Be Happy Project&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;나 자신에 대한 데이터를 자동으로, 쉽게 모을 수 있게 한다. (이때, 오픈소스, 프로덕트에 대해서 활용할 수 있는 것들은 최대한 활용한다.)&lt;/li&gt;
  &lt;li&gt;수집한 데이터를 분석하고 시각화를 통하여 문제점에 대해서 통찰력을 가진다.(분석을 할때는, 공부하고 있거나 관심있는 기술들을 사용한다. ex. &lt;a href=&quot;http://spark.apache.org/&quot;&gt;Spark&lt;/a&gt; + &lt;a href=&quot;https://zeppelin.apache.org/&quot;&gt;Zepplin&lt;/a&gt;, Machine Learnin - &lt;a href=&quot;http://scikit-learn.org/&quot;&gt;scikit-learn&lt;/a&gt;, &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, &lt;a href=&quot;https://web.stanford.edu/~mwaskom/software/seaborn/&quot;&gt;seaborn&lt;/a&gt; 등..)&lt;/li&gt;
  &lt;li&gt;문제점이나 개선의 여지에 대해서 발견했다면, 행동을 통해 고치고 개선한다. 그 결과는 마찬가지로 QS를 통해 확인한다.&lt;/li&gt;
  &lt;li&gt;나에 대해서 쌓여있는 데이터와 지혜를 바탕으로 나 만을 위한 인공지능 비서 Stalker를 개발. (Slack Bot으로 개발을 할 생각.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;장기 프로젝트가 될 수도 있다는 생각이 들지만.. 내가 꼭 해보고 싶은 프로젝트이기도 하고, 어떤 결과가 나올 것이며, 또 이 프로젝트를 통해서 내 삶이 어떻게 개선될 수 있을까.. 라는 기대가 계속 마음 속에 생기고 있습니다. &lt;br /&gt;
 하나하나씩 차근차근 시작해보려고 합니다.&lt;/p&gt;</content><author><name>dongjun</name></author><category term="blog" /><category term="productivity, quantified self, project" /><summary type="html">BeHappy 프로젝트 시작!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dongjunlee.github.io/assets/images/behappy.jpg" /></entry><entry><title type="html">Word2Image HighFashion Project</title><link href="https://dongjunlee.github.io/Highfashion_Project/" rel="alternate" type="text/html" title="Word2Image HighFashion Project" /><published>2016-06-15T22:10:00+00:00</published><updated>2016-06-15T22:10:00+00:00</updated><id>https://dongjunlee.github.io/Highfashion_Project</id><content type="html" xml:base="https://dongjunlee.github.io/Highfashion_Project/">&lt;h1 id=&quot;highfashion-프로젝트&quot;&gt;HighFashion 프로젝트&lt;/h1&gt;

&lt;p&gt;한 때, 머신러닝이나 딥러닝에 대해서는 아무것도 모르면서.. 공부해보고 싶다. 재미있겠다..! 라고 생각했던 적이 있었습니다. (지금도 잘 모르긴 합니다..!) 그렇게 크나큰 호기심을 가지고 접하게 된 .. 이 분야는 사실 저에게는 멘붕 덩어리 였습니다. 대학교에 들어와서는 수학을 거의 놓고 있었는데, 보이는 것들은 죄다 수식들이였고, 무엇보다 수학 기본기가 튼튼해야 하는 분야였습니다. 그래도 이왕 공부를 하는 것이면 제대로 해보자라는 생각에 이런 저런 강의를 찾아서 들었습니다.&lt;/p&gt;

&lt;p&gt;그 동안 들은 강의에 대해서 잘 소개하는 포스트가 있어서 링크을 남겨놓습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.moreagile.net/2015/05/how-to-start-machine-learning-study.html&quot;&gt;수학을 포기한 직업 프로그래머가 머신러닝 학습을 시작하기위한 학습법 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@aidenswmo/2&quot;&gt;머신러닝, 제대로 배우는 법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 제가 공부했던 정보들은 아래 링크에서 확인하실 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DongjunLee/TIL-MAL/blob/master/Machine%20Learning/Awesome-Machine-Learning.md&quot;&gt;Machine Learning 공부 리스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DongjunLee/TIL-MAL/blob/master/Deep%20Learning/Awesome-Deep-Learning.md&quot;&gt;Deep Learning 공부 리스트&lt;/a&gt;
(다른 강의들도 좋지만 &lt;strong&gt;CS231n&lt;/strong&gt; 이 가장 좋은 퀄리티의 강의를 제공한다고 개인적으로 생각합니다. 추천!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇게 무식하게 이 강의 저 강의를 듣고, 책보고 공부하면서 배운 내용들을 적용할 수 있는 프로젝트가 뭐가 있을까.. 생각하다가 나온 것이 AI Designer HighFashion 입니다.&lt;/p&gt;

&lt;p&gt;시작은 굉장히 단순했습니다.
흔히 위조지폐를 만드는 도둑과 경찰 간의 네트워크로 비유가 되는 &lt;a href=&quot;https://arxiv.org/abs/1511.06434&quot;&gt;DCGAN&lt;/a&gt; 에 대해 알게되었습니다. 이 DCGAN이… 굉장히 신기합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/albums_128px.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;출처 : https://github.com/Newmu/dcgan_codee&lt;/figcaption&gt;

&lt;p&gt;&lt;strong&gt;DCGAN&lt;/strong&gt;을 통해서 만든 &lt;strong&gt;Album Cover&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/faces_arithmetic_collage.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;출처 : https://github.com/Newmu/dcgan_code&lt;/figcaption&gt;

&lt;p&gt;흥미를 끌었던 두 번째 요인. &lt;strong&gt;Image Arithmetic&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;그래서 이 DCGAN을 이용한 프로젝트를 생각하던 중.. DCGAN 모델 앞에 &lt;a href=&quot;https://en.wikipedia.org/wiki/Word2vec&quot;&gt;Word2Vec&lt;/a&gt; 을 붙이고, 학습을 시키면.. 내가 원하는 단어에 맞게 이미지를 생성할 수 있을 것이란 생각이였습니다. (예를 들어, 얼굴사진을 만들어내느 DCGAN에 “잘생긴” 이라는 단어를 Word2Vec로 변환하고 넣었을 때, 그에 맞는 이미지를 생성해주는 것 입니다.)&lt;/p&gt;

&lt;p&gt;이렇게 아이디어가 떠오르고, 가능한지 어떤지도 따져보지 않고 그냥 시작했습니다. 이미지는 Street Snap 이미지 (예, &lt;a href=&quot;http://www.musinsa.com/?m=street&amp;amp;_y=default&quot;&gt;무신사 - 스트릿스냅&lt;/a&gt;)로 정하고 난 후, 이미지는 크롤러(&lt;a href=&quot;https://www.import.io/&quot;&gt;&lt;strong&gt;import.io&lt;/strong&gt;&lt;/a&gt;)를 통해 수집하였습니다.&lt;/p&gt;

&lt;p&gt;그렇게 Data를 수집하고 부터는.. 다양한 방법으로 Data argument, Pre-processing 등을 통해서 데이터를 준비하고, &lt;a href=&quot;http://torch.ch/&quot;&gt;Torch7&lt;/a&gt;, &lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; 이 두가지 프레임워크로 간단한 모델(Simple CNN)부터, 복잡한 모델(&lt;a href=&quot;https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf&quot;&gt;AlexNet&lt;/a&gt;, …, &lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot;&gt;ResNet&lt;/a&gt;)까지.. 다양한 방법으로 구현하고 실험하고 시도를 해보았습니다. 속 안의 원리를 제대로 이해하지 못하다보니… 삽질들을 많이 했었습니다ㅠㅠ.&lt;/p&gt;

&lt;p&gt;공개된 코드를 활용하기도 하면서, 하나씩 기능이 구현하게 되고.. 그때그때 생각나는 아이디어를 합치다 보니.. &lt;a href=&quot;https://github.com/soumith/dcgan.torch&quot;&gt;DCGAN&lt;/a&gt;, &lt;a href=&quot;https://github.com/nagadomi/waifu2x&quot;&gt;Super resolution&lt;/a&gt;, &lt;a href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LSHForest.html&quot;&gt;LSHForest&lt;/a&gt; 등의.. 다양한 기술들을 더 붙이고 사용하게 되었습니다.&lt;/p&gt;

&lt;p&gt;이렇게 HighFashion 프로젝트는 진행되었고, 마무리가 되었습니다!
지금까지가 프로젝트를 시작하고 진행하는 과정을 말씀드렸다면 이제 프로젝트에 대해서 간단히 소개를 드리고자 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/scratch.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
Step1. Scatch 화면&lt;/p&gt;

&lt;p&gt;예를 들어 ‘정장’ 이라는 단어를 입력하고 Scatch를 하면,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/sample-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;와 같은 이미지를 HighFashion이 그려줍니다.&lt;/p&gt;

&lt;p&gt;원하는 스타일의 단어들을 여러가지 입력하여, 다양한 이미지들을 Scatch 한 후,
Image Arithmetic 의 +/- 버튼을 통해서, 이미지 연산을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그렇게 이미지들을 만들고, 연산한 결과 예시는 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/sample2.png&quot; alt=&quot;image&quot; /&gt;
(인공지능의 Winter가 다시 오지 않기를 바라며..)&lt;/p&gt;

&lt;p&gt;텍스트를 분석하고 이미지를 만드는 과정은 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DongjunLee/BeAwesomeToday/raw/master/images/HighFashion_Network.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;highfashion-network&quot;&gt;HighFashion Network&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Naver 기계번역 API&lt;/li&gt;
  &lt;li&gt;Word2Vec - Pre-trained model(GoogleNews-vectors-negative300)&lt;/li&gt;
  &lt;li&gt;Score 계산 - Similarity&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Image&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DCGAN - 랜덤한 이미지 생성&lt;/li&gt;
  &lt;li&gt;Discriminator Network - 생성한 이미지의 품질 분류&lt;/li&gt;
  &lt;li&gt;Fashion Analysis Network - 성별, 옷의 종류 분석&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와 같이 분석한 Text, Image를 각각 비교하여 가장 일치하는 이미지를 사용자에게 반환해줍니다.&lt;/p&gt;

&lt;p&gt;그 외의 Top10, Collection, Filter, Image Analysis, Similar Fashion 등의 부가기능들이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://highfashion.pro/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;에서 확인하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;놀러오셔서 다양한 이미지들을 그려보시고, 이미지연산을 활용하여 패션을 완성해보세요!&lt;/p&gt;</content><author><name>dongjun</name></author><category term="project" /><category term="deep learning" /><category term="dcgan" /><category term="fashion" /><summary type="html">HighFashion 프로젝트</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/Soma2-HighFashion/Word2Image/blob/master/sample_images/generate_samples.png?raw=true" /></entry><entry><title type="html">지식 체화법</title><link href="https://dongjunlee.github.io/think_embodied/" rel="alternate" type="text/html" title="지식 체화법" /><published>2016-06-01T10:10:00+00:00</published><updated>2016-06-01T10:10:00+00:00</updated><id>https://dongjunlee.github.io/think_embodied</id><content type="html" xml:base="https://dongjunlee.github.io/think_embodied/">&lt;h1 id=&quot;지식-체화법&quot;&gt;지식 체화법&lt;/h1&gt;

&lt;p&gt;우리는 많은 것들을 보고 듣고, 생각하고 너무도 많은 것들이 머리 속으로 들어오는
정보의 호수속에서 살고 있습니다. 그 중에 내것으로 체화되는 것들은 얼마나 될까요.
이렇게 많은 지식들을 내 것으로 만든 다음에야 새로운 지식을 만들어 낼 수 있다고 생각합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;창조는 편집이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라고 이야기한 김정운 박사의 ‘에디톨로지’ 처럼 우리는 흔히 알고 있는 지식을 통해서
이것 저것 짜집기를 통해 새로운 것들을 생각해냅니다.&lt;/p&gt;

&lt;p&gt;이렇게 나아가기 위해서는 스처가는 수 많은 지식들을 내 것으로 만드는 과정을 확립시켜야합니다!
그래서 제가 사용하고 있는 App이나 도구들을 소개해보고자 합니다.&lt;/p&gt;

&lt;h3 id=&quot;지식-체화법-1&quot;&gt;지식 체화법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Raw Data&lt;/strong&gt;(날 것)
문득 머리에서 생각나는 지식들을 말합니다.
갑자기 떠오르는 아이디어들은 어딘가에 메모하지 않으면 순식간에 사라지기도 합니다.
바로 간단하게 적을 수 있어야 합니다!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://keep.google.com&quot;&gt;Google Keep&lt;/a&gt; : 간편한 메모 App!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Information&lt;/strong&gt; (1차 가공데이터)
강의를 듣거나, 책을 보는 등.. 새로운 지식들을 얻었을 때의 정보들을 이야기합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/til&quot;&gt;TIL&lt;/a&gt; : TIL은 Today I Learned의 약자로서 오늘 배운 것들을 간단하게 정리하는 것을 말합니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DongjunLee/TIL-MAL&quot;&gt;TIL+MAL&lt;/a&gt; : 저는 TIL 에 MAL (My Awesome List) 를 더해서 오늘 배운 것들을 정리하고, 공부했던 자료들을 모아놓습니다. (Git에 Markdown 형식으로)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.onenote.com/&quot;&gt;OneNote&lt;/a&gt; : 전자필기장으로 유명한 App입니다. 모바일, 테블릿, 노트북 전부 동기화하여 사용할 수 있어서 자료들을 정리하기 편합니다. 사용하기 또한 굉장히 편리합니다!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getpocket.com&quot;&gt;Pocket&lt;/a&gt; : 블로그나 뉴스 등.. Web상에서 유용한 글을 보았을 때, Pocket에 넣어놓았다가 언제든 편하게 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Knowledge&lt;/strong&gt; (나에게 맞게 가공한 데이터)
Information을 나에게 맞게 한번 더 정리한 데이터를 말합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blog : 워드프레스로 만든 개인 블로그에다가 제가 정리한 생각들을 올립니다! (이번이 첫 포스팅이지만..)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/&quot;&gt;SlideShare&lt;/a&gt; : PPT, 슬라이드 자료들을 공유하는 사이트입니다. 알고 있는 지식들을 슬라이드로 만들어서 공유하는 것도 좋지요.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mindwatching.kr/329&quot;&gt;독서정리노트&lt;/a&gt;: ‘메모 습관의 힘’ 의 저자이신 신정철님이 공유해주신 독서정리양식! 책은 비록 안 봤지만.. 잘 사용하고 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Wisdom&lt;/strong&gt; (완전한 체화를 위해 실습하기)
Knowledge 단계까지 진행을 하면 내 것으로 반정도 만들었다고 생각을 합니다. 언제나 중요한 것은 실천입니다!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project : 지금까지 배웠던 정보들을 활용할 수 있는 간단한 프로젝트를 기획해서 만들어보도록 합시다.&lt;/li&gt;
  &lt;li&gt;Teach : 누군가에게 가르쳐 주는 순간만큼 또 많이 배우는 때가 없다고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;그 외. Daily Schedule&lt;/strong&gt;(일정관리)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.todoist.com/&quot;&gt;Todoist&lt;/a&gt; : 일정관리로 매우 요긴하게 사용하고 있는 To Do 앱. 윈도우, 맥, 안드로이드, ios, 크롬 확장 등… Web기반으로 되어있어 어디서든 편하게 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.todait.com/&quot;&gt;Todait&lt;/a&gt; : 최근에 사용하기 시작한 스터디 플래너 App. 깔끔한 UI/UX를 제공한다. 수험생들에게 특화되어 있기는 하지만 플래너와 더불어 자신을 수치화하고 그 수치로부터 지혜를 얻을 수 있는 QS(&lt;a href=&quot;http://quantifiedself.com/&quot;&gt;Quantified Self&lt;/a&gt;)의 개념으로 나는 바라보고 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;간단히 요약하자면..&lt;/strong&gt;
아이디어나 갑자기 떠오르는 지식들을 메모하고, 새롭게 얻는 지식들은 간단히 정리하거나 자료를 모아놓습니다. 그리고 모아놓은 자료를 기반으로 나에게 맞는 형태로 만듭니다. 마지막으로 이러한 형태를 기반으로 실습을 통해 완전히 내 것으로 만들도록 합니다!&lt;/p&gt;

&lt;p&gt;무슨 일이든 가장 중요한 것은 &lt;strong&gt;실행&lt;/strong&gt;이라고 생각합니다.
(항상 블로그를 써야지 써야지.. 생각만 하던 저에게 하는 이야기 입니다.)&lt;/p&gt;</content><author><name>dongjun</name></author><category term="blog" /><category term="productivity" /><summary type="html">지식 체화법</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dongjunlee.github.io/assets/images/study-1968077_640.jpg" /></entry></feed>