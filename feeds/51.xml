<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>오픈소스 읽어주는 남자</title>
<link>https://kwongyo.tistory.com/</link>
<description>안녕하세요 권교입니다.

권기호의 코딩과 삽질노트 -&gt; 오픈소스 읽어주는 남자 (블로그명 변경-8월 6일)</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 08:04:46 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>KwonGyo</managingEditor>
<image>
<title>오픈소스 읽어주는 남자</title>
<url>http://cfile28.uf.tistory.com/image/2764CD3D56BC2396177A9E</url>
<link>https://kwongyo.tistory.com</link>
<description>안녕하세요 권교입니다.

권기호의 코딩과 삽질노트 -&gt; 오픈소스 읽어주는 남자 (블로그명 변경-8월 6일)</description>
</image>
<item>
<title>안녕하세요. 답변이 늦어서 죄송합니다.</title>
<link>https://kwongyo.tistory.com/39</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;안녕하세요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;많은 분들이 네트워크 관련하여 댓글을 많이 주셨는데요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;제가 너무 확인이 늦었네요 ;;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;옛날에는 시간 들여서 포스팅 하는것도 재미있고,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;전공 과목 이론 공부하는게 재미있었는데,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;실무 개발자로 뛰어들면서&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;사이드 프로젝트를 좀 더 재미있게 하고 있는 것 같아요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;회사에서는 &quot;커피 마시기&quot;프로젝트를 만들고 있고,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;밖에서는 Nexters 회원들과 smart contract language 를 go 언어로 만들고 있어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;회사에서는 java를 많이 쓰지만,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Go의 매력에도 빠져들고 있어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;제가 답장을 빠르게 드릴 수 있을지 없을지 잘 모르겠지만,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;질문이 있으신 경우에는 아래의 링크에서 issue를 만들어 주시면, 가능한 빨리 답변을 드릴게요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://github.com/KwonGiho/questionRoom/issues&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;감사합니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>일상</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/39</guid>
<comments>https://kwongyo.tistory.com/39#entry39comment</comments>
<pubDate>Sun, 06 Jan 2019 20:51:35 +0900</pubDate>
</item>
<item>
<title>golang을 이용한 초 간단 restful api 만들기 (3)</title>
<link>https://kwongyo.tistory.com/38</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;3장.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 18.6667px;&quot;&gt;&lt;b&gt;앗...? DB가 없는 환경에서 동작하게 만들라고...!??!&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 13.3333px;&quot;&gt;처음 go를 쓰면서 커피 어드민 툴을 만들 때 제가 들었던 말이예요 .&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;지금 남는 서버가 있긴 한데, 그 서버에 있는 DB는 사용하면 안 되는게 서버를 사용할 수 있는&amp;nbsp;조건 이였어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래서 FileIO를 통하여 프로그램을 작성하기로 결심했어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;파일 io는 2가지 정도의 조건이 있을 것 같아요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;1. CSV(comma seperate version )&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;2. normal version.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;자, 이 두 가지를 사용하기 앞서서,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;앞으로 우리가 사용할 모델을 정의해 줄거예요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;앞에서 이야기 한 조건들을 생각해 보면,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;개발자 말고 다른 직군(디자이너, 기획자)도 같이 먹을 수 있게 해주세요&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;하루 이틀은 제가 빠질 수 있도록 조정하고 싶어요&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이 말을 바탕으로 생각해보면,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이름, 직군, 이메일, 참가여부&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;정도의 정보를 갖는 모델이 필요해요. (이메일은 결과를 메일로 받아야하기 때문이예요!)&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이를 바탕으로 모델을 만들면 다음처럼 될 수 있을 것 같아요.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;type &lt;/span&gt;Colleague &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;struct &lt;/span&gt;{&lt;br /&gt;   Name     &lt;span style=&quot;color:#769aa5;&quot;&gt;string&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#769aa5;&quot;&gt;   &lt;/span&gt;Position &lt;span style=&quot;color:#769aa5;&quot;&gt;string&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#769aa5;&quot;&gt;   &lt;/span&gt;Email    &lt;span style=&quot;color:#769aa5;&quot;&gt;string &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;`gorm:&quot;PRIMARY_KEY&quot;`&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;   &lt;/span&gt;Attend   &lt;span style=&quot;color:#769aa5;&quot;&gt;string&lt;br /&gt;&lt;/span&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;여기서 email에서 gorm을 사용했는데요, golang에서 많이 사용하는 orm이예요 .&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이거에 대해서도&amp;nbsp;하나의 포스팅으로 분리할게요!&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;csv파일을 컨트롤 하기 위해서는 encoding/csv 패키지의 기본 라이브러리를 사용 할거예요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;백문이 문여일견, 먼저 읽어들이는 코드를 보고 갈게요.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;func &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;getColleagueInfoFromCsv&lt;/span&gt;(filename &lt;span style=&quot;color:#769aa5;&quot;&gt;string&lt;/span&gt;) []&lt;span style=&quot;color:#769aa5;&quot;&gt;Colleague &lt;/span&gt;{&lt;br /&gt;   &lt;span style=&quot;color:#808080;&quot;&gt;// 파일 오픈 !&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;   &lt;/span&gt;file&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;_ := os.Open(filename)&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color:#808080;&quot;&gt;// csv reader 생성&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;   &lt;/span&gt;rdr := csv.NewReader(bufio.NewReader(file))&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color:#808080;&quot;&gt;// csv 내용 모두 읽기&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;   &lt;/span&gt;rows&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;_ := rdr.ReadAll()&lt;br /&gt;&lt;br /&gt;   colleagues := []&lt;span style=&quot;color:#769aa5;&quot;&gt;Colleague&lt;/span&gt;{}&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;var &lt;/span&gt;temp &lt;span style=&quot;color:#769aa5;&quot;&gt;Colleague&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#769aa5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#769aa5;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;// 행,열 읽기&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;for &lt;/span&gt;i := &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;range &lt;/span&gt;rows {&lt;br /&gt;      temp.Email = strings.TrimSpace(rows[i][&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;])&lt;br /&gt;      temp.Name = strings.TrimSpace(rows[i][&lt;span style=&quot;color:#6897bb;&quot;&gt;1&lt;/span&gt;])&lt;br /&gt;      temp.Position = strings.TrimSpace(rows[i][&lt;span style=&quot;color:#6897bb;&quot;&gt;2&lt;/span&gt;])&lt;br /&gt;      temp.Attend = strings.TrimSpace(rows[i][&lt;span style=&quot;color:#6897bb;&quot;&gt;3&lt;/span&gt;])&lt;br /&gt;&lt;br /&gt;      colleagues = append(colleagues&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;temp) // 1&lt;br /&gt;   }&lt;br /&gt;   &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;return &lt;/span&gt;colleagues&lt;br /&gt;}&lt;/pre&gt;&lt;p style=&quot;text-align: center;&quot;&gt;나 아직 여기에서 어떻게 최적화를 해야할지 모르겠어요&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;// 1에 있는 부분도 최적화가 가능할 것 같은데,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;일단은 돌아가는 코드를 만들고, 리팩토링 하는 리뷰도 한번 만들게요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;---- 여기부터는 작성중인 문서입니다. ----&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>golang</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/38</guid>
<comments>https://kwongyo.tistory.com/38#entry38comment</comments>
<pubDate>Sun, 06 Jan 2019 20:47:30 +0900</pubDate>
</item>
<item>
<title>golang을 이용한 초 간단 restful api 만들기 (2)</title>
<link>https://kwongyo.tistory.com/37</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;2장.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;Golang을 이용하여 hello-world restful api 만들기.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;개발 환경.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;IDE : goland&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;web framework : echo&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이 글에서는 기초적인 go를 알고 있다는 전제조건으로 진행할거예요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래도 go가 처음이신 분들이 있을터이니 공부할 수 있는 링크를 같이 첨부해 둘게요.&lt;/p&gt;&lt;p id=&quot;more37_0&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '37_0','더보기','접기'); return false;&quot;&gt;
        더보기    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content37_0&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이 아래의 4개만 보면 go는 대충 다 이해 가실거에요 ~!&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;http://golang.site/go/article/202-Mac%EC%97%90-Go-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://www.slideshare.net/songaal/lets-go-45867246&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://godoc.org/&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;http://codingnuri.com/golang-book/&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;go를 익힌 다음으로 어떤 웹 프레임워크를 사용해야하나 고민이 많았어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;java는 spring을 쓰면 되고,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;javscript는 node+express를 사용하면 되고,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;python은 django를 쓰면 되는데&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;go는 한번도 뭘 사용해야할지 잘 모르겠더라구요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래서 읽은 문서들이 다음 문서들이예요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://wikinote.bluemir.me/golang/choose-web-framework.md&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://jaehue.github.io/post/go-my-way-1-webframework/&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://okky.kr/article/386116&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://www.buzzvil.com/ko/2018/02/12/tech-blog-go-%EC%84%9C%EB%B2%84-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0/&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;https://dev.to/speedwheel/top-6-web-frameworks-for-go-as-of-2017-34i&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;결국에 제가 고른 웹 프레임워크는 &lt;a href=&quot;https://echo.labstack.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;echo&lt;/a&gt; 에요&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;마지막 업데이트가 1년전이라, 요즘엔 &lt;a href=&quot;https://github.com/kataras/iris&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;iris&lt;/a&gt;를 보고있긴 해요&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;처음부터 iris를 봤으면 좋을텐데..&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://dev.to/speedwheel/top-6-web-frameworks-for-go-as-of-2017-34i&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;맨 마지막 링크&lt;/a&gt;를 보시면 알다싶이, iris가 learning curve가 가장 낮아요.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;마지막 업데이트도 글 쓴 날 기준(2019년 1월 6일)으로 두 달 전이구요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래도 다른걸 써봐야지 어떤게 더 좋은지 아니까 ㅎㅎ&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;echo는 &lt;a href=&quot;https://echo.labstack.com/guide&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;document&lt;/a&gt;를 봤을 때 정리가 너무 잘 되어있어서 사용 해야겠다고 결심했어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;시작 전, 다음 코드를 터미널에서 실행하여 다운로드 해주세요&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;go get -u github.com/labstack/echo/...&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;최종코드.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;reference : https://github.com/KwonGiho/go-starter/blob/master/go-simple-restful-api.go&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;package &lt;/span&gt;main&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;import &lt;/span&gt;(&lt;br /&gt;   &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;github.com/labstack/echo&quot;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;   &quot;net/http&quot;&lt;br /&gt;&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;func &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;() {&lt;br /&gt;&lt;br /&gt;   e := echo.New() // 1&lt;br /&gt;&lt;br /&gt;   e.GET(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/say&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;func&lt;/span&gt;(c echo.&lt;span style=&quot;color:#769aa5;&quot;&gt;Context&lt;/span&gt;) &lt;span style=&quot;color:#769aa5;&quot;&gt;error &lt;/span&gt;{ // 2&lt;br /&gt;      &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;return &lt;/span&gt;c.JSON(http.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;StatusOK&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;hi&quot;&lt;/span&gt;)&lt;br /&gt;   })&lt;br /&gt;&lt;br /&gt;   e.Logger.Fatal(e.Start(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;:1331&quot;&lt;/span&gt;))&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;1번.&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;echo는 echo.New() 함수를 호출하면&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Echo 변수를 생성하고, 포인터 변수에 이 변수의 주소를 저장해요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그리고 이 변수의 주소를 반환해요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;c언어를 좀 더 많이 하셨던 분을 위해서 좀 더 명확하게 작성해 드리면,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;다음과 같이 작성할 수도 있어요.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;var &lt;/span&gt;e echo.&lt;span style=&quot;color:#769aa5;&quot;&gt;Echo&lt;br /&gt;&lt;/span&gt;e = *echo.New()&lt;br /&gt;e.GET(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/say&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;sayHi&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;e.Logger.Fatal(e.Start(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;:1332&quot;&lt;/span&gt;)) // 3&lt;/pre&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br class=&quot;Apple-interchange-newline&quot;&gt;변수 사용 &amp;amp; 미사용 버전&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;reference :&amp;nbsp;https://github.com/KwonGiho/go-starter/blob/master/go-simple-restful-api-seperate.go&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;2번.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;앞으로 URI:1331/say로 오는 모든 요청을 이 함수가 책임질 예정이예요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;실행 url :&amp;nbsp;&lt;a href=&quot;localhost:1331/say&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;localhost:1331/say&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;curl localhost:1331/say&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;아래로 요청하면, &quot;hi&quot;라는 결과가 노출되요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;쿼리 스트링으로 요청을 보내고 싶으시면,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;다음과 같이 사용하시면 됩니다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;name := c.QueryParam(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;name&quot;&lt;/span&gt;)&lt;/pre&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;하위 url을 두고 싶으시면, 다음과 같이 사용하시면 되요.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;&quot;&gt;e.GET(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/say/:name&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;func&lt;/span&gt;(c echo.&lt;span style=&quot;color:#769aa5;&quot;&gt;Context&lt;/span&gt;) &lt;span style=&quot;color:#769aa5;&quot;&gt;error &lt;/span&gt;{&lt;br /&gt;   name := c.Param(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;name&quot;&lt;/span&gt;)&lt;br /&gt;   &lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;return &lt;/span&gt;c.JSON(http.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;StatusOK&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;name)&lt;br /&gt;})&lt;/pre&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;3번.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Fatal은 에러가 있을 시, 에러 메시지를 노출하고, os.Exit(0이 아닌 정수)을 호출하여 프로그램을 종료합니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이상이 없을 경우엔 아무 로그도 발생시키지 않아요.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>golang</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/37</guid>
<comments>https://kwongyo.tistory.com/37#entry37comment</comments>
<pubDate>Sun, 06 Jan 2019 20:10:08 +0900</pubDate>
</item>
<item>
<title>golang을 이용한 초 간단 restful api 만들기 (1)</title>
<link>https://kwongyo.tistory.com/36</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;1 장&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&quot;왜 이 시리즈를 작성 하는가?&quot;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;엄청 오랜만에 포스팅 하네요~&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;작년 하반기 회고 때 이런 말이 나왔어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;요즘 팀 내에서 사람들이 이야기 할 시간이 별로 없는 것 같아요&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그리하여, 커피 마시기 스크립트를 만들었는데요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이 스크립트는 매일 3시~4시에 커피 마실 팀원들을 랜덤으로 3명 골라서&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그 팀원들보고 커피를 마시라고 메일을 보내주는 스크립트예요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;팀 막내이기도 하고, 최근 일정이 바쁜 작업이 없기도 하고 재미있어 보여서 단번에 이렇게 말 했어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;앗 ㅎㅎ 이건 제가 만들어야 할 것 같습니다&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이 글을 쓰게 된 시초가 되어버렸네요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;처음에는 groovy로 작성하여,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;정말 3명씩만 골라서 메일을 보내주는 스크립트를 작성했는데요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;원래 요구사항은 항상 변하는 것 같아요&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;1.0v을 만든 뒤, 많은 사람들이 저에게 가면서 던져준 퀘스트가 있었어요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;교님 저2일 전에도 걸리고, 어제도 걸렸는데 오늘도 걸렸어요.. 한 번 걸리면 2일동안 안 걸리게 해주세요&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;교님, 저 저때만 프리미엄 커피 걸렸는데, 또 제 타임에 프리미엄 커피로 걸렸어요. 프리미엄 커피를 사야 할 확률을 우리가 변경할 수 있게 만들어 주세요&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;교님 우리 팀 내의 사람뿐만 아니라, 기획자랑 디자이너 분들도 추가해서 같이 마시는게 어때요 ?&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&quot;교님 이거 코드 사내 깃에 올려서 공유좀 해주세요&quot;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;...&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래서 coffeeScriptAdmin을 만들기로 결심 했는데요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;요즘 NEXTERS에서 &lt;a href=&quot;https://github.com/DE-labtory/swim&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;smart contract language&lt;/a&gt;을 만들고 있는데,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이거 만들면서 go를 많이 보고있어서 go로 다시 짜기로 결심했습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그리하여, 2장부터는 간단한 restful api를 만들기부터,&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;file-io, mysql을 이용한 DB연동까지 해볼 예정이예요.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>golang</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/36</guid>
<comments>https://kwongyo.tistory.com/36#entry36comment</comments>
<pubDate>Sun, 06 Jan 2019 18:55:24 +0900</pubDate>
</item>
<item>
<title>티스토리 정말 오랜만이네</title>
<link>https://kwongyo.tistory.com/35</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;가끔 생각은 났지만 바쁘다는 핑계로 들어와보진 못했다&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;작년 이맘때쯤부터 네*버에서 입사시험을 치루고 있었는데.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;무사히 잘 통과했으며 감사히 서로를 존중하고,&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;코딩을 좋아하는 사람들과 함께할 수 있어서 행복한 것 같다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;오늘 블로그 와서 확인해보니,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;예전에 공부하면서 포스팅 했던 내용에 질문글도 많이 올라오고, 비밀댓글도 많이 달렸다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;지금 보니 날짜도 많이 지났고, 답변을 달기에는 많이 늦었다고 생각한다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;되도록 빠른 날짜에 질문 해주신 모든 문제를 취합하여 하나의 포스트로 만들면 어떨까? 라는 생각도 해본다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;지금 하고 있는것들만 끝나면 해야지 키키&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;나는 요즘 두개의 사이드 프로젝트를 진행하고 있다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;첫번째로,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;서로의 고민을 들어주고, 피드백해줄 수 있는 서비스이다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;코딩이 재미있어질 때 부터 만들고 싶었던 서비스라 재미있게 만들고 있으며 막바지를 향해 달려가고 있다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;두번째로,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;대학생인 개발자와&amp;nbsp;디자이너들이 협업하여 서비스를 만드는&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 18pt;&quot;&gt;넥스터즈&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;라는 곳의 홈페이지를 열심히 만들고 있다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;같이 8기 운영진을 맡았던 대장님과 같이 만들고 있으며,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이제 시작이라 설레는 마음으로 프로젝트 깃을 새로 만들었다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이제는 스프링 개념도 조금 익숙해진 것 같고,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;개발과 관련된 글을 좀 올려볼까 생각도 한다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>일상</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/35</guid>
<comments>https://kwongyo.tistory.com/35#entry35comment</comments>
<pubDate>Thu, 23 Aug 2018 13:35:37 +0900</pubDate>
</item>
<item>
<title>Spring boot + Vue.js Multipart file upload to S3(Simple Storage Service) from AWS (스프링 부트+ Vue.js 2.0과 함께하는 파일 업로드!)</title>
<link>https://kwongyo.tistory.com/34</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;안녕하세요~ 정말 오랜만에 블로그에 로그인하네요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그동안 많은분들이 질문을 남겨주시고, 그 질문에 서로 대답해주는 모습을 보니 마음이 뿌듯하네요 ㅎㅎ&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;스타트업에 합류하고 나서, 주구장창 안드로이드만 해왔는데, 이번주부터 API서버를 만들게 되었습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그 중 가장 재미있었던 파트는 API서버에서 AWS의 S3(Simple Storage Service)로 파일을 업로드하는 부분입니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;기존의 JavaScript, JQuery 등으로 업로드 하는 부분은 많이 나와있는데, Front-end framework(or library)를 이용해서 업로드 하는 부분에 대해서 설명이 잘 되어있는 부분이 없어 포스팅을 마음먹게 했네요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Spec&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Back-end : Spring-boot&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Build tool : Maven.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Front-end : Vue.js 2.0&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;업로드 하는 부분만 보자면 이 스펙만 따라하시면 될 것 같습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Front-end.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;테스트 하기 위해서 순수 JavaScript , HTML5 , CSS3로만 작성했습니다.&lt;/p&gt;&lt;p id=&quot;more34_0&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_0','HTML5,CSS3,JS','접기'); return false;&quot;&gt;
        HTML5,CSS3,JS    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_0&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;head&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;function sendFile(file) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var uri = &quot;/updates/debug/upload&quot;;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var xhr = new XMLHttpRequest();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var fd = new FormData();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;xhr.open(&quot;POST&quot;,uri,true);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;xhr.onreadystatechange = function() {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;if(xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;//alert(xhr.responseText);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;console.log(xhr.responseText)&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;};&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;console.log(file.size);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;fd.append('file',file);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;xhr.send(fd);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;window.onload = function() {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var dropzone = document.getElementById(&quot;dropzone&quot;);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;dropzone.ondragover = dropzone.ondragenter = function(event) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.stopPropagation();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.preventDefault();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;dropzone.ondrop = function(event) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.stopPropagation();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.preventDefault();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var fileArray = event.dataTransfer.files;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;for(var i=0;i&amp;lt;fileArray.length;i++) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;sendFile(fileArray[i]);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;/script&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;style type=&quot;text/css&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;#dropzone {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;width:483px;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;height:298px;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;border-radius: 30px;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;background:#53a7ea;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;transition:all 0.3s ease;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;opacity:0.8;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;#dropzone:hover&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;{&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;cursor:pointer;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;opacity:0.6;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;#dropzone_descriptor {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;text-align: center;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;padding-top: 30%;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;/style&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;/head&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;body&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;div&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;div id=&quot;dropzone&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;p id=&quot;dropzone_descriptor&quot;&amp;gt; Drag &amp;amp; drop your file here.&amp;lt;/p&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;/div&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;/div&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;/body&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;/html&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&lt;p class=&quot;p1&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt; p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px 'Helvetica Neue'; color: #000000; color: rgba(0, 0, 0, 0.7)} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px 'Helvetica Neue'; color: #000000; color: rgba(0, 0, 0, 0.7); min-height: 15.0px} &lt;/span&gt;&lt;/style&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이렇게 작성해주면 정상적으로 작동하는데, 이번에 회사에서 Front-end 로, React or Vue를 자유롭게 선택해서 사용하라고 하셨는데,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;React+Spring조합은 뭔가 세팅해줘야할게 너무 많더라구요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래서 Vue.js를 선택했습니다. ( 페이스북 페이지 Vue.js Kroea에 많은 정보를 항상 받아왔었거든요!&amp;nbsp;)&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그래서 Vue.js를 선택해 다음과 같이 코드를 작성했습니다.&lt;/p&gt;&lt;p id=&quot;more34_1&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_1','Vue.js 2.0이 적용되어있는 기본페이지+업로드 코드 병합','접기'); return false;&quot;&gt;
        Vue.js 2.0이 적용되어있는 기본페이지+업로드 코드 병합    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_1&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;function sendFile(file) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var uri = &quot;/updates/debug/upload&quot;;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var xhr = new XMLHttpRequest();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var fd = new FormData();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;xhr.open(&quot;POST&quot;,uri,true);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;xhr.onreadystatechange = function() {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;if(xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;console.log(xhr.responseText)&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;};&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;console.log(file.size);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;fd.append('file',file);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;xhr.send(fd);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;window.onload = function() {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var dropzone = document.getElementById(&quot;ddzone&quot;);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;dropzone.ondragover = dropzone.ondragenter = function(event) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.stopPropagation();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.preventDefault();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dropzone&lt;/span&gt;.ondrop = function(event) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.stopPropagation();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.preventDefault();&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var fileArray = event.dataTransfer.files;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;for(var i=0;i&amp;lt;fileArray.length;i++) {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;sendFile(fileArray[i]);&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;/script&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;style type=&quot;text/css&quot;&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;#ddzone {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;width:483px;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;height:298px;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;border-radius: 30px;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;background:#53a7ea;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;transition:all 0.3s ease;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;opacity:0.8;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;#ddzone_descriptor:hover&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;{&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;cursor:pointer;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;opacity:0.6;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;#ddzone_descriptor {&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;text-align: center;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;padding-top: 30%;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;lt;/style&amp;gt;&lt;br /&gt;......기타 등등의 html코드......&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;div id=&quot;ddzone&quot; v-if=&quot;!show&quot; &amp;gt; // 여기가 Vue 코드가 적용되어있는 코드죠!&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;p id=&quot;ddzone_descriptor&quot;&amp;gt; Drag &amp;amp; drop your file here.&amp;lt;/p&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;lt;/div&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;.... 기타 등등의 html 코드 .....&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이렇게 작성하니&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Uncaught TypeError: Cannot set property 'ondragenter' of null&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&amp;nbsp; &amp;nbsp; at window.onload (updates.html:120)&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이런 에러를 내뱉더라구요 이런 나쁜쉐키 -_-;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;확인해보니 다음코드랑 충돌이 발생했습니다.&lt;/p&gt;&lt;p id=&quot;more34_2&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_2','충돌 발생한 Vue.js코드','접기'); return false;&quot;&gt;
        충돌 발생한 Vue.js코드    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_2&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;var app = new Vue({&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; el: '#****', // 보안처리&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; data: {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; services: services,&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; files: files,&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; show: true&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; },&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; methods: {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; selectedService: function (service) {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cacheFileName = service;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; files.splice(0, files.length);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; axios.get('/updates/services/' + service)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .then(function (response) {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (var i = 0; i &amp;lt; response.data.length; i++)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; files.push(response.data[i]);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .catch(function (error) {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log(&quot;selectedService&quot; + error);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; toshow: function () {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.show = !this.show;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; download: function (file) {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var a = document.createElement('a');&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a.setAttribute('href', '***' + cacheFileName + '/' + file); // *** 보안처리&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a.click();&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; }&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;});&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;별에 별 짓을 다해봤습니다&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;onDragEnter로도 바꿔보고, addEventListener로도 바꿔보고 사용하지 말라고 했지만 혹시 몰라서 JQuery로도 작업을 해봤는데 계속 작동하지 않더라구요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;키워드로 &quot;Vue.js 2.0 drag and drop when file upload&quot;로 검색하니&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;npm을 이용해서 업로드하는 예제, 오픈소스만 주구장창 나왔습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;npm을 이용해서 했으면 React썻지 이사람아..&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그러다 이렇게 설정해주니 되더라구요.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;일단 작동하지 않는 Javascript 코드를 일부 삭제했습니다.&lt;/p&gt;&lt;p id=&quot;more34_3&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_3','삭제한 JS코드','접기'); return false;&quot;&gt;
        삭제한 JS코드    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_3&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;window.onload = function() {&lt;/b&gt;&lt;/strike&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var dropzone = document.getElementById(&quot;dropzone&quot;);&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;dropzone.ondragover = dropzone.ondragenter = function(event) {&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.stopPropagation();&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.preventDefault();&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;dropzone.ondrop = function(event) {&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.stopPropagation();&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;event.preventDefault();&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p2&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;var fileArray = event.dataTransfer.files;&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;for(var i=0;i&amp;lt;fileArray.length;i++) {&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;sendFile(fileArray[i]);&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;strike&gt;&lt;b&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;}&lt;/b&gt;&lt;/strike&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;p1&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;그동안 즐거웠다. 다음에 쓸 기회가 오면 써줄게.&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그리고 Vue.js에 한개의 메소드를 추가했고,&amp;nbsp;기존의 div코드에도 코드를 일&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;부 수정해줬습니다.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p id=&quot;more34_4&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_4','추가된 부분.','접기'); return false;&quot;&gt;
        추가된 부분.    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_4&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;div id=&quot;ddzone&quot; v-if=&quot;!show&quot; @dragover.prevent @drop=&quot;drop&quot;&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;p id=&quot;ddzone_descriptor&quot;&amp;gt; Drag &amp;amp; drop your file here.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;drop: function(event) {&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; event.stopPropagation();&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; event.preventDefault();&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var fileArray = event.dataTransfer.files;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for(var i=0;i&amp;lt;fileArray.length;i++) {&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sendFile(fileArray[i]); // sendFile함수는 그대로 사용합니다!&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;}&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이렇게해서 Front-end부분은 마무리지었습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이제 남은건 Back-end인데,&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Maven에 다음 코드를 넣어줍니다.&lt;/p&gt;&lt;p id=&quot;more34_5&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_5','Maven dependency','접기'); return false;&quot;&gt;
        Maven dependency    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_5&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;		&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;white-space: pre; color: rgb(0, 0, 0);&quot;&gt;			&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;groupId&amp;gt;com.amazonaws&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;white-space: pre; color: rgb(0, 0, 0);&quot;&gt;			&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;artifactId&amp;gt;aws-java-sdk&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;white-space: pre; color: rgb(0, 0, 0);&quot;&gt;			&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;version&amp;gt;1.11.170&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;white-space: pre; color: rgb(0, 0, 0);&quot;&gt;		&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;그리고 사용하시는 Controller에 @RestController 어노테이션을 적용해주시고,&lt;/p&gt;&lt;p id=&quot;more34_6&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_6','RequestMapping','접기'); return false;&quot;&gt;
        RequestMapping    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_6&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p style=&quot;text-align: left;&quot;&gt;다음과 같은 PostMapping을 하나 만들어주죠. (이걸 Put메소드로 바꿔야되네요;; 지금보니 ㅋㅋㅋ)&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;@PostMapping(path = &quot;/{service}/upload&quot;)&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; public List&amp;lt;PutObjectResult&amp;gt; upload(@PathVariable String service ,@RequestParam(&quot;file&quot;) MultipartFile[] multipartFiles) {&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; logger.info(&quot;{}/upload : {}&quot;,service,multipartFiles);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return s3Wrapper.upload(service,multipartFiles);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;s3Wrapper는 .. 알아서 만드시고..&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;upload메소드는 다음과 같습니다.&lt;/p&gt;&lt;p id=&quot;more34_7&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_7','upload메소드.','접기'); return false;&quot;&gt;
        upload메소드.    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_7&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;private PutObjectResult upload(String service , MultipartFile multipartFile) throws IOException{&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ObjectMetadata metadata = new ObjectMetadata();&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; metadata.setContentLength(multipartFile.getSize());&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; metadata.setContentType(multipartFile.getContentType());&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; InputStream inputStream = multipartFile.getInputStream();&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PutObjectRequest putObjectRequest =&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; new PutObjectRequest(&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bucket+&quot;/&quot;+service,&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; multipartFile.getOriginalFilename(),&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inputStream,&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; metadata&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; );&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PutObjectResult putObjectResult = amazonS3Client.putObject(putObjectRequest);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; IOUtils.closeQuietly(inputStream,null);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; logger.info(&quot;upload({},{}) : {}&quot;,service,multipartFile,putObjectResult);&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return putObjectResult;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; }&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;코드를 자세히 보신분은 이해가실테지만, 호출하는 메소드는 Multipart[]를 전달인자로 보내주는데, 받는곳은 Multipart 하나의 인스턴스로만 받습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;upload(Multipart[] multiparts) 메소드를 하나 만드시고, 위의 메소드를 length만큼 호출하는 메소드를 만들어주시면 됩니다! :)&lt;/p&gt;&lt;p id=&quot;more34_8&quot; class=&quot;moreless_fold&quot;&gt;
    &lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;toggleMoreLess(this, '34_8','전 이렇게 짯어요','접기'); return false;&quot;&gt;
        전 이렇게 짯어요    &lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;content34_8&quot; class=&quot;moreless_content&quot; style=&quot;display: none;&quot;&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; public List&amp;lt;PutObjectResult&amp;gt; upload(String service , MultipartFile[] multipartFiles) {&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; List&amp;lt;PutObjectResult&amp;gt; putObjectResults = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Arrays.stream(multipartFiles)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .filter(multipartFile -&amp;gt; !StringUtils.isNullOrEmpty(multipartFile.getOriginalFilename()))&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .forEach(multipartFile -&amp;gt; {&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; try {&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; putObjectResults.add(upload(service , multipartFile));&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } catch( IOException ioe) {&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; logger.error(&quot;upload({} , {}) - {}&quot;,service,multipartFiles,ioe);&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; logger.info(&quot;upload({},{}) : {}&quot;,service,multipartFiles,putObjectResults);&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return putObjectResults;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;코드 보시면 아시겠지만, 쓸때없는 코드라고 생각되는 부분이 조금 있습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;지우시고 사용하셔도 됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이렇게 작성하면 정상작동합니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;보안상 문제로 많은 코드를 보여드릴 순 없었지만 핵심적으로 제가 맞이했던 에러들과, 작동에 필요한 코드를 모두 포함해드렸습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;ㄷㅐ학교 다닐때는 시간이 널널해서 포스팅 하나하나에 많은 정성을 기울여 포스팅 하고 그랬는데..&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;이제는 시간도 없고 코딩할 시간도, 잠 잘 시간도, 모두 부족하니 대충대충 핵심만 적게 되네요 ㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;제가 좀 더 개발을 잘하게되서 시간이 넉넉해지면 선생님의 마음으로 한땀한땀 알려드릴게요!&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;궁금한 점 있으시면 댓글 주세요!(언제 볼 진 잘 모르겠습니다.)&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;즐거운 주말 보내세요~ :')&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Web</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/34</guid>
<comments>https://kwongyo.tistory.com/34#entry34comment</comments>
<pubDate>Sun, 03 Sep 2017 14:15:38 +0900</pubDate>
</item>
<item>
<title>802.11 관리동작 - 스캐닝 두번째 이야기.</title>
<link>https://kwongyo.tistory.com/31</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;이전 포스팅에서 스캐닝 파라미터에 대해서 알아봤습니다.&lt;/p&gt;&lt;p&gt;스캐닝의 종류에는 능동스캐닝과 수동스캐닝이 있다고 말씀드렸습니다.&lt;/p&gt;&lt;p&gt;이 아이디어는 어디에나 있는 아이디어입니다. 우리가 옷가게에 갔을경우, 박물관에 갔을경우 요즘엔 자동차들끼리 정보를 교환 한다거나 이런경우에 사용할 수 있습니다. 즉 나와 이웃해있는 노드들을 발견하는 아이디어에 사용되는 것이죠.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;1) 수동 스캐닝.&lt;/p&gt;&lt;p&gt;수동스캐닝은 처음 채널에 접속했을 때 패킷을 전송하지 않기 때문에 배터리 전력 소모를 절감할 수 있습니다.&lt;/p&gt;&lt;p&gt;패킷을 전송하지 않는다는 것은 각 채널을 옮기면서 비콘 프레임(광고 메시지)을 기다린다는 말이죠.&lt;/p&gt;&lt;p&gt;광고 수신하면&amp;nbsp;해당하는 패킷에는&amp;nbsp;BSS에 대한 정보가 포함되어 있습니다.&lt;/p&gt;&lt;p&gt;그러면 스테이션은 BSS의대한 정보(파라미터)를 추출하여 통신가능한 상태가 됩니다.&lt;/p&gt;&lt;p&gt;즉 수동스캐닝은 특정한 광고 메시지가 들린다면 어느 AP(ㄴㅔ트워크)에 포함되어 있다는것을 알게 되는겁니다.&lt;/p&gt;&lt;h4 style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:616px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/23416D39583457D40A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스캐닝-수동스캐닝 세개의 비콘 수신.png&quot; height=&quot;397&quot; width=&quot;616&quot;/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;위의 그림을 보면 클라이언트가 와이파이를 활성화하면 스테이션은 프로브 지연을하게되고, 최소 채널 시간동안 수동 스캐닝을 하게됩니다.&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;수동 스캐닝동안 AP1 , AP2 , AP3의 비콘메시지를 듣게되는데요. 이 클라이언트는 AP4번의 비콘은 듣지 못합니다. 그렇다는건 4번의 BSS영역에는 포함되어있지 않다는것을 의미합니다.&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;즉 위의 클라이언트는 AP1,2,3의 영역에 있기 때문에 자신의 위치를 좀 더 정확히 알 수 있게됩니다.&amp;nbsp;&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;이건 즉, 어느 특정한 장소에서 와이파이를 켜시면 좀 더 정확한 위치를 측정할 수 있습니다! 라고 종종 보는것과 같은 의미입니다.&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;GPS는 오차범위가 50미터 이상이지만 AP는 수신 도달거리가 50미터 이하입니다. 또한 각각 AP에 겹치&lt;/span&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;는것은 그만큼 좀 더 정확한 위치를 알 수 있다는것을 의미합니다. 또한 이 정보는, 해당의 클라이언트가 몇층에 있다는것을 알 수도 있는 정보가 되는것이죠!&lt;/span&gt;&lt;br /&gt;&lt;/h4&gt;&lt;p&gt;그래서 우리가 코딩할때도 누가 누구를 찾을지 정하는것이 제일 중요한 문제입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하지만 수동 스캐닝을 하다가 기다려도 AP가 없다면!? 아니면 너무나도 급한 상황이면?!&lt;/p&gt;&lt;p&gt;능동 스캐닝을 이용해야 합니다.(핸드폰에서 블루투스를 키면 바로 능동스캐닝을 시작합니다.)&lt;/p&gt;&lt;p&gt;2) 능동 스캐닝&lt;/p&gt;&lt;p&gt;스테이션(클라이언트)이 스캐닝을 위한 프레임을 전송 하는 것 입니다.&lt;/p&gt;&lt;p&gt;예를들면 각 채널에서 특정 이더넷 네트워크 (iptime , olleh-5G와 같은 SSID)에게 응답을 얻기 위하여 프로브 요청 프레임을 전송합니다. - 이것은 이전에 공부한 간청메시지와 같습니다.&lt;/p&gt;&lt;p&gt;네트워크가 전송하는 것을 듣기 위하여 기다리지 않고, 스테이션이 직접 네트워크를 찾아 내는 형태의 스캐닝입니다.&lt;/p&gt;&lt;p&gt;그럼 능동스캐닝의 절차를 알아보죠!&lt;/p&gt;&lt;p&gt;1. 특정 채널로 옮겨서 다음의 조건을 확인합니다.&lt;/p&gt;&lt;p&gt;&amp;nbsp;1.1 채널의 프레임이 전송중인지 확인합니다. - &amp;gt; 채널에 프레임이 전송중이라는것은 이 채널에는 나 말고도 다른놈이 존재한다! 라고 인식하면 됩니다. ( AP든 스테이션이든! )&lt;/p&gt;&lt;p&gt;&amp;nbsp;1.2 채널이 프로브 지연 시간동안 비어있는지 확인해야합니다 -&amp;gt; AP가 있는지 없는지 모르기때문에 바로 프로브 지연 시간동안 대기한 후, 요청을 보내고 바로 다음 네트워크로 이동합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;2.능동스캐닝은 기본적인 DCF접근 절차를 이용하여 매체에 접근하여 프로브 요청 메시지를 전송합니다&lt;/p&gt;&lt;p&gt;3.최소 채널 시간동안 대기합니다.&lt;/p&gt;&lt;p&gt;&amp;nbsp;3.1 프로브요청을 보내고 최소 채널 시간동안 매체가 사용중이지 않ㄷㅏ면 매체가 사용중이지 아니라는것입니다.&lt;/p&gt;&lt;p&gt;&amp;nbsp;3.2 만약 매체가 최소 채널시간동안 사용중이라면, 최대 채널시간동안 기다리며 모든 프로브 요청 프레임을 처리합니다.&lt;/p&gt;&lt;p&gt;-&amp;gt;&amp;nbsp;이 경우에서는 능동 스캐닝을 이용하여 &quot;이 주변에 누구 있습니까! &quot;라고 메시지를 보냈는데, 매체는 해당 메시지를 수신했고 답장을 보내고 싶지만 DCF시간동안 기다렸지만, 계속 경쟁에서 진다면 AP가 보내는 응답을 스테이션은 수신하지 못하게 되는거죠. 이 경우에 최대 채널시간동안 기다리게 됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 이야기에서 간청 메시지와 광고 메시지와의 차이가 있다면 ㅇㅓ떤것일까요?&lt;/p&gt;&lt;p&gt;스테이션은 간청메시지를 보내게 된다면 광고메시지를 응답으로 보내줍니다.&lt;/p&gt;&lt;p&gt;스캐닝에서는 채널에 접속하면 비콘메세지를 수신하게 되고, 만약 스테이션이 비콘메시지를 수신하지 못한다면 스테이션은 프로브요청을 보내게됩니다. 여기에서 AP는 응답으로 비콘메시지를 보내는것이 아니라 프로브응답을 보내게됩니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;정리해봅시다.&lt;/p&gt;&lt;p&gt;무선으로 주변에 있는 누군가를 발견한다는것은&lt;/p&gt;&lt;p&gt;1. 스테이션이 채널에 접속할때 프로브 지연시간동안 기다리며,&amp;nbsp;AP는&amp;nbsp;비콘을 발송해야 합니다.&lt;/p&gt;&lt;p&gt;2. 스테이션은 그 비콘을 듣고 주변에 누가 있는지 알아냅니다.&lt;/p&gt;&lt;p&gt;3. 이걸 기다리지 못한다면 프로브요청(간청 메시지)를 보냅니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:742px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/25545E4658345FA32B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2016-11-23 오전 12.08.32.png&quot; height=&quot;473&quot; width=&quot;742&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;두 개의 BSS에 의한 다중 프로브 응답 전송 예.&lt;/p&gt;&lt;p&gt;이동 스테이션은 AP1,AP2를 찾기 위하여 프로브요청을 보내게됩니다. 여기에서 응답은 DIFS동안 기다리고 프로브 응답이 날라옵니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;-&amp;gt;여기에서 프로브 응답은 Atomic(동기)될 수 없습니다. 그 이유는 해당 스테이션이 존재의 유무를 모르기 때문이죠. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;프로브 응답이 오기 전에, 최소 채널&amp;nbsp;시간동안 스테이션은 대기합니다. 최소 채널 시간동안 스테이션은 기다립니다. 이 최소 채널시간동안 기다렸는데 아무런 대답이 없다면 이 채널에는 아무도 존재하지 않는것입니다.&lt;/p&gt;&lt;p&gt;하지만 이 채널시간에 누군가 떠든다면 일반 데이터일 수도 있고 프로브 응답일 수 있습니다. 즉 누군가 떠들었다는것은 해당 채널에 AP든 스테이션이든 누군가 존재한다는 말이 되는거죠. 그럼 누군가 떠들었던 데이터에 대해서 ACK를 전송합니다.&lt;/p&gt;&lt;p&gt;18:32&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/31</guid>
<comments>https://kwongyo.tistory.com/31#entry31comment</comments>
<pubDate>Wed, 23 Nov 2016 00:46:11 +0900</pubDate>
</item>
<item>
<title>802.11 관리동작 - 스캐닝의 첫번째 이야기. 스캐닝 파라미터</title>
<link>https://kwongyo.tistory.com/30</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p&gt;안녕하세요~ 포스팅을 정말 오랜만에 하네요.&amp;nbsp;&lt;/p&gt;&lt;p&gt;그동안 돈에 눈이 멀어&amp;nbsp;외주도 정말 많이하고. 넥스터즈 활동도 하고~ 그동안 개발하던 앱도 업데이트하고~ 하나는 마무리하여 런칭을 앞두고 있어서 여유가 생겼네요ㅎㅎ&lt;/p&gt;&lt;p&gt;아! 런칭한 앱은 Gola~ 라는 먹거리 월드컵 앱입니다. 디자이너가 직접 디자인하여 깔끔한 UI를 갖고있는데요 . iOS, Android 둘 다 제공하고 있으니 한번 사용해보세요 ㅎㅎ&lt;/p&gt;&lt;p&gt;내일 새로운 외주 미팅이 있는데 외주가 성사되면 다시 얼마동안 안보일터이고~ 성사되지 않는다면 자주 찾아뵐 수 있겠네요 ㅋㅋㅋ&lt;/p&gt;&lt;p&gt;블로그는 항상 머리속에 &quot;이번주엔 포스팅을 시작해야지!!! &quot; 하고 있었지만&amp;nbsp;많은 정보를 한번에 포스팅하려니 겁을먹고 미루고 미루다 한가지 결심을 했습니다.&lt;/p&gt;&lt;p&gt;그 결심은 , 이제는 한 주제에 대해서&amp;nbsp;짧고 짧고 짧고!! 간략하게!(중요하죠.) 자세하도록 하나씩 포스팅하는게 좋겠다!! 라는거죠ㅋㅋㅋㅋㅋㅋ&amp;nbsp;&lt;/p&gt;&lt;p&gt;오늘은 스캐닝을 공부하면서 인터넷에 수 많은 키워드로 검색을 해봤는데, 아! 여기다! 싶을정도로 자세하게 적어놓은 글이 없더라구요.&lt;/p&gt;&lt;p&gt;답답한 나머지 스캐닝부분은 완벽하게 정리해서 올리겠다! 라는 마음을 갖게 되었습니다! 포스팅&amp;nbsp;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;시작하죠.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;우리가 인터넷을 사용할 때 유선을 사용한다고 하면 먼저 랜선을 벽에 있는 포트에 잭을 꽂는게 우선이죠? 무선에서는 접속 가능한 네트워크를 찾습니다.&lt;/p&gt;&lt;p&gt;이런 특정 영역에 존재하는 네트워크를 식별하는 과정을 스캐닝이라고 합니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;스캐닝은 검색하다,찾는다 라는 의미입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;스캐닝을 하기 위해선 무엇을 찾아라~~ 라고 명령할 수 있는 파라미터가 필요합니다.&lt;/p&gt;&lt;p&gt;조건에 맞는 네트워크를 찾기 위하여 파라미터가 필요한것이죠. 파라미터는 다음과 같습니다~!&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.&lt;/b&gt; BSSType&amp;nbsp;&lt;/p&gt;&lt;p&gt;인프라스트럭쳐 BSS를 찾아라, IBSS를 찾아라. 둘 다 찾아라.&lt;/p&gt;&lt;p&gt;이와 같이 BSSType는 기존에 여러분들이 생각했던거와 같이 2가지가 아니라 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;세가지&lt;/span&gt;입니다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.&lt;/b&gt; BSSID&amp;nbsp;&lt;/p&gt;&lt;p&gt;BSSID의 값을&amp;nbsp;대표적으로 AP의 물리주소를 사용합니다..&lt;br /&gt;그렇기때문에, 특정 AP만 찾아라, 혹은 모든 AP만 찾아라 라고 명령할 수 있습니다.&lt;/p&gt;&lt;p&gt;이 값을 특정한 AP의 물리주소로 사용할 수 있다고 했는데요. 이 뜻은 집에 왔을땐 내가 등록한 물리주소, 즉 집에 있는&amp;nbsp;AP의 물리주소만 등록하여 집에있는 AP들만 잡아라~~ 라고 할 수 있습니다. 즉 나쁜마음을 갖고있는 이웃집에서 전송하는 AP는 잡지 말라고도 설정할 수 있죠. (반대로 물리주소를 사용하기 때문에 브로드캐스트 주소로 사용할 수 있죠.)&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.&lt;/b&gt; SSID&amp;nbsp;&lt;/p&gt;&lt;p&gt;BSSID는 맥 주소로 6바이트입니다. 이 값을 외우고 다니는사람은 없겠죠??ㅋㅋ 그렇기 때문에 나온것이 SSID입니다. 이 값은 인간을 위해서 나온값입니다. iptime / Olleh-5G와 같이 특정한 장소에 물어봤을 때, 친구보고 &quot;야! 여기 와이파이 이름 뭐야!?&quot;할 때 알려주는 이름이 SSID입니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;스캔유형에는 능동스캐닝/수동스캐닝 두 종류가 있습니다.&lt;/p&gt;&lt;p&gt;능동스캐닝 &amp;nbsp;- 스테이션(장치,기기,핸드폰(모바일))에서 AP에게 정기적으로 프로브 프레임 요청을 보내는것입니다. (보통 각 회사(휴대폰 기술)마다 다른데 비콘프레임이라고 부르는 회사도 많습니다.) 이건 이전에 공부한 ICMP 간청메시지와 비슷하죠.&amp;nbsp;&lt;/p&gt;&lt;p&gt;수동스캐닝 - 스테이션이 AP에게 프레임 요청을 보내지 않고 데이터를 수신하기만 하는것을 수동스캐닝이라 부릅니다. 이건 ICMP 라우터 광고메시지와 비슷하죠.&amp;nbsp;&lt;/p&gt;&lt;p&gt;스캐닝을 통하여&amp;nbsp;내가 어떤 AP 혹은 기지국에 포함되어있는지를 알아낼 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;옛날 나온 영화중 &amp;nbsp;마이너리그 리포트라는 영화가 있었죠. 이 영화를 보면&amp;nbsp;톰 크로즈가 악당에게서 도망가던 중 어느 쇼핑몰에 들어간 장면이 나옵니다. 그 쇼핑몰에서는 톰 크루즈가 보는곳마다&amp;nbsp;&quot;~~ 님 이 제품 사세요!&quot; 라는식의 광고를 계속해서 보여주죠. 이 장면은 지금 이 시점에서 모두 구현이 되어있습니다. &amp;nbsp;요즘 백화점에 들어가면 핸드폰에 &quot;~~제품 **%할인중입니다!&quot; 라고 푸쉬가 날라오기도 하며 시럽어플을 사용하면 근처의 음식점을 지나갈때도 푸쉬를 날려줄때도 있습니다. 이런 푸쉬 알람들은 비콘에서 사용자의 디바이스에게 할인정보를 전송해주는것인데요. 이 개념은 수동스캐닝에서 발생된 개념을 활용한 실생활의 예입니다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.&lt;/b&gt; 채널목록.&lt;/p&gt;&lt;p&gt;이 파라미터를 보는순간 네트워크에는 특정한 채널 목록이 있구나~~ 라고 생각이 바로 듭니다. 아!&amp;nbsp;혹시 여러분은 집에서 사용하는 공유기의 채널을 설정해본적이 있으신가요?&amp;nbsp;&lt;/p&gt;&lt;p&gt;보통 모든 집에서 iptime을 많이 사용하죠. 저희 집에서도 iptime을 사용하는데요. iptime은 특별하게 가상 IP주소에서 채널을 설정할 수 있게끔 제공해줍니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;소비자가 채널을 설정하지 않는다면 공장에서 기본적으로 제공해주는 채널을 사용하게됩니다. 보통 1번대 채널을 많이 사용하죠. (실제로 채널 설정페이지로 들어가면 1번채널을 사용하고 있는 AP의 숫자가 굉장히 많습니다 )&lt;/p&gt;&lt;p&gt;AP가 제공하는 2.4Ghz에서는 1번부터 13번까지의 채널을 사용할 수 있습니다.(겹치지 않는 채널은 3개이며, KT에서는 4개를 제공해준다고 합니다!)&lt;/p&gt;&lt;p&gt;채널목록이 있다는 것은&amp;nbsp;1번채널을 뒤져라, 2번채널을 뒤져라&amp;nbsp;혹은 모든채널을 뒤져라 ! 라고 명령을 줄 수도 있는것이죠.&lt;br /&gt;802.11ac를 지원한다면 5Ghz를 사용할 수 있는데요. 이 5Ghz가 제공하는 채널 갯수는 24개입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;이와같이&amp;nbsp;채널들이 13개, 24개 이렇게 존재하니 사용자는 사용하기를 원하는 특정 채널목록 파라미터값을&amp;nbsp;주고, 원하는 채널만&amp;nbsp;스캔할 수도 있으며, 모든 채널을 찾을수 있습니다. 이런 채널목록을 알고있으면 원하는 채널에만 붙도록 하게끔 할 수 있다는 사실을 꼭 명심하세요!&lt;/p&gt;&lt;p&gt;-&amp;gt; 기본값은 모든 채널을 찾는것입니다. 그렇기 때문에 종종 wifi구역에 들어가도 wifi가 조금 늦게뜨는 경우는 채널을 탐색하기 때문에 늦게 출력되는겁니다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;5.&lt;/b&gt; 프로브 지연.&lt;/p&gt;&lt;p&gt;프로브는 탐사,탐침라는 뜻을 갖고있습니다.&amp;nbsp;스테이션은&amp;nbsp;해당 채널에 들어와서, 일정 시간동안&amp;nbsp;남의 소리가 안 들리면 프로브요청을 보냅니다. ( 광고가 안들리면 간청을 보내죠.) 이 말은 수동스캐닝을 하다가 아무 말도 안들린다면 능동스캐닝을 한다는 뜻이죠.&lt;/p&gt;&lt;p&gt;여기에서 일정 시간동안 남의 소리가 안들린다는것은 최소 채널 시간동안 다른 무선매체가 떠드는지 검사한다는 것인데요. &amp;nbsp;프로브 요청을 보내기 위해서 기다리는 시간을 프로브 지연이라고 합니다.&lt;/p&gt;&lt;p&gt;즉. 스테이션은 특정한 채널에 접속하자마자 능동 스캐닝을 발생시키지 않습니다. (프로브 요청을 보내지 않습니다.) 잠시 기다렸다가 광고가 없으면 프로브 요청을 보냅니다.&lt;/p&gt;&lt;p&gt;&lt;b&gt;여기에서 사용하는 파라미터가 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;최소 채널 시간과 최대 채널 시간&lt;/span&gt;입니다.&amp;nbsp;&lt;/b&gt;스테이션은 최소 채널 시간 지연 및 최대 채널 시간을 지정해야합니다.&lt;/p&gt;&lt;p&gt;스테이션이 새로운 채널에 접속했을 때 처음은 프로브지연을 합니다. 즉 프로브 지연을 할 때 수동 스캐닝을 하는것이죠. 수동 스캐닝을 할 때, AP가 존재한다는 뜻은&amp;nbsp;내 주변에 하나 이상의 무선장치가 있다는 뜻입니다.&lt;/p&gt;&lt;p&gt;이 이야기는 현재 스테이션의 상태가 IBSS를 스캐닝하는것인지, 아니면 인프라스트럭쳐 BSS를 스캐닝하는것인지 모르기 때문에 하나 이상의 무선장치가 있어야 하는것이죠.&lt;/p&gt;&lt;p&gt;내 주변의 하나 이상의 무선장치가 있다면 광고/간청메시지를 보내거나 다른 메시지를 보내겠죠. 즉&amp;nbsp;적어도 하나 이상의 무선장치가 존재한다면 최소 시간만 기다리면 그 무선장치가 특정한 신호를 발생시킬것이다. 라고 인식할 수 있습니다. 이 이야기는 내 주변에 무선기기가 있다면&amp;nbsp;최소 시간동안 어떤 무선장치가 반드시 떠들것이다 라는 이야기가 되는것인데요. 만약 무선장치가 떠든다면 그때부터 광고메시지가 전송될때까지 기다리면 됩니다.&lt;/p&gt;&lt;p&gt;그럼 최소 채널 시간동안에만 기다리면 되는데, 최대 채널 시간은 왜 필요할까요?&lt;/p&gt;&lt;p&gt;최대 채널 시간은, 광고메시지나 데이터 프레임이 우선순위에 계속해서 밀릴 경우, 광고메시지를 받지 못할 만한 경우가 발행할 수 있기 때문입니다.(경쟁에서 계속 질 경우.)&lt;/p&gt;&lt;p&gt;자. 요약해보죠&lt;/p&gt;&lt;p&gt;스테이션은 AP만(인프라스트럭쳐 BSS만)&amp;nbsp;찾고있다고 가정하고, 스테이션은&amp;nbsp;새로운 채널에 접속해서 최소 채널 시간동안 기다렸습니다. 그러다가 다른 무선매체가 떠드는것은 들립니다. 하지만 광고메시지는 들어오지 않죠.(패킷이 최대 채널 시간동안 경쟁에서 계속 지기때문에)&amp;nbsp;그럴 경우 스테이션은 여기 근처에 AP가 있느냐! 라는 간청메시지를 보낼 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;다음 포스팅은 수동스캐닝/능동스캐닝에 대해서 좀 더 자세하게 알아보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>OSI7계층(통신 프로토콜)</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/30</guid>
<comments>https://kwongyo.tistory.com/30#entry30comment</comments>
<pubDate>Tue, 22 Nov 2016 03:31:39 +0900</pubDate>
</item>
<item>
<title>NEXTERS 활동 3주차. HttpRequest 제대로 사용하기.</title>
<link>https://kwongyo.tistory.com/29</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 36pt;&quot;&gt;NEXTERS 3주차&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;HttpRequest 사용하기.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;8기 개발자 권기호.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;서론&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Android 환경에서 서버와 통신을 해야 하는 경우가 종종 있습니다. &amp;nbsp;여러분들은 어떤 모듈을 사용하여 서버와 통신하시나요?&amp;nbsp;&lt;/p&gt;&lt;p&gt;제가 처음 맞이했던 API는 Apache의 HttpClient였어요! 그래서 이번 3주차 활동에서는 Apache의 HttpClient를 이용한 서버와 통신하는 원리, 사용 방법 등을 알려드리고 싶었는 데... 오랜만에 보니… &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2149D142578B759206&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-deprecatated.png&quot; height=&quot;296&quot; style=&quot;&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;* deprecated…. 가슴이 아프네요…&amp;nbsp;&lt;/p&gt;&lt;p&gt;그러므로 이번 주는 HttpClient에서 HttpRequest로 주제가 변경되었습니다. &amp;nbsp;&lt;/p&gt;&lt;p&gt;***&amp;nbsp;&lt;/p&gt;&lt;p&gt;그래도 혹시 사용해보고 싶으신 분들이 있을 것 같아 몇몇 자료를 첨부합니다! HttpClient를 사용하기 위해선 먼저 API를 설치해야 합니다. 아래 링크로 이동하여 소스를 다운로드 합시다. (전 4.5.2버전 사용합니다.) &amp;nbsp;아! 혼자 공부하시는 분들을 위하여 API 문서 링크를 따로 첨부했습니다. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;table class=&quot;txc-table&quot; width=&quot;864&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; style=&quot;border:none;border-collapse:collapse;;font-family:&quot; 맑은=&quot;&quot; 고딕&quot;,=&quot;&quot; sans-serif;font-size:13px&quot;=&quot;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;width: 180px; height: 24px; border: 1px solid rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;다운로드 링크&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 683px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;http://hc.apache.org/downloads.cgi&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 180px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;API문서 링크&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 683px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 180px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;튜토리얼 링크&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 683px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;%다운로드경로%\httpcomponents-client-4.5.2\tutorial\pdf&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 180px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;Gradle&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 683px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;android { useLibrary ‘org.apache.http.legaccy’ } 추가 dependencies { compile group: ‘org.apache.httpcomponents’ , name: ‘httpclient-android’, version: ‘4.3.5.1’ } 추가&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;HttpRequest 시작하기&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;처음부터 코드를 보기보단 조금 이론적인 부분을 보고 가는 것이 좋겠죠? &amp;nbsp;&lt;/p&gt;&lt;p&gt;Hyper-Text Transfer Protocol(HTTP)은 오늘날 인터넷에서 사용되는 가장 중요한 프로토 콜입니다. (다 아는 사실이죠) HTTP에 사용하는 여러 가지 메소드가 있습니다. HTTP/1.0 스 펙에 기재되어 있는 요청 방법에는 GET, HEAD, POST 방ㅇ식이 있으며 1.1 스펙에서 추가 된 PUT, DELETE, TRACE 방식이 있습니다. (다음 링크에 HTTP/1.1 스펙이 잘 설명되어 있네 요. – mindseye.tistory.com/145 )&amp;nbsp;&lt;/p&gt;&lt;p&gt;우리는 서버의 자원을 어떻게 사용하는지에 따라 GET, POST 방식를 많이 사용합니다. GET 방식은 “서버의 자원을 가져올 때 사용”합니다. 더 정확히는 한 트랜잭션이 진행되면 서 동기화 이슈를 불러 일으키지 않는 선에서만 사용됩니다. GET 방식의 사용법을 정확히 알게 되는 오늘은 서버의 자원을 가져올 때만 사용하는 것이 아니라 ‘한 트랜잭션에 대해 서 동기화 이슈에 위반되지 않을 경우’에 사용하면 됩니다. (GET 방식을 쓸 때 다양한 이 슈들이 존재합니다. 쿼리 스트링에 제한이 있기도 하죠!! 보안적인 문제도 있고~ㅋ 하지 만 웹 브라우저가 쿠키를 거부한다면…? 즉 스크릿 모드라면..? 등등? 이에 대해 고민하는 것은 여러분의 몫! )&amp;nbsp;&lt;/p&gt;&lt;p&gt;POST는 1.1스펙에 멱등 방식이 아닌, 즉 정확한 트래잭션을 가지고 있는 방식입니다. 그래서 GET방식과 다르게 POST는 동기화 이슈에서 안전합니다(Thread safe). 그렇기 때문 에 서버에 데이터를 insert, update, delete의 요청을 할 때에 POST 방식을 이용합니다. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;이와 같이 HttpRequest는 이 요청 방식들과 관련된 get, post, head, put 등 모든 메소드 들을 정적(static)으로 제공합니다! HttpRequest를 new 하지 않고도 사용할 수 있는 것이 죠~! 멋있어… 더 자세한 내용은 다음 페이지에서 설명하겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;HttpRequest는 모두들 “단 하나만의 클래스이며, 무척 가볍다”라고 이야기를 합니다. 저 는 “무척 가볍다”라는 말에는 동의하지만 단 하나의 클래스라는 말에는 동의하지 않습니 다. 외부에서 보기엔 단 하나의 클래스인건 맞지만 단 하나의 클래스 속에 여러 개의 정 적 네스티드 클래스(nested class)와 인터페이스(interface)가 정의되어 있기 때문이죠.&amp;nbsp;&lt;/p&gt;&lt;p&gt;참고로 소스를 확인해보시면 아시겠지만, HttpRequest는 java.net 패키지의 HttpURLConnection을 기반으로 하여 작동합니다. 이를 개발한 팀 역시 HttpURLConnection을 사용하는 Android 개발자들을 위하여 혹은 가벼운 성능의 HTTP 요청을 전송하는 개발자들을 위해 개발했습니다. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;HttpRequest를 이용한 코드 작성&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;HttpRequest는 여러 개의 네스티드 클래스와 인터페이스를 가지고 있습니다. 여러 개의 네스티드 클래스 중 제가 관심 있게 보고 있는 인터페이스가 있습니다. 바로 ConnectionFactory라는 인터페이스인데요~!! 이 인터페이스는 HttpRequest가 내부적으로 빌더(Builder) 디자인 패턴을 적용시키기 위하여 설계되어 있습니다. 또한 내부적으로 URL 클래스의 openConnection메소드를 호출하는 등 여러 모로 관심 덩어리입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;ConnectionFactory interface는 2개의 추상 메소드를 가지고 있고, 자기 자신을 구현한 멤버필드를 가지고 있습니다. (인터페이스에 싱글톤을 적용시켰네요!) HttpRequest 서버로 요청을 보낼 때 마다 새로운 HttpURLConnection을 생성합니다~! &amp;nbsp;이런 특별한 구조로 HttpRequest는 HTTP의 다양한 요청 방식을 구현해냅니다. HttpRequest를 파헤쳐 보는 것은 또한 여러분의 몫입니다. 다음 링크에서 소스를 확인해 보세요!(링크)&amp;nbsp;&lt;/p&gt;&lt;p&gt;이제 그 요청 방식들 중 HttpRequest를 이용하여 어떻게 GET 방식의 요청을 하는지 알 아봅시다. &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;GET&lt;/span&gt;&lt;/b&gt; &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:482px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2277113F578B773919&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get1.png&quot; height=&quot;33&quot; style=&quot;&quot; width=&quot;482&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;다음과 같이 URL을 설정해준 뒤, HttpRequest에 사용할 요청방식 GET을 나타내는 get 메소드를 호출합니다. HttpRequest에 포함되어 있는 HTTP 요청 방식 메소드들은 모두 static 메소드이므로, 따로 HttpRequest 인스턴스를 생성할 필요가 없습니다. &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:378px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/217D3E3E578B77662F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get2.png&quot; height=&quot;64&quot; style=&quot;&quot; width=&quot;378&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;get 메소드 내부에선 HttpRequest 객체를 생성해서 리턴해줍니다. &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:449px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2233C143578B77A929&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get3.png&quot; height=&quot;146&quot; style=&quot;&quot; width=&quot;449&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;HttpRequest&amp;nbsp;생성자에는&amp;nbsp;인자가 두 개 있습니다. 첫 번째 인자는 요청을 보낼 URL, 두 번째 인자는 요청에 사용할 메소드입니다. (여기에서 java.net 패키지의 URL클래스를 사용합니다.) &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:482px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2277113F578B773919&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get1.png&quot; height=&quot;33&quot; style=&quot;text-align: center;&quot; width=&quot;482&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;HttpRequest 객체 생성이 완료되었습니다. 이렇게 생성된 HttpRequest 객체는 서버로 요청을 보낼 모든 준비가 완료된 ‘준비된 객체’입니다. &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:351px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/235D9245578B781C0C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get4.png&quot; height=&quot;131&quot; style=&quot;&quot; width=&quot;351&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;이제 이 준비된 객체를 서버로 요청을 보내기 위해선 응답(response)을 받을 수 있는 메 소드를 호출하면 됩니다. &amp;nbsp;&lt;/p&gt;&lt;p&gt;위 그림에선 code()메소드를 호출했습니다. code()내부에선 getConnection()메소드를 호출 합니다. &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:302px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/276C254B578B784C22&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get5.png&quot; height=&quot;80&quot; style=&quot;&quot; width=&quot;302&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;getConnection()메소드는 createConnection()메소드를 호출하네요? 이 메소드는 무엇인지 따라가보면~! &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:509px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/261AA14F578B787310&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get6.png&quot; height=&quot;215&quot; style=&quot;&quot; width=&quot;509&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;내부적으로 HttpURLConnection 객체를 생성하는 것을 볼 수 있습니다. &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:568px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/26114748578B78A631&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-get7.png&quot; height=&quot;18&quot; style=&quot;&quot; width=&quot;568&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;CONNECTION_FACTORY는 ConnectionFactory객체입니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;이와 같이 응답의 정보에 따라 다양한 메소드를 이용할 수 있습니다. 서버가 보내주는 응답의 Header 정보를 확인하면 됩니다. Response Code를 확인해보는 code() 메소드, 응 답 메시지를 확인하는 body() 메소드, 통신이 성공했는지 확인하는 ok() 메소드가 있습니 다~!! 이렇게 서버의 응답을 확인하는 첫 메소드를 호출하는 순간 서버와 통신이 시작됩 니다. (두 번째부터 호출되는 메소드는 서버와 재 통신하지 않습니다.) &amp;nbsp;이제 위의 GET 방식과 더불어 POST 방식으로 요청을 전송하는 코드를 확인하겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;최종코드 &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:581px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/221FD150578B78E015&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-finalCode.png&quot; height=&quot;629&quot; style=&quot;&quot; width=&quot;581&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;주의 사항&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;· 해당하는 메소드들을 첫 번째로 호출할 당시 호출한 위치가&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; Android의 UI Thread or runOnUiThread()일 경우 NetworkOnMainThreadException이 발생&lt;/span&gt;합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;10 &amp;nbsp;&lt;/p&gt;&lt;p&gt;· &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;code(), ok()와 같은 메소드들은 첫 요청 이후 여러 번 재 호출해도 되지만 body() 메 소드는 한 번 호출 이후 재호출을 할 경우 IOException이 발생합니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;· 재 호출이 아니더라도&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; body() 메소드를 UIThread에서 호출할 경우 IOException이 발생&lt;/span&gt;합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;HttpRequest 객체를 이용해서 UIComponent에 직접 데이터를 갱신해 주면 좋지만 모 든 작업은 Worker Thread에서 처리 후, 최종 결과만 UIThread에 전달하시길 권고합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;마치며… POST 방식은 다음 장의 세션 유지하기에서 form data 전송과 함께 다시 한 번 더 보겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;HttpRequest의 UML &amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:780px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2455754A578B793B15&quot; filemime=&quot;image/jpeg&quot; filename=&quot;3주-uml.png&quot; height=&quot;423&quot; style=&quot;&quot; width=&quot;780&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;아! Multipart 종류들의 메소드들은 HttpRequest.part() 메소드를 사용하시면 됩니다!&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;table class=&quot;txc-table&quot; width=&quot;864&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; style=&quot;border:none;border-collapse:collapse;;font-family:&quot; 맑은=&quot;&quot; 고딕&quot;,=&quot;&quot; sans-serif;font-size:13px&quot;=&quot;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;width: 261px; height: 24px; border: 1px solid rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Maven Central&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 602px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&lt;span  style=&quot;font-size: 10pt; line-height: 107%; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 10pt;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 10pt; line-height: 107%;&quot;&gt;groupId&amp;gt;com.github.kevinsawicki&amp;lt;/&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 10pt; line-height: 107%;&quot;&gt;groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;font face=&quot;나눔바른고딕&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 11.4133px; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 10pt; line-height: 107%;&quot;&gt;&amp;lt;artifactId&amp;gt;http-request&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 10pt; line-height: 107%;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 10pt; line-height: 107%;&quot;&gt;&amp;lt;version&amp;gt;6.0&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span  style=&quot;font-size: 10pt; line-height: 107%; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 261px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;Not Maven environment&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 602px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 나눔바른고딕; font-size: 10pt; line-height: 107%;&quot;&gt;https://raw.githubusercontent.com/kevinsawicki/http-request/master/lib/src/main/java/com/github/kevinsawicki/http/HttpRequest.java&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 261px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 나눔바른고딕; font-size: 10pt; line-height: 107%;&quot;&gt;HttpRequest API&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 602px; height: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(204, 204, 204);&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span  style=&quot;font-size: 10pt; line-height: 107%; font-family: 나눔바른고딕;&quot;&gt;HttpRequest API - &lt;/span&gt;&lt;span  style=&quot;font-size: 10pt; line-height: 107%; font-family: &amp;quot;맑은 고딕&amp;quot;;&quot;&gt;&lt;a href=&quot;http://kevinsawicki.github.io/http-request/apidocs/index.html&quot;&gt;&lt;span style=&quot;font-size: 10pt; line-height: 107%; font-family: 나눔바른고딕;&quot;&gt;http://kevinsawicki.github.io/http-request/apidocs/index.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align:center;tab-stops:1.75pt&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;사용된 코드&lt;/span&gt;&lt;span  style=&quot;font-size: 24pt;&quot;&gt; &amp;amp; &lt;/span&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;도움된 사이트&lt;/span&gt;&lt;/b&gt;&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p &gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;HttpRequest - &lt;/span&gt;&lt;span &gt;&lt;a href=&quot;https://github.com/kevinsawicki/http-request&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;https://github.com/kevinsawicki/http-request&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p &gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;HttpRequest API - http://kevinsawicki.github.io/http-request/apidocs/index.html&lt;/span&gt;&lt;/p&gt;&lt;p &gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;HttpRequestProject(Android) – https://github.com/KwonGiho/HttpRequestProject&lt;/span&gt;&lt;/p&gt;&lt;p &gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;HttpRequestServer(J2EE) - https://github.com/KwonGiho/HttpRequestServer&lt;/span&gt;&lt;/p&gt;&lt;p &gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;HTTP1.1&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;스펙 한글판 &lt;span &gt;- mindseye.tistory.com/145&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;











&lt;/p&gt;&lt;p &gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;HTTP1.1 &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;스펙 &lt;span &gt;- &lt;/span&gt;&lt;/span&gt;&lt;span &gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc2616#section-2.2&quot;&gt;&lt;span style=&quot;font-size:
11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;https://tools.ietf.org/html/rfc2616#section-2.2&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:나눔바른고딕&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>NEXTERS</category>
<author>KwonGyo</author>
<guid>https://kwongyo.tistory.com/29</guid>
<comments>https://kwongyo.tistory.com/29#entry29comment</comments>
<pubDate>Sun, 17 Jul 2016 21:29:16 +0900</pubDate>
</item>
<item>
<title>NEXTERS 활동 1주차 - Git사용법.</title>
<link>https://kwongyo.tistory.com/28</link>
<description>&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- responsible --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-7210978367146574&quot;
     data-ad-slot=&quot;8898340803&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;NEXTERS 9&lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:22.0pt;;line-height:107%&quot;&gt;기 활동 &lt;span &gt;1&lt;/span&gt;주차&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:22.0pt;;
line-height:107%&quot;&gt;Git &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:22.0pt;;line-height:107%&quot;&gt;사용법&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;right&quot; style=&quot;text-align: right; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;활동 &lt;span &gt;1&lt;/span&gt;주차&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;right&quot; style=&quot;text-align: right; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;8&lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:11.0pt;line-height:
107%&quot;&gt;기 개발자 권기호&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;

















&lt;b&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%;font-family:&amp;quot;맑은 고딕&amp;quot;;mso-ascii-theme-font:minor-latin;
mso-fareast-theme-font:minor-fareast;mso-hansi-theme-font:minor-latin;
mso-bidi-font-family:&amp;quot;Times New Roman&amp;quot;;mso-bidi-theme-font:minor-bidi;
mso-ansi-language:EN-US;mso-fareast-language:KO;mso-bidi-language:AR-SA&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:line-break;page-break-before:always&quot;&gt;
&lt;/span&gt;&lt;/b&gt;

&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;margin-right: 11pt; text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:14.0pt;
;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:
107%&quot;&gt;의 기초&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;margin-right: 11pt; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;회사나 특정 돈이 걸려있는 프로젝트에서의 필요한 개발자의 역량은 이론보단 당장 사용 가능한 프로그래밍 언어 그리고
학습스피드 등등 있겠지만 &lt;span &gt;NEXTERS&lt;/span&gt;는 그런 관계로 묶여 있는 것이 아니니까 이론도 함께 보고 가겠습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;margin-right: 11pt; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:
11.0pt;line-height:107%&quot;&gt;의 핵심은 생각보다 별게 없습니다&lt;span &gt;. Git&lt;/span&gt;은&lt;span &gt; Subversion&lt;/span&gt;이나 &lt;span &gt;Perforce&lt;/span&gt;와 같은 &lt;span &gt;VCS&lt;/span&gt;를 사용하시던 분들이 아니면 쉽게 익힐 것 이라 생각합니다&lt;span &gt;. &lt;/span&gt;다른
&lt;span &gt;VCS&lt;/span&gt;는 인터넷이 가능한 환경에서만 커밋을 할 수 있지만&lt;span &gt;, Git&lt;/span&gt;은
인터넷이 연결되어 있지 않은 지하 혹은 비행기 안에서도 커밋이 가능합니다&lt;span &gt;. &lt;/span&gt;이건 오로지&lt;span &gt; Git&lt;/span&gt;형님만 구사할 수 있는 능력이죠&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;margin-right: 11pt; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:
11.0pt;line-height:107%&quot;&gt;은 모든 데이터를 &lt;span &gt;“&lt;/span&gt;저장하기 전&lt;span &gt;”&lt;/span&gt;의 체크섬&lt;span &gt;(&lt;/span&gt;해시&lt;span &gt;)&lt;/span&gt;를 구하고
그 체크섬으로 데이터를 관리합니다&lt;span &gt;. &lt;/span&gt;체크섬&lt;span &gt;(&lt;/span&gt;해시&lt;span &gt;)&lt;/span&gt;가 없이 어떠한 파일이나 디렉토리도 변경할 수 없습니다&lt;span &gt;. &lt;/span&gt;체크섬은
&lt;span &gt;Git&lt;/span&gt;에서 사용하는 가장 기본인&lt;span &gt;(Atomic)&lt;/span&gt;데이터 단위이자
&lt;span &gt;Git&lt;/span&gt;의 기본 철학입니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;margin: 0cm 11pt 8pt; text-indent: -11pt; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;은 &lt;span &gt;SHA-1&lt;/span&gt;해시를 사용하여
체크섬을 만듭니다&lt;span &gt;. &lt;/span&gt;처음 들어본 것 같지 않은 것 처럼 익숙한 &lt;span &gt;SHA-1.
Google&lt;/span&gt;에서 &lt;span &gt;API&lt;/span&gt;키를 발급받기 위하여 &lt;span &gt;SHA-1&lt;/span&gt;키를
콘솔에서 확인한 경험이 있는 개발자들은 익숙하겠죠&lt;span &gt;~.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;margin-right: 11pt; text-align: center; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:14.0pt;
;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:
107%&quot;&gt;의 상태&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin: 0cm 11pt 8pt 18pt; text-indent: -18pt; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-bidi-theme-font:
minor-latin&quot;&gt;1.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;Committed(git directory)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin: 0cm 11pt 8pt 18pt; text-indent: -18pt; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;mso-fareast-font-family:
Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span &gt;Committed&lt;/span&gt;란 데이터가
로컬 데이터베이스에 안전하게 저장되었다는 것을 의미합니다&lt;span &gt;.&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin: 0cm 11pt 8pt 18pt; text-indent: -18pt; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-bidi-theme-font:
minor-latin&quot;&gt;2.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;Modified(checkout &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;하고 파일들을 수정했지만&lt;span &gt; staging area&lt;/span&gt;에 추가하지 않은 상태&lt;span &gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin: 0cm 11pt 8pt 18pt; text-indent: -18pt; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-family:Wingdings;mso-fareast-font-family:Wingdings;mso-bidi-font-family:
Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;
&lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;M&lt;/span&gt;&lt;span &gt;odified&lt;/span&gt;란 수정한 파일을 아직 로컬 데이터베이스에
커밋하지 않은 것을 말합니다&lt;span &gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin: 0cm 11pt 8pt 18pt; text-indent: -18pt; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-bidi-theme-font:
minor-latin&quot;&gt;3.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;Staged(&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;파일을
수정하고 &lt;span &gt;Staging area&lt;/span&gt;에 추가&lt;span &gt;(add)&lt;/span&gt;한 상태&lt;span &gt;. )&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin: 0cm 11pt 8pt 18pt; text-indent: -18pt; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;mso-fareast-font-family:
Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Staged&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;란 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/22583F4B5776201D16&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git_status.png&quot; height=&quot;548&quot; style=&quot;&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:
line-break;page-break-before:always&quot;&gt;
&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
directory&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;는 &lt;span &gt;git&lt;/span&gt;이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳을 말합니다&lt;span &gt;. &lt;/span&gt;즉
&lt;span &gt;git&lt;/span&gt;의 핵심이라고 할 수 있죠&lt;span &gt;. &lt;/span&gt;이건 다른 컴퓨터에 있는
저장소를 &lt;span &gt;clone&lt;/span&gt;할 때 &lt;span &gt;git &lt;/span&gt;디렉토리가 만들어집니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;working
directory&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;는 프로젝트의 특정 버전을 &lt;span &gt;checkout&lt;/span&gt;한 것입니다&lt;span &gt;. git&lt;/span&gt;디렉토리는 지금 작업하는 디스크에
있고 그 디렉토리에 압축된 데이터베이스를 파일을 가져와서 워킹 디렉토리를 만듭니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;staging
area&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;는 &lt;span &gt;git&lt;/span&gt;디렉토리에
있습니다&lt;span &gt;. &lt;/span&gt;단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장합니다&lt;span &gt;.
&lt;/span&gt;종종 인덱스라 부르기도 하지만 &lt;span &gt;Staging Area&lt;/span&gt;라는 명칭이 표준이 되고 있습니다&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;방금 말한 것 처럼
&lt;span &gt;Git&lt;/span&gt;이 하는 일을 간단하게 말하자면 이렇습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;1.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;working directory&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에서 파일을 수정한다&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;2.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;staging area&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에 파일을 &lt;span &gt;stage&lt;/span&gt;해서
커밋할 스냅샷을 만든다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;3.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;staging area&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에 있는 파일들을 커밋해서 &lt;span &gt;git&lt;/span&gt;디렉토리에
영구적인 스냅샷으로 저장한다&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:16.0pt;
;line-height:107%&quot;&gt;Git &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:16.0pt;;line-height:
107%&quot;&gt;설치&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;백날 공부해봤자 사용하지
못하면 소용이 없죠&lt;span &gt;. &lt;/span&gt;그렇기 때문에 지금부턴 설치 한 뒤 진행하도록 하겠습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:107%&quot;&gt;리눅스에 설치하기&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;개발자로써의 개인 철학은
&lt;span &gt;“&lt;/span&gt;터미널 환경이 제공되는 프로그램이라면&lt;span &gt;, UI&lt;/span&gt;는 되도록 사용하지
말자&lt;span &gt;”&lt;/span&gt;라는 것이 개인 철학입니다&lt;span &gt;. &lt;/span&gt;그 이유는 &lt;span &gt;, &lt;/span&gt;어떤 이슈가 발생하고 그 이슈에 접근하기 위해선 가장 기본이 되는 것 들을 정확하게 알고 있어야 한다고 생각하기
때문입니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;1.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Fedora&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;yum install git-core&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;2.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Ubuntu – &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;데비안류 배포판은 &lt;span &gt;apt-get&lt;/span&gt;을
사용하면 됩니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;apt-get install git&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;3.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Mac &lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span &gt;&lt;a href=&quot;http://sourceforge.net/projects/git-osx-installer/&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;http://sourceforge.net/projects/git-osx-installer/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;sudo port install git-core
+svn +doc +bash_completion +gitweb&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;4.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Window&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;http://msysgit.github.com/&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:16.0pt;
;line-height:107%&quot;&gt;Git &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:16.0pt;;line-height:
107%&quot;&gt;초기 설정&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;웹&lt;span &gt;, &lt;/span&gt;게임과 같은 특정 서비스를 이용하기 위해선 사용자의 초기 정보가 필요하고&lt;span &gt;, &lt;/span&gt;초기
정보를 이용하여 회원가입을 진행합니다&lt;span &gt;. Git&lt;/span&gt;도 이와 같은 초기 회원가입&lt;span &gt;(config&lt;/span&gt;설정&lt;span &gt;)&lt;/span&gt;을 해줘야 하죠&lt;span &gt;. &lt;/span&gt;초기
설정은 이름과 같이 한번만 해주면 되고 사용하면서 바꿀 수 있는 명령어가 존재합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;b&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%;mso-fareast-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-bidi-theme-font:minor-latin&quot;&gt;1.&lt;span style=&quot;font-weight: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;!--[endif]--&gt;&lt;b&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;사용자 정보&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;을 설치하고 나서 가장 먼저 해야하는 일은 사용자의 이름과 이메일 주소를
설정하는 것입니다&lt;span &gt;. Git&lt;/span&gt;은 커밋할 때마다 이 정보를 사용하죠&lt;span &gt;. &lt;/span&gt;한번
커밋한 후에는 정보를 변경할 수 없습니다&lt;span &gt;.&lt;b&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
config --global user.name “kwongiho”&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
config --global user.email “&lt;/span&gt;&lt;span &gt;&lt;a href=&quot;mailto:shng10503@naver.com&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:
107%&quot;&gt;shng10503@naver.com&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:
11.0pt;line-height:107%&quot;&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;--global&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;로 설정해준 정보는 모든 프로젝트가 커밋할 때 사용하게 됩니다&lt;span &gt;. ( &lt;/span&gt;말 그대로 전역변수에요&lt;span &gt;~ ) &lt;/span&gt;만약 프로젝트마다 다른 이름과 다른
이메일 주소를 사용하고 싶으면 &lt;span &gt;&amp;nbsp;--global&lt;/span&gt;속성을 빼고 실행시키면 됩니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;2. &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;편집기 설정&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;의 기본 편집기는&lt;span &gt; Vi,Vim&lt;/span&gt;입니다&lt;span &gt;. &lt;/span&gt;하지만&lt;span &gt; gEdit , Nano , gVim , emacs &lt;/span&gt;등등 다른
편집기를 사용하고 싶은 분들도 계시겠죠&lt;span &gt;. &lt;/span&gt;그럴땐 다음 명령어와 같이 입력하시면 됩니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
config --global core.editor [&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:
107%&quot;&gt;편집기이름&lt;span &gt;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;b&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%;mso-fareast-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-bidi-theme-font:minor-latin&quot;&gt;2.&lt;span style=&quot;font-weight: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;!--[endif]--&gt;&lt;b&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;설정확인&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이렇게 설정한 모든
정보들을 아래의 명령어로 확인할 수 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git cnofig --list&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:472px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2462B74C5776205521&quot; filemime=&quot;image/jpeg&quot; filename=&quot;gitconfig.png&quot; height=&quot;294&quot; style=&quot;&quot; width=&quot;472&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;











































































































&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-theme-font:minor-fareast;
mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;Times New Roman&amp;quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
KO;mso-bidi-language:AR-SA&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:line-break;
page-break-before:always&quot;&gt;
&lt;/span&gt;

&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:18.0pt;;line-height:107%&quot;&gt;본격적인 &lt;span &gt;Git &lt;/span&gt;시작하기&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;의 명령어에 익숙해 지는 것이 가장 중요하겠죠&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에서 사용 가능한 명령어와 설명을 볼 수 있는 명령어가 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
help config&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:18.0pt;
;line-height:107%&quot;&gt;Git &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:18.0pt;;line-height:
107%&quot;&gt;저장소 만들기&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git
&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;저장소를 처음 만드시는 분은 다음과 같은 상황일
것입니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%;color:#ED7D31;
mso-themecolor:accent2&quot;&gt;상황 &lt;span &gt;1.&lt;/span&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;기존의 &lt;span &gt;NEXTERS&lt;/span&gt;가 아닌&lt;span &gt;, &lt;/span&gt;다른
그룹에서 진행하던 프로젝트가 있다&lt;span &gt;. &lt;/span&gt;그런데 이번에 &lt;span &gt;Git&lt;/span&gt;에
대해서 공부했고&lt;span &gt;, &lt;/span&gt;로컬에 있는 소스코드들을 &lt;span &gt;Git&lt;/span&gt;으로 옮기기를
원한다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%;color:#ED7D31;
mso-themecolor:accent2&quot;&gt;상황 &lt;span &gt;2.&lt;/span&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;형상 관리가 필요할 만큼 일정 수준의 사람들과 협업을 해본적이 없다&lt;span &gt;. &lt;/span&gt;하지만
이제부터라도 형상 관리툴을 이용하여 프로젝트를 진행해 보고 싶다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;자&lt;span &gt;! &lt;/span&gt;이런 모든분들&lt;span &gt;! &lt;/span&gt;다같이 저장소를 만들어 봅시다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 38pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;1.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git init&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 38pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;2.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git touch readMe.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 38pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;3.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;vi readMe.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 60pt; text-indent: -20pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;A.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;vi readMe.txt - vi&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에디터로 &lt;span &gt;readMe.txt&lt;/span&gt;파일을
열어라 라는 뜻입니다&lt;span &gt;. &lt;/span&gt;만약에 &lt;span &gt;readMe.txt&lt;/span&gt;파일이 없으면
새로 생성하고 파일을 엽니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 60pt; text-indent: -20pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;B.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;i&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;키&lt;span &gt;(insert)&lt;/span&gt;를 입력하고
프로젝트에 대한 설명을 간단하게 작성합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 60pt; text-indent: -20pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;C.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Esc-&amp;gt; : -&amp;gt; wq&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;키를 입력하여 &lt;span &gt;vi &lt;/span&gt;에디터에서
탈출합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 38pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;4.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git add --all&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 38pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;mso-fareast-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-bidi-theme-font:minor-latin&quot;&gt;5.&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git commit –m “initial
project version. first commit”&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이와 같이 매우 짧은
명령어들을 통하여 &lt;span &gt;Git &lt;/span&gt;저장소를 만들 수 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;다음 명령어들은 상황&lt;span &gt;2&lt;/span&gt;에
맞춘 명령어 입니다&lt;span &gt;. &lt;/span&gt;상황 &lt;span &gt;1&lt;/span&gt;의 경우라면&lt;span &gt;, readMe.txt&lt;/span&gt;파일이 아니라 어느정도 코딩을 한 후에 커밋을 하셔도 됩니다&lt;span &gt;. ( &lt;/span&gt;하지만 이 상황은 초기 설정이므로 &lt;span &gt;readMe.txt&lt;/span&gt;파일을 만드시는
것을 권장합니다&lt;span &gt;.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:107%&quot;&gt;원격 저장소에 프로젝트를 연결하기&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;깃을 사용하게 되면
또 다시 두 가지의 상황을 맞이하게 됩니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;상황 &lt;span &gt;1. &lt;/span&gt;다른 프로젝트에 참여&lt;span &gt;(Contribute)&lt;/span&gt;하거나 다른 컴퓨터에서
&lt;span &gt;push&lt;/span&gt;한 내용을 다른 컴퓨터에서 이어서 하고싶다&lt;span &gt;. &lt;/span&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-ascii-font-family:&amp;quot;맑은 고딕&amp;quot;;mso-ascii-theme-font:minor-latin;mso-hansi-font-family:
&amp;quot;맑은 고딕&amp;quot;;mso-hansi-theme-font:minor-latin;mso-char-type:symbol;mso-symbol-font-family:
Wingdings&quot;&gt;à&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt; git clone [URL]&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;상황 &lt;span &gt;2. &lt;/span&gt;깃을 완전 처음 사용해봐서&lt;span &gt;, &lt;/span&gt;환경설정 및 저장소는 만들었지만 원격
저장소엔 연결을 하지 못했다&lt;span &gt;. -&amp;gt; git remote add origin [URL]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoListParagraph&quot; style=&quot;margin-left: 18pt; text-indent: -18pt; word-break: keep-all; line-height: 2;&quot;&gt;&lt;!--[if !supportLists]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:Wingdings;
mso-fareast-font-family:Wingdings;mso-bidi-font-family:Wingdings&quot;&gt;è&lt;span style=&quot;font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;은 여러 프로토콜은 제공합니다&lt;span &gt;. &lt;/span&gt;지금까진
&lt;span &gt;git://&lt;/span&gt;프로토콜을 사용했지만&lt;span &gt;, http(s)://&lt;/span&gt;을 사용할
수 있고 &lt;/span&gt;&lt;span &gt;&lt;a href=&quot;mailto:user@server:/path.git&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;user@server:/path.git&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;처럼 &lt;span &gt;SSH&lt;/span&gt;의 프로토콜을
사용할 수 있습니다&lt;span &gt;.(&lt;/span&gt;각 프로토콜의 장단점은 가장 마지막인 번외에 작성하도록 하겠습니다&lt;span &gt;.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:20.0pt;;line-height:107%&quot;&gt;수정하고 저장소에 저장하기&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git
&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;저장소를 만들고 초기설정을 진행했습니다&lt;span &gt;. &lt;/span&gt;원격 저장소에 로컬 저장소를 연결도 했습니다&lt;span &gt;. &lt;/span&gt;이제는 파일을 수정하고
파일을 커밋해 보도록 하겠습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;워킹 디렉토리의 모든
파일은 크게 &lt;span &gt;Tracked&lt;/span&gt;와 &lt;span &gt;Untracked&lt;/span&gt;로 나뉩니다&lt;span &gt; (&lt;/span&gt;단어의 말 그대로 관리하는 대상과 관리하지 않는 대상이란 뜻이죠&lt;span &gt;~). Tracked(&lt;/span&gt;관리
대상&lt;span &gt;)&lt;/span&gt;은 &lt;span &gt;Staged(&lt;/span&gt;커밋 직전의 상태&lt;span &gt;)&lt;/span&gt;와&lt;span &gt; Modified(&lt;/span&gt;수정 되고 있는중&lt;span &gt;)&lt;/span&gt;상태 중 하나입니다&lt;span &gt;. &lt;/span&gt;그리고 나머지 파일들은 &lt;span &gt;Untracked&lt;/span&gt;파일입니다&lt;span &gt;. Untracked&lt;/span&gt;파일들은 워킹 디렉토리에
있는 모든 파일이 포함되어 있는 것은 아니고&lt;span &gt;, Staging Area&lt;/span&gt;에 있는 것도 아닙니다&lt;span &gt;. &lt;/span&gt;처음 저장소를 &lt;span &gt;Clone&lt;/span&gt;하면 모든 파일들은 &lt;span &gt;Tracked&lt;/span&gt;이면서&lt;span &gt; Unmodified&lt;/span&gt;상태가 됩니다&lt;span &gt;.(&lt;/span&gt;파일을 &lt;span &gt;checkout&lt;/span&gt;하고 아무것도 수정하지 않았기 때문이죠&lt;span &gt;.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/25365B4D5776206B31&quot; filemime=&quot;image/jpeg&quot; filename=&quot;file status lifecycle.png&quot; height=&quot;444&quot; style=&quot;&quot; width=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:
11.0pt;line-height:107%&quot;&gt;마지막 커밋 이후 어떤 파일이 수정이 이루어지면&lt;span &gt;, Git&lt;/span&gt;은
그 즉시 파일을 &lt;span &gt;Modified&lt;/span&gt;상태로 인식합니다&lt;span &gt;. &lt;/span&gt;그리고
수정한 파일을 &lt;span &gt;Stage&lt;/span&gt;하고&lt;span &gt;, Staged&lt;/span&gt;상태인 파일을 커밋합니다&lt;span &gt;. &lt;/span&gt;이 라이프 사이클은 다음 그림처럼 반복합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;

























































&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-theme-font:minor-fareast;
mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;Times New Roman&amp;quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
KO;mso-bidi-language:AR-SA&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:line-break;
page-break-before:always&quot;&gt;
&lt;/span&gt;

&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;파일의 상태를 확인하려면
보통 &lt;span &gt;git status &lt;/span&gt;명령을 사용합니다&lt;span &gt;. &amp;nbsp;&lt;/span&gt;보통 &lt;span &gt;clone&lt;/span&gt;을 한 직후의
프로젝트의 상태는 &lt;span &gt;Tracked&lt;/span&gt;이나 &lt;span &gt;Modified&lt;/span&gt;상태의
파일이 하나도 없다는 의미 입니다&lt;span &gt;. Untracked&lt;/span&gt;파일은 아직 존재하지 않아 목록에 보여지지 않습니다&lt;span &gt;. &lt;/span&gt;그리고 현재 작업중인 브랜치를 보여주며&lt;span &gt;, &lt;/span&gt;기본 브랜치가 &lt;span &gt;master&lt;/span&gt;이기 때문에 &lt;span &gt;master&lt;/span&gt;로 나옵니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:548px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/275A894B5776208917&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git status.png&quot; height=&quot;256&quot; style=&quot;&quot; width=&quot;548&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:
11.0pt;line-height:107%&quot;&gt;프로젝트에 &lt;span &gt;readMe.txt&lt;/span&gt;파일을 새로 만들어보겠습니다&lt;span &gt;. readMe.txt&lt;/span&gt;파일은 새로 만들어진 파일이기 때문에 &lt;span &gt;git status&lt;/span&gt;를
실행하면 &lt;span &gt;Untracked files&lt;/span&gt;에 포함되어 있습니다&lt;span &gt;. ( deleted&lt;/span&gt;는
기존 리모트 서버에 &lt;span &gt;readMe.txt&lt;/span&gt;파일이 존재했고&lt;span &gt;, &lt;/span&gt;이
파일을 삭제한 다음 진행했기 때문에 저희에게 보여집니다&lt;span &gt;. )&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:562px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2304454E577620AE1C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Untracked.png&quot; height=&quot;267&quot; style=&quot;&quot; width=&quot;562&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:
11.0pt;line-height:107%&quot;&gt;&lt;span &gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이렇게 만들어진&lt;span &gt; readme &lt;/span&gt;파일은&lt;span &gt; untracked&lt;/span&gt;라는 것은&lt;span &gt;, &lt;/span&gt;파일이&lt;span &gt; Tracked&lt;/span&gt;상태가 되기 전까지는&lt;span &gt; Git&lt;/span&gt;은 절 때 그 파일을 커밋하지 않는다&lt;span &gt;. ( git&lt;/span&gt;이 바이너리까지
커밋하는 행위를 막아주는 것이죠&lt;span &gt;~)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;그럼&lt;span &gt; README&lt;/span&gt;파일을 추가해서&lt;span &gt; Tracked&lt;/span&gt;상태로 만들어 봅시다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
add reame &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;명령어로 &lt;span &gt;readme &lt;/span&gt;파일만 &lt;span &gt;Tracked &lt;/span&gt;상태로 변환합니다&lt;span &gt;. ( add &lt;/span&gt;명령어로 &lt;span &gt;Staged &lt;/span&gt;상태로 변하는 것을 확인할 수 있습니다&lt;span &gt;.)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:552px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/272D533E577620E103&quot; filemime=&quot;image/jpeg&quot; filename=&quot;untracked to tracked.png&quot; height=&quot;253&quot; style=&quot;&quot; width=&quot;552&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&lt;span &gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;그렇다면 기존에 &lt;span &gt;Tracked &lt;/span&gt;상태인 파일을 수정하는 방법을 보겠습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;readme&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;파일을 수정하고 나서 &lt;span &gt;git
status&lt;/span&gt;명령을 수행하면 다음 결과처럼 나옵니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:552px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/260D2D3E577620F920&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git status2.png&quot; height=&quot;234&quot; style=&quot;&quot; width=&quot;552&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이렇게 수정 된 파일들을
&lt;span &gt;commit&lt;/span&gt;하면 체크섬&lt;span &gt;[master 534a8d3]&lt;/span&gt;이 저장되고&lt;span &gt;, staged &lt;/span&gt;상태로 전환된다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:549px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/247A1742577621091D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git commit.png&quot; height=&quot;136&quot; style=&quot;&quot; width=&quot;549&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;



































&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-theme-font:minor-fareast;
mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;Times New Roman&amp;quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
KO;mso-bidi-language:AR-SA&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:line-break;
page-break-before:always&quot;&gt;
&lt;/span&gt;

&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:16.0pt;
;line-height:107%&quot;&gt;Git &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:16.0pt;;line-height:
107%&quot;&gt;커밋 수정하기&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;종종 너무 일찍 커밋
하거나 커밋 메시지를 잘못 적었을 때 커밋을 수정하고 싶은 경우가 종종 있습니다&lt;span &gt;. &lt;/span&gt;이럴 때 다시 커밋하기
위해서 &lt;span &gt;--amend&lt;/span&gt;옵션을 사용합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
commit --amend&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:12.0pt;;line-height:107%&quot;&gt;파일 상태를 &lt;span &gt;Unstage&lt;/span&gt;로 변경하기&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;두 개 이상의 파일을 수정하고 따로따로 커밋하려고 했지만&lt;span &gt;, &lt;/span&gt;실수로
&lt;span &gt;git add --all / git add * &lt;/span&gt;이라는 명령어를 실행시켜 버렸다&lt;span &gt;. &lt;/span&gt;두 파일은 모두 &lt;span &gt;Staging Area(modified)&lt;/span&gt;에 들어가
있습니다&lt;span &gt;. &lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;그럴 경우 &lt;span &gt;reset &lt;/span&gt;명령어로 &lt;span &gt;Unstage&lt;/span&gt;상태로
변경할 수 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span &gt;git reset HEAD [file name]&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:556px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/27109A425776211C0B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git reset.png&quot; height=&quot;481&quot; style=&quot;&quot; width=&quot;556&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;다음 그림에선 &lt;span &gt;git add * &lt;/span&gt;이 아닌 특정 파일만 해줬지만
&lt;span &gt;add *&lt;/span&gt;이라 생각하시고 테스트 해보셔도 됩니다&lt;span &gt;. &lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span &gt;reset &lt;/span&gt;명령어는 &lt;span &gt;rollback&lt;/span&gt;과
같은 개념이라 생각하시면 됩니다&lt;span &gt;. &lt;/span&gt;특정 파일만을 &lt;span &gt;reset&lt;/span&gt;할
수도 있고&lt;span &gt;, &lt;/span&gt;전체적으로 &lt;span &gt;commit&lt;/span&gt;한 내용들을 몇 단계든지
&lt;span &gt;reset&lt;/span&gt;할 수 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span &gt;git reset HEAD~[&lt;/span&gt;단계수&lt;span &gt;]&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:14.0pt;
;line-height:107%&quot;&gt;Modified &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:107%&quot;&gt;파일 되돌리기&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에고&lt;span &gt;.. &lt;/span&gt;큰일 났습니다&lt;span &gt;. Clone&lt;/span&gt;하고 나서 수정하지 말아야 할 파일을
수정했거든요&lt;span &gt;. Clone &lt;/span&gt;받아놓으라고 한 사수는 &lt;span &gt;1&lt;/span&gt;분뒤에
들어옵니다&lt;span &gt;. &lt;/span&gt;어떻게 해야할까요&lt;span &gt;?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
checkout -- [&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;파일명&lt;span &gt;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; text-align: center; clear: none; float: none; line-height: 2;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:550px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/231ED440577621311C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;git checkout --.png&quot; height=&quot;302&quot; style=&quot;&quot; width=&quot;550&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;수정 되어있던 파일이
수정 되기 전으로 되돌와 있네요&lt;span &gt;?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;

































&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-theme-font:minor-fareast;
mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;Times New Roman&amp;quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
KO;mso-bidi-language:AR-SA&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:line-break;
page-break-before:always&quot;&gt;
&lt;/span&gt;

&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:24.0pt;;line-height:107%&quot;&gt;리모트 저장소&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;리모트 저장소에 대하여
정확히 알아야지 다른 사람들과 일할 수 있습니다&lt;span &gt;. &lt;/span&gt;리모트 저장소는 인터넷이나 네트워크가 어딘가에 존재하는
저장소를 말합니다&lt;span &gt;. &lt;/span&gt;저장소가 여러 개 있을 수 있는데&lt;span &gt;, &lt;/span&gt;어떤
저장소는 읽기 쓰기 모두 가능하고 어떤 저장소는 읽기 권한만 있을 수 있습니다&lt;span &gt;. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;간단히 말하면 협업
한다는 것은 리모트 저장소를 관리하면서 데이터를 리모트에 &lt;span &gt;Push &lt;/span&gt;하고 &lt;span &gt;Pull &lt;/span&gt;하는 것 입니다&lt;span &gt;. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;개발자는 리모트 저장소를
어떻게 추가&lt;span &gt;,&lt;/span&gt;삭제 하는 방법을 알 뿐만 아니라 브랜치를 관리하고 어떻게 트래킹할지 매우 중요합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:107%&quot;&gt;리모트 저장소 확인하기&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
remote &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;명령어로 프로젝트에 등록된 모든
리모트 저장소를 확인할 수 있습니다&lt;span &gt;. &lt;/span&gt;이 명령은 리모트 저장소의 이름을 보여줍니다&lt;span &gt;. &lt;/span&gt;앞에서 봤던 것 처럼 &lt;span &gt;Clone&lt;/span&gt;명령어를 사용하면 자동적으로 &lt;span &gt;remote&lt;/span&gt;와 연결이 되기 때문에 초기에 &lt;span &gt;origin&lt;/span&gt;이라는 이름을 볼
수 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%;
mso-no-proof:yes&quot;&gt;&lt;!--[if gte vml 1]&gt;&lt;v:shape id=&quot;그림_x0020_7&quot; o:spid=&quot;_x0000_i1025&quot;
 type=&quot;#_x0000_t75&quot; style='width:408pt;height:29.25pt;visibility:visible;
 mso-wrap-style:square'&gt;
 &lt;v:imagedata src=&quot;file:///C:\Users\kwongyo\AppData\Local\Temp\msohtmlclip1\01\clip_image013.png&quot;
  o:title=&quot;git remote&quot;/&gt;
&lt;/v:shape&gt;&lt;![endif]--&gt;&lt;!--[if !vml]--&gt;&lt;img border=&quot;0&quot; width=&quot;544&quot; height=&quot;39&quot; src=&quot;file:///C:/Users/kwongyo/AppData/Local/Temp/msohtmlclip1/01/clip_image013.png&quot; v:shapes=&quot;그림_x0020_7&quot;&gt;&lt;!--[endif]--&gt;&lt;/span&gt;&lt;span  style=&quot;font-size:11.0pt;
line-height:107%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;원격 리모트도 한 개
이상을 등록 할 수 있습니다&lt;span &gt;. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:14.0pt;;line-height:107%&quot;&gt;리모트 저장소 추가&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
remote add [&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;별칭&lt;span &gt;] [url]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이렇게&lt;span &gt; remote&lt;/span&gt;를 추가해 주면&lt;span &gt;, &lt;/span&gt;한 프로젝트가 두 개 이상의 &lt;span &gt;remote&lt;/span&gt;를 가지게 되는데&lt;span &gt;, &lt;/span&gt;그럼 &lt;span &gt;fetch&lt;/span&gt;를
받을 땐 앞에서 설정한 별칭으로 받아오면 된다&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이렇게 추가한 &lt;span &gt;remote&lt;/span&gt;의 별칭은 다음의 명령어로 변경이 가능하다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
remote rename [&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;원래이름&lt;span &gt;] [&lt;/span&gt;바꿀이름&lt;span &gt;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:12.0pt;;line-height:107%&quot;&gt;리모트 저장소를 &lt;span &gt;Pull&lt;/span&gt;하거나 &lt;span &gt;Fetch&lt;/span&gt;하기&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;만약 &lt;span &gt;git remote add otherRemote http://github.com/Kwongiho/otherremmote &lt;/span&gt;이렇게&lt;span &gt;&amp;nbsp; &lt;/span&gt;등록했다면 다음과 같이 실행시키면 된다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
fetch otherRemote .&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;이 명령은 &lt;/span&gt;&lt;span &gt;&lt;a href=&quot;http://github.com/Kwongiho/otherremote&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;http://github.com/Kwongiho/otherremote&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;에 있는 저장소를 로컬 저장소로 가져오는 역할을 한다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
pull &lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;명령어로 리모트 저장소의 데이터를 로컬
저장소로 가져오면 자동적으로 &lt;span &gt;merge&lt;/span&gt;까지 해준다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size:12.0pt;;line-height:107%&quot;&gt;리모트에 &lt;span &gt;Push &lt;/span&gt;하기&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;어느 기능을 완성하면
&lt;span &gt;“&lt;/span&gt;야 푸쉬좀 해줘&lt;span &gt;!! “ &lt;/span&gt;라는 이야기를 많이 하게 될겁니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
push [&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;리모트 저장소 이름&lt;span &gt;] [&lt;/span&gt;브랜치 이름&lt;span &gt;] &lt;/span&gt;으로 쉽게 할 수 있습니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;master
&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;브랜치를 &lt;span &gt;origin
&lt;/span&gt;서버에 푸쉬 하려면 다음과 같이 &lt;span &gt;push &lt;/span&gt;합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;git
push origin master.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;















































&lt;span  style=&quot;font-size:11.0pt;line-height:107%;font-family:&amp;quot;맑은 고딕&amp;quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-theme-font:minor-fareast;
mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&amp;quot;Times New Roman&amp;quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
KO;mso-bidi-language:AR-SA&quot;&gt;&lt;br clear=&quot;all&quot; style=&quot;mso-special-character:line-break;
page-break-before:always&quot;&gt;
&lt;/span&gt;

&lt;/p&gt;&lt;p  style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;center&quot; style=&quot;text-align: center; word-break: keep-all; line-height: 2;&quot;&gt;&lt;b&gt;&lt;span  style=&quot;font-size:20.0pt;
;line-height:107%&quot;&gt;Git &lt;/span&gt;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-size:20.0pt;;line-height:
107%&quot;&gt;브랜치&lt;span &gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p  align=&quot;left&quot; style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span  style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;Git&lt;/span&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;의 브랜치 직접 브랜치를 만들어보고&lt;span &gt;,
Merge&lt;/span&gt;하면서 학습하시길 권장합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p  align=&quot;left&quot; style=&quot;word-break: keep-all; line-height: 2;&quot;&gt;&lt;span style=&quot;font-size:11.0pt;line-height:107%&quot;&gt;브랜치 부분부턴 잘 정리되어 있는 사이트가 있어 첨부합니다&lt;span &gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;table class=&quot;MsoTableGrid&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;604&quot; style=&quot;border-collapse:collapse;mso-table-layout-alt:fixed;border:none;
 mso-border-alt:solid windowtext .5pt;mso-yfti-tbllook:1184;mso-padding-alt:
 0cm 5.4pt 0cm 5.4pt&quot;&gt;
 &lt;tbody&gt;&lt;tr&gt;
  &lt;td width=&quot;170&quot; valign=&quot;top&quot; style=&quot;width:127.6pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt&quot;&gt;
  &lt;p  align=&quot;le