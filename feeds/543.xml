<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">한낮의 천문학</title>
  <id>http://joon.postach.io/feed.xml</id>
  <updated>2018-04-15T08:48:03.275000Z</updated>
  <link href="http://joon.postach.io/" />
  <link href="http://joon.postach.io/feed.xml" rel="self" />
  <generator>Werkzeug</generator>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">2015년 2월 22일</title>
    <id>https://joon.postach.io/post/2015nyeon-2weol-22il</id>
    <updated>2018-04-15T08:48:03.275000Z</updated>
    <published>2018-04-15T08:46:37Z</published>
    <link href="https://joon.postach.io/post/2015nyeon-2weol-22il" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="diary" />
    <content type="html">&lt;div&gt;&lt;font face=&quot;Arial&quot;&gt;사람들 사이에 미움을 줄이고 싶었다. 결국 세상에 우리를 아프게 하는 모든 일은 미움에서 시작됐거나 그 일로 하여금 미움을 샀기 때문이다. 미움을 줄일 수 있다면 난 더 좋은 세상에 살지 않을까 상상했다. 이 생각을 이어가다보니 이를 본능적으로 이해하는 듯 각자의 방법으로 미움을 줄이는 사람들이 보였다. 꼭 안 그래도 되는데 이미 졸업한 제자의 고민을 같이 생각해주시는 선생님이나, 새벽시간에도 친절하게 대해주시는 택시기사님, 끊임없이 용서하고, 소외된 자들 곁에 서있는 종교인을 볼 때, 더 나은 세상이 이런 곳이겠구나 하며 꿈꿔왔다.&lt;br /&gt;&lt;/font&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;-en-paragraph:true;&quot;&gt;&lt;font face=&quot;Arial&quot;&gt;&lt;br /&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;font face=&quot;Arial&quot;&gt;&lt;span style=&quot;-en-paragraph:true;&quot;&gt;내가 이런 친절을 베풀 능력이 부족하다 느꼈을 때 쯤. 그럼 내가 할 수 있는 일이 무엇이 있을까 고민했다. 그 고민에 끝에선 미움이 적어지는 세상이란 사람간의 오해나 문제가 적어지는 세상을 뜻하고 그 오해와 문제가 줄기 위해선 사람들이 더 표현하는 사회란 생각이 들었다. 나뿐만 아니라 모든 사람들이&lt;/span&gt;&lt;span style=&quot;-en-paragraph:true;&quot;&gt;, 자기가 하고 싶은 이야기를, 자기의 방식대로 다 털어내도 집단으로 모욕당하거나 구타당하지 않아야 현대사회에 절대적 옮음 따위 존재하지 않는, 다면적 문제를 인식할 수 있고, 의견을 가볍게 여기지 않아야 해결이라는 목적지에 다다름에 첫발을 떼는 것이라 믿었다. 그래서 난 내 생각을 더 표현했고 내가 옳지 못하다 생각하는 것에 대해 의견을 피력했다. 그리고 집단에 어울리지 않는 의견을 말했다고 해서 모욕 받는 편에 서려 노력했다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph:true;&quot;&gt;&lt;font face=&quot;Arial&quot;&gt;이 생각을 하고 살면서 일련의 사건들이 벌어졌고 몇 번의 사랑도 지나갔다. 이런 시간이 날 훑고 지나가면서 문득 내가 무언가 잘못하고 있을지 모른단 생각이 들었다. 나를 비난한 사람들 대부분은 나의 말에 상처를 받았다고 했고, 미움으로 번져나갔다. 연애도 마찬가지였고, 친구관계도 비슷했다. 미움을 줄이기 위해 믿고 노력했던 방식이 미움을 더 키우는 것 같았다. 순간 겁이 났다. 지금까지 내가 잘 못해온 걸까. 혹시나 내말이 누군가에겐 총탄이 되었을 수 있다 생각하니 한마디도 쉽게 내뱉을 수도 없었고 내가 생각했던 것이 합리화 될 수 있을지 자신할 수 없었다. 그리고 앞으로 내가 어떤 말을 어떻게 해야 누구에게도 상처 주지 않고, 종교, 문화, 사회윤리에 어긋나지 않을 수 있을지에 대한 고민에 빠져들었다.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph:true;&quot;&gt;&lt;font face=&quot;Arial&quot;&gt;솔직하게 고민에 대한 답은 찾지 못했다. 어찌보면 이 문제마저도 개인의 의견을 나눠야만 합의점을 찾을 수 있기에 서로 이야기해야 풀릴 문제였다. 너무나 다양한 사람의 배경과 생각, 이제까지 쌓아올린 '나'라는 존재가 지닌 의견은 모든 문제에서 다양하게 펼쳐져 나가기에 어떤 의견이든 이견이 생기기 때문이다. 결국 서로가 의견에 아프지 않기 위해선 또 끊임없이 의견을 내세워야 되는 것이다.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph:true;&quot;&gt;&lt;font face=&quot;Arial&quot;&gt;혹자는 &quot;나의 존엄은 결국 모든 인류의 존엄과 어떻게든 연결 되어있다&quot;고 했다. 나의 자존감은 사적소유물이 아니므로 귀찮다는 이유로, 복잡하다는 이유로, 순간순간 내 존엄을 포기해버리면 다른 사람의 존엄도 비슷하게 위협당하기 때문이다. 존엄을 지키는 방식을 표현이라고 보았을 때, 오히려 내가 맞서야 할 것은 절대적으로 옳은 것이 있다 생각하고, 모든 사람이 이를 따라야한다는, 개인 혹은 전체가 절대 권력을 가진다는 믿음일지도 모르기에 지금 내가 둥굴게 깎이는건 답이 아니란 생각이 들었다. 폭력은 항상 말이 끝나는 지점에서 시작한다는 격언을 아직 믿고 싶다. 그래서 수긍할 수 있는 답을 찾을 때까진 여러사람이 지적한 나의 단점을 감수하고도 올해도 이 믿음을 이어나가려 한다. 지나간 사람들이 보기에 아주 철없게도 말이다.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">[AWS] Amazon VPC 천천히 이해하기 - 1</title>
    <id>https://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-1</id>
    <updated>2018-04-12T09:04:10.158000Z</updated>
    <published>2018-04-07T10:17:48Z</published>
    <link href="https://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-1" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="aws" />
    <content type="html">&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-0&quot; style=&quot;font-size: 14px;&quot;&gt;Amazon VPC 천천히 이해하기 - 0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-1&quot; style=&quot;font-size: 14px;&quot;&gt;Amazon VPC 천천히 이해하기 - 1&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;
&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;앞선 글에서는 Amazone VPC와 Subnet에 대해서 알아보았습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;다음 포스트는 아래 도표와 같이 네트워크를 구성해보고, Public subnet에 Bastion Host를 만들어 Private subnet에 위치한 instance를 접근하는 방법에 대해 알아보려합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/1fa2305d-8ae1-46cf-848a-d894df146c8b.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;이번 포스팅에서는 Public, Private subnet을 만들어 보고, 그에 맞는 Route table 설정과 Network ACL를 알아보겠습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;VPC, Subnet&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div style=&quot;text-align: center; &quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center; &quot;&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/f32a27b7-9d0f-40e7-b3fb-9bb42d5d0b0c.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Amazon VPC Dashboard에 들어가 Your VPCs를 클릭하면 Create VPC 버튼이 상단에 표시 됩니다. 이 버튼을 클릭하면 위 화면이 나타나며 새 환경을 생성 할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/af67cd92-9939-4c7f-982d-d747720efab4.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center; &quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;VPC를 만들었다면, Subnet을 만들 차례입니다. 좌측에 보이는 Subnets에 들어가 Create Subnet을 클릭하면 새로운 Subnet을 만들 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;저는 아래 표와 같이 4개의 Subnet을 AZ에 분산하여 만들었습니다.&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style=&quot;border-collapse: collapse; min-width: 100%;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 143px;&quot; /&gt;&lt;col style=&quot;width: 130px;&quot; /&gt;&lt;col style=&quot;width: 130px;&quot; /&gt;&lt;col style=&quot;width: 130px;&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 143px; padding: 8px;&quot;&gt;&lt;div&gt;Name&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;VPC&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;AZ&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;IPv4 CIDR Block&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 143px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc-public-1&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;ap-northeast-1a&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;10.1.111.0/24&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 143px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc-public-2&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;ap-northeast-1c&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;10.1.131.0/24&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 143px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc-private-1&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;ap-northeast-1a&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;10.1.211.0/24&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 143px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc-private-2&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;test-vpc&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;ap-northeast-1c&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;border: 1px solid rgb(219, 219, 219); width: 130px; padding: 8px;&quot;&gt;&lt;div&gt;10.1.231.0/24&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Route table&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Subnet을 정상적으로 만들었다면 Subnet의 Route table을 설정해 주어야 합니다. Route table에는 네트워크 트래픽을 전달할 위치를 결정하는 데 필요한 Routing의 규칙을 설정합니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;앞선 절차에서 Subnet을 Public과 Private으로 나누어 만들었습니다. Public subnet의 경우 외부와 통신이 가능해야하며, Private subnet의 경우 외부와 통신이 불가능 해야합니다. 그러므로 Routing table 또한 Public subnet 들과 Private subnet들이 다르게 가져야 합니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;Route table은 VPC가 생성됨과 동시에 자동으로 생성됩니다. &lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/b490cdfe-45e9-40dc-87c0-72c9c7a651ac.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;자동으로 만들어진 Route table을 public용 Route table로 명명하고, Create route table 버튼을 클릭해 private용 route table을 만들 수 있습니다.&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/e1d26d93-cc55-41e2-bd94-7223d6035282.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Route table을 정상적으로 만들었다면, Private Route Table에 두개의 Private Subnet이 지정될 수 있도록 설정해 주어야합니다. 이는 해당 테이블 클릭 후, Subnet Association 코너에서 Private Subnet을 할당 할 수 있습니다. &lt;/div&gt;
&lt;div&gt;아무 설정도 안한 Subnet(public)들은 자동으로 Main route table(public)에 할당됩니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Internet Gateway&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;이제 4개의 Subnet과 Route table을 만들었습니다. 이번 챕터에는 Public Subnet들이 인터넷과 통신할 수 있는 환경을 만들어보려 합니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;VPC를 생성하면 기본적으로 외부 통신과 단절된 상태로 생성 됩니다. 네트워크 안에 있는 노드들은 internal ip로 통신하기 때문에 아마존에서 제공하는 Internet gateway를 기능을 이용해야 외부와 통신이 가능합니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/f06bb1d2-6d0c-4dd7-8a9c-615902053849.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;왼쪽 배너에 보이는 Internet Gateways를 클릭하면 상단에 Create Internet gateway이 생성됩니다. 이를 이용해 internet gateway를 손 쉽게 만들 수 있습니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/9a7ff197-8839-434e-99b0-400c1ca8f837.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;VPC를 만들었다면 Actions 버튼을 클릭해 자신의 VPC에 Attach 해주어야 합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/dff70ae8-85a8-43f2-a098-b3069d6d6af6.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;정상적으로 Attach 되었다면, Route Table 설정으로 돌아와 Public Route Table에 모든 traffic이 Internet gateway로 향할 수 있도록 지정해줍니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Network ACL&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;이번 챕터에서는 ACL(Access Control List)를 사용해서 Subnet으로 유입되는 Traffic을 제어 해보겠습니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;네트워크 Infra 구축 시 패킷의 Source Address와 Destnation Address, 서비스가 사용하는 Port등을 고려하여 Inbound &amp; Outbound 패킷을 허용하거나 거부할 정책을 설정해야합니다. Amazon VPC에서는 이를 손쉽게 콘솔에서 제어할 수 있습니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;NACL 설정에 앞서 ACL의 특징을 살펴 보겠습니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 14px; font-family: 'Helvetica Neue';&quot;&gt;VPC의 NACL은 Subnet 단위로 설정 할 수 있습니다.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: 'Helvetica Neue';&quot;&gt;ACL 규칙은 번호가 낮은 것 부터 우선적으로 적용됩니다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: 'Helvetica Neue';&quot;&gt;ACL은 &lt;/span&gt;&lt;span style=&quot;font-family: 'Helvetica Neue'; font-weight: bold;&quot;&gt;stateless&lt;/span&gt;&lt;span style=&quot;font-family: 'Helvetica Neue';&quot;&gt; 합니다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Statless 라는 특징은 ACL에서 가장 중요한 특징 중 하나 입니다. ACL은 Statless 하므로 traffic에 stat를 가지지 않고, Inbound &amp; Outbound Rule에 의해서만 동작합니다 예를들어 INBOUND rule에 80 port를 allow하고 OUTBOUND에는 Deny한다면, 외부에서 80번 포트에 request를 전송할 수 있지만 내부에서 밖으로는 80 port를 통해 response가 전송되지 않습니다. 이런 특징을 잘 생각하며 ACL의 정책을 세워야 합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;이번 글에서는 Private subnet에 있는 Instance에 Public bastion host를 통해 ssh 터널링을 해보는 것이 목적이기에 이에 맞는 설정을 해보겠습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;NACL은 VPC가 생성됨과 동시에 default NACL이 만들어집니다. 이를 public NACL로 설정하고 새로 Private NACL을 만들어 주여야합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/f6cde7da-c4d5-409f-8a30-f81cbbe872d7.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;먼저 왼쪽 배너에 Security 밑에 있는 NACL을 클릭 후, Create NETWORK ACL 버튼을 클릭해 private ACL를 만들어줍니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/d09c6ebb-9242-442c-a455-13487463e388.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;그 다음 Private의 INBOUND Rule을 위와 같이 설정해줍니다. 이는 private subnets에 대한 NACL이기 때문에 Source address는 VPC Network인 10.1.0.0/16을, Type은 ssh를 선택해 정책을 생성해 줍니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/4f0f69aa-21a7-4752-b17b-bf83152ca463.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;OutBound의 경우 10.1.0.0/16에 대해 ALL TCP 프로토콜이 통신 가능하도록 만들어 줍니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/c174e622-5eea-4007-8a01-6ac8d5c3661a.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;INBOUND, OUTBOUND Rule 설정 후 Subnet associations 코너에서 private subnet들을 assign 해줍니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/cea4e57f-1a80-4bdc-8ca6-a4453ee9faa3.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/4c394044-3781-405e-9b74-63ab127f41b2.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Public ACL의 경우 INBOUND는 ssh port만, outbound의 경우 TCP 프로토콜만 허용해 주시면 됩니다. 만약 특정 IP에서만 접근 가능하도록 만들고 싶다면 source ip와 destination ip를 설정해주시면 됩니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Security Group&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;ACL과 달리 Security Group은 Instance에 대한 traffic을 제어합니다. &lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;Security Group의 특징을 몇가지 정리하자면&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;같은 &lt;/span&gt;&lt;span style=&quot;font-size: 14px; font-family: 'Helvetica Neue';&quot;&gt;Subnet안에 통신은 Security group의 rule이 적용된다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 14px; font-family: 'Helvetica Neue';&quot;&gt;Security Group은 stateful합니다.&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: 'Helvetica Neue';&quot;&gt;Security Group은 NACL과 다르게 state를 기억하기 때문에 NACL과 INBOUND Rule에 80번 포트를 allow해두었다면, OUTBOUND rule에 상관없이 response를 보낼 수 있습니다.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/ea58a363-f8a8-4e9a-987f-0439c42ead74.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Public에 들어갈 Instance와 Private에 들어갈 Instance는 다른 정책을 가져야 하기에 두가지의 Security Group을 만들어 주어야 합니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;왼쪽 배너의 Security Group 클릭 후 Create Security Group 버튼을 클릭해 만들 수 있습니다.&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/ba0f98f8-82ba-4f1e-88ca-42b959ad2e02.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;public sg를 만들었다면 위와 같이 INBOUND RULE을 설정해줍니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/967b04d4-cc87-4501-902a-2e76bdcb62a5/bd8e9c11-769d-46c5-917f-a912c43ee193.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;위의 방법과 같이 private sg를 만든 후 Inbound Rule을 설정할 수 있습니다. Security group의 경우 source에 ip를 기입 할 수 있지만, Security Group 자체를 Source에 등록할 수 있습니다. 이번에는 public용 sg를 등록해 진행하겠습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;NACL, Security Group..&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div&gt;지금까지 직접 VPC를 만들어보고 상황에 맞는 Subnet, Route table, NACL, SG를 만들어 보았습니다. NACL과 SG의 경우 보안에 직접적으로 연결되는 만큼 각 특징들을 잘 생각하며 운용해야 합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;다음 글에서는 지금 까지 환경 위에서 Bastion host를 만드는 것에 대해 알아보도록 하겠습니다. &lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">2016년 5월 25일</title>
    <id>https://joon.postach.io/post/2016nyeon-5weol-25il</id>
    <updated>2018-02-17T09:02:11.101000Z</updated>
    <published>2018-02-17T08:56:36Z</published>
    <link href="https://joon.postach.io/post/2016nyeon-5weol-25il" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="diary" />
    <content type="html">&lt;div&gt;&lt;span style=&quot;letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span style=&quot;font-variant-caps: normal; font-variant-ligatures: normal; font-size: 14px;&quot;&gt;&lt;font face=&quot;Andale Mono&quot;&gt;군인일 때, KTX역부터 부대까지 택시를 참 많이 탔다. 지하철도 있었지만 병사의 휴가시간은 무척 소중 하기에, 또 3000원 안팎의 요금이 나왔으니 그리 사치스러운 행동은 아니었다. 병사 대부분 택시를 탔으니까.&lt;/font&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span style=&quot;font-variant-caps: normal; font-variant-ligatures: normal; font-size: 14px;&quot;&gt;&lt;font face=&quot;Andale Mono&quot;&gt;예전에는 항상 술에 취해 택시를 타던 것에 비해 복귀한다는 마음에 정신이 깨있던 채로 택시에 탔다. 톨스토이의 문장을 빌리자면 좋은 택시기사는 한 모습이지만 나쁜 택시기사는 전부 그 이유가 제각각이라는 생각이 들었다. 자기가 마치 부대장인 마냥 반말을 툭툭 던지는 기사님이 계시는가하면 막힌다는 핑계로 뱅뱅 돌아 목적지에 내려주신 기사님, 불편할 정도로 야당을 욕하던 기사님 까지. 정말이지 이유도 여러가지였다.&lt;/font&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot; face=&quot;Andale Mono&quot;&gt;&lt;span style=&quot;letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14px; font-variant-caps: normal; font-variant-ligatures: normal;&quot;&gt;12년 대선이 끝난 이후에 누군가를 만날 때 속으로는 이 사람은 누구에게 투표 했을까, 하기는 했을까 궁금했다. 내 인간관계 속에서는 그녀에게 표를 준사람이 없었는데 그녀가 당선 됐기 때문이다. 학교를 가는 &lt;/span&gt;&lt;span style=&quot;letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14px; font-variant-caps: normal; font-variant-ligatures: normal;&quot;&gt;길에도 지하철에 앉아있으면 여기 중 대다수의 사람들이 그녀에게 표를 줬겠구나 생각했다. 훈련소에 갈 때도 이 수많은 사람들 중에서 그녀에게 도장을 찍은 사람이 누굴까 짐작하기도 했다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;font face=&quot;Andale Mono&quot;&gt;세월호 사건이후 복귀 하는 날이었다. 라디오에서는 수습 상황을 방송하고 있었다. 어지러운 마음으로 듣고있던 찰나에 기사님이 내게 지난 대선에 누구를 뽑았냐고 물었다. 군복을 입고있었지만 한바탕 할 마음으로, 그 당시 투표권이 없었지만 문재인을 지지 했다고 말했다. 지역이 지역이다 보니 당연히 그녀의 지지자일거라 예상했다. 그랬더니 그 기사분도 문재인을 뽑았다고 했다. 대구에서 문재인을? 너무나 궁금한 마음에 이유를 물어봤는데 충격적인 답변이 돌아왔다. &lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;font face=&quot;Andale Mono&quot;&gt;“암탉이 울면 나라가 망하잖아요.&quot;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;font face=&quot;Andale Mono&quot;&gt;무척이나 혼란스러웠다. ‘암탉’ 이후부터 나 자신도 무척 이상하게 보이기 시작했다. 애초에 각자의 세계와 현실 세계는 무척이나 동떨어져있구나, 이런 상황에서 정치권력의 교체가 우리의 삶을 윤택하게 만들어 줄 수 있을까, 생각했다. 이번 강남역 사건에 대한 정치권과 시민단체의 논평을 보며 문득 이 생각이 다시 떠올랐다.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">[AWS] Amazon VPC 천천히 이해하기 - 0</title>
    <id>https://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-0</id>
    <updated>2018-04-07T13:23:28.846000Z</updated>
    <published>2018-02-07T02:50:42Z</published>
    <link href="https://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-0" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="aws" />
    <content type="html">&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;a href=&quot;http://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-0&quot;&gt;Amazon VPC 천천히 이해하기 - 0&lt;/a&gt;&lt;br /&gt;&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;a href=&quot;http://joon.postach.io/post/aws-amazon-vpc-ceonceonhi-ihaehagi-1&quot;&gt;Amazon VPC 천천히 이해하기 - 1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;
&lt;div&gt;&lt;hr /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Amazon VPC(Virtual Private Cloud)는 Amazon Cloud 내에서 Virtual Private Network를 만들기 위한 서비스 입니다. VPC를 통해 사용자는 Public, Private Network. 환경을 사용자가 디자인 할 수 있고, Network 흐름을 제어할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;앞으로 이어질 글에서는 VPC를 이용해 Public, Private subnet을 만들어보고, Bastion을 통해 외부에서 Private Network를 접근해보며 VPC를 알아보고자 합니다&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Region &amp; Availability Zone(AZ)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;background-color: rgb(153, 153, 153);&quot;&gt;&lt;hr /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;먼저, VPC를 구성하기 위해서, Region과 Availability Zone에 대한 이해가 필요합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/f1401ef7-d20c-42cf-8e64-2fa9ff2743ed/3738ade6-8fcb-4f6b-9d48-d99741ab1362.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Region이란 AWS가 서비스하는 데이터 센터의 지리적 위치입니다. 북남미, 유럽, 아시아에 데이터 센터가 위치하고 있고, 모든 Region은 독립적입니다. 각 Region내에는 2개 이상의 Availability Zone이 있습니다. AWS의 Resource를 이용하기 위해서는 해당 Resource를 배치할 Availability Zone을 선택해야 합니다.&lt;/div&gt;
&lt;div&gt;각 Region은 물리적으로 분리되어 있지만, 각 Region을 가로지르는 AWS의 글로벌 네트워크 위해서 통신 할 수 있습니다. 그러므로 유저는 전 Region에 Application을 구성할 수 있고, Data를 Region간으로 복제할 수 있으며, 어떤 Region에 장애가 발생하더라도 피해를 최소화할 수 있습니다. &lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/f1401ef7-d20c-42cf-8e64-2fa9ff2743ed/bd0ac2fd-3a5e-4401-b37a-9bbaa71cf54d.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Availability Zone이란 Region의 논리적 데이터 센터입니다. 각 Region의 AZ는 1개 이상의 물리적 데이터 센터에 의해 구동되며, AWS는 이중화 된 설계를 통해 각 AZ가 동시에 작동하지 않을 가능성을 낮춥니다. 또한 AWS는 각 AZ에 Resource를 고르게 분산하기 위해, 각 계정마다 AZ를 독립적으로 Mapping합니다. 이는 서로 다른 AWS 계정이 같은 Region의 AZ를 사용하더라도, 같은 물리적 하드웨어를 사용하지 않음을 의미합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;고로, Multi-AZ 위에서 Application을 서비스 한다면 유저는 물리적으로 다수의 데이터센터를 이용하는 효과를 누릴 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Subnet&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;hr /&gt;&lt;div&gt;AWS VPC에서도 Subnet을 사용할 수 있습니다. Subnet은 일반적으로 알려진 Subnet과 동일합니다. Subnet은 반드시 하나의 AZ안에 속해야하며, 사용자는 다수의 Subnet을 생성하여 각각의 AZ에 분산 배치하면 하나의 VPC에 Multi AZ를 사용하도록 디자인 가능합니다. Subnet으로 나뉘어진 네트워크는 라우터를 통해 통신이 가능합니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/f1401ef7-d20c-42cf-8e64-2fa9ff2743ed/ebbef39a-20a5-4263-a564-f2021b4f0941.png&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;위 VPC는 서울 Region, AZ a와 C에 각각 두개의 Subnet을 배치한 그림입니다. 위 그림 처럼 서브넷을 나눈다면 Private Zone과 Public Zone을 나눌 수도 있으며, 각 서브넷에 CIDR을 설정하여 클래스없이 라우팅 할 수 있습니다. 또한 ELB(Elastic Load Balancer)를 통해 Region내 Multi-AZ로 설정 함으로써 HA를 구성할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;HA와 보안을 위해서는 초반 VPC 구성 단계 부터 Multi AZ와 Public, Private Zone을 생각하며 디자인 해야 합니다. 이 후 글 부터는 실제 VPC를 구성해 보며, VPC를 활용하는 방법을 알아보겠습니다.&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">2017년 8월 23일</title>
    <id>https://joon.postach.io/post/2017nyeon-8weol-23il</id>
    <updated>2018-01-08T23:10:57.696000Z</updated>
    <published>2018-01-08T23:05:58Z</published>
    <link href="https://joon.postach.io/post/2017nyeon-8weol-23il" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="diary" />
    <content type="html">&lt;div&gt;&lt;span style=&quot;font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;군대에 있을 무렵, 신상정보카드를 들춰보다가 직업칸에 ‘개발자’라고 적은 선임을 본 적이 있다. 훈련소에서 본인 신상을 말하면서 자기 입으로 직접 개발자라고 말했을 것이다. 당당하게 ‘저는 개발자에요!’라고 했을지, 곰곰히 생각하다가 컴퓨터 쪽에 일을해요.. 했더니 아 그럼 ‘개발자’니? 라고해서 개발자라고 적힌 것인지는 모르겠지만 본인이 그렇게 쓰라고 했으니 신상정보서류에 개발자라고 기록된 것이다. 개발자가 그리 대단한 것이란게 아니라, 그 칸에는 사무직도 있었고 ‘기타’라는 손쉬운 선택지가 있었음에도 불구하고 기타옆 빈칸에 개. 발. 자. 라고 한자 한자 써냈다는 것이 사실 무지 흥미로웠다.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; font-size: 14px; letter-spacing: -0.12px; orphans: 2; widows: 2; font-variant-ligatures: normal;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; font-size: 14px; letter-spacing: -0.12px; orphans: 2; widows: 2; font-variant-ligatures: normal;&quot;&gt;이번 방학에 큰 기업의 인턴과 비교적 작은 기업의 data ops 업무를 제의 받았다. 결과적으로는 작은 기업에 가기로 선택했는데, 나는 늑대가 되어야지 목줄 단 개로 살지 않을거야… 라는 큰 대의는 아니고, 적어도 흥미로운 서비스를 위해 개발한다던지,&lt;/span&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; font-size: 14px; letter-spacing: -0.12px; orphans: 2; widows: 2; font-variant-ligatures: normal;&quot;&gt; 또 좀 더 자유롭게 내 생각이나 뜻을 공감해주는 곳에 가고 싶었다. 큰 기업에 가지 않은 것을 아쉬워하는 이야기도 꽤 들었지만 인정을 바라기 전에 내 실력을 증명하고 싶어하는 자아에 잘 맞아 떨어진 선택이라고 나는 생각했다&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;개발을 하는 사람들은 두 종류로 나뉜다고 생각한다. 자기 직업이 개발이라는 사실을 받아들이는 개발자, 수단으로써 개발을 하는 개발자 말이다. 그 둘 사이에 우열 따위는 당연히 없고 한쪽이 더 코드를 잘 짠다거나 창의력이 뛰어나다고 생각하지도 않는다. 그냥 나도 이 직업에 잠깐 있어보며, 내가 만약 10년 정도 이 바닥에 있어도 공적 서류의 직업 칸에 무엇인가를 기재해야할 때 기타 항목에 체크할 것 같았다.&lt;/div&gt;
&lt;div&gt;&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph: true;&quot;&gt;솔직히 말하면 만드는 것 그 자체에 무슨 큰 의미가 있는지 잘 모르겠다. 아마 계속 모른채로 해나가야지 싶다. 그리고 그런 모든 개발자들의 마음에도 평화가 깃들 수 있다면.. 하는 생각이 들었다.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">2015년 8월 18일</title>
    <id>https://joon.postach.io/post/2015nyeon-8weol-18il</id>
    <updated>2017-12-29T23:18:02.795000Z</updated>
    <published>2017-12-29T23:13:16Z</published>
    <link href="https://joon.postach.io/post/2015nyeon-8weol-18il" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="diary" />
    <content type="html">&lt;div&gt;&lt;span style=&quot;font-size: 14px; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;&quot;&gt;전역소감문을 대신해서.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 14px; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; letter-spacing: -0.12px; orphans: 2; widows: 2;&quot;&gt;#1.&lt;/span&gt;&lt;br/&gt;&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); color: rgb(29, 33, 41); font-family: &quot;SF Optimized&quot;, system-ui, -apple-system, system-ui, &quot;.SFNSText-Regular&quot;, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;휴가를 나와 제일 첫번째로 하던 일은 사는 곳 주변에 무엇이 바뀌었나 돌아보던 일이었습니다. 공사중인 건물이 꽤높이 지어진 것에 놀라기도 하고, 자주가던 술집이 문닫은 것을 보고 씁쓸해하기도하고, 새로 생긴 음식점에 들어가 맛보는 것도 휴가의 재미이기도 했습니다. 매달매달 바뀌어가는 도시의 풍경과 계절의 색채변화는 국방부의 시계가 흐르고 있다는 증거이기도 해 무척 행복하게 이 일을 즐겼습니다.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;그러던 어느날 추억이 많은 카페에 다시 갔을때 간판이 바뀌어져있던 것을 봤습니다. 갑자기 제가 무척 미련해 보였습니다. 그 간판이 제게 너도 이제 잊어버려, 라고 말하는 것 같았습니다. 사실 이 일은 현재를 즐기는 작업이라기보다 지난 기억을 밟으러 나가는 작업이라는걸 느꼈기 때문입니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;-&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;#2.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;대구와 서울을 왔다갔다 하던 길, 그리고 휴가 나와 돌아다니던 길에는 일정한 간격으로 나무가 서 있었습니다. 원체 미적감각이 없어서 왜 그런지는 모르지만 도로변에는 일정한 간격과 높이, 동일한 종의 나무 들이 자라고 있었습니다. 이어폰을 귀에 꽂고 멍하니 버스 창 밖을 보다보면, 마치 나무들이 이어폰에서 뿜어내는 리듬처럼, 시각적인 리듬을 만들어내는 것으로 느껴졌습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;군인이 되고나서 영외에서 보낸 시간을 기억하고 싶어 사물을 자세히 관찰하는 버릇이 생긴 후로, 그 수많은 가로수들이 조금씩은 다르게 생겼음을 알게 되었습니다. 껍질이 듬성듬성 벗겨진 나무들 부터 가지가 길게 자란 나무들, 잎이 티나게 무성한 나무들도 있었습니다. 부대에서 집으로, 집에서 부대로 오가는 수많은 반복 속에서 저는 가로수들의 사소한 특징을 기억할 수 있었습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;이 가로수들의 '서로 조금씩 다름'이 제게 가르쳐준 것은 군생활에서 느끼던 것과 크게 다르지 않았습니다. 매일매일 계획되어있는 비슷한 하루와 유사한 패턴속이었지만 예기치 못한 사건에 땀내고 혼나고 또 하루종일 웃곤했습니다. 돌이켜보면 군생활 하루하루 모두 조금씩 달랐던 것 같습니다. '마땅히 이렇게 흘러가겠거니 싶은' 어떤 고정적인 생각들이 깨져나가면서 어떤 타이밍이냐 어떤 일이냐에 따라 커다란바위가 되어 돌아오기도 하고, 생각보다 가벼운 민들레 꽃씨같은 일이 되어 돌아오기도 했습니다. 어찌되었던 제 뇌리에 깊게 박혀있는 일들은 (좋은 일이든, 안 좋은 일이든) 예기치 못한 사건들입니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;-&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;#3.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;지구상에서 은하수를 가장 잘 볼 수 있는 곳은 호주의 한 오지라고 합니다. 별이 무척 환하게 빛나 은하수 사이사이에 어두운 부분도 선명하게 보인다고 합니다. 호주 원주민들은 이 공백에 ‘에뮤’라는 이름을 붙였습니다. 에뮤는 호주 고유종인 새의 이름입니다. 대부분의 문화권에서는 별자리에 이름을 붙이고 이야기를 만드는데, 이 원주민들은 별이 아닌 별의 공백에서 새를 본 것입니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;이런 인식은 저에게 무척 아름답게 느껴졌습니다. 많은 사람에게 공백이라고 표현되는 군 생활에 제가 의미를 부여한다면 그 자체로서 가치있는 시간이 되리라 생각했습니다. 지루하게 반복되는 군 생활이라도, 가장 빛나는 20대의 이 순간을 허망하게 기억하고 싶지는 않았습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;제 군생활에서 의미를 얻었던 책 중에 하나는 처용설화입니다. 자신의 부인의 간통 현장을 목격하고 춤을 추고 노래를 부르는 (비록 무속의 영역이지만) 처용의 모습을 보며 제 삶을 관통하는 문제에 큰 위안을 얻었습니다. 입대하기 전, 저는 실체도 명확하지 않은 문제들로 저 자신을 괴롭혔습니다. ‘처용’처럼 앞으로 닥칠 문제에 웃는다면, 아니 웃을 수 있다면 주변의 추한 것들도 사랑할 수 있으리라 생각했습니다. 사람에 대한 사랑은 고결하고 유능한 곳에 있지 않고 누추한 곳에 있는 것이 아닌가 생각했습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;-&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;#4.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;“어떤 문제이건 그것이 발생한 차원에서는 해결이 불가능하다.&quot; 아인슈타인의 말로 기억합니다. 어쩌면 군대에 있던 제가 느꼈던 문제와 앞으로 제가 겪게 될 문제들은 해결 불가한 문제일지도 모릅니다. 그래서 사람은 항상 문제로 둘러쌓여져있고, 나약한 존재라고 불리는 것 같습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;이러다보니 사람과 사람의 마음은 조화만으로 이어진 것이 아니라 오히려 상처와 상처로 연결된 것일지도 모른단 생각을 했습니다. 아픔과 아픔으로, 나약함과 나약함으로, 가슴 아픈 상실을 통과해야만 진정한 조화의 근저에 도달할 수 있는 것이라 생각했습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;2년동안 많은 사람을 잃었고, 또 많은 사람이 생겼습니다. 제대를 하고 보니 저의 부족함 때문에 잃은 사람들이 더 생각나는건 어쩔 수 없는 것 같습니다. 이기적인 욕심이겠지만, 지금이라도 용서를 빌고싶은 마음입니다. 또한 같은 잘못을 새로 얻은 사람들에게 반복하지 않고 싶습니다. 이 경험이 진정한 조화를 위한 하나의 배움의 과정이기만을 간절히 바라고있습니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;-&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;#5.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;제대를 하고 집으로 돌아오는 기차는 서울역에 도착하기전 한강철교를 건넜습니다. 한낮의 한강은 여름 햇살을 받아 반짝이며 유유히 흐르고 있었습니다. 눈을 감으니 물 소리가 들리는 듯 했습니다. 한강을 끼고 뻗어나가는 이름모를 도로들과 그 도로를 달리는 형형색색 차들.. 이 모두가 무척 아름다웠습니다. 설사 제 삶이 예측할 수 없는 순간의 아름다움과 상관없이 흘러간다해도 지금 이 순간에 제 의식을 묶어두어야겠다고 생각했습니다. 찰나와 긴긴 삶이 상관없다는 사실만으로도 이 생각을 지키기엔 충분했습니다. 마치 파도타기처럼, 예측할 수 없는 순간의 파도를 피하기보다 즐기려합니다. 그 순간이 아무리 힘들고 어려워도, 어떤 결과로 돌아오더라도 가치를 부여하는건 제 마음먹기에 달려 있을테니 말입니다.&lt;/font&gt;&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/5e6ff1de-ccb3-4a27-975a-5db80bc64911/85709658-8608-4e8d-a5bc-06c3d3024104.png&quot; /&gt;&lt;br/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">2014년 6월 26일</title>
    <id>https://joon.postach.io/post/2014nyeon-6weol-26il</id>
    <updated>2017-12-20T04:28:31.945000Z</updated>
    <published>2017-12-20T04:27:13Z</published>
    <link href="https://joon.postach.io/post/2014nyeon-6weol-26il" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="diary" />
    <content type="html">&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;어릴적 내가 생각하던 어른은 힘들고 싫은 일도 피하지 않고 묵묵히 처리하고, 어린애처럼 어리광부리지 않고, 침착하고, 여유있고.. 남들에 공감도 잘하는, 밤을 새더라도 다음날 짱짱한 그런 완벽한(?!) 존재였다.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;입대하고난 뒤 뭔가 보통 21살 대학생과는 조금 다른 성인대접을 받고나서부터 여러가지 선택에서 고민이 많아졌다. 난 아직 어린아이인데, 행동하나에, 말투하나에 신경쓰게되면서 어른이 점점 되가는구나 싶었다. 그래도 한참 모잘랐고, 본디 어른이 아니기에 스트레스만 쌓일뿐...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(29, 33, 41); font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;그런데 어쩌면 어른이 된다는 것은 거대한 사기가 아닐까 하는 생각이 들었다. 마치 모두 함께 짜고치는 고스톱처럼, 효과적인 어른 흉내 요령을 터득하는 과정일뿐 사실 내용물은 어린애인 상태 그대로가 아닌걸까. 하기싫은 일은 어릴적 숙제 하기 싫었던 것 처럼 여전히 하기 싫지만 단지 선택의 기로에서 답이 다를뿐. 어릴 때는 '아아! 나 이거 하기 싫어! 하고 발을 구르는 선택보다 지금은 한숨을 크게 한번 쉬고 깨작깨작 그 일에 접근하는 선택으로 갈 뿐이라는 것. 친구에게 섭섭한 일이 생겼을 때 문자로 대뜸 너 싫다라고 말하기 보다 지금은 한숨 한번 크게 쉬고 '그건 좀 그렇지 않았니'라고 말하는 선택할 뿐이라는 것. 하기 싫은건 똑같고 화나는 것도 똑같고 섭섭한 것도 똑같다. 단지 태연한 표정, 하하하! 하는 헛웃음 같은 기술을 익혀서 사기를 더욱 잘 칠 수 있게 되는 것 아닐까 싶었다. 존경스럽다 이 시대의 어른들..!&lt;/span&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">[Python] Iterables vs. Iterators vs. Generators</title>
    <id>https://joon.postach.io/post/python-iterables-vs-iterators-vs-generators</id>
    <updated>2017-12-20T04:37:19.747000Z</updated>
    <published>2017-12-19T17:49:38Z</published>
    <link href="https://joon.postach.io/post/python-iterables-vs-iterators-vs-generators" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="python" />
    <content type="html">&lt;div&gt;파이썬의 기본 컨셉 중 빈번히 헷갈리는&lt;a href=&quot;http://nvie.com/posts/iterators-vs-generators/&quot;&gt; Iterables, Iterators, Generators를 잘 정리한 글&lt;/a&gt;이 있어 번역 및 나름대로 정리를 해 보았습니다. 번역이 이상하거나 틀린 부분이 있으면 댓글 부탁드립니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;hr/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Python에는 아래의 컨셉이 있고 그 차이에 대해 빈번히 헷갈리곤 합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;a container&lt;/li&gt;&lt;li&gt;an iterable&lt;/li&gt;&lt;li&gt;an iterator&lt;/li&gt;&lt;li&gt;a generator&lt;/li&gt;&lt;li&gt;a generator expression&lt;/li&gt;&lt;li&gt;a {list, set, dict} comprehension&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;이 글에서는 위의 컨셉에 대해 정리해 보려고합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/2fc08d01-bfdc-4c5c-afc6-658b0c874a5a/409239e5-8478-42c2-8448-2c548ad18fcd.png&quot; /&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Containers&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;
&lt;div&gt;&lt;hr style=&quot;font-size: 14px;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;Container는 여러 원소들을 가지고 있는 자료구조로서 Membership test를 지원합니다. 이 자료구조는 메모리에 상주하며 그 값 또한 메모리에 상주합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Python에서 잘 알려진 Container는 아래와 같습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;list&lt;/span&gt;, deque, …&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;set&lt;/span&gt;, frozensets, ...&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;dict&lt;/span&gt;, defaultdict, OrderedDict, Counter, …&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;tuple&lt;/span&gt;, named tuple, … &lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;str&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Container는 박스나 집, 화물과 같은 실제 세계에 존재하는 Container와 같기 때문에 이해하기 쉽습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;기술적으로, 특정 element를 포함하고 있는지 확인 할 수 있으면 그 Object는 container입니다. 우리는 아래와 같이 위의 자료구조에 대해 membership test를 수행할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;]      &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(136, 136, 136); font-family: Monaco;&quot;&gt;# lists&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;]&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;}      &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(136, 136, 136); font-family: Monaco;&quot;&gt;# sets&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;)      &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(136, 136, 136); font-family: Monaco;&quot;&gt;# tuples&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Dict의 경우에도 Key들에 대해 membership test를 수행할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; d &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'foo'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'bar'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'qux'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; d&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; d&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'foo'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; d  &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(136, 136, 136); font-family: Monaco;&quot;&gt;# 'foo' is not a _key_ in the dict&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;마지막으로 String또한 membership test를 수행 할 수 있는데, 이는 substring에 대해 테스트를 수행 합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; s &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'foobar'&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'b'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; s&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'x'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; s&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;assert&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 240, 240); font-size: 12px; color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt;'foo'&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(85, 85, 85); font-family: Monaco;&quot;&gt; s  &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(136, 136, 136); font-family: Monaco;&quot;&gt;# a string &quot;contains&quot; all its substrings&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;마지막 예시의 경우에는 조금 이상하지만, container interface가 object를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Opaque_data_type&quot;&gt;opaque&lt;/a&gt;하게 렌더한다는 것을 볼 수 있습니다. string은 모든 substring의 복사본을 메모리에 저장하지 않지만, 저 방식으로 실행할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-size: 18px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(250, 250, 250);&quot;&gt;&lt;span style=&quot;background-color: rgb(250, 250, 250); font-size: 18px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue'; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;&quot;&gt;NOTE:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;orphans: 2; widows: 2;&quot;&gt;&lt;span style=&quot;background-color: rgb(251, 250, 248);&quot;&gt;&lt;span style=&quot;background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: 'Helvetica Neue'; font-size: 14px;&quot;&gt;대부분의 container들이 자신이 가진 모든 원소를 produce할 수 있는 방법을 제공하지만, 이 기능은 container의 기능이 아닌 iterable의 기능입니다. &lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;orphans: 2; widows: 2;&quot;&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;orphans: 2; widows: 2;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;background-color: rgb(251, 250, 248); font-size: 14px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue';&quot;&gt;모든 container들은 iterable하지 않습니다. 그 예로 &lt;/span&gt;&lt;a style=&quot;background-color: rgb(251, 250, 248); font-size: 14px; font-family: 'Helvetica Neue';&quot; href=&quot;https://en.wikipedia.org/wiki/Bloom_filter&quot;&gt;Bloom filter&lt;/a&gt;&lt;span style=&quot;background-color: rgb(251, 250, 248); font-size: 14px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue';&quot;&gt;가 있습니다. 이 같은 확률적인 자료구조는 특정 원소를 가지고 있는지 확인 할 수 있지만, 각각의 개별 element는 반환하지 못합니다.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Iterables&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;hr/&gt;&lt;div&gt;앞서 말했듯이,&lt;span style=&quot;font-weight: bold;&quot;&gt; 대다수&lt;/span&gt;의 container는 iterable합니다. 그러나 이 뿐만 아니라 iterable한 더 많은 것들이 있습니다. 그 예로 &quot;open files&quot;나 “open sockets&quot;가 있습니다. container가 유한할 경우에도, iterable은 무한한 data source로 나타낼 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;f3f3712aaddd88edeaf79c28f0686e65&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Iterable&lt;/span&gt;은 모든 element를 반환할 목적으로 &lt;span style=&quot;font-weight: bold;&quot;&gt;iterator&lt;/span&gt;를 반환할 수 있는 object입니다. 꼭 자료구조일 필요는 없습니다. 이상한 소리 같지만, 이 것은 iterable과 iterator의 중요한 차이점 입니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;x는 iterable입니다. 반면 y와z는 iterable x로 부터 값을 produce하는 두개의 독립적인 iterator &lt;/div&gt;
&lt;div&gt;instance입니다. y와 z는 예에서 볼 수 있듯 state를 가지고 있십니다. 위 예에서 x는 자료구조지만(list) 앞서 말했듯이 꼭 자료구조일 필요는 없습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;box-sizing: border-box; font-size: 18px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(250, 250, 250); color: rgb(51, 51, 51); font-family: 'Helvetica Neue'; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;&quot;&gt;NOTE:&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;orphans: 2; widows: 2;&quot;&gt;&lt;span style=&quot;background-color: rgb(251, 250, 248);&quot;&gt;&lt;span style=&quot;background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: 'Helvetica Neue'; font-size: 14px;&quot;&gt;자주 실용적인 이유로, iterable 클래스들은 __iter__()와 __next__() 메소드를 같은 클래스 안에 구현하며, self를 반환하는 __iter__() 메소드를 갖는데 이는 그 자신을 iterable하게 만들어줌과 동시에 그 자신의 iterator이도록 만들어줍니다. 물론 iterator로서 다른 object를 반환해도 좋습니다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;마지막으로 만약에 아래와 같이 코드를 쓴다면&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;624f9192930e708e5ddb61098b8dc5ea&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;아래의 그림은 위의 위의 코드가 실행 될 때에 벌어지는 일을 도식화한 그림입니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://cdn-images.postach.io/3acd8105-95a9-460f-86f9-cbd92773990d/2fc08d01-bfdc-4c5c-afc6-658b0c874a5a/d0fbd4bc-4545-456f-898d-2fe9e39db246.png&quot; /&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;파이썬 코드를 disassemble 해보면 GET_ITER 함수를 호출하는 것을 볼 수있는데 이 것은 본질적으로 iter 메소드를 invoke하는 것과 같습니다.  FOR_INTER 명령행의 경우 next()를 모든 element를 가져오기 위해 반복적으로 호출하는 것과 같은데, 하지만 이것은 인터프리터의 속도최적화를 위해 바이트 코드 instruction에서는 보이지 않습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;f85a6d20b421e12ddc3e64338a4efe3b&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Iterator&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;hr/&gt;&lt;div&gt;그렇다면 &lt;span style=&quot;font-weight: bold;&quot;&gt;Iterator&lt;/span&gt;는 무엇일까요? Iterator는 stateful한 helper object이며, 이것은 next() 메소드를 호출 할 때 다음 값을 produce합니다. __next__() 메소드를 가지고 있는 object는 iterator입니다. 어떻게 값을 생성하는지는 무관합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;그러므로, iterator는 value factory입니다. iterator는 next value를 요청할 때마다, 어떻게 next value를 계산할 것인지 알고있습니다. 왜나혀면 iterator는 internal state를 가지고 있기 때문입니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;iterator의 예시는 셀 수 없이 있습니다. itertools의 모든 함수는 iterator를 반환합니다. &lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;일부는 무한한 sequence를 반환합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(14, 132, 181); font-family: Monaco; font-weight: bold;&quot;&gt;itertools&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; count&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; counter &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; count(start&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;13&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 112, 32); font-family: Monaco;&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;(counter)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;13&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 112, 32); font-family: Monaco;&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;(counter)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;14&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;일부는 유한한 sequence에서 무한한sequence를 반환합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;1bc0de0f83f08801df25e946f7d5e24f&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;일부는 무한한 sequence에서 유한한 sequence를 반환합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;c967e20d6421a8fcb9ec92384e5834b2&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;iterator를 좀 더 이해하기 위해서 피보나치 수를 생성하는 iterator를 만들어 보겠습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;a5ae3380dfa6e89a394ad9f3660e51f2&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이 클래스는 __iter__() 메소드를 가지고 있음으로 iterable함과 동시에 __next__() 메소드를 가지고 있음으로 그 자신의 iterator입니다. &lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;iterator안의 state는 prev 와 curr instance 변수를 통해 완전히 보존됩니다. 그리고 이 변수들은 iterator의 이따르는 호출을 위해 사용됩니다. 모든 next 메서드 호출은 두가지 중요한 점이 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;ol&gt;&lt;li&gt;다음 next() 메소드 호출을 위해 자신의 state를 변경한다.&lt;/li&gt;&lt;li&gt;현재 호출을 위해 값을 생성한다.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div&gt;&lt;span style=&quot;box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(250, 250, 250);&quot;&gt;&lt;span style=&quot;background-color: rgb(250, 250, 250); color: rgb(51, 51, 51); font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold; font-family: 'Helvetica Neue'; font-size: 16px;&quot;&gt;Central idea: a lazy factory&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;orphans: 2; widows: 2; background-color: rgb(250, 250, 250);&quot;&gt;&lt;span style=&quot;background-color: rgb(250, 250, 250); font-family: 'Helvetica Neue'; font-size: 14px;&quot;&gt;겉에서 보자면 iterator는 lazy factory 같아 보입니다. lazy factory는 값을 요청할 때까지 idle state입니다. 이것은 값을 생성하고, 다시 idle 상태로 돌아갑니다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-weight: bold; font-size: 24px;&quot;&gt;Generator&lt;/span&gt;&lt;/div&gt;&lt;hr/&gt;&lt;div&gt;Generator는 파이썬의 우아한 버젼의 iterator입니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Generator는 __iter__(), __next__() 메소드를 쓰지 않는 대신 조금 더 우아한 버전의 피보나치 iterator를 만들 수 있도록 해줍니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;정리하자면,&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;모든 Generator는 iterator 입니다. (역은 성립하지 않습니다.)&lt;/li&gt;&lt;li&gt;모든 Generator는 그러므로 factory이며 게으르게(lazy) 값을 생성합니다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;아래의 예시는 generator로 쓰여진 피보나치 factory입니다.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;7bdf823d83cd65cf78bb25cc6ef88f96&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이렇게 우아한 코드는 아래의 명령을 통해 만들어집니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold; line-height: 16.25px;&quot;&gt;yield&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;위의 코드가 어떻게 실행되는지 알아봅시다. 첫째로 fib 함수는 평범한 파이썬 함수입니다. 하지만, 이 함수에는 return 키워드가 없습니다. 함수의 반환값은 generator입니다. (iterator이고, factory이며, stateful helper function입니다.)&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;f = fib() 가 실행 될때 generator는 인스턴스화되고 반환되어집니다. 아무런 코드가 실행되지 않으며 generator는 idle 상태로 시작됩니다. prev, curr = 0, 1 역시 아직 수행되지 않았습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;그리고 generator가 islice() 로 래핑이 됩니다. 이 자체로 iterator로 idle상태입니다. 아직까지는 아무일도 벌어지지 않습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;그리고 iterator가 list로 래핑이 되면서, 이것은 모든 arguments를 소비하며 list를 만들어냅니다. 이 것을 수행하기 위해 list는 islice()를 호출하기 시작하고 islice()는 f instance에서 next() 메소드를 호출하기 시작합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;조금 더 찬찬히 보자면, 처음 호출에서 prev, curr = 0, 1이 수행됩니다. 그리고 loop문으로 들어가게 되며, yield curr문을 만나게 됩니다. 이 것은 현재의 curr 값을 생산하며 idle 상태로 들어갑니다.  이값은 islice() 메소드로 넘겨지며 list에 1이 추가됩니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;그 다음 list는  islice()에 다음 값을 요청하고, islice()는 f에 다음 값을 요청합니다. 그 f 함수는 정지상태를 벗어나 prev, curr = curr + prev문 부터 수행됩니다. 그러므로 다시 loop문에 들어가고 앞 과 같이 다음 curr 값을 생성합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이는 10개의 원소가 가질 때까지 계속되며 list()가 열한번째 값을 요청하는 순간 islice() 는&lt;span style=&quot;font-weight: bold;&quot;&gt; StopIteration &lt;/span&gt;exception을 발생시킵니다. 그리고 이 list는 결과를 반환합니다. generator는 11번째 next() 호출을 받지 않으며, 다시 사용되어 지지 않고, garbage collected 됩니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Types of Generator&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;hr/&gt;&lt;div&gt;Generator에는 2가지 타입이 있습니다. generator &lt;span style=&quot;font-weight: bold;&quot;&gt;functions&lt;/span&gt; 과 generator &lt;span style=&quot;font-weight: bold;&quot;&gt;expressions&lt;/span&gt;입니다. generator function은 앞서 말씀드린 예와 같이 함수 안에 yleid 키워드를 가지고 있는 함수입니다. 다른 타입은 list comprehension과 같은데, 이 문법은 한정된 use case에 대해 굉장히 우아합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;만약 제곱 수를 만드는 코드를 쓴다면&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; numbers &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;]&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; [x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; numbers]&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;9&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;36&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;당연히 set 으로도 같은 일을 할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; {x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; numbers}&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;36&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;9&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;dict도 가능하구요&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; {x: x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; numbers}&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;9&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;36&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;generator expression으로도 쓸 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div style=&quot;box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);&quot;&gt;&lt;div style=&quot;padding: 0px; box-sizing: border-box; font-size: 15px; overflow-x: scroll;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; lazy_squares &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; (x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 136, 0); font-family: Monaco; font-weight: bold;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 0); font-family: Monaco; font-weight: bold;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; numbers)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; lazy_squares&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&lt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;generator &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 112, 32); font-family: Monaco;&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&lt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;genexpr&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; at &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 85, 136); font-family: Monaco; font-weight: bold;&quot;&gt;0x10d1f5510&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 112, 32); font-family: Monaco;&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;(lazy_squares)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;1&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 112, 32); font-family: Monaco;&quot;&gt;list&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;(lazy_squares)&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-size: 12px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;9&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(0, 0, 221); font-family: Monaco; font-weight: bold;&quot;&gt;36&lt;/span&gt;&lt;span style=&quot;font-size: 12px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco;&quot;&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;다시한번 강조하자면, lazy_squares의 첫번째 값은 next() 메소드에 의해 읽혀졌기 때문에 list()를 통해 얻은 값은 2의 제곱부터 시작됩니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Summary&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;hr/&gt;&lt;div&gt;Generator는 강력한 프로그래밍 구조입니다. Generator는 좀 더 적은 변수와 데이터 구조로 streaming code를 쓰도록 도와줍니다. 게다가 이는 적은 메모리를 사용하고 CPU 효율성을 챙길 수 있으며 더 짧은 code로 같은 일을 할 수 있습니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;아래는 generator를 시작하기 위한 tip입니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;code data-gist-id=&quot;50bfe89de5753017a52569307e387701&quot;&gt;&lt;/code&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;감사합니다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">2016년 10월 17일</title>
    <id>https://joon.postach.io/post/2016nyeon-10weol-17il</id>
    <updated>2017-12-18T05:06:33.033000Z</updated>
    <published>2017-12-18T04:52:47Z</published>
    <link href="https://joon.postach.io/post/2016nyeon-10weol-17il" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="diary" />
    <content type="html">&lt;div&gt;&lt;div&gt;왕십리&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph: true;&quot;&gt;김소월&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);-en-paragraph:true;margin-top:1em;margin-bottom:1em;&quot;&gt;&lt;div&gt;비가 온다&lt;/div&gt;
&lt;div&gt;오누나&lt;/div&gt;
&lt;div&gt;오는 비는&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph: true;&quot;&gt;올지라도 한 닷새 왔으면 좋지.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);-en-paragraph:true;margin-top:1em;margin-bottom:1em;&quot;&gt;&lt;div&gt;여드레 스무날엔&lt;/div&gt;
&lt;div&gt;온다고 하고&lt;/div&gt;
&lt;div&gt;초하루 삭망이면 간다고 했지&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph: true;&quot;&gt;가도 가도 왕십리 비가 오네.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);-en-paragraph:true;margin-top:1em;margin-bottom:1em;&quot;&gt;&lt;div&gt;웬걸 저 새야&lt;/div&gt;
&lt;div&gt;울려거든&lt;/div&gt;
&lt;div&gt;왕십리 건너가서 울어나 다고&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph: true;&quot;&gt;비 맞아 나른해서 벌새가 운다.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);-en-paragraph:true;margin-top:1em;margin-bottom:1em;&quot;&gt;&lt;div&gt;천안에 삼거리 실버들도&lt;/div&gt;
&lt;div&gt;촉촉히 젖어서 늘어졌다네&lt;/div&gt;
&lt;div&gt;비가와도 한 닷새 왔으면 좋지&lt;/div&gt;
&lt;div style=&quot;-en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;-en-paragraph: true;&quot;&gt;구름도 산마루에 걸려서 운다.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true;&quot;&gt;#1.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true;&quot;&gt;매일 같이 왕십리로 왔다 갔다 하면서 비오는 날이면 김소월의 왕십리가 무척 생각나곤 했다. 한양대역을 지나 다음 역을 도착할 때 들리던 안내 방송 속 그 왕십리. 괜시리 떠오르는 시 속에서 ‘비가 온다 오누나 오는 비는..’ 의 여운은 길고 깊었다. 얼마 전에는 ’비 맞아 나른해 벌새가 운다’는 구절에 빠졌다. 가도 가도 비가 오는 왕십리에서 벌새는 나른해서 울고있다. 딱히 불행을 강하게 느끼는 것도 아니며, 또 우는 자신을 이겨내거나 이해하려는 기미 조차 없었다. 왕십리 너머 천안의 실버들도 마찬가지, 비에 촉촉히 젖어 늘어져 있는 모습을 떠올리다 환승역에 도착했다. 몇일이 지나고 다시 저 생각을 곱씹어보니 보통 떠올리던 왕십리의 쉼없이 내리는 비의 모습이 아닌 벌새의 모습에 빠졌던 것은 비를 ‘맞는’다는 사실보다 비를 맞는 것이 습관이 되고 오늘 십리를 가고 내일 십리를 가 왕십리를 벗어난 들 바뀌지 않을 정황이 내일 ‘왕십리’ 할 의지를 막아버린다는 이야기에 공감하기 때문이었다.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true;&quot;&gt;#2.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true;&quot;&gt;최근에 일이 도통 안풀려 사주를 봤다. 평소에 혈액형이나 별자리 같은 전형적인 신파에 치를 떨던 나였지만 이해할 수 없는 일들이 연속적으로 벌어져 지푸라기라도 잡는 심정으로 찾아갔다. 내 사주는 사냥꾼 사주라고 한다. 진취적이고 도전하고 발전하고 성과를 내고… 이런거는 다 좋았는데 하나의 맹점은 사냥감을 잡다가 팔다리가 잘린다는 거다. 그 이유를 물어보니 전형적인 약한 사주라서, 강직하게 일을 풀어나가기에는 장애물이 많단다. 작은 일에도 스트레스를 받지 않느냐 반문했다. 나는 궁금해졌다. 사실 나는 스트레스에 취약해 오만가지가 힘들고 어려운데, 아이폰에 있는 수 많은 설정처럼 스트레스를 비활성화하고 레티나 해상도로 인생을 재생할 수 있다면 얼마나 좋을까 상상했다. 어떻게하면 스트레스를 안받고 살 수 있을지 다시 되물었다.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;사주를 보던 아주머니는 두가지 선택지를 줬다. 사주에 나오건데 내년은 더 시끄러울 것이고 이에 스트레스를 안 받으려면 다시 태어나던가, 내려놓던가. 전자는 해결 방안이라고 하기에는 어폐가 있으니 어찌 할 수 없는건 내려놓으라고 했다. 난 이런 대답을 원해 비싼 돈을 내고 사주를 보러온게 아니었다. 내려놓으라니, 이런 대답은 고등학교 윤리교과서를 읽어봐도 수도 없이 나온다. 사주에 시간을 낸건 그나마 이래 이래 하면 그나마 괜찮아 질거야 같은 신파 따위가 필요했기 때문이다. 그럼 내려놓는 법을 알려달라고 하니 노력하면 된단다. 그 후에는 나에게 달려있다는 말까지 더 했다. 어떻게 하면 내려놓고 싶은 것들을 던져 버릴 수 있을까 고민에 빠져들었다. 또 내려놓고 싶은 것을 떠올려 보았다.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;가장 친했던 친구들한테 뒷통수를 거하게 맞았다. 사실 이 일로 귀국 했다는 사실은 어찌어찌 버틸 수 있었는데, 대학 강의에서 들었던 가해자의 ‘피해의식’을 맞닥드린 순간 분노가 치밀어 올랐다. 다들 자신은 올바른 선택을 했으나 내가 이렇게 되버린 이유는 그들 때문이며 자신도 이만큼 망가졌다는 비정상적인 말을 뱉었다. 시간이 지나고 나까지 그들의 주도권을 위해 싸움에 거론 됐다는 것을 알게 되었다. 그 후로는 이렇게 된 이상 서로 안 적 없는 사람이 되어도 모자랄 판에 나는 너를 이만큼 생각하고 있다고, 다시 잘지내 보자며 나에게 카톡이 오거나 주위사람에게 내 안부를 물어봤다는 사실을 들었다. 화가 났다.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true;&quot;&gt;그러나 이제 와 생각해보면 아예 세상에 있을만한 일이 아니라는 이유도 없었다. 자기 자신들은 정말 자신이 피해자라고 생각했을 수 도 있고, 그 싸움에 있어서는 내가 한국에 돌아왔다는 것이 무척 매력적인 카드였을 수 도 있겠다는 생각을 했다.&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true; margin-top: 1em; margin-bottom: 1em;&quot;&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); -en-paragraph: true;&quot;&gt;지금까지는 힘든 일이 생기면 술부터 찾았다. 소주를 진탕 먹어 다음 날 하루 앓고나면 꽤나 잊혀지기 마련이었다. 그런데 이런 일들이 쌓이다 보니 그 전 일들에서 배웠던 무언가를 같이 잊어버렸던 것 같다. 그렇게 잊어버린 무언가는 사주 아주머니가 말한 시끄러운 앞날에 너무나 중요할 것 같았다. 스트레스받는 일들에 대처했던 순간이나 생각을 정리해 둔다면 비슷한 일로 스트레스 받는 순간에는 좀 더 수월하게 넘어가지 않을까. 또 쉽게 곁가지를 제거하고 새로운 스트레스에 대처할 에너지를 모을 수 있지 않을까, 어쩌면 뭔가를 내려놓기에 필요한 것은 체념보다 그 간 일들에 배웠던 것을 이해하고 간직하는 것일지도 모르겠다는 생각을 했다. 앞으로 술 같은 싸구려 위안을 찾지 않기로 했다.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: 'SF Optimized', system-ui, -apple-system, system-ui, '.SFNSText-Regular', sans-serif; color: rgb(29, 33, 41); font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: -0.12px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;간절하게 좋은 마음으로만 술이 마시고 싶은 날이 오기를 바랐다. 더 이상 비를 맞아 나른한 벌새의 모습은 싫다.&lt;/span&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">Django, Query and Database layer</title>
    <id>https://joon.postach.io/post/django-query-and-database-layer</id>
    <updated>2017-12-18T17:15:32.139000Z</updated>
    <published>2016-08-30T13:19:54Z</published>
    <link href="https://joon.postach.io/post/django-query-and-database-layer" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="django" />
    <category term="python" />
    <content type="html">&lt;div&gt;Django는 ORM을 채택하고 있으며, 다른 ORM과 같이 여러 종류의 Data를 DB 종류와는 독립적인 형태로 객체화 한다. 그리고 생성된 객체에는 Method Set을 제공한다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Django ORM은 대부분의 경우 사용자가 필요한 DB의 작업을 잘 수행하지만 때때로 예상과는 다른 결과를 보여주기도 한다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;get_object_or_404()&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div style=&quot;text-rendering: optimizespeed; font-style: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;&lt;span style=&quot;color: rgb(0, 128, 0); font-weight: bold;&quot;&gt;from&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255); font-weight: bold;&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 128, 0); font-weight: bold;&quot;&gt;import&lt;/span&gt; get_object_or_404&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;단일 객체를 가져와서 작업을 하는 detail view에서는 objects.get() 대신&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;get_object_or_404()&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;를 사용하자.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;예를들어&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;table-layout:fixed;margin-left:0px;width:100%;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:99.86149584487535%;&quot;&gt;
&lt;div&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono';&quot;&gt;views.py&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:99.83498349834984%;&quot;&gt;
&lt;div&gt;from django.shortcuts import get_object_or_404&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;from .models import Post&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;def post_detail(request, pk):&lt;/div&gt;
&lt;div&gt;    post = Post.objects.get(pk=pk)&lt;/div&gt;
&lt;div&gt;    return render(request,&quot;blog/post_detail.html&quot;,{“post&quot;:post,})&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;이처럼 detail view를 만들었다고 생각해보자. 만약 사용자가 정당한 pk값을 넣지 않을 경우 서버는 http 500 error를 반환하게 된다. 하지만 이는 사실 서버의 error로 찍히기는 것보다 http 404 error를 찍는 것이 정당하다. 엄밀히 말하면 서버의 오류가 아닌 사용자가 잘못된 url로 자원을 찾았기 때문이다. 그러므로 아래의 코드가 더 적합하다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;&quot;&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;table-layout:fixed;margin-left:0px;width:100%;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:99.86149584487535%;&quot;&gt;
&lt;div&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono';&quot;&gt;views.py&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;from django.shortcuts import render&lt;/div&gt;
&lt;div&gt;from django.http import Http404&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;from .models import Post&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;def post_detail(request, pk):&lt;/div&gt;
&lt;div&gt;    try:&lt;/div&gt;
&lt;div&gt;        post = Post.objects.get(pk=pk)&lt;/div&gt;
&lt;div&gt;    except Post.DoseNotExist:&lt;/div&gt;
&lt;div&gt;        raise Http404    &lt;/div&gt;
&lt;div&gt;    return render(request,&quot;blog/post_detail.html&quot;,{})&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이처럼 URL에 붙어온 pk값에 알맞는 Post가 없을 경우에 대비하여 try-except 블록을 사용하여 예외처리를 해야한다. 하지만 get_object_or_404()를 이용한다면?&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;table-layout:fixed;margin-left:0px;width:100%;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:99.86149584487535%;&quot;&gt;
&lt;div&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(12, 75, 51);&quot;&gt;&lt;span style=&quot;font-family: 'Fira Mono';&quot;&gt;views.py&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;from django.shortcuts import render, get_object_or_404&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;from .models import Post&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;def post_detail(request, pk):&lt;/div&gt;
&lt;div&gt;    post = get_object_or_404(Post,pk=pk)&lt;/div&gt;
&lt;div&gt;    return render(request,&quot;blog/post_detail.html&quot;,{“post&quot;:post,})&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이렇게 깔끔하게 view를 가져갈 수 있다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;하지만 get_object_or_404() 메서드를 사용하는 데 있어 주의할 점이 있다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;     1. view에서만 사용할 것&lt;/div&gt;
&lt;div&gt;     2. helper function, form, model method, view를 제외한 다른 곳 &lt;/div&gt;
&lt;div&gt;        그리고 뷰와 직접적으로 관련된 곳이 아닌 곳에서는 이용하지말자&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;예를들어 admin페이지에서 특정 데이터를 지우면 404 error 가 발생하면서 모든 사이트가 망가져버리는 결과를 얻는다. get_object_or_404()는 뷰에서만 이용해야 한다!&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;b&gt;ObjectDoesNotExist, DoesNotExist, MultipleObjectReturend&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;단일 모델 instance에서 get_object_or_404()를 사용할 때는 try-except 블록으로 예외처리를 할 필요가 없다. get_object_or_404()가 자동으로 처리하기 때문이다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;하지만 이를 제외한 경우도 있으므로 몇가지 더 알아보자&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;b&gt;&lt;br/&gt;&lt;/b&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;table-layout:fixed;margin-left:0px;width:100%;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:99.86149584487535%;&quot;&gt;
&lt;div&gt;&lt;b&gt;views.py&lt;/b&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;from django.shortcuts import render&lt;/div&gt;
&lt;div&gt;from django.core.exceptions import ObjectDoesNotExist&lt;/div&gt;
&lt;div&gt;from django.http import Http404&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;from .models import Post&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;def post_detail(request, pk):&lt;/div&gt;
&lt;div&gt;    try:&lt;/div&gt;
&lt;div&gt;        post = Post.objects.get(pk=pk) &lt;/div&gt;
&lt;div&gt;    except Post.DoesNotExist:&lt;/div&gt;
&lt;div&gt;    #or ObejctDoesNot Exist&lt;/div&gt;
&lt;div&gt;        raise Http404&lt;/div&gt;
&lt;div&gt;    return render(request,&quot;blog/post_detail.html&quot;,{&quot;post&quot;:post,})&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;ObjectDoesNotExist는 어떤 모델 객체에서도 사용할 수 있지만 DoesNotExist는 특정 모델에서만 사용할 수 있다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;만약 하나이상의 객체를 반환하는 것을 catch하고 싶다면 MultipleObjectsReturned exception을 참고하자. 이 셋을 이용해서 우리가 원하는 방향으로 log를 남기면 된다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;b&gt;지연 평가를 사용하자&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;b&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;
&lt;div&gt;Django의 ORM기능의 가장 강력한 부분 중의 하나는 Data가 정말로 필요하기 전까지 DB에 연동하지 않는다. 따라서 우리는 원하는 결과가 나올 때까지 Chaining을 이용해 결과를 써내려 갈 수 있다. 그러므로 한번에 여러 메서드와 각종 기능을 넣는 대신에 가독성을 위해 여러줄에 걸쳐 쓰는 것이 가능해진다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이를 통해 얻어지는 가독성의 향상은 결국 유지 보수를 한결 더 쉽게 할 수 있다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;width:100%;table-layout:fixed;margin-left:0px;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;&lt;b&gt;views.py&lt;/b&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;from django.models import Q&lt;/div&gt;
&lt;div&gt;from .models import Post&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;“&quot;&quot;&lt;/div&gt;
&lt;div&gt;def search_post(**kwargs):&lt;/div&gt;
&lt;div&gt;    return Post.objects.active().filter(Q(name__startswith=name)|Q(dexcription_icontains=name))&lt;/div&gt;
&lt;div&gt;“&quot;&quot;&lt;/div&gt;
&lt;div&gt;#위의 코드보다 아래의 코드가 더 읽기 좋다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;def search_post(**kwargs):&lt;/div&gt;
&lt;div&gt;    results = Post.objects.active()&lt;/div&gt;
&lt;div&gt;    results = results.filter(Q(name__startswith=name)|Q(dexcription_icontains=name))&lt;/div&gt;
&lt;div&gt;    return results&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;가독성의 향상은 최종 결과가 어떻다는 것을 좀 더 쉽게 이야기 해준다. 코드를 여러 줄로 분리함으로써 코드에 주석을 좀 더 쉽게 달 수도 있다. 파이썬을 쓰는 이유와 완전히 일치하지 않는가?&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://joon.postach.io/feed.xml">
    <title type="text">Django App Design</title>
    <id>https://joon.postach.io/post/django-app-design</id>
    <updated>2017-12-18T17:15:32.261000Z</updated>
    <published>2016-07-31T13:03:03Z</published>
    <link href="https://joon.postach.io/post/django-app-design" />
    <author>
      <name>Jooeun Ahn</name>
    </author>
    <category term="django" />
    <category term="python" />
    <content type="html">&lt;div&gt;Django를 사용하다보면 Django에서의 ‘App’이라는 개념에 혼동이 생기기 쉽다.(우리가 흔히 생각하는 모바일에서의 그 App이 아니기 때문이다.)&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;App Design을 이야기하기 전에 용어정리부터 하자면..&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;width:100%;table-layout:fixed;margin-left:0px;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;A Django project&lt;/div&gt;
&lt;/td&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;Django로 만들어진 web application&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;Django Apps&lt;/div&gt;
&lt;/td&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;Django project의 single aspect를 나타내기 위한 libraries. Django project는 많은 App으로 이루어져 있고 프로젝트에 속하며, 다른 project에서 재사용 되지 않는다.&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;INSTALLED_APPS&lt;/div&gt;
&lt;/td&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;Django project에서 사용할 Django Apps들의 목록. settings.py에서 추가하거나 제거 할 수 있다.&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;Third-party Django packages&lt;/div&gt;
&lt;/td&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:50%;&quot;&gt;
&lt;div&gt;재사용 할 수있고, 어떤 프로젝트던 접목가능한 Django apps를 뜻함. Package로 배포된다.&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;간단히 예를들어 Django project는 냉장고로 생각해보자.&lt;/div&gt;
&lt;div&gt;냉장고 안에는 반찬이나, 과일을 담을 수 있는 보관용기가 있어야 한다. 이 보관용기가 App이다.&lt;/div&gt;
&lt;div&gt;또 Packages는 똑같은 보관용기이긴 하지만 냉장고 안에 있는 것이 아닌 편의점에 비치되어있고, 누구나 가져다 쓸 수있는 상태라고 생각하면 된다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;The Golden Rule of Django App Design&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Django의 핵심 개발자는 좋은 App Design에 대해 이렇게 말했다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;i&gt;“The art of creating and maintaining a good Django app is that it should follow the truncated Unix philosophy according to Douglas McIlroy: ‘ Write programs that do one thing and do it well&quot;&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이 분이 말한 것 처럼 각각의 App들은 그 역할에 촛점이 맞게 설계해야한다. 만약 각각의 앱의 역할을 한 문장으로 정의하지 못한다면, 그 App은 넓은 aspect를 커버하고 있는 것이며 잘게 쪼개야한다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;A Practice Example of Apps in a Project&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;만약 밴드 공연을 위한 Web을 만든다고 생각해보자. &lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;먼저 Django Project를 만들어야한다. 그 속에는 이와 같은 App이 있을 것이다:&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Band&lt;/b&gt; : 밴드의 리스트가 있어야하며, 그 밴드에 대한 간단한 소개글이 있어야한다.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Blog&lt;/b&gt; : 웹사이트를 위한 공식적인 게시판이 존재해야한다.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Event :  &lt;/b&gt;각각의 공연에 대한 리스트가 보여져야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;현재 각각의 App들은 특수한 하나의 일을 하기위해 설계되어져있다. 이 앱들은 &lt;b&gt;Event&lt;/b&gt;을 중심으로 연계되어 있지만 앞서 말했듯 하나의 거대한 App보다는 세분화된 세개의 앱이 더 좋다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이 Web이 더 커지게 된다면 더 많은 앱이 더 필요할 수도 있다 :&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Shop&lt;/b&gt; : 메일이나, 기타 다른 방법으로 표를 팔 수 있어야한다.         &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ticket&lt;/b&gt; : 티켓을 각각의 공연에 맞게 세분화 해 팔아야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이 App들 또한 &lt;b&gt;Event&lt;/b&gt; App과 연계되어 있지만 각각의 기능들이 있으므로 새로 만드는 것이 좋다. &lt;b&gt;Ticket&lt;/b&gt; App을 Event App에서 구현하는게 아닌 따로 떼어서 만드는 이유는, 많은 공연들이 꼭 유료가 아닐 수도 있거니와, Web이 커지면 커질 수록 다양한 공연들이 많아지게 되고, 그에 따라 &lt;b&gt;Ticket&lt;/b&gt; App은 더 복잡한 일을 하게 될 수도 있기 때문이다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;What to name Your Django Apps&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;App 이름은 되도록 분명하게 짓는 것이 좋다. 예를들어 blog, polls, estimates 같은 것들이다. &lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;PEP 8-compliant에 따르면.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;i&gt;“Python package name: short, all-lowercase names without numbers, dashes, periods, spaces, or special characters&quot;&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;&lt;i&gt;&lt;br/&gt;&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;서로의 편의를 위한 약속같은 것이다. 왠만하면 지키자.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;What modules Belong in an App?&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Django를 사용하다보면 여러 module을 사용하게 되는데 일반적으로 쓰이는 것과 아닌 것을 모두 살펴보도록 하자.&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;    Common App Modules&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;     &lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;width:100%;table-layout:fixed;margin-left:0px;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;# Common modules&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;apps/&lt;/div&gt;
&lt;div&gt;    __init__.py&lt;/div&gt;
&lt;div&gt;    admin.py&lt;/div&gt;
&lt;div&gt;    forms.py&lt;/div&gt;
&lt;div&gt;    management/&lt;/div&gt;
&lt;div&gt;    migrations/&lt;/div&gt;
&lt;div&gt;    models.py&lt;/div&gt;
&lt;div&gt;    templatetags/&lt;/div&gt;
&lt;div&gt;    tests/&lt;/div&gt;
&lt;div&gt;    urls.py&lt;/div&gt;
&lt;div&gt;    views.py&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이 Module들은 Django App이 만들어질 때 자동으로 만들어지는 모듈들이다. 이렇게 만들어진 Module을 잘 이용하는 것은 다른 사람들이 당신의 코드를 이해하기 쉽게한다.&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;     2.     Uncommon App Modules&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;table style=&quot;-evernote-table:true;border-collapse:collapse;width:100%;table-layout:fixed;margin-left:0px;&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;border-style:solid;border-width:1px;border-color:rgb(219,219,219);padding:10px;margin:0px;width:100%;&quot;&gt;
&lt;div&gt;# Uncommon modules&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;apps/&lt;/div&gt;
&lt;div&gt;    behaviors.py&lt;/div&gt;
&lt;div&gt;    constants.py&lt;/div&gt;
&lt;div&gt;    context_processors.py&lt;/div&gt;
&lt;div&gt;    decorators.py&lt;/div&gt;
&lt;div&gt;    db/&lt;/div&gt;
&lt;div&gt;    exceptions&lt;/div&gt;
&lt;div&gt;    fields.py&lt;/div&gt;
&lt;div&gt;    factories.py&lt;/div&gt;
&lt;div&gt;    helpers.py&lt;/div&gt;
&lt;div&gt;    managers.py&lt;/div&gt;
&lt;div&gt;    middleware.py&lt;/div&gt;
&lt;div&gt;    signals.py&lt;/div&gt;
&lt;div&gt;    utils.py&lt;/div&gt;
&lt;div&gt;    viewmixins.py&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;이것들은 보통 쓰지 않는 모듈들이다. 하나하나 알아보자&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;b&gt;behaviours.py&lt;/b&gt; : locating model을 위한 option을 모아논 모듈&lt;/div&gt;
&lt;div&gt;&lt;b&gt;constants.py&lt;/b&gt; : App안에 주로 쓰는 상수들을 모아논 모듈&lt;/div&gt;
&lt;div&gt;&lt;b&gt;decorators.py&lt;/b&gt; : App안에서 쓸 decorator들을 모아논 모듈&lt;/div&gt;
&lt;div&gt;&lt;b&gt;db/&lt;/b&gt; : custom model fields 나 components가 필요할때 사용&lt;/div&gt;
&lt;div&gt;&lt;b&gt;fields.py&lt;/b&gt; : form fields를 위해 사용하는 파일. 때로는 db 패키지를 만드는 것을 정의하기 어려울때 model field를 기술하기도 함.&lt;/div&gt;
&lt;div&gt;&lt;b&gt;factories.py&lt;/b&gt; : test data를 모아놓는 모듈&lt;/div&gt;
&lt;div&gt;&lt;b&gt;helpers.py, utils.py&lt;/b&gt; : 코드를 좀더 가볍게 만들기위한 helper 함수를 만들어 논 파일, helpers와 utils는 같은 역할을 함&lt;/div&gt;
&lt;div&gt;&lt;b&gt;managers.py&lt;/b&gt; : models.py가 지나치게 커지면 보편적인 해결책은 해당 모듈에 대한 custom model manager를 만드는 데 이 것을 위한 모듈&lt;/div&gt;
&lt;div&gt;&lt;b&gt;signals.py&lt;/b&gt; : custom signal을 위한 모듈&lt;/div&gt;
&lt;div&gt;&lt;b&gt;viewmixins.py&lt;/b&gt; : view module rho  packages를 가볍게 만들기 위한 모듈 &lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 21px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-size: 21px;&quot;&gt;Summary&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;Django app의 기술 중 가장 중요한 것은 하나의 App이 하나의 일만을 하게 만드는 것이다. 만약 하나의 앱이 지나치게 복잡한 일을 하고 있다면 여러개의 app으로 쪼개주는 것이 좋다.&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
</content>
  </entry>
</feed>
