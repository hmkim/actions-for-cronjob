<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[개발하는 기획자. 기획하는 개발자.]]></title>
			<link>https://blog.naver.com/gi_balja</link>
			
				<image>
					<url><![CDATA[https://blogpfthumb-phinf.pstatic.net/MjAxNzEwMThfMjUg/MDAxNTA4MjY5OTM2NTY2.YuqbDWxv_kLeNrZirmm6HuPUem-rSLIY5QLy5YC2j3sg.zjxyxsIsM3KdGPTN8FKCTyUj7aQEVHH3Tsxevfd3o00g.JPEG.gi_balja/pro.jpg?type=m2]]></url>
					<title><![CDATA[개발하는 기획자. 기획하는 개발자.]]></title>
					<link>https://blog.naver.com/gi_balja</link>
				</image>
			
			<description><![CDATA[개발하는 기획자.
기획하는 개발자.

스타트업 마케터
스타트업 웹퍼블리셔
웹프로그래밍 강사

HTML, CSS, JavaScript, jQuery, Angular, React, Ionic, Hybrid, Java, Android, 자바스크립트, 제이쿼리, 앵귤러, 리액트, 자바, 안드로이드

페이스북 : inkweon7269
페북 페이지 : TryToGaebal
유튜브 채널 : INKWEON7269
연락처 : 010-3442-5303]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Mon, 13 May 2019 10:37:05 +0900</pubDate>

			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[강의]]></category>
					<title><![CDATA[강의 소식 : 비전공자를 위한 자바스크립트, 라이브러리 11기 모집]]></title>
					<link>https://blog.naver.com/gi_balja/221326918190</link>
					<guid>https://blog.naver.com/gi_balja/221326918190</guid>
					<description><![CDATA["그림으로 배우는 자바스크립트” 연재를 진행하고 있는 브런치 작가, '기발자'입니다. 2018년 9월 비전공자(기획자, 디자이너, 예비 창업자 등)를 대상으로 하는 “비전공자를 위한 자바스크립트 &amp; 라이브러리” 11기 스터디 토요일반 모임을 개설하였습니다. 본 스터디에서는 패럴럭스 웹사이트 "fiftythree"를 카피캣하는 과정에서 자바스크립트 기초 지식을 소개하고 실제 제작한 웹사이트를 직접 구현해 나가면서 라이브러리에 대한 기본적인 개념을 이해하는데 도움을 줄 것입니다. 전체 강의 내용은 제가 독학으로 공부하면서 이해하기 힘들었던 주요 개념들을 중심으로 수업 커리큘럼을 구성하였기 때문에 입문자 분들이 초반에 겪게.......]]></description>
					<pubDate>Thu, 26 Jul 2018 13:02:15 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,자바스크립트,javascript,제이쿼리,jquery,라이브러리,코딩,개발]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 네이티브 한번 해보려고]]></category>
					<title><![CDATA[6. 리액트 네이티브 ( React Native ) : Firebase 데이터 가져오기]]></title>
					<link>https://blog.naver.com/gi_balja/221293781781</link>
					<guid>https://blog.naver.com/gi_balja/221293781781</guid>
					<description><![CDATA[리액트 네이티브에서 Firebase에 저장된 JSON 데이터를 가져오는 방법을 살펴보겠습니다. Firebase는 구글에서 제공하는 서비스로 웹, 모바일 백엔드 개발에 도임이 되는 기능을 제공하는 플랫폼입니다. Firebase 사이트에 접속한 후 콘솔로 이동하여 프로젝트를 생성합니다. 프로젝트 생성을 완료됐다면 Database -&gt; Realtime Database를 선택하여 JSON 파일이 담길 공간을 생성합니다. 아래에서 본 예제에 사용될 JSON 파일을 다운로드 받은 후 생성된 Database 안에 옮겨넣습니다.Project Overview를 클릭하여 메인 화면으로 이동합니다. 그리고 "웹 앱에 firebase 추가"를 선택하면 Firebase를 연결할 수 있는 스크립트 코드가 나타납니다.......]]></description>
					<pubDate>Thu, 07 Jun 2018 18:31:53 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Firebase,파이어베이스,ReactNative,리액트네이티브]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 네이티브 한번 해보려고]]></category>
					<title><![CDATA[5. 리액트 네이티브 ( React Native ) : 폰트 설정]]></title>
					<link>https://blog.naver.com/gi_balja/221292933731</link>
					<guid>https://blog.naver.com/gi_balja/221292933731</guid>
					<description><![CDATA[리액트 네이티브에서 폰트 설정하는 방법을 알아보겠습니다. 보통 Expo SDK를 사용하거나 React Native에서 직접 폰트를 설정하는 방법이 있습니다. 본 예제에서는 React Native에 직접 설정하는 방법을 위주로 설명하겠습니다. ( 필자의 경우에는 Expo 폰트 설정 방법에 문제가 생겨서 적용이 안되고 있는 상황입니다.;; ) Expo 안에서 폰트 적용 방법이 궁금하신 분은 아래 공식 문서를 참고 해주세요. Expo와 React Native 차이점Expo는 React Native에서 제공하는 기능을 보다 쉽게 적용할 수 있도록, 도와주는 서포트 프로그램이라고 볼 수 있습니다. 이를 Expo SDK라고 부릅니다. 이 안에는 폰트, 아이콘, 카메라 등 앱 개발에 필요한 다양.......]]></description>
					<pubDate>Wed, 06 Jun 2018 16:06:05 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,ReactNative,리액트네이티브,Font,폰트,서체,리액트]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 네이티브 한번 해보려고]]></category>
					<title><![CDATA[4. 리액트 네이티브 ( React Native ) : 버튼 이벤트]]></title>
					<link>https://blog.naver.com/gi_balja/221287420761</link>
					<guid>https://blog.naver.com/gi_balja/221287420761</guid>
					<description><![CDATA[이번 장에서는 "정답 확인" 버튼이 있고, 클릭시 버튼이 사라지면서 정답 텍스트로 변경되는 &lt;Button&gt; 이벤트를 만들어 보겠습니다. 지난 챕터와 마찬가지로 새 프로젝트를 생성한 다음 App.js 파일 안의 코드를 다음과 같이 수정합니다. 기능을 구현하기 전 간단한 논리 구조를 만들겠습니다. 먼저 무엇을 기준으로 버튼 또는 정답 텍스트를 보여줄지 결정해야 합니다. 본 예제에서는 참, 거짓을 기준으로 참일 경우 "정답 확인" 버튼을 보여주고, 버튼 클릭시 거짓으로 바뀌면서 정답 텍스트가 출력되는 코드를 작성하겠습니다. 삼항 연산자 작성state 안에 초기값으로 true를 작성합니다. 다음 삼항 연산자를 사용하여 참일 때는 &lt;Bu.......]]></description>
					<pubDate>Wed, 30 May 2018 08:54:20 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,리액트네이티브,Button,Text,Native,네이티브]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 네이티브 한번 해보려고]]></category>
					<title><![CDATA[3. 리액트 네이티브 ( React Native ) : Reddit API 활용]]></title>
					<link>https://blog.naver.com/gi_balja/221286319324</link>
					<guid>https://blog.naver.com/gi_balja/221286319324</guid>
					<description><![CDATA[이번에는 React Native 적용 방법 및 Reddit API를 사용하여 타이틀 정보를 출력하는 기능을 만들어 보겠습니다. React에서 다룬 state, setState, map() 설명은 본 과정에서 생략하겠습니다. 이에 대한 개념이 아직 잡히지 않으신 분은 먼저 제가 작성한 리액트 게시물에서 살펴보길 권장합니다. React Native 적용 방법리액트 네이티브는 리액트와 사용 방법이 유사합니다. 눈에 띄는 차이점이 있다면 리액트 네이티브에서는 HTML 언어를 사용할 수 없습니다. 오직 React Native에서 제공하는 컴포넌트나 사용자가 생성한 컴포넌트, 그 외 라이브러리에서 제공하는 컴포넌트만 사용이 가능합니다. 리액트 네이티브에는 여러 컴포넌트가 존재하.......]]></description>
					<pubDate>Tue, 29 May 2018 07:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,리액트,React,Native,네이티브,Axios,Expo,리액트네이티브]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 네이티브 한번 해보려고]]></category>
					<title><![CDATA[2. 리액트 네이티브 ( React Native ) : Expo XDE 설치 및 프로젝트 생성]]></title>
					<link>https://blog.naver.com/gi_balja/221286079748</link>
					<guid>https://blog.naver.com/gi_balja/221286079748</guid>
					<description><![CDATA[Expo XDE와 에뮬레이터 설치Expo XDE는 React Native 개발을 진행할 때 테스트 및 배포 작업을 도와주는 개발 도구입니다. 먼저 아래 링크 주소에 접속하여 Expo XDE 프로그램과 시뮬레이터들을 설치합니다. 당연한 얘기지만, iOS 시뮬레이터는 맥 OS 안에서만 동작됩니다. Expo XDE 사용방법Expo 설치를 끝내고 프로그램을 실행하면 다음과 같은 로그인 화면이 나타납니다. 이메일 또는 깃허브와도 연동하여 가입을 진행할 수 있으니, 본인에게 편한 방법으로 회원가입을 진행합니다.로그인을 하면 프로젝트를 생성, 오픈, 그리고 생성된 프로젝트를 관리하는 화면이 나타납니다.그럼 React Native 개발을 위한 새 프로젝트를 생성하겠습니다. 새.......]]></description>
					<pubDate>Mon, 28 May 2018 16:14:59 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,리액트네이티브,네이티브,Native,Expo,시뮬레이터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 네이티브 한번 해보려고]]></category>
					<title><![CDATA[1. 리액트 네이티브 ( React Native ) : 소개]]></title>
					<link>https://blog.naver.com/gi_balja/221284382919</link>
					<guid>https://blog.naver.com/gi_balja/221284382919</guid>
					<description><![CDATA[리액트 네이티브( React Native ) 소개리액트 네이티브는 리액트 작동 원리를 바탕으로 모바일 앱을 제작할 수 있는 페이스북 오픈소스 프레임워크입니다. 자바스크립트 주요 개념(ES6 기준)과 리액트 사용법만 알고 있다면, 안드로이드, iOS 양쪽 모두 앱 개발을 진행할 수 있습니다. 리액트 네이티브에 대해 많이 갖는 오해가 있습니다. 리액트 네이티브는 "모바일 웹 앱", HTML5 앱" 그리고 "하이브리드 앱"이 아닌 네이티브 앱을 만드는 것입니다. Objective-C 또는 Java를 사용하여 만든 앱과 구별하기 힘든 모바일 앱을 만들 수 있으며, iOS 및 Android 앱과 동일한 기본 UI 빌딩 블록을 사용합니다. 네이티브 앱 제작이 가능한 이유는 리.......]]></description>
					<pubDate>Sat, 26 May 2018 13:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,리액트네이티브,네이티브,Native,Expo,npm]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[23. 자바스크립트 (ES6) : 클래스 (2)]]></title>
					<link>https://blog.naver.com/gi_balja/221284332597</link>
					<guid>https://blog.naver.com/gi_balja/221284332597</guid>
					<description><![CDATA[1. 정적 메서드클래스의 정적 메서드를 정의할 때는 static 키워드를 사용합니다. 정적 메서드는 인스턴스가 아닌 클래스 이름으로 호출합니다. 따라서 클래스의 인스턴스를 생성하지 않아도 호출할 수 있습니다.정적 메서드는 클래스 이름으로 호출하기 때문에 클래스의 인스턴스를 생성하지 않아도 사용할 수 있다. 단, 정적 메서드는 this를 사용할 수 없다. 달리 말하면 메서드 내부에서 this를 사용할 필요가 없는 메서드는 정적 메서드로 만들 수 있습니다. 정적 메소드는 애플리케이션 전역에서 사용할 유틸리티(utility) 함수를 생성할 때 주로 사용합니다. 즉, 인스턴스에 의존(?)할 필요없이 모든 영역에 해당 메서드를 사용하고자 할.......]]></description>
					<pubDate>Sat, 26 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,자바스크립트,JavaScript,ES6,Class,클래스,상속,extends]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[22. 자바스크립트 (ES6) : 클래스 (1)]]></title>
					<link>https://blog.naver.com/gi_balja/221278402587</link>
					<guid>https://blog.naver.com/gi_balja/221278402587</guid>
					<description><![CDATA[자바스크립트는 프로토타입 객체지향 언어입니다. 프로토타입 기반 프로그래밍은 클래스가 필요없는 객체지향 프로그래밍 스타일로 프로토타입 체인과 클로저 등으로 객체 지향 언어의 상속, 캡슐화 등의 개념을 구현할 수 있습니다. ES5에서는 생성자 함수와 프로토타입을 사용하여 객체 지향 프로그래밍을 구현합니다.ES6의 클래스는 기존 프로토타입 기반 객체지향 프로그래밍보다 클래스 기반 언어에 익숙한 프로그래머가 보다 빠르게 학습할 수 있도록 등장했습니다. 하지만 ES6의 클래스가 새로운 객체지향 모델을 제공하는 것이 아닙니다. 자바스크립트에서 클래스도 함수이고 기존 프로토타입 기반 패턴의 문법적 설탕(Syntactic sugar)일.......]]></description>
					<pubDate>Fri, 18 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,자바스크립트,JavaScript,ES6,Class,클래스,constructor,생성자함수]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[강의]]></category>
					<title><![CDATA[강의 소식 : 비전공자를 위한 자바스크립트, 라이브러리 10기 모집]]></title>
					<link>https://blog.naver.com/gi_balja/221277876850</link>
					<guid>https://blog.naver.com/gi_balja/221277876850</guid>
					<description><![CDATA["그림으로 배우는 자바스크립트” 연재를 진행하고 있는 브런치 작가, '기발자'입니다. 2018년 6월 비전공자(기획자, 디자이너, 예비 창업자 등)를 대상으로 하는 “비전공자를 위한 자바스크립트 &amp; 라이브러리” 10기 스터디 토요일반 모임을 개설하였습니다. 본 스터디에서는 패럴럭스 웹사이트 "fiftythree"를 카피캣하는 과정에서 자바스크립트 기초 지식을 소개하고 실제 제작한 웹사이트를 직접 구현해 나가면서 라이브러리에 대한 기본적인 개념을 이해하는데 도움을 줄 것입니다. 전체 강의 내용은 제가 독학으로 공부하면서 이해하기 힘들었던 주요 개념들을 중심으로 수업 커리큘럼을 구성하였기 때문에 입문자 분들이 초반에 겪게.......]]></description>
					<pubDate>Thu, 17 May 2018 12:47:49 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,Library,라이브러리,jQuery,제이쿼리,GreenSock]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[21. 자바스크립트 (ES6) : 디스트럭처링]]></title>
					<link>https://blog.naver.com/gi_balja/221276795777</link>
					<guid>https://blog.naver.com/gi_balja/221276795777</guid>
					<description><![CDATA[디스트럭처링은 배열 또는 객체를 해체하여 개별 변수에 값을 할당하는 것을 말합니다. 배열 또는 객체 리터럴에서 필요한 값만을 추출하여 변수에 할당하거나 반환할 때 유용합니다. 1. 배열 디스트럭처링ES5에서는 배열의 인덱스를 직접 입력하여, 변수에 배열의 각 요소를 할당할 수 있었습니다.ES6의 배열 디스트럭처링은 배열의 각 요소를 배열로부터 추출하여 변수 리스트에 할당합니다. 이 때 배열 안의 요소가 입력된 순으로 변수에 할당됩니다.ES6의 배열 디스트럭처링은 배열에서 필요한 요소만 추출하여 변수에 할당하고 싶은 경우에 유용하게 사용할 수 있습니다. 아래의 코드는 Date 객체에서 년도, 월, 일을 추출하는 예제입니다.2.......]]></description>
					<pubDate>Thu, 17 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,ES6,디스트럭처링,객체,배열,Array]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[20. 자바스크립트 (ES6) : 객체]]></title>
					<link>https://blog.naver.com/gi_balja/221276343800</link>
					<guid>https://blog.naver.com/gi_balja/221276343800</guid>
					<description><![CDATA[ES6에서는 객체 리터럴 프로퍼티 기능이 확장되면서 이전보다 간편하고, 동적인 형태로 객체를 생성할 수 있게 되었습니다.1. 프로퍼티 축약 표현ES5에서 객체는 프로퍼티(property)와 값(value)으로 구성되어 있습니다. 값으로는 직접 값을 입력하는 것 외에도 변수를 입력할 수도 있습니다.ES6에서는 값으로 변수를 사용하는 경우, 프로퍼티를 생략할 수 있습니다.2. 객체의 값 가져오기ES5에서는 객체의 값을 가져오기 위해서는 프로퍼티를 명시해야 합니다.하지만 ES6에서는 아래와 같은 방식으로도 가져올 수 있습니다. 리액트에서 가장 많이 사용되는 작성 방법 중 하나이니 집중해서 봐주세요. 이 작업을 디스트럭처링이라고 합니다. 이와.......]]></description>
					<pubDate>Wed, 16 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,ES6,Object,객체]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[19. 자바스크립트 (ES6) : Extended Parameter]]></title>
					<link>https://blog.naver.com/gi_balja/221275775991</link>
					<guid>https://blog.naver.com/gi_balja/221275775991</guid>
					<description><![CDATA[1. 매개변수 기본값 설정이전(?) 자바스크립트에서는 매개변수에 기본값을 지정할 수 없습니다. 따라서 인자가 제대로 전달되었는지 확인하기 위해서 함수 내부에 별도의 코드를 삽입해야 했습니다. 만약 인자가 전달되지 않은 경우 매개변수는 undefined를 갖게 됩니다.ES6에서는 인자가 전달되지 않는 경우를 대비해서 기본값을 지정할 수 있습니다.기본값은 함수 호출 방식으로도 지정할 수 있습니다.2. Rest 매개변수2.1 기본 문법Rest 매개변수는 Spread 연산자(...)를 사용하여 매개변수를 정의하는 것을 의미합니다. Rest 매개변수를 사용하면 인자를 함수 내부에서 배열로 전달받을 수 있습니다.인자는 입력된 순서대로 기존 매개변수와.......]]></description>
					<pubDate>Tue, 15 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,ES6,Rest,Spread,매개변수]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[18. 자바스크립트 (ES6) : 화살표 함수]]></title>
					<link>https://blog.naver.com/gi_balja/221273285319</link>
					<guid>https://blog.naver.com/gi_balja/221273285319</guid>
					<description><![CDATA[1. 화살표 함수 선언 방법ES6에서는 화살표 기호를 사용하여 화살표 함수를 만들 수 있습니다. 하지만 사용하는 방법에는 몇 가지 제약이 따릅니다. 2. 화살표 함수는 익명 함수로만 생성 가능화살표 함수는 익명 함수로만 생성할 수 있습니다. 따라서 함수를 호출하기 위해 함수 표현식을 사용해야 합니다.만약 콜백 함수로 사용할 경우 이전보다 간결하게 표현할 수 있습니다.3. this일반 함수와 화살표 함수의 가장 큰 차이는 this의 대상입니다.3.1 일반 함수의 this일반 함수의 경우, 함수를 호출하는 방식에 따라 this가 가리키는 객체가 달라집니다. 콜백 함수의 this는 항상 전역 객체를 가르킵니다.return this.greet + ' ' + x 지점에.......]]></description>
					<pubDate>Sat, 12 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,Function,함수,화살표함수,Arrow,this]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[17. 자바스크립트 (ES6) : 템플릿 리터럴]]></title>
					<link>https://blog.naver.com/gi_balja/221272083867</link>
					<guid>https://blog.naver.com/gi_balja/221272083867</guid>
					<description><![CDATA[ES6에서는 템플릿 리터럴(Template literal)이라고 불리는 새로운 문자열 표기법이 등장했습니다. 템플릿 리터럴은 일반 문자열과 비슷해 보이지만, 백틱(backtick) 문자 `를 사용합니다. ( 1번 숫자키 왼쪽에 있는 기호입니다. )일반 문자열은 줄바꿈은 허용되지 않고, 공백을 표현하기 위해서는 이스케이프 시퀀스를 사용해야 합니다. 하지만 템플릿 리터럴은 여러 줄에 걸쳐 문자열을 작성할 수 있으며 템플릿 리터럴 내의 모든 white-space는 있는 그대로 적용된다.템플릿 리터럴은 + 연산자를 사용하지 않아도 간단한 방법으로 새로운 문자열을 삽입할 수 있는 기능을 제공합니다. 이를 String Interpolation(문자열 삽입)이라 얘기합니다.$.......]]></description>
					<pubDate>Thu, 10 May 2018 12:50:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,템플릿리터럴,ES6]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[16. 자바스크립트 (ES6) : let, const]]></title>
					<link>https://blog.naver.com/gi_balja/221271870070</link>
					<guid>https://blog.naver.com/gi_balja/221271870070</guid>
					<description><![CDATA[기존(?) 자바스크립트에서는 변수를 생성하기 위해 var 키워드를 사용할 수 밖에 없었습니다. var 키워드 함수 레벨 스코프 성격을 갖고 있으며, 다음과 같은 특징이 있습니다. 전역 변수의 남발 : for 문 초기화식에서 입력되는 변수는 for loop 외부 또는 전역에서 참조할 수 있습니다. var 키워드 생량 가능 : 의도치 않게 변수의 전역화가 발생합니다. 중복 선언 허용 : 의도치 않게 변수값이 변경될 수 있습니다. 변수 호이스팅 : 변수를 선언하기 전에 참조가 가능합니다.이는 다른 C-family 언어와는 차별되는 특징(설계상 오류)이며, 주의를 기울이지 않으면 심각한 문제를 야기시킵니다. var 키워드 사용시 대부분의 문제는 전역 변수로.......]]></description>
					<pubDate>Thu, 10 May 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,const,let,변수,ES6]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[15. 자바스크립트 : 클로저 ( Closure )]]></title>
					<link>https://blog.naver.com/gi_balja/221270394478</link>
					<guid>https://blog.naver.com/gi_balja/221270394478</guid>
					<description><![CDATA[클로저는 자바스크립트의 중요 개념 중 하나로 함수를 일급 객체로 취급하는 함수형 언어에서 사용되는 중요한 특징입니다. 보통 함수가 실행되면 실행 컨텍스트가 생성되고, 다시 반환되면서 함수의 생명 주기가 끝나게 됩니다. 하지만 클로저를 사용하면 함수의 생명을 연장(?)시킬 수 있습니다. 클로저를 간단하게 설명하면 외부 함수에서 반환된 내부 함수가 반환 이후에도 생명 주기가 유지되어 외부 함수의 활성 객체 안을 탐색(?)할 수 있는 것을 의미합니다. 아래 코드를 보면 외부 함수 outFunc를 실행하면 내부 함수 inFunc를 반환하면서 함수가 종료되어, outFunc의 생명은 끝나게 됩니다. 이 때 변수 x 또한 함께 소멸(?)하게 됩니다.......]]></description>
					<pubDate>Tue, 08 May 2018 02:44:14 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,클로저,Closure,setTimeOut,스코프,실행컨텍스트]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[14. 자바스크립트 : 스코프 체인 ( Scope Chain )]]></title>
					<link>https://blog.naver.com/gi_balja/221267355483</link>
					<guid>https://blog.naver.com/gi_balja/221267355483</guid>
					<description><![CDATA[우리는 이전 챕터들에서 실행 컨텍스트와 스코프의 기초 개념을 간단하게 살펴보았습니다. 이번 장에서는 지금까지 배웠던 내용을 바탕으로 해서 스코프 체인이란 무엇인지에 대해 알아보겠습니다. 간단하게 스코프(유효 범위)에 대해서 정리하면, 자바스크립트는 다른 언어와 달리 함수 단위로 스코프가 설정되어 있으며, 함수가 정의될 때의 환경을 기준으로 스코프가 설정됩니다. ( 호출이 아니라 정의될 때가 기준입니다. ) 먼저 아래 코드에서 outFunc 함수를 호출했을 때 결과값으로 무엇이 출력되는지 예상해 보세요. 위 코드를 그림으로 표현하면 아래와 같이 정리할 수 있습니다. 스코프 체인 설명에 집중하기 위해 arguments 객체와 같.......]]></description>
					<pubDate>Thu, 03 May 2018 16:51:14 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,Scope,스코프,스코프체인,유효범위,활성객체]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[13. 자바스크립트 : 실행 컨텍스트 ( Execution Context )]]></title>
					<link>https://blog.naver.com/gi_balja/221261731281</link>
					<guid>https://blog.naver.com/gi_balja/221261731281</guid>
					<description><![CDATA[실행 컨텍스트는 Scope, Hoisting, this, function, closure 등의 동작원리를 담고 있는 자바스크립트의 핵심 원리입니다. 실행 컨텍스트를 바로 이해하지 못하면 코드 독해가 어려워지고, 디버깅도 힘들어 집니다. ECMAScript 스펙에 따르면 실행 컨텍스트는 실행 가능한 코드를 형상화하고 구분하는 추상적인 개념이라고 정의하고 있습니다. 좀 더 쉽게 말하자면 실행 컨텍스트는 실행 가능한 코드가 실행되기 위해 필요한 환경이라고 말할 수 있겠습니다. 여기서 말하는 실행 가능한 코드는 아래와 같습니다.전역 코드 : 전역 영역에 존재하는 코드 Eval 코드 : Eval 함수로 실행되는 코드 함수 코드 : 함수 내에 존재하는 코드일반적으로 실.......]]></description>
					<pubDate>Thu, 26 Apr 2018 09:56:37 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,실행컨텍스트,context,Execution,전역객체,변수객체]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[22. 리액트 공식문서 : Lifting State Up]]></title>
					<link>https://blog.naver.com/gi_balja/221261089399</link>
					<guid>https://blog.naver.com/gi_balja/221261089399</guid>
					<description><![CDATA[가끔 어떤 Component는 같이 변화하는 데이터를 보여줘야할 필요가 있습니다. 이런 경우 공통의 조상에 state를 끌어올리는 걸 권장합니다. 그럼 이것이 어떻게 동작하는지 살펴봅시다. 이번 섹션에서는 주어진 온도에서 물이 끊는지를 확인하는 온도 계산기를 만들겠습니다. 먼저, BoilingVerdict Component를 생성합니다. 이 Component는 prop로 celsius 온도를 받고 물이 충분히 끍었는지 표시합니다.다음, Calculator Component를 생성합니다. 이 Component는 온도를 입력받을 &lt;input&gt;을 렌더링하고, 그 값을 this.state.temperature에 삽입합니다. 추가로, 현재 &lt;input&gt; value에 따라 BoilingVerdict를 렌더링합니다.두 번째 In.......]]></description>
					<pubDate>Wed, 25 Apr 2018 13:21:02 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,state,setState,Lifting,상태끌어올리기,props]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[12. 자바스크립트 : this]]></title>
					<link>https://blog.naver.com/gi_balja/221259692344</link>
					<guid>https://blog.naver.com/gi_balja/221259692344</guid>
					<description><![CDATA[자바스크립트에서 함수를 호출할 때, 매개 변수로 전달되는 인자 외에, arguments 객체와 this를 암묵적으로 전달받게 됩니다. 이때 this는 브라우저를 기준으로 했을 때 window 객체를 가르키게 됩니다.자바스크립트는 함수 호출 패턴에 따라서 this에 바인딩되는 객체가 달라지게 됩니다. 함수 호출 패턴은 아래와 같습니다.1. 함수 호출 패턴(Function Invocation Pattern) 2. 메소드 호출 패턴(Method Invocation Pattern) 3. 생성자 호출 패턴(Constructor Invocation Pattern) 4. apply 호출 패턴(Apply Invocation Pattern)1. 함수 호출 패턴전역 변수의 모두 window 객체의 프로퍼티입니다. 마찬가지로 전역 영역에 선언한 함수는 window.......]]></description>
					<pubDate>Tue, 24 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,this,apply,call,bind]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[강의]]></category>
					<title><![CDATA[강의 소식 : 비전공자를 위한 HTML, CSS 25기 모집]]></title>
					<link>https://blog.naver.com/gi_balja/221259458425</link>
					<guid>https://blog.naver.com/gi_balja/221259458425</guid>
					<description><![CDATA["그림으로 배우는 자바스크립트” 연재를 진행하고 있는 브런치 작가, '기발자'입니다. 2018년 5월 비전공자(기획자, 디자이너, 예비 창업자 등)를 대상으로 하는 “비전공자를 위한 HTML, CSS - 레이아웃을 중심으로” 25기 스터디 토요일반 모임을 개설하였습니다. 본 스터디는 레이아웃을 잡는데 있어 가장 중요한 HTML &amp; CSS 속성을 소개하고 실제 제작한 사이트를 직접 구현해 나가면서 레이아웃에 영향을 미치는 중요 개념을 이해하는데 목적을 두고 있습니다. 전체 강의 내용은 제가 독학으로 공부하면서 이해하기 힘들었던 주요 개념들을 중심으로 수업 커리큘럼을 구성하였기 때문에 입문자 분들이 초반에 겪게 되는 진입장벽을 낮.......]]></description>
					<pubDate>Mon, 23 Apr 2018 14:20:55 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,HTML,CSS,웹프로그래밍,웹개발,웹,프로그래밍,레이아웃]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[11. 자바스크립트 : 스코프 ( Scope )]]></title>
					<link>https://blog.naver.com/gi_balja/221259056018</link>
					<guid>https://blog.naver.com/gi_balja/221259056018</guid>
					<description><![CDATA[스코프(Scope)는 자바스크립트 외 모든 프로그래밍 언어가 갖고 있는 기본적인 개념입니다. 스코프란 변수의 접근과 생명주기를 의미합니다. 자바스크립트에서 Scope는 다음 2가지 종류로 정리할 수 있습니다. 전역 스코프 (Global scope) : 코드 어디에서든지 참조할 수 있습니다. 지역 스코프 : (Local scope) : 정의된 함수 내에서만 참조할 수 있습니다.또한 모든 변수는 스코프를 갖습니다. 변수는 선언 위치(전역 또는 지역)에 의해 스코프를 가지게 됩니다. 전역에 선언된 변수는 전연 스코프를 갖는 전역 변수가 되며, 지역(자바스크립트의 경우 함수 내부)에서 선언된 변수는 지역 스코프를 갖는 지역 변수가 됩니다. 전역 변수는 코드.......]]></description>
					<pubDate>Mon, 23 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,Scope,스코프,유효범위,전역변수,지역변수]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[21. 리액트 공식문서 : Forms]]></title>
					<link>https://blog.naver.com/gi_balja/221258206847</link>
					<guid>https://blog.naver.com/gi_balja/221258206847</guid>
					<description><![CDATA[HTML Form Element는 내부 state를 가지고 있어, 리액트에서의 DOM Element와 조금 다르게 동작합니다. 예를 들어서, 기존 HTML에서는 다음과 같이 작성됩니다.이 HTML Form은 사용자가 Form을 전송하면, 새로운 페이지로 이동하는 기본 동작을 가지고 있습니다. 만약 리액트에서도 이러한 동작을 원한다면, 그냥 동작합니다. 그러나 대부분의 경우에는 Form의 Submit을 처리하고, 사용자가 입력한 데이터에 접근하는 함수를 만드는 것이 편리합니다. 이를 위한 표준 방식으로 "Controlled Components"라는 기술을 사용합니다. Controlled ComponentsHTML에서 &lt;input&gt;, &lt;textarea&gt;, &lt;select&gt; 같은 Form Element는 보통 자신만.......]]></description>
					<pubDate>Sun, 22 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Form,폼,input,textarea,select]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[10. 자바스크립트 : prototype 객체의 특징과 상속]]></title>
					<link>https://blog.naver.com/gi_balja/221257931718</link>
					<guid>https://blog.naver.com/gi_balja/221257931718</guid>
					<description><![CDATA[1. prototype 객체 안에 메서드와 프로퍼티 추가하기자바스크립트에서 객체 안에 프로퍼티, 메서드를 추가하는 방식과 유사하게 prototype 객체에도 프로퍼티와 메서드를 추가할 수 있습니다.console.dir(Student)로 안의 내용물을 보면 prototype 프로퍼티 안에 greeting이 포함되어 있는 것을 확인할 수 있습니다.위와 같은 방식으로 프로퍼티를 추가할 수 있습니다.그리고 인스턴스에서 prototype 객체에 추가한 프로퍼티를 수정할 수도 있습니다.2. prototype 객체 변경하기아래와 같은 방식으로도 프로퍼티를 추가할 수 있습니다. 이전 방식과 차이점은 인스턴스의 constructor는 Student 생성자 함수가 아닌 Object 생성자 함수를 가르키게.......]]></description>
					<pubDate>Sat, 21 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,call,applay,상속,Class,클래스]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[9. 자바스크립트 : 생성자 함수와 prototype 객체]]></title>
					<link>https://blog.naver.com/gi_balja/221256287861</link>
					<guid>https://blog.naver.com/gi_balja/221256287861</guid>
					<description><![CDATA[이번 9장을 설명하기 전에 용어에 대한 정리를 다시 진행하겠습니다. 8장에도 설명했지만 __proto__는 자신의 조상을 탐색할 때 사용됩니다. 여기서 조상이란 기술(?)을 전수하는 prototype 객체를 의미합니다. 이번 장에서는 String 객체, Array 객체, Function 객체 대신 String.prototype 객체, Array.prototype 객체, Function.prototype 객체로 용어를 대체하겠습니다. 자바스크립트는 프로토타입 기반 객체이기때문에 위와 같은 용어로도 정리가 가능합니다. 먼저 8장 내용에 대한 복습을 간단히 진행하겠습니다. Object 생성자 함수를 사용하여 객체를 생성한 다음 프로퍼티와 메서드를 추가합니다. __proto__를 보면 person의 조상으로 O.......]]></description>
					<pubDate>Thu, 19 Apr 2018 12:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,생성자함수,자바스크립트,JavaScript,prototype,constructor,객체,Object]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[BOOK]]></category>
					<title><![CDATA[[서평] Amazon Web Services로 시작하는 클라우드 입문]]></title>
					<link>https://blog.naver.com/gi_balja/221256191483</link>
					<guid>https://blog.naver.com/gi_balja/221256191483</guid>
					<description><![CDATA[처음 개발 분야에 입문했을 때 풀스택 개발자를 목표로 공부를 했었다. 프론트 엔드 뿐 아니라 백엔드도 경험해보기 위해 PHP, MYSQL, Node, MongoDB 등을 학습한 적이 있다. 백엔드 개발 공부를 하다보니 자연스럽게 AWS와 클라우드 서비스에 대해 알게 되었고, 그에 대한 공부도 함께 병행하기 시작했다. 하지만 그때 당시에는 사람들에게 조금씩 알려지던 때라서 그에 대한 정보를 얻을 수 있는 채널이 많지 않아 공부를 잠시 보류했었다. 이후 AWS를 도입하는 회사들도 많아지고, 클라우드 서비스에 대한 관심이 높아지면서, 이쪽 분야에 대한 사전 지식을 얻고자 최근 출시한 "Amazon Web Services로 시작하는 클라우드 입문"은 기초 개념을.......]]></description>
					<pubDate>Thu, 19 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,영진닷컴,도서리뷰,AWS,아마존,클라우드]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[20. 리액트 공식문서 : Lists and Keys]]></title>
					<link>https://blog.naver.com/gi_balja/221255307244</link>
					<guid>https://blog.naver.com/gi_balja/221255307244</guid>
					<description><![CDATA[먼저, 자바스크립트에서 리스트를 어떻게 변형시키는지 살펴보겠습니다. 아래 코드에서, numbers 배열 안의 값을 얻은 후 그 값을 두배로 만들기 위해 map()을 사용합니다. map()은 doubled 변수 안에 새로운 배열을 반환하고 해당 변수를 확인해 봅니다.콘솔에는 [2, 4, 6, 8, 10]으로 출력됩니다. 리액트에서 배열을 Elements의 리스트로 변환시키는 것은 이와 비슷합니다.여러 개의 Components 렌더링 ( Rendering Multiple Components )중괄호를 사용하면 JSX 안에 Elements의 Collection을 포함시킬 수 있습니다. 아래 예제는 numbers 배열 안에 있는 값을 map()을 사용하여 접근합니다. 이후 각각의 개별 아이템에 &lt;li&gt; Element를 반.......]]></description>
					<pubDate>Wed, 18 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Key,List,리스트,map,반복문]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[8. 자바스크립트 : __proto__]]></title>
					<link>https://blog.naver.com/gi_balja/221254920628</link>
					<guid>https://blog.naver.com/gi_balja/221254920628</guid>
					<description><![CDATA[__proto__, 조상을 탐색하다.2015년 캐롤라이나의 포식자로 알려진 악어의 조상이 노스 캐롤라이나 주립 대학의 과학자들에 의해 발견되었습니다. 이 동물의 공식 학명은 "카르누펙스 캐롤라이넨시스"입니다. 2억 3천만년 전 악어의 조상들은 2.75m 키에 직립 보행이 가능하고, 현재의 악어보다 표피가 매끄러웠다고 합니다. 이렇듯 현대에는 생명의 기원을 찾고자 하는 노력이 끊임없이 진행되고 있습니다. 자바스크립트에서도 조상을 탐색하는 키워드가 존재합니다. 바로 "__proto__"입니다. ([[prototype]] 이라고도 얘기하는데, 여기에서는 __proto__로 통일하겠습니다. ) 일단 직접 코드를 통해 살펴보겠습니다. 먼저 생성자 함수를 사용하.......]]></description>
					<pubDate>Tue, 17 Apr 2018 14:35:49 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,_proto_,프로토타입,prototype,JavaScript,자바스크립트]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[7. 자바스크립트 : 함수 ( Function )]]></title>
					<link>https://blog.naver.com/gi_balja/221253289872</link>
					<guid>https://blog.naver.com/gi_balja/221253289872</guid>
					<description><![CDATA[1. 함수는 일급객체입니다.일급 객체란 생성, 대입, 연산, 인자 또는 반환값으로서의 전달 등 프로그래핑 언어의 기본 조작을 제한없이 사용할 수 있는 대상을 의미합니다. 다음 조건을 만족하면 일급 객체로 간주합니다.1. 무명의 리터럴로 표현이 가능합니다. 2. 변수나 자료 구조(객체, 배열…)에 저장할 수 있습니다. 3. 함수의 파라미터로 전달할 수 있습니다. 4. 반환값(return value)으로 사용할 수 있습니다.자바스크립트의 함수는 위 4가지 조건을 만족하기 때문에 일급 객체입니다. 따라서 자바스크립트의 함수는 변수와 같이 사용할 수 있으며, 코드의 어디에서든지 정의할 수 있습니다. 함수와 다른 객체를 구분 짓는 특징은 "호출"할.......]]></description>
					<pubDate>Sun, 15 Apr 2018 12:04:34 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,자바스크립트,JavaScript,function,함수,생성자함수,constructor,함수호이스팅]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[6. 자바스크립트 : 객체와 변경불가성 ( Immutability )]]></title>
					<link>https://blog.naver.com/gi_balja/221252419479</link>
					<guid>https://blog.naver.com/gi_balja/221252419479</guid>
					<description><![CDATA[변경불가성은 객체가 생성된 이후 그 상태를 변경할 수 없는 디자인 패턴을 의미합니다. 만약 값을 공유하고 있는 2개의 객체가 있다면, 값이 변경될 경우 다른 객체에도 영향을 미치게 됩니다. 아직 이 부분이 이해가 되지 않는 분들은 기본 타입과 참조 타입의 특징에 대해 살펴보시기 바랍니다. 자바스크립트에서 다음 6가지 기본형 데이터 타입은 변경 불가능합니다. Boolean null undefined Number String Symbol (New in ECMAScript 6)String의 slice()는 변수 str1에 저장된 문자열을 변경하는 것이 아니라 새로운 문자열을 생성하여 반환하고 있는 것입니다. 그 이유는 문자열은 변경할 수 없는 값이기 때문입니다.기본형 외에 모든 객체.......]]></description>
					<pubDate>Sat, 14 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,Object,객체,Immutable,변경불가성,Immutability]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[19. 리액트 공식 문서 : Conditional Rendering]]></title>
					<link>https://blog.naver.com/gi_balja/221251262008</link>
					<guid>https://blog.naver.com/gi_balja/221251262008</guid>
					<description><![CDATA[※ 본 글은 리액트 공식 문서를 참고(의역)해서 작성한 글입니다. 리액트에서는 원하는 동작을 수행하는 캡슐화된 별개의 Component를 생성할 수 있습니다. 이 후, 어플리케이션의 state에 따라서 그 중 일부만 렌더링할 수도 있습니다. 리액트의 조건부 렌더링은 자바스크립트의 조건문과 같은 원리로 동작합니다. 현재의 state를 나타내는 Element를 생성하기 위해, 자바스크립트의 if문이나 조건 연산자를 사용하면, 리액트가 조건에 부합하는 UI를 업데이트합니다. 아래 두 개의 Component를 살펴보세요. 사용자의 로그인 유무에 따라 위 컴포넌트 중 하나를 보여주는 Greeting Component를 만들겠습니다. 이 예제는 isLoggedIn prop의 값에.......]]></description>
					<pubDate>Fri, 13 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,조건문,if,삼항연산자,논리연산자]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[5. 자바스크립트 : 객체와 생성자 함수]]></title>
					<link>https://blog.naver.com/gi_balja/221250824624</link>
					<guid>https://blog.naver.com/gi_balja/221250824624</guid>
					<description><![CDATA[자바스크립트는 객체(Object) 기반의 스크립트 언어입니다. 그리고 지금 단계에서는 이해하기 힘들 수 있지만, 기본형을 제외한 나머지 값들(배열, 함수, 정규표현식 등)은 모두 객체입니다. Object() 생성자 함수로 객체를 생성하는 방법{ }를 사용하여 객체를 생성하는 방법 외에 new 연산자와 Object() 생성자 함수를 사용하면 빈 객체를 만들 수 있습니다.Object() 생성자 함수로 객체를 생성하는 방식은 특별한 이유가 없다면 유용해 보이지 않습니다. 하지만 객체 리터럴 방식({ })으로 생성된 객체는 결국 내장(Built-in) 함수인 Object() 생성자 함수로 객체를 생성하는 것을 단순화한 축약법입니다. 자바스크립트 엔진은 객체 리터럴로.......]]></description>
					<pubDate>Thu, 12 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,Object,객체,생성자함수,constructor,instance,반복문,for]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[18. 리액트 공식 문서 : Handling Events]]></title>
					<link>https://blog.naver.com/gi_balja/221250013097</link>
					<guid>https://blog.naver.com/gi_balja/221250013097</guid>
					<description><![CDATA[※ 본 글은 리액트 공식 문서를 참고(의역)해서 작성한 글입니다. 리액트 Element에서 이벤트를 제어하는 것은 DOM에서 이벤트를 제어하는 방법과 매우 비슷합니다. 여기에서 몇 가지 문법적으로 다른 점이 있습니다. - 리액트 이벤트는 소문자 대신 camelCase로 이름을 짓습니다. - JSX에서는 문자열 대신 함수를 전달합니다. 예를 들어 HTML에서는리액트에서는 조금 다릅니다.둘 사이에 차이가 있다면 리액트에서는 기본 동작을 막기 위해, false를 리턴할 수 없습니다. 이를 위해서 preventDefault를 명시적으로 호출해야 합니다. 예를 들어 HTML에서 새로운 페이지를 열 때 기본 링크 동작을 막기 위해서는 아래와 같이 작성할 수 있습니다.대.......]]></description>
					<pubDate>Wed, 11 Apr 2018 19:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Event,이벤트,Handler,bind]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[4. 자바스크립트 : 변수 호이스팅]]></title>
					<link>https://blog.naver.com/gi_balja/221249915721</link>
					<guid>https://blog.naver.com/gi_balja/221249915721</guid>
					<description><![CDATA[먼저 아래 결과를 살펴보겠습니다.변수 호이스팅 : (1) undefined가 출력되는 이유(1)의 경우 변수를 선언하기 전에 str 변수를 불러왔기 때문에 ReferenceError을 기대했겠지만, undefined가 출력됩니다. 그 이유는 자바스크립트에서는 모든 변수 선언문은 호이스팅되기 때문입니다. 호이스팅이란 var 또는 function 등 모든 선언문이 해당 스코프(Scope)의 선두로 옮겨진 것처럼 동작하는 특징을 말합니다. 즉, 자바스크립트에서는 모든 선언문 (var, let, const, function)이 선언되기 전에 참조가 가능합니다. 이를 이해하기 위해서는 먼저 변수가 생성되는 3가지 단계를 이해할 필요가 있습니다. (이는 실행 컨텍스트와도 연결되는 부분입니.......]]></description>
					<pubDate>Wed, 11 Apr 2018 15:10:57 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,호이스팅,hosting,undefined,실행컨텍스트,변수호이스팅]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[3. 자바스크립트 : Boolean]]></title>
					<link>https://blog.naver.com/gi_balja/221249979321</link>
					<guid>https://blog.naver.com/gi_balja/221249979321</guid>
					<description><![CDATA[자바스크립트에서 아래 값들은 false로 평가됩니다.앞에서 언급한 값들 외에는 모두 true로 평가됩니다.Boolean은 값의 존재 유무를 판단할 때도 사용된다.객체나 배열(배열도 객체이다.)이 undefined, null이 아니면 true로 취급됩니다. 이를 이용하면 해당 요소의 존재 여부를 확인할 수 있습니다. getElementById를 통해 DOM에서 특정 요소를 가져올 경우, 해당 요소가 존재할 수도 있지만 존재하지 않을 수도 있습니다. 만약 해당 요소가 존재한다면 var elem의 값은 HTMLElement를 상속받은 객체의 인스턴스입니다. 해당 요소가 존재하지 않는다면 var elem은 null 값을 받게 됩니다. 이 때 객체의 인스턴스는 true, null은 false로 평가됩.......]]></description>
					<pubDate>Wed, 11 Apr 2018 15:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,boolean,true,false,참,거짓]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[2. 자바스크립트 : 배열 안에 있는 데이터에 접근하는 방법]]></title>
					<link>https://blog.naver.com/gi_balja/221249905155</link>
					<guid>https://blog.naver.com/gi_balja/221249905155</guid>
					<description><![CDATA[자바스크립트에 존재하는 다양한 for 문과 배열의 메서드를 사용하면 배열 안에 있는 데이터에 쉽게 접근할 수 있습니다.1) for 문2) for - in 문3) forEach 문4) map()5) for - of 문 (ES6)P.S 본 블로그 글은 http://poiemaweb.com/ 에서 소개한 자바스크립트 주요 내용을 정리하는 목적으로 작성되었습니다.]]></description>
					<pubDate>Wed, 11 Apr 2018 12:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,Array,배열,for,반복문,map]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[자바스크립트 중급 개념 정리]]></category>
					<title><![CDATA[1. 자바스크립트 : 문자열은 유사 배열이다.]]></title>
					<link>https://blog.naver.com/gi_balja/221249873376</link>
					<guid>https://blog.naver.com/gi_balja/221249873376</guid>
					<description><![CDATA[자바스크립트에서 문자열은 배열처럼 index를 통해 접근할 수 있습니다. 이를 유사 배열(Array-like)이라고 합니다.단, 배열과는 다르게 이미 생성된 문자열에 새로운 문자를 대입해도 변경되지는 않습니다.그러나 새로운 문자를 할당하는 것은 가능합니다. 이는 기존 문자열을 제거하고 수정하는 것이 아니라 새로운 문자열을 할당하는 것입니다.또 다른 유사 배열 : arguments 객체자바스크립트에서 존재하는 또 다른 유사 배열로는 arguments가 있습니다. arguments에는 함수를 호출할 때 전달한 인자가 담겨있습니다. 첫 번째는 인자는 index "0", 두 번째 인자는 index "1"처럼 마치 배열 안에 데이터가 담겨져 있는 형태를 갖고 있습니다. .......]]></description>
					<pubDate>Tue, 10 Apr 2018 23:29:42 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,JavaScript,자바스크립트,유사배열,문자열,Arguments]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[17. 리액트 공식 문서 : State and Lifecycle]]></title>
					<link>https://blog.naver.com/gi_balja/221249533255</link>
					<guid>https://blog.naver.com/gi_balja/221249533255</guid>
					<description><![CDATA[※ 본 글은 리액트 공식 문서를 참고(의역)해서 작성한 글입니다. 이전 섹션 "Rendering Elements"에서 매초마다 깜박이는 시계 예제를 생각해 보세요. 지금까지 우리는 UI를 업데이트하는 한 가지 방법을 배웠습니다. 렌더링된 결과를 변경하기 위해 ReactDOM.render()를 호출했습니다. 이번 섹션에서는 재사용 가능하고, 캡슐화된 Clock Component를 만드는 방법에 대해 배울 것입니다. 자체 타이머를 설정하고, 매 초마다 스스로 업데이트할 것입니다. 시계가 어떻게 보이는지는 캡슐화에서부터 시작할 수 있습니다.캡슐화란 속성(Attribute)과 행위(Method)를 하나로 묶고 그 중 일부를 외부에서 사용하지 못하도록 은닉하는 것을 말합니다.그.......]]></description>
					<pubDate>Tue, 10 Apr 2018 15:44:04 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,state,props,Lifecycle,생명주기,setState]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[16. 리액트 공식 문서 : Components and Props]]></title>
					<link>https://blog.naver.com/gi_balja/221247902370</link>
					<guid>https://blog.naver.com/gi_balja/221247902370</guid>
					<description><![CDATA[※ 본 글은 리액트 공식 문서를 참고(의역)해서 작성한 글입니다.Components는 UI를 독립적이고, 재사용 가능한 부분으로 분리하고, 각 부분을 독립적으로 생각할 수 있게 해줍니다. 개념상으로, Components는 자바스크립트의 Function과 비슷합니다. 이들은 임의의 입력( "props"라 불리는 )을 받고, 화면에 나타나는 리액트 Element를 반환( return )합니다. 함수형 컴포넌트와 클래스 컴포넌트 ( Functional and Class Components )Component를 정의하는 가장 쉬운 방법은 자바스크립트 함수로 작성하는 것입니다.이 함수는 데이터로 Single "props" ( 속성을 나타내고 있는 ) 객체 인수 ( object argument )를 받고 있으며, React Element를.......]]></description>
					<pubDate>Sun, 08 Apr 2018 16:13:11 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Library,라이브러리,Component,컴포넌트,props]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[15. 리액트 공식 문서 : Rendering Elements]]></title>
					<link>https://blog.naver.com/gi_balja/221246999492</link>
					<guid>https://blog.naver.com/gi_balja/221246999492</guid>
					<description><![CDATA[※ 본 글은 리액트 공식 문서를 참고(의역)해서 작성한 글입니다.Elements는 리액트 앱을 구성하고 있는 가장 작은 블록입니다. Elements는 화면에 나타나는 내용을 설명합니다. 브라우저의 DOM Element와는 다르게, 리액트의 Elements는 일반 객체이며( plain objects ), 생성 비용( crate cost )이 저렴합니다. 리액트 DOM은 리액트 Element와 일치하도록 DOM을 업데이트합니다.노트: Element를 &quot;Component&quot;와 혼동하는 경우가 있습니다. 다음 세션에서는 Components에 대해 설명합니다. Elements는 Component 안에 포함되는 구성요소이기 때문에 다음 챕터로 넘어가기 전에 이 세션을 읽을 것을 권장합니다.Element를 DOM에 랜더링.......]]></description>
					<pubDate>Sat, 07 Apr 2018 12:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Library,라이브러리,Element,Child,DOM]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[14. 리액트 공식 문서 : Introducing JSX]]></title>
					<link>https://blog.naver.com/gi_balja/221246690815</link>
					<guid>https://blog.naver.com/gi_balja/221246690815</guid>
					<description><![CDATA[※ 본 글은 리액트 공식 문서를 참고(의역)해서 작성한 글입니다.다음 변수 선언에 대해 생각해 보세요.이 재밌는 태그 문법은 문자열도 아니고 HTML 언어도 아닙니다. 이 태그 문법은 JSX라고 불리며, 자바스크립트를 확장시킨 문법입니다. 웹사이트를 구성하는 UI가 어떤 형태를 하고 있는지 표현하기 위해서는 리액트와 함께 JSX를 사용하는 것을 권장합니다. JSX는 리액트 "elements"를 생성합니다. 다음 섹션에서는 리액트에서 생선한 "elements"를 DOM에 랜덩링하는 방법을 소개할 예정입니다. 아래에서는 JSX를 시작하는데 필요한 기본 사항을 확인할 수 있습니다. Why JSX?리액트에서는 랜더링 로직이 다른 UI 로직과 결합되어 있다는 사.......]]></description>
					<pubDate>Sat, 07 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,JSX,element,DOM,자바스크립트,JavaScript]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[13. 리액트 : Form 양식]]></title>
					<link>https://blog.naver.com/gi_balja/221246571928</link>
					<guid>https://blog.naver.com/gi_balja/221246571928</guid>
					<description><![CDATA[HTML 태그 중 Form 양식을 만들 때 사용되는 태그들(input, textarea, &lt;select&gt; 등)을 React와 연결하면 효율적으로 사용할 수 있습니다. 이번 장에서는 &lt;input&gt;, &lt;textarea&gt;, &lt;select&gt; 등의 값이 변경될 때마다 Event Handler를 호출하여 입력된 값이 업데이트 되는 기능을 만들 예정입니다. 리액트에서 제어하는 Form elements를 Controlled Components라고 얘기합니다.1) &lt;input type=&quot;text&quot;&gt;&lt;input&gt;를 Controlled Component로 전환하기 위해서는 입력된 값을 업데이트할 Event Handler가 필요합니다. event.target.value을 사용하면 &lt;input&gt;에 입력되는 정보를 가져올 수 있습니다. 2) .......]]></description>
					<pubDate>Fri, 06 Apr 2018 15:09:55 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Array,배열,Map,Input,Form]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[12. 리액트 : 배열과 리스트]]></title>
					<link>https://blog.naver.com/gi_balja/221245300411</link>
					<guid>https://blog.naver.com/gi_balja/221245300411</guid>
					<description><![CDATA[이번 장에서는 배열과 리스트를 결합한 다양한 표현 방법에 대해 살펴보겠습니다. 리액트에서는 JSX 문법과 배열, 그리고 반복문을 결합하면 여러 구성 요소를 동시에 랜더링할 수 있습니다.1) 배열에 접근하는 방법 : for 문리액트에서는 자바스크립트에서 배열에 접근하는 기초적인 방법 중 하나인 for문을 결합하여 배열 안에 있는 데이터에 접근할 수 있습니다. 먼저 빈 배열 elements와 3개의 데이터를 갖고 있는 배열 array를 생성합니다. 다음 for 문을 사용하여 array 안에 있는 데이터에 접근합니다. 마지막으로 push()와 JSX 문법을 결합하여 array 안에 있는 데이터를 elements로 전달하면 됩니다. 2) 배열에 접근하는 방법 : Map()자.......]]></description>
					<pubDate>Thu, 05 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Array,배열,반복문,for,map]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[11. 리액트 : Event Handler]]></title>
					<link>https://blog.naver.com/gi_balja/221244285381</link>
					<guid>https://blog.naver.com/gi_balja/221244285381</guid>
					<description><![CDATA[리액트에서 이벤트 처리는 HTML과 유사한 방식으로 진행됩니다. 차이점이 있다면 1) JSX 중괄호{ }를 사용하여 이벤트를 처리하는 함수를 지정할 수 있고 2) 리액트 이벤트는 모두 소문자가 아니라 캐멀 케이스로 사용된다는 점입니다. 예를 들어 HTML의 onclick, onkeypress는 리액트에서는 각각 onClick, onKeyPress로 표기됩니다.그럼 리액트에서는 어떻게 이벤트를 처리해야 하는지 간단한 예제를 통해 알아보도록 하겠습니다.1) 이벤트 기능 : 숫자를 1씩 증가시켜 보자!버튼을 클릭했을 때 버튼 안의 숫자가 1씩 증가되는 이벤트를 만들어 보겠습니다. &lt;button&gt;을 랜더링하는 Counter 컴포넌트를 생성합니다. constructor, state를 사.......]]></description>
					<pubDate>Wed, 04 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Event,이벤트,이벤트핸들러,bind,onChange]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[10. 리액트 : Class, state, setState]]></title>
					<link>https://blog.naver.com/gi_balja/221243602876</link>
					<guid>https://blog.naver.com/gi_balja/221243602876</guid>
					<description><![CDATA[리액트 컴포넌트는 함수형 외에도 ES6 클래스를 사용하여 작성할 수 있습니다. 클래스 컴포넌트는 함수형과 달리 Life Cycle methods와 state를 갖고 있다는 점에서 차이가 있습니다. 클래스는 각 구성 요소의 상태와 속성을 나타내는 this.state와 this.props가 있습니다. 클래스 컴포넌트는 다음과 같은 방식을 작성됩니다. 위 코드를 함수형 컴포넌트로 변경하면 다음과 같이 정리할 수 있습니다.클래스 컴포넌트에서 사용된 render()는 반환될 리액트 요소를 작성하는 곳이며, 함수형 컴포넌트에서 return과 같은 의미라고 생각하면 됩니다. 클래스 컴포넌트 안에는 render()가 꼭 존재해야 합니다. 물론 props와도 결합해서 사용할 수 있지.......]]></description>
					<pubDate>Tue, 03 Apr 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Component,컴포넌트,state,setState,props]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[9. 리액트 : Component 응용]]></title>
					<link>https://blog.naver.com/gi_balja/221242323046</link>
					<guid>https://blog.naver.com/gi_balja/221242323046</guid>
					<description><![CDATA[이번 장에서는 앞에서 언급한 함수형 컴포넌트를 어떤 방식으로 사용할 수 있는지 간단한 예제 코드를 통해 살펴보겠습니다. 리액트에서 얘기하는 컴포넌트는 웹사이트를 구성하는 각 요소(상단, 본문, 하단, 메뉴 등)을 의미한다고 생각하면 쉽게 이해하실 수 있습니다. 1) Component 실습먼저 ShoppingTitle(), ShoppingApp() 컴포넌트를 생성합니다. 본 예제 코드에서는 ShoppingTitle()은 제목과 전체 제품 수를 표기하고, ShoppingApp()은 컴포넌트들을 결합하는 공간으로 사용합니다.props로 &lt;ShoppingTitle /&gt; 안에 title, numItems 속성에 접근하면, 해당 속성값 정보가 브라우저에 출력되는 것을 확인할 수 있습니다. 이번에는 각.......]]></description>
					<pubDate>Sun, 01 Apr 2018 14:09:51 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,Component,컴포넌트,Props,Function,함수]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[8. 리액트 : JSX와 Component]]></title>
					<link>https://blog.naver.com/gi_balja/221240397869</link>
					<guid>https://blog.naver.com/gi_balja/221240397869</guid>
					<description><![CDATA[이전까지 쉴틈없이 리액트 내용을 살펴봤는데요. 이번 장부터는 쉬어가는 시간으로 리액트 기초 개념들을 복습하는 시간을 가져보겠습니다. 오늘은 그 첫 번째로 다양한 리액트 JSX 적용 방법에 대해 알아보겠습니다. 먼저 연습을 위한 기본 세팅 작업부터 진행해 볼까요? index.html 문서를 생성한 다음 CDN 방식으로 react, react-dom, babel 관련 파일을 연동합니다. &lt;body&gt; 안에는 JSX를 작성할 &lt;script&gt;와 JSX 결과를 담을 &lt;div&gt;를 생성합니다.이후 입력하는 모든 코드는 &lt;script&gt; 안에 작성하면 됩니다.1) 객체 프로퍼티 전달리액트는 중괄호로 값을 전달합니다. 중괄호 안에는 다양한 내용물을 담을 수 있습니다.......]]></description>
					<pubDate>Fri, 30 Mar 2018 07:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,JSX,Component,컴포넌트,props,조건문]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[7. 리액트와 화살표 함수(ES6)]]></title>
					<link>https://blog.naver.com/gi_balja/221232680603</link>
					<guid>https://blog.naver.com/gi_balja/221232680603</guid>
					<description><![CDATA[ES6에서는 function 대신 화살표 ( =&gt; )를 사용하여 함수를 선언할 수 있습니다. 이를 화살표 함수라고 얘기하는데 오늘은 ES6에서 화살표 함수를 사용하는 방법에 대해 알아보겠습니다. 화살표 함수는 익명 함수에서만 사용할 수 있다는 조건이 있습니다. 따라서 화살표 함수를 호출하기 위해서는 함수 표현식을 사용해야 합니다. 또한 매개 변수 개수에 따라 만들어지는 방식이 달라지게 됩니다. 그럼 상황별로 화살표 함수를 어떻게 만들어야 하는지 알아보겠습니다. 1) 매개 변수가 없는 경우ES5와 비교했을 때 가장 크게 변경된 부분은 function 키워드가 사라지고, 소괄호 옆에 화살표 기호를 삽입하여 함수의 몸체를 가리키는 형태로 바.......]]></description>
					<pubDate>Tue, 20 Mar 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,ES6,JavaScript,자바스크립트,Function,Arrow,함수,화살표함수]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>gi_balja</author>
					<category><![CDATA[나, 리액트 한번 해보려고]]></category>
					<title><![CDATA[6. 리액트 : JSX 안에 객체 데이터 삽입]]></title>
					<link>https://blog.naver.com/gi_balja/221231566084</link>
					<guid>https://blog.naver.com/gi_balja/221231566084</guid>
					<description><![CDATA[이번 장에서는 리액트 안에 객체 데이터를 삽입하는 방법에 대해 알아보겠습니다. 실습은 이전에 설치한 리액트 파일 안에서 진행하겠습니다. App.js 안에 마블 히어로 정보를 담고 있는 배열을 작성합니다. Test 클래스에 있는 JSX 문장에는 중괄호를 사용하여 배열 안에 있는 프로퍼티에 접근하는 코드를 추가합니다.heroes[0].XXXX은 heroes 배열에서 0번째에 있는 XXXX 프로퍼티에 접근하겠다는 의미입니다. 터미널에서 npm start를 입력하면 캡틴 아메리카와 관련된 정보가 출력되는 것을 확인할 수 있습니다. 그럼 다음과 같이 복수의 데이터에 접근하고자 한다면 어떻게 해야 할까요?이 때 자바스크립트 배열에 존재하는 map()을 사용하면.......]]></description>
					<pubDate>Mon, 19 Mar 2018 08:00:00 +0900</pubDate>
					<tag><![CDATA[기발자,기획자,개발자,React,리액트,객체,Object,배열,Array,map]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
