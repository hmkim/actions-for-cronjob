<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[zheld]]></title><description><![CDATA[LEGEND OF 'zheld']]></description><link>http://blog.hwang.gg/</link><image><url>http://blog.hwang.gg/favicon.png</url><title>zheld</title><link>http://blog.hwang.gg/</link></image><generator>Ghost 2.7</generator><lastBuildDate>Wed, 08 May 2019 00:58:59 GMT</lastBuildDate><atom:link href="http://blog.hwang.gg/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[SI 탈출 가이드]]></title><description><![CDATA[지금도 팔려다니는 SI, SM 개발자들을 위하여]]></description><link>http://blog.hwang.gg/20190508/</link><guid isPermaLink="false">5cd1d5f58365a60001d823e4</guid><category><![CDATA[SI]]></category><category><![CDATA[서비스]]></category><category><![CDATA[이직]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Wed, 08 May 2019 00:09:25 GMT</pubDate><media:content url="http://blog.hwang.gg/content/images/2019/05/woman-570883_640.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://blog.hwang.gg/content/images/2019/05/woman-570883_640.jpg" alt="SI 탈출 가이드"><p>저의 사수는... 윌슨이었습니다. 상상 속에만 존재했거든요..</p>
<p><img src="http://blog.hwang.gg/content/images/2019/05/---------.jpeg" alt="SI 탈출 가이드"></p>
<p>그간 힘들고 외로웠습니다.<br>
6년의 SI, SM시장 생활을 청산할 수 있었던 비법아닌 비법을 정리합니다.</p>
<hr>
<h2 id="tldr">TL;DR</h2>
<h3 id="1">1. 사람들을 만나본다.</h3>
<h3 id="2">2. 현재 직무와 상관 없는 서적이나 블로그 등을 꾸준히 본다.</h3>
<h3 id="3">3. &quot;어떻게든&quot; 시간을 내서 &quot;어떻게든&quot; 새로운 기술을 습득한다.</h3>
<h3 id="4">4. 코드나 블로그 등을 정리해 &quot;자산화&quot; 한다.</h3>
<hr>
<h2 id="1">1. <strong>사람들을 만나본다.</strong></h2>
<p>SI 시장에는 제대로 된 멘토가 없다고 단언합니다.<br>
대부분 SI 동네의 시니어들은 커리어나 처우 때문에 고민 중인 사람 설득해서 퇴사 못하게 하는게 일반적입니다.</p>
<p><strong>같은 우물 속에서 살아가는 개구리는 다른 이야기를 안 해 줍니다.</strong></p>
<p>대신에 이런 이야기나 해 줄 겁니다.</p>
<blockquote>
<p>이번 프로젝트 끝나면 사람 뽑아줄거야.<br>
다음 번엔 편한 곳으로 보내줄게.<br>
연봉 때문에 이직하겠다고?! 그깟 푼 돈 차이 나중에 다 따라잡힌다.</p>
</blockquote>
<p>☢️ 사기입니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/05/PS15012300028.jpg" alt="SI 탈출 가이드"></p>
<h3 id="1">1. 당장 바깥으로 나가 세상의 사람들과 교류해 보세요.</h3>
<p>&quot;<strong>주말</strong>&quot;에도 개발자 &quot;<strong>수백명</strong>&quot;이 모여 바뀐 개발 세상에 대해서 이야기를 합니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/05/-----------2019-05-08-------4.16.16-1.png" alt="SI 탈출 가이드"><br>
<strong>토요일</strong>에 Spring 개발자 수백명이 모여서 개발 이야기를 논했습니다.<br>
(누군가는 게임이나 할 시간에 말이죠.)</p>
<p>당신이 낡은 코드를 재생산하며 매너리즘에 빠져 방황하는 순간에도, 실제 개발 세계에서는 주말에도 공부하는 사람들이 많습니다. 그 사람들이 중요시 여기는 트렌드, 도구, 언어 등을 듣고 모르는 것을 하나 씩 배워 나가세요.</p>
<h3 id="2">2. 온라인 커뮤니티도 좋습니다.</h3>
<p>많은 사람들이 궁금증에 대해서 친절하게 답변해 줍니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/05/hqdefault.jpg" alt="SI 탈출 가이드"><br>
코린이는 모두에게 사랑받습니다.<br>
(어떤 언어 하나만 파야되냐 같은 질문 같은거만 아니면요.)</p>
<p>온라인 상에서 두드러지는 특징은 자신이 <strong>최근에 해결한 이슈</strong>에 대해서 <strong>적절한 질문</strong>을 던졌을 때 이분들의 반응은 폭발적 입니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/05/----------1.jpeg" alt="SI 탈출 가이드"></p>
<p>커뮤니티에서도 자주 등장하는 단어나 표현. 개념 들을 예의주시하며 공부하세요. 커뮤니티에서 자주 발생하는 질문을 답변해주고, 때로는 질문을 해가며 같이 성장하시면 됩니다.</p>
<blockquote>
<h3 id="">오지랖이 넓어지지 않으면 현재의 상황에서 벗어날 수 없습니다.</h3>
</blockquote>
<h4 id="3">3. 다른 개발자들은 어떠한 도구를 쓰고, 어떠한 생각으로 개발을 바라보는지 들어 보세요.</h4>
<p>다루지 못하더라도 유사한 도구, 언어, 프레임워크가 무엇이 있는지 부지런히 찾아보고 비교하고 이해해야 합니다.</p>
<p>어떠한 트렌드나 용어의 성장을 이해 못하기 시작하면 쫓아가야 하는 것들이 눈덩이처럼 불어납니다. 생존자나 승리자만 습득하겠다는 학습 태도는 오늘날의 개발 환경에는 적합하지 않은 표현입니다. 전방위적인 기술 교류가 백엔드, 프론트엔드, 언어를 막론하고 서로에게 긍정적인 영향을 주고 있습니다. 과거와 같은 자세로는 눈과 귀를 가리고 누군가 입안에 먹거리를 넣어주길 기다리는 것과 같습니다.</p>
<p>오늘날의 기술 습득은 파도타기와 같습니다. 기술 진보는 멈추지 않으며, 부단히 노력을 해야만 계속 그 파도를 탈 수 있다는 말씀입니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/05/surfer-2165884_640.jpg" alt="SI 탈출 가이드"></p>
<hr>
<h2 id="2">2. 현재 직무와 상관 없는 서적이나 블로그 등을 꾸준히 본다.</h2>
<h3 id="1">1. 쓸 모 없는 생각은 없습니다.</h3>
<p>저 같은 경우에는 개발을 문제 해결을 위한 노력이라고 봅니다. 무엇이 필요한지 어떻게 해야 하는지에 대한 사고 과정은 사실 엄청 어렵습니다.<br>
SI에서 개인에게 주어지는 환경은 &quot;<strong>김밥천국</strong>&quot; 같습니다. 김밥도 말고, 청소도 하고, 손님들 돈도 받아야 합니다. 서비스는 잘 정리 된 &quot;<strong>레스토랑</strong>&quot; 같습니다. 만약 사장이 30만원 짜리 김밥을 말아 보라고 하면 김밥천국은 김밥을 30만원 어치 여러번 말아 버릴 생각을 할테지만, 레스토랑에서는 하나의 김밥이 30만원의 값어치를 할 수 있도록 할 겁니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/05/chef-1209161_1280.jpg" alt="SI 탈출 가이드"></p>
<p>현재의 조직에서 부정적으로 대하는 것들을 직시하거나 완전히 새로운 생각과 새로운 기술을 습득하세요. 그 속에 길이 있습니다.</p>
<h3 id="2">2. 당신의 현재 기술을 진보시켜 도달할 수 있는 영역을 노려보세요.</h3>
<p>자신에게 주어진 것이 구체적으로 무엇인지, <strong>3년 뒤</strong>, <strong>5년 뒤</strong>에 대해서 현재의 역할이 무엇을 제공해주고 있는지 냉정하게 판단하고 시나리오를 써보세요.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/05/maze-2264_1280.jpg" alt="SI 탈출 가이드"></p>
<p>본인이 무엇을 하고 있을 것이며, 현재의 직무가 어떠한 밑바탕이 될 것이며, 미래의 자신이 현재의 자신이 원하는 모습인지요.</p>
<h3 id="3">3. 아티스트처럼 훔치세요.</h3>
<p>모든 전문가는 아마추어에서 시작했으며, 전문가의 기교를 흉내내고 여러번의 좌절을 겪은 끝에 오리지널로 거듭났습니다. 전문가들과 유명인사들의 생각과 코드를 온라인과 컨퍼런스 등을 통해 훔쳐 배우세요. 수 많은 이들의 장점을 흡수하다 보면 오리지널이 되어있으실 겁니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/05/0307D64A514D3FB511.jpeg" alt="SI 탈출 가이드"><br>
<a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=24719673">함께 읽으면 좋은책</a></p>
<hr>
<h2 id="3">3. &quot;어떻게든&quot; 시간을 내서 &quot;어떻게든&quot; 새로운 기술을 습득한다.</h2>
<h3 id="1">1. 본인의 성격에 따라 전략을 세우세요.</h3>
<p>저는 소심하지만 외향적입니다. 개발 업계에 사실 이런 분들 많다고 봅니다.<br>
&quot;<strong>모순적인 성격</strong>&quot;이요. 저는 제 성격에 대해서 고민해 본 결과 학습 방법이나 계획 자체를 타인들에게 자주 말합니다. 그렇게 제 학습 계획을 반복해 말해서 스스로 약속 같은 것 처럼 만들어서 최대한 지키도록 압박을 느끼게 합니다.<br>
저랑 다르게 어떤 분은 빡빡한 스케쥴을 작성하기도 합니다. 학생 시절에 시켜서 하던 공부가 아니라 &quot;<strong>평생해야 하는 공부는 어떻게 할 것인가?</strong>&quot;를 고민하셔야 합니다. 고민해 보신 적 있나요?<br>
<img src="http://blog.hwang.gg/content/images/2019/05/img_20171123183822_19ad1505.jpg" alt="SI 탈출 가이드"><br>
개발자의 공부는 스스로에게 놀이 같을 때도 있어야 하고 괴롭게 해서는 안됩니다.</p>
<h3 id="2">2. 컨퍼런스나 외부교육은 &quot;액기스&quot; 입니다.</h3>
<p>책이나 온라인 교육 서문만 보다가 막힌다면 컨퍼런스나 외부교육에 가서 정리된 액기스를 통해 자극도 받으면서 나만 모르고 있다는 생각이 들 때 위기의식이 느껴질 겁니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/05/153D9E374F2A66A53104CB.jpeg" alt="SI 탈출 가이드"><br>
&quot;밤이 찾아왔습니다. XXX를 모르는 마피아는 고개를 들어 주세요.&quot;</p>
<h3 id="33030">3. 30분, 30분만 어떻게든</h3>
<p>오래 할 필요도 없습니다. 꾸준해야 하고 스스로가 납득할 수 있는 수준으로 지속적으로 하세요.</p>
<hr>
<h2 id="4">4. 코드나 블로그 등을 정리해 &quot;자산화&quot; 한다.</h2>
<h3 id="">이것들은 그냥 하시면 됩니다.</h3>
<h3 id="1github">1. Github 없으면 만드세요.</h3>
<h3 id="2">2. 본인의 개발에 대한 생각과 코드를 적는 블로그를 하세요.</h3>
<h3 id="3">3. 발표를 하거나 외부에 공개하세요.</h3>
<hr>
<h2 id="">마무리</h2>
<p>여기까지가 제가 드리고 싶은 말씀이었습니다. 아직 남들에 비해 한참 멀었으나 저는 스스로 개발자라는 자부심과 즐거움을 가지고 살아가고 있습니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/05/i12785599774.png" alt="SI 탈출 가이드"></p>
<p>궁금하신 점이나 다른 것들은 언제든지 <a href="https://www.facebook.com/under09">페북</a>으로 말씀 주시면 되겠습니다.<br>
긴 글 읽어 주셔서 감사합니다.</p>
]]></content:encoded></item><item><title><![CDATA[서비스 회사가 SI 보다 좋은 점]]></title><description><![CDATA[1. 자발적으로 돌아가는 조직
2. ₩
3. 뛰어난 동료
4. 개발자가 일하기 좋은 업무환경]]></description><link>http://blog.hwang.gg/20190505/</link><guid isPermaLink="false">5ccdfff28365a60001d82395</guid><category><![CDATA[조직]]></category><category><![CDATA[서비스조직]]></category><category><![CDATA[스타트업]]></category><category><![CDATA[SI]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Sat, 04 May 2019 21:41:48 GMT</pubDate><media:content url="http://blog.hwang.gg/content/images/2019/05/79354cbd0ed1f7ccea86adf53878dba928db64bb1aefe85bdd74cc6e6271ab628232088973f3a1ad2af887721b0b1de4e4ccfce36a41639e976b9adfbc3ea63b26ec17e011ea00efb4f74208eb500e0c8fd21cc151625df0ade4221e35079b66-1.jpeg" medium="image"/><content:encoded><![CDATA[<img src="http://blog.hwang.gg/content/images/2019/05/79354cbd0ed1f7ccea86adf53878dba928db64bb1aefe85bdd74cc6e6271ab628232088973f3a1ad2af887721b0b1de4e4ccfce36a41639e976b9adfbc3ea63b26ec17e011ea00efb4f74208eb500e0c8fd21cc151625df0ade4221e35079b66-1.jpeg" alt="서비스 회사가 SI 보다 좋은 점"><p>올해 6년을 SI에서 파생된 시장에서 구르다가 며칠 전에 서비스를 자체적으로 꾸려나가는, 아직까진 스타트업인 회사로 옮겼습니다.</p>
<h4 id="">관련 글</h4>
<p><a href="http://blog.hwang.gg/20190327/">SI 개발자, 불나방이 되거나 자토이치가 되거나</a></p>
<hr>
<h1 id="tldr">TL;DR</h1>
<p><img src="http://blog.hwang.gg/content/images/2019/05/79354cbd0ed1f7ccea86adf53878dba928db64bb1aefe85bdd74cc6e6271ab628232088973f3a1ad2af887721b0b1de4e4ccfce36a41639e976b9adfbc3ea63b26ec17e011ea00efb4f74208eb500e0c8fd21cc151625df0ade4221e35079b66.jpeg" alt="서비스 회사가 SI 보다 좋은 점"></p>
<hr>
<h2 id="">옮기고 나니 좋은 점</h2>
<h3 id="1">1. 자발적으로 돌아가는 조직</h3>
<p><img src="http://blog.hwang.gg/content/images/2019/05/bulletin-board-3127287_640.jpg" alt="서비스 회사가 SI 보다 좋은 점"><br>
SI 쪽의 조직들은 고객사에 엮여 있어서 유연성이 극히 떨어지는 반면. 자기네 회사에서 자기네 서비스 직접 핸들링하는 개발 조직은 일정이나 기술 선택 등 다양한 방법에서 &quot;<strong>실험</strong>&quot;과 &quot;<strong>적용</strong>&quot;을 할 수 있는 올바른 기회를 제공 받습니다. 이건 결국 <strong>이상적인 결과물</strong> + <strong>뛰어난 엔지니어</strong>를 만드는 선순환을 만듭니다.</p>
<h3 id="2">2. ₩</h3>
<p><img src="http://blog.hwang.gg/content/images/2019/05/dollar-499481_640.jpg" alt="서비스 회사가 SI 보다 좋은 점"><br>
SI 동네에 비해 돈 훨씬 많이 줍니다. 이건 단순히 돈에 대한 이야기가 아니라,<br>
<strong>개발 직군에 대해서 얼마나 중요한지 제대로 인지하고 있다는 걸 보여 줍니다.</strong> 대신에 그 만큼 미지의 문제를 해결해야 하는 상황이 많이 발생합니다.<br>
즉, 서비스를 직접 개발하고 운영하는 회사에서는 시간이 갈 수록 더 비싼 개발자로 거듭날 수 있는 기회가 발생합니다.<br>
반면에 SI에서는 몸 값 비싸지는 기회도 제대로 안 줄 뿐 더러 연차가 쌓여서 고객에게 청구할 비용이 커지면 개발 롤이 아닌 관리나 컨설팅 롤로 전업하기를 강요하는 분위기 입니다.</p>
<h3 id="3">3. 뛰어난 동료</h3>
<p><img src="http://blog.hwang.gg/content/images/2019/05/accountant-2252316_640.jpg" alt="서비스 회사가 SI 보다 좋은 점"><br>
동료들이 <strong>개발자스럽습니다</strong>. 뭐 어렵고 격식 차리는 말은 개발 용어면 충분하고, 그림이나 적당한 위키나 메시지나 직접 코드 보여주는 것으로 이해하며, 이해 시킵니다.<br>
SI 동네에선 동료 개발자들을 만나서 대화를 해봐도 <strong>개발자라기 보다는 직장인</strong>에 가깝습니다.<br>
반면에 새로운 동네의 동료 분들은 <strong>토이 프로젝트</strong>나 <strong>새로운 개발언어</strong>나 기존 개발 방식에 대해서 의견을 제시하거나 <strong>코드리뷰</strong>를 한다거나 뭐 여러가지 &quot;<strong>개발자스러운 행동</strong>&quot; 하나하나에 다들 달아오르고 서로에게 공명하는 것이 분명하게 보입니다.</p>
<h3 id="4">4. 개발자가 일하기 좋은 업무환경</h3>
<p>개발 PC가 mac, cloud에 구성된 인프라, 네트워크 차단 등의 최소화 등.<br>
SI 동네에서는 권한 요청하고 개발환경 마무리 짓는데 1개월에 가깝게 시간이 필요하다면, 이 동네에선 하루, 이틀 사이에 끝나고 코드 분석하는 느낌 입니다. 그것이 가능한 건 거의 모든 환경이 개발자들이 일하기 편한 환경으로 세팅되어 있기 때문이고요.</p>
<hr>
<h2 id="">마무리</h2>
<blockquote>
<p>능력이 되고 성향이 개발자라면 시간 끌지 마시고 얼른 이직하세요.</p>
</blockquote>
]]></content:encoded></item><item><title><![CDATA[그것, 개인과 조직을 병들게 하다.]]></title><description><![CDATA[조직을 병들게 하는 것, 나를 힘들게 하는 것, 그리고 어디에나 있는 그것.  그것을 ]]></description><link>http://blog.hwang.gg/20190419/</link><guid isPermaLink="false">5cb8879c8365a60001d8222e</guid><category><![CDATA[회사]]></category><category><![CDATA[조직]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Thu, 18 Apr 2019 20:39:10 GMT</pubDate><content:encoded><![CDATA[<p><img src="http://blog.hwang.gg/content/images/2019/04/maxresdefault.jpg" alt="maxresdefault"></p>
<h3 id="tldr">TL;DR</h3>
<h3 id="">당신이 생각하는 '그것'은 무엇입니까?</h3>
<h3 id="">'그것'은 과연 당신의 동료와 고용주들의 머리에도 똑같은 모습으로 존재할까요?</h3>
<hr>
<p>유명한 소설가 스티븐 킹의 작품 중 하나인 그것(IT) 이라는 소설은 영화화까지 되었습니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/04/o-THE-570.jpg" alt="o-THE-570"></p>
<p>또래들에게 루저클럽이라 불리는 친구들이 저마다 갖고 있는 공포를 형상화 해 끔찍한 모습으로 나타나는 그것을 두려워 하다가 마침내 개개인이 지닌 두려움을 극복하고 힘을 합쳐 그것을 물리치는 이야기입니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/04/27.jpg" alt="27"></p>
<p>그런데 직장 생활에도 '그것'이 있었습니다.<br>
제가 여러 직장을 거쳐오며 만나 온 사람들은 '그것'과 관련되어 몇 가지 거짓말을 만들어 냈습니다.</p>
<hr>
<h4 id="">첫번째 거짓말은 무지에서 오는 거짓말로 '그것'은 원래 그렇다라는 거짓말입니다.</h4>
<p>원래 그런 것은 없습니다.<br>
칭찬도 지나치면 독이 되 듯, 배려도 지나치면 절차가 무시가 되며, 친목도 지나치면 파벌이 됩니다. 우리가 선한 의도로 하는 것들마저도 이렇게 쌓이고 방치되면 부패해 버립니다. 원래 그런 것은 없습니다. '그것'은 문화도 아니고, 그 누구도 원하던 형태가 아닐 겁니다.</p>
<h3 id="">두번째 거짓말은 이기적인 거짓말로 '그것'은 내 알 바 아니라는 거짓말입니다.</h3>
<p>나와 연관되지 않은 일은 없습니다. 어떤 일을 하는데 있어서, 누군가는 시키는 것이 일이라고 생각할 수도 있으며, 누군가는 시키는 대로 하는 것이 자신의 소임이라 여기는 이도 있습니다. 그렇지만 시키기 위해서는 어떻게 수행할 지를 고민해야 하며, 수행하기 위해서는 시키는 사람이 어떠한 의도인지를 알아야 합니다. 서로는 서로를 알아야만 합니다.<br>
누군가 자신에게 무리한 부탁을 한다면 자신이 일을 할 수 있으려면 필요한 것이 무엇인지 상대에게 알려 주려 노력해야 하고, 반대로 상대에게 일을 부탁할 때는 그에 앞서 자신이 무엇을 의도하고 상대가 어떻게 해야 일을 할 수 있을지 고민해야 합니다.</p>
<h3 id="">세번째 거짓말은 비겁한 거짓말로 '그것'은 누구도 해결 못해 라는 거짓말입니다.</h3>
<p>방관과 현상 유지는 그 누구에게도 주어진 목표가 아닙니다. 방관하고 현상유지를 목표로 움직이는 조직과 개인은 그 곳에 멈추어 있는 것이 아니라 실제로는 시대에서 빠르게 뒤쳐집니다. 때론 자신이 모든 수단과 방법을 동원했는데도 안되더라며 포기하는 이들이 있습니다. 당신의 또 다른 동료가 '그것'과 맞서 싸울 때 냉소적인 태도로 의욕을 떨어뜨리거나 외면하지 마십시오. 당신이 '그것'을 없애려 노력했을 당시에는 그 동료가 곁에 없었을 겁니다.</p>
<h2 id="">'그것'을 퇴치하기 위해서는 아주 강한 힘이나 지식이 필요한 것이 아닙니다.</h2>
<h3 id="">당신이 생각하는 '그것'은 무엇입니까?</h3>
<h3 id="">'그것'은 과연 당신의 동료와 고용주들의 머리에도 똑같은 모습으로 존재할까요?</h3>
<h3 id="">'그것'의 이름을 부르고 그것이 문제라고 말하는 것 부터 시작한다면. 결국 '그것'은 해결 가능한 것이 되어 버립니다. 영화 속 루저클럽이 격퇴한 페니와이즈 처럼.</h3>
]]></content:encoded></item><item><title><![CDATA[[Spring Boot] Swagger 설정]]></title><description><![CDATA[<p>SwaggerConfig.java 중 일부</p>
<pre><code class="language-java">...
.antMatchers(&quot;/v2/api-docs&quot;, &quot;/configuration/ui&quot;, &quot;/swagger-resources&quot;, &quot;/configuration/security&quot;, &quot;/swagger-ui.html&quot;, &quot;/webjars/**&quot;,&quot;/swagger.json&quot;).permitAll()
...

</code></pre>
<hr>
<p>pom.xml 중 일부</p>
<pre><code class="language-xml">...
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;</code></pre>]]></description><link>http://blog.hwang.gg/20190404/</link><guid isPermaLink="false">5ca59d938365a60001d8216b</guid><category><![CDATA[spring]]></category><category><![CDATA[springboot]]></category><category><![CDATA[boot]]></category><category><![CDATA[swagger]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Thu, 04 Apr 2019 06:03:08 GMT</pubDate><content:encoded><![CDATA[<p>SwaggerConfig.java 중 일부</p>
<pre><code class="language-java">...
.antMatchers(&quot;/v2/api-docs&quot;, &quot;/configuration/ui&quot;, &quot;/swagger-resources&quot;, &quot;/configuration/security&quot;, &quot;/swagger-ui.html&quot;, &quot;/webjars/**&quot;,&quot;/swagger.json&quot;).permitAll()
...

</code></pre>
<hr>
<p>pom.xml 중 일부</p>
<pre><code class="language-xml">...
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
    &lt;version&gt;2.9.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
    &lt;version&gt;2.9.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- guava가 없으면 실행이 안됨.--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt;
    &lt;version&gt;27.1-jre&lt;/version&gt;
&lt;/dependency&gt;
...
</code></pre>
<hr>
<p>출처 : <a href="https://springframework.guru/spring-boot-restful-api-documentation-with-swagger-2/">https://springframework.guru/spring-boot-restful-api-documentation-with-swagger-2/</a></p>
]]></content:encoded></item><item><title><![CDATA[SI 개발자, 불나방이 되거나 자토이치가 되거나]]></title><description><![CDATA[SI 인력 시장의 구인난과 SI 개발자 개인이 살아남기 위해서 필요한 것들.]]></description><link>http://blog.hwang.gg/20190327/</link><guid isPermaLink="false">5c9b065e8365a60001d81ea5</guid><category><![CDATA[SI]]></category><category><![CDATA[SM]]></category><category><![CDATA[에스아이]]></category><category><![CDATA[SO]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Wed, 27 Mar 2019 05:45:11 GMT</pubDate><content:encoded><![CDATA[<h2 id="tldr">TL;DR</h2>
<blockquote>
<h3 id="sism">도시락 싸고 다니며 말리기 힘들어서 그래요. 개발자 커리어를 시작할거면 SI, SM 처럼 파견가는 비즈니스 하지 마세요. 그래도 해야 겠다면 &quot;불나방&quot;이 아니라 &quot;자토이치&quot;가 되세요.</h3>
</blockquote>
<h2 id="zatoichi_xl"><img src="http://blog.hwang.gg/content/images/2019/03/zatoichi_xl.jpg" alt="zatoichi_xl"></h2>
<p><a href="https://brunch.co.kr/@supims/394">https://brunch.co.kr/@supims/394</a><br>
↑ 위는 작년 기준으로 작성된 마음에 쏙드는 개발자 구인에 관한 글입니다.</p>
<p>SI 시장에서 일을 배우고 수행해 온 개발자 입장으로 제 맘대로 위의 글의 바통을 받아 이어 나가자면, SI에서 촉발, 파생되는 모든 시장(이하 그냥 SI)의 구인난은 지속적인 현상이 될 것입니다.</p>
<p>그 시장의 불합리함은 새로이 직업 전선에 뛰어드는 세대들에게 거길 들어가느니 백수로 노력을 하다가 다른 곳에 신입을 가겠다는 상황을 만들고 있기 때문입니다.</p>
<p>과거 방식의 인력 관리는 더 이상 유효하지 않은 시기가 도래했습니다.<br>
관리자들에겐 그 어느 때보다 어려운 도전의 시기 입니다.</p>
<h3 id="">빠른 이해를 돕기 위한 인력이탈 무한반복 시나리오</h3>
<p>= 무능 집약적인 회사로 거듭나는 방법</p>
<h4 id="1">1. 아랫 사람 대하 듯 회유 시도</h4>
<p><img src="http://blog.hwang.gg/content/images/2019/03/51465067_146923679670456_6288505371743423691_n.jpg" alt="51465067_146923679670456_6288505371743423691_n"></p>
<h4 id="2">2. 이번만 참으면 된다, 처우개선 떡밥 등의 공수표 부도로 인한 인력 이탈</h4>
<p><img src="http://blog.hwang.gg/content/images/2019/03/37997173_634332666953503_748807963006730240_n.jpg" alt="37997173_634332666953503_748807963006730240_n"></p>
<h4 id="31">3. 잔여 인력 단도리. 충성충성충성 (다시 1로)</h4>
<p><img src="http://blog.hwang.gg/content/images/2019/03/------1-.jpg" alt="------1-"></p>
<p>실제적으로 이런 것들에 대해서는 나중에 차근차근 정리해서 다루는 시간을 따로 갖겠습니다.<br>
오늘의 주제는 SI 거지같은 이유에 대한 원색적인 열거 보다는 &quot;자토이치&quot;가 어떻게 등장하는 지에 좀 더 주안점을 두었습니다.</p>
<hr>
<h2 id="">불나방</h2>
<p><img src="http://blog.hwang.gg/content/images/2019/03/XJQLZHv2-1.jpg" alt="XJQLZHv2-1"></p>
<p><strong>불나방</strong>은 SI 개발자들이 처한 일반적인 상황입니다.<br>
SI 시장은 본질이 고객 회사가 진행하는 비즈니스에 따라 시장이 형성되고 인력이 오고가는 시장입니다.</p>
<p>불나방처럼 &quot;<strong>SI 시장의 동향</strong>&quot;이나 회사가 바라는 것만 따르다 보면 개발자 개인이 원하는 곳에 도달 전에 몸이 망가지기 일수이고, 단순 연차식 코스트 산정은 비용 이슈로 직결되어 &quot;<strong>직업적으로 단명</strong>&quot;하기 때문에 불나방과 같습니다.</p>
<p>영업 관점으로 SI는 사람이 저렴해야 비즈니스를 운용하기 쉽기 때문입니다.<br>
저렴한 사람은 필연적으로 저렴한 기술을 사용하게 될 겁니다.</p>
<p>결국 고찰이나 섬세한 재사용성 고려 대신에 비용 상의 이슈로 Ctrl + C, Ctrl + V 에 가까운 경험. 이론보다는 막무가내 실전. 무공으로 치면 내공보다 &quot;<strong>외공</strong>&quot;만 쌓이기 쉽습니다. (왜인지 모르는데 되어서 이렇게만 하더라.)</p>
<p>이런 저질 소프트웨어가 기업 비즈니스의 발목을 잡는 경우가 허다하며 우리가 눈살을 찌푸리는 얼토 당토 않는 전산 오류를 야기시킵니다.</p>
<p><a href="http://www.newsworker.co.kr/news/articleView.html?idxno=27176">하루에 92억 정도는 날려주는 오류</a>라던가 말이죠.</p>
<hr>
<h2 id="">자토이치</h2>
<p>그렇지만 어려운 풍토에서 &quot;<strong>자토이치</strong>&quot; 같은 사람이 등장하기'도' 합니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/----.jpeg" alt="----"><br>
자토이치는 맹인 검객이지만 일반적인 검객들보다 훨씬 강한 일본 미디어 속 인물입니다.</p>
<p>불나방은 흔하지만 자토이치 같은 사람은 등장하기가 엄청나게 어렵습니다. SI에서 일을 하면서 서비스의 <strong>시작</strong>과 <strong>운영</strong>, <strong>종료</strong> 등 실제로 소프트웨어 비즈니스가 동작하는 환경에 대한 &quot;<strong>맥락있는 경험</strong>&quot;을 하기도 힘들고 전문적 이고 심오한 기술을 장려하기 어려운 환경이기 때문입니다.</p>
<p>그냥 회사가 바라는 대로 살아가면 반복적인 구축만 또는 운영만 하는 환경에서 사이클을 돌다가 재수 없어서 프로젝트의 순환 사이클에서 벗어나게 되면 계속 고객사의 사업 계획과의 엇박으로 안 좋은 긴급, 악성 프로젝트의 소방수로 전전하게 될 가능성이 큽니다.</p>
<p>그래도 <strong>여러가지 제약 사항</strong> 속에서도 스스로를 갈고 닦고 <strong>부단한 노력</strong> 끝에 분명히 자토이치처럼 네임드라 칭해도 될 만큼 뛰어난 개발자들이 등장한 경우도 매우 드물지만 본 적은 있습니다.</p>
<p>그런 분들은 주경야독의 생활화입니다. 일하면서 틈틈이 공부하시고 퇴근해도 공부하시고 최종 학력이 문제면 사이버 대학교 과정 수강하시고, 스터디 모임도 가시고, 블로그나 깃헙의 본인의 커리어에 대한 고민과 학습 내용을 정리하시고.. 실력이 안 늘면 사기입니다. 근본적으로 회사에서는 조용 조용해도 대외적으로는 활발하게 커리어 성장을 위해서 무언가를 하고 계십니다.</p>
<p>제가 많은 캐릭터 중에 자토이치라는 캐릭터를 빗대어 표현한 것은 자토이치가 SI쪽 개발자가 처한 현실과 많이 비슷해 보이기 때문입니다.</p>
<p>제한 된 시야와 거동, 사회적 약자, 이로 인해 겪는 다양한 고충, 생존하기 위해서는 여러 번 상처 입고 시행착오를 겪었을 자토이치라는 캐릭터가 겪었을 인생일 겁니다.</p>
<p>저는 자토이치를 통해 직업인으로서, 개발자로서의 숙명 같은 것들을 떠올렸습니다.<br>
지금도 SI 어딘가에는 자토이치가 되기 위해 불철주야 스스로 갈고 닦는 사람들이 숨어있을 겁니다.</p>
<hr>
<h3 id="">마무리</h3>
<p>아래는 웹 개발 관점에서 세분화 된 3개의 독립된 직군의 커리어를 충족시키기 위한 학습 로드맵입니다.<br>
<a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a></p>
<ol>
<li>
<p>뉴비<br>
<img src="http://blog.hwang.gg/content/images/2019/03/intro.png" alt="intro"></p>
</li>
<li>
<p>프론트엔드 개발자<br>
<img src="http://blog.hwang.gg/content/images/2019/03/frontend.png" alt="frontend"></p>
</li>
<li>
<p>백엔드 개발자<br>
<img src="http://blog.hwang.gg/content/images/2019/03/backend.png" alt="backend"></p>
</li>
<li>
<p>데브옵스 개발자<br>
<img src="http://blog.hwang.gg/content/images/2019/03/devops.png" alt="devops"></p>
</li>
</ol>
<h3 id="">복잡하고 해야할 게 밖에서 보기보다 훨씬 많다는 걸 이해시키기 위해서 위에 내용을 포함시켰습니다.</h3>
<p>별개의 직군을 아직도 사람 하나로 퉁치려는 곳이 SI에는 아직도 많습니다. 시스템 구축 방법론 자체가 낡은 곳들이 그러한 곳들인데 아예 저런 역할들이 등장할 정도로 코드가 분화되지도 않아서 Ctrl + C, Ctrl + V 로 돌아가는 곳들 <strong>정말 많습니다.</strong></p>
<p><strong>경영진, 또는 관리자 급들에게 드리고 싶은 말씀</strong>은 결국 개발자는 모두 제각기 다르게 주어진 환경에서 여러가지 시행착오를 통해 성장한 기술 전문직이라는 사실을 외면하지 마세요.</p>
<p>영업은 당신들이 하겠지만 내뱉은 말을 지키는 건 당신들의 동료인 개발자들입니다. 어떤 교육, 어떤 서적, 코드를 보고 깨달을 수 있는 개발자는 자신의 일을 취미로, 생활로, 인생으로 생각하고 늘 고민하고 있기에 그런 단편적인 상황을 통해서도 통찰력있는 코드나 아이디어를 내놓는 겁니다.</p>
<p>그런 사람은 흔치 않습니다. (그렇지만 찾아보면 회사에 반드시 있습니다.)</p>
<p>오히려 외부에서 새로 기술을 배우는 개발자 지망생들은 이러한 패러다임 변화를 최초 학습 과정부터 인지해서 그런 몰이해와 무리수가 없습니다.</p>
<p>기술의 진보로 인한 개발 패러다임 변화로 야기된 모든 것의 변화를 영업에선 아직도 과거 방식으로만 생각하고 있는 것이 SI 인력난의 근본 원인입니다.</p>
<p>자토이치가 될 수도 있는 사람을 불나방으로 만들거나 자토이치를 떠나게 하지 마세요.</p>
<p><strong>개발자를 목표로 하시는 분들께 드리고 싶은 말씀</strong> 누군가는 짧은 기간에 뛰어난 개발자가 되기도 하지만 대부분의 개발자들이 공감하는 성장의 왕도는 결국 꾸준한 시간 투자입니다. 하나를 모르겠으면 실은 열을 모르는 거고 열을 모르면 실은 백을 모르고 있었다는 사실을 깨닫는 식 입니다.</p>
<p>현재의 SI는 그런 하나에서 촉발되는 백의 깨달음을 얻기에는 불가능한 업무 환경이고 당연히 개발자로서의 성취(기술과 돈)를 이루기에는 자체적으로 서비스를 만들고 쭉 이끌어나가는 회사가 좋습니다. 소프트웨어 탑티어 급인 회사나 IT기술 기반의 스타트업(B2C쪽)이나 자체 솔루션을 지니고 있는 회사를 택하세요.</p>
<p>커리어로서의 개발자를 꿈꾼다면, 아직은 SI판에서 올바른 성장을 이끌어 낼 수 있는 회사는 거의 없다고 봅니다.</p>
<p>제일 좋은 건 그냥 현대식 전차부대(N사,K사와 유사한 조직구조)의 일원이 되시길 간절히 빕니다.<br>
<img src="http://blog.hwang.gg/content/images/2019/03/------2-.jpg" alt="------2-"></p>
]]></content:encoded></item><item><title><![CDATA[파일공유의 새로운 방법 - Firefox Send]]></title><description><![CDATA[<h2 id="tldr">TL;DR</h2>
<blockquote>
<h2 id="25gbfirefoxsend">2.5GB 미만의 파일을 안전하게 공유하고 싶다면 Firefox Send 쓰세요!</h2>
</blockquote>
<h4 id="1007">최대 100회 다운로드 또는 7일의 보존 기간을 선택할 수 있습니다.</h4>
<h3 id="httpssendfirefoxcom"><a href="https://send.firefox.com/">https://send.firefox.com/</a></h3>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-13-09_09_10-Firefox-Send---Chrome.png" alt="2019-03-13-09_09_10-Firefox-Send---Chrome"></p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-13-09_10_54-Firefox-Send---Chrome.png" alt="2019-03-13-09_10_54-Firefox-Send---Chrome"></p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-13-09_12_07-Firefox-Send---Chrome.png" alt="2019-03-13-09_12_07-Firefox-Send---Chrome"></p>
<p>위 처럼 진행하시고 생성된 URL을 파일을 전달하실 분에게 전달하면 끝.<br>
혹시라도 URL이 잘못 퍼질 사태를 대비해 암호도 걸어 둘 수 있습니다.</p>]]></description><link>http://blog.hwang.gg/20190313/</link><guid isPermaLink="false">5c8849dc8365a60001d81e24</guid><category><![CDATA[파일공유]]></category><category><![CDATA[팁]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Wed, 13 Mar 2019 00:13:22 GMT</pubDate><content:encoded><![CDATA[<h2 id="tldr">TL;DR</h2>
<blockquote>
<h2 id="25gbfirefoxsend">2.5GB 미만의 파일을 안전하게 공유하고 싶다면 Firefox Send 쓰세요!</h2>
</blockquote>
<h4 id="1007">최대 100회 다운로드 또는 7일의 보존 기간을 선택할 수 있습니다.</h4>
<h3 id="httpssendfirefoxcom"><a href="https://send.firefox.com/">https://send.firefox.com/</a></h3>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-13-09_09_10-Firefox-Send---Chrome.png" alt="2019-03-13-09_09_10-Firefox-Send---Chrome"></p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-13-09_10_54-Firefox-Send---Chrome.png" alt="2019-03-13-09_10_54-Firefox-Send---Chrome"></p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-13-09_12_07-Firefox-Send---Chrome.png" alt="2019-03-13-09_12_07-Firefox-Send---Chrome"></p>
<p>위 처럼 진행하시고 생성된 URL을 파일을 전달하실 분에게 전달하면 끝.<br>
혹시라도 URL이 잘못 퍼질 사태를 대비해 암호도 걸어 둘 수 있습니다.</p>
]]></content:encoded></item><item><title><![CDATA[GitHub 라이센스 정책 보기]]></title><description><![CDATA[깃헙에서 특정 repository 들어갔을 때 메인에서 우측 라이센스를 클릭하면 됩니다.

상세방법은 아래 이미지 참조.]]></description><link>http://blog.hwang.gg/20190311/</link><guid isPermaLink="false">5c858df88365a60001d81dfa</guid><category><![CDATA[GitHub]]></category><category><![CDATA[git]]></category><category><![CDATA[깃헙]]></category><category><![CDATA[라이센스]]></category><category><![CDATA[license]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Sun, 10 Mar 2019 22:34:54 GMT</pubDate><content:encoded><![CDATA[<h1 id="tldr">TL;DR</h1>
<blockquote>
<h2 id="repository">깃헙에서 특정 repository 들어갔을 때 메인에서 우측 라이센스를 클릭하면 됩니다.</h2>
</blockquote>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-11-07_17_38-CampbellSoftwareSolutions_docker-osticket_-Run-OSTicket-in-a-docker-container-wi.png" alt="2019-03-11-07_17_38-CampbellSoftwareSolutions_docker-osticket_-Run-OSTicket-in-a-docker-container-wi"></p>
<p>깃헙에서 특정 repository에 들어가면 위와 같은 형태의 바가 나옵니다.</p>
<p>왼쪽부터 순서대로 커밋횟수, 브랜치의 수, 릴리즈 수, 컨트리뷰터의 수, 라이센스 명칭 입니다.</p>
<p>커밋(commit) 횟수란 CVS인 git에 커밋을 몇 회나 했는지를 의미합니다.<br>
커밋이 빈번하다는 건 기본적으로 소스의 변화가 잦다는 걸 의미합니다.</p>
<p>브랜치의 수는 형상관리에서 가지(branch)가 얼마나 많은가 입니다. 이건 보통 CI를 사용하는 조직에서 전략적으로 쓰는 구조인 경우가 많은데, 오픈소스의 경우에는 컨트리뷰터가 많을수록 테스트 등의 이슈가 발생합니다. 그래서 컨트리뷰터가 fork 하고 merge request 하는 건을 &quot;테스트&quot; 하는 등의 단계를 거치기 위해 별도 브랜치가 필요로 합니다.</p>
<p>릴리즈 수는 말 그대로 정식 넘버링이 된 릴리즈의 횟수입니다. 사용자들에게 의미있게 전달되는 배포본의 숫자입니다. (릴리즈 없이 clone 커맨드로 알아서 가져가서 빌드해서 사용하라는 프로젝트들도 많습니다.)</p>
<p>마지막으로 라이센스입니다. 오픈소스 라이센스는 GPL, Apache, MIT 등 종류가 다양하지만 근래 들어서는 MIT 라이센스가 가장 무난하게 쓰입니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/2019-03-11-07_19_03-docker-osticket_LICENSE-at-master---CampbellSoftwareSolutions_docker-osticket--.png" alt="2019-03-11-07_19_03-docker-osticket_LICENSE-at-master---CampbellSoftwareSolutions_docker-osticket--"></p>
<p>위에가 GitHub에서 특정 프로젝트 클릭 했을 때 나오는 내용입니다.</p>
<p>권한, 제약, 의무(조건) 이 명시적으로 나옵니다.</p>
<p>MIT 라이센스가 요새 인기 있는 이유는 사실 상 라이센스와 저작권에 대한 명시만 한다면 모든 사용 권한이 있기 때문이고 복잡하지 않기 때문입니다.</p>
<p>그렇지만 여러 라이센스의 오픈소스가 혼재 되어 있을 가능성이 많으므로 상용 소프트웨어를 정식적으로 개발 하는 경우에는 오픈소스에서 참조하는 오픈소스의 라이센스 정책도 확인해야 할 필요가 있습니다. (현실적으로 이런 것들을 일일이 단속하는 건 불가능합니다만.)</p>
]]></content:encoded></item><item><title><![CDATA[개발자의 그림 읽기: 고다이버 부인]]></title><description><![CDATA[<h3 id="tldr">TL;DR</h3>
<blockquote>
<p>초연결 사회, 우리는 그 어느 때보다 가깝게 존재하고 있습니다. 다만 서로가 다른 커뮤니티에 속한 것일 뿐.</p>
</blockquote>
<p>오늘의 그림은 19세기 말에 그려진 &quot;고다이버 부인&quot; 이라는 존 코일러의 유화입니다.<br>
저는 존 코일러라는 화가는 모르지만 이 그림은 종종 보곤 했습니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/Lady_Godiva_by_John_Collier.jpg" alt="Lady_Godiva_by_John_Collier"></p>
<p>그림 속 발가벗은 여성에게서는 순결함 같은 것이 느껴집니다.<br>
배경에</p>]]></description><link>http://blog.hwang.gg/20190303/</link><guid isPermaLink="false">5c7b123d8365a60001d81cdb</guid><category><![CDATA[교양]]></category><category><![CDATA[그림]]></category><category><![CDATA[고다이버]]></category><category><![CDATA[고디바]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Sun, 03 Mar 2019 00:26:33 GMT</pubDate><content:encoded><![CDATA[<h3 id="tldr">TL;DR</h3>
<blockquote>
<p>초연결 사회, 우리는 그 어느 때보다 가깝게 존재하고 있습니다. 다만 서로가 다른 커뮤니티에 속한 것일 뿐.</p>
</blockquote>
<p>오늘의 그림은 19세기 말에 그려진 &quot;고다이버 부인&quot; 이라는 존 코일러의 유화입니다.<br>
저는 존 코일러라는 화가는 모르지만 이 그림은 종종 보곤 했습니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/03/Lady_Godiva_by_John_Collier.jpg" alt="Lady_Godiva_by_John_Collier"></p>
<p>그림 속 발가벗은 여성에게서는 순결함 같은 것이 느껴집니다.<br>
배경에 그려진 돌로 된 커다란 집들은 여성이 처한 상황을 보면 두렵게도 보입니다.<br>
대낮에 발가벗고 거리를 돌아다니는 건 노출증 환자가 아니고서는 정말 수치스럽고 두려운 일이니까요.</p>
<p>(반대로 그녀가 올라 탄 말은 오히려 전신을 가리고 있습니다.<br>
만약에 말마저 발가벗었다면, 그림에서 말이 지닌 자연의 에너지가 너무 부각되어서 메시지가 전달이 안되었을 거라는 생각이 듭니다.)</p>
<p>그림 속 고다이버 부인의 이야기는 실화보다는 &quot;<strong>전설</strong>&quot;에 가깝습니다.<br>
가혹한 정치로 영민들을 고통스럽게 하던 남편에게 선정을 베풀 것을 아내가 간청하자 심드렁하게 그럼 &quot;옷이라도 벗고 영내를 한바퀴 돌면 생각해보겠다&quot; 라고 했었다나...<br>
아무튼 그녀는 그것을 해내었습니다.<br>
영민들은 그녀를 위해 문을 걸어 잠그고 통행을 하지 않았다고 하며,<br>
누군가 엿봤다가 눈이 멀었다는 전설도 있습니다. (아래 잠깐 다뤄지는 Peeping Tom 그림 참조)</p>
<p>그리고 이 설화는 간혹 벌어지는 알몸 시위의 시초 같은게 되었습니다.<br>
개인이 느낄 수 있는 수치를 무릅쓰고 발언에 나선다는 건 그만큼 그가 믿는 것이 개인보다 대의라는 의미를 지니게 되는 겁니다.</p>
<hr>
<p>저는 이 그림을 인터넷 시대를 살아가는 사람의 눈으로 보게 되었습니다.<br>
말 위의 나신의 여성은 현대의 우리들이라고요.</p>
<p>우리는 온라인에 밀접한 생활을 즐길수록 벌거벗은 여성 처럼 점점 많은 정보가 외부로 노출됩니다.<br>
민감한 개인 사상 마저도 밖으로 표출되기 시작했습니다.<br>
온라인에 떠도는 재미 삼아하는 정치 성향 테스트와 어떤 기사를 퍼나르고 읽는지,<br>
어떤 댓글을 다는지만 알아도 이제 사람이 어떤지는 너무 쉽게 판단할 수 있습니다.</p>
<p>옛날부터 어르신들이 말하는 &quot;입조심&quot;하라는 말은 더 이상 맞지가 않습니다. 그 분들은 입조심 안 한 사람들이 죽어나가는 시대를 겪으셨습니다. 하지만 오늘날엔 뭘 키보드로 옮겨적고, 뭘 좋아요를 누르고, 뭘 영상에 담는지가 더 중요한 시대가 되었습니다. 젊은 세대는 입조심이라는 단어에서 댓글과 주고 받은 카톡내용, 닉네임 등을 조심해야 한다는 생각을 해야 하는 겁니다.</p>
<blockquote>
<h3 id="">이 괴리가 유래없이 큽니다.</h3>
</blockquote>
<p>농경사회에서는 노하우의 전수가 핵심이었으나 고도의 기술 발전을 통한,<br>
가상의 세상이 실제 세상 위에 덧씌워진 오늘날은 비슷하지만 다르거나, 완전히 새로운 것들이 대거 등장했습니다. 신세대는 구세대의 가르침이 유용하지 않거나 현실과 동떨어진다고 툴툴대기 시작했으며, 구세대는 젊은 것들이 말도 안듣는다고 툴툴대기 시작했습니다. 이런 문제는 쭉 있어 왔으나 그 괴리가 인터넷 시대가 되며 지나치게 커졌습니다.</p>
<p>이 때문에 그간 겪은 바 없는 세대 차이가 발생했습니다.<br>
한 번도 경험해 보지 못한 &quot;가상&quot;의 신세계를 젊은 세대는 체험하며 시행착오를 겪어가며 성숙해 갔지만, 구세대들은 이걸 먼저 받아들일 준비가 안 되어 있었습니다. 그들에게는 정리하고 유지해 나가야 할 &quot;실제&quot; 세계 문제만 해도 복잡했기 때문입니다.</p>
<blockquote>
<p>뻥 좀 치면 인류사 처음으로 구세대가 신세대보다 세상을 목격하는 것 자체가 늦었던 시기 입니다.</p>
</blockquote>
<p>사회적으로 미숙하고 힘 없는 이들이 그들보다 영향력 있는 이들에게 가르침을 주고자하는 시대가 도래했습니다. 마치 그림 속 고다이버 부인 처럼요. 다른 점이 있다면 고다이버 부인의 위치에 사기꾼도, 노출광도, 광신자도 설 수 있습니다. 그건 결국 개인이 얼마나 올바른 가에 따라 달라집니다.</p>
<p>고다이버 부인은 인터넷 세상으로 비유하면 여러가지를 상징할 수 있습니다.</p>
<ol>
<li>
<p>인터넷 시대의 구세대에게 깨달음이나 선을 알려주는 신세대를 의미할 수도 있으며.<br>
<img src="http://blog.hwang.gg/content/images/2019/03/Strategies-for-teaching-older-people.jpg" alt="Strategies-for-teaching-older-people"></p>
</li>
<li>
<p>이 시대에서 소신을 밝히고 그것을 헤쳐나가는 개인과 그것을 믿고 응원을 보내는 대중을.<br>
<img src="http://blog.hwang.gg/content/images/2019/03/3210733192_3d6d7d5a4b_z.jpg" alt="3210733192_3d6d7d5a4b_z"></p>
</li>
<li>
<p>잘못된 믿음으로 스스로를 수치 속으로 몰아 넣는 어리석음과 타인에 대한 관음증과 경멸로 삶을 살아가는 못 된 이들을 나타낼 수도 있습니다.</p>
</li>
</ol>
<p><img src="http://blog.hwang.gg/content/images/2019/03/Jean_Carolus-_Peeping_Tom-_oil_on_panel-_46.5_x_32.5_cm-_private_collection.jpg" alt="Jean_Carolus-_Peeping_Tom-_oil_on_panel-_46.5_x_32.5_cm-_private_collection"></p>
<hr>
<h3 id="">마무리</h3>
<p>지금은 그 어느 때 보다 강력하게 연결된 &quot;<strong>초연결 시대</strong>&quot;입니다. 그리고 그 연결은 지속적으로 강화될 겁니다. (일례로 아마존에서는 신생아를 등록하면 평생 고객으로 타게팅하는 비즈니스를 하고 있습니다.)</p>
<p>우리는 언론과 미디어 뿐만 아니라 그 구성원들이 실제로 무슨 말을 하려 하고 생각을 하는지 조금만 시간을 내면 다 찾아볼 수 있는 시대에 살고 있습니다. 여론 조작이 의심스럽거나 특정 정치의도를 지닌 집단이다 싶으면 시간을 들여서 검색해 보고 교차 검증을 하면 알아낼 수 있는 시대에 살고 있습니다.</p>
<p>친구나 지인의 경조사는 페이스북이나 카카오톡만 봐도 눈치 챌 수 있습니다.<br>
과거라면 해외로 이민 간 친구는 영원히 이별이겠지만 이제는 틈틈이 영상통화도 할 수 있습니다.</p>
<p>타인과 현상에 대해 제대로 이해할 수 있는 수단이 주어졌음에도.</p>
<blockquote>
<p>그럼에도 우리는 외롭습니다.</p>
</blockquote>
<p>부정할 수 없을 겁니다. 인터넷에서 매일 마주치는 부정적인 생각과 활력을 잃은 삶에 대한 고민들.<br>
왜 우리는 그 어느 때보다 많이 연결되어 있음에도 외로울까요?</p>
<h3 id="">온라인의 연결은 강력해졌지만 거기에 속한 구성원들이 물리적으로 가까운 이들과 다른 이들이기 때문입니다.</h3>
<p>게임이나 커뮤니티나 온라인 동호회 활동에서 만나는 사람들은 다들 내 편인 거 같습니다.<br>
당연한 것이 나한테 싫은 소리를 해 줄 필요가 없는 사람들이니까요.</p>
<p>페이스북이나 vlog 올리는 사람들이 그들이 올리는 내용을 직장동료나 부모형제나 친구가 보고 댓글을 달아주는 관계라면 문제가 없습니다. 그렇지만 철저하게 사는 가상의 세상과 현실 세상이 분리 된 사람들은 불일치에서 외로움을 겪고 있습니다.</p>
<p>(심지어 온라인 세상 속에서마저 본인이 속한 자리가 없다고 느껴지면 더 넓은 세상에서 고립무원이라 느껴질 겁니다.)</p>
<p>오늘날 우리가 처한 상황은 조상들이 듣도보도 못한 상황입니다.<br>
그렇지만 구세대도 이젠 온라인 세상에 발을 들여 놓았고, 이제 우리는 온라인 세상에도 바깥 세상 처럼 단절된 커뮤니티가 강화되고 있다는 걸 느끼기 시작했습니다.</p>
<p>우린 인터넷 초창기 때만 해도 사람들이 모든 것을 공유하고 이상적으로 나갈 것이라 착각했습니다. 그렇지만.</p>
<blockquote>
<p>현실 세상처럼 나이와 교육 수준, 취미, 종교, 정치적 신념 등으로 단절된 커뮤니티가 들어서고 &quot;<strong>다양성을 고려하지 않는</strong>&quot; 편향 된 인공지능의 추천 알고리즘 등을 통해 닫힌 결론으로 사람들이 내몰리고 있습니다.</p>
</blockquote>
<p>우린 그 어느 때 보다 열린 세상 속에 살고 있으나 그 어느 때보다 닫힌 세상 속에 살고 있습니다.<br>
우리가 들여다 보는 넓은 세상은 작은 모니터를 통해서 제한적으로만 보고 있으니까요..<br>
<img src="http://blog.hwang.gg/content/images/2019/03/6330962530_c6e5595337_z.jpg" alt="6330962530_c6e5595337_z"></p>
<hr>
<p>그림출처:<br>
<a href="https://commons.wikimedia.org/wiki/File:Jean_Carolus,_Peeping_Tom,_oil_on_panel,_46.5_x_32.5_cm,_private_collection.jpg">https://commons.wikimedia.org/wiki/File:Jean_Carolus,_Peeping_Tom,_oil_on_panel,_46.5_x_32.5_cm,_private_collection.jpg</a><br>
<a href="https://upload.wikimedia.org/wikipedia/commons/7/74/Lady_Godiva_by_John_Collier.jpg">https://upload.wikimedia.org/wikipedia/commons/7/74/Lady_Godiva_by_John_Collier.jpg</a><br>
<a href="https://www.flickr.com/photos/49187729@N02/6330962530">https://www.flickr.com/photos/49187729@N02/6330962530</a><br>
<a href="http://szabolaszloistvan.blogspot.com/2013/03/strategies-for-teaching-older-people.html">http://szabolaszloistvan.blogspot.com/2013/03/strategies-for-teaching-older-people.html</a></p>
]]></content:encoded></item><item><title><![CDATA[JUnit5 - 주요 제약사항 정리]]></title><description><![CDATA[<h3 id="">주요 제약사항</h3>
<h4 id="">테스트, 메서드 공통 제약사항</h4>
<ol>
<li>테스트 클래스, 메서드는 public일 필요는 없고,  private이면 안 된다.<br>
(그럴거면 그냥 public?)</li>
</ol>
<h4 id="">테스트 클래스</h4>
<ol>
<li>테스트 클래스는 추상 클래스가 아니어야 한다.</li>
<li>테스트 클래스는 반드시 하나의 constructor를 갖고 있어야 한다.</li>
<li>테스트 클래스는 하나 이상의 테스트 메서드를 갖고 있어야 한다.</li>
</ol>
<h4 id="">테스트 메서드</h4>
<ol>
<li>테스트 메서드는 추상 메서드가 아니어야</li></ol>]]></description><link>http://blog.hwang.gg/junit5-eonoteisyeon-annotation/</link><guid isPermaLink="false">5c693a9d8365a60001d81ca3</guid><category><![CDATA[test]]></category><category><![CDATA[junit]]></category><category><![CDATA[tdd]]></category><category><![CDATA[junit5]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Mon, 18 Feb 2019 03:12:38 GMT</pubDate><content:encoded><![CDATA[<h3 id="">주요 제약사항</h3>
<h4 id="">테스트, 메서드 공통 제약사항</h4>
<ol>
<li>테스트 클래스, 메서드는 public일 필요는 없고,  private이면 안 된다.<br>
(그럴거면 그냥 public?)</li>
</ol>
<h4 id="">테스트 클래스</h4>
<ol>
<li>테스트 클래스는 추상 클래스가 아니어야 한다.</li>
<li>테스트 클래스는 반드시 하나의 constructor를 갖고 있어야 한다.</li>
<li>테스트 클래스는 하나 이상의 테스트 메서드를 갖고 있어야 한다.</li>
</ol>
<h4 id="">테스트 메서드</h4>
<ol>
<li>테스트 메서드는 추상 메서드가 아니어야 한다.</li>
<li>테스트 메서드는 반드시 리턴 값이 없어야 한다.</li>
</ol>
<h4 id="">기타</h4>
<ol>
<li>파라미터를 이용하는 테스트를 쓰려면 junit-jupiter-params 가 의존성에 추가 되어 있어야 함. (파라미터 기능은 실험적인 기능임.)</li>
</ol>
]]></content:encoded></item><item><title><![CDATA[[교양] 개발자의 그림 읽기: 아테네 학당]]></title><description><![CDATA[개발자의 눈으로 보는 라파엘로의 아테네 학당과 관련된 여러가지 이야기.]]></description><link>http://blog.hwang.gg/20190216/</link><guid isPermaLink="false">5c539d2e8365a60001d819a2</guid><category><![CDATA[예술]]></category><category><![CDATA[라파엘로]]></category><category><![CDATA[르네상스]]></category><category><![CDATA[서양화]]></category><category><![CDATA[개발자]]></category><category><![CDATA[웹개발자]]></category><category><![CDATA[교양]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Fri, 15 Feb 2019 22:24:14 GMT</pubDate><content:encoded><![CDATA[<p>저는 평소에 회화 쪽이 제가 하는 일(주로 웹 개발 전반)이랑 많이 유사하다고 생각해오곤 했습니다.<br>
소프트웨어가 무엇인지 개발자나 비개발자가 소통을 시작하는 가벼운 공통분모를 가질 수 있다면 좋겠습니다.<br>
그러한 취지로 쓴 글이니 독자분들께 예술과 개발의 미묘한 연결고리를 머리 속에 만들어 드린다면 이 글은 대성공일겁니다.</p>
<hr>
<p>저는 르네상스 무렵과 19세기 인상파 화가 일부의 그림들을 좋아 합니다.<br>
이 무렵의 그림들은 다양한 은유나 시도가 돋보이는 작품들이 많기 때문입니다.</p>
<p>오늘은 그 중에서 라파엘로의 걸작 중 하나인 &quot;<strong>아테네 학당</strong>&quot;을 다뤄보겠습니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/02/773px-_The_School_of_Athens__by_Raffaello_Sanzio_da_Urbino.jpg" alt="773px-_The_School_of_Athens__by_Raffaello_Sanzio_da_Urbino"><br>
<a href="https://commons.wikimedia.org/wiki/File:%22The_School_of_Athens%22_by_Raffaello_Sanzio_da_Urbino.jpg">링크</a>로 가서 보시면 그림 속 인물들과 조형물의 의미를 알 수 있습니다.</p>
<p>아테네 학당은 라파엘로가 율리우스 2세 교황에게<br>
의뢰받아 서명의 방이라 불리우는 방에 네가지 테마의 벽화를 그렸습니다.</p>
<blockquote>
<p>인간의 4가지 지식: <strong>신학, 철학, 법학, 시학(예술)</strong></p>
</blockquote>
<p>그 중에서 이번 글에서 다룰 아테네 학당은 철학을 의미합니다.</p>
<hr>
<h4 id="1">개발자의 시선 1. 이스터 에그? + 어쩌면 (소심한) 반항아</h4>
<p>이 시기 유명화가들은 작품 속에 서명 또는 대담하게 본인을 등장 시킵니다.<br>
<strong>라파엘로</strong>는 이 그림 속에서 <strong>유일하게 관객들을 바라보는 시선</strong>으로 그림 속 우측에 등장합니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/02/pic-8-self.jpg" alt="pic-8-self"></p>
<p>그리고 그 바로 옆에 희끗한 수염 가득한 아저씨는 &quot;<strong>조로아스터교</strong>&quot;의 창시자 조로아스터 또는 <strong>자라투스트라</strong>입니다. 뒤통수만 나온 아저씨는 &quot;<strong>천동설</strong>&quot;을 주장한 <strong>프톨레마이오스</strong> 입니다.</p>
<p>이 그림이 후세에 전사 교황 이미지(직접 군을 이끌고 참전도 했다고 합니다.)인 율리우스 2세의 의뢰로 만들어졌단 걸 떠올려보면 상당히 도전적인 행동입니다.</p>
<p>정리하자면 그림 속 세상에서 실제 카톨릭이 싫어할 수 밖에 없는 사람들 틈바구니에서<br>
실제 세상 속 방에 드나드는 카톨릭 신자일 사람들을 보고 있는 인물이 라파엘로 본인입니다.</p>
<p>더해서 그림 속 거의 모든 주요 인물들은 라파엘로의 은인이나 지인들이 모델입니다.<br>
마치 영화나 드라마 같은 매체에서 심심찮게 볼 수 있는 까메오 같은 걸 떠올리게 합니다.<br>
(그림 속에 숨겨진 이야기는 너무 많은 관계로 아래 참고링크에서 하나 씩 챙겨보시길 권장합니다.)</p>
<p>마찬가지로 종종 개발자들은 주석이나 프로그램 상에 다양한 그들만의 농담거리나 이스터에그를 남겨 놓곤 합니다. <a href="http://www.thisisgame.com/webzine/news/nboard/4/?n=87208">구글의 이스터에그</a></p>
<hr>
<h4 id="2">개발자의 시선 2. 트렌드(대상과 기법)의 변화</h4>
<p>르네상스 시대의 그림들은 신을 다루던 전과 달리 인간을 주된 관심사로 옮겨두기 시작하며 서서히 실제 세상과 인간을 표현하는 열망을 다루기 시작했습니다.</p>
<p>예술의 투자는 그전까진 보통 &quot;<strong>종교나 왕족</strong>&quot;이 대상이었기 때문에 &quot;신성함&quot;과 &quot;위엄&quot;을 상징하기 위해서 &quot;<strong>인체 비율</strong>&quot;이 무시되거나 &quot;<strong>원근법</strong>&quot;이 무시되는 식이었습니다.<br>
마치 이집트 시대 벽화를 보면 파라오는 거대하고 노예들은 작게 그려지듯 말이지요.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/02/800px-Sandro_Botticelli_-_The_Virgin_and_Child_-The_Madonna_of_the_Book-_-_Google_Art_Project.jpg" alt="800px-Sandro_Botticelli_-The_Virgin_and_Child-The_Madonna_of_the_Book-_-_Google_Art_Project"></p>
<p>대표적인 예로 대부분의 그림에서 묘사되는 아기예수는 아기임에도 이목구비와 신체 비례가 실제랑은 다릅니다. 팔다리가 더 짧고 얼굴이 더 컸어야 합니다.<br>
잠깐 사담이지만 마리아는 <em>동정녀</em>이기 때문에 <em>가슴</em>이 덜 표현 되었습니다.(정말?!)<br>
당시에는 이렇게 그림 속에서 다양한 의미와 이유를 지식이 있어야 이해 할 수 있었습니다.<br>
마치 영원히 멈춰 있는 TV를 본다고 생각하면 그 TV가 오래 질리지 않는 유일한 방법은 다양한 숨은 메시지가 있어야 했던 겁니다.</p>
<p>르네상스 시대에는 예술에서 표현코자 하던 주요 대상들이 달라지기 시작했습니다.<br>
<strong>상업</strong>이 성장하여 귀족과 상인들이 예술의 주요 후원자가 됩니다.<br>
초상화와 그들의 가치관을 상징하는 그림들을 의뢰하기 시작했습니다.<br>
종교적 색채만 가득한 그림을 집에 벽화나 그림으로 걸어두면 일상 생활이 재미가 없었을 뿐더러, 예수님과 교황님보다 자기가 더 잘났다는 느낌의 그림을 그리면 안 좋은 일이 벌어지기도 했을테니깐요.</p>
<p>아무튼 그 무렵. 인본주의적 사고(휴머니즘) 바탕으로 과학과 기술의 발전은 예술가들로 하여금 그간 찬밥신세로 전해오던 현실적인 묘사를 위한 테크닉에 눈을 돌리게 해줬습니다.<br>
(※ 르네상스 시대의 최대의 업적은 한 마디로 정의하자면 &quot;<strong><a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%AC%B8%EC%A3%BC%EC%9D%98">휴머니즘</a></strong>&quot; 입니다.)</p>
<p>저는 이 시기의 변화가 최근 수 년간 지속되어 온 신앙적인 데이터 관점(DB에 데이터 꽂히면 되는거야)에서 현실적인 사용자 이벤트 관점(재고 100개인데 십만명 동시접속해서 100명한테만 팔고 나머지는 접근 오류 보면 그게 성공적인가?)으로의 전체 패러다임 변화와 유사하다고 여깁니다.</p>
<hr>
<h4 id="3zindex">개발자의 시선 3. 경험 바탕의 관습적 레이아웃 + (레이어와 z-index)</h4>
<p>아테네 학당의 그림은 자세히 보면 오늘날 컴퓨터로 그림을 그리듯 여러개의 계층(layer)으로 화면 배치가 되어 있음을 알 수 있습니다.</p>
<p>만약 이걸 UI 레이아웃으로 최대한 심플하게 풀어서 본다면 <em>좌우</em>로 나누고 <em>최전방, 중앙, 배경</em> 과 같은 레이어로도 나눠서 생각할 수 있을 겁니다. 즉, 2 * 3의 여섯개의 덩어리 공간으로요.</p>
<p>예술작품이나 각종 UI를 평가하는 관객의 눈은 모든게 합쳐진 형태를 바라보지만,<br>
실제로 구상을 하는 예술가나 개발자의 상황에서는 구상 중의 모호한 전체 윤곽을 바탕으로 부분적인 요소들의 세부사항까지 수 차례 고민하고 만들고 바꿔가며 적용해야 합니다.</p>
<p>가끔 뿅하고 나오는 건 우연히 평소 많은 고민을 하던거랑 주어진 상황이 부분적으로라도 딱 하고 맞아 떨어지는 순간이 있을 때 뿐입니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/02/raphael-athens-left-to-right-golden-ratios-1024x794.gif" alt="raphael-athens-left-to-right-golden-ratios-1024x794"></p>
<p>예술에는 전반적으로 황금비라는 비율에 사람들이 집착하는 경향이 있었습니다.</p>
<p>이건 어떤 예술가들이 &quot;신성함&quot;을 깨달아서 그런게 아니라 반복적 작업을 통해 봤더니 대충 이런 비율이 적당히 선호하게 된 것 뿐이지 뭐 엄청난 비밀 같은게 아닐 겁니다.</p>
<p>웹 UI쪽에서의 <em><a href="https://960.gs/">960 grid</a></em> 바탕의 화면 작성 유행도 황금비의 그것과 크게 다르지 않았다고 봅니다.</p>
<hr>
<h4 id="4">개발자의 시선 4. 어디서 많이 본 작업 방식</h4>
<p><img src="http://blog.hwang.gg/content/images/2019/02/raphael_athens_cartoon_lg.jpg" alt="raphael_athens_cartoon_lg"></p>
<p>라파엘로가 당시에 그림을 그리던 시기에는 컴퓨터는 없었을테니 순전히 스케치로 승부했습니다.<br>
그는 다양한 인물들을 작은 스케치로 나눠서 그려보기도 하고 그것들을 합쳐서 다시 그려넣어 보기도 했었습니다.</p>
<p>UI요소가 들어가는 개발도 르네상스 시대의 그러한 방식에서 도구의 변화는 있을지언정 과정은 크게 바뀌지 않았습니다.</p>
<blockquote>
<p>각종 UI를 만들 때도 그러하듯 라파엘로는 다양한 <a href="http://projects.mcah.columbia.edu/raphael/htm/raphael_athens_draw.htm">습작</a>(mock up)을 그리고 작품을 그렸습니다.</p>
</blockquote>
<hr>
<h4 id="">마무리</h4>
<ol>
<li>
<p>그런데 작업 속도가 너무 늦다고 발주처인 교황님께서 클레임 걸고 다른 작업자를 붙여서 같이 진행하도록 했다는 기록이 있는 걸 보면 국내 SI판과 읍읍... (옆동네 미켈란젤로는 같은 고객님께 맞았다.)</p>
</li>
<li>
<p>그 뒷 이야기도 SI판이랑 비슷하지만 읍읍...</p>
</li>
<li>
<p>라파엘로는 요절했다.</p>
</li>
<li>
<p>미켈란젤로랑 라파엘로는 서로 사이가 좋지 않았다고 한다. 미켈란젤로도 그림 속에 있다.</p>
</li>
<li>
<p>철학을 상징하는 아테네 학당 그림 바로 맞은 편에 신학을 상징하는 그림 성체논의가 그려져 있다. (철학과 대비되는 위치의 신학.)</p>
</li>
</ol>
<hr>
<p>출처 및 참고링크:<br>
<a href="http://projects.mcah.columbia.edu/raphael/htm/raphael_athens_draw.htm#">http://projects.mcah.columbia.edu/raphael/htm/raphael_athens_draw.htm#</a><br>
<a href="https://www.khanacademy.org/humanities/ap-art-history/early-europe-and-colonial-americas/renaissance-art-europe-ap/v/raphael-school-of-athens">https://www.khanacademy.org/humanities/ap-art-history/early-europe-and-colonial-americas/renaissance-art-europe-ap/v/raphael-school-of-athens</a><br>
<a href="https://en.wikipedia.org/wiki/Madonna_of_the_Book">https://en.wikipedia.org/wiki/Madonna_of_the_Book</a></p>
]]></content:encoded></item><item><title><![CDATA[왜 Slack(또는 협업도구)을 쓰는데?]]></title><description><![CDATA[1. Slack과 같은 협업도구를 선택해야 하는 이유. 2. 어떤 조직이 Slack같은 협업 도구를 택해야 하는가? 3. 국내 메신저 잔디, 라인 웍스, 플로우등도 고려해 볼만 합니다.]]></description><link>http://blog.hwang.gg/20190210/</link><guid isPermaLink="false">5c5b609b8365a60001d819dd</guid><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Sat, 09 Feb 2019 21:39:37 GMT</pubDate><content:encoded><![CDATA[<h1 id="tldr">TL;DR</h1>
<h2 id=""><strong>진취적인</strong> 비즈니스를 하는 조직이라면,</h2>
<h2 id="slack">잔말 말고 Slack 같은 협업 도구&quot;도&quot; 일단 써보세요.</h2>
<hr>
<p>2년 전에 &quot;<strong>Slack</strong>&quot; 처럼 쓸 수있으나 self hosting이 가능한<br>
&quot;<strong>Mattermost</strong>&quot;를 팀에 소개한 적이 있습니다.</p>
<p>아래와 같은 이유로 팀원들에게 소개했었습니다.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/02/2019-02-07-07_31_34------Internet-Explorer.png" alt="2019-02-07-07_31_34------Internet-Explorer"></p>
<hr>
<h3 id="slack">그래서 Slack은 뭔데?</h3>
<p>간단하게만 말하면 메신저 입니다.<br>
좀 길게 풀어 쓰자면<br>
1.대화방<br>
2.게시판<br>
3.검색수단<br>
4.<strong>만남의 광장</strong><br>
5.조직도<br>
정도 일 겁니다.(세부적으로 들어가면 훨씬 많습니다.)</p>
<p>전통적인 메신저들에도 이미 이와 유사한 기능이 있습니다.<br>
그렇지만 사용자 관점에서 풀어나가는 방식이 많이 다릅니다.</p>
<blockquote>
<p>Slack의 경우 1+2+3+4+5 처럼 <strong>화면에 직관적으로 연결</strong>되어 있다면,<br>
일반 메신저들은 1/3/5 처럼 <strong>별개</strong>로 있다는 느낌이라고 보시면 됩니다.</p>
</blockquote>
<p>위에서 언급했듯 기존의 메신저는 개인마다 인지할 수 있는 범위의 일이 따로 있습니다.<br>
그것들을 <strong>토스</strong> 해가며 덩치를 키우거나 종결 짓는 식이었습니다.</p>
<p>반면에 Slack같은 경우에는 일을 업무 연관자들이 모두 볼 수 있게<br>
공개된 곳에 풀어두는 것이 시작입니다.</p>
<p>일반 메신저들은 1 대 1 대화를 기본으로 하고 있으나,<br>
Slack과 같은 요즘의 협업 도구들은 1 대 다수의 대화를 기본으로 하고 있습니다.</p>
<hr>
<h3 id="">그게 메신저(이메일)랑 무슨 차이가 있는데?</h3>
<p>직장 생활을 하다 보면 제일 싫은 상황 중에 하나가 전달(Forwarding) 되고 회신(Reply)으로 오는 메시지들의 홍수 속에서 &quot;<strong>최신의 정보</strong>&quot;를 &quot;<strong>적절한 시기</strong>&quot;에 &quot;<strong>필요한 사람</strong>&quot; 에게 &quot;<strong>격식 있게</strong>&quot; 보내는 것이 <em>하나의 일</em>이었습니다.<br>
(참고: <a href="http://blog.hwang.gg/20190110/">비즈니스 이메일 쓰는 법</a>)</p>
<p>그런데 대화방스러운 협업 공간에선 자연스레 그런 부분들이 <em>완화되거나 사라집니다</em>.<br>
본질적인 문제 해결에 집중을 하게 됩니다.<br>
오탈자나 부정확한 정보를 보냈다고 반려 먹거나 공격당할 일도 없습니다.<br>
<em>수정하거나 삭제</em>하고 대화방에 말하면 끝입니다.</p>
<p>최상의 시나리오는 연관자인 줄도 몰랐던 사람들 마저 <em>알아서</em><br>
관련된 협의와 작업을 식별하고 척척하게 됩니다.</p>
<hr>
<p>&quot;그건 너무 이상적인 거 아닌가?&quot; 라는 물음이 나올 수 있습니다.<br>
<img src="https://media3.giphy.com/media/3eKdC7REvgOt2/giphy.gif" alt="unacceptable"><br>
맞습니다. 이상적인 방법이고 현실에는 여러가지의 부침이 발생합니다.<br>
특히나 관리자들에겐 통제되고 있지 않아 보이는 느낌은 너무나 불안하게 보일겁니다.</p>
<p>그렇지만 협업이라는 건 <strong>기본적으로 내가 모르는 것에 대한 해법을 찾는 과정</strong>입니다.<br>
<img src="https://media.giphy.com/media/3ohuPjBxG40RYWiw2Q/giphy.gif" alt="patrick"><br>
모르는 것을 직면하고 해결할 때는 해법을 누가 갖고 있을런지는 사실 잘 모릅니다.<br>
여기에 대한 가장 쉬운 방법은 모두에게 묻고 답을 구하는게 제일 빠릅니다.<br>
(만약 특정 주제의 질문이나 혼란이 자주 발생하면 친절한 팀원이<br>
위키나 헤더 메시지를 이용해서 FAQ를 제공하면 됩니다.)</p>
<p>우리가 회사 생활에서 실시간으로 상호 간에 말하는 이유는 극단적으로 줄이면 둘 중 하나 입니다.</p>
<blockquote>
<p><strong>무언가에 대한 허락을 득하거나 모르는 걸 알아내기 위해서</strong></p>
</blockquote>
<p>만약 시스템 장애가 난 상황을 채널에 공유한다면 저마다 다른 포인트로 고민하고 그 와중에 미처 파악 못한 다른 고려사항이 있다는 것이 구성원들에게 공유됩니다.<br>
(이런 부분에서 전통적인 협업환경에 계시는 분들이 껄끄러워 하십니다.)<br>
이 와중에 서버 담당자는 전체 구성원에게 시스템 재기동이 불가피하다고 동의를 구할 수도 있을 겁니다.</p>
<p>이걸 만약 전통적인 방식으로 풀어본다면 실제로 필요한 액션은 금방 끝나는 데,<br>
부서 간 리더들에게 상황 설명하고 허락을 득하는데 귀중한 시간을 낭비하게 됩니다.</p>
<hr>
<h3 id="no">그럼 모두에게 좋은걸까? NO :(</h3>
<p>IT 바닥의 오랜 격언으로 &quot;<strong>은탄환은 없다</strong>&quot;가 있습니다.<br>
아쉽게도 Slack과 같은 협업 도구가 모든걸 대체하는 수단은 아닙니다.</p>
<p>반대로 아래와 같은 조건들이 충족되면 Slack과 같은 협업 메신저가 많은 도움이 됩니다.</p>
<ol>
<li>
<p>젊은 조직이다:<br>
반대로 늙은 조직의 경우에는 협업 도구가 제시하는 개방성에서 오는<br>
과도한 &quot;<strong>정보의 필터링에 능숙하지 않은 세대</strong>들&quot;의 불만의 원인이 됩니다.<br>
(젊은 조직과 늙은 조직의 차이는 연령이 아니라 마음가짐의 차이를 말합니다.)</p>
</li>
<li>
<p>예측 못했던 상황이 자주 발생한다:<br>
반대로 예측가능하고 반복적인 시나리오대로 돌아가는 조직이라면<br>
대화가 거의 없을 것이기에 이메일이나 기존 수단을 고수하는게 효율적일 수 밖에 없습니다.</p>
</li>
<li>
<p>기술이나 역할 범위를 벗어나는 협업이 빈번하게 발생한다:<br>
반대로 동일 스킬을 보유한 중복 인력 구성으로 되어 있는 협업이면<br>
그들이 일을 하는 대상 그 자체에 밀접한 수단에서 직접 대화를 하는게 훨씬 유효합니다.<br>
가령, 개발자끼리는 GitHub을 통한 코드 레벨의 커뮤니케이션 처럼요.</p>
</li>
<li>
<p>물리적으로 떨어진 곳에서 일하는 동료들이 있다: 외국이나 지방일 필요가 없습니다.<br>
시선 닿지 않는 저 너머에 협업하는 동료가 있다면 충분한 이유가 됩니다.</p>
</li>
<li>
<p>자기 조직화 된 조직이다:<br>
반대로 수동적인 사람에게는 지나친 자유는 방황처럼 느끼게 됩니다.<br>
(만약 상명하복의 조직문화면 윗 분 빼고 돌리거나 포기하는게 정신건강에 좋습니다.)</p>
</li>
</ol>
<h4 id="slack">요컨대 Slack같은 협업 도구를 써서 잘 동작되는 조직은 좋은 조직인 겁니다.</h4>
<hr>
<h3 id="">마치며</h3>
<p>Slack과 같은 서비스를 다뤄 본 적이 없으시다면 아래 링크를 참고해서 시작해보셔도 좋습니다.<br>
<a href="https://slack.com">Slack</a> 같은 경우에는 <strong>무료</strong> 플랜이 있고,<br>
<a href="https://mattermost.com/">Mattermost</a>는 오픈소스라 만약 Docker 사용이 가능하다면 손쉽게 자체적으로 호스팅 할 수 있습니다.<br>
물론 국내에도 다양한 좋은 협업도구들이 많습니다.<br>
<a href="https://www.jandi.com/landing/kr">잔디</a>, <a href="https://line.worksmobile.com/kr/">라인 웍스</a>, <a href="https://flow.team/index.act">플로우</a> 등등 각각 장점과 목표로 하는 고객 시장이 다릅니다.<br>
다양한 도구들을 검토해보고 사용해 보세요.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/02/800px-Swiss_army_knife_open_20050612_-cropped-.jpg" alt="800px-Swiss_army_knife_open_20050612_-cropped-"></p>
<p><strong>필요한 도구를 찾고 상황에 따라 바꿀 수 있는 유연한 조직이 되는 것이 Slack 같은 협업 도구를 도입하는 조직이 얻을 수 있는 진정한 장점</strong>일지도 모릅니다.</p>
]]></content:encoded></item><item><title><![CDATA[[삽질] Windows Git 접속정보 초기화]]></title><description><![CDATA[git 리모트 접속정보 잘못 입력해서 Windows에 저장 되었을 때는,
제어판 > 모든 제어판 항목 > 자격 증명 관리자에 찾아가서 지워라]]></description><link>http://blog.hwang.gg/20190131-a/</link><guid isPermaLink="false">5c5252ad8365a60001d81979</guid><category><![CDATA[git]]></category><category><![CDATA[cridential]]></category><category><![CDATA[windows]]></category><category><![CDATA[윈도우]]></category><category><![CDATA[계정]]></category><category><![CDATA[깃]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Thu, 31 Jan 2019 01:48:40 GMT</pubDate><content:encoded><![CDATA[<h3 id="tldr">TL;DR</h3>
<p>git 리모트 접속정보 잘못 입력해서 Windows에 저장 되었을 때는,<br>
제어판 &gt; 모든 제어판 항목 &gt; 자격 증명 관리자에 찾아가서 지워라.</p>
<p><img src="http://blog.hwang.gg/content/images/2019/01/2019-01-31-11_00_34----------.png" alt="2019-01-31-11_00_34----------"><br>
↑ 여기서 제거하면 되는 겁니다. (Windows 자격 증명 탭!)</p>
<hr>
<p>조금 긴 이야기..</p>
<p>회사에서 Windows PC에서 보안팀에서<br>
제공한 툴을 돌렸더니 Git 리모트 레포지터리 접속정보가 다 날아가 버렸습니다.</p>
<p>마침 배포할 일이 있어서 IDE에서 push를 시도했고,<br>
이 와 중에 접속정보를 입력하다가 <em>잘 못</em> 입력하고 저장해 버렸습니다.</p>
<p>그렇게 했더니 IDE에서 push를 할 때 오류가 발생하게 됩니다. 그냥 실패합니다.<br>
접속계정을 변경하는 화면이 뜨는 것이 아니라서요. 그래서 과거라면 한참 헤맸겠지만...!</p>
<p>벌써 두번째라 퀵하게 조치했습니다. 하지만 두 번 있던 일이라면 3,4..n 회 발생 가능한 일이라 이렇게 정리합니다.</p>
<hr>
<p><a href="https://stackoverflow.com/questions/43573790/how-to-remove-git-account-from-local-machine-and-add-new-account">관련링크</a></p>
]]></content:encoded></item><item><title><![CDATA[[blog] Google Analytics]]></title><description><![CDATA[블로그 방문자 정보를 Google Analytics를 이용하여 수집하는 방법]]></description><link>http://blog.hwang.gg/20190131/</link><guid isPermaLink="false">5c522a798365a60001d8194d</guid><category><![CDATA[google analytics]]></category><category><![CDATA[구글]]></category><category><![CDATA[애널리틱스]]></category><category><![CDATA[방문자분석]]></category><category><![CDATA[블로그]]></category><category><![CDATA[blog]]></category><category><![CDATA[ghost]]></category><dc:creator><![CDATA[황건구]]></dc:creator><pubDate>Wed, 30 Jan 2019 23:04:23 GMT</pubDate><content:encoded><![CDATA[<p>블로그를 2019년 들어서 본격적으로 시작하면서 제 글이 과연 제대로 읽히는 지 궁금해지기 시작했습니다.</p>
<p>하지만 현재 블로그를 운영하는 Ghost에서는 딱히 그러한 정보를 제공해 주지 않는 관계로 구글에서 제공해주는 구글 애널리틱스를 사이트에 적용해 보기로 했습니다.</p>
<h3 id="tldr">TL;DR</h3>
<ol>
<li>
<p><a href="https://analytics.google.com">https://analytics.google.com</a> 가서 구글 계정으로 로그인 하고 시작</p>
</li>
<li>
<p>계정 쪽을 선택하여 내용을 추가해주면 됩니다. ↓<br>
<img src="http://blog.hwang.gg/content/images/2019/01/2019-01-31-07_55_06---------Chrome.png" alt="2019-01-31-07_55_06---------Chrome"></p>
</li>
<li>
<p>순서대로 내용을 채워주시고 본인의 홈페이지 주소를 넣어 주세요. 마지막에 추적 ID 가져오기를 눌러주시면 ↓<br>
<img src="http://blog.hwang.gg/content/images/2019/01/2019-01-31-07_58_59---------Chrome.png" alt="2019-01-31-07_58_59---------Chrome"></p>
</li>
<li>
<p>이런 형태의 창이 뜹니다. 약관은 대한민국으로 검색해서 내용 확인을 하시고 진행하시면 됩니다. ↓<br>
<img src="http://blog.hwang.gg/content/images/2019/01/2019-01-31-08_00_28---------Chrome.png" alt="2019-01-31-08_00_28---------Chrome"></p>
</li>
<li>
<p>이제 구글에서 제공해주는 추적 코드를 복사하셔서 블로그에 적용해 보겠습니다. ↓<br