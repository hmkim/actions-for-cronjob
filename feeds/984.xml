<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>junegunn.kr</title>
  <link href="http://summerhere.kr/"/>
  <link type="application/atom+xml" rel="self" href="http://junegunn.kr/atom.xml"/>
  <updated>2018-01-06T02:24:00+09:00</updated>
  <id>https://junegunn.kr</id>
  <author>
    <name>Junegunn Choi</name>
    <email>junegunn.c@gmail.com</email>
  </author>

  
  <entry>
    <id>https://junegunn.kr/2017/09/fzf-0.17.0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2017/09/fzf-0.17.0"/>
    <title>fzf 0.17.0</title>
    <published>2017-09-07T00:00:00+09:00</published>
    <updated>2017-09-07T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;fzf 0.17.0 is out, yet again with more performance improvement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-0.17.0.png&quot; alt=&quot;fzf 0.17.0 performance&quot;&gt;&lt;/p&gt;

&lt;p&gt;Another interesting news is that fzf can now run inside GVim using the new
builtin terminal emulator of Vim. No need to open xterm or iTerm2 window
anymore.&lt;/p&gt;

&lt;p&gt;To enable this terminal integration, you have to download the latest version
of GVim or build it from source, for example, for Macvim with Homebrew:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;brew update
brew reinstall macvim --HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re like me, you will not like the default ANSI colors of the builtin
terminal. So I suggest that you set up &lt;code&gt;g:fzf_colors&lt;/code&gt; so that the Vim plugin
of fzf can pick colors from your color scheme.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; Customize fzf colors to match your color scheme&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:fzf_colors &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
\ { &lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;:      [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;bg&amp;#39;&lt;/span&gt;:      [&lt;span class=&quot;s1&quot;&gt;&amp;#39;bg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;hl&amp;#39;&lt;/span&gt;:      [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Comment&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;fg+&amp;#39;&lt;/span&gt;:     [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CursorLine&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CursorColumn&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;bg+&amp;#39;&lt;/span&gt;:     [&lt;span class=&quot;s1&quot;&gt;&amp;#39;bg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CursorLine&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CursorColumn&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;hl+&amp;#39;&lt;/span&gt;:     [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Statement&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;:    [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;PreProc&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;border&amp;#39;&lt;/span&gt;:  [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Ignore&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;prompt&amp;#39;&lt;/span&gt;:  [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Conditional&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;pointer&amp;#39;&lt;/span&gt;: [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Exception&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;marker&amp;#39;&lt;/span&gt;:  [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Keyword&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;spinner&amp;#39;&lt;/span&gt;: [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Label&amp;#39;&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;header&amp;#39;&lt;/span&gt;:  [&lt;span class=&quot;s1&quot;&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Comment&amp;#39;&lt;/span&gt;] }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s how it looks, with &lt;a href=&quot;http://github.com/junegunn/seoul256.vim&quot;&gt;seoul256&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/macvim-seoul256.png&quot; alt=&quot;fzf in macvim (seoul256)&quot;&gt;&lt;/p&gt;

&lt;p&gt;And with &lt;a href=&quot;http://github.com/junegunn/seoul256.vim&quot;&gt;seoul256-light&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/macvim-seoul256-light.png&quot; alt=&quot;fzf in macvim (seoul256-light)&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Please note that the builtin terminal emulator of Vim is still unstable and
you may run into some issues. Feel free to let me know of your experiences.&lt;/p&gt;

&lt;p&gt;You can see the full list of changes in 0.17.0 (and 0.17.0-2) &lt;a href=&quot;https://github.com/junegunn/fzf/blob/master/CHANGELOG.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2017/08/fzf-0.16.11</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2017/08/fzf-0.16.11"/>
    <title>fzf 0.16.11</title>
    <published>2017-08-03T00:00:00+09:00</published>
    <updated>2017-08-03T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;It&amp;#39;s been less than two weeks since the last release of fzf, but I decided to
release a new version anyway because it&amp;#39;s great. The new version delivers
significantly improved search performance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-0.16.11.png&quot; alt=&quot;fzf 0.16.11 performance&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can easily see the improvement in the above figure. Each time shown in the
graph includes the time spent scanning and loading the input data in memory
(which fzf can&amp;#39;t avoid as it has to provide interactive query interface),
which means if we remove that common denominator, the reduction of search time
will appear much greater.&lt;/p&gt;

&lt;p&gt;But don&amp;#39;t get too excited; it&amp;#39;s just the result of a single benchmark and your
mileage may vary. You may not see such dramatic improvement if your query has
low selectivity (i.e. matches most of the items), or when you use fzf with
Unicode strings. But since most users of fzf use fzf for file paths and shell
command history that are mostly ASCII, I believe this is meaningful progress.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf#upgrading-fzf&quot;&gt;https://github.com/junegunn/fzf#upgrading-fzf&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2017/07/fzf-0.16.10</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2017/07/fzf-0.16.10"/>
    <title>fzf 0.16.10</title>
    <published>2017-07-22T00:00:00+09:00</published>
    <updated>2017-07-22T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;A new version of fzf is out. It&amp;#39;s a minor update with no new feature, but
&lt;em&gt;&amp;quot;this is the best fzf ever&amp;quot;&lt;/em&gt;. This version improves the initial scanning
performance with reduced memory footprint.&lt;/p&gt;

&lt;p&gt;So &lt;a href=&quot;https://github.com/junegunn/fzf#upgrading-fzf&quot;&gt;check it out&lt;/a&gt; if you
haven&amp;#39;t updated for a while.&lt;/p&gt;

&lt;p&gt;The figure below shows how fzf performs with varying number of input lines
(lower is better).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-0.16.10.png&quot; alt=&quot;fzf 0.16.10 performance&quot;&gt;&lt;/p&gt;

&lt;p&gt;I initially wrote fzf in Ruby but I rewrote it in Go in 0.9.0. And as you can
see above, it delivered significant performance improvement. And now the
latest version of fzf can be twice as faster than the first fzf written in Go.&lt;/p&gt;

&lt;p&gt;You might have noticed the performance regression between 0.13.5 and 0.15.9 in
the above figure. That&amp;#39;s because of the new search algorithm introduced in
0.15.0. The new algorithm, a variant of Smith-Waterman algorithm, requires
more computation, but it is guaranteed to find the matching substring with the
best score. Details can be found &lt;a href=&quot;https://github.com/junegunn/fzf/issues/638&quot;&gt;here&lt;/a&gt;. So the comparison is really not
fair. But after all, the new version outperforms all its predecessors.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2017/01/fzf-height</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2017/01/fzf-height"/>
    <title>fzf without ncurses</title>
    <published>2017-01-16T00:00:00+09:00</published>
    <updated>2017-01-16T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;A short announcement. The latest version of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; learned &lt;code&gt;--height&lt;/code&gt; option
which makes fzf display the finder right below the cursor without occupying
the full screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/700826/21546093/db47a20a-ce1f-11e6-92b1-bed3710dd616.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;fzf was initially written as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Ncurses&quot;&gt;ncurses&lt;/a&gt; application which has to
run in full screen mode. However, this is often undesirable as it completely
hides the context of your workflow. The workaround suggested so far was to use
&lt;a href=&quot;https://github.com/junegunn/fzf#fzf-tmux-script&quot;&gt;fzf-tmux script&lt;/a&gt;, which opens fzf in a tmux split pane. The script
works pretty well and it&amp;#39;s flexible, but there are a few problems, such as, 1.
it requires you to be on tmux, 2. it inadvertendly un-zooms a zoomed pane
which can be quite annoying.&lt;/p&gt;

&lt;p&gt;The new renderer for &lt;code&gt;--height&lt;/code&gt; option does not use ncurses but directly
manipulates ANSI escape codes to display the finder. An incidental benefit of
not depending on ncurses is that we&amp;#39;re not constrained by the limitations of
it, so this renderer can display 24-bit colors.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Solarized theme&lt;/span&gt;
fzf --color &lt;span class=&quot;s1&quot;&gt;&amp;#39;fg:#839496,fg+:#93a1a1,bg:#002b36,bg+:#073642&amp;#39;&lt;/span&gt; --height &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--height&lt;/code&gt; option is now applied by default to the shell extensions provided
by the repository (&lt;a href=&quot;https://github.com/junegunn/fzf#key-bindings-for-command-line&quot;&gt;key bindings&lt;/a&gt;, &lt;a href=&quot;https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh&quot;&gt;fuzzy completion&lt;/a&gt;). If you
don&amp;#39;t like it or have problems with it, you can switch it off by adding
&lt;code&gt;--no-height&lt;/code&gt; to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;, &lt;code&gt;$FZF_CTRL_T_OPTS&lt;/code&gt;, etc., or you
can choose to use fzf-tmux instead as before by setting &lt;code&gt;$FZF_TMUX&lt;/code&gt; to 1.&lt;/p&gt;

&lt;p&gt;I paid great attention so that the new renderer is performant and stable, but
inevitably, there will be bugs. So please update fzf and see how it works for
you, and let me know of any issues you run into.&lt;/p&gt;

&lt;p&gt;A little late, but happy 2017.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2016/07/fzf-git</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2016/07/fzf-git"/>
    <title>Key bindings for git with fzf</title>
    <published>2016-07-17T00:00:00+09:00</published>
    <updated>2016-07-17T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;The latest version of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; has &lt;code&gt;--preview&lt;/code&gt; option which allows you to
preview the content of the highlighted entry on a split window inside fzf
finder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-preview.png&quot; alt=&quot;--preview&quot;&gt;&lt;/p&gt;

&lt;p&gt;This was a huge step for fzf. The feature was requested several times in the
past, but I was always concerned that it would hurt the simplicity of fzf and
dismissed the idea, but in the end I conceded, and now I have to say that
I like it pretty much.&lt;/p&gt;

&lt;p&gt;One of the places I find &lt;code&gt;--preview&lt;/code&gt; option extremely useful is the bash key
bindings I have for git commands. With its numerous subcommands and options,
git can be quite daunting even for the experienced. There is sophisticated,
context-aware &lt;a href=&quot;https://github.com/git/git/tree/master/contrib/completion&quot;&gt;completion support&lt;/a&gt; for git command, but
I find it lacking in a few aspects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;Context-awareness&amp;quot; of it definitely helps, but in some cases it can be
limiting. For example, for &lt;code&gt;git checkout&lt;/code&gt; it lists branches and tags, but
I sometimes need to check out a specific commit via its commit hash (a.k.a.
detached head state).&lt;/li&gt;
&lt;li&gt;We can&amp;#39;t tell if a completion candidate is a tag, or a branch. We don&amp;#39;t
&lt;em&gt;see&lt;/em&gt; the details of each entry, just the names.&lt;/li&gt;
&lt;li&gt;Even if the completion for &lt;code&gt;git checkout&lt;/code&gt; is extended to present commit
hashes as the candidates, it will be hardly useful as we have no way to know
what each hash represents.&lt;/li&gt;
&lt;li&gt;It only works with git command, you can&amp;#39;t use it in different contexts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, I wrote explicit key bindings for each type of git object;
commit hashes, branches, tags, remotes, and the files that are modified or
untracked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-F&lt;/kbd&gt; for files&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-B&lt;/kbd&gt; for branches&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-T&lt;/kbd&gt; for tags&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-R&lt;/kbd&gt; for remotes&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-H&lt;/kbd&gt; for commit hashes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are implemented on fzf, so we have nice interactive finder that enables
fast fuzzy search over the list. And with the new &lt;code&gt;--preview&lt;/code&gt; option of fzf,
we not only see the list of the objects, but also the details of each entry.&lt;/p&gt;

&lt;p&gt;The simplest example is &lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-T&lt;/kbd&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Will return non-zero status if the current directory is not managed by git&lt;/span&gt;
is_in_git_repo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  git rev-parse HEAD &amp;gt; /dev/null &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

gt&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &amp;quot;Nothing to see here, move along&amp;quot;&lt;/span&gt;
  is_in_git_repo &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Pass the list of the tags to fzf-tmux&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - &amp;quot;{}&amp;quot; in preview option is the placeholder for the highlighted entry&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - Preview window can display ANSI colors, so we enable --color=always&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# - We can terminate `git show` once we have $LINES lines&lt;/span&gt;
  git tag --sort -version:refname &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    fzf-tmux --multi --preview-window right:70% &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             --preview &lt;span class=&quot;s1&quot;&gt;&amp;#39;git show --color=always {} | head -&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LINES&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we bind it to a key.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;\er&amp;quot;: redraw-current-line&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;\C-g\C-t&amp;quot;: &amp;quot;$(gt)\e\C-e\er&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A couple things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\e\C-e&lt;/code&gt; is the default key binding for &lt;code&gt;shell-expand-line&lt;/code&gt;. Using
&lt;code&gt;shell-expand-line&lt;/code&gt; is not ideal as it expands aliases as well, but it&amp;#39;s
the easiest way to do it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redraw-current-line&lt;/code&gt; is required to clear up the prompt when you&amp;#39;re not on
tmux. If you&amp;#39;re always on tmux, you can omit the part.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On zsh, &lt;code&gt;gt&lt;/code&gt; function works without any change, but we should use &lt;code&gt;bindkey&lt;/code&gt;
instead of &lt;code&gt;bind&lt;/code&gt; and define a widget for each key binding.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# A helper function to join multi-line output from fzf&lt;/span&gt;
join-lines&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; item
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; item&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(q)item&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

fzf-gt-widget&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LBUFFER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;gt &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; join-lines&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
zle -N fzf-gt-widget
bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;^g^t&amp;#39;&lt;/span&gt; fzf-gt-widget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if you press &lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-T&lt;/kbd&gt; on a git repository you
can select multiple tags in fzf and they will be pasted on the command-line
prompt as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-git-gt.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;You can find the code for the rest &lt;a href=&quot;https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236&quot;&gt;here&lt;/a&gt;. My current favorites are
&lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-F&lt;/kbd&gt; and &lt;kbd&gt;CTRL-G&lt;/kbd&gt;&lt;kbd&gt;CTRL-H&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-git-gf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fzf-git-gh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2016/02/using-fzf-in-your-program</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2016/02/using-fzf-in-your-program"/>
    <title>Using fzf in your program</title>
    <published>2016-02-10T00:00:00+09:00</published>
    <updated>2016-02-10T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is written in &lt;a href=&quot;https://golang.org/&quot;&gt;Golang&lt;/a&gt; and distributed as an executable binary
instead of as a library you can link to your Go program. Some might see this
as a limitation, it is, but you can still use fzf for interactive filtering in
different programming languages, just like you use it in bash or zsh.&lt;/p&gt;

&lt;p&gt;In this post, I will demonstrate how it can be done in a few programming
languages that I use regularly.&lt;/p&gt;

&lt;h3&gt;Ruby&lt;/h3&gt;

&lt;p&gt;We write &lt;code&gt;with_filter&lt;/code&gt; function that takes fzf command as the first argument
and a block which produces the input to the command, and returns the selected
entries as an array.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close_write&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;with_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fzf -m&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;005&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function is generic in the sense you can use it with any other external
interactive/non-interactive filters, e.g. &lt;code&gt;fzf-tmux&lt;/code&gt; or &lt;code&gt;grep 123&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Clojure&lt;/h3&gt;

&lt;p&gt;We do the same with Clojure. The code here is a bit more involved, but it will
give you a hint on how it can be done in other JVM languages.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clojure.java.io&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;import &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;java.lang.ProcessBuilder$Redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmacro &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with-filter&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sh#&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;System/getenv&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SHELL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;pb#&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProcessBuilder.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sh#&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.redirectError&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProcessBuilder$Redirect/to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/dev/tty&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;p#&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.start&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pb#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;in#&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getInputStream&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;out#&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/writer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getOutputStream&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;binding &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*out*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.close&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take-while identity &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.readLine&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with-filter&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fzf -m&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dotimes &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Thread/sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might have noticed the reference to &lt;code&gt;/dev/tty&lt;/code&gt; which makes the code not
portable across different platforms. However, fzf only works on Unix
environment, so this is a non-issue, at least for now.&lt;/p&gt;

&lt;h3&gt;Golang&lt;/h3&gt;

&lt;p&gt;This Go example isn&amp;#39;t as elegant as the previous ones as there&amp;#39;s no
&lt;em&gt;&amp;quot;automagic&amp;quot;&lt;/em&gt; stdout redirection for the goroutine that feeds the input, so we
have to use &lt;code&gt;fmt.Fprintln&lt;/code&gt; instead of &lt;code&gt;fmt.Println&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;os/exec&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WriteCloser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SHELL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Stderr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Stderr&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StdinPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fzf -m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WriteCloser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fprintln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;p&gt;That&amp;#39;s all for now. I&amp;#39;d be happy to hear about more examples in different
languages that are not listed here.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/11/hbase-region-inspector</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/11/hbase-region-inspector"/>
    <title>Announcing hbase-region-inspector</title>
    <published>2015-11-29T00:00:00+09:00</published>
    <updated>2015-11-29T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/kakao/hbase-region-inspector&quot;&gt;https://github.com/kakao/hbase-region-inspector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I suppose most of the readers of this blog know me for my Vim plugins. But
unsurprisingly, my job title is neither &amp;quot;Vim Plugin Developer&amp;quot; nor &amp;quot;Vim
Evangelist&amp;quot;, and no, I do not make a living writing Vim plugins.&lt;/p&gt;

&lt;p&gt;For the last few years I have been a part of the team responsible for the
research and operation of non-relational database systems and we&amp;#39;re currently
focusing on &lt;a href=&quot;https://hbase.apache.org/&quot;&gt;HBase&lt;/a&gt;, which is the most used one in our shop.&lt;/p&gt;

&lt;p&gt;During the time we&amp;#39;ve developed a wide variety of in-house tools that greatly
help running HBase clusters smoothly in production, and very recently we decided to
start open-sourcing the ones that are not tightly bound to our intricate
running environment.&lt;/p&gt;

&lt;p&gt;As a part of the plan, a little monitoring tool I wrote with such a lackluster
name, &amp;quot;hbase-region-inspector&amp;quot;, is now &lt;a href=&quot;https://github.com/kakao/hbase-region-inspector&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kakao/hbase-region-inspector&quot;&gt;hbase-region-inspector&lt;/a&gt; starts a web server that shows how the regions
are distributed across region servers like follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kakao/hbase-region-inspector/raw/master/screenshot/hbase-region-inspector.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;So why do we need this? A &lt;em&gt;&amp;quot;region&amp;quot;&lt;/em&gt; is a unit of data partitioning in HBase,
and it&amp;#39;s crucial for the health of a HBase cluster that we have a balanced
distribution of the regions across the region servers. We also have to make
sure that the partitioning scheme we employed - in other words, rowkey design
- is working as expected and the cluster has no apparent &amp;quot;hotspot regions&amp;quot;
which can severely limit the performance of the entire cluster. Each region
server provides a web page that shows some basic statistics of the regions it
serves, but there was no way to see the whole picture which is especially
problematic if you have many number of region servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kakao/hbase-region-inspector&quot;&gt;hbase-region-inspector&lt;/a&gt; might remind you of &lt;a href=&quot;https://github.com/sentric/hannibal&quot;&gt;Hannibal&lt;/a&gt; if you&amp;#39;re
already familiar with it. But unlike the predecessor, this new tool not only
shows the size of each region, but also visualizes the cumulative number of
requests, reads and writes per second, number of storefiles, size of memstore,
and data block locality (on HBase 1.0 or above), which are all essential
information. As a bonus, you can even move regions around with the simple
drag-and-drop interface.&lt;/p&gt;

&lt;p&gt;The project is written in &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; and distributed as
&lt;a href=&quot;https://github.com/kakao/hbase-region-inspector/releases&quot;&gt;executable binaries&lt;/a&gt; built with the handy &lt;a href=&quot;https://github.com/Raynes/lein-bin&quot;&gt;lein-bin&lt;/a&gt; plugin. So given
that you have JRE set up on your machine, you can simply start it like
follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;./hbase-region-inspector ZOOKEEPER_QUORUM HTTP_PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And most likely that&amp;#39;s all you need to know about it. Now you can grasp the
status of your HBase cluster at a glance.&lt;/p&gt;

&lt;p&gt;If you work with HBase, please try it and &lt;a href=&quot;https://github.com/kakao/hbase-region-inspector/issues&quot;&gt;let me know&lt;/a&gt; what you think
about it. I&amp;#39;m absolutely confident that you&amp;#39;ll like it. Any suggestions are
deeply appreciated!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/05/fuzzy-completion-for-zsh</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/05/fuzzy-completion-for-zsh"/>
    <title>Fuzzy completion for zsh</title>
    <published>2015-05-09T00:00:00+09:00</published>
    <updated>2015-05-09T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;I just added &lt;a href=&quot;https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh&quot;&gt;fuzzy completion support&lt;/a&gt; for zsh to &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. I&amp;#39;m
basically a bash user and don&amp;#39;t know much about zsh, so I&amp;#39;m expecting to see
some bug reports. If you happen to use zsh and fzf, please try it and &lt;a href=&quot;https://github.com/junegunn/fzf/issues/new&quot;&gt;let me
know&lt;/a&gt; of any issues you run into. Thanks!&lt;/p&gt;

&lt;p&gt;EDIT: By the way, make sure to rerun the install script so that &lt;code&gt;~/.fzf.zsh&lt;/code&gt;
is recreated with fuzzy-completion support.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/700826/7550146/a5e599da-f691-11e4-85a5-02e14c2f1b44.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/04/browsing-chrome-bookmarks-with-fzf</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/04/browsing-chrome-bookmarks-with-fzf"/>
    <title>Browsing Chrome bookmarks with fzf</title>
    <published>2015-04-07T00:00:00+09:00</published>
    <updated>2015-04-07T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;In &lt;a href=&quot;http://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/&quot;&gt;the last post&lt;/a&gt;, we looked at how we can integrate Chrome browsing
history stored in &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; database with &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. In this post,
we&amp;#39;ll do it for bookmarks.&lt;/p&gt;

&lt;h2&gt;Chrome bookmarks in JSON format&lt;/h2&gt;

&lt;p&gt;Unlike browsing history, Chrome bookmarks are found in JSON format. It&amp;#39;s
stored in the same directory as the SQLite database file, and for OS X, the
file is &lt;code&gt;~/Library/Application Support/Google/Chrome/Default/Bookmarks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Chrome bookmarks can be organized in folders, so naturally the JSON
representation of the bookmarks also has the corresponding recursive,
hierarchical structure. If it was flat and simpler, we could have considered
using &lt;a href=&quot;http://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;, a handy command-line JSON processor, for processing the data
but this case is a little beyond the scope of the tool&amp;#39;s capability and we
would have to resort to a scripting language with proper JSON support.&lt;/p&gt;

&lt;p&gt;I chose Ruby, one that I&amp;#39;m most familiar with, for processing the JSON data
and formatting it as the input to fzf. I&amp;#39;m not going to delve into the details
of the implementation. It&amp;#39;s just a basic JSON processing that can be written
in any language and there&amp;#39;s not much going on. Only that I took special care
for &lt;a href=&quot;http://en.wikipedia.org/wiki/CJK_characters&quot;&gt;CJK wide characters&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;fzf integration&lt;/h2&gt;

&lt;p&gt;The complete script can be found here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/junegunn/15859538658e449b886f&quot;&gt;https://gist.github.com/junegunn/15859538658e449b886f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What&amp;#39;s the most interesting about the script is that it starts as a bash
script, but turns into a Ruby script. The reason the code is organized so is
that I did not want to maintain two files, a Ruby script for processing JSON
and a bash script for gluing it with fzf. Instead I used this special &lt;code&gt;-x&lt;/code&gt;
option of &lt;code&gt;ruby&lt;/code&gt; command, which makes the interpreter ignore the lines in the
file until &lt;code&gt;#!ruby&lt;/code&gt; appears, so I can safely prepend the bash script to the
file.&lt;/p&gt;

&lt;p&gt;A few more things to mention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The script is for OS X and it will simply exit when you&amp;#39;re not on OS X.
It will also try to install fzf using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; when it&amp;#39;s not found.
(&lt;a href=&quot;https://gist.github.com/junegunn/15859538658e449b886f#file-b-rb-L5-L6&quot;&gt;#5-6&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Notice the &lt;code&gt;vim: set filetype=ruby:&lt;/code&gt; on the second line. It makes Vim
see the file as a Ruby script even though it starts with the shebang line
for bash. (&lt;a href=&quot;https://gist.github.com/junegunn/15859538658e449b886f#file-b-rb-L1-L2&quot;&gt;#1-2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The use of &lt;code&gt;/usr/bin/ruby&lt;/code&gt; is intentional. Most Ruby developers switch
between various Rubies using &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; or &lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;rbenv&lt;/a&gt; and you do not
want to accidentally start heavyweight &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt; for this and the
system default Ruby is good enough for our purpose. (&lt;a href=&quot;https://gist.github.com/junegunn/15859538658e449b886f#file-b-rb-L8&quot;&gt;#8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;I used &lt;a href=&quot;http://junegunn.kr/2015/03/fzf-tmux/&quot;&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script&lt;/a&gt; with &lt;code&gt;-u 30%&lt;/code&gt; option to open fzf in a new
tmux pane above the current pane. I like the layout as it remotely reminds
me of the original bookmark bar of Chrome. (&lt;a href=&quot;https://gist.github.com/junegunn/15859538658e449b886f#file-b-rb-L9&quot;&gt;#9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;There&amp;#39;s an explicit &lt;code&gt;exit&lt;/code&gt; to prevent bash from interpreting the Ruby
section of the file. (&lt;a href=&quot;https://gist.github.com/junegunn/15859538658e449b886f#file-b-rb-L13&quot;&gt;#13&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/04/browsing-chrome-history-with-fzf"/>
    <title>Browsing Chrome history with fzf</title>
    <published>2015-04-06T00:00:00+09:00</published>
    <updated>2015-04-06T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;This is yet another post on &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, a command-line fuzzy finder. Recently
I&amp;#39;ve been trying to integrate fzf with everything I can think of, and this
time, it&amp;#39;s the browsing history of Google Chrome.&lt;/p&gt;

&lt;h2&gt;Chrome database&lt;/h2&gt;

&lt;p&gt;So how do we access the browsing history? Turns out that Chrome stores the
information in its &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; database file locally stored on your disk
drive. The location of the file &lt;a href=&quot;http://stackoverflow.com/questions/8936878/where-does-chrome-save-its-sqlite-database-to&quot;&gt;depends on your operating system&lt;/a&gt;. As of
now, it&amp;#39;s&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/Library/Application Support/Google/Chrome&lt;/code&gt; on OS X and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.config/google-chrome/Default/databases&lt;/code&gt; on Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the following, we&amp;#39;ll assume OS X, but you shouldn&amp;#39;t have any difficulty
applying the same strategy on Linux.&lt;/p&gt;

&lt;p&gt;Anyway, now we know the location of the database, we can access the
information with &amp;quot;sqlite3&amp;quot; command. However, if you&amp;#39;re running Chrome at the
moment, the database file is locked by the process and you&amp;#39;ll see &lt;code&gt;Error:
database is locked&lt;/code&gt; message. An easy workaround is to simply make a copy of
the file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;cp -f ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Google/Chrome/Default/History /tmp/h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s examine the database. First we see the list of the tables in it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;sqlite3 /tmp/h .tables
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;  downloads             meta                  urls
  downloads_url_chains  segment_usage         visit_source
  keyword_search_terms  segments              visits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, looks like &lt;code&gt;urls&lt;/code&gt; is the table we&amp;#39;re looking for. Now we check the
schema of the table with &lt;code&gt;.schema&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;sqlite3 /tmp/h &lt;span class=&quot;s1&quot;&gt;&amp;#39;.schema urls&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;              &lt;span class=&quot;nb&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;LONGVARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;LONGVARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visit_count&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typed_count&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_visit_time&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;          &lt;span class=&quot;nb&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;favicon_id&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls_url_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I reformatted the output so that it&amp;#39;s easier to read. The names of
the columns are very straightforward, and we&amp;#39;re ready to run some SQLs.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;sqlite3 /tmp/h &lt;span class=&quot;s1&quot;&gt;&amp;#39;select title, url from urls order by last_visit_time desc&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Formatting&lt;/h2&gt;

&lt;p&gt;You&amp;#39;ll notice that two fields in each line of the output are delimited by a
&lt;code&gt;|&lt;/code&gt; character.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;  Issues · junegunn/fzf|https://github.com/junegunn/fzf/issues
  junegunn/fzf|https://github.com/junegunn/fzf
  junegunn.kr|http://junegunn.kr/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the default format. However, the delimiter is not good enough as the
character is often found in titles and URLs and SQLite does not do any
escaping.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;sqlite3 /tmp/h &lt;span class=&quot;s2&quot;&gt;&amp;quot;select &amp;#39;|&amp;#39;, &amp;#39;|&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;  |||
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid possible conflicts, we&amp;#39;re going to change the delimiter with
&lt;code&gt;-separator&lt;/code&gt; option. Let&amp;#39;s pick some obscure string that&amp;#39;ll probably never
appear in the text. Also, as our screen estate is limited, we&amp;#39;ll going to
truncate the title field using &lt;code&gt;substr()&lt;/code&gt; function of SQLite.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;sqlite3 -separator &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; /tmp/h &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;select substr(title, 1, &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; COLUMNS &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;), url&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   from urls order by last_visit_time desc&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of hard-coding the width, we used &lt;code&gt;$COLUMNS&lt;/code&gt; whose value is
automatically set to the width of the terminal.&lt;/p&gt;

&lt;p&gt;Since we now know the maximum length of the first field, we can use &lt;code&gt;printf&lt;/code&gt;
of &lt;code&gt;awk&lt;/code&gt; command to align the fields.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; COLUMNS &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
sqlite3 -separator &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt; /tmp/h &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;select substr(title, 1, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cols&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;), url&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   from urls order by last_visit_time desc&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
awk -F &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{printf &amp;quot;%-&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cols&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s  %s\n&amp;quot;, $1, $2}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;  Issues · junegunn/fzf  https://github.com/junegunn/fzf/issues
  junegunn/fzf           https://github.com/junegunn/fzf
  junegunn.kr            http://junegunn.kr/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much better. Let&amp;#39;s further decorate the output with colors. We put ANSI escape
code for cyan foreground color before the second URL field.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Print URLs in cyan color (36)&lt;/span&gt;
awk -F &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{printf &amp;quot;%-&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cols&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s  \x1b[36m%s\x1b[m\n&amp;quot;, $1, $2}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Finally time for fzf integration. We feed what we&amp;#39;ve prepared into fzf for
interactive filtering. Since the input has ANSI escape codes, we need to pass
&lt;code&gt;--ansi&lt;/code&gt; option to fzf so that it correctly interprets the codes. Also, we
pass &lt;code&gt;--multi&lt;/code&gt; option so that the user can select multiple entries with TAB or
shift-TAB key and open them at once. Once fzf is completed with the
selections, we strip the title part with &lt;code&gt;sed&lt;/code&gt; command (strip everything
before &amp;quot;http&amp;quot;), and use &lt;code&gt;open&lt;/code&gt; command of OS X to open the selected URLs with
the default browser.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# c - browse chrome history&lt;/span&gt;
c&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; cols sep
  &lt;span class=&quot;nv&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; COLUMNS &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{::}&amp;#39;&lt;/span&gt;

  cp -f ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Google/Chrome/Default/History /tmp/h

  sqlite3 -separator &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt; /tmp/h &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;select substr(title, 1, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cols&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;), url&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;     from urls order by last_visit_time desc&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  awk -F &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{printf &amp;quot;%-&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cols&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s  \x1b[36m%s\x1b[m\n&amp;quot;, $1, $2}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  fzf --ansi --multi &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s#.*\(https*://\)#\1#&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs open
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can just type in &lt;code&gt;c&lt;/code&gt; from terminal to browse the entire Chrome history,
fuzzy-search for links, and open them in the default browser. Quite handy.&lt;/p&gt;

&lt;p&gt;Although the code shown here is for Chrome on OS X, it won&amp;#39;t be difficult to
adapt it for FireFox which also has its own SQLite database, and for Linux,
by replacing &lt;code&gt;open&lt;/code&gt; with something like &lt;code&gt;xdg-open&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/03/browsing-git-commits-with-fzf</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/03/browsing-git-commits-with-fzf"/>
    <title>Browsing git commits with fzf</title>
    <published>2015-03-25T00:00:00+09:00</published>
    <updated>2015-03-25T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;The latest version of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; can now process ANSI color codes and show
colored text in the finder. With this new &lt;code&gt;--ansi&lt;/code&gt; option, we can build a
decent git commit browser as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/700826/6801581/6265b4ae-d26c-11e4-87de-5421a1be8f31.gif&quot; alt=&quot;screencast&quot;&gt;&lt;/p&gt;

&lt;p&gt;The code is given as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# fshow - git commit browser&lt;/span&gt;
fshow&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; out sha q
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
      git log --graph --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%C(auto)%h%d %s %C(black)%C(bold)%cr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
      fzf --ansi --multi --no-sort --reverse --query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; --print-query&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head -1 &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; sha&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      git show --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nv&quot;&gt;$sha&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; less -R
    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1d;s/^[^a-z0-9]*//;/^$/d&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s the description of the options used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ansi&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;A new option in &lt;a href=&quot;https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#095&quot;&gt;0.9.5&lt;/a&gt;. Enables processing of ANSI color codes.
fzf will filter out the codes when the choice is made, so no extra
processing is needed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--multi&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to select multiple items with TAB or Shift-TAB. Did you know
fzf support mouse input? Shift-click or shift-scroll can also be used.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-sort&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;fzf by default sorts the match result. But in this case, chronological
order is important, so we just disabled the ranking algorithm.&lt;/li&gt;
&lt;li&gt;But it makes it harder to find the &amp;quot;best&amp;quot; match for a query. For that
reason, it is advised that you apply &lt;code&gt;--extended&lt;/code&gt; or &lt;code&gt;--extended-exact&lt;/code&gt;
option as well (or add one to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;) for more
accurate filtering. See &lt;a href=&quot;https://github.com/junegunn/fzf#extended-search-mode&quot;&gt;here&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--reverse&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Top-to-bottom layout. Just a preference thing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--query=QUERY&lt;/code&gt; and &lt;code&gt;--print-query&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;--print-query&lt;/code&gt; option fzf will print the user query as the first
line of its output. We take this line (&lt;code&gt;head -1&lt;/code&gt;) so we can restart
fzf process with the same query.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that&amp;#39;s it. You can upgrade fzf &lt;a href=&quot;https://github.com/junegunn/fzf#upgrading-fzf&quot;&gt;as usual&lt;/a&gt; or just download the new
binary &lt;a href=&quot;https://github.com/junegunn/fzf-bin/releases&quot;&gt;from here&lt;/a&gt;. (Note that Homebrew formula for 0.9.5 is not ready
yet.) Please try it and &lt;a href=&quot;https://github.com/junegunn/fzf/issues&quot;&gt;report any issues&lt;/a&gt; you run into. Thanks!&lt;/p&gt;

&lt;h2&gt;Update: To &amp;quot;show&amp;quot; or to &amp;quot;diff&amp;quot;&lt;/h2&gt;

&lt;p&gt;fzf 0.9.6 was just released with &lt;a href=&quot;https://github.com/junegunn/fzf/issues/163&quot;&gt;&lt;code&gt;--expect&lt;/code&gt; option&lt;/a&gt;. We can use it to
implement basic key bindings inside fzf. I&amp;#39;ll demonstrate how we can update
the original &lt;code&gt;fshow&lt;/code&gt; function to show the diff between the commits when
&lt;code&gt;CTRL-D&lt;/code&gt; is pressed on fzf. So here&amp;#39;s the updated version:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# fshow - git commit browser (enter for show, ctrl-d for diff)&lt;/span&gt;
fshow&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; out shas sha q k
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
      git log --graph --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%C(auto)%h%d %s %C(black)%C(bold)%cr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
      fzf --ansi --multi --no-sort --reverse --query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --print-query --expect&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ctrl-d&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head -1 &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head -2 &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tail -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;shas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1,2d;s/^[^a-z0-9]*//;/^$/d&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$shas&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ctrl-d &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      git diff --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nv&quot;&gt;$shas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; less -R
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; sha in &lt;span class=&quot;nv&quot;&gt;$shas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        git show --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nv&quot;&gt;$sha&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; less -R
      &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What&amp;#39;s new is the use of &lt;code&gt;--expect=ctrl-d&lt;/code&gt; option. It makes fzf &lt;em&gt;&amp;quot;expect&amp;quot;&lt;/em&gt;
&lt;code&gt;CTRL-D&lt;/code&gt;, and you can press the key instead of the default enter key to select
the item(s) and complete fzf. When the option is applied, fzf will print the
name of the key pressed, and we can use the information (&lt;code&gt;&amp;quot;$k&amp;quot; = &amp;#39;ctrl-d&amp;#39;&lt;/code&gt;) to
decide what to do next with the rest of the output, in this case, to &lt;code&gt;git
show&lt;/code&gt;, or to &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One thing I noticed after publishing this post is that &lt;code&gt;git show&lt;/code&gt; command
takes an arbitrary number of commit hashes. So the inner loop is not
necessary, but I didn&amp;#39;t remove it as I prefer to see &lt;code&gt;git show&lt;/code&gt; output for
each commit instead of one merged output.&lt;/p&gt;

&lt;h2&gt;Another update: Enabling sort&lt;/h2&gt;

&lt;p&gt;One thing leads to another. After playing with &lt;code&gt;fshow&lt;/code&gt; for a while, I realized
that &lt;code&gt;--no-sort&lt;/code&gt; makes it really hard to quickly get to the right commit when
the repository has long commit history. Extended-search mode (&lt;code&gt;--extended&lt;/code&gt;) I
mentioned above does help a little, but it&amp;#39;s just not good enough in many
cases. Leveraging the code written for &lt;code&gt;--expect&lt;/code&gt; option, I added
&lt;code&gt;--toggle-sort&lt;/code&gt; option to &lt;a href=&quot;https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#097&quot;&gt;fzf 0.9.7&lt;/a&gt;. The option takes the name of a
key, so you can bind any key of your liking for toggling sort.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s the &amp;quot;final&amp;quot; version where I use backtick for the purpose. Notice
that the backtick character had to be escaped with a backslash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# fshow - git commit browser (enter for show, ctrl-d for diff, ` toggles sort)&lt;/span&gt;
fshow&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; out shas sha q k
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
      git log --graph --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%C(auto)%h%d %s %C(black)%C(bold)%cr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
      fzf --ansi --multi --no-sort --reverse --query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --print-query --expect&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ctrl-d --toggle-sort&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head -1 &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head -2 &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tail -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;shas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1,2d;s/^[^a-z0-9]*//;/^$/d&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$shas&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ctrl-d &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      git diff --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nv&quot;&gt;$shas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; less -R
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; sha in &lt;span class=&quot;nv&quot;&gt;$shas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        git show --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nv&quot;&gt;$sha&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; less -R
      &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Yet another update: Using &lt;code&gt;--execute&lt;/code&gt; option&lt;/h2&gt;

&lt;p&gt;A limitation of using an external while loop is that the new fzf process
does not retain the position of the cursor. fzf 0.10.0 introduced &lt;code&gt;--execute&lt;/code&gt;
option which allows you to start an external program without leaving fzf,
which is useful for previewing things before making the final selection.&lt;/p&gt;

&lt;p&gt;The following version uses the new option and never leaves the initial fzf
process, which addresses the limitation described above and greatly simplifies
the script.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# fshow - git commit browser&lt;/span&gt;
fshow&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  git log --graph --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%C(auto)%h%d %s %C(black)%C(bold)%cr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  fzf --ansi --no-sort --reverse --tiebreak&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;index --bind&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ctrl-s:toggle-sort &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --bind &lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl-m:execute:&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                (grep -o &amp;#39;[a-f0-9]\{7\}&amp;#39; | head -1 |&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                xargs -I % sh -c &amp;#39;git show --color=always % | less -R&amp;#39;) &amp;lt;&amp;lt; &amp;#39;FZF-EOF&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                {}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;FZF-EOF&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I posted the snippet to the &lt;a href=&quot;https://gist.github.com/junegunn/f4fca918e937e6bf5bad&quot;&gt;Gist&lt;/a&gt; so you can see the changes between
the versions &lt;a href=&quot;https://gist.github.com/junegunn/f4fca918e937e6bf5bad/revisions&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/03/fzf-tmux</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/03/fzf-tmux"/>
    <title>fzf-tmux: script to open fzf in a tmux pane</title>
    <published>2015-03-08T00:00:00+09:00</published>
    <updated>2015-03-08T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;(In case you don&amp;#39;t know what &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is: fzf is a command-line fuzzy finder
that works as a grep-like Unix filter. &lt;a href=&quot;https://camo.githubusercontent.com/0b07def9e05309281212369b118fcf9b9fc7948e/68747470733a2f2f7261772e6769746875622e636f6d2f6a756e6567756e6e2f692f6d61737465722f667a662e676966&quot;&gt;This screencast&lt;/a&gt; will give you
the idea of how it can be used)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is an ncurses program so it starts in fullscreen mode, but it&amp;#39;s not
always desirable. One can use tmux split panes to make fzf take only a small
portion of the screen estate &lt;a href=&quot;https://junegunn.kr/2014/04/fzf+vim+tmux/&quot;&gt;and I really like the idea&lt;/a&gt;, but doing so
has required some cumbersome scripting so far.&lt;/p&gt;

&lt;p&gt;So I wrote this &lt;a href=&quot;https://github.com/junegunn/fzf/blob/master/bin/fzf-tmux&quot;&gt;fzf-tmux&lt;/a&gt; script and added to the repository.
&lt;a href=&quot;https://github.com/junegunn/fzf/blob/master/bin/fzf-tmux&quot;&gt;fzf-tmux&lt;/a&gt; a small wrapper script for fzf and it works just like
fzf, except that it launches the finder in a new tmux pane.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# usage: fzf-tmux [-u|-d [HEIGHT[%]]] [-l|-r [WIDTH[%]]] [--] [FZF OPTIONS]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# -[udlr] for up/down/left/right&lt;/span&gt;

find ~ &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf-tmux -r &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A good example would be to use it for checking out Git branches. A typical Git
repository does not have many number of branches, so fzf taking up the entire
screen is not ideal. Using &lt;code&gt;fzf-tmux -d 15&lt;/code&gt; can improve the situation. (&lt;code&gt;d&lt;/code&gt; is
for &lt;em&gt;down&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# fbr - checkout git branch&lt;/span&gt;
fbr&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; branches branch
  &lt;span class=&quot;nv&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git branch&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$branches&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf-tmux -d &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; +m&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  git checkout &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/.* //&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fbr.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;(When you&amp;#39;re not on tmux, &lt;code&gt;fzf-tmux&lt;/code&gt; will silently ignore &lt;code&gt;-[udlr]&lt;/code&gt; options
and simply fall back to the default behavior, so you can invariably use it in
your scripts.)&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve always thought that the obligatory fullscreen mode of fzf was its major
drawback. But now with this fzf-tmux script, it&amp;#39;s trivial to start fzf either
in a split pane of any size on any position (up, down, left, right), and it
does not leave incidental artifacts on your terminal unlike the other similar
tools such as &lt;a href=&quot;https://github.com/garybernhardt/selecta&quot;&gt;selecta&lt;/a&gt;. So I&amp;#39;m starting to feel that fzf not trying
to control the layout by itself and delegating the responsibility to a better
suited tool, in this case tmux, better follows &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;the Unix philosophy&lt;/a&gt;.
(&amp;quot;Do one thing well!&amp;quot;)&lt;/p&gt;

&lt;p&gt;Anyway, the script is now on &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf repository&lt;/a&gt;, and you can get it by a
git-pull. I also recommend rerunning the install script as fzf 0.9.4 has &lt;a href=&quot;https://junegunn.kr/2015/03/fzf-0.9.4/&quot;&gt;a
backward incompatible change&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.fzf &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you&amp;#39;re like me and manage fzf using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; like follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;Plug &lt;span class=&quot;s1&quot;&gt;&amp;#39;junegunn/fzf&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; { &lt;span class=&quot;s1&quot;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&amp;#39;yes \| ./install&amp;#39;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a simple &lt;code&gt;:PlugUpdate fzf&lt;/code&gt; will do.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll probably release a new version on Homebrew as well. Please try it and
&lt;a href=&quot;https://github.com/junegunn/fzf/issues&quot;&gt;let me know&lt;/a&gt; of any issues you run into. Thanks.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/03/fzf-0.9.4</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/03/fzf-0.9.4"/>
    <title>What's changed in fzf 0.9.4</title>
    <published>2015-03-05T00:00:00+09:00</published>
    <updated>2015-03-05T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;I recently released a new version of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, 0.9.4. There&amp;#39;s usually not
much to talk about these minor updates, but this time, there&amp;#39;s a backward
incompatible change, and I want to explain the implications of it and the
reasoning behind the decision.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In short: &lt;code&gt;--no-sort&lt;/code&gt; option will not reverse the order of the items
displayed inside the finder.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Why?&lt;/h3&gt;

&lt;p&gt;The reason I came up with &lt;code&gt;--no-sort&lt;/code&gt; (or &lt;code&gt;+s&lt;/code&gt;) option in the first place was
to use fzf with command history. In that context, more recent commands should
have higher priority than the older ones, so fzf should not sort the result
using its own ranking algorithm. (This also holds true when &lt;a href=&quot;https://github.com/junegunn/fzf/wiki/Examples#z&quot;&gt;integrating fzf
with tools&lt;/a&gt; that have their own sort criteria. A notable example is
&lt;a href=&quot;https://github.com/rupa/z&quot;&gt;z&lt;/a&gt;.) And since fzf by default prefers the items that came earlier, I
needed a way to reverse the order of how they appear inside the finder, but
&lt;code&gt;tac&lt;/code&gt; (or &lt;code&gt;tail -r&lt;/code&gt; on OS X) would block until the input stream is complete
and lead to suboptimal user experiences. Without enough consideration, I
decided to make fzf do just that when &lt;code&gt;--no-sort&lt;/code&gt; is given, so I could just
write:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf +s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it has become obvious that it was not a good idea. 1. Not sorting the
result, and 2. reversing the display order are two orthogonal concerns that
should have been handled independently. Doing both using one option flag made
fzf less flexible in different scenarios and made users confused.&lt;/p&gt;

&lt;h3&gt;So?&lt;/h3&gt;

&lt;p&gt;Although I really hate breaking backward compatibility, I decided to make it
right before it&amp;#39;s too late (like, when fzf hits 1.0?). So from 0.9.4,
&lt;code&gt;--no-sort&lt;/code&gt; will not reverse the display order, and simply do what it&amp;#39;s
supposed to do: not sorting the result.&lt;/p&gt;

&lt;p&gt;The limitation of additional &lt;code&gt;tac&lt;/code&gt; in the command pipeline as described above
still applies, so I added &lt;code&gt;--tac&lt;/code&gt; option to 0.9.4. You can use it as a
non-blocking alternative to &lt;code&gt;tac&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if you&amp;#39;ve been using scripts like follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf +s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you probably should add &lt;code&gt;--tac&lt;/code&gt; option to fzf.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf +s --tac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you might have guessed, this particular piece of code constitutes the
implementation of &lt;a href=&quot;https://github.com/junegunn/fzf#key-bindings-for-command-line&quot;&gt;the supplied &lt;code&gt;CTRL-R&lt;/code&gt; key binding&lt;/a&gt;. The code was
updated accordingly, and you&amp;#39;ll be fine once you rerun the install script
which updates &lt;code&gt;~/.fzf.{bash,zsh}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;--tac +s&lt;/code&gt; is not equivalent to the overloaded &lt;code&gt;+s&lt;/code&gt; of the
previous version. &lt;code&gt;--tac&lt;/code&gt; will actually reverse the order of the items as if
&lt;code&gt;tac&lt;/code&gt; was applied before fzf, while the latter just affected how they were
displayed inside the finder.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;seq &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf -f &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; --tac
  &lt;span class=&quot;c1&quot;&gt;# 10&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 9&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 8&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sorry for any confusion that this change might cause, but I&amp;#39;m sure that it
makes fzf more flexible and understandable. I hope you enjoy the new version.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2015/02/fzf-in-go</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2015/02/fzf-in-go"/>
    <title>fzf rewritten in go</title>
    <published>2015-02-08T00:00:00+09:00</published>
    <updated>2015-02-08T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;h2&gt;fzf rewritten in go&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/700826/5725028/028ea834-9b93-11e4-9198-43088c3f295d.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Just a quick, and a little overdue announcement: &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, a command-line
fuzzy finder which used to be a Ruby script, was completely rewritten in Go.&lt;/p&gt;

&lt;p&gt;You can see the motivations behind the decision &lt;a href=&quot;https://github.com/junegunn/fzf/blob/master/src/README.md&quot;&gt;here&lt;/a&gt;. I still love
Ruby and I have mixed feelings about Go that I will not choose Go over Ruby
unless I really have to, but anyway I&amp;#39;m really satisfied with the result. If
you already have installed &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, I highly recommend that you upgrade it.
Just git-pull the repository and rerun the install script. Or if you just need
the binary, you can download one from &lt;a href=&quot;https://github.com/junegunn/fzf-bin/releases/tag/0.9.2&quot;&gt;here&lt;/a&gt;. The biggest improvement
is in its performance. With this new Go version, you&amp;#39;ll likely have no problem
processing a list over a million lines. Now I use &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; to scan through
the list of all the files on my computer as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;locate / &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; fzf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is pretty useful. I even set up &lt;a href=&quot;https://github.com/junegunn/dotfiles/blob/c24a34/tmux.conf#L121&quot;&gt;a tmux hot key&lt;/a&gt; for it.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re still not sure what &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; can do for you. Check out some videos
on it on YouTube by &lt;a href=&quot;https://www.youtube.com/user/gotbletu&quot;&gt;gotbletu&lt;/a&gt;. He gives great examples on how you
can use &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; to improve your everyday workflow. Recommended.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD&quot;&gt;Fuzzy Finder - Curses-based Finder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/11/rainbow-parentheses</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/11/rainbow-parentheses"/>
    <title>rainbow_parentheses.vim</title>
    <published>2014-11-17T00:00:00+09:00</published>
    <updated>2014-11-17T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve been &lt;a href=&quot;https://github.com/junegunn/mini-file-server&quot;&gt;toying around with Clojure lately&lt;/a&gt;. As a newcommer to Lisp, I
was baffled by those countless closing parentheses. Although I&amp;#39;m starting to
getting used to them, I still find it extremely helpful to be able to
differentiate the matching pairs by colors.&lt;/p&gt;

&lt;p&gt;There are already a number of Vim plugins that does that, and the most popular
choice seems to be &lt;a href=&quot;https://github.com/kien/rainbow_parentheses.vim&quot;&gt;rainbow_parentheses.vim&lt;/a&gt; by &lt;a href=&quot;https://github.com/kien&quot;&gt;kien&lt;/a&gt;. However, it
hasn&amp;#39;t been updated for more than a year, and I found it to be a bit too
unintuitive to set up correctly especially when I want to enable the plugin
on-demand with &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I decided to fork the plugin and ended up rewriting almost every line of
the code, you can find it &lt;a href=&quot;https://github.com/junegunn/rainbow_parentheses.vim&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The benefits are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It only has a single command that can&amp;#39;t be more obvious. You simply don&amp;#39;t
have to learn anything to use it. It&amp;#39;s a no-brainer.&lt;/li&gt;
&lt;li&gt;It automatically adjusts itself whenever the color scheme is changed.&lt;/li&gt;
&lt;li&gt;It uses the colors from the current color scheme, so the result should look
pretty nice, or at least okay-ish, on most schemes without any
configuration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/junegunn/seoul256.vim&quot;&gt;seoul256&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/rainbow-seoul256.png&quot; alt=&quot;seoul256&quot;&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/junegunn/seoul256.vim&quot;&gt;seoul256-light&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/rainbow-seoul256-light.png&quot; alt=&quot;seoul256-light&quot;&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/chriskempson/vim-tomorrow-theme&quot;&gt;Tomorrow&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/rainbow-tomorrow.png&quot; alt=&quot;Tomorrow&quot;&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/chriskempson/vim-tomorrow-theme&quot;&gt;Tomorrow-Night&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/rainbow-tomorrow-night.png&quot; alt=&quot;Tomorrow-Night&quot;&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/tomasr/molokai&quot;&gt;molokai&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/rainbow-molokai.png&quot; alt=&quot;molokai&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/10/creating-portable-vim-environment</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/10/creating-portable-vim-environment"/>
    <title>Creating portable Vim environment</title>
    <published>2014-10-22T00:00:00+09:00</published>
    <updated>2014-10-22T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;As you might have guessed, I use a heavily customized Vim. My .vimrc as of now
contains over 1,400 lines of custom mappings, settings, functions and commands
that were accumulated over the years. I also have 46 plugins installed, some
of which tremendously boost my editing performance. And sure, I&amp;#39;m proud of this delicately crafted environment of mine.&lt;/p&gt;

&lt;p&gt;However, the obvious side-effect is that I&amp;#39;ve become very dependent upon this
particular environment and my productivity plummets on vanilla Vim without my
favorite plugins and key bindings. And that&amp;#39;s why I have &lt;a href=&quot;https://github.com/junegunn/dotfiles&quot;&gt;dotfiles repository
on GitHub&lt;/a&gt; so I can download it from any machine. Unfortunately, having my
.vimrc on GitHub turned out to be not enough at all.&lt;/p&gt;

&lt;p&gt;At work, I log on to several service accounts on dozens of servers that are
shared among other developers. The main problem is that those servers do not
have direct access to internet, making it impossible to download my Vim
configuration and plugins from GitHub without setting up a proxy server. Even
worse is that some of those servers are running very old versions of Linux
distribution and do not even have Git installed.&lt;/p&gt;

&lt;p&gt;So in order to set up my Vim usual environment on such a server I have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set up an HTTP proxy so I can access GitHub&lt;/li&gt;
&lt;li&gt;Download, compile, and install Git&lt;/li&gt;
&lt;li&gt;Backup current Vim configuration as I&amp;#39;m logged on to a shared account&lt;/li&gt;
&lt;li&gt;Download .vimrc from dotfiles repository&lt;/li&gt;
&lt;li&gt;Install plugins for GitHub. With 46 plugins, this takes considerable amount
of time. Parallel installer of &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; does not help, since those
servers usually do not have Vim with Ruby support, not to mention Neovim.&lt;/li&gt;
&lt;li&gt;Finally, &lt;em&gt;do the real work&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;I don&amp;#39;t want to impose my personal preferences on others. So I remove my
.vimrc and .vim, and restore the previous configuration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;#39;s obviously not the best way to do my job. There must be/should be a
better way. I want to set up my Vim environment without GitHub, without Git,
and without having to wait while plugins are being downloaded, and the
environment should be temporary and cleaned up automatically when I exit Vim.&lt;/p&gt;

&lt;p&gt;With these requirements, I wrote a small script called &lt;a href=&quot;https://github.com/junegunn/myvim&quot;&gt;myvim&lt;/a&gt;.
&lt;a href=&quot;https://github.com/junegunn/myvim&quot;&gt;myvim&lt;/a&gt; is a small bash script that creates a tarball of the snapshot of
your Vim environment and attaches it to an executable bash script that
temporarily swaps &lt;code&gt;~/.vim&lt;/code&gt; directory while running Vim with the attached
environment.&lt;/p&gt;

&lt;p&gt;To use it, you may download &lt;a href=&quot;https://raw.githubusercontent.com/junegunn/myvim/master/myvim&quot;&gt;the script&lt;/a&gt; and run it, or simply execute it
via curl as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;bash &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl -L https://raw.githubusercontent.com/junegunn/myvim/master/myvim&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command will generate an executable named &lt;code&gt;vim.$(whoami)&lt;/code&gt; that contains
your .vimrc and .vim directory. Now you have a portable bundle of your Vim
environment you can easily bring around. Put it on an FTP server or on a Web
server which all your servers have access to. Setting up your Vim environment
reduces to a one-liner like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Download myvim bundle from FTP&lt;/span&gt;
ftp -n ftp.mycorp.com &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;user jg\nget ~/vim.jg&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x vim.jg

&lt;span class=&quot;c1&quot;&gt;# Start your Vim&lt;/span&gt;
./vim.jg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, there are a couple of issues that arise due to the temporary swap of
&lt;code&gt;~/.vim&lt;/code&gt; directory:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The other Vim processes running at the moment on the same account can be
affected as well&lt;/li&gt;
&lt;li&gt;If you abort the process, the script will not able to clean up the
environment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It would be ideal if we could avoid swapping the directory, but most Vim
configurations in the wild are not written in a portable way and directly
refer to the directory, so there was no other way. But I&amp;#39;d love to hear about
better approaches.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s been only a few days since I started using &lt;a href=&quot;https://github.com/junegunn/myvim&quot;&gt;myvim&lt;/a&gt;, but this simple
script has worked great for me. Try it and let me know what you think about
it.&lt;/p&gt;

&lt;h2&gt;Updates (January 2015)&lt;/h2&gt;

&lt;p&gt;Swapping &lt;code&gt;~/.vim&lt;/code&gt; directory has caused some headaches as expected. So I came
up with an idea to simply swap &lt;code&gt;$HOME&lt;/code&gt; variable instead by injecting some code
to the vimrc, and it has turned out to work well without any known side
effects.&lt;/p&gt;

&lt;p&gt;The new version also takes &lt;code&gt;--edit&lt;/code&gt; option, which allows you to prepend some
environment variables to be applied and to edit the list of files to be
archived.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/09/on-the-front-page-of-hacker-news</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/09/on-the-front-page-of-hacker-news"/>
    <title>On the front page of Hacker News</title>
    <published>2014-09-21T00:00:00+09:00</published>
    <updated>2014-09-21T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, my own Vim plugin manager, was featured on the front page of
&lt;a href=&quot;https://news.ycombinator.com/item?id=8312392&quot;&gt;Hacker News&lt;/a&gt; a week ago and has garnered almost 600 GitHub stars since
then. The traffic graph of the repository on GitHub shows the stark difference
between the numbers of visitors before, during, and after the event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vim-plug-hn-traffic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can see that the buzz had faded away pretty quickly. However, it&amp;#39;s still
getting 3 or 4 times more visitors per day than before the exposure.&lt;/p&gt;

&lt;p&gt;I once stated that &lt;a href=&quot;/2013/09/writing-my-own-vim-plugin-manager/&quot;&gt;I designed vim-plug just for myself&lt;/a&gt; and didn&amp;#39;t
expect it to get popular nor did I want it to be. But over time,
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; has grown into something that&amp;#39;s much more than what I&amp;#39;d first
imagined in every aspect and now I&amp;#39;m very confident that it provides numerous
benefits over the other plugin managers and can be considered to be a real
alternative. So if you haven&amp;#39;t checked it out yet, you should. Yes, it&amp;#39;s good.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;Project home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/08/90+-squares</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/08/90+-squares"/>
    <title>90+ squares</title>
    <published>2014-08-24T00:00:00+09:00</published>
    <updated>2014-08-24T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Inspired by &lt;a href=&quot;http://www.troika.uk.com/work/90-squares/&quot;&gt;90 Squares by Trokia&lt;/a&gt;.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2014/08/90+-squares#play&quot;&gt;90+-squares&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/07/vim-plugins-and-startup-time</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/07/vim-plugins-and-startup-time"/>
    <title>Vim plugins and startup time</title>
    <published>2014-07-21T00:00:00+09:00</published>
    <updated>2014-07-21T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Have you noticed lately that your Vim doesn&amp;#39;t start as quickly as it used to
be? If so, that&amp;#39;s probably because you have installed a bunch of plugins over
time. A typical Vim plugin shouldn&amp;#39;t take longer than a few milliseconds to
load (there are a few exceptions, most notably, NERDtree) but they can add up
to make a noticeable difference as these days, it&amp;#39;s not uncommon to see a Vim
user equipped with a several dozens of plugins.&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s see how plugins affect the startup time of Vim. Since we have a few
options for how we load plugins, I&amp;#39;m going to measure the startup times of
four Vim configurations that only differ in the choice of their plugin
managers, in addition to the one that does not use any plugins.
&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;, &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;, &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt;, and &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; are the
plugin managers used.&lt;/p&gt;

&lt;p&gt;The configurations are based on my own Vim configuration at the time of the
writing. It has over 1,200 lines of Vimscript and loads 37 plugins. The result
is given as follows. Each number shown is the average of 100 measurements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vim-startup-time-all.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;We can definitely see that having plugins do make a clearly observable
difference in the startup time of Vim. However, you may argue that the
difference is practically negligible considering the fact that modern IDEs
easily take tens of seconds to load. It&amp;#39;s a perfectly valid point especially
if you prefer to keep your Vim up all the time. But if your workflow involves
many short-lived Vim sessions, you will frequently notice the delay, and it
can be quite annoying. (Or not. We all have different levels of tolerance.)&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a closer look at the result. It shows that the choice of the plugin
manager also affects the startup time. Unsurprisingly, Vim with &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;
was the fastest to start: 235ms. &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; is the simplest of the four,
and requires only one function call while other plugin managers require at
least 37 commands for declaring the use of plugins. So I would&amp;#39;ve been very
surprised if it took longer than the alternatives. Vim with &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; took
252ms to start, which is 7.2% longer than the case with &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;.
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; was slightly faster and took 243ms. &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt;, which has
the broadest set of features, exhibited 21% overhead compared to
&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; and required 284ms.&lt;/p&gt;

&lt;p&gt;But wait, that&amp;#39;s not the whole story. &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; and &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; both
have the ability to defer loading of plugins until they are actually used. The
concept is called lazy loading or on-demand loading. Think about it. How many
plugins do you use regularly? You&amp;#39;ll notice that many of the plugins you have
in your arsenal aren&amp;#39;t actually used during the lifetime of a typical Vim
process, and it makes perfect sense to load them only when you actually need
them. On-demand loading (or lazy loading) also has the benefit of keeping your
Vim session clean.&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s try it. The following chart also shows the result with on-demand
loading applied.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vim-startup-time.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;By not loading plugins that are not immediately needed, &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; and
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; both managed to reduce the startup times by around 107ms.
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; now takes only 135ms to start.&lt;/p&gt;

&lt;p&gt;You may not understand all these efforts and obsession over a miniscule amount
of time, but seriously, I really love it when my Vim feels snappy.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Update:&lt;/p&gt;

&lt;p&gt;To see the latest result, check out &lt;a href=&quot;https://github.com/junegunn/vim-startuptime-benchmark&quot;&gt;vim-startuptime-benchmark&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/06/emoji-completion-in-vim</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/06/emoji-completion-in-vim"/>
    <title>Emoji completion in Vim</title>
    <published>2014-06-29T00:00:00+09:00</published>
    <updated>2014-06-29T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;This is a short article for Vim users on OSX.&lt;/p&gt;

&lt;h2&gt;Beer :beer:&lt;/h2&gt;

&lt;p&gt;Did you know it was possible to display Unicode &lt;a href=&quot;http://en.wikipedia.org/wiki/Emoji&quot;&gt;Emoji&lt;/a&gt; characters on
OSX terminal? I first realized that looking at the output of Homebrew command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/beer.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;:see&lt;em&gt;no&lt;/em&gt;evil:
:hear&lt;em&gt;no&lt;/em&gt;evil:
:speak&lt;em&gt;no&lt;/em&gt;evil:&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;https://github.com/junegunn/vim-emoji&quot;&gt;vim-emoji&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I was immediately stoked and went straight on to writing a small Vim plugin
called &lt;a href=&quot;https://github.com/junegunn/vim-emoji&quot;&gt;vim-emoji&lt;/a&gt; for accessing Emoji characters with their names,
and since then have used it to decorate my Vim screen. The plugin is extremely
minimal that it provides only two functions, &lt;code&gt;emoji#for(name)&lt;/code&gt; for returning
the Emoji character with the given name, and &lt;code&gt;emoji#list()&lt;/code&gt; for getting the
full list of names of available characters.&lt;/p&gt;

&lt;h2&gt;Emoji auto-completion&lt;/h2&gt;

&lt;p&gt;One of the things we can do with these functions is to build Emoji
auto-completion in Vim. GitHub and many other markdown renderers on Web
display an Emoji character when its name surrounded by colons (e.g.
&lt;span&gt;:&lt;/span&gt;apple:) is found in the document. So whenever I was writing a
Markdown document for those pages I found myself having to look for the name
of the Emoji I had in my mind from &lt;a href=&quot;http://www.emoji-cheat-sheet.com/&quot;&gt;emoji-cheat-sheet.com&lt;/a&gt;. So came the
idea of Emoji auto-completion, which is now a part of &lt;a href=&quot;https://github.com/junegunn/vim-emoji&quot;&gt;vim-emoji&lt;/a&gt;.
See how it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/junegunn/i/master/emoji-complete.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Setting it up is a no-brainer.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completefunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;emoji#&lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the above line to your .vimrc, then you&amp;#39;ll be able to use Emoji completion
with &lt;code&gt;CTRL-X CTRL-U&lt;/code&gt;. (e.g. &lt;code&gt;:app&amp;lt;CTRL-X&amp;gt;&amp;lt;CTRL-U&amp;gt;&lt;/code&gt; to find &lt;span&gt;:&lt;/span&gt;apple:)&lt;/p&gt;

&lt;p&gt;But you may not need it unless you&amp;#39;re editing a Markdown file, so let&amp;#39;s enable
the completion locally on markdown &lt;code&gt;FileType&lt;/code&gt; event.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;augroup emoji_complete
  autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; markdown &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completefunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;emoji#&lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy! :tada:&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;It was the first time of me implementing a custom auto-completion for Vim, so
I think I&amp;#39;m going to share a bit about my experience. The process was pretty
straightforward and &lt;code&gt;:help complete-functions&lt;/code&gt; was the only reference I needed
for getting it done.&lt;/p&gt;

&lt;p&gt;All we have to do to implement a custom completion is to write a single
function which should run in two phases each step differentiated by the first
argument passed to it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; EmojiComplete&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart
&lt;span class=&quot;c&quot;&gt;    &amp;quot; Phase 1 - returns the column number to start auto-completion&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot; Phase 2 - returns the list of candidates&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Phase 1&lt;/h3&gt;

&lt;p&gt;In the first phase, we need to determine if it&amp;#39;s possible to auto-complete the
word just before the cursor. We check if the prefix ends with the pattern we&amp;#39;re
looking for (e.g. &lt;code&gt;:app&lt;/code&gt;), and return the position of the matched part, so
that Vim can then substitute the part with auto-completion candidates.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; EmojiComplete&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;getline&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;[&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:[^: \t]*$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot; Phase 2 - returns the list of candidates&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how does this work? Vim expects the function to return the column number
where the completion should start, or when no completion can be done, a
negative integer between -1 and -3. Luckily, &lt;code&gt;match()&lt;/code&gt; can be used here
without any additional processing since it returns -1 on no match, and
zero-based index if match is found, which effectively tells Vim to start
completion from just before the found pattern.&lt;/p&gt;

&lt;h3&gt;Phase 2&lt;/h3&gt;

&lt;p&gt;After the function returns a non-negative integer, Vim subsequently calls it
with the first argument set to 0. In this second phase, the function should
return the list of the candidates for the given prefix, &lt;code&gt;a:base&lt;/code&gt;. This is
trivial as we have the list of Emoji names, &lt;code&gt;emoji#list()&lt;/code&gt;. We sort the list,
take names that start with the given prefix, and surround each one of them
with colons.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; EmojiComplete&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;getline&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;[&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:[^: \t]*$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; empty&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot; For some reason, Vim calls the function with empty a:base,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot; even when we previously returned -1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; []
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;filter&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;emoji#&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
             \        &lt;span class=&quot;s1&quot;&gt;&amp;#39;stridx(v:val, a:base[1 : -1]) &amp;gt;= 0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
             \ &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;:&amp;#39;.v:val.&amp;#39;:&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Improvements&lt;/h3&gt;

&lt;p&gt;So that was the basic implementation of Emoji completion. But wait, it is
missing the nice Emoji preview on the completion popup. It&amp;#39;s simple. Instead
of returning a list of strings, you return a list of dictionaries with
the additional &lt;code&gt;kind&lt;/code&gt; field.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;{ &lt;span class=&quot;s1&quot;&gt;&amp;#39;word&amp;#39;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;.emoji.&lt;span class=&quot;s1&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt;: emoji#&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;emoji&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One more thing to note is that we sort and filter the list, and transform the
result every time (putting colons before and after each name). Let&amp;#39;s try to
remove unnecessary repetition using &lt;code&gt;s:&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; EmojiComplete&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;getline&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;[&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:[^: \t]*$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; empty&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; []
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s:emoji_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; s:emoji_list &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;emoji#&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            \ &lt;span class=&quot;s2&quot;&gt;&amp;quot;{ &amp;#39;word&amp;#39;: &amp;#39;:&amp;#39;.v:val.&amp;#39;:&amp;#39;, &amp;#39;kind&amp;#39;: emoji#for(v:val) }&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; filter&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;copy&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;s:emoji_list&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stridx(v:val.word, a:base) &amp;gt;= 0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that we copy &lt;code&gt;s:emoji_list&lt;/code&gt;, since &lt;code&gt;filter()&lt;/code&gt; does in-place mutation.&lt;/p&gt;

&lt;p&gt;The full implementation from &lt;a href=&quot;https://github.com/junegunn/vim-emoji&quot;&gt;vim-emoji&lt;/a&gt;, which is not very
different from what was shown here, can be found in &lt;a href=&quot;https://github.com/junegunn/vim-emoji/blob/master/autoload/emoji.vim#L54&quot;&gt;GitHub&lt;/a&gt;. Check it
out if you&amp;#39;re interested. Sometimes Emoji characters mess up the screen, so
the implementation contains the code that redraws the window. :whale:&lt;/p&gt;

&lt;h2&gt;Chaining multiple completion functions&lt;/h2&gt;

&lt;p&gt;While writing Emoji completion, there&amp;#39;s one thing that irked me about how Vim
handles custom completion. To enable a custom completion, we set
&lt;code&gt;completefunc&lt;/code&gt; to the name of the function. This means basically, we can use
only one type of completion at a time. It is completely plausible that one
might want to complete HTML tags as well as Emoji expressions while working on
a Markdown document, but &lt;code&gt;emoji#complete()&lt;/code&gt; is only for Emojis. So what should
we do?&lt;/p&gt;

&lt;p&gt;We can think of a wrapper function that works with a list of completion
functions. In the first phase, it checks if any of the given functions can
complete the prefix, and if so, it remembers the function, and forwards calls
to it in the following steps.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; CompletionChain&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart
&lt;span class=&quot;c&quot;&gt;    &amp;quot; Test against the functions one by one&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; func &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:user_completion_chain
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; pos &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; [&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:base]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;      &amp;quot; If a function can complete the prefix,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;      &amp;quot; remember the name and return the result from the function&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; pos &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; s:current_completion &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; func
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; pos
      &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;    &amp;quot; No completion can be done&lt;/span&gt;
    unlet&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; s:current_completion
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s:current_completion&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot; Simply pass the arguments to the selected function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;s:current_completion&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; [&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:findstart&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:base]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; []
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:user_completion_chain &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s1&quot;&gt;&amp;#39;emoji#complete&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;HTMLTagComplete&amp;#39;&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completefunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;CompletionChain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If each completion expects different prefix, for example &lt;code&gt;:&lt;/code&gt; for Emojis, and
&lt;code&gt;&amp;lt;&lt;/code&gt; for tags, this scheme works pretty well. :sunglasses:&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/05/circles-4</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/05/circles-4"/>
    <title>circles-4</title>
    <published>2014-05-18T00:00:00+09:00</published>
    <updated>2014-05-18T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;A little variation of &lt;a href=&quot;/2012/06/circles-3&quot;&gt;circles-3&lt;/a&gt;. Inspired by the work of
&lt;a href=&quot;http://en.wikipedia.org/wiki/Yayoi_Kusama&quot;&gt;Kusama Yayoi&lt;/a&gt;. Click on the screen
to refresh, press enter key to invert the background color.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2014/05/circles-4#play&quot;&gt;circles-4&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2014/04/fzf+vim+tmux</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2014/04/fzf+vim+tmux"/>
    <title>fzf + vim + tmux</title>
    <published>2014-04-24T00:00:00+09:00</published>
    <updated>2014-04-24T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;h2&gt;fzf - &amp;quot;fuzzy finder for your shell&amp;quot;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is a Ruby script I&amp;#39;ve been working on for the past months. Basically
It&amp;#39;s a &lt;a href=&quot;http://en.wikipedia.org/wiki/Curses_(programming_library)&quot;&gt;curses&lt;/a&gt;-based Unix filter that allows you to quickly select an
item from a list using fuzzy matching pattern. For example, when you search for
&lt;code&gt;/usr/local/bin/git&lt;/code&gt;, you don&amp;#39;t type in the exact path, but you can just
haphazardly type in characters such as &lt;code&gt;urlcbigt&lt;/code&gt;. The idea of fuzzy finder has
been around for quite a while, and it has become extremely popular among Vim
community by the emergence of the excellent Vim plugins such as
&lt;a href=&quot;https://github.com/wincent/Command-T&quot;&gt;Command-T&lt;/a&gt; and &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;ctrlp.vim&lt;/a&gt;. Being able to open files using fuzzy
pattern is so convenient that now I could never imagine living without it.&lt;/p&gt;

&lt;p&gt;The natural progression was that I started to want to have this fuzzy finder
everywhere, not just on Vim. And not just for selecting files, but for anything.
Unable to find the right solution for my needs, I decided to write &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;
for myself. It was initially released as a very small script around 370 lines of
code, but since then many people have continuously shown interest and suggested
lots of genuine ideas that have now become parts of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. Now after 6
months from its initial release, it has grown to have more than 1200 lines of
code and it&amp;#39;s distributed with its own Vim plugin, keybindings for bash and zsh
and even fuzzy-auto-completion for bash. The idea itself also has become pretty
popular that now I see clones being written in
&lt;a href=&quot;https://github.com/mattn/gof&quot;&gt;Go&lt;/a&gt; and
&lt;a href=&quot;https://github.com/Refefer/quickfind&quot;&gt;Python&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Using fzf in Vim&lt;/h2&gt;

&lt;p&gt;Vim follows &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;the Unix philosophy&lt;/a&gt; and encourages you to use external
commands whenever appropriate. This idea is well summarized in the following
excerpt from &lt;a href=&quot;http://blog.sanctum.geek.nz/vim-koans/&quot;&gt;Vim Koans&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Markdown acolyte came to Master Wq to demonstrate his Vim plugin.&lt;/p&gt;

&lt;p&gt;“See, master,” he said, “I have nearly finished the Vim macros that translate
Markdown into HTML. My functions interweave, my parser is a paragon of
efficiency, and the results nearly flawless. I daresay I have mastered
Vimscript, and my work will validate Vim as a modern editor for the
enlightened developer! Have I done rightly?”&lt;/p&gt;

&lt;p&gt;Master Wq read the acolyte’s code for several minutes without saying anything.
Then he opened a Markdown document, and typed:&lt;/p&gt;

&lt;p&gt;:%!markdown&lt;/p&gt;

&lt;p&gt;HTML filled the buffer instantly. The acolyte began to cry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I guess you see the point. The thing is, there&amp;#39;s really no reason not to try
&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; in Vim, except that we already have a variety of very well-written
native Vim plugins with the same goal. There are pros and cons to using
&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; in lieu of native ones that I&amp;#39;m going to delve into in the following
sections.&lt;/p&gt;

&lt;h2&gt;Pros.&lt;/h2&gt;

&lt;h3&gt;Consistency&lt;/h3&gt;

&lt;p&gt;By choosing to use &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; in Vim, you use the same fuzzy finder interface
regardless of whether you&amp;#39;re in Vim or not. Consistenty matters.&lt;/p&gt;

&lt;h3&gt;Non-blocking&lt;/h3&gt;

&lt;p&gt;One of the benefits of using &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is that it does not block while the list
is being populated. The benefit is clear when you have a very large list. Thanks
to its non-blocking nature, you don&amp;#39;t have to wait tens of seconds until the
entire list is ready. You just start typing in right away.&lt;/p&gt;

&lt;p&gt;For the discussion to be complete, I must mention that &lt;a href=&quot;https://github.com/Shougo/unite.vim&quot;&gt;Unite.vim&lt;/a&gt; can
also process the list asynchronously using &lt;a href=&quot;https://github.com/Shougo/vimproc.vim&quot;&gt;vimproc.vim&lt;/a&gt;. However, the
performance is simply no match for &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; (you&amp;#39;ll see). Please note
that I&amp;#39;m not trying to argue that you should choose &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; over
&lt;a href=&quot;https://github.com/Shougo/unite.vim&quot;&gt;Unite.vim&lt;/a&gt;, which is much more than just a fuzzy finder.&lt;/p&gt;

&lt;h3&gt;Fast&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is fast. Ruby is not the language that is particularly famous for its
performance (actually it&amp;#39;s the opposite), but it&amp;#39;s still several times faster
than Vimscript and &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; benefits from that. More important is that
&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; &lt;em&gt;feels&lt;/em&gt; so fast because of its smart caching of the intermediate
results. The idea is so simple yet very effective. Typing in characters to fuzzy
finder is the process of narrowing down the search space. &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; takes
advantage of this fact and only looks at the much-smaller, already narrowed-down
list whenever possible instead of going through the entire list.&lt;/p&gt;

&lt;p&gt;However, inevitably, as the size of the list grows, search becomes
proportionally slow. Searching is a CPU-intensive task, and since at the time of
this writing it&amp;#39;s almost impossible to find a personal computer with a humble
single core CPU (even my phone has a quad-core), we can greatly reduce search
time by parallelizing it across the cores. As a matter of fact, the search
function of &lt;a href=&quot;https://github.com/wincent/Command-T&quot;&gt;Command-T&lt;/a&gt; is written in multi-threaded C, so for a very
large list, &lt;a href=&quot;https://github.com/wincent/Command-T&quot;&gt;Command-T&lt;/a&gt; can outperform &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; whose search is
single-threaded if we ignore the time spent being blocked until the entire list
is ready.&lt;/p&gt;

&lt;p&gt;So you may ask why &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; searches with a single thread. It is due to the
sad fact that multi-threaded program written in Ruby cannot saturate more than a
single core of CPU in the presence of the notorious &lt;a href=&quot;http://en.wikipedia.org/wiki/Global_Interpreter_Lock&quot;&gt;GIL (global interpreter
lock)&lt;/a&gt;. The only option we
have left is to use multiple processes instead of threads. Doing so is perfectly
feasible but the result is likely to be sub-optimal because of the unavoidable
overhead of inter-process communication. However, we can minimize the overhead
by employing a very fast serialization method like
&lt;a href=&quot;http://msgpack.org/&quot;&gt;MessagePack&lt;/a&gt;. You can currently check out the experimental
multi-process version &lt;a href=&quot;https://github.com/junegunn/fzf/tree/multi-process&quot;&gt;here&lt;/a&gt; which requires MessagePack. As I prefer to keep
the installation process as simple as possible and the benefit of the
parallelizaion is only noticeable when the list is extremely large (&amp;gt; 100k)
which I believe to be quite rare, I&amp;#39;m not planning to release this version
anytime soon. But, we&amp;#39;ll see.&lt;/p&gt;

&lt;p&gt;So how fast is it really, compared to the other fuzzy finders?
&lt;a href=&quot;https://raw.githubusercontent.com/junegunn/i/master/fzf-commandt-ctrlp-unite.gif&quot;&gt;Click here and see it for yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: After the post was published, the scanning performance of
&lt;a href=&quot;https://github.com/Shougo/unite.vim&quot;&gt;Unite.vim&lt;/a&gt; has been significantly improved. You can see the discussion
&lt;a href=&quot;https://github.com/junegunn/fzf/issues/52&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Extended-search mode&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf#extended-search-mode&quot;&gt;Extended-search mode&lt;/a&gt; of
&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is a nice improvement to the basic fuzzy matching behavior. It&amp;#39;s not
a full-fledged regular expression matcher, but it&amp;#39;s simpler and easier to use.&lt;/p&gt;

&lt;h2&gt;Cons.&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s not all roses of course.&lt;/p&gt;

&lt;h3&gt;Terminal-only&lt;/h3&gt;

&lt;p&gt;This is certainly the most obvious drawback of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is a
command-line program and you simply cannot run it on GVim. I don&amp;#39;t find it a
problem since I&amp;#39;m always on terminal, but obviously not everyone&amp;#39;s like me and
if you prefer GVim, &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is just not an option there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: This is no more the case. I updated the Vim plugin for fzf to use an
external terminal emulator such as xterm, or urxvt, to launch fzf even when
you&amp;#39;re on GVim.&lt;/p&gt;

&lt;h3&gt;Slower startup time&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is an external process to Vim and theoretically should take longer to
start compared to the native plugins. It&amp;#39;s a natural trade-off for being a
general-purpose tool. However, you may not find it a problem because the
difference is usually not very noticeable on modern computers.&lt;/p&gt;

&lt;h3&gt;Lack of features&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; was designed to be a Unix filter and no more than that. It simply
reads the input and filters it by the given fuzzy pattern. That&amp;#39;s all it does.
You cannot dynamically change the source or the action to be performed on the
matches. This is straightforward if you think about the usage of a typical Unix
filter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;ls | grep hello &amp;gt; world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously &lt;code&gt;grep&lt;/code&gt; does not provide us with a way to change its input or the
direction of its output. &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; is just like that and this intentional
decoupling is what makes &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; (and Unix filters in general) truly
extensible and composable. But in the context of Vim Plugin, this nature can be
considered to be limiting.&lt;/p&gt;

&lt;h3&gt;Fullscreen-only&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Curses_(programming_library)&quot;&gt;curses&lt;/a&gt; program only works in fullscreen mode. Which means that
&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; will take up the whole screen while a native plugin will use
split-window and occupy only a part of the screen. You may find it annoying as
it completely hides the current context of the editor. However, not all hope is
lost. &lt;a href=&quot;https://github.com/tpope/vim-dispatch&quot;&gt;Dispatch.vim&lt;/a&gt; by &lt;a href=&quot;http://tpope.sexy/&quot;&gt;Tim Pope&lt;/a&gt; inspired me to make
use of tmux splits, and now the Vim plugin of &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; automatically splits
the window to start fuzzy finder there not to take up too much screen real
estate. As you can see in the following GIF, fzf as a Vim plugin, running inside
a tmux session, pretty much resembles the native ones and I&amp;#39;m really happy with
it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/junegunn/i/master/fzf.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Closing notes&lt;/h2&gt;

&lt;p&gt;Until recently I wasn&amp;#39;t sure if &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; as a Vim plugin could replace
&lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;ctrlp.vim&lt;/a&gt; or &lt;a href=&quot;https://github.com/wincent/Command-T&quot;&gt;Command-T&lt;/a&gt;. But I was able to implement all the
features I needed (selecting file, open buffer, or color scheme) using
&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, and the result has been quite pleasant. If you&amp;#39;re somehow interested
in giving it a try, check out &lt;a href=&quot;https://github.com/junegunn/fzf#usage-as-vim-plugin&quot;&gt;the documentation&lt;/a&gt;. &lt;code&gt;fzf#run()&lt;/code&gt; is all you
need to know.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2013/10/testing-vimscript-with-vader-vim</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2013/10/testing-vimscript-with-vader-vim"/>
    <title>Testing Vimscript with Vader.vim</title>
    <published>2013-10-27T00:00:00+09:00</published>
    <updated>2013-10-27T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;TDD, or test-driven-development is already a well-established concept today,
widely adopted by many software developers. So it&amp;#39;s really not necessary for me
to stress the importance of writing tests here again. But anyway, here&amp;#39;s my
story. In a nutshell, I learned that testing is important even for Vim plugins,
and I created &lt;a href=&quot;https://github.com/junegunn/vader.vim&quot;&gt;Vader.vim&lt;/a&gt; to test my own plugins.&lt;/p&gt;

&lt;h2&gt;On writing Vim plugins&lt;/h2&gt;

&lt;p&gt;Over time I&amp;#39;ve written a few Vim plugins. My typical Vim plugin starts as a
collection of functions and commands extracted from my .vimrc. The feature set
is usually quite small at this stage that I barely feel the need for an
automated testing.&lt;/p&gt;

&lt;p&gt;However once the code is formed into an independent plugin that can be used by
anyone, not just me, I need to care much more about the details of it. Some
random code in my .vimrc is &amp;quot;good enough&amp;quot; if it just works for me. Small errors
are neglected since I know exactly what it&amp;#39;s capable of and what its limits are.&lt;/p&gt;

&lt;p&gt;But for a public Vim plugin, it&amp;#39;s a whole different story. Now it has to run
without errors on any popular platform, and it should not break even when the
user is extremely imaginative and unorthodox.&lt;/p&gt;

&lt;h2&gt;Development-Driven-Test&lt;/h2&gt;

&lt;p&gt;And of course there will be feature requests. Naturally the code will keep
growing over time, and soon it&amp;#39;ll become much more complex than it was in its
conception. Only then, I regret that I didn&amp;#39;t pay enough attention to writing
tests earlier.&lt;/p&gt;

&lt;p&gt;Now if I want to add a feature or need to refactor some parts of the code, I
have to be sure that it doesn&amp;#39;t break any of its documented functionality. Now
if it suddenly breaks, people will mock me for spending my time to write a free
software they find it useful and making a small mistake in maintaining it.
Obviously I don&amp;#39;t want that to happen. But the plugin already has too many
features and oddities, some of them even I lost track of, it&amp;#39;s hard not to
make a mistake if I keep testing it manually.&lt;/p&gt;

&lt;h2&gt;Semi-automated tests with Vim macros&lt;/h2&gt;

&lt;p&gt;This little story is what happened when I was passionately improving
&lt;a href=&quot;https://github.com/junegunn/vim-easy-align&quot;&gt;vim-easy-align&lt;/a&gt;, a text alignment plugin for Vim. There were already &lt;a href=&quot;https://github.com/junegunn/vim-easy-align#related-work&quot;&gt;two
popular plugins with the same goal, namely Tabular and Align.vim&lt;/a&gt;.
Unfortunately, I was not completely satisfied with those two, so I made up my
mind to start my own with a very small feature set that is custom-tailored to
meet my own needs, and &lt;a href=&quot;https://github.com/junegunn/vim-easy-align&quot;&gt;vim-easy-align&lt;/a&gt; was the result of the attempt.
However, I&amp;#39;d gotten a little too ambitious over time and ended up implementing
quite a lot of features. (Now I believe it has even more features than its
predecessors.) Manual testing had become so time-consuming and error-prone, and
finally I felt the great need for automated testing.&lt;/p&gt;

&lt;p&gt;To keep it simple, I decided to use native Vim macros (or recordings) to record
and replay keystrokes that transform the given file into the expected result. So
if I want to test the plugin, I just open up an input file, replay the macro,
and see if the modified buffer matches the expected result. Nothing fancy, but
it worked pretty well for a while. However, as the number of test cases
increased, the macro file had grown into &lt;a href=&quot;https://github.com/junegunn/vim-easy-align/blob/fb8cf1d54ace9f0fe420cde63cb093c43bfb3c29/test/basic.script&quot;&gt;a giant mess&lt;/a&gt; that I
couldn&amp;#39;t stand anymore. The biggest problem was its horrible readability.
Whenever the result of the macro did not match the expected output, first
thing I had to do was to figure out which part of the script was responsible
for the breakage, but even that was never easy when all I was given was a
sequence of several thousand keystrokes.&lt;/p&gt;

&lt;p&gt;I wanted to have a better way. Yet I didn&amp;#39;t care for writing English-like DSL
for testing which I think rather complicates the problem than simplifying it.
Simple JUnit-style assertions and macros that are readable should be good
enough for most of the cases. Let&amp;#39;s not over-engineer the problem. Let&amp;#39;s keep
it simple.&lt;/p&gt;

&lt;p&gt;Bearing these in mind, I&amp;#39;ve finally written my own Vimscript testing tool,
&lt;a href=&quot;https://github.com/junegunn/vader.vim&quot;&gt;Vader.vim&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Vader.vim&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vader.vim&quot;&gt;Vader.vim&lt;/a&gt; is a simple tool designed to help you write Vimscript tests in a
readable way. I wanted to make its interface simple and intuitive that it does
not require a lengthy document. I wanted it to be instantly obvious to anyone
who has the basic idea of testing.&lt;/p&gt;

&lt;p&gt;Vader.vim defines its own .vader file format, which is a flat series of blocks
of the following types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute&lt;/li&gt;
&lt;li&gt;Given&lt;/li&gt;
&lt;li&gt;Do&lt;/li&gt;
&lt;li&gt;Expect&lt;/li&gt;
&lt;li&gt;Before&lt;/li&gt;
&lt;li&gt;After&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have experience with any testing framework, I suppose you can easily
conjecture what each type is for. Let&amp;#39;s just see an example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;# Test case
Execute &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;test assertion&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;:
  %&lt;span class=&quot;k&quot;&gt;d&lt;/span&gt;
  Assert &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; line&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;setf&lt;/span&gt; python
  AssertEqual &lt;span class=&quot;s1&quot;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt;

Given &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;some &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; code&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;:
  &lt;span class=&quot;nb&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

Do &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;indent the block&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;:
  vip&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;

Expect &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;indented block&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;:
  &lt;span class=&quot;nb&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

Do &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;indent and shift&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;:
  vip&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  gv&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

Expect &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;indented and shifted&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;nb&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is self-explanatory. You can &lt;code&gt;Execute&lt;/code&gt; some Vimscript and test it with
&lt;code&gt;Assert&lt;/code&gt;ions. You&amp;#39;re &lt;code&gt;Given&lt;/code&gt; some &lt;code&gt;ruby&lt;/code&gt; code, &lt;code&gt;Do&lt;/code&gt; some work on it, and you
&lt;code&gt;Expect&lt;/code&gt; the result of it matches your expectation. Also, you can have arbitrary
Vimscript executed &lt;code&gt;Before&lt;/code&gt; and &lt;code&gt;After&lt;/code&gt; each test case.&lt;/p&gt;

&lt;p&gt;Well, that&amp;#39;s all I have to say about .vader format.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;ve finished writing a vader file, you can execute it with Vader
command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Vader test.vader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the result is given as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;Starting Vader: &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; suite&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; case&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  Starting Vader: &lt;span class=&quot;sr&quot;&gt;/Users/&lt;/span&gt;jg&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;plugged&lt;span class=&quot;sr&quot;&gt;/vader.vim/&lt;/span&gt;example/test.vader
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [EXECUTE] test assertion
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [  GIVEN] some &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; code
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [     DO] indent the block
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [ EXPECT] indented block
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [  GIVEN] some &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; code
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [     DO] indent and shift
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; [ EXPECT] indented and shifted
  Success&lt;span class=&quot;sr&quot;&gt;/Total: 3/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
Success&lt;span class=&quot;sr&quot;&gt;/Total: 3/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;assertions: &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
Elapsed time: &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;160679&lt;/span&gt; sec.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Congratulations. You just accidentally learned almost everything about &lt;a href=&quot;https://github.com/junegunn/vader.vim&quot;&gt;Vader.vim&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Tests in Vader.vim&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vader.vim&quot;&gt;Vader.vim&lt;/a&gt; is a very new and immature project, but I&amp;#39;ve written/rewritten
tests for most of my plugins with it and it has worked very well so far. If
you&amp;#39;re interested in writing your own tests with Vader, you can refer to the
vader files I&amp;#39;ve written in the following links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-emoji/tree/master/test&quot;&gt;vim-emoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/seoul256.vim/tree/master/test&quot;&gt;seoul256.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-easy-align/tree/master/test&quot;&gt;vim-easy-align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug/tree/master/test&quot;&gt;vim-plug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2013/09/thoughts-on-vim-plugin-dependency</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2013/09/thoughts-on-vim-plugin-dependency"/>
    <title>Thoughts on Vim plugin dependency</title>
    <published>2013-09-28T00:00:00+09:00</published>
    <updated>2013-09-28T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;It hasn&amp;#39;t been too long since &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; first came into being and widely
adopted by the Vim community. Obviously the rapid growth of &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; has
played a crucial role in the progress. Since then, we have observed the
emergence of a wide variety of plugin managers, &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;,
&lt;a href=&quot;https://github.com/MarcWeber/vim-addon-manager&quot;&gt;vim-addon-manager&lt;/a&gt;, &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt;, and so on. And even I came up with a
small plugin manager called &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; and &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, we used to make our &lt;code&gt;~/.vim&lt;/code&gt; directories
all muddled up with the files downloaded from &lt;a href=&quot;http://vim.org/scripts&quot;&gt;vim.org&lt;/a&gt;,
practically making it impossible to manage afterwards. But now we take it for
granted that we have version-controlled plugins in their own separate
directories, and use fancy installers from plugin managers every day. So yeah,
definitely we&amp;#39;ve come a long way, and I&amp;#39;m mostly happy with the status quo.&lt;/p&gt;

&lt;p&gt;However, there&amp;#39;s one thing that has always irked me about Vim plugins, which is
the lack of proper dependency control mechanism. There&amp;#39;s currently no way the
developer of a plugin can effectively enforce the users of the plugin to install
the prerequisites as well. The only option is to tell them to do so in the
installation guide.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... so in order to use my plugin you have to install A as well. And since A
requires B and C, you also have to install them.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what if at one point plugin C is updated and suddenly requires yet another
plugin? If you are the plugin developer, how can you keep track of such changes
and how are you going to notify the users of your plugin? This rarely happens in
practice, but I&amp;#39;m just suggesting that passing the burden of dependency
management on to the users has an inherent flaw. Also, a user with many plugins
can easily lose track of the dependencies among them and will not be able to
remove a plugin without worrying about breaking the other ones.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a headache. So instead of reusing preexisting plugins, a plugin developer
is tempted to duplicate the code from them. Simply put, the lack of automatic
dependency resolution discourages proper modularization of code. And I don&amp;#39;t
like it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;But they&amp;#39;re just plugins for a text editor. Why do you care so much?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I ask myself this and I know it&amp;#39;s a fair question. Perhaps I&amp;#39;m being too serious
about Vim plugins. But my justification is that I&amp;#39;m a software engineer trained
to frown upon any mindless copy-and-paste code so I couldn&amp;#39;t just close my eyes
on this issue regarding my favorite everyday tool.&lt;/p&gt;

&lt;p&gt;I believe that &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; was heavily inspired by
&lt;a href=&quot;https://rubygems.org/&quot;&gt;Rubygems&lt;/a&gt; (and &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt;), however it misses the
most important point of it, dependency management. There are
&lt;a href=&quot;https://github.com/gmarik/vundle/issues/7&quot;&gt;requests&lt;/a&gt; for it, but I
don&amp;#39;t see it coming anytime soon. And its successor &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; which offers
much broader range of features, also has yet to address the issue. The author of
&lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; &lt;a href=&quot;https://github.com/Shougo/neobundle.vim/issues/117#issuecomment-19885002&quot;&gt;argues
that&lt;/a&gt;
&lt;a href=&quot;http://vim.org/scripts&quot;&gt;vim.org&lt;/a&gt; should be responsible for keeping track of the
dependencies between the plugins and build a centralized database, which I agree
to a certain extent, but I don&amp;#39;t think it&amp;#39;s happening in the near future.&lt;/p&gt;

&lt;p&gt;There is &lt;a href=&quot;https://github.com/MarcWeber/vim-addon-manager-known-repositories&quot;&gt;a
community-attempt&lt;/a&gt;
to build such a database with dependency information, which is for
&lt;a href=&quot;https://github.com/MarcWeber/vim-addon-manager&quot;&gt;vim-addon-manager&lt;/a&gt;. But I&amp;#39;m a bit skeptical about the scalability of this
centralized approach of building a single registry. Can we keep it up to date at
all times? Can we make every plugin developer voluntarily update the registry?&lt;/p&gt;

&lt;p&gt;Instead, I believe each plugin should store its dependency information on its
own repository, effectively building a distributed dependency database. The
problem is, there is no consensus on how it should be done. Obviously we don&amp;#39;t
have &amp;quot;Vim Plugin Standards Committee&amp;quot; or something like that.&lt;/p&gt;

&lt;p&gt;Anyway, I mentioned in an earlier post that I had accidentally created a plugin
manager called &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, whose most prominent feature is its lack of
features. It&amp;#39;s so primitive that I have the luxury of prototyping an
experimental feature on it without too much headache.&lt;/p&gt;

&lt;p&gt;I had this simple idea of resolving the dependency of a Vim plugin. Each plugin
has a file called Plugfile in its root directory, which is simply a set of
&lt;code&gt;Plug&lt;/code&gt; commands. For example, if the content of Plugfile is as follows,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;Plug &lt;span class=&quot;s1&quot;&gt;&amp;#39;junegunn/vim-emoji&amp;#39;&lt;/span&gt;
Plug &lt;span class=&quot;s1&quot;&gt;&amp;#39;junegunn/vim-easy-align&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it means that this plugin requires those two other plugins to be installed. So
if you install a plugin with a Plugfile using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; (&lt;em&gt;wow, that&amp;#39;s a lot
of plugs in a sentence&lt;/em&gt;),&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; first installs the plugin&lt;/li&gt;
&lt;li&gt;And sees if it has Plugfile&lt;/li&gt;
&lt;li&gt;The Plugfile is loaded and vim-plug discovers its dependent plugins&lt;/li&gt;
&lt;li&gt;Dependent plugins are installed as well, then their Plugfiles are
examined and their dependencies are resolved recursively.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This primitive dependency resolution scheme is now implemented on
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, and you can read more about it
&lt;a href=&quot;https://github.com/junegunn/vim-plug#dependency-resolution&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See below how &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; installer handles plugins with Plugfiles:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/junegunn/i/master/vim-plug/Plugfile.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Despite the simplicity, it works just fine. (Yes, for now I&amp;#39;m completely
ignoring subtle issues like possible branch conflicts, etc.)&lt;/p&gt;

&lt;p&gt;However, this scheme has some fundamental problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;There is no plugin out there yet with the suggested Plugfile. This is no
wonder since currently a very few people are using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, and I came
up with this method just a few days ago. I&amp;#39;ll definitely consider including
Plugfile in my future projects, but will the other plugin developers agree on
the concept of it and add it to their repositories? I don&amp;#39;t know.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugfile uses &lt;code&gt;Plug&lt;/code&gt; command, so the users of the other plugin managers will
not be likely to benefit from the presence of it. I decided to use &lt;code&gt;Plug&lt;/code&gt;
command simply because it was easier for me to implement with it at the
moment, but using a neutral data format such as JSON or YAML seems to be a
better idea.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is always possible that a certain repository is renamed or removed from
GitHub. In that case, all the references to it must be updated accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So basically this is still just a proof-of-concept implementation of dependency
resolution and I cannot know how it will turn out. If you are a Vim plugin
developer and maintain a plugin with dependency, please consider adding a
Plugfile to your repository.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d love to hear your opinions on the issue. Feel free to &lt;a href=&quot;mailto:junegunn.c@gmail.com&quot;&gt;e-mail
me&lt;/a&gt;, or &lt;a href=&quot;https://github.com/junegunn/vim-plug/issues&quot;&gt;create an
issue&lt;/a&gt; to discuss the matter.&lt;/p&gt;

&lt;p&gt;Happy Vimming. And don&amp;#39;t miss the final episode of Breaking Bad.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Update:&lt;/p&gt;

&lt;p&gt;After I published this post, I found an interesting project tackling Vim plugin
dependency, called &lt;a href=&quot;https://www.relishapp.com/kana/vim-flavor/docs&quot;&gt;vim-flavor&lt;/a&gt;. &lt;a href=&quot;https://www.relishapp.com/kana/vim-flavor/docs&quot;&gt;vim-flavor&lt;/a&gt; is a Vim plugin manager
distributed as a Ruby gem, which implements &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt;-like dependency
resolution scheme with &lt;a href=&quot;http://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;. It relies on the presence of
&lt;a href=&quot;https://www.relishapp.com/kana/vim-flavor/docs/flavorfile&quot;&gt;Flavorfile&lt;/a&gt; to
discover the dependency of a plugin. The concept is similar to Plugfile, but it
also allows you to specify the required versions of the dependent plugins, while
with Plugfile you can only specifiy the branch or tag for each repository.  It&amp;#39;s
a great project and you should check it out. However, it holds the same problem
as &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, that it uses its own syntax for dependency specification
rather than using a neutral data format. The situation here is a bit different
from that of the Ruby community which unanimously agreed upon the use of Gemfile
from &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; (and gemspec of course). Many of the Vim users are already
using a number of different plugin managers, and we can&amp;#39;t really expect
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; or &lt;a href=&quot;https://www.relishapp.com/kana/vim-flavor/docs&quot;&gt;vim-flavor&lt;/a&gt; to be a game changer. And although its
ambitious implementation of semantic versioning looks promising, in practice
most of the users and developers of Vim plugins don&amp;#39;t seem to care much about
versioning.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2013/09/trail-1</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2013/09/trail-1"/>
    <title>trail-1</title>
    <published>2013-09-23T00:00:00+09:00</published>
    <updated>2013-09-23T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;It&amp;#39;s been a while. This is a little variation of an-year-old
&lt;a href=&quot;/2012/10/trail-0&quot;&gt;trail-0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Press enter key to clear the screen and toggle the background color.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2013/09/trail-1#play&quot;&gt;trail-1&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2013/09/installing-vim-with-ruby-support</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2013/09/installing-vim-with-ruby-support"/>
    <title>Installing Vim with Ruby support</title>
    <published>2013-09-21T00:00:00+09:00</published>
    <updated>2013-09-21T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Everybody seems to hate Vimscript.&lt;/p&gt;

&lt;p&gt;As being one of the few who have written a considerable amount of Vimscript, I
can say it&amp;#39;s not that bad, especially considering its notoriety.&lt;/p&gt;

&lt;p&gt;But obviously it&amp;#39;s not great either, which is quite understandable, as it&amp;#39;s not
a general purpose, full-fledged scripting language like Ruby or Python. We
sometimes forget that Vimscript is simply a tool for configuring a text editor,
I mean, a text editor.&lt;/p&gt;

&lt;p&gt;So, if you don&amp;#39;t want to dive deep into this exotic, notorious Vimscript but
still want to customize your Vim experience, or need some advanced features that
Vimscript just can&amp;#39;t provide, such as threading or network I/O, you will find
external language support of Vim intriguing. Yes, you can control Vim with Ruby
or Python script. Sounds great, right? However, I must mention that, you won&amp;#39;t
be able to go too far without a certain amount of knowledge in Vimscript. But
worry about that later, let&amp;#39;s give it a shot.&lt;/p&gt;

&lt;p&gt;In this article I&amp;#39;m going to provide instructions to install Vim with Ruby
support on various platforms.&lt;/p&gt;

&lt;h2&gt;Do I have it?&lt;/h2&gt;

&lt;p&gt;Before moving on to the instructions, let&amp;#39;s first see if you&amp;#39;re already running
a Ruby-enabled Vim.  Type in the following command in your Vim session.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;echo has&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it shows &lt;code&gt;1&lt;/code&gt;, then you&amp;#39;re in luck. Congratulations, you are ready to write
Ruby script inside Vim. Additionally, you can check which version of Ruby is
being used with the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; puts RUBY_VERSION
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Installation On Mac OS X&lt;/h2&gt;

&lt;p&gt;As of now, the latest version of Mac OS X (Mountain Lion) is shipped with a
Ruby-enabled Vim located at &lt;code&gt;/usr/bin/vim&lt;/code&gt;. However, it&amp;#39;s running an old
version of Ruby, 1.8.7.&lt;/p&gt;

&lt;p&gt;If you find it limiting, follow the instructions below, I&amp;#39;ll show you the
easiest way to install the latest version of Vim with proper Ruby support.&lt;/p&gt;

&lt;h3&gt;Installing Ruby with RVM&lt;/h3&gt;

&lt;p&gt;There are several ways to install Ruby. But in this article, I&amp;#39;ll show you how
you can install the latest Ruby with &lt;a href=&quot;http://rvm.io/&quot;&gt;RVM&lt;/a&gt;, which may not be the
best tool out there, but by far the easiest one to use.&lt;/p&gt;

&lt;p&gt;Type in the following command in your shell, and follow the instructions given
in the output. You may need to edit your shell configuration file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;curl -L https://get.rvm.io &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash -s stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The latest version of Ruby is 2.0.0, but unfortunately the current version of
Vim seems to have some issues with it, so it&amp;#39;s safer to install 1.9.3 instead.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;rvm install &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.9.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Installing Vim with Homebrew&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; is a crucial package manager for OS X. If you&amp;#39;re not
yet using it, go install it with the following command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/mxcl/homebrew/go&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When it&amp;#39;s done, install Vim with Ruby 1.9.3.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;rvm use &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.9.3
brew install vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run &lt;code&gt;vim --version&lt;/code&gt;, you&amp;#39;ll see that the Ruby you installed with RVM is
linked to Vim.&lt;/p&gt;

&lt;h2&gt;Installation on Ubuntu&lt;/h2&gt;

&lt;p&gt;Simply install vim-nox with apt-get.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby rubygems vim-nox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Reference: &lt;a href=&quot;http://stackoverflow.com/questions/3794895/installing-vim-with-ruby-support-ruby&quot;&gt;Installing vim with ruby support (+ruby)&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;Installation on Windows&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download and install the &lt;a href=&quot;http://www.vim.org/download.php#pc&quot;&gt;official GVim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download a newer build of GVim executable from
&lt;a href=&quot;http://wyw.dcweb.cn/#download&quot;&gt;here&lt;/a&gt; and replace the existing one&lt;/li&gt;
&lt;li&gt;Download and install Ruby 1.9.3 using
&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt;. You must check &lt;code&gt;Add
Ruby executable to your PATH&lt;/code&gt; option.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;What next?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help ruby&lt;/code&gt; will teach you everything you need to know about Ruby in Vim&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mattmargolis.net/scripting_vim_with_ruby.pdf&quot;&gt;Scripting Vim with Ruby&lt;/a&gt;
is a great resource on the subject&lt;/li&gt;
&lt;li&gt;Check out my plugins,
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; and
&lt;a href=&quot;https://github.com/junegunn/vim-github-dashboard&quot;&gt;vim-github-dashboard&lt;/a&gt;, both
of which were written with Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;m going to leave you with this simple example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RB&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w[a:firstline a:lastline]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VIM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$curbuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$curbuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;endfunction&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Shuffle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy Vimming. And please be nice to Ruby.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2013/09/writing-my-own-vim-plugin-manager</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2013/09/writing-my-own-vim-plugin-manager"/>
    <title>Writing my own Vim plugin manager</title>
    <published>2013-09-18T00:00:00+09:00</published>
    <updated>2013-09-18T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;As the title says, I&amp;#39;ve finally ended up writing my own Vim plugin manager
called &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, so here&amp;#39;s what happened.&lt;/p&gt;

&lt;h2&gt;State of the art&lt;/h2&gt;

&lt;p&gt;Today, we already have a whole range of Vim plugin managers, from the
minimalistic, the father of all, &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; from the great
&lt;a href=&quot;http://tpo.pe/&quot;&gt;tpope&lt;/a&gt;, to &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; with which you get a nice usability
improvement, and to seemingly the most fully-featured &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also a number of minorities such as
&lt;a href=&quot;https://github.com/MarcWeber/vim-addon-manager&quot;&gt;vim-addon-manager&lt;/a&gt; and
&lt;a href=&quot;https://github.com/gawel/oh-my-vim&quot;&gt;oh-my-vim&lt;/a&gt;, both of which manage the lists
of available Vim plugins.&lt;/p&gt;

&lt;p&gt;My choice was &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;. I really admire the simplicity of &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;,
but I don&amp;#39;t want to manage git submodules, and having the explicit list of
plugins in my .vimrc gives me a better sense of control. Later I found that
&lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; could be a nice alternative, but realized that I didn&amp;#39;t need any
of its extra features at that point, so I decided to stick with &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Growing impatience&lt;/h2&gt;

&lt;p&gt;The number of plugins I use has been increased over time. Now I have more than
30 plugins specified in my
&lt;a href=&quot;https://github.com/junegunn/dotfiles/blob/8646aae3aec418662d667b36444e771041ad0d23/vimrc#L12-L91&quot;&gt;.vimrc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now with 30 of them, it takes a considerable amount of time to update the
plugins, or install them on a new machine. Maybe I&amp;#39;m exaggerating the problem a
bit since it still takes less than 5 minutes. I could just fire up a new tmux
session and do something else while they&amp;#39;re being done.&lt;/p&gt;

&lt;p&gt;It was obvious that the time could be greatly reduced if I could update plugins
in parallel using multiple threads or processes. The simplest method would be
to write a shell script that spawns multiple background processes each of which
updates a plugin.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim/bundle &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; d in *&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;/.git &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Updating &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prevent having too many subprocesses&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; % &lt;span class=&quot;nv&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This simple script works pretty well if you have already installed the
plugins. Maybe this is how it should be done considering that Vim in itself
does not have any notion of parallel execution. But this irrational Vim addict
just couldn&amp;#39;t stop wanting to do the whole thing inside Vim without any external
scripts.&lt;/p&gt;

&lt;p&gt;Although Vim itself does not have threads or background processes, there are a
couple of workarounds.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; supports parallel installation using multiple processes.
However that requires compilation of another plugin called vimproc from the
same author. As &lt;del&gt;my instinct told me to stay away from any compiled
extension and&lt;/del&gt; I wanted to simplify the initial setup process as much as
possible, I looked for another option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Ruby/Python interface we can create threads. I personally prefer Ruby
and the current version of Mac OS X is shipped with a Ruby-enabled Vim, so I
decided to write a parallel update procedure in Ruby.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And yes, it worked. You can see my first, now deprecated, prototype
implementation &lt;a href=&quot;https://github.com/junegunn/vimfiles/commit/5806196&quot;&gt;here&lt;/a&gt;,
which uses &lt;code&gt;g:bundles&lt;/code&gt; variable from &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The next step&lt;/h2&gt;

&lt;p&gt;The obvious next step was to merge this parallel update procedure into
&lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;, so if a user is running a Ruby-enabled Vim, &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; will
automatically install/update plugins in parallel. So many people would benefit
from this update! But sadly that didn&amp;#39;t happen. I couldn&amp;#39;t find a place for my
code in the &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; codebase without introducing a major overhaul. Much of
its logic relies too much on the content of the status window. And it was
instantly obvious that it would require too much effort to make it flexible
enough to embrace my code.&lt;/p&gt;

&lt;p&gt;I could just stop there. Using &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; as it is with my own parallel update
function. But I then realized that I had accidentally reimplemented the core
part of &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; by writing that piece of code. Well then, why not just
build my own custom-tailored plugin manager that is easier for me to use and
gives me just what I need? So that&amp;#39;s how &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; started.&lt;/p&gt;

&lt;h2&gt;Goals and achivements&lt;/h2&gt;

&lt;p&gt;I wanted my own plugin manager to be as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should be easier to setup, require less boilerplate code&lt;/li&gt;
&lt;li&gt;Minimal features&lt;/li&gt;
&lt;li&gt;Of course, parallel installation and update

&lt;ul&gt;
&lt;li&gt;But fall back to plain Vimscript when Ruby is not available&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Be able to switch plugins of the same name from different authors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To summarize, it&amp;#39;s positioned somewhere between &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; and &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;,
but with the new parallel update feature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; is indeed easier to setup. To install &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; you just
need to download
&lt;a href=&quot;https://raw.github.com/junegunn/vim-plug/master/plug.vim&quot;&gt;a single file from GitHub&lt;/a&gt;
and put it in &lt;code&gt;~/.vim/autoload&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.vim/autoload
curl -fLo ~/.vim/autoload/plug.vim &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://raw.github.com/junegunn/vim-plug/master/plug.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it doesn&amp;#39;t require any unfathomable boilerplate code in your .vimrc, you
just write down the list of plugins with &lt;code&gt;Plug&lt;/code&gt; command between &lt;code&gt;plug#begin()&lt;/code&gt;
and &lt;code&gt;plug#end()&lt;/code&gt;. That&amp;#39;s all you have to do. (And you see, &lt;code&gt;Plug&lt;/code&gt; is 2-byte
shorter than &lt;code&gt;Bundle&lt;/code&gt;, so you save a huge amount of disk space!)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

Plug &lt;span class=&quot;s1&quot;&gt;&amp;#39;junegunn/seoul256&amp;#39;&lt;/span&gt;
Plug &lt;span class=&quot;s1&quot;&gt;&amp;#39;junegunn/vim-easy-align&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Plug &amp;#39;user/repo&amp;#39;, &amp;#39;branch_or_tag&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Plug &amp;#39;git@github.com:junegunn/vim-github-dashboard.git&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you are loaded with the essential PlugInstall, PlugUpdate, PlugClean, and
PlugUpgrade commands.&lt;/p&gt;

&lt;p&gt;PlugInstall and PlugUpdate will install and update plugins in parallel if you&amp;#39;re
running a Ruby-enabled Vim. It gives me an order of magnitude speedup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/junegunn/i/master/vim-plug/pi.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/junegunn/i/master/vim-plug/pu.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Notice that the status window doesn&amp;#39;t look as nice as that of &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt;, but
well, that&amp;#39;s good enough for me, for now.&lt;/p&gt;

&lt;h2&gt;Status of vim-plug&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; works for me&lt;/em&gt;. And that&amp;#39;s the whole point. I will not add any
extra feature that I don&amp;#39;t think I need just because somebody wants it. I don&amp;#39;t
expect people to abandon their current plugin managers and adopt &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;,
and it is highly likely that I will be the only one using it in the end, but I
don&amp;#39;t care. It was fun building it, and I learned a lot more about Vim in the
process.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re still curious &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;try it, fork it&lt;/a&gt;,
or even try writing a yet another plugin manager for yourself.
Why? Because you can, and it&amp;#39;s a lot of fun.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2013/01/sink-1</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2013/01/sink-1"/>
    <title>sink-1</title>
    <published>2013-01-10T00:00:00+09:00</published>
    <updated>2013-01-10T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;My attempt to simulate a hyperbolic funnel (gone a bit crazy).
Drag on the screen and see the marbles spinning.
Press enter key to invert the colors.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2013/01/sink-1#play&quot;&gt;sink-1&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/10/trail-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/10/trail-0"/>
    <title>trail-0</title>
    <published>2012-10-14T00:00:00+09:00</published>
    <updated>2012-10-14T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Press enter key to clear the screen.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/10/trail-0#play&quot;&gt;trail-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/09/sink-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/09/sink-0"/>
    <title>sink-0</title>
    <published>2012-09-17T00:00:00+09:00</published>
    <updated>2012-09-17T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Drag on the screen to spawn particles, press enter key to reset.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/09/sink-0#play&quot;&gt;sink-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/weave-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/weave-0"/>
    <title>weave-0</title>
    <published>2012-06-24T00:00:00+09:00</published>
    <updated>2012-06-24T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Basic weaving pattern.
Click on the screen to randomize the pattern.
Press spacebar to pause and resume drawing.
Press enter key to toggle background color.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/weave-0#play&quot;&gt;weave-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/flock-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/flock-0"/>
    <title>flock-0</title>
    <published>2012-06-23T00:00:00+09:00</published>
    <updated>2012-06-23T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;An old sketch. Inspired by a work of Rob Hodgins.
Once a Java applet, now runs smoothly within an HTML canvas element, how cool is that?
However, &lt;em&gt;do not try this on mobile&lt;/em&gt;.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/flock-0#play&quot;&gt;flock-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/tiles-3</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/tiles-3"/>
    <title>tiles-3</title>
    <published>2012-06-18T00:00:00+09:00</published>
    <updated>2012-06-18T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;&amp;quot;Follow the white rabbit.&amp;quot;&lt;/p&gt;

&lt;p&gt;Click on the screen to randomize the pattern.
Press enter key to change the message.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/tiles-3#play&quot;&gt;tiles-3&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/attractor-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/attractor-0"/>
    <title>attractor-0</title>
    <published>2012-06-12T00:00:00+09:00</published>
    <updated>2012-06-12T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;The good ol&amp;#39; Peter de Jong attractor.&lt;/p&gt;

&lt;p&gt;This is a port of my old sketches written in both Processing and Flash back in 2004.
I must mention, however, that they were not my original work,
but just another re-implementation of what already had been done by others.
Check out the links below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://local.wasp.uwa.edu.au/%7Epbourke/fractals/peterdejong/&quot;&gt;by Paul Bourke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.complexification.net/gallery/machines/peterdejong/&quot;&gt;by Jared Tarbell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway, my contribution here, if I may say so, is this simple yet effective colorization method.&lt;/p&gt;

&lt;p&gt;Click on the screen to randomize the four parameters of the attractor.
(Not all combinations generate visible image. If you don&amp;#39;t see anything coming up, just click again.)
Press space bar to pause and resume drawing.
Press enter key to toggle background color.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/attractor-0#play&quot;&gt;attractor-0&lt;/a&gt;&lt;br/&gt;
      


&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/attractor-0#play&quot;&gt;attractor-0-curve&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/orbit-1</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/orbit-1"/>
    <title>orbit-1</title>
    <published>2012-06-10T00:00:00+09:00</published>
    <updated>2012-06-10T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;orbit series can be said to be &amp;quot;circular&amp;quot;-variation of the previous tiles projects.
The idea is to place circles, instead of rectangles, densely onto the circular grid without each overlapping each other.&lt;/p&gt;

&lt;p&gt;Four sketches shown here are mostly identical, only differ in their presentation.
Click on the screen to regenerate the pattern.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/orbit-1#play&quot;&gt;orbit-1-wireframe&lt;/a&gt;&lt;br/&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/orbit-1#play&quot;&gt;orbit-1-sketchy&lt;/a&gt;&lt;br/&gt;
      

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/orbit-1#play&quot;&gt;orbit-1-solid&lt;/a&gt;&lt;br/&gt;
      

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/orbit-1#play&quot;&gt;orbit-1-space&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/orbit-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/orbit-0"/>
    <title>orbit-0</title>
    <published>2012-06-07T00:00:00+09:00</published>
    <updated>2012-06-07T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;It&amp;#39;s a metaphor of planets revoling around a star.
This is actually an ongoing work, nevertheless as it already looks quite nice,
I decided to post it as it is now.&lt;/p&gt;

&lt;p&gt;Click on the screen to regenerate the pattern.
Press enter key to toggle background color.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/orbit-0#play&quot;&gt;orbit-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/circles-3</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/circles-3"/>
    <title>circles-3</title>
    <published>2012-06-04T00:00:00+09:00</published>
    <updated>2012-06-04T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Click on the screen to generate random patterns of tiled circles.&lt;/p&gt;

&lt;p&gt;Although named circles-3, this sketch is actually another varition of &lt;a href=&quot;/2012/06/tiles-1&quot;&gt;tiles-1&lt;/a&gt;.
Initially inspired by a slide full of colorful circles from a TED talk,
&lt;a href=&quot;http://www.ted.com/talks/lang/en/eli_pariser_beware_online_filter_bubbles.html&quot;&gt;Beware online &amp;quot;filter bubbles&amp;quot;&lt;/a&gt;,
which is a great talk by the way, the sketch ended up being this schizophrenic-circle-madness.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/circles-3#play&quot;&gt;circles-3&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/tiles-2</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/tiles-2"/>
    <title>tiles-2</title>
    <published>2012-06-03T00:00:00+09:00</published>
    <updated>2012-06-03T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Randomized display of the lines from the poem 별 헤는 밤 (A night of counting stars) by &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%9C%A4%EB%8F%99%EC%A3%BC&quot;&gt;윤동주&lt;/a&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Yun_Dong-ju&quot;&gt;(Yun, Dong-ju)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Works on Firefox. (Chrome may render texts incorrectly.)&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/tiles-2#play&quot;&gt;tiles-2&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/06/tiles-1</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/06/tiles-1"/>
    <title>tiles-1</title>
    <published>2012-06-01T00:00:00+09:00</published>
    <updated>2012-06-01T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;A variation of &lt;a href=&quot;/2012/05/tiles-0&quot;&gt;tiles-0&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rectangular tiles&lt;/li&gt;
&lt;li&gt;Flexible positioning&lt;/li&gt;
&lt;li&gt;Increased range of color saturation&lt;/li&gt;
&lt;/ul&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/06/tiles-1#play&quot;&gt;tiles-1&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/tiles-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/tiles-0"/>
    <title>tiles-0</title>
    <published>2012-05-31T00:00:00+09:00</published>
    <updated>2012-05-31T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Filling canvas with randomly-positioned elements is &lt;a href=&quot;/2012/04/circles-0&quot;&gt;a no-brainer&lt;/a&gt;.
However, doing so with non-overlapping elements, and making it look good, required a little more work.&lt;/p&gt;

&lt;p&gt;Click on the screen to regenerate the tiles.
(There&amp;#39;s no clever algorithm behind this, so every click should take a while.)&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/05/tiles-0#play&quot;&gt;tiles-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/trees-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/trees-0"/>
    <title>trees-0</title>
    <published>2012-05-28T00:00:00+09:00</published>
    <updated>2012-05-28T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;A binary tree.
I know many people have been drawing these trees for decades
so I guess you&amp;#39;ve probably seen a similar one from somewhere already.&lt;/p&gt;

&lt;p&gt;Anyway, a binary tree.&lt;/p&gt;

&lt;p&gt;There are a number of parameters whose combination determines
the final shape of the tree.
Click on the screen to randomize them.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/05/trees-0#play&quot;&gt;trees-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/circles-2</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/circles-2"/>
    <title>circles-2</title>
    <published>2012-05-26T00:00:00+09:00</published>
    <updated>2012-05-26T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Inspired by an installation I saw yesterday at Gangnam St., Seoul.
Hold down any key and see the circles go amok.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/05/circles-2#play&quot;&gt;circles-2&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/boa-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/boa-0"/>
    <title>boa-0</title>
    <published>2012-05-22T00:00:00+09:00</published>
    <updated>2012-05-22T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;&amp;quot;양 한 마리를 그려줘.&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;...&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;아냐 이건 모자... 아니 아니, 보아뱀이잖아!&amp;quot;&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/05/boa-0#play&quot;&gt;boa-0&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/snake-1</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/snake-1"/>
    <title>snake-1</title>
    <published>2012-05-20T00:00:00+09:00</published>
    <updated>2012-05-20T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Snakes in a cage.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/05/snake-1#play&quot;&gt;snake-1&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/melt-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/melt-0"/>
    <title>melt-0</title>
    <published>2012-05-16T00:00:00+09:00</published>
    <updated>2012-05-16T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;Me, melting.&lt;/p&gt;

&lt;br/&gt;&lt;a href=&quot;https://junegunn.kr/2012/05/melt-0#play&quot;&gt;melt-0-line&lt;/a&gt;&lt;br/&gt;
</content>
  </entry>
  
  <entry>
    <id>https://junegunn.kr/2012/05/polygon-0</id>
    <link type="text/html" rel="alternate" href="http://junegunn.kr/2012/05/polygon-0"/>
    <title>polygon-0</title>
    <published>2012-05-13T00:00:00+09:00</published>
    <updated>2012-05-13T00:00:00+09:00</updated>
    <author>
      <name>Junegunn Choi</name>
      <uri>https://junegunn.kr</uri>
    </author>
    <content type="html">&lt;p&gt;A variation of &lt;a href=&quot;/2012/05/circles-1&quot;&gt;circles-1&lt;/a&g