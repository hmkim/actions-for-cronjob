<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guppy's 난중(개발)일기</title>
    <description>One or more sentences introducing this blog.
</description>
    <link>https://wckhg89.github.io/</link>
    <atom:link href="https://wckhg89.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Jan 2018 08:15:46 +0000</pubDate>
    <lastBuildDate>Thu, 04 Jan 2018 08:15:46 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Git rebase를 이용한 커밋 수정 (Interactive Rebase)</title>
        <description>&lt;p&gt;오늘 회사에서 기술 공유시간을 가지며 &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;의 강력한 기능에 대해 강의를 들었습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;를 통해서 깃 커밋로그를 보다 깔끔하게(커밋 합치기, 커밋 지우기, 커밋 메시지 수정하기) 만들 수 있는 것이 정말 강력한 기능이라는 생각을 했습니다.
듣기만하고 ‘와 좋구나~’하면 결국 언젠가는 다 까먹을것 같아 간단한 깃 연습용 샘플 리파지토리를 만들어서 바로 연습을 해보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;본론&quot;&gt;본론&lt;/h2&gt;

&lt;p&gt;이번에 소개해드릴 내용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;git interactive rebase&lt;/code&gt; 기능을 사용하여 커밋 합치기(&lt;code class=&quot;highlighter-rouge&quot;&gt;Squash&lt;/code&gt;), 지우기 (&lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt;), 수정하기 (&lt;code class=&quot;highlighter-rouge&quot;&gt;reword&lt;/code&gt;)를
사용해보려 합니다. CLI를 사용하여 커밋을 고쳐보고, 많이들 사용하고 계실 SourceTree를 이용해서도 커밋을 고쳐보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;시뮬레이션을 위해서 아래와 같은 브랜치 상황을 만들어 두었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-init-flow.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커밋 메시지를 수정하고 불필요한 커밋은 없애 버리기 위해 의도적으로 &lt;strong&gt;나쁜 커밋 로그&lt;/strong&gt; 를 남겨두었습니다. (&lt;a href=&quot;https://item4.github.io/2016-11-01/How-to-Write-a-Git-Commit-Message/&quot;&gt;좋은 커밋 로그 남기기&lt;/a&gt;에 대한 내용은 이번 내용과 관련이 적어 링크로 남기도록 하겠습니다.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;feature/new-feature&lt;/code&gt; 브랜치에서는 CLI를 이용하여 커밋을 수정해보고, &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;브랜치에서는 SourceTree를 이용하여 커밋을 수정해보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;cli를-이용한-interactive-rebase-를-이용한-커밋-수정&quot;&gt;(CLI를 이용한) INTERACTIVE Rebase 를 이용한 커밋 수정&lt;/h3&gt;

&lt;p&gt;interactive rebase 를 이용하려면 다음과 같은 명령어를 통해 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;&amp;gt; git rebase -i {hash-value}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;지정한 포인트 &lt;code class=&quot;highlighter-rouge&quot;&gt;윗부분&lt;/code&gt;부터 커밋의 수정이 가능해집니다. 저는 ‘텍스트 파일 추가.’부터 커밋을 수정해보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;&amp;gt; git rebase -i 131f311
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 명령어를 넣으면 아래와 같은 그림을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-rebase.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;처음에는 모두 pick 으로 되어 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;보시는 것 처럼 Init commit (131f311) 이후의 커밋에 대해 나와 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;커밋-합치기&quot;&gt;커밋 합치기&lt;/h4&gt;
&lt;p&gt;먼저 커밋을 합쳐보겠습니다. 제가 남긴 커밋중 ‘파일 내용 수정 잇힝’ 과 ‘텍스트 파일 추가’ 이 두가지 커밋은 거의 동일한 내용의 커밋입니다.
따라서 이 두개의 커밋을 합치려고 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Squash : 이 명령어는 두개 또는 그 이상 커밋을 단일 커밋으로 합칠 수 있습니다. 사용할 커밋을 선택한 뒤에 이전 커밋으로 수정됩니다.
  Git은 rebase를 일시 정지하고 다중 커밋으로부터 커밋 메시지를 포함하여 텍스트 에디터를 엽니다.
  만족스럽게 메시지를 수정하고 파일에 저장한 후에 에디터를 닫습니다. Git은 rebase를 재개합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Squash&lt;/code&gt;를 이용하면 적용한 커밋을 기준의로 하위의 커밋(두개 또는 그 이상의 커밋)을 하나의 커밋으로 합칠 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;1 pick 53fd571 텍스트 파일 추가
2 squash eddf9a5 파일 내용 수정 잇힝

... 생략

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이하면 ‘파일 내용 수정 잇힝’과 그 하위 커밋인 ‘텍스트 파일 추가’ 이 두가지 커밋을 합치겠냐고 묻게됩니다.
그러면 알맞은 커밋 메시지로 수정을 해주고 저장후 종료 (:wq!)를 해주면 두개의 커밋이 단일 커밋으로 합쳐지게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;커밋-메시지-수정하기&quot;&gt;커밋 메시지 수정하기&lt;/h4&gt;

&lt;p&gt;두번째로 커밋 메시지를 수정해보겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;reword : pick과 유사하지만 rebase 진행을 일시 정지하고 커밋 메시지를 변경할 기회가 주어집니다. 커밋 내용은 변경되지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;3 reword 5a2754d 퇴근하자
4 reword c1b6a63 오늘은 여기까지

... 생략

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 두가지 커밋은 커밋 메시지가 마음에 들지 않습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;reword&lt;/code&gt; 키워드로 바꾸어준 후 저장종료(:wq!)를 해주면 커밋 메시지 수정창이 나오며,
적당한 커밋메시지로 수정해주면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;커밋-지우기&quot;&gt;커밋 지우기&lt;/h4&gt;

&lt;p&gt;마지막으로 불필요한 커밋을 삭제해 보겠습니다. 저는 ‘-‘과 ‘trash commit’이라는 두개의 불필요한 커밋을 지워보겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;drop : 커밋을 삭제한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;5 drop 5bb1ae7 -
6 drop aec6349 trash commit

... 생략

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이하면 해당 커밋은 사라지게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-middle-flow.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모든 커밋을 수정한후 위와 같이 커밋이 깔끔해진 것을 확인할 수 있습니다.
아직 지저분해 보이는 master 브랜치는 소스트리를 이용하여 수정을 진행해보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;sourcetree를-이용한-interactive-rebase-를-이용한-커밋-수정&quot;&gt;(SourceTree를 이용한) INTERACTIVE Rebase 를 이용한 커밋 수정&lt;/h3&gt;

&lt;p&gt;저도 아직은 CLI를 이용한 깃 관리 보다는 SourceTree를 이용한 관리가 더 편리하여 소스트리를 주로 사용하고 있습니다.
많은 분들이 그러실 것 같은데 이어서 마스터 브랜치에 대한 커밋은 SourceTree 툴을 이용해서 진행해 보겠습니다. (&lt;del&gt;아무래도 Git은 CLI 환경이 더 편리한 부분이 많은것 같아 CLI도 익숙해지고자 노력을 해야겠습니다.&lt;/del&gt;)&lt;/p&gt;

&lt;p&gt;마스터 브랜치는 ‘InitCommit’ 상위 커밋인 ‘텍스트 파일 추가’ 부터 커밋을 수정해보겠습니다.
소스트리를 이용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Interactive rebase&lt;/code&gt;를 이용하고 싶다면, 수정을 원하는 지점의 한단계 아래의 커밋에 우클릭을 하시면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-sourcetree-rebase.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;[Hash 값] 하위 요소 대화식 재배치&lt;/code&gt; 항목이 보입니다. 해당 항목을 선택하시면 하위 커밋인 ‘텍스트 파일 추가’ 부터 커밋을 재편집 할 수 있는 창이 나오게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;커밋-합치기-및-커밋-메시지-수정하기&quot;&gt;커밋 합치기 및 커밋 메시지 수정하기&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-sourcetree-sqash.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 ‘퇴근하자’, ‘파일 내용 수정 잇힝’ 이 두개의 커밋을 합치고자 합니다.
위의 그림과 같이 ‘퇴근하자’ 커밋을 선택 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;이전 것과 합치기&lt;/code&gt;를 눌러주면 두개의 커밋이 위의 그림과 같이 합쳐지게 됩니다.
또한 합쳐진(Squash) 커밋 묶음에 대한 커밋 메시지를 수정하고 싶다면 해당 커밋(합쳐진 커밋)을 &lt;code class=&quot;highlighter-rouge&quot;&gt;더블 클릭&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;메시지 편집&lt;/code&gt;을 통해서 원하는 커밋 메시지로 수정 할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;커밋-지우기-1&quot;&gt;커밋 지우기&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-sourcetree-drop.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 커밋 메시지를 지워보겠습니다. 위의 그림에서 보는 것 처럼 지우고자 하는 커밋을 선택한 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;삭제&lt;/code&gt; 버튼을 눌러주시면 위의 그림과 같이 &lt;del&gt;취소선&lt;/del&gt; 이 해당 커밋에 나타나며 커밋이 지워지게 됩니다. (위 그림에서는 삭제된 상태라 삭제 버튼이 &lt;code class=&quot;highlighter-rouge&quot;&gt;복원&lt;/code&gt; 버튼으로 보입니다.)&lt;/p&gt;

&lt;h4 id=&quot;리베이스중-충돌-병합&quot;&gt;리베이스중 충돌 병합&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-sourcetree-confilct.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;리베이스과정을 완료하면 &lt;strong&gt;종종 (꾀 자주..)&lt;/strong&gt;  충돌이 일어나게 됩니다. 충돌이 일어나면 당황을 하게 되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase --abort&lt;/code&gt;가 막 떠오르며 급격히 소심해지게 되는것 같습니다.(제가 그랬습니다..) 리베이스 과정이 실패하더라도 언제든지 &lt;code class=&quot;highlighter-rouge&quot;&gt;abort&lt;/code&gt; 명령어를 이용해서 되돌릴 수 있으니 걱정하지 말고 병합을 계속 진행하시면 됩니다.
명령어로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt;를 이용하면 되지만 저는 SourceTree를 이용해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-conflict-commit.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;충돌이 난 부분을 위의 그림처럼 해결한 후에 스테이지에 올리기 (&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;)를 해준 후에 아래의 그림처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;재배치 계속&lt;/code&gt; 버튼을 눌러 병합을 계속 진행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/rebase-continue.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상단 네비게이션 바의 동작 &amp;gt; 재배치 계속&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;예제는 간단한 샘플이어서 한번의 충돌 병합으로 쉽게 해결되었지만 실제 복잡한 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;재배치 계속&lt;/code&gt;을 여러번 해주어야 완전히 리베이스가 완료됩니다.
리베이스가 완료되게 되면 아래의 그림과 같은 트리 모양이 나오게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-sourcetree-mid.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;로컬 리파지토리에 새로운 master 브랜치가 생겼습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 커밋 메시지를 수정해주면 새로운 브랜치가 생성되게 됩니다. 그러면 기존 원격 마스터 브랜치와 합쳐주어 커밋을 정리해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cli&quot;&gt;
&amp;gt; git push -f origin head:master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 명령어를 통해서 강제로 푸시를 해주면 아래의 그림과 같이 커밋이 정리되며 리베이스과정이 완료되게 됩니다. (소스트리를 이용한 강제 푸시기능을 사용하는 법을 몰라 저는 강제 푸시는 명령어를 사용하고 있습니다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/git-last-flow.png&quot; alt=&quot;사진&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;최종 완성된 레파지토리의 트리 모양&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;깃을 사용하며 커밋을 수정하다가 혹시나 리파지토리를 망칠까바 넘어갔던 경험이 많이 있습니다.
이번에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Interactive rebase&lt;/code&gt;기능을 사용해보면서 그 기능이 상당히 편리하고 유용하다는 생각을 했습니다.&lt;/p&gt;

&lt;p&gt;참고 문서를 읽어보던 중 이미 원격 저장소에 올라간 브랜치는 &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; 를 하지 않는게 좋다는 말을 많이 보았습니다.
앞으로는 원격 저장소에 푸시를 하기전에 항상 커밋을 살펴보고 협업자가 더 알아보기 쉬운 커밋의 형태로 수정을 거친 후에 원격 저장소에 푸시를 하는 습관을 가져볼 생각입니다.&lt;/p&gt;

&lt;h4 id=&quot;참고-문서&quot;&gt;참고 문서&lt;/h4&gt;

&lt;p&gt;Git 커밋 메시지 작성법:
&lt;a href=&quot;https://item4.github.io/2016-11-01/How-to-Write-a-Git-Commit-Message/&quot;&gt;https://item4.github.io/2016-11-01/How-to-Write-a-Git-Commit-Message/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[번역]GitHub / Advanced Git / 대화형 Rebase :
&lt;a href=&quot;http://minsone.github.io/git/github-advanced-git-interactive-rebase&quot;&gt;http://minsone.github.io/git/github-advanced-git-interactive-rebase&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jan 2018 22:55:01 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/rebase</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/rebase</guid>
        
        
        <category>깃</category>
        
      </item>
    
      <item>
        <title>Reactive</title>
        <description>&lt;h1 id=&quot;리엑티브-프로그래밍&quot;&gt;리엑티브 프로그래밍&lt;/h1&gt;

&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;리액티브 프로그래밍에 대해 얼마전 새롭게 공부를 시작했습니다. 대학생 시절 객체지향이라는 패러다임을 받아들이기 까지 꾀나 긴 시간이 걸렸습니다.
리액티브 프로그래밍 또한 새로운(?) 패러다임이라고 생각합니다. 객체지향 프로그래밍을 공부하면서 경험한 바로는 객체지향이라는 패러다임이 원하는(의도하는)
프로그래밍 스타일을 이해한 후에 (&lt;del&gt;아직도 객체지향 패러다임을 완벽히 이해하지는 못했지만&lt;/del&gt;) 문법을 학습하니 더 빠르게 와닿았던 기억이 납니다.
개인적으로 생각하기에 리액티브 프로그래밍에 대해 기본적인 문법(사용법?)을 알기전에 이 패러다임에 대해서 이해하고 그 이후에 문법(사용법)을 공부해야 더 빠르게 와닿을 것 같다고 생각을 해서 정리를 해보고자 합니다.&lt;/p&gt;

&lt;p&gt;이번 글에서 다루고자 하는 항목은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;리액티브 프로그래밍은 무엇인가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;옵저버 패턴에 대해서&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;리액티브 스트림 인터페이스에 대해서&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;순으로 알아보려 합니다. 아직까지 함수형 프로그래밍에 대한 개념이 부족하여 이 부분은 생략하고(후에 공부하면 추가하도록 하고) 이번에는 리액티브 프로그래밍에 초점을 두어 정리를 해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;본론&quot;&gt;본론&lt;/h2&gt;

&lt;h3 id=&quot;리액티브-프로그래밍은-무엇인가&quot;&gt;리액티브 프로그래밍은 무엇인가&lt;/h3&gt;

&lt;p&gt;리액티브 프로그래밍이 무엇인지를 검색해보니 아래와 같은 정의를 찾아볼 수 있었습니다. (&lt;a href=&quot;https://gist.github.com/casamia918/93b8db69beb9ee06b92a96b2a234d48e&quot;&gt;참고_헝_링크&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Reactive programming 은 비동기 데이터 스트림으로 프로그래밍을 하는 겁니다.
Reactive programming is programming with asynchronous data streams.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정의에서 보는것 처럼 리액티브 프로그래밍에 대해서 검색해보면 항상 함께 등장하는 키워드들이 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;함수형 프로그래밍&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;비동기&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;논블록킹 IO&lt;/code&gt; 등 여러가지 키워드들이 함께 섞여서 나와 리액티브 프로그래밍이 상당히 어렵게 다가오고 쉽게 이해되지 않는것 같다는 생각을 했습니다.&lt;/p&gt;

&lt;p&gt;따라서 이번글에서는 이러한 키워드들이 왜 리액티브 프로그래밍이라는 개념에 함께 등장하는지 그리고 조금더 리액티브 프로그래밍에 집중을 해보고자 합니다.&lt;/p&gt;

&lt;p&gt;앞서 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;비동기 데이터 스트림으로 프로그래밍을 한다.&lt;/code&gt;를 조금 더 생각해보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;실시간으로 반응을 하는 프로그래밍&lt;/code&gt; 이라고 생각할 수 있습니다.
다음 영화 검색창에 단어를 하나씩 입력할 때마다 관련 검색어들이 자동완성으로 바로바로 제시되는 것을 예로 들 수 있을것 같습니다.(실제로 RxJS를 통해서 구현하셨다고 알고있습니다. &lt;strong&gt;갓존&lt;/strong&gt; - &lt;a href=&quot;http://tech.kakao.com/2017/01/09/daummovie-rxjs/&quot;&gt;소개글링크&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;먼저 함수형 프로그래밍이라는 키워드가 왜 리액티브 프로그래밍의 개념에 같이 나타나는지 생각해보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;실시간으로 반응을 하는 프로그래밍&lt;/code&gt;을 하기 위해서는 명령헝 프로그래밍(하나의 메소드에서 여러 분기를 주어 로직을 처리하는) 보다는 함수형(map, filter, reduce 등) 프로그래밍으로 작성을 하는 것이 많은 부분에서 효율적일 것입니다. 그래서 리액티브 프로그래밍을 설명할때 함수형 프로그래밍 이라는 키워드가 함께 따라다니는 것이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;또한 실시간으로 반응하는 프로그래밍을 위해서는 어떠한 사용자 인풋이 들어오면 이를 처리하는데 여러 스레드들이 비동기적으로 처리를 해주어야만 실시간으로 반응을 할 수 있을 것입니다.
이러한 이유로 &lt;code class=&quot;highlighter-rouge&quot;&gt;비동기&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;논블록킹 IO&lt;/code&gt;라는 키워드들이 함께 등장하는 것이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;사용자가 입력을 줄때마다 즉각적으로 반응을 하려면, 프로그램이 지속적으로 값을 관찰(Observe)해야하고, 값에 변화가 일어날 때마다 특정 연산이 수행되어야 합니다.
이러한 패턴이 &lt;code class=&quot;highlighter-rouge&quot;&gt;옵저버 패턴&lt;/code&gt;입니다.(&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=jdub7138&amp;amp;logNo=220983291803&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F&quot;&gt;참고링크&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&quot;옵저버-패턴&quot;&gt;옵저버 패턴&lt;/h4&gt;

&lt;p&gt;그럼 옵저버 패턴에 대해 간단히 예제 코드를 보면서 설명을 해보겠습니다. (개발자는 코드를 보면서 이야기를 해야합니다. - &lt;strong&gt;갓워런&lt;/strong&gt;)
예제는 자바 Util 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt;를 이용해서 작성했습니다.&lt;/p&gt;

&lt;p&gt;코드를 보기전에 앞으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;구독(Subscribe)&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;발행(Publish)&lt;/code&gt;이라는 단어를 많이 사용할 것입니다.
앞서 옵저버 패턴을 설명드리기 전에 말씀드렸던 것 처럼 옵저버 패턴이 이러한 단어와 매우 밀접하기 때문입니다.&lt;/p&gt;

&lt;p&gt;먼저 Observable 클래스는 Observer 클래스들을 관리하는 클래스입니다.
Observable 클래스를 통해서 Observer 클래스들을 구독시킬(?) 수 있고 구독중인 Observer들에게 소식을(이벤트를) 발행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그리고 Observer 클래스는 구독중인 객체에서 발행을 해주는 이벤트(소식)을 받아서 이에 따른 비지니스 로직을 수 행 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 코드를 한번 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// 소식을 발행하는 발행자에 해당합니다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuppyPublisher&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GuppyPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Honggu Kang&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ZUM internet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tired&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skills&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Kakao corp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;happy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;infoChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;guppy have a new job.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sad&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;infoChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;guppy ate 떡국&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSkill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;infoChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;guppy learn new skill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reactJS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;infoChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;guppy learn new skill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reactive-stream&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;infoChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[END] guppy learn new skill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;// 구독자들에게 소식(이벤트)를 발행합니다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;infoChanged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 구독자들에게 소식(이벤트)를 발행합니다.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notifyObservers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 구독자(Observer 객체)들을 추가합니다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aboutGuppy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;company : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// 소식을 구독하는 구독자에 해당합니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JohnSubscriber&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JohnSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 소식(이벤트)이 발행되면 이에 따른 비지니스 로직을 수행합니다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oh..? - {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parsingInfoForEndSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wow!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GuppyPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GuppyPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aboutGuppy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=========== 9분선 =============&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parsingInfoForEndSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;^(\\[([a-zA-Z|\\s]*)(\\/[a-zA-Z]*)?\\])?(.*)$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 두번째 괄호&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;END&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 본것 처럼 실시간으로 반응하는 프로그래밍(리액티브 프로그래밍)을 위해서는 옵저버 패턴이 상당히 유용한 패턴이라는 것을 알 수 있습니다.
그러나 자바 Util 클래스에는 몇가지 한계점이 있습니다.&lt;/p&gt;

&lt;p&gt;구독자(Observe 객체)는 발행자(Observable 객체)의 상태를 알 수 없습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;예제 코드에서 보는 것 처럼 발행자가 던저주는 메시지를 해석해서 발행자의 상태값을 추축해야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;또한 발행자에게서 어떤 오류가 발생했을때 이를 알수 없기때문에 이에 적합한 예외를 처리하기 어렵습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 한계점을 개선하고자 그리고 리액티브 프로그래밍을 하기 위해 표준을 만들고자 나온 것이 Reactive-stream 이라는 인터페이스 입니다.&lt;/p&gt;

&lt;h4 id=&quot;리액티브-스트림&quot;&gt;리액티브 스트림&lt;/h4&gt;

&lt;p&gt;리액티브 스트림은 리액티브 프로그래밍에 대한 표준을 정의한 인터페이스입니다. (&lt;a href=&quot;http://www.reactive-streams.org/&quot;&gt;참고링크&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Reactive Stream은 매우 낮은 수준의 계약으로, 몇 안되는 Java 인터페이스(와 Technology Compatibility Kit)로 표현되지만,
다른 언어에도 적용될 수 있다. 이 인터페이스들은 명시적인 배압(back pressure)과 함께
배포자(Publisher)와 구독자(Subscriber)를 위한 기본적인 빌딩 블럭을 표현하는데,
상호 정보교환을 하는 라이브러리들을 위한 일반적인 언어를 만든다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리액티브 스트림의 스팩에는 4가지 인터페이스 스팩이 나옵니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Subscriber&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Publisher&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Subscription&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Processor&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예제 코드를 통해서 리액티브 스트림의 스팩에 대해 조금 살펴보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StackSubscriber&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext - {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onError - {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;COMPLETE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 Subscriber 인터페이스는 앞서 살펴본 자바 Util 클래스의 Observer 클래스와 유사한 역할을 담당합니다.
상속받은 메소드들을 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext()&lt;/code&gt;메소드가 Observer 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;update()&lt;/code&gt; 메소드와 유사한 역할을 함을 알 수 있습니다.
추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;onError()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onComplete()&lt;/code&gt; 메소드들을 통해서 자바 Util 클래스에서 처리하기 힘들었던 발행자의 상태에 대해서도 쉽게 파악이 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StackPublisher&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StackPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;initStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Request : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;notifyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;notifyComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;notifyNextEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notifyNextEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notifyComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notifyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  0 이상의 숫자를 넣어야 합니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리고 Publisher 인터페이스는 자바 Util의 Observable 클래스와 유사한 역할을 담당합니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe()&lt;/code&gt; 메소드를 통해서 Subscriber들을 등록하고 해당 객체들을 관리합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 Subscription 인터페이스는 구독자(Subscriber) 클래스와 발행자(Publisher) 사이를 연결해주는 인터페이스입니다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;저는 리액티브 프로그래밍을 RxJava 라는 구현체를 통해서 학습을 할 예정입니다.
찾아본 바로는 RxJava가 2.0 이상의 버전으로 올라가면서 Reactive-stream 표준 인터페이스를 통해서 구현을 했다고 합니다.&lt;/p&gt;

&lt;p&gt;이제막 리액티브 프로그래밍이라는 패러다임이 발을 담군 아주아주아주아주x100 초심자적 입장에서 제가 이해한 개념을 간략히 정리해보았습니다.
앞으로 RxJava 라는 구현체를 통해서 조금 더 리액티브 프로그래밍이라는 패러다임에 대해서 많이 알게 되었으면 좋겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;키워드-내가이해한거-위주로&quot;&gt;키워드 (내가이해한거 위주로)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수형 프로그래밍
    &lt;ul&gt;
      &lt;li&gt;filter, map ,reduce&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;리액티브 프로그래밍&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;비동기, 옵저버, 콜백&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FRP&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;RX (비동기 함수형)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;http://wiki.sys4u.co.kr/pages/viewpage.action?pageId=7766896&lt;/p&gt;

&lt;p&gt;https://m.blog.naver.com/PostView.nhn?blogId=jdub7138&amp;amp;logNo=220983291803&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F&lt;/p&gt;

&lt;p&gt;https://gist.github.com/casamia918/93b8db69beb9ee06b92a96b2a234d48e&lt;/p&gt;

&lt;p&gt;https://medium.com/@LIP/rxjava-29cfb3ceb4ca&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/reactive</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/reactive</guid>
        
        
      </item>
    
      <item>
        <title>PLAY NODE 2017</title>
        <description>&lt;p&gt;PLAY NODE 2017 방문 후기 입니다.&lt;/p&gt;

&lt;h1 id=&quot;typescript-express-decorator-angular&quot;&gt;Typescript, Express, Decorator, Angular&lt;/h1&gt;

&lt;h3 id=&quot;타입스크립트-제가-한번-써봤습니다-김병진님-flitto&quot;&gt;타입스크립트 제가 한번 써봤습니다. (김병진님 Flitto)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자바스크립트는 타입이 없어서 타입에러가 많이 발생한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문제점 : 함수의 인풋과 아웃풋이 어떤 것인지 기존 코드를 보고 유측하기가 어렵다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;해결책 : 타입을 typeof로 체크해주기 시작.. (코드가 더러워지기 시작)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Front-End&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Typescript를 도입하기로 결정&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;타입스크립트는 변수에 타입을 지정해줄 수 있다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컴파일 과정에서 타입이 다른것은 커파일 에러가 발생한다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인풋 타입 정리&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;결합과 상속을 통해서 인풋 타입을 정리하기 시작&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;IDE 딴에서 인풋타입을 체크해주니 타입 에러를 노출 시켜줘서 편리했다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;아웃풋 타입 정리&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Observable(userInterface)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Back-End (Node + Express)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;타입스크립트로 인풋 아웃풋에 대해서 타입을 정의&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;백엔드와 프론트앤드에 중복되는 타입이 많아짐&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;백엔드와 프론트앤드에서 공유하는 패키지를 만들어서 해당 패키지에 중복된 타입을 모아 두기 시작&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;일관된 형태의 데이터로 프론트앤드 백앤드 통신이 가능해짐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자바스크립트 @decorator&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;타입스크립트에서는 @decorator 를 잘 지원해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TS-EXPRESS-DECORATOR&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Express 프레임워크에서 타입스크립트의 @decorator 를 사용하기 편하게 Wrapping 한 프레임워크&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;데코레이터를 사용하면서 관심사의 분리가 가능해짐&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;의존성 주입이 가능해짐&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;@Service로 지정된 데코레이터를 컨트롤러의 컨스트럭터에서 인젝션을 해줌&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;데코레이터를 사용하면 스프링 DI 컨테이터처럼 AUTO WIRED 기능을 사용할 수 있다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;데코레이터를 미리 읽어서 데코레이터가 표시된 class들을 빈처럼 만드는게 가능함&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;이러한 class를 만드는 과정에서 API 문서화 같은 작업도 가능함 (뭔가 module이 있을듯?)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;왜 타입스크립트?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;타입스크립트는 컴파일 언어이기 때문에 컴파일 과정이 추가되어서 사소한 실수를 방지할 수 있다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;타입을 정의할 수 있게되면서 IDE 딴에서 미리 에러를 찾아 낼 수 있어서 개발 생산성이 높아졌다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개인적인 생각&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;어디선가 타입스크리틑를 사용하면 자바처럼 자바스크립트를 쓸 수 있다는 말을 들었는데 (객체 지향적으로)
그런 부분에서 프론트앤드와 백앤드를 객체지향적으로 사용할 수 있게 되는게 매력적일 것 같다.(원래 내가 모듈화를 좋아함)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그런데 한가지 걱정되는게 타입스크립트가 브라우저 서포트를 어디까지 해줄지가 의문인데 조사해봐야겠다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;타입스크립트도 웹팩 통해서 바벨컴파일(?) 돌리면 ES 하위 버전으로 할 수 있겠지?&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;typescript와-flow&quot;&gt;Typescript와 Flow&lt;/h1&gt;

&lt;h3 id=&quot;자바스크립트-코드에-정적-타이핑-도입하기-안희종님-하이퍼커넥트&quot;&gt;자바스크립트 코드에 정적 타이핑 도입하기 (안희종님 하이퍼커넥트)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정적 타입 시스템의 장점&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;버그에 대한 처리비용이 적은 쪽에서 처리가 가능하다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;자바스크립트에 정적 타입 시스템 도입시 효과에 대한 연구&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;깃헙에 공개된 이슈중 타입 시스템으로 잡을 수 있었던 버그의 비율은 얼마나 되는지에 대해서 조사&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;탐지 가능한 버그&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;타입체커가 버그를 고치는 커밋 직전의 코드베이스를 통과시켜주지 않는다면, 해당 버그는 정적 타입 시스템으로 탐지 및 예방할 수 있었을 것이다.&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;실험결과 : 저장소에 들어오는 버그중 10% 이상 버그를 줄 일 수 있다.&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;버그가 안발생하는게 아니고 처리 가능한 시점을 앞단계로 옮겨서 처리 비용을 줄일 수 있다.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;코드와 더 밀접히 연결된 문서화가 가능해진다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;리펙토링이 용이해진다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;타입 시스템을 통해서 더 안전하게 더 빠르게 개발이 가능해진다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그럼 어떤걸 선택해서 도입해야해?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;크게 두가지 타입스크립트, 플로우 두가지 큰 옵션이 존재한다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;새로운 언어를 만든것이 아니라 기본 자바스크립트 위에 올릴 수 가 있다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;기본적으로 두 시스템이 많이 비슷하다. (문법적으로)&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그래서 뭘 써야할까&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;두개다 괜찮은 시스템이라 생각, 문서를 꼼꼼히 읽어보고 프로젝트의 성격에 맞는걸 잘 골라서…
(뻔한 이야기…)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;발표자 : 타입스크립트를 쓰세요!&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;왜 타입스크립트를 써야 하나요?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;안전함과 편리함 사이 설득력 있는 트레이드 오프&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;자바스크립트는 기본적으로 느슨한 언어이다 그래서 너무 안전성을 따지는 Flow 같은 경우에는 귀찮은 경우가 많아진다. -&amp;gt; 개발 생산성이 떨어진다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;훌륭한 IDE 서포트&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;훨씬 거대한 커뮤니티 (개인적으로 가장 중요한 이유)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떻게 도입해야 하나요?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Plain JS 사용중인 프로젝트 (나나나)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;타입스크립트 설치 및 타입 정의&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;npm install -g typescript&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;라이브러리 my-cool-lib를 타입 의존성과 함꼐 설치&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;tsconfig.json&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;webpack 과의 통합&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;ts-loader&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;awesome-typescript-loater&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;점진적 타이핑&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;파일별 적용&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;JS 에서 TS 임포트&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;웹팩 통해서 하는거 추천&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;한 파일 내 부분 적용&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;타입 추론&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;타입 강제&lt;/p&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Flow를 사용중인 프로젝트&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;교훈&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;생각만큼 어렵지는 않다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;유용한 전략 : 이슈를 해결할 때 마다 관련된 파일을 타입스크립트로 바꾼다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;리팩토링이 너무 쉬워진다&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;babel-loader + ts-loader&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;폴리필을 쓰면 전역을 오염시켜서 문제가 발생할 소지가 있다. (JS + TS 같이 사용하는 동안에는 주의)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개인적인 생각&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;타입스크립트는 타입스크립트 컴파일러를 거쳐서 자바스크립트로 바뀔텐데 이게 ES6 문법 이상일 것 같다.
(우연히 발표자 분을 카페에서 만나서 말씀을 나눴는데 그런 이슈가 있어 하위 브라우저 서포트 이슈가 생길것 같다고 하신다.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그럼 babel-loader 를 거쳐서 ES5 문법으로 바꿔주면 될텐데 babel-loader가 지원하지 않는 부분이 존재할 것 같다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이런 부분에 대해서 발표자분과 말씀을 나눴는데, babel-loader가 지원하는 부분이 어디인지 확인이 가능하다 하니 알아봐야겠다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;타입스크립트 꼭 한번 써보고 싶다 프론트앤드를 자바처럼 짤 수 있다면 진짜 진짜 편할거 같다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nodejs-api-서버-성능-개선기&quot;&gt;Node.js API 서버 성능 개선기&lt;/h1&gt;

&lt;h2 id=&quot;성능-테스트를-위한-준비--도구-결과-분석-변정훈님---스마트-스터디&quot;&gt;성능 테스트를 위한 준비 / 도구/ 결과 분석 (변정훈님 - 스마트 스터디)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인증 API 서버 (회원가입 / 로그인 / 권한부여 / 회원 정보 관리)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;왜 성능 테스트를?&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;서버 하나의 한계 파악&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;병목구간 확인&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;코드 개선 후 비교&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;UNIT TEST 에서도 확인 가능하지만 실제 트래픽과 유사한 성능이 궁금&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;성능 테스트 도구&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;사용자 시나리오로 작성&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;대량 트래픽 조절 가능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;가능하면 Node.js로 사용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Node.js작성된 부하 테스트 도구 : Artillery&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;기능적으로 필요한 부분이 많이 되어 있다고 생각&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;yml File로 설정과 시나리오를 작성할 수 있다.&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;어떤 기간동아 얼마 만큼의 액티브 유저가 있는지 설정&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;회원가입 하고 로그인하고 회원정보 조회한다 등의 시나리오 작성&lt;/p&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;package.json에 아트롤리 테스트 돌릴 수 있도록 scripts 쪽에 작성ㄴ&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;아트롤리가 리포트 를 만들어 준다.&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;차트나 데이터 같은 리포트 만들어줌&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;리포트 json을 떨궈주는데 이걸 보기 좋게 HTML로 만들어 주는 기능도 제공한다.&lt;/p&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;table&gt;
                  &lt;tbody&gt;
                    &lt;tr&gt;
                      &lt;td&gt;Node.js APM 도구 : New Relic, N&lt;/td&gt;
                      &lt;td&gt;Solid, Rising Stack&lt;/td&gt;
                    &lt;/tr&gt;
                  &lt;/tbody&gt;
                &lt;/table&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;대부분 유료&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;New Relic 사용 -&amp;gt; 고급기능을 제외하고는 무료로 사용 가능 (기본적인 모니터링은 가능)&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;New relic 배포 플래그&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;tip : package.json의 script 에 pre / post 키워드 붙이면 npm run xxx 하면 앞뒤로 해당 스크립트 실행해준다.&lt;/p&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;테스트 서버 구성&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;AWS 사용&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;Elastic Load Balancer&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;ECS Cluster : docker&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;RDS&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;DNS로 쓰일 Route53 은 성능에 영향이 없을 것이라 테스트 서버에는 구성하지 않음&lt;/p&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;vagrant&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;vagrant 사용하면 AWS에 EC2 인스턴스를 동일한 환경으로 만들 수 있다.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;ansible (뭔지 모르겠어.. 공부하자..)&lt;/p&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;튜닝&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;성능이 생각 이하라 튜닝 작업&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;클러스터 인스턴스 변경&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;컨테이너 CPU 메모리 조정&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;DB Pool 사이즈 조정&lt;/p&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;테스트 결과&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;한개 시나리오당 20초 정도&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;다 200대 응답이 오는건 아니다.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;굳이 성능 테스트를 하려고 한 이유&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;개발 하기도 바쁜데 굳이 성능 테스트?&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;Node.js 버전을 8로 올리고 싶어서&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;V8 엔진 업데이트로 성능 향상&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;도커에 노드 버전만 다르게 해서 완전 동일한 환경에서 성능 테스트 비교&lt;/p&gt;

                        &lt;ul&gt;
                          &lt;li&gt;노드8이 훠얼씬 빠르다.&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Heap dump&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;메모리 누수 추적이 어렵다.&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;일주일마다 서버 재시작 (ㅋㅋ)&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;크롬 개발자도구에서 Take Heap snapshot을 사용하여 할 수 있다.&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;Heapdump&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;shallow size&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;retained size&lt;/p&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nodejs로-협력적-멀티태스킹-처리하기&quot;&gt;Node.js로 협력적 멀티태스킹 처리하기&lt;/h1&gt;

&lt;h2 id=&quot;nodejs-멀티태스킹-처리하기-박일호님---카카오&quot;&gt;Node.js 멀티태스킹 처리하기 (박일호님 - 카카오)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;고백&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;적다고 할 수 없는 숫자의 데이터 마이그레이션 경험담&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마이그레이션을 하게된 이유&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;다음 자동차 서비스를 담당하게 됨&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;역할 1 : 오래된 기사를 마이그레이션 해라&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;요구사항 분석&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;구문서 파싱 및 가공&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;어뷰징 제거&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;연결된 정보들 처리 (예를들어 댓글)&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;이 모든것을 안전하게 처리&lt;/p&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;어떻게&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;DB를 읽고, 쓰고&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;파일을 읽고, 쓰고&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;API를 호출하고&lt;/p&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;결론&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;비동기 요청들을 순차적으로 안전하게 처리해야한다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;왜 노드로 마이그레이션을 ?&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;노드를 좋아해서&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;익숙하고, 충분히 마이그레이션 용도로 사용이 가능할 것 같아서&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;시뮬레이션&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;한개의 아티클르 처리하기 위해 필요한 비동기 요청 수는&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;최소 8개 + 댓글 수 * 2 개의 리퀘스트가 필요&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;그러나 실제 효율은 절반 이하&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;댓글이 많은 기사에서는 효율이 많이 떨어진다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;해결책&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;병렬처리로 속도를 높이거나&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;프로세스의 효율을 높이거나&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;결국 동시성 문제를 해결해야 하는상황&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;메시지 큐를 사용해 스케쥴링하고 병렬처리 하기로 결정!&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;구현을 하면서&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;비동기를 처리하는 대표적인 방법&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;CallBack&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;Callback Hell…&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Promise&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;가독성 좋아지고 예외처리 가능해진다.&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;promise.all 를 사용해서 순서를 보장&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;promise 를 써도 괜찮긴 하지만 …&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;프로미스 객체가 메모리에 남아서 문제가 생긴다.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;메모리 이슈를 어떻게 풀까&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;협력적 멀티 태스킹&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;일종의 시분할 방식&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;운영체제의 개입없이 task 가 독립적으로 CPU 사용&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;미사용시 자발적 CPU 반환&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;크리티카 섹션을 보호하기 위한 락이나 세마포 불필요&lt;/p&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;구현방법의 선택&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;Coroutine&lt;/p&gt;

                    &lt;ul&gt;
                      &lt;li&gt;
                        &lt;p&gt;ES7 : async, await&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;Node.js 7.6 부터 공식적으로 지원&lt;/p&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;promise를 Wrapping한 것이라 promise 보다 느리다.&lt;/p&gt;

                        &lt;ul&gt;
                          &lt;li&gt;
                            &lt;p&gt;그러나 여러개를 처리하는 쪽에서는 효율이 나쁘지 않다.&lt;/p&gt;
                          &lt;/li&gt;
                          &lt;li&gt;
                            &lt;p&gt;병렬로 처리하기 때문에 처리하는 갯수가 많아질 수록 효율이 높아진다.&lt;/p&gt;
                          &lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;
                        &lt;p&gt;장점&lt;/p&gt;

                        &lt;ul&gt;
                          &lt;li&gt;
                            &lt;p&gt;코드 가독성이 좋아짐&lt;/p&gt;
                          &lt;/li&gt;
                          &lt;li&gt;
                            &lt;p&gt;대규모 처리시 안전함&lt;/p&gt;
                          &lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 09 Nov 2017 22:55:01 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/playnode2017</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/playnode2017</guid>
        
        
        <category>세미나</category>
        
      </item>
    
      <item>
        <title>어느새 2년차 개발자가 되어 돌아보는 한해</title>
        <description>&lt;p&gt;1년 회고록을 작성한게 얼마전 같은데 벌써 현업에서 개발을 시작한지 2년이 조금 넘었습니다. 어느새 2년차 개발자가 되어버렸네요… 그동안 나는 어떻게 살아왔고, 앞으로는 어떻게 살아갈지 정리를 해야할 것 같아 긴 추석연휴에 생각을 한번 정리해보고자 합니다. (&lt;del&gt;사실 요즘 크게 목적이 없이 살고 있는것 같아 조금 겁이나기도 합니다.&lt;/del&gt;)&lt;/p&gt;

&lt;h3 id=&quot;많은-경험을한-한해&quot;&gt;많은 경험을한 한해&lt;/h3&gt;

&lt;p&gt;정말 많은 경험을 한 한해였습니다. 연차에 비해서 꾀나 큰 서비스를 맡게 되었고, 경험도 많고 훌륭한 사수를 만나 많이 배웠던 한해였던것 같습니다.&lt;/p&gt;

&lt;p&gt;저는 ‘줌인터넷’이라는 포털서비스를 하는 회사에서 ‘뉴스줌’이라는 서비스를 사수와 둘이서 맡아서 진행했습니다. 뉴스줌이라는 서비스를 하며 약 세차례(총선, 리우올림픽, 대선) 정도의 큰 이벤트도 경험할 수 있는 기회가 있었고, 뉴스 서비스를 운영하며 포털 뉴스가 돌아가는 큰 그림도 알게 되었습니다. 또한 (&lt;del&gt;실제로 서비스 오픈까지는 보지 못하고 나오게 되어많이 아쉽지만&lt;/del&gt;) 새로운 뉴스 서비스를 준비 하면서 서비스 오픈을 위해서 초기 아키텍처링부터 개발까지 경험을 해 볼 수 있는 정말 많은 기회가 있었습니다.&lt;/p&gt;

&lt;p&gt;사실 지금 돌아보면 많이 바쁘게 회사업무를 했던것 같습니다. 엄살처럼 들릴 수도 있겠지만 그 당시에는 기본적으로 퇴근시간이 1~2시간 정도 늦었고, 이벤트를 준비할때는 잦은 야근을 했던것 같습니다.(물론 회사가 야근을 강요하는 분위기는 절대 아니며 야근을 했다해도 다음날 업무에 지장을 줄 정도의 야근은 아니었습니다.)&lt;/p&gt;

&lt;p&gt;회사 업무에 시달리다 보니 평일에는 집에서 까지 개발을 하고 싶지는 않았고, 주말에는 쉬고싶다는 생각이 많았습니다. 때문에 개인적으로 공부하고 싶은 것들을 할 수 있는 시간이 부족해서 많이 힘들어 했던 기억이 납니다. 그러나 지금 다시 생각해보면, 저 정도의 연차에 이렇게 많은 경험을 해본 것이 어떻게 보면 저에게는 더 큰 성장의 밑거름이 되지 않았을까 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;그래도-개인공부를-하고자-노력한-한해&quot;&gt;그래도 개인공부를 하고자 노력한 한해&lt;/h3&gt;

&lt;p&gt;핑계이고 엄살일 수도 있지만, 회사업무에 치이다 보니 개인공부에 많이 소홀해하며 지냈습니다.(시험기간에 노는것 처럼 항상 마음한켠이 불안하긴 했습니다.) 이러한 불안감 때문일지 그래도 개인공부를 해야겠다고 생각을 했습니다. 도저히 집에가면 공부를 안하니 집에가지 말자는 생각을 했고, 퇴근후 카페에서 공부를 하다 들어가곤 했습니다. 그래도 누군가 잡아주는 사람없이 혼자서 하다보니 자꾸만 안하게되고 나태해지게 되었습니다.&lt;/p&gt;

&lt;p&gt;그러던 중 (지금은 정말 존경하고 꾀나 친하다고 생각하는 형이되었지만) 전 직장 선배께서 ‘패스트캠퍼스’라는 교육기관을 알려주셨고 퇴근후 그곳에서 개발을 공부하자고 생각했습니다. 가격이 정말 많이 부담되었지만 그래도 해야겠다는 생각이 더 컷던것 같습니다.&lt;/p&gt;

&lt;p&gt;‘패스트캠퍼스’에서는 총 2번의 강의를 들었습니다. ‘노드JS’와 ‘자바 웹개발’ 두가지 교육과정을 들었는데 결과적으로는 정말로 성장하는데 많은 도움이 되었습니다. 특히나 ‘자바 웹개발’ 과정을 통해서는 스터디도 만들게 되어 지금까지도(지금은 제주도 파견을 나와있어 참여하지 못하고 있지만) 주말에 모여서 스터디를 하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;정말-좋은분들을-만난-한해&quot;&gt;정말 좋은분들을 만난 한해&lt;/h3&gt;

&lt;p&gt;‘줌인터넷’에 2년가까이 다니며 정말 좋은 선배, 동기, 후배들을 만났습니다. 돌이켜 생각해보면 회사분들과 이렇게까지 가깝게 지냈다는게 신기할 정도로 정말 좋은분들을 만나 행복하게 생활했습니다.&lt;/p&gt;

&lt;p&gt;서비스를 개발하며 항상 같이 고민해주시고 조언해주시던 같은 팀 선배분들과 개발자로서 성장할 수 있도록 방향을 제시해주시고 자극을 주시던 선배 개발자분 그리고 항상 옆에서 자극이 되어주고 같이 고민해주고 개발 이야기를 즐겁게 나눌 수 있었던 동기 마지막으로 부족한 저를 잘 따라주고 자극이 되어준 고마운 후배분들 모두 저에게는 소중한 사람들이었습니다.&lt;/p&gt;

&lt;p&gt;그리고 외부활동을 통해서도 정말 좋은 분들을 많이 만났습니다. ‘패스트캠퍼스’에서 인연이된 박재성 교수님께서는 직접 회사에도 찾아와 주셔 많은 좋은 말씀을 해주셨고 몇차례 개인적인 고민 상담과 방향제시도 해주셨던 정말 감사한 인연이었습니다.&lt;/p&gt;

&lt;h3 id=&quot;새출발을-위한-결심&quot;&gt;새출발을 위한 결심&lt;/h3&gt;

&lt;p&gt;정말 좋은사람들과 일을 하고 있었고 많은 경험을 하며 즐겁게 회사생화을 하고 있었지만 조금 더 큰 곳에 나가고 싶다는 욕심은 항상 가지고 있었던것 같습니다. 우연히 제가 지원하고 싶은 포지션에서 개발자 채용공고가 나와있었고 한번 도전해보고 싶었습니다.&lt;/p&gt;

&lt;p&gt;면접을 통해서 부족한게 무엇인지 알고싶었고, 만일 운좋게 이직에 성공한다 하면 그곳에서 저의 위치는 어느정도 인지도 궁금했습니다.&lt;/p&gt;

&lt;p&gt;그렇게 새출발을 결심하게 되었고, 리쿠르팅데이에 참여하여 이력서 첨석도 받으며 나름 꼼꼼히 준비를 했습니다. 서류에 합격을 하게 되었고, 1차 면접, 2차 면접까지 합격을 할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;면접을 진행하며 많이 부족하다는 생각을 했는데 정말 다행히도 최종 합격을 하게 되었습니다. (이직후 들어보니 다양한 뉴스 이벤트 경험을 높게 평가해 주셨다는 말씀을 들었습니다.)&lt;/p&gt;

&lt;p&gt;이직이 확정되고 이전 직장에서 생활을 잘 마무리하고자 정말 노력했습니다. (결과적으로는 아쉬운 부분이 더 많은것 같습니다.) 실제로 이직까지 약 1주일정도 밖에 휴식하지 못했고 준비하고 있던 서비스를 릴리즈까지 하고 나가고 싶어서 노력했지만 아쉽게도 그러지는 못했습니다. 정말 이 부분이 지금도 너무 죄송하고 아쉽습니다.&lt;/p&gt;

&lt;h3 id=&quot;새로운-환경&quot;&gt;새로운 환경&lt;/h3&gt;

&lt;p&gt;그렇게 전 직장을 마무리하고 지금은 ‘카카오’라는 새로운 회사에서 ‘다음 자동차’서비스를 맡게되어 일을 시작한지 2개월이 조금 지나고 있습니다. 아직 2개월 밖에 안되어 제대로 된 업무 파악을 하지는 못했습니다. 그래도 느낀것이 몇가지 있습니다.&lt;/p&gt;

&lt;p&gt;첫번째는 일이 정말 세분화가 잘 되어 있다는 것입니다.
이전 직장에서는 저와 사수 2명이 CP (Contents Provider)로 부터 기사를 송고받는 시스템부터 관리툴 실제 사용자 서비스까지 모두 맡아서 진행했습니다. 그러나 이곳에서는 이러한 부분이 정말 잘 세분화 되어있고 그렇게 때문에 하나의 서비스에 집중하는데 그 깊이가 다르다는 생각을 했습니다. 그리고 충분히 개인시간을 고려하여 일정을 산출해 준다는 생각을 많이 했습니다.&lt;/p&gt;

&lt;p&gt;두번째는 기획단계에서 시작하는 스케일이 조금 틀리다는 생각을 했습니다.
이곳에와서 첫번째로 밑아 진행한 프로젝트가 ‘페라리 70주년 사진전’ 프로젝트였는데 정말 재밌게 작업했습니다.
사용자 반응도 정말 생각했던것 보다 좋아서 개인적으로 개발한것에 대한 평가가 좋으니 많이 뿌듯하고 즐거웠습니다. 새로운 시도를 많이 해보는 것이 정말 저에게는 즐거운 경험이었습니다.&lt;/p&gt;

&lt;h3 id=&quot;새로운-시작을-준비하며-마음가짐&quot;&gt;새로운 시작을 준비하며 마음가짐&lt;/h3&gt;

&lt;p&gt;규모가 큰 회사에 있다보니 사용자의 반응도 조금 다르고 재밌는 경험을 많이 해볼 수 있을것 같아서 많은 기대를 하고 있습니다. 그러나 어떻게 보면 역할이 많이 세분화되어 있어 이미 많은것들이 구축이 되어있는 구조이다보니 개인적으로 시도해 볼 수 있는것들이 조금 적을 수 도 있겠다는 생각을 했습니다.&lt;/p&gt;

&lt;p&gt;저는 새로운 시작을 준비하며 이러한 마음가짐을 가지고 있습니다.
다양한 시도를 해보는 좋은환경에 있으니 최대한 적극적으로 기획자분들이 준비해주시는 서비스들을 실제로 구현할 수 있도록 노력해 볼 생각입니다. 실제 서비스운영을 하며 다양한 시도를 해본다는게 실제적으로 어려운 부분이 많을 수 있다는 것을 잘 알고 있지만 그래도 최대한 적극적인 자세로 노력해볼 생각입니다.&lt;/p&gt;

&lt;p&gt;그리고 개인시간이 많이진 만큼 그동안 소홀했던 공부들을 조금씩 해볼 생각입니다. 앞으로의 웹개발쪽으 트랜드에 대해서 이미 많이 뒤쳐지고 있다는 생각을 조금씩 하고 있습니다. 이러한 부분들을 보완하고 싶고, 요즘 도커를 공부하고 있는데 운영체제가 실제로 어떻게 돌아가는지에 대한 깊이가 조금 부족하다는 생각을 하여 이러한 부분을 조금 공부해보고자 하는 생각을 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;주저리 주저리 2년차 개발자가 되어 지난일들을 돌아보고 앞으로의 방향을 한번 생각하며 정리해봤습니다.&lt;/p&gt;

&lt;p&gt;2년간 개발자생활을 하며 조금 더 큰 환경을 운영해보고 싶다는 목표의식을 가지고 생활해 왔습니다. 이제는 그러한 환경을 운영해볼 수 있는 기회가 생긴것 같다고 개인적으로 생각하고 있습니다.&lt;/p&gt;

&lt;p&gt;당분간 저의 목표는 ‘지금 맡은 서비스를 잘 운영하여 사용자에게 좋은 서비스를 제공하는것’이 목표일 것 같습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 22:55:01 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/talk_2</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/talk_2</guid>
        
        
        <category>생각정리</category>
        
      </item>
    
      <item>
        <title>How to work SPRING @RestController (Jackson)</title>
        <description>&lt;p&gt;사내에서 프로젝트를 진행하며 @RestController를 이용하여 클라이언트에게 JSON 응답을 내려주어야 하는 코드를 작성해야 했습니다.
기존의 의존성에서는 org.codehaus.jackson 을 이용하고 있어 해당 의존성을 com.fasterxml.jackson.core 으로 바꿔주게 되었습니다.
이 과정에서 알게된 점과 @RestController가 무엇을 이용하여 어떤식으로 동작하는지에 대해서 정리하고자 합니다.&lt;/p&gt;

&lt;h1 id=&quot;restcontroller의-동작방식&quot;&gt;@RestController의 동작방식&lt;/h1&gt;

&lt;p&gt;@RestController 는 @Controller 어노테이션과 @ResponseBody 어노테이션을 합쳐놓은 어노테이셥 입니다.
클래스 상단에 @RestController 어노테이션을 선언하면 아래의 코드와 동일하게 동작하게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/rests&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JacksonController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPlainText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, guppy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@RestController 가 어떤 역할을 하는지는 알았으나, 일반적인 @Controller 어노테이션과 @RestController 어노테이션에는 어떤차이가 있는지 알아봐야 할 것 같습니다.
스프링 프레임워크는 일반적으로 view 이름을 리턴해주어 사용자에게 뷰를 통해서 출력되게 되어있습니다. 아래의 그림을 보면 어떤 흐름으로 동작하는지 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/controller_flow.png&quot; alt=&quot;컨트롤러 흐름&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용자의 요청이 오면 등록된 &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewResolver&lt;/code&gt;를 통해 서버 템플릿을 하여 사용자에게 text/html 타입의 응답을 보내주게됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IndexController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// ViewResolver에 등록된 template resource 패스를 확인하여 서버 템플릿후 text/html 컨텐츠 타입을 리턴&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그에 반해 @RestController 에서 return 되는 값은 view를 통해서 출력되는 것이 아니라 HTTP ResponseBody에 직접 쓰여지게 됩니다.
아래의 그림을 보면 어떤 흐름으로 동작하는지 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/rest_controller_flow.png&quot; alt=&quot;레스트컨트롤러 흐름&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용자의 요청이 오면 등록된 &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageConverter&lt;/code&gt;를 통해서 application/json, text/plain 등 알맞은 형태의 읍답형태로 리턴되게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/students&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StudentRestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StudentService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StudentRestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StudentService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;studentService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/one&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStudent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// MappingJackson2HttpMessageConverter 를 통해서 application/json 컨텐츠 타입을 리턴&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStudent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// StringHttpMessageConverter 를 통해서 text/plain 컨텐츠 타입을 리턴&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;guppy.kang&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정리하자면 @ResponseBody 어노테이션은 값을 리턴할 타입을 보고 알맞은 &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageConverter&lt;/code&gt;를 찾아서 적절한 응답형태로 변환해준 후 Http ResponseBody에 직접 쓰여 응답을 해주는 것입니다.&lt;/p&gt;

&lt;p&gt;적절한 응답을 해주기 위해 응답을 바꿔주는 MessageConverter 들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpMessageConverter&lt;/code&gt; 인터페이스를 상속받고 있습니다.
[&lt;a href=&quot;'https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html'&quot;&gt;출처&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;몇가지 대표적인 응답해주는 MessageConverter들은 아래와 같은 종류가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;application/json 형태의 응답 : &lt;code class=&quot;highlighter-rouge&quot;&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; [&lt;a href=&quot;'https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html'&quot;&gt;출처&lt;/a&gt;]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;application/xml 또는 text/xml 형태의 응답 : &lt;code class=&quot;highlighter-rouge&quot;&gt;MarshallingHttpMessageConverter&lt;/code&gt; [&lt;a href=&quot;'https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.html'&quot;&gt;출처&lt;/a&gt;]&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 외에도 다양한 종류의 응답형태로 변환 해주는 MessageConverter가 있습니다. 원하는 형태의 응답을 할때 필요한 MessageConverter 설정을 추가해 주면 될 것입니다. (스프링 부트 기반에서는 대부분의 MessageConverter를 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; 의존성을 통해서 자동으로 세팅해줍니다.)&lt;/p&gt;

&lt;p&gt;이번 포스팅에서 저는 응답형태를 application/json 형태로 바꿔주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; 위주로 설명을 진행하고자 합니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;가 어떤 방식으로 동작하는지 (부트가 세팅을 해주지만..) 설정을 다시 잡아보면서 따라가보고자 합니다.&lt;/p&gt;

&lt;h1 id=&quot;orgcodehausjackson-vs-comfasterxmljacksoncore&quot;&gt;org.codehaus.jackson VS com.fasterxml.jackson.core&lt;/h1&gt;

&lt;p&gt;설정 세팅에 들어가기 앞서 json 형태의 Http 응답으로 바꿔주기 위한 라이브러리는 대표적으로 2가지가 존재합니다.&lt;/p&gt;

&lt;p&gt;첫번째는 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.codehaus.jackson&lt;/code&gt;이고 두번째는 &lt;code class=&quot;highlighter-rouge&quot;&gt;com.fasterxml.jackson.core&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;결론부터 말씀드리면 &lt;code class=&quot;highlighter-rouge&quot;&gt;com.fasterxml.jackson.core&lt;/code&gt; 라이브러리를 사용해야 한다는 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;org.codehaus.jackson&lt;/code&gt;는 관리가 안되고 있는 라이브러리이며 그에 반해, &lt;code class=&quot;highlighter-rouge&quot;&gt;com.fasterxml.jackson.core&lt;/code&gt;는 현재까지도 꾸준히 관리되는 라이브러리이기 때문에 후자의 라이브러리를 사용하기를 권장합니다.&lt;/p&gt;

&lt;p&gt;(포스팅에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;com.fasterxml.jackson.core&lt;/code&gt; 라이브러리를 사용하여 설명을 진행하겠습니다. 만일 진행하시고 계시는 프로젝트의 버전이 오래되어 codehaus 라이브러리를 사용하시고 계시다면 fasterxml 라이브러리 또한 2.4 버전까지는 자바 1.6까지 지원이 가능하니 마이그레이션을 권장합니다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Support for oldest Android versions (2.x) will not be continued, as &lt;strong&gt;Jackson modules may use full feature set of JDK 1.6.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[&lt;a href=&quot;https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.4&quot;&gt;출처&lt;/a&gt;] Jackson Release 2.4 Note&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Difference between fasterxml Jackson and codehaus&lt;/strong&gt;:
They are the two major branches of Jackson, and also the two versions of different packages.Jackson starts to use the new package name fasterxml; the 1.x version of the package name isCodehaus. In addition to the package name is different, their Maven ID artifact is also different. 1.x version is currently only available for bug-fix, while the 2.x version is still in development and release. If it is a new project, it is recommended to use 2x directly, that is, Jackson fasterxml.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[&lt;a href=&quot;http://prog3.com/sbdm/blog/clementad/article/details/46416647&quot;&gt;출처&lt;/a&gt;] The difference between fasterxml Jackson and codehaus (vs. codehaus fasterxml)&lt;/p&gt;

&lt;h1 id=&quot;comfasterxmljacksoncore의-의존성&quot;&gt;com.fasterxml.jackson.core의 의존성&lt;/h1&gt;

&lt;p&gt;fasterxml.jackson의 의존성은 크게 3가지를 가지고 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Core modules
  Core modules are the foundation on which extensions (modules) build upon. There are 3 such modules currently (as of Jackson 2.x):&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Streaming (docs) (“jackson-core”) defines low-level streaming API, and includes JSON-specific implementations&lt;/li&gt;
    &lt;li&gt;Annotations (docs) (“jackson-annotations”) contains standard Jackson annotations&lt;/li&gt;
    &lt;li&gt;Databind (docs) (“jackson-databind”) implements data-binding (and object serialization) support on streaming package; it depends both on streaming and annotations packages&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;[&lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;출처&lt;/a&gt;] Jackson Project Home @github&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-core&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-annotations&lt;/code&gt; 모듈 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-databind&lt;/code&gt; 모듈입니다. 각각의 역할을 위의 출처를 참고하시면 될 것 같습니다.
중요한점은 마지막 모듈인 &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-databind&lt;/code&gt; 모듈이 상위 2가지 모듈의 의존성을 포함하기 때문에, 웬만하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-databind&lt;/code&gt; 모듈 의존성만 추가해주시면 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;spring-boot-기반에서의-comfasterxmljacksoncore-세팅&quot;&gt;spring boot 기반에서의 com.fasterxml.jackson.core 세팅&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;[&lt;a href=&quot;https://github.com/wckhg89/jackson_sample&quot;&gt;깃주소&lt;/a&gt;]를 참고하시면 아래의 과정을 포함한 프로젝트 전체 소스가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 추가해주어야 하는 의존성을 살펴보면 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- pom.xml --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 명시적으로 jackson 의존성을 주고 싶어서 스타터에 있는 의존성 제거 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-annotations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-databind&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 사실 부트 스타터 웹에 포함되어 있으나 포스팅 샘플이니 명시하자--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-annotations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-databind&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 잭슨 코어 및 어노테이션과 버전 호환성 이슈가 있어 명시적으로 의존성 추가 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ref : https://dzone.com/articles/jackson-dependency-issue-in-spring-boot-with-maven--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-annotations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사실 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt;을 의존성을 추가하면 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-databind&lt;/code&gt; 의존성이 추가되어 추가적인 설정이 필요 없습니다.
저는 어떤 의존성이 필요한지 명시하기위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt;의존성에서 jackson 관련 의존성을 제외하고 새롭게 추가하여 설정했습니다.&lt;/p&gt;

&lt;p&gt;pom.xml을 살펴보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-databind&lt;/code&gt; 의존성이 &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-core&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-annotations&lt;/code&gt; 의존성을 가지고 있는데 굳이 다시 추가하게 된 이유는
버저닝 이슈가 발생하여 버전을 맞춰주기 위해서 추가를 하게 되었습니다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;jackson-databind&lt;/code&gt; 의존성이 들고 있는 나머지 2개의 의존성의 버전이 낮아서 이슈가 발생했습니다.)&lt;/p&gt;

&lt;p&gt;자세한 내용은 아래 링크를 참고하시면 도움이 되실 것 같습니다.&lt;/p&gt;

&lt;p&gt;[&lt;a href=&quot;https://springframework.guru/jackson-dependency-issue-spring-boot-maven/&quot;&gt;jackson의존성 버저닝이슈&lt;/a&gt;] JACKSON DEPENDENCY ISSUE IN SPRING BOOT WITH MAVEN BUILD&lt;/p&gt;

&lt;p&gt;사용할 의존성을 모두 추가했으니 이어서 Bean 설정을 해주면 될 것 같습니다.
설정 코드는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// MappingJackson2HttpMessageConverter 에 등록될 ObjectMapper&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Java 객체를 Json 객체로 바꿔주는 역할을 수행&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;// @ResponseBody 어노테이션에 의해서 불리기 되며 ObjectMapper를 이용해서 Java 객체를 Json 객체로 변환 해준다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MappingJackson2HttpMessageConverter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mappingJackson2HttpMessageConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MappingJackson2HttpMessageConverter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappingJackson2HttpMessageConverter&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MappingJackson2HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mappingJackson2HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappingJackson2HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 코드와 같이 설정을 해주게 되면 JSON 형태의 응답을 보낼때, &lt;code class=&quot;highlighter-rouge&quot;&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;에 등록된 &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt;에 의해서 JSON 형태로 변환된 응답이 보내지게 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;이번 포스팅에서는 @RestController 어노테이션에 의해서 JSON 형태의 HTTP Response가 내려질때, 어떤식으로 동작하며 어떤 의존성을 추가하여 설정해야 하는지 간략히 정리해봤습니다.&lt;/p&gt;

&lt;p&gt;다음번 글의 작성할때는 반대로 외부 서버에서 JSON 형태의 객체를 JAVA 객체로 변환하는 과정에대해서 정리를 하려합니다.&lt;/p&gt;

&lt;p&gt;글을 보시다가 제가 잘못이해하고 있는 부분이나 불필요한 내용등이 있으면 편하게 말씀해주시면 감사하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고링크&quot;&gt;참고링크&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://mkil.tistory.com/204&quot;&gt;@ResponseBody와 jackson 이용하여 JSON 사용하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nextree.co.kr/p11205/&quot;&gt;SpringMVC에서 Ajax와 JSON&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://highcode.tistory.com/24&quot;&gt;Restful한 스프링 @ResponseBody vs @RestController&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 16:58:01 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/understanding_jackson</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/understanding_jackson</guid>
        
        
        <category>SPRING</category>
        
      </item>
    
      <item>
        <title>OSX iterm2 터미널 꾸미기</title>
        <description>&lt;p&gt;얼마전 이직을 하게되어 새로운 장비(신형 맥북을!!)를 받게 되었습니다.
개발환경을 세팅하며 터미널을 좀 더 편하고 이쁘게 쓰고 싶어 세팅을 해보다가 후에 세팅시 참고 하고자 글을 남기게 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;osx-iterm2-터미널-세팅-가이드&quot;&gt;OSX iterm2 터미널 세팅 가이드&lt;/h1&gt;

&lt;p&gt;저는 terminal 프로그램으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt;를 사용하고 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt;를 좀 더 편리하게 사용하고자 총 3가지 추가 설정을 해두었습니다.&lt;/p&gt;

&lt;p&gt;첫번째로 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt; 테마를 설정해 주었습니다. 이렇게 해주면 제가 현재 위치하고 있는 git branch의
위치를 터미널 상에서 표시해 주어 깃을 관리하기가 편해집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/oh-my-zsh.png&quot; alt=&quot;oh-my-zsh&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;테마 적용시 위의 그림과 같이 git branch를 보여주게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;두번째로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh-syntax-highlighting&lt;/code&gt;을 적용해주었습니다. 해당 설정을 해주면,
terminal에서 명령어를 입력할때, 하이라이팅이 되어 좀 더 편리하게 명령어를 입력할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/terminal-highlighting.png&quot; alt=&quot;zsh-syntax-highlighting&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 그림처럼 터미널 명령어에 하이라이팅을 해 줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마지막으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;erics_vim_syntax_and_color_highlighting&lt;/code&gt;을 적용하였는데, 해당 설정을 해주면
vim 에서 script 언어에 맞게 하이라이팅을 해주게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/vim-highlighting.png&quot; alt=&quot;vim-syntax-highlighting&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;vim에서 script코드를 하이라이팅 해줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;사전-작업&quot;&gt;사전 작업&lt;/h3&gt;

&lt;p&gt;위의 세가지 세팅을 하나하나 진행해 보기전에 사전에 설치해주어야 할 부분이 있습니다.(OSX 완전 초기상태라 가정하고 글을 작성하겠습니다.)
먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt;를 설치해 주어야 합니다. &lt;a href=&quot;https://www.iterm2.com/downloads.html&quot;&gt;링크&lt;/a&gt;를 통해서 설치를 진행해 주어야 합니다.&lt;/p&gt;

&lt;p&gt;그리고 외부 패키지를 설치 할 수 있도록 해주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt;를 먼저 해줘야합니다.(리눅스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;과 유사한 역할이라고 생각하시면 될 것 같습니다.)
&lt;a href=&quot;https://brew.sh/index_ko.html&quot;&gt;설치가이드 링크&lt;/a&gt;를 참고하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt;를 설치합니다.&lt;/p&gt;

&lt;p&gt;위 두가지 과정을 완료했으면 앞서 설명드린 세가지 추가 설정을 하기 위한 준비는 끝났습니다.
이어서 하나하나 세팅을 진행해 보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;zsh-설치&quot;&gt;zsh 설치&lt;/h3&gt;

&lt;p&gt;OSX 초기 상태에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bash-shell&lt;/code&gt;이 기본 설정으로 되어있습니다.
저희는 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt; 테마를 적용할 것이기 때문에 기본 shell을 &lt;code class=&quot;highlighter-rouge&quot;&gt;z-shell&lt;/code&gt;로 수정해주어야 합니다.&lt;/p&gt;

&lt;p&gt;먼저 zsh을 설치해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; brew install zsh &lt;span class=&quot;c&quot;&gt;#brew를 통해 zsh 설치&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; zsh &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#zsh 설치 확인&lt;/span&gt;
zsh 5.3.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64-apple-darwin16.6.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;위와 같이 설치 &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh --version&lt;/code&gt;명령어 실행 후 버전 확인이 되면 zsh 설치가 완료됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;기본-shell-변경&quot;&gt;기본 shell 변경&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;z-shell&lt;/code&gt;설치가 완료되면 기본 shell을 &lt;code class=&quot;highlighter-rouge&quot;&gt;z-shell&lt;/code&gt;로 변경해줘야 합니다.
아래 과정을 통해서 기본 shell을 변경해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; which zsh &lt;span class=&quot;c&quot;&gt;#zsh 위치 확인&lt;/span&gt;
/usr/local/bin/zsh
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; chsh &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/bin/zsh &lt;span class=&quot;c&quot;&gt;#기본 쉘 변경&lt;/span&gt;
Changing shell &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;kakao.
Password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;kakao:
chsh: /usr/local/bin/zsh: non-standard shell

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#터미널 재시작후 기본 shell이 zsh로 변경되었는지 확인&lt;/span&gt;
/bin/zsh

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 shell을 &lt;code class=&quot;highlighter-rouge&quot;&gt;z-shell&lt;/code&gt;로 변경해주었으면, 터미널(iterm2)을 재시작후 정상적으로 변경되었는지 확인합니다.&lt;/p&gt;

&lt;h3 id=&quot;oh-my-zsh-적용&quot;&gt;oh-my-zsh 적용&lt;/h3&gt;

&lt;p&gt;위의 과정을 통해서 zsh 설치후 기본쉘을 zsh로 바꾸어 주었으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt; 테마를 적용해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; brew install wget &lt;span class=&quot;c&quot;&gt;#wget 설치&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; wget &lt;span class=&quot;c&quot;&gt;#설치 확인&lt;/span&gt;
wget: missing URL
Usage: wget &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTION]... &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;URL]...
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#oh-my-zsh 설치&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 과정처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;을 설치한 후에 wget을 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt; 설치를 진행해줍니다.
과정을 모두 진행하고 터미널을 재시작해주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;이 적용되어 있을 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;설치가이드 링크&lt;/a&gt;를 참고하면 자세한 설치과정이 설명돼 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이어서 자신이 좋아하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh 테마&lt;/code&gt;를 적용해 줄 것입니다.
zsh의 설정파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;(bash-shell에서는 ~/.bash_profiles)에 ZSH_THEME를 적용해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# ~/.zshrc 파일에 아래와 같이 테마를 적용&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#ZSH_THEME=&quot;robbyrussell&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;agnoster&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&quot;agnoster&quot;외에도 본인이 원하는 테마 적용 가능&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; soruce ~/.zshrc &lt;span class=&quot;c&quot;&gt;#변경된 설정파일 적용&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테마 종류는 &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes&quot;&gt;테마종류 링크&lt;/a&gt;를 통해서 더 많이 확인이 가능합니다.
저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;agnoster&lt;/code&gt;테마를 적용하여 해당 테마 기준으로 이어서 설명하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;iterm2-테마-설정&quot;&gt;iterm2 테마 설정&lt;/h3&gt;

&lt;p&gt;위의 과정을 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;테마를 적용해도 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt; 상에서는 아마 이쁘지 않게 보일 것 입니다.
좀 더 이쁘고 보기좋게 하기위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt;에도 어울리는 테마를 설정해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://iterm2colorschemes.com/&quot;&gt;iterm2 테마 다운로드 링크&lt;/a&gt;에서 압축파일을 다운로드후 압축을 풀어줍니다.&lt;/p&gt;

&lt;p&gt;아래의 그림과 같이 Profiles설정에서 import를 통해 다운받은 테마를 설정해 import합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/iterm-theme-1.png&quot; alt=&quot;iterm테마설정1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/iterm-theme-2.png&quot; alt=&quot;iterm테마설정2&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;agnoster&lt;/code&gt;테마를 적용시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Solarized Dark&lt;/code&gt;테마가 가장 잘 어울리는듯해 해당 테마를 적용했습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;최종적으로 import한 테마를 적용해 주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt;테마가 적용되게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;font-설정&quot;&gt;font 설정&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterm2&lt;/code&gt;에 테마를 적용하고 마지막으로 font를 적용해 줘야 합니다.(기존에 사각형 ? 가나오는 등 글씨가 조금 깨져 보였을 것입니다.)
font 설정은 &lt;a href=&quot;http://thdev.tech/mac/2016/05/01/Mac-ZSH-Install.html&quot;&gt;설정가이드 링크&lt;/a&gt;를 통해서 설정해주면 금방 진행하실 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;zsh-syntax-highlighting-적용&quot;&gt;zsh-syntax-highlighting 적용&lt;/h3&gt;

&lt;p&gt;이제 첫번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt; 테마 설정이 끝났습니다. 다음 과정부터는 번거로운 작업이 없이 간단한 설정을 통해서 가능합니다.
이어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh-syntax-highlighting&lt;/code&gt;을 적용해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; brew install zsh-syntax-highlighting

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;brew를 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh-syntax-highlighting&lt;/code&gt;을 설치해주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/code&gt; 경로에 설치가 됩니다.&lt;/p&gt;

&lt;p&gt;~/.zshrc에 하이라이트를 적용해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; vim ~/.zshrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
&lt;span class=&quot;c&quot;&gt;# .zshrc 파일의 마지막 부분에 위의 내용을 붙여넣습니다.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md&quot;&gt;설치가이드 링크&lt;/a&gt;를 참고하시면 자세한 설정을 참고하실 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;erics_vim_syntax_and_color_highlighting-적용&quot;&gt;erics_vim_syntax_and_color_highlighting 적용&lt;/h3&gt;

&lt;p&gt;두번째 설정(zsh-syntax-highlighting)은 굉장히 간단하게 설정이 되었습니다.
마지막 설정인 &lt;code class=&quot;highlighter-rouge&quot;&gt;erics_vim_syntax_and_color_highlighting&lt;/code&gt;도 매우 간단합니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim&lt;/code&gt; 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;erics_vim_syntax_and_color_highlighting&lt;/code&gt;을 클론 받습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; git clone https://github.com/sentientmachine/erics_vim_syntax_and_color_highlighting.git

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;설정 파일에 아래 문구를 붙여넣어 줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;The following three lines map Ctrl+s to save in vi.  You can comment
&quot;these out, it has nothing to do with syntax highlighting or colors.

&quot; optional lines to turn on pressing F2 to toggle paste mode
noremap &amp;lt;F2&amp;gt; :set invpaste paste?&amp;lt;CR&amp;gt;i
set pastetoggle=&amp;lt;F2&amp;gt;


:nmap &amp;lt;c-s&amp;gt; :w&amp;lt;CR&amp;gt;
:imap &amp;lt;c-s&amp;gt; &amp;lt;Esc&amp;gt;:w&amp;lt;CR&amp;gt;a
:imap &amp;lt;c-s&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;c-s&amp;gt;

syntax on
set background=dark
set hlsearch
set nu
&quot; set smartindent  &quot;smartindent doesn't take care of python hashtag comments correctly, use cindent:    
set cindent
set tabstop=4
set shiftwidth=4
set expandtab
set cursorline
filetype on
filetype plugin indent on

au BufReadPost,BufNewFile *.twig colorscheme koehler
au BufReadPost,BufNewFile *.css colorscheme slate
au BufReadPost,BufNewFile *.js colorscheme slate2
au BufReadPost,BufNewFile *.py colorscheme molokaiyo
au BufReadPost,BufNewFile *.html colorscheme monokai
au BufReadPost,BufNewFile *.java colorscheme monokai
&quot; au BufReadPost,BufNewFile *.php colorscheme monokai

&quot; Default line highlighting for unknown filetypes
hi String ctermfg=140
hi CursorLine ctermbg=235
hi CursorLine guibg=#D3D3D3 cterm=none

&quot;What follows are optional things, I like them

&quot;au BufNewFile,BufRead *.py
&quot;        \ set tabstop=4
&quot;        \ set shiftwidth=4     &quot;aand fedora doesn't like this parameter, remove this line.
&quot;        \ set textwidth=79
&quot;        \ set expandtab
&quot;        \ set autoindent
&quot;        \ set fileformat=unix

&quot; Commenting blocks of code.
&quot; This specifies the comment character when specifying block comments.
&quot;autocmd FileType c,cpp,java,scala let b:comment_leader = '//'
&quot;autocmd FileType sh,ruby,python   let b:comment_leader = '#'
&quot;autocmd FileType conf,fstab       let b:comment_leader = '#'
&quot;autocmd FileType tex              let b:comment_leader = '%'
&quot;autocmd FileType mail             let b:comment_leader = '&amp;gt;'
&quot;autocmd FileType vim              let b:comment_leader = '&quot;'

&quot;this makes it so you can Shift-V highlight lots of text then press ,cc to
&quot;comment it or ,cu to uncomment.  
&quot;noremap &amp;lt;silent&amp;gt; ,cc :&amp;lt;C-B&amp;gt;silent &amp;lt;C-E&amp;gt;s/^/&amp;lt;C-R&amp;gt;=escape(b:comment_leader,'\/')&amp;lt;CR&amp;gt;/&amp;lt;CR&amp;gt;:nohlsearch&amp;lt;CR&amp;gt;
&quot;noremap &amp;lt;silent&amp;gt; ,cu :&amp;lt;C-B&amp;gt;silent &amp;lt;C-E&amp;gt;s/^\V&amp;lt;C-R&amp;gt;=escape(b:comment_leader,'\/')&amp;lt;CR&amp;gt;//e&amp;lt;CR&amp;gt;:nohlsearch&amp;lt;CR&amp;gt;

&quot;This mission critical workaround hack tells vim to restore cursor to the last line.
&quot;Be sure to set: &quot;Thip, crinkle, sploit&quot; to &quot;stopit, just be right&quot;.  lolz
&quot;Also it could be the functionality is disabled in your /etc/vim/vimrc or
&quot;your ~/.viminfo is owned by root.  
&quot;http://askubuntu.com/questions/223018/vim-is-not-remembering-last-position
autocmd BufReadPost *
  \ if line(&quot;'\&quot;&quot;) &amp;gt; 1 &amp;amp;&amp;amp; line(&quot;'\&quot;&quot;) &amp;lt;= line(&quot;$&quot;) |
  \   exe &quot;normal! g`\&quot;&quot; |
  \ endif

&quot;These extra commands tell syntastic to ignore the following kinds of warnings                                                               
&quot;let g:syntastic_quiet_messages = { &quot;regex&quot;: 'superfluous' }
&quot;let g:syntastic_quiet_messages = { &quot;regex&quot;: 'superfluous-parens\|too-many-instance-attributes\|too-few-public-methods' }

&quot;I like the vertical bar on insert mode, others do not like.  You decide.
&quot;let &amp;amp;t_SI = &quot;\&amp;lt;Esc&amp;gt;]50;CursorShape=1\x7&quot; &quot; Vertical bar in insert mode
&quot;let &amp;amp;t_EI = &quot;\&amp;lt;Esc&amp;gt;]50;CursorShape=0\x7&quot; &quot; Block in normal mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;설정 파일에 아래 문구를 붙여 넣고 설정파일을 적용해 주면 설정이 모두 완료되게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xterm-256color

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; soruce ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/sentientmachine/erics_vim_syntax_and_color_highlighting&quot;&gt;설치가이드 링크&lt;/a&gt;를 참고하시면 더 자세한 설명이 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;이렇게 모든 설정을 하게되면 초기보다 훨씬 이쁘고 사용하기 편리한 terminal 환경이 구축 되었을 것입니다.
저도 맥을 사용한지 오래되지 않아 아직 터미널 환경에 많이 익숙하지 않습니다. 설정과정 중 불필요한 설정이 있거나 잘못된 설정이 있을 수도 있습니다.
아래 참고 링크를 통해서 최대한 설정을 해주었습니다. 혹시나 제가 설정한 부분에서 문제가 있는 사항이 있으면 편하게 말씀 나누었으면 좋겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-링크&quot;&gt;참고 링크&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;iterm2 다운로드 링크 : &lt;a href=&quot;https://www.iterm2.com/downloads.html&quot;&gt;https://www.iterm2.com/downloads.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;homebrew 설치 가이드 링크 : &lt;a href=&quot;https://brew.sh/index_ko.html&quot;&gt;https://brew.sh/index_ko.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;oh-my-zsh 링크 : &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;꿈 낳은 개발자가 되자 블로그 : &lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md&quot;&gt;https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Aug 2017 16:58:01 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/terminal_setting</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/terminal_setting</guid>
        
        
        <category>개발도구</category>
        
      </item>
    
      <item>
        <title>스프링 배치(스프링 Boot 기반)삽질기 3탄 - 싱글톤 빈을 이용한 step간 데이터 공유</title>
        <description>&lt;p&gt;회사에서 스프링 배치를 이용한 배치성 프로그램을 제작을 하게 되었습니다.
오늘은 마지막으로 StepExecution을 사용함으로 인해서 Batch  Meta-data를 저장하면서 성능이슈(Meta-data를 저장하며 Serialize 및 DB IO로 인한 성능 저하 이슈)가 발생하는 현상과 StepExecution을 이용하지 않고 Step간의 데이터를 공유하는 방법을 포스팅하려 합니다.&lt;/p&gt;

&lt;h1 id=&quot;시작하며&quot;&gt;시작하며&lt;/h1&gt;

&lt;p&gt;스탭들간의 데이터를 공유할 때 ExecutionContext를 이용하게 되면 metaDataSchema에 서로 공유되는 데이터를 저장해주게 됩니다.&lt;/p&gt;

&lt;p&gt;지난 포스팅에서 해당 내용에 대해 간단하게 작성했습니다.
그런데 이때 저장하는 데이터를 json string 형태로 Serialize 해주면서 성능 이슈가 발생하게 됩니다.&lt;/p&gt;

&lt;p&gt;아시다시피 ObjectMapper를 통한 Serialize는 비용이 굉장히 큰 작업입니다. 회사에서 프로젝트를 진행하며 이러한 성능이슈로 배치 작업이 더디게 일어나는 이슈가 있어 우회하는 방법으로 step 간에 데이터를 공유한 방법에 대해서 포스팅 해보겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;step간-데이터-공유-싱글톤-빈을-사용하면&quot;&gt;Step간 데이터 공유 (싱글톤 빈을 사용하면?)&lt;/h1&gt;

&lt;p&gt;1편 2편에서 말씀드린것 처럼 일단 metaDataSchema에 데이터는 저장하도록 어찌어찌 수정은 했는데 배치 잡이 한번 도는데 약 10분이상이 소요되었습니다.&lt;/p&gt;

&lt;p&gt;도저히 실 서비스에서 사용할 수 없는 성능이었습니다.
사수님께 바로 달려가 현재 배치의 성능이슈를 말씀드렸고 어떤식으로 해결하면 좋을지 조언을 구했습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;굳이 StepExecution을 이용해서 데이터를 공유할 필요가 있나요?&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;명쾌한 조언이었습니다..;&lt;/p&gt;

&lt;p&gt;왜 굳이 필요하지도 않은 meta-data를 만들면서 까지 StepExecution을 이용할 필요는 없었습니다. 그래서 생각한 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; 싱글톤 빈을 하나 만들어 멤버변수에 Map을 두어 데이터를 공유하면 되겠다 생각했습니다. (어차피 배치성 프로그램이라 프로그램이 한번 실행하고 종료되면 heap 메모리 영역은 초기화 되기 때문에 배치 실행시 heap 메모리만 넉넉히 준다면 gc 이슈는 없을것이라 생각했습니다.)&lt;/p&gt;

&lt;p&gt;데이터를 공유하기 위한 클래스를 정의한 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataShareBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shareDataMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataShareBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shareDataMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newConcurrentMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shareDataMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Map is not initialize&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;shareDataMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shareDataMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shareDataMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shareDataMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Map is not initialize&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shareDataMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;멤버변수에 스레드 세이프한 ConcurrentMap을 선언하고 여기에 데이터를 저장해두고 step들 간에 데이터를 공유하도록 하였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;step1 processor에서 생성한 데이터를 step2Reader에서 사용하는 코드입니다. (주석은 기존에 execution context를 이용했던 코드입니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// step1 processor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@StepScope&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Step1Processor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SuperStepExecution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1Processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPECIFIC_MEMBER_IDX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step1 Processor 시작&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specificMember&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPECIFIC_MEMBER_IDX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step1 Processor 첫번째 회원 정보 : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specificMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// super.putData(&quot;SPECIFIC_MEMBER&quot;, specificMember);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SPECIFIC_MEMBER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specificMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specificMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//    @BeforeStep&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    public void saveStepExecution(StepExecution stepExecution) {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        super.setStepExecution(stepExecution);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    }&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;step1에서는 공유를 위해 설정한 빈을 @Autowired 해주어서 step1에서 가공한 데이터를 해당 빈에 데이터를 넣어주었습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// step2Reader&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@StepScope&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Step2Reader&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SuperStepExecution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step2Reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specificMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnexpectedInputException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParseException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NonTransientResourceException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step2 Reader 시작&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;specificMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step2 Reader 첫번째 회원의 게시글 수 : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@BeforeStep&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieveInterstepData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StepExecution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stepExecution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// super.setStepExecution(stepExecution);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this.specificMember = (Member) super.getData(&quot;SPECIFIC_MEMBER&quot;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;specificMember&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataShareBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SPECIFIC_MEMBER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;step2에서 역시 공유를 위한 빈을 의존성 주입 받아 데이터를 꺼내오고 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;이런식으로 스텝간 데이터를 공유를 해주니 metaDataSchema에 데이터를 넣지 않으니 Serialize로 인한 비용이 전혀 없어졌고 10분이상 걸리던 배치 잡이 단 2분만에 완료되었습니다.&lt;/p&gt;

&lt;p&gt;사내에서 처음으로 배치를 처음부터 만들면서 여러 삽질(?)을 하였습니다. 스프링 배치는 배치 프로그램을 작성하기에 좋은 구조를 제공하는 것 같습니다. 그러나 저 처럼 metaDataSchema같은 부분을 잘 모르고 사용하면 여러 문제에 부딪힐 수 있을것 같다고 생각하여 후에 같은 실수를 반복하지 않고자 블로그를 작성했습니다.&lt;/p&gt;

&lt;p&gt;후에 배치를 또 만들일이 있으면 더 잘 짜보고싶습니다..&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jun 2017 13:40:00 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/springbatch3</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/springbatch3</guid>
        
        
        <category>SPRING</category>
        
      </item>
    
      <item>
        <title>DDD 입문 @ZUM</title>
        <description>&lt;p&gt;사내 DDD(Domain Driven Development) 세미나 관련해서 정리한 내용입니다.
Domain 중심으로 개발을 진행하는 관점에 대한 내용이 주된 내용입니다.&lt;/p&gt;

&lt;h1 id=&quot;도메인-모델&quot;&gt;도메인 모델&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;소프트웨어로 해결할 문제 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인 모델
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;도메인의 구성요소를 개념적으로 표현&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;정적 모델
        &lt;ul&gt;
          &lt;li&gt;클래스, ER&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;동적 모델
        &lt;ul&gt;
          &lt;li&gt;커뮤니케이션, 시퀀스, 상태&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단순 데이터 모델
    &lt;ul&gt;
      &lt;li&gt;단순 속성 나열&lt;/li&gt;
      &lt;li&gt;반쪽짜리 모델
        &lt;ul&gt;
          &lt;li&gt;Action이 없음(?)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인 모델에 필요한거
    &lt;ul&gt;
      &lt;li&gt;표현력
        &lt;ul&gt;
          &lt;li&gt;불피요한 번역 /해석이 필요하지 않도록 (코드를 보고 알아야…)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기능
        &lt;ul&gt;
          &lt;li&gt;객체 모델로 표현&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;동적 측면 / 제약 조건 표현
        &lt;ul&gt;
          &lt;li&gt;메소드를 잘활용하면 제약조건 표현에 좋다.(네이밍으로 표현(?))&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;정적 : 모델링 할때 모델(도메인)에 상태와 행위를 같이 표현해야 보기 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ddd&quot;&gt;DDD&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;모델 구성요소
    &lt;ul&gt;
      &lt;li&gt;기본모델
        &lt;ul&gt;
          &lt;li&gt;엔티티, 밸류&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;묶음
        &lt;ul&gt;
          &lt;li&gt;에그리거트&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기능
        &lt;ul&gt;
          &lt;li&gt;객체 모델&lt;/li&gt;
          &lt;li&gt;서비스&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;영속
        &lt;ul&gt;
          &lt;li&gt;레파지 토리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;엔티티 중심 모델 만들기
    &lt;ul&gt;
      &lt;li&gt;식별자 생성&lt;/li&gt;
      &lt;li&gt;특정 규칙, UUID, 시스템 식별자, 일려번호 등…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;밸류 : 개념적으로 하나의 값
    &lt;ul&gt;
      &lt;li&gt;주소, 수신자등의 값을 ShippingInfo라는 Value로 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모델에 기능 넣기
    &lt;ul&gt;
      &lt;li&gt;https://wckhg89.github.io/archivers/oop&lt;/li&gt;
      &lt;li&gt;메소드로 기능과 제약 표현
        &lt;ul&gt;
          &lt;li&gt;해당 메소드 이름만 보고 모델이 어떤 일을 하는지 알기 좋다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How ?
        &lt;ul&gt;
          &lt;li&gt;가능하면 public set 메소드를 쓰지말자
            &lt;ul&gt;
              &lt;li&gt;도메인의 의도를 사라지게 하는 효과가 있다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;get도 웬만하면 쓰지말자
            &lt;ul&gt;
              &lt;li&gt;도메인에 getter setter를 넣으면 절차지향적인 개발이 되기 쉽다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;DTO 영역 경계 간 데이터를 전달하기 위한 DTO와는 구분&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;주의사항
        &lt;ul&gt;
          &lt;li&gt;모든 엔티티들에게 연관관계를 맺지 말자 (연관관계 최소화)
            &lt;ul&gt;
              &lt;li&gt;n+1 problem을 야기하기가 쉽다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;개발 코드와 상황에 대한 불일치를 계속해서 네이밍을 바꾸면서 발전 시켜야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;애그리거트&quot;&gt;애그리거트&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;복잡해지는 모델의 경계를 잘 정해야 한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개별 모델을 상위 수준에서 적당하게 묶어주는 단위&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유사한 라이프 사이클을 가지는 단위 (한 애그리거트에 묶일 가능성이 높음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;한 애그리거트는 다른 애그리거트에 있는 객체와 엮이지 않음
    &lt;ul&gt;
      &lt;li&gt;주문 1 애그리거트, 주문 2 애그리거트는 엮이지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애그리거트 루트
    &lt;ul&gt;
      &lt;li&gt;애그리거트의 모든 객체는 루트에 직/간접적으로 속한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;애그리거트에 속한 객체의 상태를 바꿀 수 있는것은 애그리거트 루트를 통해서만 가능하다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애그리거트의 트랜잭션
    &lt;ul&gt;
      &lt;li&gt;범위는 자기자신의 애그리거트로 제한해야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애그리거트의 크기 경계
    &lt;ul&gt;
      &lt;li&gt;상품 (1) : 리뷰 (N)
        &lt;ul&gt;
          &lt;li&gt;상품과 리뷰는 함꼐 바뀌지 않음 (라이프 사이클이 다름)&lt;/li&gt;
          &lt;li&gt;리뷰의 관리 주체(리뷰를 다는사람)와 상품의 관리 주체(관리자)가 다름&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;아키텍처&quot;&gt;아키텍처&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;DIP (의존관계 역전의 원칙)
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;고수준 모듈 / 저수준 모듈&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;고수준 : 가격할인 계산 (고객정보를 구함 / 룰을 이용해서 할인 금액 구함) (더 상위 수준)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;저수준 : RDMS JPA / Drools로 룰을 적용 (더 저수준)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;의존의 방향 (고수준 -&amp;gt; 저수준)
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;저수준 고수준이 섞여 있으면 저수준의 로직 변화에 고수준이 영향을 받게 된다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;DIP 적용으로 방지 할 수 있다.&lt;/p&gt;
            &lt;ul&gt;
              &lt;li&gt;전략 패턴(?)&lt;/li&gt;
              &lt;li&gt;인터페이스를 활용하여 구현체를 따로 두면 저수준의 구현이 바뀌더라도 다른 구현체로 갈아 끼워주면 된다.&lt;/li&gt;
              &lt;li&gt;인터페이스의 네이밍은 고수준 관점에서의 네이밍 혹은 기능을 정의 하는게 좋다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;영역 (패키지 구성(?))
        &lt;ul&gt;
          &lt;li&gt;표현 (컨트롤러)&lt;/li&gt;
          &lt;li&gt;응용 서비스
            &lt;ul&gt;
              &lt;li&gt;사용자의 요청을 처리할 기능을 구현&lt;/li&gt;
              &lt;li&gt;처리 흐름을 구현!&lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;도메인 로직은 도메인 영역에 위임&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;도메인에 역할을 위임을 잘 할 수록&lt;/strong&gt; 더 짧은 코드가 작성된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;도메인&lt;/li&gt;
          &lt;li&gt;인프라 스트럭쳐
            &lt;ul&gt;
              &lt;li&gt;응용서비스 혹은 도메인에서 사용하는 실제 구현&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응용 서비스의 입력과 출력
    &lt;ul&gt;
      &lt;li&gt;입력
        &lt;ul&gt;
          &lt;li&gt;필요한 파라미터만 넘기자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;출력
        &lt;ul&gt;
          &lt;li&gt;조회전용 모델 (CQRS)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;트랜잭션
        &lt;ul&gt;
          &lt;li&gt;Transaction 단위가 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;응용 서비스에 도메인 로직을 넣지 않기&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;몇가지 고민거리
        &lt;ul&gt;
          &lt;li&gt;서비스의 크기 어디까지&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;인터페이스를 구지 가져야하나?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;구현의 편의성을 우선으로 생각하는 편이십니당.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;표현영역 (Controller)
    &lt;ul&gt;
      &lt;li&gt;사용자에게 화면을 제공하고 사용 흐름 제어&lt;/li&gt;
      &lt;li&gt;사용자 요청을 응용 서비스에 전달&lt;/li&gt;
      &lt;li&gt;세션 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인프라 스트럭쳐
    &lt;ul&gt;
      &lt;li&gt;기반 구현 기술 제공 (실제 구현)&lt;/li&gt;
      &lt;li&gt;DIP 고려&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모듈 구성
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;각 도메인 별로 패키지를 둔다.&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;그 하위에 표현 / 응용 / 도메인 / 인프라 스트럭쳐 패키지를 둔다. (DDD 관점)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CQRS
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;상태를 바꾸는 기능(Command) /  조회하는 기능(Query)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위의 상황에 따라서 모델을 나누자&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;주문 상태 변경 (Command Model)&lt;/li&gt;
          &lt;li&gt;주문 내용 조회 (Query Model)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;리파지토리-모델-구현&quot;&gt;리파지토리, 모델 구현&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;기본적으로 애그리거트(루트) 단위로 리파지토리 생성
    &lt;ul&gt;
      &lt;li&gt;테이블 단위로 존재하는 것이 아니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리포지토리는 완전한 애그리거트를 다룸
    &lt;ul&gt;
      &lt;li&gt;로딩 시점에 애그리거트에 속한 모든 연관 객체 로딩
        &lt;ul&gt;
          &lt;li&gt;즉 엔티티나 콜렉션에 대해 EAGER 로딩 기본으로 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;저장 시점에 애그리거트에 속한 모든 연관객체 저장&lt;/li&gt;
      &lt;li&gt;삭제 시점에 애그리거트에 속한 모든 연관객체 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;별도 테이블이라고 무조건 Entity 라고 생각하지 말자
    &lt;ul&gt;
      &lt;li&gt;한 애그리거트에 속해 있다면 Value가 아닐지 의심해보자
        &lt;ul&gt;
          &lt;li&gt;Value라고 생각되면, JPA의 @Embeddable 어노테이션을 사용해서 애그리거트 루트 엔티티에 밸류로 포함시키자.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;밸류 컬렉션
        &lt;ul&gt;
          &lt;li&gt;애그리거트 내부의 콜렉션은 주로 밸류 콜렉션
            &lt;ul&gt;
              &lt;li&gt;엔티티일 경우는 드물다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애그리거트간의 연관
    &lt;ul&gt;
      &lt;li&gt;애그리거트 루트를 참조한다.&lt;/li&gt;
      &lt;li&gt;직접 참조보다는 &lt;strong&gt;ID를 통한 간접 참조를 선호&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;편한 탐색 오용 방지 (다른 애그리거트 루트에서 다른 커스터머의 패스워드를 손쉽게 바꿀 수 있게된다.)&lt;/li&gt;
          &lt;li&gt;성능에 대한 고민 제거&lt;/li&gt;
          &lt;li&gt;시스템 확장시 유리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;올바른-소프트웨어&quot;&gt;올바른 소프트웨어?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;사용자에게 가치를 주는 SW
    &lt;ul&gt;
      &lt;li&gt;만드는게 어떤건지를 알아야 할텐데…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인 중심 사고
    &lt;ul&gt;
      &lt;li&gt;도메인 중심으로 사고하게 되면 만드는게 무엇인지 잘 이해할 가능성이 높아진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BDD (Behavior-Driven Development)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;가치의-변화에-대응&quot;&gt;가치의 변화에 대응&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;변화에 대응할 수 있는 역량 필요&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;객체지향, 함수형 사고&lt;/li&gt;
      &lt;li&gt;리펙토링&lt;/li&gt;
      &lt;li&gt;TDD&lt;/li&gt;
      &lt;li&gt;기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;요즘-기술-좋은-기술-&quot;&gt;요즘 기술, 좋은 기술 ?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;상황에 맞는 기술 선택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조직 상황을 고려하지 않은 기술은 변화에 빠르게 대응할 수 없게 만들어 경쟁력 낮춤&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 18 May 2017 13:40:00 +0000</pubDate>
        <link>https://wckhg89.github.io/archivers/ddd</link>
        <guid isPermaLink="true">https://wckhg89.github.io/archivers/ddd</guid>
        
        
        <category>세미나</category>
        
      </item>
    
      <item>
        <title>스프링 배치(스프링 Boot 기반)삽질기 2탄 - Spring Batch Meta-data Schema 커스터마이징</title>
        <description>&lt;p&gt;회사에서 스프링 배치를 이용한 배치성 프로그램을 제작을 하게 되었습니다.
스프링배치를 많이 다뤄본 경험이 부족하여 이번 프로젝트를 진행하며 많은 삽질을 경험했는데,
삽질 내용을 남기고자 포스팅을 시작합니다. 총 3편으로 포스팅을 진행하려 합니다.
오늘 포스팅은 2번째 포스팅으로써 Spring Batch Meta-data Schema를 커스터마이징 하는 방법에 대해서 포스팅 하고자 합니다.&lt;/p&gt;

&lt;h1 id=&quot;시작하며&quot;&gt;시작하며&lt;/h1&gt;

&lt;p&gt;스프링배치는 아래와 같은 테이블구조로 메타데이터를 자동으로 관리해 줍니다. 따라서 배치를 시작할때 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.batch.core&lt;/code&gt; 패키지에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;schema-*.sql&lt;/code&gt; 파일을 참조해서 스키마를 디자인 해주게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/batch_schema.png&quot; alt=&quot;batch_schema&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;출처 : http://docs.spring.io/spring-batch/reference/html/metaDataSchema.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;오늘 포스팅에서는 스프링 배치 Meta-data Schema를 커스터마이징 하는 방법에 대해서 알아보고자 합니다.&lt;/p&gt;

&lt;h1 id=&quot;orgspringframeworkbootspring-boot-starter-batch-dependency-까보기&quot;&gt;org.springframework.boot:spring-boot-starter-batch Dependency 까보기!&lt;/h1&gt;

&lt;p&gt;먼저 배치 스키마를 커스터마이징을 해주기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.boot:spring-boot-starter-batch&lt;/code&gt; 패키지가 어떤식으로 설정을 주는지를 알아야 합니다.&lt;/p&gt;

&lt;p&gt;해당 패키지의 의존성이 어떻게 걸려있는지 먼저 확인하고자 &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;을 찾아보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starters&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.2.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-batch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Spring Boot Batch Starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Starter for using Spring Batch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://projects.spring.io/spring-boot/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;organization&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Pivotal Software, Inc.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://www.spring.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/organization&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;main.basedir&amp;gt;&lt;/span&gt;${basedir}/../..&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main.basedir&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.batch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-batch-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.basepom.maven&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;duplicate-finder-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
						&lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;duplicate-dependencies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
						&lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;validate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
						&lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
							&lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;check&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
						&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
						&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
							&lt;span class=&quot;nt&quot;&gt;&amp;lt;exceptions&amp;gt;&lt;/span&gt;
								&lt;span class=&quot;nt&quot;&gt;&amp;lt;exception&amp;gt;&lt;/span&gt;
									&lt;span class=&quot;nt&quot;&gt;&amp;lt;conflictingDependencies&amp;gt;&lt;/span&gt;
										&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
											&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;xpp3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
											&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;xpp3_min&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
										&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
										&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
											&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;xmlpull&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
											&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;xmlpull&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
										&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
									&lt;span class=&quot;nt&quot;&gt;&amp;lt;/conflictingDependencies&amp;gt;&lt;/span&gt;
								&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;
							&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exceptions&amp;gt;&lt;/span&gt;
						&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;출처 : https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/spring-boot-starter-batch/pom.xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해당 패키지에 주입된 의존성을 확인해보니&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.batch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-batch-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-start&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-jdbc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-batch-core&lt;/code&gt; 세가지의 의존성을 가지고 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-logger&quot;&gt;
17:25:35.466 [WARN ] [main] [o.s.b.a.batch.BasicBatchConfigurer] [createJobRepository:150] - JPA does not support custom isolation levels, so locks may not be taken when launching Jobs
17:25:35.473 [INFO ] [main] [o.s.b.c.r.s.JobRepositoryFactoryBean] [afterPropertiesSet:183] - No database type set, using meta data indicating: H2
17:25:35.669 [INFO ] [main] [o.s.b.c.l.support.SimpleJobLauncher] [afterPropertiesSet:195] - No TaskExecutor has been set, defaulting to synchronous executor.
17:25:35.714 [INFO ] [main] [o.s.jdbc.datasource.init.ScriptUtils] [executeSqlScript:442] - Executing SQL script from class path resource [org/springframework/batch/core/schema-h2.sql]
17:25:35.730 [INFO ] [main] [o.s.jdbc.datasource.init.ScriptUtils] [executeSqlScript:508] - Executed SQL script from class path resource [org/springframework/batch/core/schema-h2.sql] in 16 ms.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그리고 로그를 확인해보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicBatchConfigurer&lt;/code&gt; Bean에서 스키마에 대한 설정을 시작하는 것으로 보입니다. 해당 Bean을 찾아서 열어보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cm&quot;&gt;/*
 * Copyright 2012-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;autoconfigure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.annotation.PostConstruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.EntityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.sql.DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.logging.Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.logging.LogFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.configuration.annotation.BatchConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.explore.JobExplorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.explore.support.JobExplorerFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.launch.JobLauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.launch.support.SimpleJobLauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.repository.JobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.batch.core.repository.support.JobRepositoryFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.jdbc.datasource.DataSourceTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.orm.jpa.JpaTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.PlatformTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.util.StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Basic {@link BatchConfigurer} implementation.
 *
 * @author Dave Syer
 * @author Andy Wilkinson
 * @author Kazuki Shimizu
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicBatchConfigurer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasicBatchConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


  &lt;span class=&quot;c1&quot;&gt;// 요녀석 같은 느낌!&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityManagerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManagerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionManagerCustomizers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobLauncher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobLauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobExplorer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobExplorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * Create a new {@link BasicBatchConfigurer} instance.
	 * @param properties the batch properties
	 * @param dataSource the underlying data source
	 * @param transactionManagerCustomizers transaction manager customizers (or
	 * {@code null})
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BasicBatchConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TransactionManagerCustomizers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManagerCustomizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * Create a new {@link BasicBatchConfigurer} instance.
	 * @param properties the batch proper